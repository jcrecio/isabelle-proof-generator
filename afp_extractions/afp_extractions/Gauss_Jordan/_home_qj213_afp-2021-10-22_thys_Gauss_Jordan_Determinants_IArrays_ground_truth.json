{"file_name": "/home/qj213/afp-2021-10-22/thys/Gauss_Jordan/Determinants_IArrays.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Gauss_Jordan", "problem_names": ["lemma Gauss_Jordan_in_ij_det_P_iarrays_code[code]: \"Gauss_Jordan_in_ij_det_P_iarrays A i j \n    = (let n = least_non_zero_position_of_vector_from_index (column_iarray j A) i;\n           interchange_A = interchange_rows_iarray A i n;\n           A' = mult_row_iarray interchange_A i (1 / interchange_A !! i !! j)\n       in (if i = n then 1 / A !! i !! j else - 1 / A !! n !! j, IArray.of_fun (\\<lambda>s. if s = i then A' !! s else row_add_iarray A' s i (- interchange_A !! s !! j) !! s) (nrows_iarray A)))\"", "lemma matrix_to_iarray_fst_Gauss_Jordan_in_ij_det_P:\nassumes ex_n: \"\\<exists>n. A $ n $ j \\<noteq> 0 \\<and> i \\<le> n\"\nshows \"fst (Gauss_Jordan_in_ij_det_P A i j) = fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) (to_nat i) (to_nat j))\"", "lemma matrix_to_iarray_snd_Gauss_Jordan_in_ij_det_P:\nassumes ex_n: \"\\<exists>n. A $ n $ j \\<noteq> 0 \\<and> i \\<le> n\"\nshows \"matrix_to_iarray (snd (Gauss_Jordan_in_ij_det_P A i j)) = snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) (to_nat i) (to_nat j))\"", "lemma matrix_to_iarray_fst_Gauss_Jordan_column_k_det_P:\nassumes i: \"i\\<le>nrows A\" and k: \"k<ncols A\"\nshows \"fst (Gauss_Jordan_column_k_det_P (n, i, A) k) = fst (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k)\"", "lemma matrix_to_iarray_fst_snd_Gauss_Jordan_column_k_det_P:\nassumes i: \"i\\<le>nrows A\" and k: \"k<ncols A\"\nshows \"fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) = fst (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k))\"", "lemma matrix_to_iarray_snd_snd_Gauss_Jordan_column_k_det_P:\nassumes i: \"i\\<le>nrows A\" and k: \"k<ncols A\"\nshows \"matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P (n, i, A) k))) = snd (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k))\"", "lemma fst_snd_Gauss_Jordan_column_k_det_P_le_nrows:\nassumes i: \"i\\<le>nrows A\"\nshows \"fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) \\<le> nrows A\"", "lemma \nassumes \"k<ncols A\"\nshows matrix_to_iarray_fst_Gauss_Jordan_upt_k_det_P: \"fst (Gauss_Jordan_upt_k_det_P A k) = fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k)\"\nand matrix_to_iarray_snd_Gauss_Jordan_upt_k_det_P: \"matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) = snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k)\"\nand \"fst (snd (foldl Gauss_Jordan_column_k_det_P (1, 0, A) [0..<Suc k])) \\<le> nrows A\"\nand \"fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays (1, 0, matrix_to_iarray A) [0..<Suc k])) = fst (snd (foldl Gauss_Jordan_column_k_det_P (1, 0, A) [0..<Suc k]))\"", "lemma matrix_to_iarray_fst_Gauss_Jordan_det_P:\nshows \"fst (Gauss_Jordan_det_P A) = fst (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A))\"", "lemma matrix_to_iarray_snd_Gauss_Jordan_det_P:\nshows \"matrix_to_iarray (snd (Gauss_Jordan_det_P A)) = snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A))\"", "lemma matrix_to_iarray_det[code_unfold]:\nfixes A::\"'a::{field}^'n::{mod_type}^'n::{mod_type}\"\nshows \"det A = det_iarrays (matrix_to_iarray A)\""], "translations": [["", "lemma Gauss_Jordan_in_ij_det_P_iarrays_code[code]: \"Gauss_Jordan_in_ij_det_P_iarrays A i j \n    = (let n = least_non_zero_position_of_vector_from_index (column_iarray j A) i;\n           interchange_A = interchange_rows_iarray A i n;\n           A' = mult_row_iarray interchange_A i (1 / interchange_A !! i !! j)\n       in (if i = n then 1 / A !! i !! j else - 1 / A !! n !! j, IArray.of_fun (\\<lambda>s. if s = i then A' !! s else row_add_iarray A' s i (- interchange_A !! s !! j) !! s) (nrows_iarray A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gauss_Jordan_in_ij_det_P_iarrays A i j =\n    (let n = least_non_zero_position_of_vector_from_index\n              (column_iarray j A) i;\n         interchange_A = interchange_rows_iarray A i n;\n         A' = mult_row_iarray interchange_A i\n               ((1::'a) / interchange_A !! i !! j)\n     in (if i = n then (1::'a) / A !! i !! j else - (1::'a) / A !! n !! j,\n         IArray.of_fun\n          (\\<lambda>s.\n              if s = i then A' !! s\n              else row_add_iarray A' s i (- interchange_A !! s !! j) !! s)\n          (nrows_iarray A)))", "unfolding Gauss_Jordan_in_ij_det_P_iarrays_def Gauss_Jordan_in_ij_iarrays_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i =\n        least_non_zero_position_of_vector_from_index (column_iarray j A) i\n     then (1::'a) / A !! i !! j\n     else - (1::'a) /\n          A !!\n          least_non_zero_position_of_vector_from_index (column_iarray j A)\n           i !!\n          j,\n     IArray.of_fun\n      (\\<lambda>s.\n          if s = i\n          then mult_row_iarray\n                (interchange_rows_iarray A i\n                  (least_non_zero_position_of_vector_from_index\n                    (column_iarray j A) i))\n                i ((1::'a) /\n                   interchange_rows_iarray A i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j A) i) !!\n                   i !!\n                   j) !!\n               s\n          else row_add_iarray\n                (mult_row_iarray\n                  (interchange_rows_iarray A i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j A) i))\n                  i ((1::'a) /\n                     interchange_rows_iarray A i\n                      (least_non_zero_position_of_vector_from_index\n                        (column_iarray j A) i) !!\n                     i !!\n                     j))\n                s i\n                (- interchange_rows_iarray A i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j A) i) !!\n                   s !!\n                   j) !!\n               s)\n      (nrows_iarray A)) =\n    (if i =\n        least_non_zero_position_of_vector_from_index (column_iarray j A) i\n     then (1::'a) / A !! i !! j\n     else - (1::'a) /\n          A !!\n          least_non_zero_position_of_vector_from_index (column_iarray j A)\n           i !!\n          j,\n     IArray.of_fun\n      (\\<lambda>s.\n          if s = i\n          then mult_row_iarray\n                (interchange_rows_iarray A i\n                  (least_non_zero_position_of_vector_from_index\n                    (column_iarray j A) i))\n                i ((1::'a) /\n                   interchange_rows_iarray A i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j A) i) !!\n                   i !!\n                   j) !!\n               s\n          else row_add_iarray\n                (mult_row_iarray\n                  (interchange_rows_iarray A i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j A) i))\n                  i ((1::'a) /\n                     interchange_rows_iarray A i\n                      (least_non_zero_position_of_vector_from_index\n                        (column_iarray j A) i) !!\n                     i !!\n                     j))\n                s i\n                (- interchange_rows_iarray A i\n                    (least_non_zero_position_of_vector_from_index\n                      (column_iarray j A) i) !!\n                   s !!\n                   j) !!\n               s)\n      (nrows_iarray A))", ".."], ["", "lemma matrix_to_iarray_fst_Gauss_Jordan_in_ij_det_P:\nassumes ex_n: \"\\<exists>n. A $ n $ j \\<noteq> 0 \\<and> i \\<le> n\"\nshows \"fst (Gauss_Jordan_in_ij_det_P A i j) = fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) (to_nat i) (to_nat j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_in_ij_det_P A i j) =\n    fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A)\n          (mod_type_class.to_nat i) (mod_type_class.to_nat j))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_in_ij_det_P A i j) =\n    fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A)\n          (mod_type_class.to_nat i) (mod_type_class.to_nat j))", "have least_n_eq: \"least_non_zero_position_of_vector_from_index (vec_to_iarray (column j A)) (to_nat i) = to_nat (LEAST n. A $ n $ j \\<noteq> 0 \\<and> i \\<le> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. least_non_zero_position_of_vector_from_index\n     (vec_to_iarray (column j A)) (mod_type_class.to_nat i) =\n    mod_type_class.to_nat\n     (LEAST n. A $ n $ j \\<noteq> (0::'b) \\<and> i \\<le> n)", "by (rule vec_to_iarray_least_non_zero_position_of_vector_from_index'[unfolded matrix_vector_all_zero_from_index[symmetric]], metis ex_n)"], ["proof (state)\nthis:\n  least_non_zero_position_of_vector_from_index (vec_to_iarray (column j A))\n   (mod_type_class.to_nat i) =\n  mod_type_class.to_nat\n   (LEAST n. A $ n $ j \\<noteq> (0::'b) \\<and> i \\<le> n)\n\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_in_ij_det_P A i j) =\n    fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A)\n          (mod_type_class.to_nat i) (mod_type_class.to_nat j))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_in_ij_det_P A i j) =\n    fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A)\n          (mod_type_class.to_nat i) (mod_type_class.to_nat j))", "unfolding Gauss_Jordan_in_ij_det_P_def Gauss_Jordan_in_ij_det_P_iarrays_def Let_def fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = (LEAST n. A $ n $ j \\<noteq> (0::'b) \\<and> i \\<le> n)\n     then (1::'b) / A $ i $ j\n     else - (1::'b) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'b) \\<and> i \\<le> n) $ j) =\n    (if mod_type_class.to_nat i =\n        least_non_zero_position_of_vector_from_index\n         (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n         (mod_type_class.to_nat i)\n     then (1::'b) /\n          matrix_to_iarray A !! mod_type_class.to_nat i !!\n          mod_type_class.to_nat j\n     else - (1::'b) /\n          matrix_to_iarray A !!\n          least_non_zero_position_of_vector_from_index\n           (column_iarray (mod_type_class.to_nat j) (matrix_to_iarray A))\n           (mod_type_class.to_nat i) !!\n          mod_type_class.to_nat j)", "unfolding  least_n_eq[unfolded vec_to_iarray_column]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = (LEAST n. A $ n $ j \\<noteq> (0::'b) \\<and> i \\<le> n)\n     then (1::'b) / A $ i $ j\n     else - (1::'b) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'b) \\<and> i \\<le> n) $ j) =\n    (if mod_type_class.to_nat i =\n        mod_type_class.to_nat\n         (LEAST n. A $ n $ j \\<noteq> (0::'b) \\<and> i \\<le> n)\n     then (1::'b) /\n          matrix_to_iarray A !! mod_type_class.to_nat i !!\n          mod_type_class.to_nat j\n     else - (1::'b) /\n          matrix_to_iarray A !!\n          mod_type_class.to_nat\n           (LEAST n. A $ n $ j \\<noteq> (0::'b) \\<and> i \\<le> n) !!\n          mod_type_class.to_nat j)", "unfolding matrix_to_iarray_nth"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = (LEAST n. A $ n $ j \\<noteq> (0::'b) \\<and> i \\<le> n)\n     then (1::'b) / A $ i $ j\n     else - (1::'b) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'b) \\<and> i \\<le> n) $ j) =\n    (if mod_type_class.to_nat i =\n        mod_type_class.to_nat\n         (LEAST n. A $ n $ j \\<noteq> (0::'b) \\<and> i \\<le> n)\n     then (1::'b) / A $ i $ j\n     else - (1::'b) /\n          A $ (LEAST n. A $ n $ j \\<noteq> (0::'b) \\<and> i \\<le> n) $ j)", "by auto"], ["proof (state)\nthis:\n  fst (Gauss_Jordan_in_ij_det_P A i j) =\n  fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A)\n        (mod_type_class.to_nat i) (mod_type_class.to_nat j))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary matrix_to_iarray_fst_Gauss_Jordan_in_ij_det_P':\nassumes \"\\<not> (vector_all_zero_from_index (to_nat i, vec_to_iarray (column j A)))\"\nshows \"fst (Gauss_Jordan_in_ij_det_P A i j) = fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) (to_nat i) (to_nat j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_in_ij_det_P A i j) =\n    fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A)\n          (mod_type_class.to_nat i) (mod_type_class.to_nat j))", "using matrix_to_iarray_fst_Gauss_Jordan_in_ij_det_P assms"], ["proof (prove)\nusing this:\n  \\<exists>n.\n     ?A $ n $ ?j \\<noteq> (0::?'b) \\<and> ?i \\<le> n \\<Longrightarrow>\n  fst (Gauss_Jordan_in_ij_det_P ?A ?i ?j) =\n  fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray ?A)\n        (mod_type_class.to_nat ?i) (mod_type_class.to_nat ?j))\n  \\<not> vector_all_zero_from_index\n          (mod_type_class.to_nat i, vec_to_iarray (column j A))\n\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_in_ij_det_P A i j) =\n    fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A)\n          (mod_type_class.to_nat i) (mod_type_class.to_nat j))", "unfolding matrix_vector_all_zero_from_index[symmetric]"], ["proof (prove)\nusing this:\n  \\<exists>n.\n     ?A $ n $ ?j \\<noteq> (0::?'b) \\<and> ?i \\<le> n \\<Longrightarrow>\n  fst (Gauss_Jordan_in_ij_det_P ?A ?i ?j) =\n  fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray ?A)\n        (mod_type_class.to_nat ?i) (mod_type_class.to_nat ?j))\n  \\<not> (\\<forall>m\\<ge>i. A $ m $ j = (0::'a))\n\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_in_ij_det_P A i j) =\n    fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A)\n          (mod_type_class.to_nat i) (mod_type_class.to_nat j))", "by auto"], ["", "lemma matrix_to_iarray_snd_Gauss_Jordan_in_ij_det_P:\nassumes ex_n: \"\\<exists>n. A $ n $ j \\<noteq> 0 \\<and> i \\<le> n\"\nshows \"matrix_to_iarray (snd (Gauss_Jordan_in_ij_det_P A i j)) = snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) (to_nat i) (to_nat j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_in_ij_det_P A i j)) =\n    snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A)\n          (mod_type_class.to_nat i) (mod_type_class.to_nat j))", "unfolding Gauss_Jordan_in_ij_det_P_def Gauss_Jordan_in_ij_det_P_iarrays_def Let_def snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (Gauss_Jordan_in_ij A i j) =\n    Gauss_Jordan_in_ij_iarrays (matrix_to_iarray A)\n     (mod_type_class.to_nat i) (mod_type_class.to_nat j)", "by (rule matrix_to_iarray_Gauss_Jordan_in_ij, simp add: matrix_vector_all_zero_from_index[symmetric], metis ex_n)"], ["", "lemma matrix_to_iarray_fst_Gauss_Jordan_column_k_det_P:\nassumes i: \"i\\<le>nrows A\" and k: \"k<ncols A\"\nshows \"fst (Gauss_Jordan_column_k_det_P (n, i, A) k) = fst (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_column_k_det_P (n, i, A) k) =\n    fst (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k)", "proof (cases \"i<nrows A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i < nrows A \\<Longrightarrow>\n    fst (Gauss_Jordan_column_k_det_P (n, i, A) k) =\n    fst (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k)\n 2. \\<not> i < nrows A \\<Longrightarrow>\n    fst (Gauss_Jordan_column_k_det_P (n, i, A) k) =\n    fst (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k)", "case True"], ["proof (state)\nthis:\n  i < nrows A\n\ngoal (2 subgoals):\n 1. i < nrows A \\<Longrightarrow>\n    fst (Gauss_Jordan_column_k_det_P (n, i, A) k) =\n    fst (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k)\n 2. \\<not> i < nrows A \\<Longrightarrow>\n    fst (Gauss_Jordan_column_k_det_P (n, i, A) k) =\n    fst (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_column_k_det_P (n, i, A) k) =\n    fst (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k)", "unfolding Gauss_Jordan_column_k_det_P_def Gauss_Jordan_column_k_det_P_iarrays_def Let_def snd_conv fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n            i = nrows A\n         then (n, i, A)\n         else (fst (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (n, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k)))", "unfolding matrix_to_iarray_nrows matrix_vector_all_zero_from_index"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (if vector_all_zero_from_index\n             (mod_type_class.to_nat (mod_type_class.from_nat i),\n              vec_to_iarray (column (mod_type_class.from_nat k) A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (n, i, A)\n         else (fst (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (n, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k)))", "using matrix_to_iarray_fst_Gauss_Jordan_in_ij_det_P'[of \"from_nat i\" \"from_nat k\" A]"], ["proof (prove)\nusing this:\n  \\<not> vector_all_zero_from_index\n          (mod_type_class.to_nat (mod_type_class.from_nat i),\n           vec_to_iarray\n            (column (mod_type_class.from_nat k) A)) \\<Longrightarrow>\n  fst (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n        (mod_type_class.from_nat k)) =\n  fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A)\n        (mod_type_class.to_nat (mod_type_class.from_nat i))\n        (mod_type_class.to_nat (mod_type_class.from_nat k)))\n\ngoal (1 subgoal):\n 1. fst (if vector_all_zero_from_index\n             (mod_type_class.to_nat (mod_type_class.from_nat i),\n              vec_to_iarray (column (mod_type_class.from_nat k) A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (n, i, A)\n         else (fst (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (n, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k)))", "unfolding vec_to_iarray_column"], ["proof (prove)\nusing this:\n  \\<not> vector_all_zero_from_index\n          (mod_type_class.to_nat (mod_type_class.from_nat i),\n           column_iarray (mod_type_class.to_nat (mod_type_class.from_nat k))\n            (matrix_to_iarray A)) \\<Longrightarrow>\n  fst (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n        (mod_type_class.from_nat k)) =\n  fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A)\n        (mod_type_class.to_nat (mod_type_class.from_nat i))\n        (mod_type_class.to_nat (mod_type_class.from_nat k)))\n\ngoal (1 subgoal):\n 1. fst (if vector_all_zero_from_index\n             (mod_type_class.to_nat (mod_type_class.from_nat i),\n              column_iarray\n               (mod_type_class.to_nat (mod_type_class.from_nat k))\n               (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (n, i, A)\n         else (fst (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (n, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k)))", "unfolding to_nat_from_nat_id[OF True[unfolded nrows_def]]"], ["proof (prove)\nusing this:\n  \\<not> vector_all_zero_from_index\n          (i, column_iarray\n               (mod_type_class.to_nat (mod_type_class.from_nat k))\n               (matrix_to_iarray A)) \\<Longrightarrow>\n  fst (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n        (mod_type_class.from_nat k)) =\n  fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n        (mod_type_class.to_nat (mod_type_class.from_nat k)))\n\ngoal (1 subgoal):\n 1. fst (if vector_all_zero_from_index\n             (i, column_iarray\n                  (mod_type_class.to_nat (mod_type_class.from_nat k))\n                  (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (n, i, A)\n         else (fst (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (n, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k)))", "unfolding to_nat_from_nat_id[OF k[unfolded ncols_def]]"], ["proof (prove)\nusing this:\n  \\<not> vector_all_zero_from_index\n          (i, column_iarray k (matrix_to_iarray A)) \\<Longrightarrow>\n  fst (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n        (mod_type_class.from_nat k)) =\n  fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i k)\n\ngoal (1 subgoal):\n 1. fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (n, i, A)\n         else (fst (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (n, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k)))", "by auto"], ["proof (state)\nthis:\n  fst (Gauss_Jordan_column_k_det_P (n, i, A) k) =\n  fst (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k)\n\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    fst (Gauss_Jordan_column_k_det_P (n, i, A) k) =\n    fst (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    fst (Gauss_Jordan_column_k_det_P (n, i, A) k) =\n    fst (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k)", "case False"], ["proof (state)\nthis:\n  \\<not> i < nrows A\n\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    fst (Gauss_Jordan_column_k_det_P (n, i, A) k) =\n    fst (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k)", "hence \"i=nrows A\""], ["proof (prove)\nusing this:\n  \\<not> i < nrows A\n\ngoal (1 subgoal):\n 1. i = nrows A", "using i"], ["proof (prove)\nusing this:\n  \\<not> i < nrows A\n  i \\<le> nrows A\n\ngoal (1 subgoal):\n 1. i = nrows A", "by simp"], ["proof (state)\nthis:\n  i = nrows A\n\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    fst (Gauss_Jordan_column_k_det_P (n, i, A) k) =\n    fst (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = nrows A\n\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_column_k_det_P (n, i, A) k) =\n    fst (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k)", "unfolding Gauss_Jordan_column_k_det_P_def Gauss_Jordan_column_k_det_P_iarrays_def Let_def snd_conv fst_conv"], ["proof (prove)\nusing this:\n  i = nrows A\n\ngoal (1 subgoal):\n 1. fst (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n            i = nrows A\n         then (n, i, A)\n         else (fst (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (n, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k)))", "unfolding matrix_to_iarray_nrows"], ["proof (prove)\nusing this:\n  i = nrows_iarray (matrix_to_iarray A)\n\ngoal (1 subgoal):\n 1. fst (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (n, i, A)\n         else (fst (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n                     (mod_type_class.from_nat k)))) =\n    fst (if vector_all_zero_from_index\n             (i, column_iarray k (matrix_to_iarray A)) \\<or>\n            i = nrows_iarray (matrix_to_iarray A)\n         then (n, i, matrix_to_iarray A)\n         else (fst (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k) *\n               n,\n               i + 1,\n               snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n                     k)))", "by force"], ["proof (state)\nthis:\n  fst (Gauss_Jordan_column_k_det_P (n, i, A) k) =\n  fst (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma matrix_to_iarray_fst_snd_Gauss_Jordan_column_k_det_P:\nassumes i: \"i\\<le>nrows A\" and k: \"k<ncols A\"\nshows \"fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) = fst (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) =\n    fst (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "proof (cases \"i<nrows A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i < nrows A \\<Longrightarrow>\n    fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) =\n    fst (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))\n 2. \\<not> i < nrows A \\<Longrightarrow>\n    fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) =\n    fst (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "case True"], ["proof (state)\nthis:\n  i < nrows A\n\ngoal (2 subgoals):\n 1. i < nrows A \\<Longrightarrow>\n    fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) =\n    fst (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))\n 2. \\<not> i < nrows A \\<Longrightarrow>\n    fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) =\n    fst (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) =\n    fst (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "unfolding Gauss_Jordan_column_k_det_P_def Gauss_Jordan_column_k_det_P_iarrays_def Let_def snd_conv fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                     A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n                 i = nrows A\n              then (n, i, A)\n              else (fst (Gauss_Jordan_in_ij_det_P A\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k)) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P A\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k))))) =\n    fst (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "unfolding matrix_to_iarray_nrows matrix_vector_all_zero_from_index"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (if vector_all_zero_from_index\n                  (mod_type_class.to_nat (mod_type_class.from_nat i),\n                   vec_to_iarray\n                    (column (mod_type_class.from_nat k) A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, A)\n              else (fst (Gauss_Jordan_in_ij_det_P A\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k)) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P A\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k))))) =\n    fst (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "unfolding vec_to_iarray_column"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (if vector_all_zero_from_index\n                  (mod_type_class.to_nat (mod_type_class.from_nat i),\n                   column_iarray\n                    (mod_type_class.to_nat (mod_type_class.from_nat k))\n                    (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, A)\n              else (fst (Gauss_Jordan_in_ij_det_P A\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k)) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P A\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k))))) =\n    fst (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "unfolding to_nat_from_nat_id[OF True[unfolded nrows_def]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (if vector_all_zero_from_index\n                  (i, column_iarray\n                       (mod_type_class.to_nat (mod_type_class.from_nat k))\n                       (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, A)\n              else (fst (Gauss_Jordan_in_ij_det_P A\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k)) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P A\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k))))) =\n    fst (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "unfolding to_nat_from_nat_id[OF k[unfolded ncols_def]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, A)\n              else (fst (Gauss_Jordan_in_ij_det_P A\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k)) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P A\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k))))) =\n    fst (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "by auto"], ["proof (state)\nthis:\n  fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) =\n  fst (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n             k))\n\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) =\n    fst (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) =\n    fst (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "case False"], ["proof (state)\nthis:\n  \\<not> i < nrows A\n\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) =\n    fst (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> i < nrows A\n\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) =\n    fst (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "using assms"], ["proof (prove)\nusing this:\n  \\<not> i < nrows A\n  i \\<le> nrows A\n  k < ncols A\n\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) =\n    fst (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "unfolding Gauss_Jordan_column_k_det_P_def Gauss_Jordan_column_k_det_P_iarrays_def Let_def snd_conv fst_conv"], ["proof (prove)\nusing this:\n  \\<not> i < nrows A\n  i \\<le> nrows A\n  k < ncols A\n\ngoal (1 subgoal):\n 1. fst (snd (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                     A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n                 i = nrows A\n              then (n, i, A)\n              else (fst (Gauss_Jordan_in_ij_det_P A\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k)) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P A\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k))))) =\n    fst (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "unfolding matrix_to_iarray_nrows matrix_vector_all_zero_from_index"], ["proof (prove)\nusing this:\n  \\<not> i < nrows_iarray (matrix_to_iarray A)\n  i \\<le> nrows_iarray (matrix_to_iarray A)\n  k < ncols A\n\ngoal (1 subgoal):\n 1. fst (snd (if vector_all_zero_from_index\n                  (mod_type_class.to_nat (mod_type_class.from_nat i),\n                   vec_to_iarray\n                    (column (mod_type_class.from_nat k) A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, A)\n              else (fst (Gauss_Jordan_in_ij_det_P A\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k)) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P A\n                          (mod_type_class.from_nat i)\n                          (mod_type_class.from_nat k))))) =\n    fst (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "by auto"], ["proof (state)\nthis:\n  fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) =\n  fst (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n             k))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma matrix_to_iarray_snd_snd_Gauss_Jordan_column_k_det_P:\nassumes i: \"i\\<le>nrows A\" and k: \"k<ncols A\"\nshows \"matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P (n, i, A) k))) = snd (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A) k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P (n, i, A) k))) =\n    snd (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "proof (cases \"i<nrows A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i < nrows A \\<Longrightarrow>\n    matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P (n, i, A) k))) =\n    snd (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))\n 2. \\<not> i < nrows A \\<Longrightarrow>\n    matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P (n, i, A) k))) =\n    snd (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "case True"], ["proof (state)\nthis:\n  i < nrows A\n\ngoal (2 subgoals):\n 1. i < nrows A \\<Longrightarrow>\n    matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P (n, i, A) k))) =\n    snd (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))\n 2. \\<not> i < nrows A \\<Longrightarrow>\n    matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P (n, i, A) k))) =\n    snd (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P (n, i, A) k))) =\n    snd (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "unfolding Gauss_Jordan_column_k_det_P_def Gauss_Jordan_column_k_det_P_iarrays_def Let_def fst_conv snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                       A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n                   i = nrows A\n                then (n, i, A)\n                else (fst (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)) *\n                      n,\n                      i + 1,\n                      snd (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)))))) =\n    snd (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "unfolding matrix_to_iarray_nrows matrix_vector_all_zero_from_index"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (if vector_all_zero_from_index\n                    (mod_type_class.to_nat (mod_type_class.from_nat i),\n                     vec_to_iarray\n                      (column (mod_type_class.from_nat k) A)) \\<or>\n                   i = nrows_iarray (matrix_to_iarray A)\n                then (n, i, A)\n                else (fst (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)) *\n                      n,\n                      i + 1,\n                      snd (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)))))) =\n    snd (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "using matrix_to_iarray_snd_Gauss_Jordan_in_ij_det_P[of A \"from_nat k\" \"from_nat i\"]"], ["proof (prove)\nusing this:\n  \\<exists>n.\n     A $ n $ mod_type_class.from_nat k \\<noteq> (0::'a) \\<and>\n     mod_type_class.from_nat i \\<le> n \\<Longrightarrow>\n  matrix_to_iarray\n   (snd (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n          (mod_type_class.from_nat k))) =\n  snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A)\n        (mod_type_class.to_nat (mod_type_class.from_nat i))\n        (mod_type_class.to_nat (mod_type_class.from_nat k)))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (if vector_all_zero_from_index\n                    (mod_type_class.to_nat (mod_type_class.from_nat i),\n                     vec_to_iarray\n                      (column (mod_type_class.from_nat k) A)) \\<or>\n                   i = nrows_iarray (matrix_to_iarray A)\n                then (n, i, A)\n                else (fst (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)) *\n                      n,\n                      i + 1,\n                      snd (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)))))) =\n    snd (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "using matrix_vector_all_zero_from_index[of \"from_nat i\" A \"from_nat k\"]"], ["proof (prove)\nusing this:\n  \\<exists>n.\n     A $ n $ mod_type_class.from_nat k \\<noteq> (0::'a) \\<and>\n     mod_type_class.from_nat i \\<le> n \\<Longrightarrow>\n  matrix_to_iarray\n   (snd (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n          (mod_type_class.from_nat k))) =\n  snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A)\n        (mod_type_class.to_nat (mod_type_class.from_nat i))\n        (mod_type_class.to_nat (mod_type_class.from_nat k)))\n  (\\<forall>m\\<ge>mod_type_class.from_nat i.\n      A $ m $ mod_type_class.from_nat k = (0::'a)) =\n  vector_all_zero_from_index\n   (mod_type_class.to_nat (mod_type_class.from_nat i),\n    vec_to_iarray (column (mod_type_class.from_nat k) A))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (if vector_all_zero_from_index\n                    (mod_type_class.to_nat (mod_type_class.from_nat i),\n                     vec_to_iarray\n                      (column (mod_type_class.from_nat k) A)) \\<or>\n                   i = nrows_iarray (matrix_to_iarray A)\n                then (n, i, A)\n                else (fst (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)) *\n                      n,\n                      i + 1,\n                      snd (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)))))) =\n    snd (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "unfolding vec_to_iarray_column"], ["proof (prove)\nusing this:\n  \\<exists>n.\n     A $ n $ mod_type_class.from_nat k \\<noteq> (0::'a) \\<and>\n     mod_type_class.from_nat i \\<le> n \\<Longrightarrow>\n  matrix_to_iarray\n   (snd (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n          (mod_type_class.from_nat k))) =\n  snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A)\n        (mod_type_class.to_nat (mod_type_class.from_nat i))\n        (mod_type_class.to_nat (mod_type_class.from_nat k)))\n  (\\<forall>m\\<ge>mod_type_class.from_nat i.\n      A $ m $ mod_type_class.from_nat k = (0::'a)) =\n  vector_all_zero_from_index\n   (mod_type_class.to_nat (mod_type_class.from_nat i),\n    column_iarray (mod_type_class.to_nat (mod_type_class.from_nat k))\n     (matrix_to_iarray A))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (if vector_all_zero_from_index\n                    (mod_type_class.to_nat (mod_type_class.from_nat i),\n                     column_iarray\n                      (mod_type_class.to_nat (mod_type_class.from_nat k))\n                      (matrix_to_iarray A)) \\<or>\n                   i = nrows_iarray (matrix_to_iarray A)\n                then (n, i, A)\n                else (fst (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)) *\n                      n,\n                      i + 1,\n                      snd (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)))))) =\n    snd (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "unfolding to_nat_from_nat_id[OF True[unfolded nrows_def]]"], ["proof (prove)\nusing this:\n  \\<exists>n.\n     A $ n $ mod_type_class.from_nat k \\<noteq> (0::'a) \\<and>\n     mod_type_class.from_nat i \\<le> n \\<Longrightarrow>\n  matrix_to_iarray\n   (snd (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n          (mod_type_class.from_nat k))) =\n  snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i\n        (mod_type_class.to_nat (mod_type_class.from_nat k)))\n  (\\<forall>m\\<ge>mod_type_class.from_nat i.\n      A $ m $ mod_type_class.from_nat k = (0::'a)) =\n  vector_all_zero_from_index\n   (i, column_iarray (mod_type_class.to_nat (mod_type_class.from_nat k))\n        (matrix_to_iarray A))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (if vector_all_zero_from_index\n                    (i, column_iarray\n                         (mod_type_class.to_nat (mod_type_class.from_nat k))\n                         (matrix_to_iarray A)) \\<or>\n                   i = nrows_iarray (matrix_to_iarray A)\n                then (n, i, A)\n                else (fst (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)) *\n                      n,\n                      i + 1,\n                      snd (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)))))) =\n    snd (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "unfolding to_nat_from_nat_id[OF k[unfolded ncols_def]]"], ["proof (prove)\nusing this:\n  \\<exists>n.\n     A $ n $ mod_type_class.from_nat k \\<noteq> (0::'a) \\<and>\n     mod_type_class.from_nat i \\<le> n \\<Longrightarrow>\n  matrix_to_iarray\n   (snd (Gauss_Jordan_in_ij_det_P A (mod_type_class.from_nat i)\n          (mod_type_class.from_nat k))) =\n  snd (Gauss_Jordan_in_ij_det_P_iarrays (matrix_to_iarray A) i k)\n  (\\<forall>m\\<ge>mod_type_class.from_nat i.\n      A $ m $ mod_type_class.from_nat k = (0::'a)) =\n  vector_all_zero_from_index (i, column_iarray k (matrix_to_iarray A))\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (if vector_all_zero_from_index\n                    (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                   i = nrows_iarray (matrix_to_iarray A)\n                then (n, i, A)\n                else (fst (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)) *\n                      n,\n                      i + 1,\n                      snd (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)))))) =\n    snd (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "by auto"], ["proof (state)\nthis:\n  matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P (n, i, A) k))) =\n  snd (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n             k))\n\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P (n, i, A) k))) =\n    snd (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P (n, i, A) k))) =\n    snd (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "case False"], ["proof (state)\nthis:\n  \\<not> i < nrows A\n\ngoal (1 subgoal):\n 1. \\<not> i < nrows A \\<Longrightarrow>\n    matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P (n, i, A) k))) =\n    snd (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> i < nrows A\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P (n, i, A) k))) =\n    snd (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "using assms"], ["proof (prove)\nusing this:\n  \\<not> i < nrows A\n  i \\<le> nrows A\n  k < ncols A\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P (n, i, A) k))) =\n    snd (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n               k))", "unfolding Gauss_Jordan_column_k_det_P_def Gauss_Jordan_column_k_det_P_iarrays_def Let_def fst_conv snd_conv"], ["proof (prove)\nusing this:\n  \\<not> i < nrows A\n  i \\<le> nrows A\n  k < ncols A\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (if (\\<forall>m\\<ge>mod_type_class.from_nat i.\n                       A $ m $ mod_type_class.from_nat k = (0::'a)) \\<or>\n                   i = nrows A\n                then (n, i, A)\n                else (fst (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)) *\n                      n,\n                      i + 1,\n                      snd (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)))))) =\n    snd (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "unfolding matrix_to_iarray_nrows matrix_vector_all_zero_from_index"], ["proof (prove)\nusing this:\n  \\<not> i < nrows_iarray (matrix_to_iarray A)\n  i \\<le> nrows_iarray (matrix_to_iarray A)\n  k < ncols A\n\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (if vector_all_zero_from_index\n                    (mod_type_class.to_nat (mod_type_class.from_nat i),\n                     vec_to_iarray\n                      (column (mod_type_class.from_nat k) A)) \\<or>\n                   i = nrows_iarray (matrix_to_iarray A)\n                then (n, i, A)\n                else (fst (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)) *\n                      n,\n                      i + 1,\n                      snd (Gauss_Jordan_in_ij_det_P A\n                            (mod_type_class.from_nat i)\n                            (mod_type_class.from_nat k)))))) =\n    snd (snd (if vector_all_zero_from_index\n                  (i, column_iarray k (matrix_to_iarray A)) \\<or>\n                 i = nrows_iarray (matrix_to_iarray A)\n              then (n, i, matrix_to_iarray A)\n              else (fst (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k) *\n                    n,\n                    i + 1,\n                    snd (Gauss_Jordan_in_ij_det_P_iarrays\n                          (matrix_to_iarray A) i k))))", "by auto"], ["proof (state)\nthis:\n  matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P (n, i, A) k))) =\n  snd (snd (Gauss_Jordan_column_k_det_P_iarrays (n, i, matrix_to_iarray A)\n             k))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fst_snd_Gauss_Jordan_column_k_det_P_le_nrows:\nassumes i: \"i\\<le>nrows A\"\nshows \"fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) \\<le> nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_det_P (n, i, A) k)) \\<le> nrows A", "unfolding fst_snd_Gauss_Jordan_column_k_det_P_eq_fst_snd_Gauss_Jordan_column_k_PA[unfolded fst_snd_Gauss_Jordan_column_k_PA_eq]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_column_k (i, A) k) \\<le> nrows A", "by (rule fst_Gauss_Jordan_column_k[OF i])"], ["", "text\\<open>The proof of the following theorem is very similar to the ones of \\<open>foldl_Gauss_Jordan_column_k_eq\\<close>, \n      \\<open>rref_and_index_Gauss_Jordan_upt_k\\<close> and \\<open>foldl_Gauss_Jordan_column_k_det_P\\<close>.\\<close>"], ["", "lemma \nassumes \"k<ncols A\"\nshows matrix_to_iarray_fst_Gauss_Jordan_upt_k_det_P: \"fst (Gauss_Jordan_upt_k_det_P A k) = fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k)\"\nand matrix_to_iarray_snd_Gauss_Jordan_upt_k_det_P: \"matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) = snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k)\"\nand \"fst (snd (foldl Gauss_Jordan_column_k_det_P (1, 0, A) [0..<Suc k])) \\<le> nrows A\"\nand \"fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays (1, 0, matrix_to_iarray A) [0..<Suc k])) = fst (snd (foldl Gauss_Jordan_column_k_det_P (1, 0, A) [0..<Suc k]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (Gauss_Jordan_upt_k_det_P A k) =\n     fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k) &&&\n     matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n     snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k)) &&&\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))\n    \\<le> nrows A &&&\n    fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))", "using assms"], ["proof (prove)\nusing this:\n  k < ncols A\n\ngoal (1 subgoal):\n 1. (fst (Gauss_Jordan_upt_k_det_P A k) =\n     fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k) &&&\n     matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n     snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k)) &&&\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))\n    \\<le> nrows A &&&\n    fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))", "proof (induct k)"], ["proof (state)\ngoal (8 subgoals):\n 1. 0 < ncols A \\<Longrightarrow>\n    fst (Gauss_Jordan_upt_k_det_P A 0) =\n    fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) 0)\n 2. 0 < ncols A \\<Longrightarrow>\n    matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A 0)) =\n    snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) 0)\n 3. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc 0]))\n    \\<le> nrows A\n 4. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc 0])) =\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc 0]))\n 5. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 6. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 7. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 8. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "show \"fst (Gauss_Jordan_upt_k_det_P A 0) = fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_upt_k_det_P A 0) =\n    fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) 0)", "unfolding Gauss_Jordan_upt_k_det_P_def Gauss_Jordan_upt_k_det_P_iarrays_def Let_def fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc 0]) =\n    fst (foldl Gauss_Jordan_column_k_det_P_iarrays\n          (1::'a, 0, matrix_to_iarray A) [0..<Suc 0])", "by (simp, rule matrix_to_iarray_fst_Gauss_Jordan_column_k_det_P, simp_all add: ncols_def)"], ["proof (state)\nthis:\n  fst (Gauss_Jordan_upt_k_det_P A 0) =\n  fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) 0)\n\ngoal (7 subgoals):\n 1. 0 < ncols A \\<Longrightarrow>\n    matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A 0)) =\n    snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) 0)\n 2. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc 0]))\n    \\<le> nrows A\n 3. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc 0])) =\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc 0]))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 5. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 6. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 7. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "show \"matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A 0)) = snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A 0)) =\n    snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) 0)", "unfolding Gauss_Jordan_upt_k_det_P_def Gauss_Jordan_upt_k_det_P_iarrays_def Let_def fst_conv snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                 [0..<Suc 0]))) =\n    snd (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc 0]))", "by (simp, rule matrix_to_iarray_snd_snd_Gauss_Jordan_column_k_det_P, simp_all add: ncols_def)"], ["proof (state)\nthis:\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A 0)) =\n  snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) 0)\n\ngoal (6 subgoals):\n 1. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc 0]))\n    \\<le> nrows A\n 2. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc 0])) =\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc 0]))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 5. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 6. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "show \"fst (snd (foldl Gauss_Jordan_column_k_det_P (1, 0, A) [0..<Suc 0])) \\<le> nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc 0]))\n    \\<le> nrows A", "unfolding Gauss_Jordan_upt_k_det_P_def Gauss_Jordan_upt_k_det_P_iarrays_def Let_def fst_conv snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc 0]))\n    \\<le> nrows A", "by (simp, rule fst_snd_Gauss_Jordan_column_k_det_P_le_nrows, simp add: nrows_def)"], ["proof (state)\nthis:\n  fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc 0]))\n  \\<le> nrows A\n\ngoal (5 subgoals):\n 1. 0 < ncols A \\<Longrightarrow>\n    fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc 0])) =\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc 0]))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 5. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "show \"fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays (1, 0, matrix_to_iarray A) [0..<Suc 0])) = fst (snd (foldl Gauss_Jordan_column_k_det_P (1, 0, A) [0..<Suc 0]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc 0])) =\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc 0]))", "unfolding Gauss_Jordan_upt_k_det_P_def Gauss_Jordan_upt_k_det_P_iarrays_def Let_def fst_conv snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc 0])) =\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc 0]))", "by (simp, rule matrix_to_iarray_fst_snd_Gauss_Jordan_column_k_det_P[symmetric], simp_all add: ncols_def)"], ["proof (state)\nthis:\n  fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n             (1::'a, 0, matrix_to_iarray A) [0..<Suc 0])) =\n  fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc 0]))\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "fix k"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "assume \"(k < ncols A \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A k) = fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k))\" \n        and \"(k < ncols A \\<Longrightarrow> matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) = snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k))\"\n        and \"(k < ncols A \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P (1, 0, A) [0..<Suc k])) \\<le> nrows A)\"\n        and \"(k < ncols A \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays (1, 0, matrix_to_iarray A) [0..<Suc k])) = fst (snd (foldl Gauss_Jordan_column_k_det_P (1, 0, A) [0..<Suc k])))\"\n        and Suc_k_less_ncols: \"Suc k < ncols A\""], ["proof (state)\nthis:\n  k < ncols A \\<Longrightarrow>\n  fst (Gauss_Jordan_upt_k_det_P A k) =\n  fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k)\n  k < ncols A \\<Longrightarrow>\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n  snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k)\n  k < ncols A \\<Longrightarrow>\n  fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))\n  \\<le> nrows A\n  k < ncols A \\<Longrightarrow>\n  fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n             (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n  fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))\n  Suc k < ncols A\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "hence hyp1: \"fst (Gauss_Jordan_upt_k_det_P A k) = fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k)\"\nand hyp2: \"matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) = snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k)\"\nand hyp3: \"fst (snd (foldl Gauss_Jordan_column_k_det_P (1, 0, A) [0..<Suc k])) \\<le> nrows A\"\nand hyp4: \"(fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays (1, 0, matrix_to_iarray A) [0..<Suc k])) = fst (snd (foldl Gauss_Jordan_column_k_det_P (1, 0, A) [0..<Suc k])))\""], ["proof (prove)\nusing this:\n  k < ncols A \\<Longrightarrow>\n  fst (Gauss_Jordan_upt_k_det_P A k) =\n  fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k)\n  k < ncols A \\<Longrightarrow>\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n  snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k)\n  k < ncols A \\<Longrightarrow>\n  fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))\n  \\<le> nrows A\n  k < ncols A \\<Longrightarrow>\n  fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n             (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n  fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))\n  Suc k < ncols A\n\ngoal (1 subgoal):\n 1. (fst (Gauss_Jordan_upt_k_det_P A k) =\n     fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k) &&&\n     matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n     snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k)) &&&\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))\n    \\<le> nrows A &&&\n    fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))", "by auto"], ["proof (state)\nthis:\n  fst (Gauss_Jordan_upt_k_det_P A k) =\n  fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k)\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n  snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k)\n  fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))\n  \\<le> nrows A\n  fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n             (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n  fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "have list_rw: \"[0..<Suc (Suc k)] = [0..<(Suc k)] @ [Suc k]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [0..<Suc (Suc k)] = [0..<Suc k] @ [Suc k]", "by simp"], ["proof (state)\nthis:\n  [0..<Suc (Suc k)] = [0..<Suc k] @ [Suc k]\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "define f where \"f = foldl Gauss_Jordan_column_k_det_P (1, 0, A) [0..<Suc k]\""], ["proof (state)\nthis:\n  f = foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "define g where \"g = foldl Gauss_Jordan_column_k_det_P_iarrays (1, 0, matrix_to_iarray A) [0..<Suc k]\""], ["proof (state)\nthis:\n  g =\n  foldl Gauss_Jordan_column_k_det_P_iarrays (1::'a, 0, matrix_to_iarray A)\n   [0..<Suc k]\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "have f_rw: \"f = (fst f, fst (snd f), snd (snd f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = (fst f, fst (snd f), snd (snd f))", "by simp"], ["proof (state)\nthis:\n  f = (fst f, fst (snd f), snd (snd f))\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "have g_rw: \"g = (fst g, fst (snd g), snd (snd g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = (fst g, fst (snd g), snd (snd g))", "by simp"], ["proof (state)\nthis:\n  g = (fst g, fst (snd g), snd (snd g))\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "have fst_rw: \"fst g = fst f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst g = fst f", "unfolding f_def g_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (foldl Gauss_Jordan_column_k_det_P_iarrays\n          (1::'a, 0, matrix_to_iarray A) [0..<Suc k]) =\n    fst (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k])", "using hyp1[unfolded Gauss_Jordan_upt_k_det_P_def Gauss_Jordan_upt_k_det_P_iarrays_def Let_def fst_conv]"], ["proof (prove)\nusing this:\n  fst (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]) =\n  fst (foldl Gauss_Jordan_column_k_det_P_iarrays\n        (1::'a, 0, matrix_to_iarray A) [0..<Suc k])\n\ngoal (1 subgoal):\n 1. fst (foldl Gauss_Jordan_column_k_det_P_iarrays\n          (1::'a, 0, matrix_to_iarray A) [0..<Suc k]) =\n    fst (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k])", ".."], ["proof (state)\nthis:\n  fst g = fst f\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "have fst_snd_rw: \"fst (snd g) = fst (snd f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd g) = fst (snd f)", "unfolding f_def g_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))", "using hyp4"], ["proof (prove)\nusing this:\n  fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n             (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n  fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))", "."], ["proof (state)\nthis:\n  fst (snd g) = fst (snd f)\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "have snd_snd_rw: \"snd (snd g) = matrix_to_iarray (snd (snd f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd g) = matrix_to_iarray (snd (snd f))", "unfolding f_def g_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n    matrix_to_iarray\n     (snd (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                 [0..<Suc k])))", "using hyp2[unfolded Gauss_Jordan_upt_k_det_P_def Gauss_Jordan_upt_k_det_P_iarrays_def Let_def snd_conv]"], ["proof (prove)\nusing this:\n  matrix_to_iarray\n   (snd (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n               [0..<Suc k]))) =\n  snd (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n             (1::'a, 0, matrix_to_iarray A) [0..<Suc k]))\n\ngoal (1 subgoal):\n 1. snd (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n    matrix_to_iarray\n     (snd (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                 [0..<Suc k])))", ".."], ["proof (state)\nthis:\n  snd (snd g) = matrix_to_iarray (snd (snd f))\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "have fst_snd_f_le_nrows: \"fst (snd f) \\<le> nrows (snd (snd f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd f) \\<le> nrows (snd (snd f))", "unfolding f_def g_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))\n    \\<le> nrows\n           (snd (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                       [0..<Suc k])))", "using hyp3"], ["proof (prove)\nusing this:\n  fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))\n  \\<le> nrows A\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))\n    \\<le> nrows\n           (snd (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                       [0..<Suc k])))", "unfolding nrows_def"], ["proof (prove)\nusing this:\n  fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))\n  \\<le> CARD('c)\n\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k]))\n    \\<le> CARD('c)", "."], ["proof (state)\nthis:\n  fst (snd f) \\<le> nrows (snd (snd f))\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "have Suc_k_less_ncols': \"Suc k < ncols (snd (snd f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc k < ncols (snd (snd f))", "using Suc_k_less_ncols"], ["proof (prove)\nusing this:\n  Suc k < ncols A\n\ngoal (1 subgoal):\n 1. Suc k < ncols (snd (snd f))", "unfolding ncols_def"], ["proof (prove)\nusing this:\n  Suc k < CARD('b)\n\ngoal (1 subgoal):\n 1. Suc k < CARD('b)", "."], ["proof (state)\nthis:\n  Suc k < ncols (snd (snd f))\n\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n                         fst (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 4. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "show \"fst (Gauss_Jordan_upt_k_det_P A (Suc k)) = fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) (Suc k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n    fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) (Suc k))", "unfolding Gauss_Jordan_upt_k_det_P_def Gauss_Jordan_upt_k_det_P_iarrays_def Let_def fst_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n          [0..<Suc (Suc k)]) =\n    fst (foldl Gauss_Jordan_column_k_det_P_iarrays\n          (1::'a, 0, matrix_to_iarray A) [0..<Suc (Suc k)])", "unfolding list_rw foldl_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (foldl Gauss_Jordan_column_k_det_P\n          (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k])\n          [Suc k]) =\n    fst (foldl Gauss_Jordan_column_k_det_P_iarrays\n          (foldl Gauss_Jordan_column_k_det_P_iarrays\n            (1::'a, 0, matrix_to_iarray A) [0..<Suc k])\n          [Suc k])", "unfolding List.foldl.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_column_k_det_P\n          (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k])\n          (Suc k)) =\n    fst (Gauss_Jordan_column_k_det_P_iarrays\n          (foldl Gauss_Jordan_column_k_det_P_iarrays\n            (1::'a, 0, matrix_to_iarray A) [0..<Suc k])\n          (Suc k))", "unfolding f_def[symmetric] g_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_column_k_det_P f (Suc k)) =\n    fst (Gauss_Jordan_column_k_det_P_iarrays g (Suc k))", "by (subst f_rw, subst g_rw, unfold fst_rw fst_snd_rw snd_snd_rw, rule matrix_to_iarray_fst_Gauss_Jordan_column_k_det_P[OF fst_snd_f_le_nrows Suc_k_less_ncols'])"], ["proof (state)\nthis:\n  fst (Gauss_Jordan_upt_k_det_P A (Suc k)) =\n  fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) (Suc k))\n\ngoal (3 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> matrix_to_iarray\n                          (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n                         snd (Gauss_Jordan_upt_k_det_P_iarrays\n                               (matrix_to_iarray A) (Suc k))\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 3. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "show \"matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) = snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) (Suc k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n    snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) (Suc k))", "unfolding Gauss_Jordan_upt_k_det_P_def Gauss_Jordan_upt_k_det_P_iarrays_def Let_def snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                 [0..<Suc (Suc k)]))) =\n    snd (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc (Suc k)]))", "unfolding list_rw foldl_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (foldl Gauss_Jordan_column_k_det_P\n                 (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k])\n                 [Suc k]))) =\n    snd (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (foldl Gauss_Jordan_column_k_det_P_iarrays\n                 (1::'a, 0, matrix_to_iarray A) [0..<Suc k])\n               [Suc k]))", "unfolding List.foldl.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray\n     (snd (snd (Gauss_Jordan_column_k_det_P\n                 (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k])\n                 (Suc k)))) =\n    snd (snd (Gauss_Jordan_column_k_det_P_iarrays\n               (foldl Gauss_Jordan_column_k_det_P_iarrays\n                 (1::'a, 0, matrix_to_iarray A) [0..<Suc k])\n               (Suc k)))", "unfolding f_def[symmetric] g_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (snd (Gauss_Jordan_column_k_det_P f (Suc k)))) =\n    snd (snd (Gauss_Jordan_column_k_det_P_iarrays g (Suc k)))", "by (subst f_rw, subst g_rw, unfold fst_rw fst_snd_rw snd_snd_rw, rule matrix_to_iarray_snd_snd_Gauss_Jordan_column_k_det_P[OF fst_snd_f_le_nrows Suc_k_less_ncols'])"], ["proof (state)\nthis:\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A (Suc k))) =\n  snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) (Suc k))\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))\n                         \\<le> nrows A\n 2. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "show \"fst (snd (foldl Gauss_Jordan_column_k_det_P (1, 0, A) [0..<Suc (Suc k)])) \\<le> nrows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n               [0..<Suc (Suc k)]))\n    \\<le> nrows A", "unfolding list_rw foldl_append List.foldl.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_det_P\n               (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k])\n               (Suc k)))\n    \\<le> nrows A", "unfolding f_def[symmetric] g_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_det_P f (Suc k))) \\<le> nrows A", "apply (subst f_rw)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_det_P (fst f, fst (snd f), snd (snd f))\n               (Suc k)))\n    \\<le> nrows A", "using fst_snd_Gauss_Jordan_column_k_det_P_le_nrows[OF fst_snd_f_le_nrows]"], ["proof (prove)\nusing this:\n  fst (snd (Gauss_Jordan_column_k_det_P (?n, fst (snd f), snd (snd f)) ?k))\n  \\<le> nrows (snd (snd f))\n\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_det_P (fst f, fst (snd f), snd (snd f))\n               (Suc k)))\n    \\<le> nrows A", "unfolding nrows_def"], ["proof (prove)\nusing this:\n  fst (snd (Gauss_Jordan_column_k_det_P (?n, fst (snd f), snd (snd f)) ?k))\n  \\<le> CARD('c)\n\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_det_P (fst f, fst (snd f), snd (snd f))\n               (Suc k)))\n    \\<le> CARD('c)", "."], ["proof (state)\nthis:\n  fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n             [0..<Suc (Suc k)]))\n  \\<le> nrows A\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>k < ncols A \\<Longrightarrow>\n                fst (Gauss_Jordan_upt_k_det_P A k) =\n                fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n                      k);\n        k < ncols A \\<Longrightarrow>\n        matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A k)) =\n        snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A) k);\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]))\n        \\<le> nrows A;\n        k < ncols A \\<Longrightarrow>\n        fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                   (1::'a, 0, matrix_to_iarray A) [0..<Suc k])) =\n        fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n                   [0..<Suc k]));\n        Suc k < ncols A\\<rbrakk>\n       \\<Longrightarrow> fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n                                    (1::'a, 0, matrix_to_iarray A)\n                                    [0..<Suc (Suc k)])) =\n                         fst (snd (foldl Gauss_Jordan_column_k_det_P\n                                    (1::'a, 0, A) [0..<Suc (Suc k)]))", "show \"fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays (1, 0, matrix_to_iarray A) [0..<Suc (Suc k)])) = fst (snd (foldl Gauss_Jordan_column_k_det_P (1, 0, A) [0..<Suc (Suc k)]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n               (1::'a, 0, matrix_to_iarray A) [0..<Suc (Suc k)])) =\n    fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n               [0..<Suc (Suc k)]))", "unfolding list_rw foldl_append List.foldl.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_det_P_iarrays\n               (foldl Gauss_Jordan_column_k_det_P_iarrays\n                 (1::'a, 0, matrix_to_iarray A) [0..<Suc k])\n               (Suc k))) =\n    fst (snd (Gauss_Jordan_column_k_det_P\n               (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A) [0..<Suc k])\n               (Suc k)))", "unfolding f_def[symmetric] g_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (Gauss_Jordan_column_k_det_P_iarrays g (Suc k))) =\n    fst (snd (Gauss_Jordan_column_k_det_P f (Suc k)))", "by (subst f_rw, subst g_rw, unfold fst_rw fst_snd_rw snd_snd_rw,rule matrix_to_iarray_fst_snd_Gauss_Jordan_column_k_det_P[symmetric, OF fst_snd_f_le_nrows Suc_k_less_ncols'])"], ["proof (state)\nthis:\n  fst (snd (foldl Gauss_Jordan_column_k_det_P_iarrays\n             (1::'a, 0, matrix_to_iarray A) [0..<Suc (Suc k)])) =\n  fst (snd (foldl Gauss_Jordan_column_k_det_P (1::'a, 0, A)\n             [0..<Suc (Suc k)]))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma matrix_to_iarray_fst_Gauss_Jordan_det_P:\nshows \"fst (Gauss_Jordan_det_P A) = fst (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_det_P A) =\n    fst (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A))", "unfolding Gauss_Jordan_det_P_def Gauss_Jordan_det_P_iarrays_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_upt_k_det_P A (ncols A - 1)) =\n    fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n          (ncols_iarray (matrix_to_iarray A) - 1))", "using matrix_to_iarray_fst_Gauss_Jordan_upt_k_det_P"], ["proof (prove)\nusing this:\n  ?k < ncols ?A \\<Longrightarrow>\n  fst (Gauss_Jordan_upt_k_det_P ?A ?k) =\n  fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray ?A) ?k)\n\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_upt_k_det_P A (ncols A - 1)) =\n    fst (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n          (ncols_iarray (matrix_to_iarray A) - 1))", "by (metis diff_less matrix_to_iarray_ncols ncols_not_0 neq0_conv zero_less_one)"], ["", "lemma matrix_to_iarray_snd_Gauss_Jordan_det_P:\nshows \"matrix_to_iarray (snd (Gauss_Jordan_det_P A)) = snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_det_P A)) =\n    snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A))", "unfolding Gauss_Jordan_det_P_def Gauss_Jordan_det_P_iarrays_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A (ncols A - 1))) =\n    snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n          (ncols_iarray (matrix_to_iarray A) - 1))", "using matrix_to_iarray_snd_Gauss_Jordan_upt_k_det_P"], ["proof (prove)\nusing this:\n  ?k < ncols ?A \\<Longrightarrow>\n  matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P ?A ?k)) =\n  snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray ?A) ?k)\n\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_upt_k_det_P A (ncols A - 1))) =\n    snd (Gauss_Jordan_upt_k_det_P_iarrays (matrix_to_iarray A)\n          (ncols_iarray (matrix_to_iarray A) - 1))", "by (metis diff_less matrix_to_iarray_ncols ncols_not_0 neq0_conv zero_less_one)"], ["", "subsection\\<open>Code equations\\<close>"], ["", "definition \"det_iarrays A = (let A' = Gauss_Jordan_det_P_iarrays A in prod_list (map (\\<lambda>i. (snd A') !! i !! i) [0..<nrows_iarray A]) / fst A')\""], ["", "lemma matrix_to_iarray_det[code_unfold]:\nfixes A::\"'a::{field}^'n::{mod_type}^'n::{mod_type}\"\nshows \"det A = det_iarrays (matrix_to_iarray A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det A = det_iarrays (matrix_to_iarray A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. det A = det_iarrays (matrix_to_iarray A)", "let ?f=\"(\\<lambda>i. snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A)) !! i !! i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. det A = det_iarrays (matrix_to_iarray A)", "have *: \"fst (Gauss_Jordan_det_P A) = fst (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_det_P A) =\n    fst (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A))", "unfolding matrix_to_iarray_fst_Gauss_Jordan_det_P"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A)) =\n    fst (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A))", ".."], ["proof (state)\nthis:\n  fst (Gauss_Jordan_det_P A) =\n  fst (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A))\n\ngoal (1 subgoal):\n 1. det A = det_iarrays (matrix_to_iarray A)", "have \"prod_list (map ?f [0..<nrows_iarray (matrix_to_iarray A)]) = prod ?f (set [0..<nrows_iarray (matrix_to_iarray A)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>i\\<leftarrow>[0..<\n                          nrows_iarray\n                           (matrix_to_iarray\n                             A)]. snd (Gauss_Jordan_det_P_iarrays\n  (matrix_to_iarray A)) !!\n                                  i !!\n                                  i) =\n    (\\<Prod>i\\<in>set [0..<nrows_iarray (matrix_to_iarray A)].\n       snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A)) !! i !! i)", "by (metis (no_types, lifting) distinct_upt prod.distinct_set_conv_list)"], ["proof (state)\nthis:\n  (\\<Prod>i\\<leftarrow>[0..<\n                        nrows_iarray\n                         (matrix_to_iarray\n                           A)]. snd (Gauss_Jordan_det_P_iarrays\n(matrix_to_iarray A)) !!\n                                i !!\n                                i) =\n  (\\<Prod>i\\<in>set [0..<nrows_iarray (matrix_to_iarray A)].\n     snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A)) !! i !! i)\n\ngoal (1 subgoal):\n 1. det A = det_iarrays (matrix_to_iarray A)", "also"], ["proof (state)\nthis:\n  (\\<Prod>i\\<leftarrow>[0..<\n                        nrows_iarray\n                         (matrix_to_iarray\n                           A)]. snd (Gauss_Jordan_det_P_iarrays\n(matrix_to_iarray A)) !!\n                                i !!\n                                i) =\n  (\\<Prod>i\\<in>set [0..<nrows_iarray (matrix_to_iarray A)].\n     snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A)) !! i !! i)\n\ngoal (1 subgoal):\n 1. det A = det_iarrays (matrix_to_iarray A)", "have \"... = (\\<Prod>i\\<in>UNIV. snd (Gauss_Jordan_det_P A) $ i $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>i\\<in>set [0..<nrows_iarray (matrix_to_iarray A)].\n       snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A)) !! i !! i) =\n    (\\<Prod>i\\<in>UNIV. snd (Gauss_Jordan_det_P A) $ i $ i)", "proof (rule prod.reindex_cong[of \"to_nat::('n=>nat)\"])"], ["proof (state)\ngoal (3 subgoals):\n 1. inj mod_type_class.to_nat\n 2. set [0..<nrows_iarray (matrix_to_iarray A)] =\n    range mod_type_class.to_nat\n 3. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A)) !!\n       mod_type_class.to_nat x !!\n       mod_type_class.to_nat x =\n       snd (Gauss_Jordan_det_P A) $ x $ x", "show \"inj (to_nat::('n=>nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj mod_type_class.to_nat", "by (metis strict_mono_imp_inj_on strict_mono_to_nat)"], ["proof (state)\nthis:\n  inj mod_type_class.to_nat\n\ngoal (2 subgoals):\n 1. set [0..<nrows_iarray (matrix_to_iarray A)] =\n    range mod_type_class.to_nat\n 2. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A)) !!\n       mod_type_class.to_nat x !!\n       mod_type_class.to_nat x =\n       snd (Gauss_Jordan_det_P A) $ x $ x", "show \"set [0..<nrows_iarray (matrix_to_iarray A)] = range (to_nat::'n=>nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set [0..<nrows_iarray (matrix_to_iarray A)] =\n    range mod_type_class.to_nat", "unfolding nrows_eq_card_rows"], ["proof (prove)\ngoal (1 subgoal):\n 1. set [0..<CARD('n)] = range mod_type_class.to_nat", "using bij_to_nat[where ?'a='n]"], ["proof (prove)\nusing this:\n  bij_betw mod_type_class.to_nat UNIV {0..<CARD('n)}\n\ngoal (1 subgoal):\n 1. set [0..<CARD('n)] = range mod_type_class.to_nat", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  inj mod_type_class.to_nat \\<and>\n  range mod_type_class.to_nat = {0..<CARD('n)}\n\ngoal (1 subgoal):\n 1. set [0..<CARD('n)] = range mod_type_class.to_nat", "unfolding atLeast0LessThan atLeast_upt"], ["proof (prove)\nusing this:\n  inj mod_type_class.to_nat \\<and>\n  range mod_type_class.to_nat = set [0..<CARD('n)]\n\ngoal (1 subgoal):\n 1. set [0..<CARD('n)] = range mod_type_class.to_nat", "by auto"], ["proof (state)\nthis:\n  set [0..<nrows_iarray (matrix_to_iarray A)] = range mod_type_class.to_nat\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A)) !!\n       mod_type_class.to_nat x !!\n       mod_type_class.to_nat x =\n       snd (Gauss_Jordan_det_P A) $ x $ x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A)) !!\n       mod_type_class.to_nat x !!\n       mod_type_class.to_nat x =\n       snd (Gauss_Jordan_det_P A) $ x $ x", "show \"snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A)) !! to_nat x !! to_nat x = snd (Gauss_Jordan_det_P A) $ x $ x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A)) !!\n    mod_type_class.to_nat x !!\n    mod_type_class.to_nat x =\n    snd (Gauss_Jordan_det_P A) $ x $ x", "unfolding matrix_to_iarray_snd_Gauss_Jordan_det_P[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. matrix_to_iarray (snd (Gauss_Jordan_det_P A)) !!\n    mod_type_class.to_nat x !!\n    mod_type_class.to_nat x =\n    snd (Gauss_Jordan_det_P A) $ x $ x", "unfolding matrix_to_iarray_nth"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (Gauss_Jordan_det_P A) $ x $ x = snd (Gauss_Jordan_det_P A) $ x $ x", ".."], ["proof (state)\nthis:\n  snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A)) !!\n  mod_type_class.to_nat x !!\n  mod_type_class.to_nat x =\n  snd (Gauss_Jordan_det_P A) $ x $ x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Prod>i\\<in>set [0..<nrows_iarray (matrix_to_iarray A)].\n     snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A)) !! i !! i) =\n  (\\<Prod>i\\<in>UNIV. snd (Gauss_Jordan_det_P A) $ i $ i)\n\ngoal (1 subgoal):\n 1. det A = det_iarrays (matrix_to_iarray A)", "finally"], ["proof (chain)\npicking this:\n  (\\<Prod>i\\<leftarrow>[0..<\n                        nrows_iarray\n                         (matrix_to_iarray\n                           A)]. snd (Gauss_Jordan_det_P_iarrays\n(matrix_to_iarray A)) !!\n                                i !!\n                                i) =\n  (\\<Prod>i\\<in>UNIV. snd (Gauss_Jordan_det_P A) $ i $ i)", "have \"(\\<Prod>i\\<in>UNIV. snd (Gauss_Jordan_det_P A) $ i $ i) \n  = prod_list (map (\\<lambda>i. snd (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A)) !! i !! i) [0..<nrows_iarray (matrix_to_iarray A)])\""], ["proof (prove)\nusing this:\n  (\\<Prod>i\\<leftarrow>[0..<\n                        nrows_iarray\n                         (matrix_to_iarray\n                           A)]. snd (Gauss_Jordan_det_P_iarrays\n(matrix_to_iarray A)) !!\n                                i !!\n                                i) =\n  (\\<Prod>i\\<in>UNIV. snd (Gauss_Jordan_det_P A) $ i $ i)\n\ngoal (1 subgoal):\n 1. (\\<Prod>i\\<in>UNIV. snd (Gauss_Jordan_det_P A) $ i $ i) =\n    (\\<Prod>i\\<leftarrow>[0..<\n                          nrows_iarray\n                           (matrix_to_iarray\n                             A)]. snd (Gauss_Jordan_det_P_iarrays\n  (matrix_to_iarray A)) !!\n                                  i !!\n                                  i)", ".."], ["proof (state)\nthis:\n  (\\<Prod>i\\<in>UNIV. snd (Gauss_Jordan_det_P A) $ i $ i) =\n  (\\<Prod>i\\<leftarrow>[0..<\n                        nrows_iarray\n                         (matrix_to_iarray\n                           A)]. snd (Gauss_Jordan_det_P_iarrays\n(matrix_to_iarray A)) !!\n                                i !!\n                                i)\n\ngoal (1 subgoal):\n 1. det A = det_iarrays (matrix_to_iarray A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Prod>i\\<in>UNIV. snd (Gauss_Jordan_det_P A) $ i $ i) =\n  (\\<Prod>i\\<leftarrow>[0..<\n                        nrows_iarray\n                         (matrix_to_iarray\n                           A)]. snd (Gauss_Jordan_det_P_iarrays\n(matrix_to_iarray A)) !!\n                                i !!\n                                i)\n\ngoal (1 subgoal):\n 1. det A = det_iarrays (matrix_to_iarray A)", "using *"], ["proof (prove)\nusing this:\n  (\\<Prod>i\\<in>UNIV. snd (Gauss_Jordan_det_P A) $ i $ i) =\n  (\\<Prod>i\\<leftarrow>[0..<\n                        nrows_iarray\n                         (matrix_to_iarray\n                           A)]. snd (Gauss_Jordan_det_P_iarrays\n(matrix_to_iarray A)) !!\n                                i !!\n                                i)\n  fst (Gauss_Jordan_det_P A) =\n  fst (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A))\n\ngoal (1 subgoal):\n 1. det A = det_iarrays (matrix_to_iarray A)", "unfolding det_code_equation det_iarrays_def Let_def"], ["proof (prove)\nusing this:\n  (\\<Prod>i\\<in>UNIV. snd (Gauss_Jordan_det_P A) $ i $ i) =\n  (\\<Prod>i\\<leftarrow>[0..<\n                        nrows_iarray\n                         (matrix_to_iarray\n                           A)]. snd (Gauss_Jordan_det_P_iarrays\n(matrix_to_iarray A)) !!\n                                i !!\n                                i)\n  fst (Gauss_Jordan_det_P A) =\n  fst (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A))\n\ngoal (1 subgoal):\n 1. (\\<Prod>i\\<in>UNIV. snd (Gauss_Jordan_det_P A) $ i $ i) /\n    fst (Gauss_Jordan_det_P A) =\n    (\\<Prod>i\\<leftarrow>[0..<\n                          nrows_iarray\n                           (matrix_to_iarray\n                             A)]. snd (Gauss_Jordan_det_P_iarrays\n  (matrix_to_iarray A)) !!\n                                  i !!\n                                  i) /\n    fst (Gauss_Jordan_det_P_iarrays (matrix_to_iarray A))", "by presburger"], ["proof (state)\nthis:\n  det A = det_iarrays (matrix_to_iarray A)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}