{"file_name": "/home/qj213/afp-2021-10-22/thys/Gauss_Jordan/Bases_Of_Fundamental_Subspaces_IArrays.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Gauss_Jordan", "problem_names": ["lemma basis_null_space_iarrays_eq:\nfixes A::\"'a::{field}^'cols::{mod_type}^'rows::{mod_type}\"\nshows \"basis_null_space_iarrays (matrix_to_iarray A) \n  = set (map (\\<lambda>i. row_iarray i (fst (Gauss_Jordan_iarrays_PA (transpose_iarray (matrix_to_iarray A))))) [(rank_iarray (matrix_to_iarray A))..<(ncols_iarray (matrix_to_iarray A))])\"", "lemma basis_row_space_iarrays_eq:\nfixes A::\"'a::{field}^'cols::{mod_type}^'rows::{mod_type}\"\nshows \"basis_row_space_iarrays (matrix_to_iarray A) = set (map (\\<lambda>i. row_iarray i (Gauss_Jordan_iarrays (matrix_to_iarray A))) [0..<(rank_iarray (matrix_to_iarray A))])\"", "lemma basis_left_null_space_iarrays_eq:\nfixes A::\"'a::{field}^'cols::{mod_type}^'rows::{mod_type}\"\nshows \"basis_left_null_space_iarrays (matrix_to_iarray A) = basis_null_space_iarrays (transpose_iarray (matrix_to_iarray A))\"", "lemma vec_to_iarray_basis_null_space[code_unfold]:\nfixes A::\"'a::{field}^'cols::{mod_type}^'rows::{mod_type}\"\nshows  \"vec_to_iarray` (basis_null_space A) = basis_null_space_iarrays (matrix_to_iarray A)\"", "lemma vec_to_iarray_basis_row_space[code_unfold]:\nfixes A::\"'a::{field}^'cols::{mod_type}^'rows::{mod_type}\"\nshows  \"vec_to_iarray` (basis_row_space A) = basis_row_space_iarrays (matrix_to_iarray A)\""], "translations": [["", "lemma basis_null_space_iarrays_eq:\nfixes A::\"'a::{field}^'cols::{mod_type}^'rows::{mod_type}\"\nshows \"basis_null_space_iarrays (matrix_to_iarray A) \n  = set (map (\\<lambda>i. row_iarray i (fst (Gauss_Jordan_iarrays_PA (transpose_iarray (matrix_to_iarray A))))) [(rank_iarray (matrix_to_iarray A))..<(ncols_iarray (matrix_to_iarray A))])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basis_null_space_iarrays (matrix_to_iarray A) =\n    set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (transpose_iarray (matrix_to_iarray A)))))\n          [rank_iarray (matrix_to_iarray A)..<\n           ncols_iarray (matrix_to_iarray A)])", "unfolding basis_null_space_iarrays_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (transpose_iarray (matrix_to_iarray A)))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA\n                       (transpose_iarray (matrix_to_iarray A))))))..<\n           ncols_iarray (matrix_to_iarray A)]) =\n    set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (transpose_iarray (matrix_to_iarray A)))))\n          [rank_iarray (matrix_to_iarray A)..<\n           ncols_iarray (matrix_to_iarray A)])", "unfolding matrix_to_iarray_rank[symmetric, of A]"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (transpose_iarray (matrix_to_iarray A)))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA\n                       (transpose_iarray (matrix_to_iarray A))))))..<\n           ncols_iarray (matrix_to_iarray A)]) =\n    set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (transpose_iarray (matrix_to_iarray A)))))\n          [rank A..<ncols_iarray (matrix_to_iarray A)])", "unfolding rank_transpose[symmetric, of A]"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (transpose_iarray (matrix_to_iarray A)))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA\n                       (transpose_iarray (matrix_to_iarray A))))))..<\n           ncols_iarray (matrix_to_iarray A)]) =\n    set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (transpose_iarray (matrix_to_iarray A)))))\n          [rank (Finite_Cartesian_Product.transpose A)..<\n           ncols_iarray (matrix_to_iarray A)])", "unfolding matrix_to_iarray_rank"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (transpose_iarray (matrix_to_iarray A)))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA\n                       (transpose_iarray (matrix_to_iarray A))))))..<\n           ncols_iarray (matrix_to_iarray A)]) =\n    set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (transpose_iarray (matrix_to_iarray A)))))\n          [rank_iarray\n            (matrix_to_iarray (Finite_Cartesian_Product.transpose A))..<\n           ncols_iarray (matrix_to_iarray A)])", "unfolding rank_iarrays_code"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (transpose_iarray (matrix_to_iarray A)))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA\n                       (transpose_iarray (matrix_to_iarray A))))))..<\n           ncols_iarray (matrix_to_iarray A)]) =\n    set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (transpose_iarray (matrix_to_iarray A)))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (Gauss_Jordan_iarrays\n                  (matrix_to_iarray\n                    (Finite_Cartesian_Product.transpose A)))))..<\n           ncols_iarray (matrix_to_iarray A)])", "unfolding matrix_to_iarray_transpose[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (matrix_to_iarray\n                           (Finite_Cartesian_Product.transpose A)))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA\n                       (matrix_to_iarray\n                         (Finite_Cartesian_Product.transpose A))))))..<\n           ncols_iarray (matrix_to_iarray A)]) =\n    set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (matrix_to_iarray\n                           (Finite_Cartesian_Product.transpose A)))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (Gauss_Jordan_iarrays\n                  (matrix_to_iarray\n                    (Finite_Cartesian_Product.transpose A)))))..<\n           ncols_iarray (matrix_to_iarray A)])", "unfolding snd_Gauss_Jordan_iarrays_PA_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (matrix_to_iarray\n                           (Finite_Cartesian_Product.transpose A)))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (Gauss_Jordan_iarrays\n                  (matrix_to_iarray\n                    (Finite_Cartesian_Product.transpose A)))))..<\n           ncols_iarray (matrix_to_iarray A)]) =\n    set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (matrix_to_iarray\n                           (Finite_Cartesian_Product.transpose A)))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (Gauss_Jordan_iarrays\n                  (matrix_to_iarray\n                    (Finite_Cartesian_Product.transpose A)))))..<\n           ncols_iarray (matrix_to_iarray A)])", ".."], ["", "lemma basis_row_space_iarrays_eq:\nfixes A::\"'a::{field}^'cols::{mod_type}^'rows::{mod_type}\"\nshows \"basis_row_space_iarrays (matrix_to_iarray A) = set (map (\\<lambda>i. row_iarray i (Gauss_Jordan_iarrays (matrix_to_iarray A))) [0..<(rank_iarray (matrix_to_iarray A))])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basis_row_space_iarrays (matrix_to_iarray A) =\n    set (map (\\<lambda>i.\n                 row_iarray i (Gauss_Jordan_iarrays (matrix_to_iarray A)))\n          [0..<rank_iarray (matrix_to_iarray A)])", "unfolding basis_row_space_iarrays_def Let_def rank_iarrays_code"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>i.\n                 row_iarray i (Gauss_Jordan_iarrays (matrix_to_iarray A)))\n          [0..<\n           length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (Gauss_Jordan_iarrays (matrix_to_iarray A))))]) =\n    set (map (\\<lambda>i.\n                 row_iarray i (Gauss_Jordan_iarrays (matrix_to_iarray A)))\n          [0..<\n           length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (Gauss_Jordan_iarrays (matrix_to_iarray A))))])", ".."], ["", "lemma basis_left_null_space_iarrays_eq:\nfixes A::\"'a::{field}^'cols::{mod_type}^'rows::{mod_type}\"\nshows \"basis_left_null_space_iarrays (matrix_to_iarray A) = basis_null_space_iarrays (transpose_iarray (matrix_to_iarray A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basis_left_null_space_iarrays (matrix_to_iarray A) =\n    basis_null_space_iarrays (transpose_iarray (matrix_to_iarray A))", "unfolding basis_left_null_space_iarrays_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let GJ = Gauss_Jordan_iarrays_PA (matrix_to_iarray A);\n         rank_A =\n           length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of (snd GJ)))\n     in set (map (\\<lambda>i. row_iarray i (fst GJ))\n              [rank_A..<nrows_iarray (matrix_to_iarray A)])) =\n    basis_null_space_iarrays (transpose_iarray (matrix_to_iarray A))", "unfolding basis_null_space_iarrays_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)))))..<\n           nrows_iarray (matrix_to_iarray A)]) =\n    set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (transpose_iarray\n                           (transpose_iarray (matrix_to_iarray A))))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA\n                       (transpose_iarray\n                         (transpose_iarray (matrix_to_iarray A)))))))..<\n           ncols_iarray (transpose_iarray (matrix_to_iarray A))])", "unfolding matrix_to_iarray_transpose[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)))))..<\n           nrows_iarray (matrix_to_iarray A)]) =\n    set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA\n                         (matrix_to_iarray\n                           (Finite_Cartesian_Product.transpose\n                             (Finite_Cartesian_Product.transpose A))))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA\n                       (matrix_to_iarray\n                         (Finite_Cartesian_Product.transpose\n                           (Finite_Cartesian_Product.transpose A)))))))..<\n           ncols_iarray\n            (matrix_to_iarray (Finite_Cartesian_Product.transpose A))])", "unfolding transpose_transpose"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)))))..<\n           nrows_iarray (matrix_to_iarray A)]) =\n    set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)))))..<\n           ncols_iarray\n            (matrix_to_iarray (Finite_Cartesian_Product.transpose A))])", "unfolding matrix_to_iarray_ncols[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)))))..<\n           nrows_iarray (matrix_to_iarray A)]) =\n    set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)))))..<\n           ncols (Finite_Cartesian_Product.transpose A)])", "unfolding ncols_transpose"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)))))..<\n           nrows_iarray (matrix_to_iarray A)]) =\n    set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)))))..<\n           nrows A])", "unfolding matrix_to_iarray_nrows"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)))))..<\n           nrows_iarray (matrix_to_iarray A)]) =\n    set (map (\\<lambda>i.\n                 row_iarray i\n                  (fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray A))))\n          [length\n            (filter (\\<lambda>x. \\<not> is_zero_iarray x)\n              (IArray.list_of\n                (snd (Gauss_Jordan_iarrays_PA (matrix_to_iarray A)))))..<\n           nrows_iarray (matrix_to_iarray A)])", ".."], ["", "subsection\\<open>Code equations\\<close>"], ["", "lemma vec_to_iarray_basis_null_space[code_unfold]:\nfixes A::\"'a::{field}^'cols::{mod_type}^'rows::{mod_type}\"\nshows  \"vec_to_iarray` (basis_null_space A) = basis_null_space_iarrays (matrix_to_iarray A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray ` basis_null_space A =\n    basis_null_space_iarrays (matrix_to_iarray A)", "proof (unfold basis_null_space_def basis_null_space_iarrays_eq, auto, unfold image_def, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       rank A \\<le> mod_type_class.to_nat i \\<Longrightarrow>\n       \\<exists>x\\<in>{rank_iarray\n                        (matrix_to_iarray\n                          A)..<ncols_iarray (matrix_to_iarray A)}.\n          vec_to_iarray\n           (row i (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A))) =\n          row_iarray x\n           (fst (Gauss_Jordan_iarrays_PA\n                  (transpose_iarray (matrix_to_iarray A))))\n 2. \\<And>xa.\n       \\<lbrakk>rank_iarray (matrix_to_iarray A) \\<le> xa;\n        xa < ncols_iarray (matrix_to_iarray A)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>i.\n                                x =\n                                row i\n                                 (P_Gauss_Jordan\n                                   (Finite_Cartesian_Product.transpose\n                                     A)) \\<and>\n                                rank A \\<le> mod_type_class.to_nat i) \\<and>\n                            row_iarray xa\n                             (fst (Gauss_Jordan_iarrays_PA\n                                    (transpose_iarray\n(matrix_to_iarray A)))) =\n                            vec_to_iarray x", "fix i::'cols"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       rank A \\<le> mod_type_class.to_nat i \\<Longrightarrow>\n       \\<exists>x\\<in>{rank_iarray\n                        (matrix_to_iarray\n                          A)..<ncols_iarray (matrix_to_iarray A)}.\n          vec_to_iarray\n           (row i (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A))) =\n          row_iarray x\n           (fst (Gauss_Jordan_iarrays_PA\n                  (transpose_iarray (matrix_to_iarray A))))\n 2. \\<And>xa.\n       \\<lbrakk>rank_iarray (matrix_to_iarray A) \\<le> xa;\n        xa < ncols_iarray (matrix_to_iarray A)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>i.\n                                x =\n                                row i\n                                 (P_Gauss_Jordan\n                                   (Finite_Cartesian_Product.transpose\n                                     A)) \\<and>\n                                rank A \\<le> mod_type_class.to_nat i) \\<and>\n                            row_iarray xa\n                             (fst (Gauss_Jordan_iarrays_PA\n                                    (transpose_iarray\n(matrix_to_iarray A)))) =\n                            vec_to_iarray x", "assume rank_le_i: \"rank A \\<le> to_nat i\""], ["proof (state)\nthis:\n  rank A \\<le> mod_type_class.to_nat i\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       rank A \\<le> mod_type_class.to_nat i \\<Longrightarrow>\n       \\<exists>x\\<in>{rank_iarray\n                        (matrix_to_iarray\n                          A)..<ncols_iarray (matrix_to_iarray A)}.\n          vec_to_iarray\n           (row i (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A))) =\n          row_iarray x\n           (fst (Gauss_Jordan_iarrays_PA\n                  (transpose_iarray (matrix_to_iarray A))))\n 2. \\<And>xa.\n       \\<lbrakk>rank_iarray (matrix_to_iarray A) \\<le> xa;\n        xa < ncols_iarray (matrix_to_iarray A)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>i.\n                                x =\n                                row i\n                                 (P_Gauss_Jordan\n                                   (Finite_Cartesian_Product.transpose\n                                     A)) \\<and>\n                                rank A \\<le> mod_type_class.to_nat i) \\<and>\n                            row_iarray xa\n                             (fst (Gauss_Jordan_iarrays_PA\n                                    (transpose_iarray\n(matrix_to_iarray A)))) =\n                            vec_to_iarray x", "show \"\\<exists>x\\<in>{rank_iarray (matrix_to_iarray A)..<ncols_iarray (matrix_to_iarray A)}.\nvec_to_iarray (row i (P_Gauss_Jordan (transpose A))) = row_iarray x (fst (Gauss_Jordan_iarrays_PA (transpose_iarray (matrix_to_iarray A))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>{rank_iarray\n                     (matrix_to_iarray\n                       A)..<ncols_iarray (matrix_to_iarray A)}.\n       vec_to_iarray\n        (row i (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A))) =\n       row_iarray x\n        (fst (Gauss_Jordan_iarrays_PA\n               (transpose_iarray (matrix_to_iarray A))))", "proof (rule bexI[of _ \"to_nat i\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. vec_to_iarray\n     (row i (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A))) =\n    row_iarray (mod_type_class.to_nat i)\n     (fst (Gauss_Jordan_iarrays_PA (transpose_iarray (matrix_to_iarray A))))\n 2. mod_type_class.to_nat i\n    \\<in> {rank_iarray\n            (matrix_to_iarray A)..<ncols_iarray (matrix_to_iarray A)}", "show \"to_nat i \\<in> {rank_iarray (matrix_to_iarray A)..<ncols_iarray (matrix_to_iarray A)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_type_class.to_nat i\n    \\<in> {rank_iarray\n            (matrix_to_iarray A)..<ncols_iarray (matrix_to_iarray A)}", "unfolding matrix_to_iarray_ncols[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_type_class.to_nat i\n    \\<in> {rank_iarray (matrix_to_iarray A)..<ncols A}", "using rank_le_i to_nat_less_card[of i]"], ["proof (prove)\nusing this:\n  rank A \\<le> mod_type_class.to_nat i\n  mod_type_class.to_nat i < CARD('cols)\n\ngoal (1 subgoal):\n 1. mod_type_class.to_nat i\n    \\<in> {rank_iarray (matrix_to_iarray A)..<ncols A}", "unfolding matrix_to_iarray_rank ncols_def"], ["proof (prove)\nusing this:\n  rank_iarray (matrix_to_iarray A) \\<le> mod_type_class.to_nat i\n  mod_type_class.to_nat i < CARD('cols)\n\ngoal (1 subgoal):\n 1. mod_type_class.to_nat i\n    \\<in> {rank_iarray (matrix_to_iarray A)..<CARD('cols)}", "by fastforce"], ["proof (state)\nthis:\n  mod_type_class.to_nat i\n  \\<in> {rank_iarray\n          (matrix_to_iarray A)..<ncols_iarray (matrix_to_iarray A)}\n\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (row i (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A))) =\n    row_iarray (mod_type_class.to_nat i)\n     (fst (Gauss_Jordan_iarrays_PA (transpose_iarray (matrix_to_iarray A))))", "show \"vec_to_iarray (row i (P_Gauss_Jordan (transpose A))) \n    = row_iarray (to_nat i) (fst (Gauss_Jordan_iarrays_PA (transpose_iarray (matrix_to_iarray A))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (row i (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A))) =\n    row_iarray (mod_type_class.to_nat i)\n     (fst (Gauss_Jordan_iarrays_PA (transpose_iarray (matrix_to_iarray A))))", "unfolding matrix_to_iarray_transpose[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (row i (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A))) =\n    row_iarray (mod_type_class.to_nat i)\n     (fst (Gauss_Jordan_iarrays_PA\n            (matrix_to_iarray (Finite_Cartesian_Product.transpose A))))", "unfolding matrix_to_iarray_fst_Gauss_Jordan_PA[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (row i (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A))) =\n    row_iarray (mod_type_class.to_nat i)\n     (matrix_to_iarray\n       (fst (Gauss_Jordan_PA (Finite_Cartesian_Product.transpose A))))", "unfolding P_Gauss_Jordan_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray\n     (row i\n       (fst (Gauss_Jordan_PA (Finite_Cartesian_Product.transpose A)))) =\n    row_iarray (mod_type_class.to_nat i)\n     (matrix_to_iarray\n       (fst (Gauss_Jordan_PA (Finite_Cartesian_Product.transpose A))))", "unfolding vec_to_iarray_row"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_iarray (mod_type_class.to_nat i)\n     (matrix_to_iarray\n       (fst (Gauss_Jordan_PA (Finite_Cartesian_Product.transpose A)))) =\n    row_iarray (mod_type_class.to_nat i)\n     (matrix_to_iarray\n       (fst (Gauss_Jordan_PA (Finite_Cartesian_Product.transpose A))))", ".."], ["proof (state)\nthis:\n  vec_to_iarray\n   (row i (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A))) =\n  row_iarray (mod_type_class.to_nat i)\n   (fst (Gauss_Jordan_iarrays_PA (transpose_iarray (matrix_to_iarray A))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x\\<in>{rank_iarray\n                   (matrix_to_iarray\n                     A)..<ncols_iarray (matrix_to_iarray A)}.\n     vec_to_iarray\n      (row i (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A))) =\n     row_iarray x\n      (fst (Gauss_Jordan_iarrays_PA\n             (transpose_iarray (matrix_to_iarray A))))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>rank_iarray (matrix_to_iarray A) \\<le> xa;\n        xa < ncols_iarray (matrix_to_iarray A)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>i.\n                                x =\n                                row i\n                                 (P_Gauss_Jordan\n                                   (Finite_Cartesian_Product.transpose\n                                     A)) \\<and>\n                                rank A \\<le> mod_type_class.to_nat i) \\<and>\n                            row_iarray xa\n                             (fst (Gauss_Jordan_iarrays_PA\n                                    (transpose_iarray\n(matrix_to_iarray A)))) =\n                            vec_to_iarray x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>rank_iarray (matrix_to_iarray A) \\<le> xa;\n        xa < ncols_iarray (matrix_to_iarray A)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>i.\n                                x =\n                                row i\n                                 (P_Gauss_Jordan\n                                   (Finite_Cartesian_Product.transpose\n                                     A)) \\<and>\n                                rank A \\<le> mod_type_class.to_nat i) \\<and>\n                            row_iarray xa\n                             (fst (Gauss_Jordan_iarrays_PA\n                                    (transpose_iarray\n(matrix_to_iarray A)))) =\n                            vec_to_iarray x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>rank_iarray (matrix_to_iarray A) \\<le> xa;\n        xa < ncols_iarray (matrix_to_iarray A)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>i.\n                                x =\n                                row i\n                                 (P_Gauss_Jordan\n                                   (Finite_Cartesian_Product.transpose\n                                     A)) \\<and>\n                                rank A \\<le> mod_type_class.to_nat i) \\<and>\n                            row_iarray xa\n                             (fst (Gauss_Jordan_iarrays_PA\n                                    (transpose_iarray\n(matrix_to_iarray A)))) =\n                            vec_to_iarray x", "assume rank_le_i: \"rank_iarray (matrix_to_iarray A) \\<le> i\"\n        and i_less_nrows: \"i < ncols_iarray (matrix_to_iarray A)\""], ["proof (state)\nthis:\n  rank_iarray (matrix_to_iarray A) \\<le> i\n  i < ncols_iarray (matrix_to_iarray A)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>rank_iarray (matrix_to_iarray A) \\<le> xa;\n        xa < ncols_iarray (matrix_to_iarray A)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>i.\n                                x =\n                                row i\n                                 (P_Gauss_Jordan\n                                   (Finite_Cartesian_Product.transpose\n                                     A)) \\<and>\n                                rank A \\<le> mod_type_class.to_nat i) \\<and>\n                            row_iarray xa\n                             (fst (Gauss_Jordan_iarrays_PA\n                                    (transpose_iarray\n(matrix_to_iarray A)))) =\n                            vec_to_iarray x", "hence i_less_card:\"i < CARD ('cols)\""], ["proof (prove)\nusing this:\n  rank_iarray (matrix_to_iarray A) \\<le> i\n  i < ncols_iarray (matrix_to_iarray A)\n\ngoal (1 subgoal):\n 1. i < CARD('cols)", "unfolding matrix_to_iarray_ncols[symmetric] ncols_def"], ["proof (prove)\nusing this:\n  rank_iarray (matrix_to_iarray A) \\<le> i\n  i < CARD('cols)\n\ngoal (1 subgoal):\n 1. i < CARD('cols)", "by simp"], ["proof (state)\nthis:\n  i < CARD('cols)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>rank_iarray (matrix_to_iarray A) \\<le> xa;\n        xa < ncols_iarray (matrix_to_iarray A)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (\\<exists>i.\n                                x =\n                                row i\n                                 (P_Gauss_Jordan\n                                   (Finite_Cartesian_Product.transpose\n                                     A)) \\<and>\n                                rank A \\<le> mod_type_class.to_nat i) \\<and>\n                            row_iarray xa\n                             (fst (Gauss_Jordan_iarrays_PA\n                                    (transpose_iarray\n(matrix_to_iarray A)))) =\n                            vec_to_iarray x", "show \"\\<exists>x. (\\<exists>i. x = row i (P_Gauss_Jordan (transpose A)) \\<and> rank A \\<le> to_nat i) \\<and>\n            row_iarray i (fst (Gauss_Jordan_iarrays_PA (transpose_iarray (matrix_to_iarray A)))) = vec_to_iarray x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (\\<exists>i.\n           x =\n           row i\n            (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A)) \\<and>\n           rank A \\<le> mod_type_class.to_nat i) \\<and>\n       row_iarray i\n        (fst (Gauss_Jordan_iarrays_PA\n               (transpose_iarray (matrix_to_iarray A)))) =\n       vec_to_iarray x", "proof (rule exI[of _ \"row (from_nat i) (P_Gauss_Jordan (transpose A))\"], rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>ia.\n       row (mod_type_class.from_nat i)\n        (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A)) =\n       row ia (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A)) \\<and>\n       rank A \\<le> mod_type_class.to_nat ia\n 2. row_iarray i\n     (fst (Gauss_Jordan_iarrays_PA\n            (transpose_iarray (matrix_to_iarray A)))) =\n    vec_to_iarray\n     (row (mod_type_class.from_nat i)\n       (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A)))", "show \"\\<exists>ia. row (from_nat i) (P_Gauss_Jordan (transpose A)) = row ia (P_Gauss_Jordan (transpose A)) \\<and>\n         rank A \\<le> to_nat ia\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ia.\n       row (mod_type_class.from_nat i)\n        (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A)) =\n       row ia (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A)) \\<and>\n       rank A \\<le> mod_type_class.to_nat ia", "by (rule exI[of _ \"from_nat i\"],simp add: rank_le_i to_nat_from_nat_id[OF i_less_card] matrix_to_iarray_rank)"], ["proof (state)\nthis:\n  \\<exists>ia.\n     row (mod_type_class.from_nat i)\n      (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A)) =\n     row ia (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A)) \\<and>\n     rank A \\<le> mod_type_class.to_nat ia\n\ngoal (1 subgoal):\n 1. row_iarray i\n     (fst (Gauss_Jordan_iarrays_PA\n            (transpose_iarray (matrix_to_iarray A)))) =\n    vec_to_iarray\n     (row (mod_type_class.from_nat i)\n       (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A)))", "show \"row_iarray i (fst (Gauss_Jordan_iarrays_PA (transpose_iarray (matrix_to_iarray A)))) =\n    vec_to_iarray (row (from_nat i) (P_Gauss_Jordan (transpose A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_iarray i\n     (fst (Gauss_Jordan_iarrays_PA\n            (transpose_iarray (matrix_to_iarray A)))) =\n    vec_to_iarray\n     (row (mod_type_class.from_nat i)\n       (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A)))", "unfolding matrix_to_iarray_transpose[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_iarray i\n     (fst (Gauss_Jordan_iarrays_PA\n            (matrix_to_iarray (Finite_Cartesian_Product.transpose A)))) =\n    vec_to_iarray\n     (row (mod_type_class.from_nat i)\n       (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A)))", "unfolding matrix_to_iarray_fst_Gauss_Jordan_PA[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_iarray i\n     (matrix_to_iarray\n       (fst (Gauss_Jordan_PA (Finite_Cartesian_Product.transpose A)))) =\n    vec_to_iarray\n     (row (mod_type_class.from_nat i)\n       (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A)))", "unfolding P_Gauss_Jordan_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_iarray i\n     (matrix_to_iarray\n       (fst (Gauss_Jordan_PA (Finite_Cartesian_Product.transpose A)))) =\n    vec_to_iarray\n     (row (mod_type_class.from_nat i)\n       (fst (Gauss_Jordan_PA (Finite_Cartesian_Product.transpose A))))", "unfolding vec_to_iarray_row to_nat_from_nat_id[OF i_less_card]"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_iarray i\n     (matrix_to_iarray\n       (fst (Gauss_Jordan_PA (Finite_Cartesian_Product.transpose A)))) =\n    row_iarray i\n     (matrix_to_iarray\n       (fst (Gauss_Jordan_PA (Finite_Cartesian_Product.transpose A))))", ".."], ["proof (state)\nthis:\n  row_iarray i\n   (fst (Gauss_Jordan_iarrays_PA (transpose_iarray (matrix_to_iarray A)))) =\n  vec_to_iarray\n   (row (mod_type_class.from_nat i)\n     (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x.\n     (\\<exists>i.\n         x =\n         row i\n          (P_Gauss_Jordan (Finite_Cartesian_Product.transpose A)) \\<and>\n         rank A \\<le> mod_type_class.to_nat i) \\<and>\n     row_iarray i\n      (fst (Gauss_Jordan_iarrays_PA\n             (transpose_iarray (matrix_to_iarray A)))) =\n     vec_to_iarray x\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary vec_to_iarray_basis_left_null_space[code_unfold]:\nfixes A::\"'a::{field}^'cols::{mod_type}^'rows::{mod_type}\"\nshows \"vec_to_iarray` (basis_left_null_space A) = basis_left_null_space_iarrays (matrix_to_iarray A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray ` basis_left_null_space A =\n    basis_left_null_space_iarrays (matrix_to_iarray A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vec_to_iarray ` basis_left_null_space A =\n    basis_left_null_space_iarrays (matrix_to_iarray A)", "have rw: \"basis_left_null_space A = basis_null_space (transpose A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basis_left_null_space A =\n    basis_null_space (Finite_Cartesian_Product.transpose A)", "by (metis transpose_transpose basis_null_space_eq_basis_left_null_space_transpose)"], ["proof (state)\nthis:\n  basis_left_null_space A =\n  basis_null_space (Finite_Cartesian_Product.transpose A)\n\ngoal (1 subgoal):\n 1. vec_to_iarray ` basis_left_null_space A =\n    basis_left_null_space_iarrays (matrix_to_iarray A)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray ` basis_left_null_space A =\n    basis_left_null_space_iarrays (matrix_to_iarray A)", "unfolding rw"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray `\n    basis_null_space (Finite_Cartesian_Product.transpose A) =\n    basis_left_null_space_iarrays (matrix_to_iarray A)", "unfolding basis_left_null_space_iarrays_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray `\n    basis_null_space (Finite_Cartesian_Product.transpose A) =\n    basis_null_space_iarrays (transpose_iarray (matrix_to_iarray A))", "using vec_to_iarray_basis_null_space[of \"transpose A\"]"], ["proof (prove)\nusing this:\n  vec_to_iarray ` basis_null_space (Finite_Cartesian_Product.transpose A) =\n  basis_null_space_iarrays\n   (matrix_to_iarray (Finite_Cartesian_Product.transpose A))\n\ngoal (1 subgoal):\n 1. vec_to_iarray `\n    basis_null_space (Finite_Cartesian_Product.transpose A) =\n    basis_null_space_iarrays (transpose_iarray (matrix_to_iarray A))", "unfolding matrix_to_iarray_transpose[symmetric]"], ["proof (prove)\nusing this:\n  vec_to_iarray ` basis_null_space (Finite_Cartesian_Product.transpose A) =\n  basis_null_space_iarrays\n   (matrix_to_iarray (Finite_Cartesian_Product.transpose A))\n\ngoal (1 subgoal):\n 1. vec_to_iarray `\n    basis_null_space (Finite_Cartesian_Product.transpose A) =\n    basis_null_space_iarrays\n     (matrix_to_iarray (Finite_Cartesian_Product.transpose A))", "."], ["proof (state)\nthis:\n  vec_to_iarray ` basis_left_null_space A =\n  basis_left_null_space_iarrays (matrix_to_iarray A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vec_to_iarray_basis_row_space[code_unfold]:\nfixes A::\"'a::{field}^'cols::{mod_type}^'rows::{mod_type}\"\nshows  \"vec_to_iarray` (basis_row_space A) = basis_row_space_iarrays (matrix_to_iarray A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray ` basis_row_space A =\n    basis_row_space_iarrays (matrix_to_iarray A)", "proof (unfold basis_row_space_def basis_row_space_iarrays_eq, auto, unfold image_def, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       row i (Gauss_Jordan A) \\<noteq> 0 \\<Longrightarrow>\n       \\<exists>x\\<in>{0..<rank_iarray (matrix_to_iarray A)}.\n          vec_to_iarray (row i (Gauss_Jordan A)) =\n          row_iarray x (Gauss_Jordan_iarrays (matrix_to_iarray A))\n 2. \\<And>xa.\n       xa < rank_iarray (matrix_to_iarray A) \\<Longrightarrow>\n       \\<exists>x.\n          (\\<exists>i.\n              x = row i (Gauss_Jordan A) \\<and>\n              row i (Gauss_Jordan A) \\<noteq> 0) \\<and>\n          row_iarray xa (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n          vec_to_iarray x", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       row i (Gauss_Jordan A) \\<noteq> 0 \\<Longrightarrow>\n       \\<exists>x\\<in>{0..<rank_iarray (matrix_to_iarray A)}.\n          vec_to_iarray (row i (Gauss_Jordan A)) =\n          row_iarray x (Gauss_Jordan_iarrays (matrix_to_iarray A))\n 2. \\<And>xa.\n       xa < rank_iarray (matrix_to_iarray A) \\<Longrightarrow>\n       \\<exists>x.\n          (\\<exists>i.\n              x = row i (Gauss_Jordan A) \\<and>\n              row i (Gauss_Jordan A) \\<noteq> 0) \\<and>\n          row_iarray xa (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n          vec_to_iarray x", "assume i: \"row i (Gauss_Jordan A) \\<noteq> 0\""], ["proof (state)\nthis:\n  row i (Gauss_Jordan A) \\<noteq> 0\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       row i (Gauss_Jordan A) \\<noteq> 0 \\<Longrightarrow>\n       \\<exists>x\\<in>{0..<rank_iarray (matrix_to_iarray A)}.\n          vec_to_iarray (row i (Gauss_Jordan A)) =\n          row_iarray x (Gauss_Jordan_iarrays (matrix_to_iarray A))\n 2. \\<And>xa.\n       xa < rank_iarray (matrix_to_iarray A) \\<Longrightarrow>\n       \\<exists>x.\n          (\\<exists>i.\n              x = row i (Gauss_Jordan A) \\<and>\n              row i (Gauss_Jordan A) \\<noteq> 0) \\<and>\n          row_iarray xa (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n          vec_to_iarray x", "show \"\\<exists>x\\<in>{0..<rank_iarray (matrix_to_iarray A)}. vec_to_iarray (row i (Gauss_Jordan A)) = row_iarray x (Gauss_Jordan_iarrays (matrix_to_iarray A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>{0..<rank_iarray (matrix_to_iarray A)}.\n       vec_to_iarray (row i (Gauss_Jordan A)) =\n       row_iarray x (Gauss_Jordan_iarrays (matrix_to_iarray A))", "proof (rule bexI[of _ \"to_nat i\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. vec_to_iarray (row i (Gauss_Jordan A)) =\n    row_iarray (mod_type_class.to_nat i)\n     (Gauss_Jordan_iarrays (matrix_to_iarray A))\n 2. mod_type_class.to_nat i \\<in> {0..<rank_iarray (matrix_to_iarray A)}", "show \"vec_to_iarray (row i (Gauss_Jordan A)) = row_iarray (to_nat i) (Gauss_Jordan_iarrays (matrix_to_iarray A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray (row i (Gauss_Jordan A)) =\n    row_iarray (mod_type_class.to_nat i)\n     (Gauss_Jordan_iarrays (matrix_to_iarray A))", "unfolding vec_to_iarray_row matrix_to_iarray_Gauss_Jordan"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_iarray (mod_type_class.to_nat i)\n     (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n    row_iarray (mod_type_class.to_nat i)\n     (Gauss_Jordan_iarrays (matrix_to_iarray A))", ".."], ["proof (state)\nthis:\n  vec_to_iarray (row i (Gauss_Jordan A)) =\n  row_iarray (mod_type_class.to_nat i)\n   (Gauss_Jordan_iarrays (matrix_to_iarray A))\n\ngoal (1 subgoal):\n 1. mod_type_class.to_nat i \\<in> {0..<rank_iarray (matrix_to_iarray A)}", "show \"to_nat i \\<in> {0..<rank_iarray (matrix_to_iarray A)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mod_type_class.to_nat i \\<in> {0..<rank_iarray (matrix_to_iarray A)}", "by (auto, unfold matrix_to_iarray_rank[symmetric],\n      metis (full_types) i iarray_to_vec_vec_to_iarray not_less rank_less_row_i_imp_i_is_zero row_iarray_def vec_matrix vec_to_iarray_row)"], ["proof (state)\nthis:\n  mod_type_class.to_nat i \\<in> {0..<rank_iarray (matrix_to_iarray A)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x\\<in>{0..<rank_iarray (matrix_to_iarray A)}.\n     vec_to_iarray (row i (Gauss_Jordan A)) =\n     row_iarray x (Gauss_Jordan_iarrays (matrix_to_iarray A))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa < rank_iarray (matrix_to_iarray A) \\<Longrightarrow>\n       \\<exists>x.\n          (\\<exists>i.\n              x = row i (Gauss_Jordan A) \\<and>\n              row i (Gauss_Jordan A) \\<noteq> 0) \\<and>\n          row_iarray xa (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n          vec_to_iarray x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa < rank_iarray (matrix_to_iarray A) \\<Longrightarrow>\n       \\<exists>x.\n          (\\<exists>i.\n              x = row i (Gauss_Jordan A) \\<and>\n              row i (Gauss_Jordan A) \\<noteq> 0) \\<and>\n          row_iarray xa (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n          vec_to_iarray x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa < rank_iarray (matrix_to_iarray A) \\<Longrightarrow>\n       \\<exists>x.\n          (\\<exists>i.\n              x = row i (Gauss_Jordan A) \\<and>\n              row i (Gauss_Jordan A) \\<noteq> 0) \\<and>\n          row_iarray xa (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n          vec_to_iarray x", "assume i: \"i < rank_iarray (matrix_to_iarray A)\""], ["proof (state)\nthis:\n  i < rank_iarray (matrix_to_iarray A)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa < rank_iarray (matrix_to_iarray A) \\<Longrightarrow>\n       \\<exists>x.\n          (\\<exists>i.\n              x = row i (Gauss_Jordan A) \\<and>\n              row i (Gauss_Jordan A) \\<noteq> 0) \\<and>\n          row_iarray xa (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n          vec_to_iarray x", "hence i_less_rank: \"i < rank A\""], ["proof (prove)\nusing this:\n  i < rank_iarray (matrix_to_iarray A)\n\ngoal (1 subgoal):\n 1. i < rank A", "unfolding matrix_to_iarray_rank"], ["proof (prove)\nusing this:\n  i < rank_iarray (matrix_to_iarray A)\n\ngoal (1 subgoal):\n 1. i < rank_iarray (matrix_to_iarray A)", "."], ["proof (state)\nthis:\n  i < rank A\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa < rank_iarray (matrix_to_iarray A) \\<Longrightarrow>\n       \\<exists>x.\n          (\\<exists>i.\n              x = row i (Gauss_Jordan A) \\<and>\n              row i (Gauss_Jordan A) \\<noteq> 0) \\<and>\n          row_iarray xa (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n          vec_to_iarray x", "show \"\\<exists>x. (\\<exists>i. x = row i (Gauss_Jordan A) \\<and> row i (Gauss_Jordan A) \\<noteq> 0) \\<and> row_iarray i (Gauss_Jordan_iarrays (matrix_to_iarray A)) = vec_to_iarray x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (\\<exists>i.\n           x = row i (Gauss_Jordan A) \\<and>\n           row i (Gauss_Jordan A) \\<noteq> 0) \\<and>\n       row_iarray i (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n       vec_to_iarray x", "proof (rule exI[of _ \"row (from_nat i) (Gauss_Jordan A)\"], rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>ia.\n       row (mod_type_class.from_nat i) (Gauss_Jordan A) =\n       row ia (Gauss_Jordan A) \\<and>\n       row ia (Gauss_Jordan A) \\<noteq> 0\n 2. row_iarray i (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n    vec_to_iarray (row (mod_type_class.from_nat i) (Gauss_Jordan A))", "have not_zero_i: \"\\<not> is_zero_row (from_nat i) (Gauss_Jordan A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_zero_row (mod_type_class.from_nat i) (Gauss_Jordan A)", "proof (unfold is_zero_row_def, rule greatest_ge_nonzero_row')"], ["proof (state)\ngoal (3 subgoals):\n 1. reduced_row_echelon_form_upt_k (Gauss_Jordan A) (ncols (Gauss_Jordan A))\n 2. mod_type_class.from_nat i\n    \\<le> (GREATEST m.\n              \\<not> is_zero_row_upt_k m (ncols (Gauss_Jordan A))\n                      (Gauss_Jordan A))\n 3. \\<not> (\\<forall>a.\n               is_zero_row_upt_k a (ncols (Gauss_Jordan A))\n                (Gauss_Jordan A))", "show \"reduced_row_echelon_form_upt_k (Gauss_Jordan A) (ncols (Gauss_Jordan A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduced_row_echelon_form_upt_k (Gauss_Jordan A) (ncols (Gauss_Jordan A))", "by (metis rref_Gauss_Jordan rref_implies_rref_upt)"], ["proof (state)\nthis:\n  reduced_row_echelon_form_upt_k (Gauss_Jordan A) (ncols (Gauss_Jordan A))\n\ngoal (2 subgoals):\n 1. mod_type_class.from_nat i\n    \\<le> (GREATEST m.\n              \\<not> is_zero_row_upt_k m (ncols (Gauss_Jordan A))\n                      (Gauss_Jordan A))\n 2. \\<not> (\\<forall>a.\n               is_zero_row_upt_k a (ncols (Gauss_Jordan A))\n                (Gauss_Jordan A))", "have A_not_0: \"A \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> 0", "using i_less_rank"], ["proof (prove)\nusing this:\n  i < rank A\n\ngoal (1 subgoal):\n 1. A \\<noteq> 0", "by (metis less_nat_zero_code rank_0)"], ["proof (state)\nthis:\n  A \\<noteq> 0\n\ngoal (2 subgoals):\n 1. mod_type_class.from_nat i\n    \\<le> (GREATEST m.\n              \\<not> is_zero_row_upt_k m (ncols (Gauss_Jordan A))\n                      (Gauss_Jordan A))\n 2. \\<not> (\\<forall>a.\n               is_zero_row_upt_k a (ncols (Gauss_Jordan A))\n                (Gauss_Jordan A))", "hence Gauss_not_0: \"Gauss_Jordan A \\<noteq> 0\""], ["proof (prove)\nusing this:\n  A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Gauss_Jordan A \\<noteq> 0", "by (metis Gauss_Jordan_not_0)"], ["proof (state)\nthis:\n  Gauss_Jordan A \\<noteq> 0\n\ngoal (2 subgoals):\n 1. mod_type_class.from_nat i\n    \\<le> (GREATEST m.\n              \\<not> is_zero_row_upt_k m (ncols (Gauss_Jordan A))\n                      (Gauss_Jordan A))\n 2. \\<not> (\\<forall>a.\n               is_zero_row_upt_k a (ncols (Gauss_Jordan A))\n                (Gauss_Jordan A))", "have \"i \\<le> to_nat (GREATEST a. \\<not> is_zero_row a (Gauss_Jordan A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> mod_type_class.to_nat\n             (GREATEST a. \\<not> is_zero_row a (Gauss_Jordan A))", "using i_less_rank"], ["proof (prove)\nusing this:\n  i < rank A\n\ngoal (1 subgoal):\n 1. i \\<le> mod_type_class.to_nat\n             (GREATEST a. \\<not> is_zero_row a (Gauss_Jordan A))", "unfolding rank_eq_suc_to_nat_greatest[OF A_not_0]"], ["proof (prove)\nusing this:\n  i < mod_type_class.to_nat\n       (GREATEST a. \\<not> is_zero_row a (Gauss_Jordan A)) +\n      1\n\ngoal (1 subgoal):\n 1. i \\<le> mod_type_class.to_nat\n             (GREATEST a. \\<not> is_zero_row a (Gauss_Jordan A))", "by auto"], ["proof (state)\nthis:\n  i \\<le> mod_type_class.to_nat\n           (GREATEST a. \\<not> is_zero_row a (Gauss_Jordan A))\n\ngoal (2 subgoals):\n 1. mod_type_class.from_nat i\n    \\<le> (GREATEST m.\n              \\<not> is_zero_row_upt_k m (ncols (Gauss_Jordan A))\n                      (Gauss_Jordan A))\n 2. \\<not> (\\<forall>a.\n               is_zero_row_upt_k a (ncols (Gauss_Jordan A))\n                (Gauss_Jordan A))", "thus \"from_nat i \\<le> (GREATEST m. \\<not> is_zero_row_upt_k m (ncols (Gauss_Jordan A)) (Gauss_Jordan A))\""], ["proof (prove)\nusing this:\n  i \\<le> mod_type_class.to_nat\n           (GREATEST a. \\<not> is_zero_row a (Gauss_Jordan A))\n\ngoal (1 subgoal):\n 1. mod_type_class.from_nat i\n    \\<le> (GREATEST m.\n              \\<not> is_zero_row_upt_k m (ncols (Gauss_Jordan A))\n                      (Gauss_Jordan A))", "unfolding is_zero_row_def[symmetric]"], ["proof (prove)\nusing this:\n  i \\<le> mod_type_class.to_nat\n           (GREATEST a. \\<not> is_zero_row a (Gauss_Jordan A))\n\ngoal (1 subgoal):\n 1. mod_type_class.from_nat i\n    \\<le> (GREATEST m. \\<not> is_zero_row m (Gauss_Jordan A))", "by (metis leD not_le_imp_less to_nat_le)"], ["proof (state)\nthis:\n  mod_type_class.from_nat i\n  \\<le> (GREATEST m.\n            \\<not> is_zero_row_upt_k m (ncols (Gauss_Jordan A))\n                    (Gauss_Jordan A))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a.\n               is_zero_row_upt_k a (ncols (Gauss_Jordan A))\n                (Gauss_Jordan A))", "show \"\\<not> (\\<forall>a. is_zero_row_upt_k a (ncols (Gauss_Jordan A)) (Gauss_Jordan A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a.\n               is_zero_row_upt_k a (ncols (Gauss_Jordan A))\n                (Gauss_Jordan A))", "using Gauss_not_0"], ["proof (prove)\nusing this:\n  Gauss_Jordan A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a.\n               is_zero_row_upt_k a (ncols (Gauss_Jordan A))\n                (Gauss_Jordan A))", "unfolding is_zero_row_def[symmetric] is_zero_row_def'"], ["proof (prove)\nusing this:\n  Gauss_Jordan A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a j. Gauss_Jordan A $ a $ j = (0::'a))", "by (metis vec_eq_iff zero_index)"], ["proof (state)\nthis:\n  \\<not> (\\<forall>a.\n             is_zero_row_upt_k a (ncols (Gauss_Jordan A)) (Gauss_Jordan A))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> is_zero_row (mod_type_class.from_nat i) (Gauss_Jordan A)\n\ngoal (2 subgoals):\n 1. \\<exists>ia.\n       row (mod_type_class.from_nat i) (Gauss_Jordan A) =\n       row ia (Gauss_Jordan A) \\<and>\n       row ia (Gauss_Jordan A) \\<noteq> 0\n 2. row_iarray i (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n    vec_to_iarray (row (mod_type_class.from_nat i) (Gauss_Jordan A))", "have i_less_card: \"i<CARD('rows)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < CARD('rows)", "using i_less_rank rank_le_nrows[of A]"], ["proof (prove)\nusing this:\n  i < rank A\n  rank A \\<le> nrows A\n\ngoal (1 subgoal):\n 1. i < CARD('rows)", "unfolding nrows_def"], ["proof (prove)\nusing this:\n  i < rank A\n  rank A \\<le> CARD('rows)\n\ngoal (1 subgoal):\n 1. i < CARD('rows)", "by simp"], ["proof (state)\nthis:\n  i < CARD('rows)\n\ngoal (2 subgoals):\n 1. \\<exists>ia.\n       row (mod_type_class.from_nat i) (Gauss_Jordan A) =\n       row ia (Gauss_Jordan A) \\<and>\n       row ia (Gauss_Jordan A) \\<noteq> 0\n 2. row_iarray i (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n    vec_to_iarray (row (mod_type_class.from_nat i) (Gauss_Jordan A))", "show \"\\<exists>ia. row (from_nat i) (Gauss_Jordan A) = row ia (Gauss_Jordan A) \\<and> row ia (Gauss_Jordan A) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ia.\n       row (mod_type_class.from_nat i) (Gauss_Jordan A) =\n       row ia (Gauss_Jordan A) \\<and>\n       row ia (Gauss_Jordan A) \\<noteq> 0", "apply (rule exI[of _ \"from_nat i\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. row (mod_type_class.from_nat i) (Gauss_Jordan A) \\<noteq> 0", "using not_zero_i"], ["proof (prove)\nusing this:\n  \\<not> is_zero_row (mod_type_class.from_nat i) (Gauss_Jordan A)\n\ngoal (1 subgoal):\n 1. row (mod_type_class.from_nat i) (Gauss_Jordan A) \\<noteq> 0", "unfolding row_def is_zero_row_def' vec_nth_inverse"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>j.\n             Gauss_Jordan A $ mod_type_class.from_nat i $ j = (0::'a))\n\ngoal (1 subgoal):\n 1. Gauss_Jordan A $ mod_type_class.from_nat i \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  \\<exists>ia.\n     row (mod_type_class.from_nat i) (Gauss_Jordan A) =\n     row ia (Gauss_Jordan A) \\<and>\n     row ia (Gauss_Jordan A) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. row_iarray i (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n    vec_to_iarray (row (mod_type_class.from_nat i) (Gauss_Jordan A))", "show \"row_iarray i (Gauss_Jordan_iarrays (matrix_to_iarray A)) = vec_to_iarray (row (from_nat i) (Gauss_Jordan A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row_iarray i (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n    vec_to_iarray (row (mod_type_class.from_nat i) (Gauss_Jordan A))", "unfolding matrix_to_iarray_Gauss_Jordan[symmetric] vec_to_iarray_row to_nat_from_nat_id[OF i_less_card]"], ["proof (prove)\ngoal (1 subgoal):\n 1. row_iarray i (matrix_to_iarray (Gauss_Jordan A)) =\n    row_iarray i (matrix_to_iarray (Gauss_Jordan A))", "by rule"], ["proof (state)\nthis:\n  row_iarray i (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n  vec_to_iarray (row (mod_type_class.from_nat i) (Gauss_Jordan A))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x.\n     (\\<exists>i.\n         x = row i (Gauss_Jordan A) \\<and>\n         row i (Gauss_Jordan A) \\<noteq> 0) \\<and>\n     row_iarray i (Gauss_Jordan_iarrays (matrix_to_iarray A)) =\n     vec_to_iarray x\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary vec_to_iarray_basis_col_space[code_unfold]:\nfixes A::\"'a::{field}^'cols::{mod_type}^'rows::{mod_type}\"\nshows  \"vec_to_iarray` (basis_col_space A) = basis_col_space_iarrays (matrix_to_iarray A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray ` basis_col_space A =\n    basis_col_space_iarrays (matrix_to_iarray A)", "unfolding basis_col_space_eq_basis_row_space_transpose basis_col_space_iarrays_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray ` basis_row_space (Finite_Cartesian_Product.transpose A) =\n    basis_row_space_iarrays (transpose_iarray (matrix_to_iarray A))", "unfolding matrix_to_iarray_transpose[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_to_iarray ` basis_row_space (Finite_Cartesian_Product.transpose A) =\n    basis_row_space_iarrays\n     (matrix_to_iarray (Finite_Cartesian_Product.transpose A))", "unfolding vec_to_iarray_basis_row_space"], ["proof (prove)\ngoal (1 subgoal):\n 1. basis_row_space_iarrays\n     (matrix_to_iarray (Finite_Cartesian_Product.transpose A)) =\n    basis_row_space_iarrays\n     (matrix_to_iarray (Finite_Cartesian_Product.transpose A))", ".."], ["", "end"]]}