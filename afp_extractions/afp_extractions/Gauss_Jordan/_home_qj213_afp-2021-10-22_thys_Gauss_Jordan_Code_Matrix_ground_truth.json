{"file_name": "/home/qj213/afp-2021-10-22/thys/Gauss_Jordan/Code_Matrix.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Gauss_Jordan", "problem_names": ["lemmas vec.vec_nth_inverse[code abstype]", "lemma [code abstract]: \"vec_nth 0 = (%x. 0)\"", "lemma [code abstract]: \"vec_nth 1 = (%x. 1)\"", "lemma [code abstract]: \"vec_nth (a + b) =  (%i. a$i + b$i)\"", "lemma [code abstract]: \"vec_nth (a - b) =  (%i. a$i - b$i)\"", "lemma [code abstract]: \"vec_nth (vec n) = (\\<lambda>i. n)\"", "lemma [code abstract]: \"vec_nth (a * b) =  (%i. a$i * b$i)\"", "lemma [code abstract]: \"vec_nth (c *s x) = (\\<lambda>i. c * (x$i))\"", "lemma [code abstract]: \"vec_nth (a - b) =  (%i. a$i - b$i)\"", "lemma mat_mult_row_code [code abstract]:\n  \"vec_nth (mat_mult_row m m' f) = (%c. sum (%k. ((m$f)$k) * ((m'$k)$c)) (UNIV :: 'n::finite set))\"", "lemma mat_mult [code abstract]: \"vec_nth (m ** m') = mat_mult_row m m'\"", "lemma matrix_vector_mult_code [code abstract]:\n  \"vec_nth (A *v x) = (%i. (\\<Sum>j\\<in>UNIV. A $ i $ j * x $ j))\"", "lemma vector_matrix_mult_code [code abstract]:\n  \"vec_nth (x v* A) = (%j. (\\<Sum>i\\<in>UNIV. A $ i $ j * x $ i))\"", "lemma mat_row_code [code abstract]:\n  \"vec_nth (mat_row k i) = (%j. if i = j then k else 0)\"", "lemma [code abstract]: \"vec_nth (mat k) = mat_row k\"", "lemma transpose_row_code [code abstract]:\n  \"vec_nth (transpose_row A i) = (%j.  A $ j $ i)\"", "lemma transpose_code[code abstract]:\n  \"vec_nth (transpose A) = transpose_row A\"", "lemma [code abstract]: \"vec_nth (row i A) =  (($) (A $ i))\"", "lemma [code abstract]: \"vec_nth (column j A) = (%i. A $ i $ j)\"", "lemma rowvector_row_code [code abstract]:\n  \"vec_nth (rowvector_row v i) = (%j. (v$j))\"", "lemma [code abstract]: \"vec_nth (rowvector v) = rowvector_row v\"", "lemma columnvector_row_code [code abstract]:\n  \"vec_nth (columnvector_row v i) = (%j. (v$i))\"", "lemma [code abstract]: \"vec_nth (columnvector v) = columnvector_row v\""], "translations": [["", "lemmas vec.vec_nth_inverse[code abstype]"], ["", "lemma [code abstract]: \"vec_nth 0 = (%x. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) 0 = (\\<lambda>x. 0::'b)", "by (metis zero_index)"], ["", "lemma [code abstract]: \"vec_nth 1 = (%x. 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) 1 = (\\<lambda>x. 1::'b)", "by (metis one_index)"], ["", "lemma [code abstract]: \"vec_nth (a + b) =  (%i. a$i + b$i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (a + b) = (\\<lambda>i. a $ i + b $ i)", "by (metis vector_add_component)"], ["", "lemma [code abstract]: \"vec_nth (a - b) =  (%i. a$i - b$i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (a - b) = (\\<lambda>i. a $ i - b $ i)", "by (metis vector_minus_component)"], ["", "lemma [code abstract]: \"vec_nth (vec n) = (\\<lambda>i. n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (vec n) = (\\<lambda>i. n)", "unfolding vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>i. n) = (\\<lambda>i. n)", "by fastforce"], ["", "lemma [code abstract]: \"vec_nth (a * b) =  (%i. a$i * b$i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (a * b) = (\\<lambda>i. a $ i * b $ i)", "unfolding vector_mult_component"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i. a $ i * b $ i) = (\\<lambda>i. a $ i * b $ i)", "by auto"], ["", "lemma [code abstract]: \"vec_nth (c *s x) = (\\<lambda>i. c * (x$i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (c *s x) = (\\<lambda>i. c * x $ i)", "unfolding vector_scalar_mult_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>i. c * x $ i) = (\\<lambda>i. c * x $ i)", "by auto"], ["", "lemma [code abstract]: \"vec_nth (a - b) =  (%i. a$i - b$i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (a - b) = (\\<lambda>i. a $ i - b $ i)", "by (metis vector_minus_component)"], ["", "definition mat_mult_row \n  where \"mat_mult_row m m' f = vec_lambda (%c. sum (%k. ((m$f)$k) * ((m'$k)$c)) (UNIV :: 'n::finite set))\""], ["", "lemma mat_mult_row_code [code abstract]:\n  \"vec_nth (mat_mult_row m m' f) = (%c. sum (%k. ((m$f)$k) * ((m'$k)$c)) (UNIV :: 'n::finite set))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (mat_mult_row m m' f) =\n    (\\<lambda>c. \\<Sum>k\\<in>UNIV. m $ f $ k * m' $ k $ c)", "by(simp add: mat_mult_row_def fun_eq_iff)"], ["", "lemma mat_mult [code abstract]: \"vec_nth (m ** m') = mat_mult_row m m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (m ** m') = mat_mult_row m m'", "unfolding matrix_matrix_mult_def mat_mult_row_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>i j. \\<Sum>k\\<in>UNIV. m $ i $ k * m' $ k $ j) =\n    (\\<lambda>f. \\<chi>c. \\<Sum>k\\<in>UNIV. m $ f $ k * m' $ k $ c)", "using vec_lambda_beta"], ["proof (prove)\nusing this:\n  vec_lambda ?g $ ?i = ?g ?i\n\ngoal (1 subgoal):\n 1. ($) (\\<chi>i j. \\<Sum>k\\<in>UNIV. m $ i $ k * m' $ k $ j) =\n    (\\<lambda>f. \\<chi>c. \\<Sum>k\\<in>UNIV. m $ f $ k * m' $ k $ c)", "by auto"], ["", "lemma matrix_vector_mult_code [code abstract]:\n  \"vec_nth (A *v x) = (%i. (\\<Sum>j\\<in>UNIV. A $ i $ j * x $ j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (A *v x) = (\\<lambda>i. \\<Sum>j\\<in>UNIV. A $ i $ j * x $ j)", "unfolding matrix_vector_mult_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>i. \\<Sum>j\\<in>UNIV. A $ i $ j * x $ j) =\n    (\\<lambda>i. \\<Sum>j\\<in>UNIV. A $ i $ j * x $ j)", "by fastforce"], ["", "lemma vector_matrix_mult_code [code abstract]:\n  \"vec_nth (x v* A) = (%j. (\\<Sum>i\\<in>UNIV. A $ i $ j * x $ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (x v* A) = (\\<lambda>j. \\<Sum>i\\<in>UNIV. A $ i $ j * x $ i)", "unfolding vector_matrix_mult_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>j. \\<Sum>i\\<in>UNIV. A $ i $ j * x $ i) =\n    (\\<lambda>j. \\<Sum>i\\<in>UNIV. A $ i $ j * x $ i)", "by fastforce"], ["", "definition mat_row\n  where \"mat_row k i = vec_lambda (%j. if i = j then k else 0)\""], ["", "lemma mat_row_code [code abstract]:\n  \"vec_nth (mat_row k i) = (%j. if i = j then k else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (mat_row k i) = (\\<lambda>j. if i = j then k else (0::'b))", "unfolding mat_row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>j. if i = j then k else (0::'b)) =\n    (\\<lambda>j. if i = j then k else (0::'b))", "by auto"], ["", "lemma [code abstract]: \"vec_nth (mat k) = mat_row k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (mat k) = mat_row k", "unfolding mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>i j. if i = j then k else (0::'b)) = mat_row k", "unfolding mat_row_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>i j. if i = j then k else (0::'b)) =\n    (\\<lambda>i. \\<chi>j. if i = j then k else (0::'b))", "by auto"], ["", "definition transpose_row\n   where \"transpose_row A i = vec_lambda (%j. A $ j $ i)\""], ["", "lemma transpose_row_code [code abstract]:\n  \"vec_nth (transpose_row A i) = (%j.  A $ j $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (transpose_row A i) = (\\<lambda>j. A $ j $ i)", "by (metis transpose_row_def vec_lambda_beta)"], ["", "lemma transpose_code[code abstract]:\n  \"vec_nth (transpose A) = transpose_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (Finite_Cartesian_Product.transpose A) = transpose_row A", "by (auto simp: transpose_def transpose_row_def)"], ["", "lemma [code abstract]: \"vec_nth (row i A) =  (($) (A $ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (row i A) = ($) (A $ i)", "unfolding row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (vec_lambda (($) (A $ i))) = ($) (A $ i)", "by fastforce"], ["", "lemma [code abstract]: \"vec_nth (column j A) = (%i. A $ i $ j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (column j A) = (\\<lambda>i. A $ i $ j)", "unfolding column_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>i. A $ i $ j) = (\\<lambda>i. A $ i $ j)", "by fastforce"], ["", "definition \"rowvector_row v i = vec_lambda (%j. (v$j))\""], ["", "lemma rowvector_row_code [code abstract]:\n  \"vec_nth (rowvector_row v i) = (%j. (v$j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (rowvector_row v i) = ($) v", "unfolding rowvector_row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (vec_lambda (($) v)) = ($) v", "by auto"], ["", "lemma [code abstract]: \"vec_nth (rowvector v) = rowvector_row v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (rowvector v) = rowvector_row v", "unfolding rowvector_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>i. vec_lambda (($) v)) = rowvector_row v", "unfolding rowvector_row_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>i. vec_lambda (($) v)) = (\\<lambda>i. vec_lambda (($) v))", "by auto"], ["", "definition \"columnvector_row v i = vec_lambda (%j. (v$i))\""], ["", "lemma columnvector_row_code [code abstract]:\n  \"vec_nth (columnvector_row v i) = (%j. (v$i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (columnvector_row v i) = (\\<lambda>j. v $ i)", "unfolding columnvector_row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>j. v $ i) = (\\<lambda>j. v $ i)", "by auto"], ["", "lemma [code abstract]: \"vec_nth (columnvector v) = columnvector_row v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (columnvector v) = columnvector_row v", "unfolding columnvector_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>i j. v $ i) = columnvector_row v", "unfolding columnvector_row_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ($) (\\<chi>i j. v $ i) = (\\<lambda>i. \\<chi>j. v $ i)", "by auto"], ["", "end"]]}