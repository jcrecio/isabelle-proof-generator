{"file_name": "/home/qj213/afp-2021-10-22/thys/Lambert_W/Lambert_W.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Lambert_W", "problem_names": ["lemma asymp_equiv_sandwich':\n  fixes f :: \"'a \\<Rightarrow> real\"\n  assumes \"\\<And>c'. c' \\<in> {l<..<c} \\<Longrightarrow> eventually (\\<lambda>x. f x \\<ge> c' * g x) F\"\n  assumes \"\\<And>c'. c' \\<in> {c<..<u} \\<Longrightarrow> eventually (\\<lambda>x. f x \\<le> c' * g x) F\"\n  assumes \"l < c\" \"c < u\" and [simp]: \"c \\<noteq> 0\"\n  shows   \"f \\<sim>[F] (\\<lambda>x. c * g x)\"", "lemma asymp_equiv_sandwich'':\n  fixes f :: \"'a \\<Rightarrow> real\"\n  assumes \"\\<And>c'. c' \\<in> {l<..<1} \\<Longrightarrow> eventually (\\<lambda>x. f x \\<ge> c' * g x) F\"\n  assumes \"\\<And>c'. c' \\<in> {1<..<u} \\<Longrightarrow> eventually (\\<lambda>x. f x \\<le> c' * g x) F\"\n  assumes \"l < 1\" \"1 < u\"\n  shows   \"f \\<sim>[F] (g)\"", "lemma exp_times_self_gt:\n  assumes \"x \\<noteq> -1\"\n  shows   \"x * exp x > -exp (-1::real)\"", "lemma exp_times_self_ge: \"x * exp x \\<ge> -exp (-1::real)\"", "lemma exp_times_self_strict_mono:\n  assumes \"x \\<ge> -1\" \"x < (y :: real)\"\n  shows   \"x * exp x < y * exp y\"", "lemma exp_times_self_strict_antimono:\n  assumes \"y \\<le> -1\" \"x < (y :: real)\"\n  shows   \"x * exp x > y * exp y\"", "lemma exp_times_self_mono:\n  assumes \"x \\<ge> -1\" \"x \\<le> (y :: real)\"\n  shows   \"x * exp x \\<le> y * exp y\"", "lemma exp_times_self_antimono:\n  assumes \"y \\<le> -1\" \"x \\<le> (y :: real)\"\n  shows   \"x * exp x \\<ge> y * exp y\"", "lemma exp_times_self_inj: \"inj_on (\\<lambda>x::real. x * exp x) {-1..}\"", "lemma exp_times_self_inj': \"inj_on (\\<lambda>x::real. x * exp x) {..-1}\"", "lemma Lambert_W_ex1:\n  assumes \"(x::real) \\<ge> -exp (-1)\"\n  shows   \"\\<exists>!w. w \\<ge> -1 \\<and> w * exp w = x\"", "lemma Lambert_W'_ex1:\n  assumes \"(x::real) \\<in> {-exp (-1)..<0}\"\n  shows   \"\\<exists>!w. w \\<le> -1 \\<and> w * exp w = x\"", "lemma Lambert_W_times_exp_self: \n  assumes \"x \\<ge> -exp (-1)\"\n  shows   \"Lambert_W x * exp (Lambert_W x) = x\"", "lemma Lambert_W_times_exp_self':\n  assumes \"x \\<ge> -exp (-1)\"\n  shows   \"exp (Lambert_W x) * Lambert_W x = x\"", "lemma Lambert_W'_times_exp_self: \n  assumes \"x \\<in> {-exp (-1)..<0}\"\n  shows   \"Lambert_W' x * exp (Lambert_W' x) = x\"", "lemma Lambert_W'_times_exp_self':\n  assumes \"x \\<in> {-exp (-1)..<0}\"\n  shows   \"exp (Lambert_W' x) * Lambert_W' x = x\"", "lemma Lambert_W_ge: \"Lambert_W x \\<ge> -1\"", "lemma Lambert_W'_le: \"Lambert_W' x \\<le> -1\"", "lemma Lambert_W_eqI:\n  assumes \"w \\<ge> -1\" \"w * exp w = x\"\n  shows   \"Lambert_W x = w\"", "lemma Lambert_W'_eqI:\n  assumes \"w \\<le> -1\" \"w * exp w = x\"\n  shows   \"Lambert_W' x = w\"", "lemma exp_times_self_eqD:\n  assumes \"w * exp w = x\"\n  shows   \"x \\<ge> -exp (-1)\" and \"w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x\"", "theorem exp_times_self_eq_iff:\n  \"w * exp w = x \\<longleftrightarrow> x \\<ge> -exp (-1) \\<and> (w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x)\"", "lemma Lambert_W_exp_times_self [simp]: \"x \\<ge> -1 \\<Longrightarrow> Lambert_W (x * exp x) = x\"", "lemma Lambert_W_exp_times_self' [simp]: \"x \\<ge> -1 \\<Longrightarrow> Lambert_W (exp x * x) = x\"", "lemma Lambert_W'_exp_times_self [simp]: \"x \\<le> -1 \\<Longrightarrow> Lambert_W' (x * exp x) = x\"", "lemma Lambert_W'_exp_times_self' [simp]: \"x \\<le> -1 \\<Longrightarrow> Lambert_W' (exp x * x) = x\"", "lemma Lambert_W_times_ln_self:\n  assumes \"x \\<ge> exp (-1)\"\n  shows   \"Lambert_W (x * ln x) = ln x\"", "lemma Lambert_W_times_ln_self':\n  assumes \"x \\<ge> exp (-1)\"\n  shows   \"Lambert_W (ln x  * x) = ln x\"", "lemma Lambert_W_eq_minus_exp_minus1 [simp]: \"Lambert_W (-exp (-1)) = -1\"", "lemma Lambert_W'_eq_minus_exp_minus1 [simp]: \"Lambert_W' (-exp (-1)) = -1\"", "lemma Lambert_W_0 [simp]: \"Lambert_W 0 = 0\"", "lemma Lambert_W_strict_mono:\n  assumes \"x \\<ge> -exp(-1)\" \"x < y\"\n  shows   \"Lambert_W x < Lambert_W y\"", "lemma Lambert_W_mono:\n  assumes \"x \\<ge> -exp(-1)\" \"x \\<le> y\"\n  shows   \"Lambert_W x \\<le> Lambert_W y\"", "lemma Lambert_W_eq_iff [simp]:\n  \"x \\<ge> -exp(-1) \\<Longrightarrow> y \\<ge> -exp(-1) \\<Longrightarrow> Lambert_W x = Lambert_W y \\<longleftrightarrow> x = y\"", "lemma Lambert_W_le_iff [simp]:\n  \"x \\<ge> -exp(-1) \\<Longrightarrow> y \\<ge> -exp(-1) \\<Longrightarrow> Lambert_W x \\<le> Lambert_W y \\<longleftrightarrow> x \\<le> y\"", "lemma Lambert_W_less_iff [simp]:\n  \"x \\<ge> -exp(-1) \\<Longrightarrow> y \\<ge> -exp(-1) \\<Longrightarrow> Lambert_W x < Lambert_W y \\<longleftrightarrow> x < y\"", "lemma Lambert_W_le_minus_one:\n  assumes \"x \\<le> -exp(-1)\"\n  shows   \"Lambert_W x = -1\"", "lemma Lambert_W_pos_iff [simp]: \"Lambert_W x > 0 \\<longleftrightarrow> x > 0\"", "lemma Lambert_W_eq_0_iff [simp]: \"Lambert_W x = 0 \\<longleftrightarrow> x = 0\"", "lemma Lambert_W_nonneg_iff [simp]: \"Lambert_W x \\<ge> 0 \\<longleftrightarrow> x \\<ge> 0\"", "lemma Lambert_W_neg_iff [simp]: \"Lambert_W x < 0 \\<longleftrightarrow> x < 0\"", "lemma Lambert_W_nonpos_iff [simp]: \"Lambert_W x \\<le> 0 \\<longleftrightarrow> x \\<le> 0\"", "lemma Lambert_W_geI:\n  assumes \"y * exp y \\<le> x\"\n  shows   \"Lambert_W x \\<ge> y\"", "lemma Lambert_W_gtI:\n  assumes \"y * exp y < x\"\n  shows   \"Lambert_W x > y\"", "lemma Lambert_W_leI:\n  assumes \"y * exp y \\<ge> x\" \"y \\<ge> -1\" \"x \\<ge> -exp (-1)\"\n  shows   \"Lambert_W x \\<le> y\"", "lemma Lambert_W_lessI:\n  assumes \"y * exp y > x\" \"y \\<ge> -1\" \"x \\<ge> -exp (-1)\"\n  shows   \"Lambert_W x < y\"", "lemma Lambert_W'_strict_antimono:\n  assumes \"-exp (-1) \\<le> x\" \"x < y\" \"y < 0\"\n  shows   \"Lambert_W' x > Lambert_W' y\"", "lemma Lambert_W'_antimono:\n  assumes \"x \\<ge> -exp(-1)\" \"x \\<le> y\" \"y < 0\"\n  shows   \"Lambert_W' x \\<ge> Lambert_W' y\"", "lemma Lambert_W'_eq_iff [simp]:\n  \"x \\<in> {-exp(-1)..<0} \\<Longrightarrow> y \\<in> {-exp(-1)..<0} \\<Longrightarrow> Lambert_W' x = Lambert_W' y \\<longleftrightarrow> x = y\"", "lemma Lambert_W'_le_iff [simp]:\n  \"x \\<in> {-exp(-1)..<0} \\<Longrightarrow> y \\<in> {-exp(-1)..<0} \\<Longrightarrow> Lambert_W' x \\<le> Lambert_W' y \\<longleftrightarrow> x \\<ge> y\"", "lemma Lambert_W'_less_iff [simp]:\n  \"x \\<in> {-exp(-1)..<0} \\<Longrightarrow> y \\<in> {-exp(-1)..<0} \\<Longrightarrow> Lambert_W' x < Lambert_W' y \\<longleftrightarrow> x > y\"", "lemma Lambert_W'_le_minus_one:\n  assumes \"x \\<le> -exp(-1)\"\n  shows   \"Lambert_W' x = -1\"", "lemma Lambert_W'_ge_zero: \"x \\<ge> 0 \\<Longrightarrow> Lambert_W' x = -1\"", "lemma Lambert_W'_neg: \"Lambert_W' x < 0\"", "lemma Lambert_W'_nz [simp]: \"Lambert_W' x \\<noteq> 0\"", "lemma Lambert_W'_geI:\n  assumes \"y * exp y \\<ge> x\" \"y \\<le> -1\" \"x \\<ge> -exp(-1)\"\n  shows   \"Lambert_W' x \\<ge> y\"", "lemma Lambert_W'_gtI:\n  assumes \"y * exp y > x\" \"y \\<le> -1\" \"x \\<ge> -exp(-1)\"\n  shows   \"Lambert_W' x \\<ge> y\"", "lemma Lambert_W'_leI:\n  assumes \"y * exp y \\<le> x\" \"x < 0\"\n  shows   \"Lambert_W' x \\<le> y\"", "lemma Lambert_W'_lessI:\n  assumes \"y * exp y < x\" \"x < 0\"\n  shows   \"Lambert_W' x < y\"", "lemma bij_betw_exp_times_self_atLeastAtMost:\n  fixes a b :: real\n  assumes \"a \\<ge> -1\" \"a \\<le> b\"\n  shows   \"bij_betw (\\<lambda>x. x * exp x) {a..b} {a * exp a..b * exp b}\"", "lemma bij_betw_exp_times_self_atLeastAtMost':\n  fixes a b :: real\n  assumes \"a \\<le> b\" \"b \\<le> -1\"\n  shows   \"bij_betw (\\<lambda>x. x * exp x) {a..b} {b * exp b..a * exp a}\"", "lemma bij_betw_exp_times_self_atLeast:\n  fixes a :: real\n  assumes \"a \\<ge> -1\"\n  shows   \"bij_betw (\\<lambda>x. x * exp x) {a..} {a * exp a..}\"", "lemma Lambert_W_2_ln_2 [simp]: \"Lambert_W (2 * ln 2) = ln 2\"", "lemma Lambert_W_exp_1 [simp]: \"Lambert_W (exp 1) = 1\"", "lemma Lambert_W_neg_ln_over_self:\n  assumes \"x \\<in> {exp (-1)..exp 1}\"\n  shows   \"Lambert_W (-ln x / x) = -ln x\"", "lemma Lambert_W'_neg_ln_over_self:\n  assumes \"x \\<ge> exp 1\"\n  shows   \"Lambert_W' (-ln x / x) = -ln x\"", "lemma exp_Lambert_W: \"x \\<ge> -exp (-1) \\<Longrightarrow> x \\<noteq> 0 \\<Longrightarrow> exp (Lambert_W x) = x / Lambert_W x\"", "lemma exp_Lambert_W': \"x \\<in> {-exp (-1)..<0} \\<Longrightarrow> exp (Lambert_W' x) = x / Lambert_W' x\"", "lemma ln_Lambert_W:\n  assumes \"x > 0\"\n  shows   \"ln (Lambert_W x) = ln x - Lambert_W x\"", "lemma ln_minus_Lambert_W':\n  assumes \"x \\<in> {-exp (-1)..<0}\"\n  shows   \"ln (-Lambert_W' x) = ln (-x) - Lambert_W' x\"", "lemma Lambert_W_plus_Lambert_W_eq:\n  assumes \"x > 0\" \"y > 0\"\n  shows   \"Lambert_W x + Lambert_W y = Lambert_W (x * y * (1 / Lambert_W x + 1 / Lambert_W y))\"", "lemma Lambert_W'_plus_Lambert_W'_eq:\n  assumes \"x \\<in> {-exp(-1)..<0}\" \"y \\<in> {-exp(-1)..<0}\"\n  shows   \"Lambert_W' x + Lambert_W' y = Lambert_W' (x * y * (1 / Lambert_W' x + 1 / Lambert_W' y))\"", "lemma Lambert_W_gt_ln_minus_ln_ln:\n  assumes \"x > exp 1\"\n  shows   \"Lambert_W x > ln x - ln (ln x)\"", "lemma Lambert_W_less_ln:\n  assumes \"x > exp 1\"\n  shows   \"Lambert_W x < ln x\"", "lemma filterlim_Lambert_W_at_top [tendsto_intros]: \"filterlim Lambert_W at_top at_top\"", "lemma filterlim_Lambert_W_at_left_0 [tendsto_intros]:\n  \"filterlim Lambert_W' at_bot (at_left 0)\"", "lemma continuous_on_Lambert_W [continuous_intros]: \"continuous_on {-exp (-1)..} Lambert_W\"", "lemma continuous_on_Lambert_W_alt [continuous_intros]:\n  assumes \"continuous_on A f\" \"\\<And>x. x \\<in> A \\<Longrightarrow> f x \\<ge> -exp (-1)\"\n  shows   \"continuous_on A (\\<lambda>x. Lambert_W (f x))\"", "lemma continuous_on_Lambert_W' [continuous_intros]: \"continuous_on {-exp (-1)..<0} Lambert_W'\"", "lemma continuous_on_Lambert_W'_alt [continuous_intros]:\n  assumes \"continuous_on A f\" \"\\<And>x. x \\<in> A \\<Longrightarrow> f x \\<in> {-exp (-1)..<0}\"\n  shows   \"continuous_on A (\\<lambda>x. Lambert_W' (f x))\"", "lemma tendsto_Lambert_W_1:\n  assumes \"(f \\<longlongrightarrow> L) F\" \"eventually (\\<lambda>x. f x \\<ge> -exp (-1)) F\"\n  shows   \"((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F\"", "lemma tendsto_Lambert_W_2:\n  assumes \"(f \\<longlongrightarrow> L) F\" \"L > -exp (-1)\"\n  shows   \"((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F\"", "lemma tendsto_Lambert_W [tendsto_intros]:\n  assumes \"(f \\<longlongrightarrow> L) F\" \"eventually (\\<lambda>x. f x \\<ge> -exp (-1)) F \\<or> L > -exp (-1)\"\n  shows   \"((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F\"", "lemma tendsto_Lambert_W'_1:\n  assumes \"(f \\<longlongrightarrow> L) F\" \"eventually (\\<lambda>x. f x \\<ge> -exp (-1)) F\" \"L < 0\"\n  shows   \"((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F\"", "lemma tendsto_Lambert_W'_2:\n  assumes \"(f \\<longlongrightarrow> L) F\" \"L > -exp (-1)\" \"L < 0\"\n  shows   \"((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F\"", "lemma tendsto_Lambert_W' [tendsto_intros]:\n  assumes \"(f \\<longlongrightarrow> L) F\" \"eventually (\\<lambda>x. f x \\<ge> -exp (-1)) F \\<or> L > -exp (-1)\" \"L < 0\"\n  shows   \"((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F\"", "lemma continuous_Lambert_W [continuous_intros]:\n  assumes \"continuous F f\" \"f (Lim F (\\<lambda>x. x)) > -exp (-1) \\<or> eventually (\\<lambda>x. f x \\<ge> -exp (-1)) F\"\n  shows   \"continuous F (\\<lambda>x. Lambert_W (f x))\"", "lemma continuous_Lambert_W' [continuous_intros]:\n  assumes \"continuous F f\" \"f (Lim F (\\<lambda>x. x)) > -exp (-1) \\<or> eventually (\\<lambda>x. f x \\<ge> -exp (-1)) F\"\n          \"f (Lim F (\\<lambda>x. x)) < 0\"\n  shows   \"continuous F (\\<lambda>x. Lambert_W' (f x))\"", "lemma has_field_derivative_Lambert_W [derivative_intros]:\n  assumes x: \"x > -exp (-1)\"\n  shows   \"(Lambert_W has_real_derivative inverse (x + exp (Lambert_W x))) (at x within A)\"", "lemma has_field_derivative_Lambert_W_gen [derivative_intros]:\n  assumes \"(f has_real_derivative f') (at x within A)\" \"f x > -exp (-1)\"\n  shows   \"((\\<lambda>x. Lambert_W (f x)) has_real_derivative\n             (f' / (f x + exp (Lambert_W (f x))))) (at x within A)\"", "lemma has_field_derivative_Lambert_W' [derivative_intros]:\n  assumes x: \"x \\<in> {-exp (-1)<..<0}\"\n  shows   \"(Lambert_W' has_real_derivative inverse (x + exp (Lambert_W' x))) (at x within A)\"", "lemma has_field_derivative_Lambert_W'_gen [derivative_intros]:\n  assumes \"(f has_real_derivative f') (at x within A)\" \"f x \\<in> {-exp (-1)<..<0}\"\n  shows   \"((\\<lambda>x. Lambert_W' (f x)) has_real_derivative\n             (f' / (f x + exp (Lambert_W' (f x))))) (at x within A)\"", "theorem Lambert_W_asymp_equiv_at_top:\n  \"(\\<lambda>x. Lambert_W x - ln x) \\<sim>[at_top] (\\<lambda>x. -ln (ln x))\"", "lemma Lambert_W_asymp_equiv_at_top' [asymp_equiv_intros]:\n  \"Lambert_W \\<sim>[at_top] ln\"", "theorem Lambert_W'_asymp_equiv_at_left_0:\n  \"(\\<lambda>x. Lambert_W' x - ln (-x)) \\<sim>[at_left 0] (\\<lambda>x. -ln (-ln (-x)))\"", "lemma Lambert_W'_asymp_equiv'_at_left_0 [asymp_equiv_intros]:\n  \"Lambert_W' \\<sim>[at_left 0] (\\<lambda>x. ln (-x))\"", "lemma sqrt_sqrt_mult:\n  assumes \"x \\<ge> (0 :: real)\"\n  shows   \"sqrt x * (sqrt x * y) = x * y\"", "theorem Lambert_W_asymp_equiv_at_right_minus_exp_minus1:\n  defines \"e \\<equiv> exp 1\"\n  defines \"a \\<equiv> -exp (-1)\"\n  defines \"C1 \\<equiv> sqrt (2 * exp 1)\"\n  defines \"f \\<equiv> (\\<lambda>x. -1 + C1 * sqrt (x - a))\"\n  shows   \"(\\<lambda>x. Lambert_W x - f x) \\<sim>[at_right a] (\\<lambda>x. -2/3 * e * (x - a))\"", "theorem Lambert_W'_asymp_equiv_at_right_minus_exp_minus1:\n  defines \"e \\<equiv> exp 1\"\n  defines \"a \\<equiv> -exp (-1)\"\n  defines \"C1 \\<equiv> sqrt (2 * exp 1)\"\n  defines \"f \\<equiv> (\\<lambda>x. -1 - C1 * sqrt (x - a))\"\n  shows   \"(\\<lambda>x. Lambert_W' x - f x) \\<sim>[at_right a] (\\<lambda>x. -2/3 * e * (x - a))\"", "theorem Lambert_W_asymp_equiv_at_top'':\n  \"(\\<lambda>x. Lambert_W x - ln x + ln (ln x)) \\<sim>[at_top] (\\<lambda>x. ln (ln x) / ln x)\""], "translations": [["", "lemma asymp_equiv_sandwich':\n  fixes f :: \"'a \\<Rightarrow> real\"\n  assumes \"\\<And>c'. c' \\<in> {l<..<c} \\<Longrightarrow> eventually (\\<lambda>x. f x \\<ge> c' * g x) F\"\n  assumes \"\\<And>c'. c' \\<in> {c<..<u} \\<Longrightarrow> eventually (\\<lambda>x. f x \\<le> c' * g x) F\"\n  assumes \"l < c\" \"c < u\" and [simp]: \"c \\<noteq> 0\"\n  shows   \"f \\<sim>[F] (\\<lambda>x. c * g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<sim>[F] (\\<lambda>x. c * g x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<sim>[F] (\\<lambda>x. c * g x)", "have \"(\\<lambda>x. f x - c * g x) \\<in> o[F](g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. f x - c * g x) \\<in> o[F](g)", "proof (rule landau_o.smallI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ca.\n       0 < ca \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in F. norm (f x - c * g x) \\<le> ca * norm (g x)", "fix e :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ca.\n       0 < ca \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in F. norm (f x - c * g x) \\<le> ca * norm (g x)", "assume e: \"e > 0\""], ["proof (state)\nthis:\n  0 < e\n\ngoal (1 subgoal):\n 1. \\<And>ca.\n       0 < ca \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in F. norm (f x - c * g x) \\<le> ca * norm (g x)", "define C1 where \"C1 = min (c + e) ((c + u) / 2)\""], ["proof (state)\nthis:\n  C1 = min (c + e) ((c + u) / 2)\n\ngoal (1 subgoal):\n 1. \\<And>ca.\n       0 < ca \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in F. norm (f x - c * g x) \\<le> ca * norm (g x)", "have C1: \"C1 \\<in> {c<..<u}\" \"C1 - c \\<le> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C1 \\<in> {c<..<u} &&& C1 - c \\<le> e", "using e assms"], ["proof (prove)\nusing this:\n  0 < e\n  ?c' \\<in> {l<..<c} \\<Longrightarrow>\n  \\<forall>\\<^sub>F x in F. ?c' * g x \\<le> f x\n  ?c' \\<in> {c<..<u} \\<Longrightarrow>\n  \\<forall>\\<^sub>F x in F. f x \\<le> ?c' * g x\n  l < c\n  c < u\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. C1 \\<in> {c<..<u} &&& C1 - c \\<le> e", "by (auto simp: C1_def min_def)"], ["proof (state)\nthis:\n  C1 \\<in> {c<..<u}\n  C1 - c \\<le> e\n\ngoal (1 subgoal):\n 1. \\<And>ca.\n       0 < ca \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in F. norm (f x - c * g x) \\<le> ca * norm (g x)", "define C2 where \"C2 = max (c - e) ((c + l) / 2)\""], ["proof (state)\nthis:\n  C2 = max (c - e) ((c + l) / 2)\n\ngoal (1 subgoal):\n 1. \\<And>ca.\n       0 < ca \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in F. norm (f x - c * g x) \\<le> ca * norm (g x)", "have C2: \"C2 \\<in> {l<..<c}\" \"c - C2 \\<le> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C2 \\<in> {l<..<c} &&& c - C2 \\<le> e", "using e assms"], ["proof (prove)\nusing this:\n  0 < e\n  ?c' \\<in> {l<..<c} \\<Longrightarrow>\n  \\<forall>\\<^sub>F x in F. ?c' * g x \\<le> f x\n  ?c' \\<in> {c<..<u} \\<Longrightarrow>\n  \\<forall>\\<^sub>F x in F. f x \\<le> ?c' * g x\n  l < c\n  c < u\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. C2 \\<in> {l<..<c} &&& c - C2 \\<le> e", "by (auto simp: C2_def max_def field_simps)"], ["proof (state)\nthis:\n  C2 \\<in> {l<..<c}\n  c - C2 \\<le> e\n\ngoal (1 subgoal):\n 1. \\<And>ca.\n       0 < ca \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in F. norm (f x - c * g x) \\<le> ca * norm (g x)", "show \"eventually (\\<lambda>x. norm (f x - c * g x) \\<le> e * norm (g x)) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. norm (f x - c * g x) \\<le> e * norm (g x)", "using assms(2)[OF C1(1)] assms(1)[OF C2(1)]"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. f x \\<le> C1 * g x\n  \\<forall>\\<^sub>F x in F. C2 * g x \\<le> f x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. norm (f x - c * g x) \\<le> e * norm (g x)", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f x \\<le> C1 * g x; C2 * g x \\<le> f x\\<rbrakk>\n       \\<Longrightarrow> norm (f x - c * g x) \\<le> e * norm (g x)", "case (elim x)"], ["proof (state)\nthis:\n  f x \\<le> C1 * g x\n  C2 * g x \\<le> f x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f x \\<le> C1 * g x; C2 * g x \\<le> f x\\<rbrakk>\n       \\<Longrightarrow> norm (f x - c * g x) \\<le> e * norm (g x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (f x - c * g x) \\<le> e * norm (g x)", "proof (cases \"f x \\<ge> c * g x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)\n 2. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "case True"], ["proof (state)\nthis:\n  c * g x \\<le> f x\n\ngoal (2 subgoals):\n 1. c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)\n 2. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "hence \"norm (f x - c * g x) = f x - c * g x\""], ["proof (prove)\nusing this:\n  c * g x \\<le> f x\n\ngoal (1 subgoal):\n 1. norm (f x - c * g x) = f x - c * g x", "by simp"], ["proof (state)\nthis:\n  norm (f x - c * g x) = f x - c * g x\n\ngoal (2 subgoals):\n 1. c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)\n 2. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "also"], ["proof (state)\nthis:\n  norm (f x - c * g x) = f x - c * g x\n\ngoal (2 subgoals):\n 1. c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)\n 2. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "have \"\\<dots> \\<le> (C1 - c) * g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x - c * g x \\<le> (C1 - c) * g x", "using elim"], ["proof (prove)\nusing this:\n  f x \\<le> C1 * g x\n  C2 * g x \\<le> f x\n\ngoal (1 subgoal):\n 1. f x - c * g x \\<le> (C1 - c) * g x", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  f x - c * g x \\<le> (C1 - c) * g x\n\ngoal (2 subgoals):\n 1. c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)\n 2. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "also"], ["proof (state)\nthis:\n  f x - c * g x \\<le> (C1 - c) * g x\n\ngoal (2 subgoals):\n 1. c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)\n 2. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "have \"\\<dots> \\<le> (C1 - c) * norm (g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C1 - c) * g x \\<le> (C1 - c) * norm (g x)", "using C1"], ["proof (prove)\nusing this:\n  C1 \\<in> {c<..<u}\n  C1 - c \\<le> e\n\ngoal (1 subgoal):\n 1. (C1 - c) * g x \\<le> (C1 - c) * norm (g x)", "by (intro mult_left_mono) auto"], ["proof (state)\nthis:\n  (C1 - c) * g x \\<le> (C1 - c) * norm (g x)\n\ngoal (2 subgoals):\n 1. c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)\n 2. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "also"], ["proof (state)\nthis:\n  (C1 - c) * g x \\<le> (C1 - c) * norm (g x)\n\ngoal (2 subgoals):\n 1. c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)\n 2. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "have \"\\<dots> \\<le> e * norm (g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C1 - c) * norm (g x) \\<le> e * norm (g x)", "using C1 elim"], ["proof (prove)\nusing this:\n  C1 \\<in> {c<..<u}\n  C1 - c \\<le> e\n  f x \\<le> C1 * g x\n  C2 * g x \\<le> f x\n\ngoal (1 subgoal):\n 1. (C1 - c) * norm (g x) \\<le> e * norm (g x)", "by (intro mult_right_mono) auto"], ["proof (state)\nthis:\n  (C1 - c) * norm (g x) \\<le> e * norm (g x)\n\ngoal (2 subgoals):\n 1. c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)\n 2. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "finally"], ["proof (chain)\npicking this:\n  norm (f x - c * g x) \\<le> e * norm (g x)", "show ?thesis"], ["proof (prove)\nusing this:\n  norm (f x - c * g x) \\<le> e * norm (g x)\n\ngoal (1 subgoal):\n 1. norm (f x - c * g x) \\<le> e * norm (g x)", "using elim"], ["proof (prove)\nusing this:\n  norm (f x - c * g x) \\<le> e * norm (g x)\n  f x \\<le> C1 * g x\n  C2 * g x \\<le> f x\n\ngoal (1 subgoal):\n 1. norm (f x - c * g x) \\<le> e * norm (g x)", "by simp"], ["proof (state)\nthis:\n  norm (f x - c * g x) \\<le> e * norm (g x)\n\ngoal (1 subgoal):\n 1. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "case False"], ["proof (state)\nthis:\n  \\<not> c * g x \\<le> f x\n\ngoal (1 subgoal):\n 1. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "hence \"norm (f x - c * g x) = c * g x - f x\""], ["proof (prove)\nusing this:\n  \\<not> c * g x \\<le> f x\n\ngoal (1 subgoal):\n 1. norm (f x - c * g x) = c * g x - f x", "by simp"], ["proof (state)\nthis:\n  norm (f x - c * g x) = c * g x - f x\n\ngoal (1 subgoal):\n 1. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "also"], ["proof (state)\nthis:\n  norm (f x - c * g x) = c * g x - f x\n\ngoal (1 subgoal):\n 1. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "have \"\\<dots> \\<le> (c - C2) * g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c * g x - f x \\<le> (c - C2) * g x", "using elim"], ["proof (prove)\nusing this:\n  f x \\<le> C1 * g x\n  C2 * g x \\<le> f x\n\ngoal (1 subgoal):\n 1. c * g x - f x \\<le> (c - C2) * g x", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  c * g x - f x \\<le> (c - C2) * g x\n\ngoal (1 subgoal):\n 1. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "also"], ["proof (state)\nthis:\n  c * g x - f x \\<le> (c - C2) * g x\n\ngoal (1 subgoal):\n 1. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "have \"\\<dots> \\<le> (c - C2) * norm (g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c - C2) * g x \\<le> (c - C2) * norm (g x)", "using C2"], ["proof (prove)\nusing this:\n  C2 \\<in> {l<..<c}\n  c - C2 \\<le> e\n\ngoal (1 subgoal):\n 1. (c - C2) * g x \\<le> (c - C2) * norm (g x)", "by (intro mult_left_mono) auto"], ["proof (state)\nthis:\n  (c - C2) * g x \\<le> (c - C2) * norm (g x)\n\ngoal (1 subgoal):\n 1. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "also"], ["proof (state)\nthis:\n  (c - C2) * g x \\<le> (c - C2) * norm (g x)\n\ngoal (1 subgoal):\n 1. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "have \"\\<dots> \\<le> e * norm (g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c - C2) * norm (g x) \\<le> e * norm (g x)", "using C2 elim"], ["proof (prove)\nusing this:\n  C2 \\<in> {l<..<c}\n  c - C2 \\<le> e\n  f x \\<le> C1 * g x\n  C2 * g x \\<le> f x\n\ngoal (1 subgoal):\n 1. (c - C2) * norm (g x) \\<le> e * norm (g x)", "by (intro mult_right_mono) auto"], ["proof (state)\nthis:\n  (c - C2) * norm (g x) \\<le> e * norm (g x)\n\ngoal (1 subgoal):\n 1. \\<not> c * g x \\<le> f x \\<Longrightarrow>\n    norm (f x - c * g x) \\<le> e * norm (g x)", "finally"], ["proof (chain)\npicking this:\n  norm (f x - c * g x) \\<le> e * norm (g x)", "show ?thesis"], ["proof (prove)\nusing this:\n  norm (f x - c * g x) \\<le> e * norm (g x)\n\ngoal (1 subgoal):\n 1. norm (f x - c * g x) \\<le> e * norm (g x)", "using elim"], ["proof (prove)\nusing this:\n  norm (f x - c * g x) \\<le> e * norm (g x)\n  f x \\<le> C1 * g x\n  C2 * g x \\<le> f x\n\ngoal (1 subgoal):\n 1. norm (f x - c * g x) \\<le> e * norm (g x)", "by simp"], ["proof (state)\nthis:\n  norm (f x - c * g x) \\<le> e * norm (g x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  norm (f x - c * g x) \\<le> e * norm (g x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. norm (f x - c * g x) \\<le> e * norm (g x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. f x - c * g x) \\<in> o[F](g)\n\ngoal (1 subgoal):\n 1. f \\<sim>[F] (\\<lambda>x. c * g x)", "also"], ["proof (state)\nthis:\n  (\\<lambda>x. f x - c * g x) \\<in> o[F](g)\n\ngoal (1 subgoal):\n 1. f \\<sim>[F] (\\<lambda>x. c * g x)", "have \"g \\<in> O[F](\\<lambda>x. c * g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> O[F](\\<lambda>x. c * g x)", "by simp"], ["proof (state)\nthis:\n  g \\<in> O[F](\\<lambda>x. c * g x)\n\ngoal (1 subgoal):\n 1. f \\<sim>[F] (\\<lambda>x. c * g x)", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>x. f x - c * g x) \\<in> o[F](\\<lambda>x. c * g x)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x. f x - c * g x) \\<in> o[F](\\<lambda>x. c * g x)\n\ngoal (1 subgoal):\n 1. f \\<sim>[F] (\\<lambda>x. c * g x)", "unfolding asymp_equiv_altdef"], ["proof (prove)\nusing this:\n  (\\<lambda>x. f x - c * g x) \\<in> o[F](\\<lambda>x. c * g x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. f x - c * g x) \\<in> o[F](\\<lambda>x. c * g x)", "by blast"], ["proof (state)\nthis:\n  f \\<sim>[F] (\\<lambda>x. c * g x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma asymp_equiv_sandwich'':\n  fixes f :: \"'a \\<Rightarrow> real\"\n  assumes \"\\<And>c'. c' \\<in> {l<..<1} \\<Longrightarrow> eventually (\\<lambda>x. f x \\<ge> c' * g x) F\"\n  assumes \"\\<And>c'. c' \\<in> {1<..<u} \\<Longrightarrow> eventually (\\<lambda>x. f x \\<le> c' * g x) F\"\n  assumes \"l < 1\" \"1 < u\"\n  shows   \"f \\<sim>[F] (g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<sim>[F] g", "using asymp_equiv_sandwich'[of l 1 g f F u] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>c'.\n              c' \\<in> {l<..<1} \\<Longrightarrow>\n              \\<forall>\\<^sub>F x in F. c' * g x \\<le> f x;\n   \\<And>c'.\n      c' \\<in> {1<..<u} \\<Longrightarrow>\n      \\<forall>\\<^sub>F x in F. f x \\<le> c' * g x;\n   l < 1; 1 < u; 1 \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> f \\<sim>[F] (\\<lambda>x. 1 * g x)\n  ?c' \\<in> {l<..<1} \\<Longrightarrow>\n  \\<forall>\\<^sub>F x in F. ?c' * g x \\<le> f x\n  ?c' \\<in> {1<..<u} \\<Longrightarrow>\n  \\<forall>\\<^sub>F x in F. f x \\<le> ?c' * g x\n  l < 1\n  1 < u\n\ngoal (1 subgoal):\n 1. f \\<sim>[F] g", "by simp"], ["", "(*>*)"], ["", "subsection \\<open>Properties of the function $x\\mapsto x e^{x}$\\<close>"], ["", "lemma exp_times_self_gt:\n  assumes \"x \\<noteq> -1\"\n  shows   \"x * exp x > -exp (-1::real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - exp (- 1) < x * exp x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - exp (- 1) < x * exp x", "define f where \"f = (\\<lambda>x::real. x * exp x)\""], ["proof (state)\nthis:\n  f = (\\<lambda>x. x * exp x)\n\ngoal (1 subgoal):\n 1. - exp (- 1) < x * exp x", "define f' where \"f' = (\\<lambda>x::real. (x + 1) * exp x)\""], ["proof (state)\nthis:\n  f' = (\\<lambda>x. (x + 1) * exp x)\n\ngoal (1 subgoal):\n 1. - exp (- 1) < x * exp x", "have \"(f has_field_derivative f' x) (at x)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f has_real_derivative f' x) (at x)", "by (auto simp: f_def f'_def intro!: derivative_eq_intros simp: algebra_simps)"], ["proof (state)\nthis:\n  (f has_real_derivative f' ?x) (at ?x)\n\ngoal (1 subgoal):\n 1. - exp (- 1) < x * exp x", "define l r where \"l = min x (-1)\" and \"r = max x (-1)\""], ["proof (state)\nthis:\n  l = min x (- 1)\n  r = max x (- 1)\n\ngoal (1 subgoal):\n 1. - exp (- 1) < x * exp x", "have \"\\<exists>z. z > l \\<and> z < r \\<and> f r - f l = (r - l) * f' z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z>l. z < r \\<and> f r - f l = (r - l) * f' z", "unfolding f_def f'_def l_def r_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z>min x (- 1).\n       z < max x (- 1) \\<and>\n       max x (- 1) * exp (max x (- 1)) - min x (- 1) * exp (min x (- 1)) =\n       (max x (- 1) - min x (- 1)) * ((z + 1) * exp z)", "using assms"], ["proof (prove)\nusing this:\n  x \\<noteq> - 1\n\ngoal (1 subgoal):\n 1. \\<exists>z>min x (- 1).\n       z < max x (- 1) \\<and>\n       max x (- 1) * exp (max x (- 1)) - min x (- 1) * exp (min x (- 1)) =\n       (max x (- 1) - min x (- 1)) * ((z + 1) * exp z)", "by (intro MVT2) (auto intro!: derivative_eq_intros simp: algebra_simps)"], ["proof (state)\nthis:\n  \\<exists>z>l. z < r \\<and> f r - f l = (r - l) * f' z\n\ngoal (1 subgoal):\n 1. - exp (- 1) < x * exp x", "then"], ["proof (chain)\npicking this:\n  \\<exists>z>l. z < r \\<and> f r - f l = (r - l) * f' z", "obtain z where z: \"z \\<in> {l<..<r}\" \"f r - f l = (r - l) * f' z\""], ["proof (prove)\nusing this:\n  \\<exists>z>l. z < r \\<and> f r - f l = (r - l) * f' z\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> {l<..<r}; f r - f l = (r - l) * f' z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  z \\<in> {l<..<r}\n  f r - f l = (r - l) * f' z\n\ngoal (1 subgoal):\n 1. - exp (- 1) < x * exp x", "from z"], ["proof (chain)\npicking this:\n  z \\<in> {l<..<r}\n  f r - f l = (r - l) * f' z", "have \"f x = f (-1) + (x + 1) * f' z\""], ["proof (prove)\nusing this:\n  z \\<in> {l<..<r}\n  f r - f l = (r - l) * f' z\n\ngoal (1 subgoal):\n 1. f x = f (- 1) + (x + 1) * f' z", "using assms"], ["proof (prove)\nusing this:\n  z \\<in> {l<..<r}\n  f r - f l = (r - l) * f' z\n  x \\<noteq> - 1\n\ngoal (1 subgoal):\n 1. f x = f (- 1) + (x + 1) * f' z", "by (cases \"x \\<ge> -1\") (auto simp: l_def r_def max_def min_def algebra_simps)"], ["proof (state)\nthis:\n  f x = f (- 1) + (x + 1) * f' z\n\ngoal (1 subgoal):\n 1. - exp (- 1) < x * exp x", "moreover"], ["proof (state)\nthis:\n  f x = f (- 1) + (x + 1) * f' z\n\ngoal (1 subgoal):\n 1. - exp (- 1) < x * exp x", "have \"sgn ((x + 1) * f' z) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sgn ((x + 1) * f' z) = 1", "using z assms"], ["proof (prove)\nusing this:\n  z \\<in> {l<..<r}\n  f r - f l = (r - l) * f' z\n  x \\<noteq> - 1\n\ngoal (1 subgoal):\n 1. sgn ((x + 1) * f' z) = 1", "by (cases x \"(-1) :: real\" rule: linorder_cases; cases z \"(-1) :: real\" rule: linorder_cases)\n       (auto simp: f'_def sgn_mult l_def r_def)"], ["proof (state)\nthis:\n  sgn ((x + 1) * f' z) = 1\n\ngoal (1 subgoal):\n 1. - exp (- 1) < x * exp x", "hence \"(x + 1) * f' z > 0\""], ["proof (prove)\nusing this:\n  sgn ((x + 1) * f' z) = 1\n\ngoal (1 subgoal):\n 1. 0 < (x + 1) * f' z", "using sgn_greater"], ["proof (prove)\nusing this:\n  sgn ((x + 1) * f' z) = 1\n  ((0::?'a) < sgn ?a) = ((0::?'a) < ?a)\n\ngoal (1 subgoal):\n 1. 0 < (x + 1) * f' z", "by fastforce"], ["proof (state)\nthis:\n  0 < (x + 1) * f' z\n\ngoal (1 subgoal):\n 1. - exp (- 1) < x * exp x", "ultimately"], ["proof (chain)\npicking this:\n  f x = f (- 1) + (x + 1) * f' z\n  0 < (x + 1) * f' z", "show ?thesis"], ["proof (prove)\nusing this:\n  f x = f (- 1) + (x + 1) * f' z\n  0 < (x + 1) * f' z\n\ngoal (1 subgoal):\n 1. - exp (- 1) < x * exp x", "by (simp add: f_def)"], ["proof (state)\nthis:\n  - exp (- 1) < x * exp x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exp_times_self_ge: \"x * exp x \\<ge> -exp (-1::real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> x * exp x", "using exp_times_self_gt[of x]"], ["proof (prove)\nusing this:\n  x \\<noteq> - 1 \\<Longrightarrow> - exp (- 1) < x * exp x\n\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> x * exp x", "by (cases \"x = -1\") auto"], ["", "lemma exp_times_self_strict_mono:\n  assumes \"x \\<ge> -1\" \"x < (y :: real)\"\n  shows   \"x * exp x < y * exp y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * exp x < y * exp y", "using assms(2)"], ["proof (prove)\nusing this:\n  x < y\n\ngoal (1 subgoal):\n 1. x * exp x < y * exp y", "proof (rule DERIV_pos_imp_increasing_open)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x < xa; xa < y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ((\\<lambda>a. a * exp a) has_real_derivative y)\n                             (at xa) \\<and>\n                            0 < y\n 2. continuous_on {x..y} (\\<lambda>a. a * exp a)", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x < xa; xa < y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ((\\<lambda>a. a * exp a) has_real_derivative y)\n                             (at xa) \\<and>\n                            0 < y\n 2. continuous_on {x..y} (\\<lambda>a. a * exp a)", "assume t: \"x < t\" \"t < y\""], ["proof (state)\nthis:\n  x < t\n  t < y\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x < xa; xa < y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ((\\<lambda>a. a * exp a) has_real_derivative y)\n                             (at xa) \\<and>\n                            0 < y\n 2. continuous_on {x..y} (\\<lambda>a. a * exp a)", "have \"((\\<lambda>x. x * exp x) has_real_derivative (t + 1) * exp t) (at t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. x * exp x) has_real_derivative (t + 1) * exp t) (at t)", "by (auto intro!: derivative_eq_intros simp: algebra_simps)"], ["proof (state)\nthis:\n  ((\\<lambda>x. x * exp x) has_real_derivative (t + 1) * exp t) (at t)\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x < xa; xa < y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ((\\<lambda>a. a * exp a) has_real_derivative y)\n                             (at xa) \\<and>\n                            0 < y\n 2. continuous_on {x..y} (\\<lambda>a. a * exp a)", "moreover"], ["proof (state)\nthis:\n  ((\\<lambda>x. x * exp x) has_real_derivative (t + 1) * exp t) (at t)\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x < xa; xa < y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ((\\<lambda>a. a * exp a) has_real_derivative y)\n                             (at xa) \\<and>\n                            0 < y\n 2. continuous_on {x..y} (\\<lambda>a. a * exp a)", "have \"(t + 1) * exp t > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < (t + 1) * exp t", "using t assms"], ["proof (prove)\nusing this:\n  x < t\n  t < y\n  - 1 \\<le> x\n  x < y\n\ngoal (1 subgoal):\n 1. 0 < (t + 1) * exp t", "by (intro mult_pos_pos) auto"], ["proof (state)\nthis:\n  0 < (t + 1) * exp t\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x < xa; xa < y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ((\\<lambda>a. a * exp a) has_real_derivative y)\n                             (at xa) \\<and>\n                            0 < y\n 2. continuous_on {x..y} (\\<lambda>a. a * exp a)", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<lambda>x. x * exp x) has_real_derivative (t + 1) * exp t) (at t)\n  0 < (t + 1) * exp t", "show \"\\<exists>y. ((\\<lambda>a. a * exp a) has_real_derivative y) (at t) \\<and> 0 < y\""], ["proof (prove)\nusing this:\n  ((\\<lambda>x. x * exp x) has_real_derivative (t + 1) * exp t) (at t)\n  0 < (t + 1) * exp t\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       ((\\<lambda>a. a * exp a) has_real_derivative y) (at t) \\<and> 0 < y", "by blast"], ["proof (state)\nthis:\n  \\<exists>y.\n     ((\\<lambda>a. a * exp a) has_real_derivative y) (at t) \\<and> 0 < y\n\ngoal (1 subgoal):\n 1. continuous_on {x..y} (\\<lambda>a. a * exp a)", "qed (auto intro!: continuous_intros)"], ["", "lemma exp_times_self_strict_antimono:\n  assumes \"y \\<le> -1\" \"x < (y :: real)\"\n  shows   \"x * exp x > y * exp y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y * exp y < x * exp x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. y * exp y < x * exp x", "have \"-x * exp x < -y * exp y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - x * exp x < - y * exp y", "using assms(2)"], ["proof (prove)\nusing this:\n  x < y\n\ngoal (1 subgoal):\n 1. - x * exp x < - y * exp y", "proof (rule DERIV_pos_imp_increasing_open)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x < xa; xa < y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ((\\<lambda>a. - a * exp a) has_real_derivative\n                             y)\n                             (at xa) \\<and>\n                            0 < y\n 2. continuous_on {x..y} (\\<lambda>a. - a * exp a)", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x < xa; xa < y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ((\\<lambda>a. - a * exp a) has_real_derivative\n                             y)\n                             (at xa) \\<and>\n                            0 < y\n 2. continuous_on {x..y} (\\<lambda>a. - a * exp a)", "assume t: \"x < t\" \"t < y\""], ["proof (state)\nthis:\n  x < t\n  t < y\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x < xa; xa < y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ((\\<lambda>a. - a * exp a) has_real_derivative\n                             y)\n                             (at xa) \\<and>\n                            0 < y\n 2. continuous_on {x..y} (\\<lambda>a. - a * exp a)", "have \"((\\<lambda>x. -x * exp x) has_real_derivative (-(t + 1)) * exp t) (at t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. - x * exp x) has_real_derivative - (t + 1) * exp t) (at t)", "by (auto intro!: derivative_eq_intros simp: algebra_simps)"], ["proof (state)\nthis:\n  ((\\<lambda>x. - x * exp x) has_real_derivative - (t + 1) * exp t) (at t)\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x < xa; xa < y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ((\\<lambda>a. - a * exp a) has_real_derivative\n                             y)\n                             (at xa) \\<and>\n                            0 < y\n 2. continuous_on {x..y} (\\<lambda>a. - a * exp a)", "moreover"], ["proof (state)\nthis:\n  ((\\<lambda>x. - x * exp x) has_real_derivative - (t + 1) * exp t) (at t)\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x < xa; xa < y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ((\\<lambda>a. - a * exp a) has_real_derivative\n                             y)\n                             (at xa) \\<and>\n                            0 < y\n 2. continuous_on {x..y} (\\<lambda>a. - a * exp a)", "have \"(-(t + 1)) * exp t > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < - (t + 1) * exp t", "using t assms"], ["proof (prove)\nusing this:\n  x < t\n  t < y\n  y \\<le> - 1\n  x < y\n\ngoal (1 subgoal):\n 1. 0 < - (t + 1) * exp t", "by (intro mult_pos_pos) auto"], ["proof (state)\nthis:\n  0 < - (t + 1) * exp t\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x < xa; xa < y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ((\\<lambda>a. - a * exp a) has_real_derivative\n                             y)\n                             (at xa) \\<and>\n                            0 < y\n 2. continuous_on {x..y} (\\<lambda>a. - a * exp a)", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<lambda>x. - x * exp x) has_real_derivative - (t + 1) * exp t) (at t)\n  0 < - (t + 1) * exp t", "show \"\\<exists>y. ((\\<lambda>a. -a * exp a) has_real_derivative y) (at t) \\<and> 0 < y\""], ["proof (prove)\nusing this:\n  ((\\<lambda>x. - x * exp x) has_real_derivative - (t + 1) * exp t) (at t)\n  0 < - (t + 1) * exp t\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       ((\\<lambda>a. - a * exp a) has_real_derivative y) (at t) \\<and> 0 < y", "by blast"], ["proof (state)\nthis:\n  \\<exists>y.\n     ((\\<lambda>a. - a * exp a) has_real_derivative y) (at t) \\<and> 0 < y\n\ngoal (1 subgoal):\n 1. continuous_on {x..y} (\\<lambda>a. - a * exp a)", "qed (auto intro!: continuous_intros)"], ["proof (state)\nthis:\n  - x * exp x < - y * exp y\n\ngoal (1 subgoal):\n 1. y * exp y < x * exp x", "thus ?thesis"], ["proof (prove)\nusing this:\n  - x * exp x < - y * exp y\n\ngoal (1 subgoal):\n 1. y * exp y < x * exp x", "by simp"], ["proof (state)\nthis:\n  y * exp y < x * exp x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exp_times_self_mono:\n  assumes \"x \\<ge> -1\" \"x \\<le> (y :: real)\"\n  shows   \"x * exp x \\<le> y * exp y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * exp x \\<le> y * exp y", "using exp_times_self_strict_mono[of x y] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>- 1 \\<le> x; x < y\\<rbrakk>\n  \\<Longrightarrow> x * exp x < y * exp y\n  - 1 \\<le> x\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. x * exp x \\<le> y * exp y", "by (cases \"x = y\") auto"], ["", "lemma exp_times_self_antimono:\n  assumes \"y \\<le> -1\" \"x \\<le> (y :: real)\"\n  shows   \"x * exp x \\<ge> y * exp y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y * exp y \\<le> x * exp x", "using exp_times_self_strict_antimono[of y x] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>y \\<le> - 1; x < y\\<rbrakk>\n  \\<Longrightarrow> y * exp y < x * exp x\n  y \\<le> - 1\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. y * exp y \\<le> x * exp x", "by (cases \"x = y\") auto"], ["", "lemma exp_times_self_inj: \"inj_on (\\<lambda>x::real. x * exp x) {-1..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. x * exp x) {- 1..}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {- 1..}; y \\<in> {- 1..};\n        x * exp x = y * exp y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x y :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {- 1..}; y \\<in> {- 1..};\n        x * exp x = y * exp y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"x \\<in> {-1..}\" \"y \\<in> {-1..}\" \"x * exp x = y * exp y\""], ["proof (state)\nthis:\n  x \\<in> {- 1..}\n  y \\<in> {- 1..}\n  x * exp x = y * exp y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {- 1..}; y \\<in> {- 1..};\n        x * exp x = y * exp y\\<rbrakk>\n       \\<Longrightarrow> x = y", "thus \"x = y\""], ["proof (prove)\nusing this:\n  x \\<in> {- 1..}\n  y \\<in> {- 1..}\n  x * exp x = y * exp y\n\ngoal (1 subgoal):\n 1. x = y", "using exp_times_self_strict_mono[of x y] exp_times_self_strict_mono[of y x]"], ["proof (prove)\nusing this:\n  x \\<in> {- 1..}\n  y \\<in> {- 1..}\n  x * exp x = y * exp y\n  \\<lbrakk>- 1 \\<le> x; x < y\\<rbrakk>\n  \\<Longrightarrow> x * exp x < y * exp y\n  \\<lbrakk>- 1 \\<le> y; y < x\\<rbrakk>\n  \\<Longrightarrow> y * exp y < x * exp x\n\ngoal (1 subgoal):\n 1. x = y", "by (cases x y rule: linorder_cases) auto"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exp_times_self_inj': \"inj_on (\\<lambda>x::real. x * exp x) {..-1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. x * exp x) {..- 1}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {..- 1}; y \\<in> {..- 1};\n        x * exp x = y * exp y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x y :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {..- 1}; y \\<in> {..- 1};\n        x * exp x = y * exp y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"x \\<in> {..-1}\" \"y \\<in> {..-1}\" \"x * exp x = y * exp y\""], ["proof (state)\nthis:\n  x \\<in> {..- 1}\n  y \\<in> {..- 1}\n  x * exp x = y * exp y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {..- 1}; y \\<in> {..- 1};\n        x * exp x = y * exp y\\<rbrakk>\n       \\<Longrightarrow> x = y", "thus \"x = y\""], ["proof (prove)\nusing this:\n  x \\<in> {..- 1}\n  y \\<in> {..- 1}\n  x * exp x = y * exp y\n\ngoal (1 subgoal):\n 1. x = y", "using exp_times_self_strict_antimono[of x y] exp_times_self_strict_antimono[of y x]"], ["proof (prove)\nusing this:\n  x \\<in> {..- 1}\n  y \\<in> {..- 1}\n  x * exp x = y * exp y\n  \\<lbrakk>x \\<le> - 1; y < x\\<rbrakk>\n  \\<Longrightarrow> x * exp x < y * exp y\n  \\<lbrakk>y \\<le> - 1; x < y\\<rbrakk>\n  \\<Longrightarrow> y * exp y < x * exp x\n\ngoal (1 subgoal):\n 1. x = y", "by (cases x y rule: linorder_cases) auto"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Definition\\<close>"], ["", "text \\<open>\n  The following are the two branches $W_0(x)$ and $W_{-1}(x)$ of the Lambert $W$ function on the\n  real numbers. These are the inverse functions of the function $x\\mapsto xe^x$, i.\\,e.\\ \n  we have $W(x)e^{W(x)} = x$ for both branches wherever they are defined. The two branches\n  meet at the point $x = -\\frac{1}{e}$.\n\n  $W_0(x)$ is the principal branch, whose domain is $[-\\frac{1}{e}; \\infty)$ and whose\n  range is $[-1; \\infty)$.\n  $W_{-1}(x)$ has the domain $[-\\frac{1}{e}; 0)$ and the range $(-\\infty;-1]$.\n  Figure~\\ref{fig:lambertw} shows plots of these two branches for illustration.\n\\<close>"], ["", "text \\<open>\n\\definecolor{myblue}{HTML}{3869b1}\n\\definecolor{myred}{HTML}{cc2428}\n\\begin{figure}\n\\begin{center}\n\\begin{tikzpicture}\n  \\begin{axis}[\n          xmin=-0.5, xmax=6.6, ymin=-3.8, ymax=1.5, axis lines=middle, ytick = {-3, -2, -1, 1}, xtick = {1,...,10}, yticklabel pos = right,\n          yticklabel style={right,xshift=1mm},\n          extra x tick style={tick label style={above,yshift=1mm}},\n          extra x ticks={-0.367879441},\n          extra x tick labels={$-\\frac{1}{e}$},\n          width=\\textwidth, height=0.8\\textwidth,\n          xlabel={$x$}, tick style={thin,black}\n  ] \n  \\addplot [color=black, line width=0.5pt, densely dashed, mark=none,domain=-5:0,samples=200] ({-exp(-1)}, {x}); \n  \\addplot [color=myblue, line width=1pt, mark=none,domain=-1:1.5,samples=200] ({x*exp(x)}, {x}); \n  \\addplot [color=myred, line width=1pt, mark=none,domain=-5:-1,samples=200] ({x*exp(x)}, {x}); \n  \\end{axis}\n\\end{tikzpicture}\n\\end{center}\n\\caption{The two real branches of the Lambert $W$ function: $W_0$ (blue) and $W_{-1}$ (red).}\n\\label{fig:lambertw}\n\\end{figure}\n\\<close>"], ["", "definition Lambert_W :: \"real \\<Rightarrow> real\" where\n  \"Lambert_W x = (if x < -exp(-1) then -1 else (THE w. w \\<ge> -1 \\<and> w * exp w = x))\""], ["", "definition Lambert_W' :: \"real \\<Rightarrow> real\" where\n  \"Lambert_W' x = (if x \\<in> {-exp(-1)..<0} then (THE w. w \\<le> -1 \\<and> w * exp w = x) else -1)\""], ["", "lemma Lambert_W_ex1:\n  assumes \"(x::real) \\<ge> -exp (-1)\"\n  shows   \"\\<exists>!w. w \\<ge> -1 \\<and> w * exp w = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!w. - 1 \\<le> w \\<and> w * exp w = x", "proof (rule ex_ex1I)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>w\\<ge>- 1. w * exp w = x\n 2. \\<And>w y.\n       \\<lbrakk>- 1 \\<le> w \\<and> w * exp w = x;\n        - 1 \\<le> y \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "have \"filterlim (\\<lambda>w::real. w * exp w) at_top at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LIM w at_top. w * exp w :> at_top", "by real_asymp"], ["proof (state)\nthis:\n  LIM w at_top. w * exp w :> at_top\n\ngoal (2 subgoals):\n 1. \\<exists>w\\<ge>- 1. w * exp w = x\n 2. \\<And>w y.\n       \\<lbrakk>- 1 \\<le> w \\<and> w * exp w = x;\n        - 1 \\<le> y \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "hence \"eventually (\\<lambda>w. w * exp w \\<ge> x) at_top\""], ["proof (prove)\nusing this:\n  LIM w at_top. w * exp w :> at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F w in at_top. x \\<le> w * exp w", "by (auto simp: filterlim_at_top)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F w in at_top. x \\<le> w * exp w\n\ngoal (2 subgoals):\n 1. \\<exists>w\\<ge>- 1. w * exp w = x\n 2. \\<And>w y.\n       \\<lbrakk>- 1 \\<le> w \\<and> w * exp w = x;\n        - 1 \\<le> y \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "hence \"eventually (\\<lambda>w. w \\<ge> 0 \\<and> w * exp w \\<ge> x) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F w in at_top. x \\<le> w * exp w\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F w in at_top. 0 \\<le> w \\<and> x \\<le> w * exp w", "by (intro eventually_conj eventually_ge_at_top)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F w in at_top. 0 \\<le> w \\<and> x \\<le> w * exp w\n\ngoal (2 subgoals):\n 1. \\<exists>w\\<ge>- 1. w * exp w = x\n 2. \\<And>w y.\n       \\<lbrakk>- 1 \\<le> w \\<and> w * exp w = x;\n        - 1 \\<le> y \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F w in at_top. 0 \\<le> w \\<and> x \\<le> w * exp w", "obtain w' where w': \"w' * exp w' \\<ge> x\" \"w' \\<ge> 0\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F w in at_top. 0 \\<le> w \\<and> x \\<le> w * exp w\n\ngoal (1 subgoal):\n 1. (\\<And>w'.\n        \\<lbrakk>x \\<le> w' * exp w'; 0 \\<le> w'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: eventually_at_top_linorder)"], ["proof (state)\nthis:\n  x \\<le> w' * exp w'\n  0 \\<le> w'\n\ngoal (2 subgoals):\n 1. \\<exists>w\\<ge>- 1. w * exp w = x\n 2. \\<And>w y.\n       \\<lbrakk>- 1 \\<le> w \\<and> w * exp w = x;\n        - 1 \\<le> y \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "from w' assms"], ["proof (chain)\npicking this:\n  x \\<le> w' * exp w'\n  0 \\<le> w'\n  - exp (- 1) \\<le> x", "have \"\\<exists>w. -1 \\<le> w \\<and> w \\<le> w' \\<and> w * exp w = x\""], ["proof (prove)\nusing this:\n  x \\<le> w' * exp w'\n  0 \\<le> w'\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<exists>w\\<ge>- 1. w \\<le> w' \\<and> w * exp w = x", "by (intro IVT' continuous_intros) auto"], ["proof (state)\nthis:\n  \\<exists>w\\<ge>- 1. w \\<le> w' \\<and> w * exp w = x\n\ngoal (2 subgoals):\n 1. \\<exists>w\\<ge>- 1. w * exp w = x\n 2. \\<And>w y.\n       \\<lbrakk>- 1 \\<le> w \\<and> w * exp w = x;\n        - 1 \\<le> y \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "thus \"\\<exists>w. w \\<ge> -1 \\<and> w * exp w = x\""], ["proof (prove)\nusing this:\n  \\<exists>w\\<ge>- 1. w \\<le> w' \\<and> w * exp w = x\n\ngoal (1 subgoal):\n 1. \\<exists>w\\<ge>- 1. w * exp w = x", "by blast"], ["proof (state)\nthis:\n  \\<exists>w\\<ge>- 1. w * exp w = x\n\ngoal (1 subgoal):\n 1. \\<And>w y.\n       \\<lbrakk>- 1 \\<le> w \\<and> w * exp w = x;\n        - 1 \\<le> y \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w y.\n       \\<lbrakk>- 1 \\<le> w \\<and> w * exp w = x;\n        - 1 \\<le> y \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "fix w w' :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w y.\n       \\<lbrakk>- 1 \\<le> w \\<and> w * exp w = x;\n        - 1 \\<le> y \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "assume ww': \"w \\<ge> -1 \\<and> w * exp w = x\" \"w' \\<ge> -1 \\<and> w' * exp w' = x\""], ["proof (state)\nthis:\n  - 1 \\<le> w \\<and> w * exp w = x\n  - 1 \\<le> w' \\<and> w' * exp w' = x\n\ngoal (1 subgoal):\n 1. \\<And>w y.\n       \\<lbrakk>- 1 \\<le> w \\<and> w * exp w = x;\n        - 1 \\<le> y \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "hence \"w * exp w = w' * exp w'\""], ["proof (prove)\nusing this:\n  - 1 \\<le> w \\<and> w * exp w = x\n  - 1 \\<le> w' \\<and> w' * exp w' = x\n\ngoal (1 subgoal):\n 1. w * exp w = w' * exp w'", "by simp"], ["proof (state)\nthis:\n  w * exp w = w' * exp w'\n\ngoal (1 subgoal):\n 1. \\<And>w y.\n       \\<lbrakk>- 1 \\<le> w \\<and> w * exp w = x;\n        - 1 \\<le> y \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "thus \"w = w'\""], ["proof (prove)\nusing this:\n  w * exp w = w' * exp w'\n\ngoal (1 subgoal):\n 1. w = w'", "using exp_times_self_strict_mono[of w w'] exp_times_self_strict_mono[of w' w] ww'"], ["proof (prove)\nusing this:\n  w * exp w = w' * exp w'\n  \\<lbrakk>- 1 \\<le> w; w < w'\\<rbrakk>\n  \\<Longrightarrow> w * exp w < w' * exp w'\n  \\<lbrakk>- 1 \\<le> w'; w' < w\\<rbrakk>\n  \\<Longrightarrow> w' * exp w' < w * exp w\n  - 1 \\<le> w \\<and> w * exp w = x\n  - 1 \\<le> w' \\<and> w' * exp w' = x\n\ngoal (1 subgoal):\n 1. w = w'", "by (cases w w' rule: linorder_cases) auto"], ["proof (state)\nthis:\n  w = w'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W'_ex1:\n  assumes \"(x::real) \\<in> {-exp (-1)..<0}\"\n  shows   \"\\<exists>!w. w \\<le> -1 \\<and> w * exp w = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!w. w \\<le> - 1 \\<and> w * exp w = x", "proof (rule ex_ex1I)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>w\\<le>- 1. w * exp w = x\n 2. \\<And>w y.\n       \\<lbrakk>w \\<le> - 1 \\<and> w * exp w = x;\n        y \\<le> - 1 \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "have \"eventually (\\<lambda>w. x \\<le> w * exp w) at_bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F w in at_bot. x \\<le> w * exp w", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> {- exp (- 1)..<0}\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F w in at_bot. x \\<le> w * exp w", "by real_asymp"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F w in at_bot. x \\<le> w * exp w\n\ngoal (2 subgoals):\n 1. \\<exists>w\\<le>- 1. w * exp w = x\n 2. \\<And>w y.\n       \\<lbrakk>w \\<le> - 1 \\<and> w * exp w = x;\n        y \\<le> - 1 \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "hence \"eventually (\\<lambda>w. w \\<le> -1 \\<and> w * exp w \\<ge> x) at_bot\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F w in at_bot. x \\<le> w * exp w\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F w in at_bot. w \\<le> - 1 \\<and> x \\<le> w * exp w", "by (intro eventually_conj eventually_le_at_bot)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F w in at_bot. w \\<le> - 1 \\<and> x \\<le> w * exp w\n\ngoal (2 subgoals):\n 1. \\<exists>w\\<le>- 1. w * exp w = x\n 2. \\<And>w y.\n       \\<lbrakk>w \\<le> - 1 \\<and> w * exp w = x;\n        y \\<le> - 1 \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F w in at_bot. w \\<le> - 1 \\<and> x \\<le> w * exp w", "obtain w' where w': \"w' * exp w' \\<ge> x\" \"w' \\<le> -1\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F w in at_bot. w \\<le> - 1 \\<and> x \\<le> w * exp w\n\ngoal (1 subgoal):\n 1. (\\<And>w'.\n        \\<lbrakk>x \\<le> w' * exp w'; w' \\<le> - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: eventually_at_bot_linorder)"], ["proof (state)\nthis:\n  x \\<le> w' * exp w'\n  w' \\<le> - 1\n\ngoal (2 subgoals):\n 1. \\<exists>w\\<le>- 1. w * exp w = x\n 2. \\<And>w y.\n       \\<lbrakk>w \\<le> - 1 \\<and> w * exp w = x;\n        y \\<le> - 1 \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "from w' assms"], ["proof (chain)\npicking this:\n  x \\<le> w' * exp w'\n  w' \\<le> - 1\n  x \\<in> {- exp (- 1)..<0}", "have \"\\<exists>w. w' \\<le> w \\<and> w \\<le> -1 \\<and> w * exp w = x\""], ["proof (prove)\nusing this:\n  x \\<le> w' * exp w'\n  w' \\<le> - 1\n  x \\<in> {- exp (- 1)..<0}\n\ngoal (1 subgoal):\n 1. \\<exists>w\\<ge>w'. w \\<le> - 1 \\<and> w * exp w = x", "by (intro IVT2' continuous_intros) auto"], ["proof (state)\nthis:\n  \\<exists>w\\<ge>w'. w \\<le> - 1 \\<and> w * exp w = x\n\ngoal (2 subgoals):\n 1. \\<exists>w\\<le>- 1. w * exp w = x\n 2. \\<And>w y.\n       \\<lbrakk>w \\<le> - 1 \\<and> w * exp w = x;\n        y \\<le> - 1 \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "thus \"\\<exists>w. w \\<le> -1 \\<and> w * exp w = x\""], ["proof (prove)\nusing this:\n  \\<exists>w\\<ge>w'. w \\<le> - 1 \\<and> w * exp w = x\n\ngoal (1 subgoal):\n 1. \\<exists>w\\<le>- 1. w * exp w = x", "by blast"], ["proof (state)\nthis:\n  \\<exists>w\\<le>- 1. w * exp w = x\n\ngoal (1 subgoal):\n 1. \\<And>w y.\n       \\<lbrakk>w \\<le> - 1 \\<and> w * exp w = x;\n        y \\<le> - 1 \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w y.\n       \\<lbrakk>w \\<le> - 1 \\<and> w * exp w = x;\n        y \\<le> - 1 \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "fix w w' :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w y.\n       \\<lbrakk>w \\<le> - 1 \\<and> w * exp w = x;\n        y \\<le> - 1 \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "assume ww': \"w \\<le> -1 \\<and> w * exp w = x\" \"w' \\<le> -1 \\<and> w' * exp w' = x\""], ["proof (state)\nthis:\n  w \\<le> - 1 \\<and> w * exp w = x\n  w' \\<le> - 1 \\<and> w' * exp w' = x\n\ngoal (1 subgoal):\n 1. \\<And>w y.\n       \\<lbrakk>w \\<le> - 1 \\<and> w * exp w = x;\n        y \\<le> - 1 \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "hence \"w * exp w = w' * exp w'\""], ["proof (prove)\nusing this:\n  w \\<le> - 1 \\<and> w * exp w = x\n  w' \\<le> - 1 \\<and> w' * exp w' = x\n\ngoal (1 subgoal):\n 1. w * exp w = w' * exp w'", "by simp"], ["proof (state)\nthis:\n  w * exp w = w' * exp w'\n\ngoal (1 subgoal):\n 1. \\<And>w y.\n       \\<lbrakk>w \\<le> - 1 \\<and> w * exp w = x;\n        y \\<le> - 1 \\<and> y * exp y = x\\<rbrakk>\n       \\<Longrightarrow> w = y", "thus \"w = w'\""], ["proof (prove)\nusing this:\n  w * exp w = w' * exp w'\n\ngoal (1 subgoal):\n 1. w = w'", "using exp_times_self_strict_antimono[of w w'] exp_times_self_strict_antimono[of w' w] ww'"], ["proof (prove)\nusing this:\n  w * exp w = w' * exp w'\n  \\<lbrakk>w \\<le> - 1; w' < w\\<rbrakk>\n  \\<Longrightarrow> w * exp w < w' * exp w'\n  \\<lbrakk>w' \\<le> - 1; w < w'\\<rbrakk>\n  \\<Longrightarrow> w' * exp w' < w * exp w\n  w \\<le> - 1 \\<and> w * exp w = x\n  w' \\<le> - 1 \\<and> w' * exp w' = x\n\ngoal (1 subgoal):\n 1. w = w'", "by (cases w w' rule: linorder_cases) auto"], ["proof (state)\nthis:\n  w = w'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W_times_exp_self: \n  assumes \"x \\<ge> -exp (-1)\"\n  shows   \"Lambert_W x * exp (Lambert_W x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x * exp (Lambert_W x) = x", "using theI'[OF Lambert_W_ex1[OF assms]] assms"], ["proof (prove)\nusing this:\n  - 1 \\<le> (THE xa. - 1 \\<le> xa \\<and> xa * exp xa = x) \\<and>\n  (THE xa. - 1 \\<le> xa \\<and> xa * exp xa = x) *\n  exp (THE xa. - 1 \\<le> xa \\<and> xa * exp xa = x) =\n  x\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. Lambert_W x * exp (Lambert_W x) = x", "by (auto simp: Lambert_W_def)"], ["", "lemma Lambert_W_times_exp_self':\n  assumes \"x \\<ge> -exp (-1)\"\n  shows   \"exp (Lambert_W x) * Lambert_W x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp (Lambert_W x) * Lambert_W x = x", "using Lambert_W_times_exp_self[of x] assms"], ["proof (prove)\nusing this:\n  - exp (- 1) \\<le> x \\<Longrightarrow> Lambert_W x * exp (Lambert_W x) = x\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. exp (Lambert_W x) * Lambert_W x = x", "by (simp add: mult_ac)"], ["", "lemma Lambert_W'_times_exp_self: \n  assumes \"x \\<in> {-exp (-1)..<0}\"\n  shows   \"Lambert_W' x * exp (Lambert_W' x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x * exp (Lambert_W' x) = x", "using theI'[OF Lambert_W'_ex1[OF assms]] assms"], ["proof (prove)\nusing this:\n  (THE xa. xa \\<le> - 1 \\<and> xa * exp xa = x) \\<le> - 1 \\<and>\n  (THE xa. xa \\<le> - 1 \\<and> xa * exp xa = x) *\n  exp (THE xa. xa \\<le> - 1 \\<and> xa * exp xa = x) =\n  x\n  x \\<in> {- exp (- 1)..<0}\n\ngoal (1 subgoal):\n 1. Lambert_W' x * exp (Lambert_W' x) = x", "by (auto simp: Lambert_W'_def)"], ["", "lemma Lambert_W'_times_exp_self':\n  assumes \"x \\<in> {-exp (-1)..<0}\"\n  shows   \"exp (Lambert_W' x) * Lambert_W' x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp (Lambert_W' x) * Lambert_W' x = x", "using Lambert_W'_times_exp_self[of x] assms"], ["proof (prove)\nusing this:\n  x \\<in> {- exp (- 1)..<0} \\<Longrightarrow>\n  Lambert_W' x * exp (Lambert_W' x) = x\n  x \\<in> {- exp (- 1)..<0}\n\ngoal (1 subgoal):\n 1. exp (Lambert_W' x) * Lambert_W' x = x", "by (simp add: mult_ac)"], ["", "lemma Lambert_W_ge: \"Lambert_W x \\<ge> -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 \\<le> Lambert_W x", "using theI'[OF Lambert_W_ex1[of x]]"], ["proof (prove)\nusing this:\n  - exp (- 1) \\<le> x \\<Longrightarrow>\n  - 1 \\<le> (THE xa. - 1 \\<le> xa \\<and> xa * exp xa = x) \\<and>\n  (THE xa. - 1 \\<le> xa \\<and> xa * exp xa = x) *\n  exp (THE xa. - 1 \\<le> xa \\<and> xa * exp xa = x) =\n  x\n\ngoal (1 subgoal):\n 1. - 1 \\<le> Lambert_W x", "by (auto simp: Lambert_W_def)"], ["", "lemma Lambert_W'_le: \"Lambert_W' x \\<le> -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x \\<le> - 1", "using theI'[OF Lambert_W'_ex1[of x]]"], ["proof (prove)\nusing this:\n  x \\<in> {- exp (- 1)..<0} \\<Longrightarrow>\n  (THE xa. xa \\<le> - 1 \\<and> xa * exp xa = x) \\<le> - 1 \\<and>\n  (THE xa. xa \\<le> - 1 \\<and> xa * exp xa = x) *\n  exp (THE xa. xa \\<le> - 1 \\<and> xa * exp xa = x) =\n  x\n\ngoal (1 subgoal):\n 1. Lambert_W' x \\<le> - 1", "by (auto simp: Lambert_W'_def)"], ["", "lemma Lambert_W_eqI:\n  assumes \"w \\<ge> -1\" \"w * exp w = x\"\n  shows   \"Lambert_W x = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x = w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Lambert_W x = w", "from assms exp_times_self_ge[of w]"], ["proof (chain)\npicking this:\n  - 1 \\<le> w\n  w * exp w = x\n  - exp (- 1) \\<le> w * exp w", "have \"x \\<ge> -exp (-1)\""], ["proof (prove)\nusing this:\n  - 1 \\<le> w\n  w * exp w = x\n  - exp (- 1) \\<le> w * exp w\n\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> x", "by (cases \"x \\<ge> -exp (-1)\") auto"], ["proof (state)\nthis:\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. Lambert_W x = w", "from Lambert_W_ex1[OF this] Lambert_W_times_exp_self[OF this] Lambert_W_ge[of x] assms"], ["proof (chain)\npicking this:\n  \\<exists>!w. - 1 \\<le> w \\<and> w * exp w = x\n  Lambert_W x * exp (Lambert_W x) = x\n  - 1 \\<le> Lambert_W x\n  - 1 \\<le> w\n  w * exp w = x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>!w. - 1 \\<le> w \\<and> w * exp w = x\n  Lambert_W x * exp (Lambert_W x) = x\n  - 1 \\<le> Lambert_W x\n  - 1 \\<le> w\n  w * exp w = x\n\ngoal (1 subgoal):\n 1. Lambert_W x = w", "by metis"], ["proof (state)\nthis:\n  Lambert_W x = w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W'_eqI:\n  assumes \"w \\<le> -1\" \"w * exp w = x\"\n  shows   \"Lambert_W' x = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x = w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Lambert_W' x = w", "from assms exp_times_self_ge[of w]"], ["proof (chain)\npicking this:\n  w \\<le> - 1\n  w * exp w = x\n  - exp (- 1) \\<le> w * exp w", "have \"x \\<ge> -exp (-1)\""], ["proof (prove)\nusing this:\n  w \\<le> - 1\n  w * exp w = x\n  - exp (- 1) \\<le> w * exp w\n\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> x", "by (cases \"x \\<ge> -exp (-1)\") auto"], ["proof (state)\nthis:\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. Lambert_W' x = w", "moreover"], ["proof (state)\nthis:\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. Lambert_W' x = w", "from assms"], ["proof (chain)\npicking this:\n  w \\<le> - 1\n  w * exp w = x", "have \"w * exp w < 0\""], ["proof (prove)\nusing this:\n  w \\<le> - 1\n  w * exp w = x\n\ngoal (1 subgoal):\n 1. w * exp w < 0", "by (intro mult_neg_pos) auto"], ["proof (state)\nthis:\n  w * exp w < 0\n\ngoal (1 subgoal):\n 1. Lambert_W' x = w", "ultimately"], ["proof (chain)\npicking this:\n  - exp (- 1) \\<le> x\n  w * exp w < 0", "have \"x \\<in> {-exp (-1)..<0}\""], ["proof (prove)\nusing this:\n  - exp (- 1) \\<le> x\n  w * exp w < 0\n\ngoal (1 subgoal):\n 1. x \\<in> {- exp (- 1)..<0}", "using assms"], ["proof (prove)\nusing this:\n  - exp (- 1) \\<le> x\n  w * exp w < 0\n  w \\<le> - 1\n  w * exp w = x\n\ngoal (1 subgoal):\n 1. x \\<in> {- exp (- 1)..<0}", "by auto"], ["proof (state)\nthis:\n  x \\<in> {- exp (- 1)..<0}\n\ngoal (1 subgoal):\n 1. Lambert_W' x = w", "from Lambert_W'_ex1[OF this(1)] Lambert_W'_times_exp_self[OF this(1)] Lambert_W'_le assms"], ["proof (chain)\npicking this:\n  \\<exists>!w. w \\<le> - 1 \\<and> w * exp w = x\n  Lambert_W' x * exp (Lambert_W' x) = x\n  Lambert_W' ?x \\<le> - 1\n  w \\<le> - 1\n  w * exp w = x", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>!w. w \\<le> - 1 \\<and> w * exp w = x\n  Lambert_W' x * exp (Lambert_W' x) = x\n  Lambert_W' ?x \\<le> - 1\n  w \\<le> - 1\n  w * exp w = x\n\ngoal (1 subgoal):\n 1. Lambert_W' x = w", "by metis"], ["proof (state)\nthis:\n  Lambert_W' x = w\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  $W_0(x)$ and $W_{-1}(x)$ together fully cover all solutions of $we^w = x$:\n\\<close>"], ["", "lemma exp_times_self_eqD:\n  assumes \"w * exp w = x\"\n  shows   \"x \\<ge> -exp (-1)\" and \"w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> x &&&\n    w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. - exp (- 1) \\<le> x\n 2. w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x", "from assms"], ["proof (chain)\npicking this:\n  w * exp w = x", "show \"x \\<ge> -exp (-1)\""], ["proof (prove)\nusing this:\n  w * exp w = x\n\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> x", "using exp_times_self_ge[of w]"], ["proof (prove)\nusing this:\n  w * exp w = x\n  - exp (- 1) \\<le> w * exp w\n\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> x", "by auto"], ["proof (state)\nthis:\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x", "show \"w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x", "proof (cases \"w \\<ge> -1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. - 1 \\<le> w \\<Longrightarrow>\n    w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x\n 2. \\<not> - 1 \\<le> w \\<Longrightarrow>\n    w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x", "case True"], ["proof (state)\nthis:\n  - 1 \\<le> w\n\ngoal (2 subgoals):\n 1. - 1 \\<le> w \\<Longrightarrow>\n    w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x\n 2. \\<not> - 1 \\<le> w \\<Longrightarrow>\n    w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x", "hence \"Lambert_W x = w\""], ["proof (prove)\nusing this:\n  - 1 \\<le> w\n\ngoal (1 subgoal):\n 1. Lambert_W x = w", "using assms"], ["proof (prove)\nusing this:\n  - 1 \\<le> w\n  w * exp w = x\n\ngoal (1 subgoal):\n 1. Lambert_W x = w", "by (intro Lambert_W_eqI) auto"], ["proof (state)\nthis:\n  Lambert_W x = w\n\ngoal (2 subgoals):\n 1. - 1 \\<le> w \\<Longrightarrow>\n    w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x\n 2. \\<not> - 1 \\<le> w \\<Longrightarrow>\n    w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x", "thus ?thesis"], ["proof (prove)\nusing this:\n  Lambert_W x = w\n\ngoal (1 subgoal):\n 1. w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x", "by auto"], ["proof (state)\nthis:\n  w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x\n\ngoal (1 subgoal):\n 1. \\<not> - 1 \\<le> w \\<Longrightarrow>\n    w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> - 1 \\<le> w \\<Longrightarrow>\n    w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x", "case False"], ["proof (state)\nthis:\n  \\<not> - 1 \\<le> w\n\ngoal (1 subgoal):\n 1. \\<not> - 1 \\<le> w \\<Longrightarrow>\n    w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x", "from False"], ["proof (chain)\npicking this:\n  \\<not> - 1 \\<le> w", "have \"w * exp w < 0\""], ["proof (prove)\nusing this:\n  \\<not> - 1 \\<le> w\n\ngoal (1 subgoal):\n 1. w * exp w < 0", "by (intro mult_neg_pos) auto"], ["proof (state)\nthis:\n  w * exp w < 0\n\ngoal (1 subgoal):\n 1. \\<not> - 1 \\<le> w \\<Longrightarrow>\n    w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x", "from False"], ["proof (chain)\npicking this:\n  \\<not> - 1 \\<le> w", "have \"Lambert_W' x = w\""], ["proof (prove)\nusing this:\n  \\<not> - 1 \\<le> w\n\ngoal (1 subgoal):\n 1. Lambert_W' x = w", "using assms"], ["proof (prove)\nusing this:\n  \\<not> - 1 \\<le> w\n  w * exp w = x\n\ngoal (1 subgoal):\n 1. Lambert_W' x = w", "by (intro Lambert_W'_eqI) auto"], ["proof (state)\nthis:\n  Lambert_W' x = w\n\ngoal (1 subgoal):\n 1. \\<not> - 1 \\<le> w \\<Longrightarrow>\n    w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x", "thus ?thesis"], ["proof (prove)\nusing this:\n  Lambert_W' x = w\n\ngoal (1 subgoal):\n 1. w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x", "using assms \\<open>w * exp w < 0\\<close>"], ["proof (prove)\nusing this:\n  Lambert_W' x = w\n  w * exp w = x\n  w * exp w < 0\n\ngoal (1 subgoal):\n 1. w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x", "by auto"], ["proof (state)\nthis:\n  w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem exp_times_self_eq_iff:\n  \"w * exp w = x \\<longleftrightarrow> x \\<ge> -exp (-1) \\<and> (w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w * exp w = x) =\n    (- exp (- 1) \\<le> x \\<and>\n     (w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x))", "using exp_times_self_eqD[of w x]"], ["proof (prove)\nusing this:\n  w * exp w = x \\<Longrightarrow> - exp (- 1) \\<le> x\n  w * exp w = x \\<Longrightarrow>\n  w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x\n\ngoal (1 subgoal):\n 1. (w * exp w = x) =\n    (- exp (- 1) \\<le> x \\<and>\n     (w = Lambert_W x \\<or> x < 0 \\<and> w = Lambert_W' x))", "by (auto simp: Lambert_W_times_exp_self Lambert_W'_times_exp_self)"], ["", "lemma Lambert_W_exp_times_self [simp]: \"x \\<ge> -1 \\<Longrightarrow> Lambert_W (x * exp x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 \\<le> x \\<Longrightarrow> Lambert_W (x * exp x) = x", "by (rule Lambert_W_eqI) auto"], ["", "lemma Lambert_W_exp_times_self' [simp]: \"x \\<ge> -1 \\<Longrightarrow> Lambert_W (exp x * x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 \\<le> x \\<Longrightarrow> Lambert_W (exp x * x) = x", "by (rule Lambert_W_eqI) auto"], ["", "lemma Lambert_W'_exp_times_self [simp]: \"x \\<le> -1 \\<Longrightarrow> Lambert_W' (x * exp x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> - 1 \\<Longrightarrow> Lambert_W' (x * exp x) = x", "by (rule Lambert_W'_eqI) auto"], ["", "lemma Lambert_W'_exp_times_self' [simp]: \"x \\<le> -1 \\<Longrightarrow> Lambert_W' (exp x * x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> - 1 \\<Longrightarrow> Lambert_W' (exp x * x) = x", "by (rule Lambert_W'_eqI) auto"], ["", "lemma Lambert_W_times_ln_self:\n  assumes \"x \\<ge> exp (-1)\"\n  shows   \"Lambert_W (x * ln x) = ln x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W (x * ln x) = ln x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Lambert_W (x * ln x) = ln x", "have \"0 < exp (-1 :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < exp (- 1)", "by simp"], ["proof (state)\nthis:\n  0 < exp (- 1)\n\ngoal (1 subgoal):\n 1. Lambert_W (x * ln x) = ln x", "also"], ["proof (state)\nthis:\n  0 < exp (- 1)\n\ngoal (1 subgoal):\n 1. Lambert_W (x * ln x) = ln x", "note \\<open>\\<dots> \\<le> x\\<close>"], ["proof (state)\nthis:\n  exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. Lambert_W (x * ln x) = ln x", "finally"], ["proof (chain)\npicking this:\n  0 < x", "have \"x > 0\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. 0 < x", "."], ["proof (state)\nthis:\n  0 < x\n\ngoal (1 subgoal):\n 1. Lambert_W (x * ln x) = ln x", "from assms"], ["proof (chain)\npicking this:\n  exp (- 1) \\<le> x", "have \"ln (exp (-1)) \\<le> ln x\""], ["proof (prove)\nusing this:\n  exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. ln (exp (- 1)) \\<le> ln x", "using \\<open>x > 0\\<close>"], ["proof (prove)\nusing this:\n  exp (- 1) \\<le> x\n  0 < x\n\ngoal (1 subgoal):\n 1. ln (exp (- 1)) \\<le> ln x", "by (subst ln_le_cancel_iff) auto"], ["proof (state)\nthis:\n  ln (exp (- 1)) \\<le> ln x\n\ngoal (1 subgoal):\n 1. Lambert_W (x * ln x) = ln x", "hence \"Lambert_W (exp (ln x) * ln x) = ln x\""], ["proof (prove)\nusing this:\n  ln (exp (- 1)) \\<le> ln x\n\ngoal (1 subgoal):\n 1. Lambert_W (exp (ln x) * ln x) = ln x", "by (subst Lambert_W_exp_times_self') auto"], ["proof (state)\nthis:\n  Lambert_W (exp (ln x) * ln x) = ln x\n\ngoal (1 subgoal):\n 1. Lambert_W (x * ln x) = ln x", "thus ?thesis"], ["proof (prove)\nusing this:\n  Lambert_W (exp (ln x) * ln x) = ln x\n\ngoal (1 subgoal):\n 1. Lambert_W (x * ln x) = ln x", "using \\<open>x > 0\\<close>"], ["proof (prove)\nusing this:\n  Lambert_W (exp (ln x) * ln x) = ln x\n  0 < x\n\ngoal (1 subgoal):\n 1. Lambert_W (x * ln x) = ln x", "by simp"], ["proof (state)\nthis:\n  Lambert_W (x * ln x) = ln x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W_times_ln_self':\n  assumes \"x \\<ge> exp (-1)\"\n  shows   \"Lambert_W (ln x  * x) = ln x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W (ln x * x) = ln x", "using Lambert_W_times_ln_self[OF assms]"], ["proof (prove)\nusing this:\n  Lambert_W (x * ln x) = ln x\n\ngoal (1 subgoal):\n 1. Lambert_W (ln x * x) = ln x", "by (simp add: mult.commute)"], ["", "lemma Lambert_W_eq_minus_exp_minus1 [simp]: \"Lambert_W (-exp (-1)) = -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W (- exp (- 1)) = - 1", "by (rule Lambert_W_eqI) auto"], ["", "lemma Lambert_W'_eq_minus_exp_minus1 [simp]: \"Lambert_W' (-exp (-1)) = -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' (- exp (- 1)) = - 1", "by (rule Lambert_W'_eqI) auto"], ["", "lemma Lambert_W_0 [simp]: \"Lambert_W 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W 0 = 0", "by (rule Lambert_W_eqI) auto"], ["", "subsection \\<open>Monotonicity properties\\<close>"], ["", "lemma Lambert_W_strict_mono:\n  assumes \"x \\<ge> -exp(-1)\" \"x < y\"\n  shows   \"Lambert_W x < Lambert_W y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x < Lambert_W y", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Lambert_W x < Lambert_W y \\<Longrightarrow> False", "assume \"\\<not>(Lambert_W x < Lambert_W y)\""], ["proof (state)\nthis:\n  \\<not> Lambert_W x < Lambert_W y\n\ngoal (1 subgoal):\n 1. \\<not> Lambert_W x < Lambert_W y \\<Longrightarrow> False", "hence \"Lambert_W x * exp (Lambert_W x) \\<ge> Lambert_W y * exp (Lambert_W y)\""], ["proof (prove)\nusing this:\n  \\<not> Lambert_W x < Lambert_W y\n\ngoal (1 subgoal):\n 1. Lambert_W y * exp (Lambert_W y) \\<le> Lambert_W x * exp (Lambert_W x)", "by (intro exp_times_self_mono) (auto simp: Lambert_W_ge)"], ["proof (state)\nthis:\n  Lambert_W y * exp (Lambert_W y) \\<le> Lambert_W x * exp (Lambert_W x)\n\ngoal (1 subgoal):\n 1. \\<not> Lambert_W x < Lambert_W y \\<Longrightarrow> False", "hence \"x \\<ge> y\""], ["proof (prove)\nusing this:\n  Lambert_W y * exp (Lambert_W y) \\<le> Lambert_W x * exp (Lambert_W x)\n\ngoal (1 subgoal):\n 1. y \\<le> x", "using assms"], ["proof (prove)\nusing this:\n  Lambert_W y * exp (Lambert_W y) \\<le> Lambert_W x * exp (Lambert_W x)\n  - exp (- 1) \\<le> x\n  x < y\n\ngoal (1 subgoal):\n 1. y \\<le> x", "by (simp add: Lambert_W_times_exp_self)"], ["proof (state)\nthis:\n  y \\<le> x\n\ngoal (1 subgoal):\n 1. \\<not> Lambert_W x < Lambert_W y \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  - exp (- 1) \\<le> x\n  x < y\n  y \\<le> x", "show False"], ["proof (prove)\nusing this:\n  - exp (- 1) \\<le> x\n  x < y\n  y \\<le> x\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W_mono:\n  assumes \"x \\<ge> -exp(-1)\" \"x \\<le> y\"\n  shows   \"Lambert_W x \\<le> Lambert_W y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x \\<le> Lambert_W y", "using Lambert_W_strict_mono[of x y] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>- exp (- 1) \\<le> x; x < y\\<rbrakk>\n  \\<Longrightarrow> Lambert_W x < Lambert_W y\n  - exp (- 1) \\<le> x\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. Lambert_W x \\<le> Lambert_W y", "by (cases \"x = y\") auto"], ["", "lemma Lambert_W_eq_iff [simp]:\n  \"x \\<ge> -exp(-1) \\<Longrightarrow> y \\<ge> -exp(-1) \\<Longrightarrow> Lambert_W x = Lambert_W y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>- exp (- 1) \\<le> x; - exp (- 1) \\<le> y\\<rbrakk>\n    \\<Longrightarrow> (Lambert_W x = Lambert_W y) = (x = y)", "using Lambert_W_strict_mono[of x y] Lambert_W_strict_mono[of y x]"], ["proof (prove)\nusing this:\n  \\<lbrakk>- exp (- 1) \\<le> x; x < y\\<rbrakk>\n  \\<Longrightarrow> Lambert_W x < Lambert_W y\n  \\<lbrakk>- exp (- 1) \\<le> y; y < x\\<rbrakk>\n  \\<Longrightarrow> Lambert_W y < Lambert_W x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>- exp (- 1) \\<le> x; - exp (- 1) \\<le> y\\<rbrakk>\n    \\<Longrightarrow> (Lambert_W x = Lambert_W y) = (x = y)", "by (cases x y rule: linorder_cases) auto"], ["", "lemma Lambert_W_le_iff [simp]:\n  \"x \\<ge> -exp(-1) \\<Longrightarrow> y \\<ge> -exp(-1) \\<Longrightarrow> Lambert_W x \\<le> Lambert_W y \\<longleftrightarrow> x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>- exp (- 1) \\<le> x; - exp (- 1) \\<le> y\\<rbrakk>\n    \\<Longrightarrow> (Lambert_W x \\<le> Lambert_W y) = (x \\<le> y)", "using Lambert_W_strict_mono[of x y] Lambert_W_strict_mono[of y x]"], ["proof (prove)\nusing this:\n  \\<lbrakk>- exp (- 1) \\<le> x; x < y\\<rbrakk>\n  \\<Longrightarrow> Lambert_W x < Lambert_W y\n  \\<lbrakk>- exp (- 1) \\<le> y; y < x\\<rbrakk>\n  \\<Longrightarrow> Lambert_W y < Lambert_W x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>- exp (- 1) \\<le> x; - exp (- 1) \\<le> y\\<rbrakk>\n    \\<Longrightarrow> (Lambert_W x \\<le> Lambert_W y) = (x \\<le> y)", "by (cases x y rule: linorder_cases) auto"], ["", "lemma Lambert_W_less_iff [simp]:\n  \"x \\<ge> -exp(-1) \\<Longrightarrow> y \\<ge> -exp(-1) \\<Longrightarrow> Lambert_W x < Lambert_W y \\<longleftrightarrow> x < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>- exp (- 1) \\<le> x; - exp (- 1) \\<le> y\\<rbrakk>\n    \\<Longrightarrow> (Lambert_W x < Lambert_W y) = (x < y)", "using Lambert_W_strict_mono[of x y] Lambert_W_strict_mono[of y x]"], ["proof (prove)\nusing this:\n  \\<lbrakk>- exp (- 1) \\<le> x; x < y\\<rbrakk>\n  \\<Longrightarrow> Lambert_W x < Lambert_W y\n  \\<lbrakk>- exp (- 1) \\<le> y; y < x\\<rbrakk>\n  \\<Longrightarrow> Lambert_W y < Lambert_W x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>- exp (- 1) \\<le> x; - exp (- 1) \\<le> y\\<rbrakk>\n    \\<Longrightarrow> (Lambert_W x < Lambert_W y) = (x < y)", "by (cases x y rule: linorder_cases) auto"], ["", "lemma Lambert_W_le_minus_one:\n  assumes \"x \\<le> -exp(-1)\"\n  shows   \"Lambert_W x = -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x = - 1", "proof (cases \"x = -exp(-1)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = - exp (- 1) \\<Longrightarrow> Lambert_W x = - 1\n 2. x \\<noteq> - exp (- 1) \\<Longrightarrow> Lambert_W x = - 1", "case False"], ["proof (state)\nthis:\n  x \\<noteq> - exp (- 1)\n\ngoal (2 subgoals):\n 1. x = - exp (- 1) \\<Longrightarrow> Lambert_W x = - 1\n 2. x \\<noteq> - exp (- 1) \\<Longrightarrow> Lambert_W x = - 1", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> - exp (- 1)\n\ngoal (1 subgoal):\n 1. Lambert_W x = - 1", "using assms"], ["proof (prove)\nusing this:\n  x \\<noteq> - exp (- 1)\n  x \\<le> - exp (- 1)\n\ngoal (1 subgoal):\n 1. Lambert_W x = - 1", "by (auto simp: Lambert_W_def)"], ["proof (state)\nthis:\n  Lambert_W x = - 1\n\ngoal (1 subgoal):\n 1. x = - exp (- 1) \\<Longrightarrow> Lambert_W x = - 1", "qed auto"], ["", "lemma Lambert_W_pos_iff [simp]: \"Lambert_W x > 0 \\<longleftrightarrow> x > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < Lambert_W x) = (0 < x)", "proof (cases \"x \\<ge> -exp (-1)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. - exp (- 1) \\<le> x \\<Longrightarrow> (0 < Lambert_W x) = (0 < x)\n 2. \\<not> - exp (- 1) \\<le> x \\<Longrightarrow> (0 < Lambert_W x) = (0 < x)", "case True"], ["proof (state)\nthis:\n  - exp (- 1) \\<le> x\n\ngoal (2 subgoals):\n 1. - exp (- 1) \\<le> x \\<Longrightarrow> (0 < Lambert_W x) = (0 < x)\n 2. \\<not> - exp (- 1) \\<le> x \\<Longrightarrow> (0 < Lambert_W x) = (0 < x)", "thus ?thesis"], ["proof (prove)\nusing this:\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. (0 < Lambert_W x) = (0 < x)", "using Lambert_W_less_iff[of 0 x]"], ["proof (prove)\nusing this:\n  - exp (- 1) \\<le> x\n  \\<lbrakk>- exp (- 1) \\<le> 0; - exp (- 1) \\<le> x\\<rbrakk>\n  \\<Longrightarrow> (Lambert_W 0 < Lambert_W x) = (0 < x)\n\ngoal (1 subgoal):\n 1. (0 < Lambert_W x) = (0 < x)", "by (simp del: Lambert_W_less_iff)"], ["proof (state)\nthis:\n  (0 < Lambert_W x) = (0 < x)\n\ngoal (1 subgoal):\n 1. \\<not> - exp (- 1) \\<le> x \\<Longrightarrow> (0 < Lambert_W x) = (0 < x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> - exp (- 1) \\<le> x \\<Longrightarrow> (0 < Lambert_W x) = (0 < x)", "case False"], ["proof (state)\nthis:\n  \\<not> - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<not> - exp (- 1) \\<le> x \\<Longrightarrow> (0 < Lambert_W x) = (0 < x)", "hence \"x < - exp(-1)\""], ["proof (prove)\nusing this:\n  \\<not> - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. x < - exp (- 1)", "by auto"], ["proof (state)\nthis:\n  x < - exp (- 1)\n\ngoal (1 subgoal):\n 1. \\<not> - exp (- 1) \\<le> x \\<Longrightarrow> (0 < Lambert_W x) = (0 < x)", "also"], ["proof (state)\nthis:\n  x < - exp (- 1)\n\ngoal (1 subgoal):\n 1. \\<not> - exp (- 1) \\<le> x \\<Longrightarrow> (0 < Lambert_W x) = (0 < x)", "have \"\\<dots> \\<le> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> 0", "by simp"], ["proof (state)\nthis:\n  - exp (- 1) \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<not> - exp (- 1) \\<le> x \\<Longrightarrow> (0 < Lambert_W x) = (0 < x)", "finally"], ["proof (chain)\npicking this:\n  x < 0", "show ?thesis"], ["proof (prove)\nusing this:\n  x < 0\n\ngoal (1 subgoal):\n 1. (0 < Lambert_W x) = (0 < x)", "using False"], ["proof (prove)\nusing this:\n  x < 0\n  \\<not> - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. (0 < Lambert_W x) = (0 < x)", "by (auto simp: Lambert_W_le_minus_one)"], ["proof (state)\nthis:\n  (0 < Lambert_W x) = (0 < x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W_eq_0_iff [simp]: \"Lambert_W x = 0 \\<longleftrightarrow> x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Lambert_W x = 0) = (x = 0)", "using Lambert_W_eq_iff[of x 0]"], ["proof (prove)\nusing this:\n  \\<lbrakk>- exp (- 1) \\<le> x; - exp (- 1) \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> (Lambert_W x = Lambert_W 0) = (x = 0)\n\ngoal (1 subgoal):\n 1. (Lambert_W x = 0) = (x = 0)", "by (cases \"x \\<ge> -exp (-1)\") (auto simp: Lambert_W_le_minus_one simp del: Lambert_W_eq_iff)"], ["", "lemma Lambert_W_nonneg_iff [simp]: \"Lambert_W x \\<ge> 0 \\<longleftrightarrow> x \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 \\<le> Lambert_W x) = (0 \\<le> x)", "using Lambert_W_pos_iff[of x]"], ["proof (prove)\nusing this:\n  (0 < Lambert_W x) = (0 < x)\n\ngoal (1 subgoal):\n 1. (0 \\<le> Lambert_W x) = (0 \\<le> x)", "by (cases \"x = 0\") (auto simp del: Lambert_W_pos_iff)"], ["", "lemma Lambert_W_neg_iff [simp]: \"Lambert_W x < 0 \\<longleftrightarrow> x < 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Lambert_W x < 0) = (x < 0)", "using Lambert_W_nonneg_iff[of x]"], ["proof (prove)\nusing this:\n  (0 \\<le> Lambert_W x) = (0 \\<le> x)\n\ngoal (1 subgoal):\n 1. (Lambert_W x < 0) = (x < 0)", "by (auto simp del: Lambert_W_nonneg_iff)"], ["", "lemma Lambert_W_nonpos_iff [simp]: \"Lambert_W x \\<le> 0 \\<longleftrightarrow> x \\<le> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Lambert_W x \\<le> 0) = (x \\<le> 0)", "using Lambert_W_pos_iff[of x]"], ["proof (prove)\nusing this:\n  (0 < Lambert_W x) = (0 < x)\n\ngoal (1 subgoal):\n 1. (Lambert_W x \\<le> 0) = (x \\<le> 0)", "by (auto simp del: Lambert_W_pos_iff)"], ["", "lemma Lambert_W_geI:\n  assumes \"y * exp y \\<le> x\"\n  shows   \"Lambert_W x \\<ge> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W x", "proof (cases \"y \\<ge> -1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. - 1 \\<le> y \\<Longrightarrow> y \\<le> Lambert_W x\n 2. \\<not> - 1 \\<le> y \\<Longrightarrow> y \\<le> Lambert_W x", "case False"], ["proof (state)\nthis:\n  \\<not> - 1 \\<le> y\n\ngoal (2 subgoals):\n 1. - 1 \\<le> y \\<Longrightarrow> y \\<le> Lambert_W x\n 2. \\<not> - 1 \\<le> y \\<Longrightarrow> y \\<le> Lambert_W x", "hence \"y \\<le> -1\""], ["proof (prove)\nusing this:\n  \\<not> - 1 \\<le> y\n\ngoal (1 subgoal):\n 1. y \\<le> - 1", "by simp"], ["proof (state)\nthis:\n  y \\<le> - 1\n\ngoal (2 subgoals):\n 1. - 1 \\<le> y \\<Longrightarrow> y \\<le> Lambert_W x\n 2. \\<not> - 1 \\<le> y \\<Longrightarrow> y \\<le> Lambert_W x", "also"], ["proof (state)\nthis:\n  y \\<le> - 1\n\ngoal (2 subgoals):\n 1. - 1 \\<le> y \\<Longrightarrow> y \\<le> Lambert_W x\n 2. \\<not> - 1 \\<le> y \\<Longrightarrow> y \\<le> Lambert_W x", "have \"-1 \\<le> Lambert_W x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 \\<le> Lambert_W x", "by (rule Lambert_W_ge)"], ["proof (state)\nthis:\n  - 1 \\<le> Lambert_W x\n\ngoal (2 subgoals):\n 1. - 1 \\<le> y \\<Longrightarrow> y \\<le> Lambert_W x\n 2. \\<not> - 1 \\<le> y \\<Longrightarrow> y \\<le> Lambert_W x", "finally"], ["proof (chain)\npicking this:\n  y \\<le> Lambert_W x", "show ?thesis"], ["proof (prove)\nusing this:\n  y \\<le> Lambert_W x\n\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W x", "."], ["proof (state)\nthis:\n  y \\<le> Lambert_W x\n\ngoal (1 subgoal):\n 1. - 1 \\<le> y \\<Longrightarrow> y \\<le> Lambert_W x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. - 1 \\<le> y \\<Longrightarrow> y \\<le> Lambert_W x", "case True"], ["proof (state)\nthis:\n  - 1 \\<le> y\n\ngoal (1 subgoal):\n 1. - 1 \\<le> y \\<Longrightarrow> y \\<le> Lambert_W x", "have \"Lambert_W x \\<ge> Lambert_W (y * exp y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W (y * exp y) \\<le> Lambert_W x", "using assms exp_times_self_ge[of y]"], ["proof (prove)\nusing this:\n  y * exp y \\<le> x\n  - exp (- 1) \\<le> y * exp y\n\ngoal (1 subgoal):\n 1. Lambert_W (y * exp y) \\<le> Lambert_W x", "by (intro Lambert_W_mono) auto"], ["proof (state)\nthis:\n  Lambert_W (y * exp y) \\<le> Lambert_W x\n\ngoal (1 subgoal):\n 1. - 1 \\<le> y \\<Longrightarrow> y \\<le> Lambert_W x", "thus ?thesis"], ["proof (prove)\nusing this:\n  Lambert_W (y * exp y) \\<le> Lambert_W x\n\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W x", "using assms True"], ["proof (prove)\nusing this:\n  Lambert_W (y * exp y) \\<le> Lambert_W x\n  y * exp y \\<le> x\n  - 1 \\<le> y\n\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W x", "by simp"], ["proof (state)\nthis:\n  y \\<le> Lambert_W x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W_gtI:\n  assumes \"y * exp y < x\"\n  shows   \"Lambert_W x > y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y < Lambert_W x", "proof (cases \"y \\<ge> -1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. - 1 \\<le> y \\<Longrightarrow> y < Lambert_W x\n 2. \\<not> - 1 \\<le> y \\<Longrightarrow> y < Lambert_W x", "case False"], ["proof (state)\nthis:\n  \\<not> - 1 \\<le> y\n\ngoal (2 subgoals):\n 1. - 1 \\<le> y \\<Longrightarrow> y < Lambert_W x\n 2. \\<not> - 1 \\<le> y \\<Longrightarrow> y < Lambert_W x", "hence \"y < -1\""], ["proof (prove)\nusing this:\n  \\<not> - 1 \\<le> y\n\ngoal (1 subgoal):\n 1. y < - 1", "by simp"], ["proof (state)\nthis:\n  y < - 1\n\ngoal (2 subgoals):\n 1. - 1 \\<le> y \\<Longrightarrow> y < Lambert_W x\n 2. \\<not> - 1 \\<le> y \\<Longrightarrow> y < Lambert_W x", "also"], ["proof (state)\nthis:\n  y < - 1\n\ngoal (2 subgoals):\n 1. - 1 \\<le> y \\<Longrightarrow> y < Lambert_W x\n 2. \\<not> - 1 \\<le> y \\<Longrightarrow> y < Lambert_W x", "have \"-1 \\<le> Lambert_W x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 \\<le> Lambert_W x", "by (rule Lambert_W_ge)"], ["proof (state)\nthis:\n  - 1 \\<le> Lambert_W x\n\ngoal (2 subgoals):\n 1. - 1 \\<le> y \\<Longrightarrow> y < Lambert_W x\n 2. \\<not> - 1 \\<le> y \\<Longrightarrow> y < Lambert_W x", "finally"], ["proof (chain)\npicking this:\n  y < Lambert_W x", "show ?thesis"], ["proof (prove)\nusing this:\n  y < Lambert_W x\n\ngoal (1 subgoal):\n 1. y < Lambert_W x", "."], ["proof (state)\nthis:\n  y < Lambert_W x\n\ngoal (1 subgoal):\n 1. - 1 \\<le> y \\<Longrightarrow> y < Lambert_W x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. - 1 \\<le> y \\<Longrightarrow> y < Lambert_W x", "case True"], ["proof (state)\nthis:\n  - 1 \\<le> y\n\ngoal (1 subgoal):\n 1. - 1 \\<le> y \\<Longrightarrow> y < Lambert_W x", "have \"Lambert_W x > Lambert_W (y * exp y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W (y * exp y) < Lambert_W x", "using assms exp_times_self_ge[of y]"], ["proof (prove)\nusing this:\n  y * exp y < x\n  - exp (- 1) \\<le> y * exp y\n\ngoal (1 subgoal):\n 1. Lambert_W (y * exp y) < Lambert_W x", "by (intro Lambert_W_strict_mono) auto"], ["proof (state)\nthis:\n  Lambert_W (y * exp y) < Lambert_W x\n\ngoal (1 subgoal):\n 1. - 1 \\<le> y \\<Longrightarrow> y < Lambert_W x", "thus ?thesis"], ["proof (prove)\nusing this:\n  Lambert_W (y * exp y) < Lambert_W x\n\ngoal (1 subgoal):\n 1. y < Lambert_W x", "using assms True"], ["proof (prove)\nusing this:\n  Lambert_W (y * exp y) < Lambert_W x\n  y * exp y < x\n  - 1 \\<le> y\n\ngoal (1 subgoal):\n 1. y < Lambert_W x", "by simp"], ["proof (state)\nthis:\n  y < Lambert_W x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W_leI:\n  assumes \"y * exp y \\<ge> x\" \"y \\<ge> -1\" \"x \\<ge> -exp (-1)\"\n  shows   \"Lambert_W x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x \\<le> y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Lambert_W x \\<le> y", "have \"Lambert_W x \\<le> Lambert_W (y * exp y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x \\<le> Lambert_W (y * exp y)", "using assms exp_times_self_ge[of y]"], ["proof (prove)\nusing this:\n  x \\<le> y * exp y\n  - 1 \\<le> y\n  - exp (- 1) \\<le> x\n  - exp (- 1) \\<le> y * exp y\n\ngoal (1 subgoal):\n 1. Lambert_W x \\<le> Lambert_W (y * exp y)", "by (intro Lambert_W_mono) auto"], ["proof (state)\nthis:\n  Lambert_W x \\<le> Lambert_W (y * exp y)\n\ngoal (1 subgoal):\n 1. Lambert_W x \\<le> y", "thus ?thesis"], ["proof (prove)\nusing this:\n  Lambert_W x \\<le> Lambert_W (y * exp y)\n\ngoal (1 subgoal):\n 1. Lambert_W x \\<le> y", "using assms"], ["proof (prove)\nusing this:\n  Lambert_W x \\<le> Lambert_W (y * exp y)\n  x \\<le> y * exp y\n  - 1 \\<le> y\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. Lambert_W x \\<le> y", "by simp"], ["proof (state)\nthis:\n  Lambert_W x \\<le> y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W_lessI:\n  assumes \"y * exp y > x\" \"y \\<ge> -1\" \"x \\<ge> -exp (-1)\"\n  shows   \"Lambert_W x < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x < y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Lambert_W x < y", "have \"Lambert_W x < Lambert_W (y * exp y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x < Lambert_W (y * exp y)", "using assms exp_times_self_ge[of y]"], ["proof (prove)\nusing this:\n  x < y * exp y\n  - 1 \\<le> y\n  - exp (- 1) \\<le> x\n  - exp (- 1) \\<le> y * exp y\n\ngoal (1 subgoal):\n 1. Lambert_W x < Lambert_W (y * exp y)", "by (intro Lambert_W_strict_mono) auto"], ["proof (state)\nthis:\n  Lambert_W x < Lambert_W (y * exp y)\n\ngoal (1 subgoal):\n 1. Lambert_W x < y", "thus ?thesis"], ["proof (prove)\nusing this:\n  Lambert_W x < Lambert_W (y * exp y)\n\ngoal (1 subgoal):\n 1. Lambert_W x < y", "using assms"], ["proof (prove)\nusing this:\n  Lambert_W x < Lambert_W (y * exp y)\n  x < y * exp y\n  - 1 \\<le> y\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. Lambert_W x < y", "by simp"], ["proof (state)\nthis:\n  Lambert_W x < y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W'_strict_antimono:\n  assumes \"-exp (-1) \\<le> x\" \"x < y\" \"y < 0\"\n  shows   \"Lambert_W' x > Lambert_W' y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' y < Lambert_W' x", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Lambert_W' y < Lambert_W' x \\<Longrightarrow> False", "assume \"\\<not>(Lambert_W' x > Lambert_W' y)\""], ["proof (state)\nthis:\n  \\<not> Lambert_W' y < Lambert_W' x\n\ngoal (1 subgoal):\n 1. \\<not> Lambert_W' y < Lambert_W' x \\<Longrightarrow> False", "hence \"Lambert_W' x * exp (Lambert_W' x) \\<ge> Lambert_W' y * exp (Lambert_W' y)\""], ["proof (prove)\nusing this:\n  \\<not> Lambert_W' y < Lambert_W' x\n\ngoal (1 subgoal):\n 1. Lambert_W' y * exp (Lambert_W' y)\n    \\<le> Lambert_W' x * exp (Lambert_W' x)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> Lambert_W' y < Lambert_W' x\n  - exp (- 1) \\<le> x\n  x < y\n  y < 0\n\ngoal (1 subgoal):\n 1. Lambert_W' y * exp (Lambert_W' y)\n    \\<le> Lambert_W' x * exp (Lambert_W' x)", "by (intro exp_times_self_antimono Lambert_W'_le) auto"], ["proof (state)\nthis:\n  Lambert_W' y * exp (Lambert_W' y) \\<le> Lambert_W' x * exp (Lambert_W' x)\n\ngoal (1 subgoal):\n 1. \\<not> Lambert_W' y < Lambert_W' x \\<Longrightarrow> False", "hence \"x \\<ge> y\""], ["proof (prove)\nusing this:\n  Lambert_W' y * exp (Lambert_W' y) \\<le> Lambert_W' x * exp (Lambert_W' x)\n\ngoal (1 subgoal):\n 1. y \\<le> x", "using assms"], ["proof (prove)\nusing this:\n  Lambert_W' y * exp (Lambert_W' y) \\<le> Lambert_W' x * exp (Lambert_W' x)\n  - exp (- 1) \\<le> x\n  x < y\n  y < 0\n\ngoal (1 subgoal):\n 1. y \\<le> x", "by (simp add: Lambert_W'_times_exp_self)"], ["proof (state)\nthis:\n  y \\<le> x\n\ngoal (1 subgoal):\n 1. \\<not> Lambert_W' y < Lambert_W' x \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  - exp (- 1) \\<le> x\n  x < y\n  y < 0\n  y \\<le> x", "show False"], ["proof (prove)\nusing this:\n  - exp (- 1) \\<le> x\n  x < y\n  y < 0\n  y \\<le> x\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W'_antimono:\n  assumes \"x \\<ge> -exp(-1)\" \"x \\<le> y\" \"y < 0\"\n  shows   \"Lambert_W' x \\<ge> Lambert_W' y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' y \\<le> Lambert_W' x", "using Lambert_W'_strict_antimono[of x y] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>- exp (- 1) \\<le> x; x < y; y < 0\\<rbrakk>\n  \\<Longrightarrow> Lambert_W' y < Lambert_W' x\n  - exp (- 1) \\<le> x\n  x \\<le> y\n  y < 0\n\ngoal (1 subgoal):\n 1. Lambert_W' y \\<le> Lambert_W' x", "by (cases \"x = y\") auto"], ["", "lemma Lambert_W'_eq_iff [simp]:\n  \"x \\<in> {-exp(-1)..<0} \\<Longrightarrow> y \\<in> {-exp(-1)..<0} \\<Longrightarrow> Lambert_W' x = Lambert_W' y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> {- exp (- 1)..<0}; y \\<in> {- exp (- 1)..<0}\\<rbrakk>\n    \\<Longrightarrow> (Lambert_W' x = Lambert_W' y) = (x = y)", "using Lambert_W'_strict_antimono[of x y] Lambert_W'_strict_antimono[of y x]"], ["proof (prove)\nusing this:\n  \\<lbrakk>- exp (- 1) \\<le> x; x < y; y < 0\\<rbrakk>\n  \\<Longrightarrow> Lambert_W' y < Lambert_W' x\n  \\<lbrakk>- exp (- 1) \\<le> y; y < x; x < 0\\<rbrakk>\n  \\<Longrightarrow> Lambert_W' x < Lambert_W' y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> {- exp (- 1)..<0}; y \\<in> {- exp (- 1)..<0}\\<rbrakk>\n    \\<Longrightarrow> (Lambert_W' x = Lambert_W' y) = (x = y)", "by (cases x y rule: linorder_cases) auto"], ["", "lemma Lambert_W'_le_iff [simp]:\n  \"x \\<in> {-exp(-1)..<0} \\<Longrightarrow> y \\<in> {-exp(-1)..<0} \\<Longrightarrow> Lambert_W' x \\<le> Lambert_W' y \\<longleftrightarrow> x \\<ge> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> {- exp (- 1)..<0}; y \\<in> {- exp (- 1)..<0}\\<rbrakk>\n    \\<Longrightarrow> (Lambert_W' x \\<le> Lambert_W' y) = (y \\<le> x)", "using Lambert_W'_strict_antimono[of x y] Lambert_W'_strict_antimono[of y x]"], ["proof (prove)\nusing this:\n  \\<lbrakk>- exp (- 1) \\<le> x; x < y; y < 0\\<rbrakk>\n  \\<Longrightarrow> Lambert_W' y < Lambert_W' x\n  \\<lbrakk>- exp (- 1) \\<le> y; y < x; x < 0\\<rbrakk>\n  \\<Longrightarrow> Lambert_W' x < Lambert_W' y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> {- exp (- 1)..<0}; y \\<in> {- exp (- 1)..<0}\\<rbrakk>\n    \\<Longrightarrow> (Lambert_W' x \\<le> Lambert_W' y) = (y \\<le> x)", "by (cases x y rule: linorder_cases) auto"], ["", "lemma Lambert_W'_less_iff [simp]:\n  \"x \\<in> {-exp(-1)..<0} \\<Longrightarrow> y \\<in> {-exp(-1)..<0} \\<Longrightarrow> Lambert_W' x < Lambert_W' y \\<longleftrightarrow> x > y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> {- exp (- 1)..<0}; y \\<in> {- exp (- 1)..<0}\\<rbrakk>\n    \\<Longrightarrow> (Lambert_W' x < Lambert_W' y) = (y < x)", "using Lambert_W'_strict_antimono[of x y] Lambert_W'_strict_antimono[of y x]"], ["proof (prove)\nusing this:\n  \\<lbrakk>- exp (- 1) \\<le> x; x < y; y < 0\\<rbrakk>\n  \\<Longrightarrow> Lambert_W' y < Lambert_W' x\n  \\<lbrakk>- exp (- 1) \\<le> y; y < x; x < 0\\<rbrakk>\n  \\<Longrightarrow> Lambert_W' x < Lambert_W' y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> {- exp (- 1)..<0}; y \\<in> {- exp (- 1)..<0}\\<rbrakk>\n    \\<Longrightarrow> (Lambert_W' x < Lambert_W' y) = (y < x)", "by (cases x y rule: linorder_cases) auto"], ["", "lemma Lambert_W'_le_minus_one:\n  assumes \"x \\<le> -exp(-1)\"\n  shows   \"Lambert_W' x = -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x = - 1", "proof (cases \"x = -exp(-1)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = - exp (- 1) \\<Longrightarrow> Lambert_W' x = - 1\n 2. x \\<noteq> - exp (- 1) \\<Longrightarrow> Lambert_W' x = - 1", "case False"], ["proof (state)\nthis:\n  x \\<noteq> - exp (- 1)\n\ngoal (2 subgoals):\n 1. x = - exp (- 1) \\<Longrightarrow> Lambert_W' x = - 1\n 2. x \\<noteq> - exp (- 1) \\<Longrightarrow> Lambert_W' x = - 1", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> - exp (- 1)\n\ngoal (1 subgoal):\n 1. Lambert_W' x = - 1", "using assms"], ["proof (prove)\nusing this:\n  x \\<noteq> - exp (- 1)\n  x \\<le> - exp (- 1)\n\ngoal (1 subgoal):\n 1. Lambert_W' x = - 1", "by (auto simp: Lambert_W'_def)"], ["proof (state)\nthis:\n  Lambert_W' x = - 1\n\ngoal (1 subgoal):\n 1. x = - exp (- 1) \\<Longrightarrow> Lambert_W' x = - 1", "qed auto"], ["", "lemma Lambert_W'_ge_zero: \"x \\<ge> 0 \\<Longrightarrow> Lambert_W' x = -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> x \\<Longrightarrow> Lambert_W' x = - 1", "by (simp add: Lambert_W'_def)"], ["", "lemma Lambert_W'_neg: \"Lambert_W' x < 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x < 0", "by (rule le_less_trans[OF Lambert_W'_le]) auto"], ["", "lemma Lambert_W'_nz [simp]: \"Lambert_W' x \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x \\<noteq> 0", "using Lambert_W'_neg[of x]"], ["proof (prove)\nusing this:\n  Lambert_W' x < 0\n\ngoal (1 subgoal):\n 1. Lambert_W' x \\<noteq> 0", "by simp"], ["", "lemma Lambert_W'_geI:\n  assumes \"y * exp y \\<ge> x\" \"y \\<le> -1\" \"x \\<ge> -exp(-1)\"\n  shows   \"Lambert_W' x \\<ge> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W' x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W' x", "from assms"], ["proof (chain)\npicking this:\n  x \\<le> y * exp y\n  y \\<le> - 1\n  - exp (- 1) \\<le> x", "have \"y * exp y < 0\""], ["proof (prove)\nusing this:\n  x \\<le> y * exp y\n  y \\<le> - 1\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. y * exp y < 0", "by (intro mult_neg_pos) auto"], ["proof (state)\nthis:\n  y * exp y < 0\n\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W' x", "hence \"Lambert_W' x \\<ge> Lambert_W' (y * exp y)\""], ["proof (prove)\nusing this:\n  y * exp y < 0\n\ngoal (1 subgoal):\n 1. Lambert_W' (y * exp y) \\<le> Lambert_W' x", "using assms exp_times_self_ge[of y]"], ["proof (prove)\nusing this:\n  y * exp y < 0\n  x \\<le> y * exp y\n  y \\<le> - 1\n  - exp (- 1) \\<le> x\n  - exp (- 1) \\<le> y * exp y\n\ngoal (1 subgoal):\n 1. Lambert_W' (y * exp y) \\<le> Lambert_W' x", "by (intro Lambert_W'_antimono) auto"], ["proof (state)\nthis:\n  Lambert_W' (y * exp y) \\<le> Lambert_W' x\n\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W' x", "thus ?thesis"], ["proof (prove)\nusing this:\n  Lambert_W' (y * exp y) \\<le> Lambert_W' x\n\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W' x", "using assms"], ["proof (prove)\nusing this:\n  Lambert_W' (y * exp y) \\<le> Lambert_W' x\n  x \\<le> y * exp y\n  y \\<le> - 1\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W' x", "by simp"], ["proof (state)\nthis:\n  y \\<le> Lambert_W' x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W'_gtI:\n  assumes \"y * exp y > x\" \"y \\<le> -1\" \"x \\<ge> -exp(-1)\"\n  shows   \"Lambert_W' x \\<ge> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W' x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W' x", "from assms"], ["proof (chain)\npicking this:\n  x < y * exp y\n  y \\<le> - 1\n  - exp (- 1) \\<le> x", "have \"y * exp y < 0\""], ["proof (prove)\nusing this:\n  x < y * exp y\n  y \\<le> - 1\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. y * exp y < 0", "by (intro mult_neg_pos) auto"], ["proof (state)\nthis:\n  y * exp y < 0\n\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W' x", "hence \"Lambert_W' x > Lambert_W' (y * exp y)\""], ["proof (prove)\nusing this:\n  y * exp y < 0\n\ngoal (1 subgoal):\n 1. Lambert_W' (y * exp y) < Lambert_W' x", "using assms exp_times_self_ge[of y]"], ["proof (prove)\nusing this:\n  y * exp y < 0\n  x < y * exp y\n  y \\<le> - 1\n  - exp (- 1) \\<le> x\n  - exp (- 1) \\<le> y * exp y\n\ngoal (1 subgoal):\n 1. Lambert_W' (y * exp y) < Lambert_W' x", "by (intro Lambert_W'_strict_antimono) auto"], ["proof (state)\nthis:\n  Lambert_W' (y * exp y) < Lambert_W' x\n\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W' x", "thus ?thesis"], ["proof (prove)\nusing this:\n  Lambert_W' (y * exp y) < Lambert_W' x\n\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W' x", "using assms"], ["proof (prove)\nusing this:\n  Lambert_W' (y * exp y) < Lambert_W' x\n  x < y * exp y\n  y \\<le> - 1\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. y \\<le> Lambert_W' x", "by simp"], ["proof (state)\nthis:\n  y \\<le> Lambert_W' x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W'_leI:\n  assumes \"y * exp y \\<le> x\" \"x < 0\"\n  shows   \"Lambert_W' x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x \\<le> y", "proof (cases \"y \\<le> -1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<le> - 1 \\<Longrightarrow> Lambert_W' x \\<le> y\n 2. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x \\<le> y", "case True"], ["proof (state)\nthis:\n  y \\<le> - 1\n\ngoal (2 subgoals):\n 1. y \\<le> - 1 \\<Longrightarrow> Lambert_W' x \\<le> y\n 2. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x \\<le> y", "have \"Lambert_W' x \\<le> Lambert_W' (y * exp y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x \\<le> Lambert_W' (y * exp y)", "using assms exp_times_self_ge[of y]"], ["proof (prove)\nusing this:\n  y * exp y \\<le> x\n  x < 0\n  - exp (- 1) \\<le> y * exp y\n\ngoal (1 subgoal):\n 1. Lambert_W' x \\<le> Lambert_W' (y * exp y)", "by (intro Lambert_W'_antimono) auto"], ["proof (state)\nthis:\n  Lambert_W' x \\<le> Lambert_W' (y * exp y)\n\ngoal (2 subgoals):\n 1. y \\<le> - 1 \\<Longrightarrow> Lambert_W' x \\<le> y\n 2. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x \\<le> y", "thus ?thesis"], ["proof (prove)\nusing this:\n  Lambert_W' x \\<le> Lambert_W' (y * exp y)\n\ngoal (1 subgoal):\n 1. Lambert_W' x \\<le> y", "using assms True"], ["proof (prove)\nusing this:\n  Lambert_W' x \\<le> Lambert_W' (y * exp y)\n  y * exp y \\<le> x\n  x < 0\n  y \\<le> - 1\n\ngoal (1 subgoal):\n 1. Lambert_W' x \\<le> y", "by simp"], ["proof (state)\nthis:\n  Lambert_W' x \\<le> y\n\ngoal (1 subgoal):\n 1. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x \\<le> y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x \\<le> y", "case False"], ["proof (state)\nthis:\n  \\<not> y \\<le> - 1\n\ngoal (1 subgoal):\n 1. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x \\<le> y", "have \"Lambert_W' x \\<le> -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x \\<le> - 1", "by (rule Lambert_W'_le)"], ["proof (state)\nthis:\n  Lambert_W' x \\<le> - 1\n\ngoal (1 subgoal):\n 1. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x \\<le> y", "also"], ["proof (state)\nthis:\n  Lambert_W' x \\<le> - 1\n\ngoal (1 subgoal):\n 1. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x \\<le> y", "have \"\\<dots> < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 < y", "using False"], ["proof (prove)\nusing this:\n  \\<not> y \\<le> - 1\n\ngoal (1 subgoal):\n 1. - 1 < y", "by simp"], ["proof (state)\nthis:\n  - 1 < y\n\ngoal (1 subgoal):\n 1. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x \\<le> y", "finally"], ["proof (chain)\npicking this:\n  Lambert_W' x < y", "show ?thesis"], ["proof (prove)\nusing this:\n  Lambert_W' x < y\n\ngoal (1 subgoal):\n 1. Lambert_W' x \\<le> y", "by simp"], ["proof (state)\nthis:\n  Lambert_W' x \\<le> y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W'_lessI:\n  assumes \"y * exp y < x\" \"x < 0\"\n  shows   \"Lambert_W' x < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x < y", "proof (cases \"y \\<le> -1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<le> - 1 \\<Longrightarrow> Lambert_W' x < y\n 2. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x < y", "case True"], ["proof (state)\nthis:\n  y \\<le> - 1\n\ngoal (2 subgoals):\n 1. y \\<le> - 1 \\<Longrightarrow> Lambert_W' x < y\n 2. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x < y", "have \"Lambert_W' x < Lambert_W' (y * exp y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x < Lambert_W' (y * exp y)", "using assms exp_times_self_ge[of y]"], ["proof (prove)\nusing this:\n  y * exp y < x\n  x < 0\n  - exp (- 1) \\<le> y * exp y\n\ngoal (1 subgoal):\n 1. Lambert_W' x < Lambert_W' (y * exp y)", "by (intro Lambert_W'_strict_antimono) auto"], ["proof (state)\nthis:\n  Lambert_W' x < Lambert_W' (y * exp y)\n\ngoal (2 subgoals):\n 1. y \\<le> - 1 \\<Longrightarrow> Lambert_W' x < y\n 2. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x < y", "thus ?thesis"], ["proof (prove)\nusing this:\n  Lambert_W' x < Lambert_W' (y * exp y)\n\ngoal (1 subgoal):\n 1. Lambert_W' x < y", "using assms True"], ["proof (prove)\nusing this:\n  Lambert_W' x < Lambert_W' (y * exp y)\n  y * exp y < x\n  x < 0\n  y \\<le> - 1\n\ngoal (1 subgoal):\n 1. Lambert_W' x < y", "by simp"], ["proof (state)\nthis:\n  Lambert_W' x < y\n\ngoal (1 subgoal):\n 1. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x < y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x < y", "case False"], ["proof (state)\nthis:\n  \\<not> y \\<le> - 1\n\ngoal (1 subgoal):\n 1. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x < y", "have \"Lambert_W' x \\<le> -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x \\<le> - 1", "by (rule Lambert_W'_le)"], ["proof (state)\nthis:\n  Lambert_W' x \\<le> - 1\n\ngoal (1 subgoal):\n 1. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x < y", "also"], ["proof (state)\nthis:\n  Lambert_W' x \\<le> - 1\n\ngoal (1 subgoal):\n 1. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x < y", "have \"\\<dots> < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 < y", "using False"], ["proof (prove)\nusing this:\n  \\<not> y \\<le> - 1\n\ngoal (1 subgoal):\n 1. - 1 < y", "by simp"], ["proof (state)\nthis:\n  - 1 < y\n\ngoal (1 subgoal):\n 1. \\<not> y \\<le> - 1 \\<Longrightarrow> Lambert_W' x < y", "finally"], ["proof (chain)\npicking this:\n  Lambert_W' x < y", "show ?thesis"], ["proof (prove)\nusing this:\n  Lambert_W' x < y\n\ngoal (1 subgoal):\n 1. Lambert_W' x < y", "by simp"], ["proof (state)\nthis:\n  Lambert_W' x < y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bij_betw_exp_times_self_atLeastAtMost:\n  fixes a b :: real\n  assumes \"a \\<ge> -1\" \"a \\<le> b\"\n  shows   \"bij_betw (\\<lambda>x. x * exp x) {a..b} {a * exp a..b * exp b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>x. x * exp x) {a..b} {a * exp a..b * exp b}", "unfolding bij_betw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. x * exp x) {a..b} \\<and>\n    (\\<lambda>x. x * exp x) ` {a..b} = {a * exp a..b * exp b}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on (\\<lambda>x. x * exp x) {a..b}\n 2. (\\<lambda>x. x * exp x) ` {a..b} = {a * exp a..b * exp b}", "show \"inj_on (\\<lambda>x. x * exp x) {a..b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. x * exp x) {a..b}", "by (rule inj_on_subset[OF exp_times_self_inj]) (use assms in auto)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>x. x * exp x) {a..b}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * exp x) ` {a..b} = {a * exp a..b * exp b}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * exp x) ` {a..b} = {a * exp a..b * exp b}", "show \"(\\<lambda>x. x * exp x) ` {a..b} = {a * exp a..b * exp b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * exp x) ` {a..b} = {a * exp a..b * exp b}", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       xa \\<in> {a..b} \\<Longrightarrow>\n       xa * exp xa \\<in> {a * exp a..b * exp b}\n 2. \\<And>x.\n       x \\<in> {a * exp a..b * exp b} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       xa \\<in> {a..b} \\<Longrightarrow>\n       xa * exp xa \\<in> {a * exp a..b * exp b}\n 2. \\<And>x.\n       x \\<in> {a * exp a..b * exp b} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "assume \"x \\<in> {a..b}\""], ["proof (state)\nthis:\n  x \\<in> {a..b}\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       xa \\<in> {a..b} \\<Longrightarrow>\n       xa * exp xa \\<in> {a * exp a..b * exp b}\n 2. \\<And>x.\n       x \\<in> {a * exp a..b * exp b} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "thus \"x * exp x \\<in> {a * exp a..b * exp b}\""], ["proof (prove)\nusing this:\n  x \\<in> {a..b}\n\ngoal (1 subgoal):\n 1. x * exp x \\<in> {a * exp a..b * exp b}", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> {a..b}\n  - 1 \\<le> a\n  a \\<le> b\n\ngoal (1 subgoal):\n 1. x * exp x \\<in> {a * exp a..b * exp b}", "by (auto intro!: exp_times_self_mono)"], ["proof (state)\nthis:\n  x * exp x \\<in> {a * exp a..b * exp b}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a * exp a..b * exp b} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a * exp a..b * exp b} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a * exp a..b * exp b} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "assume x: \"x \\<in> {a * exp a..b * exp b}\""], ["proof (state)\nthis:\n  x \\<in> {a * exp a..b * exp b}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a * exp a..b * exp b} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "have \"(-1) * exp (-1) \\<le> a * exp a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 * exp (- 1) \\<le> a * exp a", "using assms"], ["proof (prove)\nusing this:\n  - 1 \\<le> a\n  a \\<le> b\n\ngoal (1 subgoal):\n 1. - 1 * exp (- 1) \\<le> a * exp a", "by (intro exp_times_self_mono) auto"], ["proof (state)\nthis:\n  - 1 * exp (- 1) \\<le> a * exp a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a * exp a..b * exp b} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "also"], ["proof (state)\nthis:\n  - 1 * exp (- 1) \\<le> a * exp a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a * exp a..b * exp b} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "have \"\\<dots> \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * exp a \\<le> x", "using x"], ["proof (prove)\nusing this:\n  x \\<in> {a * exp a..b * exp b}\n\ngoal (1 subgoal):\n 1. a * exp a \\<le> x", "by simp"], ["proof (state)\nthis:\n  a * exp a \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a * exp a..b * exp b} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "finally"], ["proof (chain)\npicking this:\n  - 1 * exp (- 1) \\<le> x", "have \"x \\<ge> -exp (-1)\""], ["proof (prove)\nusing this:\n  - 1 * exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> x", "by simp"], ["proof (state)\nthis:\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a * exp a..b * exp b} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "have \"Lambert_W x \\<in> {a..b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x \\<in> {a..b}", "using x \\<open>x \\<ge> -exp (-1)\\<close> assms"], ["proof (prove)\nusing this:\n  x \\<in> {a * exp a..b * exp b}\n  - exp (- 1) \\<le> x\n  - 1 \\<le> a\n  a \\<le> b\n\ngoal (1 subgoal):\n 1. Lambert_W x \\<in> {a..b}", "by (auto intro!: Lambert_W_geI Lambert_W_leI)"], ["proof (state)\nthis:\n  Lambert_W x \\<in> {a..b}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a * exp a..b * exp b} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "moreover"], ["proof (state)\nthis:\n  Lambert_W x \\<in> {a..b}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a * exp a..b * exp b} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "have \"Lambert_W x * exp (Lambert_W x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x * exp (Lambert_W x) = x", "using \\<open>x \\<ge> -exp (-1)\\<close>"], ["proof (prove)\nusing this:\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. Lambert_W x * exp (Lambert_W x) = x", "by (simp add: Lambert_W_times_exp_self)"], ["proof (state)\nthis:\n  Lambert_W x * exp (Lambert_W x) = x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a * exp a..b * exp b} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "ultimately"], ["proof (chain)\npicking this:\n  Lambert_W x \\<in> {a..b}\n  Lambert_W x * exp (Lambert_W x) = x", "show \"x \\<in> (\\<lambda>x. x * exp x) ` {a..b}\""], ["proof (prove)\nusing this:\n  Lambert_W x \\<in> {a..b}\n  Lambert_W x * exp (Lambert_W x) = x\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "unfolding image_iff"], ["proof (prove)\nusing this:\n  Lambert_W x \\<in> {a..b}\n  Lambert_W x * exp (Lambert_W x) = x\n\ngoal (1 subgoal):\n 1. \\<exists>xa\\<in>{a..b}. x = xa * exp xa", "by metis"], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>x. x * exp x) ` {a..b}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. x * exp x) ` {a..b} = {a * exp a..b * exp b}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bij_betw_exp_times_self_atLeastAtMost':\n  fixes a b :: real\n  assumes \"a \\<le> b\" \"b \\<le> -1\"\n  shows   \"bij_betw (\\<lambda>x. x * exp x) {a..b} {b * exp b..a * exp a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>x. x * exp x) {a..b} {b * exp b..a * exp a}", "unfolding bij_betw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. x * exp x) {a..b} \\<and>\n    (\\<lambda>x. x * exp x) ` {a..b} = {b * exp b..a * exp a}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on (\\<lambda>x. x * exp x) {a..b}\n 2. (\\<lambda>x. x * exp x) ` {a..b} = {b * exp b..a * exp a}", "show \"inj_on (\\<lambda>x. x * exp x) {a..b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. x * exp x) {a..b}", "by (rule inj_on_subset[OF exp_times_self_inj']) (use assms in auto)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>x. x * exp x) {a..b}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * exp x) ` {a..b} = {b * exp b..a * exp a}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * exp x) ` {a..b} = {b * exp b..a * exp a}", "show \"(\\<lambda>x. x * exp x) ` {a..b} = {b * exp b..a * exp a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * exp x) ` {a..b} = {b * exp b..a * exp a}", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       xa \\<in> {a..b} \\<Longrightarrow>\n       xa * exp xa \\<in> {b * exp b..a * exp a}\n 2. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       xa \\<in> {a..b} \\<Longrightarrow>\n       xa * exp xa \\<in> {b * exp b..a * exp a}\n 2. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "assume \"x \\<in> {a..b}\""], ["proof (state)\nthis:\n  x \\<in> {a..b}\n\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       xa \\<in> {a..b} \\<Longrightarrow>\n       xa * exp xa \\<in> {b * exp b..a * exp a}\n 2. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "thus \"x * exp x \\<in> {b * exp b..a * exp a}\""], ["proof (prove)\nusing this:\n  x \\<in> {a..b}\n\ngoal (1 subgoal):\n 1. x * exp x \\<in> {b * exp b..a * exp a}", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> {a..b}\n  a \\<le> b\n  b \\<le> - 1\n\ngoal (1 subgoal):\n 1. x * exp x \\<in> {b * exp b..a * exp a}", "by (auto intro!: exp_times_self_antimono)"], ["proof (state)\nthis:\n  x * exp x \\<in> {b * exp b..a * exp a}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "assume x: \"x \\<in> {b * exp b..a * exp a}\""], ["proof (state)\nthis:\n  x \\<in> {b * exp b..a * exp a}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "from assms"], ["proof (chain)\npicking this:\n  a \\<le> b\n  b \\<le> - 1", "have \"a * exp a < 0\""], ["proof (prove)\nusing this:\n  a \\<le> b\n  b \\<le> - 1\n\ngoal (1 subgoal):\n 1. a * exp a < 0", "by (intro mult_neg_pos) auto"], ["proof (state)\nthis:\n  a * exp a < 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "with x"], ["proof (chain)\npicking this:\n  x \\<in> {b * exp b..a * exp a}\n  a * exp a < 0", "have \"x < 0\""], ["proof (prove)\nusing this:\n  x \\<in> {b * exp b..a * exp a}\n  a * exp a < 0\n\ngoal (1 subgoal):\n 1. x < 0", "by auto"], ["proof (state)\nthis:\n  x < 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "have \"(-1) * exp (-1) \\<le> b * exp b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 * exp (- 1) \\<le> b * exp b", "using assms"], ["proof (prove)\nusing this:\n  a \\<le> b\n  b \\<le> - 1\n\ngoal (1 subgoal):\n 1. - 1 * exp (- 1) \\<le> b * exp b", "by (intro exp_times_self_antimono) auto"], ["proof (state)\nthis:\n  - 1 * exp (- 1) \\<le> b * exp b\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "also"], ["proof (state)\nthis:\n  - 1 * exp (- 1) \\<le> b * exp b\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "have \"\\<dots> \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b * exp b \\<le> x", "using x"], ["proof (prove)\nusing this:\n  x \\<in> {b * exp b..a * exp a}\n\ngoal (1 subgoal):\n 1. b * exp b \\<le> x", "by simp"], ["proof (state)\nthis:\n  b * exp b \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "finally"], ["proof (chain)\npicking this:\n  - 1 * exp (- 1) \\<le> x", "have \"x \\<ge> -exp (-1)\""], ["proof (prove)\nusing this:\n  - 1 * exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> x", "by simp"], ["proof (state)\nthis:\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "have \"Lambert_W' x \\<in> {a..b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x \\<in> {a..b}", "using x \\<open>x \\<ge> -exp (-1)\\<close> \\<open>x < 0\\<close> assms"], ["proof (prove)\nusing this:\n  x \\<in> {b * exp b..a * exp a}\n  - exp (- 1) \\<le> x\n  x < 0\n  a \\<le> b\n  b \\<le> - 1\n\ngoal (1 subgoal):\n 1. Lambert_W' x \\<in> {a..b}", "by (auto intro!: Lambert_W'_geI Lambert_W'_leI)"], ["proof (state)\nthis:\n  Lambert_W' x \\<in> {a..b}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "moreover"], ["proof (state)\nthis:\n  Lambert_W' x \\<in> {a..b}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "have \"Lambert_W' x * exp (Lambert_W' x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x * exp (Lambert_W' x) = x", "using \\<open>x \\<ge> -exp (-1)\\<close> \\<open>x < 0\\<close>"], ["proof (prove)\nusing this:\n  - exp (- 1) \\<le> x\n  x < 0\n\ngoal (1 subgoal):\n 1. Lambert_W' x * exp (Lambert_W' x) = x", "by (auto simp: Lambert_W'_times_exp_self)"], ["proof (state)\nthis:\n  Lambert_W' x * exp (Lambert_W' x) = x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {b * exp b..a * exp a} \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "ultimately"], ["proof (chain)\npicking this:\n  Lambert_W' x \\<in> {a..b}\n  Lambert_W' x * exp (Lambert_W' x) = x", "show \"x \\<in> (\\<lambda>x. x * exp x) ` {a..b}\""], ["proof (prove)\nusing this:\n  Lambert_W' x \\<in> {a..b}\n  Lambert_W' x * exp (Lambert_W' x) = x\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<lambda>x. x * exp x) ` {a..b}", "unfolding image_iff"], ["proof (prove)\nusing this:\n  Lambert_W' x \\<in> {a..b}\n  Lambert_W' x * exp (Lambert_W' x) = x\n\ngoal (1 subgoal):\n 1. \\<exists>xa\\<in>{a..b}. x = xa * exp xa", "by metis"], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>x. x * exp x) ` {a..b}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. x * exp x) ` {a..b} = {b * exp b..a * exp a}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bij_betw_exp_times_self_atLeast:\n  fixes a :: real\n  assumes \"a \\<ge> -1\"\n  shows   \"bij_betw (\\<lambda>x. x * exp x) {a..} {a * exp a..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>x. x * exp x) {a..} {a * exp a..}", "unfolding bij_betw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. x * exp x) {a..} \\<and>\n    (\\<lambda>x. x * exp x) ` {a..} = {a * exp a..}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on (\\<lambda>x. x * exp x) {a..}\n 2. (\\<lambda>x. x * exp x) ` {a..} = {a * exp a..}", "show \"inj_on (\\<lambda>x. x * exp x) {a..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. x * exp x) {a..}", "by (rule inj_on_subset[OF exp_times_self_inj]) (use assms in auto)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>x. x * exp x) {a..}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * exp x) ` {a..} = {a * exp a..}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * exp x) ` {a..} = {a * exp a..}", "show \"(\\<lambda>x. x * exp x) ` {a..} = {a * exp a..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * exp x) ` {a..} = {a * exp a..}", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa. a \\<le> xa \\<Longrightarrow> a * exp a \\<le> xa * exp xa\n 2. \\<And>x.\n       a * exp a \\<le> x \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..}", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa. a \\<le> xa \\<Longrightarrow> a * exp a \\<le> xa * exp xa\n 2. \\<And>x.\n       a * exp a \\<le> x \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..}", "assume \"x \\<ge> a\""], ["proof (state)\nthis:\n  a \\<le> x\n\ngoal (2 subgoals):\n 1. \\<And>x xa. a \\<le> xa \\<Longrightarrow> a * exp a \\<le> xa * exp xa\n 2. \\<And>x.\n       a * exp a \\<le> x \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..}", "thus \"x * exp x \\<ge> a * exp a\""], ["proof (prove)\nusing this:\n  a \\<le> x\n\ngoal (1 subgoal):\n 1. a * exp a \\<le> x * exp x", "using assms"], ["proof (prove)\nusing this:\n  a \\<le> x\n  - 1 \\<le> a\n\ngoal (1 subgoal):\n 1. a * exp a \\<le> x * exp x", "by (auto intro!: exp_times_self_mono)"], ["proof (state)\nthis:\n  a * exp a \\<le> x * exp x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       a * exp a \\<le> x \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       a * exp a \\<le> x \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       a * exp a \\<le> x \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..}", "assume x: \"x \\<ge> a * exp a\""], ["proof (state)\nthis:\n  a * exp a \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       a * exp a \\<le> x \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..}", "have \"(-1) * exp (-1) \\<le> a * exp a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 * exp (- 1) \\<le> a * exp a", "using assms"], ["proof (prove)\nusing this:\n  - 1 \\<le> a\n\ngoal (1 subgoal):\n 1. - 1 * exp (- 1) \\<le> a * exp a", "by (intro exp_times_self_mono) auto"], ["proof (state)\nthis:\n  - 1 * exp (- 1) \\<le> a * exp a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       a * exp a \\<le> x \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..}", "also"], ["proof (state)\nthis:\n  - 1 * exp (- 1) \\<le> a * exp a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       a * exp a \\<le> x \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..}", "have \"\\<dots> \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * exp a \\<le> x", "using x"], ["proof (prove)\nusing this:\n  a * exp a \\<le> x\n\ngoal (1 subgoal):\n 1. a * exp a \\<le> x", "by simp"], ["proof (state)\nthis:\n  a * exp a \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       a * exp a \\<le> x \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..}", "finally"], ["proof (chain)\npicking this:\n  - 1 * exp (- 1) \\<le> x", "have \"x \\<ge> -exp (-1)\""], ["proof (prove)\nusing this:\n  - 1 * exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> x", "by simp"], ["proof (state)\nthis:\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       a * exp a \\<le> x \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..}", "have \"Lambert_W x \\<in> {a..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x \\<in> {a..}", "using x \\<open>x \\<ge> -exp (-1)\\<close> assms"], ["proof (prove)\nusing this:\n  a * exp a \\<le> x\n  - exp (- 1) \\<le> x\n  - 1 \\<le> a\n\ngoal (1 subgoal):\n 1. Lambert_W x \\<in> {a..}", "by (auto intro!: Lambert_W_geI Lambert_W_leI)"], ["proof (state)\nthis:\n  Lambert_W x \\<in> {a..}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       a * exp a \\<le> x \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..}", "moreover"], ["proof (state)\nthis:\n  Lambert_W x \\<in> {a..}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       a * exp a \\<le> x \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..}", "have \"Lambert_W x * exp (Lambert_W x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x * exp (Lambert_W x) = x", "using \\<open>x \\<ge> -exp (-1)\\<close>"], ["proof (prove)\nusing this:\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. Lambert_W x * exp (Lambert_W x) = x", "by (simp add: Lambert_W_times_exp_self)"], ["proof (state)\nthis:\n  Lambert_W x * exp (Lambert_W x) = x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       a * exp a \\<le> x \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. x * exp x) ` {a..}", "ultimately"], ["proof (chain)\npicking this:\n  Lambert_W x \\<in> {a..}\n  Lambert_W x * exp (Lambert_W x) = x", "show \"x \\<in> (\\<lambda>x. x * exp x) ` {a..}\""], ["proof (prove)\nusing this:\n  Lambert_W x \\<in> {a..}\n  Lambert_W x * exp (Lambert_W x) = x\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<lambda>x. x * exp x) ` {a..}", "unfolding image_iff"], ["proof (prove)\nusing this:\n  Lambert_W x \\<in> {a..}\n  Lambert_W x * exp (Lambert_W x) = x\n\ngoal (1 subgoal):\n 1. \\<exists>xa\\<in>{a..}. x = xa * exp xa", "by metis"], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>x. x * exp x) ` {a..}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. x * exp x) ` {a..} = {a * exp a..}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Basic identities and bounds\\<close>"], ["", "lemma Lambert_W_2_ln_2 [simp]: \"Lambert_W (2 * ln 2) = ln 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W (2 * ln 2) = ln 2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Lambert_W (2 * ln 2) = ln 2", "have \"-1 \\<le> (0 :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 \\<le> 0", "by simp"], ["proof (state)\nthis:\n  - 1 \\<le> 0\n\ngoal (1 subgoal):\n 1. Lambert_W (2 * ln 2) = ln 2", "also"], ["proof (state)\nthis:\n  - 1 \\<le> 0\n\ngoal (1 subgoal):\n 1. Lambert_W (2 * ln 2) = ln 2", "have \"\\<dots> \\<le> ln 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> ln 2", "by simp"], ["proof (state)\nthis:\n  0 \\<le> ln 2\n\ngoal (1 subgoal):\n 1. Lambert_W (2 * ln 2) = ln 2", "finally"], ["proof (chain)\npicking this:\n  - 1 \\<le> ln 2", "have \"-1 \\<le> (ln 2 :: real)\""], ["proof (prove)\nusing this:\n  - 1 \\<le> ln 2\n\ngoal (1 subgoal):\n 1. - 1 \\<le> ln 2", "."], ["proof (state)\nthis:\n  - 1 \\<le> ln 2\n\ngoal (1 subgoal):\n 1. Lambert_W (2 * ln 2) = ln 2", "thus ?thesis"], ["proof (prove)\nusing this:\n  - 1 \\<le> ln 2\n\ngoal (1 subgoal):\n 1. Lambert_W (2 * ln 2) = ln 2", "by (intro Lambert_W_eqI) auto"], ["proof (state)\nthis:\n  Lambert_W (2 * ln 2) = ln 2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W_exp_1 [simp]: \"Lambert_W (exp 1) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W (exp 1) = 1", "by (rule Lambert_W_eqI) auto"], ["", "lemma Lambert_W_neg_ln_over_self:\n  assumes \"x \\<in> {exp (-1)..exp 1}\"\n  shows   \"Lambert_W (-ln x / x) = -ln x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W (- ln x / x) = - ln x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Lambert_W (- ln x / x) = - ln x", "have \"0 < (exp (-1) :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < exp (- 1)", "by simp"], ["proof (state)\nthis:\n  0 < exp (- 1)\n\ngoal (1 subgoal):\n 1. Lambert_W (- ln x / x) = - ln x", "also"], ["proof (state)\nthis:\n  0 < exp (- 1)\n\ngoal (1 subgoal):\n 1. Lambert_W (- ln x / x) = - ln x", "have \"\\<dots> \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp (- 1) \\<le> x", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> {exp (- 1)..exp 1}\n\ngoal (1 subgoal):\n 1. exp (- 1) \\<le> x", "by simp"], ["proof (state)\nthis:\n  exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. Lambert_W (- ln x / x) = - ln x", "finally"], ["proof (chain)\npicking this:\n  0 < x", "have \"x > 0\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. 0 < x", "."], ["proof (state)\nthis:\n  0 < x\n\ngoal (1 subgoal):\n 1. Lambert_W (- ln x / x) = - ln x", "from \\<open>x > 0\\<close> assms"], ["proof (chain)\npicking this:\n  0 < x\n  x \\<in> {exp (- 1)..exp 1}", "have \"ln x \\<le> ln (exp 1)\""], ["proof (prove)\nusing this:\n  0 < x\n  x \\<in> {exp (- 1)..exp 1}\n\ngoal (1 subgoal):\n 1. ln x \\<le> ln (exp 1)", "by (subst ln_le_cancel_iff) auto"], ["proof (state)\nthis:\n  ln x \\<le> ln (exp 1)\n\ngoal (1 subgoal):\n 1. Lambert_W (- ln x / x) = - ln x", "also"], ["proof (state)\nthis:\n  ln x \\<le> ln (exp 1)\n\ngoal (1 subgoal):\n 1. Lambert_W (- ln x / x) = - ln x", "have \"ln (exp 1) = (1 :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ln (exp 1) = 1", "by simp"], ["proof (state)\nthis:\n  ln (exp 1) = 1\n\ngoal (1 subgoal):\n 1. Lambert_W (- ln x / x) = - ln x", "finally"], ["proof (chain)\npicking this:\n  ln x \\<le> 1", "have \"ln x \\<le> 1\""], ["proof (prove)\nusing this:\n  ln x \\<le> 1\n\ngoal (1 subgoal):\n 1. ln x \\<le> 1", "."], ["proof (state)\nthis:\n  ln x \\<le> 1\n\ngoal (1 subgoal):\n 1. Lambert_W (- ln x / x) = - ln x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W (- ln x / x) = - ln x", "using assms \\<open>x > 0\\<close> \\<open>ln x \\<le> 1\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> {exp (- 1)..exp 1}\n  0 < x\n  ln x \\<le> 1\n\ngoal (1 subgoal):\n 1. Lambert_W (- ln x / x) = - ln x", "by (intro Lambert_W_eqI) (auto simp: exp_minus field_simps)"], ["proof (state)\nthis:\n  Lambert_W (- ln x / x) = - ln x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W'_neg_ln_over_self:\n  assumes \"x \\<ge> exp 1\"\n  shows   \"Lambert_W' (-ln x / x) = -ln x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' (- ln x / x) = - ln x", "proof (rule Lambert_W'_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. - ln x \\<le> - 1\n 2. - ln x * exp (- ln x) = - ln x / x", "have \"0 < (exp 1 :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < exp 1", "by simp"], ["proof (state)\nthis:\n  0 < exp 1\n\ngoal (2 subgoals):\n 1. - ln x \\<le> - 1\n 2. - ln x * exp (- ln x) = - ln x / x", "also"], ["proof (state)\nthis:\n  0 < exp 1\n\ngoal (2 subgoals):\n 1. - ln x \\<le> - 1\n 2. - ln x * exp (- ln x) = - ln x / x", "have \"\\<dots> \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp 1 \\<le> x", "by fact"], ["proof (state)\nthis:\n  exp 1 \\<le> x\n\ngoal (2 subgoals):\n 1. - ln x \\<le> - 1\n 2. - ln x * exp (- ln x) = - ln x / x", "finally"], ["proof (chain)\npicking this:\n  0 < x", "have \"x > 0\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. 0 < x", "."], ["proof (state)\nthis:\n  0 < x\n\ngoal (2 subgoals):\n 1. - ln x \\<le> - 1\n 2. - ln x * exp (- ln x) = - ln x / x", "from assms \\<open>x > 0\\<close>"], ["proof (chain)\npicking this:\n  exp 1 \\<le> x\n  0 < x", "have \"ln x \\<ge> ln (exp 1)\""], ["proof (prove)\nusing this:\n  exp 1 \\<le> x\n  0 < x\n\ngoal (1 subgoal):\n 1. ln (exp 1) \\<le> ln x", "by (subst ln_le_cancel_iff) auto"], ["proof (state)\nthis:\n  ln (exp 1) \\<le> ln x\n\ngoal (2 subgoals):\n 1. - ln x \\<le> - 1\n 2. - ln x * exp (- ln x) = - ln x / x", "thus \"-ln x \\<le> -1\""], ["proof (prove)\nusing this:\n  ln (exp 1) \\<le> ln x\n\ngoal (1 subgoal):\n 1. - ln x \\<le> - 1", "by simp"], ["proof (state)\nthis:\n  - ln x \\<le> - 1\n\ngoal (1 subgoal):\n 1. - ln x * exp (- ln x) = - ln x / x", "show \"-ln x * exp (-ln x) = -ln x / x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - ln x * exp (- ln x) = - ln x / x", "using \\<open>x > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. - ln x * exp (- ln x) = - ln x / x", "by (simp add: field_simps exp_minus)"], ["proof (state)\nthis:\n  - ln x * exp (- ln x) = - ln x / x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exp_Lambert_W: \"x \\<ge> -exp (-1) \\<Longrightarrow> x \\<noteq> 0 \\<Longrightarrow> exp (Lambert_W x) = x / Lambert_W x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>- exp (- 1) \\<le> x; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> exp (Lambert_W x) = x / Lambert_W x", "using Lambert_W_times_exp_self[of x]"], ["proof (prove)\nusing this:\n  - exp (- 1) \\<le> x \\<Longrightarrow> Lambert_W x * exp (Lambert_W x) = x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>- exp (- 1) \\<le> x; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> exp (Lambert_W x) = x / Lambert_W x", "by (auto simp add: divide_simps mult_ac)"], ["", "lemma exp_Lambert_W': \"x \\<in> {-exp (-1)..<0} \\<Longrightarrow> exp (Lambert_W' x) = x / Lambert_W' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {- exp (- 1)..<0} \\<Longrightarrow>\n    exp (Lambert_W' x) = x / Lambert_W' x", "using Lambert_W'_times_exp_self[of x]"], ["proof (prove)\nusing this:\n  x \\<in> {- exp (- 1)..<0} \\<Longrightarrow>\n  Lambert_W' x * exp (Lambert_W' x) = x\n\ngoal (1 subgoal):\n 1. x \\<in> {- exp (- 1)..<0} \\<Longrightarrow>\n    exp (Lambert_W' x) = x / Lambert_W' x", "by (auto simp add: divide_simps mult_ac)"], ["", "lemma ln_Lambert_W:\n  assumes \"x > 0\"\n  shows   \"ln (Lambert_W x) = ln x - Lambert_W x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ln (Lambert_W x) = ln x - Lambert_W x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ln (Lambert_W x) = ln x - Lambert_W x", "have \"-exp (-1) \\<le> (0 :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> 0", "by simp"], ["proof (state)\nthis:\n  - exp (- 1) \\<le> 0\n\ngoal (1 subgoal):\n 1. ln (Lambert_W x) = ln x - Lambert_W x", "also"], ["proof (state)\nthis:\n  - exp (- 1) \\<le> 0\n\ngoal (1 subgoal):\n 1. ln (Lambert_W x) = ln x - Lambert_W x", "have \"\\<dots> < x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x", "by fact"], ["proof (state)\nthis:\n  0 < x\n\ngoal (1 subgoal):\n 1. ln (Lambert_W x) = ln x - Lambert_W x", "finally"], ["proof (chain)\npicking this:\n  - exp (- 1) < x", "have x: \"x > -exp(-1)\""], ["proof (prove)\nusing this:\n  - exp (- 1) < x\n\ngoal (1 subgoal):\n 1. - exp (- 1) < x", "."], ["proof (state)\nthis:\n  - exp (- 1) < x\n\ngoal (1 subgoal):\n 1. ln (Lambert_W x) = ln x - Lambert_W x", "have \"exp (ln (Lambert_W x)) = exp (ln x - Lambert_W x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp (ln (Lambert_W x)) = exp (ln x - Lambert_W x)", "using assms x"], ["proof (prove)\nusing this:\n  0 < x\n  - exp (- 1) < x\n\ngoal (1 subgoal):\n 1. exp (ln (Lambert_W x)) = exp (ln x - Lambert_W x)", "by (subst exp_diff) (auto simp: exp_Lambert_W)"], ["proof (state)\nthis:\n  exp (ln (Lambert_W x)) = exp (ln x - Lambert_W x)\n\ngoal (1 subgoal):\n 1. ln (Lambert_W x) = ln x - Lambert_W x", "thus ?thesis"], ["proof (prove)\nusing this:\n  exp (ln (Lambert_W x)) = exp (ln x - Lambert_W x)\n\ngoal (1 subgoal):\n 1. ln (Lambert_W x) = ln x - Lambert_W x", "by (subst (asm) exp_inj_iff)"], ["proof (state)\nthis:\n  ln (Lambert_W x) = ln x - Lambert_W x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ln_minus_Lambert_W':\n  assumes \"x \\<in> {-exp (-1)..<0}\"\n  shows   \"ln (-Lambert_W' x) = ln (-x) - Lambert_W' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ln (- Lambert_W' x) = ln (- x) - Lambert_W' x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ln (- Lambert_W' x) = ln (- x) - Lambert_W' x", "have \"exp (ln (-x) - Lambert_W' x) = -Lambert_W' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp (ln (- x) - Lambert_W' x) = - Lambert_W' x", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> {- exp (- 1)..<0}\n\ngoal (1 subgoal):\n 1. exp (ln (- x) - Lambert_W' x) = - Lambert_W' x", "by (simp add: exp_diff exp_Lambert_W')"], ["proof (state)\nthis:\n  exp (ln (- x) - Lambert_W' x) = - Lambert_W' x\n\ngoal (1 subgoal):\n 1. ln (- Lambert_W' x) = ln (- x) - Lambert_W' x", "also"], ["proof (state)\nthis:\n  exp (ln (- x) - Lambert_W' x) = - Lambert_W' x\n\ngoal (1 subgoal):\n 1. ln (- Lambert_W' x) = ln (- x) - Lambert_W' x", "have \"\\<dots> = exp (ln (-Lambert_W' x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - Lambert_W' x = exp (ln (- Lambert_W' x))", "using Lambert_W'_neg[of x]"], ["proof (prove)\nusing this:\n  Lambert_W' x < 0\n\ngoal (1 subgoal):\n 1. - Lambert_W' x = exp (ln (- Lambert_W' x))", "by simp"], ["proof (state)\nthis:\n  - Lambert_W' x = exp (ln (- Lambert_W' x))\n\ngoal (1 subgoal):\n 1. ln (- Lambert_W' x) = ln (- x) - Lambert_W' x", "finally"], ["proof (chain)\npicking this:\n  exp (ln (- x) - Lambert_W' x) = exp (ln (- Lambert_W' x))", "show ?thesis"], ["proof (prove)\nusing this:\n  exp (ln (- x) - Lambert_W' x) = exp (ln (- Lambert_W' x))\n\ngoal (1 subgoal):\n 1. ln (- Lambert_W' x) = ln (- x) - Lambert_W' x", "by simp"], ["proof (state)\nthis:\n  ln (- Lambert_W' x) = ln (- x) - Lambert_W' x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W_plus_Lambert_W_eq:\n  assumes \"x > 0\" \"y > 0\"\n  shows   \"Lambert_W x + Lambert_W y = Lambert_W (x * y * (1 / Lambert_W x + 1 / Lambert_W y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x + Lambert_W y =\n    Lambert_W (x * y * (1 / Lambert_W x + 1 / Lambert_W y))", "proof (rule sym, rule Lambert_W_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. - 1 \\<le> Lambert_W x + Lambert_W y\n 2. (Lambert_W x + Lambert_W y) * exp (Lambert_W x + Lambert_W y) =\n    x * y * (1 / Lambert_W x + 1 / Lambert_W y)", "have \"x > -exp(-1)\" \"y > -exp (-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - exp (- 1) < x &&& - exp (- 1) < y", "by (rule less_trans[OF _ assms(1)] less_trans[OF _ assms(2)], simp)+"], ["proof (state)\nthis:\n  - exp (- 1) < x\n  - exp (- 1) < y\n\ngoal (2 subgoals):\n 1. - 1 \\<le> Lambert_W x + Lambert_W y\n 2. (Lambert_W x + Lambert_W y) * exp (Lambert_W x + Lambert_W y) =\n    x * y * (1 / Lambert_W x + 1 / Lambert_W y)", "with assms"], ["proof (chain)\npicking this:\n  0 < x\n  0 < y\n  - exp (- 1) < x\n  - exp (- 1) < y", "show \"(Lambert_W x + Lambert_W y) * exp (Lambert_W x + Lambert_W y) =\n                     x * y * (1 / Lambert_W x + 1 / Lambert_W y)\""], ["proof (prove)\nusing this:\n  0 < x\n  0 < y\n  - exp (- 1) < x\n  - exp (- 1) < y\n\ngoal (1 subgoal):\n 1. (Lambert_W x + Lambert_W y) * exp (Lambert_W x + Lambert_W y) =\n    x * y * (1 / Lambert_W x + 1 / Lambert_W y)", "by (auto simp: field_simps exp_add exp_Lambert_W)"], ["proof (state)\nthis:\n  (Lambert_W x + Lambert_W y) * exp (Lambert_W x + Lambert_W y) =\n  x * y * (1 / Lambert_W x + 1 / Lambert_W y)\n\ngoal (1 subgoal):\n 1. - 1 \\<le> Lambert_W x + Lambert_W y", "have \"-1 \\<le> (0 :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 \\<le> 0", "by simp"], ["proof (state)\nthis:\n  - 1 \\<le> 0\n\ngoal (1 subgoal):\n 1. - 1 \\<le> Lambert_W x + Lambert_W y", "also"], ["proof (state)\nthis:\n  - 1 \\<le> 0\n\ngoal (1 subgoal):\n 1. - 1 \\<le> Lambert_W x + Lambert_W y", "from assms"], ["proof (chain)\npicking this:\n  0 < x\n  0 < y", "have \"\\<dots> \\<le> Lambert_W x + Lambert_W y\""], ["proof (prove)\nusing this:\n  0 < x\n  0 < y\n\ngoal (1 subgoal):\n 1. 0 \\<le> Lambert_W x + Lambert_W y", "by (intro add_nonneg_nonneg) auto"], ["proof (state)\nthis:\n  0 \\<le> Lambert_W x + Lambert_W y\n\ngoal (1 subgoal):\n 1. - 1 \\<le> Lambert_W x + Lambert_W y", "finally"], ["proof (chain)\npicking this:\n  - 1 \\<le> Lambert_W x + Lambert_W y", "show \"\\<dots> \\<ge> -1\""], ["proof (prove)\nusing this:\n  - 1 \\<le> Lambert_W x + Lambert_W y\n\ngoal (1 subgoal):\n 1. - 1 \\<le> Lambert_W x + Lambert_W y", "."], ["proof (state)\nthis:\n  - 1 \\<le> Lambert_W x + Lambert_W y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W'_plus_Lambert_W'_eq:\n  assumes \"x \\<in> {-exp(-1)..<0}\" \"y \\<in> {-exp(-1)..<0}\"\n  shows   \"Lambert_W' x + Lambert_W' y = Lambert_W' (x * y * (1 / Lambert_W' x + 1 / Lambert_W' y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x + Lambert_W' y =\n    Lambert_W' (x * y * (1 / Lambert_W' x + 1 / Lambert_W' y))", "proof (rule sym, rule Lambert_W'_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. Lambert_W' x + Lambert_W' y \\<le> - 1\n 2. (Lambert_W' x + Lambert_W' y) * exp (Lambert_W' x + Lambert_W' y) =\n    x * y * (1 / Lambert_W' x + 1 / Lambert_W' y)", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> {- exp (- 1)..<0}\n  y \\<in> {- exp (- 1)..<0}", "show \"(Lambert_W' x + Lambert_W' y) * exp (Lambert_W' x + Lambert_W' y) =\n                     x * y * (1 / Lambert_W' x + 1 / Lambert_W' y)\""], ["proof (prove)\nusing this:\n  x \\<in> {- exp (- 1)..<0}\n  y \\<in> {- exp (- 1)..<0}\n\ngoal (1 subgoal):\n 1. (Lambert_W' x + Lambert_W' y) * exp (Lambert_W' x + Lambert_W' y) =\n    x * y * (1 / Lambert_W' x + 1 / Lambert_W' y)", "by (auto simp: field_simps exp_add exp_Lambert_W')"], ["proof (state)\nthis:\n  (Lambert_W' x + Lambert_W' y) * exp (Lambert_W' x + Lambert_W' y) =\n  x * y * (1 / Lambert_W' x + 1 / Lambert_W' y)\n\ngoal (1 subgoal):\n 1. Lambert_W' x + Lambert_W' y \\<le> - 1", "have \"Lambert_W' x + Lambert_W' y \\<le> -1 + -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' x + Lambert_W' y \\<le> - 1 + - 1", "by (intro add_mono Lambert_W'_le)"], ["proof (state)\nthis:\n  Lambert_W' x + Lambert_W' y \\<le> - 1 + - 1\n\ngoal (1 subgoal):\n 1. Lambert_W' x + Lambert_W' y \\<le> - 1", "also"], ["proof (state)\nthis:\n  Lambert_W' x + Lambert_W' y \\<le> - 1 + - 1\n\ngoal (1 subgoal):\n 1. Lambert_W' x + Lambert_W' y \\<le> - 1", "have \"\\<dots> \\<le> -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 + - 1 \\<le> - 1", "by simp"], ["proof (state)\nthis:\n  - 1 + - 1 \\<le> - 1\n\ngoal (1 subgoal):\n 1. Lambert_W' x + Lambert_W' y \\<le> - 1", "finally"], ["proof (chain)\npicking this:\n  Lambert_W' x + Lambert_W' y \\<le> - 1", "show \"Lambert_W' x + Lambert_W' y \\<le> -1\""], ["proof (prove)\nusing this:\n  Lambert_W' x + Lambert_W' y \\<le> - 1\n\ngoal (1 subgoal):\n 1. Lambert_W' x + Lambert_W' y \\<le> - 1", "."], ["proof (state)\nthis:\n  Lambert_W' x + Lambert_W' y \\<le> - 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W_gt_ln_minus_ln_ln:\n  assumes \"x > exp 1\"\n  shows   \"Lambert_W x > ln x - ln (ln x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ln x - ln (ln x) < Lambert_W x", "proof (rule Lambert_W_gtI)"], ["proof (state)\ngoal (1 subgoal):\n 1. (ln x - ln (ln x)) * exp (ln x - ln (ln x)) < x", "have \"x > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < x", "by (rule less_trans[OF _ assms]) auto"], ["proof (state)\nthis:\n  1 < x\n\ngoal (1 subgoal):\n 1. (ln x - ln (ln x)) * exp (ln x - ln (ln x)) < x", "have \"ln x > ln (exp 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ln (exp 1) < ln x", "by (subst ln_less_cancel_iff) (use \\<open>x > 1\\<close> assms in auto)"], ["proof (state)\nthis:\n  ln (exp 1) < ln x\n\ngoal (1 subgoal):\n 1. (ln x - ln (ln x)) * exp (ln x - ln (ln x)) < x", "thus \"(ln x - ln (ln x)) * exp (ln x - ln (ln x)) < x\""], ["proof (prove)\nusing this:\n  ln (exp 1) < ln x\n\ngoal (1 subgoal):\n 1. (ln x - ln (ln x)) * exp (ln x - ln (ln x)) < x", "using assms \\<open>x > 1\\<close>"], ["proof (prove)\nusing this:\n  ln (exp 1) < ln x\n  exp 1 < x\n  1 < x\n\ngoal (1 subgoal):\n 1. (ln x - ln (ln x)) * exp (ln x - ln (ln x)) < x", "by (simp add: exp_diff field_simps)"], ["proof (state)\nthis:\n  (ln x - ln (ln x)) * exp (ln x - ln (ln x)) < x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W_less_ln:\n  assumes \"x > exp 1\"\n  shows   \"Lambert_W x < ln x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x < ln x", "proof (rule Lambert_W_lessI)"], ["proof (state)\ngoal (3 subgoals):\n 1. x < ln x * exp (ln x)\n 2. - 1 \\<le> ln x\n 3. - exp (- 1) \\<le> x", "have \"x > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x", "by (rule less_trans[OF _ assms]) auto"], ["proof (state)\nthis:\n  0 < x\n\ngoal (3 subgoals):\n 1. x < ln x * exp (ln x)\n 2. - 1 \\<le> ln x\n 3. - exp (- 1) \\<le> x", "have \"ln x > ln (exp 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ln (exp 1) < ln x", "by (subst ln_less_cancel_iff) (use \\<open>x > 0\\<close> assms in auto)"], ["proof (state)\nthis:\n  ln (exp 1) < ln x\n\ngoal (3 subgoals):\n 1. x < ln x * exp (ln x)\n 2. - 1 \\<le> ln x\n 3. - exp (- 1) \\<le> x", "thus \"x < ln x * exp (ln x)\""], ["proof (prove)\nusing this:\n  ln (exp 1) < ln x\n\ngoal (1 subgoal):\n 1. x < ln x * exp (ln x)", "using \\<open>x > 0\\<close>"], ["proof (prove)\nusing this:\n  ln (exp 1) < ln x\n  0 < x\n\ngoal (1 subgoal):\n 1. x < ln x * exp (ln x)", "by simp"], ["proof (state)\nthis:\n  x < ln x * exp (ln x)\n\ngoal (2 subgoals):\n 1. - 1 \\<le> ln x\n 2. - exp (- 1) \\<le> x", "show \"ln x \\<ge> -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 1 \\<le> ln x", "by (rule less_imp_le[OF le_less_trans[OF _ \\<open>ln x > _\\<close>]]) auto"], ["proof (state)\nthis:\n  - 1 \\<le> ln x\n\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> x", "show \"x \\<ge> -exp (-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> x", "by (rule less_imp_le[OF le_less_trans[OF _ \\<open>x > 0\\<close>]]) auto"], ["proof (state)\nthis:\n  - exp (- 1) \\<le> x\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Limits, continuity, and differentiability\\<close>"], ["", "lemma filterlim_Lambert_W_at_top [tendsto_intros]: \"filterlim Lambert_W at_top at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filterlim Lambert_W at_top at_top", "unfolding filterlim_at_top"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Z. \\<forall>\\<^sub>F x in at_top. Z \\<le> Lambert_W x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Z. \\<forall>\\<^sub>F x in at_top. Z \\<le> Lambert_W x", "fix C :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Z. \\<forall>\\<^sub>F x in at_top. Z \\<le> Lambert_W x", "have \"eventually (\\<lambda>x. x \\<ge> C * exp C) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eventually ((\\<le>) (C * exp C)) at_top", "by (rule eventually_ge_at_top)"], ["proof (state)\nthis:\n  eventually ((\\<le>) (C * exp C)) at_top\n\ngoal (1 subgoal):\n 1. \\<And>Z. \\<forall>\\<^sub>F x in at_top. Z \\<le> Lambert_W x", "thus \"eventually (\\<lambda>x. Lambert_W x \\<ge> C) at_top\""], ["proof (prove)\nusing this:\n  eventually ((\\<le>) (C * exp C)) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top. C \\<le> Lambert_W x", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. C * exp C \\<le> x \\<Longrightarrow> C \\<le> Lambert_W x", "case (elim x)"], ["proof (state)\nthis:\n  C * exp C \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>x. C * exp C \\<le> x \\<Longrightarrow> C \\<le> Lambert_W x", "thus ?case"], ["proof (prove)\nusing this:\n  C * exp C \\<le> x\n\ngoal (1 subgoal):\n 1. C \\<le> Lambert_W x", "by (intro Lambert_W_geI) auto"], ["proof (state)\nthis:\n  C \\<le> Lambert_W x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top. C \\<le> Lambert_W x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filterlim_Lambert_W_at_left_0 [tendsto_intros]:\n  \"filterlim Lambert_W' at_bot (at_left 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filterlim Lambert_W' at_bot (at_left 0)", "unfolding filterlim_at_bot"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Z. \\<forall>\\<^sub>F x in at_left 0. Lambert_W' x \\<le> Z", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Z. \\<forall>\\<^sub>F x in at_left 0. Lambert_W' x \\<le> Z", "fix C :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Z. \\<forall>\\<^sub>F x in at_left 0. Lambert_W' x \\<le> Z", "define C' where \"C' = min C (-1)\""], ["proof (state)\nthis:\n  C' = min C (- 1)\n\ngoal (1 subgoal):\n 1. \\<And>Z. \\<forall>\\<^sub>F x in at_left 0. Lambert_W' x \\<le> Z", "have \"C' < 0\" \"C' \\<le> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C' < 0 &&& C' \\<le> C", "by (simp_all add: C'_def)"], ["proof (state)\nthis:\n  C' < 0\n  C' \\<le> C\n\ngoal (1 subgoal):\n 1. \\<And>Z. \\<forall>\\<^sub>F x in at_left 0. Lambert_W' x \\<le> Z", "have \"C' * exp C' < 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C' * exp C' < 0", "using \\<open>C' < 0\\<close>"], ["proof (prove)\nusing this:\n  C' < 0\n\ngoal (1 subgoal):\n 1. C' * exp C' < 0", "by (intro mult_neg_pos) auto"], ["proof (state)\nthis:\n  C' * exp C' < 0\n\ngoal (1 subgoal):\n 1. \\<And>Z. \\<forall>\\<^sub>F x in at_left 0. Lambert_W' x \\<le> Z", "hence \"eventually (\\<lambda>x. x \\<ge> C' * exp C') (at_left 0)\""], ["proof (prove)\nusing this:\n  C' * exp C' < 0\n\ngoal (1 subgoal):\n 1. eventually ((\\<le>) (C' * exp C')) (at_left 0)", "by real_asymp"], ["proof (state)\nthis:\n  eventually ((\\<le>) (C' * exp C')) (at_left 0)\n\ngoal (1 subgoal):\n 1. \\<And>Z. \\<forall>\\<^sub>F x in at_left 0. Lambert_W' x \\<le> Z", "moreover"], ["proof (state)\nthis:\n  eventually ((\\<le>) (C' * exp C')) (at_left 0)\n\ngoal (1 subgoal):\n 1. \\<And>Z. \\<forall>\\<^sub>F x in at_left 0. Lambert_W' x \\<le> Z", "have \"eventually (\\<lambda>x::real. x < 0) (at_left 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_left 0. x < 0", "by real_asymp"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_left 0. x < 0\n\ngoal (1 subgoal):\n 1. \\<And>Z. \\<forall>\\<^sub>F x in at_left 0. Lambert_W' x \\<le> Z", "ultimately"], ["proof (chain)\npicking this:\n  eventually ((\\<le>) (C' * exp C')) (at_left 0)\n  \\<forall>\\<^sub>F x in at_left 0. x < 0", "show \"eventually (\\<lambda>x. Lambert_W' x \\<le> C) (at_left 0)\""], ["proof (prove)\nusing this:\n  eventually ((\\<le>) (C' * exp C')) (at_left 0)\n  \\<forall>\\<^sub>F x in at_left 0. x < 0\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_left 0. Lambert_W' x \\<le> C", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>C' * exp C' \\<le> x; x < 0\\<rbrakk>\n       \\<Longrightarrow> Lambert_W' x \\<le> C", "case (elim x)"], ["proof (state)\nthis:\n  C' * exp C' \\<le> x\n  x < 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>C' * exp C' \\<le> x; x < 0\\<rbrakk>\n       \\<Longrightarrow> Lambert_W' x \\<le> C", "hence \"Lambert_W' x \\<le> C'\""], ["proof (prove)\nusing this:\n  C' * exp C' \\<le> x\n  x < 0\n\ngoal (1 subgoal):\n 1. Lambert_W' x \\<le> C'", "by (intro Lambert_W'_leI) auto"], ["proof (state)\nthis:\n  Lambert_W' x \\<le> C'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>C' * exp C' \\<le> x; x < 0\\<rbrakk>\n       \\<Longrightarrow> Lambert_W' x \\<le> C", "also"], ["proof (state)\nthis:\n  Lambert_W' x \\<le> C'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>C' * exp C' \\<le> x; x < 0\\<rbrakk>\n       \\<Longrightarrow> Lambert_W' x \\<le> C", "have \"\\<dots> \\<le> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C' \\<le> C", "by fact"], ["proof (state)\nthis:\n  C' \\<le> C\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>C' * exp C' \\<le> x; x < 0\\<rbrakk>\n       \\<Longrightarrow> Lambert_W' x \\<le> C", "finally"], ["proof (chain)\npicking this:\n  Lambert_W' x \\<le> C", "show ?case"], ["proof (prove)\nusing this:\n  Lambert_W' x \\<le> C\n\ngoal (1 subgoal):\n 1. Lambert_W' x \\<le> C", "."], ["proof (state)\nthis:\n  Lambert_W' x \\<le> C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_left 0. Lambert_W' x \\<le> C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma continuous_on_Lambert_W [continuous_intros]: \"continuous_on {-exp (-1)..} Lambert_W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..} Lambert_W", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..} Lambert_W", "have *: \"continuous_on {-exp (-1)..b * exp b} Lambert_W\" if \"b \\<ge> 0\" for b"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..b * exp b} Lambert_W", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..b * exp b} Lambert_W", "have \"continuous_on ((\\<lambda>x. x * exp x) ` {-1..b}) Lambert_W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on ((\\<lambda>x. x * exp x) ` {- 1..b}) Lambert_W", "by (rule continuous_on_inv) (auto intro!: continuous_intros)"], ["proof (state)\nthis:\n  continuous_on ((\\<lambda>x. x * exp x) ` {- 1..b}) Lambert_W\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..b * exp b} Lambert_W", "also"], ["proof (state)\nthis:\n  continuous_on ((\\<lambda>x. x * exp x) ` {- 1..b}) Lambert_W\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..b * exp b} Lambert_W", "have \"(\\<lambda>x. x * exp x) ` {-1..b} = {-exp (-1)..b * exp b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * exp x) ` {- 1..b} = {- exp (- 1)..b * exp b}", "using bij_betw_exp_times_self_atLeastAtMost[of \"-1\" b] \\<open>b \\<ge> 0\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>- 1 \\<le> - 1; - 1 \\<le> b\\<rbrakk>\n  \\<Longrightarrow> bij_betw (\\<lambda>x. x * exp x) {- 1..b}\n                     {- 1 * exp (- 1)..b * exp b}\n  0 \\<le> b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * exp x) ` {- 1..b} = {- exp (- 1)..b * exp b}", "by (simp add: bij_betw_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. x * exp x) ` {- 1..b} = {- exp (- 1)..b * exp b}\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..b * exp b} Lambert_W", "finally"], ["proof (chain)\npicking this:\n  continuous_on {- exp (- 1)..b * exp b} Lambert_W", "show ?thesis"], ["proof (prove)\nusing this:\n  continuous_on {- exp (- 1)..b * exp b} Lambert_W\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..b * exp b} Lambert_W", "."], ["proof (state)\nthis:\n  continuous_on {- exp (- 1)..b * exp b} Lambert_W\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 \\<le> ?b \\<Longrightarrow>\n  continuous_on {- exp (- 1)..?b * exp ?b} Lambert_W\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..} Lambert_W", "have \"continuous (at x) Lambert_W\" if \"x \\<ge> 0\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. isCont Lambert_W x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. isCont Lambert_W x", "have x: \"-exp (-1) < x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - exp (- 1) < x", "by (rule less_le_trans[OF _ that]) auto"], ["proof (state)\nthis:\n  - exp (- 1) < x\n\ngoal (1 subgoal):\n 1. isCont Lambert_W x", "define b where \"b = Lambert_W x + 1\""], ["proof (state)\nthis:\n  b = Lambert_W x + 1\n\ngoal (1 subgoal):\n 1. isCont Lambert_W x", "have \"b \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> b", "using Lambert_W_ge[of x]"], ["proof (prove)\nusing this:\n  - 1 \\<le> Lambert_W x\n\ngoal (1 subgoal):\n 1. 0 \\<le> b", "by (simp add: b_def)"], ["proof (state)\nthis:\n  0 \\<le> b\n\ngoal (1 subgoal):\n 1. isCont Lambert_W x", "have \"x = Lambert_W x * exp (Lambert_W x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = Lambert_W x * exp (Lambert_W x)", "using that x"], ["proof (prove)\nusing this:\n  0 \\<le> x\n  - exp (- 1) < x\n\ngoal (1 subgoal):\n 1. x = Lambert_W x * exp (Lambert_W x)", "by (subst Lambert_W_times_exp_self) auto"], ["proof (state)\nthis:\n  x = Lambert_W x * exp (Lambert_W x)\n\ngoal (1 subgoal):\n 1. isCont Lambert_W x", "also"], ["proof (state)\nthis:\n  x = Lambert_W x * exp (Lambert_W x)\n\ngoal (1 subgoal):\n 1. isCont Lambert_W x", "have \"\\<dots> < b * exp b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W x * exp (Lambert_W x) < b * exp b", "by (intro exp_times_self_strict_mono) (auto simp: b_def Lambert_W_ge)"], ["proof (state)\nthis:\n  Lambert_W x * exp (Lambert_W x) < b * exp b\n\ngoal (1 subgoal):\n 1. isCont Lambert_W x", "finally"], ["proof (chain)\npicking this:\n  x < b * exp b", "have \"b * exp b > x\""], ["proof (prove)\nusing this:\n  x < b * exp b\n\ngoal (1 subgoal):\n 1. x < b * exp b", "."], ["proof (state)\nthis:\n  x < b * exp b\n\ngoal (1 subgoal):\n 1. isCont Lambert_W x", "have \"continuous_on {-exp(-1)<..<b * exp b} Lambert_W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)<..<b * exp b} Lambert_W", "by (rule continuous_on_subset[OF *[of b]]) (use \\<open>b \\<ge> 0\\<close> in auto)"], ["proof (state)\nthis:\n  continuous_on {- exp (- 1)<..<b * exp b} Lambert_W\n\ngoal (1 subgoal):\n 1. isCont Lambert_W x", "moreover"], ["proof (state)\nthis:\n  continuous_on {- exp (- 1)<..<b * exp b} Lambert_W\n\ngoal (1 subgoal):\n 1. isCont Lambert_W x", "have \"x \\<in> {-exp(-1)<..<b * exp b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {- exp (- 1)<..<b * exp b}", "using \\<open>b * exp b > x\\<close> x"], ["proof (prove)\nusing this:\n  x < b * exp b\n  - exp (- 1) < x\n\ngoal (1 subgoal):\n 1. x \\<in> {- exp (- 1)<..<b * exp b}", "by (auto simp: )"], ["proof (state)\nthis:\n  x \\<in> {- exp (- 1)<..<b * exp b}\n\ngoal (1 subgoal):\n 1. isCont Lambert_W x", "ultimately"], ["proof (chain)\npicking this:\n  continuous_on {- exp (- 1)<..<b * exp b} Lambert_W\n  x \\<in> {- exp (- 1)<..<b * exp b}", "show \"continuous (at x) Lambert_W\""], ["proof (prove)\nusing this:\n  continuous_on {- exp (- 1)<..<b * exp b} Lambert_W\n  x \\<in> {- exp (- 1)<..<b * exp b}\n\ngoal (1 subgoal):\n 1. isCont Lambert_W x", "by (subst (asm) continuous_on_eq_continuous_at) auto"], ["proof (state)\nthis:\n  isCont Lambert_W x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 \\<le> ?x \\<Longrightarrow> isCont Lambert_W ?x\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..} Lambert_W", "hence \"continuous_on {0..} Lambert_W\""], ["proof (prove)\nusing this:\n  0 \\<le> ?x \\<Longrightarrow> isCont Lambert_W ?x\n\ngoal (1 subgoal):\n 1. continuous_on {0..} Lambert_W", "by (intro continuous_at_imp_continuous_on) auto"], ["proof (state)\nthis:\n  continuous_on {0..} Lambert_W\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..} Lambert_W", "moreover"], ["proof (state)\nthis:\n  continuous_on {0..} Lambert_W\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..} Lambert_W", "have \"continuous_on {-exp (-1)..0} Lambert_W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..0} Lambert_W", "using *[of 0]"], ["proof (prove)\nusing this:\n  0 \\<le> 0 \\<Longrightarrow>\n  continuous_on {- exp (- 1)..0 * exp 0} Lambert_W\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..0} Lambert_W", "by simp"], ["proof (state)\nthis:\n  continuous_on {- exp (- 1)..0} Lambert_W\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..} Lambert_W", "ultimately"], ["proof (chain)\npicking this:\n  continuous_on {0..} Lambert_W\n  continuous_on {- exp (- 1)..0} Lambert_W", "have \"continuous_on ({-exp (-1)..0} \\<union> {0..}) Lambert_W\""], ["proof (prove)\nusing this:\n  continuous_on {0..} Lambert_W\n  continuous_on {- exp (- 1)..0} Lambert_W\n\ngoal (1 subgoal):\n 1. continuous_on ({- exp (- 1)..0} \\<union> {0..}) Lambert_W", "by (intro continuous_on_closed_Un) auto"], ["proof (state)\nthis:\n  continuous_on ({- exp (- 1)..0} \\<union> {0..}) Lambert_W\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..} Lambert_W", "also"], ["proof (state)\nthis:\n  continuous_on ({- exp (- 1)..0} \\<union> {0..}) Lambert_W\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..} Lambert_W", "have \"{-exp (-1)..0} \\<union> {0..} = {-exp (-1::real)..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {- exp (- 1)..0} \\<union> {0..} = {- exp (- 1)..}", "using order.trans[of \"-exp (-1)::real\" 0]"], ["proof (prove)\nusing this:\n  \\<lbrakk>- exp (- 1) \\<le> 0; 0 \\<le> ?c\\<rbrakk>\n  \\<Longrightarrow> - exp (- 1) \\<le> ?c\n\ngoal (1 subgoal):\n 1. {- exp (- 1)..0} \\<union> {0..} = {- exp (- 1)..}", "by auto"], ["proof (state)\nthis:\n  {- exp (- 1)..0} \\<union> {0..} = {- exp (- 1)..}\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..} Lambert_W", "finally"], ["proof (chain)\npicking this:\n  continuous_on {- exp (- 1)..} Lambert_W", "show ?thesis"], ["proof (prove)\nusing this:\n  continuous_on {- exp (- 1)..} Lambert_W\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..} Lambert_W", "."], ["proof (state)\nthis:\n  continuous_on {- exp (- 1)..} Lambert_W\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma continuous_on_Lambert_W_alt [continuous_intros]:\n  assumes \"continuous_on A f\" \"\\<And>x. x \\<in> A \\<Longrightarrow> f x \\<ge> -exp (-1)\"\n  shows   \"continuous_on A (\\<lambda>x. Lambert_W (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on A (\\<lambda>x. Lambert_W (f x))", "using continuous_on_compose2[OF continuous_on_Lambert_W assms(1)] assms"], ["proof (prove)\nusing this:\n  f ` A \\<subseteq> {- exp (- 1)..} \\<Longrightarrow>\n  continuous_on A (\\<lambda>x. Lambert_W (f x))\n  continuous_on A f\n  ?x \\<in> A \\<Longrightarrow> - exp (- 1) \\<le> f ?x\n\ngoal (1 subgoal):\n 1. continuous_on A (\\<lambda>x. Lambert_W (f x))", "by auto"], ["", "lemma continuous_on_Lambert_W' [continuous_intros]: \"continuous_on {-exp (-1)..<0} Lambert_W'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..<0} Lambert_W'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..<0} Lambert_W'", "have *: \"continuous_on {-exp (-1)..-b * exp (-b)} Lambert_W'\" if \"b \\<ge> 1\" for b"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..- b * exp (- b)} Lambert_W'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..- b * exp (- b)} Lambert_W'", "have \"continuous_on ((\\<lambda>x. x * exp x) ` {-b..-1}) Lambert_W'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on ((\\<lambda>x. x * exp x) ` {- b..- 1}) Lambert_W'", "by (intro continuous_on_inv ballI) (auto intro!: continuous_intros)"], ["proof (state)\nthis:\n  continuous_on ((\\<lambda>x. x * exp x) ` {- b..- 1}) Lambert_W'\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..- b * exp (- b)} Lambert_W'", "also"], ["proof (state)\nthis:\n  continuous_on ((\\<lambda>x. x * exp x) ` {- b..- 1}) Lambert_W'\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..- b * exp (- b)} Lambert_W'", "have \"(\\<lambda>x. x * exp x) ` {-b..-1} = {-exp (-1)..-b * exp (-b)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * exp x) ` {- b..- 1} = {- exp (- 1)..- b * exp (- b)}", "using bij_betw_exp_times_self_atLeastAtMost'[of \"-b\" \"-1\"] that"], ["proof (prove)\nusing this:\n  \\<lbrakk>- b \\<le> - 1; - 1 \\<le> - 1\\<rbrakk>\n  \\<Longrightarrow> bij_betw (\\<lambda>x. x * exp x) {- b..- 1}\n                     {- 1 * exp (- 1)..- b * exp (- b)}\n  1 \\<le> b\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * exp x) ` {- b..- 1} = {- exp (- 1)..- b * exp (- b)}", "by (simp add: bij_betw_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. x * exp x) ` {- b..- 1} = {- exp (- 1)..- b * exp (- b)}\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..- b * exp (- b)} Lambert_W'", "finally"], ["proof (chain)\npicking this:\n  continuous_on {- exp (- 1)..- b * exp (- b)} Lambert_W'", "show ?thesis"], ["proof (prove)\nusing this:\n  continuous_on {- exp (- 1)..- b * exp (- b)} Lambert_W'\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..- b * exp (- b)} Lambert_W'", "."], ["proof (state)\nthis:\n  continuous_on {- exp (- 1)..- b * exp (- b)} Lambert_W'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 \\<le> ?b \\<Longrightarrow>\n  continuous_on {- exp (- 1)..- ?b * exp (- ?b)} Lambert_W'\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..<0} Lambert_W'", "have \"continuous (at x) Lambert_W'\" if \"x > -exp (-1)\" \"x < 0\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. isCont Lambert_W' x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. isCont Lambert_W' x", "define b where \"b = Lambert_W x + 1\""], ["proof (state)\nthis:\n  b = Lambert_W x + 1\n\ngoal (1 subgoal):\n 1. isCont Lambert_W' x", "have \"eventually (\\<lambda>b. -b * exp (-b) > x) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F b in at_top. x < - b * exp (- b)", "using that"], ["proof (prove)\nusing this:\n  - exp (- 1) < x\n  x < 0\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F b in at_top. x < - b * exp (- b)", "by real_asymp"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F b in at_top. x < - b * exp (- b)\n\ngoal (1 subgoal):\n 1. isCont Lambert_W' x", "hence \"eventually (\\<lambda>b. b \\<ge> 1 \\<and> -b * exp (-b) > x) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F b in at_top. x < - b * exp (- b)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F b in at_top. 1 \\<le> b \\<and> x < - b * exp (- b)", "by (intro eventually_conj eventually_ge_at_top)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F b in at_top. 1 \\<le> b \\<and> x < - b * exp (- b)\n\ngoal (1 subgoal):\n 1. isCont Lambert_W' x", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F b in at_top. 1 \\<le> b \\<and> x < - b * exp (- b)", "obtain b where b: \"b \\<ge> 1\" \"-b * exp (-b) > x\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F b in at_top. 1 \\<le> b \\<and> x < - b * exp (- b)\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>1 \\<le> b; x < - b * exp (- b)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: eventually_at_top_linorder)"], ["proof (state)\nthis:\n  1 \\<le> b\n  x < - b * exp (- b)\n\ngoal (1 subgoal):\n 1. isCont Lambert_W' x", "have \"continuous_on {-exp(-1)<..<-b * exp (-b)} Lambert_W'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)<..<- b * exp (- b)} Lambert_W'", "by (rule continuous_on_subset[OF *[of b]]) (use \\<open>b \\<ge> 1\\<close> in auto)"], ["proof (state)\nthis:\n  continuous_on {- exp (- 1)<..<- b * exp (- b)} Lambert_W'\n\ngoal (1 subgoal):\n 1. isCont Lambert_W' x", "moreover"], ["proof (state)\nthis:\n  continuous_on {- exp (- 1)<..<- b * exp (- b)} Lambert_W'\n\ngoal (1 subgoal):\n 1. isCont Lambert_W' x", "have \"x \\<in> {-exp(-1)<..<-b * exp (-b)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {- exp (- 1)<..<- b * exp (- b)}", "using b that"], ["proof (prove)\nusing this:\n  1 \\<le> b\n  x < - b * exp (- b)\n  - exp (- 1) < x\n  x < 0\n\ngoal (1 subgoal):\n 1. x \\<in> {- exp (- 1)<..<- b * exp (- b)}", "by auto"], ["proof (state)\nthis:\n  x \\<in> {- exp (- 1)<..<- b * exp (- b)}\n\ngoal (1 subgoal):\n 1. isCont Lambert_W' x", "ultimately"], ["proof (chain)\npicking this:\n  continuous_on {- exp (- 1)<..<- b * exp (- b)} Lambert_W'\n  x \\<in> {- exp (- 1)<..<- b * exp (- b)}", "show \"continuous (at x) Lambert_W'\""], ["proof (prove)\nusing this:\n  continuous_on {- exp (- 1)<..<- b * exp (- b)} Lambert_W'\n  x \\<in> {- exp (- 1)<..<- b * exp (- b)}\n\ngoal (1 subgoal):\n 1. isCont Lambert_W' x", "by (subst (asm) continuous_on_eq_continuous_at) auto"], ["proof (state)\nthis:\n  isCont Lambert_W' x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>- exp (- 1) < ?x; ?x < 0\\<rbrakk>\n  \\<Longrightarrow> isCont Lambert_W' ?x\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..<0} Lambert_W'", "hence **: \"continuous_on {-exp (-1)<..<0} Lambert_W'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>- exp (- 1) < ?x; ?x < 0\\<rbrakk>\n  \\<Longrightarrow> isCont Lambert_W' ?x\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)<..<0} Lambert_W'", "by (intro continuous_at_imp_continuous_on) auto"], ["proof (state)\nthis:\n  continuous_on {- exp (- 1)<..<0} Lambert_W'\n\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..<0} Lambert_W'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..<0} Lambert_W'", "unfolding continuous_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{- exp (- 1)..<0}.\n       (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n        (at x within {- exp (- 1)..<0})", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {- exp (- 1)..<0} \\<Longrightarrow>\n       (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n        (at x within {- exp (- 1)..<0})", "fix x :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {- exp (- 1)..<0} \\<Longrightarrow>\n       (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n        (at x within {- exp (- 1)..<0})", "assume x: \"x \\<in> {-exp(-1)..<0}\""], ["proof (state)\nthis:\n  x \\<in> {- exp (- 1)..<0}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {- exp (- 1)..<0} \\<Longrightarrow>\n       (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n        (at x within {- exp (- 1)..<0})", "show \"(Lambert_W' \\<longlongrightarrow> Lambert_W' x) (at x within {-exp(-1)..<0})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "proof (cases \"x = -exp(-1)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})\n 2. x \\<noteq> - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "case False"], ["proof (state)\nthis:\n  x \\<noteq> - exp (- 1)\n\ngoal (2 subgoals):\n 1. x = - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})\n 2. x \\<noteq> - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "hence \"isCont Lambert_W' x\""], ["proof (prove)\nusing this:\n  x \\<noteq> - exp (- 1)\n\ngoal (1 subgoal):\n 1. isCont Lambert_W' x", "using x **"], ["proof (prove)\nusing this:\n  x \\<noteq> - exp (- 1)\n  x \\<in> {- exp (- 1)..<0}\n  continuous_on {- exp (- 1)<..<0} Lambert_W'\n\ngoal (1 subgoal):\n 1. isCont Lambert_W' x", "by (auto simp: continuous_on_eq_continuous_at)"], ["proof (state)\nthis:\n  isCont Lambert_W' x\n\ngoal (2 subgoals):\n 1. x = - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})\n 2. x \\<noteq> - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "thus ?thesis"], ["proof (prove)\nusing this:\n  isCont Lambert_W' x\n\ngoal (1 subgoal):\n 1. (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "using continuous_at filterlim_within_subset"], ["proof (prove)\nusing this:\n  isCont Lambert_W' x\n  isCont ?f ?x = ?f \\<midarrow>?x\\<rightarrow> ?f ?x\n  \\<lbrakk>filterlim ?f ?l (at ?x within ?S); ?T \\<subseteq> ?S\\<rbrakk>\n  \\<Longrightarrow> filterlim ?f ?l (at ?x within ?T)\n\ngoal (1 subgoal):\n 1. (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "by blast"], ["proof (state)\nthis:\n  (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n   (at x within {- exp (- 1)..<0})\n\ngoal (1 subgoal):\n 1. x = - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x = - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "case True"], ["proof (state)\nthis:\n  x = - exp (- 1)\n\ngoal (1 subgoal):\n 1. x = - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "define a :: real where \"a = -2 * exp (-2)\""], ["proof (state)\nthis:\n  a = - 2 * exp (- 2)\n\ngoal (1 subgoal):\n 1. x = - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "have a: \"a > -exp (-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - exp (- 1) < a", "using exp_times_self_strict_antimono[of \"-1\" \"-2\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>- 1 \\<le> - 1; - 2 < - 1\\<rbrakk>\n  \\<Longrightarrow> - 1 * exp (- 1) < - 2 * exp (- 2)\n\ngoal (1 subgoal):\n 1. - exp (- 1) < a", "by (auto simp: a_def)"], ["proof (state)\nthis:\n  - exp (- 1) < a\n\ngoal (1 subgoal):\n 1. x = - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "from True"], ["proof (chain)\npicking this:\n  x = - exp (- 1)", "have \"x \\<in> {-exp (-1)..<a}\""], ["proof (prove)\nusing this:\n  x = - exp (- 1)\n\ngoal (1 subgoal):\n 1. x \\<in> {- exp (- 1)..<a}", "using a"], ["proof (prove)\nusing this:\n  x = - exp (- 1)\n  - exp (- 1) < a\n\ngoal (1 subgoal):\n 1. x \\<in> {- exp (- 1)..<a}", "by (auto simp: a_def)"], ["proof (state)\nthis:\n  x \\<in> {- exp (- 1)..<a}\n\ngoal (1 subgoal):\n 1. x = - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "have \"continuous_on {-exp (-1)..<a} Lambert_W'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..<a} Lambert_W'", "unfolding a_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {- exp (- 1)..<- 2 * exp (- 2)} Lambert_W'", "by (rule continuous_on_subset[OF *[of 2]]) auto"], ["proof (state)\nthis:\n  continuous_on {- exp (- 1)..<a} Lambert_W'\n\ngoal (1 subgoal):\n 1. x = - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "hence \"(Lambert_W' \\<longlongrightarrow> Lambert_W' x) (at x within {-exp (-1)..<a})\""], ["proof (prove)\nusing this:\n  continuous_on {- exp (- 1)..<a} Lambert_W'\n\ngoal (1 subgoal):\n 1. (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<a})", "using \\<open>x \\<in> {-exp (-1)..<a}\\<close>"], ["proof (prove)\nusing this:\n  continuous_on {- exp (- 1)..<a} Lambert_W'\n  x \\<in> {- exp (- 1)..<a}\n\ngoal (1 subgoal):\n 1. (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<a})", "by (auto simp: continuous_on_def)"], ["proof (state)\nthis:\n  (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n   (at x within {- exp (- 1)..<a})\n\ngoal (1 subgoal):\n 1. x = - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "also"], ["proof (state)\nthis:\n  (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n   (at x within {- exp (- 1)..<a})\n\ngoal (1 subgoal):\n 1. x = - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "have \"at x within {-exp (-1)..<a} = at_right x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. at x within {- exp (- 1)..<a} = at_right x", "using a"], ["proof (prove)\nusing this:\n  - exp (- 1) < a\n\ngoal (1 subgoal):\n 1. at x within {- exp (- 1)..<a} = at_right x", "by (intro at_within_nhd[of _ \"{..<a}\"]) (auto simp: True)"], ["proof (state)\nthis:\n  at x within {- exp (- 1)..<a} = at_right x\n\ngoal (1 subgoal):\n 1. x = - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "also"], ["proof (state)\nthis:\n  at x within {- exp (- 1)..<a} = at_right x\n\ngoal (1 subgoal):\n 1. x = - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "have \"\\<dots> = at x within {-exp (-1)..<0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. at_right x = at x within {- exp (- 1)..<0}", "using a"], ["proof (prove)\nusing this:\n  - exp (- 1) < a\n\ngoal (1 subgoal):\n 1. at_right x = at x within {- exp (- 1)..<0}", "by (intro at_within_nhd[of _ \"{..<0}\"]) (auto simp: True)"], ["proof (state)\nthis:\n  at_right x = at x within {- exp (- 1)..<0}\n\ngoal (1 subgoal):\n 1. x = - exp (- 1) \\<Longrightarrow>\n    (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "finally"], ["proof (chain)\npicking this:\n  (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n   (at x within {- exp (- 1)..<0})", "show ?thesis"], ["proof (prove)\nusing this:\n  (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n   (at x within {- exp (- 1)..<0})\n\ngoal (1 subgoal):\n 1. (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n     (at x within {- exp (- 1)..<0})", "."], ["proof (state)\nthis:\n  (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n   (at x within {- exp (- 1)..<0})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (Lambert_W' \\<longlongrightarrow> Lambert_W' x)\n   (at x within {- exp (- 1)..<0})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  continuous_on {- exp (- 1)..<0} Lambert_W'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma continuous_on_Lambert_W'_alt [continuous_intros]:\n  assumes \"continuous_on A f\" \"\\<And>x. x \\<in> A \\<Longrightarrow> f x \\<in> {-exp (-1)..<0}\"\n  shows   \"continuous_on A (\\<lambda>x. Lambert_W' (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on A (\\<lambda>x. Lambert_W' (f x))", "using continuous_on_compose2[OF continuous_on_Lambert_W' assms(1)] assms"], ["proof (prove)\nusing this:\n  f ` A \\<subseteq> {- exp (- 1)..<0} \\<Longrightarrow>\n  continuous_on A (\\<lambda>x. Lambert_W' (f x))\n  continuous_on A f\n  ?x \\<in> A \\<Longrightarrow> f ?x \\<in> {- exp (- 1)..<0}\n\ngoal (1 subgoal):\n 1. continuous_on A (\\<lambda>x. Lambert_W' (f x))", "by (auto simp: subset_iff)"], ["", "lemma tendsto_Lambert_W_1:\n  assumes \"(f \\<longlongrightarrow> L) F\" \"eventually (\\<lambda>x. f x \\<ge> -exp (-1)) F\"\n  shows   \"((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F", "proof (cases \"F = bot\")"], ["proof (state)\ngoal (2 subgoals):\n 1. F = bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F\n 2. F \\<noteq> bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F", "case [simp]: False"], ["proof (state)\nthis:\n  F \\<noteq> bot\n\ngoal (2 subgoals):\n 1. F = bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F\n 2. F \\<noteq> bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F", "from tendsto_lowerbound[OF assms]"], ["proof (chain)\npicking this:\n  F \\<noteq> bot \\<Longrightarrow> - exp (- 1) \\<le> L", "have \"L \\<ge> -exp (-1)\""], ["proof (prove)\nusing this:\n  F \\<noteq> bot \\<Longrightarrow> - exp (- 1) \\<le> L\n\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> L", "by simp"], ["proof (state)\nthis:\n  - exp (- 1) \\<le> L\n\ngoal (2 subgoals):\n 1. F = bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F\n 2. F \\<noteq> bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F", "thus ?thesis"], ["proof (prove)\nusing this:\n  - exp (- 1) \\<le> L\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F", "using continuous_on_tendsto_compose[OF continuous_on_Lambert_W assms(1)] assms(2)"], ["proof (prove)\nusing this:\n  - exp (- 1) \\<le> L\n  \\<lbrakk>L \\<in> {- exp (- 1)..};\n   \\<forall>\\<^sub>F x in F. f x \\<in> {- exp (- 1)..}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow>\n                     Lambert_W L)\n                     F\n  \\<forall>\\<^sub>F x in F. - exp (- 1) \\<le> f x\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F", "by simp"], ["proof (state)\nthis:\n  ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F\n\ngoal (1 subgoal):\n 1. F = bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F", "qed auto"], ["", "lemma tendsto_Lambert_W_2:\n  assumes \"(f \\<longlongrightarrow> L) F\" \"L > -exp (-1)\"\n  shows   \"((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F", "using order_tendstoD(1)[OF assms] assms"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. - exp (- 1) < f x\n  (f \\<longlongrightarrow> L) F\n  - exp (- 1) < L\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F", "by (intro tendsto_Lambert_W_1) (auto elim: eventually_mono)"], ["", "lemma tendsto_Lambert_W [tendsto_intros]:\n  assumes \"(f \\<longlongrightarrow> L) F\" \"eventually (\\<lambda>x. f x \\<ge> -exp (-1)) F \\<or> L > -exp (-1)\"\n  shows   \"((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F", "using assms(2)"], ["proof (prove)\nusing this:\n  (\\<forall>\\<^sub>F x in F. - exp (- 1) \\<le> f x) \\<or> - exp (- 1) < L\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F x in F. - exp (- 1) \\<le> f x \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F\n 2. - exp (- 1) < L \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F", "assume \"L > -exp (-1)\""], ["proof (state)\nthis:\n  - exp (- 1) < L\n\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F x in F. - exp (- 1) \\<le> f x \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F\n 2. - exp (- 1) < L \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F", "from order_tendstoD(1)[OF assms(1) this] assms(1)"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in F. - exp (- 1) < f x\n  (f \\<longlongrightarrow> L) F", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. - exp (- 1) < f x\n  (f \\<longlongrightarrow> L) F\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F", "by (intro tendsto_Lambert_W_1) (auto elim: eventually_mono)"], ["proof (state)\nthis:\n  ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. - exp (- 1) \\<le> f x \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow> Lambert_W L) F", "qed (use tendsto_Lambert_W_1[OF assms(1)] in auto)"], ["", "lemma tendsto_Lambert_W'_1:\n  assumes \"(f \\<longlongrightarrow> L) F\" \"eventually (\\<lambda>x. f x \\<ge> -exp (-1)) F\" \"L < 0\"\n  shows   \"((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "proof (cases \"F = bot\")"], ["proof (state)\ngoal (2 subgoals):\n 1. F = bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F\n 2. F \\<noteq> bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "case [simp]: False"], ["proof (state)\nthis:\n  F \\<noteq> bot\n\ngoal (2 subgoals):\n 1. F = bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F\n 2. F \\<noteq> bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "from tendsto_lowerbound[OF assms(1,2)]"], ["proof (chain)\npicking this:\n  F \\<noteq> bot \\<Longrightarrow> - exp (- 1) \\<le> L", "have L_ge: \"L \\<ge> -exp (-1)\""], ["proof (prove)\nusing this:\n  F \\<noteq> bot \\<Longrightarrow> - exp (- 1) \\<le> L\n\ngoal (1 subgoal):\n 1. - exp (- 1) \\<le> L", "by simp"], ["proof (state)\nthis:\n  - exp (- 1) \\<le> L\n\ngoal (2 subgoals):\n 1. F = bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F\n 2. F \\<noteq> bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "from order_tendstoD(2)[OF assms(1,3)]"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in F. f x < 0", "have ev: \"eventually (\\<lambda>x. f x < 0) F\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. f x < 0\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. f x < 0", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. f x < 0\n\ngoal (2 subgoals):\n 1. F = bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F\n 2. F \\<noteq> bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "with assms(2)"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in F. - exp (- 1) \\<le> f x\n  \\<forall>\\<^sub>F x in F. f x < 0", "have \"eventually (\\<lambda>x. f x \\<in> {-exp (-1)..<0}) F\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. - exp (- 1) \\<le> f x\n  \\<forall>\\<^sub>F x in F. f x < 0\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. f x \\<in> {- exp (- 1)..<0}", "by eventually_elim auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. f x \\<in> {- exp (- 1)..<0}\n\ngoal (2 subgoals):\n 1. F = bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F\n 2. F \\<noteq> bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. f x \\<in> {- exp (- 1)..<0}\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "using L_ge assms(3)"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. f x \\<in> {- exp (- 1)..<0}\n  - exp (- 1) \\<le> L\n  L < 0\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "by (intro continuous_on_tendsto_compose[OF continuous_on_Lambert_W' assms(1)]) auto"], ["proof (state)\nthis:\n  ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F\n\ngoal (1 subgoal):\n 1. F = bot \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "qed auto"], ["", "lemma tendsto_Lambert_W'_2:\n  assumes \"(f \\<longlongrightarrow> L) F\" \"L > -exp (-1)\" \"L < 0\"\n  shows   \"((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "using order_tendstoD(1)[OF assms(1,2)] assms"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. - exp (- 1) < f x\n  (f \\<longlongrightarrow> L) F\n  - exp (- 1) < L\n  L < 0\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "by (intro tendsto_Lambert_W'_1) (auto elim: eventually_mono)"], ["", "lemma tendsto_Lambert_W' [tendsto_intros]:\n  assumes \"(f \\<longlongrightarrow> L) F\" \"eventually (\\<lambda>x. f x \\<ge> -exp (-1)) F \\<or> L > -exp (-1)\" \"L < 0\"\n  shows   \"((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "using assms(2)"], ["proof (prove)\nusing this:\n  (\\<forall>\\<^sub>F x in F. - exp (- 1) \\<le> f x) \\<or> - exp (- 1) < L\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F x in F. - exp (- 1) \\<le> f x \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F\n 2. - exp (- 1) < L \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "assume \"L > -exp (-1)\""], ["proof (state)\nthis:\n  - exp (- 1) < L\n\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F x in F. - exp (- 1) \\<le> f x \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F\n 2. - exp (- 1) < L \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "from order_tendstoD(1)[OF assms(1) this] assms(1,3)"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in F. - exp (- 1) < f x\n  (f \\<longlongrightarrow> L) F\n  L < 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. - exp (- 1) < f x\n  (f \\<longlongrightarrow> L) F\n  L < 0\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "by (intro tendsto_Lambert_W'_1) (auto elim: eventually_mono)"], ["proof (state)\nthis:\n  ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. - exp (- 1) \\<le> f x \\<Longrightarrow>\n    ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow> Lambert_W' L) F", "qed (use tendsto_Lambert_W'_1[OF assms(1) _ assms(3)] in auto)"], ["", "lemma continuous_Lambert_W [continuous_intros]:\n  assumes \"continuous F f\" \"f (Lim F (\\<lambda>x. x)) > -exp (-1) \\<or> eventually (\\<lambda>x. f x \\<ge> -exp (-1)) F\"\n  shows   \"continuous F (\\<lambda>x. Lambert_W (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous F (\\<lambda>x. Lambert_W (f x))", "using assms"], ["proof (prove)\nusing this:\n  continuous F f\n  - exp (- 1) < f (Lim F (\\<lambda>x. x)) \\<or>\n  (\\<forall>\\<^sub>F x in F. - exp (- 1) \\<le> f x)\n\ngoal (1 subgoal):\n 1. continuous F (\\<lambda>x. Lambert_W (f x))", "unfolding continuous_def"], ["proof (prove)\nusing this:\n  (f \\<longlongrightarrow> f (Lim F (\\<lambda>x. x))) F\n  - exp (- 1) < f (Lim F (\\<lambda>x. x)) \\<or>\n  (\\<forall>\\<^sub>F x in F. - exp (- 1) \\<le> f x)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W (f x)) \\<longlongrightarrow>\n     Lambert_W (f (Lim F (\\<lambda>x. x))))\n     F", "by (intro tendsto_Lambert_W) auto"], ["", "lemma continuous_Lambert_W' [continuous_intros]:\n  assumes \"continuous F f\" \"f (Lim F (\\<lambda>x. x)) > -exp (-1) \\<or> eventually (\\<lambda>x. f x \\<ge> -exp (-1)) F\"\n          \"f (Lim F (\\<lambda>x. x)) < 0\"\n  shows   \"continuous F (\\<lambda>x. Lambert_W' (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous F (\\<lambda>x. Lambert_W' (f x))", "using assms"], ["proof (prove)\nusing this:\n  continuous F f\n  - exp (- 1) < f (Lim F (\\<lambda>x. x)) \\<or>\n  (\\<forall>\\<^sub>F x in F. - exp (- 1) \\<le> f x)\n  f (Lim F (\\<lambda>x. x)) < 0\n\ngoal (1 subgoal):\n 1. continuous F (\\<lambda>x. Lambert_W' (f x))", "unfolding continuous_def"], ["proof (prove)\nusing this:\n  (f \\<longlongrightarrow> f (Lim F (\\<lambda>x. x))) F\n  - exp (- 1) < f (Lim F (\\<lambda>x. x)) \\<or>\n  (\\<forall>\\<^sub>F x in F. - exp (- 1) \\<le> f x)\n  f (Lim F (\\<lambda>x. x)) < 0\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W' (f x)) \\<longlongrightarrow>\n     Lambert_W' (f (Lim F (\\<lambda>x. x))))\n     F", "by (intro tendsto_Lambert_W') auto"], ["", "lemma has_field_derivative_Lambert_W [derivative_intros]:\n  assumes x: \"x > -exp (-1)\"\n  shows   \"(Lambert_W has_real_derivative inverse (x + exp (Lambert_W x))) (at x within A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Lambert_W has_real_derivative inverse (x + exp (Lambert_W x)))\n     (at x within A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (Lambert_W has_real_derivative inverse (x + exp (Lambert_W x)))\n     (at x within A)", "write Lambert_W (\"W\")"], ["proof (state)\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "from x"], ["proof (chain)\npicking this:\n  - exp (- 1) < x", "have \"W x > W (-exp (-1))\""], ["proof (prove)\nusing this:\n  - exp (- 1) < x\n\ngoal (1 subgoal):\n 1. W (- exp (- 1)) < W x", "by (subst Lambert_W_less_iff) auto"], ["proof (state)\nthis:\n  W (- exp (- 1)) < W x\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "hence \"W x > -1\""], ["proof (prove)\nusing this:\n  W (- exp (- 1)) < W x\n\ngoal (1 subgoal):\n 1. - 1 < W x", "by simp"], ["proof (state)\nthis:\n  - 1 < W x\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "note [derivative_intros] = DERIV_inverse_function[where g = Lambert_W]"], ["proof (state)\nthis:\n  \\<lbrakk>(?f has_real_derivative ?D) (at (W ?x)); ?D \\<noteq> 0; ?a < ?x;\n   ?x < ?b;\n   \\<And>y. \\<lbrakk>?a < y; y < ?b\\<rbrakk> \\<Longrightarrow> ?f (W y) = y;\n   isCont W ?x\\<rbrakk>\n  \\<Longrightarrow> (W has_real_derivative inverse ?D) (at ?x)\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "have \"((\\<lambda>x. x * exp x) has_real_derivative (1 + W x) * exp (W x)) (at (W x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. x * exp x) has_real_derivative (1 + W x) * exp (W x))\n     (at (W x))", "by (auto intro!: derivative_eq_intros simp: algebra_simps)"], ["proof (state)\nthis:\n  ((\\<lambda>x. x * exp x) has_real_derivative (1 + W x) * exp (W x))\n   (at (W x))\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "hence \"(W has_real_derivative inverse ((1 + W x) * exp (W x))) (at x)\""], ["proof (prove)\nusing this:\n  ((\\<lambda>x. x * exp x) has_real_derivative (1 + W x) * exp (W x))\n   (at (W x))\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse ((1 + W x) * exp (W x))) (at x)", "by (rule DERIV_inverse_function[where a = \"-exp (-1)\" and b = \"x + 1\"])\n       (use x \\<open>W x > -1\\<close> in \\<open>auto simp: Lambert_W_times_exp_self Lim_ident_at\n                                  intro!: continuous_intros\\<close>)"], ["proof (state)\nthis:\n  (W has_real_derivative inverse ((1 + W x) * exp (W x))) (at x)\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "also"], ["proof (state)\nthis:\n  (W has_real_derivative inverse ((1 + W x) * exp (W x))) (at x)\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "have \"(1 + W x) * exp (W x) = x + exp (W x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 + W x) * exp (W x) = x + exp (W x)", "using x"], ["proof (prove)\nusing this:\n  - exp (- 1) < x\n\ngoal (1 subgoal):\n 1. (1 + W x) * exp (W x) = x + exp (W x)", "by (simp add: algebra_simps Lambert_W_times_exp_self)"], ["proof (state)\nthis:\n  (1 + W x) * exp (W x) = x + exp (W x)\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "finally"], ["proof (chain)\npicking this:\n  (W has_real_derivative inverse (x + exp (W x))) (at x)", "show ?thesis"], ["proof (prove)\nusing this:\n  (W has_real_derivative inverse (x + exp (W x))) (at x)\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "by (rule has_field_derivative_at_within)"], ["proof (state)\nthis:\n  (W has_real_derivative inverse (x + exp (W x))) (at x within A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma has_field_derivative_Lambert_W_gen [derivative_intros]:\n  assumes \"(f has_real_derivative f') (at x within A)\" \"f x > -exp (-1)\"\n  shows   \"((\\<lambda>x. Lambert_W (f x)) has_real_derivative\n             (f' / (f x + exp (Lambert_W (f x))))) (at x within A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W (f x)) has_real_derivative\n     f' / (f x + exp (Lambert_W (f x))))\n     (at x within A)", "using DERIV_chain2[OF has_field_derivative_Lambert_W[OF assms(2)] assms(1)]"], ["proof (prove)\nusing this:\n  ((\\<lambda>x. Lambert_W (f x)) has_real_derivative\n   inverse (f x + exp (Lambert_W (f x))) * f')\n   (at x within A)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W (f x)) has_real_derivative\n     f' / (f x + exp (Lambert_W (f x))))\n     (at x within A)", "by (simp add: field_simps)"], ["", "lemma has_field_derivative_Lambert_W' [derivative_intros]:\n  assumes x: \"x \\<in> {-exp (-1)<..<0}\"\n  shows   \"(Lambert_W' has_real_derivative inverse (x + exp (Lambert_W' x))) (at x within A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Lambert_W' has_real_derivative inverse (x + exp (Lambert_W' x)))\n     (at x within A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (Lambert_W' has_real_derivative inverse (x + exp (Lambert_W' x)))\n     (at x within A)", "write Lambert_W' (\"W\")"], ["proof (state)\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "from x"], ["proof (chain)\npicking this:\n  x \\<in> {- exp (- 1)<..<0}", "have \"W x < W (-exp (-1))\""], ["proof (prove)\nusing this:\n  x \\<in> {- exp (- 1)<..<0}\n\ngoal (1 subgoal):\n 1. W x < W (- exp (- 1))", "by (subst Lambert_W'_less_iff) auto"], ["proof (state)\nthis:\n  W x < W (- exp (- 1))\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "hence \"W x < -1\""], ["proof (prove)\nusing this:\n  W x < W (- exp (- 1))\n\ngoal (1 subgoal):\n 1. W x < - 1", "by simp"], ["proof (state)\nthis:\n  W x < - 1\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "note [derivative_intros] = DERIV_inverse_function[where g = Lambert_W]"], ["proof (state)\nthis:\n  \\<lbrakk>(?f has_real_derivative ?D) (at (Lambert_W ?x)); ?D \\<noteq> 0;\n   ?a < ?x; ?x < ?b;\n   \\<And>y.\n      \\<lbrakk>?a < y; y < ?b\\<rbrakk>\n      \\<Longrightarrow> ?f (Lambert_W y) = y;\n   isCont Lambert_W ?x\\<rbrakk>\n  \\<Longrightarrow> (Lambert_W has_real_derivative inverse ?D) (at ?x)\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "have \"((\\<lambda>x. x * exp x) has_real_derivative (1 + W x) * exp (W x)) (at (W x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. x * exp x) has_real_derivative (1 + W x) * exp (W x))\n     (at (W x))", "by (auto intro!: derivative_eq_intros simp: algebra_simps)"], ["proof (state)\nthis:\n  ((\\<lambda>x. x * exp x) has_real_derivative (1 + W x) * exp (W x))\n   (at (W x))\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "hence \"(W has_real_derivative inverse ((1 + W x) * exp (W x))) (at x)\""], ["proof (prove)\nusing this:\n  ((\\<lambda>x. x * exp x) has_real_derivative (1 + W x) * exp (W x))\n   (at (W x))\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse ((1 + W x) * exp (W x))) (at x)", "by (rule DERIV_inverse_function[where a = \"-exp (-1)\" and b = \"0\"])\n       (use x \\<open>W x < -1\\<close> in \\<open>auto simp: Lambert_W'_times_exp_self Lim_ident_at\n                                        intro!: continuous_intros\\<close>)"], ["proof (state)\nthis:\n  (W has_real_derivative inverse ((1 + W x) * exp (W x))) (at x)\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "also"], ["proof (state)\nthis:\n  (W has_real_derivative inverse ((1 + W x) * exp (W x))) (at x)\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "have \"(1 + W x) * exp (W x) = x + exp (W x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 + W x) * exp (W x) = x + exp (W x)", "using x"], ["proof (prove)\nusing this:\n  x \\<in> {- exp (- 1)<..<0}\n\ngoal (1 subgoal):\n 1. (1 + W x) * exp (W x) = x + exp (W x)", "by (simp add: algebra_simps Lambert_W'_times_exp_self)"], ["proof (state)\nthis:\n  (1 + W x) * exp (W x) = x + exp (W x)\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "finally"], ["proof (chain)\npicking this:\n  (W has_real_derivative inverse (x + exp (W x))) (at x)", "show ?thesis"], ["proof (prove)\nusing this:\n  (W has_real_derivative inverse (x + exp (W x))) (at x)\n\ngoal (1 subgoal):\n 1. (W has_real_derivative inverse (x + exp (W x))) (at x within A)", "by (rule has_field_derivative_at_within)"], ["proof (state)\nthis:\n  (W has_real_derivative inverse (x + exp (W x))) (at x within A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma has_field_derivative_Lambert_W'_gen [derivative_intros]:\n  assumes \"(f has_real_derivative f') (at x within A)\" \"f x \\<in> {-exp (-1)<..<0}\"\n  shows   \"((\\<lambda>x. Lambert_W' (f x)) has_real_derivative\n             (f' / (f x + exp (Lambert_W' (f x))))) (at x within A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W' (f x)) has_real_derivative\n     f' / (f x + exp (Lambert_W' (f x))))\n     (at x within A)", "using DERIV_chain2[OF has_field_derivative_Lambert_W'[OF assms(2)] assms(1)]"], ["proof (prove)\nusing this:\n  ((\\<lambda>x. Lambert_W' (f x)) has_real_derivative\n   inverse (f x + exp (Lambert_W' (f x))) * f')\n   (at x within A)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. Lambert_W' (f x)) has_real_derivative\n     f' / (f x + exp (Lambert_W' (f x))))\n     (at x within A)", "by (simp add: field_simps)"], ["", "subsection \\<open>Asymptotic expansion\\<close>"], ["", "text \\<open>\n  Lastly, we prove some more detailed asymptotic expansions of $W$ and $W'$ at their\n  singularities. First, we show that:\n  \\begin{align*}\n    W(x) &= \\log x - \\log\\log x + o(\\log\\log x) &&\\text{for}\\ x\\to\\infty\\\\\n    W'(x) &= \\log (-x) - \\log (-\\log (-x)) + o(\\log (-\\log (-x))) &&\\text{for}\\ x\\to 0^{-}\n  \\end{align*}\n\\<close>"], ["", "theorem Lambert_W_asymp_equiv_at_top:\n  \"(\\<lambda>x. Lambert_W x - ln x) \\<sim>[at_top] (\\<lambda>x. -ln (ln x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W x - ln x) \\<sim>[at_top] (\\<lambda>x. - ln (ln x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W x - ln x) \\<sim>[at_top] (\\<lambda>x. - ln (ln x))", "have \"(\\<lambda>x. Lambert_W x - ln x) \\<sim>[at_top] (\\<lambda>x. (-1) * ln (ln x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W x - ln x) \\<sim>[at_top] (\\<lambda>x. - 1 * ln (ln x))", "proof (rule asymp_equiv_sandwich')"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 1} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          c' * ln (ln x) \\<le> Lambert_W x - ln x\n 2. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x \\<le> c' * ln (ln x)\n 3. ?l < - 1\n 4. - 1 < ?u\n 5. - 1 \\<noteq> 0", "fix c' :: real"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 1} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          c' * ln (ln x) \\<le> Lambert_W x - ln x\n 2. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x \\<le> c' * ln (ln x)\n 3. ?l < - 1\n 4. - 1 < ?u\n 5. - 1 \\<noteq> 0", "assume c': \"c' \\<in> {-2<..<-1}\""], ["proof (state)\nthis:\n  c' \\<in> {- 2<..<- 1}\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 1} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          c' * ln (ln x) \\<le> Lambert_W x - ln x\n 2. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x \\<le> c' * ln (ln x)\n 3. ?l < - 1\n 4. - 1 < ?u\n 5. - 1 \\<noteq> 0", "have \"eventually (\\<lambda>x. (ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x)) \\<le> x) at_top\"\n         \"eventually (\\<lambda>x. ln x + c' * ln (ln x) \\<ge> -1) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       (ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x)) \\<le> x &&&\n    \\<forall>\\<^sub>F x in at_top. - 1 \\<le> ln x + c' * ln (ln x)", "using c'"], ["proof (prove)\nusing this:\n  c' \\<in> {- 2<..<- 1}\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       (ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x)) \\<le> x &&&\n    \\<forall>\\<^sub>F x in at_top. - 1 \\<le> ln x + c' * ln (ln x)", "by real_asymp+"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top.\n     (ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x)) \\<le> x\n  \\<forall>\\<^sub>F x in at_top. - 1 \\<le> ln x + c' * ln (ln x)\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 1} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          c' * ln (ln x) \\<le> Lambert_W x - ln x\n 2. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x \\<le> c' * ln (ln x)\n 3. ?l < - 1\n 4. - 1 < ?u\n 5. - 1 \\<noteq> 0", "thus \"eventually (\\<lambda>x. Lambert_W x - ln x \\<ge> c' * ln (ln x)) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top.\n     (ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x)) \\<le> x\n  \\<forall>\\<^sub>F x in at_top. - 1 \\<le> ln x + c' * ln (ln x)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top. c' * ln (ln x) \\<le> Lambert_W x - ln x", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x))\n                \\<le> x;\n        - 1 \\<le> ln x + c' * ln (ln x)\\<rbrakk>\n       \\<Longrightarrow> c' * ln (ln x) \\<le> Lambert_W x - ln x", "case (elim x)"], ["proof (state)\nthis:\n  (ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x)) \\<le> x\n  - 1 \\<le> ln x + c' * ln (ln x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x))\n                \\<le> x;\n        - 1 \\<le> ln x + c' * ln (ln x)\\<rbrakk>\n       \\<Longrightarrow> c' * ln (ln x) \\<le> Lambert_W x - ln x", "hence \"Lambert_W x \\<ge> ln x + c' * ln (ln x)\""], ["proof (prove)\nusing this:\n  (ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x)) \\<le> x\n  - 1 \\<le> ln x + c' * ln (ln x)\n\ngoal (1 subgoal):\n 1. ln x + c' * ln (ln x) \\<le> Lambert_W x", "by (intro Lambert_W_geI)"], ["proof (state)\nthis:\n  ln x + c' * ln (ln x) \\<le> Lambert_W x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x))\n                \\<le> x;\n        - 1 \\<le> ln x + c' * ln (ln x)\\<rbrakk>\n       \\<Longrightarrow> c' * ln (ln x) \\<le> Lambert_W x - ln x", "thus ?case"], ["proof (prove)\nusing this:\n  ln x + c' * ln (ln x) \\<le> Lambert_W x\n\ngoal (1 subgoal):\n 1. c' * ln (ln x) \\<le> Lambert_W x - ln x", "by simp"], ["proof (state)\nthis:\n  c' * ln (ln x) \\<le> Lambert_W x - ln x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top. c' * ln (ln x) \\<le> Lambert_W x - ln x\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x \\<le> c' * ln (ln x)\n 2. - 2 < - 1\n 3. - 1 < ?u\n 4. - 1 \\<noteq> 0", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x \\<le> c' * ln (ln x)\n 2. - 2 < - 1\n 3. - 1 < ?u\n 4. - 1 \\<noteq> 0", "fix c' :: real"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x \\<le> c' * ln (ln x)\n 2. - 2 < - 1\n 3. - 1 < ?u\n 4. - 1 \\<noteq> 0", "assume c': \"c' \\<in> {-1<..<0}\""], ["proof (state)\nthis:\n  c' \\<in> {- 1<..<0}\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x \\<le> c' * ln (ln x)\n 2. - 2 < - 1\n 3. - 1 < ?u\n 4. - 1 \\<noteq> 0", "have \"eventually (\\<lambda>x. (ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x)) \\<ge> x) at_top\"\n         \"eventually (\\<lambda>x. ln x + c' * ln (ln x) \\<ge> -1) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       x \\<le> (ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x)) &&&\n    \\<forall>\\<^sub>F x in at_top. - 1 \\<le> ln x + c' * ln (ln x)", "using c'"], ["proof (prove)\nusing this:\n  c' \\<in> {- 1<..<0}\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       x \\<le> (ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x)) &&&\n    \\<forall>\\<^sub>F x in at_top. - 1 \\<le> ln x + c' * ln (ln x)", "by real_asymp+"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top.\n     x \\<le> (ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x))\n  \\<forall>\\<^sub>F x in at_top. - 1 \\<le> ln x + c' * ln (ln x)\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x \\<le> c' * ln (ln x)\n 2. - 2 < - 1\n 3. - 1 < ?u\n 4. - 1 \\<noteq> 0", "thus \"eventually (\\<lambda>x. Lambert_W x - ln x \\<le> c' * ln (ln x)) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top.\n     x \\<le> (ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x))\n  \\<forall>\\<^sub>F x in at_top. - 1 \\<le> ln x + c' * ln (ln x)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top. Lambert_W x - ln x \\<le> c' * ln (ln x)", "using eventually_ge_at_top[of \"-exp (-1)\"]"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top.\n     x \\<le> (ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x))\n  \\<forall>\\<^sub>F x in at_top. - 1 \\<le> ln x + c' * ln (ln x)\n  eventually ((\\<le>) (- exp (- (1::?'a1)))) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top. Lambert_W x - ln x \\<le> c' * ln (ln x)", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> (ln x + c' * ln (ln x)) *\n                        exp (ln x + c' * ln (ln x));\n        - 1 \\<le> ln x + c' * ln (ln x); - exp (- 1) \\<le> x\\<rbrakk>\n       \\<Longrightarrow> Lambert_W x - ln x \\<le> c' * ln (ln x)", "case (elim x)"], ["proof (state)\nthis:\n  x \\<le> (ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x))\n  - 1 \\<le> ln x + c' * ln (ln x)\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> (ln x + c' * ln (ln x)) *\n                        exp (ln x + c' * ln (ln x));\n        - 1 \\<le> ln x + c' * ln (ln x); - exp (- 1) \\<le> x\\<rbrakk>\n       \\<Longrightarrow> Lambert_W x - ln x \\<le> c' * ln (ln x)", "hence \"Lambert_W x \\<le> ln x + c' * ln (ln x)\""], ["proof (prove)\nusing this:\n  x \\<le> (ln x + c' * ln (ln x)) * exp (ln x + c' * ln (ln x))\n  - 1 \\<le> ln x + c' * ln (ln x)\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. Lambert_W x \\<le> ln x + c' * ln (ln x)", "by (intro Lambert_W_leI)"], ["proof (state)\nthis:\n  Lambert_W x \\<le> ln x + c' * ln (ln x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> (ln x + c' * ln (ln x)) *\n                        exp (ln x + c' * ln (ln x));\n        - 1 \\<le> ln x + c' * ln (ln x); - exp (- 1) \\<le> x\\<rbrakk>\n       \\<Longrightarrow> Lambert_W x - ln x \\<le> c' * ln (ln x)", "thus ?case"], ["proof (prove)\nusing this:\n  Lambert_W x \\<le> ln x + c' * ln (ln x)\n\ngoal (1 subgoal):\n 1. Lambert_W x - ln x \\<le> c' * ln (ln x)", "by simp"], ["proof (state)\nthis:\n  Lambert_W x - ln x \\<le> c' * ln (ln x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top. Lambert_W x - ln x \\<le> c' * ln (ln x)\n\ngoal (3 subgoals):\n 1. - 2 < - 1\n 2. - 1 < 0\n 3. - 1 \\<noteq> 0", "qed auto"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      Lambert_W x - ln x) \\<sim>[at_top] (\\<lambda>x. - 1 * ln (ln x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W x - ln x) \\<sim>[at_top] (\\<lambda>x. - ln (ln x))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      Lambert_W x - ln x) \\<sim>[at_top] (\\<lambda>x. - 1 * ln (ln x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W x - ln x) \\<sim>[at_top] (\\<lambda>x. - ln (ln x))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x. Lambert_W x - ln x) \\<sim>[at_top] (\\<lambda>x. - ln (ln x))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W_asymp_equiv_at_top' [asymp_equiv_intros]:\n  \"Lambert_W \\<sim>[at_top] ln\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W \\<sim>[at_top] ln", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Lambert_W \\<sim>[at_top] ln", "have \"(\\<lambda>x. Lambert_W x - ln x) \\<in> \\<Theta>(\\<lambda>x. -ln (ln x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. Lambert_W x - ln x) \\<in> \\<Theta>(\\<lambda>x. - ln (ln x))", "by (intro asymp_equiv_imp_bigtheta Lambert_W_asymp_equiv_at_top)"], ["proof (state)\nthis:\n  (\\<lambda>x. Lambert_W x - ln x) \\<in> \\<Theta>(\\<lambda>x. - ln (ln x))\n\ngoal (1 subgoal):\n 1. Lambert_W \\<sim>[at_top] ln", "also"], ["proof (state)\nthis:\n  (\\<lambda>x. Lambert_W x - ln x) \\<in> \\<Theta>(\\<lambda>x. - ln (ln x))\n\ngoal (1 subgoal):\n 1. Lambert_W \\<sim>[at_top] ln", "have \"(\\<lambda>x::real. -ln (ln x)) \\<in> o(ln)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. - ln (ln x)) \\<in> o(ln)", "by real_asymp"], ["proof (state)\nthis:\n  (\\<lambda>x. - ln (ln x)) \\<in> o(ln)\n\ngoal (1 subgoal):\n 1. Lambert_W \\<sim>[at_top] ln", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>x. Lambert_W x - ln x) \\<in> o(ln)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x. Lambert_W x - ln x) \\<in> o(ln)\n\ngoal (1 subgoal):\n 1. Lambert_W \\<sim>[at_top] ln", "by (simp add: asymp_equiv_altdef)"], ["proof (state)\nthis:\n  Lambert_W \\<sim>[at_top] ln\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem Lambert_W'_asymp_equiv_at_left_0:\n  \"(\\<lambda>x. Lambert_W' x - ln (-x)) \\<sim>[at_left 0] (\\<lambda>x. -ln (-ln (-x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W' x -\n        ln (- x)) \\<sim>[at_left 0] (\\<lambda>x. - ln (- ln (- x)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W' x -\n        ln (- x)) \\<sim>[at_left 0] (\\<lambda>x. - ln (- ln (- x)))", "have \"(\\<lambda>x. Lambert_W' x - ln (-x)) \\<sim>[at_left 0] (\\<lambda>x. (-1) * ln (-ln (-x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W' x -\n        ln (- x)) \\<sim>[at_left 0] (\\<lambda>x. - 1 * ln (- ln (- x)))", "proof (rule asymp_equiv_sandwich')"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 1} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_left 0.\n          c' * ln (- ln (- x)) \\<le> Lambert_W' x - ln (- x)\n 2. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_left 0.\n          Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))\n 3. ?l < - 1\n 4. - 1 < ?u\n 5. - 1 \\<noteq> 0", "fix c' :: real"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 1} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_left 0.\n          c' * ln (- ln (- x)) \\<le> Lambert_W' x - ln (- x)\n 2. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_left 0.\n          Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))\n 3. ?l < - 1\n 4. - 1 < ?u\n 5. - 1 \\<noteq> 0", "assume c': \"c' \\<in> {-2<..<-1}\""], ["proof (state)\nthis:\n  c' \\<in> {- 2<..<- 1}\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 1} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_left 0.\n          c' * ln (- ln (- x)) \\<le> Lambert_W' x - ln (- x)\n 2. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_left 0.\n          Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))\n 3. ?l < - 1\n 4. - 1 < ?u\n 5. - 1 \\<noteq> 0", "have \"eventually (\\<lambda>x. x \\<le> (ln (-x) + c' * ln (-ln (-x))) * exp (ln (-x) + c' * ln (-ln (-x)))) (at_left 0)\"\n         \"eventually (\\<lambda>x::real. ln (-x) + c' * ln (-ln (-x)) \\<le> -1) (at_left 0)\"\n         \"eventually (\\<lambda>x::real. -exp (-1) \\<le> x) (at_left 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_left 0.\n       x \\<le> (ln (- x) + c' * ln (- ln (- x))) *\n               exp (ln (- x) + c' * ln (- ln (- x))) &&&\n    \\<forall>\\<^sub>F x in at_left 0.\n       ln (- x) + c' * ln (- ln (- x)) \\<le> - 1 &&&\n    eventually ((\\<le>) (- exp (- 1))) (at_left 0)", "using c'"], ["proof (prove)\nusing this:\n  c' \\<in> {- 2<..<- 1}\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_left 0.\n       x \\<le> (ln (- x) + c' * ln (- ln (- x))) *\n               exp (ln (- x) + c' * ln (- ln (- x))) &&&\n    \\<forall>\\<^sub>F x in at_left 0.\n       ln (- x) + c' * ln (- ln (- x)) \\<le> - 1 &&&\n    eventually ((\\<le>) (- exp (- 1))) (at_left 0)", "by real_asymp+"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_left 0.\n     x \\<le> (ln (- x) + c' * ln (- ln (- x))) *\n             exp (ln (- x) + c' * ln (- ln (- x)))\n  \\<forall>\\<^sub>F x in at_left 0.\n     ln (- x) + c' * ln (- ln (- x)) \\<le> - 1\n  eventually ((\\<le>) (- exp (- 1))) (at_left 0)\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 1} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_left 0.\n          c' * ln (- ln (- x)) \\<le> Lambert_W' x - ln (- x)\n 2. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_left 0.\n          Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))\n 3. ?l < - 1\n 4. - 1 < ?u\n 5. - 1 \\<noteq> 0", "thus \"eventually (\\<lambda>x. Lambert_W' x - ln (-x) \\<ge> c' * ln (-ln (-x))) (at_left 0)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_left 0.\n     x \\<le> (ln (- x) + c' * ln (- ln (- x))) *\n             exp (ln (- x) + c' * ln (- ln (- x)))\n  \\<forall>\\<^sub>F x in at_left 0.\n     ln (- x) + c' * ln (- ln (- x)) \\<le> - 1\n  eventually ((\\<le>) (- exp (- 1))) (at_left 0)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_left 0.\n       c' * ln (- ln (- x)) \\<le> Lambert_W' x - ln (- x)", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> (ln (- x) + c' * ln (- ln (- x))) *\n                        exp (ln (- x) + c' * ln (- ln (- x)));\n        ln (- x) + c' * ln (- ln (- x)) \\<le> - 1;\n        - exp (- 1) \\<le> x\\<rbrakk>\n       \\<Longrightarrow> c' * ln (- ln (- x)) \\<le> Lambert_W' x - ln (- x)", "case (elim x)"], ["proof (state)\nthis:\n  x \\<le> (ln (- x) + c' * ln (- ln (- x))) *\n          exp (ln (- x) + c' * ln (- ln (- x)))\n  ln (- x) + c' * ln (- ln (- x)) \\<le> - 1\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> (ln (- x) + c' * ln (- ln (- x))) *\n                        exp (ln (- x) + c' * ln (- ln (- x)));\n        ln (- x) + c' * ln (- ln (- x)) \\<le> - 1;\n        - exp (- 1) \\<le> x\\<rbrakk>\n       \\<Longrightarrow> c' * ln (- ln (- x)) \\<le> Lambert_W' x - ln (- x)", "hence \"Lambert_W' x \\<ge> ln (-x) + c' * ln (-ln (-x))\""], ["proof (prove)\nusing this:\n  x \\<le> (ln (- x) + c' * ln (- ln (- x))) *\n          exp (ln (- x) + c' * ln (- ln (- x)))\n  ln (- x) + c' * ln (- ln (- x)) \\<le> - 1\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. ln (- x) + c' * ln (- ln (- x)) \\<le> Lambert_W' x", "by (intro Lambert_W'_geI)"], ["proof (state)\nthis:\n  ln (- x) + c' * ln (- ln (- x)) \\<le> Lambert_W' x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> (ln (- x) + c' * ln (- ln (- x))) *\n                        exp (ln (- x) + c' * ln (- ln (- x)));\n        ln (- x) + c' * ln (- ln (- x)) \\<le> - 1;\n        - exp (- 1) \\<le> x\\<rbrakk>\n       \\<Longrightarrow> c' * ln (- ln (- x)) \\<le> Lambert_W' x - ln (- x)", "thus ?case"], ["proof (prove)\nusing this:\n  ln (- x) + c' * ln (- ln (- x)) \\<le> Lambert_W' x\n\ngoal (1 subgoal):\n 1. c' * ln (- ln (- x)) \\<le> Lambert_W' x - ln (- x)", "by simp"], ["proof (state)\nthis:\n  c' * ln (- ln (- x)) \\<le> Lambert_W' x - ln (- x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_left 0.\n     c' * ln (- ln (- x)) \\<le> Lambert_W' x - ln (- x)\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_left 0.\n          Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))\n 2. - 2 < - 1\n 3. - 1 < ?u\n 4. - 1 \\<noteq> 0", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_left 0.\n          Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))\n 2. - 2 < - 1\n 3. - 1 < ?u\n 4. - 1 \\<noteq> 0", "fix c' :: real"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_left 0.\n          Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))\n 2. - 2 < - 1\n 3. - 1 < ?u\n 4. - 1 \\<noteq> 0", "assume c': \"c' \\<in> {-1<..<0}\""], ["proof (state)\nthis:\n  c' \\<in> {- 1<..<0}\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_left 0.\n          Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))\n 2. - 2 < - 1\n 3. - 1 < ?u\n 4. - 1 \\<noteq> 0", "have \"eventually (\\<lambda>x. x \\<ge> (ln (-x) + c' * ln (-ln (-x))) * exp (ln (-x) + c' * ln (-ln (-x)))) (at_left 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_left 0.\n       (ln (- x) + c' * ln (- ln (- x))) *\n       exp (ln (- x) + c' * ln (- ln (- x)))\n       \\<le> x", "using c'"], ["proof (prove)\nusing this:\n  c' \\<in> {- 1<..<0}\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_left 0.\n       (ln (- x) + c' * ln (- ln (- x))) *\n       exp (ln (- x) + c' * ln (- ln (- x)))\n       \\<le> x", "by real_asymp"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_left 0.\n     (ln (- x) + c' * ln (- ln (- x))) *\n     exp (ln (- x) + c' * ln (- ln (- x)))\n     \\<le> x\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_left 0.\n          Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))\n 2. - 2 < - 1\n 3. - 1 < ?u\n 4. - 1 \\<noteq> 0", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_left 0.\n     (ln (- x) + c' * ln (- ln (- x))) *\n     exp (ln (- x) + c' * ln (- ln (- x)))\n     \\<le> x\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_left 0.\n          Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))\n 2. - 2 < - 1\n 3. - 1 < ?u\n 4. - 1 \\<noteq> 0", "have \"eventually (\\<lambda>x::real. x < 0) (at_left 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_left 0. x < 0", "by (auto simp: eventually_at intro: exI[of _ 1])"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_left 0. x < 0\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_left 0.\n          Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))\n 2. - 2 < - 1\n 3. - 1 < ?u\n 4. - 1 \\<noteq> 0", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in at_left 0.\n     (ln (- x) + c' * ln (- ln (- x))) *\n     exp (ln (- x) + c' * ln (- ln (- x)))\n     \\<le> x\n  \\<forall>\\<^sub>F x in at_left 0. x < 0", "show \"eventually (\\<lambda>x. Lambert_W' x - ln (-x) \\<le> c' * ln (-ln (-x))) (at_left 0)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_left 0.\n     (ln (- x) + c' * ln (- ln (- x))) *\n     exp (ln (- x) + c' * ln (- ln (- x)))\n     \\<le> x\n  \\<forall>\\<^sub>F x in at_left 0. x < 0\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_left 0.\n       Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(ln (- x) + c' * ln (- ln (- x))) *\n                exp (ln (- x) + c' * ln (- ln (- x)))\n                \\<le> x;\n        x < 0\\<rbrakk>\n       \\<Longrightarrow> Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))", "case (elim x)"], ["proof (state)\nthis:\n  (ln (- x) + c' * ln (- ln (- x))) * exp (ln (- x) + c' * ln (- ln (- x)))\n  \\<le> x\n  x < 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(ln (- x) + c' * ln (- ln (- x))) *\n                exp (ln (- x) + c' * ln (- ln (- x)))\n                \\<le> x;\n        x < 0\\<rbrakk>\n       \\<Longrightarrow> Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))", "hence \"Lambert_W' x \\<le> ln (-x) + c' * ln (-ln (-x))\""], ["proof (prove)\nusing this:\n  (ln (- x) + c' * ln (- ln (- x))) * exp (ln (- x) + c' * ln (- ln (- x)))\n  \\<le> x\n  x < 0\n\ngoal (1 subgoal):\n 1. Lambert_W' x \\<le> ln (- x) + c' * ln (- ln (- x))", "by (intro Lambert_W'_leI)"], ["proof (state)\nthis:\n  Lambert_W' x \\<le> ln (- x) + c' * ln (- ln (- x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(ln (- x) + c' * ln (- ln (- x))) *\n                exp (ln (- x) + c' * ln (- ln (- x)))\n                \\<le> x;\n        x < 0\\<rbrakk>\n       \\<Longrightarrow> Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))", "thus ?case"], ["proof (prove)\nusing this:\n  Lambert_W' x \\<le> ln (- x) + c' * ln (- ln (- x))\n\ngoal (1 subgoal):\n 1. Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))", "by simp"], ["proof (state)\nthis:\n  Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_left 0.\n     Lambert_W' x - ln (- x) \\<le> c' * ln (- ln (- x))\n\ngoal (3 subgoals):\n 1. - 2 < - 1\n 2. - 1 < 0\n 3. - 1 \\<noteq> 0", "qed auto"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      Lambert_W' x -\n      ln (- x)) \\<sim>[at_left 0] (\\<lambda>x. - 1 * ln (- ln (- x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W' x -\n        ln (- x)) \\<sim>[at_left 0] (\\<lambda>x. - ln (- ln (- x)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      Lambert_W' x -\n      ln (- x)) \\<sim>[at_left 0] (\\<lambda>x. - 1 * ln (- ln (- x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W' x -\n        ln (- x)) \\<sim>[at_left 0] (\\<lambda>x. - ln (- ln (- x)))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      Lambert_W' x -\n      ln (- x)) \\<sim>[at_left 0] (\\<lambda>x. - ln (- ln (- x)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Lambert_W'_asymp_equiv'_at_left_0 [asymp_equiv_intros]:\n  \"Lambert_W' \\<sim>[at_left 0] (\\<lambda>x. ln (-x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lambert_W' \\<sim>[at_left 0] (\\<lambda>x. ln (- x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Lambert_W' \\<sim>[at_left 0] (\\<lambda>x. ln (- x))", "have \"(\\<lambda>x. Lambert_W' x - ln (-x)) \\<in> \\<Theta>[at_left 0](\\<lambda>x. -ln (-ln (-x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. Lambert_W' x - ln (- x))\n    \\<in> \\<Theta>[at_left 0](\\<lambda>x. - ln (- ln (- x)))", "by (intro asymp_equiv_imp_bigtheta Lambert_W'_asymp_equiv_at_left_0)"], ["proof (state)\nthis:\n  (\\<lambda>x. Lambert_W' x - ln (- x))\n  \\<in> \\<Theta>[at_left 0](\\<lambda>x. - ln (- ln (- x)))\n\ngoal (1 subgoal):\n 1. Lambert_W' \\<sim>[at_left 0] (\\<lambda>x. ln (- x))", "also"], ["proof (state)\nthis:\n  (\\<lambda>x. Lambert_W' x - ln (- x))\n  \\<in> \\<Theta>[at_left 0](\\<lambda>x. - ln (- ln (- x)))\n\ngoal (1 subgoal):\n 1. Lambert_W' \\<sim>[at_left 0] (\\<lambda>x. ln (- x))", "have \"(\\<lambda>x::real. -ln (-ln (-x))) \\<in> o[at_left 0](\\<lambda>x. ln (-x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. - ln (- ln (- x))) \\<in> o[at_left 0](\\<lambda>x. ln (- x))", "by real_asymp"], ["proof (state)\nthis:\n  (\\<lambda>x. - ln (- ln (- x))) \\<in> o[at_left 0](\\<lambda>x. ln (- x))\n\ngoal (1 subgoal):\n 1. Lambert_W' \\<sim>[at_left 0] (\\<lambda>x. ln (- x))", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>x. Lambert_W' x - ln (- x))\n  \\<in> o[at_left 0](\\<lambda>x. ln (- x))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x. Lambert_W' x - ln (- x))\n  \\<in> o[at_left 0](\\<lambda>x. ln (- x))\n\ngoal (1 subgoal):\n 1. Lambert_W' \\<sim>[at_left 0] (\\<lambda>x. ln (- x))", "by (simp add: asymp_equiv_altdef)"], ["proof (state)\nthis:\n  Lambert_W' \\<sim>[at_left 0] (\\<lambda>x. ln (- x))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Next, we look at the branching point $a := \\tfrac{1}{e}$. Here, the asymptotic behaviour\n  is as follows:\n  \\begin{align*}\n    W(x) &= -1 + \\sqrt{2e}(x - a)^{\\frac{1}{2}} - \\tfrac{2}{3}e(x-a) + o(x-a) &&\\text{for} x\\to a^+\\\\\n    W'(x) &= -1 - \\sqrt{2e}(x - a)^{\\frac{1}{2}} - \\tfrac{2}{3}e(x-a) + o(x-a) &&\\text{for} x\\to a^+\n  \\end{align*}\n\\<close>"], ["", "lemma sqrt_sqrt_mult:\n  assumes \"x \\<ge> (0 :: real)\"\n  shows   \"sqrt x * (sqrt x * y) = x * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt x * (sqrt x * y) = x * y", "using assms"], ["proof (prove)\nusing this:\n  0 \\<le> x\n\ngoal (1 subgoal):\n 1. sqrt x * (sqrt x * y) = x * y", "by (subst mult.assoc [symmetric]) auto"], ["", "theorem Lambert_W_asymp_equiv_at_right_minus_exp_minus1:\n  defines \"e \\<equiv> exp 1\"\n  defines \"a \\<equiv> -exp (-1)\"\n  defines \"C1 \\<equiv> sqrt (2 * exp 1)\"\n  defines \"f \\<equiv> (\\<lambda>x. -1 + C1 * sqrt (x - a))\"\n  shows   \"(\\<lambda>x. Lambert_W x - f x) \\<sim>[at_right a] (\\<lambda>x. -2/3 * e * (x - a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W x -\n        f x) \\<sim>[at_right a] (\\<lambda>x. - 2 / 3 * e * (x - a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W x -\n        f x) \\<sim>[at_right a] (\\<lambda>x. - 2 / 3 * e * (x - a))", "define C :: \"real \\<Rightarrow> real\" where \"C = (\\<lambda>c. sqrt (2/e)/3 * (2*e+3*c))\""], ["proof (state)\nthis:\n  C = (\\<lambda>c. sqrt (2 / e) / 3 * (2 * e + 3 * c))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W x -\n        f x) \\<sim>[at_right a] (\\<lambda>x. - 2 / 3 * e * (x - a))", "have asymp_equiv: \"(\\<lambda>x. (f x + c * (x - a)) * exp (f x + c * (x - a)) - x)\n                       \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3/2))\" if \"c \\<noteq> -2/3 * e\" for c"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (f x + c * (x - a)) * exp (f x + c * (x - a)) -\n        x) \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3 / 2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (f x + c * (x - a)) * exp (f x + c * (x - a)) -\n        x) \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3 / 2))", "from that"], ["proof (chain)\npicking this:\n  c \\<noteq> - 2 / 3 * e", "have \"C c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  c \\<noteq> - 2 / 3 * e\n\ngoal (1 subgoal):\n 1. C c \\<noteq> 0", "by (auto simp: C_def e_def)"], ["proof (state)\nthis:\n  C c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (f x + c * (x - a)) * exp (f x + c * (x - a)) -\n        x) \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3 / 2))", "have \"(\\<lambda>x. (f x + c * (x - a)) * exp (f x + c * (x - a)) - x - C c * (x - a) powr (3/2))\n            \\<in> o[at_right a](\\<lambda>x. (x - a) powr (3/2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (f x + c * (x - a)) * exp (f x + c * (x - a)) - x -\n        C c * (x - a) powr (3 / 2))\n    \\<in> o[at_right a](\\<lambda>x. (x - a) powr (3 / 2))", "unfolding f_def a_def C_def C1_def e_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (- 1 + sqrt (2 * exp 1) * sqrt (x - - exp (- 1)) +\n         c * (x - - exp (- 1))) *\n        exp (- 1 + sqrt (2 * exp 1) * sqrt (x - - exp (- 1)) +\n             c * (x - - exp (- 1))) -\n        x -\n        sqrt (2 / exp 1) / 3 * (2 * exp 1 + 3 * c) *\n        (x - - exp (- 1)) powr (3 / 2))\n    \\<in> o[at_right\n             (- exp (- 1))](\\<lambda>x. (x - - exp (- 1)) powr (3 / 2))", "by (real_asymp simp: field_simps real_sqrt_mult real_sqrt_divide sqrt_sqrt_mult\n                           exp_minus simp flip: sqrt_def)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (f x + c * (x - a)) * exp (f x + c * (x - a)) - x -\n      C c * (x - a) powr (3 / 2))\n  \\<in> o[at_right a](\\<lambda>x. (x - a) powr (3 / 2))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (f x + c * (x - a)) * exp (f x + c * (x - a)) -\n        x) \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3 / 2))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (f x + c * (x - a)) * exp (f x + c * (x - a)) - x -\n      C c * (x - a) powr (3 / 2))\n  \\<in> o[at_right a](\\<lambda>x. (x - a) powr (3 / 2))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (f x + c * (x - a)) * exp (f x + c * (x - a)) -\n        x) \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3 / 2))", "using \\<open>C c \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (f x + c * (x - a)) * exp (f x + c * (x - a)) - x -\n      C c * (x - a) powr (3 / 2))\n  \\<in> o[at_right a](\\<lambda>x. (x - a) powr (3 / 2))\n  C c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (f x + c * (x - a)) * exp (f x + c * (x - a)) -\n        x) \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3 / 2))", "by (intro smallo_imp_asymp_equiv) auto"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (f x + c * (x - a)) * exp (f x + c * (x - a)) -\n      x) \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3 / 2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?c \\<noteq> - 2 / 3 * e \\<Longrightarrow>\n  (\\<lambda>x.\n      (f x + ?c * (x - a)) * exp (f x + ?c * (x - a)) -\n      x) \\<sim>[at_right a] (\\<lambda>x. C ?c * (x - a) powr (3 / 2))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W x -\n        f x) \\<sim>[at_right a] (\\<lambda>x. - 2 / 3 * e * (x - a))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W x -\n        f x) \\<sim>[at_right a] (\\<lambda>x. - 2 / 3 * e * (x - a))", "proof (rule asymp_equiv_sandwich')"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "fix c' :: real"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "assume c': \"c' \\<in> {-e<..<-2/3*e}\""], ["proof (state)\nthis:\n  c' \\<in> {- e<..<- 2 / 3 * e}\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "hence neq: \"c' \\<noteq> -2/3 * e\""], ["proof (prove)\nusing this:\n  c' \\<in> {- e<..<- 2 / 3 * e}\n\ngoal (1 subgoal):\n 1. c' \\<noteq> - 2 / 3 * e", "by auto"], ["proof (state)\nthis:\n  c' \\<noteq> - 2 / 3 * e\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "from c'"], ["proof (chain)\npicking this:\n  c' \\<in> {- e<..<- 2 / 3 * e}", "have neg: \"C c' < 0\""], ["proof (prove)\nusing this:\n  c' \\<in> {- e<..<- 2 / 3 * e}\n\ngoal (1 subgoal):\n 1. C c' < 0", "unfolding C_def"], ["proof (prove)\nusing this:\n  c' \\<in> {- e<..<- 2 / 3 * e}\n\ngoal (1 subgoal):\n 1. sqrt (2 / e) / 3 * (2 * e + 3 * c') < 0", "by (auto intro!: mult_pos_neg)"], ["proof (state)\nthis:\n  C c' < 0\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "hence \"eventually (\\<lambda>x. C c' * (x - a) powr (3 / 2) < 0) (at_right a)\""], ["proof (prove)\nusing this:\n  C c' < 0\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a. C c' * (x - a) powr (3 / 2) < 0", "by real_asymp"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a. C c' * (x - a) powr (3 / 2) < 0\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "hence \"eventually (\\<lambda>x. (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0) (at_right a)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_right a. C c' * (x - a) powr (3 / 2) < 0\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a.\n       (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0", "using asymp_equiv_eventually_neg_iff[OF asymp_equiv[OF neq]]"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_right a. C c' * (x - a) powr (3 / 2) < 0\n  \\<forall>\\<^sub>F x in at_right a.\n     ((f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0) =\n     (C c' * (x - a) powr (3 / 2) < 0)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a.\n       (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0", "by eventually_elim (use neg in auto)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a.\n     (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "thus \"eventually (\\<lambda>x. Lambert_W x - f x \\<ge> c' * (x - a)) (at_right a)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_right a.\n     (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a. c' * (x - a) \\<le> Lambert_W x - f x", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x\n       < 0 \\<Longrightarrow>\n       c' * (x - a) \\<le> Lambert_W x - f x", "case (elim x)"], ["proof (state)\nthis:\n  (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x\n       < 0 \\<Longrightarrow>\n       c' * (x - a) \\<le> Lambert_W x - f x", "hence \"Lambert_W x \\<ge> f x + c' * (x - a)\""], ["proof (prove)\nusing this:\n  (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0\n\ngoal (1 subgoal):\n 1. f x + c' * (x - a) \\<le> Lambert_W x", "by (intro Lambert_W_geI) auto"], ["proof (state)\nthis:\n  f x + c' * (x - a) \\<le> Lambert_W x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x\n       < 0 \\<Longrightarrow>\n       c' * (x - a) \\<le> Lambert_W x - f x", "thus ?case"], ["proof (prove)\nusing this:\n  f x + c' * (x - a) \\<le> Lambert_W x\n\ngoal (1 subgoal):\n 1. c' * (x - a) \\<le> Lambert_W x - f x", "by simp"], ["proof (state)\nthis:\n  c' * (x - a) \\<le> Lambert_W x - f x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a. c' * (x - a) \\<le> Lambert_W x - f x\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "fix c' :: real"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "assume c': \"c' \\<in> {-2/3*e<..<0}\""], ["proof (state)\nthis:\n  c' \\<in> {- 2 / 3 * e<..<0}\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "hence neq: \"c' \\<noteq> -2/3 * e\""], ["proof (prove)\nusing this:\n  c' \\<in> {- 2 / 3 * e<..<0}\n\ngoal (1 subgoal):\n 1. c' \\<noteq> - 2 / 3 * e", "by auto"], ["proof (state)\nthis:\n  c' \\<noteq> - 2 / 3 * e\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "from c'"], ["proof (chain)\npicking this:\n  c' \\<in> {- 2 / 3 * e<..<0}", "have pos: \"C c' > 0\""], ["proof (prove)\nusing this:\n  c' \\<in> {- 2 / 3 * e<..<0}\n\ngoal (1 subgoal):\n 1. 0 < C c'", "unfolding C_def"], ["proof (prove)\nusing this:\n  c' \\<in> {- 2 / 3 * e<..<0}\n\ngoal (1 subgoal):\n 1. 0 < sqrt (2 / e) / 3 * (2 * e + 3 * c')", "by auto"], ["proof (state)\nthis:\n  0 < C c'\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "hence \"eventually (\\<lambda>x. C c' * (x - a) powr (3 / 2) > 0) (at_right a)\""], ["proof (prove)\nusing this:\n  0 < C c'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a. 0 < C c' * (x - a) powr (3 / 2)", "by real_asymp"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a. 0 < C c' * (x - a) powr (3 / 2)\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "hence \"eventually (\\<lambda>x. (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x > 0) (at_right a)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_right a. 0 < C c' * (x - a) powr (3 / 2)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a.\n       0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x", "using asymp_equiv_eventually_pos_iff[OF asymp_equiv[OF neq]]"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_right a. 0 < C c' * (x - a) powr (3 / 2)\n  \\<forall>\\<^sub>F x in at_right a.\n     (0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x) =\n     (0 < C c' * (x - a) powr (3 / 2))\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a.\n       0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x", "by eventually_elim (use pos in auto)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a.\n     0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a.\n     0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "have \"eventually (\\<lambda>x. - 1 \\<le> f x + c' * (x - a)) (at_right a)\"\n                  \"eventually (\\<lambda>x. x > a) (at_right a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a. - 1 \\<le> f x + c' * (x - a) &&&\n    eventually ((<) a) (at_right a)", "unfolding a_def f_def C1_def c'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right (- exp (- 1)).\n       - 1\n       \\<le> - 1 + sqrt (2 * exp 1) * sqrt (x - - exp (- 1)) +\n             c' * (x - - exp (- 1)) &&&\n    eventually ((<) (- exp (- 1))) (at_right (- exp (- 1)))", "by real_asymp+"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a. - 1 \\<le> f x + c' * (x - a)\n  eventually ((<) a) (at_right a)\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in at_right a.\n     0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x\n  \\<forall>\\<^sub>F x in at_right a. - 1 \\<le> f x + c' * (x - a)\n  eventually ((<) a) (at_right a)", "show \"eventually (\\<lambda>x. Lambert_W x - f x \\<le> c' * (x - a)) (at_right a)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_right a.\n     0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x\n  \\<forall>\\<^sub>F x in at_right a. - 1 \\<le> f x + c' * (x - a)\n  eventually ((<) a) (at_right a)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a. Lambert_W x - f x \\<le> c' * (x - a)", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x;\n        - 1 \\<le> f x + c' * (x - a); a < x\\<rbrakk>\n       \\<Longrightarrow> Lambert_W x - f x \\<le> c' * (x - a)", "case (elim x)"], ["proof (state)\nthis:\n  0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x\n  - 1 \\<le> f x + c' * (x - a)\n  a < x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x;\n        - 1 \\<le> f x + c' * (x - a); a < x\\<rbrakk>\n       \\<Longrightarrow> Lambert_W x - f x \\<le> c' * (x - a)", "hence \"Lambert_W x \\<le> f x + c' * (x - a)\""], ["proof (prove)\nusing this:\n  0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x\n  - 1 \\<le> f x + c' * (x - a)\n  a < x\n\ngoal (1 subgoal):\n 1. Lambert_W x \\<le> f x + c' * (x - a)", "by (intro Lambert_W_leI) (auto simp: a_def)"], ["proof (state)\nthis:\n  Lambert_W x \\<le> f x + c' * (x - a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x;\n        - 1 \\<le> f x + c' * (x - a); a < x\\<rbrakk>\n       \\<Longrightarrow> Lambert_W x - f x \\<le> c' * (x - a)", "thus ?case"], ["proof (prove)\nusing this:\n  Lambert_W x \\<le> f x + c' * (x - a)\n\ngoal (1 subgoal):\n 1. Lambert_W x - f x \\<le> c' * (x - a)", "by simp"], ["proof (state)\nthis:\n  Lambert_W x - f x \\<le> c' * (x - a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a. Lambert_W x - f x \\<le> c' * (x - a)\n\ngoal (3 subgoals):\n 1. - e < - 2 / 3 * e\n 2. - 2 / 3 * e < 0\n 3. - 2 / 3 * e \\<noteq> 0", "qed (auto simp: e_def)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      Lambert_W x -\n      f x) \\<sim>[at_right a] (\\<lambda>x. - 2 / 3 * e * (x - a))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem Lambert_W'_asymp_equiv_at_right_minus_exp_minus1:\n  defines \"e \\<equiv> exp 1\"\n  defines \"a \\<equiv> -exp (-1)\"\n  defines \"C1 \\<equiv> sqrt (2 * exp 1)\"\n  defines \"f \\<equiv> (\\<lambda>x. -1 - C1 * sqrt (x - a))\"\n  shows   \"(\\<lambda>x. Lambert_W' x - f x) \\<sim>[at_right a] (\\<lambda>x. -2/3 * e * (x - a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W' x -\n        f x) \\<sim>[at_right a] (\\<lambda>x. - 2 / 3 * e * (x - a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W' x -\n        f x) \\<sim>[at_right a] (\\<lambda>x. - 2 / 3 * e * (x - a))", "define C :: \"real \\<Rightarrow> real\" where \"C = (\\<lambda>c. -sqrt (2/e)/3 * (2*e+3*c))\""], ["proof (state)\nthis:\n  C = (\\<lambda>c. - sqrt (2 / e) / 3 * (2 * e + 3 * c))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W' x -\n        f x) \\<sim>[at_right a] (\\<lambda>x. - 2 / 3 * e * (x - a))", "have asymp_equiv: \"(\\<lambda>x. (f x + c * (x - a)) * exp (f x + c * (x - a)) - x)\n                       \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3/2))\" if \"c \\<noteq> -2/3 * e\" for c"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (f x + c * (x - a)) * exp (f x + c * (x - a)) -\n        x) \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3 / 2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (f x + c * (x - a)) * exp (f x + c * (x - a)) -\n        x) \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3 / 2))", "from that"], ["proof (chain)\npicking this:\n  c \\<noteq> - 2 / 3 * e", "have \"C c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  c \\<noteq> - 2 / 3 * e\n\ngoal (1 subgoal):\n 1. C c \\<noteq> 0", "by (auto simp: C_def e_def)"], ["proof (state)\nthis:\n  C c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (f x + c * (x - a)) * exp (f x + c * (x - a)) -\n        x) \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3 / 2))", "have \"(\\<lambda>x. (f x + c * (x - a)) * exp (f x + c * (x - a)) - x - C c * (x - a) powr (3/2))\n            \\<in> o[at_right a](\\<lambda>x. (x - a) powr (3/2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (f x + c * (x - a)) * exp (f x + c * (x - a)) - x -\n        C c * (x - a) powr (3 / 2))\n    \\<in> o[at_right a](\\<lambda>x. (x - a) powr (3 / 2))", "unfolding f_def a_def C_def C1_def e_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (- 1 - sqrt (2 * exp 1) * sqrt (x - - exp (- 1)) +\n         c * (x - - exp (- 1))) *\n        exp (- 1 - sqrt (2 * exp 1) * sqrt (x - - exp (- 1)) +\n             c * (x - - exp (- 1))) -\n        x -\n        - sqrt (2 / exp 1) / 3 * (2 * exp 1 + 3 * c) *\n        (x - - exp (- 1)) powr (3 / 2))\n    \\<in> o[at_right\n             (- exp (- 1))](\\<lambda>x. (x - - exp (- 1)) powr (3 / 2))", "by (real_asymp simp: field_simps real_sqrt_mult real_sqrt_divide sqrt_sqrt_mult\n                           exp_minus simp flip: sqrt_def)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (f x + c * (x - a)) * exp (f x + c * (x - a)) - x -\n      C c * (x - a) powr (3 / 2))\n  \\<in> o[at_right a](\\<lambda>x. (x - a) powr (3 / 2))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (f x + c * (x - a)) * exp (f x + c * (x - a)) -\n        x) \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3 / 2))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (f x + c * (x - a)) * exp (f x + c * (x - a)) - x -\n      C c * (x - a) powr (3 / 2))\n  \\<in> o[at_right a](\\<lambda>x. (x - a) powr (3 / 2))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (f x + c * (x - a)) * exp (f x + c * (x - a)) -\n        x) \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3 / 2))", "using \\<open>C c \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (f x + c * (x - a)) * exp (f x + c * (x - a)) - x -\n      C c * (x - a) powr (3 / 2))\n  \\<in> o[at_right a](\\<lambda>x. (x - a) powr (3 / 2))\n  C c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (f x + c * (x - a)) * exp (f x + c * (x - a)) -\n        x) \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3 / 2))", "by (intro smallo_imp_asymp_equiv) auto"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (f x + c * (x - a)) * exp (f x + c * (x - a)) -\n      x) \\<sim>[at_right a] (\\<lambda>x. C c * (x - a) powr (3 / 2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?c \\<noteq> - 2 / 3 * e \\<Longrightarrow>\n  (\\<lambda>x.\n      (f x + ?c * (x - a)) * exp (f x + ?c * (x - a)) -\n      x) \\<sim>[at_right a] (\\<lambda>x. C ?c * (x - a) powr (3 / 2))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W' x -\n        f x) \\<sim>[at_right a] (\\<lambda>x. - 2 / 3 * e * (x - a))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W' x -\n        f x) \\<sim>[at_right a] (\\<lambda>x. - 2 / 3 * e * (x - a))", "proof (rule asymp_equiv_sandwich')"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W' x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "fix c' :: real"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W' x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "assume c': \"c' \\<in> {-e<..<-2/3*e}\""], ["proof (state)\nthis:\n  c' \\<in> {- e<..<- 2 / 3 * e}\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W' x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "hence neq: \"c' \\<noteq> -2/3 * e\""], ["proof (prove)\nusing this:\n  c' \\<in> {- e<..<- 2 / 3 * e}\n\ngoal (1 subgoal):\n 1. c' \\<noteq> - 2 / 3 * e", "by auto"], ["proof (state)\nthis:\n  c' \\<noteq> - 2 / 3 * e\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W' x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "from c'"], ["proof (chain)\npicking this:\n  c' \\<in> {- e<..<- 2 / 3 * e}", "have pos: \"C c' > 0\""], ["proof (prove)\nusing this:\n  c' \\<in> {- e<..<- 2 / 3 * e}\n\ngoal (1 subgoal):\n 1. 0 < C c'", "unfolding C_def"], ["proof (prove)\nusing this:\n  c' \\<in> {- e<..<- 2 / 3 * e}\n\ngoal (1 subgoal):\n 1. 0 < - sqrt (2 / e) / 3 * (2 * e + 3 * c')", "by (auto intro!: mult_pos_neg)"], ["proof (state)\nthis:\n  0 < C c'\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W' x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "hence \"eventually (\\<lambda>x. C c' * (x - a) powr (3 / 2) > 0) (at_right a)\""], ["proof (prove)\nusing this:\n  0 < C c'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a. 0 < C c' * (x - a) powr (3 / 2)", "by real_asymp"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a. 0 < C c' * (x - a) powr (3 / 2)\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W' x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "hence \"eventually (\\<lambda>x. (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x > 0) (at_right a)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_right a. 0 < C c' * (x - a) powr (3 / 2)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a.\n       0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x", "using asymp_equiv_eventually_pos_iff[OF asymp_equiv[OF neq]]"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_right a. 0 < C c' * (x - a) powr (3 / 2)\n  \\<forall>\\<^sub>F x in at_right a.\n     (0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x) =\n     (0 < C c' * (x - a) powr (3 / 2))\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a.\n       0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x", "by eventually_elim (use pos in auto)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a.\n     0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W' x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a.\n     0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W' x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "have \"eventually (\\<lambda>x. x > a) (at_right a)\"\n                  \"eventually (\\<lambda>x. f x + c' * (x - a) \\<le> -1) (at_right a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eventually ((<) a) (at_right a) &&&\n    \\<forall>\\<^sub>F x in at_right a. f x + c' * (x - a) \\<le> - 1", "unfolding a_def f_def C1_def c'"], ["proof (prove)\ngoal (1 subgoal):\n 1. eventually ((<) (- exp (- 1))) (at_right (- exp (- 1))) &&&\n    \\<forall>\\<^sub>F x in at_right (- exp (- 1)).\n       - 1 - sqrt (2 * exp 1) * sqrt (x - - exp (- 1)) +\n       c' * (x - - exp (- 1))\n       \\<le> - 1", "by real_asymp+"], ["proof (state)\nthis:\n  eventually ((<) a) (at_right a)\n  \\<forall>\\<^sub>F x in at_right a. f x + c' * (x - a) \\<le> - 1\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<- 2 / 3 * e} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          c' * (x - a) \\<le> Lambert_W' x - f x\n 2. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 3. ?l < - 2 / 3 * e\n 4. - 2 / 3 * e < ?u\n 5. - 2 / 3 * e \\<noteq> 0", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in at_right a.\n     0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x\n  eventually ((<) a) (at_right a)\n  \\<forall>\\<^sub>F x in at_right a. f x + c' * (x - a) \\<le> - 1", "show \"eventually (\\<lambda>x. Lambert_W' x - f x \\<ge> c' * (x - a)) (at_right a)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_right a.\n     0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x\n  eventually ((<) a) (at_right a)\n  \\<forall>\\<^sub>F x in at_right a. f x + c' * (x - a) \\<le> - 1\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a. c' * (x - a) \\<le> Lambert_W' x - f x", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x;\n        a < x; f x + c' * (x - a) \\<le> - 1\\<rbrakk>\n       \\<Longrightarrow> c' * (x - a) \\<le> Lambert_W' x - f x", "case (elim x)"], ["proof (state)\nthis:\n  0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x\n  a < x\n  f x + c' * (x - a) \\<le> - 1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x;\n        a < x; f x + c' * (x - a) \\<le> - 1\\<rbrakk>\n       \\<Longrightarrow> c' * (x - a) \\<le> Lambert_W' x - f x", "hence \"Lambert_W' x \\<ge> f x + c' * (x - a)\""], ["proof (prove)\nusing this:\n  0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x\n  a < x\n  f x + c' * (x - a) \\<le> - 1\n\ngoal (1 subgoal):\n 1. f x + c' * (x - a) \\<le> Lambert_W' x", "by (intro Lambert_W'_geI) (auto simp: a_def)"], ["proof (state)\nthis:\n  f x + c' * (x - a) \\<le> Lambert_W' x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x;\n        a < x; f x + c' * (x - a) \\<le> - 1\\<rbrakk>\n       \\<Longrightarrow> c' * (x - a) \\<le> Lambert_W' x - f x", "thus ?case"], ["proof (prove)\nusing this:\n  f x + c' * (x - a) \\<le> Lambert_W' x\n\ngoal (1 subgoal):\n 1. c' * (x - a) \\<le> Lambert_W' x - f x", "by simp"], ["proof (state)\nthis:\n  c' * (x - a) \\<le> Lambert_W' x - f x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a. c' * (x - a) \\<le> Lambert_W' x - f x\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "fix c' :: real"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "assume c': \"c' \\<in> {-2/3*e<..<0}\""], ["proof (state)\nthis:\n  c' \\<in> {- 2 / 3 * e<..<0}\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "hence neq: \"c' \\<noteq> -2/3 * e\""], ["proof (prove)\nusing this:\n  c' \\<in> {- 2 / 3 * e<..<0}\n\ngoal (1 subgoal):\n 1. c' \\<noteq> - 2 / 3 * e", "by auto"], ["proof (state)\nthis:\n  c' \\<noteq> - 2 / 3 * e\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "from c'"], ["proof (chain)\npicking this:\n  c' \\<in> {- 2 / 3 * e<..<0}", "have neg: \"C c' < 0\""], ["proof (prove)\nusing this:\n  c' \\<in> {- 2 / 3 * e<..<0}\n\ngoal (1 subgoal):\n 1. C c' < 0", "unfolding C_def"], ["proof (prove)\nusing this:\n  c' \\<in> {- 2 / 3 * e<..<0}\n\ngoal (1 subgoal):\n 1. - sqrt (2 / e) / 3 * (2 * e + 3 * c') < 0", "by auto"], ["proof (state)\nthis:\n  C c' < 0\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "hence \"eventually (\\<lambda>x. C c' * (x - a) powr (3 / 2) < 0) (at_right a)\""], ["proof (prove)\nusing this:\n  C c' < 0\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a. C c' * (x - a) powr (3 / 2) < 0", "by real_asymp"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a. C c' * (x - a) powr (3 / 2) < 0\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "hence \"eventually (\\<lambda>x. (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0) (at_right a)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_right a. C c' * (x - a) powr (3 / 2) < 0\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a.\n       (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0", "using asymp_equiv_eventually_neg_iff[OF asymp_equiv[OF neq]]"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_right a. C c' * (x - a) powr (3 / 2) < 0\n  \\<forall>\\<^sub>F x in at_right a.\n     ((f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0) =\n     (C c' * (x - a) powr (3 / 2) < 0)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a.\n       (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0", "by eventually_elim (use neg in auto)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a.\n     (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a.\n     (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "have \"eventually (\\<lambda>x. x < 0) (at_right a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a. x < 0", "unfolding a_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right (- exp (- 1)). x < 0", "by real_asymp"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a. x < 0\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {- 2 / 3 * e<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_right a.\n          Lambert_W' x - f x \\<le> c' * (x - a)\n 2. - e < - 2 / 3 * e\n 3. - 2 / 3 * e < ?u\n 4. - 2 / 3 * e \\<noteq> 0", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in at_right a.\n     (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0\n  \\<forall>\\<^sub>F x in at_right a. x < 0", "show \"eventually (\\<lambda>x. Lambert_W' x - f x \\<le> c' * (x - a)) (at_right a)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_right a.\n     (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0\n  \\<forall>\\<^sub>F x in at_right a. x < 0\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_right a. Lambert_W' x - f x \\<le> c' * (x - a)", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0;\n        x < 0\\<rbrakk>\n       \\<Longrightarrow> Lambert_W' x - f x \\<le> c' * (x - a)", "case (elim x)"], ["proof (state)\nthis:\n  (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0\n  x < 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0;\n        x < 0\\<rbrakk>\n       \\<Longrightarrow> Lambert_W' x - f x \\<le> c' * (x - a)", "hence \"Lambert_W' x \\<le> f x + c' * (x - a)\""], ["proof (prove)\nusing this:\n  (f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0\n  x < 0\n\ngoal (1 subgoal):\n 1. Lambert_W' x \\<le> f x + c' * (x - a)", "by (intro Lambert_W'_leI) auto"], ["proof (state)\nthis:\n  Lambert_W' x \\<le> f x + c' * (x - a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(f x + c' * (x - a)) * exp (f x + c' * (x - a)) - x < 0;\n        x < 0\\<rbrakk>\n       \\<Longrightarrow> Lambert_W' x - f x \\<le> c' * (x - a)", "thus ?case"], ["proof (prove)\nusing this:\n  Lambert_W' x \\<le> f x + c' * (x - a)\n\ngoal (1 subgoal):\n 1. Lambert_W' x - f x \\<le> c' * (x - a)", "by simp"], ["proof (state)\nthis:\n  Lambert_W' x - f x \\<le> c' * (x - a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_right a. Lambert_W' x - f x \\<le> c' * (x - a)\n\ngoal (3 subgoals):\n 1. - e < - 2 / 3 * e\n 2. - 2 / 3 * e < 0\n 3. - 2 / 3 * e \\<noteq> 0", "qed (auto simp: e_def)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      Lambert_W' x -\n      f x) \\<sim>[at_right a] (\\<lambda>x. - 2 / 3 * e * (x - a))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Lastly, just for fun, we derive a slightly more accurate expansion of $W_0(x)$ for $x\\to\\infty$:\n\\<close>"], ["", "theorem Lambert_W_asymp_equiv_at_top'':\n  \"(\\<lambda>x. Lambert_W x - ln x + ln (ln x)) \\<sim>[at_top] (\\<lambda>x. ln (ln x) / ln x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W x - ln x +\n        ln (ln x)) \\<sim>[at_top] (\\<lambda>x. ln (ln x) / ln x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W x - ln x +\n        ln (ln x)) \\<sim>[at_top] (\\<lambda>x. ln (ln x) / ln x)", "have \"(\\<lambda>x. Lambert_W x - ln x + ln (ln x)) \\<sim>[at_top] (\\<lambda>x. 1 * (ln (ln x) / ln x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W x - ln x +\n        ln (ln x)) \\<sim>[at_top] (\\<lambda>x. 1 * (ln (ln x) / ln x))", "proof (rule asymp_equiv_sandwich')"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<1} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          c' * (ln (ln x) / ln x) \\<le> Lambert_W x - ln x + ln (ln x)\n 2. \\<And>c'.\n       c' \\<in> {1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)\n 3. ?l < 1\n 4. 1 < ?u\n 5. 1 \\<noteq> 0", "fix c' :: real"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<1} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          c' * (ln (ln x) / ln x) \\<le> Lambert_W x - ln x + ln (ln x)\n 2. \\<And>c'.\n       c' \\<in> {1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)\n 3. ?l < 1\n 4. 1 < ?u\n 5. 1 \\<noteq> 0", "assume c': \"c' \\<in> {0<..<1}\""], ["proof (state)\nthis:\n  c' \\<in> {0<..<1}\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<1} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          c' * (ln (ln x) / ln x) \\<le> Lambert_W x - ln x + ln (ln x)\n 2. \\<And>c'.\n       c' \\<in> {1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)\n 3. ?l < 1\n 4. 1 < ?u\n 5. 1 \\<noteq> 0", "define a where \"a = (\\<lambda>x::real. ln x - ln (ln x) + c' * (ln (ln x) / ln x))\""], ["proof (state)\nthis:\n  a = (\\<lambda>x. ln x - ln (ln x) + c' * (ln (ln x) / ln x))\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<1} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          c' * (ln (ln x) / ln x) \\<le> Lambert_W x - ln x + ln (ln x)\n 2. \\<And>c'.\n       c' \\<in> {1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)\n 3. ?l < 1\n 4. 1 < ?u\n 5. 1 \\<noteq> 0", "have \"eventually (\\<lambda>x. a x * exp (a x) \\<le> x) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top. a x * exp (a x) \\<le> x", "using c'"], ["proof (prove)\nusing this:\n  c' \\<in> {0<..<1}\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top. a x * exp (a x) \\<le> x", "unfolding a_def"], ["proof (prove)\nusing this:\n  c' \\<in> {0<..<1}\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       (ln x - ln (ln x) + c' * (ln (ln x) / ln x)) *\n       exp (ln x - ln (ln x) + c' * (ln (ln x) / ln x))\n       \\<le> x", "by real_asymp+"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top. a x * exp (a x) \\<le> x\n\ngoal (5 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {?l<..<1} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          c' * (ln (ln x) / ln x) \\<le> Lambert_W x - ln x + ln (ln x)\n 2. \\<And>c'.\n       c' \\<in> {1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)\n 3. ?l < 1\n 4. 1 < ?u\n 5. 1 \\<noteq> 0", "thus \"eventually (\\<lambda>x. Lambert_W x - ln x + ln (ln x) \\<ge> c' * (ln (ln x) / ln x)) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top. a x * exp (a x) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       c' * (ln (ln x) / ln x) \\<le> Lambert_W x - ln x + ln (ln x)", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       a x * exp (a x) \\<le> x \\<Longrightarrow>\n       c' * (ln (ln x) / ln x) \\<le> Lambert_W x - ln x + ln (ln x)", "case (elim x)"], ["proof (state)\nthis:\n  a x * exp (a x) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       a x * exp (a x) \\<le> x \\<Longrightarrow>\n       c' * (ln (ln x) / ln x) \\<le> Lambert_W x - ln x + ln (ln x)", "hence \"Lambert_W x \\<ge> a x\""], ["proof (prove)\nusing this:\n  a x * exp (a x) \\<le> x\n\ngoal (1 subgoal):\n 1. a x \\<le> Lambert_W x", "by (intro Lambert_W_geI)"], ["proof (state)\nthis:\n  a x \\<le> Lambert_W x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       a x * exp (a x) \\<le> x \\<Longrightarrow>\n       c' * (ln (ln x) / ln x) \\<le> Lambert_W x - ln x + ln (ln x)", "thus ?case"], ["proof (prove)\nusing this:\n  a x \\<le> Lambert_W x\n\ngoal (1 subgoal):\n 1. c' * (ln (ln x) / ln x) \\<le> Lambert_W x - ln x + ln (ln x)", "by (simp add: a_def)"], ["proof (state)\nthis:\n  c' * (ln (ln x) / ln x) \\<le> Lambert_W x - ln x + ln (ln x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top.\n     c' * (ln (ln x) / ln x) \\<le> Lambert_W x - ln x + ln (ln x)\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)\n 2. 0 < 1\n 3. 1 < ?u\n 4. 1 \\<noteq> 0", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)\n 2. 0 < 1\n 3. 1 < ?u\n 4. 1 \\<noteq> 0", "fix c' :: real"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)\n 2. 0 < 1\n 3. 1 < ?u\n 4. 1 \\<noteq> 0", "assume c': \"c' \\<in> {1<..<2}\""], ["proof (state)\nthis:\n  c' \\<in> {1<..<2}\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)\n 2. 0 < 1\n 3. 1 < ?u\n 4. 1 \\<noteq> 0", "define a where \"a = (\\<lambda>x::real. ln x - ln (ln x) + c' * (ln (ln x) / ln x))\""], ["proof (state)\nthis:\n  a = (\\<lambda>x. ln x - ln (ln x) + c' * (ln (ln x) / ln x))\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)\n 2. 0 < 1\n 3. 1 < ?u\n 4. 1 \\<noteq> 0", "have \"eventually (\\<lambda>x. a x * exp (a x) \\<ge> x) at_top\"\n         \"eventually (\\<lambda>x. a x \\<ge> -1) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top. x \\<le> a x * exp (a x) &&&\n    \\<forall>\\<^sub>F x in at_top. - 1 \\<le> a x", "using c'"], ["proof (prove)\nusing this:\n  c' \\<in> {1<..<2}\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top. x \\<le> a x * exp (a x) &&&\n    \\<forall>\\<^sub>F x in at_top. - 1 \\<le> a x", "unfolding a_def"], ["proof (prove)\nusing this:\n  c' \\<in> {1<..<2}\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       x \\<le> (ln x - ln (ln x) + c' * (ln (ln x) / ln x)) *\n               exp (ln x - ln (ln x) + c' * (ln (ln x) / ln x)) &&&\n    \\<forall>\\<^sub>F x in at_top.\n       - 1 \\<le> ln x - ln (ln x) + c' * (ln (ln x) / ln x)", "by real_asymp+"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top. x \\<le> a x * exp (a x)\n  \\<forall>\\<^sub>F x in at_top. - 1 \\<le> a x\n\ngoal (4 subgoals):\n 1. \\<And>c'.\n       c' \\<in> {1<..<?u} \\<Longrightarrow>\n       \\<forall>\\<^sub>F x in at_top.\n          Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)\n 2. 0 < 1\n 3. 1 < ?u\n 4. 1 \\<noteq> 0", "thus \"eventually (\\<lambda>x. Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top. x \\<le> a x * exp (a x)\n  \\<forall>\\<^sub>F x in at_top. - 1 \\<le> a x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)", "using eventually_ge_at_top[of \"-exp (-1)\"]"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top. x \\<le> a x * exp (a x)\n  \\<forall>\\<^sub>F x in at_top. - 1 \\<le> a x\n  eventually ((\\<le>) (- exp (- (1::?'a1)))) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> a x * exp (a x); - 1 \\<le> a x;\n        - exp (- 1) \\<le> x\\<rbrakk>\n       \\<Longrightarrow> Lambert_W x - ln x + ln (ln x)\n                         \\<le> c' * (ln (ln x) / ln x)", "case (elim x)"], ["proof (state)\nthis:\n  x \\<le> a x * exp (a x)\n  - 1 \\<le> a x\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> a x * exp (a x); - 1 \\<le> a x;\n        - exp (- 1) \\<le> x\\<rbrakk>\n       \\<Longrightarrow> Lambert_W x - ln x + ln (ln x)\n                         \\<le> c' * (ln (ln x) / ln x)", "hence \"Lambert_W x \\<le> a x\""], ["proof (prove)\nusing this:\n  x \\<le> a x * exp (a x)\n  - 1 \\<le> a x\n  - exp (- 1) \\<le> x\n\ngoal (1 subgoal):\n 1. Lambert_W x \\<le> a x", "by (intro Lambert_W_leI)"], ["proof (state)\nthis:\n  Lambert_W x \\<le> a x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> a x * exp (a x); - 1 \\<le> a x;\n        - exp (- 1) \\<le> x\\<rbrakk>\n       \\<Longrightarrow> Lambert_W x - ln x + ln (ln x)\n                         \\<le> c' * (ln (ln x) / ln x)", "thus ?case"], ["proof (prove)\nusing this:\n  Lambert_W x \\<le> a x\n\ngoal (1 subgoal):\n 1. Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)", "by (simp add: a_def)"], ["proof (state)\nthis:\n  Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top.\n     Lambert_W x - ln x + ln (ln x) \\<le> c' * (ln (ln x) / ln x)\n\ngoal (3 subgoals):\n 1. 0 < 1\n 2. 1 < 2\n 3. 1 \\<noteq> 0", "qed auto"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      Lambert_W x - ln x +\n      ln (ln x)) \\<sim>[at_top] (\\<lambda>x. 1 * (ln (ln x) / ln x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W x - ln x +\n        ln (ln x)) \\<sim>[at_top] (\\<lambda>x. ln (ln x) / ln x)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      Lambert_W x - ln x +\n      ln (ln x)) \\<sim>[at_top] (\\<lambda>x. 1 * (ln (ln x) / ln x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Lambert_W x - ln x +\n        ln (ln x)) \\<sim>[at_top] (\\<lambda>x. ln (ln x) / ln x)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      Lambert_W x - ln x +\n      ln (ln x)) \\<sim>[at_top] (\\<lambda>x. ln (ln x) / ln x)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}