{"file_name": "/home/qj213/afp-2021-10-22/thys/IMP2/lib/IMP2_Aux_Lemmas.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/IMP2", "problem_names": ["lemma wf_bounded_supset: \"finite S \\<Longrightarrow> wf {(Q',Q). Q'\\<supset>Q \\<and> Q'\\<subseteq> S}\"", "lemma finite_psupset_wf[simp, intro]: \"finite S \\<Longrightarrow> wf (finite_psupset S)\"", "lemmas nat_distribs = nat_add_distrib nat_diff_distrib Suc_diff_le nat_mult_distrib nat_div_distrib", "lemma intvs_singleton[simp]: \n  \"{i::int..<i + 1} = {i}\" \n  \"{i-1..<i::int} = {i-1}\"", "lemma intvs_incr_h:\n  \"l\\<le>h \\<Longrightarrow> {l::int..<h + 1} = insert h {l..<h}\"", "lemma intvs_decr_h:\n  \"{l::int..<h - 1} = {l..<h} - {h-1}\"", "lemma intvs_incr_l:\n  \"{l+1..<h::int} = {l..<h} - {l}\"", "lemma intvs_decr_l:\n  \"l\\<le>h \\<Longrightarrow> {l-1..<h::int} = insert (l-1) {l..<h}\"", "lemma intvs_ii_incdec:\n  fixes l h :: int\n  shows \"l\\<le>h+1 \\<Longrightarrow> {l..h+1} = insert (h+1) {l..h}\"  \n    and \"l-1\\<le>h \\<Longrightarrow> {l-1..h} = insert (l-1) {l..h}\"  \n    and \"{l+1..h} = {l..h} - {l}\"\n    and \"{l..h-1} = {l..h} - {h}\"", "lemmas intvs_ie_incdec = intvs_incr_h intvs_incr_l intvs_decr_h intvs_decr_l", "lemmas intvs_incdec = intvs_ie_incdec intvs_ii_incdec", "lemma intvs_lower_incr: \"l<h \\<Longrightarrow> {l::int..<h} = insert l ({l+1..<h})\"", "lemma intvs_upper_decr: \"l<h \\<Longrightarrow> {l::int..<h} = insert (h-1) ({l..<h-1})\"", "lemmas intv_induct = intv_fwd_induct_scheme.induct[case_names incr]", "lemmas intv_bwd_induct = intv_bwd_induct_scheme.induct[case_names decr]", "lemma image_mset_subst_outside: \"x\\<notin>#s \\<Longrightarrow> image_mset (f(x:=y)) s = image_mset f s\"", "lemma image_mset_set_subst_inside:\n  assumes \"finite S\"\n  assumes \"i\\<in>S\"\n  shows \"image_mset (f(i:=x)) (mset_set S) = image_mset f (mset_set S) + {#x#} - {#f i#} \"", "lemma image_mset_eq_imp_set_eq: \n  assumes \"image_mset f s = image_mset g s\"  \n  shows \"f`(set_mset s) = g`set_mset s\"", "lemma eq_on_subst_same: \n  \"x\\<in>X \\<Longrightarrow> s(x:=v) = t on X \\<longleftrightarrow> t x = v \\<and> s=t on (X-{x})\"  \n  \"x\\<in>X \\<Longrightarrow> s = t(x:=v) on X \\<longleftrightarrow> s x = v \\<and> s=t on (X-{x})\"", "lemma eq_on_subst_other[simp]: \n  \"x\\<notin>X \\<Longrightarrow> s(x:=v) = t on X \\<longleftrightarrow> s=t on X\"\n  \"x\\<notin>X \\<Longrightarrow> s = t(x:=v) on X \\<longleftrightarrow> s=t on X\"", "lemma eq_on_refl[simp]: \"s = s on X\"", "lemma eq_on_sym[sym]: \"s=t on X \\<Longrightarrow> t=s on X\"", "lemma eq_on_trans[trans]: \"r=s on X \\<Longrightarrow> s=t on X \\<Longrightarrow> r=t on X\"", "lemma eq_on_trans'[trans]: \"r=s on X \\<Longrightarrow> s=t on X' \\<Longrightarrow> r=t on (X\\<inter>X')\"", "lemma eq_onD: \"r = s on X \\<Longrightarrow> x\\<in>X \\<Longrightarrow> r x = s x\"", "lemma eq_on_xfer_pointwise: \"\\<lbrakk>a=a' on r'; r\\<subseteq>r'\\<rbrakk> \\<Longrightarrow> (\\<forall>i\\<in>r. P (a i)) \\<longleftrightarrow> (\\<forall>i\\<in>r. P (a' i))\"", "lemma ran_sorted_alt: \"ran_sorted a l h = ( \\<forall>i j. l\\<le>i \\<and> i<j \\<and> j<h \\<longrightarrow> a i \\<le> a j)\"", "lemma ran_sorted_empty[simp]: \"ran_sorted a l l\"", "lemma ran_sorted_singleton[simp]: \"ran_sorted a l (l+1)\"", "lemma eq_on_xfer_ran_sorted: \"\\<lbrakk> a=a' on r'; {l..<h} \\<subseteq> r' \\<rbrakk> \\<Longrightarrow> ran_sorted a l h \\<longleftrightarrow> ran_sorted a' l h\"", "lemma combine_sorted_pivot:\n  assumes \"l\\<le>i\" \"i<h\"\n  assumes \"ran_sorted a l i\"\n  assumes \"ran_sorted a (i+1) h\"\n  assumes \"\\<forall>k\\<in>{l..<i}. a k < a i\"\n  assumes \"\\<forall>k\\<in>{i+1..<h}. a k \\<ge> a i\"\n  shows \"ran_sorted a l h\"", "lemma mset_ran_infinite[simp]: \"infinite r \\<Longrightarrow> mset_ran a r = {#}\"", "lemma mset_ran_by_sum: \"mset_ran a r = (\\<Sum>i\\<in>r. {#a i#})\"", "lemma mset_ran_mem[simp, intro]: \"finite r \\<Longrightarrow> i\\<in>r \\<Longrightarrow> a i \\<in># mset_ran a r\"", "lemma mset_ran_empty[simp]: \n  \"mset_ran a {} = {#}\"", "lemma mset_ran_empty_iff[simp]: \n  \"finite r \\<Longrightarrow> mset_ran a r = {#} \\<longleftrightarrow> r={}\"", "lemma mset_ran_single[simp]: \"mset_ran a {i} = {#a i#}\"", "lemma mset_ran_eq_single_conv: \"mset_ran a r = {#x#} \\<longleftrightarrow> (\\<exists>i. r={i} \\<and> x= a i)\"", "lemma mset_ran_insert: \"\\<lbrakk>finite r; i\\<notin>r\\<rbrakk> \\<Longrightarrow> mset_ran a (insert i r) = add_mset (a i) (mset_ran a r)\"", "lemma mset_ran_subst_outside: \"i\\<notin>r \\<Longrightarrow> mset_ran (a(i:=x)) r = mset_ran a r\"", "lemma mset_ran_subst_inside: \"finite r \\<Longrightarrow> i\\<in>r \\<Longrightarrow> mset_ran (a(i:=x)) r = mset_ran a r + {#x#} - {#a i#}\"", "lemma mset_ran_combine1: \"\\<lbrakk>finite r\\<^sub>1; finite r\\<^sub>2; r\\<^sub>1\\<inter>r\\<^sub>2={}\\<rbrakk> \\<Longrightarrow> mset_ran a r\\<^sub>1 + mset_ran a r\\<^sub>2 = mset_ran a (r\\<^sub>1\\<union>r\\<^sub>2)\"", "lemma mset_ran_combine2: \"\\<lbrakk>finite r; i\\<notin>r\\<rbrakk> \\<Longrightarrow> add_mset (a i) (mset_ran a r) = mset_ran a (insert i r)\"", "lemmas mset_ran_combine = mset_ran_combine1 mset_ran_combine2", "lemma mset_ran_cong:  \n  \"a = b on r \\<Longrightarrow> mset_ran a r = mset_ran b r\"", "lemma mset_ran_shift:\n  \"inj_on f r \\<Longrightarrow> mset_ran (a o f) r = mset_ran a (f`r)\"", "lemma mset_ran_combine_eqs:\n  assumes \"mset_ran a r\\<^sub>1 = mset_ran b r\\<^sub>1\"\n  assumes \"mset_ran a r\\<^sub>2 = mset_ran b r\\<^sub>2\"\n  assumes \"r\\<^sub>1\\<inter>r\\<^sub>2 = {}\"\n  shows \"mset_ran a (r\\<^sub>1\\<union>r\\<^sub>2) = mset_ran b (r\\<^sub>1\\<union>r\\<^sub>2)\"", "lemma mset_ran_combine_eq_diff:\n  assumes \"mset_ran a (r-I) = mset_ran a' (r-I)\" \n  assumes \"a=a' on I\"  \n  shows \"mset_ran a r = mset_ran a' r\"", "lemma mset_ran_eq_extend:\n  assumes \"mset_ran a r' = mset_ran a' r'\"\n  assumes \"a = a' on r2\"\n  assumes \"r-r' \\<subseteq> r2\"\n  assumes \"r'\\<subseteq>r\"\n  shows \"mset_ran a r = mset_ran a' r\"", "lemma mset_ran_xfer_pointwise:\n  assumes \"mset_ran a r = mset_ran a' r\"\n  assumes \"finite r\"\n  shows \"(\\<forall>i\\<in>r. P (a i)) \\<longleftrightarrow> (\\<forall>i\\<in>r. P (a' i))\"", "lemma mset_ran_swap: \"\\<lbrakk> i\\<in>r; j\\<in>r \\<rbrakk> \n  \\<Longrightarrow> mset_ran (swap a i j) r = mset_ran a r\"", "lemma lran_empty[simp]: \n  \"lran a l l = []\"\n  \"lran a l h = [] \\<longleftrightarrow> h\\<le>l\"", "lemma lran_bwd_simp: \"lran a l h = (if l<h then lran a l (h-1)@[a (h-1)] else [])\"", "lemma length_lran[simp]: \"length (lran a l h) = nat (h-l)\"", "lemma nth_lran[simp]: \"int i < h-l \\<Longrightarrow> lran a l h ! i = a (l + int i)\"", "lemma lran_append1[simp]: \"l\\<le>h \\<Longrightarrow> lran a l (h + 1) = lran a l h @ [a h]\"", "lemma lran_prepend1[simp]: \"l\\<le>h \\<Longrightarrow> lran a (l-1) h = a(l-1) # lran a l h\"", "lemma lran_tail[simp]: \"lran a (l+1) h = tl (lran a l h)\"", "lemma lran_butlast[simp]: \"lran a l (h-1) = butlast (lran a l h)\"", "lemma hd_lran[simp]: \"l<h \\<Longrightarrow> hd (lran a l h) = a l\"", "lemma last_lran[simp]: \"l<h \\<Longrightarrow> last (lran a l h) = a (h-1)\"", "lemma lran_upd_outside[simp]:\n  \"i<l \\<Longrightarrow> lran (a(i:=x)) l h = lran a l h\"\n  \"h\\<le>i \\<Longrightarrow> lran (a(i:=x)) l h = lran a l h\"", "lemma lran_upd_inside: \"i\\<in>{l..<h} \\<Longrightarrow> lran (a(i:=x)) l h = (lran a l h)[nat (i-l) := x]\"", "lemma tl_upd_at0[simp]: \"tl (xs[0:=x]) = tl xs\"", "lemma lran_eq_iff: \"lran a l h = lran a' l h \\<longleftrightarrow> (\\<forall>i. l\\<le>i \\<and> i<h \\<longrightarrow> a i = a' i)\"", "lemma set_lran: \"set (lran a l h) = a`{l..<h}\"", "lemma mset_lran: \"mset (lran a l h) = mset_ran a {l..<h}\""], "translations": [["", "lemma wf_bounded_supset: \"finite S \\<Longrightarrow> wf {(Q',Q). Q'\\<supset>Q \\<and> Q'\\<subseteq> S}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    wf {(Q', Q). Q \\<subset> Q' \\<and> Q' \\<subseteq> S}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    wf {(Q', Q). Q \\<subset> Q' \\<and> Q' \\<subseteq> S}", "assume [simp]: \"finite S\""], ["proof (state)\nthis:\n  finite S\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    wf {(Q', Q). Q \\<subset> Q' \\<and> Q' \\<subseteq> S}", "hence [simp]: \"!!x. finite (S-x)\""], ["proof (prove)\nusing this:\n  finite S\n\ngoal (1 subgoal):\n 1. \\<And>x. finite (S - x)", "by auto"], ["proof (state)\nthis:\n  finite (S - ?x)\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    wf {(Q', Q). Q \\<subset> Q' \\<and> Q' \\<subseteq> S}", "have \"{(Q',Q). Q\\<subset>Q' \\<and> Q'\\<subseteq> S} \\<subseteq> inv_image ({(s'::nat,s). s'<s}) (\\<lambda>Q. card (S-Q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(Q', Q). Q \\<subset> Q' \\<and> Q' \\<subseteq> S}\n    \\<subseteq> inv_image {(s', s). s' < s} (\\<lambda>Q. card (S - Q))", "proof (intro subsetI, case_tac x, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       \\<lbrakk>b \\<subset> a \\<and> a \\<subseteq> S; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> card (S - a) < card (S - b)", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       \\<lbrakk>b \\<subset> a \\<and> a \\<subseteq> S; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> card (S - a) < card (S - b)", "assume A: \"b\\<subset>a \\<and> a\\<subseteq>S\""], ["proof (state)\nthis:\n  b \\<subset> a \\<and> a \\<subseteq> S\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       \\<lbrakk>b \\<subset> a \\<and> a \\<subseteq> S; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> card (S - a) < card (S - b)", "hence \"S-a \\<subset> S-b\""], ["proof (prove)\nusing this:\n  b \\<subset> a \\<and> a \\<subseteq> S\n\ngoal (1 subgoal):\n 1. S - a \\<subset> S - b", "by blast"], ["proof (state)\nthis:\n  S - a \\<subset> S - b\n\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       \\<lbrakk>b \\<subset> a \\<and> a \\<subseteq> S; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> card (S - a) < card (S - b)", "thus \"card (S-a) < card (S-b)\""], ["proof (prove)\nusing this:\n  S - a \\<subset> S - b\n\ngoal (1 subgoal):\n 1. card (S - a) < card (S - b)", "by (auto simp add: psubset_card_mono)"], ["proof (state)\nthis:\n  card (S - a) < card (S - b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {(Q', Q). Q \\<subset> Q' \\<and> Q' \\<subseteq> S}\n  \\<subseteq> inv_image {(s', s). s' < s} (\\<lambda>Q. card (S - Q))\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    wf {(Q', Q). Q \\<subset> Q' \\<and> Q' \\<subseteq> S}", "moreover"], ["proof (state)\nthis:\n  {(Q', Q). Q \\<subset> Q' \\<and> Q' \\<subseteq> S}\n  \\<subseteq> inv_image {(s', s). s' < s} (\\<lambda>Q. card (S - Q))\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    wf {(Q', Q). Q \\<subset> Q' \\<and> Q' \\<subseteq> S}", "have \"wf ({(s'::nat,s). s'<s})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(s', s). s' < s}", "by (rule wf_less)"], ["proof (state)\nthis:\n  wf {(s', s). s' < s}\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    wf {(Q', Q). Q \\<subset> Q' \\<and> Q' \\<subseteq> S}", "ultimately"], ["proof (chain)\npicking this:\n  {(Q', Q). Q \\<subset> Q' \\<and> Q' \\<subseteq> S}\n  \\<subseteq> inv_image {(s', s). s' < s} (\\<lambda>Q. card (S - Q))\n  wf {(s', s). s' < s}", "show ?thesis"], ["proof (prove)\nusing this:\n  {(Q', Q). Q \\<subset> Q' \\<and> Q' \\<subseteq> S}\n  \\<subseteq> inv_image {(s', s). s' < s} (\\<lambda>Q. card (S - Q))\n  wf {(s', s). s' < s}\n\ngoal (1 subgoal):\n 1. wf {(Q', Q). Q \\<subset> Q' \\<and> Q' \\<subseteq> S}", "by (blast intro: wf_subset)"], ["proof (state)\nthis:\n  wf {(Q', Q). Q \\<subset> Q' \\<and> Q' \\<subseteq> S}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Well-founded relation to approximate a finite set from below\\<close>"], ["", "definition \"finite_psupset S \\<equiv> { (Q',Q). Q\\<subset>Q' \\<and> Q' \\<subseteq> S }\""], ["", "lemma finite_psupset_wf[simp, intro]: \"finite S \\<Longrightarrow> wf (finite_psupset S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow> wf (finite_psupset S)", "unfolding finite_psupset_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    wf {(Q', Q). Q \\<subset> Q' \\<and> Q' \\<subseteq> S}", "by (blast intro: wf_bounded_supset)"], ["", "subsection \\<open>Conversion between \\<open>nat\\<close> and \\<open>int\\<close>\\<close>"], ["", "lemmas nat_distribs = nat_add_distrib nat_diff_distrib Suc_diff_le nat_mult_distrib nat_div_distrib"], ["", "subsection \\<open>Interval Sets\\<close>"], ["", "lemma intvs_singleton[simp]: \n  \"{i::int..<i + 1} = {i}\" \n  \"{i-1..<i::int} = {i-1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i..<i + 1} = {i} &&& {i - 1..<i} = {i - 1}", "by auto"], ["", "lemma intvs_incr_h:\n  \"l\\<le>h \\<Longrightarrow> {l::int..<h + 1} = insert h {l..<h}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<le> h \\<Longrightarrow> {l..<h + 1} = insert h {l..<h}", "by auto"], ["", "lemma intvs_decr_h:\n  \"{l::int..<h - 1} = {l..<h} - {h-1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l..<h - 1} = {l..<h} - {h - 1}", "by auto"], ["", "lemma intvs_incr_l:\n  \"{l+1..<h::int} = {l..<h} - {l}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {l + 1..<h} = {l..<h} - {l}", "by auto"], ["", "lemma intvs_decr_l:\n  \"l\\<le>h \\<Longrightarrow> {l-1..<h::int} = insert (l-1) {l..<h}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<le> h \\<Longrightarrow> {l - 1..<h} = insert (l - 1) {l..<h}", "by auto"], ["", "lemma intvs_ii_incdec:\n  fixes l h :: int\n  shows \"l\\<le>h+1 \\<Longrightarrow> {l..h+1} = insert (h+1) {l..h}\"  \n    and \"l-1\\<le>h \\<Longrightarrow> {l-1..h} = insert (l-1) {l..h}\"  \n    and \"{l+1..h} = {l..h} - {l}\"\n    and \"{l..h-1} = {l..h} - {h}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((l \\<le> h + 1 \\<Longrightarrow>\n      {l..h + 1} = insert (h + 1) {l..h}) &&&\n     (l - 1 \\<le> h \\<Longrightarrow>\n      {l - 1..h} = insert (l - 1) {l..h})) &&&\n    {l + 1..h} = {l..h} - {l} &&& {l..h - 1} = {l..h} - {h}", "by auto"], ["", "lemmas intvs_ie_incdec = intvs_incr_h intvs_incr_l intvs_decr_h intvs_decr_l"], ["", "(* TODO: Add lemmas for ei, ee *)"], ["", "lemmas intvs_incdec = intvs_ie_incdec intvs_ii_incdec"], ["", "lemma intvs_lower_incr: \"l<h \\<Longrightarrow> {l::int..<h} = insert l ({l+1..<h})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l < h \\<Longrightarrow> {l..<h} = insert l {l + 1..<h}", "by auto"], ["", "lemma intvs_upper_decr: \"l<h \\<Longrightarrow> {l::int..<h} = insert (h-1) ({l..<h-1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l < h \\<Longrightarrow> {l..<h} = insert (h - 1) {l..<h - 1}", "by auto"], ["", "subsubsection \\<open>Induction on Intervals\\<close>"], ["", "function intv_fwd_induct_scheme :: \"int \\<Rightarrow> int \\<Rightarrow> unit\" where\n  \"intv_fwd_induct_scheme l h = (if l<h then intv_fwd_induct_scheme (l+1) h else ())\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>l h. x = (l, h) \\<Longrightarrow> P) \\<Longrightarrow> P\n 2. \\<And>l h la ha.\n       (l, h) = (la, ha) \\<Longrightarrow>\n       (if l < h then intv_fwd_induct_scheme_sumC (l + 1, h) else ()) =\n       (if la < ha then intv_fwd_induct_scheme_sumC (la + 1, ha) else ())", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All intv_fwd_induct_scheme_dom", "apply (relation \"measure (\\<lambda>(l,h). nat (h-l))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf (measure (\\<lambda>(l, h). nat (h - l)))\n 2. \\<And>l h.\n       l < h \\<Longrightarrow>\n       ((l + 1, h), l, h) \\<in> measure (\\<lambda>(l, h). nat (h - l))", "by auto"], ["", "lemmas intv_induct = intv_fwd_induct_scheme.induct[case_names incr]"], ["", "function intv_bwd_induct_scheme :: \"int \\<Rightarrow> int \\<Rightarrow> unit\" where\n  \"intv_bwd_induct_scheme l h = (if l<h then intv_bwd_induct_scheme l (h-1) else ())\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>l h. x = (l, h) \\<Longrightarrow> P) \\<Longrightarrow> P\n 2. \\<And>l h la ha.\n       (l, h) = (la, ha) \\<Longrightarrow>\n       (if l < h then intv_bwd_induct_scheme_sumC (l, h - 1) else ()) =\n       (if la < ha then intv_bwd_induct_scheme_sumC (la, ha - 1) else ())", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All intv_bwd_induct_scheme_dom", "apply (relation \"measure (\\<lambda>(l,h). nat (h-l))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf (measure (\\<lambda>(l, h). nat (h - l)))\n 2. \\<And>l h.\n       l < h \\<Longrightarrow>\n       ((l, h - 1), l, h) \\<in> measure (\\<lambda>(l, h). nat (h - l))", "by auto"], ["", "lemmas intv_bwd_induct = intv_bwd_induct_scheme.induct[case_names decr]"], ["", "subsection \\<open>Multiset Lemmas\\<close>"], ["", "lemma image_mset_subst_outside: \"x\\<notin>#s \\<Longrightarrow> image_mset (f(x:=y)) s = image_mset f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin># s \\<Longrightarrow>\n    image_mset (f(x := y)) s = image_mset f s", "by (induction s) auto"], ["", "lemma image_mset_set_subst_inside:\n  assumes \"finite S\"\n  assumes \"i\\<in>S\"\n  shows \"image_mset (f(i:=x)) (mset_set S) = image_mset f (mset_set S) + {#x#} - {#f i#} \""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset (f(i := x)) (mset_set S) =\n    image_mset f (mset_set S) + {#x#} - {#f i#}", "using assms"], ["proof (prove)\nusing this:\n  finite S\n  i \\<in> S\n\ngoal (1 subgoal):\n 1. image_mset (f(i := x)) (mset_set S) =\n    image_mset f (mset_set S) + {#x#} - {#f i#}", "by (induction rule: finite_induct) (auto simp: image_mset_subst_outside)"], ["", "lemma image_mset_eq_imp_set_eq: \n  assumes \"image_mset f s = image_mset g s\"  \n  shows \"f`(set_mset s) = g`set_mset s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` set_mset s = g ` set_mset s", "using assms"], ["proof (prove)\nusing this:\n  image_mset f s = image_mset g s\n\ngoal (1 subgoal):\n 1. f ` set_mset s = g ` set_mset s", "by (metis set_image_mset)"], ["", "subsection \\<open>Equal on Set\\<close>"], ["", "definition eq_on :: \"('a \\<Rightarrow> 'b) \\<Rightarrow> ('a \\<Rightarrow> 'b) \\<Rightarrow> 'a set \\<Rightarrow> bool\" (\"_ = _ on _\" [50,50,50] 50)\n  where \"s=t on X \\<longleftrightarrow> (\\<forall>x\\<in>X. s x = t x)\""], ["", "lemma eq_on_subst_same: \n  \"x\\<in>X \\<Longrightarrow> s(x:=v) = t on X \\<longleftrightarrow> t x = v \\<and> s=t on (X-{x})\"  \n  \"x\\<in>X \\<Longrightarrow> s = t(x:=v) on X \\<longleftrightarrow> s x = v \\<and> s=t on (X-{x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> X \\<Longrightarrow>\n     (s(x := v) = t on X) = (t x = v \\<and> s = t on X - {x})) &&&\n    (x \\<in> X \\<Longrightarrow>\n     (s = t(x := v) on X) = (s x = v \\<and> s = t on X - {x}))", "by (auto simp: eq_on_def)"], ["", "lemma eq_on_subst_other[simp]: \n  \"x\\<notin>X \\<Longrightarrow> s(x:=v) = t on X \\<longleftrightarrow> s=t on X\"\n  \"x\\<notin>X \\<Longrightarrow> s = t(x:=v) on X \\<longleftrightarrow> s=t on X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<notin> X \\<Longrightarrow> (s(x := v) = t on X) = (s = t on X)) &&&\n    (x \\<notin> X \\<Longrightarrow> (s = t(x := v) on X) = (s = t on X))", "by (auto simp: eq_on_def)"], ["", "lemma eq_on_refl[simp]: \"s = s on X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = s on X", "by (auto simp: eq_on_def)"], ["", "lemma eq_on_sym[sym]: \"s=t on X \\<Longrightarrow> t=s on X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = t on X \\<Longrightarrow> t = s on X", "by (auto simp: eq_on_def)"], ["", "lemma eq_on_trans[trans]: \"r=s on X \\<Longrightarrow> s=t on X \\<Longrightarrow> r=t on X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r = s on X; s = t on X\\<rbrakk> \\<Longrightarrow> r = t on X", "by (auto simp: eq_on_def)"], ["", "lemma eq_on_trans'[trans]: \"r=s on X \\<Longrightarrow> s=t on X' \\<Longrightarrow> r=t on (X\\<inter>X')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r = s on X; s = t on X'\\<rbrakk>\n    \\<Longrightarrow> r = t on X \\<inter> X'", "by (auto simp: eq_on_def)"], ["", "lemma eq_onD: \"r = s on X \\<Longrightarrow> x\\<in>X \\<Longrightarrow> r x = s x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r = s on X; x \\<in> X\\<rbrakk> \\<Longrightarrow> r x = s x", "by (auto simp: eq_on_def)"], ["", "lemma eq_on_xfer_pointwise: \"\\<lbrakk>a=a' on r'; r\\<subseteq>r'\\<rbrakk> \\<Longrightarrow> (\\<forall>i\\<in>r. P (a i)) \\<longleftrightarrow> (\\<forall>i\\<in>r. P (a' i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = a' on r'; r \\<subseteq> r'\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>i\\<in>r. P (a i)) =\n                      (\\<forall>i\\<in>r. P (a' i))", "by (auto simp: eq_on_def subset_iff)"], ["", "subsection \\<open>Arrays\\<close>"], ["", "subsubsection \\<open>Sortedness\\<close>"], ["", "text \\<open>Sortedness as monotonicity property\\<close>"], ["", "definition ran_sorted :: \"(int \\<Rightarrow> int) \\<Rightarrow> int \\<Rightarrow> int \\<Rightarrow> bool\" where\n  \"ran_sorted a l h \\<equiv> \\<forall>i\\<in>{l..<h}. \\<forall>j\\<in>{l..<h}. i\\<le>j \\<longrightarrow> a i \\<le> a j\""], ["", "text \\<open>Alternative definition\\<close>"], ["", "lemma ran_sorted_alt: \"ran_sorted a l h = ( \\<forall>i j. l\\<le>i \\<and> i<j \\<and> j<h \\<longrightarrow> a i \\<le> a j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ran_sorted a l h =\n    (\\<forall>i j.\n        l \\<le> i \\<and> i < j \\<and> j < h \\<longrightarrow> a i \\<le> a j)", "unfolding ran_sorted_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>{l..<h}.\n        \\<forall>j\\<in>{l..<h}. i \\<le> j \\<longrightarrow> a i \\<le> a j) =\n    (\\<forall>i j.\n        l \\<le> i \\<and> i < j \\<and> j < h \\<longrightarrow> a i \\<le> a j)", "by auto (metis dual_order.order_iff_strict)"], ["", "lemma ran_sorted_empty[simp]: \"ran_sorted a l l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ran_sorted a l l", "by (auto simp: ran_sorted_def)"], ["", "lemma ran_sorted_singleton[simp]: \"ran_sorted a l (l+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ran_sorted a l (l + 1)", "by (auto simp: ran_sorted_def)"], ["", "lemma eq_on_xfer_ran_sorted: \"\\<lbrakk> a=a' on r'; {l..<h} \\<subseteq> r' \\<rbrakk> \\<Longrightarrow> ran_sorted a l h \\<longleftrightarrow> ran_sorted a' l h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = a' on r'; {l..<h} \\<subseteq> r'\\<rbrakk>\n    \\<Longrightarrow> ran_sorted a l h = ran_sorted a' l h", "unfolding ran_sorted_alt eq_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>r'. a x = a' x; {l..<h} \\<subseteq> r'\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>i j.\n                          l \\<le> i \\<and>\n                          i < j \\<and> j < h \\<longrightarrow>\n                          a i \\<le> a j) =\n                      (\\<forall>i j.\n                          l \\<le> i \\<and>\n                          i < j \\<and> j < h \\<longrightarrow>\n                          a' i \\<le> a' j)", "by (auto simp: subset_iff)"], ["", "lemma combine_sorted_pivot:\n  assumes \"l\\<le>i\" \"i<h\"\n  assumes \"ran_sorted a l i\"\n  assumes \"ran_sorted a (i+1) h\"\n  assumes \"\\<forall>k\\<in>{l..<i}. a k < a i\"\n  assumes \"\\<forall>k\\<in>{i+1..<h}. a k \\<ge> a i\"\n  shows \"ran_sorted a l h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ran_sorted a l h", "using assms"], ["proof (prove)\nusing this:\n  l \\<le> i\n  i < h\n  ran_sorted a l i\n  ran_sorted a (i + 1) h\n  \\<forall>k\\<in>{l..<i}. a k < a i\n  \\<forall>k\\<in>{i + 1..<h}. a i \\<le> a k\n\ngoal (1 subgoal):\n 1. ran_sorted a l h", "unfolding ran_sorted_def Ball_def"], ["proof (prove)\nusing this:\n  l \\<le> i\n  i < h\n  \\<forall>x.\n     x \\<in> {l..<i} \\<longrightarrow>\n     (\\<forall>xa.\n         xa \\<in> {l..<i} \\<longrightarrow>\n         x \\<le> xa \\<longrightarrow> a x \\<le> a xa)\n  \\<forall>x.\n     x \\<in> {i + 1..<h} \\<longrightarrow>\n     (\\<forall>xa.\n         xa \\<in> {i + 1..<h} \\<longrightarrow>\n         x \\<le> xa \\<longrightarrow> a x \\<le> a xa)\n  \\<forall>x. x \\<in> {l..<i} \\<longrightarrow> a x < a i\n  \\<forall>x. x \\<in> {i + 1..<h} \\<longrightarrow> a i \\<le> a x\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> {l..<h} \\<longrightarrow>\n       (\\<forall>xa.\n           xa \\<in> {l..<h} \\<longrightarrow>\n           x \\<le> xa \\<longrightarrow> a x \\<le> a xa)", "by clarsimp smt"], ["", "subsubsection \\<open>Multiset of Ranges in Arrays\\<close>"], ["", "definition mset_ran :: \"(int \\<Rightarrow> 'a) \\<Rightarrow> int set \\<Rightarrow> 'a multiset\"\n  where \"mset_ran a r \\<equiv> image_mset a (mset_set r)\""], ["", "lemma mset_ran_infinite[simp]: \"infinite r \\<Longrightarrow> mset_ran a r = {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite r \\<Longrightarrow> mset_ran a r = {#}", "by (auto simp: mset_ran_def)"], ["", "lemma mset_ran_by_sum: \"mset_ran a r = (\\<Sum>i\\<in>r. {#a i#})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_ran a r = (\\<Sum>i\\<in>r. {#a i#})", "proof (cases \"finite r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. finite r \\<Longrightarrow> mset_ran a r = (\\<Sum>i\\<in>r. {#a i#})\n 2. infinite r \\<Longrightarrow> mset_ran a r = (\\<Sum>i\\<in>r. {#a i#})", "case True"], ["proof (state)\nthis:\n  finite r\n\ngoal (2 subgoals):\n 1. finite r \\<Longrightarrow> mset_ran a r = (\\<Sum>i\\<in>r. {#a i#})\n 2. infinite r \\<Longrightarrow> mset_ran a r = (\\<Sum>i\\<in>r. {#a i#})", "thus ?thesis"], ["proof (prove)\nusing this:\n  finite r\n\ngoal (1 subgoal):\n 1. mset_ran a r = (\\<Sum>i\\<in>r. {#a i#})", "apply (induction r)"], ["proof (prove)\ngoal (2 subgoals):\n 1. mset_ran a {} = (\\<Sum>i\\<in>{}. {#a i#})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        mset_ran a F = (\\<Sum>i\\<in>F. {#a i#})\\<rbrakk>\n       \\<Longrightarrow> mset_ran a (insert x F) =\n                         (\\<Sum>i\\<in>insert x F. {#a i#})", "apply (auto simp: mset_ran_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  mset_ran a r = (\\<Sum>i\\<in>r. {#a i#})\n\ngoal (1 subgoal):\n 1. infinite r \\<Longrightarrow> mset_ran a r = (\\<Sum>i\\<in>r. {#a i#})", "qed simp"], ["", "lemma mset_ran_mem[simp, intro]: \"finite r \\<Longrightarrow> i\\<in>r \\<Longrightarrow> a i \\<in># mset_ran a r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite r; i \\<in> r\\<rbrakk>\n    \\<Longrightarrow> a i \\<in># mset_ran a r", "by (auto simp: mset_ran_def)"], ["", "lemma mset_ran_empty[simp]: \n  \"mset_ran a {} = {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_ran a {} = {#}", "by (auto simp: mset_ran_def)"], ["", "lemma mset_ran_empty_iff[simp]: \n  \"finite r \\<Longrightarrow> mset_ran a r = {#} \\<longleftrightarrow> r={}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite r \\<Longrightarrow> (mset_ran a r = {#}) = (r = {})", "by (auto simp: mset_ran_def mset_set_empty_iff)"], ["", "lemma mset_ran_single[simp]: \"mset_ran a {i} = {#a i#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_ran a {i} = {#a i#}", "by (auto simp: mset_ran_def)"], ["", "lemma mset_ran_eq_single_conv: \"mset_ran a r = {#x#} \\<longleftrightarrow> (\\<exists>i. r={i} \\<and> x= a i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mset_ran a r = {#x#}) = (\\<exists>i. r = {i} \\<and> x = a i)", "apply (cases \"finite r\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite r \\<Longrightarrow>\n    (mset_ran a r = {#x#}) = (\\<exists>i. r = {i} \\<and> x = a i)\n 2. infinite r \\<Longrightarrow>\n    (mset_ran a r = {#x#}) = (\\<exists>i. r = {i} \\<and> x = a i)", "apply (auto simp: mset_ran_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite r; image_mset a (mset_set r) = {#x#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i. r = {i} \\<and> x = a i", "using finite_set_mset_mset_set msed_map_invR"], ["proof (prove)\nusing this:\n  finite ?A \\<Longrightarrow> set_mset (mset_set ?A) = ?A\n  image_mset ?f ?M = add_mset ?b ?N \\<Longrightarrow>\n  \\<exists>M1 a.\n     ?M = add_mset a M1 \\<and> ?f a = ?b \\<and> image_mset ?f M1 = ?N\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite r; image_mset a (mset_set r) = {#x#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i. r = {i} \\<and> x = a i", "by force"], ["", "lemma mset_ran_insert: \"\\<lbrakk>finite r; i\\<notin>r\\<rbrakk> \\<Longrightarrow> mset_ran a (insert i r) = add_mset (a i) (mset_ran a r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite r; i \\<notin> r\\<rbrakk>\n    \\<Longrightarrow> mset_ran a (insert i r) =\n                      add_mset (a i) (mset_ran a r)", "by (auto simp: mset_ran_def)"], ["", "lemma mset_ran_subst_outside: \"i\\<notin>r \\<Longrightarrow> mset_ran (a(i:=x)) r = mset_ran a r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<notin> r \\<Longrightarrow> mset_ran (a(i := x)) r = mset_ran a r", "unfolding mset_ran_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<notin> r \\<Longrightarrow>\n    image_mset (a(i := x)) (mset_set r) = image_mset a (mset_set r)", "by (cases \"finite r\") (auto simp: image_mset_subst_outside)"], ["", "lemma mset_ran_subst_inside: \"finite r \\<Longrightarrow> i\\<in>r \\<Longrightarrow> mset_ran (a(i:=x)) r = mset_ran a r + {#x#} - {#a i#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite r; i \\<in> r\\<rbrakk>\n    \\<Longrightarrow> mset_ran (a(i := x)) r =\n                      mset_ran a r + {#x#} - {#a i#}", "unfolding mset_ran_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite r; i \\<in> r\\<rbrakk>\n    \\<Longrightarrow> image_mset (a(i := x)) (mset_set r) =\n                      image_mset a (mset_set r) + {#x#} - {#a i#}", "by (auto simp: image_mset_set_subst_inside)"], ["", "lemma mset_ran_combine1: \"\\<lbrakk>finite r\\<^sub>1; finite r\\<^sub>2; r\\<^sub>1\\<inter>r\\<^sub>2={}\\<rbrakk> \\<Longrightarrow> mset_ran a r\\<^sub>1 + mset_ran a r\\<^sub>2 = mset_ran a (r\\<^sub>1\\<union>r\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite r\\<^sub>1; finite r\\<^sub>2;\n     r\\<^sub>1 \\<inter> r\\<^sub>2 = {}\\<rbrakk>\n    \\<Longrightarrow> mset_ran a r\\<^sub>1 + mset_ran a r\\<^sub>2 =\n                      mset_ran a (r\\<^sub>1 \\<union> r\\<^sub>2)", "by (auto simp: mset_ran_by_sum sum.union_disjoint[symmetric])"], ["", "lemma mset_ran_combine2: \"\\<lbrakk>finite r; i\\<notin>r\\<rbrakk> \\<Longrightarrow> add_mset (a i) (mset_ran a r) = mset_ran a (insert i r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite r; i \\<notin> r\\<rbrakk>\n    \\<Longrightarrow> add_mset (a i) (mset_ran a r) =\n                      mset_ran a (insert i r)", "using mset_ran_combine1[of \"{i}\" r a]"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite {i}; finite r; {i} \\<inter> r = {}\\<rbrakk>\n  \\<Longrightarrow> mset_ran a {i} + mset_ran a r =\n                    mset_ran a ({i} \\<union> r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite r; i \\<notin> r\\<rbrakk>\n    \\<Longrightarrow> add_mset (a i) (mset_ran a r) =\n                      mset_ran a (insert i r)", "by auto"], ["", "lemmas mset_ran_combine = mset_ran_combine1 mset_ran_combine2"], ["", "lemma mset_ran_cong:  \n  \"a = b on r \\<Longrightarrow> mset_ran a r = mset_ran b r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b on r \\<Longrightarrow> mset_ran a r = mset_ran b r", "apply (cases \"finite r\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a = b on r; finite r\\<rbrakk>\n    \\<Longrightarrow> mset_ran a r = mset_ran b r\n 2. \\<lbrakk>a = b on r; infinite r\\<rbrakk>\n    \\<Longrightarrow> mset_ran a r = mset_ran b r", "by (auto simp: mset_ran_by_sum eq_on_def)"], ["", "lemma mset_ran_shift:\n  \"inj_on f r \\<Longrightarrow> mset_ran (a o f) r = mset_ran a (f`r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f r \\<Longrightarrow>\n    mset_ran (a \\<circ> f) r = mset_ran a (f ` r)", "apply (auto simp: mset_ran_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f r \\<Longrightarrow>\n    image_mset (a \\<circ> f) (mset_set r) = image_mset a (mset_set (f ` r))", "by (metis image_mset_mset_set multiset.map_comp)"], ["", "lemma mset_ran_combine_eqs:\n  assumes \"mset_ran a r\\<^sub>1 = mset_ran b r\\<^sub>1\"\n  assumes \"mset_ran a r\\<^sub>2 = mset_ran b r\\<^sub>2\"\n  assumes \"r\\<^sub>1\\<inter>r\\<^sub>2 = {}\"\n  shows \"mset_ran a (r\\<^sub>1\\<union>r\\<^sub>2) = mset_ran b (r\\<^sub>1\\<union>r\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_ran a (r\\<^sub>1 \\<union> r\\<^sub>2) =\n    mset_ran b (r\\<^sub>1 \\<union> r\\<^sub>2)", "apply (cases \"finite r\\<^sub>1\"; cases \"finite r\\<^sub>2\"; simp?)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite r\\<^sub>1; finite r\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> mset_ran a (r\\<^sub>1 \\<union> r\\<^sub>2) =\n                      mset_ran b (r\\<^sub>1 \\<union> r\\<^sub>2)", "using assms(1,2)"], ["proof (prove)\nusing this:\n  mset_ran a r\\<^sub>1 = mset_ran b r\\<^sub>1\n  mset_ran a r\\<^sub>2 = mset_ran b r\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite r\\<^sub>1; finite r\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> mset_ran a (r\\<^sub>1 \\<union> r\\<^sub>2) =\n                      mset_ran b (r\\<^sub>1 \\<union> r\\<^sub>2)", "apply (simp add: mset_ran_combine1[OF _ _ assms(3), symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mset_ran_combine_eq_diff:\n  assumes \"mset_ran a (r-I) = mset_ran a' (r-I)\" \n  assumes \"a=a' on I\"  \n  shows \"mset_ran a r = mset_ran a' r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_ran a r = mset_ran a' r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mset_ran a r = mset_ran a' r", "have [simp]: \"(r - I) \\<inter> (r \\<inter> I) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r - I) \\<inter> (r \\<inter> I) = {}", "by auto"], ["proof (state)\nthis:\n  (r - I) \\<inter> (r \\<inter> I) = {}\n\ngoal (1 subgoal):\n 1. mset_ran a r = mset_ran a' r", "have [simp]: \"r - I \\<union> r \\<inter> I = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r - I \\<union> r \\<inter> I = r", "by auto"], ["proof (state)\nthis:\n  r - I \\<union> r \\<inter> I = r\n\ngoal (1 subgoal):\n 1. mset_ran a r = mset_ran a' r", "from assms(2)"], ["proof (chain)\npicking this:\n  a = a' on I", "have \"mset_ran a (r \\<inter> I) = mset_ran a' (r \\<inter> I)\""], ["proof (prove)\nusing this:\n  a = a' on I\n\ngoal (1 subgoal):\n 1. mset_ran a (r \\<inter> I) = mset_ran a' (r \\<inter> I)", "by (auto simp: mset_ran_by_sum eq_on_def)"], ["proof (state)\nthis:\n  mset_ran a (r \\<inter> I) = mset_ran a' (r \\<inter> I)\n\ngoal (1 subgoal):\n 1. mset_ran a r = mset_ran a' r", "from mset_ran_combine_eqs[OF assms(1) this]"], ["proof (chain)\npicking this:\n  (r - I) \\<inter> (r \\<inter> I) = {} \\<Longrightarrow>\n  mset_ran a (r - I \\<union> r \\<inter> I) =\n  mset_ran a' (r - I \\<union> r \\<inter> I)", "show ?thesis"], ["proof (prove)\nusing this:\n  (r - I) \\<inter> (r \\<inter> I) = {} \\<Longrightarrow>\n  mset_ran a (r - I \\<union> r \\<inter> I) =\n  mset_ran a' (r - I \\<union> r \\<inter> I)\n\ngoal (1 subgoal):\n 1. mset_ran a r = mset_ran a' r", "by auto"], ["proof (state)\nthis:\n  mset_ran a r = mset_ran a' r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mset_ran_eq_extend:\n  assumes \"mset_ran a r' = mset_ran a' r'\"\n  assumes \"a = a' on r2\"\n  assumes \"r-r' \\<subseteq> r2\"\n  assumes \"r'\\<subseteq>r\"\n  shows \"mset_ran a r = mset_ran a' r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_ran a r = mset_ran a' r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mset_ran a r = mset_ran a' r", "have [simp]: \"r' \\<inter> (r - r') = {}\" \"r' \\<union> r = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' \\<inter> (r - r') = {} &&& r' \\<union> r = r", "using assms(4)"], ["proof (prove)\nusing this:\n  r' \\<subseteq> r\n\ngoal (1 subgoal):\n 1. r' \\<inter> (r - r') = {} &&& r' \\<union> r = r", "by auto"], ["proof (state)\nthis:\n  r' \\<inter> (r - r') = {}\n  r' \\<union> r = r\n\ngoal (1 subgoal):\n 1. mset_ran a r = mset_ran a' r", "from assms(2,3)"], ["proof (chain)\npicking this:\n  a = a' on r2\n  r - r' \\<subseteq> r2", "have \"a=a' on r-r'\""], ["proof (prove)\nusing this:\n  a = a' on r2\n  r - r' \\<subseteq> r2\n\ngoal (1 subgoal):\n 1. a = a' on r - r'", "by (auto simp: eq_on_def)"], ["proof (state)\nthis:\n  a = a' on r - r'\n\ngoal (1 subgoal):\n 1. mset_ran a r = mset_ran a' r", "then"], ["proof (chain)\npicking this:\n  a = a' on r - r'", "have \"mset_ran a (r-r') = mset_ran a' (r-r')\""], ["proof (prove)\nusing this:\n  a = a' on r - r'\n\ngoal (1 subgoal):\n 1. mset_ran a (r - r') = mset_ran a' (r - r')", "by (auto simp: mset_ran_by_sum eq_on_def)"], ["proof (state)\nthis:\n  mset_ran a (r - r') = mset_ran a' (r - r')\n\ngoal (1 subgoal):\n 1. mset_ran a r = mset_ran a' r", "from mset_ran_combine_eqs[OF assms(1) this]"], ["proof (chain)\npicking this:\n  r' \\<inter> (r - r') = {} \\<Longrightarrow>\n  mset_ran a (r' \\<union> (r - r')) = mset_ran a' (r' \\<union> (r - r'))", "show ?thesis"], ["proof (prove)\nusing this:\n  r' \\<inter> (r - r') = {} \\<Longrightarrow>\n  mset_ran a (r' \\<union> (r - r')) = mset_ran a' (r' \\<union> (r - r'))\n\ngoal (1 subgoal):\n 1. mset_ran a r = mset_ran a' r", "by auto"], ["proof (state)\nthis:\n  mset_ran a r = mset_ran a' r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mset_ran_xfer_pointwise:\n  assumes \"mset_ran a r = mset_ran a' r\"\n  assumes \"finite r\"\n  shows \"(\\<forall>i\\<in>r. P (a i)) \\<longleftrightarrow> (\\<forall>i\\<in>r. P (a' i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>r. P (a i)) = (\\<forall>i\\<in>r. P (a' i))", "using assms"], ["proof (prove)\nusing this:\n  mset_ran a r = mset_ran a' r\n  finite r\n\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>r. P (a i)) = (\\<forall>i\\<in>r. P (a' i))", "unfolding mset_ran_def"], ["proof (prove)\nusing this:\n  image_mset a (mset_set r) = image_mset a' (mset_set r)\n  finite r\n\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>r. P (a i)) = (\\<forall>i\\<in>r. P (a' i))", "by (auto;force dest: image_mset_eq_imp_set_eq)"], ["", "subsection \\<open>Swap\\<close>"], ["", "definition \"swap a i j \\<equiv> a(i:=a j, j:=a i)\""], ["", "lemma mset_ran_swap: \"\\<lbrakk> i\\<in>r; j\\<in>r \\<rbrakk> \n  \\<Longrightarrow> mset_ran (swap a i j) r = mset_ran a r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> r; j \\<in> r\\<rbrakk>\n    \\<Longrightarrow> mset_ran (swap a i j) r = mset_ran a r", "by (cases \"finite r\") (auto simp: swap_def mset_ran_subst_inside)"], ["", "subsection \\<open>Range of an Array as List\\<close>"], ["", "function (sequential) lran :: \"(int \\<Rightarrow> 'a) \\<Rightarrow> int \\<Rightarrow> int \\<Rightarrow> 'a list\" where\n  \"lran a l h = (if l<h then a l # lran a (l+1) h else [])\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>a l h. x = (a, l, h) \\<Longrightarrow> P) \\<Longrightarrow> P\n 2. \\<And>a l h aa la ha.\n       (a, l, h) = (aa, la, ha) \\<Longrightarrow>\n       (if l < h then a l # lran_sumC (a, l + 1, h) else []) =\n       (if la < ha then aa la # lran_sumC (aa, la + 1, ha) else [])", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All lran_dom", "by (relation \"measure (\\<lambda>(_,l,h). nat (h-l))\") auto"], ["", "declare lran.simps[simp del]"], ["", "text \\<open>\n  \\<open>lran a l h\\<close> is the list \\<open>[a\\<^sub>l,a\\<^sub>l\\<^sub>+\\<^sub>1,...,a\\<^sub>h\\<^sub>-\\<^sub>1]\\<close>\n\\<close>"], ["", "subsubsection \\<open>Auxiliary Lemmas\\<close>"], ["", "lemma lran_empty[simp]: \n  \"lran a l l = []\"\n  \"lran a l h = [] \\<longleftrightarrow> h\\<le>l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lran a l l = [] &&& (lran a l h = []) = (h \\<le> l)", "by (subst lran.simps; auto)+"], ["", "lemma lran_bwd_simp: \"lran a l h = (if l<h then lran a l (h-1)@[a (h-1)] else [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lran a l h = (if l < h then lran a l (h - 1) @ [a (h - 1)] else [])", "apply (induction a l h rule: lran.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       (l < h \\<Longrightarrow>\n        lran a (l + 1) h =\n        (if l + 1 < h then lran a (l + 1) (h - 1) @ [a (h - 1)]\n         else [])) \\<Longrightarrow>\n       lran a l h = (if l < h then lran a l (h - 1) @ [a (h - 1)] else [])", "apply (rewrite in \"\\<hole> = _\" lran.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       (l < h \\<Longrightarrow>\n        lran a (l + 1) h =\n        (if l + 1 < h then lran a (l + 1) (h - 1) @ [a (h - 1)]\n         else [])) \\<Longrightarrow>\n       (if l < h then a l # lran a (l + 1) h else []) =\n       (if l < h then lran a l (h - 1) @ [a (h - 1)] else [])", "apply (rewrite in \"_ = \\<hole>\" lran.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       (l < h \\<Longrightarrow>\n        lran a (l + 1) h =\n        (if l + 1 < h then lran a (l + 1) (h - 1) @ [a (h - 1)]\n         else [])) \\<Longrightarrow>\n       (if l < h then a l # lran a (l + 1) h else []) =\n       (if l < h\n        then (if l < h - 1 then a l # lran a (l + 1) (h - 1) else []) @\n             [a (h - 1)]\n        else [])", "by (auto simp: less_le)"], ["", "lemma length_lran[simp]: \"length (lran a l h) = nat (h-l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (lran a l h) = nat (h - l)", "apply (induction a l h rule: lran.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       (l < h \\<Longrightarrow>\n        length (lran a (l + 1) h) = nat (h - (l + 1))) \\<Longrightarrow>\n       length (lran a l h) = nat (h - l)", "apply (subst lran.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       (l < h \\<Longrightarrow>\n        length (lran a (l + 1) h) = nat (h - (l + 1))) \\<Longrightarrow>\n       length (if l < h then a l # lran a (l + 1) h else []) = nat (h - l)", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nth_lran[simp]: \"int i < h-l \\<Longrightarrow> lran a l h ! i = a (l + int i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int i < h - l \\<Longrightarrow> lran a l h ! i = a (l + int i)", "apply (induction a l h arbitrary: i rule: lran.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>l < h; int i < h - (l + 1)\\<rbrakk>\n                   \\<Longrightarrow> lran a (l + 1) h ! i =\n                                     a (l + 1 + int i);\n        int i < h - l\\<rbrakk>\n       \\<Longrightarrow> lran a l h ! i = a (l + int i)", "apply (subst lran.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>l < h; int i < h - (l + 1)\\<rbrakk>\n                   \\<Longrightarrow> lran a (l + 1) h ! i =\n                                     a (l + 1 + int i);\n        int i < h - l\\<rbrakk>\n       \\<Longrightarrow> (if l < h then a l # lran a (l + 1) h else []) !\n                         i =\n                         a (l + int i)", "apply (auto simp: nth_Cons nth_tl algebra_simps split: nat.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lran_append1[simp]: \"l\\<le>h \\<Longrightarrow> lran a l (h + 1) = lran a l h @ [a h]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<le> h \\<Longrightarrow> lran a l (h + 1) = lran a l h @ [a h]", "by (rewrite in \"\\<hole> = _\" lran_bwd_simp) auto"], ["", "lemma lran_prepend1[simp]: \"l\\<le>h \\<Longrightarrow> lran a (l-1) h = a(l-1) # lran a l h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<le> h \\<Longrightarrow> lran a (l - 1) h = a (l - 1) # lran a l h", "by (rewrite in \"\\<hole> = _\" lran.simps) auto"], ["", "lemma lran_tail[simp]: \"lran a (l+1) h = tl (lran a l h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lran a (l + 1) h = tl (lran a l h)", "apply (rewrite in \"_ = \\<hole>\" lran.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. lran a (l + 1) h = tl (if l < h then a l # lran a (l + 1) h else [])", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lran_butlast[simp]: \"lran a l (h-1) = butlast (lran a l h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lran a l (h - 1) = butlast (lran a l h)", "apply (rewrite in \"_ = \\<hole>\" lran_bwd_simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. lran a l (h - 1) =\n    butlast (if l < h then lran a l (h - 1) @ [a (h - 1)] else [])", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma hd_lran[simp]: \"l<h \\<Longrightarrow> hd (lran a l h) = a l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l < h \\<Longrightarrow> hd (lran a l h) = a l", "apply (subst lran.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. l < h \\<Longrightarrow>\n    hd (if l < h then a l # lran a (l + 1) h else []) = a l", "by simp"], ["", "lemma last_lran[simp]: \"l<h \\<Longrightarrow> last (lran a l h) = a (h-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l < h \\<Longrightarrow> last (lran a l h) = a (h - 1)", "apply (subst lran_bwd_simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. l < h \\<Longrightarrow>\n    last (if l < h then lran a l (h - 1) @ [a (h - 1)] else []) = a (h - 1)", "by simp"], ["", "lemma lran_upd_outside[simp]:\n  \"i<l \\<Longrightarrow> lran (a(i:=x)) l h = lran a l h\"\n  \"h\\<le>i \\<Longrightarrow> lran (a(i:=x)) l h = lran a l h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < l \\<Longrightarrow> lran (a(i := x)) l h = lran a l h) &&&\n    (h \\<le> i \\<Longrightarrow> lran (a(i := x)) l h = lran a l h)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < l \\<Longrightarrow> lran (a(i := x)) l h = lran a l h", "apply (induction a l h rule: lran.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       \\<lbrakk>\\<lbrakk>l < h; i < l + 1\\<rbrakk>\n                \\<Longrightarrow> lran (a(i := x)) (l + 1) h =\n                                  lran a (l + 1) h;\n        i < l\\<rbrakk>\n       \\<Longrightarrow> lran (a(i := x)) l h = lran a l h", "apply (rewrite in \"\\<hole> = _\" lran.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       \\<lbrakk>\\<lbrakk>l < h; i < l + 1\\<rbrakk>\n                \\<Longrightarrow> lran (a(i := x)) (l + 1) h =\n                                  lran a (l + 1) h;\n        i < l\\<rbrakk>\n       \\<Longrightarrow> (if l < h\n                          then (a(i := x)) l # lran (a(i := x)) (l + 1) h\n                          else []) =\n                         lran a l h", "apply (rewrite in \"_ = \\<hole>\" lran.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       \\<lbrakk>\\<lbrakk>l < h; i < l + 1\\<rbrakk>\n                \\<Longrightarrow> lran (a(i := x)) (l + 1) h =\n                                  lran a (l + 1) h;\n        i < l\\<rbrakk>\n       \\<Longrightarrow> (if l < h\n                          then (a(i := x)) l # lran (a(i := x)) (l + 1) h\n                          else []) =\n                         (if l < h then a l # lran a (l + 1) h else [])", "by (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<le> i \\<Longrightarrow> lran (a(i := x)) l h = lran a l h", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<le> i \\<Longrightarrow> lran (a(i := x)) l h = lran a l h", "apply (induction a l h rule: lran.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       \\<lbrakk>\\<lbrakk>l < h; h \\<le> i\\<rbrakk>\n                \\<Longrightarrow> lran (a(i := x)) (l + 1) h =\n                                  lran a (l + 1) h;\n        h \\<le> i\\<rbrakk>\n       \\<Longrightarrow> lran (a(i := x)) l h = lran a l h", "apply (rewrite in \"\\<hole> = _\" lran.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       \\<lbrakk>\\<lbrakk>l < h; h \\<le> i\\<rbrakk>\n                \\<Longrightarrow> lran (a(i := x)) (l + 1) h =\n                                  lran a (l + 1) h;\n        h \\<le> i\\<rbrakk>\n       \\<Longrightarrow> (if l < h\n                          then (a(i := x)) l # lran (a(i := x)) (l + 1) h\n                          else []) =\n                         lran a l h", "apply (rewrite in \"_ = \\<hole>\" lran.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       \\<lbrakk>\\<lbrakk>l < h; h \\<le> i\\<rbrakk>\n                \\<Longrightarrow> lran (a(i := x)) (l + 1) h =\n                                  lran a (l + 1) h;\n        h \\<le> i\\<rbrakk>\n       \\<Longrightarrow> (if l < h\n                          then (a(i := x)) l # lran (a(i := x)) (l + 1) h\n                          else []) =\n                         (if l < h then a l # lran a (l + 1) h else [])", "by (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lran_upd_inside: \"i\\<in>{l..<h} \\<Longrightarrow> lran (a(i:=x)) l h = (lran a l h)[nat (i-l) := x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> {l..<h} \\<Longrightarrow>\n    lran (a(i := x)) l h = (lran a l h)[nat (i - l) := x]", "apply (rule nth_equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. i \\<in> {l..<h} \\<Longrightarrow>\n    length (lran (a(i := x)) l h) = length ((lran a l h)[nat (i - l) := x])\n 2. \\<And>ia.\n       \\<lbrakk>i \\<in> {l..<h}; ia < length (lran (a(i := x)) l h)\\<rbrakk>\n       \\<Longrightarrow> lran (a(i := x)) l h ! ia =\n                         (lran a l h)[nat (i - l) := x] ! ia", "apply (simp_all add: nth_list_update, linarith)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma tl_upd_at0[simp]: \"tl (xs[0:=x]) = tl xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tl (xs[0 := x]) = tl xs", "by (cases xs) auto"], ["", "lemma lran_eq_iff: \"lran a l h = lran a' l h \\<longleftrightarrow> (\\<forall>i. l\\<le>i \\<and> i<h \\<longrightarrow> a i = a' i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lran a l h = lran a' l h) =\n    (\\<forall>i. l \\<le> i \\<and> i < h \\<longrightarrow> a i = a' i)", "apply (induction a l h rule: lran.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       (l < h \\<Longrightarrow>\n        (lran a (l + 1) h = lran a' (l + 1) h) =\n        (\\<forall>i.\n            l + 1 \\<le> i \\<and> i < h \\<longrightarrow>\n            a i = a' i)) \\<Longrightarrow>\n       (lran a l h = lran a' l h) =\n       (\\<forall>i. l \\<le> i \\<and> i < h \\<longrightarrow> a i = a' i)", "apply (rewrite in \"\\<hole> = _\" lran.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       (l < h \\<Longrightarrow>\n        (lran a (l + 1) h = lran a' (l + 1) h) =\n        (\\<forall>i.\n            l + 1 \\<le> i \\<and> i < h \\<longrightarrow>\n            a i = a' i)) \\<Longrightarrow>\n       ((if l < h then a l # lran a (l + 1) h else []) = lran a' l h) =\n       (\\<forall>i. l \\<le> i \\<and> i < h \\<longrightarrow> a i = a' i)", "apply (rewrite in \"_ = \\<hole>\" lran.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       (l < h \\<Longrightarrow>\n        (lran a (l + 1) h = lran a' (l + 1) h) =\n        (\\<forall>i.\n            l + 1 \\<le> i \\<and> i < h \\<longrightarrow>\n            a i = a' i)) \\<Longrightarrow>\n       ((if l < h then a l # lran a (l + 1) h else []) =\n        (if l < h then a' l # lran a' (l + 1) h else [])) =\n       (\\<forall>i. l \\<le> i \\<and> i < h \\<longrightarrow> a i = a' i)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h i.\n       \\<lbrakk>tl (lran a l h) = tl (lran a' l h); a l = a' l;\n        \\<forall>i. l + 1 \\<le> i \\<and> i < h \\<longrightarrow> a i = a' i;\n        l \\<le> i; i < h\\<rbrakk>\n       \\<Longrightarrow> a i = a' i", "by (metis antisym_conv not_less zless_imp_add1_zle)"], ["", "lemma set_lran: \"set (lran a l h) = a`{l..<h}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (lran a l h) = a ` {l..<h}", "apply (induction a l h rule: lran.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       (l < h \\<Longrightarrow>\n        set (lran a (l + 1) h) = a ` {l + 1..<h}) \\<Longrightarrow>\n       set (lran a l h) = a ` {l..<h}", "apply (rewrite in \"\\<hole> = _\" lran.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       (l < h \\<Longrightarrow>\n        set (lran a (l + 1) h) = a ` {l + 1..<h}) \\<Longrightarrow>\n       set (if l < h then a l # lran a (l + 1) h else []) = a ` {l..<h}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h xa.\n       \\<lbrakk>set (tl (lran a l h)) = a ` {l + 1..<h};\n        a xa \\<notin> a ` {l + 1..<h}; l \\<le> xa; xa < h\\<rbrakk>\n       \\<Longrightarrow> a xa = a l", "by (metis atLeastLessThan_iff image_iff not_less not_less_iff_gr_or_eq zless_imp_add1_zle)"], ["", "lemma mset_lran: \"mset (lran a l h) = mset_ran a {l..<h}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (lran a l h) = mset_ran a {l..<h}", "apply (induction a l h rule: lran.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       (l < h \\<Longrightarrow>\n        mset (lran a (l + 1) h) = mset_ran a {l + 1..<h}) \\<Longrightarrow>\n       mset (lran a l h) = mset_ran a {l..<h}", "apply (rewrite in \"\\<hole> = _\" lran.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l h.\n       (l < h \\<Longrightarrow>\n        mset (lran a (l + 1) h) = mset_ran a {l + 1..<h}) \\<Longrightarrow>\n       mset (if l < h then a l # lran a (l + 1) h else []) =\n       mset_ran a {l..<h}", "by (auto simp: intvs_lower_incr mset_ran_insert)"], ["", "end"]]}