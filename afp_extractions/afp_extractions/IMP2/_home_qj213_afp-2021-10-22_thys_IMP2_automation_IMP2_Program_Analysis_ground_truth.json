{"file_name": "/home/qj213/afp-2021-10-22/thys/IMP2/automation/IMP2_Program_Analysis.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/IMP2", "problem_names": ["lemmas [analysis_unfolds] = Inline_def Params_def AssignIdx_retv_def ArrayCpy_retv_def", "lemma modifies_refl[intro!, simp]: \"modifies vs a a\"", "lemma modifies_sym[sym]: \"modifies vs a b \\<Longrightarrow> modifies vs b a\"", "lemma modifies_trans'[trans]: \"modifies vs\\<^sub>1 a b \\<Longrightarrow> modifies vs\\<^sub>2 b c \\<Longrightarrow> modifies (vs\\<^sub>1\\<union>vs\\<^sub>2) a c\"", "lemma modifies_trans[trans]: \"modifies vs a b \\<Longrightarrow> modifies vs b c \\<Longrightarrow> modifies vs a c\"", "lemma modifies_join: \"\\<lbrakk> modifies vs\\<^sub>1 a b; modifies vs\\<^sub>2 a b \\<rbrakk> \\<Longrightarrow> modifies (vs\\<^sub>1\\<inter>vs\\<^sub>2) a b\"", "lemma modifies_mono: \"\\<lbrakk> vs\\<^sub>1\\<subseteq>vs\\<^sub>2; modifies vs\\<^sub>1 a b \\<rbrakk> \\<Longrightarrow> modifies vs\\<^sub>2 a b\"", "lemma modifies_equals: \"modifies vs s s' \\<Longrightarrow> x\\<notin>vs \\<Longrightarrow> s x = s' x\"", "lemma modifies_upd: \n      \"x\\<in>vs \\<Longrightarrow> modifies vs s (s'(x:=v)) \\<longleftrightarrow> modifies vs s s'\" \n      \"x\\<in>vs \\<Longrightarrow> modifies vs (s(x:=v)) s' \\<longleftrightarrow> modifies vs s s'\"", "lemma modifies_split: \"modifies vs (<l|g>) (<l'|g'>) \n      \\<longleftrightarrow> modifies (Collect is_global \\<union> vs) l l' \\<and> modifies (Collect is_local \\<union> vs) g g'\"", "lemma lhsv'_pscope_simp[simp]: \"lhsv' (PScope \\<pi> c) = lhsv\\<pi> \\<pi> \\<union> lhsv' c\"", "lemma lhsv\\<pi>_empty: \"lhsv\\<pi> Map.empty = {}\"", "lemma lhsv\\<pi>_upd: \"m p = None \\<Longrightarrow> lhsv\\<pi> (m(p\\<mapsto>c)) = lhsv' c \\<union> lhsv\\<pi> m\"", "lemmas lhsv\\<pi>_maplet[simp] = lhsv\\<pi>_empty lhsv\\<pi>_upd", "lemmas [named_ss vcg_bb] = lhsv'.simps", "lemmas [named_ss vcg_bb del] = lhsv'_pscope_simp_orig", "lemmas [named_ss vcg_bb] = lhsv'_pscope_simp", "lemmas [named_ss vcg_bb] = lhsv.simps", "lemmas [named_ss vcg_bb] = lhsv\\<pi>_maplet", "lemmas [named_ss vcg_bb] = is_global.simps", "lemma modifies_lhsv'_gen:\n    assumes \"lhsv\\<pi> \\<pi> \\<subseteq> vs\"\n    assumes \"lhsv' c \\<subseteq> vs\"\n    assumes \"\\<pi>: (c,s) \\<Rightarrow> t\"\n    shows \"modifies vs t s\"", "lemma modifies_lhsv\\<pi>:\n    assumes \"\\<pi>: (c, s) \\<Rightarrow> t\"\n    assumes \"\\<pi> p = Some c\"\n    shows \"modifies (lhsv\\<pi> \\<pi>) t s\"", "lemma lhsv_approx: \"lhsv \\<pi>' c \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' c\"", "lemma modifies_lhsv:\n    assumes \"\\<pi>: (c, s) \\<Rightarrow> t\"\n    shows \"modifies (lhsv \\<pi> c) t s\"", "lemma wp_strengthen_modset: \"wp \\<pi> c Q s \\<Longrightarrow> wp \\<pi> c (\\<lambda>s'. Q s' \\<and> modifies (lhsv \\<pi> c) s' s) s\"", "lemma wlp_strengthen_modset: \"wlp \\<pi> c Q s \\<Longrightarrow> wlp \\<pi> c (\\<lambda>s'. Q s' \\<and> modifies (lhsv \\<pi> c) s' s) s\"", "lemma wp_mod_lhsv_eq: \"wp_mod \\<pi> (lhsv \\<pi> c) c Q s = wp \\<pi> c Q s\"", "lemma wlp_mod_lhsv_eq: \"wlp_mod \\<pi> (lhsv \\<pi> c) c Q s = wlp \\<pi> c Q s\"", "lemma HT_mods_cong[named_ss vcg_bb cong]:\n    assumes \"vs = vs'\"\n    assumes \"P=P'\"\n    assumes \"c=c'\"\n    assumes \"\\<And>s\\<^sub>0 s. modifies vs s s\\<^sub>0 \\<Longrightarrow> Q s\\<^sub>0 s = Q' s\\<^sub>0 s\"\n    shows \"HT_mods \\<pi> vs P c Q = HT_mods \\<pi> vs' P' c' Q'\"", "lemma HT_partial_mods_cong[named_ss vcg_bb cong]:\n    assumes \"vs = vs'\"\n    assumes \"P=P'\"\n    assumes \"c=c'\"\n    assumes \"\\<And>s\\<^sub>0 s. modifies vs s s\\<^sub>0 \\<Longrightarrow> Q s\\<^sub>0 s = Q' s\\<^sub>0 s\"\n    shows \"HT_partial_mods \\<pi> vs P c Q = HT_partial_mods \\<pi> vs' P' c' Q'\"", "lemma vcg_wp_conseq:\n    assumes \"HT_mods \\<pi> mods P c Q\"\n    assumes \"P s\"\n    assumes \"\\<And>s'. \\<lbrakk>modifies mods s' s; Q s s'\\<rbrakk> \\<Longrightarrow> Q' s'\"\n    shows \"wp \\<pi> c Q' s\"", "lemma vcg_wlp_conseq:\n    assumes \"HT_partial_mods \\<pi> mods P c Q\"\n    assumes \"P s\"\n    assumes \"\\<And>s'. \\<lbrakk>modifies mods s' s; Q s s'\\<rbrakk> \\<Longrightarrow> Q' s'\"\n    shows \"wlp \\<pi> c Q' s\"", "lemma vcg_wlp_wp_conseq:\n    assumes \"HT_mods \\<pi> mods P c Q\"\n    assumes \"P s\"\n    assumes \"\\<And>s'. \\<lbrakk>modifies mods s' s; Q s s'\\<rbrakk> \\<Longrightarrow> Q' s'\"\n    shows \"wlp \\<pi> c Q' s\"", "lemma aval_eq_on_fv: \"(\\<forall>x\\<in>fv_aexp a. s x = s' x) \\<Longrightarrow> aval a s = aval a s'\"", "lemma aval_indep_non_fv: \"x\\<notin>fv_aexp a \\<Longrightarrow> aval a (s(x:=y)) = aval a s\"", "lemma redundant_array_assignment: \"(x[] ::= a;; a[] ::= x) \\<sim> (x[] ::= a)\"", "lemma redundant_var_assignment: \n  assumes \"x\\<notin>fv_aexp i\" \"x\\<notin>fv_aexp j\"\n  shows \"(x[i] ::= Vidx a j;; a[j] ::= Vidx x i) \\<sim> (x[i] ::= Vidx a j)\""], "translations": [["", "lemmas [analysis_unfolds] = Inline_def Params_def AssignIdx_retv_def ArrayCpy_retv_def"], ["", "subsection \\<open>Modifies Sets\\<close>"], ["", "definition modifies :: \"vname set \\<Rightarrow> state \\<Rightarrow> state \\<Rightarrow> bool\" where\n    \"modifies vars s\\<^sub>1 s\\<^sub>2 = (\\<forall>x. x\\<notin>vars \\<longrightarrow> s\\<^sub>1 x = s\\<^sub>2 x)\""], ["", "context notes[simp] = modifies_def begin"], ["", "lemma modifies_refl[intro!, simp]: \"modifies vs a a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. modifies vs a a", "by simp"], ["", "lemma modifies_sym[sym]: \"modifies vs a b \\<Longrightarrow> modifies vs b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. modifies vs a b \\<Longrightarrow> modifies vs b a", "by simp"], ["", "lemma modifies_trans'[trans]: \"modifies vs\\<^sub>1 a b \\<Longrightarrow> modifies vs\\<^sub>2 b c \\<Longrightarrow> modifies (vs\\<^sub>1\\<union>vs\\<^sub>2) a c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>modifies vs\\<^sub>1 a b; modifies vs\\<^sub>2 b c\\<rbrakk>\n    \\<Longrightarrow> modifies (vs\\<^sub>1 \\<union> vs\\<^sub>2) a c", "by simp"], ["", "lemma modifies_trans[trans]: \"modifies vs a b \\<Longrightarrow> modifies vs b c \\<Longrightarrow> modifies vs a c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>modifies vs a b; modifies vs b c\\<rbrakk>\n    \\<Longrightarrow> modifies vs a c", "by simp"], ["", "(* Test for correct order of trans-rules *)"], ["", "notepad begin"], ["proof (state)", "fix vs a b c"], ["proof (state)", "assume \"modifies vs a b\""], ["proof (state)\nthis:\n  modifies vs a b", "also"], ["proof (state)\nthis:\n  modifies vs a b", "assume \"modifies vs b c\""], ["proof (state)\nthis:\n  modifies vs b c", "finally"], ["proof (chain)\npicking this:\n  modifies vs a c", "have \"modifies vs a c\""], ["proof (prove)\nusing this:\n  modifies vs a c\n\ngoal (1 subgoal):\n 1. modifies vs a c", "."], ["proof (state)\nthis:\n  modifies vs a c", "(* This must be trivial. If you get vs\\<union>vs, something went wrong! *)"], ["proof (state)\nthis:\n  modifies vs a c", "end"], ["", "lemma modifies_join: \"\\<lbrakk> modifies vs\\<^sub>1 a b; modifies vs\\<^sub>2 a b \\<rbrakk> \\<Longrightarrow> modifies (vs\\<^sub>1\\<inter>vs\\<^sub>2) a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>modifies vs\\<^sub>1 a b; modifies vs\\<^sub>2 a b\\<rbrakk>\n    \\<Longrightarrow> modifies (vs\\<^sub>1 \\<inter> vs\\<^sub>2) a b", "by auto"], ["", "lemma modifies_mono: \"\\<lbrakk> vs\\<^sub>1\\<subseteq>vs\\<^sub>2; modifies vs\\<^sub>1 a b \\<rbrakk> \\<Longrightarrow> modifies vs\\<^sub>2 a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vs\\<^sub>1 \\<subseteq> vs\\<^sub>2;\n     modifies vs\\<^sub>1 a b\\<rbrakk>\n    \\<Longrightarrow> modifies vs\\<^sub>2 a b", "by auto"], ["", "lemma modifies_equals: \"modifies vs s s' \\<Longrightarrow> x\\<notin>vs \\<Longrightarrow> s x = s' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>modifies vs s s'; x \\<notin> vs\\<rbrakk>\n    \\<Longrightarrow> s x = s' x", "by auto"], ["", "lemma modifies_upd: \n      \"x\\<in>vs \\<Longrightarrow> modifies vs s (s'(x:=v)) \\<longleftrightarrow> modifies vs s s'\" \n      \"x\\<in>vs \\<Longrightarrow> modifies vs (s(x:=v)) s' \\<longleftrightarrow> modifies vs s s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> vs \\<Longrightarrow>\n     modifies vs s (s'(x := v)) = modifies vs s s') &&&\n    (x \\<in> vs \\<Longrightarrow>\n     modifies vs (s(x := v)) s' = modifies vs s s')", "by auto"], ["", "lemma modifies_split: \"modifies vs (<l|g>) (<l'|g'>) \n      \\<longleftrightarrow> modifies (Collect is_global \\<union> vs) l l' \\<and> modifies (Collect is_local \\<union> vs) g g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. modifies vs <l|g> <l'|g'> =\n    (modifies (Collect is_global \\<union> vs) l l' \\<and>\n     modifies ({a. is_local a} \\<union> vs) g g')", "apply (auto simp: combine_query)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x.\n                   is_local x \\<and> x \\<notin> vs \\<longrightarrow>\n                   l x = l' x;\n        \\<forall>x.\n           is_global x \\<and> x \\<notin> vs \\<longrightarrow> g x = g' x;\n        x \\<notin> vs\\<rbrakk>\n       \\<Longrightarrow> <l|g> x = <l'|g'> x", "by (metis combine_query)"], ["", "end"], ["", "definition \"wp_mod \\<pi> vs c Q s = wp \\<pi> c (\\<lambda>s'. modifies vs s' s \\<and> Q s') s \""], ["", "definition \"wlp_mod \\<pi> vs c Q s = wlp \\<pi> c (\\<lambda>s'. modifies vs s' s \\<and> Q s') s \""], ["", "subsubsection \\<open>Simplification of Modifies Tags\\<close>"], ["", "ML \\<open>\n  \n    val simp_modifies_tac = let\n      fun is_modifies _ ct = case Thm.term_of ct of _$(Const (@{const_name modifies},_)$_$_$_) => true | _ => false\n      fun dest_modifies (Const _ $ (Const (@{const_name modifies},_)$vs$s$d)) = (vs,s,d)\n        | dest_modifies t = raise TERM(\"dest_modifies\",[t])\n        \n        \n    in\n      Subgoal_Focus_Some.FOCUS_SOME_PREMS is_modifies (fn {context=ctxt, prems, concl, ...} => let\n      \n        val sts = map (#2 o dest_modifies o Thm.prop_of) prems |> Termtab.make_set\n  \n        fun collect_vars (a$b) = if Termtab.defined sts a then Termtab.insert_set b else collect_vars a o collect_vars b\n          | collect_vars (Abs (_,_,t)) = collect_vars t\n          | collect_vars _ = I\n            \n        val vars = \n          Termtab.empty\n          |> collect_vars (Thm.term_of concl) o fold collect_vars (map Thm.prop_of prems)\n          |> Termtab.keys \n          |> map (Thm.cterm_of ctxt)\n  \n        val ctxt_bb = Named_Simpsets.put @{named_simpset vcg_bb} ctxt  \n        fun mk_mod_thm x thm = let\n          val thm = @{thm modifies_equals} OF [thm]\n          fun is_triv thm = case Thm.prop_of thm of @{prop \"True\"} => true | _ => false\n          \n          val thm = Drule.infer_instantiate' ctxt [SOME x] thm\n            |> full_simplify ctxt_bb\n        in\n          if is_triv thm then NONE else SOME thm\n        end\n          \n        val thms = map_product (mk_mod_thm) vars prems |> map_filter I \n        \n        val ctxt = Simplifier.put_simpset HOL_basic_ss ctxt addsimps thms\n        \n      \n      in HEADGOAL (asm_full_simp_tac ctxt) end)\n    end\n  \\<close>"], ["", "method_setup i_vcg_modifies_simp = \\<open>Scan.succeed (SIMPLE_METHOD' o simp_modifies_tac)\\<close>"], ["", "subsubsection \\<open>Syntactic Approximation of Modifies Set\\<close>"], ["", "primrec lhsv' :: \"com \\<Rightarrow> vname set\" where\n    \"lhsv' (x[_] ::= _) = {x}\"\n  | \"lhsv' (x[] ::= _) = {x}\"\n  | \"lhsv' (CLEAR x[]) = {x}\"\n  | \"lhsv' (Assign_Locals l) = Collect is_local\"\n  | \"lhsv' SKIP = {}\"  \n  | \"lhsv' (c\\<^sub>1;; c\\<^sub>2) = lhsv' c\\<^sub>1 \\<union> lhsv' c\\<^sub>2\"\n  | \"lhsv' (IF _ THEN c\\<^sub>1 ELSE c\\<^sub>2) = lhsv' c\\<^sub>1 \\<union> lhsv' c\\<^sub>2\"\n  | \"lhsv' (WHILE _ DO c) = lhsv' c\"\n  | \"lhsv' (SCOPE c) = Set.filter is_global (lhsv' c)\"\n  | \"lhsv' (PCall p) = {}\"\n  | lhsv'_pscope_simp_orig[simp del]: \n    \"lhsv' (PScope \\<pi> c) = \\<Union>(ran (map_option lhsv' o \\<pi>)) \\<union> lhsv' c\""], ["", "definition \"lhsv\\<pi> \\<pi> \\<equiv> (\\<Union>c\\<in>ran \\<pi>. lhsv' c)\""], ["", "lemma lhsv'_pscope_simp[simp]: \"lhsv' (PScope \\<pi> c) = lhsv\\<pi> \\<pi> \\<union> lhsv' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lhsv' (PScope \\<pi> c) = lhsv\\<pi> \\<pi> \\<union> lhsv' c", "by (auto simp: ran_def lhsv'_pscope_simp_orig lhsv\\<pi>_def)"], ["", "lemma lhsv\\<pi>_empty: \"lhsv\\<pi> Map.empty = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lhsv\\<pi> Map.empty = {}", "by (auto simp: lhsv\\<pi>_def)"], ["", "lemma lhsv\\<pi>_upd: \"m p = None \\<Longrightarrow> lhsv\\<pi> (m(p\\<mapsto>c)) = lhsv' c \\<union> lhsv\\<pi> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m p = None \\<Longrightarrow>\n    lhsv\\<pi> (m(p \\<mapsto> c)) = lhsv' c \\<union> lhsv\\<pi> m", "apply (auto simp: lhsv\\<pi>_def ran_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa a.\n       \\<lbrakk>m p = None; x \\<in> lhsv' xa; m a = Some xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>a.\n                                (a = p \\<longrightarrow> c = xa) \\<and>\n                                (a \\<noteq> p \\<longrightarrow>\n                                 m a = Some xa)) \\<and>\n                            x \\<in> lhsv' xa", "by (metis option.simps(3))"], ["", "lemmas lhsv\\<pi>_maplet[simp] = lhsv\\<pi>_empty lhsv\\<pi>_upd"], ["", "notepad begin"], ["proof (state)", "have \"lhsv\\<pi> [''foo'' \\<mapsto> \\<^imp>\\<open>a=5\\<close>, ''bar'' \\<mapsto> \\<^imp>\\<open>c=7; b=5; rec foo()\\<close>] = {''a'', ''b'', ''c''}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lhsv\\<pi>\n     [''foo'' \\<mapsto> ''a'' ::= N 5, ''bar'' \\<mapsto> ''c'' ::= N 7;;\n      ''b'' ::= N 5;; Params (PCall ''foo'')] =\n    {''a'', ''b'', ''c''}", "by (simp add: Params_def)"], ["proof (state)\nthis:\n  lhsv\\<pi>\n   [''foo'' \\<mapsto> ''a'' ::= N 5, ''bar'' \\<mapsto> ''c'' ::= N 7;;\n    ''b'' ::= N 5;; Params (PCall ''foo'')] =\n  {''a'', ''b'', ''c''}", "end"], ["", "primrec lhsv :: \"program \\<Rightarrow> com \\<Rightarrow> vname set\" where\n    \"lhsv \\<pi> (x[_] ::= _) = {x}\"\n  | \"lhsv \\<pi> (x[] ::= _) = {x}\"\n  | \"lhsv \\<pi> (CLEAR x[]) = {x}\"\n  | \"lhsv \\<pi> (Assign_Locals l) = Collect is_local\"\n  | \"lhsv \\<pi> SKIP = {}\"  \n  | \"lhsv \\<pi> (c\\<^sub>1;; c\\<^sub>2) = lhsv \\<pi> c\\<^sub>1 \\<union> lhsv \\<pi> c\\<^sub>2\"\n  | \"lhsv \\<pi> (IF _ THEN c\\<^sub>1 ELSE c\\<^sub>2) = lhsv \\<pi> c\\<^sub>1 \\<union> lhsv \\<pi> c\\<^sub>2\"\n  | \"lhsv \\<pi> (WHILE _ DO c) = lhsv \\<pi> c\"\n  | \"lhsv \\<pi> (SCOPE c) = Set.filter is_global (lhsv \\<pi> c)\"\n  | \"lhsv \\<pi> (PCall p) = lhsv\\<pi> \\<pi>\"\n  | \"lhsv \\<pi> (PScope \\<pi>' c) = lhsv\\<pi> \\<pi>' \\<union> lhsv' c\""], ["", "text \\<open>Install special rule for procedure scope\\<close>"], ["", "lemmas [named_ss vcg_bb] = lhsv'.simps"], ["", "lemmas [named_ss vcg_bb del] = lhsv'_pscope_simp_orig"], ["", "lemmas [named_ss vcg_bb] = lhsv'_pscope_simp"], ["", "lemmas [named_ss vcg_bb] = lhsv.simps"], ["", "lemmas [named_ss vcg_bb] = lhsv\\<pi>_maplet"], ["", "lemmas [named_ss vcg_bb] = is_global.simps"], ["", "lemma modifies_lhsv'_gen:\n    assumes \"lhsv\\<pi> \\<pi> \\<subseteq> vs\"\n    assumes \"lhsv' c \\<subseteq> vs\"\n    assumes \"\\<pi>: (c,s) \\<Rightarrow> t\"\n    shows \"modifies vs t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. modifies vs t s", "using assms(3,1,2)"], ["proof (prove)\nusing this:\n  \\<pi>: (c, s) \\<Rightarrow> t\n  lhsv\\<pi> \\<pi> \\<subseteq> vs\n  lhsv' c \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. modifies vs t s", "proof (induction arbitrary: vs)"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>\\<pi> s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' SKIP \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 2. \\<And>\\<pi> x i a s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[i] ::= a) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := (s x)(aval i s := aval a s))) s\n 3. \\<And>\\<pi> x y s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[] ::= y) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := s y)) s\n 4. \\<And>\\<pi> x s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (CLEAR x[]) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := \\<lambda>_. 0)) s\n 5. \\<And>\\<pi> l s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (Assign_Locals l) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs <l|s> s\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3 vs.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (c\\<^sub>1;; c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2 vs.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1 vs.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 9. \\<And>\\<pi> c s s' vs.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s' <<>|s>;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (SCOPE c) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs <s|s'> s\n 10. \\<And>b s \\<pi> c vs.\n        \\<lbrakk>\\<not> bval b s; lhsv\\<pi> \\<pi> \\<subseteq> vs;\n         lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n        \\<Longrightarrow> modifies vs s s\nA total of 13 subgoals...", "case (Scope \\<pi> c s s')"], ["proof (state)\nthis:\n  \\<pi>: (c, <<>|s>) \\<Rightarrow> s'\n  \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> ?vs; lhsv' c \\<subseteq> ?vs\\<rbrakk>\n  \\<Longrightarrow> modifies ?vs s' <<>|s>\n  lhsv\\<pi> \\<pi> \\<subseteq> vs\n  lhsv' (SCOPE c) \\<subseteq> vs\n\ngoal (13 subgoals):\n 1. \\<And>\\<pi> s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' SKIP \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 2. \\<And>\\<pi> x i a s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[i] ::= a) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := (s x)(aval i s := aval a s))) s\n 3. \\<And>\\<pi> x y s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[] ::= y) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := s y)) s\n 4. \\<And>\\<pi> x s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (CLEAR x[]) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := \\<lambda>_. 0)) s\n 5. \\<And>\\<pi> l s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (Assign_Locals l) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs <l|s> s\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3 vs.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (c\\<^sub>1;; c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2 vs.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1 vs.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 9. \\<And>\\<pi> c s s' vs.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s' <<>|s>;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (SCOPE c) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs <s|s'> s\n 10. \\<And>b s \\<pi> c vs.\n        \\<lbrakk>\\<not> bval b s; lhsv\\<pi> \\<pi> \\<subseteq> vs;\n         lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n        \\<Longrightarrow> modifies vs s s\nA total of 13 subgoals...", "from Scope.IH[where vs=\"vs \\<union> Collect is_local\"] Scope.prems"], ["proof (chain)\npicking this:\n  \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs \\<union> {a. is_local a};\n   lhsv' c \\<subseteq> vs \\<union> {a. is_local a}\\<rbrakk>\n  \\<Longrightarrow> modifies (vs \\<union> {a. is_local a}) s' <<>|s>\n  lhsv\\<pi> \\<pi> \\<subseteq> vs\n  lhsv' (SCOPE c) \\<subseteq> vs", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs \\<union> {a. is_local a};\n   lhsv' c \\<subseteq> vs \\<union> {a. is_local a}\\<rbrakk>\n  \\<Longrightarrow> modifies (vs \\<union> {a. is_local a}) s' <<>|s>\n  lhsv\\<pi> \\<pi> \\<subseteq> vs\n  lhsv' (SCOPE c) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. modifies vs <s|s'> s", "by (fastforce simp: modifies_def combine_states_def)"], ["proof (state)\nthis:\n  modifies vs <s|s'> s\n\ngoal (12 subgoals):\n 1. \\<And>\\<pi> s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' SKIP \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 2. \\<And>\\<pi> x i a s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[i] ::= a) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := (s x)(aval i s := aval a s))) s\n 3. \\<And>\\<pi> x y s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[] ::= y) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := s y)) s\n 4. \\<And>\\<pi> x s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (CLEAR x[]) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := \\<lambda>_. 0)) s\n 5. \\<And>\\<pi> l s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (Assign_Locals l) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs <l|s> s\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3 vs.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (c\\<^sub>1;; c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2 vs.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1 vs.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 9. \\<And>b s \\<pi> c vs.\n       \\<lbrakk>\\<not> bval b s; lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 10. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3 vs.\n        \\<lbrakk>bval b s\\<^sub>1;\n         \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n         \\<And>vs.\n            \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n             lhsv' c \\<subseteq> vs\\<rbrakk>\n            \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n         \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n         \\<And>vs.\n            \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n             lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n            \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n         lhsv\\<pi> \\<pi> \\<subseteq> vs;\n         lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n        \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>\\<pi> s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' SKIP \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 2. \\<And>\\<pi> x i a s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[i] ::= a) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := (s x)(aval i s := aval a s))) s\n 3. \\<And>\\<pi> x y s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[] ::= y) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := s y)) s\n 4. \\<And>\\<pi> x s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (CLEAR x[]) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := \\<lambda>_. 0)) s\n 5. \\<And>\\<pi> l s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (Assign_Locals l) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs <l|s> s\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3 vs.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (c\\<^sub>1;; c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2 vs.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1 vs.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 9. \\<And>b s \\<pi> c vs.\n       \\<lbrakk>\\<not> bval b s; lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 10. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3 vs.\n        \\<lbrakk>bval b s\\<^sub>1;\n         \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n         \\<And>vs.\n            \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n             lhsv' c \\<subseteq> vs\\<rbrakk>\n            \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n         \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n         \\<And>vs.\n            \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n             lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n            \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n         lhsv\\<pi> \\<pi> \\<subseteq> vs;\n         lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n        \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1\nA total of 12 subgoals...", "case (PCall \\<pi> p c s t)"], ["proof (state)\nthis:\n  \\<pi> p = Some c\n  \\<pi>: (c, s) \\<Rightarrow> t\n  \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> ?vs; lhsv' c \\<subseteq> ?vs\\<rbrakk>\n  \\<Longrightarrow> modifies ?vs t s\n  lhsv\\<pi> \\<pi> \\<subseteq> vs\n  lhsv' (PCall p) \\<subseteq> vs\n\ngoal (12 subgoals):\n 1. \\<And>\\<pi> s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' SKIP \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 2. \\<And>\\<pi> x i a s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[i] ::= a) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := (s x)(aval i s := aval a s))) s\n 3. \\<And>\\<pi> x y s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[] ::= y) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := s y)) s\n 4. \\<And>\\<pi> x s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (CLEAR x[]) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := \\<lambda>_. 0)) s\n 5. \\<And>\\<pi> l s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (Assign_Locals l) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs <l|s> s\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3 vs.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (c\\<^sub>1;; c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2 vs.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1 vs.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 9. \\<And>b s \\<pi> c vs.\n       \\<lbrakk>\\<not> bval b s; lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 10. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3 vs.\n        \\<lbrakk>bval b s\\<^sub>1;\n         \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n         \\<And>vs.\n            \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n             lhsv' c \\<subseteq> vs\\<rbrakk>\n            \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n         \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n         \\<And>vs.\n            \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n             lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n            \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n         lhsv\\<pi> \\<pi> \\<subseteq> vs;\n         lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n        \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1\nA total of 12 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<pi> p = Some c\n  \\<pi>: (c, s) \\<Rightarrow> t\n  \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> ?vs; lhsv' c \\<subseteq> ?vs\\<rbrakk>\n  \\<Longrightarrow> modifies ?vs t s\n  lhsv\\<pi> \\<pi> \\<subseteq> vs\n  lhsv' (PCall p) \\<subseteq> vs", "show ?case"], ["proof (prove)\nusing this:\n  \\<pi> p = Some c\n  \\<pi>: (c, s) \\<Rightarrow> t\n  \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> ?vs; lhsv' c \\<subseteq> ?vs\\<rbrakk>\n  \\<Longrightarrow> modifies ?vs t s\n  lhsv\\<pi> \\<pi> \\<subseteq> vs\n  lhsv' (PCall p) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. modifies vs t s", "by (auto simp: ran_def lhsv\\<pi>_def)"], ["proof (state)\nthis:\n  modifies vs t s\n\ngoal (11 subgoals):\n 1. \\<And>\\<pi> s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' SKIP \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 2. \\<And>\\<pi> x i a s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[i] ::= a) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := (s x)(aval i s := aval a s))) s\n 3. \\<And>\\<pi> x y s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[] ::= y) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := s y)) s\n 4. \\<And>\\<pi> x s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (CLEAR x[]) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := \\<lambda>_. 0)) s\n 5. \\<And>\\<pi> l s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (Assign_Locals l) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs <l|s> s\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3 vs.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (c\\<^sub>1;; c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2 vs.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1 vs.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 9. \\<And>b s \\<pi> c vs.\n       \\<lbrakk>\\<not> bval b s; lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 10. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3 vs.\n        \\<lbrakk>bval b s\\<^sub>1;\n         \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n         \\<And>vs.\n            \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n             lhsv' c \\<subseteq> vs\\<rbrakk>\n            \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n         \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n         \\<And>vs.\n            \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n             lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n            \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n         lhsv\\<pi> \\<pi> \\<subseteq> vs;\n         lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n        \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>\\<pi> s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' SKIP \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 2. \\<And>\\<pi> x i a s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[i] ::= a) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := (s x)(aval i s := aval a s))) s\n 3. \\<And>\\<pi> x y s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[] ::= y) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := s y)) s\n 4. \\<And>\\<pi> x s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (CLEAR x[]) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := \\<lambda>_. 0)) s\n 5. \\<And>\\<pi> l s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (Assign_Locals l) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs <l|s> s\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3 vs.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (c\\<^sub>1;; c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2 vs.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1 vs.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 9. \\<And>b s \\<pi> c vs.\n       \\<lbrakk>\\<not> bval b s; lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 10. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3 vs.\n        \\<lbrakk>bval b s\\<^sub>1;\n         \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n         \\<And>vs.\n            \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n             lhsv' c \\<subseteq> vs\\<rbrakk>\n            \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n         \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n         \\<And>vs.\n            \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n             lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n            \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n         lhsv\\<pi> \\<pi> \\<subseteq> vs;\n         lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n        \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1\nA total of 11 subgoals...", "case (PScope \\<pi>' p c s t \\<pi>)"], ["proof (state)\nthis:\n  \\<pi>': (p, c) \\<Rightarrow> s\n  \\<lbrakk>lhsv\\<pi> \\<pi>' \\<subseteq> ?vs;\n   lhsv' p \\<subseteq> ?vs\\<rbrakk>\n  \\<Longrightarrow> modifies ?vs s c\n  lhsv\\<pi> t \\<subseteq> \\<pi>\n  lhsv' (PScope \\<pi>' p) \\<subseteq> \\<pi>\n\ngoal (11 subgoals):\n 1. \\<And>\\<pi> s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' SKIP \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 2. \\<And>\\<pi> x i a s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[i] ::= a) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := (s x)(aval i s := aval a s))) s\n 3. \\<And>\\<pi> x y s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[] ::= y) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := s y)) s\n 4. \\<And>\\<pi> x s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (CLEAR x[]) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := \\<lambda>_. 0)) s\n 5. \\<And>\\<pi> l s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (Assign_Locals l) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs <l|s> s\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3 vs.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (c\\<^sub>1;; c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2 vs.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1 vs.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 9. \\<And>b s \\<pi> c vs.\n       \\<lbrakk>\\<not> bval b s; lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 10. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3 vs.\n        \\<lbrakk>bval b s\\<^sub>1;\n         \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n         \\<And>vs.\n            \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n             lhsv' c \\<subseteq> vs\\<rbrakk>\n            \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n         \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n         \\<And>vs.\n            \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n             lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n            \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n         lhsv\\<pi> \\<pi> \\<subseteq> vs;\n         lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n        \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1\nA total of 11 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<pi>': (p, c) \\<Rightarrow> s\n  \\<lbrakk>lhsv\\<pi> \\<pi>' \\<subseteq> ?vs;\n   lhsv' p \\<subseteq> ?vs\\<rbrakk>\n  \\<Longrightarrow> modifies ?vs s c\n  lhsv\\<pi> t \\<subseteq> \\<pi>\n  lhsv' (PScope \\<pi>' p) \\<subseteq> \\<pi>", "show ?case"], ["proof (prove)\nusing this:\n  \\<pi>': (p, c) \\<Rightarrow> s\n  \\<lbrakk>lhsv\\<pi> \\<pi>' \\<subseteq> ?vs;\n   lhsv' p \\<subseteq> ?vs\\<rbrakk>\n  \\<Longrightarrow> modifies ?vs s c\n  lhsv\\<pi> t \\<subseteq> \\<pi>\n  lhsv' (PScope \\<pi>' p) \\<subseteq> \\<pi>\n\ngoal (1 subgoal):\n 1. modifies \\<pi> s c", "by (simp add: SUP_le_iff ranI lhsv\\<pi>_def)"], ["proof (state)\nthis:\n  modifies \\<pi> s c\n\ngoal (10 subgoals):\n 1. \\<And>\\<pi> s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' SKIP \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 2. \\<And>\\<pi> x i a s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[i] ::= a) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := (s x)(aval i s := aval a s))) s\n 3. \\<And>\\<pi> x y s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (x[] ::= y) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := s y)) s\n 4. \\<And>\\<pi> x s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (CLEAR x[]) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs (s(x := \\<lambda>_. 0)) s\n 5. \\<And>\\<pi> l s vs.\n       \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (Assign_Locals l) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs <l|s> s\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3 vs.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (c\\<^sub>1;; c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2 vs.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>1 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1 vs.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        \\<And>vs.\n           \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n            lhsv' c\\<^sub>2 \\<subseteq> vs\\<rbrakk>\n           \\<Longrightarrow> modifies vs t s;\n        lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs t s\n 9. \\<And>b s \\<pi> c vs.\n       \\<lbrakk>\\<not> bval b s; lhsv\\<pi> \\<pi> \\<subseteq> vs;\n        lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> modifies vs s s\n 10. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3 vs.\n        \\<lbrakk>bval b s\\<^sub>1;\n         \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n         \\<And>vs.\n            \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n             lhsv' c \\<subseteq> vs\\<rbrakk>\n            \\<Longrightarrow> modifies vs s\\<^sub>2 s\\<^sub>1;\n         \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n         \\<And>vs.\n            \\<lbrakk>lhsv\\<pi> \\<pi> \\<subseteq> vs;\n             lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n            \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>2;\n         lhsv\\<pi> \\<pi> \\<subseteq> vs;\n         lhsv' (WHILE b DO c) \\<subseteq> vs\\<rbrakk>\n        \\<Longrightarrow> modifies vs s\\<^sub>3 s\\<^sub>1", "qed (auto simp: modifies_def combine_states_def)"], ["", "lemma modifies_lhsv\\<pi>:\n    assumes \"\\<pi>: (c, s) \\<Rightarrow> t\"\n    assumes \"\\<pi> p = Some c\"\n    shows \"modifies (lhsv\\<pi> \\<pi>) t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. modifies (lhsv\\<pi> \\<pi>) t s", "apply (rule modifies_lhsv'_gen[OF _ _ assms(1)])"], ["proof (prove)\ngoal (2 subgoals):\n 1. lhsv\\<pi> \\<pi> \\<subseteq> lhsv\\<pi> \\<pi>\n 2. lhsv' c \\<subseteq> lhsv\\<pi> \\<pi>", "using assms(2)"], ["proof (prove)\nusing this:\n  \\<pi> p = Some c\n\ngoal (2 subgoals):\n 1. lhsv\\<pi> \\<pi> \\<subseteq> lhsv\\<pi> \\<pi>\n 2. lhsv' c \\<subseteq> lhsv\\<pi> \\<pi>", "by (auto simp: lhsv\\<pi>_def ran_def)"], ["", "lemma lhsv_approx: \"lhsv \\<pi>' c \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lhsv \\<pi>' c \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' c", "apply (induction c arbitrary: \\<pi>')"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>\\<pi>'.\n       lhsv \\<pi>' SKIP \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' SKIP\n 2. \\<And>x1 x2 x3 \\<pi>'.\n       lhsv \\<pi>' (x1[x2] ::= x3)\n       \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' (x1[x2] ::= x3)\n 3. \\<And>x1 x2 \\<pi>'.\n       lhsv \\<pi>' (x1[] ::= x2)\n       \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' (x1[] ::= x2)\n 4. \\<And>x \\<pi>'.\n       lhsv \\<pi>' (CLEAR x[])\n       \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' (CLEAR x[])\n 5. \\<And>x \\<pi>'.\n       lhsv \\<pi>' (Assign_Locals x)\n       \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' (Assign_Locals x)\n 6. \\<And>c1 c2 \\<pi>'.\n       \\<lbrakk>\\<And>\\<pi>'.\n                   lhsv \\<pi>' c1\n                   \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' c1;\n        \\<And>\\<pi>'.\n           lhsv \\<pi>' c2\n           \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' c2\\<rbrakk>\n       \\<Longrightarrow> lhsv \\<pi>' (c1;; c2)\n                         \\<subseteq> lhsv\\<pi> \\<pi>' \\<union>\n                                     lhsv' (c1;; c2)\n 7. \\<And>x1 c1 c2 \\<pi>'.\n       \\<lbrakk>\\<And>\\<pi>'.\n                   lhsv \\<pi>' c1\n                   \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' c1;\n        \\<And>\\<pi>'.\n           lhsv \\<pi>' c2\n           \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' c2\\<rbrakk>\n       \\<Longrightarrow> lhsv \\<pi>' (IF x1 THEN c1 ELSE c2)\n                         \\<subseteq> lhsv\\<pi> \\<pi>' \\<union>\n                                     lhsv' (IF x1 THEN c1 ELSE c2)\n 8. \\<And>x1 c \\<pi>'.\n       (\\<And>\\<pi>'.\n           lhsv \\<pi>' c\n           \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' c) \\<Longrightarrow>\n       lhsv \\<pi>' (WHILE x1 DO c)\n       \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' (WHILE x1 DO c)\n 9. \\<And>c \\<pi>'.\n       (\\<And>\\<pi>'.\n           lhsv \\<pi>' c\n           \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' c) \\<Longrightarrow>\n       lhsv \\<pi>' (SCOPE c)\n       \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' (SCOPE c)\n 10. \\<And>x \\<pi>'.\n        lhsv \\<pi>' (PCall x)\n        \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' (PCall x)\nA total of 11 subgoals...", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c \\<pi>' x.\n       \\<lbrakk>\\<And>\\<pi>'.\n                   lhsv \\<pi>' c\n                   \\<subseteq> lhsv\\<pi> \\<pi>' \\<union> lhsv' c;\n        x \\<notin> lhsv' c; x \\<in> lhsv \\<pi>' c; is_global x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> lhsv\\<pi> \\<pi>'", "apply (auto simp: lhsv\\<pi>_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma modifies_lhsv:\n    assumes \"\\<pi>: (c, s) \\<Rightarrow> t\"\n    shows \"modifies (lhsv \\<pi> c) t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. modifies (lhsv \\<pi> c) t s", "using assms"], ["proof (prove)\nusing this:\n  \\<pi>: (c, s) \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. modifies (lhsv \\<pi> c) t s", "apply (induction)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>\\<pi> s. modifies (lhsv \\<pi> SKIP) s s\n 2. \\<And>\\<pi> x i a s.\n       modifies (lhsv \\<pi> (x[i] ::= a))\n        (s(x := (s x)(aval i s := aval a s))) s\n 3. \\<And>\\<pi> x y s. modifies (lhsv \\<pi> (x[] ::= y)) (s(x := s y)) s\n 4. \\<And>\\<pi> x s.\n       modifies (lhsv \\<pi> (CLEAR x[])) (s(x := \\<lambda>_. 0)) s\n 5. \\<And>\\<pi> l s. modifies (lhsv \\<pi> (Assign_Locals l)) <l|s> s\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        modifies (lhsv \\<pi> c\\<^sub>1) s\\<^sub>2 s\\<^sub>1;\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        modifies (lhsv \\<pi> c\\<^sub>2) s\\<^sub>3 s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> modifies (lhsv \\<pi> (c\\<^sub>1;; c\\<^sub>2))\n                          s\\<^sub>3 s\\<^sub>1\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        modifies (lhsv \\<pi> c\\<^sub>1) t s\\<rbrakk>\n       \\<Longrightarrow> modifies\n                          (lhsv \\<pi> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2))\n                          t s\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        modifies (lhsv \\<pi> c\\<^sub>2) t s\\<rbrakk>\n       \\<Longrightarrow> modifies\n                          (lhsv \\<pi> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2))\n                          t s\n 9. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        modifies (lhsv \\<pi> c) s' <<>|s>\\<rbrakk>\n       \\<Longrightarrow> modifies (lhsv \\<pi> (SCOPE c)) <s|s'> s\n 10. \\<And>b s \\<pi> c.\n        \\<not> bval b s \\<Longrightarrow>\n        modifies (lhsv \\<pi> (WHILE b DO c)) s s\nA total of 13 subgoals...", "apply (all \\<open>(auto simp: modifies_def combine_states_def; fail)?\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        modifies (lhsv \\<pi> c) t s\\<rbrakk>\n       \\<Longrightarrow> modifies (lhsv \\<pi> (PCall p)) t s\n 2. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        modifies (lhsv \\<pi>' c) t s\\<rbrakk>\n       \\<Longrightarrow> modifies (lhsv \\<pi> (PScope \\<pi>' c)) t s", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<pi>_ p_ = Some c_; \\<pi>_: (c_, s_) \\<Rightarrow> t_;\n     modifies (lhsv \\<pi>_ c_) t_ s_\\<rbrakk>\n    \\<Longrightarrow> modifies (lhsv \\<pi>_ (PCall p_)) t_ s_", "by (auto simp: modifies_lhsv\\<pi>) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        modifies (lhsv \\<pi>' c) t s\\<rbrakk>\n       \\<Longrightarrow> modifies (lhsv \\<pi> (PScope \\<pi>' c)) t s", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<pi>'_: (c_, s_) \\<Rightarrow> t_;\n     modifies (lhsv \\<pi>'_ c_) t_ s_\\<rbrakk>\n    \\<Longrightarrow> modifies (lhsv \\<pi>_ (PScope \\<pi>'_ c_)) t_ s_", "using lhsv_approx"], ["proof (prove)\nusing this:\n  lhsv ?\\<pi>' ?c \\<subseteq> lhsv\\<pi> ?\\<pi>' \\<union> lhsv' ?c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<pi>'_: (c_, s_) \\<Rightarrow> t_;\n     modifies (lhsv \\<pi>'_ c_) t_ s_\\<rbrakk>\n    \\<Longrightarrow> modifies (lhsv \\<pi>_ (PScope \\<pi>'_ c_)) t_ s_", "by (auto simp: modifies_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma wp_strengthen_modset: \"wp \\<pi> c Q s \\<Longrightarrow> wp \\<pi> c (\\<lambda>s'. Q s' \\<and> modifies (lhsv \\<pi> c) s' s) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp \\<pi> c Q s \\<Longrightarrow>\n    wp \\<pi> c (\\<lambda>s'. Q s' \\<and> modifies (lhsv \\<pi> c) s' s) s", "unfolding wp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t. \\<pi>: (c, s) \\<Rightarrow> t \\<and> Q t \\<Longrightarrow>\n    \\<exists>t.\n       \\<pi>: (c, s) \\<Rightarrow> t \\<and>\n       Q t \\<and> modifies (lhsv \\<pi> c) t s", "by (blast intro: modifies_lhsv)"], ["", "lemma wlp_strengthen_modset: \"wlp \\<pi> c Q s \\<Longrightarrow> wlp \\<pi> c (\\<lambda>s'. Q s' \\<and> modifies (lhsv \\<pi> c) s' s) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp \\<pi> c Q s \\<Longrightarrow>\n    wlp \\<pi> c (\\<lambda>s'. Q s' \\<and> modifies (lhsv \\<pi> c) s' s) s", "unfolding wlp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t.\n       \\<pi>: (c, s) \\<Rightarrow> t \\<longrightarrow> Q t \\<Longrightarrow>\n    \\<forall>t.\n       \\<pi>: (c, s) \\<Rightarrow> t \\<longrightarrow>\n       Q t \\<and> modifies (lhsv \\<pi> c) t s", "by (blast intro: modifies_lhsv)"], ["", "lemma wp_mod_lhsv_eq: \"wp_mod \\<pi> (lhsv \\<pi> c) c Q s = wp \\<pi> c Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp_mod \\<pi> (lhsv \\<pi> c) c Q s = wp \\<pi> c Q s", "unfolding wp_mod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wp \\<pi> c (\\<lambda>s'. modifies (lhsv \\<pi> c) s' s \\<and> Q s') s =\n    wp \\<pi> c Q s", "using modifies_lhsv wp_def"], ["proof (prove)\nusing this:\n  ?\\<pi>: (?c, ?s) \\<Rightarrow> ?t \\<Longrightarrow>\n  modifies (lhsv ?\\<pi> ?c) ?t ?s\n  wp ?\\<pi> ?c ?Q ?s \\<equiv>\n  \\<exists>t. ?\\<pi>: (?c, ?s) \\<Rightarrow> t \\<and> ?Q t\n\ngoal (1 subgoal):\n 1. wp \\<pi> c (\\<lambda>s'. modifies (lhsv \\<pi> c) s' s \\<and> Q s') s =\n    wp \\<pi> c Q s", "by auto"], ["", "lemma wlp_mod_lhsv_eq: \"wlp_mod \\<pi> (lhsv \\<pi> c) c Q s = wlp \\<pi> c Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp_mod \\<pi> (lhsv \\<pi> c) c Q s = wlp \\<pi> c Q s", "unfolding wlp_mod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp \\<pi> c (\\<lambda>s'. modifies (lhsv \\<pi> c) s' s \\<and> Q s') s =\n    wlp \\<pi> c Q s", "using modifies_lhsv wlp_def"], ["proof (prove)\nusing this:\n  ?\\<pi>: (?c, ?s) \\<Rightarrow> ?t \\<Longrightarrow>\n  modifies (lhsv ?\\<pi> ?c) ?t ?s\n  wlp ?\\<pi> ?c ?Q ?s \\<equiv>\n  \\<forall>t. ?\\<pi>: (?c, ?s) \\<Rightarrow> t \\<longrightarrow> ?Q t\n\ngoal (1 subgoal):\n 1. wlp \\<pi> c (\\<lambda>s'. modifies (lhsv \\<pi> c) s' s \\<and> Q s') s =\n    wlp \\<pi> c Q s", "by auto"], ["", "subsubsection \\<open>Hoare-Triple with Modifies-Set\\<close>"], ["", "text \\<open>We define a Hoare-Triple that contains a modifies declaration\\<close>"], ["", "definition \"HT_mods \\<pi> mods P c Q \\<equiv> HT \\<pi> P c (\\<lambda>s\\<^sub>0 s. modifies mods s s\\<^sub>0 \\<and> Q s\\<^sub>0 s)\""], ["", "definition \"HT_partial_mods \\<pi> mods P c Q \\<equiv> HT_partial \\<pi> P c (\\<lambda>s\\<^sub>0 s. Q s\\<^sub>0 s \\<and> modifies mods s s\\<^sub>0)\""], ["", "lemma HT_mods_cong[named_ss vcg_bb cong]:\n    assumes \"vs = vs'\"\n    assumes \"P=P'\"\n    assumes \"c=c'\"\n    assumes \"\\<And>s\\<^sub>0 s. modifies vs s s\\<^sub>0 \\<Longrightarrow> Q s\\<^sub>0 s = Q' s\\<^sub>0 s\"\n    shows \"HT_mods \\<pi> vs P c Q = HT_mods \\<pi> vs' P' c' Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HT_mods \\<pi> vs P c Q = HT_mods \\<pi> vs' P' c' Q'", "unfolding HT_mods_def HT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s\\<^sub>0.\n        P s\\<^sub>0 \\<longrightarrow>\n        wp \\<pi> c\n         (\\<lambda>s. modifies vs s s\\<^sub>0 \\<and> Q s\\<^sub>0 s)\n         s\\<^sub>0) =\n    (\\<forall>s\\<^sub>0.\n        P' s\\<^sub>0 \\<longrightarrow>\n        wp \\<pi> c'\n         (\\<lambda>s. modifies vs' s s\\<^sub>0 \\<and> Q' s\\<^sub>0 s)\n         s\\<^sub>0)", "using assms"], ["proof (prove)\nusing this:\n  vs = vs'\n  P = P'\n  c = c'\n  modifies vs ?s ?s\\<^sub>0 \\<Longrightarrow>\n  Q ?s\\<^sub>0 ?s = Q' ?s\\<^sub>0 ?s\n\ngoal (1 subgoal):\n 1. (\\<forall>s\\<^sub>0.\n        P s\\<^sub>0 \\<longrightarrow>\n        wp \\<pi> c\n         (\\<lambda>s. modifies vs s s\\<^sub>0 \\<and> Q s\\<^sub>0 s)\n         s\\<^sub>0) =\n    (\\<forall>s\\<^sub>0.\n        P' s\\<^sub>0 \\<longrightarrow>\n        wp \\<pi> c'\n         (\\<lambda>s. modifies vs' s s\\<^sub>0 \\<and> Q' s\\<^sub>0 s)\n         s\\<^sub>0)", "by (auto intro: wp_conseq)"], ["", "lemma HT_partial_mods_cong[named_ss vcg_bb cong]:\n    assumes \"vs = vs'\"\n    assumes \"P=P'\"\n    assumes \"c=c'\"\n    assumes \"\\<And>s\\<^sub>0 s. modifies vs s s\\<^sub>0 \\<Longrightarrow> Q s\\<^sub>0 s = Q' s\\<^sub>0 s\"\n    shows \"HT_partial_mods \\<pi> vs P c Q = HT_partial_mods \\<pi> vs' P' c' Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HT_partial_mods \\<pi> vs P c Q = HT_partial_mods \\<pi> vs' P' c' Q'", "unfolding HT_partial_mods_def HT_partial_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s\\<^sub>0.\n        P s\\<^sub>0 \\<longrightarrow>\n        wlp \\<pi> c\n         (\\<lambda>s. Q s\\<^sub>0 s \\<and> modifies vs s s\\<^sub>0)\n         s\\<^sub>0) =\n    (\\<forall>s\\<^sub>0.\n        P' s\\<^sub>0 \\<longrightarrow>\n        wlp \\<pi> c'\n         (\\<lambda>s. Q' s\\<^sub>0 s \\<and> modifies vs' s s\\<^sub>0)\n         s\\<^sub>0)", "using assms"], ["proof (prove)\nusing this:\n  vs = vs'\n  P = P'\n  c = c'\n  modifies vs ?s ?s\\<^sub>0 \\<Longrightarrow>\n  Q ?s\\<^sub>0 ?s = Q' ?s\\<^sub>0 ?s\n\ngoal (1 subgoal):\n 1. (\\<forall>s\\<^sub>0.\n        P s\\<^sub>0 \\<longrightarrow>\n        wlp \\<pi> c\n         (\\<lambda>s. Q s\\<^sub>0 s \\<and> modifies vs s s\\<^sub>0)\n         s\\<^sub>0) =\n    (\\<forall>s\\<^sub>0.\n        P' s\\<^sub>0 \\<longrightarrow>\n        wlp \\<pi> c'\n         (\\<lambda>s. Q' s\\<^sub>0 s \\<and> modifies vs' s s\\<^sub>0)\n         s\\<^sub>0)", "by (auto intro: wlp_conseq)"], ["", "lemma vcg_wp_conseq:\n    assumes \"HT_mods \\<pi> mods P c Q\"\n    assumes \"P s\"\n    assumes \"\\<And>s'. \\<lbrakk>modifies mods s' s; Q s s'\\<rbrakk> \\<Longrightarrow> Q' s'\"\n    shows \"wp \\<pi> c Q' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp \\<pi> c Q' s", "using assms"], ["proof (prove)\nusing this:\n  HT_mods \\<pi> mods P c Q\n  P s\n  \\<lbrakk>modifies mods ?s' s; Q s ?s'\\<rbrakk> \\<Longrightarrow> Q' ?s'\n\ngoal (1 subgoal):\n 1. wp \\<pi> c Q' s", "unfolding HT_mods_def HT_def"], ["proof (prove)\nusing this:\n  \\<forall>s\\<^sub>0.\n     P s\\<^sub>0 \\<longrightarrow>\n     wp \\<pi> c (\\<lambda>s. modifies mods s s\\<^sub>0 \\<and> Q s\\<^sub>0 s)\n      s\\<^sub>0\n  P s\n  \\<lbrakk>modifies mods ?s' s; Q s ?s'\\<rbrakk> \\<Longrightarrow> Q' ?s'\n\ngoal (1 subgoal):\n 1. wp \\<pi> c Q' s", "by (metis (no_types, lifting) wp_def)"], ["", "lemma vcg_wlp_conseq:\n    assumes \"HT_partial_mods \\<pi> mods P c Q\"\n    assumes \"P s\"\n    assumes \"\\<And>s'. \\<lbrakk>modifies mods s' s; Q s s'\\<rbrakk> \\<Longrightarrow> Q' s'\"\n    shows \"wlp \\<pi> c Q' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp \\<pi> c Q' s", "using assms"], ["proof (prove)\nusing this:\n  HT_partial_mods \\<pi> mods P c Q\n  P s\n  \\<lbrakk>modifies mods ?s' s; Q s ?s'\\<rbrakk> \\<Longrightarrow> Q' ?s'\n\ngoal (1 subgoal):\n 1. wlp \\<pi> c Q' s", "unfolding HT_partial_mods_def HT_partial_def"], ["proof (prove)\nusing this:\n  \\<forall>s\\<^sub>0.\n     P s\\<^sub>0 \\<longrightarrow>\n     wlp \\<pi> c\n      (\\<lambda>s. Q s\\<^sub>0 s \\<and> modifies mods s s\\<^sub>0) s\\<^sub>0\n  P s\n  \\<lbrakk>modifies mods ?s' s; Q s ?s'\\<rbrakk> \\<Longrightarrow> Q' ?s'\n\ngoal (1 subgoal):\n 1. wlp \\<pi> c Q' s", "by (metis (no_types, lifting) wlp_def)"], ["", "text \\<open>The last rule allows us to re-use a total correctness verification in a partial \n    correctness proof.\\<close>"], ["", "lemma vcg_wlp_wp_conseq:\n    assumes \"HT_mods \\<pi> mods P c Q\"\n    assumes \"P s\"\n    assumes \"\\<And>s'. \\<lbrakk>modifies mods s' s; Q s s'\\<rbrakk> \\<Longrightarrow> Q' s'\"\n    shows \"wlp \\<pi> c Q' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp \\<pi> c Q' s", "using assms vcg_wp_conseq wp_imp_wlp"], ["proof (prove)\nusing this:\n  HT_mods \\<pi> mods P c Q\n  P s\n  \\<lbrakk>modifies mods ?s' s; Q s ?s'\\<rbrakk> \\<Longrightarrow> Q' ?s'\n  \\<lbrakk>HT_mods ?\\<pi> ?mods ?P ?c ?Q; ?P ?s;\n   \\<And>s'.\n      \\<lbrakk>modifies ?mods s' ?s; ?Q ?s s'\\<rbrakk>\n      \\<Longrightarrow> ?Q' s'\\<rbrakk>\n  \\<Longrightarrow> wp ?\\<pi> ?c ?Q' ?s\n  wp ?\\<pi> ?c ?Q ?s \\<Longrightarrow> wlp ?\\<pi> ?c ?Q ?s\n\ngoal (1 subgoal):\n 1. wlp \\<pi> c Q' s", "by auto"], ["", "(*\n    TODO: Rules for combining proofs over the same program!\n  *)"], ["", "subsection \\<open>Free Variables of Expressions\\<close>"], ["", "text \\<open>This function computes the set of variables that occur in an expression\\<close>"], ["", "fun fv_aexp :: \"aexp \\<Rightarrow> vname set\" where\n  \"fv_aexp (N _) = {}\"\n| \"fv_aexp (Vidx x i) = insert x (fv_aexp i)\"\n| \"fv_aexp (Unop f a) = fv_aexp a\"\n| \"fv_aexp (Binop f a b) = fv_aexp a \\<union> fv_aexp b\""], ["", "declare fv_aexp.simps[named_ss vcg_bb]"], ["", "lemma aval_eq_on_fv: \"(\\<forall>x\\<in>fv_aexp a. s x = s' x) \\<Longrightarrow> aval a s = aval a s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv_aexp a. s x = s' x \\<Longrightarrow>\n    aval a s = aval a s'", "by (induction a) auto"], ["", "lemma aval_indep_non_fv: \"x\\<notin>fv_aexp a \\<Longrightarrow> aval a (s(x:=y)) = aval a s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> fv_aexp a \\<Longrightarrow> aval a (s(x := y)) = aval a s", "by (induction a) auto"], ["", "lemma redundant_array_assignment: \"(x[] ::= a;; a[] ::= x) \\<sim> (x[] ::= a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x[] ::= a;; a[] ::= x \\<sim> x[] ::= a", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s t \\<pi>.\n       \\<pi>: (x[] ::= a;; a[] ::= x, s) \\<Rightarrow> t \\<Longrightarrow>\n       \\<pi>: (x[] ::= a, s) \\<Rightarrow> t\n 2. \\<And>s t \\<pi>.\n       \\<pi>: (x[] ::= a, s) \\<Rightarrow> t \\<Longrightarrow>\n       \\<pi>: (x[] ::= a;; a[] ::= x, s) \\<Rightarrow> t", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s \\<pi>. \\<pi>: (x[] ::= a, s) \\<Rightarrow> s(x := s a, a := s a)\n 2. \\<And>s \\<pi>.\n       \\<pi>: (x[] ::= a;; a[] ::= x, s) \\<Rightarrow> s(x := s a)", "apply (metis ArrayCpy fun_upd_def fun_upd_idem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s \\<pi>.\n       \\<pi>: (x[] ::= a;; a[] ::= x, s) \\<Rightarrow> s(x := s a)", "by (metis ArrayCpy Seq fun_upd_apply fun_upd_idem)"], ["", "lemma redundant_var_assignment: \n  assumes \"x\\<notin>fv_aexp i\" \"x\\<notin>fv_aexp j\"\n  shows \"(x[i] ::= Vidx a j;; a[j] ::= Vidx x i) \\<sim> (x[i] ::= Vidx a j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x[i] ::= Vidx a j;; a[j] ::= Vidx x i \\<sim> x[i] ::= Vidx a j", "apply (rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s t \\<pi>.\n       \\<pi>: (x[i] ::= Vidx a j;; a[j] ::= Vidx x i,\n               s) \\<Rightarrow> t \\<Longrightarrow>\n       \\<pi>: (x[i] ::= Vidx a j, s) \\<Rightarrow> t\n 2. \\<And>s t \\<pi>.\n       \\<pi>: (x[i] ::= Vidx a j, s) \\<Rightarrow> t \\<Longrightarrow>\n       \\<pi>: (x[i] ::= Vidx a j;; a[j] ::= Vidx x i, s) \\<Rightarrow> t", "using assms[THEN aval_indep_non_fv]"], ["proof (prove)\nusing this:\n  aval i (?s(x := ?y)) = aval i ?s\n  aval j (?s(x := ?y)) = aval j ?s\n\ngoal (2 subgoals):\n 1. \\<And>s t \\<pi>.\n       \\<pi>: (x[i] ::= Vidx a j;; a[j] ::= Vidx x i,\n               s) \\<Rightarrow> t \\<Longrightarrow>\n       \\<pi>: (x[i] ::= Vidx a j, s) \\<Rightarrow> t\n 2. \\<And>s t \\<pi>.\n       \\<pi>: (x[i] ::= Vidx a j, s) \\<Rightarrow> t \\<Longrightarrow>\n       \\<pi>: (x[i] ::= Vidx a j;; a[j] ::= Vidx x i, s) \\<Rightarrow> t", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s \\<pi>.\n       \\<lbrakk>\\<And>s y. aval i (s(x := y)) = aval i s;\n        \\<And>s y. aval j (s(x := y)) = aval j s; a = x\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (x[i] ::= Vidx x j, s) \\<Rightarrow> s\n                         (x := (s x)\n                            (aval i s := s x (aval j s),\n                             aval j s := s x (aval j s)))\n 2. \\<And>s \\<pi>.\n       \\<lbrakk>\\<And>s y. aval i (s(x := y)) = aval i s;\n        \\<And>s y. aval j (s(x := y)) = aval j s; a \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (x[i] ::= Vidx a j, s) \\<Rightarrow> s\n                         (x := (s x)(aval i s := s a (aval j s)), a := s a)\n 3. \\<And>s \\<pi>.\n       \\<lbrakk>\\<And>s y. aval i (s(x := y)) = aval i s;\n        \\<And>s y. aval j (s(x := y)) = aval j s\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (x[i] ::= Vidx a j;; a[j] ::= Vidx x i,\n                                 s) \\<Rightarrow> s\n                         (x := (s x)(aval i s := s a (aval j s)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s y. aval i (s(x := y)) = aval i s;\n     \\<And>s y. aval j (s(x := y)) = aval j s; a = x\\<rbrakk>\n    \\<Longrightarrow> \\<pi>_: (x[i] ::= Vidx x j, s_) \\<Rightarrow> s_\n                      (x := (s_ x)\n                         (aval i s_ := s_ x (aval j s_),\n                          aval j s_ := s_ x (aval j s_)))", "by (smt Assign' aval.simps(1) aval.simps(2) fun_upd_apply fun_upd_idem_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s \\<pi>.\n       \\<lbrakk>\\<And>s y. aval i (s(x := y)) = aval i s;\n        \\<And>s y. aval j (s(x := y)) = aval j s; a \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (x[i] ::= Vidx a j, s) \\<Rightarrow> s\n                         (x := (s x)(aval i s := s a (aval j s)), a := s a)\n 2. \\<And>s \\<pi>.\n       \\<lbrakk>\\<And>s y. aval i (s(x := y)) = aval i s;\n        \\<And>s y. aval j (s(x := y)) = aval j s\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (x[i] ::= Vidx a j;; a[j] ::= Vidx x i,\n                                 s) \\<Rightarrow> s\n                         (x := (s x)(aval i s := s a (aval j s)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s y. aval i (s(x := y)) = aval i s;\n     \\<And>s y. aval j (s(x := y)) = aval j s; a \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> \\<pi>_: (x[i] ::= Vidx a j, s_) \\<Rightarrow> s_\n                      (x := (s_ x)(aval i s_ := s_ a (aval j s_)),\n                       a := s_ a)", "by (simp add: Assign' fun_upd_twist)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s \\<pi>.\n       \\<lbrakk>\\<And>s y. aval i (s(x := y)) = aval i s;\n        \\<And>s y. aval j (s(x := y)) = aval j s\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (x[i] ::= Vidx a j;; a[j] ::= Vidx x i,\n                                 s) \\<Rightarrow> s\n                         (x := (s x)(aval i s := s a (aval j s)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s y. aval i (s(x := y)) = aval i s;\n     \\<And>s y. aval j (s(x := y)) = aval j s\\<rbrakk>\n    \\<Longrightarrow> \\<pi>_: (x[i] ::= Vidx a j;; a[j] ::= Vidx x i,\n                               s_) \\<Rightarrow> s_\n                      (x := (s_ x)(aval i s_ := s_ a (aval j s_)))", "by (smt Seq aval.simps(2) big_step.intros(2) fun_upd_def fun_upd_triv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}