{"file_name": "/home/qj213/afp-2021-10-22/thys/IMP2/IMP2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/IMP2", "problem_names": ["lemmas [deriv_unfolds] = Params_def Inline_def AssignIdx_retv_def ArrayCpy_retv_def", "lemma upd_idxSame[named_ss vcg_bb]: \"f(i:=a,i:=b) = f (i:=b)\"", "lemmas [named_ss vcg_bb] = triv_forall_equality", "lemmas nat_distribs = nat_add_distrib nat_diff_distrib Suc_diff_le nat_mult_distrib nat_div_distrib", "lemmas nat_distribs = nat_add_distrib nat_diff_distrib Suc_diff_le nat_mult_distrib nat_div_distrib", "lemmas nat_distribs = nat_add_distrib nat_diff_distrib Suc_diff_le nat_mult_distrib nat_div_distrib", "lemma [named_ss vcg_bb]: \"BB_PROTECT True\"", "lemmas nat_distribs = nat_add_distrib nat_diff_distrib Suc_diff_le nat_mult_distrib nat_div_distrib"], "translations": [["", "lemmas [deriv_unfolds] = Params_def Inline_def AssignIdx_retv_def ArrayCpy_retv_def"], ["", "section \\<open>Ad-Hoc Regression Tests\\<close>"], ["", "experiment begin"], ["", "lemma upd_idxSame[named_ss vcg_bb]: \"f(i:=a,i:=b) = f (i:=b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f(i := a, i := b) = f(i := b)", "by auto"], ["", "lemmas [named_ss vcg_bb] = triv_forall_equality"], ["", "declare [[eta_contract = false ]]"], ["", "program_spec (partial) p2\n  assumes \"n>0\"  \n  ensures \"n=0\"\n  defines \\<open>while (n>0) @invariant \\<open>n\\<ge>0\\<close> { if (n+1>1) {\n    n=n-1; \n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    G1=n; G2=n; G3=n; n=G1; n=G2; n=G3;\n    skip\n  } }\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT'_partial Map.empty\n     (\\<lambda>\\<ss>. VAR (\\<ss> ''n'' 0) (\\<lambda>n. BB_PROTECT (0 < n)))\n     (\\<lambda>\\<ss>\\<^sub>0.\n         WHILE {ANNOTATION\n                 (\\<lambda>\\<ss>.\n                     VAR (\\<ss> ''n'' 0)\n                      (\\<lambda>n.\n                          BB_PROTECT\n                           (0 \\<le> n)))} Cmpop (\\<lambda>x y. y < x)\n     (V ''n'') (N 0)\n         DO IF Cmpop (\\<lambda>x y. y < x) (Binop (+) (V ''n'') (N 1)) (N 1)\n            THEN ''n'' ::= Binop (-) (V ''n'') (N 1);; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; ''G1''[] ::= ''n'';;\n            ''G2''[] ::= ''n'';; ''G3''[] ::= ''n'';; ''n''[] ::= ''G1'';;\n            ''n''[] ::= ''G2'';; ''n''[] ::= ''G3'';; SKIP ELSE SKIP)\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''n'' 0) (\\<lambda>n. BB_PROTECT (n = 0)))", "apply vcg"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''invar-initial''; 0 < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> n\\<^sub>0\n 2. \\<And>n\\<^sub>0 n.\n       \\<lbrakk>\\<paragraph>''invar-pres''; \\<paragraph>''then'';\n        0 < n\\<^sub>0; 0 \\<le> n; 0 < n; 1 < n + 1\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> n - 1\n 3. \\<And>n\\<^sub>0 n.\n       \\<lbrakk>\\<paragraph>''invar-post''; 0 < n\\<^sub>0; 0 \\<le> n;\n        \\<not> 0 < n\\<rbrakk>\n       \\<Longrightarrow> n = 0", "by auto"], ["", "program_spec p2'\n  assumes \"n>0\"  \n  ensures \"n=0\"\n  defines \\<open>while (n>0) @variant \\<open>n\\<close> @invariant \\<open>n\\<ge>0\\<close> { n=n-1 }\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>. VAR (\\<ss> ''n'' 0) (\\<lambda>n. BB_PROTECT (0 < n)))\n     (\\<lambda>\\<ss>\\<^sub>0.\n         WHILE {ANNOTATION\n                 (\\<lambda>\\<ss>.\n                     VAR (\\<ss> ''n'' 0)\n                      (\\<lambda>n.\n                          BB_PROTECT\n                           n))} {ANNOTATION\n                                  (\\<lambda>\\<ss>.\nVAR (\\<ss> ''n'' 0)\n (\\<lambda>n.\n     BB_PROTECT (0 \\<le> n)))} Cmpop (\\<lambda>x y. y < x) (V ''n'') (N 0)\n         DO ''n'' ::= Binop (-) (V ''n'') (N 1))\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''n'' 0) (\\<lambda>n. BB_PROTECT (n = 0)))", "apply vcg"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''rel-wf''; 0 < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wf (measure nat)\n 2. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''invar-initial''; 0 < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> n\\<^sub>0\n 3. \\<And>n\\<^sub>0 n.\n       \\<lbrakk>\\<paragraph>''Invar pres''; 0 < n\\<^sub>0; 0 \\<le> n;\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> n - 1\n 4. \\<And>n\\<^sub>0 n.\n       \\<lbrakk>\\<paragraph>''Var pres''; 0 < n\\<^sub>0; 0 \\<le> n;\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> (n - 1, n) \\<in> measure nat\n 5. \\<And>n\\<^sub>0 n.\n       \\<lbrakk>\\<paragraph>''invar-post''; 0 < n\\<^sub>0; 0 \\<le> n;\n        \\<not> 0 < n\\<rbrakk>\n       \\<Longrightarrow> n = 0", "by auto"], ["", "program_spec p2''\n  assumes \"n>0\"  \n  ensures \"n=0\"\n  defines \\<open>while (n>0) @relation \\<open>measure nat\\<close> @variant \\<open>n\\<close> @invariant \\<open>n\\<ge>0\\<close> { n=n-1 }\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>. VAR (\\<ss> ''n'' 0) (\\<lambda>n. BB_PROTECT (0 < n)))\n     (\\<lambda>\\<ss>\\<^sub>0.\n         WHILE {ANNOTATION\n                 (BB_PROTECT\n                   (measure\n                     nat))} {ANNOTATION\n                              (\\<lambda>\\<ss>.\n                                  VAR (\\<ss> ''n'' 0)\n                                   (\\<lambda>n.\n BB_PROTECT\n  n))} {ANNOTATION\n         (\\<lambda>\\<ss>.\n             VAR (\\<ss> ''n'' 0)\n              (\\<lambda>n.\n                  BB_PROTECT\n                   (0 \\<le> n)))} Cmpop (\\<lambda>x y. y < x) (V ''n'')\n                                   (N 0)\n         DO ''n'' ::= Binop (-) (V ''n'') (N 1))\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''n'' 0) (\\<lambda>n. BB_PROTECT (n = 0)))", "apply vcg"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''rel-wf''; 0 < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wf (measure nat)\n 2. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''invar-initial''; 0 < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> n\\<^sub>0\n 3. \\<And>n\\<^sub>0 n.\n       \\<lbrakk>\\<paragraph>''Invar pres''; 0 < n\\<^sub>0; 0 \\<le> n;\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> n - 1\n 4. \\<And>n\\<^sub>0 n.\n       \\<lbrakk>\\<paragraph>''Var pres''; 0 < n\\<^sub>0; 0 \\<le> n;\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> (n - 1, n) \\<in> measure nat\n 5. \\<And>n\\<^sub>0 n.\n       \\<lbrakk>\\<paragraph>''invar-post''; 0 < n\\<^sub>0; 0 \\<le> n;\n        \\<not> 0 < n\\<rbrakk>\n       \\<Longrightarrow> n = 0", "by auto"], ["", "program_spec p3  \n  assumes \"True\"\n  ensures \"n = n\\<^sub>0 \\<and> N=42\"\n  defines \\<open>\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope n = 0;\n    scope {n = 0}; N=42\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty (\\<lambda>\\<ss>. BB_PROTECT True)\n     (\\<lambda>\\<ss>\\<^sub>0. SCOPE ''n'' ::= N 0;; SCOPE ''n'' ::= N 0;;\n         SCOPE ''n'' ::= N 0;; SCOPE ''n'' ::= N 0;; SCOPE ''n'' ::= N 0;;\n         SCOPE ''n'' ::= N 0;; SCOPE ''n'' ::= N 0;; SCOPE ''n'' ::= N 0;;\n         SCOPE ''n'' ::= N 0;; SCOPE ''n'' ::= N 0;; SCOPE ''n'' ::= N 0;;\n         SCOPE ''n'' ::= N 0;; SCOPE ''n'' ::= N 0;; SCOPE ''n'' ::= N 0;;\n         SCOPE ''n'' ::= N 0;; SCOPE ''n'' ::= N 0;; SCOPE ''n'' ::= N 0;;\n         SCOPE ''n'' ::= N 0;; SCOPE ''n'' ::= N 0;; SCOPE ''n'' ::= N 0;;\n         ''N'' ::= N 42)\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''n'' 0)\n          (\\<lambda>n.\n              VAR (\\<ss> ''N'' 0)\n               (\\<lambda>N.\n                   VAR (\\<ss>\\<^sub>0 ''n'' 0)\n                    (\\<lambda>n\\<^sub>0.\n                        BB_PROTECT (n = n\\<^sub>0 \\<and> N = 42)))))", "apply vcg"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0.\n       True \\<Longrightarrow> n\\<^sub>0 = n\\<^sub>0 \\<and> 42 = 42", "by auto"], ["", "end"], ["", "subsection \\<open>More Regression Tests\\<close>"], ["", "experiment begin"], ["", "lemmas nat_distribs = nat_add_distrib nat_diff_distrib Suc_diff_le nat_mult_distrib nat_div_distrib"], ["", "program_spec exp_count_up1\n  assumes \"0\\<le>n\"\n  ensures \"a = 2^nat n\\<^sub>0\"\n  defines \\<open>\n    a = 1;\n    c = 0;\n    while (c<n) \n      @variant \\<open>n-c\\<close> \n      @invariant \\<open>0\\<le>c \\<and> c\\<le>n \\<and> a=2^nat c\\<close>    \n    {\n      a=2*a;\n      \n      \n      c=c+1\n    }\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>.\n         VAR (\\<ss> ''n'' 0) (\\<lambda>n. BB_PROTECT (0 \\<le> n)))\n     (\\<lambda>\\<ss>\\<^sub>0. ''a'' ::= N 1;; ''c'' ::= N 0;;\n         WHILE {ANNOTATION\n                 (\\<lambda>\\<ss>.\n                     VAR (\\<ss> ''n'' 0)\n                      (\\<lambda>n.\n                          VAR (\\<ss> ''c'' 0)\n                           (\\<lambda>c.\n                               BB_PROTECT\n                                (n -\n                                 c))))} {ANNOTATION\n    (\\<lambda>\\<ss>.\n        VAR (\\<ss> ''n'' 0)\n         (\\<lambda>n.\n             VAR (\\<ss> ''c'' 0)\n              (\\<lambda>c.\n                  VAR (\\<ss> ''a'' 0)\n                   (\\<lambda>a.\n                       BB_PROTECT\n                        (0 \\<le> c \\<and>\n                         c \\<le> n \\<and>\n                         a = 2 ^ nat c)))))} Cmpop (<) (V ''c'') (V ''n'')\n         DO (''a'' ::= Binop (*) (N 2) (V ''a'');;\n             ''c'' ::= Binop (+) (V ''c'') (N 1)))\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''a'' 0)\n          (\\<lambda>a.\n              VAR (\\<ss>\\<^sub>0 ''n'' 0)\n               (\\<lambda>n\\<^sub>0. BB_PROTECT (a = 2 ^ nat n\\<^sub>0))))", "apply vcg"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''rel-wf''; 0 \\<le> n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wf (measure nat)\n 2. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''invar-initial''; 0 \\<le> n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> 0 \\<and>\n                         0 \\<le> n\\<^sub>0 \\<and> 1 = 2 ^ nat 0\n 3. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''Invar pres''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> c + 1 \\<and>\n                         c + 1 \\<le> n\\<^sub>0 \\<and>\n                         2 * a = 2 ^ nat (c + 1)\n 4. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''Var pres''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> (n\\<^sub>0 - (c + 1), n\\<^sub>0 - c)\n                         \\<in> measure nat\n 5. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''invar-post''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        \\<not> c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> a = 2 ^ nat n\\<^sub>0", "by (auto simp: algebra_simps nat_distribs)"], ["", "program_spec exp_count_up1'\n  assumes \"0\\<le>n\"\n  ensures \"a = 2^nat n\\<^sub>0\"\n  defines \\<open>\n    a = 1;\n    c = 0;\n    while (c<n) \n      @variant \\<open>n-c\\<close> \n      @invariant \\<open>0\\<le>c \\<and> c\\<le>n \\<and> a=2^nat c\\<close>    \n    {\n      a=2*a; a=2*a; a=2*a; a=2*a;\n      a=a / 2; a=a / 2; a=a / 2; a=a / 2; \n      \n      a=2*a;\n      c=c+1\n    }\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>.\n         VAR (\\<ss> ''n'' 0) (\\<lambda>n. BB_PROTECT (0 \\<le> n)))\n     (\\<lambda>\\<ss>\\<^sub>0. ''a'' ::= N 1;; ''c'' ::= N 0;;\n         WHILE {ANNOTATION\n                 (\\<lambda>\\<ss>.\n                     VAR (\\<ss> ''n'' 0)\n                      (\\<lambda>n.\n                          VAR (\\<ss> ''c'' 0)\n                           (\\<lambda>c.\n                               BB_PROTECT\n                                (n -\n                                 c))))} {ANNOTATION\n    (\\<lambda>\\<ss>.\n        VAR (\\<ss> ''n'' 0)\n         (\\<lambda>n.\n             VAR (\\<ss> ''c'' 0)\n              (\\<lambda>c.\n                  VAR (\\<ss> ''a'' 0)\n                   (\\<lambda>a.\n                       BB_PROTECT\n                        (0 \\<le> c \\<and>\n                         c \\<le> n \\<and>\n                         a = 2 ^ nat c)))))} Cmpop (<) (V ''c'') (V ''n'')\n         DO (''a'' ::= Binop (*) (N 2) (V ''a'');;\n             ''a'' ::= Binop (*) (N 2) (V ''a'');;\n             ''a'' ::= Binop (*) (N 2) (V ''a'');;\n             ''a'' ::= Binop (*) (N 2) (V ''a'');;\n             ''a'' ::= Binop (div) (V ''a'') (N 2);;\n             ''a'' ::= Binop (div) (V ''a'') (N 2);;\n             ''a'' ::= Binop (div) (V ''a'') (N 2);;\n             ''a'' ::= Binop (div) (V ''a'') (N 2);;\n             ''a'' ::= Binop (*) (N 2) (V ''a'');;\n             ''c'' ::= Binop (+) (V ''c'') (N 1)))\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''a'' 0)\n          (\\<lambda>a.\n              VAR (\\<ss>\\<^sub>0 ''n'' 0)\n               (\\<lambda>n\\<^sub>0. BB_PROTECT (a = 2 ^ nat n\\<^sub>0))))", "apply vcg"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''rel-wf''; 0 \\<le> n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wf (measure nat)\n 2. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''invar-initial''; 0 \\<le> n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> 0 \\<and>\n                         0 \\<le> n\\<^sub>0 \\<and> 1 = 2 ^ nat 0\n 3. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''Invar pres''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> c + 1 \\<and>\n                         c + 1 \\<le> n\\<^sub>0 \\<and>\n                         2 *\n                         (2 * (2 * (2 * (2 * a))) div 2 div 2 div 2 div 2) =\n                         2 ^ nat (c + 1)\n 4. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''Var pres''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> (n\\<^sub>0 - (c + 1), n\\<^sub>0 - c)\n                         \\<in> measure nat\n 5. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''invar-post''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        \\<not> c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> a = 2 ^ nat n\\<^sub>0", "by (auto simp: algebra_simps nat_distribs)"], ["", "(* We've made the program a little larger \\<dots> *)"], ["", "program_spec exp_count_up\n  assumes \"0\\<le>n\"\n  ensures \"a = 2^nat n\\<^sub>0\"\n  defines \\<open>\n    a = 1;\n    c = 0;\n    while (c<n) \n      @variant \\<open>n-c\\<close> \n      @invariant \\<open>0\\<le>c \\<and> c\\<le>n \\<and> a=2^nat c\\<close>    \n    {\n      a=2*a;\n      \n      {\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;   a=2*a;    a=2*a;    a=2*a;   a=2*a;    a=2*a;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n      a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;  a=a / 2; a=a / 2;  a=a / 2;\n      skip\n      };\n      \n      c=c+1\n    }\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>.\n         VAR (\\<ss> ''n'' 0) (\\<lambda>n. BB_PROTECT (0 \\<le> n)))\n     (\\<lambda>\\<ss>\\<^sub>0. ''a'' ::= N 1;; ''c'' ::= N 0;;\n         WHILE {ANNOTATION\n                 (\\<lambda>\\<ss>.\n                     VAR (\\<ss> ''n'' 0)\n                      (\\<lambda>n.\n                          VAR (\\<ss> ''c'' 0)\n                           (\\<lambda>c.\n                               BB_PROTECT\n                                (n -\n                                 c))))} {ANNOTATION\n    (\\<lambda>\\<ss>.\n        VAR (\\<ss> ''n'' 0)\n         (\\<lambda>n.\n             VAR (\\<ss> ''c'' 0)\n              (\\<lambda>c.\n                  VAR (\\<ss> ''a'' 0)\n                   (\\<lambda>a.\n                       BB_PROTECT\n                        (0 \\<le> c \\<and>\n                         c \\<le> n \\<and>\n                         a = 2 ^ nat c)))))} Cmpop (<) (V ''c'') (V ''n'')\n         DO (''a'' ::= Binop (*) (N 2) (V ''a'');;\n             (''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (*) (N 2) (V ''a'');;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);; SKIP);;\n             ''c'' ::= Binop (+) (V ''c'') (N 1)))\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''a'' 0)\n          (\\<lambda>a.\n              VAR (\\<ss>\\<^sub>0 ''n'' 0)\n               (\\<lambda>n\\<^sub>0. BB_PROTECT (a = 2 ^ nat n\\<^sub>0))))", "apply vcg"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''rel-wf''; 0 \\<le> n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wf (measure nat)\n 2. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''invar-initial''; 0 \\<le> n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> 0 \\<and>\n                         0 \\<le> n\\<^sub>0 \\<and> 1 = 2 ^ nat 0\n 3. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''Invar pres''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> c + 1 \\<and>\n                         c + 1 \\<le> n\\<^sub>0 \\<and>\n                         2 *\n                         (2 *\n                          (2 *\n                           (2 *\n                            (2 *\n                             (2 *\n                              (2 *\n                               (2 *\n                                (2 *\n                                 (2 *\n                                  (2 *\n                                   (2 *\n                                    (2 *\n                                     (2 *\n(2 *\n (2 *\n  (2 *\n   (2 *\n    (2 *\n     (2 *\n      (2 *\n       (2 *\n        (2 *\n         (2 *\n          (2 *\n           (2 *\n            (2 *\n             (2 *\n              (2 *\n               (2 *\n                (2 *\n                 (2 *\n                  (2 *\n                   (2 *\n                    (2 *\n                     (2 *\n                      (2 *\n                       (2 *\n                        (2 *\n                         (2 *\n                          (2 *\n                           (2 *\n                            (2 *\n                             (2 *\n                              (2 *\n                               (2 *\n                                (2 *\n                                 (2 *\n                                  (2 *\n                                   (2 *\n                                    (2 *\n                                     (2 *\n(2 *\n (2 *\n  (2 *\n   (2 *\n    (2 *\n     (2 *\n      (2 *\n       (2 *\n        (2 *\n         (2 *\n          (2 *\n           (2 *\n            (2 *\n             (2 *\n              (2 *\n               (2 *\n                (2 *\n                 (2 *\n                  (2 *\n                   (2 *\n                    (2 *\n                     (2 *\n                      (2 *\n                       (2 *\n                        (2 *\n                         (2 *\n                          (2 *\n                           (2 *\n                            (2 *\n                             (2 *\n                              (2 *\n                               (2 *\n                                (2 *\n                                 (2 *\n                                  (2 *\n                                   (2 *\n                                    (2 *\n                                     (2 *\n(2 *\n (2 *\n  (2 *\n   (2 *\n    (2 *\n     (2 *\n      (2 *\n       (2 *\n        (2 *\n         (2 *\n          (2 *\n           (2 *\n            (2 *\n             (2 *\n              (2 *\n               (2 *\n                (2 *\n                 (2 *\n                  (2 *\n                   (2 *\n                    (2 *\n                     (2 *\n                      (2 *\n                       (2 *\n                        (2 *\n                         (2 *\n                          (2 *\n                           (2 *\n                            (2 *\n                             (2 *\n                              (2 *\n                               (2 *\n                                (2 *\n                                 (2 *\n                                  (2 *\n                                   (2 *\n                                    (2 *\n                                     (2 *\n(2 *\n (2 *\n  (2 *\n   (2 *\n    (2 *\n     (2 *\n      (2 *\n       (2 *\n        (2 *\n         (2 *\n          (2 *\n           (2 *\n            (2 *\n             (2 *\n              (2 *\n               (2 *\n                (2 *\n                 (2 *\n                  (2 *\n                   (2 *\n                    (2 *\n                     (2 *\n                      (2 *\n                       (2 *\n                        (2 *\n                         (2 *\n                          (2 *\n                           (2 *\n                            (2 *\n                             (2 *\n                              (2 *\n                               (2 *\n                                (2 *\n                                 (2 *\n                                  (2 *\n                                   (2 *\n                                    (2 *\n                                     (2 *\n(2 *\n (2 *\n  (2 *\n   (2 *\n    (2 *\n     (2 *\n      (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * (2 * a)))))))))))))))))))) div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2 div\n                                 2)))))))))))))))))))) div\n             2 div\n             2 div\n             2 div\n             2 div\n             2 div\n             2 div\n             2 div\n             2 div\n             2 div\n             2 div\n             2 div\n             2 div\n             2 div\n             2 div\n             2 div\n             2 div\n             2 div\n             2 div\n             2 div\n             2)))))))))))))))))))) div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2 div\n                               2)))))))))))))))))))) div\n           2 div\n           2 div\n           2 div\n           2 div\n           2 div\n           2 div\n           2 div\n           2 div\n           2 div\n           2 div\n           2 div\n           2 div\n           2 div\n           2 div\n           2 div\n           2 div\n           2 div\n           2 div\n           2 div\n           2)))))))))))))))))))) div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2 div\n                             2)))))))))))))))))))) div\n         2 div\n         2 div\n         2 div\n         2 div\n         2 div\n         2 div\n         2 div\n         2 div\n         2 div\n         2 div\n         2 div\n         2 div\n         2 div\n         2 div\n         2 div\n         2 div\n         2 div\n         2 div\n         2 div\n         2)))))))))))))))))))) div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2 div\n                           2)))))))))))))))))))) div\n       2 div\n       2 div\n       2 div\n       2 div\n       2 div\n       2 div\n       2 div\n       2 div\n       2 div\n       2 div\n       2 div\n       2 div\n       2 div\n       2 div\n       2 div\n       2 div\n       2 div\n       2 div\n       2 div\n       2)))))))))))))))))))) div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 div\n                         2 =\n                         2 ^ nat (c + 1)\n 4. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''Var pres''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> (n\\<^sub>0 - (c + 1), n\\<^sub>0 - c)\n                         \\<in> measure nat\n 5. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''invar-post''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        \\<not> c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> a = 2 ^ nat n\\<^sub>0", "apply (all \\<open>simp?\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''Invar pres''; a = 2 ^ nat c; 0 \\<le> c;\n        c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 2 * 2 ^ nat c = 2 ^ nat (c + 1)", "apply (auto simp: algebra_simps nat_distribs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "program_spec exp_count_up3\n  assumes \"0\\<le>n\"\n  ensures \"a = 2^nat n\\<^sub>0\"\n  defines \\<open>\n    a = 1;\n    c = 0;\n    while (c<n) \n      @variant \\<open>n-c\\<close> \n      @invariant \\<open>0\\<le>c \\<and> c\\<le>n \\<and> a=2^nat c\\<close>    \n    {\n      a=2*a;\n      \n      { \\<comment> \\<open>Note, this provokes exponential blowup of intermediate, unsimplified terms! \\<close>\n      a=a+a; a=a+a; a=a+a; a = a/8;\n      a=a+a; a=a+a; a=a+a; a = a/8;\n      a=a+a; a=a+a; a=a+a; a = a/8;\n      a=a+a; a = a/2;\n      \n      skip\n      };\n      \n      c=c+1\n    }\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>.\n         VAR (\\<ss> ''n'' 0) (\\<lambda>n. BB_PROTECT (0 \\<le> n)))\n     (\\<lambda>\\<ss>\\<^sub>0. ''a'' ::= N 1;; ''c'' ::= N 0;;\n         WHILE {ANNOTATION\n                 (\\<lambda>\\<ss>.\n                     VAR (\\<ss> ''n'' 0)\n                      (\\<lambda>n.\n                          VAR (\\<ss> ''c'' 0)\n                           (\\<lambda>c.\n                               BB_PROTECT\n                                (n -\n                                 c))))} {ANNOTATION\n    (\\<lambda>\\<ss>.\n        VAR (\\<ss> ''n'' 0)\n         (\\<lambda>n.\n             VAR (\\<ss> ''c'' 0)\n              (\\<lambda>c.\n                  VAR (\\<ss> ''a'' 0)\n                   (\\<lambda>a.\n                       BB_PROTECT\n                        (0 \\<le> c \\<and>\n                         c \\<le> n \\<and>\n                         a = 2 ^ nat c)))))} Cmpop (<) (V ''c'') (V ''n'')\n         DO (''a'' ::= Binop (*) (N 2) (V ''a'');;\n             (''a'' ::= Binop (+) (V ''a'') (V ''a'');;\n              ''a'' ::= Binop (+) (V ''a'') (V ''a'');;\n              ''a'' ::= Binop (+) (V ''a'') (V ''a'');;\n              ''a'' ::= Binop (div) (V ''a'') (N 8);;\n              ''a'' ::= Binop (+) (V ''a'') (V ''a'');;\n              ''a'' ::= Binop (+) (V ''a'') (V ''a'');;\n              ''a'' ::= Binop (+) (V ''a'') (V ''a'');;\n              ''a'' ::= Binop (div) (V ''a'') (N 8);;\n              ''a'' ::= Binop (+) (V ''a'') (V ''a'');;\n              ''a'' ::= Binop (+) (V ''a'') (V ''a'');;\n              ''a'' ::= Binop (+) (V ''a'') (V ''a'');;\n              ''a'' ::= Binop (div) (V ''a'') (N 8);;\n              ''a'' ::= Binop (+) (V ''a'') (V ''a'');;\n              ''a'' ::= Binop (div) (V ''a'') (N 2);; SKIP);;\n             ''c'' ::= Binop (+) (V ''c'') (N 1)))\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''a'' 0)\n          (\\<lambda>a.\n              VAR (\\<ss>\\<^sub>0 ''n'' 0)\n               (\\<lambda>n\\<^sub>0. BB_PROTECT (a = 2 ^ nat n\\<^sub>0))))", "apply vcg"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''rel-wf''; 0 \\<le> n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wf (measure nat)\n 2. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''invar-initial''; 0 \\<le> n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> 0 \\<and>\n                         0 \\<le> n\\<^sub>0 \\<and> 1 = 2 ^ nat 0\n 3. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''Invar pres''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> c + 1 \\<and>\n                         c + 1 \\<le> n\\<^sub>0 \\<and>\n                         ((((2 * a + 2 * a + (2 * a + 2 * a) +\n                             (2 * a + 2 * a + (2 * a + 2 * a))) div\n                            8 +\n                            (2 * a + 2 * a + (2 * a + 2 * a) +\n                             (2 * a + 2 * a + (2 * a + 2 * a))) div\n                            8 +\n                            ((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8) +\n                            ((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8))) div\n                           8 +\n                           ((2 * a + 2 * a + (2 * a + 2 * a) +\n                             (2 * a + 2 * a + (2 * a + 2 * a))) div\n                            8 +\n                            (2 * a + 2 * a + (2 * a + 2 * a) +\n                             (2 * a + 2 * a + (2 * a + 2 * a))) div\n                            8 +\n                            ((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8) +\n                            ((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8))) div\n                           8 +\n                           (((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8) +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8))) div\n                            8 +\n                            ((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8) +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8))) div\n                            8) +\n                           (((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8) +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8))) div\n                            8 +\n                            ((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8) +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8))) div\n                            8 +\n                            (((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8) +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                 (2 * a + 2 * a + (2 * a + 2 * a))) div\n                                8 +\n                                (2 * a + 2 * a + (2 * a + 2 * a) +\n                                 (2 * a + 2 * a + (2 * a + 2 * a))) div\n                                8))) div\n                             8 +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8) +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                 (2 * a + 2 * a + (2 * a + 2 * a))) div\n                                8 +\n                                (2 * a + 2 * a + (2 * a + 2 * a) +\n                                 (2 * a + 2 * a + (2 * a + 2 * a))) div\n                                8))) div\n                             8))) div\n                          8 +\n                          (((2 * a + 2 * a + (2 * a + 2 * a) +\n                             (2 * a + 2 * a + (2 * a + 2 * a))) div\n                            8 +\n                            (2 * a + 2 * a + (2 * a + 2 * a) +\n                             (2 * a + 2 * a + (2 * a + 2 * a))) div\n                            8 +\n                            ((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8) +\n                            ((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8))) div\n                           8 +\n                           ((2 * a + 2 * a + (2 * a + 2 * a) +\n                             (2 * a + 2 * a + (2 * a + 2 * a))) div\n                            8 +\n                            (2 * a + 2 * a + (2 * a + 2 * a) +\n                             (2 * a + 2 * a + (2 * a + 2 * a))) div\n                            8 +\n                            ((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8) +\n                            ((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8))) div\n                           8 +\n                           (((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8) +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8))) div\n                            8 +\n                            ((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8) +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8))) div\n                            8) +\n                           (((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8) +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8))) div\n                            8 +\n                            ((2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             (2 * a + 2 * a + (2 * a + 2 * a) +\n                              (2 * a + 2 * a + (2 * a + 2 * a))) div\n                             8 +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8) +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8))) div\n                            8 +\n                            (((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8) +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                 (2 * a + 2 * a + (2 * a + 2 * a))) div\n                                8 +\n                                (2 * a + 2 * a + (2 * a + 2 * a) +\n                                 (2 * a + 2 * a + (2 * a + 2 * a))) div\n                                8))) div\n                             8 +\n                             ((2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              (2 * a + 2 * a + (2 * a + 2 * a) +\n                               (2 * a + 2 * a + (2 * a + 2 * a))) div\n                              8 +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8) +\n                              ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               (2 * a + 2 * a + (2 * a + 2 * a) +\n                                (2 * a + 2 * a + (2 * a + 2 * a))) div\n                               8 +\n                               ((2 * a + 2 * a + (2 * a + 2 * a) +\n                                 (2 * a + 2 * a + (2 * a + 2 * a))) div\n                                8 +\n                                (2 * a + 2 * a + (2 * a + 2 * a) +\n                                 (2 * a + 2 * a + (2 * a + 2 * a))) div\n                                8))) div\n                             8))) div\n                          8) div\n                         2 =\n                         2 ^ nat (c + 1)\n 4. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''Var pres''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> (n\\<^sub>0 - (c + 1), n\\<^sub>0 - c)\n                         \\<in> measure nat\n 5. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''invar-post''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        \\<not> c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> a = 2 ^ nat n\\<^sub>0", "apply (all \\<open>simp?\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''Invar pres''; a = 2 ^ nat c; 0 \\<le> c;\n        c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 2 * 2 ^ nat c = 2 ^ nat (c + 1)", "apply (auto simp: algebra_simps nat_distribs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "experiment\nbegin"], ["", "lemmas nat_distribs = nat_add_distrib nat_diff_distrib Suc_diff_le nat_mult_distrib nat_div_distrib"], ["", "procedure_spec exp_count_up (n) returns a\n  assumes \"0\\<le>n\"\n  ensures \"a = 2^nat n\\<^sub>0\"\n  defines \\<open>\n      a = 1;\n      c = 0;\n      while (c<n) \n        @variant \\<open>n-c\\<close>\n        @invariant \\<open>0\\<le>c \\<and> c\\<le>n \\<and> a=2^nat c\\<close>\n      {\n        a=2*a;\n        c=c+1\n      }\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>.\n         VAR (\\<ss> ''n'' 0) (\\<lambda>n. BB_PROTECT (0 \\<le> n)))\n     (\\<lambda>\\<ss>\\<^sub>0. ''a'' ::= N 1;; ''c'' ::= N 0;;\n         WHILE {ANNOTATION\n                 (\\<lambda>\\<ss>.\n                     VAR (\\<ss> ''n'' 0)\n                      (\\<lambda>n.\n                          VAR (\\<ss> ''c'' 0)\n                           (\\<lambda>c.\n                               BB_PROTECT\n                                (n -\n                                 c))))} {ANNOTATION\n    (\\<lambda>\\<ss>.\n        VAR (\\<ss> ''n'' 0)\n         (\\<lambda>n.\n             VAR (\\<ss> ''c'' 0)\n              (\\<lambda>c.\n                  VAR (\\<ss> ''a'' 0)\n                   (\\<lambda>a.\n                       BB_PROTECT\n                        (0 \\<le> c \\<and>\n                         c \\<le> n \\<and>\n                         a = 2 ^ nat c)))))} Cmpop (<) (V ''c'') (V ''n'')\n         DO (''a'' ::= Binop (*) (N 2) (V ''a'');;\n             ''c'' ::= Binop (+) (V ''c'') (N 1)))\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''a'' 0)\n          (\\<lambda>a.\n              VAR (\\<ss>\\<^sub>0 ''n'' 0)\n               (\\<lambda>n\\<^sub>0. BB_PROTECT (a = 2 ^ nat n\\<^sub>0))))", "apply vcg"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''rel-wf''; 0 \\<le> n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wf (measure nat)\n 2. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''invar-initial''; 0 \\<le> n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> 0 \\<and>\n                         0 \\<le> n\\<^sub>0 \\<and> 1 = 2 ^ nat 0\n 3. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''Invar pres''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> c + 1 \\<and>\n                         c + 1 \\<le> n\\<^sub>0 \\<and>\n                         2 * a = 2 ^ nat (c + 1)\n 4. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''Var pres''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> (n\\<^sub>0 - (c + 1), n\\<^sub>0 - c)\n                         \\<in> measure nat\n 5. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''invar-post''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        \\<not> c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> a = 2 ^ nat n\\<^sub>0", "by (auto simp: algebra_simps nat_distribs)"], ["", "program_spec use_exp \n  assumes \"0\\<le>n\"\n  ensures \\<open>n = 2^(2^nat n\\<^sub>0)\\<close>\n  defines \\<open>\n    n = exp_count_up(n);\n    n = exp_count_up(n)\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>.\n         VAR (\\<ss> ''n'' 0) (\\<lambda>n. BB_PROTECT (0 \\<le> n)))\n     (\\<lambda>\\<ss>\\<^sub>0.\n         (''G_par_1''[] ::= ''n'';; Params exp_count_up;;\n          ArrayCpy_retv ''n'' ''G_ret_1'');;\n         ''G_par_1''[] ::= ''n'';; Params exp_count_up;;\n         ArrayCpy_retv ''n'' ''G_ret_1'')\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''n'' 0)\n          (\\<lambda>n.\n              VAR (\\<ss>\\<^sub>0 ''n'' 0)\n               (\\<lambda>n\\<^sub>0.\n                   BB_PROTECT (n = 2 ^ 2 ^ nat n\\<^sub>0))))", "apply vcg"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 n'.\n       \\<lbrakk>0 \\<le> n\\<^sub>0; n' = 2 ^ nat n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> n'\n 2. \\<And>n\\<^sub>0 n' n'a.\n       \\<lbrakk>0 \\<le> n\\<^sub>0; n' = 2 ^ nat n\\<^sub>0;\n        n'a = 2 ^ nat n'\\<rbrakk>\n       \\<Longrightarrow> n'a = 2 ^ 2 ^ nat n\\<^sub>0", "by auto"], ["", "procedure_spec add3 (a, b, c) returns r\n  assumes \"a\\<ge>0 \\<and>b\\<ge>0 \\<and>c\\<ge>0\"  \n  ensures \"r = a\\<^sub>0+b\\<^sub>0+c\\<^sub>0\"\n  defines \\<open>\n    r = a+b+c\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>.\n         VAR (\\<ss> ''c'' 0)\n          (\\<lambda>c.\n              VAR (\\<ss> ''b'' 0)\n               (\\<lambda>b.\n                   VAR (\\<ss> ''a'' 0)\n                    (\\<lambda>a.\n                        BB_PROTECT\n                         (0 \\<le> a \\<and> 0 \\<le> b \\<and> 0 \\<le> c)))))\n     (\\<lambda>\\<ss>\\<^sub>0.\n         ''r'' ::= Binop (+) (Binop (+) (V ''a'') (V ''b'')) (V ''c''))\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''r'' 0)\n          (\\<lambda>r.\n              VAR (\\<ss>\\<^sub>0 ''c'' 0)\n               (\\<lambda>c\\<^sub>0.\n                   VAR (\\<ss>\\<^sub>0 ''b'' 0)\n                    (\\<lambda>b\\<^sub>0.\n                        VAR (\\<ss>\\<^sub>0 ''a'' 0)\n                         (\\<lambda>a\\<^sub>0.\n                             BB_PROTECT\n                              (r = a\\<^sub>0 + b\\<^sub>0 + c\\<^sub>0))))))", "apply vcg"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>0 a\\<^sub>0 b\\<^sub>0.\n       0 \\<le> a\\<^sub>0 \\<and>\n       0 \\<le> b\\<^sub>0 \\<and> 0 \\<le> c\\<^sub>0 \\<Longrightarrow>\n       a\\<^sub>0 + b\\<^sub>0 + c\\<^sub>0 = a\\<^sub>0 + b\\<^sub>0 + c\\<^sub>0", "by auto"], ["", "procedure_spec use_add3 (a, b) returns r\n  assumes \"a\\<ge>0 \\<and> b\\<ge>0\"  \n  ensures \"r = 2*(a\\<^sub>0+b\\<^sub>0+b\\<^sub>0)\"\n  defines \\<open>\n    r1 = add3(a, b, b);\n    r2 = add3(a, b, b);\n    r = r1+r2\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>.\n         VAR (\\<ss> ''b'' 0)\n          (\\<lambda>b.\n              VAR (\\<ss> ''a'' 0)\n               (\\<lambda>a. BB_PROTECT (0 \\<le> a \\<and> 0 \\<le> b))))\n     (\\<lambda>\\<ss>\\<^sub>0.\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''b'';;\n          ''G_par_3''[] ::= ''b'';; Params add3;;\n          ArrayCpy_retv ''r1'' ''G_ret_1'');;\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''b'';;\n          ''G_par_3''[] ::= ''b'';; Params add3;;\n          ArrayCpy_retv ''r2'' ''G_ret_1'');;\n         ''r'' ::= Binop (+) (V ''r1'') (V ''r2''))\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''r'' 0)\n          (\\<lambda>r.\n              VAR (\\<ss>\\<^sub>0 ''b'' 0)\n               (\\<lambda>b\\<^sub>0.\n                   VAR (\\<ss>\\<^sub>0 ''a'' 0)\n                    (\\<lambda>a\\<^sub>0.\n                        BB_PROTECT\n                         (r = 2 * (a\\<^sub>0 + b\\<^sub>0 + b\\<^sub>0))))))", "apply vcg"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a\\<^sub>0 b\\<^sub>0.\n       0 \\<le> a\\<^sub>0 \\<and> 0 \\<le> b\\<^sub>0 \\<Longrightarrow>\n       0 \\<le> a\\<^sub>0 \\<and> 0 \\<le> b\\<^sub>0 \\<and> 0 \\<le> b\\<^sub>0\n 2. \\<And>a\\<^sub>0 b\\<^sub>0 r1'.\n       \\<lbrakk>0 \\<le> a\\<^sub>0 \\<and> 0 \\<le> b\\<^sub>0;\n        r1' = a\\<^sub>0 + b\\<^sub>0 + b\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> a\\<^sub>0 \\<and>\n                         0 \\<le> b\\<^sub>0 \\<and> 0 \\<le> b\\<^sub>0\n 3. \\<And>a\\<^sub>0 b\\<^sub>0 r1' r2'a.\n       \\<lbrakk>0 \\<le> a\\<^sub>0 \\<and> 0 \\<le> b\\<^sub>0;\n        r1' = a\\<^sub>0 + b\\<^sub>0 + b\\<^sub>0;\n        r2'a = a\\<^sub>0 + b\\<^sub>0 + b\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> r1' + r2'a =\n                         2 * (a\\<^sub>0 + b\\<^sub>0 + b\\<^sub>0)", "by auto"], ["", "procedure_spec divmod (a,b) returns (c,d)  \n  assumes \"b\\<noteq>0\"\n  ensures \"c = a\\<^sub>0 div b\\<^sub>0 \\<and> d = a\\<^sub>0 mod b\\<^sub>0\"\n  defines \\<open>\n    c = a / b;\n    d = a mod b\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>.\n         VAR (\\<ss> ''b'' 0) (\\<lambda>b. BB_PROTECT (b \\<noteq> 0)))\n     (\\<lambda>\\<ss>\\<^sub>0. ''c'' ::= Binop (div) (V ''a'') (V ''b'');;\n         ''d'' ::= Binop (mod) (V ''a'') (V ''b''))\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''d'' 0)\n          (\\<lambda>d.\n              VAR (\\<ss> ''c'' 0)\n               (\\<lambda>c.\n                   VAR (\\<ss>\\<^sub>0 ''b'' 0)\n                    (\\<lambda>b\\<^sub>0.\n                        VAR (\\<ss>\\<^sub>0 ''a'' 0)\n                         (\\<lambda>a\\<^sub>0.\n                             BB_PROTECT\n                              (c = a\\<^sub>0 div b\\<^sub>0 \\<and>\n                               d = a\\<^sub>0 mod b\\<^sub>0))))))", "apply vcg"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a\\<^sub>0 b\\<^sub>0.\n       b\\<^sub>0 \\<noteq> 0 \\<Longrightarrow>\n       a\\<^sub>0 div b\\<^sub>0 = a\\<^sub>0 div b\\<^sub>0 \\<and>\n       a\\<^sub>0 mod b\\<^sub>0 = a\\<^sub>0 mod b\\<^sub>0", "by auto"], ["", "procedure_spec use_divmod (a,b) returns r\n  assumes \"b\\<noteq>0\"\n  ensures \"r = a\\<^sub>0\"\n  defines \\<open>\n    (d,m) = divmod (a,b);\n    r = d*b + m\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>.\n         VAR (\\<ss> ''b'' 0) (\\<lambda>b. BB_PROTECT (b \\<noteq> 0)))\n     (\\<lambda>\\<ss>\\<^sub>0.\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''b'';;\n          Params local.divmod;; ArrayCpy_retv ''d'' ''G_ret_1'';;\n          ArrayCpy_retv ''m'' ''G_ret_2'');;\n         ''r'' ::= Binop (+) (Binop (*) (V ''d'') (V ''b'')) (V ''m''))\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''r'' 0)\n          (\\<lambda>r.\n              VAR (\\<ss>\\<^sub>0 ''a'' 0)\n               (\\<lambda>a\\<^sub>0. BB_PROTECT (r = a\\<^sub>0))))", "apply vcg"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a\\<^sub>0 b\\<^sub>0 d' G_ret_2'.\n       \\<lbrakk>b\\<^sub>0 \\<noteq> 0;\n        d' = a\\<^sub>0 div b\\<^sub>0 \\<and>\n        G_ret_2' = a\\<^sub>0 mod b\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> d' * b\\<^sub>0 + G_ret_2' = a\\<^sub>0", "by simp"], ["", "end"], ["", "experiment\nbegin"], ["", "lemmas nat_distribs = nat_add_distrib nat_diff_distrib Suc_diff_le nat_mult_distrib nat_div_distrib"], ["", "procedure_spec exp_count_up (n) returns a\n  assumes \"0\\<le>n\"\n  ensures \"a = 2^nat n\\<^sub>0\"\n  defines \\<open>\n      a = 1;\n      c = 0;\n      while (c<n) \n        @variant \\<open>n-c\\<close> \n        @invariant \\<open>0\\<le>c \\<and> c\\<le>n \\<and> a=2^nat c\\<close>\n      {\n        a=2*a;\n        c=c+1\n      }\n      \n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>.\n         VAR (\\<ss> ''n'' 0) (\\<lambda>n. BB_PROTECT (0 \\<le> n)))\n     (\\<lambda>\\<ss>\\<^sub>0. ''a'' ::= N 1;; ''c'' ::= N 0;;\n         WHILE {ANNOTATION\n                 (\\<lambda>\\<ss>.\n                     VAR (\\<ss> ''n'' 0)\n                      (\\<lambda>n.\n                          VAR (\\<ss> ''c'' 0)\n                           (\\<lambda>c.\n                               BB_PROTECT\n                                (n -\n                                 c))))} {ANNOTATION\n    (\\<lambda>\\<ss>.\n        VAR (\\<ss> ''n'' 0)\n         (\\<lambda>n.\n             VAR (\\<ss> ''c'' 0)\n              (\\<lambda>c.\n                  VAR (\\<ss> ''a'' 0)\n                   (\\<lambda>a.\n                       BB_PROTECT\n                        (0 \\<le> c \\<and>\n                         c \\<le> n \\<and>\n                         a = 2 ^ nat c)))))} Cmpop (<) (V ''c'') (V ''n'')\n         DO (''a'' ::= Binop (*) (N 2) (V ''a'');;\n             ''c'' ::= Binop (+) (V ''c'') (N 1)))\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''a'' 0)\n          (\\<lambda>a.\n              VAR (\\<ss>\\<^sub>0 ''n'' 0)\n               (\\<lambda>n\\<^sub>0. BB_PROTECT (a = 2 ^ nat n\\<^sub>0))))", "apply vcg"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''rel-wf''; 0 \\<le> n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wf (measure nat)\n 2. \\<And>n\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''invar-initial''; 0 \\<le> n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> 0 \\<and>\n                         0 \\<le> n\\<^sub>0 \\<and> 1 = 2 ^ nat 0\n 3. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''Invar pres''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> c + 1 \\<and>\n                         c + 1 \\<le> n\\<^sub>0 \\<and>\n                         2 * a = 2 ^ nat (c + 1)\n 4. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''Var pres''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> (n\\<^sub>0 - (c + 1), n\\<^sub>0 - c)\n                         \\<in> measure nat\n 5. \\<And>n\\<^sub>0 c a.\n       \\<lbrakk>\\<paragraph>''invar-post''; 0 \\<le> n\\<^sub>0;\n        0 \\<le> c \\<and> c \\<le> n\\<^sub>0 \\<and> a = 2 ^ nat c;\n        \\<not> c < n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> a = 2 ^ nat n\\<^sub>0", "by (auto simp: algebra_simps nat_distribs)"], ["", "program_spec use_exp \n  assumes \"0\\<le>n\"\n  ensures \\<open>n = 2^(2^nat n\\<^sub>0)\\<close>\n  defines \\<open>\n    n = exp_count_up(n);\n    n = exp_count_up(n)\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>.\n         VAR (\\<ss> ''n'' 0) (\\<lambda>n. BB_PROTECT (0 \\<le> n)))\n     (\\<lambda>\\<ss>\\<^sub>0.\n         (''G_par_1''[] ::= ''n'';; Params exp_count_up;;\n          ArrayCpy_retv ''n'' ''G_ret_1'');;\n         ''G_par_1''[] ::= ''n'';; Params exp_count_up;;\n         ArrayCpy_retv ''n'' ''G_ret_1'')\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''n'' 0)\n          (\\<lambda>n.\n              VAR (\\<ss>\\<^sub>0 ''n'' 0)\n               (\\<lambda>n\\<^sub>0.\n                   BB_PROTECT (n = 2 ^ 2 ^ nat n\\<^sub>0))))", "apply vcg"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 n'.\n       \\<lbrakk>0 \\<le> n\\<^sub>0; n' = 2 ^ nat n\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> n'\n 2. \\<And>n\\<^sub>0 n' n'a.\n       \\<lbrakk>0 \\<le> n\\<^sub>0; n' = 2 ^ nat n\\<^sub>0;\n        n'a = 2 ^ nat n'\\<rbrakk>\n       \\<Longrightarrow> n'a = 2 ^ 2 ^ nat n\\<^sub>0", "by auto"], ["", "text \\<open>Deriving big-step semantics\\<close>"], ["", "schematic_goal \n  \"Map.empty: (use_exp,<''n'':=\\<lambda>_. 2>) \\<Rightarrow> ?s\"\n  \"?s ''G_ret_1'' 0 = 16\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Map.empty: (use_exp, <''n'' := \\<lambda>_. 2>) \\<Rightarrow> ?s &&&\n    ?s ''G_ret_1'' 0 = 16", "unfolding use_exp_def exp_count_up_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Map.empty: ((''G_par_1''[] ::= ''n'';;\n                 SCOPE (''n''[] ::= ''G_par_1'';;\n                        (''a'' ::= N 1;; ''c'' ::= N 0;;\n                         WHILE Cmpop (<) (V ''c'') (V ''n'')\n                         DO (''a'' ::= Binop (*) (N 2) (V ''a'');;\n                             ''c'' ::= Binop (+) (V ''c'') (N 1)));;\n                        ''G_ret_1''[] ::= ''a'');;\n                 ArrayCpy_retv ''n'' ''G_ret_1'');;\n                ''G_par_1''[] ::= ''n'';;\n                SCOPE (''n''[] ::= ''G_par_1'';;\n                       (''a'' ::= N 1;; ''c'' ::= N 0;;\n                        WHILE Cmpop (<) (V ''c'') (V ''n'')\n                        DO (''a'' ::= Binop (*) (N 2) (V ''a'');;\n                            ''c'' ::= Binop (+) (V ''c'') (N 1)));;\n                       ''G_ret_1''[] ::= ''a'');;\n                ArrayCpy_retv ''n'' ''G_ret_1'',\n                <''n'' := \\<lambda>_. 2>) \\<Rightarrow> ?s &&&\n    ?s ''G_ret_1'' 0 = 16", "apply big_step []"], ["proof (prove)\ngoal (1 subgoal):\n 1. <<''G_par_1'' := \\<lambda>_. 2,\n     ''n'' := (<> ''a'')(0 := 16)>|<''n'' := \\<lambda>_. 2,\n     ''G_par_1'' := (<> ''a'')(0 := 4), ''G_ret_1'' := (<> ''a'')(0 := 16)>>\n     ''G_ret_1'' 0 =\n    16", "by bs_simp"], ["", "schematic_goal \n  \"Map.empty: (use_exp,<''n'':=\\<lambda>_. 2>) \\<Rightarrow> ?s\"\n  \"?s ''G_ret_1'' 0 = 16\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Map.empty: (use_exp, <''n'' := \\<lambda>_. 2>) \\<Rightarrow> ?s &&&\n    ?s ''G_ret_1'' 0 = 16", "unfolding use_exp_def exp_count_up_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Map.empty: ((''G_par_1''[] ::= ''n'';;\n                 SCOPE (''n''[] ::= ''G_par_1'';;\n                        (''a'' ::= N 1;; ''c'' ::= N 0;;\n                         WHILE Cmpop (<) (V ''c'') (V ''n'')\n                         DO (''a'' ::= Binop (*) (N 2) (V ''a'');;\n                             ''c'' ::= Binop (+) (V ''c'') (N 1)));;\n                        ''G_ret_1''[] ::= ''a'');;\n                 ArrayCpy_retv ''n'' ''G_ret_1'');;\n                ''G_par_1''[] ::= ''n'';;\n                SCOPE (''n''[] ::= ''G_par_1'';;\n                       (''a'' ::= N 1;; ''c'' ::= N 0;;\n                        WHILE Cmpop (<) (V ''c'') (V ''n'')\n                        DO (''a'' ::= Binop (*) (N 2) (V ''a'');;\n                            ''c'' ::= Binop (+) (V ''c'') (N 1)));;\n                       ''G_ret_1''[] ::= ''a'');;\n                ArrayCpy_retv ''n'' ''G_ret_1'',\n                <''n'' := \\<lambda>_. 2>) \\<Rightarrow> ?s &&&\n    ?s ''G_ret_1'' 0 = 16", "apply (big_step'+) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. <<''G_par_1'' := \\<lambda>_. 2,\n     ''n'' := (<> ''a'')(0 := 16)>|<''n'' := \\<lambda>_. 2,\n     ''G_par_1'' := (<> ''a'')(0 := 4), ''G_ret_1'' := (<> ''a'')(0 := 16)>>\n     ''G_ret_1'' 0 =\n    16", "by bs_simp"], ["", "procedure_spec add3 (a, b, c) returns r\n  assumes \"a\\<ge>0 \\<and>b\\<ge>0 \\<and>c\\<ge>0\"  \n  ensures \"r = a\\<^sub>0+b\\<^sub>0+c\\<^sub>0\"\n  defines \\<open>\n    r = a+b+c\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>.\n         VAR (\\<ss> ''c'' 0)\n          (\\<lambda>c.\n              VAR (\\<ss> ''b'' 0)\n               (\\<lambda>b.\n                   VAR (\\<ss> ''a'' 0)\n                    (\\<lambda>a.\n                        BB_PROTECT\n                         (0 \\<le> a \\<and> 0 \\<le> b \\<and> 0 \\<le> c)))))\n     (\\<lambda>\\<ss>\\<^sub>0.\n         ''r'' ::= Binop (+) (Binop (+) (V ''a'') (V ''b'')) (V ''c''))\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''r'' 0)\n          (\\<lambda>r.\n              VAR (\\<ss>\\<^sub>0 ''c'' 0)\n               (\\<lambda>c\\<^sub>0.\n                   VAR (\\<ss>\\<^sub>0 ''b'' 0)\n                    (\\<lambda>b\\<^sub>0.\n                        VAR (\\<ss>\\<^sub>0 ''a'' 0)\n                         (\\<lambda>a\\<^sub>0.\n                             BB_PROTECT\n                              (r = a\\<^sub>0 + b\\<^sub>0 + c\\<^sub>0))))))", "apply vcg"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>0 a\\<^sub>0 b\\<^sub>0.\n       0 \\<le> a\\<^sub>0 \\<and>\n       0 \\<le> b\\<^sub>0 \\<and> 0 \\<le> c\\<^sub>0 \\<Longrightarrow>\n       a\\<^sub>0 + b\\<^sub>0 + c\\<^sub>0 = a\\<^sub>0 + b\\<^sub>0 + c\\<^sub>0", "by auto"], ["", "procedure_spec use_add3 (a, b) returns r\n  assumes \"a\\<ge>0 \\<and> b\\<ge>0\"  \n  ensures \"r = 2*(a\\<^sub>0+b\\<^sub>0+b\\<^sub>0)\"\n  defines \\<open>\n    r1 = add3(a, b, b);\n    r2 = add3(a, b, b);\n    r = r1+r2\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>.\n         VAR (\\<ss> ''b'' 0)\n          (\\<lambda>b.\n              VAR (\\<ss> ''a'' 0)\n               (\\<lambda>a. BB_PROTECT (0 \\<le> a \\<and> 0 \\<le> b))))\n     (\\<lambda>\\<ss>\\<^sub>0.\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''b'';;\n          ''G_par_3''[] ::= ''b'';; Params add3;;\n          ArrayCpy_retv ''r1'' ''G_ret_1'');;\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''b'';;\n          ''G_par_3''[] ::= ''b'';; Params add3;;\n          ArrayCpy_retv ''r2'' ''G_ret_1'');;\n         ''r'' ::= Binop (+) (V ''r1'') (V ''r2''))\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''r'' 0)\n          (\\<lambda>r.\n              VAR (\\<ss>\\<^sub>0 ''b'' 0)\n               (\\<lambda>b\\<^sub>0.\n                   VAR (\\<ss>\\<^sub>0 ''a'' 0)\n                    (\\<lambda>a\\<^sub>0.\n                        BB_PROTECT\n                         (r = 2 * (a\\<^sub>0 + b\\<^sub>0 + b\\<^sub>0))))))", "apply vcg"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a\\<^sub>0 b\\<^sub>0.\n       0 \\<le> a\\<^sub>0 \\<and> 0 \\<le> b\\<^sub>0 \\<Longrightarrow>\n       0 \\<le> a\\<^sub>0 \\<and> 0 \\<le> b\\<^sub>0 \\<and> 0 \\<le> b\\<^sub>0\n 2. \\<And>a\\<^sub>0 b\\<^sub>0 r1'.\n       \\<lbrakk>0 \\<le> a\\<^sub>0 \\<and> 0 \\<le> b\\<^sub>0;\n        r1' = a\\<^sub>0 + b\\<^sub>0 + b\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> a\\<^sub>0 \\<and>\n                         0 \\<le> b\\<^sub>0 \\<and> 0 \\<le> b\\<^sub>0\n 3. \\<And>a\\<^sub>0 b\\<^sub>0 r1' r2'a.\n       \\<lbrakk>0 \\<le> a\\<^sub>0 \\<and> 0 \\<le> b\\<^sub>0;\n        r1' = a\\<^sub>0 + b\\<^sub>0 + b\\<^sub>0;\n        r2'a = a\\<^sub>0 + b\\<^sub>0 + b\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> r1' + r2'a =\n                         2 * (a\\<^sub>0 + b\\<^sub>0 + b\\<^sub>0)", "by auto"], ["", "procedure_spec no_param () returns r\n  assumes \"True\"\n  ensures \"r = 42\"  \n  defines \\<open>r = 42\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty (\\<lambda>\\<ss>. BB_PROTECT True)\n     (\\<lambda>\\<ss>\\<^sub>0. ''r'' ::= N 42)\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''r'' 0) (\\<lambda>r. BB_PROTECT (r = 42)))", "by vcg_cs"], ["", "procedure_spec foobar (a) returns r\n  assumes \\<open>a\\<ge>0\\<close>\n  ensures \"r=84+a\\<^sub>0\"\n  defines \\<open>\n    r1 = no_param();\n    add3(a, a, r1);\n    r2 = add3(a, r1, r1);\n    r = r2\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty\n     (\\<lambda>\\<ss>.\n         VAR (\\<ss> ''a'' 0) (\\<lambda>a. BB_PROTECT (0 \\<le> a)))\n     (\\<lambda>\\<ss>\\<^sub>0.\n         (Params no_param;; ArrayCpy_retv ''r1'' ''G_ret_1'');;\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''a'';;\n          ''G_par_3''[] ::= ''r1'';; Params add3);;\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''r1'';;\n          ''G_par_3''[] ::= ''r1'';; Params add3;;\n          ArrayCpy_retv ''r2'' ''G_ret_1'');;\n         ''r''[] ::= ''r2'')\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''r'' 0)\n          (\\<lambda>r.\n              VAR (\\<ss>\\<^sub>0 ''a'' 0)\n               (\\<lambda>a\\<^sub>0. BB_PROTECT (r = 84 + a\\<^sub>0))))", "apply vcg_cs"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "experiment begin"], ["", "lemma [named_ss vcg_bb]: \"BB_PROTECT True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BB_PROTECT True", "by (auto simp: BB_PROTECT_def)"], ["", "procedure_spec add (a,b) returns r assumes True ensures \"r=a\\<^sub>0+b\\<^sub>0\" defines \\<open>r = a + b\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty (\\<lambda>\\<ss>. BB_PROTECT True)\n     (\\<lambda>\\<ss>\\<^sub>0. ''r'' ::= Binop (+) (V ''a'') (V ''b''))\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''r'' 0)\n          (\\<lambda>r.\n              VAR (\\<ss>\\<^sub>0 ''b'' 0)\n               (\\<lambda>b\\<^sub>0.\n                   VAR (\\<ss>\\<^sub>0 ''a'' 0)\n                    (\\<lambda>a\\<^sub>0.\n                        BB_PROTECT (r = a\\<^sub>0 + b\\<^sub>0)))))", "by vcg_cs"], ["", "procedure_spec test (a) returns r assumes True ensures \"r = a\\<^sub>0\" defines \\<open>\n    x1 = add(a,a);\n    x2 = add(a,a);\n    x3 = add (x1-x2, a);\n    \n    x1 = add(a,a);\n    x2 = add(a,a);\n    x3 = add (x1-x2, a);\n  \n    x1 = add(a,a);\n    x2 = add(a,a);\n    x3 = add (x1-x2, a);\n  \n    x1 = add(a,a);\n    x2 = add(a,a);\n    x3 = add (x1-x2, a);\n  \n    x1 = add(a,a);\n    x2 = add(a,a);\n    x3 = add (x1-x2, a);\n  \n    x1 = add(a,a);\n    x2 = add(a,a);\n    x3 = add (x1-x2, a);\n  \n    r = x3\n  \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. HT' Map.empty (\\<lambda>\\<ss>. BB_PROTECT True)\n     (\\<lambda>\\<ss>\\<^sub>0.\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x1'' ''G_ret_1'');;\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x2'' ''G_ret_1'');;\n         (''G_par_1'' ::= Binop (-) (V ''x1'') (V ''x2'');;\n          ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x3'' ''G_ret_1'');;\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x1'' ''G_ret_1'');;\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x2'' ''G_ret_1'');;\n         (''G_par_1'' ::= Binop (-) (V ''x1'') (V ''x2'');;\n          ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x3'' ''G_ret_1'');;\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x1'' ''G_ret_1'');;\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x2'' ''G_ret_1'');;\n         (''G_par_1'' ::= Binop (-) (V ''x1'') (V ''x2'');;\n          ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x3'' ''G_ret_1'');;\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x1'' ''G_ret_1'');;\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x2'' ''G_ret_1'');;\n         (''G_par_1'' ::= Binop (-) (V ''x1'') (V ''x2'');;\n          ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x3'' ''G_ret_1'');;\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x1'' ''G_ret_1'');;\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x2'' ''G_ret_1'');;\n         (''G_par_1'' ::= Binop (-) (V ''x1'') (V ''x2'');;\n          ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x3'' ''G_ret_1'');;\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x1'' ''G_ret_1'');;\n         (''G_par_1''[] ::= ''a'';; ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x2'' ''G_ret_1'');;\n         (''G_par_1'' ::= Binop (-) (V ''x1'') (V ''x2'');;\n          ''G_par_2''[] ::= ''a'';; Params add;;\n          ArrayCpy_retv ''x3'' ''G_ret_1'');;\n         ''r''[] ::= ''x3'')\n     (\\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n         VAR (\\<ss> ''r'' 0)\n          (\\<lambda>r.\n              VAR (\\<ss>\\<^sub>0 ''a'' 0)\n               (\\<lambda>a\\<^sub>0. BB_PROTECT (r = a\\<^sub>0))))", "apply vcg"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a\\<^sub>0 x1' x2'a x3'b x1'c x2'd x3'e x1'f x2'g x3'h x1'i x2'j\n       x3'k x1'l x2'm x3'n x1'o x2'p x3'q.\n       \\<lbrakk>x1' = a\\<^sub>0 + a\\<^sub>0; x2'a = a\\<^sub>0 + a\\<^sub>0;\n        x3'b = x1' - x2'a + a\\<^sub>0; x1'c = a\\<^sub>0 + a\\<^sub>0;\n        x2'd = a\\<^sub>0 + a\\<^sub>0; x3'e = x1'c - x2'd + a\\<^sub>0;\n        x1'f = a\\<^sub>0 + a\\<^sub>0; x2'g = a\\<^sub>0 + a\\<^sub>0;\n        x3'h = x1'f - x2'g + a\\<^sub>0; x1'i = a\\<^sub>0 + a\\<^sub>0;\n        x2'j = a\\<^sub>0 + a\\<^sub>0; x3'k = x1'i - x2'j + a\\<^sub>0;\n        x1'l = a\\<^sub>0 + a\\<^sub>0; x2'm = a\\<^sub>0 + a\\<^sub>0;\n        x3'n = x1'l - x2'm + a\\<^sub>0; x1'o = a\\<^sub>0 + a\\<^sub>0;\n        x2'p = a\\<^sub>0 + a\\<^sub>0;\n        x3'q = x1'o - x2'p + a\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> x3'q = a\\<^sub>0", "by auto"], ["", "end"], ["", "experiment begin"], ["", "lemmas nat_distribs = nat_add_distrib nat_diff_distrib Suc_diff_le nat_mult_distrib nat_div_distrib"], ["", "recursive_spec \n  relation \\<open>measure nat\\<close>\n  foo (a) returns b \n    assumes \"a\\<ge>0\"\n    ensures \"b = 2^nat a\\<^sub>0\"\n    variant \"a\"\n    defines \\<open>\n      if (a==0) b=1\n      else {\n        b = rec foo (a-1);\n        b = 2 * b\n      }\n    \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. PROVE_\\<Theta> \\<pi> f\\<^sub>0 s\\<^sub>0\n     {(\\<lambda>\\<ss>. VAR (\\<ss> ''a'' 0) BB_PROTECT,\n       \\<lambda>\\<ss>.\n          VAR (\\<ss> ''a'' 0) (\\<lambda>a. BB_PROTECT (0 \\<le> a)),\n       \\<lambda>\\<ss>\\<^sub>0.\n          IF Cmpop (=) (V ''a'') (N 0) THEN ''b'' ::= N 1\n          ELSE ((''G_par_1'' ::= Binop (-) (V ''a'') (N 1);;\n                 Params (PCall ''foo'');; ArrayCpy_retv ''b'' ''G_ret_1'');;\n                ''b'' ::= Binop (*) (N 2) (V ''b'')),\n       \\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n          VAR (\\<ss> ''b'' 0)\n           (\\<lambda>b.\n               VAR (\\<ss>\\<^sub>0 ''a'' 0)\n                (\\<lambda>a\\<^sub>0. BB_PROTECT (b = 2 ^ nat a\\<^sub>0))))}", "thm vcg_specs"], ["proof (prove)\ngoal (1 subgoal):\n 1. PROVE_\\<Theta> \\<pi> f\\<^sub>0 s\\<^sub>0\n     {(\\<lambda>\\<ss>. VAR (\\<ss> ''a'' 0) BB_PROTECT,\n       \\<lambda>\\<ss>.\n          VAR (\\<ss> ''a'' 0) (\\<lambda>a. BB_PROTECT (0 \\<le> a)),\n       \\<lambda>\\<ss>\\<^sub>0.\n          IF Cmpop (=) (V ''a'') (N 0) THEN ''b'' ::= N 1\n          ELSE ((''G_par_1'' ::= Binop (-) (V ''a'') (N 1);;\n                 Params (PCall ''foo'');; ArrayCpy_retv ''b'' ''G_ret_1'');;\n                ''b'' ::= Binop (*) (N 2) (V ''b'')),\n       \\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n          VAR (\\<ss> ''b'' 0)\n           (\\<lambda>b.\n               VAR (\\<ss>\\<^sub>0 ''a'' 0)\n                (\\<lambda>a\\<^sub>0. BB_PROTECT (b = 2 ^ nat a\\<^sub>0))))}", "apply vcg"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''then''; 0 \\<le> 0; a\\<^sub>0 = 0\\<rbrakk>\n       \\<Longrightarrow> 1 = 2 ^ nat 0\n 2. \\<And>a\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''else''; 0 \\<le> a\\<^sub>0;\n        a\\<^sub>0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (a\\<^sub>0 - 1, a\\<^sub>0) \\<in> measure nat \\<and>\n                         0 \\<le> a\\<^sub>0 - 1\n 3. \\<And>b' a\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''else''; 0 \\<le> a\\<^sub>0;\n        a\\<^sub>0 \\<noteq> 0; b' = 2 ^ nat (a\\<^sub>0 - 1)\\<rbrakk>\n       \\<Longrightarrow> 2 * b' = 2 ^ nat a\\<^sub>0", "apply (auto simp: nat_distribs algebra_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''else''; 0 \\<le> a\\<^sub>0;\n        a\\<^sub>0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> 2 * 2 ^ (nat a\\<^sub>0 - Suc 0) = 2 ^ nat a\\<^sub>0", "by (metis (full_types) Suc_pred le0 le_less nat_0_iff not_le power_Suc)"], ["", "thm foo_spec"], ["", "recursive_spec \n  odd (a) returns b \n    assumes \"a\\<ge>0\"\n    ensures \"b\\<noteq>0 \\<longleftrightarrow> odd a\\<^sub>0\"\n    variant \"a\"\n    defines \\<open>\n      if (a==0) b=0\n      else {\n        b = rec even (a-1)\n      }\n    \\<close>\n  and\n  even (a) returns b\n    assumes \\<open>a\\<ge>0\\<close>\n    ensures \"b\\<noteq>0 \\<longleftrightarrow> even a\\<^sub>0\"\n    variant \"a\"\n    defines \\<open>\n      if (a==0) b=1\n      else {\n        b = rec odd (a-1)\n      }\n    \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. PROVE_\\<Theta> \\<pi> f\\<^sub>0 s\\<^sub>0\n     {(\\<lambda>\\<ss>. VAR (\\<ss> ''a'' 0) BB_PROTECT,\n       \\<lambda>\\<ss>.\n          VAR (\\<ss> ''a'' 0) (\\<lambda>a. BB_PROTECT (0 \\<le> a)),\n       \\<lambda>\\<ss>\\<^sub>0.\n          IF Cmpop (=) (V ''a'') (N 0) THEN ''b'' ::= N 0\n          ELSE (''G_par_1'' ::= Binop (-) (V ''a'') (N 1);;\n                Params (PCall ''even'');; ArrayCpy_retv ''b'' ''G_ret_1''),\n       \\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n          VAR (\\<ss> ''b'' 0)\n           (\\<lambda>b.\n               VAR (\\<ss>\\<^sub>0 ''a'' 0)\n                (\\<lambda>a\\<^sub>0.\n                    BB_PROTECT ((b \\<noteq> 0) = odd a\\<^sub>0)))),\n      (\\<lambda>\\<ss>. VAR (\\<ss> ''a'' 0) BB_PROTECT,\n       \\<lambda>\\<ss>.\n          VAR (\\<ss> ''a'' 0) (\\<lambda>a. BB_PROTECT (0 \\<le> a)),\n       \\<lambda>\\<ss>\\<^sub>0.\n          IF Cmpop (=) (V ''a'') (N 0) THEN ''b'' ::= N 1\n          ELSE (''G_par_1'' ::= Binop (-) (V ''a'') (N 1);;\n                Params (PCall ''odd'');; ArrayCpy_retv ''b'' ''G_ret_1''),\n       \\<lambda>\\<ss>\\<^sub>0 \\<ss>.\n          VAR (\\<ss> ''b'' 0)\n           (\\<lambda>b.\n               VAR (\\<ss>\\<^sub>0 ''a'' 0)\n                (\\<lambda>a\\<^sub>0.\n                    BB_PROTECT ((b \\<noteq> 0) = even a\\<^sub>0))))}", "apply vcg"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''then''; 0 \\<le> 0; a\\<^sub>0 = 0\\<rbrakk>\n       \\<Longrightarrow> (0 \\<noteq> 0) = odd 0\n 2. \\<And>a\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''else''; 0 \\<le> a\\<^sub>0;\n        a\\<^sub>0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (a\\<^sub>0 - 1, a\\<^sub>0) \\<in> measure nat \\<and>\n                         0 \\<le> a\\<^sub>0 - 1\n 3. \\<And>b' a\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''else''; 0 \\<le> a\\<^sub>0;\n        a\\<^sub>0 \\<noteq> 0;\n        (b' \\<noteq> 0) = even (a\\<^sub>0 - 1)\\<rbrakk>\n       \\<Longrightarrow> (b' \\<noteq> 0) = odd a\\<^sub>0\n 4. \\<And>a\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''then''; 0 \\<le> 0; a\\<^sub>0 = 0\\<rbrakk>\n       \\<Longrightarrow> (1 \\<noteq> 0) = even 0\n 5. \\<And>a\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''else''; 0 \\<le> a\\<^sub>0;\n        a\\<^sub>0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (a\\<^sub>0 - 1, a\\<^sub>0) \\<in> measure nat \\<and>\n                         0 \\<le> a\\<^sub>0 - 1\n 6. \\<And>b' a\\<^sub>0.\n       \\<lbrakk>\\<paragraph>''else''; 0 \\<le> a\\<^sub>0;\n        a\\<^sub>0 \\<noteq> 0; (b' \\<noteq> 0) = odd (a\\<^sub>0 - 1)\\<rbrakk>\n       \\<Longrightarrow> (b' \\<noteq> 0) = even a\\<^sub>0", "by auto"], ["", "thm even_spec odd_spec"], ["", "end"], ["", "end"]]}