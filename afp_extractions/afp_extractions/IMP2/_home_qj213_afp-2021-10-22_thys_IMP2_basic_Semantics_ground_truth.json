{"file_name": "/home/qj213/afp-2021-10-22/thys/IMP2/basic/Semantics.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/IMP2", "problem_names": ["lemma combine_collapse: \"<s|s> = s\"", "lemma combine_nest:  \n  \"<s|<s'|t>> = <s|t>\"\n  \"<<s|t'>|t> = <s|t>\"", "lemma combine_query: \n  \"is_local x \\<Longrightarrow> <s|t> x = s x\"  \n  \"is_global x \\<Longrightarrow> <s|t> x = t x\"", "lemma combine_upd: \n  \"is_local x \\<Longrightarrow> <s|t>(x:=v) = <s(x:=v)|t>\"  \n  \"is_global x \\<Longrightarrow> <s|t>(x:=v) = <s|t(x:=v)>\"", "lemma combine_cases[cases type]:\n  obtains l g where \"s = <l|g>\"", "lemmas big_step_induct[induct set] = big_step.induct[split_format(complete)]", "lemmas big_step_simps = \n  Skip_simp AssignIdx_simp ArrayCpy_simp ArrayInit_simp\n  Seq_simp If_simp Scope_simp PCall_simp PScope_simp", "lemma Assign': \"s' = s(x := (s x)(aval i s := aval a s)) \\<Longrightarrow> \\<pi>:(x[i] ::= a, s) \\<Rightarrow> s'\"", "lemma ArrayCpy': \"s' = s(x := (s y)) \\<Longrightarrow> \\<pi>:(x[] ::= y, s) \\<Rightarrow> s'\"", "lemma ArrayClear': \"s' = s(x := (\\<lambda>_. 0)) \\<Longrightarrow> \\<pi>:(CLEAR x[], s) \\<Rightarrow> s'\"", "lemma Scope': \"s\\<^sub>1 = <<>|s> \\<Longrightarrow> \\<pi>:(c,s\\<^sub>1) \\<Rightarrow> t \\<Longrightarrow> t' = <s|t> \\<Longrightarrow> \\<pi>:(Scope c,s) \\<Rightarrow> t'\"", "lemma equivI[intro?]: \"\\<lbrakk>\n  \\<And>s t \\<pi>. \\<pi>:(c,s) \\<Rightarrow> t \\<Longrightarrow> \\<pi>:(c',s) \\<Rightarrow> t; \n  \\<And>s t \\<pi>. \\<pi>:(c',s) \\<Rightarrow> t \\<Longrightarrow> \\<pi>:(c,s) \\<Rightarrow> t\\<rbrakk> \n  \\<Longrightarrow> c \\<sim> c'\"", "lemma equivD[dest]: \"c \\<sim> c' \\<Longrightarrow> \\<pi>:(c,s) \\<Rightarrow> t \\<longleftrightarrow> \\<pi>:(c',s) \\<Rightarrow> t\"", "lemma equiv_refl[simp, intro!]:  \"c \\<sim> c\"", "lemma equiv_sym[sym]:   \"(c \\<sim> c') \\<Longrightarrow> (c' \\<sim> c)\"", "lemma equiv_trans[trans]: \"c \\<sim> c' \\<Longrightarrow> c' \\<sim> c'' \\<Longrightarrow> c \\<sim> c''\"", "lemma while_unfold:\n  \"(WHILE b DO c) \\<sim> (IF b THEN c;; WHILE b DO c ELSE SKIP)\"", "lemma triv_if:\n  \"(IF b THEN c ELSE c) \\<sim> c\"", "lemma commute_if:\n  \"(IF b1 THEN (IF b2 THEN c11 ELSE c12) ELSE c2) \n   \\<sim> \n   (IF b2 THEN (IF b1 THEN c11 ELSE c2) ELSE (IF b1 THEN c12 ELSE c2))\"", "lemma sim_while_cong_aux:\n  \"\\<lbrakk>\\<pi>:(WHILE b DO c,s) \\<Rightarrow> t; bval b = bval b'; c \\<sim> c' \\<rbrakk> \\<Longrightarrow> \\<pi>:(WHILE b' DO c',s) \\<Rightarrow> t\"", "lemma sim_while_cong: \"bval b = bval b' \\<Longrightarrow> c \\<sim> c' \\<Longrightarrow> WHILE b DO c \\<sim> WHILE b' DO c'\"", "theorem big_step_determ: \"\\<lbrakk> \\<pi>:(c,s) \\<Rightarrow> t; \\<pi>:(c,s) \\<Rightarrow> u \\<rbrakk> \\<Longrightarrow> u = t\"", "lemma small_steps_append: \"small_steps \\<pi> cs\\<^sub>1 (Some cs\\<^sub>2) \\<Longrightarrow> small_steps \\<pi> cs\\<^sub>2 cs\\<^sub>3 \\<Longrightarrow> small_steps \\<pi> cs\\<^sub>1 cs\\<^sub>3\"", "lemma small_big_append: \"small_step \\<pi> cs\\<^sub>1 = Some cs\\<^sub>2 \\<Longrightarrow> \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3 \\<Longrightarrow> \\<pi>: cs\\<^sub>1 \\<Rightarrow> s\\<^sub>3\"", "lemma smalls_big_append: \"small_steps \\<pi> cs\\<^sub>1 (Some cs\\<^sub>2) \\<Longrightarrow> \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3 \\<Longrightarrow> \\<pi>: cs\\<^sub>1 \\<Rightarrow> s\\<^sub>3\"", "lemma small_imp_big:\n  assumes \"small_steps \\<pi> cs\\<^sub>1 (Some (SKIP,s\\<^sub>2))\" \n  shows \"\\<pi>: cs\\<^sub>1 \\<Rightarrow> s\\<^sub>2\"", "lemma small_steps_skip_term[simp]: \"small_steps \\<pi> (SKIP, s) cs' \\<longleftrightarrow> cs'=Some (SKIP,s)\"", "lemma small_seq: \"\\<lbrakk>c\\<noteq>SKIP; small_step \\<pi> (c,s) = Some (c',s')\\<rbrakk> \\<Longrightarrow> small_step \\<pi> (c;;cx,s) = Some (c';;cx,s')\"", "lemma smalls_seq: \"\\<lbrakk>small_steps \\<pi> (c,s) (Some (c',s'))\\<rbrakk> \\<Longrightarrow> small_steps \\<pi> (c;;cx,s) (Some (c';;cx,s'))\"", "lemma small_pscope:  \n  \"\\<lbrakk>c\\<noteq>SKIP; small_step \\<pi>' (c,s) = Some (c',s')\\<rbrakk> \\<Longrightarrow> small_step \\<pi> (PScope \\<pi>' c,s) = Some (PScope \\<pi>' c',s')\"", "lemma smalls_pscope:   \n  \"small_steps \\<pi>' (c, s) (Some (c', s')) \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s) (Some (PScope \\<pi>' c',s'))\"", "lemma big_imp_small:\n  assumes \"\\<pi>: cs \\<Rightarrow> t\"\n  shows \"small_steps \\<pi> cs (Some (SKIP,t))\"", "theorem big_eq_small: \"\\<pi>: cs\\<Rightarrow>t \\<longleftrightarrow> small_steps \\<pi> cs (Some (SKIP,t))\"", "lemma small_steps_determ: \n  assumes \"small_steps \\<pi> cs None\"  \n  shows \"\\<not>small_steps \\<pi> cs (Some (SKIP, t))\"", "lemma wp_imp_wlp: \"wp c Q s \\<Longrightarrow> wlp c Q s\"", "lemma wlp_and_term_imp_wp: \"wlp c Q s \\<and> \\<pi>:(c,s) \\<Rightarrow> t \\<Longrightarrow> wp c Q s\"", "lemma wp_equiv: \"c \\<sim> c' \\<Longrightarrow> wp c = wp c'\"", "lemma wp_conseq: \"wp c P s \\<Longrightarrow> \\<lbrakk>\\<And>s. P s \\<Longrightarrow> Q s\\<rbrakk> \\<Longrightarrow> wp c Q s\"", "lemma wlp_equiv: \"c \\<sim> c' \\<Longrightarrow> wlp c = wlp c'\"", "lemma wlp_conseq: \"wlp c P s \\<Longrightarrow> \\<lbrakk>\\<And>s. P s \\<Longrightarrow> Q s\\<rbrakk> \\<Longrightarrow> wlp c Q s\"", "lemma wp_skip_eq: \"wp SKIP Q s = Q s\"", "lemma wp_assign_idx_eq: \"wp (x[i]::=a) Q s = Q (s(x:=(s x)(aval i s := aval a s)))\"", "lemma wp_arraycpy_eq: \"wp (x[]::=a) Q s = Q (s(x:=s a))\"", "lemma wp_arrayinit_eq: \"wp (CLEAR x[]) Q s = Q (s(x:=(\\<lambda>_. 0)))\"", "lemma wp_assign_locals_eq: \"wp (Assign_Locals l) Q s = Q <l|s>\"", "lemma wp_seq_eq: \"wp (c\\<^sub>1;;c\\<^sub>2) Q s = wp c\\<^sub>1 (wp c\\<^sub>2 Q) s\"", "lemma wp_if_eq: \"wp (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) Q s \n      = (if bval b s then wp c\\<^sub>1 Q s else wp c\\<^sub>2 Q s)\"", "lemma wp_scope_eq: \"wp (SCOPE c) Q s = wp c (\\<lambda>s'. Q <s|s'>) <<>|s>\"", "lemma wp_pcall_eq: \"\\<pi> p = Some c \\<Longrightarrow> wp (PCall p) Q s = wp c Q s\"", "lemmas wp_eq = wp_skip_eq wp_assign_idx_eq wp_arraycpy_eq wp_arrayinit_eq \n      wp_assign_locals_eq wp_seq_eq wp_scope_eq", "lemmas wp_eq' = wp_eq wp_if_eq", "lemma wlp_skip_eq: \"wlp SKIP Q s = Q s\"", "lemma wlp_assign_idx_eq: \"wlp (x[i]::=a) Q s = Q (s(x:=(s x)(aval i s := aval a s)))\"", "lemma wlp_arraycpy_eq: \"wlp (x[]::=a) Q s = Q (s(x:=s a))\"", "lemma wlp_arrayinit_eq: \"wlp (CLEAR x[]) Q s = Q (s(x:=(\\<lambda>_. 0)))\"", "lemma wlp_assign_locals_eq: \"wlp (Assign_Locals l) Q s = Q <l|s>\"", "lemma wlp_seq_eq: \"wlp (c\\<^sub>1;;c\\<^sub>2) Q s = wlp c\\<^sub>1 (wlp c\\<^sub>2 Q) s\"", "lemma wlp_if_eq: \"wlp (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) Q s \n      = (if bval b s then wlp c\\<^sub>1 Q s else wlp c\\<^sub>2 Q s)\"", "lemma wlp_scope_eq: \"wlp (SCOPE c) Q s = wlp c (\\<lambda>s'. Q <s|s'>) <<>|s>\"", "lemma wlp_pcall_eq: \"\\<pi> p = Some c \\<Longrightarrow> wlp (PCall p) Q s = wlp c Q s\"", "lemmas wlp_eq = wlp_skip_eq wlp_assign_idx_eq wlp_arraycpy_eq wlp_arrayinit_eq \n      wlp_assign_locals_eq wlp_seq_eq wlp_scope_eq", "lemmas wlp_eq' = wlp_eq wlp_if_eq", "lemma wlp_while_unfold: \"wlp (WHILE b DO c) Q s = (if bval b s then wlp c (wlp (WHILE b DO c) Q) s else Q s)\"", "lemma wp_while_unfold: \"wp (WHILE b DO c) Q s = (if bval b s then wp c (wp (WHILE b DO c) Q) s else Q s)\"", "lemma wp_pscope_eq: \"wp \\<pi> (PScope \\<pi>' c) Q s = wp \\<pi>' (c) Q s\"", "lemma wlp_pscope_eq: \"wlp \\<pi> (PScope \\<pi>' c) Q s = wlp \\<pi>' (c) Q s\"", "lemma wp_equiv_iff: \"(\\<forall>\\<pi>. wp \\<pi> c = wp \\<pi> c') \\<longleftrightarrow> c \\<sim> c'\"", "lemma wlp_equiv_iff: \"(\\<forall>\\<pi>. wlp \\<pi> c = wlp \\<pi> c') \\<longleftrightarrow> c \\<sim> c'\"", "lemma sim_while_wp_aux:\n  assumes \"bval b = bval b'\" \n  assumes \"wp \\<pi> c = wp \\<pi> c'\" \n  assumes \"\\<pi>: (WHILE b DO c, s) \\<Rightarrow> t\"\n  shows \"\\<pi>: (WHILE b' DO c', s) \\<Rightarrow> t\"", "lemma sim_while_wp: \"bval b = bval b' \\<Longrightarrow> wp \\<pi> c = wp \\<pi> c' \\<Longrightarrow> wp \\<pi> (WHILE b DO c) = wp \\<pi> (WHILE b' DO c')\"", "lemma sim_while_wlp_aux:\n  assumes \"bval b = bval b'\" \n  assumes \"wlp \\<pi> c = wlp \\<pi> c'\" \n  assumes \"\\<pi>: (WHILE b DO c, s) \\<Rightarrow> t\"\n  shows \"\\<pi>: (WHILE b' DO c', s) \\<Rightarrow> t\"", "lemma sim_while_wlp: \"bval b = bval b' \\<Longrightarrow> wlp \\<pi> c = wlp \\<pi> c' \\<Longrightarrow> wlp \\<pi> (WHILE b DO c) = wlp \\<pi> (WHILE b' DO c')\"", "lemma wlp_whileI':\n    assumes INIT: \"I s\\<^sub>0\"\n    assumes STEP: \"\\<And>s. I s \\<Longrightarrow> (if bval b s then wlp \\<pi> c I s else Q s)\"\n    shows \"wlp \\<pi> (WHILE b DO c) Q s\\<^sub>0\"", "lemma \n    assumes INIT: \"I s\\<^sub>0\"\n    assumes STEP: \"\\<And>s. I s \\<Longrightarrow> (if bval b s then wlp \\<pi> c I s else Q s)\"\n    shows \"wlp \\<pi> (WHILE b DO c) Q s\\<^sub>0\"", "lemma wp_whileI':\n    assumes WF: \"wf R\"\n    assumes INIT: \"I s\\<^sub>0\"\n    assumes STEP: \"\\<And>s. I s \\<Longrightarrow> (if bval b s then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s',s)\\<in>R) s else Q s)\"\n    shows \"wp \\<pi> (WHILE b DO c) Q s\\<^sub>0\"", "lemma \n    assumes WF: \"wf R\"\n    assumes INIT: \"I s\\<^sub>0\"\n    assumes STEP: \"\\<And>s. I s \\<Longrightarrow> (if bval b s then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s',s)\\<in>R) s else Q s)\"\n    shows \"wp \\<pi> (WHILE b DO c) Q s\\<^sub>0\"", "lemma wlp_whileI:\n    assumes INIT: \"I \\<ss>\\<^sub>0\"\n    assumes STEP: \"\\<And>\\<ss>. \\<lbrakk>I \\<ss>; bval b \\<ss> \\<rbrakk> \\<Longrightarrow> wlp \\<pi> c I \\<ss>\"\n    assumes FINAL: \"\\<And>\\<ss>. \\<lbrakk> I \\<ss>; \\<not>bval b \\<ss> \\<rbrakk> \\<Longrightarrow> Q \\<ss>\"\n    shows \"wlp \\<pi> (WHILE b DO c) Q \\<ss>\\<^sub>0\"", "lemma wp_whileI:\n    assumes WF: \"wf R\"\n    assumes INIT: \"I \\<ss>\\<^sub>0\"\n    assumes STEP: \"\\<And>\\<ss>. \\<lbrakk>I \\<ss>; bval b \\<ss> \\<rbrakk> \\<Longrightarrow> wp \\<pi> c (\\<lambda>\\<ss>'. I \\<ss>' \\<and> (\\<ss>',\\<ss>)\\<in>R) \\<ss>\"\n    assumes FINAL: \"\\<And>\\<ss>. \\<lbrakk> I \\<ss>; \\<not>bval b \\<ss> \\<rbrakk> \\<Longrightarrow> Q \\<ss>\"\n    shows \"wp \\<pi> (WHILE b DO c) Q \\<ss>\\<^sub>0\"", "lemma map_leD: \"m\\<subseteq>\\<^sub>mm' \\<Longrightarrow> m x = Some v \\<Longrightarrow> m' x = Some v\"", "lemma big_step_mono_prog:\n  assumes \"\\<pi> \\<subseteq>\\<^sub>m \\<pi>'\"  \n  assumes \"\\<pi>:(c,s) \\<Rightarrow> t\"\n  shows \"\\<pi>':(c,s) \\<Rightarrow> t\"", "lemma localize_recursion:\n  \"\\<pi>': (PScope \\<pi> c, s) \\<Rightarrow> t \\<longleftrightarrow> \\<pi>:(c,s) \\<Rightarrow> t\"", "lemma sp_arraycpy_eq: \"sp P (x[]::=y) t \\<longleftrightarrow> (\\<exists>vx. let s = t(x:=vx) in t x = s y \\<and> P s)\"", "lemma sp_arraycpy_eq': \"sp P (x[]::=y) t \\<longleftrightarrow> t x = t y \\<and> (\\<exists>vx. P (t(x:=vx,y:=t x)))\"", "lemma sp_skip_eq: \"sp P SKIP t \\<longleftrightarrow> P t\"", "lemma sp_seq_eq: \"sp P (c\\<^sub>1;;c\\<^sub>2) t \\<longleftrightarrow> sp (sp P c\\<^sub>1) c\\<^sub>2 t\"", "lemma HT_conseq: \n  assumes \"HT \\<pi> P c Q\"\n  assumes \"\\<And>s. P' s \\<Longrightarrow> P s\"\n  assumes \"\\<And>s\\<^sub>0 s. \\<lbrakk>P s\\<^sub>0; P' s\\<^sub>0; Q s\\<^sub>0 s \\<rbrakk> \\<Longrightarrow> Q' s\\<^sub>0 s\"\n  shows \"HT \\<pi> P' c Q'\"", "lemma HT_partial_conseq: \n  assumes \"HT_partial \\<pi> P c Q\"\n  assumes \"\\<And>s. P' s \\<Longrightarrow> P s\"\n  assumes \"\\<And>s\\<^sub>0 s. \\<lbrakk>P s\\<^sub>0; P' s\\<^sub>0; Q s\\<^sub>0 s \\<rbrakk> \\<Longrightarrow> Q' s\\<^sub>0 s\"\n  shows \"HT_partial \\<pi> P' c Q'\"", "lemma wp_modularity_rule:\n  \"\\<lbrakk>HT \\<pi> P c Q; P s; (\\<And>s'. Q s s' \\<Longrightarrow> Q' s')\\<rbrakk> \\<Longrightarrow> wp \\<pi> c Q' s\"", "lemma adjust_prologue:\n  assumes \"HT \\<pi> P body Q\"\n  shows \"HT \\<pi> (wp \\<pi> prologue P) (prologue;;body) (\\<lambda>s\\<^sub>0 s. wp \\<pi> prologue (\\<lambda>s\\<^sub>0. Q s\\<^sub>0 s) s\\<^sub>0)\"", "lemma adjust_epilogue:\n  assumes \"HT \\<pi> P body Q\"  \n  assumes TERMINATES: \"\\<forall>s. \\<exists>t. \\<pi>: (epilogue,s) \\<Rightarrow> t\"\n  shows \"HT \\<pi> P (body;;epilogue) (\\<lambda>s\\<^sub>0. sp \\<pi> (Q s\\<^sub>0) epilogue)\"", "lemma adjust_scope:\n  assumes \"HT \\<pi> P body Q\"\n  shows \"HT \\<pi> (\\<lambda>s. P <<>|s>) (SCOPE body) (\\<lambda>s\\<^sub>0 s. \\<exists>l. Q (<<>|s\\<^sub>0>) (<l|s>))\"", "lemma HTsetI:    \n  assumes \"wf R\"\n  assumes RL: \"\\<And>P c Q s\\<^sub>0. \\<lbrakk> HTset_r (\\<lambda>c' s'. ((c',s'),(c,s\\<^sub>0))\\<in>R ) \\<pi> \\<Theta>; (P,c,Q)\\<in>\\<Theta>; P s\\<^sub>0 \\<rbrakk> \\<Longrightarrow> wp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0\"\n  shows \"HTset \\<pi> \\<Theta>\"", "lemma HT_simple_recursiveI:\n  assumes \"wf R\"\n  assumes \"\\<And>s. \\<lbrakk>HT \\<pi> (\\<lambda>s'. (f s', f s)\\<in>R \\<and> P s') c Q; P s \\<rbrakk> \\<Longrightarrow> wp \\<pi> c (Q s) s\"\n  shows \"HT \\<pi> P c Q\"", "lemma HT_simple_recursive_procI:\n  assumes \"wf R\"\n  assumes \"\\<And>s. \\<lbrakk>HT \\<pi> (\\<lambda>s'. (f s', f s)\\<in>R \\<and> P s') (PCall p) Q; P s \\<rbrakk> \\<Longrightarrow> wp \\<pi> (PCall p) (Q s) s\"\n  shows \"HT \\<pi> P (PCall p) Q\"", "lemma\n  assumes \"wf R\"\n  assumes \"\\<And>s P p Q. \\<lbrakk> \n    \\<And>P' p' Q'. (P',p',Q')\\<in>\\<Theta> \n      \\<Longrightarrow> HT \\<pi> (\\<lambda>s'. ((p',s'),(p,s))\\<in>R \\<and> P' s') (PCall p') Q';\n    (P,p,Q)\\<in>\\<Theta>; P s \n  \\<rbrakk> \\<Longrightarrow> wp \\<pi> (PCall p) (Q s) s\"\n  shows \"\\<forall>(P,p,Q)\\<in>\\<Theta>. HT \\<pi> P (PCall p) Q\"", "lemma wlp_whileI'_complete:\n  assumes \"wlp \\<pi> (WHILE b DO c) Q s\\<^sub>0\"\n  obtains I where\n    \"I s\\<^sub>0\"\n    \"\\<And>s. I s \\<Longrightarrow> if bval b s then wlp \\<pi> c I s else Q s\"", "lemma count_it_determ:\n  \"count_it \\<pi> b c s n \\<Longrightarrow> count_it \\<pi> b c s n' \\<Longrightarrow> n' = n\"", "lemma count_it_ex:   \n  assumes \"\\<pi>: (WHILE b DO c,s) \\<Rightarrow> t\"\n  shows \"\\<exists>n. count_it \\<pi> b c s n\"", "lemma variant_decreases:\n  assumes STEPB: \"bval b s\" \n  assumes STEPC: \"\\<pi>: (c,s) \\<Rightarrow> s'\" \n  assumes TERM: \"\\<pi>: (WHILE b DO c,s') \\<Rightarrow> t\"\n  shows \"variant \\<pi> b c s' < variant \\<pi> b c s\"", "lemma wp_whileI'_complete:\n  fixes \\<pi> b c\n  defines \"R\\<equiv>measure (variant \\<pi> b c)\"\n  assumes \"wp \\<pi> (WHILE b DO c) Q s\\<^sub>0\"\n  obtains I where\n    \"wf R\"\n    \"I s\\<^sub>0\"\n    \"\\<And>s. I s \\<Longrightarrow> if bval b s then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s',s)\\<in>R) s else Q s\""], "translations": [["", "lemma combine_collapse: \"<s|s> = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <s|s> = s", "by auto"], ["", "lemma combine_nest:  \n  \"<s|<s'|t>> = <s|t>\"\n  \"<<s|t'>|t> = <s|t>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <s|<s'|t>> = <s|t> &&& <<s|t'>|t> = <s|t>", "by auto"], ["", "lemma combine_query: \n  \"is_local x \\<Longrightarrow> <s|t> x = s x\"  \n  \"is_global x \\<Longrightarrow> <s|t> x = t x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_local x \\<Longrightarrow> <s|t> x = s x) &&&\n    (is_global x \\<Longrightarrow> <s|t> x = t x)", "by auto"], ["", "lemma combine_upd: \n  \"is_local x \\<Longrightarrow> <s|t>(x:=v) = <s(x:=v)|t>\"  \n  \"is_global x \\<Longrightarrow> <s|t>(x:=v) = <s|t(x:=v)>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_local x \\<Longrightarrow> <s|t>(x := v) = <s(x := v)|t>) &&&\n    (is_global x \\<Longrightarrow> <s|t>(x := v) = <s|t(x := v)>)", "by auto"], ["", "lemma combine_cases[cases type]:\n  obtains l g where \"s = <l|g>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l g. s = <l|g> \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (fastforce)"], ["", "end"], ["", "subsection \\<open>Arithmetic Expressions\\<close>"], ["", "text \\<open>The evaluation of arithmetic expressions is straightforward. \\<close>"], ["", "fun aval :: \"aexp \\<Rightarrow> state \\<Rightarrow> pval\" where\n  \"aval (N n) s = n\" \n| \"aval (Vidx x i) s = s x (aval i s)\" \n| \"aval (Unop f a\\<^sub>1) s = f (aval a\\<^sub>1 s)\"\n| \"aval (Binop f a\\<^sub>1 a\\<^sub>2) s = f (aval a\\<^sub>1 s) (aval a\\<^sub>2 s)\""], ["", "subsection \\<open>Boolean Expressions\\<close>"], ["", "text \\<open>The evaluation of Boolean expressions is straightforward. \\<close>"], ["", "fun bval :: \"bexp \\<Rightarrow> state \\<Rightarrow> bool\" where\n  \"bval (Bc v) s = v\" \n| \"bval (Not b) s = (\\<not> bval b s)\" \n| \"bval (BBinop f b\\<^sub>1 b\\<^sub>2) s = f (bval b\\<^sub>1 s) (bval b\\<^sub>2 s)\" \n| \"bval (Cmpop f a\\<^sub>1 a\\<^sub>2) s = f (aval a\\<^sub>1 s) (aval a\\<^sub>2 s)\""], ["", "subsection \\<open>Big-Step Semantics\\<close>"], ["", "text \\<open>The big-step semantics is a relation from commands and start states to end states,\n  such that there is a terminating execution.\n\n  If there is no such execution, no end state will be related to the command and start state.\n  This either means that the program does not terminate, or gets stuck because it tries to call\n  an undefined procedure.\n\n  The inference rules of the big-step semantics are pretty straightforward.\n\\<close>"], ["", "inductive big_step :: \"program \\<Rightarrow> com \\<times> state \\<Rightarrow> state \\<Rightarrow> bool\" \n  (\"_: _ \\<Rightarrow> _\" [1000,55,55] 55)\nwhere\n  \\<comment> \\<open>No-Op\\<close>\n  Skip: \"\\<pi>:(SKIP,s) \\<Rightarrow> s\" \n  \n  \\<comment> \\<open>Assignments\\<close>\n| AssignIdx: \"\\<pi>:(x[i] ::= a,s) \\<Rightarrow> s(x := (s x)(aval i s := aval a s))\" \n| ArrayCpy: \"\\<pi>:(x[] ::= y,s) \\<Rightarrow> s(x := s y)\" \n| ArrayClear: \"\\<pi>:(CLEAR x[],s) \\<Rightarrow> s(x := (\\<lambda>_. 0))\" \n| Assign_Locals: \"\\<pi>:(Assign_Locals l,s) \\<Rightarrow> <l|s>\"\n\n  \\<comment> \\<open>Block commands\\<close>\n| Seq: \"\\<lbrakk> \\<pi>:(c\\<^sub>1,s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;  \\<pi>:(c\\<^sub>2,s\\<^sub>2) \\<Rightarrow> s\\<^sub>3 \\<rbrakk> \\<Longrightarrow> \\<pi>:(c\\<^sub>1;;c\\<^sub>2, s\\<^sub>1) \\<Rightarrow> s\\<^sub>3\" \n| IfTrue: \"\\<lbrakk> bval b s; \\<pi>:(c\\<^sub>1,s) \\<Rightarrow> t \\<rbrakk> \\<Longrightarrow> \\<pi>:(IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s) \\<Rightarrow> t\" \n| IfFalse: \"\\<lbrakk> \\<not>bval b s;  \\<pi>:(c\\<^sub>2,s) \\<Rightarrow> t \\<rbrakk> \\<Longrightarrow> \\<pi>:(IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s) \\<Rightarrow> t\" \n| Scope: \"\\<lbrakk> \\<pi>:(c,<<>|s>) \\<Rightarrow> s' \\<rbrakk> \\<Longrightarrow> \\<pi>:(SCOPE c, s) \\<Rightarrow> <s|s'>\"\n| WhileFalse: \"\\<not>bval b s \\<Longrightarrow> \\<pi>:(WHILE b DO c,s) \\<Rightarrow> s\" \n| WhileTrue: \"\\<lbrakk> bval b s\\<^sub>1;  \\<pi>:(c,s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;  \\<pi>:(WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3 \\<rbrakk> \n    \\<Longrightarrow> \\<pi>:(WHILE b DO c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>3\"\n\n  \\<comment> \\<open>Procedure commands\\<close>        \n| PCall: \"\\<lbrakk> \\<pi> p = Some c; \\<pi>:(c,s) \\<Rightarrow> t \\<rbrakk> \\<Longrightarrow> \\<pi>:(PCall p,s) \\<Rightarrow> t\"    \n| PScope: \"\\<lbrakk> \\<pi>':(c,s) \\<Rightarrow> t \\<rbrakk> \\<Longrightarrow> \\<pi>:(PScope \\<pi>' c, s) \\<Rightarrow> t\""], ["", "subsubsection \\<open>Proof Automation\\<close>"], ["", "text \\<open>\n  We do some setup to make proofs over the big-step semantics more automatic.\n\\<close>"], ["", "declare big_step.intros [intro]"], ["", "lemmas big_step_induct[induct set] = big_step.induct[split_format(complete)]"], ["", "inductive_simps Skip_simp: \"\\<pi>:(SKIP,s) \\<Rightarrow> t\""], ["", "inductive_simps AssignIdx_simp: \"\\<pi>:(x[i] ::= a,s) \\<Rightarrow> t\""], ["", "inductive_simps ArrayCpy_simp: \"\\<pi>:(x[] ::= y,s) \\<Rightarrow> t\""], ["", "inductive_simps ArrayInit_simp: \"\\<pi>:(CLEAR x[],s) \\<Rightarrow> t\""], ["", "inductive_simps AssignLocals_simp: \"\\<pi>:(Assign_Locals l,s) \\<Rightarrow> t\""], ["", "inductive_simps Seq_simp: \"\\<pi>:(c1;;c2,s1) \\<Rightarrow> s3\""], ["", "inductive_simps If_simp: \"\\<pi>:(IF b THEN c1 ELSE c2,s) \\<Rightarrow> t\""], ["", "inductive_simps Scope_simp: \"\\<pi>:(SCOPE c,s) \\<Rightarrow> t\""], ["", "inductive_simps PCall_simp: \"\\<pi>:(PCall p,s) \\<Rightarrow> t\""], ["", "inductive_simps PScope_simp: \"\\<pi>:(PScope \\<pi>' p,s) \\<Rightarrow> t\""], ["", "lemmas big_step_simps = \n  Skip_simp AssignIdx_simp ArrayCpy_simp ArrayInit_simp\n  Seq_simp If_simp Scope_simp PCall_simp PScope_simp"], ["", "inductive_cases SkipE[elim!]: \"\\<pi>:(SKIP,s) \\<Rightarrow> t\""], ["", "inductive_cases AssignIdxE[elim!]: \"\\<pi>:(x[i] ::= a,s) \\<Rightarrow> t\""], ["", "inductive_cases ArrayCpyE[elim!]: \"\\<pi>:(x[] ::= y,s) \\<Rightarrow> t\""], ["", "inductive_cases ArrayInitE[elim!]: \"\\<pi>:(CLEAR x[],s) \\<Rightarrow> t\""], ["", "inductive_cases AssignLocalsE[elim!]: \"\\<pi>:(Assign_Locals l,s) \\<Rightarrow> t\""], ["", "inductive_cases SeqE[elim!]: \"\\<pi>:(c1;;c2,s1) \\<Rightarrow> s3\""], ["", "inductive_cases IfE[elim!]: \"\\<pi>:(IF b THEN c1 ELSE c2,s) \\<Rightarrow> t\""], ["", "inductive_cases ScopeE[elim!]: \"\\<pi>:(SCOPE c,s) \\<Rightarrow> t\""], ["", "inductive_cases PCallE[elim!]: \"\\<pi>:(PCall p,s) \\<Rightarrow> t\""], ["", "inductive_cases PScopeE[elim!]: \"\\<pi>:(PScope \\<pi>' p,s) \\<Rightarrow> t\""], ["", "inductive_cases WhileE[elim]: \"\\<pi>:(WHILE b DO c,s) \\<Rightarrow> t\""], ["", "subsubsection \\<open>Automatic Derivation\\<close>"], ["", "(* TODO: More comments, test *)\n  (* Testing the programs by constructing big-step derivations automatically *)    \n    \n  (* This rule is used to enforce simplification of the newly generated state, before passing it on *)"], ["", "lemma Assign': \"s' = s(x := (s x)(aval i s := aval a s)) \\<Longrightarrow> \\<pi>:(x[i] ::= a, s) \\<Rightarrow> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' = s(x := (s x)(aval i s := aval a s)) \\<Longrightarrow>\n    \\<pi>: (x[i] ::= a, s) \\<Rightarrow> s'", "by auto"], ["", "lemma ArrayCpy': \"s' = s(x := (s y)) \\<Longrightarrow> \\<pi>:(x[] ::= y, s) \\<Rightarrow> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' = s(x := s y) \\<Longrightarrow>\n    \\<pi>: (x[] ::= y, s) \\<Rightarrow> s'", "by auto"], ["", "lemma ArrayClear': \"s' = s(x := (\\<lambda>_. 0)) \\<Longrightarrow> \\<pi>:(CLEAR x[], s) \\<Rightarrow> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' = s(x := \\<lambda>_. 0) \\<Longrightarrow>\n    \\<pi>: (CLEAR x[], s) \\<Rightarrow> s'", "by auto"], ["", "lemma Scope': \"s\\<^sub>1 = <<>|s> \\<Longrightarrow> \\<pi>:(c,s\\<^sub>1) \\<Rightarrow> t \\<Longrightarrow> t' = <s|t> \\<Longrightarrow> \\<pi>:(Scope c,s) \\<Rightarrow> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s\\<^sub>1 = <<>|s>; \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> t;\n     t' = <s|t>\\<rbrakk>\n    \\<Longrightarrow> \\<pi>: (SCOPE c, s) \\<Rightarrow> t'", "by auto"], ["", "named_theorems deriv_unfolds \\<open>Unfold rules before derivations\\<close>"], ["", "method bs_simp = simp add: combine_nest combine_upd combine_query fun_upd_same fun_upd_other del: fun_upd_apply"], ["", "method big_step' = \n    rule Skip Seq PScope\n  | (rule Assign' ArrayCpy' ArrayClear', (bs_simp;fail)) \n  | (rule IfTrue IfFalse WhileTrue WhileFalse PCall Scope'), (bs_simp;fail)\n  | unfold deriv_unfolds\n  | (bs_simp; fail)"], ["", "method big_step = \n    rule Skip \n  | rule Seq, (big_step;fail), (big_step;fail)\n  | rule PScope, (big_step;fail)  \n  | (rule Assign' ArrayCpy' ArrayClear', (bs_simp;fail)) \n  | (rule IfTrue IfFalse), (bs_simp;fail), (big_step;fail)\n  | rule WhileTrue, (bs_simp;fail), (big_step;fail), (big_step;fail)\n  | rule WhileFalse, (bs_simp;fail)\n  | rule PCall, (bs_simp;fail), (big_step;fail)\n  | (rule Scope', (bs_simp;fail), (big_step;fail), (bs_simp;fail))\n  | unfold deriv_unfolds, big_step"], ["", "schematic_goal \"Map.empty: (\n    ''a'' ::= N 1;;\n    WHILE Cmpop (\\<lambda>x y. y < x) (V ''n'') (N 0) DO (\n      ''a'' ::= Binop (+) (V ''a'') (V ''a'');; \n      ''n'' ::= Binop (-) (V ''n'') (N 1)\n    ),<''n'':=(\\<lambda>_. 5)>) \\<Rightarrow> ?s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Map.empty: (''a'' ::= N 1;;\n                WHILE Cmpop (\\<lambda>x y. y < x) (V ''n'') (N 0)\n                DO (''a'' ::= Binop (+) (V ''a'') (V ''a'');;\n                    ''n'' ::= Binop (-) (V ''n'') (N 1)),\n                <''n'' := \\<lambda>_. 5>) \\<Rightarrow> ?s", "by big_step"], ["", "subsection \\<open>Command Equivalence\\<close>"], ["", "text \\<open>Two commands are equivalent if they have the same semantics.\\<close>"], ["", "definition\n  equiv_c :: \"com \\<Rightarrow> com \\<Rightarrow> bool\" (infix \"\\<sim>\" 50) where\n  \"c \\<sim> c' \\<equiv> (\\<forall>\\<pi> s t. \\<pi>:(c,s) \\<Rightarrow> t  = \\<pi>:(c',s) \\<Rightarrow> t)\""], ["", "lemma equivI[intro?]: \"\\<lbrakk>\n  \\<And>s t \\<pi>. \\<pi>:(c,s) \\<Rightarrow> t \\<Longrightarrow> \\<pi>:(c',s) \\<Rightarrow> t; \n  \\<And>s t \\<pi>. \\<pi>:(c',s) \\<Rightarrow> t \\<Longrightarrow> \\<pi>:(c,s) \\<Rightarrow> t\\<rbrakk> \n  \\<Longrightarrow> c \\<sim> c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s t \\<pi>.\n                \\<pi>: (c, s) \\<Rightarrow> t \\<Longrightarrow>\n                \\<pi>: (c', s) \\<Rightarrow> t;\n     \\<And>s t \\<pi>.\n        \\<pi>: (c', s) \\<Rightarrow> t \\<Longrightarrow>\n        \\<pi>: (c, s) \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> c \\<sim> c'", "by (auto simp: equiv_c_def)"], ["", "lemma equivD[dest]: \"c \\<sim> c' \\<Longrightarrow> \\<pi>:(c,s) \\<Rightarrow> t \\<longleftrightarrow> \\<pi>:(c',s) \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<sim> c' \\<Longrightarrow>\n    \\<pi>: (c, s) \\<Rightarrow> t = \\<pi>: (c', s) \\<Rightarrow> t", "by (auto simp: equiv_c_def)"], ["", "text \\<open>Command equivalence is an equivalence relation, i.e.\\ it is\nreflexive, symmetric, and transitive.\\<close>"], ["", "lemma equiv_refl[simp, intro!]:  \"c \\<sim> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<sim> c", "by (blast intro: equivI)"], ["", "lemma equiv_sym[sym]:   \"(c \\<sim> c') \\<Longrightarrow> (c' \\<sim> c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<sim> c' \\<Longrightarrow> c' \\<sim> c", "by (blast intro: equivI)"], ["", "lemma equiv_trans[trans]: \"c \\<sim> c' \\<Longrightarrow> c' \\<sim> c'' \\<Longrightarrow> c \\<sim> c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<sim> c'; c' \\<sim> c''\\<rbrakk>\n    \\<Longrightarrow> c \\<sim> c''", "by (blast intro: equivI)"], ["", "subsubsection \\<open>Basic Equivalences\\<close>"], ["", "lemma while_unfold:\n  \"(WHILE b DO c) \\<sim> (IF b THEN c;; WHILE b DO c ELSE SKIP)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WHILE b DO c \\<sim> IF b THEN c;; WHILE b DO c ELSE SKIP", "by rule auto"], ["", "lemma triv_if:\n  \"(IF b THEN c ELSE c) \\<sim> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IF b THEN c ELSE c \\<sim> c", "by (auto intro!: equivI)"], ["", "lemma commute_if:\n  \"(IF b1 THEN (IF b2 THEN c11 ELSE c12) ELSE c2) \n   \\<sim> \n   (IF b2 THEN (IF b1 THEN c11 ELSE c2) ELSE (IF b1 THEN c12 ELSE c2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IF b1 THEN IF b2 THEN c11 ELSE c12 ELSE c2 \\<sim>\n    IF b2 THEN IF b1 THEN c11 ELSE c2 ELSE IF b1 THEN c12 ELSE c2", "by (auto intro!: equivI)"], ["", "lemma sim_while_cong_aux:\n  \"\\<lbrakk>\\<pi>:(WHILE b DO c,s) \\<Rightarrow> t; bval b = bval b'; c \\<sim> c' \\<rbrakk> \\<Longrightarrow> \\<pi>:(WHILE b' DO c',s) \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<pi>: (WHILE b DO c, s) \\<Rightarrow> t; bval b = bval b';\n     c \\<sim> c'\\<rbrakk>\n    \\<Longrightarrow> \\<pi>: (WHILE b' DO c', s) \\<Rightarrow> t", "by(induction \"WHILE b DO c\" s t arbitrary: b c rule: big_step_induct) auto"], ["", "lemma sim_while_cong: \"bval b = bval b' \\<Longrightarrow> c \\<sim> c' \\<Longrightarrow> WHILE b DO c \\<sim> WHILE b' DO c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bval b = bval b'; c \\<sim> c'\\<rbrakk>\n    \\<Longrightarrow> WHILE b DO c \\<sim> WHILE b' DO c'", "using equiv_c_def sim_while_cong_aux"], ["proof (prove)\nusing this:\n  ?c \\<sim> ?c' \\<equiv>\n  \\<forall>\\<pi> s t.\n     \\<pi>: (?c, s) \\<Rightarrow> t = \\<pi>: (?c', s) \\<Rightarrow> t\n  \\<lbrakk>?\\<pi>: (WHILE ?b DO ?c, ?s) \\<Rightarrow> ?t;\n   bval ?b = bval ?b'; ?c \\<sim> ?c'\\<rbrakk>\n  \\<Longrightarrow> ?\\<pi>: (WHILE ?b' DO ?c', ?s) \\<Rightarrow> ?t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>bval b = bval b'; c \\<sim> c'\\<rbrakk>\n    \\<Longrightarrow> WHILE b DO c \\<sim> WHILE b' DO c'", "by auto"], ["", "subsection \\<open>Execution is Deterministic\\<close>"], ["", "text \\<open>This proof is automatic.\\<close>"], ["", "theorem big_step_determ: \"\\<lbrakk> \\<pi>:(c,s) \\<Rightarrow> t; \\<pi>:(c,s) \\<Rightarrow> u \\<rbrakk> \\<Longrightarrow> u = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<pi>: (c, s) \\<Rightarrow> t;\n     \\<pi>: (c, s) \\<Rightarrow> u\\<rbrakk>\n    \\<Longrightarrow> u = t", "proof (induction arbitrary: u rule: big_step.induct)"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>\\<pi> s u.\n       \\<pi>: (SKIP, s) \\<Rightarrow> u \\<Longrightarrow> u = s\n 2. \\<And>\\<pi> x i a s u.\n       \\<pi>: (x[i] ::= a, s) \\<Rightarrow> u \\<Longrightarrow>\n       u = s(x := (s x)(aval i s := aval a s))\n 3. \\<And>\\<pi> x y s u.\n       \\<pi>: (x[] ::= y, s) \\<Rightarrow> u \\<Longrightarrow>\n       u = s(x := s y)\n 4. \\<And>\\<pi> x s u.\n       \\<pi>: (CLEAR x[], s) \\<Rightarrow> u \\<Longrightarrow>\n       u = s(x := \\<lambda>_. 0)\n 5. \\<And>\\<pi> l s u.\n       \\<pi>: (Assign_Locals l, s) \\<Rightarrow> u \\<Longrightarrow>\n       u = <l|s>\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3 u.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<And>u.\n           \\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> u \\<Longrightarrow>\n           u = s\\<^sub>2;\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<And>u.\n           \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> u \\<Longrightarrow>\n           u = s\\<^sub>3;\n        \\<pi>: (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1) \\<Rightarrow> u\\<rbrakk>\n       \\<Longrightarrow> u = s\\<^sub>3\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2 u.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        \\<And>u.\n           \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> u \\<Longrightarrow> u = t;\n        \\<pi>: (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                s) \\<Rightarrow> u\\<rbrakk>\n       \\<Longrightarrow> u = t\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1 u.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        \\<And>u.\n           \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> u \\<Longrightarrow> u = t;\n        \\<pi>: (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                s) \\<Rightarrow> u\\<rbrakk>\n       \\<Longrightarrow> u = t\n 9. \\<And>\\<pi> c s s' u.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        \\<And>u.\n           \\<pi>: (c, <<>|s>) \\<Rightarrow> u \\<Longrightarrow> u = s';\n        \\<pi>: (SCOPE c, s) \\<Rightarrow> u\\<rbrakk>\n       \\<Longrightarrow> u = <s|s'>\n 10. \\<And>b s \\<pi> c u.\n        \\<lbrakk>\\<not> bval b s;\n         \\<pi>: (WHILE b DO c, s) \\<Rightarrow> u\\<rbrakk>\n        \\<Longrightarrow> u = s\nA total of 13 subgoals...", "case (WhileTrue b s\\<^sub>1 c s\\<^sub>2 s\\<^sub>3)"], ["proof (state)\nthis:\n  bval b s\\<^sub>1\n  c: (s\\<^sub>2, s\\<^sub>1) \\<Rightarrow> s\\<^sub>3\n  c: (WHILE b DO s\\<^sub>2, s\\<^sub>3) \\<Rightarrow> s\\<^sub>3_\n  c: (s\\<^sub>2, s\\<^sub>1) \\<Rightarrow> ?u \\<Longrightarrow>\n  ?u = s\\<^sub>3\n  c: (WHILE b DO s\\<^sub>2, s\\<^sub>3) \\<Rightarrow> ?u \\<Longrightarrow>\n  ?u = s\\<^sub>3_\n  c: (WHILE b DO s\\<^sub>2, s\\<^sub>1) \\<Rightarrow> u\n\ngoal (13 subgoals):\n 1. \\<And>\\<pi> s u.\n       \\<pi>: (SKIP, s) \\<Rightarrow> u \\<Longrightarrow> u = s\n 2. \\<And>\\<pi> x i a s u.\n       \\<pi>: (x[i] ::= a, s) \\<Rightarrow> u \\<Longrightarrow>\n       u = s(x := (s x)(aval i s := aval a s))\n 3. \\<And>\\<pi> x y s u.\n       \\<pi>: (x[] ::= y, s) \\<Rightarrow> u \\<Longrightarrow>\n       u = s(x := s y)\n 4. \\<And>\\<pi> x s u.\n       \\<pi>: (CLEAR x[], s) \\<Rightarrow> u \\<Longrightarrow>\n       u = s(x := \\<lambda>_. 0)\n 5. \\<And>\\<pi> l s u.\n       \\<pi>: (Assign_Locals l, s) \\<Rightarrow> u \\<Longrightarrow>\n       u = <l|s>\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3 u.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<And>u.\n           \\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> u \\<Longrightarrow>\n           u = s\\<^sub>2;\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<And>u.\n           \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> u \\<Longrightarrow>\n           u = s\\<^sub>3;\n        \\<pi>: (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1) \\<Rightarrow> u\\<rbrakk>\n       \\<Longrightarrow> u = s\\<^sub>3\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2 u.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        \\<And>u.\n           \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> u \\<Longrightarrow> u = t;\n        \\<pi>: (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                s) \\<Rightarrow> u\\<rbrakk>\n       \\<Longrightarrow> u = t\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1 u.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        \\<And>u.\n           \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> u \\<Longrightarrow> u = t;\n        \\<pi>: (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                s) \\<Rightarrow> u\\<rbrakk>\n       \\<Longrightarrow> u = t\n 9. \\<And>\\<pi> c s s' u.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        \\<And>u.\n           \\<pi>: (c, <<>|s>) \\<Rightarrow> u \\<Longrightarrow> u = s';\n        \\<pi>: (SCOPE c, s) \\<Rightarrow> u\\<rbrakk>\n       \\<Longrightarrow> u = <s|s'>\n 10. \\<And>b s \\<pi> c u.\n        \\<lbrakk>\\<not> bval b s;\n         \\<pi>: (WHILE b DO c, s) \\<Rightarrow> u\\<rbrakk>\n        \\<Longrightarrow> u = s\nA total of 13 subgoals...", "then"], ["proof (chain)\npicking this:\n  bval b s\\<^sub>1\n  c: (s\\<^sub>2, s\\<^sub>1) \\<Rightarrow> s\\<^sub>3\n  c: (WHILE b DO s\\<^sub>2, s\\<^sub>3) \\<Rightarrow> s\\<^sub>3_\n  c: (s\\<^sub>2, s\\<^sub>1) \\<Rightarrow> ?u \\<Longrightarrow>\n  ?u = s\\<^sub>3\n  c: (WHILE b DO s\\<^sub>2, s\\<^sub>3) \\<Rightarrow> ?u \\<Longrightarrow>\n  ?u = s\\<^sub>3_\n  c: (WHILE b DO s\\<^sub>2, s\\<^sub>1) \\<Rightarrow> u", "show ?case"], ["proof (prove)\nusing this:\n  bval b s\\<^sub>1\n  c: (s\\<^sub>2, s\\<^sub>1) \\<Rightarrow> s\\<^sub>3\n  c: (WHILE b DO s\\<^sub>2, s\\<^sub>3) \\<Rightarrow> s\\<^sub>3_\n  c: (s\\<^sub>2, s\\<^sub>1) \\<Rightarrow> ?u \\<Longrightarrow>\n  ?u = s\\<^sub>3\n  c: (WHILE b DO s\\<^sub>2, s\\<^sub>3) \\<Rightarrow> ?u \\<Longrightarrow>\n  ?u = s\\<^sub>3_\n  c: (WHILE b DO s\\<^sub>2, s\\<^sub>1) \\<Rightarrow> u\n\ngoal (1 subgoal):\n 1. u = s\\<^sub>3_", "by blast"], ["proof (state)\nthis:\n  u = s\\<^sub>3_\n\ngoal (12 subgoals):\n 1. \\<And>\\<pi> s u.\n       \\<pi>: (SKIP, s) \\<Rightarrow> u \\<Longrightarrow> u = s\n 2. \\<And>\\<pi> x i a s u.\n       \\<pi>: (x[i] ::= a, s) \\<Rightarrow> u \\<Longrightarrow>\n       u = s(x := (s x)(aval i s := aval a s))\n 3. \\<And>\\<pi> x y s u.\n       \\<pi>: (x[] ::= y, s) \\<Rightarrow> u \\<Longrightarrow>\n       u = s(x := s y)\n 4. \\<And>\\<pi> x s u.\n       \\<pi>: (CLEAR x[], s) \\<Rightarrow> u \\<Longrightarrow>\n       u = s(x := \\<lambda>_. 0)\n 5. \\<And>\\<pi> l s u.\n       \\<pi>: (Assign_Locals l, s) \\<Rightarrow> u \\<Longrightarrow>\n       u = <l|s>\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3 u.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<And>u.\n           \\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> u \\<Longrightarrow>\n           u = s\\<^sub>2;\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<And>u.\n           \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> u \\<Longrightarrow>\n           u = s\\<^sub>3;\n        \\<pi>: (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1) \\<Rightarrow> u\\<rbrakk>\n       \\<Longrightarrow> u = s\\<^sub>3\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2 u.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        \\<And>u.\n           \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> u \\<Longrightarrow> u = t;\n        \\<pi>: (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                s) \\<Rightarrow> u\\<rbrakk>\n       \\<Longrightarrow> u = t\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1 u.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        \\<And>u.\n           \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> u \\<Longrightarrow> u = t;\n        \\<pi>: (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                s) \\<Rightarrow> u\\<rbrakk>\n       \\<Longrightarrow> u = t\n 9. \\<And>\\<pi> c s s' u.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        \\<And>u.\n           \\<pi>: (c, <<>|s>) \\<Rightarrow> u \\<Longrightarrow> u = s';\n        \\<pi>: (SCOPE c, s) \\<Rightarrow> u\\<rbrakk>\n       \\<Longrightarrow> u = <s|s'>\n 10. \\<And>b s \\<pi> c u.\n        \\<lbrakk>\\<not> bval b s;\n         \\<pi>: (WHILE b DO c, s) \\<Rightarrow> u\\<rbrakk>\n        \\<Longrightarrow> u = s\nA total of 12 subgoals...", "qed fastforce+"], ["", "subsection \\<open>Small-Step Semantics\\<close>"], ["", "text \\<open>\n  The small step semantics is defined by a step function on\n  a pair of command and state. Intuitively, the command is \n  the remaining part of the program that still has to be executed.\n  The step function is defined to stutter if the command is @{const SKIP}.\n  \n  Moreover, the step function is explicitly partial, returning @{const None} \n  on error, i.e., on an undefined procedure call.\n\n  Most steps are straightforward. \n  For a sequential composition, steps are performed on the first command, \n  until it has been reduced to @{const SKIP}, then the sequential composition is \n  reduced to the second command. \n\n  A while command is reduced by unfolding the loop once.\n    \n  A scope command is reduced to the inner command, followed by \n  an @{const Assign_Locals} command to restore the original local variables.\n\n  A procedure scope command is reduced by performing a step in the inner command, \n  with the new procedure environment, until the inner command has been reduced to @{const SKIP}.\n  Then, the whole command is reduced to @{const SKIP}. \n\\<close>"], ["", "fun small_step :: \"program \\<Rightarrow> com \\<times> state \\<rightharpoonup> com \\<times> state\" where\n  \"small_step \\<pi> (x[i]::=a,s) = Some (SKIP, s(x := (s x)(aval i s := aval a s)))\"\n| \"small_step \\<pi> (x[]::=y,s) = Some (SKIP, s(x := s y))\"  \n| \"small_step \\<pi> (CLEAR x[],s) = Some (SKIP, s(x := (\\<lambda>_. 0)))\"\n| \"small_step \\<pi> (Assign_Locals l,s) = Some (SKIP,<l|s>)\"\n| \"small_step \\<pi> (SKIP;;c,s) = Some (c,s)\"\n| \"small_step \\<pi> (c\\<^sub>1;;c\\<^sub>2,s) = (case small_step \\<pi> (c\\<^sub>1,s) of Some (c\\<^sub>1',s') \\<Rightarrow> Some (c\\<^sub>1';;c\\<^sub>2,s') | _ \\<Rightarrow> None)\"\n| \"small_step \\<pi> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,s) = Some (if bval b s then (c\\<^sub>1,s) else (c\\<^sub>2,s))\"\n| \"small_step \\<pi> (SCOPE c, s) = Some (c;;Assign_Locals s, <<>|s>)\"\n| \"small_step \\<pi> (WHILE b DO c,s) = Some (IF b THEN c;;WHILE b DO c ELSE SKIP, s)\"\n| \"small_step \\<pi> (PCall p, s) = (case \\<pi> p of Some c \\<Rightarrow> Some (c, s) | _ \\<Rightarrow> None)\"\n| \"small_step \\<pi> (PScope \\<pi>' SKIP, s) = Some (SKIP,s)\"\n| \"small_step \\<pi> (PScope \\<pi>' c, s) = (case small_step \\<pi>' (c,s) of Some (c',s') \\<Rightarrow> Some (PScope \\<pi>' c', s') | _ \\<Rightarrow> None)\"\n| \"small_step \\<pi> (SKIP,s) = Some (SKIP,s)\""], ["", "text \\<open>\n  We define the reflexive transitive closure of the step function.\n\\<close>"], ["", "inductive small_steps :: \"program \\<Rightarrow> com \\<times> state \\<Rightarrow> (com \\<times> state) option \\<Rightarrow> bool\" where\n  [simp]: \"small_steps \\<pi> cs (Some cs)\"\n| \"\\<lbrakk> small_step \\<pi> cs = None \\<rbrakk> \\<Longrightarrow> small_steps \\<pi> cs None\"\n| \"\\<lbrakk> small_step \\<pi> cs = Some cs1; small_steps \\<pi> cs1 cs2 \\<rbrakk> \\<Longrightarrow> small_steps \\<pi> cs cs2\""], ["", "lemma small_steps_append: \"small_steps \\<pi> cs\\<^sub>1 (Some cs\\<^sub>2) \\<Longrightarrow> small_steps \\<pi> cs\\<^sub>2 cs\\<^sub>3 \\<Longrightarrow> small_steps \\<pi> cs\\<^sub>1 cs\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>small_steps \\<pi> cs\\<^sub>1 (Some cs\\<^sub>2);\n     small_steps \\<pi> cs\\<^sub>2 cs\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> small_steps \\<pi> cs\\<^sub>1 cs\\<^sub>3", "apply (induction \\<pi> cs\\<^sub>1 \"Some cs\\<^sub>2\" arbitrary: cs\\<^sub>2 rule: small_steps.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<pi> cs.\n       small_steps \\<pi> cs cs\\<^sub>3 \\<Longrightarrow>\n       small_steps \\<pi> cs cs\\<^sub>3\n 2. \\<And>\\<pi> cs cs1 cs\\<^sub>2.\n       \\<lbrakk>small_step \\<pi> cs = Some cs1;\n        small_steps \\<pi> cs1 (Some cs\\<^sub>2);\n        small_steps \\<pi> cs\\<^sub>2 cs\\<^sub>3 \\<Longrightarrow>\n        small_steps \\<pi> cs1 cs\\<^sub>3;\n        small_steps \\<pi> cs\\<^sub>2 cs\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> cs cs\\<^sub>3", "apply (auto intro: small_steps.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Equivalence to Big-Step Semantics\\<close>"], ["", "text \\<open>We show that the small-step semantics yields a final \n  configuration if and only if the big-step semantics terminates with the respective state.\n  \n  Moreover, we show that the big-step semantics gets stuck if the small-step semantics \n  yields an error.\n  \\<close>"], ["", "lemma small_big_append: \"small_step \\<pi> cs\\<^sub>1 = Some cs\\<^sub>2 \\<Longrightarrow> \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3 \\<Longrightarrow> \\<pi>: cs\\<^sub>1 \\<Rightarrow> s\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>small_step \\<pi> cs\\<^sub>1 = Some cs\\<^sub>2;\n     \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> \\<pi>: cs\\<^sub>1 \\<Rightarrow> s\\<^sub>3", "apply (induction \\<pi> cs\\<^sub>1 arbitrary: cs\\<^sub>2 s\\<^sub>3 rule: small_step.induct)"], ["proof (prove)\ngoal (31 subgoals):\n 1. \\<And>\\<pi> x i a s cs\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>small_step \\<pi> (x[i] ::= a, s) = Some cs\\<^sub>2;\n        \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (x[i] ::= a, s) \\<Rightarrow> s\\<^sub>3\n 2. \\<And>\\<pi> x y s cs\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>small_step \\<pi> (x[] ::= y, s) = Some cs\\<^sub>2;\n        \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (x[] ::= y, s) \\<Rightarrow> s\\<^sub>3\n 3. \\<And>\\<pi> x s cs\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>small_step \\<pi> (CLEAR x[], s) = Some cs\\<^sub>2;\n        \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (CLEAR x[], s) \\<Rightarrow> s\\<^sub>3\n 4. \\<And>\\<pi> l s cs\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>small_step \\<pi> (Assign_Locals l, s) = Some cs\\<^sub>2;\n        \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (Assign_Locals l, s) \\<Rightarrow> s\\<^sub>3\n 5. \\<And>\\<pi> c s cs\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>small_step \\<pi> (SKIP;; c, s) = Some cs\\<^sub>2;\n        \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (SKIP;; c, s) \\<Rightarrow> s\\<^sub>3\n 6. \\<And>\\<pi> v va vb c\\<^sub>2 s cs\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<And>cs\\<^sub>2 s\\<^sub>3.\n                   \\<lbrakk>small_step \\<pi> (v[va] ::= vb, s) =\n                            Some cs\\<^sub>2;\n                    \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n                   \\<Longrightarrow> \\<pi>: (v[va] ::= vb,\n       s) \\<Rightarrow> s\\<^sub>3;\n        small_step \\<pi> (v[va] ::= vb;; c\\<^sub>2, s) = Some cs\\<^sub>2;\n        \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (v[va] ::= vb;; c\\<^sub>2,\n                                 s) \\<Rightarrow> s\\<^sub>3\n 7. \\<And>\\<pi> v va c\\<^sub>2 s cs\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<And>cs\\<^sub>2 s\\<^sub>3.\n                   \\<lbrakk>small_step \\<pi> (v[] ::= va, s) =\n                            Some cs\\<^sub>2;\n                    \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n                   \\<Longrightarrow> \\<pi>: (v[] ::= va,\n       s) \\<Rightarrow> s\\<^sub>3;\n        small_step \\<pi> (v[] ::= va;; c\\<^sub>2, s) = Some cs\\<^sub>2;\n        \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (v[] ::= va;; c\\<^sub>2,\n                                 s) \\<Rightarrow> s\\<^sub>3\n 8. \\<And>\\<pi> v c\\<^sub>2 s cs\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<And>cs\\<^sub>2 s\\<^sub>3.\n                   \\<lbrakk>small_step \\<pi> (CLEAR v[], s) =\n                            Some cs\\<^sub>2;\n                    \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n                   \\<Longrightarrow> \\<pi>: (CLEAR v[],\n       s) \\<Rightarrow> s\\<^sub>3;\n        small_step \\<pi> (CLEAR v[];; c\\<^sub>2, s) = Some cs\\<^sub>2;\n        \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (CLEAR v[];; c\\<^sub>2,\n                                 s) \\<Rightarrow> s\\<^sub>3\n 9. \\<And>\\<pi> v c\\<^sub>2 s cs\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<And>cs\\<^sub>2 s\\<^sub>3.\n                   \\<lbrakk>small_step \\<pi> (Assign_Locals v, s) =\n                            Some cs\\<^sub>2;\n                    \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n                   \\<Longrightarrow> \\<pi>: (Assign_Locals v,\n       s) \\<Rightarrow> s\\<^sub>3;\n        small_step \\<pi> (Assign_Locals v;; c\\<^sub>2, s) = Some cs\\<^sub>2;\n        \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (Assign_Locals v;; c\\<^sub>2,\n                                 s) \\<Rightarrow> s\\<^sub>3\n 10. \\<And>\\<pi> v va c\\<^sub>2 s cs\\<^sub>2 s\\<^sub>3.\n        \\<lbrakk>\\<And>cs\\<^sub>2 s\\<^sub>3.\n                    \\<lbrakk>small_step \\<pi> (v;; va, s) = Some cs\\<^sub>2;\n                     \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n                    \\<Longrightarrow> \\<pi>: (v;; va,\n        s) \\<Rightarrow> s\\<^sub>3;\n         small_step \\<pi> ((v;; va);; c\\<^sub>2, s) = Some cs\\<^sub>2;\n         \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n        \\<Longrightarrow> \\<pi>: ((v;; va);; c\\<^sub>2,\n                                  s) \\<Rightarrow> s\\<^sub>3\nA total of 31 subgoals...", "apply (auto split: option.splits if_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma smalls_big_append: \"small_steps \\<pi> cs\\<^sub>1 (Some cs\\<^sub>2) \\<Longrightarrow> \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3 \\<Longrightarrow> \\<pi>: cs\\<^sub>1 \\<Rightarrow> s\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>small_steps \\<pi> cs\\<^sub>1 (Some cs\\<^sub>2);\n     \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> \\<pi>: cs\\<^sub>1 \\<Rightarrow> s\\<^sub>3", "apply (induction \\<pi> cs\\<^sub>1 \"Some cs\\<^sub>2\" arbitrary: cs\\<^sub>2 rule: small_steps.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<pi> cs.\n       \\<pi>: cs \\<Rightarrow> s\\<^sub>3 \\<Longrightarrow>\n       \\<pi>: cs \\<Rightarrow> s\\<^sub>3\n 2. \\<And>\\<pi> cs cs1 cs\\<^sub>2.\n       \\<lbrakk>small_step \\<pi> cs = Some cs1;\n        small_steps \\<pi> cs1 (Some cs\\<^sub>2);\n        \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3 \\<Longrightarrow>\n        \\<pi>: cs1 \\<Rightarrow> s\\<^sub>3;\n        \\<pi>: cs\\<^sub>2 \\<Rightarrow> s\\<^sub>3\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: cs \\<Rightarrow> s\\<^sub>3", "apply (auto intro: small_big_append)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma small_imp_big:\n  assumes \"small_steps \\<pi> cs\\<^sub>1 (Some (SKIP,s\\<^sub>2))\" \n  shows \"\\<pi>: cs\\<^sub>1 \\<Rightarrow> s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>: cs\\<^sub>1 \\<Rightarrow> s\\<^sub>2", "using smalls_big_append[OF assms]"], ["proof (prove)\nusing this:\n  \\<pi>: (SKIP, s\\<^sub>2) \\<Rightarrow> ?s\\<^sub>3 \\<Longrightarrow>\n  \\<pi>: cs\\<^sub>1 \\<Rightarrow> ?s\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<pi>: cs\\<^sub>1 \\<Rightarrow> s\\<^sub>2", "by auto"], ["", "lemma small_steps_skip_term[simp]: \"small_steps \\<pi> (SKIP, s) cs' \\<longleftrightarrow> cs'=Some (SKIP,s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small_steps \\<pi> (SKIP, s) cs' = (cs' = Some (SKIP, s))", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. small_steps \\<pi> (SKIP, s) cs' \\<Longrightarrow> cs' = Some (SKIP, s)\n 2. cs' = Some (SKIP, s) \\<Longrightarrow> small_steps \\<pi> (SKIP, s) cs'", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. small_steps \\<pi> (SKIP, s) cs' \\<Longrightarrow> cs' = Some (SKIP, s)", "apply (induction \\<pi> \"(SKIP,s)\" cs' arbitrary: s rule: small_steps.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<pi> s. Some (SKIP, s) = Some (SKIP, s)\n 2. \\<And>\\<pi> s.\n       small_step \\<pi> (SKIP, s) = None \\<Longrightarrow>\n       None = Some (SKIP, s)\n 3. \\<And>\\<pi> cs1 cs2 s.\n       \\<lbrakk>small_step \\<pi> (SKIP, s) = Some cs1;\n        small_steps \\<pi> cs1 cs2;\n        \\<And>s.\n           cs1 = (SKIP, s) \\<Longrightarrow> cs2 = Some (SKIP, s)\\<rbrakk>\n       \\<Longrightarrow> cs2 = Some (SKIP, s)", "by (auto intro: small_steps.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs' = Some (SKIP, s) \\<Longrightarrow> small_steps \\<pi> (SKIP, s) cs'", "by (auto intro: small_steps.intros)"], ["", "lemma small_seq: \"\\<lbrakk>c\\<noteq>SKIP; small_step \\<pi> (c,s) = Some (c',s')\\<rbrakk> \\<Longrightarrow> small_step \\<pi> (c;;cx,s) = Some (c';;cx,s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<noteq> SKIP;\n     small_step \\<pi> (c, s) = Some (c', s')\\<rbrakk>\n    \\<Longrightarrow> small_step \\<pi> (c;; cx, s) = Some (c';; cx, s')", "apply (induction \\<pi> \"(c,s)\" arbitrary: c s c' s' rule: small_step.induct)"], ["proof (prove)\ngoal (31 subgoals):\n 1. \\<And>\\<pi> x i a s c' s'.\n       \\<lbrakk>x[i] ::= a \\<noteq> SKIP;\n        small_step \\<pi> (x[i] ::= a, s) = Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi> (x[i] ::= a;; cx, s) =\n                         Some (c';; cx, s')\n 2. \\<And>\\<pi> x y s c' s'.\n       \\<lbrakk>x[] ::= y \\<noteq> SKIP;\n        small_step \\<pi> (x[] ::= y, s) = Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi> (x[] ::= y;; cx, s) =\n                         Some (c';; cx, s')\n 3. \\<And>\\<pi> x s c' s'.\n       \\<lbrakk>CLEAR x[] \\<noteq> SKIP;\n        small_step \\<pi> (CLEAR x[], s) = Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi> (CLEAR x[];; cx, s) =\n                         Some (c';; cx, s')\n 4. \\<And>\\<pi> l s c' s'.\n       \\<lbrakk>Assign_Locals l \\<noteq> SKIP;\n        small_step \\<pi> (Assign_Locals l, s) = Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi> (Assign_Locals l;; cx, s) =\n                         Some (c';; cx, s')\n 5. \\<And>\\<pi> c s c' s'.\n       \\<lbrakk>SKIP;; c \\<noteq> SKIP;\n        small_step \\<pi> (SKIP;; c, s) = Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi> ((SKIP;; c);; cx, s) =\n                         Some (c';; cx, s')\n 6. \\<And>\\<pi> v va vb c\\<^sub>2 s c' s'.\n       \\<lbrakk>\\<And>c' s'.\n                   \\<lbrakk>v[va] ::= vb \\<noteq> SKIP;\n                    small_step \\<pi> (v[va] ::= vb, s) =\n                    Some (c', s')\\<rbrakk>\n                   \\<Longrightarrow> small_step \\<pi>\n(v[va] ::= vb;; cx, s) =\n                                     Some (c';; cx, s');\n        v[va] ::= vb;; c\\<^sub>2 \\<noteq> SKIP;\n        small_step \\<pi> (v[va] ::= vb;; c\\<^sub>2, s) =\n        Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi>\n                          ((v[va] ::= vb;; c\\<^sub>2);; cx, s) =\n                         Some (c';; cx, s')\n 7. \\<And>\\<pi> v va c\\<^sub>2 s c' s'.\n       \\<lbrakk>\\<And>c' s'.\n                   \\<lbrakk>v[] ::= va \\<noteq> SKIP;\n                    small_step \\<pi> (v[] ::= va, s) =\n                    Some (c', s')\\<rbrakk>\n                   \\<Longrightarrow> small_step \\<pi> (v[] ::= va;; cx, s) =\n                                     Some (c';; cx, s');\n        v[] ::= va;; c\\<^sub>2 \\<noteq> SKIP;\n        small_step \\<pi> (v[] ::= va;; c\\<^sub>2, s) =\n        Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi>\n                          ((v[] ::= va;; c\\<^sub>2);; cx, s) =\n                         Some (c';; cx, s')\n 8. \\<And>\\<pi> v c\\<^sub>2 s c' s'.\n       \\<lbrakk>\\<And>c' s'.\n                   \\<lbrakk>CLEAR v[] \\<noteq> SKIP;\n                    small_step \\<pi> (CLEAR v[], s) = Some (c', s')\\<rbrakk>\n                   \\<Longrightarrow> small_step \\<pi> (CLEAR v[];; cx, s) =\n                                     Some (c';; cx, s');\n        CLEAR v[];; c\\<^sub>2 \\<noteq> SKIP;\n        small_step \\<pi> (CLEAR v[];; c\\<^sub>2, s) = Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi>\n                          ((CLEAR v[];; c\\<^sub>2);; cx, s) =\n                         Some (c';; cx, s')\n 9. \\<And>\\<pi> v c\\<^sub>2 s c' s'.\n       \\<lbrakk>\\<And>c' s'.\n                   \\<lbrakk>Assign_Locals v \\<noteq> SKIP;\n                    small_step \\<pi> (Assign_Locals v, s) =\n                    Some (c', s')\\<rbrakk>\n                   \\<Longrightarrow> small_step \\<pi>\n(Assign_Locals v;; cx, s) =\n                                     Some (c';; cx, s');\n        Assign_Locals v;; c\\<^sub>2 \\<noteq> SKIP;\n        small_step \\<pi> (Assign_Locals v;; c\\<^sub>2, s) =\n        Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi>\n                          ((Assign_Locals v;; c\\<^sub>2);; cx, s) =\n                         Some (c';; cx, s')\n 10. \\<And>\\<pi> v va c\\<^sub>2 s c' s'.\n        \\<lbrakk>\\<And>c' s'.\n                    \\<lbrakk>v;; va \\<noteq> SKIP;\n                     small_step \\<pi> (v;; va, s) = Some (c', s')\\<rbrakk>\n                    \\<Longrightarrow> small_step \\<pi> ((v;; va);; cx, s) =\nSome (c';; cx, s');\n         (v;; va);; c\\<^sub>2 \\<noteq> SKIP;\n         small_step \\<pi> ((v;; va);; c\\<^sub>2, s) = Some (c', s')\\<rbrakk>\n        \\<Longrightarrow> small_step \\<pi>\n                           (((v;; va);; c\\<^sub>2);; cx, s) =\n                          Some (c';; cx, s')\nA total of 31 subgoals...", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma smalls_seq: \"\\<lbrakk>small_steps \\<pi> (c,s) (Some (c',s'))\\<rbrakk> \\<Longrightarrow> small_steps \\<pi> (c;;cx,s) (Some (c';;cx,s'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small_steps \\<pi> (c, s) (Some (c', s')) \\<Longrightarrow>\n    small_steps \\<pi> (c;; cx, s) (Some (c';; cx, s'))", "apply (induction \\<pi> \"(c,s)\" \"Some (c',s')\" arbitrary: c s c' s' rule: small_steps.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<pi> c s. small_steps \\<pi> (c;; cx, s) (Some (c;; cx, s))\n 2. \\<And>\\<pi> cs1 c s c' s'.\n       \\<lbrakk>small_step \\<pi> (c, s) = Some cs1;\n        small_steps \\<pi> cs1 (Some (c', s'));\n        \\<And>c s.\n           cs1 = (c, s) \\<Longrightarrow>\n           small_steps \\<pi> (c;; cx, s) (Some (c';; cx, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (c;; cx, s) (Some (c';; cx, s'))", "apply (auto dest: small_seq intro: small_steps.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<pi> a b c s c' s'.\n       \\<lbrakk>small_step \\<pi> (c, s) = Some (a, b);\n        small_steps \\<pi> (a, b) (Some (c', s'));\n        small_steps \\<pi> (a;; cx, b) (Some (c';; cx, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (c;; cx, s) (Some (c';; cx, s'))", "by (metis option.simps(1) prod.simps(1) small_seq small_step.simps(31) small_steps.intros(3))"], ["", "lemma small_pscope:  \n  \"\\<lbrakk>c\\<noteq>SKIP; small_step \\<pi>' (c,s) = Some (c',s')\\<rbrakk> \\<Longrightarrow> small_step \\<pi> (PScope \\<pi>' c,s) = Some (PScope \\<pi>' c',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<noteq> SKIP;\n     small_step \\<pi>' (c, s) = Some (c', s')\\<rbrakk>\n    \\<Longrightarrow> small_step \\<pi> (PScope \\<pi>' c, s) =\n                      Some (PScope \\<pi>' c', s')", "apply (induction \\<pi> \"(c,s)\" arbitrary: c s c' s' rule: small_step.induct)"], ["proof (prove)\ngoal (31 subgoals):\n 1. \\<And>\\<pi> x i a s c' s'.\n       \\<lbrakk>x[i] ::= a \\<noteq> SKIP;\n        small_step \\<pi>' (x[i] ::= a, s) = Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi> (PScope \\<pi>' (x[i] ::= a), s) =\n                         Some (PScope \\<pi>' c', s')\n 2. \\<And>\\<pi> x y s c' s'.\n       \\<lbrakk>x[] ::= y \\<noteq> SKIP;\n        small_step \\<pi>' (x[] ::= y, s) = Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi> (PScope \\<pi>' (x[] ::= y), s) =\n                         Some (PScope \\<pi>' c', s')\n 3. \\<And>\\<pi> x s c' s'.\n       \\<lbrakk>CLEAR x[] \\<noteq> SKIP;\n        small_step \\<pi>' (CLEAR x[], s) = Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi> (PScope \\<pi>' (CLEAR x[]), s) =\n                         Some (PScope \\<pi>' c', s')\n 4. \\<And>\\<pi> l s c' s'.\n       \\<lbrakk>Assign_Locals l \\<noteq> SKIP;\n        small_step \\<pi>' (Assign_Locals l, s) = Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi>\n                          (PScope \\<pi>' (Assign_Locals l), s) =\n                         Some (PScope \\<pi>' c', s')\n 5. \\<And>\\<pi> c s c' s'.\n       \\<lbrakk>SKIP;; c \\<noteq> SKIP;\n        small_step \\<pi>' (SKIP;; c, s) = Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi> (PScope \\<pi>' (SKIP;; c), s) =\n                         Some (PScope \\<pi>' c', s')\n 6. \\<And>\\<pi> v va vb c\\<^sub>2 s c' s'.\n       \\<lbrakk>\\<And>c' s'.\n                   \\<lbrakk>v[va] ::= vb \\<noteq> SKIP;\n                    small_step \\<pi>' (v[va] ::= vb, s) =\n                    Some (c', s')\\<rbrakk>\n                   \\<Longrightarrow> small_step \\<pi>\n(PScope \\<pi>' (v[va] ::= vb), s) =\n                                     Some (PScope \\<pi>' c', s');\n        v[va] ::= vb;; c\\<^sub>2 \\<noteq> SKIP;\n        small_step \\<pi>' (v[va] ::= vb;; c\\<^sub>2, s) =\n        Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi>\n                          (PScope \\<pi>' (v[va] ::= vb;; c\\<^sub>2), s) =\n                         Some (PScope \\<pi>' c', s')\n 7. \\<And>\\<pi> v va c\\<^sub>2 s c' s'.\n       \\<lbrakk>\\<And>c' s'.\n                   \\<lbrakk>v[] ::= va \\<noteq> SKIP;\n                    small_step \\<pi>' (v[] ::= va, s) =\n                    Some (c', s')\\<rbrakk>\n                   \\<Longrightarrow> small_step \\<pi>\n(PScope \\<pi>' (v[] ::= va), s) =\n                                     Some (PScope \\<pi>' c', s');\n        v[] ::= va;; c\\<^sub>2 \\<noteq> SKIP;\n        small_step \\<pi>' (v[] ::= va;; c\\<^sub>2, s) =\n        Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi>\n                          (PScope \\<pi>' (v[] ::= va;; c\\<^sub>2), s) =\n                         Some (PScope \\<pi>' c', s')\n 8. \\<And>\\<pi> v c\\<^sub>2 s c' s'.\n       \\<lbrakk>\\<And>c' s'.\n                   \\<lbrakk>CLEAR v[] \\<noteq> SKIP;\n                    small_step \\<pi>' (CLEAR v[], s) =\n                    Some (c', s')\\<rbrakk>\n                   \\<Longrightarrow> small_step \\<pi>\n(PScope \\<pi>' (CLEAR v[]), s) =\n                                     Some (PScope \\<pi>' c', s');\n        CLEAR v[];; c\\<^sub>2 \\<noteq> SKIP;\n        small_step \\<pi>' (CLEAR v[];; c\\<^sub>2, s) =\n        Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi>\n                          (PScope \\<pi>' (CLEAR v[];; c\\<^sub>2), s) =\n                         Some (PScope \\<pi>' c', s')\n 9. \\<And>\\<pi> v c\\<^sub>2 s c' s'.\n       \\<lbrakk>\\<And>c' s'.\n                   \\<lbrakk>Assign_Locals v \\<noteq> SKIP;\n                    small_step \\<pi>' (Assign_Locals v, s) =\n                    Some (c', s')\\<rbrakk>\n                   \\<Longrightarrow> small_step \\<pi>\n(PScope \\<pi>' (Assign_Locals v), s) =\n                                     Some (PScope \\<pi>' c', s');\n        Assign_Locals v;; c\\<^sub>2 \\<noteq> SKIP;\n        small_step \\<pi>' (Assign_Locals v;; c\\<^sub>2, s) =\n        Some (c', s')\\<rbrakk>\n       \\<Longrightarrow> small_step \\<pi>\n                          (PScope \\<pi>' (Assign_Locals v;; c\\<^sub>2), s) =\n                         Some (PScope \\<pi>' c', s')\n 10. \\<And>\\<pi> v va c\\<^sub>2 s c' s'.\n        \\<lbrakk>\\<And>c' s'.\n                    \\<lbrakk>v;; va \\<noteq> SKIP;\n                     small_step \\<pi>' (v;; va, s) = Some (c', s')\\<rbrakk>\n                    \\<Longrightarrow> small_step \\<pi>\n (PScope \\<pi>' (v;; va), s) =\nSome (PScope \\<pi>' c', s');\n         (v;; va);; c\\<^sub>2 \\<noteq> SKIP;\n         small_step \\<pi>' ((v;; va);; c\\<^sub>2, s) =\n         Some (c', s')\\<rbrakk>\n        \\<Longrightarrow> small_step \\<pi>\n                           (PScope \\<pi>' ((v;; va);; c\\<^sub>2), s) =\n                          Some (PScope \\<pi>' c', s')\nA total of 31 subgoals...", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma smalls_pscope:   \n  \"small_steps \\<pi>' (c, s) (Some (c', s')) \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s) (Some (PScope \\<pi>' c',s'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small_steps \\<pi>' (c, s) (Some (c', s')) \\<Longrightarrow>\n    small_steps \\<pi> (PScope \\<pi>' c, s) (Some (PScope \\<pi>' c', s'))", "apply (induction \\<pi>' \"(c,s)\" \"(Some (c', s'))\" arbitrary: c s rule: small_steps.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'.\n       small_steps \\<pi> (PScope \\<pi>' c', s')\n        (Some (PScope \\<pi>' c', s'))\n 2. \\<And>\\<pi>' cs1 c s.\n       \\<lbrakk>small_step \\<pi>' (c, s) = Some cs1;\n        small_steps \\<pi>' cs1 (Some (c', s'));\n        \\<And>c s.\n           cs1 = (c, s) \\<Longrightarrow>\n           small_steps \\<pi> (PScope \\<pi>' c, s)\n            (Some (PScope \\<pi>' c', s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (PScope \\<pi>' c', s'))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<pi>' a b c s.\n       \\<lbrakk>small_step \\<pi>' (c, s) = Some (a, b);\n        small_steps \\<pi>' (a, b) (Some (c', s'));\n        small_steps \\<pi> (PScope \\<pi>' a, b)\n         (Some (PScope \\<pi>' c', s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (PScope \\<pi>' c', s'))", "by (metis (no_types, hide_lams) option.inject prod.inject small_pscope small_steps.simps small_steps_append small_steps_skip_term)"], ["", "lemma big_imp_small:\n  assumes \"\\<pi>: cs \\<Rightarrow> t\"\n  shows \"small_steps \\<pi> cs (Some (SKIP,t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small_steps \\<pi> cs (Some (SKIP, t))", "using assms"], ["proof (prove)\nusing this:\n  \\<pi>: cs \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. small_steps \\<pi> cs (Some (SKIP, t))", "proof induction"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>\\<pi> s. small_steps \\<pi> (SKIP, s) (Some (SKIP, s))\n 2. \\<And>\\<pi> x i a s.\n       small_steps \\<pi> (x[i] ::= a, s)\n        (Some (SKIP, s(x := (s x)(aval i s := aval a s))))\n 3. \\<And>\\<pi> x y s.\n       small_steps \\<pi> (x[] ::= y, s) (Some (SKIP, s(x := s y)))\n 4. \\<And>\\<pi> x s.\n       small_steps \\<pi> (CLEAR x[], s) (Some (SKIP, s(x := \\<lambda>_. 0)))\n 5. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 9. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 10. \\<And>b s \\<pi> c.\n        \\<not> bval b s \\<Longrightarrow>\n        small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\nA total of 13 subgoals...", "case (Skip \\<pi> s)"], ["proof (state)\nthis:\n  \n\ngoal (13 subgoals):\n 1. \\<And>\\<pi> s. small_steps \\<pi> (SKIP, s) (Some (SKIP, s))\n 2. \\<And>\\<pi> x i a s.\n       small_steps \\<pi> (x[i] ::= a, s)\n        (Some (SKIP, s(x := (s x)(aval i s := aval a s))))\n 3. \\<And>\\<pi> x y s.\n       small_steps \\<pi> (x[] ::= y, s) (Some (SKIP, s(x := s y)))\n 4. \\<And>\\<pi> x s.\n       small_steps \\<pi> (CLEAR x[], s) (Some (SKIP, s(x := \\<lambda>_. 0)))\n 5. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 9. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 10. \\<And>b s \\<pi> c.\n        \\<not> bval b s \\<Longrightarrow>\n        small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\nA total of 13 subgoals...", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. small_steps \\<pi> (SKIP, s) (Some (SKIP, s))", "by (auto 0 4 intro: small_steps.intros)"], ["proof (state)\nthis:\n  small_steps \\<pi> (SKIP, s) (Some (SKIP, s))\n\ngoal (12 subgoals):\n 1. \\<And>\\<pi> x i a s.\n       small_steps \\<pi> (x[i] ::= a, s)\n        (Some (SKIP, s(x := (s x)(aval i s := aval a s))))\n 2. \\<And>\\<pi> x y s.\n       small_steps \\<pi> (x[] ::= y, s) (Some (SKIP, s(x := s y)))\n 3. \\<And>\\<pi> x s.\n       small_steps \\<pi> (CLEAR x[], s) (Some (SKIP, s(x := \\<lambda>_. 0)))\n 4. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 5. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 6. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 7. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 8. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 9. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 10. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n        \\<lbrakk>bval b s\\<^sub>1;\n         \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n         small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n         \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n         small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n          (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n        \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                           (Some (SKIP, s\\<^sub>3))\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>\\<pi> x i a s.\n       small_steps \\<pi> (x[i] ::= a, s)\n        (Some (SKIP, s(x := (s x)(aval i s := aval a s))))\n 2. \\<And>\\<pi> x y s.\n       small_steps \\<pi> (x[] ::= y, s) (Some (SKIP, s(x := s y)))\n 3. \\<And>\\<pi> x s.\n       small_steps \\<pi> (CLEAR x[], s) (Some (SKIP, s(x := \\<lambda>_. 0)))\n 4. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 5. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 6. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 7. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 8. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 9. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 10. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n        \\<lbrakk>bval b s\\<^sub>1;\n         \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n         small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n         \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n         small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n          (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n        \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                           (Some (SKIP, s\\<^sub>3))\nA total of 12 subgoals...", "case (AssignIdx \\<pi> x i a s)"], ["proof (state)\nthis:\n  \n\ngoal (12 subgoals):\n 1. \\<And>\\<pi> x i a s.\n       small_steps \\<pi> (x[i] ::= a, s)\n        (Some (SKIP, s(x := (s x)(aval i s := aval a s))))\n 2. \\<And>\\<pi> x y s.\n       small_steps \\<pi> (x[] ::= y, s) (Some (SKIP, s(x := s y)))\n 3. \\<And>\\<pi> x s.\n       small_steps \\<pi> (CLEAR x[], s) (Some (SKIP, s(x := \\<lambda>_. 0)))\n 4. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 5. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 6. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 7. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 8. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 9. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 10. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n        \\<lbrakk>bval b s\\<^sub>1;\n         \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n         small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n         \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n         small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n          (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n        \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                           (Some (SKIP, s\\<^sub>3))\nA total of 12 subgoals...", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. small_steps \\<pi> (x[i] ::= a, s)\n     (Some (SKIP, s(x := (s x)(aval i s := aval a s))))", "by (auto 0 4 intro: small_steps.intros)"], ["proof (state)\nthis:\n  small_steps \\<pi> (x[i] ::= a, s)\n   (Some (SKIP, s(x := (s x)(aval i s := aval a s))))\n\ngoal (11 subgoals):\n 1. \\<And>\\<pi> x y s.\n       small_steps \\<pi> (x[] ::= y, s) (Some (SKIP, s(x := s y)))\n 2. \\<And>\\<pi> x s.\n       small_steps \\<pi> (CLEAR x[], s) (Some (SKIP, s(x := \\<lambda>_. 0)))\n 3. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 4. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 5. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 6. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 7. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 8. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 9. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 10. \\<And>\\<pi> p c s t.\n        \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n         small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n        \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>\\<pi> x y s.\n       small_steps \\<pi> (x[] ::= y, s) (Some (SKIP, s(x := s y)))\n 2. \\<And>\\<pi> x s.\n       small_steps \\<pi> (CLEAR x[], s) (Some (SKIP, s(x := \\<lambda>_. 0)))\n 3. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 4. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 5. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 6. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 7. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 8. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 9. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 10. \\<And>\\<pi> p c s t.\n        \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n         small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n        \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\nA total of 11 subgoals...", "case (ArrayCpy \\<pi> x y s)"], ["proof (state)\nthis:\n  \n\ngoal (11 subgoals):\n 1. \\<And>\\<pi> x y s.\n       small_steps \\<pi> (x[] ::= y, s) (Some (SKIP, s(x := s y)))\n 2. \\<And>\\<pi> x s.\n       small_steps \\<pi> (CLEAR x[], s) (Some (SKIP, s(x := \\<lambda>_. 0)))\n 3. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 4. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 5. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 6. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 7. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 8. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 9. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 10. \\<And>\\<pi> p c s t.\n        \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n         small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n        \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\nA total of 11 subgoals...", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. small_steps \\<pi> (x[] ::= y, s) (Some (SKIP, s(x := s y)))", "by (auto 0 4 intro: small_steps.intros)"], ["proof (state)\nthis:\n  small_steps \\<pi> (x[] ::= y, s) (Some (SKIP, s(x := s y)))\n\ngoal (10 subgoals):\n 1. \\<And>\\<pi> x s.\n       small_steps \\<pi> (CLEAR x[], s) (Some (SKIP, s(x := \\<lambda>_. 0)))\n 2. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 3. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 4. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 5. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 6. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 7. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 8. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 9. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 10. \\<And>\\<pi>' c s t \\<pi>.\n        \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n         small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n        \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                           (Some (SKIP, t))", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>\\<pi> x s.\n       small_steps \\<pi> (CLEAR x[], s) (Some (SKIP, s(x := \\<lambda>_. 0)))\n 2. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 3. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 4. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 5. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 6. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 7. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 8. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 9. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 10. \\<And>\\<pi>' c s t \\<pi>.\n        \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n         small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n        \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                           (Some (SKIP, t))", "case (ArrayClear \\<pi> x s)"], ["proof (state)\nthis:\n  \n\ngoal (10 subgoals):\n 1. \\<And>\\<pi> x s.\n       small_steps \\<pi> (CLEAR x[], s) (Some (SKIP, s(x := \\<lambda>_. 0)))\n 2. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 3. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 4. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 5. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 6. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 7. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 8. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 9. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 10. \\<And>\\<pi>' c s t \\<pi>.\n        \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n         small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n        \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                           (Some (SKIP, t))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. small_steps \\<pi> (CLEAR x[], s) (Some (SKIP, s(x := \\<lambda>_. 0)))", "by (auto 0 4 intro: small_steps.intros)"], ["proof (state)\nthis:\n  small_steps \\<pi> (CLEAR x[], s) (Some (SKIP, s(x := \\<lambda>_. 0)))\n\ngoal (9 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 3. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 4. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 5. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 6. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 7. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 8. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 9. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 3. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 4. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 5. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 6. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 7. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 8. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 9. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "case (Seq \\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3)"], ["proof (state)\nthis:\n  \\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2\n  \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3\n  small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2))\n  small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2) (Some (SKIP, s\\<^sub>3))\n\ngoal (9 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 3. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 4. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 5. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 6. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 7. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 8. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 9. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "then"], ["proof (chain)\npicking this:\n  \\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2\n  \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3\n  small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2))\n  small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2) (Some (SKIP, s\\<^sub>3))", "show ?case"], ["proof (prove)\nusing this:\n  \\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2\n  \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3\n  small_steps \\<pi> (c\\<^sub>1, s\\<^sub>1) (Some (SKIP, s\\<^sub>2))\n  small_steps \\<pi> (c\\<^sub>2, s\\<^sub>2) (Some (SKIP, s\\<^sub>3))\n\ngoal (1 subgoal):\n 1. small_steps \\<pi> (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n     (Some (SKIP, s\\<^sub>3))", "by (meson small_step.simps(5) small_steps.intros(3) small_steps_append smalls_seq)"], ["proof (state)\nthis:\n  small_steps \\<pi> (c\\<^sub>1;; c\\<^sub>2, s\\<^sub>1)\n   (Some (SKIP, s\\<^sub>3))\n\ngoal (8 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 3. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 4. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 5. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 6. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 7. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 8. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 3. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 4. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 5. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 6. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 7. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 8. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "case (IfTrue b s \\<pi> c\\<^sub>1 t c\\<^sub>2)"], ["proof (state)\nthis:\n  bval b s\n  \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t\n  small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\n\ngoal (8 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 3. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 4. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 5. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 6. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 7. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 8. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "then"], ["proof (chain)\npicking this:\n  bval b s\n  \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t\n  small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))", "show ?case"], ["proof (prove)\nusing this:\n  bval b s\n  \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t\n  small_steps \\<pi> (c\\<^sub>1, s) (Some (SKIP, t))\n\ngoal (1 subgoal):\n 1. small_steps \\<pi> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n     (Some (SKIP, t))", "by (auto 0 4 intro: small_steps.intros)"], ["proof (state)\nthis:\n  small_steps \\<pi> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s) (Some (SKIP, t))\n\ngoal (7 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 3. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 4. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 5. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 6. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 7. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 3. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 4. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 5. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 6. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 7. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "case (IfFalse b s \\<pi> c\\<^sub>2 t c\\<^sub>1)"], ["proof (state)\nthis:\n  \\<not> bval b s\n  \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t\n  small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\n\ngoal (7 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi>\n                          (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n                          (Some (SKIP, t))\n 3. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 4. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 5. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 6. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 7. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "then"], ["proof (chain)\npicking this:\n  \\<not> bval b s\n  \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t\n  small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> bval b s\n  \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t\n  small_steps \\<pi> (c\\<^sub>2, s) (Some (SKIP, t))\n\ngoal (1 subgoal):\n 1. small_steps \\<pi> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s)\n     (Some (SKIP, t))", "by (auto 0 4 intro: small_steps.intros)"], ["proof (state)\nthis:\n  small_steps \\<pi> (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2, s) (Some (SKIP, t))\n\ngoal (6 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 3. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 4. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 5. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 6. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 3. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 4. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 5. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 6. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "case (Scope \\<pi> c s s')"], ["proof (state)\nthis:\n  \\<pi>: (c, <<>|s>) \\<Rightarrow> s'\n  small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\n\ngoal (6 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (SCOPE c, s)\n                          (Some (SKIP, <s|s'>))\n 3. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 4. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 5. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 6. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "then"], ["proof (chain)\npicking this:\n  \\<pi>: (c, <<>|s>) \\<Rightarrow> s'\n  small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))", "show ?case"], ["proof (prove)\nusing this:\n  \\<pi>: (c, <<>|s>) \\<Rightarrow> s'\n  small_steps \\<pi> (c, <<>|s>) (Some (SKIP, s'))\n\ngoal (1 subgoal):\n 1. small_steps \\<pi> (SCOPE c, s) (Some (SKIP, <s|s'>))", "by (meson small_step.simps(17) small_step.simps(4) small_step.simps(5) small_steps.intros(1) small_steps.intros(3) small_steps_append smalls_seq)"], ["proof (state)\nthis:\n  small_steps \\<pi> (SCOPE c, s) (Some (SKIP, <s|s'>))\n\ngoal (5 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 3. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 4. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 5. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 3. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 4. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 5. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "case (WhileFalse b s \\<pi> c)"], ["proof (state)\nthis:\n  \\<not> bval b s\n\ngoal (5 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow>\n       small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n 3. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 4. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 5. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "then"], ["proof (chain)\npicking this:\n  \\<not> bval b s", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))", "by (auto 0 4 intro: small_steps.intros)"], ["proof (state)\nthis:\n  small_steps \\<pi> (WHILE b DO c, s) (Some (SKIP, s))\n\ngoal (4 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 3. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 4. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 3. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 4. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "case (WhileTrue b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3)"], ["proof (state)\nthis:\n  bval b s\\<^sub>1\n  \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2\n  \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3\n  small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2))\n  small_steps \\<pi> (WHILE b DO c, s\\<^sub>2) (Some (SKIP, s\\<^sub>3))\n\ngoal (4 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n         (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                          (Some (SKIP, s\\<^sub>3))\n 3. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 4. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "then"], ["proof (chain)\npicking this:\n  bval b s\\<^sub>1\n  \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2\n  \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3\n  small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2))\n  small_steps \\<pi> (WHILE b DO c, s\\<^sub>2) (Some (SKIP, s\\<^sub>3))", "show ?case"], ["proof (prove)\nusing this:\n  bval b s\\<^sub>1\n  \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2\n  \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3\n  small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2))\n  small_steps \\<pi> (WHILE b DO c, s\\<^sub>2) (Some (SKIP, s\\<^sub>3))\n\ngoal (1 subgoal):\n 1. small_steps \\<pi> (WHILE b DO c, s\\<^sub>1) (Some (SKIP, s\\<^sub>3))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>bval b s\\<^sub>1;\n     \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n     \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n     small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n     small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n      (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n    \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                       (Some (SKIP, s\\<^sub>3))", "have \"\\<forall>ca p. (small_steps \\<pi> p (Some (SKIP, s\\<^sub>3)) \\<or> Some (ca, s\\<^sub>2) \\<noteq> Some (WHILE b DO c, s\\<^sub>2)) \\<or> small_step \\<pi> p \\<noteq> Some (c;; ca, s\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ca p.\n       (small_steps \\<pi> p (Some (SKIP, s\\<^sub>3)) \\<or>\n        Some (ca, s\\<^sub>2) \\<noteq> Some (WHILE b DO c, s\\<^sub>2)) \\<or>\n       small_step \\<pi> p \\<noteq> Some (c;; ca, s\\<^sub>1)", "by (metis (no_types) WhileTrue.IH(1) WhileTrue.IH(2) small_step.simps(5) small_steps.intros(3) small_steps_append smalls_seq)"], ["proof (state)\nthis:\n  \\<forall>ca p.\n     (small_steps \\<pi> p (Some (SKIP, s\\<^sub>3)) \\<or>\n      Some (ca, s\\<^sub>2) \\<noteq> Some (WHILE b DO c, s\\<^sub>2)) \\<or>\n     small_step \\<pi> p \\<noteq> Some (c;; ca, s\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>bval b s\\<^sub>1;\n     \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n     \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n     small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n     small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n      (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n    \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                       (Some (SKIP, s\\<^sub>3))", "then"], ["proof (chain)\npicking this:\n  \\<forall>ca p.\n     (small_steps \\<pi> p (Some (SKIP, s\\<^sub>3)) \\<or>\n      Some (ca, s\\<^sub>2) \\<noteq> Some (WHILE b DO c, s\\<^sub>2)) \\<or>\n     small_step \\<pi> p \\<noteq> Some (c;; ca, s\\<^sub>1)", "have \"\\<forall>ca cb cc. (small_steps \\<pi> (IF b THEN cc ELSE ca, s\\<^sub>1) (Some (SKIP, s\\<^sub>3)) \\<or> Some (cb, s\\<^sub>2) \\<noteq> Some (WHILE b DO c, s\\<^sub>2)) \\<or> Some (cc, s\\<^sub>1) \\<noteq> Some (c;; cb, s\\<^sub>1)\""], ["proof (prove)\nusing this:\n  \\<forall>ca p.\n     (small_steps \\<pi> p (Some (SKIP, s\\<^sub>3)) \\<or>\n      Some (ca, s\\<^sub>2) \\<noteq> Some (WHILE b DO c, s\\<^sub>2)) \\<or>\n     small_step \\<pi> p \\<noteq> Some (c;; ca, s\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<forall>ca cb cc.\n       (small_steps \\<pi> (IF b THEN cc ELSE ca, s\\<^sub>1)\n         (Some (SKIP, s\\<^sub>3)) \\<or>\n        Some (cb, s\\<^sub>2) \\<noteq> Some (WHILE b DO c, s\\<^sub>2)) \\<or>\n       Some (cc, s\\<^sub>1) \\<noteq> Some (c;; cb, s\\<^sub>1)", "using WhileTrue.hyps(1)"], ["proof (prove)\nusing this:\n  \\<forall>ca p.\n     (small_steps \\<pi> p (Some (SKIP, s\\<^sub>3)) \\<or>\n      Some (ca, s\\<^sub>2) \\<noteq> Some (WHILE b DO c, s\\<^sub>2)) \\<or>\n     small_step \\<pi> p \\<noteq> Some (c;; ca, s\\<^sub>1)\n  bval b s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<forall>ca cb cc.\n       (small_steps \\<pi> (IF b THEN cc ELSE ca, s\\<^sub>1)\n         (Some (SKIP, s\\<^sub>3)) \\<or>\n        Some (cb, s\\<^sub>2) \\<noteq> Some (WHILE b DO c, s\\<^sub>2)) \\<or>\n       Some (cc, s\\<^sub>1) \\<noteq> Some (c;; cb, s\\<^sub>1)", "by force"], ["proof (state)\nthis:\n  \\<forall>ca cb cc.\n     (small_steps \\<pi> (IF b THEN cc ELSE ca, s\\<^sub>1)\n       (Some (SKIP, s\\<^sub>3)) \\<or>\n      Some (cb, s\\<^sub>2) \\<noteq> Some (WHILE b DO c, s\\<^sub>2)) \\<or>\n     Some (cc, s\\<^sub>1) \\<noteq> Some (c;; cb, s\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>bval b s\\<^sub>1;\n     \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n     \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n     small_steps \\<pi> (c, s\\<^sub>1) (Some (SKIP, s\\<^sub>2));\n     small_steps \\<pi> (WHILE b DO c, s\\<^sub>2)\n      (Some (SKIP, s\\<^sub>3))\\<rbrakk>\n    \\<Longrightarrow> small_steps \\<pi> (WHILE b DO c, s\\<^sub>1)\n                       (Some (SKIP, s\\<^sub>3))", "then"], ["proof (chain)\npicking this:\n  \\<forall>ca cb cc.\n     (small_steps \\<pi> (IF b THEN cc ELSE ca, s\\<^sub>1)\n       (Some (SKIP, s\\<^sub>3)) \\<or>\n      Some (cb, s\\<^sub>2) \\<noteq> Some (WHILE b DO c, s\\<^sub>2)) \\<or>\n     Some (cc, s\\<^sub>1) \\<noteq> Some (c;; cb, s\\<^sub>1)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>ca cb cc.\n     (small_steps \\<pi> (IF b THEN cc ELSE ca, s\\<^sub>1)\n       (Some (SKIP, s\\<^sub>3)) \\<or>\n      Some (cb, s\\<^sub>2) \\<noteq> Some (WHILE b DO c, s\\<^sub>2)) \\<or>\n     Some (cc, s\\<^sub>1) \\<noteq> Some (c;; cb, s\\<^sub>1)\n\ngoal (1 subgoal):\n 1. small_steps \\<pi> (WHILE b DO c, s\\<^sub>1) (Some (SKIP, s\\<^sub>3))", "using small_step.simps(18) small_steps.intros(3)"], ["proof (prove)\nusing this:\n  \\<forall>ca cb cc.\n     (small_steps \\<pi> (IF b THEN cc ELSE ca, s\\<^sub>1)\n       (Some (SKIP, s\\<^sub>3)) \\<or>\n      Some (cb, s\\<^sub>2) \\<noteq> Some (WHILE b DO c, s\\<^sub>2)) \\<or>\n     Some (cc, s\\<^sub>1) \\<noteq> Some (c;; cb, s\\<^sub>1)\n  small_step ?\\<pi> (WHILE ?b DO ?c, ?s) =\n  Some (IF ?b THEN ?c;; WHILE ?b DO ?c ELSE SKIP, ?s)\n  \\<lbrakk>small_step ?\\<pi> ?cs = Some ?cs1.0;\n   small_steps ?\\<pi> ?cs1.0 ?cs2.0\\<rbrakk>\n  \\<Longrightarrow> small_steps ?\\<pi> ?cs ?cs2.0\n\ngoal (1 subgoal):\n 1. small_steps \\<pi> (WHILE b DO c, s\\<^sub>1) (Some (SKIP, s\\<^sub>3))", "by blast"], ["proof (state)\nthis:\n  small_steps \\<pi> (WHILE b DO c, s\\<^sub>1) (Some (SKIP, s\\<^sub>3))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  small_steps \\<pi> (WHILE b DO c, s\\<^sub>1) (Some (SKIP, s\\<^sub>3))\n\ngoal (3 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 3. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 3. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "case (PCall \\<pi> p c s t)"], ["proof (state)\nthis:\n  \\<pi> p = Some c\n  \\<pi>: (c, s) \\<Rightarrow> t\n  small_steps \\<pi> (c, s) (Some (SKIP, t))\n\ngoal (3 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>\\<pi> p c s t.\n       \\<lbrakk>\\<pi> p = Some c; \\<pi>: (c, s) \\<Rightarrow> t;\n        small_steps \\<pi> (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n 3. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "then"], ["proof (chain)\npicking this:\n  \\<pi> p = Some c\n  \\<pi>: (c, s) \\<Rightarrow> t\n  small_steps \\<pi> (c, s) (Some (SKIP, t))", "show ?case"], ["proof (prove)\nusing this:\n  \\<pi> p = Some c\n  \\<pi>: (c, s) \\<Rightarrow> t\n  small_steps \\<pi> (c, s) (Some (SKIP, t))\n\ngoal (1 subgoal):\n 1. small_steps \\<pi> (PCall p, s) (Some (SKIP, t))", "by (auto 0 4 intro: small_steps.intros)"], ["proof (state)\nthis:\n  small_steps \\<pi> (PCall p, s) (Some (SKIP, t))\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "case (PScope \\<pi>' c s t \\<pi>)"], ["proof (state)\nthis:\n  \\<pi>': (c, s) \\<Rightarrow> t\n  small_steps \\<pi>' (c, s) (Some (SKIP, t))\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n 2. \\<And>\\<pi>' c s t \\<pi>.\n       \\<lbrakk>\\<pi>': (c, s) \\<Rightarrow> t;\n        small_steps \\<pi>' (c, s) (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> small_steps \\<pi> (PScope \\<pi>' c, s)\n                          (Some (SKIP, t))", "then"], ["proof (chain)\npicking this:\n  \\<pi>': (c, s) \\<Rightarrow> t\n  small_steps \\<pi>' (c, s) (Some (SKIP, t))", "show ?case"], ["proof (prove)\nusing this:\n  \\<pi>': (c, s) \\<Rightarrow> t\n  small_steps \\<pi>' (c, s) (Some (SKIP, t))\n\ngoal (1 subgoal):\n 1. small_steps \\<pi> (PScope \\<pi>' c, s) (Some (SKIP, t))", "by (meson small_step.simps(20) small_steps.simps small_steps_append smalls_pscope)"], ["proof (state)\nthis:\n  small_steps \\<pi> (PScope \\<pi>' c, s) (Some (SKIP, t))\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))", "case (Assign_Locals \\<pi> l s)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> l s.\n       small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))", "by (auto 0 4 intro: small_steps.intros)"], ["proof (state)\nthis:\n  small_steps \\<pi> (Assign_Locals l, s) (Some (SKIP, <l|s>))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The big-step semantics yields a state \\<open>t\\<close>, iff and only iff there is a transition \n  of the small-step semantics to \\<open>(SKIP,t).\\<close>\n\\<close>"], ["", "theorem big_eq_small: \"\\<pi>: cs\\<Rightarrow>t \\<longleftrightarrow> small_steps \\<pi> cs (Some (SKIP,t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>: cs \\<Rightarrow> t = small_steps \\<pi> cs (Some (SKIP, t))", "using big_imp_small small_imp_big"], ["proof (prove)\nusing this:\n  ?\\<pi>: ?cs \\<Rightarrow> ?t \\<Longrightarrow>\n  small_steps ?\\<pi> ?cs (Some (SKIP, ?t))\n  small_steps ?\\<pi> ?cs\\<^sub>1 (Some (SKIP, ?s\\<^sub>2)) \\<Longrightarrow>\n  ?\\<pi>: ?cs\\<^sub>1 \\<Rightarrow> ?s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<pi>: cs \\<Rightarrow> t = small_steps \\<pi> cs (Some (SKIP, t))", "by blast"], ["", "lemma small_steps_determ: \n  assumes \"small_steps \\<pi> cs None\"  \n  shows \"\\<not>small_steps \\<pi> cs (Some (SKIP, t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> small_steps \\<pi> cs (Some (SKIP, t))", "using assms"], ["proof (prove)\nusing this:\n  small_steps \\<pi> cs None\n\ngoal (1 subgoal):\n 1. \\<not> small_steps \\<pi> cs (Some (SKIP, t))", "apply (induction \\<pi> cs \"None::(com\\<times>state) option\" arbitrary: t rule: small_steps.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<pi> cs t.\n       small_step \\<pi> cs = None \\<Longrightarrow>\n       \\<not> small_steps \\<pi> cs (Some (SKIP, t))\n 2. \\<And>\\<pi> cs cs1 t.\n       \\<lbrakk>small_step \\<pi> cs = Some cs1; small_steps \\<pi> cs1 None;\n        \\<And>t. \\<not> small_steps \\<pi> cs1 (Some (SKIP, t))\\<rbrakk>\n       \\<Longrightarrow> \\<not> small_steps \\<pi> cs (Some (SKIP, t))", "apply (auto elim: small_steps.cases)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>If the small-step semantics reaches a failure state, the big-step semantics gets stuck.\\<close>"], ["", "corollary small_imp_big_fail: \n  assumes \"small_steps \\<pi> cs None\"\n  shows \"\\<nexists>t. \\<pi>: cs \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>t. \\<pi>: cs \\<Rightarrow> t", "using assms"], ["proof (prove)\nusing this:\n  small_steps \\<pi> cs None\n\ngoal (1 subgoal):\n 1. \\<nexists>t. \\<pi>: cs \\<Rightarrow> t", "by (auto simp: big_eq_small small_steps_determ)"], ["", "subsection \\<open>Weakest Precondition\\<close>"], ["", "text \\<open>The following definitions are made wrt.\\ a fixed program \\<open>\\<pi>\\<close>, which becomes the first\n  parameter of the defined constants when the context is left.\\<close>"], ["", "context\n  fixes \\<pi> :: program\nbegin"], ["", "text \\<open>Weakest precondition: \n    \\<open>c\\<close> terminates with a state that satisfies \\<open>Q\\<close>, when started from \\<open>s\\<close>.\\<close>"], ["", "definition \"wp c Q s \\<equiv> \\<exists>t. \\<pi>: (c,s) \\<Rightarrow> t \\<and> Q t\"\n    \\<comment> \\<open>Note that this definition exploits that the semantics is deterministic! \n      In general, we must ensure absence of infinite executions\\<close>"], ["", "text \\<open>Weakest liberal precondition: \n    If \\<open>c\\<close> terminates when started from \\<open>s\\<close>, the new state satisfies \\<open>Q\\<close>.\\<close>"], ["", "definition \"wlp c Q s \\<equiv> \\<forall>t. \\<pi>:(c,s) \\<Rightarrow> t \\<longrightarrow> Q t\""], ["", "subsubsection \\<open>Basic Properties\\<close>"], ["", "context \n    notes [abs_def,simp] = wp_def wlp_def\n  begin"], ["", "lemma wp_imp_wlp: \"wp c Q s \\<Longrightarrow> wlp c Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wp c Q s \\<Longrightarrow> local.wlp c Q s", "using big_step_determ"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<pi>: (?c, ?s) \\<Rightarrow> ?t;\n   ?\\<pi>: (?c, ?s) \\<Rightarrow> ?u\\<rbrakk>\n  \\<Longrightarrow> ?u = ?t\n\ngoal (1 subgoal):\n 1. local.wp c Q s \\<Longrightarrow> local.wlp c Q s", "by force"], ["", "lemma wlp_and_term_imp_wp: \"wlp c Q s \\<and> \\<pi>:(c,s) \\<Rightarrow> t \\<Longrightarrow> wp c Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wlp c Q s \\<and> \\<pi>: (c, s) \\<Rightarrow> t \\<Longrightarrow>\n    local.wp c Q s", "by auto"], ["", "lemma wp_equiv: \"c \\<sim> c' \\<Longrightarrow> wp c = wp c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<sim> c' \\<Longrightarrow> local.wp c = local.wp c'", "by auto"], ["", "lemma wp_conseq: \"wp c P s \\<Longrightarrow> \\<lbrakk>\\<And>s. P s \\<Longrightarrow> Q s\\<rbrakk> \\<Longrightarrow> wp c Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.wp c P s; \\<And>s. P s \\<Longrightarrow> Q s\\<rbrakk>\n    \\<Longrightarrow> local.wp c Q s", "by auto"], ["", "lemma wlp_equiv: \"c \\<sim> c' \\<Longrightarrow> wlp c = wlp c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<sim> c' \\<Longrightarrow> local.wlp c = local.wlp c'", "by auto"], ["", "lemma wlp_conseq: \"wlp c P s \\<Longrightarrow> \\<lbrakk>\\<And>s. P s \\<Longrightarrow> Q s\\<rbrakk> \\<Longrightarrow> wlp c Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.wlp c P s; \\<And>s. P s \\<Longrightarrow> Q s\\<rbrakk>\n    \\<Longrightarrow> local.wlp c Q s", "by auto"], ["", "subsubsection \\<open>Unfold Rules\\<close>"], ["", "lemma wp_skip_eq: \"wp SKIP Q s = Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wp SKIP Q s = Q s", "by auto"], ["", "lemma wp_assign_idx_eq: \"wp (x[i]::=a) Q s = Q (s(x:=(s x)(aval i s := aval a s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wp (x[i] ::= a) Q s = Q (s(x := (s x)(aval i s := aval a s)))", "by auto"], ["", "lemma wp_arraycpy_eq: \"wp (x[]::=a) Q s = Q (s(x:=s a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wp (x[] ::= a) Q s = Q (s(x := s a))", "by auto"], ["", "lemma wp_arrayinit_eq: \"wp (CLEAR x[]) Q s = Q (s(x:=(\\<lambda>_. 0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wp (CLEAR x[]) Q s = Q (s(x := \\<lambda>_. 0))", "by auto"], ["", "lemma wp_assign_locals_eq: \"wp (Assign_Locals l) Q s = Q <l|s>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wp (Assign_Locals l) Q s = Q <l|s>", "by auto"], ["", "lemma wp_seq_eq: \"wp (c\\<^sub>1;;c\\<^sub>2) Q s = wp c\\<^sub>1 (wp c\\<^sub>2 Q) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wp (c\\<^sub>1;; c\\<^sub>2) Q s =\n    local.wp c\\<^sub>1 (local.wp c\\<^sub>2 Q) s", "by auto"], ["", "lemma wp_if_eq: \"wp (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) Q s \n      = (if bval b s then wp c\\<^sub>1 Q s else wp c\\<^sub>2 Q s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wp (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) Q s =\n    (if bval b s then local.wp c\\<^sub>1 Q s else local.wp c\\<^sub>2 Q s)", "by auto"], ["", "lemma wp_scope_eq: \"wp (SCOPE c) Q s = wp c (\\<lambda>s'. Q <s|s'>) <<>|s>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wp (SCOPE c) Q s = local.wp c (\\<lambda>s'. Q <s|s'>) <<>|s>", "by auto"], ["", "lemma wp_pcall_eq: \"\\<pi> p = Some c \\<Longrightarrow> wp (PCall p) Q s = wp c Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> p = Some c \\<Longrightarrow>\n    local.wp (PCall p) Q s = local.wp c Q s", "by auto"], ["", "lemmas wp_eq = wp_skip_eq wp_assign_idx_eq wp_arraycpy_eq wp_arrayinit_eq \n      wp_assign_locals_eq wp_seq_eq wp_scope_eq"], ["", "lemmas wp_eq' = wp_eq wp_if_eq"], ["", "lemma wlp_skip_eq: \"wlp SKIP Q s = Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wlp SKIP Q s = Q s", "by auto"], ["", "lemma wlp_assign_idx_eq: \"wlp (x[i]::=a) Q s = Q (s(x:=(s x)(aval i s := aval a s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wlp (x[i] ::= a) Q s = Q (s(x := (s x)(aval i s := aval a s)))", "by auto"], ["", "lemma wlp_arraycpy_eq: \"wlp (x[]::=a) Q s = Q (s(x:=s a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wlp (x[] ::= a) Q s = Q (s(x := s a))", "by auto"], ["", "lemma wlp_arrayinit_eq: \"wlp (CLEAR x[]) Q s = Q (s(x:=(\\<lambda>_. 0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wlp (CLEAR x[]) Q s = Q (s(x := \\<lambda>_. 0))", "by auto"], ["", "lemma wlp_assign_locals_eq: \"wlp (Assign_Locals l) Q s = Q <l|s>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wlp (Assign_Locals l) Q s = Q <l|s>", "by auto"], ["", "lemma wlp_seq_eq: \"wlp (c\\<^sub>1;;c\\<^sub>2) Q s = wlp c\\<^sub>1 (wlp c\\<^sub>2 Q) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wlp (c\\<^sub>1;; c\\<^sub>2) Q s =\n    local.wlp c\\<^sub>1 (local.wlp c\\<^sub>2 Q) s", "by auto"], ["", "lemma wlp_if_eq: \"wlp (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) Q s \n      = (if bval b s then wlp c\\<^sub>1 Q s else wlp c\\<^sub>2 Q s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wlp (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) Q s =\n    (if bval b s then local.wlp c\\<^sub>1 Q s else local.wlp c\\<^sub>2 Q s)", "by auto"], ["", "lemma wlp_scope_eq: \"wlp (SCOPE c) Q s = wlp c (\\<lambda>s'. Q <s|s'>) <<>|s>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wlp (SCOPE c) Q s = local.wlp c (\\<lambda>s'. Q <s|s'>) <<>|s>", "by auto"], ["", "lemma wlp_pcall_eq: \"\\<pi> p = Some c \\<Longrightarrow> wlp (PCall p) Q s = wlp c Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> p = Some c \\<Longrightarrow>\n    local.wlp (PCall p) Q s = local.wlp c Q s", "by auto"], ["", "lemmas wlp_eq = wlp_skip_eq wlp_assign_idx_eq wlp_arraycpy_eq wlp_arrayinit_eq \n      wlp_assign_locals_eq wlp_seq_eq wlp_scope_eq"], ["", "lemmas wlp_eq' = wlp_eq wlp_if_eq"], ["", "end"], ["", "lemma wlp_while_unfold: \"wlp (WHILE b DO c) Q s = (if bval b s then wlp c (wlp (WHILE b DO c) Q) s else Q s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wlp (WHILE b DO c) Q s =\n    (if bval b s then local.wlp c (local.wlp (WHILE b DO c) Q) s else Q s)", "apply (subst wlp_equiv[OF while_unfold])"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wlp (IF b THEN c;; WHILE b DO c ELSE SKIP) Q s =\n    (if bval b s then local.wlp c (local.wlp (WHILE b DO c) Q) s else Q s)", "apply (simp add: wlp_eq')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma wp_while_unfold: \"wp (WHILE b DO c) Q s = (if bval b s then wp c (wp (WHILE b DO c) Q) s else Q s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wp (WHILE b DO c) Q s =\n    (if bval b s then local.wp c (local.wp (WHILE b DO c) Q) s else Q s)", "apply (subst wp_equiv[OF while_unfold])"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wp (IF b THEN c;; WHILE b DO c ELSE SKIP) Q s =\n    (if bval b s then local.wp c (local.wp (WHILE b DO c) Q) s else Q s)", "apply (simp add: wp_eq')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end \\<comment> \\<open>Context fixing program\\<close>"], ["", "text \\<open>Unfold rules for procedure scope\\<close>"], ["", "lemma wp_pscope_eq: \"wp \\<pi> (PScope \\<pi>' c) Q s = wp \\<pi>' (c) Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp \\<pi> (PScope \\<pi>' c) Q s = wp \\<pi>' c Q s", "unfolding wp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>t. \\<pi>: (PScope \\<pi>' c, s) \\<Rightarrow> t \\<and> Q t) =\n    (\\<exists>t. \\<pi>': (c, s) \\<Rightarrow> t \\<and> Q t)", "by auto"], ["", "lemma wlp_pscope_eq: \"wlp \\<pi> (PScope \\<pi>' c) Q s = wlp \\<pi>' (c) Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp \\<pi> (PScope \\<pi>' c) Q s = wlp \\<pi>' c Q s", "unfolding wlp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>t.\n        \\<pi>: (PScope \\<pi>' c, s) \\<Rightarrow> t \\<longrightarrow> Q t) =\n    (\\<forall>t. \\<pi>': (c, s) \\<Rightarrow> t \\<longrightarrow> Q t)", "by auto"], ["", "subsubsection \\<open>Weakest precondition and Program Equivalence\\<close>"], ["", "text \\<open>The following three statements are equivalent:\n  \\<^enum> The commands \\<open>c\\<close> and \\<open>c'\\<close> are equivalent\n  \\<^enum> The weakest preconditions are equivalent, for all procedure environments\n  \\<^enum> The weakest liberal preconditions are equivalent, for all procedure environments\n\\<close>"], ["", "lemma wp_equiv_iff: \"(\\<forall>\\<pi>. wp \\<pi> c = wp \\<pi> c') \\<longleftrightarrow> c \\<sim> c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<pi>. wp \\<pi> c = wp \\<pi> c') = (c \\<sim> c')", "unfolding equiv_c_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<pi>. wp \\<pi> c = wp \\<pi> c') =\n    (\\<forall>\\<pi> s t.\n        \\<pi>: (c, s) \\<Rightarrow> t = \\<pi>: (c', s) \\<Rightarrow> t)", "using big_step_determ"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<pi>: (?c, ?s) \\<Rightarrow> ?t;\n   ?\\<pi>: (?c, ?s) \\<Rightarrow> ?u\\<rbrakk>\n  \\<Longrightarrow> ?u = ?t\n\ngoal (1 subgoal):\n 1. (\\<forall>\\<pi>. wp \\<pi> c = wp \\<pi> c') =\n    (\\<forall>\\<pi> s t.\n        \\<pi>: (c, s) \\<Rightarrow> t = \\<pi>: (c', s) \\<Rightarrow> t)", "unfolding wp_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<pi>: (?c, ?s) \\<Rightarrow> ?t;\n   ?\\<pi>: (?c, ?s) \\<Rightarrow> ?u\\<rbrakk>\n  \\<Longrightarrow> ?u = ?t\n\ngoal (1 subgoal):\n 1. (\\<forall>\\<pi>.\n        (\\<lambda>Q s.\n            \\<exists>t. \\<pi>: (c, s) \\<Rightarrow> t \\<and> Q t) =\n        (\\<lambda>Q s.\n            \\<exists>t. \\<pi>: (c', s) \\<Rightarrow> t \\<and> Q t)) =\n    (\\<forall>\\<pi> s t.\n        \\<pi>: (c, s) \\<Rightarrow> t = \\<pi>: (c', s) \\<Rightarrow> t)", "by (auto; metis)"], ["", "lemma wlp_equiv_iff: \"(\\<forall>\\<pi>. wlp \\<pi> c = wlp \\<pi> c') \\<longleftrightarrow> c \\<sim> c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<pi>. wlp \\<pi> c = wlp \\<pi> c') = (c \\<sim> c')", "unfolding equiv_c_def wlp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<pi>.\n        (\\<lambda>Q s.\n            \\<forall>t.\n               \\<pi>: (c, s) \\<Rightarrow> t \\<longrightarrow> Q t) =\n        (\\<lambda>Q s.\n            \\<forall>t.\n               \\<pi>: (c', s) \\<Rightarrow> t \\<longrightarrow> Q t)) =\n    (\\<forall>\\<pi> s t.\n        \\<pi>: (c, s) \\<Rightarrow> t = \\<pi>: (c', s) \\<Rightarrow> t)", "by (auto; metis (no_types, hide_lams))"], ["", "subsubsection \\<open>While Loops and Weakest Precondition\\<close>"], ["", "text \\<open>Exchanging the loop condition by an equivalent one, and the loop \n  body by one with the same weakest precondition, does not change the weakest \n  precondition of the loop.\\<close>"], ["", "lemma sim_while_wp_aux:\n  assumes \"bval b = bval b'\" \n  assumes \"wp \\<pi> c = wp \\<pi> c'\" \n  assumes \"\\<pi>: (WHILE b DO c, s) \\<Rightarrow> t\"\n  shows \"\\<pi>: (WHILE b' DO c', s) \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>: (WHILE b' DO c', s) \\<Rightarrow> t", "using assms(3,2)"], ["proof (prove)\nusing this:\n  \\<pi>: (WHILE b DO c, s) \\<Rightarrow> t\n  wp \\<pi> c = wp \\<pi> c'\n\ngoal (1 subgoal):\n 1. \\<pi>: (WHILE b' DO c', s) \\<Rightarrow> t", "apply (induction \\<pi> \"WHILE b DO c\" s t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s \\<pi>.\n       \\<lbrakk>\\<not> bval b s; wp \\<pi> c = wp \\<pi> c'\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (WHILE b' DO c', s) \\<Rightarrow> s\n 2. \\<And>s\\<^sub>1 \\<pi> s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<lbrakk>c = WHILE b DO c; wp \\<pi> c = wp \\<pi> c'\\<rbrakk>\n        \\<Longrightarrow> \\<pi>: (WHILE b' DO c',\n                                  s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        wp \\<pi> c = wp \\<pi> c' \\<Longrightarrow>\n        \\<pi>: (WHILE b' DO c', s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        wp \\<pi> c = wp \\<pi> c'\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (WHILE b' DO c',\n                                 s\\<^sub>1) \\<Rightarrow> s\\<^sub>3", "apply (auto simp: assms(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 \\<pi> s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b' s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<pi>: (WHILE b' DO c', s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        wp \\<pi> c = wp \\<pi> c'\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (WHILE b' DO c',\n                                 s\\<^sub>1) \\<Rightarrow> s\\<^sub>3", "by (metis WhileTrue big_step_determ wp_def)"], ["", "lemma sim_while_wp: \"bval b = bval b' \\<Longrightarrow> wp \\<pi> c = wp \\<pi> c' \\<Longrightarrow> wp \\<pi> (WHILE b DO c) = wp \\<pi> (WHILE b' DO c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bval b = bval b'; wp \\<pi> c = wp \\<pi> c'\\<rbrakk>\n    \\<Longrightarrow> wp \\<pi> (WHILE b DO c) = wp \\<pi> (WHILE b' DO c')", "apply (intro ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>bval b = bval b'; wp \\<pi> c = wp \\<pi> c'\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> (WHILE b DO c) x xa =\n                         wp \\<pi> (WHILE b' DO c') x xa", "apply (auto 0 3 simp: wp_def intro: sim_while_wp_aux)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>The same lemma for weakest liberal preconditions.\\<close>"], ["", "lemma sim_while_wlp_aux:\n  assumes \"bval b = bval b'\" \n  assumes \"wlp \\<pi> c = wlp \\<pi> c'\" \n  assumes \"\\<pi>: (WHILE b DO c, s) \\<Rightarrow> t\"\n  shows \"\\<pi>: (WHILE b' DO c', s) \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>: (WHILE b' DO c', s) \\<Rightarrow> t", "using assms(3,2)"], ["proof (prove)\nusing this:\n  \\<pi>: (WHILE b DO c, s) \\<Rightarrow> t\n  wlp \\<pi> c = wlp \\<pi> c'\n\ngoal (1 subgoal):\n 1. \\<pi>: (WHILE b' DO c', s) \\<Rightarrow> t", "apply (induction \\<pi> \"WHILE b DO c\" s t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s \\<pi>.\n       \\<lbrakk>\\<not> bval b s; wlp \\<pi> c = wlp \\<pi> c'\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (WHILE b' DO c', s) \\<Rightarrow> s\n 2. \\<And>s\\<^sub>1 \\<pi> s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<lbrakk>c = WHILE b DO c; wlp \\<pi> c = wlp \\<pi> c'\\<rbrakk>\n        \\<Longrightarrow> \\<pi>: (WHILE b' DO c',\n                                  s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        wlp \\<pi> c = wlp \\<pi> c' \\<Longrightarrow>\n        \\<pi>: (WHILE b' DO c', s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        wlp \\<pi> c = wlp \\<pi> c'\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (WHILE b' DO c',\n                                 s\\<^sub>1) \\<Rightarrow> s\\<^sub>3", "apply (auto simp: assms(1,2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 \\<pi> s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b' s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<pi>: (WHILE b' DO c', s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        wlp \\<pi> c = wlp \\<pi> c'\\<rbrakk>\n       \\<Longrightarrow> \\<pi>: (WHILE b' DO c',\n                                 s\\<^sub>1) \\<Rightarrow> s\\<^sub>3", "by (metis WhileTrue wlp_def)"], ["", "lemma sim_while_wlp: \"bval b = bval b' \\<Longrightarrow> wlp \\<pi> c = wlp \\<pi> c' \\<Longrightarrow> wlp \\<pi> (WHILE b DO c) = wlp \\<pi> (WHILE b' DO c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bval b = bval b'; wlp \\<pi> c = wlp \\<pi> c'\\<rbrakk>\n    \\<Longrightarrow> wlp \\<pi> (WHILE b DO c) = wlp \\<pi> (WHILE b' DO c')", "apply (intro ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>bval b = bval b'; wlp \\<pi> c = wlp \\<pi> c'\\<rbrakk>\n       \\<Longrightarrow> wlp \\<pi> (WHILE b DO c) x xa =\n                         wlp \\<pi> (WHILE b' DO c') x xa", "apply (auto 0 3 simp: wlp_def intro: sim_while_wlp_aux)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Invariants for While-Loops\\<close>"], ["", "text \\<open>We prove the standard invariant rules for while loops.\n    We first prove them in a slightly non-standard form, summarizing the \n    loop step and loop exit assumptions. Then, we derive the standard form \n    with separate assumptions for step and loop exit.\n  \\<close>"], ["", "subsubsection \\<open>Partial Correctness\\<close>"], ["", "lemma wlp_whileI':\n    assumes INIT: \"I s\\<^sub>0\"\n    assumes STEP: \"\\<And>s. I s \\<Longrightarrow> (if bval b s then wlp \\<pi> c I s else Q s)\"\n    shows \"wlp \\<pi> (WHILE b DO c) Q s\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp \\<pi> (WHILE b DO c) Q s\\<^sub>0", "unfolding wlp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t.\n       \\<pi>: (WHILE b DO c, s\\<^sub>0) \\<Rightarrow> t \\<longrightarrow>\n       Q t", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<pi>: (WHILE b DO c, s\\<^sub>0) \\<Rightarrow> t \\<Longrightarrow>\n       Q t", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<pi>: (WHILE b DO c, s\\<^sub>0) \\<Rightarrow> t \\<Longrightarrow>\n       Q t", "assume \"\\<pi>: (WHILE b DO c, s\\<^sub>0) \\<Rightarrow> t\""], ["proof (state)\nthis:\n  \\<pi>: (WHILE b DO c, s\\<^sub>0) \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<pi>: (WHILE b DO c, s\\<^sub>0) \\<Rightarrow> t \\<Longrightarrow>\n       Q t", "thus \"Q t\""], ["proof (prove)\nusing this:\n  \\<pi>: (WHILE b DO c, s\\<^sub>0) \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. Q t", "using INIT STEP"], ["proof (prove)\nusing this:\n  \\<pi>: (WHILE b DO c, s\\<^sub>0) \\<Rightarrow> t\n  I s\\<^sub>0\n  I ?s \\<Longrightarrow> if bval b ?s then wlp \\<pi> c I ?s else Q ?s\n\ngoal (1 subgoal):\n 1. Q t", "proof (induction \\<pi> \"WHILE b DO c\" s\\<^sub>0 t rule: big_step_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s \\<pi>.\n       \\<lbrakk>\\<not> bval b s; I s;\n        \\<And>s.\n           I s \\<Longrightarrow>\n           if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n       \\<Longrightarrow> Q s\n 2. \\<And>s\\<^sub>1 \\<pi> s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<lbrakk>c = WHILE b DO c; I s\\<^sub>1;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>2;\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<lbrakk>I s\\<^sub>2;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>3;\n        I s\\<^sub>1;\n        \\<And>s.\n           I s \\<Longrightarrow>\n           if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n       \\<Longrightarrow> Q s\\<^sub>3", "case (WhileFalse s)"], ["proof (state)\nthis:\n  \\<not> bval b s\n  I s\n  I ?s \\<Longrightarrow> if bval b ?s then wlp \\<pi>_ c I ?s else Q ?s\n\ngoal (2 subgoals):\n 1. \\<And>s \\<pi>.\n       \\<lbrakk>\\<not> bval b s; I s;\n        \\<And>s.\n           I s \\<Longrightarrow>\n           if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n       \\<Longrightarrow> Q s\n 2. \\<And>s\\<^sub>1 \\<pi> s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<lbrakk>c = WHILE b DO c; I s\\<^sub>1;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>2;\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<lbrakk>I s\\<^sub>2;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>3;\n        I s\\<^sub>1;\n        \\<And>s.\n           I s \\<Longrightarrow>\n           if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n       \\<Longrightarrow> Q s\\<^sub>3", "with STEP"], ["proof (chain)\npicking this:\n  I ?s \\<Longrightarrow> if bval b ?s then wlp \\<pi> c I ?s else Q ?s\n  \\<not> bval b s\n  I s\n  I ?s \\<Longrightarrow> if bval b ?s then wlp \\<pi>_ c I ?s else Q ?s", "show \"Q s\""], ["proof (prove)\nusing this:\n  I ?s \\<Longrightarrow> if bval b ?s then wlp \\<pi> c I ?s else Q ?s\n  \\<not> bval b s\n  I s\n  I ?s \\<Longrightarrow> if bval b ?s then wlp \\<pi>_ c I ?s else Q ?s\n\ngoal (1 subgoal):\n 1. Q s", "by auto"], ["proof (state)\nthis:\n  Q s\n\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 \\<pi> s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<lbrakk>c = WHILE b DO c; I s\\<^sub>1;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>2;\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<lbrakk>I s\\<^sub>2;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>3;\n        I s\\<^sub>1;\n        \\<And>s.\n           I s \\<Longrightarrow>\n           if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n       \\<Longrightarrow> Q s\\<^sub>3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 \\<pi> s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<lbrakk>c = WHILE b DO c; I s\\<^sub>1;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>2;\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<lbrakk>I s\\<^sub>2;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>3;\n        I s\\<^sub>1;\n        \\<And>s.\n           I s \\<Longrightarrow>\n           if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n       \\<Longrightarrow> Q s\\<^sub>3", "case (WhileTrue s\\<^sub>1 \\<pi> s\\<^sub>2 s\\<^sub>3)"], ["proof (state)\nthis:\n  bval b s\\<^sub>1\n  \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2\n  \\<lbrakk>c = WHILE b DO c; I s\\<^sub>1;\n   \\<And>s.\n      I s \\<Longrightarrow>\n      if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n  \\<Longrightarrow> Q s\\<^sub>2\n  \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3\n  \\<lbrakk>I s\\<^sub>2;\n   \\<And>s.\n      I s \\<Longrightarrow>\n      if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n  \\<Longrightarrow> Q s\\<^sub>3\n  I s\\<^sub>1\n  I ?s \\<Longrightarrow> if bval b ?s then wlp \\<pi> c I ?s else Q ?s\n\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 \\<pi> s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<lbrakk>c = WHILE b DO c; I s\\<^sub>1;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>2;\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<lbrakk>I s\\<^sub>2;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>3;\n        I s\\<^sub>1;\n        \\<And>s.\n           I s \\<Longrightarrow>\n           if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n       \\<Longrightarrow> Q s\\<^sub>3", "note STEP' = WhileTrue.prems(2)"], ["proof (state)\nthis:\n  I ?s \\<Longrightarrow> if bval b ?s then wlp \\<pi> c I ?s else Q ?s\n\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 \\<pi> s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<lbrakk>c = WHILE b DO c; I s\\<^sub>1;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>2;\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<lbrakk>I s\\<^sub>2;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>3;\n        I s\\<^sub>1;\n        \\<And>s.\n           I s \\<Longrightarrow>\n           if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n       \\<Longrightarrow> Q s\\<^sub>3", "from STEP'[OF \\<open>I s\\<^sub>1\\<close>] \\<open>bval b s\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  if bval b s\\<^sub>1 then wlp \\<pi> c I s\\<^sub>1 else Q s\\<^sub>1\n  bval b s\\<^sub>1", "have \"wlp \\<pi> c I s\\<^sub>1\""], ["proof (prove)\nusing this:\n  if bval b s\\<^sub>1 then wlp \\<pi> c I s\\<^sub>1 else Q s\\<^sub>1\n  bval b s\\<^sub>1\n\ngoal (1 subgoal):\n 1. wlp \\<pi> c I s\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  wlp \\<pi> c I s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 \\<pi> s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<lbrakk>c = WHILE b DO c; I s\\<^sub>1;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>2;\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<lbrakk>I s\\<^sub>2;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>3;\n        I s\\<^sub>1;\n        \\<And>s.\n           I s \\<Longrightarrow>\n           if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n       \\<Longrightarrow> Q s\\<^sub>3", "with \\<open>\\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2\n  wlp \\<pi> c I s\\<^sub>1", "have \"I s\\<^sub>2\""], ["proof (prove)\nusing this:\n  \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2\n  wlp \\<pi> c I s\\<^sub>1\n\ngoal (1 subgoal):\n 1. I s\\<^sub>2", "unfolding wlp_def"], ["proof (prove)\nusing this:\n  \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2\n  \\<forall>t. \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> t \\<longrightarrow> I t\n\ngoal (1 subgoal):\n 1. I s\\<^sub>2", "by blast"], ["proof (state)\nthis:\n  I s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 \\<pi> s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<lbrakk>c = WHILE b DO c; I s\\<^sub>1;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>2;\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<lbrakk>I s\\<^sub>2;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>3;\n        I s\\<^sub>1;\n        \\<And>s.\n           I s \\<Longrightarrow>\n           if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n       \\<Longrightarrow> Q s\\<^sub>3", "moreover"], ["proof (state)\nthis:\n  I s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 \\<pi> s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<lbrakk>c = WHILE b DO c; I s\\<^sub>1;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>2;\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<lbrakk>I s\\<^sub>2;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>3;\n        I s\\<^sub>1;\n        \\<And>s.\n           I s \\<Longrightarrow>\n           if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n       \\<Longrightarrow> Q s\\<^sub>3", "have \\<open>I s\\<^sub>2 \\<Longrightarrow> Q s\\<^sub>3\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. I s\\<^sub>2 \\<Longrightarrow> Q s\\<^sub>3", "using STEP' WhileTrue.hyps(5)"], ["proof (prove)\nusing this:\n  I ?s \\<Longrightarrow> if bval b ?s then wlp \\<pi> c I ?s else Q ?s\n  \\<lbrakk>I s\\<^sub>2;\n   \\<And>s.\n      I s \\<Longrightarrow>\n      if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n  \\<Longrightarrow> Q s\\<^sub>3\n\ngoal (1 subgoal):\n 1. I s\\<^sub>2 \\<Longrightarrow> Q s\\<^sub>3", "by blast"], ["proof (state)\nthis:\n  I s\\<^sub>2 \\<Longrightarrow> Q s\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 \\<pi> s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<lbrakk>c = WHILE b DO c; I s\\<^sub>1;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>2;\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<lbrakk>I s\\<^sub>2;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> Q s\\<^sub>3;\n        I s\\<^sub>1;\n        \\<And>s.\n           I s \\<Longrightarrow>\n           if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n       \\<Longrightarrow> Q s\\<^sub>3", "ultimately"], ["proof (chain)\npicking this:\n  I s\\<^sub>2\n  I s\\<^sub>2 \\<Longrightarrow> Q s\\<^sub>3", "show \"Q s\\<^sub>3\""], ["proof (prove)\nusing this:\n  I s\\<^sub>2\n  I s\\<^sub>2 \\<Longrightarrow> Q s\\<^sub>3\n\ngoal (1 subgoal):\n 1. Q s\\<^sub>3", "by blast"], ["proof (state)\nthis:\n  Q s\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Q t\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Short proof (not the shortest possible one ;) ) *)"], ["", "lemma \n    assumes INIT: \"I s\\<^sub>0\"\n    assumes STEP: \"\\<And>s. I s \\<Longrightarrow> (if bval b s then wlp \\<pi> c I s else Q s)\"\n    shows \"wlp \\<pi> (WHILE b DO c) Q s\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp \\<pi> (WHILE b DO c) Q s\\<^sub>0", "using STEP"], ["proof (prove)\nusing this:\n  I ?s \\<Longrightarrow> if bval b ?s then wlp \\<pi> c I ?s else Q ?s\n\ngoal (1 subgoal):\n 1. wlp \\<pi> (WHILE b DO c) Q s\\<^sub>0", "unfolding wlp_def"], ["proof (prove)\nusing this:\n  I ?s \\<Longrightarrow>\n  if bval b ?s\n  then \\<forall>t. \\<pi>: (c, ?s) \\<Rightarrow> t \\<longrightarrow> I t\n  else Q ?s\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       \\<pi>: (WHILE b DO c, s\\<^sub>0) \\<Rightarrow> t \\<longrightarrow>\n       Q t", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<And>s.\n                   I s \\<Longrightarrow>\n                   if bval b s\n                   then \\<forall>t.\n                           \\<pi>: (c, s) \\<Rightarrow> t \\<longrightarrow>\n                           I t\n                   else Q s;\n        \\<pi>: (WHILE b DO c, s\\<^sub>0) \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> Q t", "subgoal premises prems for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. Q t", "using prems(2,1) INIT"], ["proof (prove)\nusing this:\n  \\<pi>: (WHILE b DO c, s\\<^sub>0) \\<Rightarrow> t\n  I ?s \\<Longrightarrow>\n  if bval b ?s\n  then \\<forall>t. \\<pi>: (c, ?s) \\<Rightarrow> t \\<longrightarrow> I t\n  else Q ?s\n  I s\\<^sub>0\n\ngoal (1 subgoal):\n 1. Q t", "by (induction \\<pi> \"WHILE b DO c\" s\\<^sub>0 t rule: big_step_induct; meson)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Total Correctness\\<close>"], ["", "text \\<open>For total correctness, each step must decrease the state wrt.~a well-founded relation.\\<close>"], ["", "lemma wp_whileI':\n    assumes WF: \"wf R\"\n    assumes INIT: \"I s\\<^sub>0\"\n    assumes STEP: \"\\<And>s. I s \\<Longrightarrow> (if bval b s then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s',s)\\<in>R) s else Q s)\"\n    shows \"wp \\<pi> (WHILE b DO c) Q s\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp \\<pi> (WHILE b DO c) Q s\\<^sub>0", "using WF INIT"], ["proof (prove)\nusing this:\n  wf R\n  I s\\<^sub>0\n\ngoal (1 subgoal):\n 1. wp \\<pi> (WHILE b DO c) Q s\\<^sub>0", "proof (induction rule: wf_induct_rule[where a=s\\<^sub>0])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> R; I y\\<rbrakk>\n                   \\<Longrightarrow> wp \\<pi> (WHILE b DO c) Q y;\n        I x\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> (WHILE b DO c) Q x", "(* Instantiation required to avoid strange HO-unification problem! *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> R; I y\\<rbrakk>\n                   \\<Longrightarrow> wp \\<pi> (WHILE b DO c) Q y;\n        I x\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> (WHILE b DO c) Q x", "case (less s)"], ["proof (state)\nthis:\n  \\<lbrakk>(?y, s) \\<in> R; I ?y\\<rbrakk>\n  \\<Longrightarrow> wp \\<pi> (WHILE b DO c) Q ?y\n  I s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> R; I y\\<rbrakk>\n                   \\<Longrightarrow> wp \\<pi> (WHILE b DO c) Q y;\n        I x\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> (WHILE b DO c) Q x", "show \"wp \\<pi> (WHILE b DO c) Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp \\<pi> (WHILE b DO c) Q s", "proof (rule wp_while_unfold[THEN iffD2])"], ["proof (state)\ngoal (1 subgoal):\n 1. if bval b s then wp \\<pi> c (wp \\<pi> (WHILE b DO c) Q) s else Q s", "show \"if bval b s then wp \\<pi> c (wp \\<pi> (WHILE b DO c) Q) s else Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. if bval b s then wp \\<pi> c (wp \\<pi> (WHILE b DO c) Q) s else Q s", "proof (split if_split; intro allI impI conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow> wp \\<pi> c (wp \\<pi> (WHILE b DO c) Q) s\n 2. \\<not> bval b s \\<Longrightarrow> Q s", "assume [simp]: \"bval b s\""], ["proof (state)\nthis:\n  bval b s\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow> wp \\<pi> c (wp \\<pi> (WHILE b DO c) Q) s\n 2. \\<not> bval b s \\<Longrightarrow> Q s", "from STEP \\<open>I s\\<close>"], ["proof (chain)\npicking this:\n  I ?s \\<Longrightarrow>\n  if bval b ?s\n  then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s', ?s) \\<in> R) ?s else Q ?s\n  I s", "have \"wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s',s)\\<in>R) s\""], ["proof (prove)\nusing this:\n  I ?s \\<Longrightarrow>\n  if bval b ?s\n  then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s', ?s) \\<in> R) ?s else Q ?s\n  I s\n\ngoal (1 subgoal):\n 1. wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s", "by simp"], ["proof (state)\nthis:\n  wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n\ngoal (2 subgoals):\n 1. bval b s \\<Longrightarrow> wp \\<pi> c (wp \\<pi> (WHILE b DO c) Q) s\n 2. \\<not> bval b s \\<Longrightarrow> Q s", "thus \"wp \\<pi> c (wp \\<pi> (WHILE b DO c) Q) s\""], ["proof (prove)\nusing this:\n  wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n\ngoal (1 subgoal):\n 1. wp \\<pi> c (wp \\<pi> (WHILE b DO c) Q) s", "proof (rule wp_conseq)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>sa.\n       I sa \\<and> (sa, s) \\<in> R \\<Longrightarrow>\n       wp \\<pi> (WHILE b DO c) Q sa", "fix s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>sa.\n       I sa \\<and> (sa, s) \\<in> R \\<Longrightarrow>\n       wp \\<pi> (WHILE b DO c) Q sa", "assume \"I s' \\<and> (s',s)\\<in>R\""], ["proof (state)\nthis:\n  I s' \\<and> (s', s) \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>sa.\n       I sa \\<and> (sa, s) \\<in> R \\<Longrightarrow>\n       wp \\<pi> (WHILE b DO c) Q sa", "with less.IH"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?y, s) \\<in> R; I ?y\\<rbrakk>\n  \\<Longrightarrow> wp \\<pi> (WHILE b DO c) Q ?y\n  I s' \\<and> (s', s) \\<in> R", "show \"wp \\<pi> (WHILE b DO c) Q s'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?y, s) \\<in> R; I ?y\\<rbrakk>\n  \\<Longrightarrow> wp \\<pi> (WHILE b DO c) Q ?y\n  I s' \\<and> (s', s) \\<in> R\n\ngoal (1 subgoal):\n 1. wp \\<pi> (WHILE b DO c) Q s'", "by blast"], ["proof (state)\nthis:\n  wp \\<pi> (WHILE b DO c) Q s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wp \\<pi> c (wp \\<pi> (WHILE b DO c) Q) s\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow> Q s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow> Q s", "assume [simp]: \"\\<not>bval b s\""], ["proof (state)\nthis:\n  \\<not> bval b s\n\ngoal (1 subgoal):\n 1. \\<not> bval b s \\<Longrightarrow> Q s", "from STEP \\<open>I s\\<close>"], ["proof (chain)\npicking this:\n  I ?s \\<Longrightarrow>\n  if bval b ?s\n  then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s', ?s) \\<in> R) ?s else Q ?s\n  I s", "show \"Q s\""], ["proof (prove)\nusing this:\n  I ?s \\<Longrightarrow>\n  if bval b ?s\n  then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s', ?s) \\<in> R) ?s else Q ?s\n  I s\n\ngoal (1 subgoal):\n 1. Q s", "by simp"], ["proof (state)\nthis:\n  Q s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  if bval b s then wp \\<pi> c (wp \\<pi> (WHILE b DO c) Q) s else Q s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wp \\<pi> (WHILE b DO c) Q s\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Short Proof *)"], ["", "lemma \n    assumes WF: \"wf R\"\n    assumes INIT: \"I s\\<^sub>0\"\n    assumes STEP: \"\\<And>s. I s \\<Longrightarrow> (if bval b s then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s',s)\\<in>R) s else Q s)\"\n    shows \"wp \\<pi> (WHILE b DO c) Q s\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp \\<pi> (WHILE b DO c) Q s\\<^sub>0", "using WF INIT"], ["proof (prove)\nusing this:\n  wf R\n  I s\\<^sub>0\n\ngoal (1 subgoal):\n 1. wp \\<pi> (WHILE b DO c) Q s\\<^sub>0", "apply (induction rule: wf_induct_rule[where a=s\\<^sub>0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> R; I y\\<rbrakk>\n                   \\<Longrightarrow> wp \\<pi> (WHILE b DO c) Q y;\n        I x\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> (WHILE b DO c) Q x", "apply (subst wp_while_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> R; I y\\<rbrakk>\n                   \\<Longrightarrow> wp \\<pi> (WHILE b DO c) Q y;\n        I x\\<rbrakk>\n       \\<Longrightarrow> if bval b x\n                         then wp \\<pi> c (wp \\<pi> (WHILE b DO c) Q) x\n                         else Q x", "by (smt STEP wp_conseq)"], ["", "subsubsection \\<open>Standard Forms of While Rules\\<close>"], ["", "lemma wlp_whileI:\n    assumes INIT: \"I \\<ss>\\<^sub>0\"\n    assumes STEP: \"\\<And>\\<ss>. \\<lbrakk>I \\<ss>; bval b \\<ss> \\<rbrakk> \\<Longrightarrow> wlp \\<pi> c I \\<ss>\"\n    assumes FINAL: \"\\<And>\\<ss>. \\<lbrakk> I \\<ss>; \\<not>bval b \\<ss> \\<rbrakk> \\<Longrightarrow> Q \\<ss>\"\n    shows \"wlp \\<pi> (WHILE b DO c) Q \\<ss>\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp \\<pi> (WHILE b DO c) Q \\<ss>\\<^sub>0", "using assms wlp_whileI'"], ["proof (prove)\nusing this:\n  I \\<ss>\\<^sub>0\n  \\<lbrakk>I ?\\<ss>; bval b ?\\<ss>\\<rbrakk>\n  \\<Longrightarrow> wlp \\<pi> c I ?\\<ss>\n  \\<lbrakk>I ?\\<ss>; \\<not> bval b ?\\<ss>\\<rbrakk>\n  \\<Longrightarrow> Q ?\\<ss>\n  \\<lbrakk>?I ?s\\<^sub>0;\n   \\<And>s.\n      ?I s \\<Longrightarrow>\n      if bval ?b s then wlp ?\\<pi> ?c ?I s else ?Q s\\<rbrakk>\n  \\<Longrightarrow> wlp ?\\<pi> (WHILE ?b DO ?c) ?Q ?s\\<^sub>0\n\ngoal (1 subgoal):\n 1. wlp \\<pi> (WHILE b DO c) Q \\<ss>\\<^sub>0", "by auto"], ["", "lemma wp_whileI:\n    assumes WF: \"wf R\"\n    assumes INIT: \"I \\<ss>\\<^sub>0\"\n    assumes STEP: \"\\<And>\\<ss>. \\<lbrakk>I \\<ss>; bval b \\<ss> \\<rbrakk> \\<Longrightarrow> wp \\<pi> c (\\<lambda>\\<ss>'. I \\<ss>' \\<and> (\\<ss>',\\<ss>)\\<in>R) \\<ss>\"\n    assumes FINAL: \"\\<And>\\<ss>. \\<lbrakk> I \\<ss>; \\<not>bval b \\<ss> \\<rbrakk> \\<Longrightarrow> Q \\<ss>\"\n    shows \"wp \\<pi> (WHILE b DO c) Q \\<ss>\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp \\<pi> (WHILE b DO c) Q \\<ss>\\<^sub>0", "using assms wp_whileI'"], ["proof (prove)\nusing this:\n  wf R\n  I \\<ss>\\<^sub>0\n  \\<lbrakk>I ?\\<ss>; bval b ?\\<ss>\\<rbrakk>\n  \\<Longrightarrow> wp \\<pi> c\n                     (\\<lambda>\\<ss>'.\n                         I \\<ss>' \\<and> (\\<ss>', ?\\<ss>) \\<in> R)\n                     ?\\<ss>\n  \\<lbrakk>I ?\\<ss>; \\<not> bval b ?\\<ss>\\<rbrakk>\n  \\<Longrightarrow> Q ?\\<ss>\n  \\<lbrakk>wf ?R; ?I ?s\\<^sub>0;\n   \\<And>s.\n      ?I s \\<Longrightarrow>\n      if bval ?b s\n      then wp ?\\<pi> ?c (\\<lambda>s'. ?I s' \\<and> (s', s) \\<in> ?R) s\n      else ?Q s\\<rbrakk>\n  \\<Longrightarrow> wp ?\\<pi> (WHILE ?b DO ?c) ?Q ?s\\<^sub>0\n\ngoal (1 subgoal):\n 1. wp \\<pi> (WHILE b DO c) Q \\<ss>\\<^sub>0", "by auto"], ["", "subsection \\<open>Modularity of Programs\\<close>"], ["", "text \\<open>Adding more procedures does not change the semantics of the existing ones.\\<close>"], ["", "lemma map_leD: \"m\\<subseteq>\\<^sub>mm' \\<Longrightarrow> m x = Some v \\<Longrightarrow> m' x = Some v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<subseteq>\\<^sub>m m'; m x = Some v\\<rbrakk>\n    \\<Longrightarrow> m' x = Some v", "by (metis domI map_le_def)"], ["", "lemma big_step_mono_prog:\n  assumes \"\\<pi> \\<subseteq>\\<^sub>m \\<pi>'\"  \n  assumes \"\\<pi>:(c,s) \\<Rightarrow> t\"\n  shows \"\\<pi>':(c,s) \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>': (c, s) \\<Rightarrow> t", "using assms(2,1)"], ["proof (prove)\nusing this:\n  \\<pi>: (c, s) \\<Rightarrow> t\n  \\<pi> \\<subseteq>\\<^sub>m \\<pi>'\n\ngoal (1 subgoal):\n 1. \\<pi>': (c, s) \\<Rightarrow> t", "apply (induction \\<pi> c s t rule: big_step_induct)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>\\<pi> s.\n       \\<pi> \\<subseteq>\\<^sub>m \\<pi>' \\<Longrightarrow>\n       \\<pi>': (SKIP, s) \\<Rightarrow> s\n 2. \\<And>\\<pi> x i a s.\n       \\<pi> \\<subseteq>\\<^sub>m \\<pi>' \\<Longrightarrow>\n       \\<pi>': (x[i] ::= a, s) \\<Rightarrow> s\n       (x := (s x)(aval i s := aval a s))\n 3. \\<And>\\<pi> x y s.\n       \\<pi> \\<subseteq>\\<^sub>m \\<pi>' \\<Longrightarrow>\n       \\<pi>': (x[] ::= y, s) \\<Rightarrow> s(x := s y)\n 4. \\<And>\\<pi> x s.\n       \\<pi> \\<subseteq>\\<^sub>m \\<pi>' \\<Longrightarrow>\n       \\<pi>': (CLEAR x[], s) \\<Rightarrow> s(x := \\<lambda>_. 0)\n 5. \\<And>\\<pi> l s.\n       \\<pi> \\<subseteq>\\<^sub>m \\<pi>' \\<Longrightarrow>\n       \\<pi>': (Assign_Locals l, s) \\<Rightarrow> <l|s>\n 6. \\<And>\\<pi> c\\<^sub>1 s\\<^sub>1 s\\<^sub>2 c\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>\\<pi>: (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<pi> \\<subseteq>\\<^sub>m \\<pi>' \\<Longrightarrow>\n        \\<pi>': (c\\<^sub>1, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<pi>: (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<pi> \\<subseteq>\\<^sub>m \\<pi>' \\<Longrightarrow>\n        \\<pi>': (c\\<^sub>2, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        \\<pi> \\<subseteq>\\<^sub>m \\<pi>'\\<rbrakk>\n       \\<Longrightarrow> \\<pi>': (c\\<^sub>1;; c\\<^sub>2,\n                                  s\\<^sub>1) \\<Rightarrow> s\\<^sub>3\n 7. \\<And>b s \\<pi> c\\<^sub>1 t c\\<^sub>2.\n       \\<lbrakk>bval b s; \\<pi>: (c\\<^sub>1, s) \\<Rightarrow> t;\n        \\<pi> \\<subseteq>\\<^sub>m \\<pi>' \\<Longrightarrow>\n        \\<pi>': (c\\<^sub>1, s) \\<Rightarrow> t;\n        \\<pi> \\<subseteq>\\<^sub>m \\<pi>'\\<rbrakk>\n       \\<Longrightarrow> \\<pi>': (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                  s) \\<Rightarrow> t\n 8. \\<And>b s \\<pi> c\\<^sub>2 t c\\<^sub>1.\n       \\<lbrakk>\\<not> bval b s; \\<pi>: (c\\<^sub>2, s) \\<Rightarrow> t;\n        \\<pi> \\<subseteq>\\<^sub>m \\<pi>' \\<Longrightarrow>\n        \\<pi>': (c\\<^sub>2, s) \\<Rightarrow> t;\n        \\<pi> \\<subseteq>\\<^sub>m \\<pi>'\\<rbrakk>\n       \\<Longrightarrow> \\<pi>': (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2,\n                                  s) \\<Rightarrow> t\n 9. \\<And>\\<pi> c s s'.\n       \\<lbrakk>\\<pi>: (c, <<>|s>) \\<Rightarrow> s';\n        \\<pi> \\<subseteq>\\<^sub>m \\<pi>' \\<Longrightarrow>\n        \\<pi>': (c, <<>|s>) \\<Rightarrow> s';\n        \\<pi> \\<subseteq>\\<^sub>m \\<pi>'\\<rbrakk>\n       \\<Longrightarrow> \\<pi>': (SCOPE c, s) \\<Rightarrow> <s|s'>\n 10. \\<And>b s \\<pi> c.\n        \\<lbrakk>\\<not> bval b s; \\<pi> \\<subseteq>\\<^sub>m \\<pi>'\\<rbrakk>\n        \\<Longrightarrow> \\<pi>': (WHILE b DO c, s) \\<Rightarrow> s\nA total of 13 subgoals...", "by (auto dest: map_leD)"], ["", "text \\<open>Wrapping a set of recursive procedures into a procedure scope\\<close>"], ["", "lemma localize_recursion:\n  \"\\<pi>': (PScope \\<pi> c, s) \\<Rightarrow> t \\<longleftrightarrow> \\<pi>:(c,s) \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>': (PScope \\<pi> c, s) \\<Rightarrow> t =\n    \\<pi>: (c, s) \\<Rightarrow> t", "by auto"], ["", "subsection \\<open>Strongest Postcondition\\<close>"], ["", "context fixes \\<pi> :: program begin"], ["", "definition \"sp P c t \\<equiv> \\<exists>s. P s \\<and> \\<pi>: (c,s) \\<Rightarrow> t\""], ["", "context notes [simp] = sp_def[abs_def] begin"], ["", "text \\<open>Intuition: There exists an old value \\<open>vx\\<close> for the assigned variable\\<close>"], ["", "lemma sp_arraycpy_eq: \"sp P (x[]::=y) t \\<longleftrightarrow> (\\<exists>vx. let s = t(x:=vx) in t x = s y \\<and> P s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sp P (x[] ::= y) t =\n    (\\<exists>vx. let s = t(x := vx) in t x = s y \\<and> P s)", "apply (auto simp: big_step_simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>vx.\n       \\<lbrakk>y \\<noteq> x; t x = t y; P (t(x := vx))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. P s \\<and> t = s(x := s y)\n 2. \\<lbrakk>P (t(x := t y)); t x = t y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s. P s \\<and> t = s(x := s y)", "apply (intro exI conjI, assumption, auto) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P (t(x := t y)); t x = t y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s. P s \\<and> t = s(x := s y)", "apply (intro exI conjI, assumption, auto) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Version with renaming of assigned variable\\<close>"], ["", "lemma sp_arraycpy_eq': \"sp P (x[]::=y) t \\<longleftrightarrow> t x = t y \\<and> (\\<exists>vx. P (t(x:=vx,y:=t x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sp P (x[] ::= y) t =\n    (t x = t y \\<and> (\\<exists>vx. P (t(x := vx, y := t x))))", "apply (auto simp: big_step_simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>P s; t = s(x := s y)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>vx. P (s(x := vx, y := s y))\n 2. \\<And>vx.\n       \\<lbrakk>t x = t y; P (t(x := vx, y := t y))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. P s \\<and> t = s(x := s y)", "apply (metis fun_upd_triv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>vx.\n       \\<lbrakk>t x = t y; P (t(x := vx, y := t y))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. P s \\<and> t = s(x := s y)", "apply (intro exI conjI, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>vx.\n       \\<lbrakk>t x = t y; P (t(x := vx, y := t y))\\<rbrakk>\n       \\<Longrightarrow> t = t\n                         (x := vx, y := t y, x := (t(x := vx, y := t y)) y)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sp_skip_eq: \"sp P SKIP t \\<longleftrightarrow> P t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sp P SKIP t = P t", "by auto"], ["", "lemma sp_seq_eq: \"sp P (c\\<^sub>1;;c\\<^sub>2) t \\<longleftrightarrow> sp (sp P c\\<^sub>1) c\\<^sub>2 t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.sp P (c\\<^sub>1;; c\\<^sub>2) t =\n    local.sp (local.sp P c\\<^sub>1) c\\<^sub>2 t", "by auto"], ["", "end"], ["", "end"], ["", "subsection \\<open>Hoare-Triples\\<close>"], ["", "text \\<open>A Hoare-triple summarizes the precondition, command, and postcondition.\\<close>"], ["", "definition HT \n  where \"HT \\<pi> P c Q \\<equiv> (\\<forall>s\\<^sub>0. P s\\<^sub>0 \\<longrightarrow> wp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0)\""], ["", "definition HT_partial\n  where \"HT_partial \\<pi> P c Q \\<equiv> (\\<forall>s\\<^sub>0. P s\\<^sub>0 \\<longrightarrow> wlp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0)\""], ["", "text \\<open>Consequence rule---strengthen the precondition, weaken the postcondition.\\<close>"], ["", "lemma HT_conseq: \n  assumes \"HT \\<pi> P c Q\"\n  assumes \"\\<And>s. P' s \\<Longrightarrow> P s\"\n  assumes \"\\<And>s\\<^sub>0 s. \\<lbrakk>P s\\<^sub>0; P' s\\<^sub>0; Q s\\<^sub>0 s \\<rbrakk> \\<Longrightarrow> Q' s\\<^sub>0 s\"\n  shows \"HT \\<pi> P' c Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HT \\<pi> P' c Q'", "using assms"], ["proof (prove)\nusing this:\n  HT \\<pi> P c Q\n  P' ?s \\<Longrightarrow> P ?s\n  \\<lbrakk>P ?s\\<^sub>0; P' ?s\\<^sub>0; Q ?s\\<^sub>0 ?s\\<rbrakk>\n  \\<Longrightarrow> Q' ?s\\<^sub>0 ?s\n\ngoal (1 subgoal):\n 1. HT \\<pi> P' c Q'", "unfolding HT_def"], ["proof (prove)\nusing this:\n  \\<forall>s\\<^sub>0.\n     P s\\<^sub>0 \\<longrightarrow> wp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0\n  P' ?s \\<Longrightarrow> P ?s\n  \\<lbrakk>P ?s\\<^sub>0; P' ?s\\<^sub>0; Q ?s\\<^sub>0 ?s\\<rbrakk>\n  \\<Longrightarrow> Q' ?s\\<^sub>0 ?s\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<^sub>0.\n       P' s\\<^sub>0 \\<longrightarrow> wp \\<pi> c (Q' s\\<^sub>0) s\\<^sub>0", "by (blast intro: wp_conseq)"], ["", "lemma HT_partial_conseq: \n  assumes \"HT_partial \\<pi> P c Q\"\n  assumes \"\\<And>s. P' s \\<Longrightarrow> P s\"\n  assumes \"\\<And>s\\<^sub>0 s. \\<lbrakk>P s\\<^sub>0; P' s\\<^sub>0; Q s\\<^sub>0 s \\<rbrakk> \\<Longrightarrow> Q' s\\<^sub>0 s\"\n  shows \"HT_partial \\<pi> P' c Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HT_partial \\<pi> P' c Q'", "using assms"], ["proof (prove)\nusing this:\n  HT_partial \\<pi> P c Q\n  P' ?s \\<Longrightarrow> P ?s\n  \\<lbrakk>P ?s\\<^sub>0; P' ?s\\<^sub>0; Q ?s\\<^sub>0 ?s\\<rbrakk>\n  \\<Longrightarrow> Q' ?s\\<^sub>0 ?s\n\ngoal (1 subgoal):\n 1. HT_partial \\<pi> P' c Q'", "unfolding HT_partial_def"], ["proof (prove)\nusing this:\n  \\<forall>s\\<^sub>0.\n     P s\\<^sub>0 \\<longrightarrow> wlp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0\n  P' ?s \\<Longrightarrow> P ?s\n  \\<lbrakk>P ?s\\<^sub>0; P' ?s\\<^sub>0; Q ?s\\<^sub>0 ?s\\<rbrakk>\n  \\<Longrightarrow> Q' ?s\\<^sub>0 ?s\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<^sub>0.\n       P' s\\<^sub>0 \\<longrightarrow> wlp \\<pi> c (Q' s\\<^sub>0) s\\<^sub>0", "by (blast intro: wlp_conseq)"], ["", "text \\<open>Simple rule for presentation in lecture: Use a Hoare-triple during VCG.\\<close>"], ["", "lemma wp_modularity_rule:\n  \"\\<lbrakk>HT \\<pi> P c Q; P s; (\\<And>s'. Q s s' \\<Longrightarrow> Q' s')\\<rbrakk> \\<Longrightarrow> wp \\<pi> c Q' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>HT \\<pi> P c Q; P s;\n     \\<And>s'. Q s s' \\<Longrightarrow> Q' s'\\<rbrakk>\n    \\<Longrightarrow> wp \\<pi> c Q' s", "unfolding HT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>s\\<^sub>0.\n                P s\\<^sub>0 \\<longrightarrow>\n                wp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0;\n     P s; \\<And>s'. Q s s' \\<Longrightarrow> Q' s'\\<rbrakk>\n    \\<Longrightarrow> wp \\<pi> c Q' s", "by (blast intro: wp_conseq)"], ["", "subsubsection \\<open>Sets of Hoare-Triples\\<close>"], ["", "type_synonym htset = \"((state \\<Rightarrow> bool) \\<times> com \\<times> (state \\<Rightarrow> state \\<Rightarrow> bool)) set\""], ["", "definition \"HTset \\<pi> \\<Theta> \\<equiv> \\<forall>(P,c,Q)\\<in>\\<Theta>. HT \\<pi> P c Q\""], ["", "definition \"HTset_r r \\<pi> \\<Theta> \\<equiv> \\<forall>(P,c,Q)\\<in>\\<Theta>. HT \\<pi> (\\<lambda>s. r c s \\<and> P s) c Q\""], ["", "subsubsection \\<open>Deriving Parameter Frame Adjustment Rules\\<close>"], ["", "text \\<open>The following rules can be used to derive Hoare-triples when adding\n  prologue and epilogue code, and wrapping the command into a scope.\n  \n  This will be used to implement the local variables and parameter passing protocol \n  of procedures.\n\\<close>"], ["", "text \\<open> Intuition: \n  New precondition is weakest one we need to ensure \\<open>P\\<close> after prologue.\n\\<close>"], ["", "lemma adjust_prologue:\n  assumes \"HT \\<pi> P body Q\"\n  shows \"HT \\<pi> (wp \\<pi> prologue P) (prologue;;body) (\\<lambda>s\\<^sub>0 s. wp \\<pi> prologue (\\<lambda>s\\<^sub>0. Q s\\<^sub>0 s) s\\<^sub>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HT \\<pi> (wp \\<pi> prologue P) (prologue;; body)\n     (\\<lambda>s\\<^sub>0 s.\n         wp \\<pi> prologue (\\<lambda>s\\<^sub>0. Q s\\<^sub>0 s) s\\<^sub>0)", "using assms"], ["proof (prove)\nusing this:\n  HT \\<pi> P body Q\n\ngoal (1 subgoal):\n 1. HT \\<pi> (wp \\<pi> prologue P) (prologue;; body)\n     (\\<lambda>s\\<^sub>0 s.\n         wp \\<pi> prologue (\\<lambda>s\\<^sub>0. Q s\\<^sub>0 s) s\\<^sub>0)", "unfolding HT_def"], ["proof (prove)\nusing this:\n  \\<forall>s\\<^sub>0.\n     P s\\<^sub>0 \\<longrightarrow> wp \\<pi> body (Q s\\<^sub>0) s\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<^sub>0.\n       wp \\<pi> prologue P s\\<^sub>0 \\<longrightarrow>\n       wp \\<pi> (prologue;; body)\n        (\\<lambda>s.\n            wp \\<pi> prologue (\\<lambda>s\\<^sub>0. Q s\\<^sub>0 s) s\\<^sub>0)\n        s\\<^sub>0", "apply (auto simp: wp_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>0.\n       \\<lbrakk>\\<forall>s\\<^sub>0.\n                   P s\\<^sub>0 \\<longrightarrow>\n                   wp \\<pi> body (Q s\\<^sub>0) s\\<^sub>0;\n        wp \\<pi> prologue P s\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> prologue\n                          (wp \\<pi> body\n                            (\\<lambda>s.\n                                wp \\<pi> prologue\n                                 (\\<lambda>s\\<^sub>0. Q s\\<^sub>0 s)\n                                 s\\<^sub>0))\n                          s\\<^sub>0", "using wp_def"], ["proof (prove)\nusing this:\n  wp ?\\<pi> ?c ?Q ?s \\<equiv>\n  \\<exists>t. ?\\<pi>: (?c, ?s) \\<Rightarrow> t \\<and> ?Q t\n\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>0.\n       \\<lbrakk>\\<forall>s\\<^sub>0.\n                   P s\\<^sub>0 \\<longrightarrow>\n                   wp \\<pi> body (Q s\\<^sub>0) s\\<^sub>0;\n        wp \\<pi> prologue P s\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> prologue\n                          (wp \\<pi> body\n                            (\\<lambda>s.\n                                wp \\<pi> prologue\n                                 (\\<lambda>s\\<^sub>0. Q s\\<^sub>0 s)\n                                 s\\<^sub>0))\n                          s\\<^sub>0", "by fastforce"], ["", "text \\<open> Intuition:\n  New postcondition is strongest one we can get from \\<open>Q\\<close> after epilogue.\n  \n  We have to be careful with non-terminating epilogue, though!\n\\<close>"], ["", "lemma adjust_epilogue:\n  assumes \"HT \\<pi> P body Q\"  \n  assumes TERMINATES: \"\\<forall>s. \\<exists>t. \\<pi>: (epilogue,s) \\<Rightarrow> t\"\n  shows \"HT \\<pi> P (body;;epilogue) (\\<lambda>s\\<^sub>0. sp \\<pi> (Q s\\<^sub>0) epilogue)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HT \\<pi> P (body;; epilogue)\n     (\\<lambda>s\\<^sub>0. sp \\<pi> (Q s\\<^sub>0) epilogue)", "using assms"], ["proof (prove)\nusing this:\n  HT \\<pi> P body Q\n  \\<forall>s. \\<exists>t. \\<pi>: (epilogue, s) \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. HT \\<pi> P (body;; epilogue)\n     (\\<lambda>s\\<^sub>0. sp \\<pi> (Q s\\<^sub>0) epilogue)", "unfolding HT_def"], ["proof (prove)\nusing this:\n  \\<forall>s\\<^sub>0.\n     P s\\<^sub>0 \\<longrightarrow> wp \\<pi> body (Q s\\<^sub>0) s\\<^sub>0\n  \\<forall>s. \\<exists>t. \\<pi>: (epilogue, s) \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<^sub>0.\n       P s\\<^sub>0 \\<longrightarrow>\n       wp \\<pi> (body;; epilogue) (sp \\<pi> (Q s\\<^sub>0) epilogue)\n        s\\<^sub>0", "apply (simp add: wp_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>s\\<^sub>0.\n                P s\\<^sub>0 \\<longrightarrow>\n                wp \\<pi> body (Q s\\<^sub>0) s\\<^sub>0;\n     \\<forall>s. \\<exists>t. \\<pi>: (epilogue, s) \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s\\<^sub>0.\n                         P s\\<^sub>0 \\<longrightarrow>\n                         wp \\<pi> body\n                          (wp \\<pi> epilogue\n                            (sp \\<pi> (Q s\\<^sub>0) epilogue))\n                          s\\<^sub>0", "apply (force simp: sp_def wp_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Intuition: \n  Scope can be seen as assignment of locals before and after inner command.\n  Thus, this rule is a combined forward and backward assignment rule, for\n  the epilogue \\<open>locals:=<>\\<close> and the prologue \\<open>locals:=old_locals\\<close>.\n\\<close>"], ["", "lemma adjust_scope:\n  assumes \"HT \\<pi> P body Q\"\n  shows \"HT \\<pi> (\\<lambda>s. P <<>|s>) (SCOPE body) (\\<lambda>s\\<^sub>0 s. \\<exists>l. Q (<<>|s\\<^sub>0>) (<l|s>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HT \\<pi> (\\<lambda>s. P <<>|s>) (SCOPE body)\n     (\\<lambda>s\\<^sub>0 s. \\<exists>l. Q <<>|s\\<^sub>0> <l|s>)", "using assms"], ["proof (prove)\nusing this:\n  HT \\<pi> P body Q\n\ngoal (1 subgoal):\n 1. HT \\<pi> (\\<lambda>s. P <<>|s>) (SCOPE body)\n     (\\<lambda>s\\<^sub>0 s. \\<exists>l. Q <<>|s\\<^sub>0> <l|s>)", "unfolding HT_def"], ["proof (prove)\nusing this:\n  \\<forall>s\\<^sub>0.\n     P s\\<^sub>0 \\<longrightarrow> wp \\<pi> body (Q s\\<^sub>0) s\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<^sub>0.\n       P <<>|s\\<^sub>0> \\<longrightarrow>\n       wp \\<pi> (SCOPE body)\n        (\\<lambda>s. \\<exists>l. Q <<>|s\\<^sub>0> <l|s>) s\\<^sub>0", "apply (auto simp: wp_eq combine_nest)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>0.\n       \\<lbrakk>\\<forall>s\\<^sub>0.\n                   P s\\<^sub>0 \\<longrightarrow>\n                   wp \\<pi> body (Q s\\<^sub>0) s\\<^sub>0;\n        P <<>|s\\<^sub>0>\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> body\n                          (\\<lambda>s'. \\<exists>l. Q <<>|s\\<^sub>0> <l|s'>)\n                          <<>|s\\<^sub>0>", "apply (auto simp: wp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>0.\n       \\<lbrakk>\\<forall>s\\<^sub>0.\n                   P s\\<^sub>0 \\<longrightarrow>\n                   (\\<exists>t.\n                       \\<pi>: (body, s\\<^sub>0) \\<Rightarrow> t \\<and>\n                       Q s\\<^sub>0 t);\n        P <<>|s\\<^sub>0>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            \\<pi>: (body,\n                                    <<>|s\\<^sub>0>) \\<Rightarrow> t \\<and>\n                            (\\<exists>l. Q <<>|s\\<^sub>0> <l|t>)", "by (metis combine_collapse)"], ["", "subsubsection \\<open>Proof for Recursive Specifications\\<close>"], ["", "text \\<open>Prove correct any set of Hoare-triples, e.g., mutually recursive ones.\\<close>"], ["", "lemma HTsetI:    \n  assumes \"wf R\"\n  assumes RL: \"\\<And>P c Q s\\<^sub>0. \\<lbrakk> HTset_r (\\<lambda>c' s'. ((c',s'),(c,s\\<^sub>0))\\<in>R ) \\<pi> \\<Theta>; (P,c,Q)\\<in>\\<Theta>; P s\\<^sub>0 \\<rbrakk> \\<Longrightarrow> wp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0\"\n  shows \"HTset \\<pi> \\<Theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HTset \\<pi> \\<Theta>", "unfolding HTset_def HT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(P, c, Q)\\<in>\\<Theta>.\n       \\<forall>s\\<^sub>0.\n          P s\\<^sub>0 \\<longrightarrow> wp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a aa b s\\<^sub>0.\n       \\<lbrakk>(a, aa, b) \\<in> \\<Theta>; a s\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> aa (b s\\<^sub>0) s\\<^sub>0", "fix P c Q s\\<^sub>0"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a aa b s\\<^sub>0.\n       \\<lbrakk>(a, aa, b) \\<in> \\<Theta>; a s\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> aa (b s\\<^sub>0) s\\<^sub>0", "assume \"(P,c,Q)\\<in>\\<Theta>\" \"P s\\<^sub>0\""], ["proof (state)\nthis:\n  (P, c, Q) \\<in> \\<Theta>\n  P s\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<And>a aa b s\\<^sub>0.\n       \\<lbrakk>(a, aa, b) \\<in> \\<Theta>; a s\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> aa (b s\\<^sub>0) s\\<^sub>0", "with \\<open>wf R\\<close>"], ["proof (chain)\npicking this:\n  wf R\n  (P, c, Q) \\<in> \\<Theta>\n  P s\\<^sub>0", "show \"wp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0\""], ["proof (prove)\nusing this:\n  wf R\n  (P, c, Q) \\<in> \\<Theta>\n  P s\\<^sub>0\n\ngoal (1 subgoal):\n 1. wp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0", "apply (induction \"(c,s\\<^sub>0)\" arbitrary: c s\\<^sub>0 P Q)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c s\\<^sub>0 P Q.\n       \\<lbrakk>\\<And>ca s\\<^sub>0' P Q.\n                   \\<lbrakk>((ca, s\\<^sub>0'), c, s\\<^sub>0) \\<in> R;\n                    (P, ca, Q) \\<in> \\<Theta>; P s\\<^sub>0'\\<rbrakk>\n                   \\<Longrightarrow> wp \\<pi> ca (Q s\\<^sub>0') s\\<^sub>0';\n        (P, c, Q) \\<in> \\<Theta>; P s\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0", "using RL"], ["proof (prove)\nusing this:\n  \\<lbrakk>HTset_r (\\<lambda>c' s'. ((c', s'), ?c, ?s\\<^sub>0) \\<in> R)\n            \\<pi> \\<Theta>;\n   (?P, ?c, ?Q) \\<in> \\<Theta>; ?P ?s\\<^sub>0\\<rbrakk>\n  \\<Longrightarrow> wp \\<pi> ?c (?Q ?s\\<^sub>0) ?s\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<And>c s\\<^sub>0 P Q.\n       \\<lbrakk>\\<And>ca s\\<^sub>0' P Q.\n                   \\<lbrakk>((ca, s\\<^sub>0'), c, s\\<^sub>0) \\<in> R;\n                    (P, ca, Q) \\<in> \\<Theta>; P s\\<^sub>0'\\<rbrakk>\n                   \\<Longrightarrow> wp \\<pi> ca (Q s\\<^sub>0') s\\<^sub>0';\n        (P, c, Q) \\<in> \\<Theta>; P s\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0", "unfolding HTset_r_def HT_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>(P, c, Q)\\<in>\\<Theta>.\n              \\<forall>s\\<^sub>0.\n                 ((c, s\\<^sub>0), ?c, ?s\\<^sub>0) \\<in> R \\<and>\n                 P s\\<^sub>0 \\<longrightarrow>\n                 wp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0;\n   (?P, ?c, ?Q) \\<in> \\<Theta>; ?P ?s\\<^sub>0\\<rbrakk>\n  \\<Longrightarrow> wp \\<pi> ?c (?Q ?s\\<^sub>0) ?s\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<And>c s\\<^sub>0 P Q.\n       \\<lbrakk>\\<And>ca s\\<^sub>0' P Q.\n                   \\<lbrakk>((ca, s\\<^sub>0'), c, s\\<^sub>0) \\<in> R;\n                    (P, ca, Q) \\<in> \\<Theta>; P s\\<^sub>0'\\<rbrakk>\n                   \\<Longrightarrow> wp \\<pi> ca (Q s\\<^sub>0') s\\<^sub>0';\n        (P, c, Q) \\<in> \\<Theta>; P s\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0", "by blast"], ["proof (state)\nthis:\n  wp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HT_simple_recursiveI:\n  assumes \"wf R\"\n  assumes \"\\<And>s. \\<lbrakk>HT \\<pi> (\\<lambda>s'. (f s', f s)\\<in>R \\<and> P s') c Q; P s \\<rbrakk> \\<Longrightarrow> wp \\<pi> c (Q s) s\"\n  shows \"HT \\<pi> P c Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HT \\<pi> P c Q", "using HTsetI[where R=\"inv_image R (f o snd)\" and \\<pi>=\\<pi> and \\<Theta> = \"{(P,c,Q)}\"] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>wf (inv_image R (f \\<circ> snd));\n   \\<And>Pa ca Qa s\\<^sub>0.\n      \\<lbrakk>HTset_r\n                (\\<lambda>c' s'.\n                    ((c', s'), ca, s\\<^sub>0)\n                    \\<in> inv_image R (f \\<circ> snd))\n                \\<pi> {(P, c, Q)};\n       (Pa, ca, Qa) \\<in> {(P, c, Q)}; Pa s\\<^sub>0\\<rbrakk>\n      \\<Longrightarrow> wp \\<pi> ca (Qa s\\<^sub>0) s\\<^sub>0\\<rbrakk>\n  \\<Longrightarrow> HTset \\<pi> {(P, c, Q)}\n  wf R\n  \\<lbrakk>HT \\<pi> (\\<lambda>s'. (f s', f ?s) \\<in> R \\<and> P s') c Q;\n   P ?s\\<rbrakk>\n  \\<Longrightarrow> wp \\<pi> c (Q ?s) ?s\n\ngoal (1 subgoal):\n 1. HT \\<pi> P c Q", "by (auto simp: HTset_r_def HTset_def)"], ["", "lemma HT_simple_recursive_procI:\n  assumes \"wf R\"\n  assumes \"\\<And>s. \\<lbrakk>HT \\<pi> (\\<lambda>s'. (f s', f s)\\<in>R \\<and> P s') (PCall p) Q; P s \\<rbrakk> \\<Longrightarrow> wp \\<pi> (PCall p) (Q s) s\"\n  shows \"HT \\<pi> P (PCall p) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HT \\<pi> P (PCall p) Q", "using HTsetI[where R=\"inv_image R (f o snd)\" and \\<pi>=\\<pi> and \\<Theta> = \"{(P,PCall p,Q)}\"] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>wf (inv_image R (f \\<circ> snd));\n   \\<And>Pa c Qa s\\<^sub>0.\n      \\<lbrakk>HTset_r\n                (\\<lambda>c' s'.\n                    ((c', s'), c, s\\<^sub>0)\n                    \\<in> inv_image R (f \\<circ> snd))\n                \\<pi> {(P, PCall p, Q)};\n       (Pa, c, Qa) \\<in> {(P, PCall p, Q)}; Pa s\\<^sub>0\\<rbrakk>\n      \\<Longrightarrow> wp \\<pi> c (Qa s\\<^sub>0) s\\<^sub>0\\<rbrakk>\n  \\<Longrightarrow> HTset \\<pi> {(P, PCall p, Q)}\n  wf R\n  \\<lbrakk>HT \\<pi> (\\<lambda>s'. (f s', f ?s) \\<in> R \\<and> P s')\n            (PCall p) Q;\n   P ?s\\<rbrakk>\n  \\<Longrightarrow> wp \\<pi> (PCall p) (Q ?s) ?s\n\ngoal (1 subgoal):\n 1. HT \\<pi> P (PCall p) Q", "by (auto simp: HTset_r_def HTset_def)"], ["", "lemma\n  assumes \"wf R\"\n  assumes \"\\<And>s P p Q. \\<lbrakk> \n    \\<And>P' p' Q'. (P',p',Q')\\<in>\\<Theta> \n      \\<Longrightarrow> HT \\<pi> (\\<lambda>s'. ((p',s'),(p,s))\\<in>R \\<and> P' s') (PCall p') Q';\n    (P,p,Q)\\<in>\\<Theta>; P s \n  \\<rbrakk> \\<Longrightarrow> wp \\<pi> (PCall p) (Q s) s\"\n  shows \"\\<forall>(P,p,Q)\\<in>\\<Theta>. HT \\<pi> P (PCall p) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>(P, p, Q)\\<in>\\<Theta>. HT \\<pi> P (PCall p) Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>(P, p, Q)\\<in>\\<Theta>. HT \\<pi> P (PCall p) Q", "have \"HTset \\<pi> {(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HTset \\<pi> {(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>}", "apply (rule HTsetI[where R=\"inv_image R (\\<lambda>x. case x of (PCall p,s) \\<Rightarrow> (p,s))\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf (inv_image R\n         (\\<lambda>x. case x of (PCall p, s) \\<Rightarrow> (p, s)))\n 2. \\<And>P c Q s\\<^sub>0.\n       \\<lbrakk>HTset_r\n                 (\\<lambda>c' s'.\n                     ((c', s'), c, s\\<^sub>0)\n                     \\<in> inv_image R\n                            (\\<lambda>x.\n                                case x of\n                                (PCall p, s) \\<Rightarrow> (p, s)))\n                 \\<pi> {(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>};\n        (P, c, Q) \\<in> {(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>};\n        P s\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (inv_image R\n         (\\<lambda>x. case x of (PCall p, s) \\<Rightarrow> (p, s)))", "using \\<open>wf R\\<close>"], ["proof (prove)\nusing this:\n  wf R\n\ngoal (1 subgoal):\n 1. wf (inv_image R\n         (\\<lambda>x. case x of (PCall p, s) \\<Rightarrow> (p, s)))", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P c Q s\\<^sub>0.\n       \\<lbrakk>HTset_r\n                 (\\<lambda>c' s'.\n                     ((c', s'), c, s\\<^sub>0)\n                     \\<in> inv_image R\n                            (\\<lambda>x.\n                                case x of\n                                (PCall p, s) \\<Rightarrow> (p, s)))\n                 \\<pi> {(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>};\n        (P, c, Q) \\<in> {(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>};\n        P s\\<^sub>0\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> c (Q s\\<^sub>0) s\\<^sub>0", "subgoal for P c Q s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>HTset_r\n              (\\<lambda>c' s'.\n                  ((c', s'), c, s)\n                  \\<in> inv_image R\n                         (\\<lambda>x.\n                             case x of (PCall p, s) \\<Rightarrow> (p, s)))\n              \\<pi> {(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>};\n     (P, c, Q) \\<in> {(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>};\n     P s\\<rbrakk>\n    \\<Longrightarrow> wp \\<pi> c (Q s) s", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>HTset_r\n                 (\\<lambda>c' s'.\n                     (case c' of PCall p \\<Rightarrow> (p, s'), p, s)\n                     \\<in> R)\n                 \\<pi> {(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>};\n        P s; (P, p, Q) \\<in> \\<Theta>; c = PCall p\\<rbrakk>\n       \\<Longrightarrow> wp \\<pi> (PCall p) (Q s) s", "apply (rule assms(2)[where P=P])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p P' p' Q'.\n       \\<lbrakk>HTset_r\n                 (\\<lambda>c' s'.\n                     (case c' of PCall p \\<Rightarrow> (p, s'), p, s)\n                     \\<in> R)\n                 \\<pi> {(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>};\n        P s; (P, p, Q) \\<in> \\<Theta>; c = PCall p;\n        (P', p', Q') \\<in> \\<Theta>\\<rbrakk>\n       \\<Longrightarrow> HT \\<pi>\n                          (\\<lambda>s'.\n                              ((p', s'), p, s) \\<in> R \\<and> P' s')\n                          (PCall p') Q'\n 2. \\<And>p.\n       \\<lbrakk>HTset_r\n                 (\\<lambda>c' s'.\n                     (case c' of PCall p \\<Rightarrow> (p, s'), p, s)\n                     \\<in> R)\n                 \\<pi> {(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>};\n        P s; (P, p, Q) \\<in> \\<Theta>; c = PCall p\\<rbrakk>\n       \\<Longrightarrow> (P, p, Q) \\<in> \\<Theta>\n 3. \\<And>p.\n       \\<lbrakk>HTset_r\n                 (\\<lambda>c' s'.\n                     (case c' of PCall p \\<Rightarrow> (p, s'), p, s)\n                     \\<in> R)\n                 \\<pi> {(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>};\n        P s; (P, p, Q) \\<in> \\<Theta>; c = PCall p\\<rbrakk>\n       \\<Longrightarrow> P s", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p P' p' Q'.\n       \\<lbrakk>HTset_r\n                 (\\<lambda>c' s'.\n                     (case c' of PCall p \\<Rightarrow> (p, s'), p, s)\n                     \\<in> R)\n                 \\<pi> {(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>};\n        P s; (P, p, Q) \\<in> \\<Theta>; c = PCall p;\n        (P', p', Q') \\<in> \\<Theta>\\<rbrakk>\n       \\<Longrightarrow> HT \\<pi>\n                          (\\<lambda>s'.\n                              ((p', s'), p, s) \\<in> R \\<and> P' s')\n                          (PCall p') Q'", "unfolding HTset_r_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p P' p' Q'.\n       \\<lbrakk>\\<forall>(P, c, Q)\n                         \\<in>{(P, PCall p, Q) |P p Q.\n                               (P, p, Q) \\<in> \\<Theta>}.\n                   HT \\<pi>\n                    (\\<lambda>sa.\n                        (case c of PCall p \\<Rightarrow> (p, sa), p, s)\n                        \\<in> R \\<and>\n                        P sa)\n                    c Q;\n        P s; (P, p, Q) \\<in> \\<Theta>; c = PCall p;\n        (P', p', Q') \\<in> \\<Theta>\\<rbrakk>\n       \\<Longrightarrow> HT \\<pi>\n                          (\\<lambda>s'.\n                              ((p', s'), p, s) \\<in> R \\<and> P' s')\n                          (PCall p') Q'", "proof goal_cases"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p P' p' Q'.\n       \\<lbrakk>\\<forall>(P, c, Q)\n                         \\<in>{(P, PCall p, Q) |P p Q.\n                               (P, p, Q) \\<in> \\<Theta>}.\n                   HT \\<pi>\n                    (\\<lambda>sa.\n                        (case c of PCall p \\<Rightarrow> (p, sa), p, s)\n                        \\<in> R \\<and>\n                        P sa)\n                    c Q;\n        P s; (P, p, Q) \\<in> \\<Theta>; c = PCall p;\n        (P', p', Q') \\<in> \\<Theta>\\<rbrakk>\n       \\<Longrightarrow> HT \\<pi>\n                          (\\<lambda>s'.\n                              ((p', s'), p, s) \\<in> R \\<and> P' s')\n                          (PCall p') Q'", "case (1 p P' p' Q')"], ["proof (state)\nthis:\n  \\<forall>(P, c, Q)\\<in>{(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>}.\n     HT \\<pi>\n      (\\<lambda>sa.\n          (case c of PCall p \\<Rightarrow> (p, sa), p, s) \\<in> R \\<and>\n          P sa)\n      c Q\n  P s\n  (P, p, Q) \\<in> \\<Theta>\n  c = PCall p\n  (P', p', Q') \\<in> \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<And>p P' p' Q'.\n       \\<lbrakk>\\<forall>(P, c, Q)\n                         \\<in>{(P, PCall p, Q) |P p Q.\n                               (P, p, Q) \\<in> \\<Theta>}.\n                   HT \\<pi>\n                    (\\<lambda>sa.\n                        (case c of PCall p \\<Rightarrow> (p, sa), p, s)\n                        \\<in> R \\<and>\n                        P sa)\n                    c Q;\n        P s; (P, p, Q) \\<in> \\<Theta>; c = PCall p;\n        (P', p', Q') \\<in> \\<Theta>\\<rbrakk>\n       \\<Longrightarrow> HT \\<pi>\n                          (\\<lambda>s'.\n                              ((p', s'), p, s) \\<in> R \\<and> P' s')\n                          (PCall p') Q'", "from \"1\"(1)[rule_format, of \"(P',PCall p',Q')\", simplified] \"1\"(2-)"], ["proof (chain)\npicking this:\n  (P', p', Q') \\<in> \\<Theta> \\<Longrightarrow>\n  HT \\<pi> (\\<lambda>sa. ((p', sa), p, s) \\<in> R \\<and> P' sa) (PCall p')\n   Q'\n  P s\n  (P, p, Q) \\<in> \\<Theta>\n  c = PCall p\n  (P', p', Q') \\<in> \\<Theta>", "show ?case"], ["proof (prove)\nusing this:\n  (P', p', Q') \\<in> \\<Theta> \\<Longrightarrow>\n  HT \\<pi> (\\<lambda>sa. ((p', sa), p, s) \\<in> R \\<and> P' sa) (PCall p')\n   Q'\n  P s\n  (P, p, Q) \\<in> \\<Theta>\n  c = PCall p\n  (P', p', Q') \\<in> \\<Theta>\n\ngoal (1 subgoal):\n 1. HT \\<pi> (\\<lambda>s'. ((p', s'), p, s) \\<in> R \\<and> P' s') (PCall p')\n     Q'", "by auto"], ["proof (state)\nthis:\n  HT \\<pi> (\\<lambda>s'. ((p', s'), p, s) \\<in> R \\<and> P' s') (PCall p')\n   Q'\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  HTset \\<pi> {(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>}\n\ngoal (1 subgoal):\n 1. \\<forall>(P, p, Q)\\<in>\\<Theta>. HT \\<pi> P (PCall p) Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  HTset \\<pi> {(P, PCall p, Q) |P p Q. (P, p, Q) \\<in> \\<Theta>}\n\ngoal (1 subgoal):\n 1. \\<forall>(P, p, Q)\\<in>\\<Theta>. HT \\<pi> P (PCall p) Q", "by (auto simp: HTset_def)"], ["proof (state)\nthis:\n  \\<forall>(P, p, Q)\\<in>\\<Theta>. HT \\<pi> P (PCall p) Q\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Completeness of While-Rule\\<close>"], ["", "text \\<open>Idea: Use \\<open>wlp\\<close> as invariant\\<close>"], ["", "lemma wlp_whileI'_complete:\n  assumes \"wlp \\<pi> (WHILE b DO c) Q s\\<^sub>0\"\n  obtains I where\n    \"I s\\<^sub>0\"\n    \"\\<And>s. I s \\<Longrightarrow> if bval b s then wlp \\<pi> c I s else Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>I.\n        \\<lbrakk>I s\\<^sub>0;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>I.\n        \\<lbrakk>I s\\<^sub>0;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?I2 s\\<^sub>0\n 2. \\<And>s.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>I s\\<^sub>0;\n                    \\<And>s.\n                       I s \\<Longrightarrow>\n                       if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        ?I2 s\\<rbrakk>\n       \\<Longrightarrow> if bval b s then wlp \\<pi> c ?I2 s else Q s", "let ?I = \"wlp \\<pi> (WHILE b DO c) Q\""], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>I.\n        \\<lbrakk>I s\\<^sub>0;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?I2 s\\<^sub>0\n 2. \\<And>s.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>I s\\<^sub>0;\n                    \\<And>s.\n                       I s \\<Longrightarrow>\n                       if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        ?I2 s\\<rbrakk>\n       \\<Longrightarrow> if bval b s then wlp \\<pi> c ?I2 s else Q s", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>I.\n        \\<lbrakk>I s\\<^sub>0;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?I2 s\\<^sub>0\n 2. \\<And>s.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>I s\\<^sub>0;\n                    \\<And>s.\n                       I s \\<Longrightarrow>\n                       if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        ?I2 s\\<rbrakk>\n       \\<Longrightarrow> if bval b s then wlp \\<pi> c ?I2 s else Q s", "show \"?I s\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp \\<pi> (WHILE b DO c) Q s\\<^sub>0", "by fact"], ["proof (state)\nthis:\n  wlp \\<pi> (WHILE b DO c) Q s\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>I s\\<^sub>0;\n                    \\<And>s.\n                       I s \\<Longrightarrow>\n                       if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        wlp \\<pi> (WHILE b DO c) Q s\\<rbrakk>\n       \\<Longrightarrow> if bval b s\n                         then wlp \\<pi> c (wlp \\<pi> (WHILE b DO c) Q) s\n                         else Q s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>I s\\<^sub>0;\n                    \\<And>s.\n                       I s \\<Longrightarrow>\n                       if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        wlp \\<pi> (WHILE b DO c) Q s\\<rbrakk>\n       \\<Longrightarrow> if bval b s\n                         then wlp \\<pi> c (wlp \\<pi> (WHILE b DO c) Q) s\n                         else Q s", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>I s\\<^sub>0;\n                    \\<And>s.\n                       I s \\<Longrightarrow>\n                       if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        wlp \\<pi> (WHILE b DO c) Q s\\<rbrakk>\n       \\<Longrightarrow> if bval b s\n                         then wlp \\<pi> c (wlp \\<pi> (WHILE b DO c) Q) s\n                         else Q s", "assume \"?I s\""], ["proof (state)\nthis:\n  wlp \\<pi> (WHILE b DO c) Q s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>I s\\<^sub>0;\n                    \\<And>s.\n                       I s \\<Longrightarrow>\n                       if bval b s then wlp \\<pi> c I s else Q s\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        wlp \\<pi> (WHILE b DO c) Q s\\<rbrakk>\n       \\<Longrightarrow> if bval b s\n                         then wlp \\<pi> c (wlp \\<pi> (WHILE b DO c) Q) s\n                         else Q s", "then"], ["proof (chain)\npicking this:\n  wlp \\<pi> (WHILE b DO c) Q s", "show \"if bval b s then wlp \\<pi> c ?I s else Q s\""], ["proof (prove)\nusing this:\n  wlp \\<pi> (WHILE b DO c) Q s\n\ngoal (1 subgoal):\n 1. if bval b s then wlp \\<pi> c (wlp \\<pi> (WHILE b DO c) Q) s else Q s", "apply (subst (asm) wlp_while_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. if bval b s then wlp \\<pi> c (wlp \\<pi> (WHILE b DO c) Q) s\n    else Q s \\<Longrightarrow>\n    if bval b s then wlp \\<pi> c (wlp \\<pi> (WHILE b DO c) Q) s else Q s", "."], ["proof (state)\nthis:\n  if bval b s then wlp \\<pi> c (wlp \\<pi> (WHILE b DO c) Q) s else Q s\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  wlp \\<pi> (WHILE b DO c) Q ?s2 \\<Longrightarrow>\n  if bval b ?s2 then wlp \\<pi> c (wlp \\<pi> (WHILE b DO c) Q) ?s2 else Q ?s2\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Idea: Remaining loop iterations as variant\\<close>"], ["", "inductive count_it for \\<pi> b c where\n  \"\\<not>bval b s \\<Longrightarrow> count_it \\<pi> b c s 0\"\n| \"\\<lbrakk>bval b s; \\<pi>: (c,s) \\<Rightarrow> s'; count_it \\<pi> b c s' n \\<rbrakk> \\<Longrightarrow> count_it \\<pi> b c s (Suc n )\""], ["", "lemma count_it_determ:\n  \"count_it \\<pi> b c s n \\<Longrightarrow> count_it \\<pi> b c s n' \\<Longrightarrow> n' = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>count_it \\<pi> b c s n; count_it \\<pi> b c s n'\\<rbrakk>\n    \\<Longrightarrow> n' = n", "apply (induction arbitrary: n' rule: count_it.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s n'.\n       \\<lbrakk>\\<not> bval b s; count_it \\<pi> b c s n'\\<rbrakk>\n       \\<Longrightarrow> n' = 0\n 2. \\<And>s s' n n'.\n       \\<lbrakk>bval b s; \\<pi>: (c, s) \\<Rightarrow> s';\n        count_it \\<pi> b c s' n;\n        \\<And>n'. count_it \\<pi> b c s' n' \\<Longrightarrow> n' = n;\n        count_it \\<pi> b c s n'\\<rbrakk>\n       \\<Longrightarrow> n' = Suc n", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> bval b s_; count_it \\<pi> b c s_ n'_\\<rbrakk>\n    \\<Longrightarrow> n'_ = 0", "using count_it.cases"], ["proof (prove)\nusing this:\n  \\<lbrakk>count_it ?\\<pi> ?b ?c ?a1.0 ?a2.0;\n   \\<And>s.\n      \\<lbrakk>?a1.0 = s; ?a2.0 = 0; \\<not> bval ?b s\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>s s' n.\n      \\<lbrakk>?a1.0 = s; ?a2.0 = Suc n; bval ?b s;\n       ?\\<pi>: (?c, s) \\<Rightarrow> s'; count_it ?\\<pi> ?b ?c s' n\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> bval b s_; count_it \\<pi> b c s_ n'_\\<rbrakk>\n    \\<Longrightarrow> n'_ = 0", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s' n n'.\n       \\<lbrakk>bval b s; \\<pi>: (c, s) \\<Rightarrow> s';\n        count_it \\<pi> b c s' n;\n        \\<And>n'. count_it \\<pi> b c s' n' \\<Longrightarrow> n' = n;\n        count_it \\<pi> b c s n'\\<rbrakk>\n       \\<Longrightarrow> n' = Suc n", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bval b s_; \\<pi>: (c, s_) \\<Rightarrow> s'_;\n     count_it \\<pi> b c s'_ n_;\n     \\<And>n'. count_it \\<pi> b c s'_ n' \\<Longrightarrow> n' = n_;\n     count_it \\<pi> b c s_ n'_\\<rbrakk>\n    \\<Longrightarrow> n'_ = Suc n_", "by (metis big_step_determ count_it.cases)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma count_it_ex:   \n  assumes \"\\<pi>: (WHILE b DO c,s) \\<Rightarrow> t\"\n  shows \"\\<exists>n. count_it \\<pi> b c s n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n. count_it \\<pi> b c s n", "using assms"], ["proof (prove)\nusing this:\n  \\<pi>: (WHILE b DO c, s) \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<exists>n. count_it \\<pi> b c s n", "apply (induction \\<pi> \"WHILE b DO c\" s t arbitrary: b c)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b s \\<pi> c.\n       \\<not> bval b s \\<Longrightarrow> Ex (count_it \\<pi> b c s)\n 2. \\<And>b s\\<^sub>1 \\<pi> c s\\<^sub>2 s\\<^sub>3.\n       \\<lbrakk>bval b s\\<^sub>1;\n        \\<pi>: (c, s\\<^sub>1) \\<Rightarrow> s\\<^sub>2;\n        \\<And>b ca.\n           c = WHILE b DO ca \\<Longrightarrow>\n           \\<exists>a. count_it \\<pi> b ca s\\<^sub>1 a;\n        \\<pi>: (WHILE b DO c, s\\<^sub>2) \\<Rightarrow> s\\<^sub>3;\n        Ex (count_it \\<pi> b c s\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> Ex (count_it \\<pi> b c s\\<^sub>1)", "apply (auto intro: count_it.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"variant \\<pi> b c s \\<equiv> THE n. count_it \\<pi> b c s n\""], ["", "lemma variant_decreases:\n  assumes STEPB: \"bval b s\" \n  assumes STEPC: \"\\<pi>: (c,s) \\<Rightarrow> s'\" \n  assumes TERM: \"\\<pi>: (WHILE b DO c,s') \\<Rightarrow> t\"\n  shows \"variant \\<pi> b c s' < variant \\<pi> b c s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. variant \\<pi> b c s' < variant \\<pi> b c s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. variant \\<pi> b c s' < variant \\<pi> b c s", "from count_it_ex[OF TERM]"], ["proof (chain)\npicking this:\n  \\<exists>n. count_it \\<pi> b c s' n", "obtain n' where CI': \"count_it \\<pi> b c s' n'\""], ["proof (prove)\nusing this:\n  \\<exists>n. count_it \\<pi> b c s' n\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        count_it \\<pi> b c s' n' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  count_it \\<pi> b c s' n'\n\ngoal (1 subgoal):\n 1. variant \\<pi> b c s' < variant \\<pi> b c s", "moreover"], ["proof (state)\nthis:\n  count_it \\<pi> b c s' n'\n\ngoal (1 subgoal):\n 1. variant \\<pi> b c s' < variant \\<pi> b c s", "from count_it.intros(2)[OF STEPB STEPC this]"], ["proof (chain)\npicking this:\n  count_it \\<pi> b c s (Suc n')", "have \"count_it \\<pi> b c s (Suc n')\""], ["proof (prove)\nusing this:\n  count_it \\<pi> b c s (Suc n')\n\ngoal (1 subgoal):\n 1. count_it \\<pi> b c s (Suc n')", "."], ["proof (state)\nthis:\n  count_it \\<pi> b c s (Suc n')\n\ngoal (1 subgoal):\n 1. variant \\<pi> b c s' < variant \\<pi> b c s", "ultimately"], ["proof (chain)\npicking this:\n  count_it \\<pi> b c s' n'\n  count_it \\<pi> b c s (Suc n')", "have \"variant \\<pi> b c s' = n'\" \"variant \\<pi> b c s = Suc n'\""], ["proof (prove)\nusing this:\n  count_it \\<pi> b c s' n'\n  count_it \\<pi> b c s (Suc n')\n\ngoal (1 subgoal):\n 1. variant \\<pi> b c s' = n' &&& variant \\<pi> b c s = Suc n'", "unfolding variant_def"], ["proof (prove)\nusing this:\n  count_it \\<pi> b c s' n'\n  count_it \\<pi> b c s (Suc n')\n\ngoal (1 subgoal):\n 1. (THE n. count_it \\<pi> b c s' n) = n' &&&\n    (THE n. count_it \\<pi> b c s n) = Suc n'", "using count_it_determ"], ["proof (prove)\nusing this:\n  count_it \\<pi> b c s' n'\n  count_it \\<pi> b c s (Suc n')\n  \\<lbrakk>count_it ?\\<pi> ?b ?c ?s ?n;\n   count_it ?\\<pi> ?b ?c ?s ?n'\\<rbrakk>\n  \\<Longrightarrow> ?n' = ?n\n\ngoal (1 subgoal):\n 1. (THE n. count_it \\<pi> b c s' n) = n' &&&\n    (THE n. count_it \\<pi> b c s n) = Suc n'", "by blast+"], ["proof (state)\nthis:\n  variant \\<pi> b c s' = n'\n  variant \\<pi> b c s = Suc n'\n\ngoal (1 subgoal):\n 1. variant \\<pi> b c s' < variant \\<pi> b c s", "thus ?thesis"], ["proof (prove)\nusing this:\n  variant \\<pi> b c s' = n'\n  variant \\<pi> b c s = Suc n'\n\ngoal (1 subgoal):\n 1. variant \\<pi> b c s' < variant \\<pi> b c s", "by simp"], ["proof (state)\nthis:\n  variant \\<pi> b c s' < variant \\<pi> b c s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wp_whileI'_complete:\n  fixes \\<pi> b c\n  defines \"R\\<equiv>measure (variant \\<pi> b c)\"\n  assumes \"wp \\<pi> (WHILE b DO c) Q s\\<^sub>0\"\n  obtains I where\n    \"wf R\"\n    \"I s\\<^sub>0\"\n    \"\\<And>s. I s \\<Longrightarrow> if bval b s then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s',s)\\<in>R) s else Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>I.\n        \\<lbrakk>wf R; I s\\<^sub>0;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s\n            then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n            else Q s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<And>I.\n        \\<lbrakk>wf R; I s\\<^sub>0;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s\n            then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n            else Q s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    wf R\n 2. (\\<And>I.\n        \\<lbrakk>wf R; I s\\<^sub>0;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s\n            then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n            else Q s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?I2 s\\<^sub>0\n 3. \\<And>s.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>wf R; I s\\<^sub>0;\n                    \\<And>s.\n                       I s \\<Longrightarrow>\n                       if bval b s\n                       then wp \\<pi> c\n                             (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n                       else Q s\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        ?I2 s\\<rbrakk>\n       \\<Longrightarrow> if bval b s\n                         then wp \\<pi> c\n                               (\\<lambda>s'. ?I2 s' \\<and> (s', s) \\<in> R)\n                               s\n                         else Q s", "show \\<open>wf R\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf R", "unfolding R_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (measure (variant \\<pi> b c))", "by auto"], ["proof (state)\nthis:\n  wf R\n\ngoal (2 subgoals):\n 1. (\\<And>I.\n        \\<lbrakk>wf R; I s\\<^sub>0;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s\n            then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n            else Q s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?I2 s\\<^sub>0\n 2. \\<And>s.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>wf R; I s\\<^sub>0;\n                    \\<And>s.\n                       I s \\<Longrightarrow>\n                       if bval b s\n                       then wp \\<pi> c\n                             (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n                       else Q s\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        ?I2 s\\<rbrakk>\n       \\<Longrightarrow> if bval b s\n                         then wp \\<pi> c\n                               (\\<lambda>s'. ?I2 s' \\<and> (s', s) \\<in> R)\n                               s\n                         else Q s", "let ?I = \"wp \\<pi> (WHILE b DO c) Q\""], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>I.\n        \\<lbrakk>wf R; I s\\<^sub>0;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s\n            then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n            else Q s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?I2 s\\<^sub>0\n 2. \\<And>s.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>wf R; I s\\<^sub>0;\n                    \\<And>s.\n                       I s \\<Longrightarrow>\n                       if bval b s\n                       then wp \\<pi> c\n                             (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n                       else Q s\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        ?I2 s\\<rbrakk>\n       \\<Longrightarrow> if bval b s\n                         then wp \\<pi> c\n                               (\\<lambda>s'. ?I2 s' \\<and> (s', s) \\<in> R)\n                               s\n                         else Q s", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>I.\n        \\<lbrakk>wf R; I s\\<^sub>0;\n         \\<And>s.\n            I s \\<Longrightarrow>\n            if bval b s\n            then wp \\<pi> c (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n            else Q s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    ?I2 s\\<^sub>0\n 2. \\<And>s.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>wf R; I s\\<^sub>0;\n                    \\<And>s.\n                       I s \\<Longrightarrow>\n                       if bval b s\n                       then wp \\<pi> c\n                             (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n                       else Q s\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        ?I2 s\\<rbrakk>\n       \\<Longrightarrow> if bval b s\n                         then wp \\<pi> c\n                               (\\<lambda>s'. ?I2 s' \\<and> (s', s) \\<in> R)\n                               s\n                         else Q s", "show \"?I s\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp \\<pi> (WHILE b DO c) Q s\\<^sub>0", "by fact"], ["proof (state)\nthis:\n  wp \\<pi> (WHILE b DO c) Q s\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>wf R; I s\\<^sub>0;\n                    \\<And>s.\n                       I s \\<Longrightarrow>\n                       if bval b s\n                       then wp \\<pi> c\n                             (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n                       else Q s\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        wp \\<pi> (WHILE b DO c) Q s\\<rbrakk>\n       \\<Longrightarrow> if bval b s\n                         then wp \\<pi> c\n                               (\\<lambda>s'.\n                                   wp \\<pi> (WHILE b DO c) Q s' \\<and>\n                                   (s', s) \\<in> R)\n                               s\n                         else Q s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>wf R; I s\\<^sub>0;\n                    \\<And>s.\n                       I s \\<Longrightarrow>\n                       if bval b s\n                       then wp \\<pi> c\n                             (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n                       else Q s\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        wp \\<pi> (WHILE b DO c) Q s\\<rbrakk>\n       \\<Longrightarrow> if bval b s\n                         then wp \\<pi> c\n                               (\\<lambda>s'.\n                                   wp \\<pi> (WHILE b DO c) Q s' \\<and>\n                                   (s', s) \\<in> R)\n                               s\n                         else Q s", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>wf R; I s\\<^sub>0;\n                    \\<And>s.\n                       I s \\<Longrightarrow>\n                       if bval b s\n                       then wp \\<pi> c\n                             (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n                       else Q s\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        wp \\<pi> (WHILE b DO c) Q s\\<rbrakk>\n       \\<Longrightarrow> if bval b s\n                         then wp \\<pi> c\n                               (\\<lambda>s'.\n                                   wp \\<pi> (WHILE b DO c) Q s' \\<and>\n                                   (s', s) \\<in> R)\n                               s\n                         else Q s", "assume \"?I s\""], ["proof (state)\nthis:\n  wp \\<pi> (WHILE b DO c) Q s\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>\\<And>I.\n                   \\<lbrakk>wf R; I s\\<^sub>0;\n                    \\<And>s.\n                       I s \\<Longrightarrow>\n                       if bval b s\n                       then wp \\<pi> c\n                             (\\<lambda>s'. I s' \\<and> (s', s) \\<in> R) s\n                       else Q s\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        wp \\<pi> (WHILE b DO c) Q s\\<rbrakk>\n       \\<Longrightarrow> if bval b s\n                         then wp \\<pi> c\n                               (\\<lambda>s'.\n                                   wp \\<pi> (WHILE b DO c) Q s' \\<and>\n                                   (s', s) \\<in> R)\n                               s\n                         else Q s", "then"], ["proof (chain)\npicking this:\n  wp \\<pi> (WHILE b DO c) Q s", "show \"if bval b s then wp \\<pi> c (\\<lambda>s'. ?I s' \\<and> (s',s)\\<in>R) s else Q s\""], ["proof (prove)\nusing this:\n  wp \\<pi> (WHILE b DO c) Q s\n\ngoal (1 subgoal):\n 1. if bval b s\n    then wp \\<pi> c\n          (\\<lambda>s'. wp \\<pi> (WHILE b DO c) Q s' \\<and> (s', s) \\<in> R)\n          s\n    else Q s", "apply (subst (asm) wp_while_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. if bval b s then wp \\<pi> c (wp \\<pi> (WHILE b DO c) Q) s\n    else Q s \\<Longrightarrow>\n    if bval b s\n    then wp \\<pi> c\n          (\\<lambda>s'. wp \\<pi> (WHILE b DO c) Q s' \\<and> (s', s) \\<in> R)\n          s\n    else Q s", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wp \\<pi> c (wp \\<pi> (WHILE b DO c) Q) s; bval b s\\<rbrakk>\n    \\<Longrightarrow> wp \\<pi> c\n                       (\\<lambda>s'.\n                           wp \\<pi> (WHILE b DO c) Q s' \\<and>\n                           (s', s) \\<in> R)\n                       s", "by (auto simp: wp_def R_def intro: variant_decreases)"], ["proof (state)\nthis:\n  if bval b s\n  then wp \\<pi> c\n        (\\<lambda>s'. wp \\<pi> (WHILE b DO c) Q s' \\<and> (s', s) \\<in> R) s\n  else Q s\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  wp \\<pi> (WHILE b DO c) Q ?s2 \\<Longrightarrow>\n  if bval b ?s2\n  then wp \\<pi> c\n        (\\<lambda>s'. wp \\<pi> (WHILE b DO c) Q s' \\<and> (s', ?s2) \\<in> R)\n        ?s2\n  else Q ?s2\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}