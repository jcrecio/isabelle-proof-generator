{"file_name": "/home/qj213/afp-2021-10-22/thys/Simplex/Simplex_Auxiliary.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Simplex", "problem_names": ["lemma map_reindex:\n  assumes \"\\<forall> i < length l. g (l ! i) = f i\"\n  shows \"map f [0..<length l] = map g l\"", "lemma map_parametrize_idx: \n  \"map f l = map (\\<lambda>i. f (l ! i)) [0..<length l]\"", "lemma last_tl:\n  assumes \"length l > 1\"\n  shows \"last (tl l) = last l\"", "lemma hd_tl:\n  assumes \"length l > 1\"\n  shows \"hd (tl l) = l ! 1\"", "lemma butlast_empty_conv_length:\n  shows \"(butlast l = []) = (length l \\<le> 1)\"", "lemma butlast_nth:\n  assumes \"n + 1 < length l\"\n  shows \"butlast l ! n = l ! n\"", "lemma last_take_conv_nth:\n  assumes \"0 < n\" \"n \\<le> length l\"\n  shows \"last (take n l) = l ! (n - 1)\"", "lemma tl_nth:\n  assumes \"l \\<noteq> []\" \n  shows \"tl l ! n = l ! (n + 1)\"", "lemma interval_3split:\n  assumes \"i < n\"\n  shows \"[0..<n] = [0..<i] @ [i] @ [i+1..<n]\"", "lemma list_min_Min[simp]: \"l \\<noteq> [] \\<Longrightarrow> list_min l = Min (set l)\"", "lemma min_satisfying_None:\n  \"min_satisfying P l = None \\<longrightarrow> \n    (\\<forall> x \\<in> set l. \\<not> P x)\"", "lemma min_satisfying_Some: \n  \"min_satisfying P l = Some x \\<longrightarrow> \n      x \\<in> set l \\<and> P x \\<and> (\\<forall> x' \\<in> set l. x' < x \\<longrightarrow> \\<not> P x')\"", "lemma min_element:\n  fixes k :: nat\n  assumes \"\\<exists> (m::nat). P m\"\n  shows \"\\<exists> mm. P mm \\<and> (\\<forall> m'. m' < mm \\<longrightarrow> \\<not> P m')\"", "lemma finite_fun_args:\n  assumes \"finite A\" \"\\<forall> a \\<in> A. finite (B a)\"\n  shows \"finite {f. (\\<forall> a. if a \\<in> A then f a \\<in> B a else f a = f0 a)}\" (is \"finite (?F A)\")", "lemma foldl_mapping_update:\n  assumes \"X \\<in> set l\" \"distinct (map f l)\"\n  shows \"Mapping.lookup (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i l) (f X) = Some (g X)\""], "translations": [["", "lemma map_reindex:\n  assumes \"\\<forall> i < length l. g (l ! i) = f i\"\n  shows \"map f [0..<length l] = map g l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map f [0..<length l] = map g l", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>i<length l. g (l ! i) = f i\n\ngoal (1 subgoal):\n 1. map f [0..<length l] = map g l", "by (induct l rule: rev_induct) (auto simp add: nth_append split: if_splits)"], ["", "lemma map_parametrize_idx: \n  \"map f l = map (\\<lambda>i. f (l ! i)) [0..<length l]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map f l = map (\\<lambda>i. f (l ! i)) [0..<length l]", "by (induct l rule: rev_induct) (auto simp add: nth_append)"], ["", "lemma last_tl:\n  assumes \"length l > 1\"\n  shows \"last (tl l) = last l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (tl l) = last l", "using assms"], ["proof (prove)\nusing this:\n  1 < length l\n\ngoal (1 subgoal):\n 1. last (tl l) = last l", "by (induct l) auto"], ["", "lemma hd_tl:\n  assumes \"length l > 1\"\n  shows \"hd (tl l) = l ! 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (tl l) = l ! 1", "using assms"], ["proof (prove)\nusing this:\n  1 < length l\n\ngoal (1 subgoal):\n 1. hd (tl l) = l ! 1", "by (induct l) (auto simp add: hd_conv_nth)"], ["", "lemma butlast_empty_conv_length:\n  shows \"(butlast l = []) = (length l \\<le> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (butlast l = []) = (length l \\<le> 1)", "by (induct l) (auto split: if_splits)"], ["", "lemma butlast_nth:\n  assumes \"n + 1 < length l\"\n  shows \"butlast l ! n = l ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. butlast l ! n = l ! n", "using assms"], ["proof (prove)\nusing this:\n  n + 1 < length l\n\ngoal (1 subgoal):\n 1. butlast l ! n = l ! n", "by (induct l rule: rev_induct) (auto simp add: nth_append)"], ["", "lemma last_take_conv_nth:\n  assumes \"0 < n\" \"n \\<le> length l\"\n  shows \"last (take n l) = l ! (n - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (take n l) = l ! (n - 1)", "using assms"], ["proof (prove)\nusing this:\n  0 < n\n  n \\<le> length l\n\ngoal (1 subgoal):\n 1. last (take n l) = l ! (n - 1)", "by (cases \"l = []\") (auto simp add: last_conv_nth min_def)"], ["", "lemma tl_nth:\n  assumes \"l \\<noteq> []\" \n  shows \"tl l ! n = l ! (n + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tl l ! n = l ! (n + 1)", "using assms"], ["proof (prove)\nusing this:\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. tl l ! n = l ! (n + 1)", "by (induct l) auto"], ["", "lemma interval_3split:\n  assumes \"i < n\"\n  shows \"[0..<n] = [0..<i] @ [i] @ [i+1..<n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [0..<n] = [0..<i] @ [i] @ [i + 1..<n]", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. [0..<n] = [0..<i] @ [i] @ [i + 1..<n]", "have \"[0..<n] = [0..<i + 1] @ [i + 1..<n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [0..<n] = [0..<i + 1] @ [i + 1..<n]", "using upt_add_eq_append[of 0 \"i + 1\" \"n - i - 1\"]"], ["proof (prove)\nusing this:\n  0 \\<le> i + 1 \\<Longrightarrow>\n  [0..<i + 1 + (n - i - 1)] = [0..<i + 1] @ [i + 1..<i + 1 + (n - i - 1)]\n\ngoal (1 subgoal):\n 1. [0..<n] = [0..<i + 1] @ [i + 1..<n]", "using \\<open>i < n\\<close>"], ["proof (prove)\nusing this:\n  0 \\<le> i + 1 \\<Longrightarrow>\n  [0..<i + 1 + (n - i - 1)] = [0..<i + 1] @ [i + 1..<i + 1 + (n - i - 1)]\n  i < n\n\ngoal (1 subgoal):\n 1. [0..<n] = [0..<i + 1] @ [i + 1..<n]", "by (auto simp del: upt_Suc)"], ["proof (state)\nthis:\n  [0..<n] = [0..<i + 1] @ [i + 1..<n]\n\ngoal (1 subgoal):\n 1. [0..<n] = [0..<i] @ [i] @ [i + 1..<n]", "then"], ["proof (chain)\npicking this:\n  [0..<n] = [0..<i + 1] @ [i + 1..<n]", "show ?thesis"], ["proof (prove)\nusing this:\n  [0..<n] = [0..<i + 1] @ [i + 1..<n]\n\ngoal (1 subgoal):\n 1. [0..<n] = [0..<i] @ [i] @ [i + 1..<n]", "by simp"], ["proof (state)\nthis:\n  [0..<n] = [0..<i] @ [i] @ [i + 1..<n]\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation \"list_min l \\<equiv> foldl min (hd l) (tl l)\""], ["", "lemma list_min_Min[simp]: \"l \\<noteq> [] \\<Longrightarrow> list_min l = Min (set l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<noteq> [] \\<Longrightarrow> list_min l = Min (set l)", "proof (induct l rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] \\<noteq> [] \\<Longrightarrow> list_min [] = Min (set [])\n 2. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> [] \\<Longrightarrow> list_min xs = Min (set xs);\n        xs @ [x] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> list_min (xs @ [x]) = Min (set (xs @ [x]))", "case (snoc a l')"], ["proof (state)\nthis:\n  l' \\<noteq> [] \\<Longrightarrow> list_min l' = Min (set l')\n  l' @ [a] \\<noteq> []\n\ngoal (2 subgoals):\n 1. [] \\<noteq> [] \\<Longrightarrow> list_min [] = Min (set [])\n 2. \\<And>x xs.\n       \\<lbrakk>xs \\<noteq> [] \\<Longrightarrow> list_min xs = Min (set xs);\n        xs @ [x] \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> list_min (xs @ [x]) = Min (set (xs @ [x]))", "then"], ["proof (chain)\npicking this:\n  l' \\<noteq> [] \\<Longrightarrow> list_min l' = Min (set l')\n  l' @ [a] \\<noteq> []", "show ?case"], ["proof (prove)\nusing this:\n  l' \\<noteq> [] \\<Longrightarrow> list_min l' = Min (set l')\n  l' @ [a] \\<noteq> []\n\ngoal (1 subgoal):\n 1. list_min (l' @ [a]) = Min (set (l' @ [a]))", "by (cases \"l' = []\") (auto simp add: ac_simps)"], ["proof (state)\nthis:\n  list_min (l' @ [a]) = Min (set (l' @ [a]))\n\ngoal (1 subgoal):\n 1. [] \\<noteq> [] \\<Longrightarrow> list_min [] = Min (set [])", "qed simp"], ["", "(* Minimal element of a list satisfying the given property *)"], ["", "definition min_satisfying :: \"(('a::linorder) \\<Rightarrow> bool) \\<Rightarrow> 'a list \\<Rightarrow> 'a option\" where\n  \"min_satisfying P l \\<equiv>\n    let xs = filter P l in\n    if xs = [] then None else Some (list_min xs)\""], ["", "lemma min_satisfying_None:\n  \"min_satisfying P l = None \\<longrightarrow> \n    (\\<forall> x \\<in> set l. \\<not> P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_satisfying P l = None \\<longrightarrow>\n    (\\<forall>x\\<in>set l. \\<not> P x)", "unfolding min_satisfying_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if filter P l = [] then None else Some (list_min (filter P l))) =\n    None \\<longrightarrow>\n    (\\<forall>x\\<in>set l. \\<not> P x)", "by (simp add: filter_empty_conv)"], ["", "lemma min_satisfying_Some: \n  \"min_satisfying P l = Some x \\<longrightarrow> \n      x \\<in> set l \\<and> P x \\<and> (\\<forall> x' \\<in> set l. x' < x \\<longrightarrow> \\<not> P x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_satisfying P l = Some x \\<longrightarrow>\n    x \\<in> set l \\<and>\n    P x \\<and> (\\<forall>x'\\<in>set l. x' < x \\<longrightarrow> \\<not> P x')", "proof (safe)"], ["proof (state)\ngoal (3 subgoals):\n 1. min_satisfying P l = Some x \\<Longrightarrow> x \\<in> set l\n 2. min_satisfying P l = Some x \\<Longrightarrow> P x\n 3. \\<And>x'.\n       \\<lbrakk>min_satisfying P l = Some x; x' \\<in> set l; x' < x;\n        P x'\\<rbrakk>\n       \\<Longrightarrow> False", "let ?xs = \"filter P l\""], ["proof (state)\ngoal (3 subgoals):\n 1. min_satisfying P l = Some x \\<Longrightarrow> x \\<in> set l\n 2. min_satisfying P l = Some x \\<Longrightarrow> P x\n 3. \\<And>x'.\n       \\<lbrakk>min_satisfying P l = Some x; x' \\<in> set l; x' < x;\n        P x'\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"min_satisfying P l = Some x\""], ["proof (state)\nthis:\n  min_satisfying P l = Some x\n\ngoal (3 subgoals):\n 1. min_satisfying P l = Some x \\<Longrightarrow> x \\<in> set l\n 2. min_satisfying P l = Some x \\<Longrightarrow> P x\n 3. \\<And>x'.\n       \\<lbrakk>min_satisfying P l = Some x; x' \\<in> set l; x' < x;\n        P x'\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  min_satisfying P l = Some x", "have \"set ?xs \\<noteq> {}\" \"x = Min (set ?xs)\""], ["proof (prove)\nusing this:\n  min_satisfying P l = Some x\n\ngoal (1 subgoal):\n 1. set (filter P l) \\<noteq> {} &&& x = Min (set (filter P l))", "unfolding min_satisfying_def Let_def"], ["proof (prove)\nusing this:\n  (if filter P l = [] then None else Some (list_min (filter P l))) = Some x\n\ngoal (1 subgoal):\n 1. set (filter P l) \\<noteq> {} &&& x = Min (set (filter P l))", "by (auto split: if_splits simp add: filter_empty_conv)"], ["proof (state)\nthis:\n  set (filter P l) \\<noteq> {}\n  x = Min (set (filter P l))\n\ngoal (3 subgoals):\n 1. min_satisfying P l = Some x \\<Longrightarrow> x \\<in> set l\n 2. min_satisfying P l = Some x \\<Longrightarrow> P x\n 3. \\<And>x'.\n       \\<lbrakk>min_satisfying P l = Some x; x' \\<in> set l; x' < x;\n        P x'\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  set (filter P l) \\<noteq> {}\n  x = Min (set (filter P l))", "show \"x \\<in> set l\" \"P x\""], ["proof (prove)\nusing this:\n  set (filter P l) \\<noteq> {}\n  x = Min (set (filter P l))\n\ngoal (1 subgoal):\n 1. x \\<in> set l &&& P x", "using Min_in[of \"set ?xs\"]"], ["proof (prove)\nusing this:\n  set (filter P l) \\<noteq> {}\n  x = Min (set (filter P l))\n  \\<lbrakk>finite (set (filter P l)); set (filter P l) \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Min (set (filter P l)) \\<in> set (filter P l)\n\ngoal (1 subgoal):\n 1. x \\<in> set l &&& P x", "by simp_all"], ["proof (state)\nthis:\n  x \\<in> set l\n  P x\n\ngoal (1 subgoal):\n 1. \\<And>x'.\n       \\<lbrakk>min_satisfying P l = Some x; x' \\<in> set l; x' < x;\n        P x'\\<rbrakk>\n       \\<Longrightarrow> False", "fix x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x'.\n       \\<lbrakk>min_satisfying P l = Some x; x' \\<in> set l; x' < x;\n        P x'\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"x' \\<in> set l\" \"P x'\" \"x' < x\""], ["proof (state)\nthis:\n  x' \\<in> set l\n  P x'\n  x' < x\n\ngoal (1 subgoal):\n 1. \\<And>x'.\n       \\<lbrakk>min_satisfying P l = Some x; x' \\<in> set l; x' < x;\n        P x'\\<rbrakk>\n       \\<Longrightarrow> False", "have \"x' \\<notin> set ?xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x' \\<notin> set (filter P l)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> x' \\<notin> set (filter P l) \\<Longrightarrow> False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> x' \\<notin> set (filter P l)\n\ngoal (1 subgoal):\n 1. \\<not> x' \\<notin> set (filter P l) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> x' \\<notin> set (filter P l)", "have \"x' \\<ge> x\""], ["proof (prove)\nusing this:\n  \\<not> x' \\<notin> set (filter P l)\n\ngoal (1 subgoal):\n 1. x \\<le> x'", "using \\<open>x = Min (set ?xs)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> x' \\<notin> set (filter P l)\n  x = Min (set (filter P l))\n\ngoal (1 subgoal):\n 1. x \\<le> x'", "by simp"], ["proof (state)\nthis:\n  x \\<le> x'\n\ngoal (1 subgoal):\n 1. \\<not> x' \\<notin> set (filter P l) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  x \\<le> x'", "show False"], ["proof (prove)\nusing this:\n  x \\<le> x'\n\ngoal (1 subgoal):\n 1. False", "using \\<open>x' < x\\<close>"], ["proof (prove)\nusing this:\n  x \\<le> x'\n  x' < x\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x' \\<notin> set (filter P l)\n\ngoal (1 subgoal):\n 1. \\<And>x'.\n       \\<lbrakk>min_satisfying P l = Some x; x' \\<in> set l; x' < x;\n        P x'\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  x' \\<notin> set (filter P l)", "show \"False\""], ["proof (prove)\nusing this:\n  x' \\<notin> set (filter P l)\n\ngoal (1 subgoal):\n 1. False", "using \\<open>x' \\<in> set l\\<close> \\<open>P x'\\<close>"], ["proof (prove)\nusing this:\n  x' \\<notin> set (filter P l)\n  x' \\<in> set l\n  P x'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "(* -------------------------------------------------------------------------- *)\n(* MoreNat *)\n(* -------------------------------------------------------------------------- *)"], ["", "lemma min_element:\n  fixes k :: nat\n  assumes \"\\<exists> (m::nat). P m\"\n  shows \"\\<exists> mm. P mm \\<and> (\\<forall> m'. m' < mm \\<longrightarrow> \\<not> P m')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "from assms"], ["proof (chain)\npicking this:\n  \\<exists>m. P m", "obtain m where \"P m\""], ["proof (prove)\nusing this:\n  \\<exists>m. P m\n\ngoal (1 subgoal):\n 1. (\\<And>m. P m \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  P m\n\ngoal (1 subgoal):\n 1. \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "proof (cases \"\\<forall>m'<m. \\<not> P m'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>m'<m. \\<not> P m' \\<Longrightarrow>\n    \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')\n 2. \\<not> (\\<forall>m'<m. \\<not> P m') \\<Longrightarrow>\n    \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "case True"], ["proof (state)\nthis:\n  \\<forall>m'<m. \\<not> P m'\n\ngoal (2 subgoals):\n 1. \\<forall>m'<m. \\<not> P m' \\<Longrightarrow>\n    \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')\n 2. \\<not> (\\<forall>m'<m. \\<not> P m') \\<Longrightarrow>\n    \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "then"], ["proof (chain)\npicking this:\n  \\<forall>m'<m. \\<not> P m'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>m'<m. \\<not> P m'\n\ngoal (1 subgoal):\n 1. \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "using \\<open>P m\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>m'<m. \\<not> P m'\n  P m\n\ngoal (1 subgoal):\n 1. \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "by auto"], ["proof (state)\nthis:\n  \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m'<m. \\<not> P m') \\<Longrightarrow>\n    \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m'<m. \\<not> P m') \\<Longrightarrow>\n    \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>m'<m. \\<not> P m')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m'<m. \\<not> P m') \\<Longrightarrow>\n    \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>m'<m. \\<not> P m')", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>m'<m. \\<not> P m')\n\ngoal (1 subgoal):\n 1. \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "proof (induct m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> (\\<forall>m'<0. \\<not> P m') \\<Longrightarrow>\n    \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')\n 2. \\<And>m.\n       \\<lbrakk>\\<not> (\\<forall>m'<m. \\<not> P m') \\<Longrightarrow>\n                \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m');\n        \\<not> (\\<forall>m'<Suc m. \\<not> P m')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>mm.\n                            P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "case 0"], ["proof (state)\nthis:\n  \\<not> (\\<forall>m'<0. \\<not> P m')\n\ngoal (2 subgoals):\n 1. \\<not> (\\<forall>m'<0. \\<not> P m') \\<Longrightarrow>\n    \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')\n 2. \\<And>m.\n       \\<lbrakk>\\<not> (\\<forall>m'<m. \\<not> P m') \\<Longrightarrow>\n                \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m');\n        \\<not> (\\<forall>m'<Suc m. \\<not> P m')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>mm.\n                            P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>m'<0. \\<not> P m')", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>m'<0. \\<not> P m')\n\ngoal (1 subgoal):\n 1. \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "by auto"], ["proof (state)\nthis:\n  \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> (\\<forall>m'<m. \\<not> P m') \\<Longrightarrow>\n                \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m');\n        \\<not> (\\<forall>m'<Suc m. \\<not> P m')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>mm.\n                            P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> (\\<forall>m'<m. \\<not> P m') \\<Longrightarrow>\n                \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m');\n        \\<not> (\\<forall>m'<Suc m. \\<not> P m')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>mm.\n                            P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "case (Suc m')"], ["proof (state)\nthis:\n  \\<not> (\\<forall>m'a<m'. \\<not> P m'a) \\<Longrightarrow>\n  \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')\n  \\<not> (\\<forall>m'a<Suc m'. \\<not> P m'a)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> (\\<forall>m'<m. \\<not> P m') \\<Longrightarrow>\n                \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m');\n        \\<not> (\\<forall>m'<Suc m. \\<not> P m')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>mm.\n                            P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>m'a<m'. \\<not> P m'a) \\<Longrightarrow>\n  \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')\n  \\<not> (\\<forall>m'a<Suc m'. \\<not> P m'a)", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>m'a<m'. \\<not> P m'a) \\<Longrightarrow>\n  \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')\n  \\<not> (\\<forall>m'a<Suc m'. \\<not> P m'a)\n\ngoal (1 subgoal):\n 1. \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')", "by (cases \"\\<not> (\\<forall>m'a<m'. \\<not> P m'a)\") auto"], ["proof (state)\nthis:\n  \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>mm. P mm \\<and> (\\<forall>m'<mm. \\<not> P m')\n\ngoal:\nNo subgoals!", "qed"], ["", "(* -------------------------------------------------------------------------- *)\n(* MoreFun *)\n(* -------------------------------------------------------------------------- *)"], ["", "lemma finite_fun_args:\n  assumes \"finite A\" \"\\<forall> a \\<in> A. finite (B a)\"\n  shows \"finite {f. (\\<forall> a. if a \\<in> A then f a \\<in> B a else f a = f0 a)}\" (is \"finite (?F A)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {f. \\<forall>a. if a \\<in> A then f a \\<in> B a else f a = f0 a}", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  \\<forall>a\\<in>A. finite (B a)\n\ngoal (1 subgoal):\n 1. finite {f. \\<forall>a. if a \\<in> A then f a \\<in> B a else f a = f0 a}", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>a\\<in>{}. finite (B a) \\<Longrightarrow>\n    finite {f. \\<forall>a. if a \\<in> {} then f a \\<in> B a else f a = f0 a}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>a\\<in>F. finite (B a) \\<Longrightarrow>\n        finite\n         {f. \\<forall>a. if a \\<in> F then f a \\<in> B a else f a = f0 a};\n        \\<forall>a\\<in>insert x F. finite (B a)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. \\<forall>a.\n                                 if a \\<in> insert x F then f a \\<in> B a\n                                 else f a = f0 a}", "case empty"], ["proof (state)\nthis:\n  \\<forall>a\\<in>{}. finite (B a)\n\ngoal (2 subgoals):\n 1. \\<forall>a\\<in>{}. finite (B a) \\<Longrightarrow>\n    finite {f. \\<forall>a. if a \\<in> {} then f a \\<in> B a else f a = f0 a}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>a\\<in>F. finite (B a) \\<Longrightarrow>\n        finite\n         {f. \\<forall>a. if a \\<in> F then f a \\<in> B a else f a = f0 a};\n        \\<forall>a\\<in>insert x F. finite (B a)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. \\<forall>a.\n                                 if a \\<in> insert x F then f a \\<in> B a\n                                 else f a = f0 a}", "have \"?F {} = {\\<lambda> x. f0 x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f. \\<forall>a. if a \\<in> {} then f a \\<in> B a else f a = f0 a} = {f0}", "by auto"], ["proof (state)\nthis:\n  {f. \\<forall>a. if a \\<in> {} then f a \\<in> B a else f a = f0 a} = {f0}\n\ngoal (2 subgoals):\n 1. \\<forall>a\\<in>{}. finite (B a) \\<Longrightarrow>\n    finite {f. \\<forall>a. if a \\<in> {} then f a \\<in> B a else f a = f0 a}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>a\\<in>F. finite (B a) \\<Longrightarrow>\n        finite\n         {f. \\<forall>a. if a \\<in> F then f a \\<in> B a else f a = f0 a};\n        \\<forall>a\\<in>insert x F. finite (B a)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. \\<forall>a.\n                                 if a \\<in> insert x F then f a \\<in> B a\n                                 else f a = f0 a}", "then"], ["proof (chain)\npicking this:\n  {f. \\<forall>a. if a \\<in> {} then f a \\<in> B a else f a = f0 a} = {f0}", "show ?case"], ["proof (prove)\nusing this:\n  {f. \\<forall>a. if a \\<in> {} then f a \\<in> B a else f a = f0 a} = {f0}\n\ngoal (1 subgoal):\n 1. finite {f. \\<forall>a. if a \\<in> {} then f a \\<in> B a else f a = f0 a}", "by auto"], ["proof (state)\nthis:\n  finite {f. \\<forall>a. if a \\<in> {} then f a \\<in> B a else f a = f0 a}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>a\\<in>F. finite (B a) \\<Longrightarrow>\n        finite\n         {f. \\<forall>a. if a \\<in> F then f a \\<in> B a else f a = f0 a};\n        \\<forall>a\\<in>insert x F. finite (B a)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. \\<forall>a.\n                                 if a \\<in> insert x F then f a \\<in> B a\n                                 else f a = f0 a}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>a\\<in>F. finite (B a) \\<Longrightarrow>\n        finite\n         {f. \\<forall>a. if a \\<in> F then f a \\<in> B a else f a = f0 a};\n        \\<forall>a\\<in>insert x F. finite (B a)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. \\<forall>a.\n                                 if a \\<in> insert x F then f a \\<in> B a\n                                 else f a = f0 a}", "case (insert a A')"], ["proof (state)\nthis:\n  finite A'\n  a \\<notin> A'\n  \\<forall>a\\<in>A'. finite (B a) \\<Longrightarrow>\n  finite {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}\n  \\<forall>a\\<in>insert a A'. finite (B a)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>a\\<in>F. finite (B a) \\<Longrightarrow>\n        finite\n         {f. \\<forall>a. if a \\<in> F then f a \\<in> B a else f a = f0 a};\n        \\<forall>a\\<in>insert x F. finite (B a)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. \\<forall>a.\n                                 if a \\<in> insert x F then f a \\<in> B a\n                                 else f a = f0 a}", "then"], ["proof (chain)\npicking this:\n  finite A'\n  a \\<notin> A'\n  \\<forall>a\\<in>A'. finite (B a) \\<Longrightarrow>\n  finite {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}\n  \\<forall>a\\<in>insert a A'. finite (B a)", "have \"finite (?F A')\""], ["proof (prove)\nusing this:\n  finite A'\n  a \\<notin> A'\n  \\<forall>a\\<in>A'. finite (B a) \\<Longrightarrow>\n  finite {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}\n  \\<forall>a\\<in>insert a A'. finite (B a)\n\ngoal (1 subgoal):\n 1. finite {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}", "by auto"], ["proof (state)\nthis:\n  finite {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>a\\<in>F. finite (B a) \\<Longrightarrow>\n        finite\n         {f. \\<forall>a. if a \\<in> F then f a \\<in> B a else f a = f0 a};\n        \\<forall>a\\<in>insert x F. finite (B a)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. \\<forall>a.\n                                 if a \\<in> insert x F then f a \\<in> B a\n                                 else f a = f0 a}", "let ?f = \"\\<lambda> f. {f'. (\\<forall> a'. if a = a' then f' a \\<in> B a else f' a' = f a')}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>a\\<in>F. finite (B a) \\<Longrightarrow>\n        finite\n         {f. \\<forall>a. if a \\<in> F then f a \\<in> B a else f a = f0 a};\n        \\<forall>a\\<in>insert x F. finite (B a)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. \\<forall>a.\n                                 if a \\<in> insert x F then f a \\<in> B a\n                                 else f a = f0 a}", "have \"\\<forall> f \\<in> ?F A'. finite (?f f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>{f. \\<forall>a.\n                          if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n       finite\n        {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> {f. \\<forall>a.\n                      if a \\<in> A' then f a \\<in> B a\n                      else f a = f0 a} \\<Longrightarrow>\n       finite\n        {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'}", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> {f. \\<forall>a.\n                      if a \\<in> A' then f a \\<in> B a\n                      else f a = f0 a} \\<Longrightarrow>\n       finite\n        {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'}", "assume \"f \\<in> ?F A'\""], ["proof (state)\nthis:\n  f \\<in> {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> {f. \\<forall>a.\n                      if a \\<in> A' then f a \\<in> B a\n                      else f a = f0 a} \\<Longrightarrow>\n       finite\n        {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'}", "then"], ["proof (chain)\npicking this:\n  f \\<in> {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}", "have \"?f f = (\\<lambda> b. f (a := b)) ` B a\""], ["proof (prove)\nusing this:\n  f \\<in> {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}\n\ngoal (1 subgoal):\n 1. {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'} =\n    fun_upd f a ` B a", "by (force split: if_splits)"], ["proof (state)\nthis:\n  {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'} =\n  fun_upd f a ` B a\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> {f. \\<forall>a.\n                      if a \\<in> A' then f a \\<in> B a\n                      else f a = f0 a} \\<Longrightarrow>\n       finite\n        {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'}", "then"], ["proof (chain)\npicking this:\n  {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'} =\n  fun_upd f a ` B a", "show \"finite (?f f)\""], ["proof (prove)\nusing this:\n  {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'} =\n  fun_upd f a ` B a\n\ngoal (1 subgoal):\n 1. finite\n     {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'}", "using \\<open>\\<forall>a\\<in>insert a A'. finite (B a)\\<close>"], ["proof (prove)\nusing this:\n  {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'} =\n  fun_upd f a ` B a\n  \\<forall>a\\<in>insert a A'. finite (B a)\n\ngoal (1 subgoal):\n 1. finite\n     {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'}", "by auto"], ["proof (state)\nthis:\n  finite {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>f\\<in>{f. \\<forall>a.\n                        if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n     finite\n      {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>a\\<in>F. finite (B a) \\<Longrightarrow>\n        finite\n         {f. \\<forall>a. if a \\<in> F then f a \\<in> B a else f a = f0 a};\n        \\<forall>a\\<in>insert x F. finite (B a)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. \\<forall>a.\n                                 if a \\<in> insert x F then f a \\<in> B a\n                                 else f a = f0 a}", "then"], ["proof (chain)\npicking this:\n  \\<forall>f\\<in>{f. \\<forall>a.\n                        if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n     finite\n      {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'}", "have \"finite (\\<Union> (?f ` (?F A')))\""], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>{f. \\<forall>a.\n                        if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n     finite\n      {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'}\n\ngoal (1 subgoal):\n 1. finite\n     (\\<Union>f\\<in>{f. \\<forall>a.\n                           if a \\<in> A' then f a \\<in> B a\n                           else f a = f0 a}.\n         {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'})", "using \\<open>finite (?F A')\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>{f. \\<forall>a.\n                        if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n     finite\n      {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'}\n  finite {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}\n\ngoal (1 subgoal):\n 1. finite\n     (\\<Union>f\\<in>{f. \\<forall>a.\n                           if a \\<in> A' then f a \\<in> B a\n                           else f a = f0 a}.\n         {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'})", "by auto"], ["proof (state)\nthis:\n  finite\n   (\\<Union>f\\<in>{f. \\<forall>a.\n                         if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n       {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'})\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>a\\<in>F. finite (B a) \\<Longrightarrow>\n        finite\n         {f. \\<forall>a. if a \\<in> F then f a \\<in> B a else f a = f0 a};\n        \\<forall>a\\<in>insert x F. finite (B a)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. \\<forall>a.\n                                 if a \\<in> insert x F then f a \\<in> B a\n                                 else f a = f0 a}", "moreover"], ["proof (state)\nthis:\n  finite\n   (\\<Union>f\\<in>{f. \\<forall>a.\n                         if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n       {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'})\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>a\\<in>F. finite (B a) \\<Longrightarrow>\n        finite\n         {f. \\<forall>a. if a \\<in> F then f a \\<in> B a else f a = f0 a};\n        \\<forall>a\\<in>insert x F. finite (B a)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. \\<forall>a.\n                                 if a \\<in> insert x F then f a \\<in> B a\n                                 else f a = f0 a}", "have \"?F (insert a A') = \\<Union> (?f ` (?F A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f. \\<forall>aa.\n           if aa \\<in> insert a A' then f aa \\<in> B aa else f aa = f0 aa} =\n    (\\<Union>f\\<in>{f. \\<forall>a.\n                          if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n        {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {f. \\<forall>aa.\n           if aa \\<in> insert a A' then f aa \\<in> B aa else f aa = f0 aa}\n    \\<subseteq> (\\<Union>f\\<in>{f. \\<forall>a.\nif a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n                    {f'.\n                     \\<forall>a'.\n                        if a = a' then f' a \\<in> B a else f' a' = f a'})\n 2. (\\<Union>f\\<in>{f. \\<forall>a.\n                          if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n        {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'})\n    \\<subseteq> {f. \\<forall>aa.\n                       if aa \\<in> insert a A' then f aa \\<in> B aa\n                       else f aa = f0 aa}", "show \"?F (insert a A') \\<subseteq> \\<Union> (?f ` (?F A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f. \\<forall>aa.\n           if aa \\<in> insert a A' then f aa \\<in> B aa else f aa = f0 aa}\n    \\<subseteq> (\\<Union>f\\<in>{f. \\<forall>a.\nif a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n                    {f'.\n                     \\<forall>a'.\n                        if a = a' then f' a \\<in> B a else f' a' = f a'})", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {f. \\<forall>aa.\n                      if aa \\<in> insert a A' then f aa \\<in> B aa\n                      else f aa = f0 aa} \\<Longrightarrow>\n       x \\<in> (\\<Union>f\\<in>{f. \\<forall>a.\n                                     if a \\<in> A' then f a \\<in> B a\n                                     else f a = f0 a}.\n                   {f'.\n                    \\<forall>a'.\n                       if a = a' then f' a \\<in> B a else f' a' = f a'})", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {f. \\<forall>aa.\n                      if aa \\<in> insert a A' then f aa \\<in> B aa\n                      else f aa = f0 aa} \\<Longrightarrow>\n       x \\<in> (\\<Union>f\\<in>{f. \\<forall>a.\n                                     if a \\<in> A' then f a \\<in> B a\n                                     else f a = f0 a}.\n                   {f'.\n                    \\<forall>a'.\n                       if a = a' then f' a \\<in> B a else f' a' = f a'})", "assume \"f \\<in> ?F (insert a A')\""], ["proof (state)\nthis:\n  f \\<in> {f. \\<forall>aa.\n                 if aa \\<in> insert a A' then f aa \\<in> B aa\n                 else f aa = f0 aa}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {f. \\<forall>aa.\n                      if aa \\<in> insert a A' then f aa \\<in> B aa\n                      else f aa = f0 aa} \\<Longrightarrow>\n       x \\<in> (\\<Union>f\\<in>{f. \\<forall>a.\n                                     if a \\<in> A' then f a \\<in> B a\n                                     else f a = f0 a}.\n                   {f'.\n                    \\<forall>a'.\n                       if a = a' then f' a \\<in> B a else f' a' = f a'})", "then"], ["proof (chain)\npicking this:\n  f \\<in> {f. \\<forall>aa.\n                 if aa \\<in> insert a A' then f aa \\<in> B aa\n                 else f aa = f0 aa}", "have \"f \\<in> ?f (f (a := f0 a))\" \"f (a := f0 a) \\<in> ?F A'\""], ["proof (prove)\nusing this:\n  f \\<in> {f. \\<forall>aa.\n                 if aa \\<in> insert a A' then f aa \\<in> B aa\n                 else f aa = f0 aa}\n\ngoal (1 subgoal):\n 1. f \\<in> {f'.\n             \\<forall>a'.\n                if a = a' then f' a \\<in> B a\n                else f' a' = (f(a := f0 a)) a'} &&&\n    f(a := f0 a)\n    \\<in> {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}", "using \\<open>a \\<notin> A'\\<close>"], ["proof (prove)\nusing this:\n  f \\<in> {f. \\<forall>aa.\n                 if aa \\<in> insert a A' then f aa \\<in> B aa\n                 else f aa = f0 aa}\n  a \\<notin> A'\n\ngoal (1 subgoal):\n 1. f \\<in> {f'.\n             \\<forall>a'.\n                if a = a' then f' a \\<in> B a\n                else f' a' = (f(a := f0 a)) a'} &&&\n    f(a := f0 a)\n    \\<in> {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}", "by auto"], ["proof (state)\nthis:\n  f \\<in> {f'.\n           \\<forall>a'.\n              if a = a' then f' a \\<in> B a else f' a' = (f(a := f0 a)) a'}\n  f(a := f0 a)\n  \\<in> {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {f. \\<forall>aa.\n                      if aa \\<in> insert a A' then f aa \\<in> B aa\n                      else f aa = f0 aa} \\<Longrightarrow>\n       x \\<in> (\\<Union>f\\<in>{f. \\<forall>a.\n                                     if a \\<in> A' then f a \\<in> B a\n                                     else f a = f0 a}.\n                   {f'.\n                    \\<forall>a'.\n                       if a = a' then f' a \\<in> B a else f' a' = f a'})", "then"], ["proof (chain)\npicking this:\n  f \\<in> {f'.\n           \\<forall>a'.\n              if a = a' then f' a \\<in> B a else f' a' = (f(a := f0 a)) a'}\n  f(a := f0 a)\n  \\<in> {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}", "show \"f \\<in> \\<Union> (?f ` (?F A'))\""], ["proof (prove)\nusing this:\n  f \\<in> {f'.\n           \\<forall>a'.\n              if a = a' then f' a \\<in> B a else f' a' = (f(a := f0 a)) a'}\n  f(a := f0 a)\n  \\<in> {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}\n\ngoal (1 subgoal):\n 1. f \\<in> (\\<Union>f\\<in>{f. \\<forall>a.\n                                  if a \\<in> A' then f a \\<in> B a\n                                  else f a = f0 a}.\n                {f'.\n                 \\<forall>a'.\n                    if a = a' then f' a \\<in> B a else f' a' = f a'})", "by blast"], ["proof (state)\nthis:\n  f \\<in> (\\<Union>f\\<in>{f. \\<forall>a.\n                                if a \\<in> A' then f a \\<in> B a\n                                else f a = f0 a}.\n              {f'.\n               \\<forall>a'.\n                  if a = a' then f' a \\<in> B a else f' a' = f a'})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {f. \\<forall>aa.\n         if aa \\<in> insert a A' then f aa \\<in> B aa else f aa = f0 aa}\n  \\<subseteq> (\\<Union>f\\<in>{f. \\<forall>a.\n                                    if a \\<in> A' then f a \\<in> B a\n                                    else f a = f0 a}.\n                  {f'.\n                   \\<forall>a'.\n                      if a = a' then f' a \\<in> B a else f' a' = f a'})\n\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>{f. \\<forall>a.\n                          if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n        {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'})\n    \\<subseteq> {f. \\<forall>aa.\n                       if aa \\<in> insert a A' then f aa \\<in> B aa\n                       else f aa = f0 aa}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>{f. \\<forall>a.\n                          if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n        {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'})\n    \\<subseteq> {f. \\<forall>aa.\n                       if aa \\<in> insert a A' then f aa \\<in> B aa\n                       else f aa = f0 aa}", "show \"\\<Union> (?f ` (?F A')) \\<subseteq> ?F (insert a A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>f\\<in>{f. \\<forall>a.\n                          if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n        {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'})\n    \\<subseteq> {f. \\<forall>aa.\n                       if aa \\<in> insert a A' then f aa \\<in> B aa\n                       else f aa = f0 aa}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<Union>f\\<in>{f. \\<forall>a.\n                                     if a \\<in> A' then f a \\<in> B a\n                                     else f a = f0 a}.\n                   {f'.\n                    \\<forall>a'.\n                       if a = a' then f' a \\<in> B a\n                       else f' a' = f a'}) \\<Longrightarrow>\n       x \\<in> {f. \\<forall>aa.\n                      if aa \\<in> insert a A' then f aa \\<in> B aa\n                      else f aa = f0 aa}", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<Union>f\\<in>{f. \\<forall>a.\n                                     if a \\<in> A' then f a \\<in> B a\n                                     else f a = f0 a}.\n                   {f'.\n                    \\<forall>a'.\n                       if a = a' then f' a \\<in> B a\n                       else f' a' = f a'}) \\<Longrightarrow>\n       x \\<in> {f. \\<forall>aa.\n                      if aa \\<in> insert a A' then f aa \\<in> B aa\n                      else f aa = f0 aa}", "assume \"f \\<in> \\<Union> (?f ` (?F A'))\""], ["proof (state)\nthis:\n  f \\<in> (\\<Union>f\\<in>{f. \\<forall>a.\n                                if a \\<in> A' then f a \\<in> B a\n                                else f a = f0 a}.\n              {f'.\n               \\<forall>a'.\n                  if a = a' then f' a \\<in> B a else f' a' = f a'})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<Union>f\\<in>{f. \\<forall>a.\n                                     if a \\<in> A' then f a \\<in> B a\n                                     else f a = f0 a}.\n                   {f'.\n                    \\<forall>a'.\n                       if a = a' then f' a \\<in> B a\n                       else f' a' = f a'}) \\<Longrightarrow>\n       x \\<in> {f. \\<forall>aa.\n                      if aa \\<in> insert a A' then f aa \\<in> B aa\n                      else f aa = f0 aa}", "then"], ["proof (chain)\npicking this:\n  f \\<in> (\\<Union>f\\<in>{f. \\<forall>a.\n                                if a \\<in> A' then f a \\<in> B a\n                                else f a = f0 a}.\n              {f'.\n               \\<forall>a'.\n                  if a = a' then f' a \\<in> B a else f' a' = f a'})", "obtain f0 where \"f0 \\<in> ?F A'\" \"f \\<in> ?f f0\""], ["proof (prove)\nusing this:\n  f \\<in> (\\<Union>f\\<in>{f. \\<forall>a.\n                                if a \\<in> A' then f a \\<in> B a\n                                else f a = f0 a}.\n              {f'.\n               \\<forall>a'.\n                  if a = a' then f' a \\<in> B a else f' a' = f a'})\n\ngoal (1 subgoal):\n 1. (\\<And>f0a.\n        \\<lbrakk>f0a\n                 \\<in> {f. \\<forall>a.\n                              if a \\<in> A' then f a \\<in> B a\n                              else f a = f0 a};\n         f \\<in> {f'.\n                  \\<forall>a'.\n                     if a = a' then f' a \\<in> B a\n                     else f' a' = f0a a'}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f0 \\<in> {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}\n  f \\<in> {f'.\n           \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f0 a'}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<Union>f\\<in>{f. \\<forall>a.\n                                     if a \\<in> A' then f a \\<in> B a\n                                     else f a = f0 a}.\n                   {f'.\n                    \\<forall>a'.\n                       if a = a' then f' a \\<in> B a\n                       else f' a' = f a'}) \\<Longrightarrow>\n       x \\<in> {f. \\<forall>aa.\n                      if aa \\<in> insert a A' then f aa \\<in> B aa\n                      else f aa = f0 aa}", "then"], ["proof (chain)\npicking this:\n  f0 \\<in> {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}\n  f \\<in> {f'.\n           \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f0 a'}", "show \"f \\<in> ?F (insert a A')\""], ["proof (prove)\nusing this:\n  f0 \\<in> {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}\n  f \\<in> {f'.\n           \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f0 a'}\n\ngoal (1 subgoal):\n 1. f \\<in> {f. \\<forall>aa.\n                   if aa \\<in> insert a A' then f aa \\<in> B aa\n                   else f aa = f0 aa}", "using \\<open>a \\<notin> A'\\<close>"], ["proof (prove)\nusing this:\n  f0 \\<in> {f. \\<forall>a. if a \\<in> A' then f a \\<in> B a else f a = f0 a}\n  f \\<in> {f'.\n           \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f0 a'}\n  a \\<notin> A'\n\ngoal (1 subgoal):\n 1. f \\<in> {f. \\<forall>aa.\n                   if aa \\<in> insert a A' then f aa \\<in> B aa\n                   else f aa = f0 aa}", "by (force split: if_splits)"], ["proof (state)\nthis:\n  f \\<in> {f. \\<forall>aa.\n                 if aa \\<in> insert a A' then f aa \\<in> B aa\n                 else f aa = f0 aa}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Union>f\\<in>{f. \\<forall>a.\n                        if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n      {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'})\n  \\<subseteq> {f. \\<forall>aa.\n                     if aa \\<in> insert a A' then f aa \\<in> B aa\n                     else f aa = f0 aa}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {f. \\<forall>aa.\n         if aa \\<in> insert a A' then f aa \\<in> B aa else f aa = f0 aa} =\n  (\\<Union>f\\<in>{f. \\<forall>a.\n                        if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n      {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'})\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>a\\<in>F. finite (B a) \\<Longrightarrow>\n        finite\n         {f. \\<forall>a. if a \\<in> F then f a \\<in> B a else f a = f0 a};\n        \\<forall>a\\<in>insert x F. finite (B a)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. \\<forall>a.\n                                 if a \\<in> insert x F then f a \\<in> B a\n                                 else f a = f0 a}", "ultimately"], ["proof (chain)\npicking this:\n  finite\n   (\\<Union>f\\<in>{f. \\<forall>a.\n                         if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n       {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'})\n  {f. \\<forall>aa.\n         if aa \\<in> insert a A' then f aa \\<in> B aa else f aa = f0 aa} =\n  (\\<Union>f\\<in>{f. \\<forall>a.\n                        if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n      {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'})", "show ?case"], ["proof (prove)\nusing this:\n  finite\n   (\\<Union>f\\<in>{f. \\<forall>a.\n                         if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n       {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'})\n  {f. \\<forall>aa.\n         if aa \\<in> insert a A' then f aa \\<in> B aa else f aa = f0 aa} =\n  (\\<Union>f\\<in>{f. \\<forall>a.\n                        if a \\<in> A' then f a \\<in> B a else f a = f0 a}.\n      {f'. \\<forall>a'. if a = a' then f' a \\<in> B a else f' a' = f a'})\n\ngoal (1 subgoal):\n 1. finite\n     {f. \\<forall>aa.\n            if aa \\<in> insert a A' then f aa \\<in> B aa else f aa = f0 aa}", "by simp"], ["proof (state)\nthis:\n  finite\n   {f. \\<forall>aa.\n          if aa \\<in> insert a A' then f aa \\<in> B aa else f aa = f0 aa}\n\ngoal:\nNo subgoals!", "qed"], ["", "(* -------------------------------------------------------------------------- *)\n(* MoreMapping *)\n(* -------------------------------------------------------------------------- *)"], ["", "lemma foldl_mapping_update:\n  assumes \"X \\<in> set l\" \"distinct (map f l)\"\n  shows \"Mapping.lookup (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i l) (f X) = Some (g X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mapping.lookup (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i l)\n     (f X) =\n    Some (g X)", "using assms"], ["proof (prove)\nusing this:\n  X \\<in> set l\n  distinct (map f l)\n\ngoal (1 subgoal):\n 1. Mapping.lookup (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i l)\n     (f X) =\n    Some (g X)", "proof(induct l rule:rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<in> set []; distinct (map f [])\\<rbrakk>\n    \\<Longrightarrow> Mapping.lookup\n                       (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i\n                         [])\n                       (f X) =\n                      Some (g X)\n 2. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>X \\<in> set xs; distinct (map f xs)\\<rbrakk>\n                \\<Longrightarrow> Mapping.lookup\n                                   (foldl\n                                     (\\<lambda>m a.\n   Mapping.update (f a) (g a) m)\n                                     i xs)\n                                   (f X) =\n                                  Some (g X);\n        X \\<in> set (xs @ [x]); distinct (map f (xs @ [x]))\\<rbrakk>\n       \\<Longrightarrow> Mapping.lookup\n                          (foldl\n                            (\\<lambda>m a. Mapping.update (f a) (g a) m) i\n                            (xs @ [x]))\n                          (f X) =\n                         Some (g X)", "case Nil"], ["proof (state)\nthis:\n  X \\<in> set []\n  distinct (map f [])\n\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<in> set []; distinct (map f [])\\<rbrakk>\n    \\<Longrightarrow> Mapping.lookup\n                       (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i\n                         [])\n                       (f X) =\n                      Some (g X)\n 2. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>X \\<in> set xs; distinct (map f xs)\\<rbrakk>\n                \\<Longrightarrow> Mapping.lookup\n                                   (foldl\n                                     (\\<lambda>m a.\n   Mapping.update (f a) (g a) m)\n                                     i xs)\n                                   (f X) =\n                                  Some (g X);\n        X \\<in> set (xs @ [x]); distinct (map f (xs @ [x]))\\<rbrakk>\n       \\<Longrightarrow> Mapping.lookup\n                          (foldl\n                            (\\<lambda>m a. Mapping.update (f a) (g a) m) i\n                            (xs @ [x]))\n                          (f X) =\n                         Some (g X)", "then"], ["proof (chain)\npicking this:\n  X \\<in> set []\n  distinct (map f [])", "show ?case"], ["proof (prove)\nusing this:\n  X \\<in> set []\n  distinct (map f [])\n\ngoal (1 subgoal):\n 1. Mapping.lookup (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i [])\n     (f X) =\n    Some (g X)", "by simp"], ["proof (state)\nthis:\n  Mapping.lookup (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i [])\n   (f X) =\n  Some (g X)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>X \\<in> set xs; distinct (map f xs)\\<rbrakk>\n                \\<Longrightarrow> Mapping.lookup\n                                   (foldl\n                                     (\\<lambda>m a.\n   Mapping.update (f a) (g a) m)\n                                     i xs)\n                                   (f X) =\n                                  Some (g X);\n        X \\<in> set (xs @ [x]); distinct (map f (xs @ [x]))\\<rbrakk>\n       \\<Longrightarrow> Mapping.lookup\n                          (foldl\n                            (\\<lambda>m a. Mapping.update (f a) (g a) m) i\n                            (xs @ [x]))\n                          (f X) =\n                         Some (g X)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>X \\<in> set xs; distinct (map f xs)\\<rbrakk>\n                \\<Longrightarrow> Mapping.lookup\n                                   (foldl\n                                     (\\<lambda>m a.\n   Mapping.update (f a) (g a) m)\n                                     i xs)\n                                   (f X) =\n                                  Some (g X);\n        X \\<in> set (xs @ [x]); distinct (map f (xs @ [x]))\\<rbrakk>\n       \\<Longrightarrow> Mapping.lookup\n                          (foldl\n                            (\\<lambda>m a. Mapping.update (f a) (g a) m) i\n                            (xs @ [x]))\n                          (f X) =\n                         Some (g X)", "case (snoc h t)"], ["proof (state)\nthis:\n  \\<lbrakk>X \\<in> set t; distinct (map f t)\\<rbrakk>\n  \\<Longrightarrow> Mapping.lookup\n                     (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i\n                       t)\n                     (f X) =\n                    Some (g X)\n  X \\<in> set (t @ [h])\n  distinct (map f (t @ [h]))\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>X \\<in> set xs; distinct (map f xs)\\<rbrakk>\n                \\<Longrightarrow> Mapping.lookup\n                                   (foldl\n                                     (\\<lambda>m a.\n   Mapping.update (f a) (g a) m)\n                                     i xs)\n                                   (f X) =\n                                  Some (g X);\n        X \\<in> set (xs @ [x]); distinct (map f (xs @ [x]))\\<rbrakk>\n       \\<Longrightarrow> Mapping.lookup\n                          (foldl\n                            (\\<lambda>m a. Mapping.update (f a) (g a) m) i\n                            (xs @ [x]))\n                          (f X) =\n                         Some (g X)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Mapping.lookup\n     (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i (t @ [h]))\n     (f X) =\n    Some (g X)", "proof (cases \"f h = f X\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f h = f X \\<Longrightarrow>\n    Mapping.lookup\n     (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i (t @ [h]))\n     (f X) =\n    Some (g X)\n 2. f h \\<noteq> f X \\<Longrightarrow>\n    Mapping.lookup\n     (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i (t @ [h]))\n     (f X) =\n    Some (g X)", "case True"], ["proof (state)\nthis:\n  f h = f X\n\ngoal (2 subgoals):\n 1. f h = f X \\<Longrightarrow>\n    Mapping.lookup\n     (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i (t @ [h]))\n     (f X) =\n    Some (g X)\n 2. f h \\<noteq> f X \\<Longrightarrow>\n    Mapping.lookup\n     (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i (t @ [h]))\n     (f X) =\n    Some (g X)", "then"], ["proof (chain)\npicking this:\n  f h = f X", "show ?thesis"], ["proof (prove)\nusing this:\n  f h = f X\n\ngoal (1 subgoal):\n 1. Mapping.lookup\n     (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i (t @ [h]))\n     (f X) =\n    Some (g X)", "using snoc"], ["proof (prove)\nusing this:\n  f h = f X\n  \\<lbrakk>X \\<in> set t; distinct (map f t)\\<rbrakk>\n  \\<Longrightarrow> Mapping.lookup\n                     (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i\n                       t)\n                     (f X) =\n                    Some (g X)\n  X \\<in> set (t @ [h])\n  distinct (map f (t @ [h]))\n\ngoal (1 subgoal):\n 1. Mapping.lookup\n     (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i (t @ [h]))\n     (f X) =\n    Some (g X)", "by (auto simp: lookup_update)"], ["proof (state)\nthis:\n  Mapping.lookup\n   (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i (t @ [h])) (f X) =\n  Some (g X)\n\ngoal (1 subgoal):\n 1. f h \\<noteq> f X \\<Longrightarrow>\n    Mapping.lookup\n     (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i (t @ [h]))\n     (f X) =\n    Some (g X)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f h \\<noteq> f X \\<Longrightarrow>\n    Mapping.lookup\n     (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i (t @ [h]))\n     (f X) =\n    Some (g X)", "case False"], ["proof (state)\nthis:\n  f h \\<noteq> f X\n\ngoal (1 subgoal):\n 1. f h \\<noteq> f X \\<Longrightarrow>\n    Mapping.lookup\n     (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i (t @ [h]))\n     (f X) =\n    Some (g X)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Mapping.lookup\n     (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i (t @ [h]))\n     (f X) =\n    Some (g X)", "by (simp add: lookup_update' False, rule snoc, insert False snoc, auto)"], ["proof (state)\nthis:\n  Mapping.lookup\n   (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i (t @ [h])) (f X) =\n  Some (g X)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Mapping.lookup\n   (foldl (\\<lambda>m a. Mapping.update (f a) (g a) m) i (t @ [h])) (f X) =\n  Some (g X)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}