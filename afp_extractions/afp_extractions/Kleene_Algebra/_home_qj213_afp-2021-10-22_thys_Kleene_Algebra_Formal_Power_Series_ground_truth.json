{"file_name": "/home/qj213/afp-2021-10-22/thys/Kleene_Algebra/Formal_Power_Series.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Kleene_Algebra", "problem_names": ["lemma expand_fps_eq: \"p = q \\<longleftrightarrow> (\\<forall>n. p $ n = q $ n)\"", "lemma fps_ext: \"(\\<And>n. p $ n = q $ n) \\<Longrightarrow> p = q\"", "lemma fps_nth_Abs_fps [simp]: \"Abs_fps f $ n = f n\"", "lemma fps_zero_nth [simp]: \"0 $ n = 0\"", "lemma fps_one_nth_Nil [simp]: \"1 $ [] = 1\"", "lemma fps_one_nth_Cons [simp]: \"1 $ (x # xs) = 0\"", "lemma fps_add_nth [simp]: \"(f + g) $ n = f $ n + g $ n\"", "lemma fps_add_assoc: \"((f::('a,'b::semigroup_add) fps) + g) + h = f + (g + h)\"", "lemma fps_add_comm [simp]: \"(f::('a,'b::ab_semigroup_add) fps) + g = g + f\"", "lemma fps_add_idem [simp]: \"(f::('a,'b::join_semilattice) fps) + f = f\"", "lemma fps_zerol [simp]: \"(f::('a,'b::monoid_add) fps) + 0 = f\"", "lemma fps_zeror [simp]: \"0 + (f::('a,'b::monoid_add) fps) = f\"", "lemma splitset_consl:\n  \"splitset (x # xs) = insert ([], x # xs) (apfst (Cons x) ` splitset xs)\"", "lemma splitset_eq_splitset_fun: \"splitset xs = splitset_fun xs\"", "lemma fps_mult_var:\n  \"(f * g) $ n = \\<Sum>{f $ (fst p) * g $ (snd p) | p. p \\<in> splitset n}\"", "lemma fps_mult_image:\n  \"(f * g) $ n = \\<Sum>((\\<lambda>p. f $ (fst p) * g $ (snd p)) ` splitset n)\"", "lemma splitset_fun_finite [simp]: \"finite (splitset_fun xs)\"", "lemma splitset_finite [simp]: \"finite (splitset xs)\"", "lemma split_append_finite [simp]: \"finite {(p, q). xs = p @ q}\"", "lemma splitset_fun_nonempty [simp]: \"splitset_fun xs \\<noteq> {}\"", "lemma splitset_nonempty [simp]: \"splitset xs \\<noteq> {}\"", "lemma fps_annil [simp]:\n  \"0 * (f::('a::type,'b::{comm_monoid_add,mult_zero}) fps) = 0\"", "lemma fps_annir [simp]:\n  \"(f::('a::type,'b::{comm_monoid_add,mult_zero}) fps) * 0 = 0\"", "lemma fps_distl:\n  \"(f::('a::type,'b::{join_semilattice_zero,semiring}) fps) * (g + h) = (f * g) + (f * h)\"", "lemma fps_distr:\n  \"((f::('a::type,'b::{join_semilattice_zero,semiring}) fps) + g) * h = (f * h) + (g * h)\"", "lemma fps_onel [simp]:\n  \"1 * (f::('a::type,'b::{join_semilattice_zero,monoid_mult,mult_zero}) fps) = f\"", "lemma fps_oner [simp]:\n  \"(f::('a::type,'b::{join_semilattice_zero,monoid_mult,mult_zero}) fps) * 1 = f\"", "lemma splitset_rearrange:\n  fixes F :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> 'b::join_semilattice_zero\"\n  shows \"\\<Sum>{\\<Sum>{F (fst p) (fst q) (snd q) | q. q \\<in> splitset (snd p)} | p. p \\<in> splitset x} =\n         \\<Sum>{\\<Sum>{F (fst q) (snd q) (snd p) | q. q \\<in> splitset (fst p)} | p. p \\<in> splitset x}\"\n    (is \"?lhs = ?rhs\")", "lemma fps_mult_assoc: \"(f::('a::type,'b::dioid_one_zero) fps) * (g * h) = (f * g) * h\"", "lemma expand_fps_less_eq: \"(f::('a,'b::dioid_one_zero) fps) \\<le> g \\<longleftrightarrow> (\\<forall>n. f $ n \\<le> g $ n)\"", "lemma Sum_splitlist_nonempty:\n  \"\\<Sum>{f ys zs |ys zs. xs = ys @ zs} = ((f [] xs)::'a::join_semilattice_zero) + \\<Sum>{f ys zs |ys zs. xs = ys @ zs \\<and> ys \\<noteq> []}\"", "lemma (in left_kleene_algebra) add_star_eq:\n  \"x + y \\<cdot> y\\<^sup>\\<star> \\<cdot> x = y\\<^sup>\\<star> \\<cdot> x\"", "lemma star_fps_Nil [simp]: \"f\\<^sup>\\<star> $ [] = (f $ [])\\<^sup>\\<star>\"", "lemma star_fps_Cons [simp]: \"f\\<^sup>\\<star> $ (x # xs) = (f $ [])\\<^sup>\\<star> \\<cdot> \\<Sum>{f $ y \\<cdot> f\\<^sup>\\<star> $ z |y z. x # xs = y @ z \\<and> y \\<noteq> []}\""], "translations": [["", "lemma expand_fps_eq: \"p = q \\<longleftrightarrow> (\\<forall>n. p $ n = q $ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p = q) = (\\<forall>n. p $ n = q $ n)", "by (simp add: fps_nth_inject [symmetric] fun_eq_iff)"], ["", "lemma fps_ext: \"(\\<And>n. p $ n = q $ n) \\<Longrightarrow> p = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n. p $ n = q $ n) \\<Longrightarrow> p = q", "by (simp add: expand_fps_eq)"], ["", "lemma fps_nth_Abs_fps [simp]: \"Abs_fps f $ n = f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps f $ n = f n", "by (simp add: Abs_fps_inverse)"], ["", "subsection \\<open>Definition of the Basic Elements~0 and~1 and the Basic\nOperations of Addition and Multiplication\\<close>"], ["", "text \\<open>The zero formal power series maps all elements of the monoid\n(all lists) to zero.\\<close>"], ["", "instantiation fps :: (type,zero) zero\nbegin"], ["", "definition zero_fps where\n    \"0 = Abs_fps (\\<lambda>n. 0)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) fps, zero_class)", ".."], ["", "end"], ["", "lemma fps_zero_nth [simp]: \"0 $ n = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 $ n = (0::'a)", "unfolding zero_fps_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. 0::'a) $ n = (0::'a)", "by simp"], ["", "text \\<open>The unit formal power series maps the monoidal unit (the empty\nlist) to one and all other elements to zero.\\<close>"], ["", "instantiation fps :: (type,\"{one,zero}\") one\nbegin"], ["", "definition one_fps where\n    \"1 = Abs_fps (\\<lambda>n. if n = [] then 1 else 0)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) fps, one_class)", ".."], ["", "end"], ["", "lemma fps_one_nth_Nil [simp]: \"1 $ [] = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 $ [] = (1::'a)", "unfolding one_fps_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. if n = [] then 1::'a else (0::'a)) $ [] = (1::'a)", "by simp"], ["", "lemma fps_one_nth_Cons [simp]: \"1 $ (x # xs) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 $ (x # xs) = (0::'a)", "unfolding one_fps_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. if n = [] then 1::'a else (0::'a)) $ (x # xs) =\n    (0::'a)", "by simp"], ["", "text \\<open>Addition of formal power series is the usual pointwise\naddition of functions.\\<close>"], ["", "instantiation fps :: (type,plus) plus\nbegin"], ["", "definition plus_fps where\n    \"f + g = Abs_fps (\\<lambda>n. f $ n + g $ n)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) fps, plus_class)", ".."], ["", "end"], ["", "lemma fps_add_nth [simp]: \"(f + g) $ n = f $ n + g $ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f + g) $ n = f $ n + g $ n", "unfolding plus_fps_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. f $ n + g $ n) $ n = f $ n + g $ n", "by simp"], ["", "text \\<open>This directly shows that formal power series form a\nsemilattice with zero.\\<close>"], ["", "lemma fps_add_assoc: \"((f::('a,'b::semigroup_add) fps) + g) + h = f + (g + h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f + g + h = f + (g + h)", "unfolding plus_fps_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. Abs_fps (\\<lambda>n. f $ n + g $ n) $ n + h $ n) =\n    Abs_fps (\\<lambda>n. f $ n + Abs_fps (\\<lambda>n. g $ n + h $ n) $ n)", "by (simp add: add.assoc)"], ["", "lemma fps_add_comm [simp]: \"(f::('a,'b::ab_semigroup_add) fps) + g = g + f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f + g = g + f", "unfolding plus_fps_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. f $ n + g $ n) =\n    Abs_fps (\\<lambda>n. g $ n + f $ n)", "by (simp add: add.commute)"], ["", "lemma fps_add_idem [simp]: \"(f::('a,'b::join_semilattice) fps) + f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f + f = f", "unfolding plus_fps_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. f $ n + f $ n) = f", "by simp"], ["", "lemma fps_zerol [simp]: \"(f::('a,'b::monoid_add) fps) + 0 = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f + 0 = f", "unfolding plus_fps_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. f $ n + 0 $ n) = f", "by simp"], ["", "lemma fps_zeror [simp]: \"0 + (f::('a,'b::monoid_add) fps) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 + f = f", "unfolding plus_fps_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. 0 $ n + f $ n) = f", "by simp"], ["", "text \\<open>The product of formal power series is convolution. The product\nof two formal powerseries at a list is obtained by splitting the list\ninto all possible prefix/suffix pairs, taking the product of the first\nseries applied to the first coordinate and the second series applied\nto the second coordinate of each pair, and then adding the results.\\<close>"], ["", "instantiation fps :: (type,\"{comm_monoid_add,times}\") times\nbegin"], ["", "definition times_fps where\n    \"f * g = Abs_fps (\\<lambda>n. \\<Sum>{f $ y * g $ z |y z. n = y @ z})\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) fps, times_class)", ".."], ["", "end"], ["", "text \\<open>We call the set of all prefix/suffix splittings of a\nlist~@{term xs} the \\emph{splitset} of~@{term xs}.\\<close>"], ["", "definition splitset where\n  \"splitset xs \\<equiv> {(p, q). xs = p @ q}\""], ["", "text \\<open>Altenatively, splitsets can be defined recursively, which\nyields convenient simplification rules in Isabelle.\\<close>"], ["", "fun splitset_fun where\n  \"splitset_fun []       = {([], [])}\"\n| \"splitset_fun (x # xs) = insert ([], x # xs) (apfst (Cons x) ` splitset_fun xs)\""], ["", "lemma splitset_consl:\n  \"splitset (x # xs) = insert ([], x # xs) (apfst (Cons x) ` splitset xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. splitset (x # xs) = insert ([], x # xs) (apfst ((#) x) ` splitset xs)", "by (auto simp add: image_def splitset_def) (metis append_eq_Cons_conv)+"], ["", "lemma splitset_eq_splitset_fun: \"splitset xs = splitset_fun xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. splitset xs = splitset_fun xs", "apply (induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. splitset [] = splitset_fun []\n 2. \\<And>a xs.\n       splitset xs = splitset_fun xs \\<Longrightarrow>\n       splitset (a # xs) = splitset_fun (a # xs)", "apply (simp add: splitset_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       splitset xs = splitset_fun xs \\<Longrightarrow>\n       splitset (a # xs) = splitset_fun (a # xs)", "apply (simp add: splitset_consl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>The definition of multiplication is now more precise.\\<close>"], ["", "lemma fps_mult_var:\n  \"(f * g) $ n = \\<Sum>{f $ (fst p) * g $ (snd p) | p. p \\<in> splitset n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<cdot> g) $ n =\n    \\<Sum> {f $ fst p \\<cdot> g $ snd p |p. p \\<in> splitset n}", "by (simp add: times_fps_def splitset_def)"], ["", "lemma fps_mult_image:\n  \"(f * g) $ n = \\<Sum>((\\<lambda>p. f $ (fst p) * g $ (snd p)) ` splitset n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<cdot> g) $ n =\n    \\<Sum> ((\\<lambda>p. f $ fst p \\<cdot> g $ snd p) ` splitset n)", "by (simp only: Collect_mem_eq fps_mult_var fun_im)"], ["", "text \\<open>Next we show that splitsets are finite and non-empty.\\<close>"], ["", "lemma splitset_fun_finite [simp]: \"finite (splitset_fun xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (splitset_fun xs)", "by (induct xs, simp_all)"], ["", "lemma splitset_finite [simp]: \"finite (splitset xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (splitset xs)", "by (simp add: splitset_eq_splitset_fun)"], ["", "lemma split_append_finite [simp]: \"finite {(p, q). xs = p @ q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {(p, q). xs = p @ q}", "by (fold splitset_def, fact splitset_finite)"], ["", "lemma splitset_fun_nonempty [simp]: \"splitset_fun xs \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. splitset_fun xs \\<noteq> {}", "by (cases xs, simp_all)"], ["", "lemma splitset_nonempty [simp]: \"splitset xs \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. splitset xs \\<noteq> {}", "by (simp add: splitset_eq_splitset_fun)"], ["", "text \\<open>We now proceed with proving algebraic properties of formal\npower series.\\<close>"], ["", "lemma fps_annil [simp]:\n  \"0 * (f::('a::type,'b::{comm_monoid_add,mult_zero}) fps) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<cdot> f = 0", "by (rule fps_ext) (simp add: times_fps_def sum.neutral)"], ["", "lemma fps_annir [simp]:\n  \"(f::('a::type,'b::{comm_monoid_add,mult_zero}) fps) * 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> 0 = 0", "by (simp add: fps_ext times_fps_def sum.neutral)"], ["", "lemma fps_distl:\n  \"(f::('a::type,'b::{join_semilattice_zero,semiring}) fps) * (g + h) = (f * g) + (f * h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> (g + h) = f \\<cdot> g + f \\<cdot> h", "by (simp add: fps_ext fps_mult_image distrib_left sum_fun_sum)"], ["", "lemma fps_distr:\n  \"((f::('a::type,'b::{join_semilattice_zero,semiring}) fps) + g) * h = (f * h) + (g * h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f + g) \\<cdot> h = f \\<cdot> h + g \\<cdot> h", "by (simp add: fps_ext fps_mult_image distrib_right sum_fun_sum)"], ["", "text \\<open>The multiplicative unit laws are surprisingly tedious. For the\nproof of the left unit law we use the recursive definition, which we\ncould as well have based on splitlists instead of splitsets.\n\nHowever, a right unit law cannot simply be obtained along the lines of\nthis proofs. The reason is that an alternative recursive definition\nthat produces a unit with coordinates flipped would be needed. But\nthis is difficult to obtain without snoc lists. We therefore prove the\nright unit law more directly by using properties of suprema.\\<close>"], ["", "lemma fps_onel [simp]:\n  \"1 * (f::('a::type,'b::{join_semilattice_zero,monoid_mult,mult_zero}) fps) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<cdot> f = f", "proof (rule fps_ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. (1 \\<cdot> f) $ n = f $ n", "fix n :: \"'a list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. (1 \\<cdot> f) $ n = f $ n", "show \"(1 * f) $ n = f $ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 \\<cdot> f) $ n = f $ n", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = [] \\<Longrightarrow> (1 \\<cdot> f) $ n = f $ n\n 2. \\<And>a list. n = a # list \\<Longrightarrow> (1 \\<cdot> f) $ n = f $ n", "case Nil"], ["proof (state)\nthis:\n  n = []\n\ngoal (2 subgoals):\n 1. n = [] \\<Longrightarrow> (1 \\<cdot> f) $ n = f $ n\n 2. \\<And>a list. n = a # list \\<Longrightarrow> (1 \\<cdot> f) $ n = f $ n", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = []\n\ngoal (1 subgoal):\n 1. (1 \\<cdot> f) $ n = f $ n", "by (simp add: times_fps_def)"], ["proof (state)\nthis:\n  (1 \\<cdot> f) $ n = f $ n\n\ngoal (1 subgoal):\n 1. \\<And>a list. n = a # list \\<Longrightarrow> (1 \\<cdot> f) $ n = f $ n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. n = a # list \\<Longrightarrow> (1 \\<cdot> f) $ n = f $ n", "case Cons"], ["proof (state)\nthis:\n  n = a_ # list_\n\ngoal (1 subgoal):\n 1. \\<And>a list. n = a # list \\<Longrightarrow> (1 \\<cdot> f) $ n = f $ n", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = a_ # list_\n\ngoal (1 subgoal):\n 1. (1 \\<cdot> f) $ n = f $ n", "by (simp add: fps_mult_image splitset_eq_splitset_fun image_comp one_fps_def comp_def image_constant_conv)"], ["proof (state)\nthis:\n  (1 \\<cdot> f) $ n = f $ n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (1 \\<cdot> f) $ n = f $ n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fps_oner [simp]:\n  \"(f::('a::type,'b::{join_semilattice_zero,monoid_mult,mult_zero}) fps) * 1 = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> 1 = f", "proof (rule fps_ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> 1) $ n = f $ n", "fix n :: \"'a list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> 1) $ n = f $ n", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> 1) $ n = f $ n", "fix z :: 'b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> 1) $ n = f $ n", "have \"(f * 1) $ n \\<le> z \\<longleftrightarrow> (\\<forall>p \\<in> splitset n. f $ (fst p) * 1 $ (snd p) \\<le> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((f \\<cdot> 1) $ n \\<le> z) =\n    (\\<forall>p\\<in>splitset n. f $ fst p \\<cdot> 1 $ snd p \\<le> z)", "by (simp add: fps_mult_image sum_fun_image_sup)"], ["proof (state)\nthis:\n  ((f \\<cdot> 1) $ n \\<le> z) =\n  (\\<forall>p\\<in>splitset n. f $ fst p \\<cdot> 1 $ snd p \\<le> z)\n\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> 1) $ n = f $ n", "also"], ["proof (state)\nthis:\n  ((f \\<cdot> 1) $ n \\<le> z) =\n  (\\<forall>p\\<in>splitset n. f $ fst p \\<cdot> 1 $ snd p \\<le> z)\n\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> 1) $ n = f $ n", "have \"... \\<longleftrightarrow> (\\<forall>a b. n = a @ b \\<longrightarrow> f $ a * 1 $ b \\<le> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>p\\<in>splitset n. f $ fst p \\<cdot> 1 $ snd p \\<le> z) =\n    (\\<forall>a b. n = a @ b \\<longrightarrow> f $ a \\<cdot> 1 $ b \\<le> z)", "unfolding splitset_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>p\\<in>{(p, q). n = p @ q}.\n        f $ fst p \\<cdot> 1 $ snd p \\<le> z) =\n    (\\<forall>a b. n = a @ b \\<longrightarrow> f $ a \\<cdot> 1 $ b \\<le> z)", "by simp"], ["proof (state)\nthis:\n  (\\<forall>p\\<in>splitset n. f $ fst p \\<cdot> 1 $ snd p \\<le> z) =\n  (\\<forall>a b. n = a @ b \\<longrightarrow> f $ a \\<cdot> 1 $ b \\<le> z)\n\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> 1) $ n = f $ n", "also"], ["proof (state)\nthis:\n  (\\<forall>p\\<in>splitset n. f $ fst p \\<cdot> 1 $ snd p \\<le> z) =\n  (\\<forall>a b. n = a @ b \\<longrightarrow> f $ a \\<cdot> 1 $ b \\<le> z)\n\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> 1) $ n = f $ n", "have \"... \\<longleftrightarrow> (f $ n * 1 $ [] \\<le> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a b.\n        n = a @ b \\<longrightarrow> f $ a \\<cdot> 1 $ b \\<le> z) =\n    (f $ n \\<cdot> 1 $ [] \\<le> z)", "by (simp add: one_fps_def)"], ["proof (state)\nthis:\n  (\\<forall>a b. n = a @ b \\<longrightarrow> f $ a \\<cdot> 1 $ b \\<le> z) =\n  (f $ n \\<cdot> 1 $ [] \\<le> z)\n\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> 1) $ n = f $ n", "finally"], ["proof (chain)\npicking this:\n  ((f \\<cdot> 1) $ n \\<le> z) = (f $ n \\<cdot> 1 $ [] \\<le> z)", "have \"(f * 1) $ n \\<le> z \\<longleftrightarrow> f $ n \\<le> z\""], ["proof (prove)\nusing this:\n  ((f \\<cdot> 1) $ n \\<le> z) = (f $ n \\<cdot> 1 $ [] \\<le> z)\n\ngoal (1 subgoal):\n 1. ((f \\<cdot> 1) $ n \\<le> z) = (f $ n \\<le> z)", "by simp"], ["proof (state)\nthis:\n  ((f \\<cdot> 1) $ n \\<le> z) = (f $ n \\<le> z)\n\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> 1) $ n = f $ n", "}"], ["proof (state)\nthis:\n  ((f \\<cdot> 1) $ n \\<le> ?z2) = (f $ n \\<le> ?z2)\n\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> 1) $ n = f $ n", "thus \"(f * 1) $ n = f $ n\""], ["proof (prove)\nusing this:\n  ((f \\<cdot> 1) $ n \\<le> ?z2) = (f $ n \\<le> ?z2)\n\ngoal (1 subgoal):\n 1. (f \\<cdot> 1) $ n = f $ n", "by (metis eq_iff)"], ["proof (state)\nthis:\n  (f \\<cdot> 1) $ n = f $ n\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Finally we prove associativity of convolution. This requires\nsplitting lists into three parts and rearranging these parts in two\ndifferent ways into splitsets. This rearrangement is captured by the\nfollowing technical lemma.\\<close>"], ["", "lemma splitset_rearrange:\n  fixes F :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> 'b::join_semilattice_zero\"\n  shows \"\\<Sum>{\\<Sum>{F (fst p) (fst q) (snd q) | q. q \\<in> splitset (snd p)} | p. p \\<in> splitset x} =\n         \\<Sum>{\\<Sum>{F (fst q) (snd q) (snd p) | q. q \\<in> splitset (fst p)} | p. p \\<in> splitset x}\"\n    (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\n     {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n      p \\<in> splitset x} =\n    \\<Sum>\n     {\\<Sum> {F (fst q) (snd q) (snd p) |q. q \\<in> splitset (fst p)} |p.\n      p \\<in> splitset x}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum>\n     {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n      p \\<in> splitset x} =\n    \\<Sum>\n     {\\<Sum> {F (fst q) (snd q) (snd p) |q. q \\<in> splitset (fst p)} |p.\n      p \\<in> splitset x}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum>\n     {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n      p \\<in> splitset x} =\n    \\<Sum>\n     {\\<Sum> {F (fst q) (snd q) (snd p) |q. q \\<in> splitset (fst p)} |p.\n      p \\<in> splitset x}", "fix z :: 'b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum>\n     {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n      p \\<in> splitset x} =\n    \\<Sum>\n     {\\<Sum> {F (fst q) (snd q) (snd p) |q. q \\<in> splitset (fst p)} |p.\n      p \\<in> splitset x}", "have \"?lhs \\<le> z \\<longleftrightarrow> (\\<forall>p q r. x = p @ q @ r \\<longrightarrow> F p q r \\<le> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\n      {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n       p \\<in> splitset x}\n     \\<le> z) =\n    (\\<forall>p q r. x = p @ q @ r \\<longrightarrow> F p q r \\<le> z)", "by (simp only: fset_to_im sum_fun_image_sup splitset_finite)\n         (auto simp add: splitset_def)"], ["proof (state)\nthis:\n  (\\<Sum>\n    {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n     p \\<in> splitset x}\n   \\<le> z) =\n  (\\<forall>p q r. x = p @ q @ r \\<longrightarrow> F p q r \\<le> z)\n\ngoal (1 subgoal):\n 1. \\<Sum>\n     {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n      p \\<in> splitset x} =\n    \\<Sum>\n     {\\<Sum> {F (fst q) (snd q) (snd p) |q. q \\<in> splitset (fst p)} |p.\n      p \\<in> splitset x}", "hence \"?lhs \\<le> z \\<longleftrightarrow> ?rhs \\<le> z\""], ["proof (prove)\nusing this:\n  (\\<Sum>\n    {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n     p \\<in> splitset x}\n   \\<le> z) =\n  (\\<forall>p q r. x = p @ q @ r \\<longrightarrow> F p q r \\<le> z)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\n      {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n       p \\<in> splitset x}\n     \\<le> z) =\n    (\\<Sum>\n      {\\<Sum> {F (fst q) (snd q) (snd p) |q. q \\<in> splitset (fst p)} |p.\n       p \\<in> splitset x}\n     \\<le> z)", "by (simp only: fset_to_im sum_fun_image_sup splitset_finite)\n         (auto simp add: splitset_def)"], ["proof (state)\nthis:\n  (\\<Sum>\n    {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n     p \\<in> splitset x}\n   \\<le> z) =\n  (\\<Sum>\n    {\\<Sum> {F (fst q) (snd q) (snd p) |q. q \\<in> splitset (fst p)} |p.\n     p \\<in> splitset x}\n   \\<le> z)\n\ngoal (1 subgoal):\n 1. \\<Sum>\n     {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n      p \\<in> splitset x} =\n    \\<Sum>\n     {\\<Sum> {F (fst q) (snd q) (snd p) |q. q \\<in> splitset (fst p)} |p.\n      p \\<in> splitset x}", "}"], ["proof (state)\nthis:\n  (\\<Sum>\n    {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n     p \\<in> splitset x}\n   \\<le> ?z2) =\n  (\\<Sum>\n    {\\<Sum> {F (fst q) (snd q) (snd p) |q. q \\<in> splitset (fst p)} |p.\n     p \\<in> splitset x}\n   \\<le> ?z2)\n\ngoal (1 subgoal):\n 1. \\<Sum>\n     {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n      p \\<in> splitset x} =\n    \\<Sum>\n     {\\<Sum> {F (fst q) (snd q) (snd p) |q. q \\<in> splitset (fst p)} |p.\n      p \\<in> splitset x}", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>\n    {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n     p \\<in> splitset x}\n   \\<le> ?z2) =\n  (\\<Sum>\n    {\\<Sum> {F (fst q) (snd q) (snd p) |q. q \\<in> splitset (fst p)} |p.\n     p \\<in> splitset x}\n   \\<le> ?z2)\n\ngoal (1 subgoal):\n 1. \\<Sum>\n     {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n      p \\<in> splitset x} =\n    \\<Sum>\n     {\\<Sum> {F (fst q) (snd q) (snd p) |q. q \\<in> splitset (fst p)} |p.\n      p \\<in> splitset x}", "by (simp add: eq_iff)"], ["proof (state)\nthis:\n  \\<Sum>\n   {\\<Sum> {F (fst p) (fst q) (snd q) |q. q \\<in> splitset (snd p)} |p.\n    p \\<in> splitset x} =\n  \\<Sum>\n   {\\<Sum> {F (fst q) (snd q) (snd p) |q. q \\<in> splitset (fst p)} |p.\n    p \\<in> splitset x}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fps_mult_assoc: \"(f::('a::type,'b::dioid_one_zero) fps) * (g * h) = (f * g) * h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> (g \\<cdot> h) = f \\<cdot> g \\<cdot> h", "proof (rule fps_ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> (g \\<cdot> h)) $ n = (f \\<cdot> g \\<cdot> h) $ n", "fix n :: \"'a list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> (g \\<cdot> h)) $ n = (f \\<cdot> g \\<cdot> h) $ n", "have \"(f * (g * h)) $ n = \\<Sum>{\\<Sum>{f $ (fst p) * g $ (fst q) * h $ (snd q) | q. q \\<in> splitset (snd p)} | p. p \\<in> splitset n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<cdot> (g \\<cdot> h)) $ n =\n    \\<Sum>\n     {\\<Sum>\n       {f $ fst p \\<cdot> g $ fst q \\<cdot> h $ snd q |q.\n        q \\<in> splitset (snd p)} |\n      p. p \\<in> splitset n}", "by (simp add: fps_mult_image sum_sum_distl_fun mult.assoc)"], ["proof (state)\nthis:\n  (f \\<cdot> (g \\<cdot> h)) $ n =\n  \\<Sum>\n   {\\<Sum>\n     {f $ fst p \\<cdot> g $ fst q \\<cdot> h $ snd q |q.\n      q \\<in> splitset (snd p)} |\n    p. p \\<in> splitset n}\n\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> (g \\<cdot> h)) $ n = (f \\<cdot> g \\<cdot> h) $ n", "also"], ["proof (state)\nthis:\n  (f \\<cdot> (g \\<cdot> h)) $ n =\n  \\<Sum>\n   {\\<Sum>\n     {f $ fst p \\<cdot> g $ fst q \\<cdot> h $ snd q |q.\n      q \\<in> splitset (snd p)} |\n    p. p \\<in> splitset n}\n\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> (g \\<cdot> h)) $ n = (f \\<cdot> g \\<cdot> h) $ n", "have \"... = \\<Sum>{\\<Sum>{f $ (fst q) * g $ (snd q) * h $ (snd p) | q. q \\<in> splitset (fst p)} | p. p \\<in> splitset n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\n     {\\<Sum>\n       {f $ fst p \\<cdot> g $ fst q \\<cdot> h $ snd q |q.\n        q \\<in> splitset (snd p)} |\n      p. p \\<in> splitset n} =\n    \\<Sum>\n     {\\<Sum>\n       {f $ fst q \\<cdot> g $ snd q \\<cdot> h $ snd p |q.\n        q \\<in> splitset (fst p)} |\n      p. p \\<in> splitset n}", "by (fact splitset_rearrange)"], ["proof (state)\nthis:\n  \\<Sum>\n   {\\<Sum>\n     {f $ fst p \\<cdot> g $ fst q \\<cdot> h $ snd q |q.\n      q \\<in> splitset (snd p)} |\n    p. p \\<in> splitset n} =\n  \\<Sum>\n   {\\<Sum>\n     {f $ fst q \\<cdot> g $ snd q \\<cdot> h $ snd p |q.\n      q \\<in> splitset (fst p)} |\n    p. p \\<in> splitset n}\n\ngoal (1 subgoal):\n 1. \\<And>n. (f \\<cdot> (g \\<cdot> h)) $ n = (f \\<cdot> g \\<cdot> h) $ n", "finally"], ["proof (chain)\npicking this:\n  (f \\<cdot> (g \\<cdot> h)) $ n =\n  \\<Sum>\n   {\\<Sum>\n     {f $ fst q \\<cdot> g $ snd q \\<cdot> h $ snd p |q.\n      q \\<in> splitset (fst p)} |\n    p. p \\<in> splitset n}", "show \"(f * (g * h)) $ n = ((f * g) * h) $ n\""], ["proof (prove)\nusing this:\n  (f \\<cdot> (g \\<cdot> h)) $ n =\n  \\<Sum>\n   {\\<Sum>\n     {f $ fst q \\<cdot> g $ snd q \\<cdot> h $ snd p |q.\n      q \\<in> splitset (fst p)} |\n    p. p \\<in> splitset n}\n\ngoal (1 subgoal):\n 1. (f \\<cdot> (g \\<cdot> h)) $ n = (f \\<cdot> g \\<cdot> h) $ n", "by (simp add: fps_mult_image sum_sum_distr_fun mult.assoc)"], ["proof (state)\nthis:\n  (f \\<cdot> (g \\<cdot> h)) $ n = (f \\<cdot> g \\<cdot> h) $ n\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The Dioid Model of Formal Power Series\\<close>"], ["", "text \\<open>We can now show that formal power series with suitably\ndefined operations form a dioid. Many of the underlying properties\nalready hold in weaker settings, where the target algebra is a\nsemilattice or semiring. We currently ignore this fact.\\<close>"], ["", "subclass (in dioid_one_zero) mult_zero"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.mult_zero (\\<cdot>) (0::'a)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. (0::'a) \\<cdot> a = (0::'a)\n 2. \\<And>a. a \\<cdot> (0::'a) = (0::'a)", "fix x :: 'a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. (0::'a) \\<cdot> a = (0::'a)\n 2. \\<And>a. a \\<cdot> (0::'a) = (0::'a)", "show \"0 * x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<cdot> x = (0::'a)", "by (fact annil)"], ["proof (state)\nthis:\n  (0::'a) \\<cdot> x = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<cdot> (0::'a) = (0::'a)", "show \"x * 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> (0::'a) = (0::'a)", "by (fact annir)"], ["proof (state)\nthis:\n  x \\<cdot> (0::'a) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "instantiation fps :: (type,dioid_one_zero) dioid_one_zero\nbegin"], ["", "definition less_eq_fps where\n    \"(f::('a,'b) fps) \\<le> g \\<longleftrightarrow> f + g = g\""], ["", "definition less_fps where\n    \"(f::('a,'b) fps) < g \\<longleftrightarrow> f \\<le> g \\<and> f \\<noteq> g\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) fps, dioid_one_zero_class)", "proof"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>a b c. a + b + c = a + (b + c)\n 2. \\<And>a b. a + b = b + a\n 3. \\<And>a b c. a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)\n 4. \\<And>x y z. (x + y) \\<cdot> z = x \\<cdot> z + y \\<cdot> z\n 5. \\<And>x. 1 \\<cdot> x = x\n 6. \\<And>x. x \\<cdot> 1 = x\n 7. \\<And>x. 0 + x = x\n 8. \\<And>x. 0 \\<cdot> x = 0\n 9. \\<And>x. x \\<cdot> 0 = 0\n 10. \\<And>x y. (x \\<le> y) = (x + y = y)\nA total of 13 subgoals...", "fix f g h :: \"('a,'b) fps\""], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>a b c. a + b + c = a + (b + c)\n 2. \\<And>a b. a + b = b + a\n 3. \\<And>a b c. a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)\n 4. \\<And>x y z. (x + y) \\<cdot> z = x \\<cdot> z + y \\<cdot> z\n 5. \\<And>x. 1 \\<cdot> x = x\n 6. \\<And>x. x \\<cdot> 1 = x\n 7. \\<And>x. 0 + x = x\n 8. \\<And>x. 0 \\<cdot> x = 0\n 9. \\<And>x. x \\<cdot> 0 = 0\n 10. \\<And>x y. (x \\<le> y) = (x + y = y)\nA total of 13 subgoals...", "show \"f + g + h = f + (g + h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f + g + h = f + (g + h)", "by (fact fps_add_assoc)"], ["proof (state)\nthis:\n  f + g + h = f + (g + h)\n\ngoal (12 subgoals):\n 1. \\<And>a b. a + b = b + a\n 2. \\<And>a b c. a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)\n 3. \\<And>x y z. (x + y) \\<cdot> z = x \\<cdot> z + y \\<cdot> z\n 4. \\<And>x. 1 \\<cdot> x = x\n 5. \\<And>x. x \\<cdot> 1 = x\n 6. \\<And>x. 0 + x = x\n 7. \\<And>x. 0 \\<cdot> x = 0\n 8. \\<And>x. x \\<cdot> 0 = 0\n 9. \\<And>x y. (x \\<le> y) = (x + y = y)\n 10. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)\nA total of 12 subgoals...", "show \"f + g = g + f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f + g = g + f", "by (fact fps_add_comm)"], ["proof (state)\nthis:\n  f + g = g + f\n\ngoal (11 subgoals):\n 1. \\<And>a b c. a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)\n 2. \\<And>x y z. (x + y) \\<cdot> z = x \\<cdot> z + y \\<cdot> z\n 3. \\<And>x. 1 \\<cdot> x = x\n 4. \\<And>x. x \\<cdot> 1 = x\n 5. \\<And>x. 0 + x = x\n 6. \\<And>x. 0 \\<cdot> x = 0\n 7. \\<And>x. x \\<cdot> 0 = 0\n 8. \\<And>x y. (x \\<le> y) = (x + y = y)\n 9. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)\n 10. \\<And>x. x + x = x\nA total of 11 subgoals...", "show \"f * g * h = f * (g * h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> g \\<cdot> h = f \\<cdot> (g \\<cdot> h)", "by (metis fps_mult_assoc)"], ["proof (state)\nthis:\n  f \\<cdot> g \\<cdot> h = f \\<cdot> (g \\<cdot> h)\n\ngoal (10 subgoals):\n 1. \\<And>x y z. (x + y) \\<cdot> z = x \\<cdot> z + y \\<cdot> z\n 2. \\<And>x. 1 \\<cdot> x = x\n 3. \\<And>x. x \\<cdot> 1 = x\n 4. \\<And>x. 0 + x = x\n 5. \\<And>x. 0 \\<cdot> x = 0\n 6. \\<And>x. x \\<cdot> 0 = 0\n 7. \\<And>x y. (x \\<le> y) = (x + y = y)\n 8. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)\n 9. \\<And>x. x + x = x\n 10. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"(f + g) * h = f * h + g * h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f + g) \\<cdot> h = f \\<cdot> h + g \\<cdot> h", "by (fact fps_distr)"], ["proof (state)\nthis:\n  (f + g) \\<cdot> h = f \\<cdot> h + g \\<cdot> h\n\ngoal (9 subgoals):\n 1. \\<And>x. 1 \\<cdot> x = x\n 2. \\<And>x. x \\<cdot> 1 = x\n 3. \\<And>x. 0 + x = x\n 4. \\<And>x. 0 \\<cdot> x = 0\n 5. \\<And>x. x \\<cdot> 0 = 0\n 6. \\<And>x y. (x \\<le> y) = (x + y = y)\n 7. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)\n 8. \\<And>x. x + x = x\n 9. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"1 * f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<cdot> f = f", "by (fact fps_onel)"], ["proof (state)\nthis:\n  1 \\<cdot> f = f\n\ngoal (8 subgoals):\n 1. \\<And>x. x \\<cdot> 1 = x\n 2. \\<And>x. 0 + x = x\n 3. \\<And>x. 0 \\<cdot> x = 0\n 4. \\<And>x. x \\<cdot> 0 = 0\n 5. \\<And>x y. (x \\<le> y) = (x + y = y)\n 6. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)\n 7. \\<And>x. x + x = x\n 8. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"f * 1 = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> 1 = f", "by (fact fps_oner)"], ["proof (state)\nthis:\n  f \\<cdot> 1 = f\n\ngoal (7 subgoals):\n 1. \\<And>x. 0 + x = x\n 2. \\<And>x. 0 \\<cdot> x = 0\n 3. \\<And>x. x \\<cdot> 0 = 0\n 4. \\<And>x y. (x \\<le> y) = (x + y = y)\n 5. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)\n 6. \\<And>x. x + x = x\n 7. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"0 + f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 + f = f", "by (fact fps_zeror)"], ["proof (state)\nthis:\n  0 + f = f\n\ngoal (6 subgoals):\n 1. \\<And>x. 0 \\<cdot> x = 0\n 2. \\<And>x. x \\<cdot> 0 = 0\n 3. \\<And>x y. (x \\<le> y) = (x + y = y)\n 4. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)\n 5. \\<And>x. x + x = x\n 6. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"0 * f = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<cdot> f = 0", "by (fact fps_annil)"], ["proof (state)\nthis:\n  0 \\<cdot> f = 0\n\ngoal (5 subgoals):\n 1. \\<And>x. x \\<cdot> 0 = 0\n 2. \\<And>x y. (x \\<le> y) = (x + y = y)\n 3. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)\n 4. \\<And>x. x + x = x\n 5. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"f * 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> 0 = 0", "by (fact fps_annir)"], ["proof (state)\nthis:\n  f \\<cdot> 0 = 0\n\ngoal (4 subgoals):\n 1. \\<And>x y. (x \\<le> y) = (x + y = y)\n 2. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)\n 3. \\<And>x. x + x = x\n 4. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"f \\<le> g \\<longleftrightarrow> f + g = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<le> g) = (f + g = g)", "by (fact less_eq_fps_def)"], ["proof (state)\nthis:\n  (f \\<le> g) = (f + g = g)\n\ngoal (3 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)\n 2. \\<And>x. x + x = x\n 3. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"f < g \\<longleftrightarrow> f \\<le> g \\<and> f \\<noteq> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f < g) = (f \\<le> g \\<and> f \\<noteq> g)", "by (fact less_fps_def)"], ["proof (state)\nthis:\n  (f < g) = (f \\<le> g \\<and> f \\<noteq> g)\n\ngoal (2 subgoals):\n 1. \\<And>x. x + x = x\n 2. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"f + f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f + f = f", "by (fact fps_add_idem)"], ["proof (state)\nthis:\n  f + f = f\n\ngoal (1 subgoal):\n 1. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"f * (g + h) = f \\<cdot> g + f \\<cdot> h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> (g + h) = f \\<cdot> g + f \\<cdot> h", "by (fact fps_distl)"], ["proof (state)\nthis:\n  f \\<cdot> (g + h) = f \\<cdot> g + f \\<cdot> h\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* instantiation *)"], ["", "lemma expand_fps_less_eq: \"(f::('a,'b::dioid_one_zero) fps) \\<le> g \\<longleftrightarrow> (\\<forall>n. f $ n \\<le> g $ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<le> g) = (\\<forall>n. f $ n \\<le> g $ n)", "by (simp add: expand_fps_eq less_eq_def less_eq_fps_def)"], ["", "subsection \\<open>The Kleene Algebra Model of Formal Power Series\\<close>"], ["", "text \\<open>There are two approaches to define the Kleene star. The first\none defines the star for a certain kind of (so-called proper) formal\npower series into a semiring or dioid. The second one, which is more\ninteresting in the context of our algebraic hierarchy, shows that\nformal power series into a Kleene algebra form a Kleene algebra. We\nhave only formalised the latter approach.\\<close>"], ["", "lemma Sum_splitlist_nonempty:\n  \"\\<Sum>{f ys zs |ys zs. xs = ys @ zs} = ((f [] xs)::'a::join_semilattice_zero) + \\<Sum>{f ys zs |ys zs. xs = ys @ zs \\<and> ys \\<noteq> []}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> {f ys zs |ys zs. xs = ys @ zs} =\n    f [] xs + \\<Sum> {f ys zs |ys zs. xs = ys @ zs \\<and> ys \\<noteq> []}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum> {f ys zs |ys zs. xs = ys @ zs} =\n    f [] xs + \\<Sum> {f ys zs |ys zs. xs = ys @ zs \\<and> ys \\<noteq> []}", "have \"{f ys zs |ys zs. xs = ys @ zs} = {f ys zs |ys zs. xs = ys @ zs \\<and> ys = []} \\<union> {f ys zs |ys zs. xs = ys @ zs \\<and> ys \\<noteq> []}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f ys zs |ys zs. xs = ys @ zs} =\n    {f ys zs |ys zs. xs = ys @ zs \\<and> ys = []} \\<union>\n    {f ys zs |ys zs. xs = ys @ zs \\<and> ys \\<noteq> []}", "by blast"], ["proof (state)\nthis:\n  {f ys zs |ys zs. xs = ys @ zs} =\n  {f ys zs |ys zs. xs = ys @ zs \\<and> ys = []} \\<union>\n  {f ys zs |ys zs. xs = ys @ zs \\<and> ys \\<noteq> []}\n\ngoal (1 subgoal):\n 1. \\<Sum> {f ys zs |ys zs. xs = ys @ zs} =\n    f [] xs + \\<Sum> {f ys zs |ys zs. xs = ys @ zs \\<and> ys \\<noteq> []}", "thus ?thesis"], ["proof (prove)\nusing this:\n  {f ys zs |ys zs. xs = ys @ zs} =\n  {f ys zs |ys zs. xs = ys @ zs \\<and> ys = []} \\<union>\n  {f ys zs |ys zs. xs = ys @ zs \\<and> ys \\<noteq> []}\n\ngoal (1 subgoal):\n 1. \\<Sum> {f ys zs |ys zs. xs = ys @ zs} =\n    f [] xs + \\<Sum> {f ys zs |ys zs. xs = ys @ zs \\<and> ys \\<noteq> []}", "using [[simproc add: finite_Collect]]"], ["proof (prove)\nusing this:\n  {f ys zs |ys zs. xs = ys @ zs} =\n  {f ys zs |ys zs. xs = ys @ zs \\<and> ys = []} \\<union>\n  {f ys zs |ys zs. xs = ys @ zs \\<and> ys \\<noteq> []}\n\ngoal (1 subgoal):\n 1. \\<Sum> {f ys zs |ys zs. xs = ys @ zs} =\n    f [] xs + \\<Sum> {f ys zs |ys zs. xs = ys @ zs \\<and> ys \\<noteq> []}", "by (simp add: sum.insert)"], ["proof (state)\nthis:\n  \\<Sum> {f ys zs |ys zs. xs = ys @ zs} =\n  f [] xs + \\<Sum> {f ys zs |ys zs. xs = ys @ zs \\<and> ys \\<noteq> []}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in left_kleene_algebra) add_star_eq:\n  \"x + y \\<cdot> y\\<^sup>\\<star> \\<cdot> x = y\\<^sup>\\<star> \\<cdot> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y \\<cdot> y\\<^sup>\\<star> \\<cdot> x = y\\<^sup>\\<star> \\<cdot> x", "by (metis add.commute mult_onel star2 star_one troeger)"], ["", "declare rev_conj_cong[fundef_cong]\n  \\<comment> \\<open>required for the function package to prove termination of @{term star_fps_rep}\\<close>"], ["", "fun star_fps_rep where\n  star_fps_rep_Nil: \"star_fps_rep f [] = (f [])\\<^sup>\\<star>\"\n| star_fps_rep_Cons: \"star_fps_rep f n = (f [])\\<^sup>\\<star> \\<cdot> \\<Sum>{f y \\<cdot> star_fps_rep f z |y z. n = y @ z \\<and> y \\<noteq> []}\""], ["", "instantiation fps :: (type,kleene_algebra) kleene_algebra\nbegin"], ["", "text \\<open>We first define the star on functions, where we can use\n  Isabelle's package for recursive functions, before lifting the\n  definition to the type of formal power series.\n\n  This definition of the star is from an unpublished manuscript by\n  Esik and Kuich.\\<close>"], ["", "lift_definition star_fps :: \"('a, 'b) fps \\<Rightarrow> ('a, 'b) fps\" is star_fps_rep"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun. True \\<Longrightarrow> True", ".."], ["", "lemma star_fps_Nil [simp]: \"f\\<^sup>\\<star> $ [] = (f $ [])\\<^sup>\\<star>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f\\<^sup>\\<star> $ [] = (f $ [])\\<^sup>\\<star>", "by (simp add: star_fps_def)"], ["", "lemma star_fps_Cons [simp]: \"f\\<^sup>\\<star> $ (x # xs) = (f $ [])\\<^sup>\\<star> \\<cdot> \\<Sum>{f $ y \\<cdot> f\\<^sup>\\<star> $ z |y z. x # xs = y @ z \\<and> y \\<noteq> []}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f\\<^sup>\\<star> $ (x # xs) =\n    (f $ [])\\<^sup>\\<star> \\<cdot>\n    \\<Sum>\n     {f $ y \\<cdot> f\\<^sup>\\<star> $ z |y z.\n      x # xs = y @ z \\<and> y \\<noteq> []}", "by (simp add: star_fps_def)"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) fps, kleene_algebra_class)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. 1 + x \\<cdot> x\\<^sup>\\<star> \\<le> x\\<^sup>\\<star>\n 2. \\<And>z x y.\n       z + x \\<cdot> y \\<le> y \\<Longrightarrow>\n       x\\<^sup>\\<star> \\<cdot> z \\<le> y\n 3. \\<And>z y x.\n       z + y \\<cdot> x \\<le> y \\<Longrightarrow>\n       z \\<cdot> x\\<^sup>\\<star> \\<le> y", "fix f g h :: \"('a,'b) fps\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. 1 + x \\<cdot> x\\<^sup>\\<star> \\<le> x\\<^sup>\\<star>\n 2. \\<And>z x y.\n       z + x \\<cdot> y \\<le> y \\<Longrightarrow>\n       x\\<^sup>\\<star> \\<cdot> z \\<le> y\n 3. \\<And>z y x.\n       z + y \\<cdot> x \\<le> y \\<Longrightarrow>\n       z \\<cdot> x\\<^sup>\\<star> \\<le> y", "have \"1 + f \\<cdot> f\\<^sup>\\<star> = f\\<^sup>\\<star>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + f \\<cdot> f\\<^sup>\\<star> = f\\<^sup>\\<star>", "apply (rule fps_ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. (1 + f \\<cdot> f\\<^sup>\\<star>) $ n = f\\<^sup>\\<star> $ n", "apply (case_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       n = [] \\<Longrightarrow>\n       (1 + f \\<cdot> f\\<^sup>\\<star>) $ n = f\\<^sup>\\<star> $ n\n 2. \\<And>n a list.\n       n = a # list \\<Longrightarrow>\n       (1 + f \\<cdot> f\\<^sup>\\<star>) $ n = f\\<^sup>\\<star> $ n", "apply (auto simp add: times_fps_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<Sum> {f $ y \\<cdot> f\\<^sup>\\<star> $ z |y z. a # list = y @ z} =\n       (f $ [])\\<^sup>\\<star> \\<cdot>\n       \\<Sum>\n        {f $ y \\<cdot> f\\<^sup>\\<star> $ z |y z.\n         a # list = y @ z \\<and> y \\<noteq> []}", "apply (simp add: add_star_eq mult.assoc[THEN sym] Sum_splitlist_nonempty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       f $ [] \\<cdot> (f $ [])\\<^sup>\\<star> \\<cdot>\n       \\<Sum>\n        {f $ y \\<cdot> f\\<^sup>\\<star> $ z |y z.\n         a # list = y @ z \\<and> y \\<noteq> []} +\n       \\<Sum>\n        {f $ y \\<cdot> f\\<^sup>\\<star> $ z |y z.\n         a # list = y @ z \\<and> y \\<noteq> []} =\n       (f $ [])\\<^sup>\\<star> \\<cdot>\n       \\<Sum>\n        {f $ y \\<cdot> f\\<^sup>\\<star> $ z |y z.\n         a # list = y @ z \\<and> y \\<noteq> []}", "apply (simp add: add_star_eq join.sup_commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  1 + f \\<cdot> f\\<^sup>\\<star> = f\\<^sup>\\<star>\n\ngoal (3 subgoals):\n 1. \\<And>x. 1 + x \\<cdot> x\\<^sup>\\<star> \\<le> x\\<^sup>\\<star>\n 2. \\<And>z x y.\n       z + x \\<cdot> y \\<le> y \\<Longrightarrow>\n       x\\<^sup>\\<star> \\<cdot> z \\<le> y\n 3. \\<And>z y x.\n       z + y \\<cdot> x \\<le> y \\<Longrightarrow>\n       z \\<cdot> x\\<^sup>\\<star> \\<le> y", "thus \"1 + f \\<cdot> f\\<^sup>\\<star> \\<le> f\\<^sup>\\<star>\""], ["proof (prove)\nusing this:\n  1 + f \\<cdot> f\\<^sup>\\<star> = f\\<^sup>\\<star>\n\ngoal (1 subgoal):\n 1. 1 + f \\<cdot> f\\<^sup>\\<star> \\<le> f\\<^sup>\\<star>", "by (metis order_refl)"], ["proof (state)\nthis:\n  1 + f \\<cdot> f\\<^sup>\\<star> \\<le> f\\<^sup>\\<star>\n\ngoal (2 subgoals):\n 1. \\<And>z x y.\n       z + x \\<cdot> y \\<le> y \\<Longrightarrow>\n       x\\<^sup>\\<star> \\<cdot> z \\<le> y\n 2. \\<And>z y x.\n       z + y \\<cdot> x \\<le> y \\<Longrightarrow>\n       z \\<cdot> x\\<^sup>\\<star> \\<le> y", "have \"f \\<cdot> g \\<le> g \\<longrightarrow> f\\<^sup>\\<star> \\<cdot> g \\<le> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> g \\<le> g \\<longrightarrow> f\\<^sup>\\<star> \\<cdot> g \\<le> g", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<cdot> g \\<le> g \\<Longrightarrow> f\\<^sup>\\<star> \\<cdot> g \\<le> g", "assume \"f \\<cdot> g \\<le> g\""], ["proof (state)\nthis:\n  f \\<cdot> g \\<le> g\n\ngoal (1 subgoal):\n 1. f \\<cdot> g \\<le> g \\<Longrightarrow> f\\<^sup>\\<star> \\<cdot> g \\<le> g", "hence 1: \"\\<And>u v. f $ u \\<cdot> g $ v \\<le> g $ (u @ v)\""], ["proof (prove)\nusing this:\n  f \\<cdot> g \\<le> g\n\ngoal (1 subgoal):\n 1. \\<And>u v. f $ u \\<cdot> g $ v \\<le> g $ (u @ v)", "using [[simproc add: finite_Collect]]"], ["proof (prove)\nusing this:\n  f \\<cdot> g \\<le> g\n\ngoal (1 subgoal):\n 1. \\<And>u v. f $ u \\<cdot> g $ v \\<le> g $ (u @ v)", "apply (simp add: expand_fps_less_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<forall>n. (f \\<cdot> g) $ n \\<le> g $ n \\<Longrightarrow>\n       f $ u \\<cdot> g $ v \\<le> g $ (u @ v)", "apply (drule_tac x=\"u @ v\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       (f \\<cdot> g) $ (u @ v) \\<le> g $ (u @ v) \\<Longrightarrow>\n       f $ u \\<cdot> g $ v \\<le> g $ (u @ v)", "apply (simp add: times_fps_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<Sum> {f $ y \\<cdot> g $ z |y z. u @ v = y @ z}\n       \\<le> g $ (u @ v) \\<Longrightarrow>\n       f $ u \\<cdot> g $ v \\<le> g $ (u @ v)", "apply (auto elim!: sum_less_eqE)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  f $ ?u \\<cdot> g $ ?v \\<le> g $ (?u @ ?v)\n\ngoal (1 subgoal):\n 1. f \\<cdot> g \\<le> g \\<Longrightarrow> f\\<^sup>\\<star> \\<cdot> g \\<le> g", "hence 2: \"\\<And>v. (f $ []) \\<^sup>\\<star> \\<cdot> g $ v \\<le> g $ v\""], ["proof (prove)\nusing this:\n  f $ ?u \\<cdot> g $ ?v \\<le> g $ (?u @ ?v)\n\ngoal (1 subgoal):\n 1. \\<And>v. (f $ [])\\<^sup>\\<star> \\<cdot> g $ v \\<le> g $ v", "apply (subgoal_tac \"f $ [] \\<cdot> g $ v \\<le> g $ v\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>\\<And>u v. f $ u \\<cdot> g $ v \\<le> g $ (u @ v);\n        f $ [] \\<cdot> g $ v \\<le> g $ v\\<rbrakk>\n       \\<Longrightarrow> (f $ [])\\<^sup>\\<star> \\<cdot> g $ v \\<le> g $ v\n 2. \\<And>v.\n       (\\<And>u v. f $ u \\<cdot> g $ v \\<le> g $ (u @ v)) \\<Longrightarrow>\n       f $ [] \\<cdot> g $ v \\<le> g $ v", "apply (metis star_inductl_var)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       (\\<And>u v. f $ u \\<cdot> g $ v \\<le> g $ (u @ v)) \\<Longrightarrow>\n       f $ [] \\<cdot> g $ v \\<le> g $ v", "apply (metis append_Nil)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (f $ [])\\<^sup>\\<star> \\<cdot> g $ ?v \\<le> g $ ?v\n\ngoal (1 subgoal):\n 1. f \\<cdot> g \\<le> g \\<Longrightarrow> f\\<^sup>\\<star> \\<cdot> g \\<le> g", "show \"f\\<^sup>\\<star> \\<cdot> g \\<le> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f\\<^sup>\\<star> \\<cdot> g \\<le> g", "using [[simproc add: finite_Collect]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. f\\<^sup>\\<star> \\<cdot> g \\<le> g", "apply (auto intro!: sum_less_eqI simp add: expand_fps_less_eq times_fps_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z. f\\<^sup>\\<star> $ y \\<cdot> g $ z \\<le> g $ (y @ z)", "apply (induct_tac \"y\" rule: length_induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z xs.\n       \\<forall>ys.\n          length ys < length xs \\<longrightarrow>\n          f\\<^sup>\\<star> $ ys \\<cdot> g $ z\n          \\<le> g $ (ys @ z) \\<Longrightarrow>\n       f\\<^sup>\\<star> $ xs \\<cdot> g $ z \\<le> g $ (xs @ z)", "apply (case_tac \"xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y z xs.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   f\\<^sup>\\<star> $ ys \\<cdot> g $ z \\<le> g $ (ys @ z);\n        xs = []\\<rbrakk>\n       \\<Longrightarrow> f\\<^sup>\\<star> $ xs \\<cdot> g $ z\n                         \\<le> g $ (xs @ z)\n 2. \\<And>y z xs a list.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   f\\<^sup>\\<star> $ ys \\<cdot> g $ z \\<le> g $ (ys @ z);\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> f\\<^sup>\\<star> $ xs \\<cdot> g $ z\n                         \\<le> g $ (xs @ z)", "apply (simp add: \"2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z. f $ [] \\<cdot> g $ z \\<le> g $ z\n 2. \\<And>y z xs a list.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   f\\<^sup>\\<star> $ ys \\<cdot> g $ z \\<le> g $ (ys @ z);\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> f\\<^sup>\\<star> $ xs \\<cdot> g $ z\n                         \\<le> g $ (xs @ z)", "using \"2\""], ["proof (prove)\nusing this:\n  (f $ [])\\<^sup>\\<star> \\<cdot> g $ ?v \\<le> g $ ?v\n\ngoal (2 subgoals):\n 1. \\<And>z. f $ [] \\<cdot> g $ z \\<le> g $ z\n 2. \\<And>y z xs a list.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   f\\<^sup>\\<star> $ ys \\<cdot> g $ z \\<le> g $ (ys @ z);\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> f\\<^sup>\\<star> $ xs \\<cdot> g $ z\n                         \\<le> g $ (xs @ z)", "apply (auto simp add: mult.assoc sum_distr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z a list.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < Suc (length list) \\<longrightarrow>\n                   f\\<^sup>\\<star> $ ys \\<cdot> g $ z \\<le> g $ (ys @ z);\n        \\<And>v. f $ [] \\<cdot> g $ v \\<le> g $ v\\<rbrakk>\n       \\<Longrightarrow> (f $ [])\\<^sup>\\<star> \\<cdot>\n                         \\<Sum>\n                          {x \\<cdot> g $ z |x.\n                           \\<exists>y z.\n                              x = f $ y \\<cdot> f\\<^sup>\\<star> $ z \\<and>\n                              a # list = y @ z \\<and> y \\<noteq> []}\n                         \\<le> g $ (a # list @ z)", "apply (rule_tac y=\"(f $ [])\\<^sup>\\<star> \\<cdot> g $ (a # list @ z)\" in order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z a list.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < Suc (length list) \\<longrightarrow>\n                   f\\<^sup>\\<star> $ ys \\<cdot> g $ z \\<le> g $ (ys @ z);\n        \\<And>v. f $ [] \\<cdot> g $ v \\<le> g $ v\\<rbrakk>\n       \\<Longrightarrow> (f $ [])\\<^sup>\\<star> \\<cdot>\n                         \\<Sum>\n                          {x \\<cdot> g $ z |x.\n                           \\<exists>y z.\n                              x = f $ y \\<cdot> f\\<^sup>\\<star> $ z \\<and>\n                              a # list = y @ z \\<and> y \\<noteq> []}\n                         \\<le> (f $ [])\\<^sup>\\<star> \\<cdot>\n                               g $ (a # list @ z)\n 2. \\<And>z a list.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < Suc (length list) \\<longrightarrow>\n                   f\\<^sup>\\<star> $ ys \\<cdot> g $ z \\<le> g $ (ys @ z);\n        \\<And>v. f $ [] \\<cdot> g $ v \\<le> g $ v\\<rbrakk>\n       \\<Longrightarrow> (f $ [])\\<^sup>\\<star> \\<cdot> g $ (a # list @ z)\n                         \\<le> g $ (a # list @ z)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z a list.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < Suc (length list) \\<longrightarrow>\n                   f\\<^sup>\\<star> $ ys \\<cdot> g $ z \\<le> g $ (ys @ z);\n        \\<And>v. f $ [] \\<cdot> g $ v \\<le> g $ v\\<rbrakk>\n       \\<Longrightarrow> (f $ [])\\<^sup>\\<star> \\<cdot> g $ (a # list @ z)\n                         \\<le> g $ (a # list @ z)\n 2. \\<And>z a list.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < Suc (length list) \\<longrightarrow>\n                   f\\<^sup>\\<star> $ ys \\<cdot> g $ z \\<le> g $ (ys @ z);\n        \\<And>v. f $ [] \\<cdot> g $ v \\<le> g $ v\\<rbrakk>\n       \\<Longrightarrow> (f $ [])\\<^sup>\\<star> \\<cdot>\n                         \\<Sum>\n                          {x \\<cdot> g $ z |x.\n                           \\<exists>y z.\n                              x = f $ y \\<cdot> f\\<^sup>\\<star> $ z \\<and>\n                              a # list = y @ z \\<and> y \\<noteq> []}\n                         \\<le> (f $ [])\\<^sup>\\<star> \\<cdot>\n                               g $ (a # list @ z)", "apply (rule \"2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z a list.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < Suc (length list) \\<longrightarrow>\n                   f\\<^sup>\\<star> $ ys \\<cdot> g $ z \\<le> g $ (ys @ z);\n        \\<And>v. f $ [] \\<cdot> g $ v \\<le> g $ v\\<rbrakk>\n       \\<Longrightarrow> (f $ [])\\<^sup>\\<star> \\<cdot>\n                         \\<Sum>\n                          {x \\<cdot> g $ z |x.\n                           \\<exists>y z.\n                              x = f $ y \\<cdot> f\\<^sup>\\<star> $ z \\<and>\n                              a # list = y @ z \\<and> y \\<noteq> []}\n                         \\<le> (f $ [])\\<^sup>\\<star> \\<cdot>\n                               g $ (a # list @ z)", "apply (auto intro!: mult_isol[rule_format] sum_less_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z a list y za.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < Suc (length list) \\<longrightarrow>\n                   f\\<^sup>\\<star> $ ys \\<cdot> g $ z \\<le> g $ (ys @ z);\n        \\<And>v. f $ [] \\<cdot> g $ v \\<le> g $ v; a # list = y @ za;\n        y \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> f $ y \\<cdot> f\\<^sup>\\<star> $ za \\<cdot> g $ z\n                         \\<le> g $ (a # list @ z)", "apply (drule_tac x=\"za\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z a list y za.\n       \\<lbrakk>\\<And>v. f $ [] \\<cdot> g $ v \\<le> g $ v;\n        a # list = y @ za; y \\<noteq> [];\n        length za < Suc (length list) \\<longrightarrow>\n        f\\<^sup>\\<star> $ za \\<cdot> g $ z \\<le> g $ (za @ z)\\<rbrakk>\n       \\<Longrightarrow> f $ y \\<cdot> f\\<^sup>\\<star> $ za \\<cdot> g $ z\n                         \\<le> g $ (a # list @ z)", "apply (drule mp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z a list y za.\n       \\<lbrakk>\\<And>v. f $ [] \\<cdot> g $ v \\<le> g $ v;\n        a # list = y @ za; y \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> length za < Suc (length list)\n 2. \\<And>z a list y za.\n       \\<lbrakk>\\<And>v. f $ [] \\<cdot> g $ v \\<le> g $ v;\n        a # list = y @ za; y \\<noteq> [];\n        f\\<^sup>\\<star> $ za \\<cdot> g $ z \\<le> g $ (za @ z)\\<rbrakk>\n       \\<Longrightarrow> f $ y \\<cdot> f\\<^sup>\\<star> $ za \\<cdot> g $ z\n                         \\<le> g $ (a # list @ z)", "apply (metis append_eq_Cons_conv length_append less_not_refl2 add.commute not_less_eq trans_less_add1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z a list y za.\n       \\<lbrakk>\\<And>v. f $ [] \\<cdot> g $ v \\<le> g $ v;\n        a # list = y @ za; y \\<noteq> [];\n        f\\<^sup>\\<star> $ za \\<cdot> g $ z \\<le> g $ (za @ z)\\<rbrakk>\n       \\<Longrightarrow> f $ y \\<cdot> f\\<^sup>\\<star> $ za \\<cdot> g $ z\n                         \\<le> g $ (a # list @ z)", "apply (drule_tac z=\"f $ y\" in mult_isol[rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z a list y za.\n       \\<lbrakk>\\<And>v. f $ [] \\<cdot> g $ v \\<le> g $ v;\n        a # list = y @ za; y \\<noteq> [];\n        f $ y \\<cdot> (f\\<^sup>\\<star> $ za \\<cdot> g $ z)\n        \\<le> f $ y \\<cdot> g $ (za @ z)\\<rbrakk>\n       \\<Longrightarrow> f $ y \\<cdot> f\\<^sup>\\<star> $ za \\<cdot> g $ z\n                         \\<le> g $ (a # list @ z)", "apply (auto elim!: order_trans simp add: mult.assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z a list y za.\n       \\<lbrakk>\\<And>v. f $ [] \\<cdot> g $ v \\<le> g $ v;\n        a # list = y @ za; y \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> f $ y \\<cdot> g $ (za @ z) \\<le> g $ (a # list @ z)", "apply (metis \"1\" append_Cons append_assoc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  f\\<^sup>\\<star> \\<cdot> g \\<le> g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<cdot> g \\<le> g \\<longrightarrow> f\\<^sup>\\<star> \\<cdot> g \\<le> g\n\ngoal (2 subgoals):\n 1. \\<And>z x y.\n       z + x \\<cdot> y \\<le> y \\<Longrightarrow>\n       x\\<^sup>\\<star> \\<cdot> z \\<le> y\n 2. \\<And>z y x.\n       z + y \\<cdot> x \\<le> y \\<Longrightarrow>\n       z \\<cdot> x\\<^sup>\\<star> \\<le> y", "thus \"h + f \\<cdot> g \\<le> g \\<Longrightarrow> f\\<^sup>\\<star> \\<cdot> h \\<le> g\""], ["proof (prove)\nusing this:\n  f \\<cdot> g \\<le> g \\<longrightarrow> f\\<^sup>\\<star> \\<cdot> g \\<le> g\n\ngoal (1 subgoal):\n 1. h + f \\<cdot> g \\<le> g \\<Longrightarrow>\n    f\\<^sup>\\<star> \\<cdot> h \\<le> g", "by (metis (no_types, lifting) distrib_left join.sup.bounded_iff less_eq_def)"], ["proof (state)\nthis:\n  h + f \\<cdot> g \\<le> g \\<Longrightarrow>\n  f\\<^sup>\\<star> \\<cdot> h \\<le> g\n\ngoal (1 subgoal):\n 1. \\<And>z y x.\n       z + y \\<cdot> x \\<le> y \\<Longrightarrow>\n       z \\<cdot> x\\<^sup>\\<star> \\<le> y", "have \"g \\<cdot> f \\<le> g \\<longrightarrow> g \\<cdot> f\\<^sup>\\<star> \\<le> g\"\n      \\<comment> \\<open>this property is dual to the previous one; the proof is slightly different\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<cdot> f \\<le> g \\<longrightarrow> g \\<cdot> f\\<^sup>\\<star> \\<le> g", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<cdot> f \\<le> g \\<Longrightarrow> g \\<cdot> f\\<^sup>\\<star> \\<le> g", "assume \"g \\<cdot> f \\<le> g\""], ["proof (state)\nthis:\n  g \\<cdot> f \\<le> g\n\ngoal (1 subgoal):\n 1. g \\<cdot> f \\<le> g \\<Longrightarrow> g \\<cdot> f\\<^sup>\\<star> \\<le> g", "hence 1: \"\\<And>u v. g $ u \\<cdot> f $ v \\<le> g $ (u @ v)\""], ["proof (prove)\nusing this:\n  g \\<cdot> f \\<le> g\n\ngoal (1 subgoal):\n 1. \\<And>u v. g $ u \\<cdot> f $ v \\<le> g $ (u @ v)", "using [[simproc add: finite_Collect]]"], ["proof (prove)\nusing this:\n  g \\<cdot> f \\<le> g\n\ngoal (1 subgoal):\n 1. \\<And>u v. g $ u \\<cdot> f $ v \\<le> g $ (u @ v)", "apply (simp add: expand_fps_less_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<forall>n. (g \\<cdot> f) $ n \\<le> g $ n \\<Longrightarrow>\n       g $ u \\<cdot> f $ v \\<le> g $ (u @ v)", "apply (drule_tac x=\"u @ v\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       (g \\<cdot> f) $ (u @ v) \\<le> g $ (u @ v) \\<Longrightarrow>\n       g $ u \\<cdot> f $ v \\<le> g $ (u @ v)", "apply (simp add: times_fps_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u v.\n       \\<Sum> {g $ y \\<cdot> f $ z |y z. u @ v = y @ z}\n       \\<le> g $ (u @ v) \\<Longrightarrow>\n       g $ u \\<cdot> f $ v \\<le> g $ (u @ v)", "apply (auto elim!: sum_less_eqE)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  g $ ?u \\<cdot> f $ ?v \\<le> g $ (?u @ ?v)\n\ngoal (1 subgoal):\n 1. g \\<cdot> f \\<le> g \\<Longrightarrow> g \\<cdot> f\\<^sup>\\<star> \\<le> g", "hence 2: \"\\<And>u. g $ u \\<cdot> (f $ [])\\<^sup>\\<star> \\<le> g $ u\""], ["proof (prove)\nusing this:\n  g $ ?u \\<cdot> f $ ?v \\<le> g $ (?u @ ?v)\n\ngoal (1 subgoal):\n 1. \\<And>u. g $ u \\<cdot> (f $ [])\\<^sup>\\<star> \\<le> g $ u", "apply (subgoal_tac \"g $ u \\<cdot> f $ [] \\<le> g $ u\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>\\<And>u v. g $ u \\<cdot> f $ v \\<le> g $ (u @ v);\n        g $ u \\<cdot> f $ [] \\<le> g $ u\\<rbrakk>\n       \\<Longrightarrow> g $ u \\<cdot> (f $ [])\\<^sup>\\<star> \\<le> g $ u\n 2. \\<And>u.\n       (\\<And>u v. g $ u \\<cdot> f $ v \\<le> g $ (u @ v)) \\<Longrightarrow>\n       g $ u \\<cdot> f $ [] \\<le> g $ u", "apply (metis star_inductr_var)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u.\n       (\\<And>u v. g $ u \\<cdot> f $ v \\<le> g $ (u @ v)) \\<Longrightarrow>\n       g $ u \\<cdot> f $ [] \\<le> g $ u", "apply (metis append_Nil2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  g $ ?u \\<cdot> (f $ [])\\<^sup>\\<star> \\<le> g $ ?u\n\ngoal (1 subgoal):\n 1. g \\<cdot> f \\<le> g \\<Longrightarrow> g \\<cdot> f\\<^sup>\\<star> \\<le> g", "show \"g \\<cdot> f\\<^sup>\\<star> \\<le> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<cdot> f\\<^sup>\\<star> \\<le> g", "using [[simproc add: finite_Collect]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<cdot> f\\<^sup>\\<star> \\<le> g", "apply (auto intro!: sum_less_eqI simp add: expand_fps_less_eq times_fps_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z. g $ y \\<cdot> f\\<^sup>\\<star> $ z \\<le> g $ (y @ z)", "apply (rule_tac P=\"\\<lambda>y. g $ y \\<cdot> f\\<^sup>\\<star> $ z \\<le> g $ (y @ z)\" and x=\"y\" in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y z.\n       \\<forall>x. g $ x \\<cdot> f\\<^sup>\\<star> $ z \\<le> g $ (x @ z)\n 2. \\<And>y z.\n       g $ y \\<cdot> f\\<^sup>\\<star> $ z \\<le> g $ (y @ z) \\<Longrightarrow>\n       g $ y \\<cdot> f\\<^sup>\\<star> $ z \\<le> g $ (y @ z)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y z.\n       g $ y \\<cdot> f\\<^sup>\\<star> $ z \\<le> g $ (y @ z) \\<Longrightarrow>\n       g $ y \\<cdot> f\\<^sup>\\<star> $ z \\<le> g $ (y @ z)\n 2. \\<And>y z.\n       \\<forall>x. g $ x \\<cdot> f\\<^sup>\\<star> $ z \\<le> g $ (x @ z)", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<forall>x. g $ x \\<cdot> f\\<^sup>\\<star> $ z \\<le> g $ (x @ z)", "apply (induct_tac \"z\" rule: length_induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z xs.\n       \\<forall>ys.\n          length ys < length xs \\<longrightarrow>\n          (\\<forall>x.\n              g $ x \\<cdot> f\\<^sup>\\<star> $ ys\n              \\<le> g $ (x @ ys)) \\<Longrightarrow>\n       \\<forall>x. g $ x \\<cdot> f\\<^sup>\\<star> $ xs \\<le> g $ (x @ xs)", "apply (case_tac \"xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y z xs.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   (\\<forall>x.\n                       g $ x \\<cdot> f\\<^sup>\\<star> $ ys\n                       \\<le> g $ (x @ ys));\n        xs = []\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            g $ x \\<cdot> f\\<^sup>\\<star> $ xs\n                            \\<le> g $ (x @ xs)\n 2. \\<And>y z xs a list.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   (\\<forall>x.\n                       g $ x \\<cdot> f\\<^sup>\\<star> $ ys\n                       \\<le> g $ (x @ ys));\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            g $ x \\<cdot> f\\<^sup>\\<star> $ xs\n                            \\<le> g $ (x @ xs)", "apply (simp add: \"2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z xs a list.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < length xs \\<longrightarrow>\n                   (\\<forall>x.\n                       g $ x \\<cdot> f\\<^sup>\\<star> $ ys\n                       \\<le> g $ (x @ ys));\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            g $ x \\<cdot> f\\<^sup>\\<star> $ xs\n                            \\<le> g $ (x @ xs)", "apply (auto intro!: sum_less_eqI simp add: sum_distl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list x yb z.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < Suc (length list) \\<longrightarrow>\n                   (\\<forall>x.\n                       g $ x \\<cdot> f\\<^sup>\\<star> $ ys\n                       \\<le> g $ (x @ ys));\n        a # list = yb @ z; yb \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> g $ x \\<cdot>\n                         ((f $ [])\\<^sup>\\<star> \\<cdot>\n                          (f $ yb \\<cdot> f\\<^sup>\\<star> $ z))\n                         \\<le> g $ (x @ yb @ z)", "apply (rule_tac y=\"g $ x \\<cdot> f $ yb \\<cdot> f\\<^sup>\\<star> $ z\" in order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list x yb z.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < Suc (length list) \\<longrightarrow>\n                   (\\<forall>x.\n                       g $ x \\<cdot> f\\<^sup>\\<star> $ ys\n                       \\<le> g $ (x @ ys));\n        a # list = yb @ z; yb \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> g $ x \\<cdot>\n                         ((f $ [])\\<^sup>\\<star> \\<cdot>\n                          (f $ yb \\<cdot> f\\<^sup>\\<star> $ z))\n                         \\<le> g $ x \\<cdot> f $ yb \\<cdot>\n                               f\\<^sup>\\<star> $ z\n 2. \\<And>a list x yb z.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < Suc (length list) \\<longrightarrow>\n                   (\\<forall>x.\n                       g $ x \\<cdot> f\\<^sup>\\<star> $ ys\n                       \\<le> g $ (x @ ys));\n        a # list = yb @ z; yb \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> g $ x \\<cdot> f $ yb \\<cdot> f\\<^sup>\\<star> $ z\n                         \\<le> g $ (x @ yb @ z)", "apply (simp add: \"2\" mult.assoc[THEN sym] mult_isor)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list x yb z.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < Suc (length list) \\<longrightarrow>\n                   (\\<forall>x.\n                       g $ x \\<cdot> f\\<^sup>\\<star> $ ys\n                       \\<le> g $ (x @ ys));\n        a # list = yb @ z; yb \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> g $ x \\<cdot> f $ yb \\<cdot> f\\<^sup>\\<star> $ z\n                         \\<le> g $ (x @ yb @ z)", "apply (rule_tac y=\"g $ (x @ yb) \\<cdot> f\\<^sup>\\<star> $ z\" in order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list x yb z.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < Suc (length list) \\<longrightarrow>\n                   (\\<forall>x.\n                       g $ x \\<cdot> f\\<^sup>\\<star> $ ys\n                       \\<le> g $ (x @ ys));\n        a # list = yb @ z; yb \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> g $ x \\<cdot> f $ yb \\<cdot> f\\<^sup>\\<star> $ z\n                         \\<le> g $ (x @ yb) \\<cdot> f\\<^sup>\\<star> $ z\n 2. \\<And>a list x yb z.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < Suc (length list) \\<longrightarrow>\n                   (\\<forall>x.\n                       g $ x \\<cdot> f\\<^sup>\\<star> $ ys\n                       \\<le> g $ (x @ ys));\n        a # list = yb @ z; yb \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> g $ (x @ yb) \\<cdot> f\\<^sup>\\<star> $ z\n                         \\<le> g $ (x @ yb @ z)", "apply (simp add: \"1\" mult_isor)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list x yb z.\n       \\<lbrakk>\\<forall>ys.\n                   length ys < Suc (length list) \\<longrightarrow>\n                   (\\<forall>x.\n                       g $ x \\<cdot> f\\<^sup>\\<star> $ ys\n                       \\<le> g $ (x @ ys));\n        a # list = yb @ z; yb \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> g $ (x @ yb) \\<cdot> f\\<^sup>\\<star> $ z\n                         \\<le> g $ (x @ yb @ z)", "apply (drule_tac x=\"z\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list x yb z.\n       \\<lbrakk>a # list = yb @ z; yb \\<noteq> [];\n        length z < Suc (length list) \\<longrightarrow>\n        (\\<forall>x.\n            g $ x \\<cdot> f\\<^sup>\\<star> $ z \\<le> g $ (x @ z))\\<rbrakk>\n       \\<Longrightarrow> g $ (x @ yb) \\<cdot> f\\<^sup>\\<star> $ z\n                         \\<le> g $ (x @ yb @ z)", "apply (drule mp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list x yb z.\n       \\<lbrakk>a # list = yb @ z; yb \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> length z < Suc (length list)\n 2. \\<And>a list x yb z.\n       \\<lbrakk>a # list = yb @ z; yb \\<noteq> [];\n        \\<forall>x.\n           g $ x \\<cdot> f\\<^sup>\\<star> $ z \\<le> g $ (x @ z)\\<rbrakk>\n       \\<Longrightarrow> g $ (x @ yb) \\<cdot> f\\<^sup>\\<star> $ z\n                         \\<le> g $ (x @ yb @ z)", "apply (metis append_eq_Cons_conv length_append less_not_refl2 add.commute not_less_eq trans_less_add1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list x yb z.\n       \\<lbrakk>a # list = yb @ z; yb \\<noteq> [];\n        \\<forall>x.\n           g $ x \\<cdot> f\\<^sup>\\<star> $ z \\<le> g $ (x @ z)\\<rbrakk>\n       \\<Longrightarrow> g $ (x @ yb) \\<cdot> f\\<^sup>\\<star> $ z\n                         \\<le> g $ (x @ yb @ z)", "apply (metis append_assoc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  g \\<cdot> f\\<^sup>\\<star> \\<le> g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g \\<cdot> f \\<le> g \\<longrightarrow> g \\<cdot> f\\<^sup>\\<star> \\<le> g\n\ngoal (1 subgoal):\n 1. \\<And>z y x.\n       z + y \\<cdot> x \\<le> y \\<Longrightarrow>\n       z \\<cdot> x\\<^sup>\\<star> \\<le> y", "thus \"h + g \\<cdot> f \\<le> g \\<Longrightarrow> h \\<cdot> f\\<^sup>\\<star> \\<le> g\""], ["proof (prove)\nusing this:\n  g \\<cdot> f \\<le> g \\<longrightarrow> g \\<cdot> f\\<^sup>\\<star> \\<le> g\n\ngoal (1 subgoal):\n 1. h + g \\<cdot> f \\<le> g \\<Longrightarrow>\n    h \\<cdot> f\\<^sup>\\<star> \\<le> g", "by (metis (no_types, lifting) distrib_right' join.sup.bounded_iff order_prop)"], ["proof (state)\nthis:\n  h + g \\<cdot> f \\<le> g \\<Longrightarrow>\n  h \\<cdot> f\\<^sup>\\<star> \\<le> g\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* instantiation *)"], ["", "end"]]}