{"file_name": "/home/qj213/afp-2021-10-22/thys/Kleene_Algebra/Matrix.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Kleene_Algebra", "problem_names": ["lemma UNIV_atMost:\n  \"(UNIV::'a atMost set) = Abs_atMost ` {..<LENGTH('a::len)}\"", "lemma finite_UNIV_atMost [simp]: \"finite (UNIV::('a::len) atMost set)\"", "lemma plus_matrix_def' [simp]:\n  \"Matrix A + Matrix B = Matrix (\\<lambda>i j. A i j + B i j)\"", "lemma plus_sqmatrix_def' [simp]:\n  \"SqMatrix A + SqMatrix B = SqMatrix (\\<lambda>i j. A i j + B i j)\"", "lemma matrix_add_0_right [simp]:\n  \"A + 0 = (A::('a::monoid_add,'m,'n) matrix)\"", "lemma matrix_add_0_left [simp]:\n  \"0 + A = (A::('a::monoid_add,'m,'n) matrix)\"", "lemma matrix_add_commute [simp]:\n  \"(A::('a::ab_semigroup_add,'m,'n) matrix) + B = B + A\"", "lemma matrix_add_assoc:\n  \"(A::('a::semigroup_add,'m,'n) matrix) + B + C = A + (B + C)\"", "lemma matrix_add_left_commute [simp]:\n  \"(A::('a::ab_semigroup_add,'m,'n) matrix) + (B + C) = B + (A + C)\"", "lemma sqmatrix_add_0_right [simp]:\n  \"A + 0 = (A::('a::monoid_add,'m) sqmatrix)\"", "lemma sqmatrix_add_0_left [simp]:\n  \"0 + A = (A::('a::monoid_add,'m) sqmatrix)\"", "lemma sqmatrix_add_commute [simp]:\n  \"(A::('a::ab_semigroup_add,'m) sqmatrix) + B = B + A\"", "lemma sqmatrix_add_assoc:\n  \"(A::('a::semigroup_add,'m) sqmatrix) + B + C = A + (B + C)\"", "lemma sqmatrix_add_left_commute [simp]:\n  \"(A::('a::ab_semigroup_add,'m) sqmatrix) + (B + C) = B + (A + C)\"", "lemma times_sqmatrix_def' [simp]:\n  \"SqMatrix A * SqMatrix B = SqMatrix (\\<lambda>i j. sum (\\<lambda>k. A i k * B k j) (UNIV::'k atMost set))\"", "lemma matrix_mult_0_right [simp]:\n  \"(A::('a::{comm_monoid_add,mult_zero},'m,'n) matrix) *\\<^sub>M 0 = 0\"", "lemma matrix_mult_0_left [simp]:\n  \"0 *\\<^sub>M (A::('a::{comm_monoid_add,mult_zero},'m,'n) matrix) = 0\"", "lemma sum_delta_r_0 [simp]:\n  \"\\<lbrakk> finite S; j \\<notin> S \\<rbrakk> \\<Longrightarrow> (\\<Sum>k\\<in>S. f k * (if k = j then 1 else (0::'b::{semiring_0,monoid_mult}))) = 0\"", "lemma sum_delta_r_1 [simp]:\n  \"\\<lbrakk> finite S; j \\<in> S \\<rbrakk> \\<Longrightarrow> (\\<Sum>k\\<in>S. f k * (if k = j then 1 else (0::'b::{semiring_0,monoid_mult}))) = f j\"", "lemma matrix_mult_1_right [simp]:\n  \"(A::('a::{semiring_0,monoid_mult},'m::len,'n::len) matrix) *\\<^sub>M 1 = A\"", "lemma sum_delta_l_0 [simp]:\n  \"\\<lbrakk> finite S; i \\<notin> S \\<rbrakk> \\<Longrightarrow> (\\<Sum>k\\<in>S. (if i = k then 1 else (0::'b::{semiring_0,monoid_mult})) * f k j) = 0\"", "lemma sum_delta_l_1 [simp]:\n  \"\\<lbrakk> finite S; i \\<in> S \\<rbrakk> \\<Longrightarrow> (\\<Sum>k\\<in>S. (if i = k then 1 else (0::'b::{semiring_0,monoid_mult})) * f k j) = f i j\"", "lemma matrix_mult_1_left [simp]:\n  \"1 *\\<^sub>M (A::('a::{semiring_0,monoid_mult},'m::len,'n::len) matrix) = A\"", "lemma matrix_mult_assoc:\n  \"(A::('a::semiring_0,'m,'n) matrix) *\\<^sub>M B *\\<^sub>M C = A *\\<^sub>M (B *\\<^sub>M C)\"", "lemma matrix_mult_distrib_left:\n  \"(A::('a::{comm_monoid_add,semiring},'m,'n::len) matrix) *\\<^sub>M (B + C) = A *\\<^sub>M B + A *\\<^sub>M C\"", "lemma matrix_mult_distrib_right:\n  \"((A::('a::{comm_monoid_add,semiring},'m,'n::len) matrix) + B) *\\<^sub>M C = A *\\<^sub>M C + B *\\<^sub>M C\"", "lemma sqmatrix_mult_0_right [simp]:\n  \"(A::('a::{comm_monoid_add,mult_zero},'m) sqmatrix) * 0 = 0\"", "lemma sqmatrix_mult_0_left [simp]:\n  \"0 * (A::('a::{comm_monoid_add,mult_zero},'m) sqmatrix) = 0\"", "lemma sqmatrix_mult_1_right [simp]:\n  \"(A::('a::{semiring_0,monoid_mult},'m::len) sqmatrix) * 1 = A\"", "lemma sqmatrix_mult_1_left [simp]:\n  \"1 * (A::('a::{semiring_0,monoid_mult},'m::len) sqmatrix) = A\"", "lemma sqmatrix_mult_assoc:\n  \"(A::('a::{semiring_0,monoid_mult},'m) sqmatrix) * B * C = A * (B * C)\"", "lemma sqmatrix_mult_distrib_left:\n  \"(A::('a::{comm_monoid_add,semiring},'m::len) sqmatrix) * (B + C) = A * B + A * C\"", "lemma sqmatrix_mult_distrib_right:\n  \"((A::('a::{comm_monoid_add,semiring},'m::len) sqmatrix) + B) * C = A * C + B * C\""], "translations": [["", "lemma UNIV_atMost:\n  \"(UNIV::'a atMost set) = Abs_atMost ` {..<LENGTH('a::len)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV = Abs_atMost ` {..<LENGTH('a)}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> Abs_atMost ` {..<LENGTH('a)}", "apply (rule Abs_atMost_induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       y \\<in> {..<LENGTH('a)} \\<Longrightarrow>\n       Abs_atMost y \\<in> Abs_atMost ` {..<LENGTH('a)}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma finite_UNIV_atMost [simp]: \"finite (UNIV::('a::len) atMost set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite UNIV", "by (simp add: UNIV_atMost)"], ["", "text \\<open>Our matrix type is similar to \\mbox{\\<open>'a^'n^'m\\<close>} from\n{\\em HOL/Multivariate\\_Analysis/Finite\\_Cartesian\\_Product.thy}, but\n(i)~we explicitly define a type constructor for matrices and square\nmatrices, and (ii)~in the definition of operations, e.g., matrix\nmultiplication, we impose weaker sort requirements on the element\ntype.\\<close>"], ["", "context notes [[typedef_overloaded]]\nbegin"], ["", "datatype ('a,'m,'n) matrix = Matrix \"'m atMost \\<Rightarrow> 'n atMost \\<Rightarrow> 'a\""], ["", "datatype ('a,'m) sqmatrix = SqMatrix \"'m atMost \\<Rightarrow> 'm atMost \\<Rightarrow> 'a\""], ["", "end"], ["", "fun sqmatrix_of_matrix where\n  \"sqmatrix_of_matrix (Matrix A) = SqMatrix A\""], ["", "fun matrix_of_sqmatrix where\n  \"matrix_of_sqmatrix (SqMatrix A) = Matrix A\""], ["", "subsection \\<open>0 and 1\\<close>"], ["", "instantiation matrix :: (zero,type,type) zero\nbegin"], ["", "definition zero_matrix_def: \"0 \\<equiv> Matrix (\\<lambda>i j. 0)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b, 'c) matrix, zero_class)", ".."], ["", "end"], ["", "instantiation sqmatrix :: (zero,type) zero\nbegin"], ["", "definition zero_sqmatrix_def: \"0 \\<equiv> SqMatrix (\\<lambda>i j. 0)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) sqmatrix, zero_class)", ".."], ["", "end"], ["", "text \\<open>Tricky sort issues: compare @{term one_matrix} with @{term\none_sqmatrix} \\dots\\<close>"], ["", "instantiation matrix :: (\"{zero,one}\",len,len) one\nbegin"], ["", "definition one_matrix_def:\n    \"1 \\<equiv> Matrix (\\<lambda>i j. if Rep_atMost i = Rep_atMost j then 1 else 0)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b, 'c) matrix, one_class)", ".."], ["", "end"], ["", "instantiation sqmatrix :: (\"{zero,one}\",type) one\nbegin"], ["", "definition one_sqmatrix_def:\n    \"1 \\<equiv> SqMatrix (\\<lambda>i j. if i = j then 1 else 0)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) sqmatrix, one_class)", ".."], ["", "end"], ["", "subsection \\<open>Matrix Addition\\<close>"], ["", "fun matrix_plus where\n  \"matrix_plus (Matrix A) (Matrix B) = Matrix (\\<lambda>i j. A i j + B i j)\""], ["", "instantiation matrix :: (plus,type,type) plus\nbegin"], ["", "definition plus_matrix_def: \"A + B \\<equiv> matrix_plus A B\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b, 'c) matrix, plus_class)", ".."], ["", "end"], ["", "lemma plus_matrix_def' [simp]:\n  \"Matrix A + Matrix B = Matrix (\\<lambda>i j. A i j + B i j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matrix A + Matrix B = Matrix (\\<lambda>i j. A i j + B i j)", "by (simp add: plus_matrix_def)"], ["", "instantiation sqmatrix :: (plus,type) plus\nbegin"], ["", "definition plus_sqmatrix_def:\n    \"A + B \\<equiv> sqmatrix_of_matrix (matrix_of_sqmatrix A + matrix_of_sqmatrix B)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) sqmatrix, plus_class)", ".."], ["", "end"], ["", "lemma plus_sqmatrix_def' [simp]:\n  \"SqMatrix A + SqMatrix B = SqMatrix (\\<lambda>i j. A i j + B i j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SqMatrix A + SqMatrix B = SqMatrix (\\<lambda>i j. A i j + B i j)", "by (simp add: plus_sqmatrix_def)"], ["", "lemma matrix_add_0_right [simp]:\n  \"A + 0 = (A::('a::monoid_add,'m,'n) matrix)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A + 0 = A", "by (cases A, simp add: zero_matrix_def)"], ["", "lemma matrix_add_0_left [simp]:\n  \"0 + A = (A::('a::monoid_add,'m,'n) matrix)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 + A = A", "by (cases A, simp add: zero_matrix_def)"], ["", "lemma matrix_add_commute [simp]:\n  \"(A::('a::ab_semigroup_add,'m,'n) matrix) + B = B + A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A + B = B + A", "by (cases A, cases B, simp add: add.commute)"], ["", "lemma matrix_add_assoc:\n  \"(A::('a::semigroup_add,'m,'n) matrix) + B + C = A + (B + C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A + B + C = A + (B + C)", "by (cases A, cases B, cases C, simp add: add.assoc)"], ["", "lemma matrix_add_left_commute [simp]:\n  \"(A::('a::ab_semigroup_add,'m,'n) matrix) + (B + C) = B + (A + C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A + (B + C) = B + (A + C)", "by (metis matrix_add_assoc matrix_add_commute)"], ["", "lemma sqmatrix_add_0_right [simp]:\n  \"A + 0 = (A::('a::monoid_add,'m) sqmatrix)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A + 0 = A", "by (cases A, simp add: zero_sqmatrix_def)"], ["", "lemma sqmatrix_add_0_left [simp]:\n  \"0 + A = (A::('a::monoid_add,'m) sqmatrix)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 + A = A", "by (cases A, simp add: zero_sqmatrix_def)"], ["", "lemma sqmatrix_add_commute [simp]:\n  \"(A::('a::ab_semigroup_add,'m) sqmatrix) + B = B + A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A + B = B + A", "by (cases A, cases B, simp add: add.commute)"], ["", "lemma sqmatrix_add_assoc:\n  \"(A::('a::semigroup_add,'m) sqmatrix) + B + C = A + (B + C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A + B + C = A + (B + C)", "by (cases A, cases B, cases C, simp add: add.assoc)"], ["", "lemma sqmatrix_add_left_commute [simp]:\n  \"(A::('a::ab_semigroup_add,'m) sqmatrix) + (B + C) = B + (A + C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A + (B + C) = B + (A + C)", "by (metis sqmatrix_add_commute sqmatrix_add_assoc)"], ["", "subsection \\<open>Order (via Addition)\\<close>"], ["", "instantiation matrix :: (plus,type,type) plus_ord\nbegin"], ["", "definition less_eq_matrix_def:\n    \"(A::('a, 'b, 'c) matrix) \\<le> B \\<equiv> A + B = B\""], ["", "definition less_matrix_def:\n    \"(A::('a, 'b, 'c) matrix) < B \\<equiv> A \\<le> B \\<and> A \\<noteq> B\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b, 'c) matrix, plus_ord_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y. (x \\<le> y) = (x + y = y)\n 2. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)", "fix A B :: \"('a, 'b, 'c) matrix\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y. (x \\<le> y) = (x + y = y)\n 2. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)", "show \"A \\<le> B \\<longleftrightarrow> A + B = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<le> B) = (A + B = B)", "by (metis less_eq_matrix_def)"], ["proof (state)\nthis:\n  (A \\<le> B) = (A + B = B)\n\ngoal (1 subgoal):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)", "show \"A < B \\<longleftrightarrow> A \\<le> B \\<and> A \\<noteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A < B) = (A \\<le> B \\<and> A \\<noteq> B)", "by (metis less_matrix_def)"], ["proof (state)\nthis:\n  (A < B) = (A \\<le> B \\<and> A \\<noteq> B)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "instantiation sqmatrix :: (plus,type) plus_ord\nbegin"], ["", "definition less_eq_sqmatrix_def:\n    \"(A::('a, 'b) sqmatrix) \\<le> B \\<equiv> A + B = B\""], ["", "definition less_sqmatrix_def:\n    \"(A::('a, 'b) sqmatrix) < B \\<equiv> A \\<le> B \\<and> A \\<noteq> B\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) sqmatrix, plus_ord_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y. (x \\<le> y) = (x + y = y)\n 2. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)", "fix A B :: \"('a, 'b) sqmatrix\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y. (x \\<le> y) = (x + y = y)\n 2. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)", "show \"A \\<le> B \\<longleftrightarrow> A + B = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<le> B) = (A + B = B)", "by (metis less_eq_sqmatrix_def)"], ["proof (state)\nthis:\n  (A \\<le> B) = (A + B = B)\n\ngoal (1 subgoal):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)", "show \"A < B \\<longleftrightarrow> A \\<le> B \\<and> A \\<noteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A < B) = (A \\<le> B \\<and> A \\<noteq> B)", "by (metis less_sqmatrix_def)"], ["proof (state)\nthis:\n  (A < B) = (A \\<le> B \\<and> A \\<noteq> B)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Matrix Multiplication\\<close>"], ["", "fun matrix_times :: \"('a::{comm_monoid_add,times},'m,'k) matrix \\<Rightarrow> ('a,'k,'n) matrix \\<Rightarrow> ('a,'m,'n) matrix\" where\n  \"matrix_times (Matrix A) (Matrix B) = Matrix (\\<lambda>i j. sum (\\<lambda>k. A i k * B k j) (UNIV::'k atMost set))\""], ["", "notation matrix_times (infixl \"*\\<^sub>M\" 70)"], ["", "instantiation sqmatrix :: (\"{comm_monoid_add,times}\",type) times\nbegin"], ["", "definition times_sqmatrix_def:\n    \"A * B = sqmatrix_of_matrix (matrix_of_sqmatrix A *\\<^sub>M matrix_of_sqmatrix B)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) sqmatrix, times_class)", ".."], ["", "end"], ["", "lemma times_sqmatrix_def' [simp]:\n  \"SqMatrix A * SqMatrix B = SqMatrix (\\<lambda>i j. sum (\\<lambda>k. A i k * B k j) (UNIV::'k atMost set))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SqMatrix A \\<cdot> SqMatrix B =\n    SqMatrix (\\<lambda>i j. \\<Sum>k\\<in>UNIV. A i k \\<cdot> B k j)", "by (simp add: times_sqmatrix_def)"], ["", "lemma matrix_mult_0_right [simp]:\n  \"(A::('a::{comm_monoid_add,mult_zero},'m,'n) matrix) *\\<^sub>M 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>M 0 = 0", "by (cases A, simp add: zero_matrix_def)"], ["", "lemma matrix_mult_0_left [simp]:\n  \"0 *\\<^sub>M (A::('a::{comm_monoid_add,mult_zero},'m,'n) matrix) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 *\\<^sub>M A = 0", "by (cases A, simp add: zero_matrix_def)"], ["", "lemma sum_delta_r_0 [simp]:\n  \"\\<lbrakk> finite S; j \\<notin> S \\<rbrakk> \\<Longrightarrow> (\\<Sum>k\\<in>S. f k * (if k = j then 1 else (0::'b::{semiring_0,monoid_mult}))) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; j \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> (\\<Sum>k\\<in>S.\n                         f k \\<cdot> (if k = j then 1::'b else (0::'b))) =\n                      (0::'b)", "by (induct S rule: finite_induct, auto)"], ["", "lemma sum_delta_r_1 [simp]:\n  \"\\<lbrakk> finite S; j \\<in> S \\<rbrakk> \\<Longrightarrow> (\\<Sum>k\\<in>S. f k * (if k = j then 1 else (0::'b::{semiring_0,monoid_mult}))) = f j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; j \\<in> S\\<rbrakk>\n    \\<Longrightarrow> (\\<Sum>k\\<in>S.\n                         f k \\<cdot> (if k = j then 1::'b else (0::'b))) =\n                      f j", "by (induct S rule: finite_induct, auto)"], ["", "lemma matrix_mult_1_right [simp]:\n  \"(A::('a::{semiring_0,monoid_mult},'m::len,'n::len) matrix) *\\<^sub>M 1 = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>M 1 = A", "by (cases A, simp add: one_matrix_def)"], ["", "lemma sum_delta_l_0 [simp]:\n  \"\\<lbrakk> finite S; i \\<notin> S \\<rbrakk> \\<Longrightarrow> (\\<Sum>k\\<in>S. (if i = k then 1 else (0::'b::{semiring_0,monoid_mult})) * f k j) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; i \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> (\\<Sum>k\\<in>S.\n                         (if i = k then 1::'b else (0::'b)) \\<cdot> f k j) =\n                      (0::'b)", "by (induct S rule: finite_induct, auto)"], ["", "lemma sum_delta_l_1 [simp]:\n  \"\\<lbrakk> finite S; i \\<in> S \\<rbrakk> \\<Longrightarrow> (\\<Sum>k\\<in>S. (if i = k then 1 else (0::'b::{semiring_0,monoid_mult})) * f k j) = f i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; i \\<in> S\\<rbrakk>\n    \\<Longrightarrow> (\\<Sum>k\\<in>S.\n                         (if i = k then 1::'b else (0::'b)) \\<cdot> f k j) =\n                      f i j", "by (induct S rule: finite_induct, auto)"], ["", "lemma matrix_mult_1_left [simp]:\n  \"1 *\\<^sub>M (A::('a::{semiring_0,monoid_mult},'m::len,'n::len) matrix) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 *\\<^sub>M A = A", "by (cases A, simp add: one_matrix_def)"], ["", "lemma matrix_mult_assoc:\n  \"(A::('a::semiring_0,'m,'n) matrix) *\\<^sub>M B *\\<^sub>M C = A *\\<^sub>M (B *\\<^sub>M C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>M B *\\<^sub>M C = A *\\<^sub>M (B *\\<^sub>M C)", "apply (cases A)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       A = Matrix x \\<Longrightarrow>\n       A *\\<^sub>M B *\\<^sub>M C = A *\\<^sub>M (B *\\<^sub>M C)", "apply (cases B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>A = Matrix x; B = Matrix xa\\<rbrakk>\n       \\<Longrightarrow> A *\\<^sub>M B *\\<^sub>M C =\n                         A *\\<^sub>M (B *\\<^sub>M C)", "apply (cases C)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>A = Matrix x; B = Matrix xa; C = Matrix xb\\<rbrakk>\n       \\<Longrightarrow> A *\\<^sub>M B *\\<^sub>M C =\n                         A *\\<^sub>M (B *\\<^sub>M C)", "apply (simp add: sum_distrib_right sum_distrib_left mult.assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>A = Matrix x; B = Matrix xa; C = Matrix xb\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>i j.\n                             \\<Sum>k\\<in>UNIV.\n                               \\<Sum>n\\<in>UNIV.\n                                 x i n \\<cdot> (xa n k \\<cdot> xb k j)) =\n                         (\\<lambda>i j.\n                             \\<Sum>k\\<in>UNIV.\n                               \\<Sum>n\\<in>UNIV.\n                                 x i k \\<cdot> (xa k n \\<cdot> xb n j))", "apply (subst sum.swap)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>A = Matrix x; B = Matrix xa; C = Matrix xb\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>i j.\n                             \\<Sum>ja\\<in>UNIV.\n                               \\<Sum>ia\\<in>UNIV.\n                                 x i ja \\<cdot>\n                                 (xa ja ia \\<cdot> xb ia j)) =\n                         (\\<lambda>i j.\n                             \\<Sum>k\\<in>UNIV.\n                               \\<Sum>n\\<in>UNIV.\n                                 x i k \\<cdot> (xa k n \\<cdot> xb n j))", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma matrix_mult_distrib_left:\n  \"(A::('a::{comm_monoid_add,semiring},'m,'n::len) matrix) *\\<^sub>M (B + C) = A *\\<^sub>M B + A *\\<^sub>M C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>M (B + C) = A *\\<^sub>M B + A *\\<^sub>M C", "by (cases A, cases B, cases C, simp add: distrib_left sum.distrib)"], ["", "lemma matrix_mult_distrib_right:\n  \"((A::('a::{comm_monoid_add,semiring},'m,'n::len) matrix) + B) *\\<^sub>M C = A *\\<^sub>M C + B *\\<^sub>M C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + B) *\\<^sub>M C = A *\\<^sub>M C + B *\\<^sub>M C", "by (cases A, cases B, cases C, simp add: distrib_right sum.distrib)"], ["", "lemma sqmatrix_mult_0_right [simp]:\n  \"(A::('a::{comm_monoid_add,mult_zero},'m) sqmatrix) * 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<cdot> 0 = 0", "by (cases A, simp add: zero_sqmatrix_def)"], ["", "lemma sqmatrix_mult_0_left [simp]:\n  \"0 * (A::('a::{comm_monoid_add,mult_zero},'m) sqmatrix) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<cdot> A = 0", "by (cases A, simp add: zero_sqmatrix_def)"], ["", "lemma sqmatrix_mult_1_right [simp]:\n  \"(A::('a::{semiring_0,monoid_mult},'m::len) sqmatrix) * 1 = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<cdot> 1 = A", "by (cases A, simp add: one_sqmatrix_def)"], ["", "lemma sqmatrix_mult_1_left [simp]:\n  \"1 * (A::('a::{semiring_0,monoid_mult},'m::len) sqmatrix) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<cdot> A = A", "by (cases A, simp add: one_sqmatrix_def)"], ["", "lemma sqmatrix_mult_assoc:\n  \"(A::('a::{semiring_0,monoid_mult},'m) sqmatrix) * B * C = A * (B * C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<cdot> B \\<cdot> C = A \\<cdot> (B \\<cdot> C)", "apply (cases A)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       A = SqMatrix x \\<Longrightarrow>\n       A \\<cdot> B \\<cdot> C = A \\<cdot> (B \\<cdot> C)", "apply (cases B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>A = SqMatrix x; B = SqMatrix xa\\<rbrakk>\n       \\<Longrightarrow> A \\<cdot> B \\<cdot> C = A \\<cdot> (B \\<cdot> C)", "apply (cases C)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>A = SqMatrix x; B = SqMatrix xa; C = SqMatrix xb\\<rbrakk>\n       \\<Longrightarrow> A \\<cdot> B \\<cdot> C = A \\<cdot> (B \\<cdot> C)", "apply (simp add: sum_distrib_right sum_distrib_left mult.assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>A = SqMatrix x; B = SqMatrix xa; C = SqMatrix xb\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>i j.\n                             \\<Sum>k\\<in>UNIV.\n                               \\<Sum>n\\<in>UNIV.\n                                 x i n \\<cdot> (xa n k \\<cdot> xb k j)) =\n                         (\\<lambda>i j.\n                             \\<Sum>k\\<in>UNIV.\n                               \\<Sum>n\\<in>UNIV.\n                                 x i k \\<cdot> (xa k n \\<cdot> xb n j))", "apply (subst sum.swap)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>A = SqMatrix x; B = SqMatrix xa; C = SqMatrix xb\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>i j.\n                             \\<Sum>ja\\<in>UNIV.\n                               \\<Sum>ia\\<in>UNIV.\n                                 x i ja \\<cdot>\n                                 (xa ja ia \\<cdot> xb ia j)) =\n                         (\\<lambda>i j.\n                             \\<Sum>k\\<in>UNIV.\n                               \\<Sum>n\\<in>UNIV.\n                                 x i k \\<cdot> (xa k n \\<cdot> xb n j))", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sqmatrix_mult_distrib_left:\n  \"(A::('a::{comm_monoid_add,semiring},'m::len) sqmatrix) * (B + C) = A * B + A * C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<cdot> (B + C) = A \\<cdot> B + A \\<cdot> C", "by (cases A, cases B, cases C, simp add: distrib_left sum.distrib)"], ["", "lemma sqmatrix_mult_distrib_right:\n  \"((A::('a::{comm_monoid_add,semiring},'m::len) sqmatrix) + B) * C = A * C + B * C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + B) \\<cdot> C = A \\<cdot> C + B \\<cdot> C", "by (cases A, cases B, cases C, simp add: distrib_right sum.distrib)"], ["", "subsection \\<open>Square-Matrix Model of Dioids\\<close>"], ["", "text \\<open>The following subclass proofs are necessary to connect parts\nof our algebraic hierarchy to the hierarchy found in the Isabelle/HOL\nlibrary.\\<close>"], ["", "subclass (in ab_near_semiring_one_zerol) comm_monoid_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.comm_monoid_add (+) (0::'a)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. (0::'a) + a = a", "fix a :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. (0::'a) + a = a", "show \"0 + a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) + a = a", "by (fact add_zerol)"], ["proof (state)\nthis:\n  (0::'a) + a = a\n\ngoal:\nNo subgoals!", "qed"], ["", "subclass (in semiring_one_zero) semiring_0"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.semiring_0 (+) (0::'a) (\\<cdot>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. (0::'a) \\<cdot> a = (0::'a)\n 2. \\<And>a. a \\<cdot> (0::'a) = (0::'a)", "fix a :: 'a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. (0::'a) \\<cdot> a = (0::'a)\n 2. \\<And>a. a \\<cdot> (0::'a) = (0::'a)", "show \"0 * a = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<cdot> a = (0::'a)", "by (fact annil)"], ["proof (state)\nthis:\n  (0::'a) \\<cdot> a = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<cdot> (0::'a) = (0::'a)", "show \"a * 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot> (0::'a) = (0::'a)", "by (fact annir)"], ["proof (state)\nthis:\n  a \\<cdot> (0::'a) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "subclass (in ab_near_semiring_one) monoid_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.monoid_mult (1::'a) (\\<cdot>)", ".."], ["", "instantiation sqmatrix :: (dioid_one_zero,len) dioid_one_zero\nbegin"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) sqmatrix, dioid_one_zero_class)", "proof"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>a b c. a + b + c = a + (b + c)\n 2. \\<And>a b. a + b = b + a\n 3. \\<And>a b c. a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)\n 4. \\<And>x y z. (x + y) \\<cdot> z = x \\<cdot> z + y \\<cdot> z\n 5. \\<And>x. 1 \\<cdot> x = x\n 6. \\<And>x. x \\<cdot> 1 = x\n 7. \\<And>x. 0 + x = x\n 8. \\<And>x. 0 \\<cdot> x = 0\n 9. \\<And>x. x \\<cdot> 0 = 0\n 10. \\<And>x. x + x = x\nA total of 11 subgoals...", "fix A B C :: \"('a, 'b) sqmatrix\""], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>a b c. a + b + c = a + (b + c)\n 2. \\<And>a b. a + b = b + a\n 3. \\<And>a b c. a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)\n 4. \\<And>x y z. (x + y) \\<cdot> z = x \\<cdot> z + y \\<cdot> z\n 5. \\<And>x. 1 \\<cdot> x = x\n 6. \\<And>x. x \\<cdot> 1 = x\n 7. \\<And>x. 0 + x = x\n 8. \\<And>x. 0 \\<cdot> x = 0\n 9. \\<And>x. x \\<cdot> 0 = 0\n 10. \\<And>x. x + x = x\nA total of 11 subgoals...", "show \"A + B + C = A + (B + C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A + B + C = A + (B + C)", "by (fact sqmatrix_add_assoc)"], ["proof (state)\nthis:\n  A + B + C = A + (B + C)\n\ngoal (10 subgoals):\n 1. \\<And>a b. a + b = b + a\n 2. \\<And>a b c. a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)\n 3. \\<And>x y z. (x + y) \\<cdot> z = x \\<cdot> z + y \\<cdot> z\n 4. \\<And>x. 1 \\<cdot> x = x\n 5. \\<And>x. x \\<cdot> 1 = x\n 6. \\<And>x. 0 + x = x\n 7. \\<And>x. 0 \\<cdot> x = 0\n 8. \\<And>x. x \\<cdot> 0 = 0\n 9. \\<And>x. x + x = x\n 10. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"A + B = B + A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A + B = B + A", "by (fact sqmatrix_add_commute)"], ["proof (state)\nthis:\n  A + B = B + A\n\ngoal (9 subgoals):\n 1. \\<And>a b c. a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)\n 2. \\<And>x y z. (x + y) \\<cdot> z = x \\<cdot> z + y \\<cdot> z\n 3. \\<And>x. 1 \\<cdot> x = x\n 4. \\<And>x. x \\<cdot> 1 = x\n 5. \\<And>x. 0 + x = x\n 6. \\<And>x. 0 \\<cdot> x = 0\n 7. \\<And>x. x \\<cdot> 0 = 0\n 8. \\<And>x. x + x = x\n 9. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"A * B * C = A * (B * C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<cdot> B \\<cdot> C = A \\<cdot> (B \\<cdot> C)", "by (fact sqmatrix_mult_assoc)"], ["proof (state)\nthis:\n  A \\<cdot> B \\<cdot> C = A \\<cdot> (B \\<cdot> C)\n\ngoal (8 subgoals):\n 1. \\<And>x y z. (x + y) \\<cdot> z = x \\<cdot> z + y \\<cdot> z\n 2. \\<And>x. 1 \\<cdot> x = x\n 3. \\<And>x. x \\<cdot> 1 = x\n 4. \\<And>x. 0 + x = x\n 5. \\<And>x. 0 \\<cdot> x = 0\n 6. \\<And>x. x \\<cdot> 0 = 0\n 7. \\<And>x. x + x = x\n 8. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"(A + B) * C = A * C + B * C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + B) \\<cdot> C = A \\<cdot> C + B \\<cdot> C", "by (fact sqmatrix_mult_distrib_right)"], ["proof (state)\nthis:\n  (A + B) \\<cdot> C = A \\<cdot> C + B \\<cdot> C\n\ngoal (7 subgoals):\n 1. \\<And>x. 1 \\<cdot> x = x\n 2. \\<And>x. x \\<cdot> 1 = x\n 3. \\<And>x. 0 + x = x\n 4. \\<And>x. 0 \\<cdot> x = 0\n 5. \\<And>x. x \\<cdot> 0 = 0\n 6. \\<And>x. x + x = x\n 7. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"1 * A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<cdot> A = A", "by (fact sqmatrix_mult_1_left)"], ["proof (state)\nthis:\n  1 \\<cdot> A = A\n\ngoal (6 subgoals):\n 1. \\<And>x. x \\<cdot> 1 = x\n 2. \\<And>x. 0 + x = x\n 3. \\<And>x. 0 \\<cdot> x = 0\n 4. \\<And>x. x \\<cdot> 0 = 0\n 5. \\<And>x. x + x = x\n 6. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"A * 1 = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<cdot> 1 = A", "by (fact sqmatrix_mult_1_right)"], ["proof (state)\nthis:\n  A \\<cdot> 1 = A\n\ngoal (5 subgoals):\n 1. \\<And>x. 0 + x = x\n 2. \\<And>x. 0 \\<cdot> x = 0\n 3. \\<And>x. x \\<cdot> 0 = 0\n 4. \\<And>x. x + x = x\n 5. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"0 + A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 + A = A", "by (fact sqmatrix_add_0_left)"], ["proof (state)\nthis:\n  0 + A = A\n\ngoal (4 subgoals):\n 1. \\<And>x. 0 \\<cdot> x = 0\n 2. \\<And>x. x \\<cdot> 0 = 0\n 3. \\<And>x. x + x = x\n 4. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"0 * A = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<cdot> A = 0", "by (fact sqmatrix_mult_0_left)"], ["proof (state)\nthis:\n  0 \\<cdot> A = 0\n\ngoal (3 subgoals):\n 1. \\<And>x. x \\<cdot> 0 = 0\n 2. \\<And>x. x + x = x\n 3. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"A * 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<cdot> 0 = 0", "by (fact sqmatrix_mult_0_right)"], ["proof (state)\nthis:\n  A \\<cdot> 0 = 0\n\ngoal (2 subgoals):\n 1. \\<And>x. x + x = x\n 2. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"A + A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A + A = A", "by (cases A, simp)"], ["proof (state)\nthis:\n  A + A = A\n\ngoal (1 subgoal):\n 1. \\<And>a b c. a \\<cdot> (b + c) = a \\<cdot> b + a \\<cdot> c", "show \"A * (B + C) = A * B + A * C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<cdot> (B + C) = A \\<cdot> B + A \\<cdot> C", "by (fact sqmatrix_mult_distrib_left)"], ["proof (state)\nthis:\n  A \\<cdot> (B + C) = A \\<cdot> B + A \\<cdot> C\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Kleene Star for Matrices\\<close>"], ["", "text \\<open>We currently do not implement the Kleene star of matrices,\nsince this is complicated.\\<close>"], ["", "end"]]}