{"file_name": "/home/qj213/afp-2021-10-22/thys/Kleene_Algebra/Finite_Suprema.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Kleene_Algebra", "problem_names": ["lemma fun_im: \"{f a |a. a \\<in> A} = {b. b \\<in> f ` A}\"", "lemma fset_to_im: \"{f x |x. x \\<in> X} = f ` X\"", "lemma cart_flip_aux: \"{f (snd p) (fst p) |p. p \\<in> (B \\<times> A)} = {f (fst p) (snd p) |p. p \\<in> (A \\<times> B)}\"", "lemma cart_flip: \"(\\<lambda>p. f (snd p) (fst p)) ` (B \\<times> A) = (\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B)\"", "lemma fprod_aux: \"{x \\<cdot> y |x y. x \\<in> (f ` A) \\<and> y \\<in> (g ` B)} = {f x \\<cdot> g y |x y. x \\<in> A \\<and> y \\<in> B}\"", "lemma sum_sup:\n  assumes \"finite (A :: 'a::join_semilattice_zero set)\"\n  shows \"\\<Sum>A \\<le> z \\<longleftrightarrow> (\\<forall>a \\<in> A. a \\<le> z)\"", "lemma sum_less_eqI:\n  \"(\\<And>x. x \\<in> A \\<Longrightarrow> f x \\<le> y) \\<Longrightarrow> sum f A \\<le> (y::'a::join_semilattice_zero)\"", "lemma sum_less_eqE:\n  \"\\<lbrakk> sum f A \\<le> y; x \\<in> A; finite A \\<rbrakk> \\<Longrightarrow> f x \\<le> (y::'a::join_semilattice_zero)\"", "lemma sum_fun_image_sup:\n  fixes f :: \"'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite (A :: 'a set)\"\n  shows \"\\<Sum>(f ` A) \\<le> z \\<longleftrightarrow> (\\<forall>a \\<in> A. f a \\<le> z)\"", "lemma sum_fun_sup:\n  fixes f :: \"'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite (A ::'a set)\"\n  shows \"\\<Sum>{f a | a. a \\<in> A} \\<le> z \\<longleftrightarrow> (\\<forall>a \\<in> A. f a \\<le> z)\"", "lemma sum_intro:\n  assumes \"finite (A :: 'a::join_semilattice_zero set)\" and \"finite B\"\n  shows \"(\\<forall>a \\<in> A. \\<exists>b \\<in> B. a \\<le> b) \\<longrightarrow> (\\<Sum>A \\<le> \\<Sum>B)\"", "lemma sum_union:\n  assumes \"finite (A :: 'a::join_semilattice_zero set)\"\n  and \"finite (B :: 'a::join_semilattice_zero set)\"\n  shows \"\\<Sum>(A \\<union> B) = \\<Sum>A + \\<Sum>B\"", "lemma sum_bin[simp]: \"\\<Sum>{(x :: 'a::join_semilattice_zero),y} = x + y\"", "lemma sum_iso:\n  assumes \"finite (B :: 'a::join_semilattice_zero set)\"\n  shows \"A \\<subseteq> B \\<longrightarrow> \\<Sum> A \\<le> \\<Sum> B\"", "lemma sum_insert [simp]:\n  assumes \"finite (A :: 'a::join_semilattice_zero set)\"\n  shows \"\\<Sum>(insert x A) = x + \\<Sum>A\"", "lemma sum_fun_insert:\n  fixes f :: \"'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite (A :: 'a set)\"\n  shows \"\\<Sum>(f ` (insert x A)) = f x + \\<Sum>(f ` A)\"", "lemma flatten1_im:\n  fixes f :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite (A :: 'a set)\"\n  and \"finite (B :: 'a set)\"\n  shows \"\\<Sum>((\\<lambda>x. \\<Sum>(f x ` B)) ` A) = \\<Sum>((\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B))\"", "lemma flatten2_im:\n  fixes f :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite (A ::'a set)\"\n  and \"finite (B ::'a set)\"\n  shows \"\\<Sum>((\\<lambda>y. \\<Sum> ((\\<lambda>x. f x y) ` A)) ` B) = \\<Sum>((\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B))\"", "lemma sum_flatten1:\n  fixes f :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite (A :: 'a set)\"\n  and \"finite (B :: 'a set)\"\n  shows \"\\<Sum>{\\<Sum>{f x y |y. y \\<in> B} |x. x \\<in> A} = \\<Sum>{f x y |x y. x \\<in> A \\<and> y \\<in> B}\"", "lemma sum_flatten2:\n  fixes f :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite A\"\n  and \"finite B\"\n  shows \"\\<Sum>{\\<Sum> {f x y |x. x \\<in> A} |y. y \\<in> B} = \\<Sum>{f x y |x y. x \\<in> A \\<and> y \\<in> B}\"", "lemma sum_fun_sum:\n  fixes f g :: \"'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes  \"finite (A :: 'a set)\"\n  shows \"\\<Sum>((\\<lambda>x. f x + g x) ` A) = \\<Sum>(f ` A) + \\<Sum>(g ` A)\"", "lemma sum_fun_add:\n  fixes f :: \"'a::join_semilattice_zero \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite (X :: 'a set)\"\n  and fstrict: \"f 0 = 0\"\n  and fadd: \"\\<And>x y. f (x + y) = f x + f y\"\n  shows \"f (\\<Sum> X) = \\<Sum>(f ` X)\"", "lemma sum_distl:\n  assumes \"finite Y\"\n  shows \"(x :: 'a::dioid_one_zero) \\<cdot> (\\<Sum>Y) = \\<Sum>{x \\<cdot> y|y. y \\<in> Y}\"", "lemma sum_distr:\n  assumes \"finite X\"\n  shows \"(\\<Sum>X) \\<cdot> (y :: 'a::dioid_one_zero) = \\<Sum>{x \\<cdot> y|x. x \\<in> X}\"", "lemma sum_fun_distl:\n  fixes f :: \"'a \\<Rightarrow> 'b::dioid_one_zero\"\n  assumes \"finite (Y :: 'a set)\"\n  shows \"x \\<cdot> \\<Sum>(f ` Y) = \\<Sum>{x \\<cdot> f y |y. y \\<in> Y}\"", "lemma sum_fun_distr:\n  fixes f :: \"'a \\<Rightarrow> 'b::dioid_one_zero\"\n  assumes \"finite (X :: 'a set)\"\n  shows \"\\<Sum>(f ` X) \\<cdot> y = \\<Sum>{f x \\<cdot> y |x. x \\<in> X}\"", "lemma sum_distl_flat:\n  assumes \"finite (X ::'a::dioid_one_zero set)\"\n  and \"finite Y\"\n  shows \"\\<Sum>{x \\<cdot> \\<Sum>Y |x. x \\<in> X} = \\<Sum>{x \\<cdot> y|x y. x \\<in> X \\<and> y \\<in> Y}\"", "lemma sum_distr_flat:\n  assumes \"finite X\"\n  and \"finite (Y :: 'a::dioid_one_zero set)\"\n  shows \"\\<Sum>{(\\<Sum>X) \\<cdot> y |y. y \\<in> Y} = \\<Sum>{x \\<cdot> y|x y. x \\<in> X \\<and> y \\<in> Y}\"", "lemma sum_sum_distl:\n  assumes \"finite (X :: 'a::dioid_one_zero set)\"\n  and \"finite Y\"\n  shows \"\\<Sum>((\\<lambda>x. x \\<cdot> (\\<Sum>Y)) ` X) = \\<Sum>{x \\<cdot> y |x y. x \\<in> X \\<and> y \\<in> Y}\"", "lemma sum_sum_distr:\n  assumes \"finite X\"\n  and \"finite Y\"\n  shows \"\\<Sum>((\\<lambda>y. (\\<Sum>X) \\<cdot> (y :: 'a::dioid_one_zero)) ` Y) = \\<Sum>{x \\<cdot> y|x y. x \\<in> X \\<and> y \\<in> Y}\"", "lemma sum_sum_distl_fun:\n  fixes f g :: \"'a \\<Rightarrow> 'b::dioid_one_zero\"\n  fixes h :: \"'a \\<Rightarrow> 'a set\"\n  assumes \"\\<And>x. finite (h x)\"\n  and \"finite X\"\n  shows \"\\<Sum>((\\<lambda>x. f x \\<cdot> \\<Sum>(g ` h x)) ` X) = \\<Sum>{\\<Sum> {f x \\<cdot> g y |y. y \\<in> h x} |x. x \\<in> X}\"", "lemma sum_sum_distr_fun:\n  fixes f g :: \"'a \\<Rightarrow> 'b::dioid_one_zero\"\n  fixes h :: \"'a \\<Rightarrow> 'a set\"\n  assumes \"finite Y\"\n  and \"\\<And>y. finite (h y)\"\n  shows \"\\<Sum>((\\<lambda>y. \\<Sum>(f ` h y) \\<cdot> g y) ` Y) = \\<Sum>{\\<Sum>{f x \\<cdot> g y |x. x \\<in> (h y)} |y. y \\<in> Y}\"", "lemma sum_dist:\n  assumes \"finite (A :: 'a::dioid_one_zero set)\"\n  and \"finite B\"\n  shows \"(\\<Sum>A) \\<cdot> (\\<Sum>B) = \\<Sum>{x \\<cdot> y |x y. x \\<in> A \\<and> y \\<in> B}\"", "lemma dioid_sum_prod_var:\n  fixes f g :: \"'a \\<Rightarrow> 'b::dioid_one_zero\"\n  assumes \"finite (A ::'a set)\"\n  shows \"(\\<Sum>(f ` A)) \\<cdot> (\\<Sum> (g ` A)) = \\<Sum>{f x \\<cdot> g y |x y. x \\<in> A \\<and> y \\<in> A}\"", "lemma dioid_sum_prod:\n  fixes f g :: \"'a \\<Rightarrow> 'b::dioid_one_zero\"\n  assumes \"finite (A :: 'a set)\"\n  shows \"(\\<Sum>{f x |x. x \\<in> A}) \\<cdot> (\\<Sum>{g x |x. x \\<in> A}) = \\<Sum>{f x \\<cdot> g y |x y. x \\<in> A \\<and> y \\<in> A}\"", "lemma sum_image:\n  fixes f :: \"'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite X\"\n  shows \"sum f X = \\<Sum>(f ` X)\"", "lemma sum_interval_cong:\n  \"\\<lbrakk> \\<And> i. \\<lbrakk> m \\<le> i; i \\<le> n \\<rbrakk> \\<Longrightarrow> P(i) = Q(i) \\<rbrakk> \\<Longrightarrow> (\\<Sum>i=m..n. P(i)) = (\\<Sum>i=m..n. Q(i))\"", "lemma sum_interval_distl:\n  fixes f :: \"nat \\<Rightarrow> 'a::dioid_one_zero\"\n  assumes \"m \\<le> n\"\n  shows \"x \\<cdot> (\\<Sum>i=m..n. f(i)) = (\\<Sum>i=m..n. (x \\<cdot> f(i)))\"", "lemma sum_interval_distr:\n  fixes f :: \"nat \\<Rightarrow> 'a::dioid_one_zero\"\n  assumes \"m \\<le> n\"\n  shows \"(\\<Sum>i=m..n. f(i)) \\<cdot> y = (\\<Sum>i=m..n. (f(i) \\<cdot> y))\""], "translations": [["", "lemma fun_im: \"{f a |a. a \\<in> A} = {b. b \\<in> f ` A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f a |a. a \\<in> A} = {b. b \\<in> f ` A}", "by auto"], ["", "lemma fset_to_im: \"{f x |x. x \\<in> X} = f ` X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f x |x. x \\<in> X} = f ` X", "by auto"], ["", "lemma cart_flip_aux: \"{f (snd p) (fst p) |p. p \\<in> (B \\<times> A)} = {f (fst p) (snd p) |p. p \\<in> (A \\<times> B)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f (snd p) (fst p) |p. p \\<in> B \\<times> A} =\n    {f (fst p) (snd p) |p. p \\<in> A \\<times> B}", "by auto"], ["", "lemma cart_flip: \"(\\<lambda>p. f (snd p) (fst p)) ` (B \\<times> A) = (\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>p. f (snd p) (fst p)) ` (B \\<times> A) =\n    (\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B)", "by (metis cart_flip_aux fset_to_im)"], ["", "lemma fprod_aux: \"{x \\<cdot> y |x y. x \\<in> (f ` A) \\<and> y \\<in> (g ` B)} = {f x \\<cdot> g y |x y. x \\<in> A \\<and> y \\<in> B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<cdot> y |x y. x \\<in> f ` A \\<and> y \\<in> g ` B} =\n    {f x \\<cdot> g y |x y. x \\<in> A \\<and> y \\<in> B}", "by auto"], ["", "subsection \\<open>Finite Suprema in Semilattices\\<close>"], ["", "text \\<open>The first lemma shows that, in the context of semilattices,\nfinite sums satisfy the defining property of finite suprema.\\<close>"], ["", "lemma sum_sup:\n  assumes \"finite (A :: 'a::join_semilattice_zero set)\"\n  shows \"\\<Sum>A \\<le> z \\<longleftrightarrow> (\\<forall>a \\<in> A. a \\<le> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum> A \\<le> z) = (\\<forall>a\\<in>A. a \\<le> z)", "proof (induct rule: finite_induct[OF assms])"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<Sum> {} \\<le> z) = (\\<forall>a\\<in>{}. a \\<le> z)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<Sum> F \\<le> z) = (\\<forall>a\\<in>F. a \\<le> z)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum> (insert x F) \\<le> z) =\n                         (\\<forall>a\\<in>insert x F. a \\<le> z)", "fix z ::'a"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<Sum> {} \\<le> z) = (\\<forall>a\\<in>{}. a \\<le> z)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<Sum> F \\<le> z) = (\\<forall>a\\<in>F. a \\<le> z)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum> (insert x F) \\<le> z) =\n                         (\\<forall>a\\<in>insert x F. a \\<le> z)", "show \"(\\<Sum>{} \\<le> z) = (\\<forall>a \\<in> {}. a \\<le> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum> {} \\<le> z) = (\\<forall>a\\<in>{}. a \\<le> z)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum> {} \\<le> z) = (\\<forall>a\\<in>{}. a \\<le> z)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<Sum> F \\<le> z) = (\\<forall>a\\<in>F. a \\<le> z)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum> (insert x F) \\<le> z) =\n                         (\\<forall>a\\<in>insert x F. a \\<le> z)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<Sum> F \\<le> z) = (\\<forall>a\\<in>F. a \\<le> z)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum> (insert x F) \\<le> z) =\n                         (\\<forall>a\\<in>insert x F. a \\<le> z)", "fix x z :: 'a and F :: \"'a set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<Sum> F \\<le> z) = (\\<forall>a\\<in>F. a \\<le> z)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum> (insert x F) \\<le> z) =\n                         (\\<forall>a\\<in>insert x F. a \\<le> z)", "assume finF: \"finite F\"\n    and xnF: \"x \\<notin> F\"\n    and indhyp: \"(\\<Sum>F \\<le> z) = (\\<forall>a \\<in> F. a \\<le> z)\""], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  (\\<Sum> F \\<le> z) = (\\<forall>a\\<in>F. a \\<le> z)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<Sum> F \\<le> z) = (\\<forall>a\\<in>F. a \\<le> z)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum> (insert x F) \\<le> z) =\n                         (\\<forall>a\\<in>insert x F. a \\<le> z)", "show \"(\\<Sum>(insert x F) \\<le> z) = (\\<forall>a \\<in> insert x F. a \\<le> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum> (insert x F) \\<le> z) = (\\<forall>a\\<in>insert x F. a \\<le> z)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum> (insert x F) \\<le> z) = (\\<forall>a\\<in>insert x F. a \\<le> z)", "have \"\\<Sum>(insert x F) \\<le> z \\<longleftrightarrow> (x + \\<Sum>F) \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum> (insert x F) \\<le> z) = (x + \\<Sum> F \\<le> z)", "by (metis finF sum.insert xnF)"], ["proof (state)\nthis:\n  (\\<Sum> (insert x F) \\<le> z) = (x + \\<Sum> F \\<le> z)\n\ngoal (1 subgoal):\n 1. (\\<Sum> (insert x F) \\<le> z) = (\\<forall>a\\<in>insert x F. a \\<le> z)", "also"], ["proof (state)\nthis:\n  (\\<Sum> (insert x F) \\<le> z) = (x + \\<Sum> F \\<le> z)\n\ngoal (1 subgoal):\n 1. (\\<Sum> (insert x F) \\<le> z) = (\\<forall>a\\<in>insert x F. a \\<le> z)", "have \"... \\<longleftrightarrow> x \\<le> z \\<and> \\<Sum>F \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x + \\<Sum> F \\<le> z) = (x \\<le> z \\<and> \\<Sum> F \\<le> z)", "by simp"], ["proof (state)\nthis:\n  (x + \\<Sum> F \\<le> z) = (x \\<le> z \\<and> \\<Sum> F \\<le> z)\n\ngoal (1 subgoal):\n 1. (\\<Sum> (insert x F) \\<le> z) = (\\<forall>a\\<in>insert x F. a \\<le> z)", "also"], ["proof (state)\nthis:\n  (x + \\<Sum> F \\<le> z) = (x \\<le> z \\<and> \\<Sum> F \\<le> z)\n\ngoal (1 subgoal):\n 1. (\\<Sum> (insert x F) \\<le> z) = (\\<forall>a\\<in>insert x F. a \\<le> z)", "have \"... \\<longleftrightarrow> x \\<le> z \\<and> (\\<forall>a \\<in> F. a \\<le> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<le> z \\<and> \\<Sum> F \\<le> z) =\n    (x \\<le> z \\<and> (\\<forall>a\\<in>F. a \\<le> z))", "by (metis (lifting) indhyp)"], ["proof (state)\nthis:\n  (x \\<le> z \\<and> \\<Sum> F \\<le> z) =\n  (x \\<le> z \\<and> (\\<forall>a\\<in>F. a \\<le> z))\n\ngoal (1 subgoal):\n 1. (\\<Sum> (insert x F) \\<le> z) = (\\<forall>a\\<in>insert x F. a \\<le> z)", "also"], ["proof (state)\nthis:\n  (x \\<le> z \\<and> \\<Sum> F \\<le> z) =\n  (x \\<le> z \\<and> (\\<forall>a\\<in>F. a \\<le> z))\n\ngoal (1 subgoal):\n 1. (\\<Sum> (insert x F) \\<le> z) = (\\<forall>a\\<in>insert x F. a \\<le> z)", "have \"... \\<longleftrightarrow> (\\<forall>a \\<in> insert x F. a \\<le> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<le> z \\<and> (\\<forall>a\\<in>F. a \\<le> z)) =\n    (\\<forall>a\\<in>insert x F. a \\<le> z)", "by (metis insert_iff)"], ["proof (state)\nthis:\n  (x \\<le> z \\<and> (\\<forall>a\\<in>F. a \\<le> z)) =\n  (\\<forall>a\\<in>insert x F. a \\<le> z)\n\ngoal (1 subgoal):\n 1. (\\<Sum> (insert x F) \\<le> z) = (\\<forall>a\\<in>insert x F. a \\<le> z)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Sum> (insert x F) \\<le> z) =\n  (x \\<le> z \\<and> (\\<forall>a\\<in>F. a \\<le> z))\n  (x \\<le> z \\<and> (\\<forall>a\\<in>F. a \\<le> z)) =\n  (\\<forall>a\\<in>insert x F. a \\<le> z)", "show \"(\\<Sum>(insert x F) \\<le> z) = (\\<forall>a \\<in> insert x F. a \\<le> z)\""], ["proof (prove)\nusing this:\n  (\\<Sum> (insert x F) \\<le> z) =\n  (x \\<le> z \\<and> (\\<forall>a\\<in>F. a \\<le> z))\n  (x \\<le> z \\<and> (\\<forall>a\\<in>F. a \\<le> z)) =\n  (\\<forall>a\\<in>insert x F. a \\<le> z)\n\ngoal (1 subgoal):\n 1. (\\<Sum> (insert x F) \\<le> z) = (\\<forall>a\\<in>insert x F. a \\<le> z)", "by blast"], ["proof (state)\nthis:\n  (\\<Sum> (insert x F) \\<le> z) = (\\<forall>a\\<in>insert x F. a \\<le> z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum> (insert x F) \\<le> z) = (\\<forall>a\\<in>insert x F. a \\<le> z)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>This immediately implies some variants.\\<close>"], ["", "lemma sum_less_eqI:\n  \"(\\<And>x. x \\<in> A \\<Longrightarrow> f x \\<le> y) \\<Longrightarrow> sum f A \\<le> (y::'a::join_semilattice_zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> A \\<Longrightarrow> f x \\<le> y) \\<Longrightarrow>\n    sum f A \\<le> y", "apply (atomize (full))"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<le> y) \\<longrightarrow>\n    sum f A \\<le> y", "apply (case_tac \"finite A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow>\n    (\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<le> y) \\<longrightarrow>\n    sum f A \\<le> y\n 2. infinite A \\<Longrightarrow>\n    (\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<le> y) \\<longrightarrow>\n    sum f A \\<le> y", "apply (erule finite_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<forall>x. x \\<in> {} \\<longrightarrow> f x \\<le> y) \\<longrightarrow>\n    sum f {} \\<le> y\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<forall>x.\n            x \\<in> F \\<longrightarrow> f x \\<le> y) \\<longrightarrow>\n        sum f F \\<le> y\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>xa.\n                             xa \\<in> insert x F \\<longrightarrow>\n                             f xa \\<le> y) \\<longrightarrow>\n                         sum f (insert x F) \\<le> y\n 3. infinite A \\<Longrightarrow>\n    (\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<le> y) \\<longrightarrow>\n    sum f A \\<le> y", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sum_less_eqE:\n  \"\\<lbrakk> sum f A \\<le> y; x \\<in> A; finite A \\<rbrakk> \\<Longrightarrow> f x \\<le> (y::'a::join_semilattice_zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sum f A \\<le> y; x \\<in> A; finite A\\<rbrakk>\n    \\<Longrightarrow> f x \\<le> y", "apply (erule rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A; finite A\\<rbrakk>\n    \\<Longrightarrow> sum f A \\<le> y \\<longrightarrow> f x \\<le> y", "apply (erule rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow>\n    x \\<in> A \\<longrightarrow>\n    sum f A \\<le> y \\<longrightarrow> f x \\<le> y", "apply (erule finite_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<in> {} \\<longrightarrow>\n    sum f {} \\<le> y \\<longrightarrow> f x \\<le> y\n 2. \\<And>xa F.\n       \\<lbrakk>finite F; xa \\<notin> F;\n        x \\<in> F \\<longrightarrow>\n        sum f F \\<le> y \\<longrightarrow> f x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> insert xa F \\<longrightarrow>\n                         sum f (insert xa F) \\<le> y \\<longrightarrow>\n                         f x \\<le> y", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sum_fun_image_sup:\n  fixes f :: \"'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite (A :: 'a set)\"\n  shows \"\\<Sum>(f ` A) \\<le> z \\<longleftrightarrow> (\\<forall>a \\<in> A. f a \\<le> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum> (f ` A) \\<le> z) = (\\<forall>a\\<in>A. f a \\<le> z)", "by (simp add: assms sum_sup)"], ["", "lemma sum_fun_sup:\n  fixes f :: \"'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite (A ::'a set)\"\n  shows \"\\<Sum>{f a | a. a \\<in> A} \\<le> z \\<longleftrightarrow> (\\<forall>a \\<in> A. f a \\<le> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum> {f a |a. a \\<in> A} \\<le> z) = (\\<forall>a\\<in>A. f a \\<le> z)", "by (simp only: fset_to_im assms sum_fun_image_sup)"], ["", "lemma sum_intro:\n  assumes \"finite (A :: 'a::join_semilattice_zero set)\" and \"finite B\"\n  shows \"(\\<forall>a \\<in> A. \\<exists>b \\<in> B. a \\<le> b) \\<longrightarrow> (\\<Sum>A \\<le> \\<Sum>B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>A. \\<exists>b\\<in>B. a \\<le> b) \\<longrightarrow>\n    \\<Sum> A \\<le> \\<Sum> B", "by (metis assms order_refl order_trans sum_sup)"], ["", "text \\<open>Next we prove an additivity property for suprema.\\<close>"], ["", "lemma sum_union:\n  assumes \"finite (A :: 'a::join_semilattice_zero set)\"\n  and \"finite (B :: 'a::join_semilattice_zero set)\"\n  shows \"\\<Sum>(A \\<union> B) = \\<Sum>A + \\<Sum>B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> (A \\<union> B) = \\<Sum> A + \\<Sum> B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum> (A \\<union> B) = \\<Sum> A + \\<Sum> B", "have \"\\<forall>z. \\<Sum>(A \\<union> B) \\<le> z \\<longleftrightarrow> (\\<Sum>A + \\<Sum>B \\<le> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z.\n       (\\<Sum> (A \\<union> B) \\<le> z) = (\\<Sum> A + \\<Sum> B \\<le> z)", "by (auto simp add: assms sum_sup)"], ["proof (state)\nthis:\n  \\<forall>z.\n     (\\<Sum> (A \\<union> B) \\<le> z) = (\\<Sum> A + \\<Sum> B \\<le> z)\n\ngoal (1 subgoal):\n 1. \\<Sum> (A \\<union> B) = \\<Sum> A + \\<Sum> B", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>z.\n     (\\<Sum> (A \\<union> B) \\<le> z) = (\\<Sum> A + \\<Sum> B \\<le> z)\n\ngoal (1 subgoal):\n 1. \\<Sum> (A \\<union> B) = \\<Sum> A + \\<Sum> B", "by (simp add: eq_iff)"], ["proof (state)\nthis:\n  \\<Sum> (A \\<union> B) = \\<Sum> A + \\<Sum> B\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>It follows that the sum (supremum) of a two-element set is the\njoin of its elements.\\<close>"], ["", "lemma sum_bin[simp]: \"\\<Sum>{(x :: 'a::join_semilattice_zero),y} = x + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> {x, y} = x + y", "by (subst insert_is_Un, subst sum_union, auto)"], ["", "text \\<open>Next we show that finite suprema are order preserving.\\<close>"], ["", "lemma sum_iso:\n  assumes \"finite (B :: 'a::join_semilattice_zero set)\"\n  shows \"A \\<subseteq> B \\<longrightarrow> \\<Sum> A \\<le> \\<Sum> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> B \\<longrightarrow> \\<Sum> A \\<le> \\<Sum> B", "by (metis assms finite_subset order_refl rev_subsetD sum_sup)"], ["", "text \\<open>The following lemmas state unfold properties for suprema and\nfinite sets. They are subtly different from the non-idempotent case,\nwhere additional side conditions are required.\\<close>"], ["", "lemma sum_insert [simp]:\n  assumes \"finite (A :: 'a::join_semilattice_zero set)\"\n  shows \"\\<Sum>(insert x A) = x + \\<Sum>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> (insert x A) = x + \\<Sum> A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum> (insert x A) = x + \\<Sum> A", "have \"\\<Sum>(insert x A) = \\<Sum>{x} + \\<Sum>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> (insert x A) = \\<Sum> {x} + \\<Sum> A", "by (metis insert_is_Un assms finite.emptyI finite.insertI sum_union)"], ["proof (state)\nthis:\n  \\<Sum> (insert x A) = \\<Sum> {x} + \\<Sum> A\n\ngoal (1 subgoal):\n 1. \\<Sum> (insert x A) = x + \\<Sum> A", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Sum> (insert x A) = \\<Sum> {x} + \\<Sum> A\n\ngoal (1 subgoal):\n 1. \\<Sum> (insert x A) = x + \\<Sum> A", "by auto"], ["proof (state)\nthis:\n  \\<Sum> (insert x A) = x + \\<Sum> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_fun_insert:\n  fixes f :: \"'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite (A :: 'a set)\"\n  shows \"\\<Sum>(f ` (insert x A)) = f x + \\<Sum>(f ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> (f ` insert x A) = f x + \\<Sum> (f ` A)", "by (simp add: assms)"], ["", "text \\<open>Now we show that set comprehensions with nested suprema can\nbe flattened.\\<close>"], ["", "lemma flatten1_im:\n  fixes f :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite (A :: 'a set)\"\n  and \"finite (B :: 'a set)\"\n  shows \"\\<Sum>((\\<lambda>x. \\<Sum>(f x ` B)) ` A) = \\<Sum>((\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. \\<Sum> (f x ` B)) ` A) =\n    \\<Sum> ((\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. \\<Sum> (f x ` B)) ` A) =\n    \\<Sum> ((\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B))", "have \"\\<forall>z. \\<Sum>((\\<lambda>x. \\<Sum>(f x ` B)) ` A) \\<le> z \\<longleftrightarrow> \\<Sum>((\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B)) \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z.\n       (\\<Sum> ((\\<lambda>x. \\<Sum> (f x ` B)) ` A) \\<le> z) =\n       (\\<Sum> ((\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B)) \\<le> z)", "by (simp add: assms finite_cartesian_product sum_fun_image_sup)"], ["proof (state)\nthis:\n  \\<forall>z.\n     (\\<Sum> ((\\<lambda>x. \\<Sum> (f x ` B)) ` A) \\<le> z) =\n     (\\<Sum> ((\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B)) \\<le> z)\n\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. \\<Sum> (f x ` B)) ` A) =\n    \\<Sum> ((\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>z.\n     (\\<Sum> ((\\<lambda>x. \\<Sum> (f x ` B)) ` A) \\<le> z) =\n     (\\<Sum> ((\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B)) \\<le> z)\n\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. \\<Sum> (f x ` B)) ` A) =\n    \\<Sum> ((\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B))", "by (simp add: eq_iff)"], ["proof (state)\nthis:\n  \\<Sum> ((\\<lambda>x. \\<Sum> (f x ` B)) ` A) =\n  \\<Sum> ((\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma flatten2_im:\n  fixes f :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite (A ::'a set)\"\n  and \"finite (B ::'a set)\"\n  shows \"\\<Sum>((\\<lambda>y. \\<Sum> ((\\<lambda>x. f x y) ` A)) ` B) = \\<Sum>((\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>y. \\<Sum> ((\\<lambda>x. f x y) ` A)) ` B) =\n    \\<Sum> ((\\<lambda>p. f (fst p) (snd p)) ` (A \\<times> B))", "by (simp only: flatten1_im assms cart_flip)"], ["", "lemma sum_flatten1:\n  fixes f :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite (A :: 'a set)\"\n  and \"finite (B :: 'a set)\"\n  shows \"\\<Sum>{\\<Sum>{f x y |y. y \\<in> B} |x. x \\<in> A} = \\<Sum>{f x y |x y. x \\<in> A \\<and> y \\<in> B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> {\\<Sum> {f x y |y. y \\<in> B} |x. x \\<in> A} =\n    \\<Sum> {f x y |x y. x \\<in> A \\<and> y \\<in> B}", "apply (simp add: fset_to_im assms flatten1_im)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. f (fst x) (snd x)) ` (A \\<times> B)) =\n    \\<Sum> {f x y |x y. x \\<in> A \\<and> y \\<in> B}", "apply (subst fset_to_im[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> {f (fst x) (snd x) |x. x \\<in> A \\<times> B} =\n    \\<Sum> {f x y |x y. x \\<in> A \\<and> y \\<in> B}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sum_flatten2:\n  fixes f :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite A\"\n  and \"finite B\"\n  shows \"\\<Sum>{\\<Sum> {f x y |x. x \\<in> A} |y. y \\<in> B} = \\<Sum>{f x y |x y. x \\<in> A \\<and> y \\<in> B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> {\\<Sum> {f x y |x. x \\<in> A} |y. y \\<in> B} =\n    \\<Sum> {f x y |x y. x \\<in> A \\<and> y \\<in> B}", "apply (simp add: fset_to_im assms flatten2_im)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. f (fst x) (snd x)) ` (A \\<times> B)) =\n    \\<Sum> {f x y |x y. x \\<in> A \\<and> y \\<in> B}", "apply (subst fset_to_im[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> {f (fst x) (snd x) |x. x \\<in> A \\<times> B} =\n    \\<Sum> {f x y |x y. x \\<in> A \\<and> y \\<in> B}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Next we show another additivity property for suprema.\\<close>"], ["", "lemma sum_fun_sum:\n  fixes f g :: \"'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes  \"finite (A :: 'a set)\"\n  shows \"\\<Sum>((\\<lambda>x. f x + g x) ` A) = \\<Sum>(f ` A) + \\<Sum>(g ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. f x + g x) ` A) = \\<Sum> (f ` A) + \\<Sum> (g ` A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. f x + g x) ` A) = \\<Sum> (f ` A) + \\<Sum> (g ` A)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. f x + g x) ` A) = \\<Sum> (f ` A) + \\<Sum> (g ` A)", "fix z:: 'b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. f x + g x) ` A) = \\<Sum> (f ` A) + \\<Sum> (g ` A)", "have \"\\<Sum>((\\<lambda>x. f x + g x) ` A) \\<le> z \\<longleftrightarrow> \\<Sum>(f ` A) + \\<Sum>(g ` A) \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum> ((\\<lambda>x. f x + g x) ` A) \\<le> z) =\n    (\\<Sum> (f ` A) + \\<Sum> (g ` A) \\<le> z)", "by (auto simp add: assms sum_fun_image_sup)"], ["proof (state)\nthis:\n  (\\<Sum> ((\\<lambda>x. f x + g x) ` A) \\<le> z) =\n  (\\<Sum> (f ` A) + \\<Sum> (g ` A) \\<le> z)\n\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. f x + g x) ` A) = \\<Sum> (f ` A) + \\<Sum> (g ` A)", "}"], ["proof (state)\nthis:\n  (\\<Sum> ((\\<lambda>x. f x + g x) ` A) \\<le> ?z2) =\n  (\\<Sum> (f ` A) + \\<Sum> (g ` A) \\<le> ?z2)\n\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. f x + g x) ` A) = \\<Sum> (f ` A) + \\<Sum> (g ` A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum> ((\\<lambda>x. f x + g x) ` A) \\<le> ?z2) =\n  (\\<Sum> (f ` A) + \\<Sum> (g ` A) \\<le> ?z2)\n\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. f x + g x) ` A) = \\<Sum> (f ` A) + \\<Sum> (g ` A)", "by (simp add: eq_iff)"], ["proof (state)\nthis:\n  \\<Sum> ((\\<lambda>x. f x + g x) ` A) = \\<Sum> (f ` A) + \\<Sum> (g ` A)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The last lemma of this section prepares the distributivity\n  laws that hold for dioids. It states that a strict additive function\n  distributes over finite suprema, which is a continuity property in\n  the finite.\\<close>"], ["", "lemma sum_fun_add:\n  fixes f :: \"'a::join_semilattice_zero \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite (X :: 'a set)\"\n  and fstrict: \"f 0 = 0\"\n  and fadd: \"\\<And>x y. f (x + y) = f x + f y\"\n  shows \"f (\\<Sum> X) = \\<Sum>(f ` X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (\\<Sum> X) = \\<Sum> (f ` X)", "proof (induct rule: finite_induct[OF assms(1)])"], ["proof (state)\ngoal (2 subgoals):\n 1. f (\\<Sum> {}) = \\<Sum> (f ` {})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f (\\<Sum> F) = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> f (\\<Sum> (insert x F)) = \\<Sum> (f ` insert x F)", "show \"f (\\<Sum>{}) = \\<Sum>(f ` {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (\\<Sum> {}) = \\<Sum> (f ` {})", "by (metis fstrict image_empty sum.empty)"], ["proof (state)\nthis:\n  f (\\<Sum> {}) = \\<Sum> (f ` {})\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f (\\<Sum> F) = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> f (\\<Sum> (insert x F)) = \\<Sum> (f ` insert x F)", "fix x :: 'a and  F ::\" 'a set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f (\\<Sum> F) = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> f (\\<Sum> (insert x F)) = \\<Sum> (f ` insert x F)", "assume finF: \"finite F\"\n    and indhyp: \"f (\\<Sum>F) = \\<Sum>(f ` F)\""], ["proof (state)\nthis:\n  finite F\n  f (\\<Sum> F) = \\<Sum> (f ` F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f (\\<Sum> F) = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> f (\\<Sum> (insert x F)) = \\<Sum> (f ` insert x F)", "have \"f (\\<Sum>(insert x F)) = f (x + \\<Sum>F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (\\<Sum> (insert x F)) = f (x + \\<Sum> F)", "by (metis sum_insert finF)"], ["proof (state)\nthis:\n  f (\\<Sum> (insert x F)) = f (x + \\<Sum> F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f (\\<Sum> F) = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> f (\\<Sum> (insert x F)) = \\<Sum> (f ` insert x F)", "also"], ["proof (state)\nthis:\n  f (\\<Sum> (insert x F)) = f (x + \\<Sum> F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f (\\<Sum> F) = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> f (\\<Sum> (insert x F)) = \\<Sum> (f ` insert x F)", "have \"... = f x + (f (\\<Sum>F))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (x + \\<Sum> F) = f x + f (\\<Sum> F)", "by (rule fadd)"], ["proof (state)\nthis:\n  f (x + \\<Sum> F) = f x + f (\\<Sum> F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f (\\<Sum> F) = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> f (\\<Sum> (insert x F)) = \\<Sum> (f ` insert x F)", "also"], ["proof (state)\nthis:\n  f (x + \\<Sum> F) = f x + f (\\<Sum> F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f (\\<Sum> F) = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> f (\\<Sum> (insert x F)) = \\<Sum> (f ` insert x F)", "have \"... = f x + \\<Sum>(f ` F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x + f (\\<Sum> F) = f x + \\<Sum> (f ` F)", "by (metis indhyp)"], ["proof (state)\nthis:\n  f x + f (\\<Sum> F) = f x + \\<Sum> (f ` F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f (\\<Sum> F) = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> f (\\<Sum> (insert x F)) = \\<Sum> (f ` insert x F)", "also"], ["proof (state)\nthis:\n  f x + f (\\<Sum> F) = f x + \\<Sum> (f ` F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f (\\<Sum> F) = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> f (\\<Sum> (insert x F)) = \\<Sum> (f ` insert x F)", "have \"... = \\<Sum>(f ` (insert x F))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x + \\<Sum> (f ` F) = \\<Sum> (f ` insert x F)", "by (metis finF sum_fun_insert)"], ["proof (state)\nthis:\n  f x + \\<Sum> (f ` F) = \\<Sum> (f ` insert x F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        f (\\<Sum> F) = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> f (\\<Sum> (insert x F)) = \\<Sum> (f ` insert x F)", "finally"], ["proof (chain)\npicking this:\n  f (\\<Sum> (insert x F)) = \\<Sum> (f ` insert x F)", "show \"f (\\<Sum>(insert x F)) = \\<Sum>(f ` insert x F)\""], ["proof (prove)\nusing this:\n  f (\\<Sum> (insert x F)) = \\<Sum> (f ` insert x F)\n\ngoal (1 subgoal):\n 1. f (\\<Sum> (insert x F)) = \\<Sum> (f ` insert x F)", "."], ["proof (state)\nthis:\n  f (\\<Sum> (insert x F)) = \\<Sum> (f ` insert x F)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Finite Suprema in Dioids\\<close>"], ["", "text \\<open>In this section we mainly prove variants of distributivity laws.\\<close>"], ["", "lemma sum_distl:\n  assumes \"finite Y\"\n  shows \"(x :: 'a::dioid_one_zero) \\<cdot> (\\<Sum>Y) = \\<Sum>{x \\<cdot> y|y. y \\<in> Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> \\<Sum> Y = \\<Sum> {x \\<cdot> y |y. y \\<in> Y}", "by (simp only: sum_fun_add assms annir distrib_left Collect_mem_eq fun_im)"], ["", "lemma sum_distr:\n  assumes \"finite X\"\n  shows \"(\\<Sum>X) \\<cdot> (y :: 'a::dioid_one_zero) = \\<Sum>{x \\<cdot> y|x. x \\<in> X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> X \\<cdot> y = \\<Sum> {x \\<cdot> y |x. x \\<in> X}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum> X \\<cdot> y = \\<Sum> {x \\<cdot> y |x. x \\<in> X}", "have \"(\\<Sum> X) \\<cdot> y = \\<Sum> ((\\<lambda>x. x \\<cdot> y) ` X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> X \\<cdot> y = \\<Sum> ((\\<lambda>x. x \\<cdot> y) ` X)", "by (rule sum_fun_add, metis assms, rule annil, rule distrib_right)"], ["proof (state)\nthis:\n  \\<Sum> X \\<cdot> y = \\<Sum> ((\\<lambda>x. x \\<cdot> y) ` X)\n\ngoal (1 subgoal):\n 1. \\<Sum> X \\<cdot> y = \\<Sum> {x \\<cdot> y |x. x \\<in> X}", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Sum> X \\<cdot> y = \\<Sum> ((\\<lambda>x. x \\<cdot> y) ` X)\n\ngoal (1 subgoal):\n 1. \\<Sum> X \\<cdot> y = \\<Sum> {x \\<cdot> y |x. x \\<in> X}", "by (metis Collect_mem_eq fun_im)"], ["proof (state)\nthis:\n  \\<Sum> X \\<cdot> y = \\<Sum> {x \\<cdot> y |x. x \\<in> X}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_fun_distl:\n  fixes f :: \"'a \\<Rightarrow> 'b::dioid_one_zero\"\n  assumes \"finite (Y :: 'a set)\"\n  shows \"x \\<cdot> \\<Sum>(f ` Y) = \\<Sum>{x \\<cdot> f y |y. y \\<in> Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> \\<Sum> (f ` Y) = \\<Sum> {x \\<cdot> f y |y. y \\<in> Y}", "by (simp add: assms fun_im image_image sum_distl)"], ["", "lemma sum_fun_distr:\n  fixes f :: \"'a \\<Rightarrow> 'b::dioid_one_zero\"\n  assumes \"finite (X :: 'a set)\"\n  shows \"\\<Sum>(f ` X) \\<cdot> y = \\<Sum>{f x \\<cdot> y |x. x \\<in> X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> (f ` X) \\<cdot> y = \\<Sum> {f x \\<cdot> y |x. x \\<in> X}", "by (simp add: assms fun_im image_image sum_distr)"], ["", "lemma sum_distl_flat:\n  assumes \"finite (X ::'a::dioid_one_zero set)\"\n  and \"finite Y\"\n  shows \"\\<Sum>{x \\<cdot> \\<Sum>Y |x. x \\<in> X} = \\<Sum>{x \\<cdot> y|x y. x \\<in> X \\<and> y \\<in> Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> {x \\<cdot> \\<Sum> Y |x. x \\<in> X} =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> X \\<and> y \\<in> Y}", "by (simp only: assms sum_distl sum_flatten1)"], ["", "lemma sum_distr_flat:\n  assumes \"finite X\"\n  and \"finite (Y :: 'a::dioid_one_zero set)\"\n  shows \"\\<Sum>{(\\<Sum>X) \\<cdot> y |y. y \\<in> Y} = \\<Sum>{x \\<cdot> y|x y. x \\<in> X \\<and> y \\<in> Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> {\\<Sum> X \\<cdot> y |y. y \\<in> Y} =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> X \\<and> y \\<in> Y}", "by (simp only: assms sum_distr sum_flatten2)"], ["", "lemma sum_sum_distl:\n  assumes \"finite (X :: 'a::dioid_one_zero set)\"\n  and \"finite Y\"\n  shows \"\\<Sum>((\\<lambda>x. x \\<cdot> (\\<Sum>Y)) ` X) = \\<Sum>{x \\<cdot> y |x y. x \\<in> X \\<and> y \\<in> Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. x \\<cdot> \\<Sum> Y) ` X) =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> X \\<and> y \\<in> Y}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. x \\<cdot> \\<Sum> Y) ` X) =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> X \\<and> y \\<in> Y}", "have \"\\<Sum>((\\<lambda>x. x \\<cdot> (\\<Sum>Y)) ` X) = \\<Sum>{\\<Sum>{x \\<cdot> y |y. y \\<in> Y} |x. x \\<in> X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. x \\<cdot> \\<Sum> Y) ` X) =\n    \\<Sum> {\\<Sum> {x \\<cdot> y |y. y \\<in> Y} |x. x \\<in> X}", "by (auto simp add: sum_distl assms fset_to_im)"], ["proof (state)\nthis:\n  \\<Sum> ((\\<lambda>x. x \\<cdot> \\<Sum> Y) ` X) =\n  \\<Sum> {\\<Sum> {x \\<cdot> y |y. y \\<in> Y} |x. x \\<in> X}\n\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. x \\<cdot> \\<Sum> Y) ` X) =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> X \\<and> y \\<in> Y}", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Sum> ((\\<lambda>x. x \\<cdot> \\<Sum> Y) ` X) =\n  \\<Sum> {\\<Sum> {x \\<cdot> y |y. y \\<in> Y} |x. x \\<in> X}\n\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. x \\<cdot> \\<Sum> Y) ` X) =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> X \\<and> y \\<in> Y}", "by (simp add: assms sum_flatten1)"], ["proof (state)\nthis:\n  \\<Sum> ((\\<lambda>x. x \\<cdot> \\<Sum> Y) ` X) =\n  \\<Sum> {x \\<cdot> y |x y. x \\<in> X \\<and> y \\<in> Y}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_sum_distr:\n  assumes \"finite X\"\n  and \"finite Y\"\n  shows \"\\<Sum>((\\<lambda>y. (\\<Sum>X) \\<cdot> (y :: 'a::dioid_one_zero)) ` Y) = \\<Sum>{x \\<cdot> y|x y. x \\<in> X \\<and> y \\<in> Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<cdot>) (\\<Sum> X) ` Y) =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> X \\<and> y \\<in> Y}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<cdot>) (\\<Sum> X) ` Y) =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> X \\<and> y \\<in> Y}", "have \"\\<Sum>((\\<lambda>y. (\\<Sum>X) \\<cdot> y) ` Y) = \\<Sum>{\\<Sum>{x \\<cdot> y |x. x \\<in> X} |y. y \\<in> Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<cdot>) (\\<Sum> X) ` Y) =\n    \\<Sum> {\\<Sum> {x \\<cdot> y |x. x \\<in> X} |y. y \\<in> Y}", "by (auto simp add: sum_distr assms fset_to_im)"], ["proof (state)\nthis:\n  \\<Sum> ((\\<cdot>) (\\<Sum> X) ` Y) =\n  \\<Sum> {\\<Sum> {x \\<cdot> y |x. x \\<in> X} |y. y \\<in> Y}\n\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<cdot>) (\\<Sum> X) ` Y) =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> X \\<and> y \\<in> Y}", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Sum> ((\\<cdot>) (\\<Sum> X) ` Y) =\n  \\<Sum> {\\<Sum> {x \\<cdot> y |x. x \\<in> X} |y. y \\<in> Y}\n\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<cdot>) (\\<Sum> X) ` Y) =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> X \\<and> y \\<in> Y}", "by (simp add: assms sum_flatten2)"], ["proof (state)\nthis:\n  \\<Sum> ((\\<cdot>) (\\<Sum> X) ` Y) =\n  \\<Sum> {x \\<cdot> y |x y. x \\<in> X \\<and> y \\<in> Y}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_sum_distl_fun:\n  fixes f g :: \"'a \\<Rightarrow> 'b::dioid_one_zero\"\n  fixes h :: \"'a \\<Rightarrow> 'a set\"\n  assumes \"\\<And>x. finite (h x)\"\n  and \"finite X\"\n  shows \"\\<Sum>((\\<lambda>x. f x \\<cdot> \\<Sum>(g ` h x)) ` X) = \\<Sum>{\\<Sum> {f x \\<cdot> g y |y. y \\<in> h x} |x. x \\<in> X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>x. f x \\<cdot> \\<Sum> (g ` h x)) ` X) =\n    \\<Sum> {\\<Sum> {f x \\<cdot> g y |y. y \\<in> h x} |x. x \\<in> X}", "by (auto simp add: sum_fun_distl assms fset_to_im)"], ["", "lemma sum_sum_distr_fun:\n  fixes f g :: \"'a \\<Rightarrow> 'b::dioid_one_zero\"\n  fixes h :: \"'a \\<Rightarrow> 'a set\"\n  assumes \"finite Y\"\n  and \"\\<And>y. finite (h y)\"\n  shows \"\\<Sum>((\\<lambda>y. \\<Sum>(f ` h y) \\<cdot> g y) ` Y) = \\<Sum>{\\<Sum>{f x \\<cdot> g y |x. x \\<in> (h y)} |y. y \\<in> Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>y. \\<Sum> (f ` h y) \\<cdot> g y) ` Y) =\n    \\<Sum> {\\<Sum> {f x \\<cdot> g y |x. x \\<in> h y} |y. y \\<in> Y}", "by (auto simp add: sum_fun_distr assms fset_to_im)"], ["", "lemma sum_dist:\n  assumes \"finite (A :: 'a::dioid_one_zero set)\"\n  and \"finite B\"\n  shows \"(\\<Sum>A) \\<cdot> (\\<Sum>B) = \\<Sum>{x \\<cdot> y |x y. x \\<in> A \\<and> y \\<in> B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> A \\<cdot> \\<Sum> B =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> A \\<and> y \\<in> B}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum> A \\<cdot> \\<Sum> B =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> A \\<and> y \\<in> B}", "have \"(\\<Sum>A) \\<cdot> (\\<Sum>B) = \\<Sum>{x \\<cdot> \\<Sum>B |x. x \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> A \\<cdot> \\<Sum> B = \\<Sum> {x \\<cdot> \\<Sum> B |x. x \\<in> A}", "by (simp add: assms sum_distr)"], ["proof (state)\nthis:\n  \\<Sum> A \\<cdot> \\<Sum> B = \\<Sum> {x \\<cdot> \\<Sum> B |x. x \\<in> A}\n\ngoal (1 subgoal):\n 1. \\<Sum> A \\<cdot> \\<Sum> B =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> A \\<and> y \\<in> B}", "also"], ["proof (state)\nthis:\n  \\<Sum> A \\<cdot> \\<Sum> B = \\<Sum> {x \\<cdot> \\<Sum> B |x. x \\<in> A}\n\ngoal (1 subgoal):\n 1. \\<Sum> A \\<cdot> \\<Sum> B =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> A \\<and> y \\<in> B}", "have \"... = \\<Sum>{\\<Sum>{x \\<cdot> y |y. y \\<in> B} |x. x \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> {x \\<cdot> \\<Sum> B |x. x \\<in> A} =\n    \\<Sum> {\\<Sum> {x \\<cdot> y |y. y \\<in> B} |x. x \\<in> A}", "by (simp add: assms sum_distl)"], ["proof (state)\nthis:\n  \\<Sum> {x \\<cdot> \\<Sum> B |x. x \\<in> A} =\n  \\<Sum> {\\<Sum> {x \\<cdot> y |y. y \\<in> B} |x. x \\<in> A}\n\ngoal (1 subgoal):\n 1. \\<Sum> A \\<cdot> \\<Sum> B =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> A \\<and> y \\<in> B}", "finally"], ["proof (chain)\npicking this:\n  \\<Sum> A \\<cdot> \\<Sum> B =\n  \\<Sum> {\\<Sum> {x \\<cdot> y |y. y \\<in> B} |x. x \\<in> A}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Sum> A \\<cdot> \\<Sum> B =\n  \\<Sum> {\\<Sum> {x \\<cdot> y |y. y \\<in> B} |x. x \\<in> A}\n\ngoal (1 subgoal):\n 1. \\<Sum> A \\<cdot> \\<Sum> B =\n    \\<Sum> {x \\<cdot> y |x y. x \\<in> A \\<and> y \\<in> B}", "by  (simp only: sum_flatten1 assms finite_cartesian_product)"], ["proof (state)\nthis:\n  \\<Sum> A \\<cdot> \\<Sum> B =\n  \\<Sum> {x \\<cdot> y |x y. x \\<in> A \\<and> y \\<in> B}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dioid_sum_prod_var:\n  fixes f g :: \"'a \\<Rightarrow> 'b::dioid_one_zero\"\n  assumes \"finite (A ::'a set)\"\n  shows \"(\\<Sum>(f ` A)) \\<cdot> (\\<Sum> (g ` A)) = \\<Sum>{f x \\<cdot> g y |x y. x \\<in> A \\<and> y \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> (f ` A) \\<cdot> \\<Sum> (g ` A) =\n    \\<Sum> {f x \\<cdot> g y |x y. x \\<in> A \\<and> y \\<in> A}", "by (simp add: assms sum_dist fprod_aux)"], ["", "lemma dioid_sum_prod:\n  fixes f g :: \"'a \\<Rightarrow> 'b::dioid_one_zero\"\n  assumes \"finite (A :: 'a set)\"\n  shows \"(\\<Sum>{f x |x. x \\<in> A}) \\<cdot> (\\<Sum>{g x |x. x \\<in> A}) = \\<Sum>{f x \\<cdot> g y |x y. x \\<in> A \\<and> y \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> {f x |x. x \\<in> A} \\<cdot> \\<Sum> {g x |x. x \\<in> A} =\n    \\<Sum> {f x \\<cdot> g y |x y. x \\<in> A \\<and> y \\<in> A}", "by (simp add: assms dioid_sum_prod_var fset_to_im)"], ["", "lemma sum_image:\n  fixes f :: \"'a \\<Rightarrow> 'b::join_semilattice_zero\"\n  assumes \"finite X\"\n  shows \"sum f X = \\<Sum>(f ` X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f X = \\<Sum> (f ` X)", "using assms"], ["proof (prove)\nusing this:\n  finite X\n\ngoal (1 subgoal):\n 1. sum f X = \\<Sum> (f ` X)", "proof (induct rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. sum f {} = \\<Sum> (f ` {})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F; sum f F = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) = \\<Sum> (f ` insert x F)", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. sum f {} = \\<Sum> (f ` {})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F; sum f F = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) = \\<Sum> (f ` insert x F)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {} = \\<Sum> (f ` {})", "by simp"], ["proof (state)\nthis:\n  sum f {} = \\<Sum> (f ` {})\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F; sum f F = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) = \\<Sum> (f ` insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F; sum f F = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) = \\<Sum> (f ` insert x F)", "case insert"], ["proof (state)\nthis:\n  finite F_\n  x_ \\<notin> F_\n  sum f F_ = \\<Sum> (f ` F_)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F; sum f F = \\<Sum> (f ` F)\\<rbrakk>\n       \\<Longrightarrow> sum f (insert x F) = \\<Sum> (f ` insert x F)", "thus ?case"], ["proof (prove)\nusing this:\n  finite F_\n  x_ \\<notin> F_\n  sum f F_ = \\<Sum> (f ` F_)\n\ngoal (1 subgoal):\n 1. sum f (insert x_ F_) = \\<Sum> (f ` insert x_ F_)", "by (metis sum.insert sum_fun_insert)"], ["proof (state)\nthis:\n  sum f (insert x_ F_) = \\<Sum> (f ` insert x_ F_)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_interval_cong:\n  \"\\<lbrakk> \\<And> i. \\<lbrakk> m \\<le> i; i \\<le> n \\<rbrakk> \\<Longrightarrow> P(i) = Q(i) \\<rbrakk> \\<Longrightarrow> (\\<Sum>i=m..n. P(i)) = (\\<Sum>i=m..n. Q(i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>m \\<le> i; i \\<le> n\\<rbrakk>\n        \\<Longrightarrow> P i = Q i) \\<Longrightarrow>\n    sum P {m..n} = sum Q {m..n}", "by (auto intro: sum.cong)"], ["", "lemma sum_interval_distl:\n  fixes f :: \"nat \\<Rightarrow> 'a::dioid_one_zero\"\n  assumes \"m \\<le> n\"\n  shows \"x \\<cdot> (\\<Sum>i=m..n. f(i)) = (\\<Sum>i=m..n. (x \\<cdot> f(i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> sum f {m..n} = (\\<Sum>i = m..n. x \\<cdot> f i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<cdot> sum f {m..n} = (\\<Sum>i = m..n. x \\<cdot> f i)", "have \"x \\<cdot> (\\<Sum>i=m..n. f(i)) = x \\<cdot> \\<Sum>(f ` {m..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> sum f {m..n} = x \\<cdot> \\<Sum> (f ` {m..n})", "by (metis finite_atLeastAtMost sum_image)"], ["proof (state)\nthis:\n  x \\<cdot> sum f {m..n} = x \\<cdot> \\<Sum> (f ` {m..n})\n\ngoal (1 subgoal):\n 1. x \\<cdot> sum f {m..n} = (\\<Sum>i = m..n. x \\<cdot> f i)", "also"], ["proof (state)\nthis:\n  x \\<cdot> sum f {m..n} = x \\<cdot> \\<Sum> (f ` {m..n})\n\ngoal (1 subgoal):\n 1. x \\<cdot> sum f {m..n} = (\\<Sum>i = m..n. x \\<cdot> f i)", "have \"... = \\<Sum>{x \\<cdot> y |y. y \\<in> f ` {m..n}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> \\<Sum> (f ` {m..n}) =\n    \\<Sum> {x \\<cdot> y |y. y \\<in> f ` {m..n}}", "by (metis finite_atLeastAtMost fset_to_im image_image sum_fun_distl)"], ["proof (state)\nthis:\n  x \\<cdot> \\<Sum> (f ` {m..n}) =\n  \\<Sum> {x \\<cdot> y |y. y \\<in> f ` {m..n}}\n\ngoal (1 subgoal):\n 1. x \\<cdot> sum f {m..n} = (\\<Sum>i = m..n. x \\<cdot> f i)", "also"], ["proof (state)\nthis:\n  x \\<cdot> \\<Sum> (f ` {m..n}) =\n  \\<Sum> {x \\<cdot> y |y. y \\<in> f ` {m..n}}\n\ngoal (1 subgoal):\n 1. x \\<cdot> sum f {m..n} = (\\<Sum>i = m..n. x \\<cdot> f i)", "have \"... = \\<Sum>((\\<lambda>i. x \\<cdot> f i) ` {m..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> {x \\<cdot> y |y. y \\<in> f ` {m..n}} =\n    \\<Sum> ((\\<lambda>i. x \\<cdot> f i) ` {m..n})", "by (metis fset_to_im image_image)"], ["proof (state)\nthis:\n  \\<Sum> {x \\<cdot> y |y. y \\<in> f ` {m..n}} =\n  \\<Sum> ((\\<lambda>i. x \\<cdot> f i) ` {m..n})\n\ngoal (1 subgoal):\n 1. x \\<cdot> sum f {m..n} = (\\<Sum>i = m..n. x \\<cdot> f i)", "also"], ["proof (state)\nthis:\n  \\<Sum> {x \\<cdot> y |y. y \\<in> f ` {m..n}} =\n  \\<Sum> ((\\<lambda>i. x \\<cdot> f i) ` {m..n})\n\ngoal (1 subgoal):\n 1. x \\<cdot> sum f {m..n} = (\\<Sum>i = m..n. x \\<cdot> f i)", "have \"... = (\\<Sum>i=m..n. (x \\<cdot> f(i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>i. x \\<cdot> f i) ` {m..n}) =\n    (\\<Sum>i = m..n. x \\<cdot> f i)", "by (metis finite_atLeastAtMost sum_image)"], ["proof (state)\nthis:\n  \\<Sum> ((\\<lambda>i. x \\<cdot> f i) ` {m..n}) =\n  (\\<Sum>i = m..n. x \\<cdot> f i)\n\ngoal (1 subgoal):\n 1. x \\<cdot> sum f {m..n} = (\\<Sum>i = m..n. x \\<cdot> f i)", "finally"], ["proof (chain)\npicking this:\n  x \\<cdot> sum f {m..n} = (\\<Sum>i = m..n. x \\<cdot> f i)", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<cdot> sum f {m..n} = (\\<Sum>i = m..n. x \\<cdot> f i)\n\ngoal (1 subgoal):\n 1. x \\<cdot> sum f {m..n} = (\\<Sum>i = m..n. x \\<cdot> f i)", "."], ["proof (state)\nthis:\n  x \\<cdot> sum f {m..n} = (\\<Sum>i = m..n. x \\<cdot> f i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_interval_distr:\n  fixes f :: \"nat \\<Rightarrow> 'a::dioid_one_zero\"\n  assumes \"m \\<le> n\"\n  shows \"(\\<Sum>i=m..n. f(i)) \\<cdot> y = (\\<Sum>i=m..n. (f(i) \\<cdot> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {m..n} \\<cdot> y = (\\<Sum>i = m..n. f i \\<cdot> y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum f {m..n} \\<cdot> y = (\\<Sum>i = m..n. f i \\<cdot> y)", "have \"(\\<Sum>i=m..n. f(i)) \\<cdot> y = \\<Sum>(f ` {m..n}) \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum f {m..n} \\<cdot> y = \\<Sum> (f ` {m..n}) \\<cdot> y", "by (metis finite_atLeastAtMost sum_image)"], ["proof (state)\nthis:\n  sum f {m..n} \\<cdot> y = \\<Sum> (f ` {m..n}) \\<cdot> y\n\ngoal (1 subgoal):\n 1. sum f {m..n} \\<cdot> y = (\\<Sum>i = m..n. f i \\<cdot> y)", "also"], ["proof (state)\nthis:\n  sum f {m..n} \\<cdot> y = \\<Sum> (f ` {m..n}) \\<cdot> y\n\ngoal (1 subgoal):\n 1. sum f {m..n} \\<cdot> y = (\\<Sum>i = m..n. f i \\<cdot> y)", "have \"... = \\<Sum>{x \\<cdot> y |x. x \\<in> f ` {m..n}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> (f ` {m..n}) \\<cdot> y =\n    \\<Sum> {x \\<cdot> y |x. x \\<in> f ` {m..n}}", "by (metis calculation finite_atLeastAtMost finite_imageI fset_to_im sum_distr)"], ["proof (state)\nthis:\n  \\<Sum> (f ` {m..n}) \\<cdot> y =\n  \\<Sum> {x \\<cdot> y |x. x \\<in> f ` {m..n}}\n\ngoal (1 subgoal):\n 1. sum f {m..n} \\<cdot> y = (\\<Sum>i = m..n. f i \\<cdot> y)", "also"], ["proof (state)\nthis:\n  \\<Sum> (f ` {m..n}) \\<cdot> y =\n  \\<Sum> {x \\<cdot> y |x. x \\<in> f ` {m..n}}\n\ngoal (1 subgoal):\n 1. sum f {m..n} \\<cdot> y = (\\<Sum>i = m..n. f i \\<cdot> y)", "have \"... = \\<Sum>((\\<lambda>i. f(i) \\<cdot> y) ` {m..n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> {x \\<cdot> y |x. x \\<in> f ` {m..n}} =\n    \\<Sum> ((\\<lambda>i. f i \\<cdot> y) ` {m..n})", "by (auto intro: sum.cong)"], ["proof (state)\nthis:\n  \\<Sum> {x \\<cdot> y |x. x \\<in> f ` {m..n}} =\n  \\<Sum> ((\\<lambda>i. f i \\<cdot> y) ` {m..n})\n\ngoal (1 subgoal):\n 1. sum f {m..n} \\<cdot> y = (\\<Sum>i = m..n. f i \\<cdot> y)", "also"], ["proof (state)\nthis:\n  \\<Sum> {x \\<cdot> y |x. x \\<in> f ` {m..n}} =\n  \\<Sum> ((\\<lambda>i. f i \\<cdot> y) ` {m..n})\n\ngoal (1 subgoal):\n 1. sum f {m..n} \\<cdot> y = (\\<Sum>i = m..n. f i \\<cdot> y)", "have \"... = (\\<Sum>i=m..n. (f(i) \\<cdot> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> ((\\<lambda>i. f i \\<cdot> y) ` {m..n}) =\n    (\\<Sum>i = m..n. f i \\<cdot> y)", "by (metis finite_atLeastAtMost sum_image)"], ["proof (state)\nthis:\n  \\<Sum> ((\\<lambda>i. f i \\<cdot> y) ` {m..n}) =\n  (\\<Sum>i = m..n. f i \\<cdot> y)\n\ngoal (1 subgoal):\n 1. sum f {m..n} \\<cdot> y = (\\<Sum>i = m..n. f i \\<cdot> y)", "finally"], ["proof (chain)\npicking this:\n  sum f {m..n} \\<cdot> y = (\\<Sum>i = m..n. f i \\<cdot> y)", "show ?thesis"], ["proof (prove)\nusing this:\n  sum f {m..n} \\<cdot> y = (\\<Sum>i = m..n. f i \\<cdot> y)\n\ngoal (1 subgoal):\n 1. sum f {m..n} \\<cdot> y = (\\<Sum>i = m..n. f i \\<cdot> y)", "."], ["proof (state)\nthis:\n  sum f {m..n} \\<cdot> y = (\\<Sum>i = m..n. f i \\<cdot> y)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>There are interesting theorems for finite sums in Kleene\nalgebras; we leave them for future consideration.\\<close>"], ["", "end"]]}