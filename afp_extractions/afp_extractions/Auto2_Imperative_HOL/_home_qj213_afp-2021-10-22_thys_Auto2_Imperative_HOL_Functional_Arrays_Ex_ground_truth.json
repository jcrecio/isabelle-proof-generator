{"file_name": "/home/qj213/afp-2021-10-22/thys/Auto2_Imperative_HOL/Functional/Arrays_Ex.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Auto2_Imperative_HOL", "problem_names": ["lemma list_swap_eval:\n  \"i < length xs \\<Longrightarrow> j < length xs \\<Longrightarrow>\n   (list_swap xs i j) ! k = (if k = i then xs ! j else if k = j then xs ! i else xs ! k)\"", "lemma list_swap_eval_triv [rewrite]:\n  \"i < length xs \\<Longrightarrow> j < length xs \\<Longrightarrow> (list_swap xs i j) ! i = xs ! j\"\n  \"i < length xs \\<Longrightarrow> j < length xs \\<Longrightarrow> (list_swap xs i j) ! j = xs ! i\"", "lemma length_list_swap [rewrite_arg]:\n  \"length (list_swap xs i j) = length xs\"", "lemma mset_list_swap [rewrite]:\n  \"i < length xs \\<Longrightarrow> j < length xs \\<Longrightarrow> mset (list_swap xs i j) = mset xs\"", "lemma set_list_swap [rewrite]:\n  \"i < length xs \\<Longrightarrow> j < length xs \\<Longrightarrow> set (list_swap xs i j) = set xs\"", "lemma rev_nth [rewrite]:\n  \"n < length xs \\<Longrightarrow> rev xs ! n = xs ! (length xs - 1 - n)\"", "lemma rev_swap_length [rewrite_arg]:\n  \"j < length xs \\<Longrightarrow> length (rev_swap xs i j) = length xs\"", "lemma rev_swap_eval [rewrite]:\n  \"j < length xs \\<Longrightarrow> (rev_swap xs i j) ! k =\n    (if k < i then xs ! k else if k > j then xs ! k else xs ! (j - (k - i)))\"", "lemma rev_swap_is_rev [rewrite]:\n  \"length xs \\<ge> 1 \\<Longrightarrow> rev_swap xs 0 (length xs - 1) = rev xs\"", "lemma array_copy_length [rewrite_arg]:\n  \"n \\<le> length xs \\<Longrightarrow> n \\<le> length xs' \\<Longrightarrow> length (array_copy xs xs' n) = length xs'\"", "lemma array_copy_ind [rewrite]:\n  \"n \\<le> length xs \\<Longrightarrow> n \\<le> length xs' \\<Longrightarrow> k < n \\<Longrightarrow> (array_copy xs xs' n) ! k = xs ! k\"", "lemma array_copy_correct [rewrite]:\n  \"n \\<le> length xs \\<Longrightarrow> n \\<le> length xs' \\<Longrightarrow> take n (array_copy xs xs' n) = take n xs\"", "lemma length_sublist [rewrite_arg]:\n  \"r \\<le> length xs \\<Longrightarrow> length (sublist l r xs) = r - l\"", "lemma nth_sublist [rewrite]:\n  \"r \\<le> length xs \\<Longrightarrow> xs' = sublist l r xs \\<Longrightarrow> i < length xs' \\<Longrightarrow> xs' ! i = xs ! (i + l)\"", "lemma sublist_nil [rewrite]:\n  \"r \\<le> length xs \\<Longrightarrow> r \\<le> l \\<Longrightarrow> sublist l r xs = []\"", "lemma sublist_0 [rewrite]:\n  \"sublist 0 l xs = take l xs\"", "lemma sublist_drop [rewrite]:\n  \"sublist l r (drop n xs) = sublist (l + n) (r + n) xs\"", "lemma sublist_single [rewrite]:\n  \"l + 1 \\<le> length xs \\<Longrightarrow> sublist l (l + 1) xs = [xs ! l]\"", "lemma sublist_append [rewrite]:\n  \"l \\<le> m \\<Longrightarrow> m \\<le> r \\<Longrightarrow> r \\<le> length xs \\<Longrightarrow> sublist l m xs @ sublist m r xs = sublist l r xs\"", "lemma sublist_Cons [rewrite]:\n  \"r \\<le> length xs \\<Longrightarrow> l < r \\<Longrightarrow> xs ! l # sublist (l + 1) r xs = sublist l r xs\"", "lemma sublist_equalityI:\n  \"i \\<le> j \\<Longrightarrow> j \\<le> length xs \\<Longrightarrow> length xs = length ys \\<Longrightarrow>\n   \\<forall>k. i \\<le> k \\<longrightarrow> k < j \\<longrightarrow> xs ! k = ys ! k \\<Longrightarrow> sublist i j xs = sublist i j ys\"", "lemma set_sublist [resolve]:\n  \"j \\<le> length xs \\<Longrightarrow> x \\<in> set (sublist i j xs) \\<Longrightarrow> \\<exists>k. k \\<ge> i \\<and> k < j \\<and> x = xs ! k\"", "lemma list_take_sublist_drop_eq [rewrite]:\n  \"l \\<le> r \\<Longrightarrow> r \\<le> length xs \\<Longrightarrow> take l xs @ sublist l r xs @ drop r xs = xs\"", "lemma list_update_set_length [rewrite_arg]:\n  \"length (list_update_set S f xs) = length xs\"", "lemma list_update_set_nth [rewrite]:\n  \"xs' = list_update_set S f xs \\<Longrightarrow> i < length xs' \\<Longrightarrow> xs' ! i = (if S i then f i else xs ! i)\"", "lemma list_update_set_impl_ind [rewrite]:\n  \"n \\<le> length xs \\<Longrightarrow> list_update_set_impl S f xs n =\n   list (\\<lambda>i. if i < n then if S i then f i else xs ! i else xs ! i) (length xs)\"", "lemma list_update_set_impl_correct [rewrite]:\n  \"list_update_set_impl S f xs (length xs) = list_update_set S f xs\""], "translations": [["", "lemma list_swap_eval:\n  \"i < length xs \\<Longrightarrow> j < length xs \\<Longrightarrow>\n   (list_swap xs i j) ! k = (if k = i then xs ! j else if k = j then xs ! i else xs ! k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length xs; j < length xs\\<rbrakk>\n    \\<Longrightarrow> list_swap xs i j ! k =\n                      (if k = i then xs ! j\n                       else if k = j then xs ! i else xs ! k)", "by auto2"], ["", "setup \\<open>add_rewrite_rule_cond @{thm list_swap_eval} [with_cond \"?k \\<noteq> ?i\", with_cond \"?k \\<noteq> ?j\"]\\<close>"], ["", "lemma list_swap_eval_triv [rewrite]:\n  \"i < length xs \\<Longrightarrow> j < length xs \\<Longrightarrow> (list_swap xs i j) ! i = xs ! j\"\n  \"i < length xs \\<Longrightarrow> j < length xs \\<Longrightarrow> (list_swap xs i j) ! j = xs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < length xs; j < length xs\\<rbrakk>\n     \\<Longrightarrow> list_swap xs i j ! i = xs ! j) &&&\n    (\\<lbrakk>i < length xs; j < length xs\\<rbrakk>\n     \\<Longrightarrow> list_swap xs i j ! j = xs ! i)", "by auto2+"], ["", "lemma length_list_swap [rewrite_arg]:\n  \"length (list_swap xs i j) = length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (list_swap xs i j) = length xs", "by auto2"], ["", "lemma mset_list_swap [rewrite]:\n  \"i < length xs \\<Longrightarrow> j < length xs \\<Longrightarrow> mset (list_swap xs i j) = mset xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length xs; j < length xs\\<rbrakk>\n    \\<Longrightarrow> mset (list_swap xs i j) = mset xs", "by auto2"], ["", "lemma set_list_swap [rewrite]:\n  \"i < length xs \\<Longrightarrow> j < length xs \\<Longrightarrow> set (list_swap xs i j) = set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length xs; j < length xs\\<rbrakk>\n    \\<Longrightarrow> set (list_swap xs i j) = set xs", "by auto2"], ["", "setup \\<open>del_prfstep_thm @{thm list_swap_def}\\<close>"], ["", "setup \\<open>add_rewrite_rule_back @{thm list_swap_def}\\<close>"], ["", "subsection \\<open>Reverse\\<close>"], ["", "lemma rev_nth [rewrite]:\n  \"n < length xs \\<Longrightarrow> rev xs ! n = xs ! (length xs - 1 - n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow> rev xs ! n = xs ! (length xs - 1 - n)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow> rev xs ! n = xs ! (length xs - 1 - n)", "@induct xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow> rev xs ! n = xs ! (length xs - 1 - n)", "@qed"], ["", "fun rev_swap :: \"'a list \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> 'a list\" where\n  \"rev_swap xs i j = (if i < j then rev_swap (list_swap xs i j) (i + 1) (j - 1) else xs)\""], ["", "setup \\<open>register_wellform_data (\"rev_swap xs i j\", [\"j < length xs\"])\\<close>"], ["", "setup \\<open>add_prfstep_check_req (\"rev_swap xs i j\", \"j < length xs\")\\<close>"], ["", "lemma rev_swap_length [rewrite_arg]:\n  \"j < length xs \\<Longrightarrow> length (rev_swap xs i j) = length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length xs \\<Longrightarrow> length (rev_swap xs i j) = length xs", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length xs \\<Longrightarrow> length (rev_swap xs i j) = length xs", "@fun_induct \"rev_swap xs i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length xs \\<Longrightarrow> length (rev_swap xs i j) = length xs", "@unfold \"rev_swap xs i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length xs \\<Longrightarrow> length (rev_swap xs i j) = length xs", "@qed"], ["", "lemma rev_swap_eval [rewrite]:\n  \"j < length xs \\<Longrightarrow> (rev_swap xs i j) ! k =\n    (if k < i then xs ! k else if k > j then xs ! k else xs ! (j - (k - i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length xs \\<Longrightarrow>\n    rev_swap xs i j ! k =\n    (if k < i then xs ! k else if j < k then xs ! k else xs ! (j - (k - i)))", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length xs \\<Longrightarrow>\n    rev_swap xs i j ! k =\n    (if k < i then xs ! k else if j < k then xs ! k else xs ! (j - (k - i)))", "@fun_induct \"rev_swap xs i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length xs \\<Longrightarrow>\n    rev_swap xs i j ! k =\n    (if k < i then xs ! k else if j < k then xs ! k else xs ! (j - (k - i)))", "@unfold \"rev_swap xs i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length xs \\<Longrightarrow>\n    rev_swap xs i j ! k =\n    (if k < i then xs ! k else if j < k then xs ! k else xs ! (j - (k - i)))", "@case \"i < j\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length xs \\<Longrightarrow>\n    rev_swap xs i j ! k =\n    (if k < i then xs ! k else if j < k then xs ! k else xs ! (j - (k - i)))", "@case \"k < i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length xs \\<Longrightarrow>\n    rev_swap xs i j ! k =\n    (if k < i then xs ! k else if j < k then xs ! k else xs ! (j - (k - i)))", "@case \"k > j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length xs \\<Longrightarrow>\n    rev_swap xs i j ! k =\n    (if k < i then xs ! k else if j < k then xs ! k else xs ! (j - (k - i)))", "@have \"j - (k - i) = j - k + i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length xs \\<Longrightarrow>\n    rev_swap xs i j ! k =\n    (if k < i then xs ! k else if j < k then xs ! k else xs ! (j - (k - i)))", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length xs \\<Longrightarrow>\n    rev_swap xs i j ! k =\n    (if k < i then xs ! k else if j < k then xs ! k else xs ! (j - (k - i)))", "@qed"], ["", "lemma rev_swap_is_rev [rewrite]:\n  \"length xs \\<ge> 1 \\<Longrightarrow> rev_swap xs 0 (length xs - 1) = rev xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> length xs \\<Longrightarrow>\n    rev_swap xs 0 (length xs - 1) = rev xs", "by auto2"], ["", "subsection \\<open>Copy one array to the beginning of another\\<close>"], ["", "fun array_copy :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> nat \\<Rightarrow> 'a list\" where\n  \"array_copy xs xs' 0 = xs'\"\n| \"array_copy xs xs' (Suc n) = list_update (array_copy xs xs' n) n (xs ! n)\""], ["", "setup \\<open>fold add_rewrite_rule @{thms array_copy.simps}\\<close>"], ["", "setup \\<open>register_wellform_data (\"array_copy xs xs' n\", [\"n \\<le> length xs\", \"n \\<le> length xs'\"])\\<close>"], ["", "setup \\<open>add_prfstep_check_req (\"array_copy xs xs' n\", \"n \\<le> length xs \\<and> n \\<le> length xs'\")\\<close>"], ["", "lemma array_copy_length [rewrite_arg]:\n  \"n \\<le> length xs \\<Longrightarrow> n \\<le> length xs' \\<Longrightarrow> length (array_copy xs xs' n) = length xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> length xs; n \\<le> length xs'\\<rbrakk>\n    \\<Longrightarrow> length (array_copy xs xs' n) = length xs'", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> length xs; n \\<le> length xs'\\<rbrakk>\n    \\<Longrightarrow> length (array_copy xs xs' n) = length xs'", "@induct n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> length xs; n \\<le> length xs'\\<rbrakk>\n    \\<Longrightarrow> length (array_copy xs xs' n) = length xs'", "@qed"], ["", "lemma array_copy_ind [rewrite]:\n  \"n \\<le> length xs \\<Longrightarrow> n \\<le> length xs' \\<Longrightarrow> k < n \\<Longrightarrow> (array_copy xs xs' n) ! k = xs ! k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> length xs; n \\<le> length xs'; k < n\\<rbrakk>\n    \\<Longrightarrow> array_copy xs xs' n ! k = xs ! k", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> length xs; n \\<le> length xs'; k < n\\<rbrakk>\n    \\<Longrightarrow> array_copy xs xs' n ! k = xs ! k", "@induct n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> length xs; n \\<le> length xs'; k < n\\<rbrakk>\n    \\<Longrightarrow> array_copy xs xs' n ! k = xs ! k", "@qed"], ["", "lemma array_copy_correct [rewrite]:\n  \"n \\<le> length xs \\<Longrightarrow> n \\<le> length xs' \\<Longrightarrow> take n (array_copy xs xs' n) = take n xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> length xs; n \\<le> length xs'\\<rbrakk>\n    \\<Longrightarrow> take n (array_copy xs xs' n) = take n xs", "by auto2"], ["", "subsection \\<open>Sublist\\<close>"], ["", "definition sublist :: \"nat \\<Rightarrow> nat \\<Rightarrow> 'a list \\<Rightarrow> 'a list\" where [rewrite]:\n  \"sublist l r xs = drop l (take r xs)\""], ["", "setup \\<open>register_wellform_data (\"sublist l r xs\", [\"l \\<le> r\", \"r \\<le> length xs\"])\\<close>"], ["", "setup \\<open>add_prfstep_check_req (\"sublist l r xs\", \"l \\<le> r \\<and> r \\<le> length xs\")\\<close>"], ["", "lemma length_sublist [rewrite_arg]:\n  \"r \\<le> length xs \\<Longrightarrow> length (sublist l r xs) = r - l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<le> length xs \\<Longrightarrow> length (sublist l r xs) = r - l", "by auto2"], ["", "lemma nth_sublist [rewrite]:\n  \"r \\<le> length xs \\<Longrightarrow> xs' = sublist l r xs \\<Longrightarrow> i < length xs' \\<Longrightarrow> xs' ! i = xs ! (i + l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r \\<le> length xs; xs' = sublist l r xs;\n     i < length xs'\\<rbrakk>\n    \\<Longrightarrow> xs' ! i = xs ! (i + l)", "by auto2"], ["", "lemma sublist_nil [rewrite]:\n  \"r \\<le> length xs \\<Longrightarrow> r \\<le> l \\<Longrightarrow> sublist l r xs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r \\<le> length xs; r \\<le> l\\<rbrakk>\n    \\<Longrightarrow> sublist l r xs = []", "by auto2"], ["", "lemma sublist_0 [rewrite]:\n  \"sublist 0 l xs = take l xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sublist 0 l xs = take l xs", "by auto2"], ["", "lemma sublist_drop [rewrite]:\n  \"sublist l r (drop n xs) = sublist (l + n) (r + n) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sublist l r (drop n xs) = sublist (l + n) (r + n) xs", "by auto2"], ["", "setup \\<open>del_prfstep_thm @{thm sublist_def}\\<close>"], ["", "lemma sublist_single [rewrite]:\n  \"l + 1 \\<le> length xs \\<Longrightarrow> sublist l (l + 1) xs = [xs ! l]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l + 1 \\<le> length xs \\<Longrightarrow> sublist l (l + 1) xs = [xs ! l]", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. l + 1 \\<le> length xs \\<Longrightarrow> sublist l (l + 1) xs = [xs ! l]", "@have \"length [xs ! l] = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l + 1 \\<le> length xs \\<Longrightarrow> sublist l (l + 1) xs = [xs ! l]", "@qed"], ["", "lemma sublist_append [rewrite]:\n  \"l \\<le> m \\<Longrightarrow> m \\<le> r \\<Longrightarrow> r \\<le> length xs \\<Longrightarrow> sublist l m xs @ sublist m r xs = sublist l r xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> m; m \\<le> r; r \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> sublist l m xs @ sublist m r xs = sublist l r xs", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> m; m \\<le> r; r \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> sublist l m xs @ sublist m r xs = sublist l r xs", "@let \"xs1 = sublist l r xs\" \"xs2 = sublist l m xs\" \"xs3 = sublist m r xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> m; m \\<le> r; r \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> sublist l m xs @ sublist m r xs = sublist l r xs", "@have \"length (xs2 @ xs3) = (r - m) + (m - l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> m; m \\<le> r; r \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> sublist l m xs @ sublist m r xs = sublist l r xs", "@have \"\\<forall>i<length xs1. xs1 ! i = (xs2 @ xs3) ! i\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> m; m \\<le> r; r \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> sublist l m xs @ sublist m r xs = sublist l r xs", "@case \"i < length xs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> m; m \\<le> r; r \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> sublist l m xs @ sublist m r xs = sublist l r xs", "@have \"i - length xs2 < length xs3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> m; m \\<le> r; r \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> sublist l m xs @ sublist m r xs = sublist l r xs", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> m; m \\<le> r; r \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> sublist l m xs @ sublist m r xs = sublist l r xs", "@qed"], ["", "lemma sublist_Cons [rewrite]:\n  \"r \\<le> length xs \\<Longrightarrow> l < r \\<Longrightarrow> xs ! l # sublist (l + 1) r xs = sublist l r xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r \\<le> length xs; l < r\\<rbrakk>\n    \\<Longrightarrow> xs ! l # sublist (l + 1) r xs = sublist l r xs", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r \\<le> length xs; l < r\\<rbrakk>\n    \\<Longrightarrow> xs ! l # sublist (l + 1) r xs = sublist l r xs", "@have \"sublist l r xs = sublist l (l + 1) xs @ sublist (l + 1) r xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r \\<le> length xs; l < r\\<rbrakk>\n    \\<Longrightarrow> xs ! l # sublist (l + 1) r xs = sublist l r xs", "@qed"], ["", "lemma sublist_equalityI:\n  \"i \\<le> j \\<Longrightarrow> j \\<le> length xs \\<Longrightarrow> length xs = length ys \\<Longrightarrow>\n   \\<forall>k. i \\<le> k \\<longrightarrow> k < j \\<longrightarrow> xs ! k = ys ! k \\<Longrightarrow> sublist i j xs = sublist i j ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; j \\<le> length xs; length xs = length ys;\n     \\<forall>k\\<ge>i. k < j \\<longrightarrow> xs ! k = ys ! k\\<rbrakk>\n    \\<Longrightarrow> sublist i j xs = sublist i j ys", "by auto2"], ["", "setup \\<open>add_backward2_prfstep_cond @{thm sublist_equalityI} [with_filt (order_filter \"xs\" \"ys\")]\\<close>"], ["", "lemma set_sublist [resolve]:\n  \"j \\<le> length xs \\<Longrightarrow> x \\<in> set (sublist i j xs) \\<Longrightarrow> \\<exists>k. k \\<ge> i \\<and> k < j \\<and> x = xs ! k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> length xs; x \\<in> set (sublist i j xs)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k\\<ge>i. k < j \\<and> x = xs ! k", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> length xs; x \\<in> set (sublist i j xs)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k\\<ge>i. k < j \\<and> x = xs ! k", "@let \"xs' = sublist i j xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> length xs; x \\<in> set (sublist i j xs)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k\\<ge>i. k < j \\<and> x = xs ! k", "@obtain l where \"l < length xs'\" \"xs' ! l = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> length xs; x \\<in> set (sublist i j xs)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k\\<ge>i. k < j \\<and> x = xs ! k", "@qed"], ["", "lemma list_take_sublist_drop_eq [rewrite]:\n  \"l \\<le> r \\<Longrightarrow> r \\<le> length xs \\<Longrightarrow> take l xs @ sublist l r xs @ drop r xs = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> r; r \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> take l xs @ sublist l r xs @ drop r xs = xs", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> r; r \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> take l xs @ sublist l r xs @ drop r xs = xs", "@have \"take l xs = sublist 0 l xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> r; r \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> take l xs @ sublist l r xs @ drop r xs = xs", "@have \"drop r xs = sublist r (length xs) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> r; r \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> take l xs @ sublist l r xs @ drop r xs = xs", "@qed"], ["", "subsection \\<open>Updating a set of elements in an array\\<close>"], ["", "definition list_update_set :: \"(nat \\<Rightarrow> bool) \\<Rightarrow> (nat \\<Rightarrow> 'a) \\<Rightarrow> 'a list \\<Rightarrow> 'a list\" where [rewrite]:\n  \"list_update_set S f xs = list (\\<lambda>i. if S i then f i else xs ! i) (length xs)\""], ["", "lemma list_update_set_length [rewrite_arg]:\n  \"length (list_update_set S f xs) = length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (list_update_set S f xs) = length xs", "by auto2"], ["", "lemma list_update_set_nth [rewrite]:\n  \"xs' = list_update_set S f xs \\<Longrightarrow> i < length xs' \\<Longrightarrow> xs' ! i = (if S i then f i else xs ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs' = list_update_set S f xs; i < length xs'\\<rbrakk>\n    \\<Longrightarrow> xs' ! i = (if S i then f i else xs ! i)", "by auto2"], ["", "setup \\<open>del_prfstep_thm @{thm list_update_set_def}\\<close>"], ["", "fun list_update_set_impl :: \"(nat \\<Rightarrow> bool) \\<Rightarrow> (nat \\<Rightarrow> 'a) \\<Rightarrow> 'a list \\<Rightarrow> nat \\<Rightarrow> 'a list\" where\n  \"list_update_set_impl S f xs 0 = xs\"\n| \"list_update_set_impl S f xs (Suc k) =\n   (let xs' = list_update_set_impl S f xs k in\n      if S k then xs' [k := f k] else xs')\""], ["", "setup \\<open>fold add_rewrite_rule @{thms list_update_set_impl.simps}\\<close>"], ["", "setup \\<open>register_wellform_data (\"list_update_set_impl S f xs n\", [\"n \\<le> length xs\"])\\<close>"], ["", "lemma list_update_set_impl_ind [rewrite]:\n  \"n \\<le> length xs \\<Longrightarrow> list_update_set_impl S f xs n =\n   list (\\<lambda>i. if i < n then if S i then f i else xs ! i else xs ! i) (length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> length xs \\<Longrightarrow>\n    list_update_set_impl S f xs n =\n    list (\\<lambda>i. if i < n then if S i then f i else xs ! i else xs ! i)\n     (length xs)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> length xs \\<Longrightarrow>\n    list_update_set_impl S f xs n =\n    list (\\<lambda>i. if i < n then if S i then f i else xs ! i else xs ! i)\n     (length xs)", "@induct n arbitrary xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> length xs \\<Longrightarrow>\n    list_update_set_impl S f xs n =\n    list (\\<lambda>i. if i < n then if S i then f i else xs ! i else xs ! i)\n     (length xs)", "@qed"], ["", "lemma list_update_set_impl_correct [rewrite]:\n  \"list_update_set_impl S f xs (length xs) = list_update_set S f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_update_set_impl S f xs (length xs) = list_update_set S f xs", "by auto2"], ["", "end"]]}