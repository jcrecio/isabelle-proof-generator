{"file_name": "/home/qj213/afp-2021-10-22/thys/Auto2_Imperative_HOL/Functional/Connectivity.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Auto2_Imperative_HOL", "problem_names": ["lemma is_path_nonempty [forward]: \"is_path n S p \\<Longrightarrow> p \\<noteq> []\"", "lemma nonempty_is_not_path [resolve]: \"\\<not>is_path n S []\"", "lemma is_path_extend [forward]:\n  \"is_path n S p \\<Longrightarrow> S \\<subseteq> T \\<Longrightarrow> is_path n T p\"", "lemma has_path_extend [forward]:\n  \"has_path n S i j \\<Longrightarrow> S \\<subseteq> T \\<Longrightarrow> has_path n T i j\"", "lemma path_join_hd [rewrite]: \"p \\<noteq> [] \\<Longrightarrow> hd (path_join p q) = hd p\"", "lemma path_join_last [rewrite]: \"joinable p q \\<Longrightarrow> q \\<noteq> [] \\<Longrightarrow> last (path_join p q) = last q\"", "lemma path_join_is_path [backward]:\n  \"joinable p q \\<Longrightarrow> is_path n S p \\<Longrightarrow> is_path n S q \\<Longrightarrow> is_path n S (path_join p q)\"", "lemma has_path_trans [forward]:\n  \"has_path n S i j \\<Longrightarrow> has_path n S j k \\<Longrightarrow> has_path n S i k\"", "lemma has_path_single1 [backward1]:\n  \"is_valid_graph n S \\<Longrightarrow> (a, b) \\<in> S \\<Longrightarrow> has_path n S a b\"", "lemma has_path_single2 [backward1]:\n  \"is_valid_graph n S \\<Longrightarrow> (a, b) \\<in> S \\<Longrightarrow> has_path n S b a\"", "lemma has_path_refl [backward2]:\n  \"is_valid_graph n S \\<Longrightarrow> a < n \\<Longrightarrow> has_path n S a a\"", "lemma connected_rel_iff [rewrite]:\n  \"(a, b) \\<in> connected_rel n S \\<longleftrightarrow> has_path n S a b\"", "lemma connected_rel_trans [forward]:\n  \"trans (connected_rel n S)\"", "lemma connected_rel_refl [backward2]:\n  \"is_valid_graph n S \\<Longrightarrow> a < n \\<Longrightarrow> (a, a) \\<in> connected_rel n S\"", "lemma is_path_per_union [rewrite]:\n  \"is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n   has_path n (S \\<union> {(a, b)}) i j \\<longleftrightarrow> (i, j) \\<in> per_union (connected_rel n S) a b\"", "lemma connected_rel_union [rewrite]:\n  \"is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n   connected_rel n (S \\<union> {(a, b)}) = per_union (connected_rel n S) a b\"", "lemma connected_rel_init [rewrite]:\n  \"connected_rel n {} = uf_init_rel n\"", "lemma connected_rel_ind_rule [rewrite]:\n  \"is_valid_graph n (set es) \\<Longrightarrow> k \\<le> length es \\<Longrightarrow>\n   connected_rel_ind n es k = connected_rel n (set (take k es))\"", "theorem connected_rel_ind_compute [rewrite]:\n  \"is_valid_graph n (set es) \\<Longrightarrow>\n   connected_rel_ind n es (length es) = connected_rel n (set es)\""], "translations": [["", "lemma is_path_nonempty [forward]: \"is_path n S p \\<Longrightarrow> p \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path n S p \\<Longrightarrow> p \\<noteq> []", "by auto2"], ["", "lemma nonempty_is_not_path [resolve]: \"\\<not>is_path n S []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_path n S []", "by auto2"], ["", "lemma is_path_extend [forward]:\n  \"is_path n S p \\<Longrightarrow> S \\<subseteq> T \\<Longrightarrow> is_path n T p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path n S p; S \\<subseteq> T\\<rbrakk>\n    \\<Longrightarrow> is_path n T p", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path n S p; S \\<subseteq> T\\<rbrakk>\n    \\<Longrightarrow> is_path n T p", "@induct p"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path n S p; S \\<subseteq> T\\<rbrakk>\n    \\<Longrightarrow> is_path n T p", "@qed"], ["", "lemma has_path_extend [forward]:\n  \"has_path n S i j \\<Longrightarrow> S \\<subseteq> T \\<Longrightarrow> has_path n T i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_path n S i j; S \\<subseteq> T\\<rbrakk>\n    \\<Longrightarrow> has_path n T i j", "by auto2"], ["", "definition joinable :: \"nat list \\<Rightarrow> nat list \\<Rightarrow> bool\" where [rewrite]:\n  \"joinable p q \\<longleftrightarrow> (last p = hd q)\""], ["", "definition path_join :: \"nat list \\<Rightarrow> nat list \\<Rightarrow> nat list\" where [rewrite]:\n  \"path_join p q = p @ tl q\""], ["", "setup \\<open>register_wellform_data (\"path_join p q\", [\"joinable p q\"])\\<close>"], ["", "setup \\<open>add_prfstep_check_req (\"path_join p q\", \"joinable p q\")\\<close>"], ["", "lemma path_join_hd [rewrite]: \"p \\<noteq> [] \\<Longrightarrow> hd (path_join p q) = hd p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow> hd (path_join p q) = hd p", "by auto2"], ["", "lemma path_join_last [rewrite]: \"joinable p q \\<Longrightarrow> q \\<noteq> [] \\<Longrightarrow> last (path_join p q) = last q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>joinable p q; q \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (path_join p q) = last q", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>joinable p q; q \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (path_join p q) = last q", "@have \"q = hd q # tl q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>joinable p q; q \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (path_join p q) = last q", "@case \"tl q = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>joinable p q; q \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (path_join p q) = last q", "@qed"], ["", "lemma path_join_is_path [backward]:\n  \"joinable p q \\<Longrightarrow> is_path n S p \\<Longrightarrow> is_path n S q \\<Longrightarrow> is_path n S (path_join p q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>joinable p q; is_path n S p; is_path n S q\\<rbrakk>\n    \\<Longrightarrow> is_path n S (path_join p q)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>joinable p q; is_path n S p; is_path n S q\\<rbrakk>\n    \\<Longrightarrow> is_path n S (path_join p q)", "@induct p"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>joinable p q; is_path n S p; is_path n S q\\<rbrakk>\n    \\<Longrightarrow> is_path n S (path_join p q)", "@qed"], ["", "lemma has_path_trans [forward]:\n  \"has_path n S i j \\<Longrightarrow> has_path n S j k \\<Longrightarrow> has_path n S i k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_path n S i j; has_path n S j k\\<rbrakk>\n    \\<Longrightarrow> has_path n S i k", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_path n S i j; has_path n S j k\\<rbrakk>\n    \\<Longrightarrow> has_path n S i k", "@obtain p where \"is_path n S p\" \"hd p = i\" \"last p = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_path n S i j; has_path n S j k\\<rbrakk>\n    \\<Longrightarrow> has_path n S i k", "@obtain q where \"is_path n S q\" \"hd q = j\" \"last q = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_path n S i j; has_path n S j k\\<rbrakk>\n    \\<Longrightarrow> has_path n S i k", "@have \"is_path n S (path_join p q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_path n S i j; has_path n S j k\\<rbrakk>\n    \\<Longrightarrow> has_path n S i k", "@qed"], ["", "definition is_valid_graph :: \"nat \\<Rightarrow> (nat \\<times> nat) set \\<Rightarrow> bool\" where [rewrite]:\n  \"is_valid_graph n S \\<longleftrightarrow> (\\<forall>p\\<in>S. fst p < n \\<and> snd p < n)\""], ["", "lemma has_path_single1 [backward1]:\n  \"is_valid_graph n S \\<Longrightarrow> (a, b) \\<in> S \\<Longrightarrow> has_path n S a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n S; (a, b) \\<in> S\\<rbrakk>\n    \\<Longrightarrow> has_path n S a b", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n S; (a, b) \\<in> S\\<rbrakk>\n    \\<Longrightarrow> has_path n S a b", "@have \"is_path n S [a, b]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n S; (a, b) \\<in> S\\<rbrakk>\n    \\<Longrightarrow> has_path n S a b", "@qed"], ["", "lemma has_path_single2 [backward1]:\n  \"is_valid_graph n S \\<Longrightarrow> (a, b) \\<in> S \\<Longrightarrow> has_path n S b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n S; (a, b) \\<in> S\\<rbrakk>\n    \\<Longrightarrow> has_path n S b a", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n S; (a, b) \\<in> S\\<rbrakk>\n    \\<Longrightarrow> has_path n S b a", "@have \"is_path n S [b, a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n S; (a, b) \\<in> S\\<rbrakk>\n    \\<Longrightarrow> has_path n S b a", "@qed"], ["", "lemma has_path_refl [backward2]:\n  \"is_valid_graph n S \\<Longrightarrow> a < n \\<Longrightarrow> has_path n S a a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n S; a < n\\<rbrakk>\n    \\<Longrightarrow> has_path n S a a", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n S; a < n\\<rbrakk>\n    \\<Longrightarrow> has_path n S a a", "@have \"is_path n S [a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n S; a < n\\<rbrakk>\n    \\<Longrightarrow> has_path n S a a", "@qed"], ["", "definition connected_rel :: \"nat \\<Rightarrow> (nat \\<times> nat) set \\<Rightarrow> (nat \\<times> nat) set\" where\n  \"connected_rel n S = {(a,b). has_path n S a b}\""], ["", "lemma connected_rel_iff [rewrite]:\n  \"(a, b) \\<in> connected_rel n S \\<longleftrightarrow> has_path n S a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b) \\<in> connected_rel n S) = has_path n S a b", "using connected_rel_def"], ["proof (prove)\nusing this:\n  connected_rel ?n ?S = {(a, b). has_path ?n ?S a b}\n\ngoal (1 subgoal):\n 1. ((a, b) \\<in> connected_rel n S) = has_path n S a b", "by simp"], ["", "lemma connected_rel_trans [forward]:\n  \"trans (connected_rel n S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trans (connected_rel n S)", "by auto2"], ["", "lemma connected_rel_refl [backward2]:\n  \"is_valid_graph n S \\<Longrightarrow> a < n \\<Longrightarrow> (a, a) \\<in> connected_rel n S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n S; a < n\\<rbrakk>\n    \\<Longrightarrow> (a, a) \\<in> connected_rel n S", "by auto2"], ["", "lemma is_path_per_union [rewrite]:\n  \"is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n   has_path n (S \\<union> {(a, b)}) i j \\<longleftrightarrow> (i, j) \\<in> per_union (connected_rel n S) a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@let \"R = connected_rel n S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@let \"S' = S \\<union> {(a, b)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@have \"S \\<subseteq> S'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@case \"(i, j) \\<in> per_union R a b\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@case \"(i, a) \\<in> R \\<and> (b, j) \\<in> R\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@have \"has_path n S' i a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@have \"has_path n S' a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@have \"has_path n S' b j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@case \"(i, b) \\<in> R \\<and> (a, j) \\<in> R\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@have \"has_path n S' i b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@have \"has_path n S' b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@have \"has_path n S' a j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@case \"has_path n S' i j\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@have (@rule) \"\\<forall>p. is_path n S' p \\<longrightarrow> (hd p, last p) \\<in> per_union R a b\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@induct p @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@subgoal \"p = x # xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@case \"xs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@have \"(x, hd xs) \\<in> per_union R a b\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@have \"is_valid_graph n S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@case \"(x, hd xs) \\<in> S'\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@case \"(x, hd xs) \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@case \"(hd xs, x) \\<in> S'\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@case \"(hd xs, x) \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@endgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@obtain p where \"is_path n S' p\" \"hd p = i\" \"last p = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    has_path n (S \\<union> {(a, b)}) i j =\n    ((i, j) \\<in> per_union (connected_rel n S) a b)", "@qed"], ["", "lemma connected_rel_union [rewrite]:\n  \"is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n   connected_rel n (S \\<union> {(a, b)}) = per_union (connected_rel n S) a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (S \\<union> {(a, b)}) \\<Longrightarrow>\n    connected_rel n (S \\<union> {(a, b)}) =\n    per_union (connected_rel n S) a b", "by auto2"], ["", "lemma connected_rel_init [rewrite]:\n  \"connected_rel n {} = uf_init_rel n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. connected_rel n {} = uf_init_rel n", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. connected_rel n {} = uf_init_rel n", "@have \"is_valid_graph n {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. connected_rel n {} = uf_init_rel n", "@have \"\\<forall>i j. has_path n {} i j \\<longleftrightarrow> (i, j) \\<in> uf_init_rel n\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. connected_rel n {} = uf_init_rel n", "@case \"has_path n {} i j\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. connected_rel n {} = uf_init_rel n", "@obtain p where \"is_path n {} p\" \"hd p = i\" \"last p = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. connected_rel n {} = uf_init_rel n", "@have \"p = hd p # tl p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. connected_rel n {} = uf_init_rel n", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. connected_rel n {} = uf_init_rel n", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. connected_rel n {} = uf_init_rel n", "@qed"], ["", "fun connected_rel_ind :: \"nat \\<Rightarrow> (nat \\<times> nat) list \\<Rightarrow> nat \\<Rightarrow> (nat \\<times> nat) set\" where\n  \"connected_rel_ind n es 0 = uf_init_rel n\"\n| \"connected_rel_ind n es (Suc k) =\n   (let R = connected_rel_ind n es k; p = es ! k in\n      per_union R (fst p) (snd p))\""], ["", "setup \\<open>fold add_rewrite_rule @{thms connected_rel_ind.simps}\\<close>"], ["", "lemma connected_rel_ind_rule [rewrite]:\n  \"is_valid_graph n (set es) \\<Longrightarrow> k \\<le> length es \\<Longrightarrow>\n   connected_rel_ind n es k = connected_rel n (set (take k es))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n (set es); k \\<le> length es\\<rbrakk>\n    \\<Longrightarrow> connected_rel_ind n es k =\n                      connected_rel n (set (take k es))", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n (set es); k \\<le> length es\\<rbrakk>\n    \\<Longrightarrow> connected_rel_ind n es k =\n                      connected_rel n (set (take k es))", "@induct k @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n (set es); k \\<le> length es\\<rbrakk>\n    \\<Longrightarrow> connected_rel_ind n es k =\n                      connected_rel n (set (take k es))", "@subgoal \"k = Suc m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n (set es); k \\<le> length es\\<rbrakk>\n    \\<Longrightarrow> connected_rel_ind n es k =\n                      connected_rel n (set (take k es))", "@have \"is_valid_graph n (set (take (Suc m) es))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n (set es); k \\<le> length es\\<rbrakk>\n    \\<Longrightarrow> connected_rel_ind n es k =\n                      connected_rel n (set (take k es))", "@endgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n (set es); k \\<le> length es\\<rbrakk>\n    \\<Longrightarrow> connected_rel_ind n es k =\n                      connected_rel n (set (take k es))", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_valid_graph n (set es); k \\<le> length es\\<rbrakk>\n    \\<Longrightarrow> connected_rel_ind n es k =\n                      connected_rel n (set (take k es))", "@qed"], ["", "text \\<open>Correctness of the functional algorithm.\\<close>"], ["", "theorem connected_rel_ind_compute [rewrite]:\n  \"is_valid_graph n (set es) \\<Longrightarrow>\n   connected_rel_ind n es (length es) = connected_rel n (set es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_graph n (set es) \\<Longrightarrow>\n    connected_rel_ind n es (length es) = connected_rel n (set es)", "by auto2"], ["", "end"]]}