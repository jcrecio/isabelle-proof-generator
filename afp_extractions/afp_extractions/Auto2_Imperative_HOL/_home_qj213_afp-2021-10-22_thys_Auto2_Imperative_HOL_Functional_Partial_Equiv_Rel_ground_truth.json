{"file_name": "/home/qj213/afp-2021-10-22/thys/Auto2_Imperative_HOL/Functional/Partial_Equiv_Rel.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Auto2_Imperative_HOL", "problem_names": ["lemma part_equivI [forward]: \"sym R \\<Longrightarrow> trans R \\<Longrightarrow> part_equiv R\"", "lemma part_equivD1 [forward]: \"part_equiv R \\<Longrightarrow> sym R\"", "lemma part_equivD2 [forward]: \"part_equiv R \\<Longrightarrow> trans R\"", "lemma per_union_memI1 [backward]:\n  \"(x, y) \\<in> R \\<Longrightarrow> (x, y) \\<in> per_union R a b\"", "lemma per_union_memI2 [backward]:\n  \"(x, a) \\<in> R \\<Longrightarrow> (b, y) \\<in> R \\<Longrightarrow> (x, y) \\<in> per_union R a b\"", "lemma per_union_memI3 [backward]:\n  \"(x, b) \\<in> R \\<Longrightarrow> (a, y) \\<in> R \\<Longrightarrow> (x, y) \\<in> per_union R a b\"", "lemma per_union_memD:\n  \"(x, y) \\<in> per_union R a b \\<Longrightarrow> (x, y) \\<in> R \\<or> ((x, a) \\<in> R \\<and> (b, y) \\<in> R) \\<or> ((x, b) \\<in> R \\<and> (a, y) \\<in> R)\"", "lemma per_union_is_trans [forward]:\n  \"trans R \\<Longrightarrow> trans (per_union R a b)\"", "lemma per_union_is_part_equiv [forward]:\n  \"part_equiv R \\<Longrightarrow> part_equiv (per_union R a b)\""], "translations": [["", "lemma part_equivI [forward]: \"sym R \\<Longrightarrow> trans R \\<Longrightarrow> part_equiv R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sym R; trans R\\<rbrakk> \\<Longrightarrow> part_equiv R", "by auto2"], ["", "lemma part_equivD1 [forward]: \"part_equiv R \\<Longrightarrow> sym R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. part_equiv R \\<Longrightarrow> sym R", "by auto2"], ["", "lemma part_equivD2 [forward]: \"part_equiv R \\<Longrightarrow> trans R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. part_equiv R \\<Longrightarrow> trans R", "by auto2"], ["", "setup \\<open>del_prfstep_thm_eqforward @{thm part_equiv_def}\\<close>"], ["", "subsection \\<open>Combining two elements in a partial equivalence relation\\<close>"], ["", "definition per_union :: \"('a \\<times> 'a) set \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> ('a \\<times> 'a) set\" where [rewrite]:\n  \"per_union R a b = R \\<union> { (x,y). (x,a)\\<in>R \\<and> (b,y)\\<in>R } \\<union> { (x,y). (x,b)\\<in>R \\<and> (a,y)\\<in>R }\""], ["", "lemma per_union_memI1 [backward]:\n  \"(x, y) \\<in> R \\<Longrightarrow> (x, y) \\<in> per_union R a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> R \\<Longrightarrow> (x, y) \\<in> per_union R a b", "by (simp add: per_union_def)"], ["", "setup \\<open>add_forward_prfstep_cond @{thm per_union_memI1} [with_term \"per_union ?R ?a ?b\"]\\<close>"], ["", "lemma per_union_memI2 [backward]:\n  \"(x, a) \\<in> R \\<Longrightarrow> (b, y) \\<in> R \\<Longrightarrow> (x, y) \\<in> per_union R a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, a) \\<in> R; (b, y) \\<in> R\\<rbrakk>\n    \\<Longrightarrow> (x, y) \\<in> per_union R a b", "by (simp add: per_union_def)"], ["", "lemma per_union_memI3 [backward]:\n  \"(x, b) \\<in> R \\<Longrightarrow> (a, y) \\<in> R \\<Longrightarrow> (x, y) \\<in> per_union R a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, b) \\<in> R; (a, y) \\<in> R\\<rbrakk>\n    \\<Longrightarrow> (x, y) \\<in> per_union R a b", "by (simp add: per_union_def)"], ["", "lemma per_union_memD:\n  \"(x, y) \\<in> per_union R a b \\<Longrightarrow> (x, y) \\<in> R \\<or> ((x, a) \\<in> R \\<and> (b, y) \\<in> R) \\<or> ((x, b) \\<in> R \\<and> (a, y) \\<in> R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> per_union R a b \\<Longrightarrow>\n    (x, y) \\<in> R \\<or>\n    (x, a) \\<in> R \\<and> (b, y) \\<in> R \\<or>\n    (x, b) \\<in> R \\<and> (a, y) \\<in> R", "by (simp add: per_union_def)"], ["", "setup \\<open>add_forward_prfstep_cond @{thm per_union_memD} [with_cond \"?x \\<noteq> ?y\", with_filt (order_filter \"x\" \"y\")]\\<close>"], ["", "setup \\<open>del_prfstep_thm @{thm per_union_def}\\<close>"], ["", "lemma per_union_is_trans [forward]:\n  \"trans R \\<Longrightarrow> trans (per_union R a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trans R \\<Longrightarrow> trans (per_union R a b)", "by auto2"], ["", "lemma per_union_is_part_equiv [forward]:\n  \"part_equiv R \\<Longrightarrow> part_equiv (per_union R a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. part_equiv R \\<Longrightarrow> part_equiv (per_union R a b)", "by auto2"], ["", "end"]]}