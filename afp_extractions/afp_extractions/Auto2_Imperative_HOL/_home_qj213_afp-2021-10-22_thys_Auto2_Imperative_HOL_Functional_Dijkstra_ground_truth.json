{"file_name": "/home/qj213/afp-2021-10-22/thys/Auto2_Imperative_HOL/Functional/Dijkstra.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Auto2_Imperative_HOL", "problem_names": ["lemma verts_mem [rewrite]: \"i \\<in> verts G \\<longleftrightarrow> i < size G\"", "lemma card_verts [rewrite]: \"card (verts G) = size G\"", "lemma finite_verts [forward]: \"finite (verts G)\"", "lemma is_path_to_in_verts [forward]: \"is_path G p \\<Longrightarrow> hd p \\<in> verts G \\<and> last p \\<in> verts G\"", "lemma path_join_is_path:\n  \"joinable G p q \\<Longrightarrow> is_path G (path_join G p q)\"", "lemma path_weight_singleton [rewrite]: \"path_weight G [x] = 0\"", "lemma path_weight_doubleton [rewrite]: \"path_weight G [m, n] = weight G m n\"", "lemma path_weight_sum [rewrite]:\n  \"joinable G p q \\<Longrightarrow> path_weight G (path_join G p q) = path_weight G p + path_weight G q\"", "lemma path_set_mem [rewrite]:\n  \"p \\<in> path_set G m n \\<longleftrightarrow> is_path G p \\<and> hd p = m \\<and> last p = n\"", "lemma path_join_set: \"joinable G p q \\<Longrightarrow> path_join G p q \\<in> path_set G (hd p) (last q)\"", "lemma is_shortest_pathD1 [forward]:\n  \"is_shortest_path G m n p \\<Longrightarrow> p \\<in> path_set G m n\"", "lemma is_shortest_pathD2 [forward]:\n  \"is_shortest_path G m n p \\<Longrightarrow> p' \\<in> path_set G m n \\<Longrightarrow> path_weight G p' \\<ge> path_weight G p\"", "lemma has_distI [forward]: \"is_shortest_path G m n p \\<Longrightarrow> has_dist G m n\"", "lemma has_distD [resolve]: \"has_dist G m n \\<Longrightarrow> \\<exists>p. is_shortest_path G m n p\"", "lemma has_dist_to_in_verts [forward]: \"has_dist G u v \\<Longrightarrow> u \\<in> verts G \\<and> v \\<in> verts G\"", "lemma dist_eq [rewrite]:\n  \"is_shortest_path G m n p \\<Longrightarrow> dist G m n = path_weight G p\"", "lemma distD [forward]:\n  \"has_dist G m n \\<Longrightarrow> p \\<in> path_set G m n \\<Longrightarrow> path_weight G p \\<ge> dist G m n\"", "lemma shortest_init [resolve]: \"n \\<in> verts G \\<Longrightarrow> is_shortest_path G n n [n]\"", "lemma int_pts_singleton [rewrite]: \"int_pts [x] = {}\"", "lemma int_pts_doubleton [rewrite]: \"int_pts [x, y] = {x}\"", "lemma path_set_on_mem [rewrite]:\n  \"p \\<in> path_set_on G m n V \\<longleftrightarrow> p \\<in> path_set G m n \\<and> int_pts p \\<subseteq> V\"", "lemma is_shortest_path_onD1 [forward]:\n  \"is_shortest_path_on G m n p V \\<Longrightarrow> p \\<in> path_set_on G m n V\"", "lemma is_shortest_path_onD2 [forward]:\n  \"is_shortest_path_on G m n p V \\<Longrightarrow> p' \\<in> path_set_on G m n V \\<Longrightarrow> path_weight G p' \\<ge> path_weight G p\"", "lemma has_dist_onI [forward]: \"is_shortest_path_on G m n p V \\<Longrightarrow> has_dist_on G m n V\"", "lemma has_dist_onD [resolve]: \"has_dist_on G m n V \\<Longrightarrow> \\<exists>p. is_shortest_path_on G m n p V\"", "lemma dist_on_eq [rewrite]:\n  \"is_shortest_path_on G m n p V \\<Longrightarrow> dist_on G m n V = path_weight G p\"", "lemma dist_onD [forward]:\n  \"has_dist_on G m n V \\<Longrightarrow> p \\<in> path_set_on G m n V \\<Longrightarrow> path_weight G p \\<ge> dist_on G m n V\"", "lemma path_split1 [backward]: \"is_path G p \\<Longrightarrow> hd p \\<in> V \\<Longrightarrow> last p \\<notin> V \\<Longrightarrow>\n  \\<exists>p1 p2. joinable G p1 p2 \\<and> p = path_join G p1 p2 \\<and> int_pts p1 \\<subseteq> V \\<and> hd p2 \\<notin> V\"", "lemma path_split2 [backward]: \"is_path G p \\<Longrightarrow> hd p \\<noteq> last p \\<Longrightarrow>\n  \\<exists>q n. joinable G q [n, last p] \\<and> p = path_join G q [n, last p]\"", "lemma derive_dist [backward2]:\n  \"known_dists G V \\<Longrightarrow>\n   m \\<in> verts G - V \\<Longrightarrow>\n   \\<forall>i\\<in>verts G - V. dist_on G 0 i V \\<ge> dist_on G 0 m V \\<Longrightarrow>\n   has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V\"", "lemma join_def' [resolve]: \"joinable G p q \\<Longrightarrow> path_join G p q = butlast p @ q\"", "lemma int_pts_join [rewrite]:\n  \"joinable G p q \\<Longrightarrow> int_pts (path_join G p q) = int_pts p \\<union> int_pts q\"", "lemma dist_on_triangle_ineq [backward]:\n  \"has_dist_on G k m V \\<Longrightarrow> has_dist_on G k n V \\<Longrightarrow> V \\<subseteq> verts G \\<Longrightarrow> n \\<in> verts G \\<Longrightarrow> m \\<in> V \\<Longrightarrow>\n   dist_on G k m V + weight G m n \\<ge> dist_on G k n V\"", "lemma derive_dist_on [backward2]:\n  \"known_dists G V \\<Longrightarrow>\n   m \\<in> verts G - V \\<Longrightarrow>\n   \\<forall>i\\<in>verts G - V. dist_on G 0 i V \\<ge> dist_on G 0 m V \\<Longrightarrow>\n   V' = V \\<union> {m} \\<Longrightarrow>\n   n \\<in> verts G - V' \\<Longrightarrow>\n   has_dist_on G 0 n V' \\<and> dist_on G 0 n V' = min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)\"", "lemma invE1 [forward]: \"inv G S \\<Longrightarrow> length (est S) = size G \\<and> known_dists G (known_set S) \\<and> unknown_set S \\<subseteq> verts G\"", "lemma invE2 [forward]: \"inv G S \\<Longrightarrow> i \\<in> known_set S \\<Longrightarrow> est S ! i = dist G 0 i\"", "lemma invE3 [forward]: \"inv G S \\<Longrightarrow> i \\<in> verts G \\<Longrightarrow> est S ! i = dist_on G 0 i (known_set S)\"", "lemma invE4 [rewrite]: \"inv G S \\<Longrightarrow> i \\<in> unknown_set S \\<Longrightarrow> (heap S)\\<langle>i\\<rangle> = Some (est S ! i)\"", "lemma inv_unknown_set [rewrite]:\n  \"inv G S \\<Longrightarrow> unknown_set S = verts G - known_set S\"", "lemma dijkstra_end_inv [forward]:\n  \"inv G S \\<Longrightarrow> unknown_set S = {} \\<Longrightarrow> \\<forall>i\\<in>verts G. has_dist G 0 i \\<and> est S ! i = dist G 0 i\"", "lemma dijkstra_start_known_set [rewrite]:\n  \"size G > 0 \\<Longrightarrow> known_set (dijkstra_start_state G) = {0}\"", "lemma dijkstra_start_unknown_set [rewrite]:\n  \"size G > 0 \\<Longrightarrow> unknown_set (dijkstra_start_state G) = verts G - {0}\"", "lemma card_start_state [rewrite]:\n  \"size G > 0 \\<Longrightarrow> card (unknown_set (dijkstra_start_state G)) = size G - 1\"", "theorem dijkstra_start_inv [backward]:\n  \"size G > 0 \\<Longrightarrow> inv G (dijkstra_start_state G)\"", "lemma has_dist_on_larger [backward1]:\n  \"has_dist G m n \\<Longrightarrow> has_dist_on G m n V \\<Longrightarrow> dist_on G m n V = dist G m n \\<Longrightarrow>\n   has_dist_on G m n (V \\<union> {x}) \\<and> dist_on G m n (V \\<union> {x}) = dist G m n\"", "lemma dijkstra_step_unknown_set [rewrite]:\n  \"inv G S \\<Longrightarrow> m \\<in> unknown_set S \\<Longrightarrow> unknown_set (dijkstra_step G m S) = unknown_set S - {m}\"", "lemma dijkstra_step_known_set [rewrite]:\n  \"inv G S \\<Longrightarrow> m \\<in> unknown_set S \\<Longrightarrow> known_set (dijkstra_step G m S) = known_set S \\<union> {m}\"", "theorem dijkstra_step_preserves_inv [backward]:\n  \"inv G S \\<Longrightarrow> is_heap_min m (heap S) \\<Longrightarrow> inv G (dijkstra_step G m S)\"", "lemma is_dijkstra_stepI [backward2]:\n  \"is_heap_min m (heap S) \\<Longrightarrow> dijkstra_step G m S = S' \\<Longrightarrow> is_dijkstra_step G S S'\"", "lemma is_dijkstra_stepD1 [forward]:\n  \"inv G S \\<Longrightarrow> is_dijkstra_step G S S' \\<Longrightarrow> inv G S'\"", "lemma is_dijkstra_stepD2 [forward]:\n  \"inv G S \\<Longrightarrow> is_dijkstra_step G S S' \\<Longrightarrow> card (unknown_set S') = card (unknown_set S) - 1\""], "translations": [["", "lemma verts_mem [rewrite]: \"i \\<in> verts G \\<longleftrightarrow> i < size G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i \\<in> verts G) = (i < Dijkstra.size G)", "by (simp add: verts_def)"], ["", "lemma card_verts [rewrite]: \"card (verts G) = size G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (verts G) = Dijkstra.size G", "using verts_def"], ["proof (prove)\nusing this:\n  verts ?G = {i. i < Dijkstra.size ?G}\n\ngoal (1 subgoal):\n 1. card (verts G) = Dijkstra.size G", "by auto"], ["", "lemma finite_verts [forward]: \"finite (verts G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (verts G)", "using verts_def"], ["proof (prove)\nusing this:\n  verts ?G = {i. i < Dijkstra.size ?G}\n\ngoal (1 subgoal):\n 1. finite (verts G)", "by auto"], ["", "definition is_path :: \"graph \\<Rightarrow> nat list \\<Rightarrow> bool\" where [rewrite]:\n  \"is_path G p \\<longleftrightarrow> p \\<noteq> [] \\<and> set p \\<subseteq> verts G\""], ["", "lemma is_path_to_in_verts [forward]: \"is_path G p \\<Longrightarrow> hd p \\<in> verts G \\<and> last p \\<in> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path G p \\<Longrightarrow>\n    hd p \\<in> verts G \\<and> last p \\<in> verts G", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path G p \\<Longrightarrow>\n    hd p \\<in> verts G \\<and> last p \\<in> verts G", "@have \"last p \\<in> set p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path G p \\<Longrightarrow>\n    hd p \\<in> verts G \\<and> last p \\<in> verts G", "@qed"], ["", "definition joinable :: \"graph \\<Rightarrow> nat list \\<Rightarrow> nat list \\<Rightarrow> bool\" where [rewrite]:\n  \"joinable G p q \\<longleftrightarrow> (is_path G p \\<and> is_path G q \\<and> last p = hd q)\""], ["", "definition path_join :: \"graph \\<Rightarrow> nat list \\<Rightarrow> nat list \\<Rightarrow> nat list\" where [rewrite]:\n  \"path_join G p q = p @ tl q\""], ["", "setup \\<open>register_wellform_data (\"path_join G p q\", [\"joinable G p q\"])\\<close>"], ["", "setup \\<open>add_prfstep_check_req (\"path_join G p q\", \"joinable G p q\")\\<close>"], ["", "lemma path_join_is_path:\n  \"joinable G p q \\<Longrightarrow> is_path G (path_join G p q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow> is_path G (path_join G p q)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow> is_path G (path_join G p q)", "@have \"q = hd q # tl q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow> is_path G (path_join G p q)", "@qed"], ["", "setup \\<open>add_forward_prfstep_cond @{thm path_join_is_path} [with_term \"path_join ?G ?p ?q\"]\\<close>"], ["", "fun path_weight :: \"graph \\<Rightarrow> nat list \\<Rightarrow> nat\" where\n  \"path_weight G [] = 0\"\n| \"path_weight G (x # xs) = (if xs = [] then 0 else weight G x (hd xs) + path_weight G xs)\""], ["", "setup \\<open>fold add_rewrite_rule @{thms path_weight.simps}\\<close>"], ["", "lemma path_weight_singleton [rewrite]: \"path_weight G [x] = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_weight G [x] = 0", "by auto2"], ["", "lemma path_weight_doubleton [rewrite]: \"path_weight G [m, n] = weight G m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_weight G [m, n] = weight G m n", "by auto2"], ["", "lemma path_weight_sum [rewrite]:\n  \"joinable G p q \\<Longrightarrow> path_weight G (path_join G p q) = path_weight G p + path_weight G q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow>\n    path_weight G (path_join G p q) = path_weight G p + path_weight G q", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow>\n    path_weight G (path_join G p q) = path_weight G p + path_weight G q", "@induct p"], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow>\n    path_weight G (path_join G p q) = path_weight G p + path_weight G q", "@qed"], ["", "fun path_set :: \"graph \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat list set\" where\n  \"path_set G m n = {p. is_path G p \\<and> hd p = m \\<and> last p = n}\""], ["", "lemma path_set_mem [rewrite]:\n  \"p \\<in> path_set G m n \\<longleftrightarrow> is_path G p \\<and> hd p = m \\<and> last p = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<in> path_set G m n) =\n    (is_path G p \\<and> hd p = m \\<and> last p = n)", "by simp"], ["", "lemma path_join_set: \"joinable G p q \\<Longrightarrow> path_join G p q \\<in> path_set G (hd p) (last q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow>\n    path_join G p q \\<in> path_set G (hd p) (last q)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow>\n    path_join G p q \\<in> path_set G (hd p) (last q)", "@have \"q = hd q # tl q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow>\n    path_join G p q \\<in> path_set G (hd p) (last q)", "@case \"tl q = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow>\n    path_join G p q \\<in> path_set G (hd p) (last q)", "@qed"], ["", "setup \\<open>add_forward_prfstep_cond @{thm path_join_set} [with_term \"path_join ?G ?p ?q\"]\\<close>"], ["", "subsection \\<open>Shortest paths\\<close>"], ["", "definition is_shortest_path :: \"graph \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat list \\<Rightarrow> bool\" where [rewrite]:\n  \"is_shortest_path G m n p \\<longleftrightarrow>\n     (p \\<in> path_set G m n \\<and> (\\<forall>p'\\<in>path_set G m n. path_weight G p' \\<ge> path_weight G p))\""], ["", "lemma is_shortest_pathD1 [forward]:\n  \"is_shortest_path G m n p \\<Longrightarrow> p \\<in> path_set G m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_shortest_path G m n p \\<Longrightarrow> p \\<in> path_set G m n", "by auto2"], ["", "lemma is_shortest_pathD2 [forward]:\n  \"is_shortest_path G m n p \\<Longrightarrow> p' \\<in> path_set G m n \\<Longrightarrow> path_weight G p' \\<ge> path_weight G p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_shortest_path G m n p; p' \\<in> path_set G m n\\<rbrakk>\n    \\<Longrightarrow> path_weight G p \\<le> path_weight G p'", "by auto2"], ["", "setup \\<open>del_prfstep_thm_eqforward @{thm is_shortest_path_def}\\<close>"], ["", "definition has_dist :: \"graph \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> bool\" where [rewrite]:\n  \"has_dist G m n \\<longleftrightarrow> (\\<exists>p. is_shortest_path G m n p)\""], ["", "lemma has_distI [forward]: \"is_shortest_path G m n p \\<Longrightarrow> has_dist G m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_shortest_path G m n p \\<Longrightarrow> has_dist G m n", "by auto2"], ["", "lemma has_distD [resolve]: \"has_dist G m n \\<Longrightarrow> \\<exists>p. is_shortest_path G m n p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. has_dist G m n \\<Longrightarrow> \\<exists>p. is_shortest_path G m n p", "by auto2"], ["", "lemma has_dist_to_in_verts [forward]: \"has_dist G u v \\<Longrightarrow> u \\<in> verts G \\<and> v \\<in> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. has_dist G u v \\<Longrightarrow> u \\<in> verts G \\<and> v \\<in> verts G", "by auto2"], ["", "setup \\<open>del_prfstep_thm @{thm has_dist_def}\\<close>"], ["", "definition dist :: \"graph \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat\" where [rewrite]:\n  \"dist G m n = path_weight G (SOME p. is_shortest_path G m n p)\""], ["", "setup \\<open>register_wellform_data (\"dist G m n\", [\"has_dist G m n\"])\\<close>"], ["", "lemma dist_eq [rewrite]:\n  \"is_shortest_path G m n p \\<Longrightarrow> dist G m n = path_weight G p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_shortest_path G m n p \\<Longrightarrow> dist G m n = path_weight G p", "by auto2"], ["", "lemma distD [forward]:\n  \"has_dist G m n \\<Longrightarrow> p \\<in> path_set G m n \\<Longrightarrow> path_weight G p \\<ge> dist G m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist G m n; p \\<in> path_set G m n\\<rbrakk>\n    \\<Longrightarrow> dist G m n \\<le> path_weight G p", "by auto2"], ["", "setup \\<open>del_prfstep_thm @{thm dist_def}\\<close>"], ["", "lemma shortest_init [resolve]: \"n \\<in> verts G \\<Longrightarrow> is_shortest_path G n n [n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> verts G \\<Longrightarrow> is_shortest_path G n n [n]", "by auto2"], ["", "subsection \\<open>Interior points\\<close>"], ["", "text \\<open>List of interior points\\<close>"], ["", "definition int_pts :: \"nat list \\<Rightarrow> nat set\" where [rewrite]:\n  \"int_pts p = set (butlast p)\""], ["", "lemma int_pts_singleton [rewrite]: \"int_pts [x] = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int_pts [x] = {}", "by auto2"], ["", "lemma int_pts_doubleton [rewrite]: \"int_pts [x, y] = {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int_pts [x, y] = {x}", "by auto2"], ["", "definition path_set_on :: \"graph \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat set \\<Rightarrow> nat list set\" where\n  \"path_set_on G m n V = {p. p \\<in> path_set G m n \\<and> int_pts p \\<subseteq> V}\""], ["", "lemma path_set_on_mem [rewrite]:\n  \"p \\<in> path_set_on G m n V \\<longleftrightarrow> p \\<in> path_set G m n \\<and> int_pts p \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<in> path_set_on G m n V) =\n    (p \\<in> path_set G m n \\<and> int_pts p \\<subseteq> V)", "by (simp add: path_set_on_def)"], ["", "text \\<open>Version of shortest path on a set of points\\<close>"], ["", "definition is_shortest_path_on :: \"graph \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat list \\<Rightarrow> nat set \\<Rightarrow> bool\" where [rewrite]:\n  \"is_shortest_path_on G m n p V \\<longleftrightarrow>\n    (p \\<in> path_set_on G m n V \\<and> (\\<forall>p'\\<in>path_set_on G m n V. path_weight G p' \\<ge> path_weight G p))\""], ["", "lemma is_shortest_path_onD1 [forward]:\n  \"is_shortest_path_on G m n p V \\<Longrightarrow> p \\<in> path_set_on G m n V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_shortest_path_on G m n p V \\<Longrightarrow>\n    p \\<in> path_set_on G m n V", "by auto2"], ["", "lemma is_shortest_path_onD2 [forward]:\n  \"is_shortest_path_on G m n p V \\<Longrightarrow> p' \\<in> path_set_on G m n V \\<Longrightarrow> path_weight G p' \\<ge> path_weight G p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_shortest_path_on G m n p V;\n     p' \\<in> path_set_on G m n V\\<rbrakk>\n    \\<Longrightarrow> path_weight G p \\<le> path_weight G p'", "by auto2"], ["", "setup \\<open>del_prfstep_thm_eqforward @{thm is_shortest_path_on_def}\\<close>"], ["", "definition has_dist_on :: \"graph \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat set \\<Rightarrow> bool\" where [rewrite]:\n  \"has_dist_on G m n V \\<longleftrightarrow> (\\<exists>p. is_shortest_path_on G m n p V)\""], ["", "lemma has_dist_onI [forward]: \"is_shortest_path_on G m n p V \\<Longrightarrow> has_dist_on G m n V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_shortest_path_on G m n p V \\<Longrightarrow> has_dist_on G m n V", "by auto2"], ["", "lemma has_dist_onD [resolve]: \"has_dist_on G m n V \\<Longrightarrow> \\<exists>p. is_shortest_path_on G m n p V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. has_dist_on G m n V \\<Longrightarrow>\n    \\<exists>p. is_shortest_path_on G m n p V", "by auto2"], ["", "setup \\<open>del_prfstep_thm @{thm has_dist_on_def}\\<close>"], ["", "definition dist_on :: \"graph \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat set \\<Rightarrow> nat\" where [rewrite]:\n  \"dist_on G m n V = path_weight G (SOME p. is_shortest_path_on G m n p V)\""], ["", "setup \\<open>register_wellform_data (\"dist_on G m n V\", [\"has_dist_on G m n V\"])\\<close>"], ["", "lemma dist_on_eq [rewrite]:\n  \"is_shortest_path_on G m n p V \\<Longrightarrow> dist_on G m n V = path_weight G p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_shortest_path_on G m n p V \\<Longrightarrow>\n    dist_on G m n V = path_weight G p", "by auto2"], ["", "lemma dist_onD [forward]:\n  \"has_dist_on G m n V \\<Longrightarrow> p \\<in> path_set_on G m n V \\<Longrightarrow> path_weight G p \\<ge> dist_on G m n V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist_on G m n V; p \\<in> path_set_on G m n V\\<rbrakk>\n    \\<Longrightarrow> dist_on G m n V \\<le> path_weight G p", "by auto2"], ["", "setup \\<open>del_prfstep_thm @{thm dist_on_def}\\<close>"], ["", "subsection \\<open>Two splitting lemmas\\<close>"], ["", "lemma path_split1 [backward]: \"is_path G p \\<Longrightarrow> hd p \\<in> V \\<Longrightarrow> last p \\<notin> V \\<Longrightarrow>\n  \\<exists>p1 p2. joinable G p1 p2 \\<and> p = path_join G p1 p2 \\<and> int_pts p1 \\<subseteq> V \\<and> hd p2 \\<notin> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<in> V; last p \\<notin> V\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p1 p2.\n                         joinable G p1 p2 \\<and>\n                         p = path_join G p1 p2 \\<and>\n                         int_pts p1 \\<subseteq> V \\<and> hd p2 \\<notin> V", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<in> V; last p \\<notin> V\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p1 p2.\n                         joinable G p1 p2 \\<and>\n                         p = path_join G p1 p2 \\<and>\n                         int_pts p1 \\<subseteq> V \\<and> hd p2 \\<notin> V", "@induct p @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<in> V; last p \\<notin> V\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p1 p2.\n                         joinable G p1 p2 \\<and>\n                         p = path_join G p1 p2 \\<and>\n                         int_pts p1 \\<subseteq> V \\<and> hd p2 \\<notin> V", "@subgoal \"p = a # p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<in> V; last p \\<notin> V\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p1 p2.\n                         joinable G p1 p2 \\<and>\n                         p = path_join G p1 p2 \\<and>\n                         int_pts p1 \\<subseteq> V \\<and> hd p2 \\<notin> V", "@let \"p = a # p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<in> V; last p \\<notin> V\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p1 p2.\n                         joinable G p1 p2 \\<and>\n                         p = path_join G p1 p2 \\<and>\n                         int_pts p1 \\<subseteq> V \\<and> hd p2 \\<notin> V", "@case \"p' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<in> V; last p \\<notin> V\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p1 p2.\n                         joinable G p1 p2 \\<and>\n                         p = path_join G p1 p2 \\<and>\n                         int_pts p1 \\<subseteq> V \\<and> hd p2 \\<notin> V", "@case \"hd p' \\<notin> V\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<in> V; last p \\<notin> V\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p1 p2.\n                         joinable G p1 p2 \\<and>\n                         p = path_join G p1 p2 \\<and>\n                         int_pts p1 \\<subseteq> V \\<and> hd p2 \\<notin> V", "@have \"p = path_join G [a, hd p'] p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<in> V; last p \\<notin> V\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p1 p2.\n                         joinable G p1 p2 \\<and>\n                         p = path_join G p1 p2 \\<and>\n                         int_pts p1 \\<subseteq> V \\<and> hd p2 \\<notin> V", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<in> V; last p \\<notin> V\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p1 p2.\n                         joinable G p1 p2 \\<and>\n                         p = path_join G p1 p2 \\<and>\n                         int_pts p1 \\<subseteq> V \\<and> hd p2 \\<notin> V", "@obtain p1 p2 where \"joinable G p1 p2\" \"p' = path_join G p1 p2\" \"int_pts p1 \\<subseteq> V\" \"hd p2 \\<notin> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<in> V; last p \\<notin> V\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p1 p2.\n                         joinable G p1 p2 \\<and>\n                         p = path_join G p1 p2 \\<and>\n                         int_pts p1 \\<subseteq> V \\<and> hd p2 \\<notin> V", "@have \"p = path_join G (a # p1) p2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<in> V; last p \\<notin> V\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p1 p2.\n                         joinable G p1 p2 \\<and>\n                         p = path_join G p1 p2 \\<and>\n                         int_pts p1 \\<subseteq> V \\<and> hd p2 \\<notin> V", "@endgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<in> V; last p \\<notin> V\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p1 p2.\n                         joinable G p1 p2 \\<and>\n                         p = path_join G p1 p2 \\<and>\n                         int_pts p1 \\<subseteq> V \\<and> hd p2 \\<notin> V", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<in> V; last p \\<notin> V\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p1 p2.\n                         joinable G p1 p2 \\<and>\n                         p = path_join G p1 p2 \\<and>\n                         int_pts p1 \\<subseteq> V \\<and> hd p2 \\<notin> V", "@qed"], ["", "lemma path_split2 [backward]: \"is_path G p \\<Longrightarrow> hd p \\<noteq> last p \\<Longrightarrow>\n  \\<exists>q n. joinable G q [n, last p] \\<and> p = path_join G q [n, last p]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<noteq> last p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q n.\n                         joinable G q [n, last p] \\<and>\n                         p = path_join G q [n, last p]", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<noteq> last p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q n.\n                         joinable G q [n, last p] \\<and>\n                         p = path_join G q [n, last p]", "@have \"p = butlast p @ [last p]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<noteq> last p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q n.\n                         joinable G q [n, last p] \\<and>\n                         p = path_join G q [n, last p]", "@have \"butlast p \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<noteq> last p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q n.\n                         joinable G q [n, last p] \\<and>\n                         p = path_join G q [n, last p]", "@let \"n = last (butlast p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<noteq> last p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q n.\n                         joinable G q [n, last p] \\<and>\n                         p = path_join G q [n, last p]", "@have \"p = path_join G (butlast p) [n, last p]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path G p; hd p \\<noteq> last p\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q n.\n                         joinable G q [n, last p] \\<and>\n                         p = path_join G q [n, last p]", "@qed"], ["", "subsection \\<open>Deriving has\\_dist and has\\_dist\\_on\\<close>"], ["", "definition known_dists :: \"graph \\<Rightarrow> nat set \\<Rightarrow> bool\" where [rewrite]:\n  \"known_dists G V \\<longleftrightarrow> (V \\<subseteq> verts G \\<and> 0 \\<in> V \\<and>\n      (\\<forall>i\\<in>verts G. has_dist_on G 0 i V) \\<and>\n      (\\<forall>i\\<in>V. has_dist G 0 i \\<and> dist G 0 i = dist_on G 0 i V))\""], ["", "lemma derive_dist [backward2]:\n  \"known_dists G V \\<Longrightarrow>\n   m \\<in> verts G - V \\<Longrightarrow>\n   \\<forall>i\\<in>verts G - V. dist_on G 0 i V \\<ge> dist_on G 0 m V \\<Longrightarrow>\n   has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V.\n        dist_on G 0 m V \\<le> dist_on G 0 i V\\<rbrakk>\n    \\<Longrightarrow> has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V.\n        dist_on G 0 m V \\<le> dist_on G 0 i V\\<rbrakk>\n    \\<Longrightarrow> has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V", "@obtain p where \"is_shortest_path_on G 0 m p V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V.\n        dist_on G 0 m V \\<le> dist_on G 0 i V\\<rbrakk>\n    \\<Longrightarrow> has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V", "@have \"is_shortest_path G 0 m p\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V.\n        dist_on G 0 m V \\<le> dist_on G 0 i V\\<rbrakk>\n    \\<Longrightarrow> has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V", "@have \"p \\<in> path_set G 0 m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V.\n        dist_on G 0 m V \\<le> dist_on G 0 i V\\<rbrakk>\n    \\<Longrightarrow> has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V", "@have \"\\<forall>p'\\<in>path_set G 0 m. path_weight G p' \\<ge> path_weight G p\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V.\n        dist_on G 0 m V \\<le> dist_on G 0 i V\\<rbrakk>\n    \\<Longrightarrow> has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V", "@obtain p1 p2 where \"joinable G p1 p2\" \"p' = path_join G p1 p2\"\n                          \"int_pts p1 \\<subseteq> V\" \"hd p2 \\<notin> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V.\n        dist_on G 0 m V \\<le> dist_on G 0 i V\\<rbrakk>\n    \\<Longrightarrow> has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V", "@let \"x = last p1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V.\n        dist_on G 0 m V \\<le> dist_on G 0 i V\\<rbrakk>\n    \\<Longrightarrow> has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V", "@have \"dist_on G 0 x V \\<ge> dist_on G 0 m V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V.\n        dist_on G 0 m V \\<le> dist_on G 0 i V\\<rbrakk>\n    \\<Longrightarrow> has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V", "@have \"p1 \\<in> path_set_on G 0 x V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V.\n        dist_on G 0 m V \\<le> dist_on G 0 i V\\<rbrakk>\n    \\<Longrightarrow> has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V", "@have \"path_weight G p1 \\<ge> dist_on G 0 x V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V.\n        dist_on G 0 m V \\<le> dist_on G 0 i V\\<rbrakk>\n    \\<Longrightarrow> has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V", "@have \"path_weight G p' \\<ge> dist_on G 0 m V + path_weight G p2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V.\n        dist_on G 0 m V \\<le> dist_on G 0 i V\\<rbrakk>\n    \\<Longrightarrow> has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V.\n        dist_on G 0 m V \\<le> dist_on G 0 i V\\<rbrakk>\n    \\<Longrightarrow> has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V.\n        dist_on G 0 m V \\<le> dist_on G 0 i V\\<rbrakk>\n    \\<Longrightarrow> has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V", "@qed"], ["", "lemma join_def' [resolve]: \"joinable G p q \\<Longrightarrow> path_join G p q = butlast p @ q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow> path_join G p q = butlast p @ q", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow> path_join G p q = butlast p @ q", "@have \"p = butlast p @ [last p]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow> path_join G p q = butlast p @ q", "@have \"path_join G p q = butlast p @ [last p] @ tl q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow> path_join G p q = butlast p @ q", "@qed"], ["", "lemma int_pts_join [rewrite]:\n  \"joinable G p q \\<Longrightarrow> int_pts (path_join G p q) = int_pts p \\<union> int_pts q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow>\n    int_pts (path_join G p q) = int_pts p \\<union> int_pts q", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow>\n    int_pts (path_join G p q) = int_pts p \\<union> int_pts q", "@have \"path_join G p q = butlast p @ q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. joinable G p q \\<Longrightarrow>\n    int_pts (path_join G p q) = int_pts p \\<union> int_pts q", "@qed"], ["", "lemma dist_on_triangle_ineq [backward]:\n  \"has_dist_on G k m V \\<Longrightarrow> has_dist_on G k n V \\<Longrightarrow> V \\<subseteq> verts G \\<Longrightarrow> n \\<in> verts G \\<Longrightarrow> m \\<in> V \\<Longrightarrow>\n   dist_on G k m V + weight G m n \\<ge> dist_on G k n V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist_on G k m V; has_dist_on G k n V;\n     V \\<subseteq> verts G; n \\<in> verts G; m \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dist_on G k n V \\<le> dist_on G k m V + weight G m n", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist_on G k m V; has_dist_on G k n V;\n     V \\<subseteq> verts G; n \\<in> verts G; m \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dist_on G k n V \\<le> dist_on G k m V + weight G m n", "@obtain p where \"is_shortest_path_on G k m p V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist_on G k m V; has_dist_on G k n V;\n     V \\<subseteq> verts G; n \\<in> verts G; m \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dist_on G k n V \\<le> dist_on G k m V + weight G m n", "@let \"pq = path_join G p [m, n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist_on G k m V; has_dist_on G k n V;\n     V \\<subseteq> verts G; n \\<in> verts G; m \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dist_on G k n V \\<le> dist_on G k m V + weight G m n", "@have \"V \\<union> {m} = V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist_on G k m V; has_dist_on G k n V;\n     V \\<subseteq> verts G; n \\<in> verts G; m \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dist_on G k n V \\<le> dist_on G k m V + weight G m n", "@have \"pq \\<in> path_set_on G k n V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist_on G k m V; has_dist_on G k n V;\n     V \\<subseteq> verts G; n \\<in> verts G; m \\<in> V\\<rbrakk>\n    \\<Longrightarrow> dist_on G k n V \\<le> dist_on G k m V + weight G m n", "@qed"], ["", "lemma derive_dist_on [backward2]:\n  \"known_dists G V \\<Longrightarrow>\n   m \\<in> verts G - V \\<Longrightarrow>\n   \\<forall>i\\<in>verts G - V. dist_on G 0 i V \\<ge> dist_on G 0 m V \\<Longrightarrow>\n   V' = V \\<union> {m} \\<Longrightarrow>\n   n \\<in> verts G - V' \\<Longrightarrow>\n   has_dist_on G 0 n V' \\<and> dist_on G 0 n V' = min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@let \"M = min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"\\<forall>p\\<in>path_set_on G 0 n V'. path_weight G p \\<ge> M\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@obtain q n' where \"joinable G q [n', n]\" \"p = path_join G q [n', n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"q \\<in> path_set G 0 n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"n' \\<in> V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@case \"n' \\<in> V\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"dist_on G 0 n' V = dist G 0 n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"path_weight G q \\<ge> dist_on G 0 n' V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"path_weight G p \\<ge> dist_on G 0 n' V + weight G n' n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"dist_on G 0 n' V + weight G n' n \\<ge> dist_on G 0 n V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"n' = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"path_weight G q \\<ge> dist G 0 m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"path_weight G p \\<ge> dist G 0 m + weight G m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@case \"dist_on G 0 m V + weight G m n \\<ge> dist_on G 0 n V\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@obtain p where \"is_shortest_path_on G 0 n p V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"is_shortest_path_on G 0 n p V'\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"p \\<in> path_set_on G 0 n V'\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"V \\<subseteq> V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"M = dist_on G 0 m V + weight G m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@obtain pm where \"is_shortest_path_on G 0 m pm V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"path_weight G pm = dist G 0 m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@let \"p = path_join G pm [m, n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"joinable G pm [m, n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"path_weight G p = path_weight G pm + weight G m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@have \"is_shortest_path_on G 0 n p V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>known_dists G V; m \\<in> verts G - V;\n     \\<forall>i\\<in>verts G - V. dist_on G 0 m V \\<le> dist_on G 0 i V;\n     V' = V \\<union> {m}; n \\<in> verts G - V'\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G 0 n V' \\<and>\n                      dist_on G 0 n V' =\n                      min (dist_on G 0 n V) (dist_on G 0 m V + weight G m n)", "@qed"], ["", "subsection \\<open>Invariant for the Dijkstra's algorithm\\<close>"], ["", "text \\<open>The state consists of an array maintaining the best estimates,\n  and a heap containing estimates for the unknown vertices.\\<close>"], ["", "datatype state = State (est: \"nat list\") (heap: \"(nat, nat) map\")"], ["", "setup \\<open>add_simple_datatype \"state\"\\<close>"], ["", "definition unknown_set :: \"state \\<Rightarrow> nat set\" where [rewrite]:\n  \"unknown_set S = keys_of (heap S)\""], ["", "definition known_set :: \"state \\<Rightarrow> nat set\" where [rewrite]:\n  \"known_set S = {..<length (est S)} - unknown_set S\""], ["", "text \\<open>Invariant: for every vertex, the estimate is at least the shortest distance.\n  Furthermore, for the known vertices the estimate is exact.\\<close>"], ["", "definition inv :: \"graph \\<Rightarrow> state \\<Rightarrow> bool\" where [rewrite]:\n  \"inv G S \\<longleftrightarrow> (let V = known_set S; W = unknown_set S; M = heap S in\n      (length (est S) = size G \\<and> known_dists G V \\<and>\n      keys_of M \\<subseteq> verts G \\<and>\n      (\\<forall>i\\<in>W. M\\<langle>i\\<rangle> = Some (est S ! i)) \\<and>\n      (\\<forall>i\\<in>V. est S ! i = dist G 0 i) \\<and>\n      (\\<forall>i\\<in>verts G. est S ! i = dist_on G 0 i V)))\""], ["", "lemma invE1 [forward]: \"inv G S \\<Longrightarrow> length (est S) = size G \\<and> known_dists G (known_set S) \\<and> unknown_set S \\<subseteq> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dijkstra.inv G S \\<Longrightarrow>\n    length (est S) = Dijkstra.size G \\<and>\n    known_dists G (known_set S) \\<and> unknown_set S \\<subseteq> verts G", "by auto2"], ["", "lemma invE2 [forward]: \"inv G S \\<Longrightarrow> i \\<in> known_set S \\<Longrightarrow> est S ! i = dist G 0 i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; i \\<in> known_set S\\<rbrakk>\n    \\<Longrightarrow> est S ! i = dist G 0 i", "by auto2"], ["", "lemma invE3 [forward]: \"inv G S \\<Longrightarrow> i \\<in> verts G \\<Longrightarrow> est S ! i = dist_on G 0 i (known_set S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; i \\<in> verts G\\<rbrakk>\n    \\<Longrightarrow> est S ! i = dist_on G 0 i (known_set S)", "by auto2"], ["", "lemma invE4 [rewrite]: \"inv G S \\<Longrightarrow> i \\<in> unknown_set S \\<Longrightarrow> (heap S)\\<langle>i\\<rangle> = Some (est S ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; i \\<in> unknown_set S\\<rbrakk>\n    \\<Longrightarrow> heap S\\<langle>i\\<rangle> = Some (est S ! i)", "by auto2"], ["", "setup \\<open>del_prfstep_thm_str \"@eqforward\" @{thm inv_def}\\<close>"], ["", "lemma inv_unknown_set [rewrite]:\n  \"inv G S \\<Longrightarrow> unknown_set S = verts G - known_set S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dijkstra.inv G S \\<Longrightarrow> unknown_set S = verts G - known_set S", "by auto2"], ["", "lemma dijkstra_end_inv [forward]:\n  \"inv G S \\<Longrightarrow> unknown_set S = {} \\<Longrightarrow> \\<forall>i\\<in>verts G. has_dist G 0 i \\<and> est S ! i = dist G 0 i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; unknown_set S = {}\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<in>verts G.\n                         has_dist G 0 i \\<and> est S ! i = dist G 0 i", "by auto2"], ["", "subsection \\<open>Starting state\\<close>"], ["", "definition dijkstra_start_state :: \"graph \\<Rightarrow> state\" where [rewrite]:\n  \"dijkstra_start_state G =\n     State (list (\\<lambda>i. if i = 0 then 0 else weight G 0 i) (size G))\n           (map_constr (\\<lambda>i. i > 0) (\\<lambda>i. weight G 0 i) (size G))\""], ["", "setup \\<open>register_wellform_data (\"dijkstra_start_state G\", [\"size G > 0\"])\\<close>"], ["", "lemma dijkstra_start_known_set [rewrite]:\n  \"size G > 0 \\<Longrightarrow> known_set (dijkstra_start_state G) = {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    known_set (dijkstra_start_state G) = {0}", "by auto2"], ["", "lemma dijkstra_start_unknown_set [rewrite]:\n  \"size G > 0 \\<Longrightarrow> unknown_set (dijkstra_start_state G) = verts G - {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    unknown_set (dijkstra_start_state G) = verts G - {0}", "by auto2"], ["", "lemma card_start_state [rewrite]:\n  \"size G > 0 \\<Longrightarrow> card (unknown_set (dijkstra_start_state G)) = size G - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    card (unknown_set (dijkstra_start_state G)) = Dijkstra.size G - 1", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    card (unknown_set (dijkstra_start_state G)) = Dijkstra.size G - 1", "@have \"0 \\<in> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    card (unknown_set (dijkstra_start_state G)) = Dijkstra.size G - 1", "@qed"], ["", "text \\<open>Starting start of Dijkstra's algorithm satisfies the invariant.\\<close>"], ["", "theorem dijkstra_start_inv [backward]:\n  \"size G > 0 \\<Longrightarrow> inv G (dijkstra_start_state G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@let \"V = {0::nat}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@have \"has_dist G 0 0 \\<and> dist G 0 0 = 0\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@have \"is_shortest_path G 0 0 [0]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@have \"has_dist_on G 0 0 V \\<and> dist_on G 0 0 V = 0\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@have \"is_shortest_path_on G 0 0 [0] V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@have \"V \\<subseteq> verts G \\<and> 0 \\<in> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@have (@rule) \"\\<forall>i\\<in>verts G. i \\<noteq> 0 \\<longrightarrow> has_dist_on G 0 i V \\<and> dist_on G 0 i V = weight G 0 i\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@let \"p = [0, i]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@have \"is_shortest_path_on G 0 i p V\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@have \"p \\<in> path_set_on G 0 i V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@have \"\\<forall>p'\\<in>path_set_on G 0 i V. path_weight G p' \\<ge> weight G 0 i\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@obtain q n where \"joinable G q [n, last p']\" \"p' = path_join G q [n, last p']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@have \"n \\<in> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@have \"n = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@have \"path_weight G p' = path_weight G q + weight G 0 i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Dijkstra.size G \\<Longrightarrow>\n    Dijkstra.inv G (dijkstra_start_state G)", "@qed"], ["", "subsection \\<open>Step of Dijkstra's algorithm\\<close>"], ["", "fun dijkstra_step :: \"graph \\<Rightarrow> nat \\<Rightarrow> state \\<Rightarrow> state\" where\n  \"dijkstra_step G m (State e M) =\n    (let M' = delete_map m M;\n         e' = list_update_set (\\<lambda>i. i \\<in> keys_of M') (\\<lambda>i. min (e ! m + weight G m i) (e ! i)) e;\n         M'' = map_update_all (\\<lambda>i. e' ! i) M'\n     in State e' M'')\""], ["", "setup \\<open>add_rewrite_rule @{thm dijkstra_step.simps}\\<close>"], ["", "setup \\<open>register_wellform_data (\"dijkstra_step G m S\", [\"inv G S\", \"m \\<in> unknown_set S\"])\\<close>"], ["", "lemma has_dist_on_larger [backward1]:\n  \"has_dist G m n \\<Longrightarrow> has_dist_on G m n V \\<Longrightarrow> dist_on G m n V = dist G m n \\<Longrightarrow>\n   has_dist_on G m n (V \\<union> {x}) \\<and> dist_on G m n (V \\<union> {x}) = dist G m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist G m n; has_dist_on G m n V;\n     dist_on G m n V = dist G m n\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G m n (V \\<union> {x}) \\<and>\n                      dist_on G m n (V \\<union> {x}) = dist G m n", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist G m n; has_dist_on G m n V;\n     dist_on G m n V = dist G m n\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G m n (V \\<union> {x}) \\<and>\n                      dist_on G m n (V \\<union> {x}) = dist G m n", "@obtain p where \"is_shortest_path_on G m n p V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist G m n; has_dist_on G m n V;\n     dist_on G m n V = dist G m n\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G m n (V \\<union> {x}) \\<and>\n                      dist_on G m n (V \\<union> {x}) = dist G m n", "@let \"V' = V \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist G m n; has_dist_on G m n V;\n     dist_on G m n V = dist G m n\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G m n (V \\<union> {x}) \\<and>\n                      dist_on G m n (V \\<union> {x}) = dist G m n", "@have \"p \\<in> path_set_on G m n V'\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist G m n; has_dist_on G m n V;\n     dist_on G m n V = dist G m n\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G m n (V \\<union> {x}) \\<and>\n                      dist_on G m n (V \\<union> {x}) = dist G m n", "@have \"V \\<subseteq> V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist G m n; has_dist_on G m n V;\n     dist_on G m n V = dist G m n\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G m n (V \\<union> {x}) \\<and>\n                      dist_on G m n (V \\<union> {x}) = dist G m n", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist G m n; has_dist_on G m n V;\n     dist_on G m n V = dist G m n\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G m n (V \\<union> {x}) \\<and>\n                      dist_on G m n (V \\<union> {x}) = dist G m n", "@have \"is_shortest_path_on G m n p V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has_dist G m n; has_dist_on G m n V;\n     dist_on G m n V = dist G m n\\<rbrakk>\n    \\<Longrightarrow> has_dist_on G m n (V \\<union> {x}) \\<and>\n                      dist_on G m n (V \\<union> {x}) = dist G m n", "@qed"], ["", "lemma dijkstra_step_unknown_set [rewrite]:\n  \"inv G S \\<Longrightarrow> m \\<in> unknown_set S \\<Longrightarrow> unknown_set (dijkstra_step G m S) = unknown_set S - {m}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; m \\<in> unknown_set S\\<rbrakk>\n    \\<Longrightarrow> unknown_set (dijkstra_step G m S) =\n                      unknown_set S - {m}", "by auto2"], ["", "lemma dijkstra_step_known_set [rewrite]:\n  \"inv G S \\<Longrightarrow> m \\<in> unknown_set S \\<Longrightarrow> known_set (dijkstra_step G m S) = known_set S \\<union> {m}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; m \\<in> unknown_set S\\<rbrakk>\n    \\<Longrightarrow> known_set (dijkstra_step G m S) =\n                      known_set S \\<union> {m}", "by auto2"], ["", "text \\<open>One step of Dijkstra's algorithm preserves the invariant.\\<close>"], ["", "theorem dijkstra_step_preserves_inv [backward]:\n  \"inv G S \\<Longrightarrow> is_heap_min m (heap S) \\<Longrightarrow> inv G (dijkstra_step G m S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; is_heap_min m (heap S)\\<rbrakk>\n    \\<Longrightarrow> Dijkstra.inv G (dijkstra_step G m S)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; is_heap_min m (heap S)\\<rbrakk>\n    \\<Longrightarrow> Dijkstra.inv G (dijkstra_step G m S)", "@let \"V = known_set S\" \"V' = V \\<union> {m}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; is_heap_min m (heap S)\\<rbrakk>\n    \\<Longrightarrow> Dijkstra.inv G (dijkstra_step G m S)", "@have (@rule) \"\\<forall>i\\<in>V. has_dist G 0 i \\<and> has_dist_on G 0 i V' \\<and> dist_on G 0 i V' = dist G 0 i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; is_heap_min m (heap S)\\<rbrakk>\n    \\<Longrightarrow> Dijkstra.inv G (dijkstra_step G m S)", "@have \"has_dist G 0 m \\<and> dist G 0 m = dist_on G 0 m V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; is_heap_min m (heap S)\\<rbrakk>\n    \\<Longrightarrow> Dijkstra.inv G (dijkstra_step G m S)", "@have \"has_dist_on G 0 m V' \\<and> dist_on G 0 m V' = dist G 0 m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; is_heap_min m (heap S)\\<rbrakk>\n    \\<Longrightarrow> Dijkstra.inv G (dijkstra_step G m S)", "@have (@rule) \"\\<forall>i\\<in>verts G - V'. has_dist_on G 0 i V' \\<and> dist_on G 0 i V' = min (dist_on G 0 i V) (dist_on G 0 m V + weight G m i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; is_heap_min m (heap S)\\<rbrakk>\n    \\<Longrightarrow> Dijkstra.inv G (dijkstra_step G m S)", "@let \"S' = dijkstra_step G m S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; is_heap_min m (heap S)\\<rbrakk>\n    \\<Longrightarrow> Dijkstra.inv G (dijkstra_step G m S)", "@have \"known_dists G V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; is_heap_min m (heap S)\\<rbrakk>\n    \\<Longrightarrow> Dijkstra.inv G (dijkstra_step G m S)", "@have \"\\<forall>i\\<in>V'. est S' ! i = dist G 0 i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; is_heap_min m (heap S)\\<rbrakk>\n    \\<Longrightarrow> Dijkstra.inv G (dijkstra_step G m S)", "@have \"\\<forall>i\\<in>verts G. est S' ! i = dist_on G 0 i V'\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; is_heap_min m (heap S)\\<rbrakk>\n    \\<Longrightarrow> Dijkstra.inv G (dijkstra_step G m S)", "@case \"i \\<in> V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; is_heap_min m (heap S)\\<rbrakk>\n    \\<Longrightarrow> Dijkstra.inv G (dijkstra_step G m S)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; is_heap_min m (heap S)\\<rbrakk>\n    \\<Longrightarrow> Dijkstra.inv G (dijkstra_step G m S)", "@qed"], ["", "definition is_dijkstra_step :: \"graph \\<Rightarrow> state \\<Rightarrow> state \\<Rightarrow> bool\" where [rewrite]:\n  \"is_dijkstra_step G S S' \\<longleftrightarrow> (\\<exists>m. is_heap_min m (heap S) \\<and> S' = dijkstra_step G m S)\""], ["", "lemma is_dijkstra_stepI [backward2]:\n  \"is_heap_min m (heap S) \\<Longrightarrow> dijkstra_step G m S = S' \\<Longrightarrow> is_dijkstra_step G S S'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_heap_min m (heap S); dijkstra_step G m S = S'\\<rbrakk>\n    \\<Longrightarrow> is_dijkstra_step G S S'", "by auto2"], ["", "lemma is_dijkstra_stepD1 [forward]:\n  \"inv G S \\<Longrightarrow> is_dijkstra_step G S S' \\<Longrightarrow> inv G S'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; is_dijkstra_step G S S'\\<rbrakk>\n    \\<Longrightarrow> Dijkstra.inv G S'", "by auto2"], ["", "lemma is_dijkstra_stepD2 [forward]:\n  \"inv G S \\<Longrightarrow> is_dijkstra_step G S S' \\<Longrightarrow> card (unknown_set S') = card (unknown_set S) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dijkstra.inv G S; is_dijkstra_step G S S'\\<rbrakk>\n    \\<Longrightarrow> card (unknown_set S') = card (unknown_set S) - 1", "by auto2"], ["", "setup \\<open>del_prfstep_thm @{thm is_dijkstra_step_def}\\<close>"], ["", "end"]]}