{"file_name": "/home/qj213/afp-2021-10-22/thys/Auto2_Imperative_HOL/Functional/Lists_Ex.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Auto2_Imperative_HOL", "problem_names": ["lemma itrev_eq_rev: \"itrev x [] = rev x\"", "lemma strict_sorted_appendI [backward]:\n  \"strict_sorted xs \\<and> strict_sorted ys \\<and> (\\<forall>x\\<in>set xs. \\<forall>y\\<in>set ys. x < y) \\<Longrightarrow> strict_sorted (xs @ ys)\"", "lemma strict_sorted_appendE1 [forward]:\n  \"strict_sorted (xs @ ys) \\<Longrightarrow> strict_sorted xs \\<and> strict_sorted ys\"", "lemma strict_sorted_appendE2 [forward]:\n  \"strict_sorted (xs @ ys) \\<Longrightarrow> x \\<in> set xs \\<Longrightarrow> \\<forall>y\\<in>set ys. x < y\"", "lemma strict_sorted_distinct [forward]: \"strict_sorted l \\<Longrightarrow> distinct l\"", "lemma ordered_insert_set [rewrite]:\n  \"set (ordered_insert x ys) = {x} \\<union> set ys\"", "lemma ordered_insert_sorted [forward]:\n  \"strict_sorted ys \\<Longrightarrow> strict_sorted (ordered_insert x ys)\"", "lemma ordered_insert_binary [rewrite]:\n  \"strict_sorted (xs @ a # ys) \\<Longrightarrow> ordered_insert x (xs @ a # ys) =\n    (if x < a then ordered_insert x xs @ a # ys\n     else if x > a then xs @ a # ordered_insert x ys\n     else xs @ a # ys)\"", "lemma remove_elt_list_set [rewrite]:\n  \"set (remove_elt_list x ys) = set ys - {x}\"", "lemma remove_elt_list_sorted [forward]:\n  \"strict_sorted ys \\<Longrightarrow> strict_sorted (remove_elt_list x ys)\"", "lemma remove_elt_idem [rewrite]:\n  \"x \\<notin> set ys \\<Longrightarrow> remove_elt_list x ys = ys\"", "lemma remove_elt_list_binary [rewrite]:\n  \"strict_sorted (xs @ a # ys) \\<Longrightarrow> remove_elt_list x (xs @ a # ys) =\n    (if x < a then remove_elt_list x xs @ a # ys\n     else if x > a then xs @ a # remove_elt_list x ys else xs @ ys)\"", "lemma ordered_insert_pairs_map [rewrite]:\n  \"map_of_alist (ordered_insert_pairs x v ys) = update_map (map_of_alist ys) x v\"", "lemma ordered_insert_pairs_set [rewrite]:\n  \"set (map fst (ordered_insert_pairs x v ys)) = {x} \\<union> set (map fst ys)\"", "lemma ordered_insert_pairs_sorted [backward]:\n  \"strict_sorted (map fst ys) \\<Longrightarrow> strict_sorted (map fst (ordered_insert_pairs x v ys))\"", "lemma ordered_insert_pairs_binary [rewrite]:\n  \"strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow> ordered_insert_pairs x v (xs @ a # ys) =\n    (if x < fst a then ordered_insert_pairs x v xs @ a # ys\n     else if x > fst a then xs @ a # ordered_insert_pairs x v ys\n     else xs @ (x, v) # ys)\"", "lemma remove_elt_pairs_map [rewrite]:\n  \"strict_sorted (map fst ys) \\<Longrightarrow> map_of_alist (remove_elt_pairs x ys) = delete_map x (map_of_alist ys)\"", "lemma remove_elt_pairs_on_set [rewrite]:\n  \"strict_sorted (map fst ys) \\<Longrightarrow> set (map fst (remove_elt_pairs x ys)) = set (map fst ys) - {x}\"", "lemma remove_elt_pairs_sorted [backward]:\n  \"strict_sorted (map fst ys) \\<Longrightarrow> strict_sorted (map fst (remove_elt_pairs x ys))\"", "lemma remove_elt_pairs_idem [rewrite]:\n  \"x \\<notin> set (map fst ys) \\<Longrightarrow> remove_elt_pairs x ys = ys\"", "lemma remove_elt_pairs_binary [rewrite]:\n  \"strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow> remove_elt_pairs x (xs @ a # ys) =\n    (if x < fst a then remove_elt_pairs x xs @ a # ys\n     else if x > fst a then xs @ a # remove_elt_pairs x ys else xs @ ys)\"", "lemma map_of_alist_binary [rewrite]:\n  \"strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow> (map_of_alist (xs @ a # ys))\\<langle>x\\<rangle> =\n   (if x < fst a then (map_of_alist xs)\\<langle>x\\<rangle>\n    else if x > fst a then (map_of_alist ys)\\<langle>x\\<rangle> else Some (snd a))\""], "translations": [["", "lemma itrev_eq_rev: \"itrev x [] = rev x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. itrev x [] = rev x", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. itrev x [] = rev x", "@induct x for \"\\<forall>y. itrev x y = rev x @ y\" arbitrary y"], ["proof (prove)\ngoal (1 subgoal):\n 1. itrev x [] = rev x", "@qed"], ["", "subsection \\<open>Strict sorted\\<close>"], ["", "fun strict_sorted :: \"'a::linorder list \\<Rightarrow> bool\" where\n  \"strict_sorted [] = True\"\n| \"strict_sorted (x # ys) = ((\\<forall>y\\<in>set ys. x < y) \\<and> strict_sorted ys)\""], ["", "setup \\<open>fold add_rewrite_rule @{thms strict_sorted.simps}\\<close>"], ["", "lemma strict_sorted_appendI [backward]:\n  \"strict_sorted xs \\<and> strict_sorted ys \\<and> (\\<forall>x\\<in>set xs. \\<forall>y\\<in>set ys. x < y) \\<Longrightarrow> strict_sorted (xs @ ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted xs \\<and>\n    Lists_Ex.strict_sorted ys \\<and>\n    (\\<forall>x\\<in>set xs. \\<forall>y\\<in>set ys. x < y) \\<Longrightarrow>\n    Lists_Ex.strict_sorted (xs @ ys)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted xs \\<and>\n    Lists_Ex.strict_sorted ys \\<and>\n    (\\<forall>x\\<in>set xs. \\<forall>y\\<in>set ys. x < y) \\<Longrightarrow>\n    Lists_Ex.strict_sorted (xs @ ys)", "@induct xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted xs \\<and>\n    Lists_Ex.strict_sorted ys \\<and>\n    (\\<forall>x\\<in>set xs. \\<forall>y\\<in>set ys. x < y) \\<Longrightarrow>\n    Lists_Ex.strict_sorted (xs @ ys)", "@qed"], ["", "lemma strict_sorted_appendE1 [forward]:\n  \"strict_sorted (xs @ ys) \\<Longrightarrow> strict_sorted xs \\<and> strict_sorted ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (xs @ ys) \\<Longrightarrow>\n    Lists_Ex.strict_sorted xs \\<and> Lists_Ex.strict_sorted ys", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (xs @ ys) \\<Longrightarrow>\n    Lists_Ex.strict_sorted xs \\<and> Lists_Ex.strict_sorted ys", "@induct xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (xs @ ys) \\<Longrightarrow>\n    Lists_Ex.strict_sorted xs \\<and> Lists_Ex.strict_sorted ys", "@qed"], ["", "lemma strict_sorted_appendE2 [forward]:\n  \"strict_sorted (xs @ ys) \\<Longrightarrow> x \\<in> set xs \\<Longrightarrow> \\<forall>y\\<in>set ys. x < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Lists_Ex.strict_sorted (xs @ ys); x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>set ys. x < y", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Lists_Ex.strict_sorted (xs @ ys); x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>set ys. x < y", "@induct xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Lists_Ex.strict_sorted (xs @ ys); x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>set ys. x < y", "@qed"], ["", "lemma strict_sorted_distinct [forward]: \"strict_sorted l \\<Longrightarrow> distinct l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted l \\<Longrightarrow> distinct l", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted l \\<Longrightarrow> distinct l", "@induct l"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted l \\<Longrightarrow> distinct l", "@qed"], ["", "subsection \\<open>Ordered insert\\<close>"], ["", "fun ordered_insert :: \"'a::ord \\<Rightarrow> 'a list \\<Rightarrow> 'a list\" where\n  \"ordered_insert x [] = [x]\"\n| \"ordered_insert x (y # ys) = (\n    if x = y then (y # ys)\n    else if x < y then x # (y # ys)\n    else y # ordered_insert x ys)\""], ["", "setup \\<open>fold add_rewrite_rule @{thms ordered_insert.simps}\\<close>"], ["", "lemma ordered_insert_set [rewrite]:\n  \"set (ordered_insert x ys) = {x} \\<union> set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (ordered_insert x ys) = {x} \\<union> set ys", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (ordered_insert x ys) = {x} \\<union> set ys", "@induct ys"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (ordered_insert x ys) = {x} \\<union> set ys", "@qed"], ["", "lemma ordered_insert_sorted [forward]:\n  \"strict_sorted ys \\<Longrightarrow> strict_sorted (ordered_insert x ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted ys \\<Longrightarrow>\n    Lists_Ex.strict_sorted (ordered_insert x ys)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted ys \\<Longrightarrow>\n    Lists_Ex.strict_sorted (ordered_insert x ys)", "@induct ys"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted ys \\<Longrightarrow>\n    Lists_Ex.strict_sorted (ordered_insert x ys)", "@qed"], ["", "lemma ordered_insert_binary [rewrite]:\n  \"strict_sorted (xs @ a # ys) \\<Longrightarrow> ordered_insert x (xs @ a # ys) =\n    (if x < a then ordered_insert x xs @ a # ys\n     else if x > a then xs @ a # ordered_insert x ys\n     else xs @ a # ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (xs @ a # ys) \\<Longrightarrow>\n    ordered_insert x (xs @ a # ys) =\n    (if x < a then ordered_insert x xs @ a # ys\n     else if a < x then xs @ a # ordered_insert x ys else xs @ a # ys)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (xs @ a # ys) \\<Longrightarrow>\n    ordered_insert x (xs @ a # ys) =\n    (if x < a then ordered_insert x xs @ a # ys\n     else if a < x then xs @ a # ordered_insert x ys else xs @ a # ys)", "@induct xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (xs @ a # ys) \\<Longrightarrow>\n    ordered_insert x (xs @ a # ys) =\n    (if x < a then ordered_insert x xs @ a # ys\n     else if a < x then xs @ a # ordered_insert x ys else xs @ a # ys)", "@qed"], ["", "subsection \\<open>Deleting an element\\<close>"], ["", "fun remove_elt_list :: \"'a \\<Rightarrow> 'a list \\<Rightarrow> 'a list\" where\n  \"remove_elt_list x [] = []\"\n| \"remove_elt_list x (y # ys) = (if y = x then remove_elt_list x ys else y # remove_elt_list x ys)\""], ["", "setup \\<open>fold add_rewrite_rule @{thms remove_elt_list.simps}\\<close>"], ["", "lemma remove_elt_list_set [rewrite]:\n  \"set (remove_elt_list x ys) = set ys - {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remove_elt_list x ys) = set ys - {x}", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remove_elt_list x ys) = set ys - {x}", "@induct ys"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remove_elt_list x ys) = set ys - {x}", "@qed"], ["", "lemma remove_elt_list_sorted [forward]:\n  \"strict_sorted ys \\<Longrightarrow> strict_sorted (remove_elt_list x ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted ys \\<Longrightarrow>\n    Lists_Ex.strict_sorted (remove_elt_list x ys)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted ys \\<Longrightarrow>\n    Lists_Ex.strict_sorted (remove_elt_list x ys)", "@induct ys"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted ys \\<Longrightarrow>\n    Lists_Ex.strict_sorted (remove_elt_list x ys)", "@qed"], ["", "lemma remove_elt_idem [rewrite]:\n  \"x \\<notin> set ys \\<Longrightarrow> remove_elt_list x ys = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> set ys \\<Longrightarrow> remove_elt_list x ys = ys", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> set ys \\<Longrightarrow> remove_elt_list x ys = ys", "@induct ys"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> set ys \\<Longrightarrow> remove_elt_list x ys = ys", "@qed"], ["", "lemma remove_elt_list_binary [rewrite]:\n  \"strict_sorted (xs @ a # ys) \\<Longrightarrow> remove_elt_list x (xs @ a # ys) =\n    (if x < a then remove_elt_list x xs @ a # ys\n     else if x > a then xs @ a # remove_elt_list x ys else xs @ ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (xs @ a # ys) \\<Longrightarrow>\n    remove_elt_list x (xs @ a # ys) =\n    (if x < a then remove_elt_list x xs @ a # ys\n     else if a < x then xs @ a # remove_elt_list x ys else xs @ ys)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (xs @ a # ys) \\<Longrightarrow>\n    remove_elt_list x (xs @ a # ys) =\n    (if x < a then remove_elt_list x xs @ a # ys\n     else if a < x then xs @ a # remove_elt_list x ys else xs @ ys)", "@induct xs @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (xs @ a # ys) \\<Longrightarrow>\n    remove_elt_list x (xs @ a # ys) =\n    (if x < a then remove_elt_list x xs @ a # ys\n     else if a < x then xs @ a # remove_elt_list x ys else xs @ ys)", "@subgoal \"xs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (xs @ a # ys) \\<Longrightarrow>\n    remove_elt_list x (xs @ a # ys) =\n    (if x < a then remove_elt_list x xs @ a # ys\n     else if a < x then xs @ a # remove_elt_list x ys else xs @ ys)", "@case \"x < a\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (xs @ a # ys) \\<Longrightarrow>\n    remove_elt_list x (xs @ a # ys) =\n    (if x < a then remove_elt_list x xs @ a # ys\n     else if a < x then xs @ a # remove_elt_list x ys else xs @ ys)", "@have \"x \\<notin> set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (xs @ a # ys) \\<Longrightarrow>\n    remove_elt_list x (xs @ a # ys) =\n    (if x < a then remove_elt_list x xs @ a # ys\n     else if a < x then xs @ a # remove_elt_list x ys else xs @ ys)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (xs @ a # ys) \\<Longrightarrow>\n    remove_elt_list x (xs @ a # ys) =\n    (if x < a then remove_elt_list x xs @ a # ys\n     else if a < x then xs @ a # remove_elt_list x ys else xs @ ys)", "@endgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (xs @ a # ys) \\<Longrightarrow>\n    remove_elt_list x (xs @ a # ys) =\n    (if x < a then remove_elt_list x xs @ a # ys\n     else if a < x then xs @ a # remove_elt_list x ys else xs @ ys)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (xs @ a # ys) \\<Longrightarrow>\n    remove_elt_list x (xs @ a # ys) =\n    (if x < a then remove_elt_list x xs @ a # ys\n     else if a < x then xs @ a # remove_elt_list x ys else xs @ ys)", "@qed"], ["", "subsection \\<open>Ordered insertion into list of pairs\\<close>"], ["", "fun ordered_insert_pairs :: \"'a::ord \\<Rightarrow> 'b \\<Rightarrow> ('a \\<times> 'b) list \\<Rightarrow> ('a \\<times> 'b) list\" where\n  \"ordered_insert_pairs x v [] = [(x, v)]\"\n| \"ordered_insert_pairs x v (y # ys) = (\n    if x = fst y then ((x, v) # ys)\n    else if x < fst y then (x, v) # (y # ys)\n    else y # ordered_insert_pairs x v ys)\""], ["", "setup \\<open>fold add_rewrite_rule @{thms ordered_insert_pairs.simps}\\<close>"], ["", "lemma ordered_insert_pairs_map [rewrite]:\n  \"map_of_alist (ordered_insert_pairs x v ys) = update_map (map_of_alist ys) x v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of_alist (ordered_insert_pairs x v ys) =\n     map_of_alist ys { x \\<rightarrow> v }", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of_alist (ordered_insert_pairs x v ys) =\n     map_of_alist ys { x \\<rightarrow> v }", "@induct ys"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of_alist (ordered_insert_pairs x v ys) =\n     map_of_alist ys { x \\<rightarrow> v }", "@qed"], ["", "lemma ordered_insert_pairs_set [rewrite]:\n  \"set (map fst (ordered_insert_pairs x v ys)) = {x} \\<union> set (map fst ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map fst (ordered_insert_pairs x v ys)) =\n    {x} \\<union> set (map fst ys)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map fst (ordered_insert_pairs x v ys)) =\n    {x} \\<union> set (map fst ys)", "@induct ys"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map fst (ordered_insert_pairs x v ys)) =\n    {x} \\<union> set (map fst ys)", "@qed"], ["", "lemma ordered_insert_pairs_sorted [backward]:\n  \"strict_sorted (map fst ys) \\<Longrightarrow> strict_sorted (map fst (ordered_insert_pairs x v ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    Lists_Ex.strict_sorted (map fst (ordered_insert_pairs x v ys))", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    Lists_Ex.strict_sorted (map fst (ordered_insert_pairs x v ys))", "@induct ys"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    Lists_Ex.strict_sorted (map fst (ordered_insert_pairs x v ys))", "@qed"], ["", "lemma ordered_insert_pairs_binary [rewrite]:\n  \"strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow> ordered_insert_pairs x v (xs @ a # ys) =\n    (if x < fst a then ordered_insert_pairs x v xs @ a # ys\n     else if x > fst a then xs @ a # ordered_insert_pairs x v ys\n     else xs @ (x, v) # ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    ordered_insert_pairs x v (xs @ a # ys) =\n    (if x < fst a then ordered_insert_pairs x v xs @ a # ys\n     else if fst a < x then xs @ a # ordered_insert_pairs x v ys\n          else xs @ (x, v) # ys)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    ordered_insert_pairs x v (xs @ a # ys) =\n    (if x < fst a then ordered_insert_pairs x v xs @ a # ys\n     else if fst a < x then xs @ a # ordered_insert_pairs x v ys\n          else xs @ (x, v) # ys)", "@induct xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    ordered_insert_pairs x v (xs @ a # ys) =\n    (if x < fst a then ordered_insert_pairs x v xs @ a # ys\n     else if fst a < x then xs @ a # ordered_insert_pairs x v ys\n          else xs @ (x, v) # ys)", "@qed"], ["", "subsection \\<open>Deleting from a list of pairs\\<close>"], ["", "fun remove_elt_pairs :: \"'a \\<Rightarrow> ('a \\<times> 'b) list \\<Rightarrow> ('a \\<times> 'b) list\" where\n  \"remove_elt_pairs x [] = []\"\n| \"remove_elt_pairs x (y # ys) = (if fst y = x then ys else y # remove_elt_pairs x ys)\""], ["", "setup \\<open>fold add_rewrite_rule @{thms remove_elt_pairs.simps}\\<close>"], ["", "lemma remove_elt_pairs_map [rewrite]:\n  \"strict_sorted (map fst ys) \\<Longrightarrow> map_of_alist (remove_elt_pairs x ys) = delete_map x (map_of_alist ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    map_of_alist (remove_elt_pairs x ys) = delete_map x (map_of_alist ys)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    map_of_alist (remove_elt_pairs x ys) = delete_map x (map_of_alist ys)", "@induct ys @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    map_of_alist (remove_elt_pairs x ys) = delete_map x (map_of_alist ys)", "@subgoal \"ys = y # ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    map_of_alist (remove_elt_pairs x ys) = delete_map x (map_of_alist ys)", "@case \"fst y = x\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    map_of_alist (remove_elt_pairs x ys) = delete_map x (map_of_alist ys)", "@have \"x \\<notin> set (map fst ys')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    map_of_alist (remove_elt_pairs x ys) = delete_map x (map_of_alist ys)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    map_of_alist (remove_elt_pairs x ys) = delete_map x (map_of_alist ys)", "@endgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    map_of_alist (remove_elt_pairs x ys) = delete_map x (map_of_alist ys)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    map_of_alist (remove_elt_pairs x ys) = delete_map x (map_of_alist ys)", "@qed"], ["", "lemma remove_elt_pairs_on_set [rewrite]:\n  \"strict_sorted (map fst ys) \\<Longrightarrow> set (map fst (remove_elt_pairs x ys)) = set (map fst ys) - {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    set (map fst (remove_elt_pairs x ys)) = set (map fst ys) - {x}", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    set (map fst (remove_elt_pairs x ys)) = set (map fst ys) - {x}", "@induct ys"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    set (map fst (remove_elt_pairs x ys)) = set (map fst ys) - {x}", "@qed"], ["", "lemma remove_elt_pairs_sorted [backward]:\n  \"strict_sorted (map fst ys) \\<Longrightarrow> strict_sorted (map fst (remove_elt_pairs x ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    Lists_Ex.strict_sorted (map fst (remove_elt_pairs x ys))", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    Lists_Ex.strict_sorted (map fst (remove_elt_pairs x ys))", "@induct ys"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst ys) \\<Longrightarrow>\n    Lists_Ex.strict_sorted (map fst (remove_elt_pairs x ys))", "@qed"], ["", "lemma remove_elt_pairs_idem [rewrite]:\n  \"x \\<notin> set (map fst ys) \\<Longrightarrow> remove_elt_pairs x ys = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> set (map fst ys) \\<Longrightarrow> remove_elt_pairs x ys = ys", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> set (map fst ys) \\<Longrightarrow> remove_elt_pairs x ys = ys", "@induct ys"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> set (map fst ys) \\<Longrightarrow> remove_elt_pairs x ys = ys", "@qed"], ["", "lemma remove_elt_pairs_binary [rewrite]:\n  \"strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow> remove_elt_pairs x (xs @ a # ys) =\n    (if x < fst a then remove_elt_pairs x xs @ a # ys\n     else if x > fst a then xs @ a # remove_elt_pairs x ys else xs @ ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    remove_elt_pairs x (xs @ a # ys) =\n    (if x < fst a then remove_elt_pairs x xs @ a # ys\n     else if fst a < x then xs @ a # remove_elt_pairs x ys else xs @ ys)", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    remove_elt_pairs x (xs @ a # ys) =\n    (if x < fst a then remove_elt_pairs x xs @ a # ys\n     else if fst a < x then xs @ a # remove_elt_pairs x ys else xs @ ys)", "@induct xs @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    remove_elt_pairs x (xs @ a # ys) =\n    (if x < fst a then remove_elt_pairs x xs @ a # ys\n     else if fst a < x then xs @ a # remove_elt_pairs x ys else xs @ ys)", "@subgoal \"xs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    remove_elt_pairs x (xs @ a # ys) =\n    (if x < fst a then remove_elt_pairs x xs @ a # ys\n     else if fst a < x then xs @ a # remove_elt_pairs x ys else xs @ ys)", "@case \"x < fst a\" @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    remove_elt_pairs x (xs @ a # ys) =\n    (if x < fst a then remove_elt_pairs x xs @ a # ys\n     else if fst a < x then xs @ a # remove_elt_pairs x ys else xs @ ys)", "@have \"x \\<notin> set (map fst ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    remove_elt_pairs x (xs @ a # ys) =\n    (if x < fst a then remove_elt_pairs x xs @ a # ys\n     else if fst a < x then xs @ a # remove_elt_pairs x ys else xs @ ys)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    remove_elt_pairs x (xs @ a # ys) =\n    (if x < fst a then remove_elt_pairs x xs @ a # ys\n     else if fst a < x then xs @ a # remove_elt_pairs x ys else xs @ ys)", "@endgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    remove_elt_pairs x (xs @ a # ys) =\n    (if x < fst a then remove_elt_pairs x xs @ a # ys\n     else if fst a < x then xs @ a # remove_elt_pairs x ys else xs @ ys)", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    remove_elt_pairs x (xs @ a # ys) =\n    (if x < fst a then remove_elt_pairs x xs @ a # ys\n     else if fst a < x then xs @ a # remove_elt_pairs x ys else xs @ ys)", "@qed"], ["", "subsection \\<open>Search in a list of pairs\\<close>"], ["", "lemma map_of_alist_binary [rewrite]:\n  \"strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow> (map_of_alist (xs @ a # ys))\\<langle>x\\<rangle> =\n   (if x < fst a then (map_of_alist xs)\\<langle>x\\<rangle>\n    else if x > fst a then (map_of_alist ys)\\<langle>x\\<rangle> else Some (snd a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    map_of_alist (xs @ a # ys)\\<langle>x\\<rangle> =\n    (if x < fst a then map_of_alist xs\\<langle>x\\<rangle>\n     else if fst a < x then map_of_alist ys\\<langle>x\\<rangle>\n          else Some (snd a))", "@proof"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    map_of_alist (xs @ a # ys)\\<langle>x\\<rangle> =\n    (if x < fst a then map_of_alist xs\\<langle>x\\<rangle>\n     else if fst a < x then map_of_alist ys\\<langle>x\\<rangle>\n          else Some (snd a))", "@induct xs @with"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    map_of_alist (xs @ a # ys)\\<langle>x\\<rangle> =\n    (if x < fst a then map_of_alist xs\\<langle>x\\<rangle>\n     else if fst a < x then map_of_alist ys\\<langle>x\\<rangle>\n          else Some (snd a))", "@subgoal \"xs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    map_of_alist (xs @ a # ys)\\<langle>x\\<rangle> =\n    (if x < fst a then map_of_alist xs\\<langle>x\\<rangle>\n     else if fst a < x then map_of_alist ys\\<langle>x\\<rangle>\n          else Some (snd a))", "@case \"x \\<notin> set (map fst ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    map_of_alist (xs @ a # ys)\\<langle>x\\<rangle> =\n    (if x < fst a then map_of_alist xs\\<langle>x\\<rangle>\n     else if fst a < x then map_of_alist ys\\<langle>x\\<rangle>\n          else Some (snd a))", "@endgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    map_of_alist (xs @ a # ys)\\<langle>x\\<rangle> =\n    (if x < fst a then map_of_alist xs\\<langle>x\\<rangle>\n     else if fst a < x then map_of_alist ys\\<langle>x\\<rangle>\n          else Some (snd a))", "@end"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lists_Ex.strict_sorted (map fst (xs @ a # ys)) \\<Longrightarrow>\n    map_of_alist (xs @ a # ys)\\<langle>x\\<rangle> =\n    (if x < fst a then map_of_alist xs\\<langle>x\\<rangle>\n     else if fst a < x then map_of_alist ys\\<langle>x\\<rangle>\n          else Some (snd a))", "@qed"], ["", "end"]]}