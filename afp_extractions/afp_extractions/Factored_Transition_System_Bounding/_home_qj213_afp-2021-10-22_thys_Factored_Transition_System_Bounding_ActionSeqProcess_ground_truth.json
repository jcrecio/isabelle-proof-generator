{"file_name": "/home/qj213/afp-2021-10-22/thys/Factored_Transition_System_Bounding/ActionSeqProcess.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Factored_Transition_System_Bounding", "problem_names": ["lemma sat_precond_as_pair:\n  \"sat_precond_as s ((p, e) # as) = (p \\<subseteq>\\<^sub>f s \\<and> sat_precond_as (state_succ s (p, e)) as)\"", "lemma graph_plan_lemma_4:\n  fixes s s' as vs P\n  assumes \"(\\<forall>a. (ListMem a as \\<and> P a) \\<longrightarrow> ((fmdom' (snd a) \\<inter> vs) = {}))\" \"sat_precond_as s as\"\n    \"sat_precond_as s' (filter (\\<lambda>a. \\<not>(P a)) as)\" \"(fmrestrict_set vs s = fmrestrict_set vs s')\"\n  shows \"\n    (fmrestrict_set vs (exec_plan s as)\n    = fmrestrict_set vs (exec_plan s' (filter (\\<lambda> a. \\<not>(P a)) as)))\n  \"", "lemma rem_condless_act_pair: \"\n    rem_condless_act s pfx_a ((p, e) # as) = (if p \\<subseteq>\\<^sub>f exec_plan s pfx_a\n      then rem_condless_act s (pfx_a @ [(p,e)]) as\n      else rem_condless_act s pfx_a as\n    )\n  \"\n  \"(rem_condless_act s pfx_a [] = pfx_a)\"", "lemma exec_remcondless_cons:\n  fixes s h as pfx\n  shows \"\n    exec_plan s (rem_condless_act s (h # pfx) as)\n    = exec_plan (state_succ s h) (rem_condless_act (state_succ s h) pfx as)\n  \"", "lemma rem_condless_valid_1:\n  fixes as s\n  shows \"(exec_plan s as = exec_plan s (rem_condless_act s [] as))\"", "lemma rem_condless_act_cons:\n  fixes h' pfx as s\n  shows \"(rem_condless_act s (h' # pfx) as) = (h' # rem_condless_act (state_succ s h') pfx as)\"", "lemma rem_condless_act_cons_prefix:\n  fixes h h' as as' s\n  assumes \"prefix (h' # as') (rem_condless_act s [h] as)\"\n  shows \"(\n    (prefix as' (rem_condless_act (state_succ s h) [] as))\n    \\<and> h' = h\n  )\"", "lemma rem_condless_valid_2:\n  fixes as s\n  shows \"sat_precond_as s (rem_condless_act s [] as)\"", "lemma rem_condless_valid_3:\n  fixes as s\n  shows \"length (rem_condless_act s [] as) \\<le> length as\"", "lemma rem_condless_valid_4:\n  fixes as A s\n  assumes \"(set as \\<subseteq> A)\"\n  shows \"(set (rem_condless_act s [] as) \\<subseteq> A)\"", "lemma rem_condless_valid_6:\n  fixes as s P\n  shows \"length (filter P (rem_condless_act s [] as)) \\<le> length (filter P as)\"", "lemma rem_condless_valid_7:\n  fixes s P as as2\n  assumes \"(list_all P as \\<and> list_all P as2)\"\n  shows \"list_all P (rem_condless_act s as2 as)\"", "lemma rem_condless_valid_8:\n  fixes s as\n  shows \"subseq (rem_condless_act s [] as) as\"", "lemma rem_condless_valid_10:\n  fixes PROB as\n  assumes \"as \\<in> (valid_plans PROB)\"\n  shows \"(rem_condless_act s [] as \\<in> valid_plans PROB)\"", "lemma rem_condless_valid:\n  fixes as A s\n  assumes \"(exec_plan s as = exec_plan s (rem_condless_act s [] as))\"\n    \"(sat_precond_as s (rem_condless_act s [] as))\"\n    \"(length (rem_condless_act s [] as) \\<le> length as)\"\n    \"((set as \\<subseteq> A) \\<longrightarrow> (set (rem_condless_act s [] as) \\<subseteq> A))\"\n  shows \"(\\<forall>P. (length (filter P (rem_condless_act s [] as)) \\<le> length (filter P as)))\"", "lemma submap_sat_precond_submap:\n  fixes as :: \"'a action list\"\n  assumes \"(s1  \\<subseteq>\\<^sub>f s2)\" \"(sat_precond_as s1 as)\"\n  shows \"(sat_precond_as s2 as)\"", "lemma submap_init_submap_exec_i:\n  fixes s1 s2\n  assumes \"(s1 \\<subseteq>\\<^sub>f s2)\" \"(sat_precond_as s1 (a # as))\"\n  shows \"state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\"", "lemma submap_init_submap_exec:\n  fixes s1 s2\n  assumes \"(s1 \\<subseteq>\\<^sub>f s2)\" \"(sat_precond_as s1 as)\"\n  shows \"(exec_plan s1 as \\<subseteq>\\<^sub>f exec_plan s2 as)\"", "lemma sat_precond_drest_sat_precond:\n  fixes vs s and as :: \"'a action list\"\n  assumes \"sat_precond_as (fmrestrict_set vs s) as\"\n  shows \"(sat_precond_as s as)\"", "lemma varset_action_pair: \"(varset_action (p, e) vs) = (fmdom' e \\<subseteq> vs)\"", "lemma eq_effect_eq_vset:\n  fixes x y\n  assumes \"(snd x = snd y)\"\n  shows \"((\\<lambda>a. varset_action a vs) x = (\\<lambda>a. varset_action a vs) y)\"", "lemma rem_effectless_works_1:\n  fixes s as\n  shows \"(exec_plan s as = exec_plan s (rem_effectless_act as))\"", "lemma rem_effectless_works_2:\n  fixes as s\n  assumes \"(sat_precond_as s as)\"\n  shows \"(sat_precond_as s (rem_effectless_act as))\"", "lemma rem_effectless_works_3:\n  fixes as\n  shows \"length (rem_effectless_act as) \\<le> length as\"", "lemma rem_effectless_works_4:\n  fixes A as\n  assumes \"(set as \\<subseteq> A)\"\n  shows \"(set (rem_effectless_act as) \\<subseteq> A)\"", "lemma rem_effectless_works_4':\n  fixes A as\n  assumes \"(as \\<in> valid_plans A)\"\n  shows \"(rem_effectless_act as \\<in> valid_plans A)\"", "lemma rem_effectless_works_5_i:\n  shows \"subseq (rem_effectless_act as) as\"", "lemma rem_effectless_works_5:\n  fixes P as\n  shows \"length (filter P (rem_effectless_act as)) \\<le> length (filter P as)\"", "lemma rem_effectless_works_6:\n  fixes as\n  shows \"no_effectless_act (rem_effectless_act as)\"", "lemma rem_effectless_works_7:\n  fixes as\n  shows \"no_effectless_act as =  list_all (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) as\"", "lemma rem_effectless_works_8:\n  fixes P as\n  assumes \"(list_all P as)\"\n  shows \"list_all P (rem_effectless_act as)\"", "lemma rem_effectless_works_9:\n  fixes as\n  shows \"subseq (rem_effectless_act as) as\"", "lemma rem_effectless_works_10:\n  fixes as P\n  assumes \"(no_effectless_act as)\"\n  shows \"(no_effectless_act (filter P as))\"", "lemma rem_effectless_works_11:\n  fixes as1 as2\n  assumes \"subseq as1 (rem_effectless_act as2)\"\n  shows \"(subseq as1 as2)\"", "lemma rem_effectless_works_12:\n  fixes as1 as2\n  shows \"(no_effectless_act (as1 @ as2)) = (no_effectless_act as1 \\<and> no_effectless_act(as2))\"", "lemma rem_effectless_works_13_i:\n  fixes x l\n  assumes \"ListMem x l\" \"list_all P l\"\n  shows \"P x\"", "lemma rem_effectless_works_13:\n  fixes as1 as2\n  assumes \"(subseq as1 as2)\" \"(no_effectless_act as2)\"\n  shows \"(no_effectless_act as1)\"", "lemma rem_effectless_works_14:\n  fixes PROB as\n  shows \"exec_plan s as = exec_plan s (rem_effectless_act as)\"", "lemma rem_effectless_works:\n  fixes s A as\n  assumes \"(exec_plan s as = exec_plan s (rem_effectless_act as))\"\n    \"(sat_precond_as s as \\<longrightarrow> sat_precond_as s (rem_effectless_act as))\"\n    \"(length (rem_effectless_act as) \\<le> length as)\"\n    \"((set as \\<subseteq> A) \\<longrightarrow> (set (rem_effectless_act as) \\<subseteq> A))\"\n    \"(no_effectless_act (rem_effectless_act as))\"\n  shows \"(\\<forall>P. length (filter P (rem_effectless_act as)) \\<le> length (filter P as))\"", "lemma rem_effectless_act_subset_rem_effectless_act_set_thm:\n  fixes as A\n  assumes \"(set as \\<subseteq> A)\"\n  shows \"(set (rem_effectless_act as) \\<subseteq> rem_effectless_act_set A)\"", "lemma rem_effectless_act_set_no_empty_actions_thm:\n  fixes A\n  shows \"rem_effectless_act_set A \\<subseteq> {a. fmdom' (snd a) \\<noteq> {}}\"", "lemma rem_condless_valid_9:\n  fixes s as\n  assumes \"no_effectless_act as\"\n  shows \"no_effectless_act (rem_condless_act s [] as)\"", "lemma graph_plan_lemma_17:\n  fixes as_1 as_2 as s\n  assumes \"(as_1 @ as_2 = as)\" \"(sat_precond_as s as)\"\n  shows \"((sat_precond_as s as_1) \\<and> sat_precond_as (exec_plan s as_1) as_2)\"", "lemma nempty_eff_every_nempty_act:\n  fixes as\n  assumes \"(no_effectless_act as)\" \"(\\<forall>x. \\<not>(fmdom' (snd (f x)) = {}))\"\n  shows \"(list_all (\\<lambda>a. \\<not>(f a = (fmempty, fmempty))) as)\"", "lemma empty_replace_proj_dual7:\n  fixes s as as'\n  assumes \"sat_precond_as s (as @ as')\"\n  shows \"sat_precond_as (exec_plan s as) as'\"", "lemma not_vset_not_disj_eff_prod_dom_diff:\n  fixes PROB a vs\n  assumes \"(a \\<in> PROB)\" \"(\\<not>varset_action a vs)\"\n  shows \"\\<not>((fmdom' (snd a) \\<inter> ((prob_dom PROB) - vs)) = {})\"", "lemma vset_disj_dom_eff_diff:\n  fixes PROB a vs\n  assumes \"(varset_action a vs)\"\n  shows \"(((fmdom' (snd a)) \\<inter> (prob_dom PROB - vs)) = {})\"", "lemma vset_diff_disj_eff_vs:\n  fixes PROB a vs\n  assumes \"(varset_action a (prob_dom PROB - vs))\"\n  shows \"(((fmdom' (snd a)) \\<inter> vs) = {})\"", "lemma vset_nempty_efff_not_disj_eff_vs:\n  fixes PROB a vs\n  assumes \"(varset_action a vs)\" \"(fmdom' (snd a) \\<noteq> {})\"\n  shows \"\\<not>((fmdom' (snd a) \\<inter> vs)) = {}\"", "lemma vset_disj_eff_diff:\n  fixes s a vs\n  assumes \"(varset_action a vs)\"\n  shows \"((fmdom' (snd a) \\<inter> (s - vs)) = {})\"", "lemma list_all_list_mem:\n  fixes P and l :: \"'a list\"\n  shows \"list_all P l \\<longleftrightarrow> (\\<forall>e. ListMem e l \\<longrightarrow> P e)\"", "lemma every_vset_imp_drestrict_exec_eq:\n  fixes PROB vs as s\n  assumes \"(list_all (\\<lambda>a. varset_action a ((prob_dom PROB) - vs)) as)\"\n  shows \"(fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as))\"", "lemma no_effectless_act_works:\n  fixes as\n  assumes \"(no_effectless_act as)\"\n  shows \"(filter (\\<lambda>a. \\<not>(fmdom' (snd a) = {})) as = as)\"", "lemma varset_act_diff_un_imp_varset_diff:\n  fixes a vs vs' vs''\n  assumes \"(varset_action a (vs'' -  (vs' \\<union> vs)))\"\n  shows \"(varset_action a (vs'' - vs))\"", "lemma vset_diff_union_vset_diff:\n  fixes s vs vs' a\n  assumes \"(varset_action a (s - (vs \\<union> vs')))\"\n  shows \"(varset_action a (s - vs'))\"", "lemma valid_filter_vset_dom_idempot:\n  fixes PROB as\n  assumes \"(as \\<in> valid_plans PROB)\"\n  shows \"(filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as)\"", "lemma n_replace_proj_le_n_as_1:\n  fixes a vs vs'\n  assumes \"(vs \\<subseteq> vs')\" \"(varset_action a vs)\"\n  shows \"(varset_action a vs')\"", "lemma sat_precond_as_pfx:\n  fixes s\n  assumes \"(sat_precond_as s (as @ as'))\"\n  shows \"(sat_precond_as s as)\""], "translations": [["", "lemma sat_precond_as_pair:\n  \"sat_precond_as s ((p, e) # as) = (p \\<subseteq>\\<^sub>f s \\<and> sat_precond_as (state_succ s (p, e)) as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_precond_as s ((p, e) # as) =\n    (p \\<subseteq>\\<^sub>f s \\<and> sat_precond_as (state_succ s (p, e)) as)", "by simp\n\n\n\\<comment> \\<open>NOTE 'fun' because of multiple defining equations.\\<close>"], ["", "fun rem_effectless_act where\n  \"rem_effectless_act [] = []\"\n| \"rem_effectless_act (a # as) = (if fmdom' (snd a) \\<noteq> {}\n  then (a # rem_effectless_act as)\n  else rem_effectless_act as\n)\"\n\n\n\\<comment> \\<open>NOTE 'fun' because of multiple defining equations.\\<close>"], ["", "fun no_effectless_act where\n  \"no_effectless_act [] = True\"\n| \"no_effectless_act (a # as) = ((fmdom' (snd a) \\<noteq> {}) \\<and> no_effectless_act as)\""], ["", "lemma graph_plan_lemma_4:\n  fixes s s' as vs P\n  assumes \"(\\<forall>a. (ListMem a as \\<and> P a) \\<longrightarrow> ((fmdom' (snd a) \\<inter> vs) = {}))\" \"sat_precond_as s as\"\n    \"sat_precond_as s' (filter (\\<lambda>a. \\<not>(P a)) as)\" \"(fmrestrict_set vs s = fmrestrict_set vs s')\"\n  shows \"\n    (fmrestrict_set vs (exec_plan s as)\n    = fmrestrict_set vs (exec_plan s' (filter (\\<lambda> a. \\<not>(P a)) as)))\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s as) =\n    fmrestrict_set vs (exec_plan s' (filter (\\<lambda>a. \\<not> P a) as))", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>a.\n     ListMem a as \\<and> P a \\<longrightarrow>\n     fmdom' (snd a) \\<inter> vs = {}\n  sat_precond_as s as\n  sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as)\n  fmrestrict_set vs s = fmrestrict_set vs s'\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s as) =\n    fmrestrict_set vs (exec_plan s' (filter (\\<lambda>a. \\<not> P a) as))", "unfolding exec_plan.simps"], ["proof (prove)\nusing this:\n  \\<forall>a.\n     ListMem a as \\<and> P a \\<longrightarrow>\n     fmdom' (snd a) \\<inter> vs = {}\n  sat_precond_as s as\n  sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as)\n  fmrestrict_set vs s = fmrestrict_set vs s'\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s as) =\n    fmrestrict_set vs (exec_plan s' (filter (\\<lambda>a. \\<not> P a) as))", "proof(induction as arbitrary: s s' vs P)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s s' vs P.\n       \\<lbrakk>\\<forall>a.\n                   ListMem a [] \\<and> P a \\<longrightarrow>\n                   fmdom' (snd a) \\<inter> vs = {};\n        sat_precond_as s [];\n        sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) []);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s []) =\n                         fmrestrict_set vs\n                          (exec_plan s'\n                            (filter (\\<lambda>a. \\<not> P a) []))\n 2. \\<And>a as s s' vs P.\n       \\<lbrakk>\\<And>s s' vs P.\n                   \\<lbrakk>\\<forall>a.\n                               ListMem a as \\<and> P a \\<longrightarrow>\n                               fmdom' (snd a) \\<inter> vs = {};\n                    sat_precond_as s as;\n                    sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as);\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s as) =\n                                     fmrestrict_set vs\n(exec_plan s' (filter (\\<lambda>a. \\<not> P a) as));\n        \\<forall>aa.\n           ListMem aa (a # as) \\<and> P aa \\<longrightarrow>\n           fmdom' (snd aa) \\<inter> vs = {};\n        sat_precond_as s (a # as);\n        sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) (a # as));\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                         fmrestrict_set vs\n                          (exec_plan s'\n                            (filter (\\<lambda>a. \\<not> P a) (a # as)))", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>a.\n              ListMem a as \\<and> ?P a \\<longrightarrow>\n              fmdom' (snd a) \\<inter> ?vs = {};\n   sat_precond_as ?s as;\n   sat_precond_as ?s' (filter (\\<lambda>a. \\<not> ?P a) as);\n   fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s'\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (exec_plan ?s as) =\n                    fmrestrict_set ?vs\n                     (exec_plan ?s' (filter (\\<lambda>a. \\<not> ?P a) as))\n  \\<forall>aa.\n     ListMem aa (a # as) \\<and> P aa \\<longrightarrow>\n     fmdom' (snd aa) \\<inter> vs = {}\n  sat_precond_as s (a # as)\n  sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) (a # as))\n  fmrestrict_set vs s = fmrestrict_set vs s'\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs P.\n       \\<lbrakk>\\<forall>a.\n                   ListMem a [] \\<and> P a \\<longrightarrow>\n                   fmdom' (snd a) \\<inter> vs = {};\n        sat_precond_as s [];\n        sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) []);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s []) =\n                         fmrestrict_set vs\n                          (exec_plan s'\n                            (filter (\\<lambda>a. \\<not> P a) []))\n 2. \\<And>a as s s' vs P.\n       \\<lbrakk>\\<And>s s' vs P.\n                   \\<lbrakk>\\<forall>a.\n                               ListMem a as \\<and> P a \\<longrightarrow>\n                               fmdom' (snd a) \\<inter> vs = {};\n                    sat_precond_as s as;\n                    sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as);\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s as) =\n                                     fmrestrict_set vs\n(exec_plan s' (filter (\\<lambda>a. \\<not> P a) as));\n        \\<forall>aa.\n           ListMem aa (a # as) \\<and> P aa \\<longrightarrow>\n           fmdom' (snd aa) \\<inter> vs = {};\n        sat_precond_as s (a # as);\n        sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) (a # as));\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                         fmrestrict_set vs\n                          (exec_plan s'\n                            (filter (\\<lambda>a. \\<not> P a) (a # as)))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>a.\n              ListMem a as \\<and> ?P a \\<longrightarrow>\n              fmdom' (snd a) \\<inter> ?vs = {};\n   sat_precond_as ?s as;\n   sat_precond_as ?s' (filter (\\<lambda>a. \\<not> ?P a) as);\n   fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s'\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (exec_plan ?s as) =\n                    fmrestrict_set ?vs\n                     (exec_plan ?s' (filter (\\<lambda>a. \\<not> ?P a) as))\n  \\<forall>aa.\n     ListMem aa (a # as) \\<and> P aa \\<longrightarrow>\n     fmdom' (snd aa) \\<inter> vs = {}\n  sat_precond_as s (a # as)\n  sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) (a # as))\n  fmrestrict_set vs s = fmrestrict_set vs s'", "have 1: \"fst a \\<subseteq>\\<^sub>f s\" \"sat_precond_as (state_succ s a) as\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a.\n              ListMem a as \\<and> ?P a \\<longrightarrow>\n              fmdom' (snd a) \\<inter> ?vs = {};\n   sat_precond_as ?s as;\n   sat_precond_as ?s' (filter (\\<lambda>a. \\<not> ?P a) as);\n   fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s'\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (exec_plan ?s as) =\n                    fmrestrict_set ?vs\n                     (exec_plan ?s' (filter (\\<lambda>a. \\<not> ?P a) as))\n  \\<forall>aa.\n     ListMem aa (a # as) \\<and> P aa \\<longrightarrow>\n     fmdom' (snd aa) \\<inter> vs = {}\n  sat_precond_as s (a # as)\n  sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) (a # as))\n  fmrestrict_set vs s = fmrestrict_set vs s'\n\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s &&& sat_precond_as (state_succ s a) as", "by auto"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s\n  sat_precond_as (state_succ s a) as\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs P.\n       \\<lbrakk>\\<forall>a.\n                   ListMem a [] \\<and> P a \\<longrightarrow>\n                   fmdom' (snd a) \\<inter> vs = {};\n        sat_precond_as s [];\n        sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) []);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s []) =\n                         fmrestrict_set vs\n                          (exec_plan s'\n                            (filter (\\<lambda>a. \\<not> P a) []))\n 2. \\<And>a as s s' vs P.\n       \\<lbrakk>\\<And>s s' vs P.\n                   \\<lbrakk>\\<forall>a.\n                               ListMem a as \\<and> P a \\<longrightarrow>\n                               fmdom' (snd a) \\<inter> vs = {};\n                    sat_precond_as s as;\n                    sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as);\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s as) =\n                                     fmrestrict_set vs\n(exec_plan s' (filter (\\<lambda>a. \\<not> P a) as));\n        \\<forall>aa.\n           ListMem aa (a # as) \\<and> P aa \\<longrightarrow>\n           fmdom' (snd aa) \\<inter> vs = {};\n        sat_precond_as s (a # as);\n        sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) (a # as));\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                         fmrestrict_set vs\n                          (exec_plan s'\n                            (filter (\\<lambda>a. \\<not> P a) (a # as)))", "then"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s\n  sat_precond_as (state_succ s a) as", "have 2: \"\\<forall>a'. ListMem a' as \\<and> P a' \\<longrightarrow> fmdom' (snd a') \\<inter> vs = {}\""], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n  sat_precond_as (state_succ s a) as\n\ngoal (1 subgoal):\n 1. \\<forall>a'.\n       ListMem a' as \\<and> P a' \\<longrightarrow>\n       fmdom' (snd a') \\<inter> vs = {}", "by (simp add: Cons.prems(1) insert)"], ["proof (state)\nthis:\n  \\<forall>a'.\n     ListMem a' as \\<and> P a' \\<longrightarrow>\n     fmdom' (snd a') \\<inter> vs = {}\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs P.\n       \\<lbrakk>\\<forall>a.\n                   ListMem a [] \\<and> P a \\<longrightarrow>\n                   fmdom' (snd a) \\<inter> vs = {};\n        sat_precond_as s [];\n        sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) []);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s []) =\n                         fmrestrict_set vs\n                          (exec_plan s'\n                            (filter (\\<lambda>a. \\<not> P a) []))\n 2. \\<And>a as s s' vs P.\n       \\<lbrakk>\\<And>s s' vs P.\n                   \\<lbrakk>\\<forall>a.\n                               ListMem a as \\<and> P a \\<longrightarrow>\n                               fmdom' (snd a) \\<inter> vs = {};\n                    sat_precond_as s as;\n                    sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as);\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s as) =\n                                     fmrestrict_set vs\n(exec_plan s' (filter (\\<lambda>a. \\<not> P a) as));\n        \\<forall>aa.\n           ListMem aa (a # as) \\<and> P aa \\<longrightarrow>\n           fmdom' (snd aa) \\<inter> vs = {};\n        sat_precond_as s (a # as);\n        sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) (a # as));\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                         fmrestrict_set vs\n                          (exec_plan s'\n                            (filter (\\<lambda>a. \\<not> P a) (a # as)))", "then"], ["proof (chain)\npicking this:\n  \\<forall>a'.\n     ListMem a' as \\<and> P a' \\<longrightarrow>\n     fmdom' (snd a') \\<inter> vs = {}", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>a'.\n     ListMem a' as \\<and> P a' \\<longrightarrow>\n     fmdom' (snd a') \\<inter> vs = {}\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s (a # as)) =\n    fmrestrict_set vs\n     (exec_plan s' (filter (\\<lambda>a. \\<not> P a) (a # as)))", "proof (cases \"P a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))\n 2. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "case True"], ["proof (state)\nthis:\n  P a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))\n 2. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "{"], ["proof (state)\nthis:\n  P a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))\n 2. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "then"], ["proof (chain)\npicking this:\n  P a", "have \"filter (\\<lambda>a. \\<not>(P a)) (a # as) = filter (\\<lambda>a. \\<not>(P a)) as\""], ["proof (prove)\nusing this:\n  P a\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>a. \\<not> P a) (a # as) =\n    filter (\\<lambda>a. \\<not> P a) as", "by simp"], ["proof (state)\nthis:\n  filter (\\<lambda>a. \\<not> P a) (a # as) =\n  filter (\\<lambda>a. \\<not> P a) as\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))\n 2. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>a. \\<not> P a) (a # as) =\n  filter (\\<lambda>a. \\<not> P a) as", "have \"sat_precond_as s' (filter (\\<lambda>a. \\<not>(P a)) as)\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>a. \\<not> P a) (a # as) =\n  filter (\\<lambda>a. \\<not> P a) as\n\ngoal (1 subgoal):\n 1. sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as)", "using Cons.prems(3) True"], ["proof (prove)\nusing this:\n  filter (\\<lambda>a. \\<not> P a) (a # as) =\n  filter (\\<lambda>a. \\<not> P a) as\n  sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) (a # as))\n  P a\n\ngoal (1 subgoal):\n 1. sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as)", "by argo"], ["proof (state)\nthis:\n  sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))\n 2. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "}"], ["proof (state)\nthis:\n  sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))\n 2. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "note a = this"], ["proof (state)\nthis:\n  sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))\n 2. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "{"], ["proof (state)\nthis:\n  sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))\n 2. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "then"], ["proof (chain)\npicking this:\n  sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as)", "have \"ListMem a (a # as)\""], ["proof (prove)\nusing this:\n  sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as)\n\ngoal (1 subgoal):\n 1. ListMem a (a # as)", "using elem"], ["proof (prove)\nusing this:\n  sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as)\n  ListMem ?x (?x # ?xs)\n\ngoal (1 subgoal):\n 1. ListMem a (a # as)", "by fast"], ["proof (state)\nthis:\n  ListMem a (a # as)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))\n 2. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "then"], ["proof (chain)\npicking this:\n  ListMem a (a # as)", "have \"(fmdom' (snd a) \\<inter> vs) = {}\""], ["proof (prove)\nusing this:\n  ListMem a (a # as)\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs = {}", "using Cons.prems(1) True"], ["proof (prove)\nusing this:\n  ListMem a (a # as)\n  \\<forall>aa.\n     ListMem aa (a # as) \\<and> P aa \\<longrightarrow>\n     fmdom' (snd aa) \\<inter> vs = {}\n  P a\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs = {}", "by blast"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> vs = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))\n 2. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<inter> vs = {}", "have \"fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\""], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<inter> vs = {}\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "using disj_imp_eq_proj_exec[symmetric]"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<inter> vs = {}\n  fmdom' (snd ?a) \\<inter> ?vs = {} \\<Longrightarrow>\n  fmrestrict_set ?vs (state_succ ?s ?a) = fmrestrict_set ?vs ?s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "by fast"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))\n 2. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "}"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))\n 2. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s (a # as)) =\n    fmrestrict_set vs\n     (exec_plan s' (filter (\\<lambda>a. \\<not> P a) (a # as)))", "unfolding exec_plan.simps"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan (state_succ s a) as) =\n    fmrestrict_set vs\n     (exec_plan s' (filter (\\<lambda>a. \\<not> P a) (a # as)))", "using Cons.prems(4) 1(2) 2 True a Cons.IH[where s=\"state_succ s a\" and s'=s']"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n  fmrestrict_set vs s = fmrestrict_set vs s'\n  sat_precond_as (state_succ s a) as\n  \\<forall>a'.\n     ListMem a' as \\<and> P a' \\<longrightarrow>\n     fmdom' (snd a') \\<inter> vs = {}\n  P a\n  sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) as)\n  \\<lbrakk>\\<forall>a.\n              ListMem a as \\<and> ?P a \\<longrightarrow>\n              fmdom' (snd a) \\<inter> ?vs = {};\n   sat_precond_as (state_succ s a) as;\n   sat_precond_as s' (filter (\\<lambda>a. \\<not> ?P a) as);\n   fmrestrict_set ?vs (state_succ s a) = fmrestrict_set ?vs s'\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (exec_plan (state_succ s a) as) =\n                    fmrestrict_set ?vs\n                     (exec_plan s' (filter (\\<lambda>a. \\<not> ?P a) as))\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan (state_succ s a) as) =\n    fmrestrict_set vs\n     (exec_plan s' (filter (\\<lambda>a. \\<not> P a) (a # as)))", "by fastforce"], ["proof (state)\nthis:\n  fmrestrict_set vs (exec_plan s (a # as)) =\n  fmrestrict_set vs\n   (exec_plan s' (filter (\\<lambda>a. \\<not> P a) (a # as)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "case False"], ["proof (state)\nthis:\n  \\<not> P a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "{"], ["proof (state)\nthis:\n  \\<not> P a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "have \"filter (\\<lambda>a. \\<not>(P a)) (a # as) = a # filter (\\<lambda>a. \\<not>(P a)) as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>a. \\<not> P a) (a # as) =\n    a # filter (\\<lambda>a. \\<not> P a) as", "using False"], ["proof (prove)\nusing this:\n  \\<not> P a\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>a. \\<not> P a) (a # as) =\n    a # filter (\\<lambda>a. \\<not> P a) as", "by auto"], ["proof (state)\nthis:\n  filter (\\<lambda>a. \\<not> P a) (a # as) =\n  a # filter (\\<lambda>a. \\<not> P a) as\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>a. \\<not> P a) (a # as) =\n  a # filter (\\<lambda>a. \\<not> P a) as", "have \"fst a \\<subseteq>\\<^sub>f s'\" \"sat_precond_as (state_succ s' a) (filter (\\<lambda>a. \\<not>(P a)) as)\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>a. \\<not> P a) (a # as) =\n  a # filter (\\<lambda>a. \\<not> P a) as\n\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s' &&&\n    sat_precond_as (state_succ s' a) (filter (\\<lambda>a. \\<not> P a) as)", "using Cons.prems(3) False"], ["proof (prove)\nusing this:\n  filter (\\<lambda>a. \\<not> P a) (a # as) =\n  a # filter (\\<lambda>a. \\<not> P a) as\n  sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) (a # as))\n  \\<not> P a\n\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s' &&&\n    sat_precond_as (state_succ s' a) (filter (\\<lambda>a. \\<not> P a) as)", "by force+"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s'\n  sat_precond_as (state_succ s' a) (filter (\\<lambda>a. \\<not> P a) as)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "}"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s'\n  sat_precond_as (state_succ s' a) (filter (\\<lambda>a. \\<not> P a) as)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "note b = this"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s'\n  sat_precond_as (state_succ s' a) (filter (\\<lambda>a. \\<not> P a) as)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "then"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s'\n  sat_precond_as (state_succ s' a) (filter (\\<lambda>a. \\<not> P a) as)", "have \"fmrestrict_set vs (state_succ s a) = fmrestrict_set vs (state_succ s' a)\""], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s'\n  sat_precond_as (state_succ s' a) (filter (\\<lambda>a. \\<not> P a) as)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs (state_succ s' a)", "using proj_eq_proj_exec_eq"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s'\n  sat_precond_as (state_succ s' a) (filter (\\<lambda>a. \\<not> P a) as)\n  \\<lbrakk>fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s';\n   (fst ?a \\<subseteq>\\<^sub>f ?s) = (fst ?a' \\<subseteq>\\<^sub>f ?s');\n   fmrestrict_set ?vs (snd ?a) = fmrestrict_set ?vs (snd ?a')\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (state_succ ?s ?a) =\n                    fmrestrict_set ?vs (state_succ ?s' ?a')\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs (state_succ s' a)", "using Cons.prems(4) 1(1)"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s'\n  sat_precond_as (state_succ s' a) (filter (\\<lambda>a. \\<not> P a) as)\n  \\<lbrakk>fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s';\n   (fst ?a \\<subseteq>\\<^sub>f ?s) = (fst ?a' \\<subseteq>\\<^sub>f ?s');\n   fmrestrict_set ?vs (snd ?a) = fmrestrict_set ?vs (snd ?a')\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (state_succ ?s ?a) =\n                    fmrestrict_set ?vs (state_succ ?s' ?a')\n  fmrestrict_set vs s = fmrestrict_set vs s'\n  fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs (state_succ s' a)", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs (state_succ s' a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a'.\n                ListMem a' as \\<and> P a' \\<longrightarrow>\n                fmdom' (snd a') \\<inter> vs = {};\n     \\<not> P a\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                      fmrestrict_set vs\n                       (exec_plan s'\n                         (filter (\\<lambda>a. \\<not> P a) (a # as)))", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs (state_succ s' a)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs (state_succ s' a)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s (a # as)) =\n    fmrestrict_set vs\n     (exec_plan s' (filter (\\<lambda>a. \\<not> P a) (a # as)))", "unfolding exec_plan.simps"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs (state_succ s' a)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan (state_succ s a) as) =\n    fmrestrict_set vs\n     (exec_plan s' (filter (\\<lambda>a. \\<not> P a) (a # as)))", "using 1(2) 2 False b Cons.IH[where s=\"state_succ s a\" and s'=\"state_succ s' a\"]"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs (state_succ s' a)\n  sat_precond_as (state_succ s a) as\n  \\<forall>a'.\n     ListMem a' as \\<and> P a' \\<longrightarrow>\n     fmdom' (snd a') \\<inter> vs = {}\n  \\<not> P a\n  fst a \\<subseteq>\\<^sub>f s'\n  sat_precond_as (state_succ s' a) (filter (\\<lambda>a. \\<not> P a) as)\n  \\<lbrakk>\\<forall>a.\n              ListMem a as \\<and> ?P a \\<longrightarrow>\n              fmdom' (snd a) \\<inter> ?vs = {};\n   sat_precond_as (state_succ s a) as;\n   sat_precond_as (state_succ s' a) (filter (\\<lambda>a. \\<not> ?P a) as);\n   fmrestrict_set ?vs (state_succ s a) =\n   fmrestrict_set ?vs (state_succ s' a)\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (exec_plan (state_succ s a) as) =\n                    fmrestrict_set ?vs\n                     (exec_plan (state_succ s' a)\n                       (filter (\\<lambda>a. \\<not> ?P a) as))\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan (state_succ s a) as) =\n    fmrestrict_set vs\n     (exec_plan s' (filter (\\<lambda>a. \\<not> P a) (a # as)))", "by force"], ["proof (state)\nthis:\n  fmrestrict_set vs (exec_plan s (a # as)) =\n  fmrestrict_set vs\n   (exec_plan s' (filter (\\<lambda>a. \\<not> P a) (a # as)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmrestrict_set vs (exec_plan s (a # as)) =\n  fmrestrict_set vs\n   (exec_plan s' (filter (\\<lambda>a. \\<not> P a) (a # as)))\n\ngoal (1 subgoal):\n 1. \\<And>s s' vs P.\n       \\<lbrakk>\\<forall>a.\n                   ListMem a [] \\<and> P a \\<longrightarrow>\n                   fmdom' (snd a) \\<inter> vs = {};\n        sat_precond_as s [];\n        sat_precond_as s' (filter (\\<lambda>a. \\<not> P a) []);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s []) =\n                         fmrestrict_set vs\n                          (exec_plan s'\n                            (filter (\\<lambda>a. \\<not> P a) []))", "qed simp\n\n\n\\<comment> \\<open>NOTE curried instead of triples.\\<close>\n\\<comment> \\<open>NOTE 'fun' because of multiple defining equations.\\<close>"], ["", "fun rem_condless_act where\n  \"rem_condless_act s pfx_a [] = pfx_a\"\n| \"rem_condless_act s pfx_a (a # as) = (if fst a \\<subseteq>\\<^sub>f exec_plan s pfx_a\n    then rem_condless_act s (pfx_a @ [a]) as\n    else rem_condless_act s pfx_a as\n  )\""], ["", "lemma rem_condless_act_pair: \"\n    rem_condless_act s pfx_a ((p, e) # as) = (if p \\<subseteq>\\<^sub>f exec_plan s pfx_a\n      then rem_condless_act s (pfx_a @ [(p,e)]) as\n      else rem_condless_act s pfx_a as\n    )\n  \"\n  \"(rem_condless_act s pfx_a [] = pfx_a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rem_condless_act s pfx_a ((p, e) # as) =\n    (if p \\<subseteq>\\<^sub>f exec_plan s pfx_a\n     then rem_condless_act s (pfx_a @ [(p, e)]) as\n     else rem_condless_act s pfx_a as) &&&\n    rem_condless_act s pfx_a [] = pfx_a", "by simp+"], ["", "lemma exec_remcondless_cons:\n  fixes s h as pfx\n  shows \"\n    exec_plan s (rem_condless_act s (h # pfx) as)\n    = exec_plan (state_succ s h) (rem_condless_act (state_succ s h) pfx as)\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s (rem_condless_act s (h # pfx) as) =\n    exec_plan (state_succ s h) (rem_condless_act (state_succ s h) pfx as)", "by (induction as arbitrary: s h pfx) auto"], ["", "lemma rem_condless_valid_1:\n  fixes as s\n  shows \"(exec_plan s as = exec_plan s (rem_condless_act s [] as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s as = exec_plan s (rem_condless_act s [] as)", "by (induction as arbitrary: s)\n    (auto simp add: exec_remcondless_cons FDOM_state_succ state_succ_def)"], ["", "lemma rem_condless_act_cons:\n  fixes h' pfx as s\n  shows \"(rem_condless_act s (h' # pfx) as) = (h' # rem_condless_act (state_succ s h') pfx as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rem_condless_act s (h' # pfx) as =\n    h' # rem_condless_act (state_succ s h') pfx as", "by (induction as arbitrary: h' pfx s) auto"], ["", "lemma rem_condless_act_cons_prefix:\n  fixes h h' as as' s\n  assumes \"prefix (h' # as') (rem_condless_act s [h] as)\"\n  shows \"(\n    (prefix as' (rem_condless_act (state_succ s h) [] as))\n    \\<and> h' = h\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix as' (rem_condless_act (state_succ s h) [] as) \\<and> h' = h", "using assms"], ["proof (prove)\nusing this:\n  prefix (h' # as') (rem_condless_act s [h] as)\n\ngoal (1 subgoal):\n 1. prefix as' (rem_condless_act (state_succ s h) [] as) \\<and> h' = h", "proof (induction as arbitrary: h h' as' s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>h h' as' s.\n       prefix (h' # as') (rem_condless_act s [h] []) \\<Longrightarrow>\n       prefix as' (rem_condless_act (state_succ s h) [] []) \\<and> h' = h\n 2. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "case Nil"], ["proof (state)\nthis:\n  prefix (h' # as') (rem_condless_act s [h] [])\n\ngoal (2 subgoals):\n 1. \\<And>h h' as' s.\n       prefix (h' # as') (rem_condless_act s [h] []) \\<Longrightarrow>\n       prefix as' (rem_condless_act (state_succ s h) [] []) \\<and> h' = h\n 2. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "then"], ["proof (chain)\npicking this:\n  prefix (h' # as') (rem_condless_act s [h] [])", "have \"rem_condless_act s [h] [] = [h]\""], ["proof (prove)\nusing this:\n  prefix (h' # as') (rem_condless_act s [h] [])\n\ngoal (1 subgoal):\n 1. rem_condless_act s [h] [] = [h]", "by simp"], ["proof (state)\nthis:\n  rem_condless_act s [h] [] = [h]\n\ngoal (2 subgoals):\n 1. \\<And>h h' as' s.\n       prefix (h' # as') (rem_condless_act s [h] []) \\<Longrightarrow>\n       prefix as' (rem_condless_act (state_succ s h) [] []) \\<and> h' = h\n 2. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "then"], ["proof (chain)\npicking this:\n  rem_condless_act s [h] [] = [h]", "have 1: \"as' = []\""], ["proof (prove)\nusing this:\n  rem_condless_act s [h] [] = [h]\n\ngoal (1 subgoal):\n 1. as' = []", "using Nil.prems"], ["proof (prove)\nusing this:\n  rem_condless_act s [h] [] = [h]\n  prefix (h' # as') (rem_condless_act s [h] [])\n\ngoal (1 subgoal):\n 1. as' = []", "by simp"], ["proof (state)\nthis:\n  as' = []\n\ngoal (2 subgoals):\n 1. \\<And>h h' as' s.\n       prefix (h' # as') (rem_condless_act s [h] []) \\<Longrightarrow>\n       prefix as' (rem_condless_act (state_succ s h) [] []) \\<and> h' = h\n 2. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "then"], ["proof (chain)\npicking this:\n  as' = []", "have \"rem_condless_act (state_succ s h) [] [] = []\""], ["proof (prove)\nusing this:\n  as' = []\n\ngoal (1 subgoal):\n 1. rem_condless_act (state_succ s h) [] [] = []", "by simp"], ["proof (state)\nthis:\n  rem_condless_act (state_succ s h) [] [] = []\n\ngoal (2 subgoals):\n 1. \\<And>h h' as' s.\n       prefix (h' # as') (rem_condless_act s [h] []) \\<Longrightarrow>\n       prefix as' (rem_condless_act (state_succ s h) [] []) \\<and> h' = h\n 2. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "then"], ["proof (chain)\npicking this:\n  rem_condless_act (state_succ s h) [] [] = []", "have 2: \"prefix as' (rem_condless_act (state_succ s h) [] [])\""], ["proof (prove)\nusing this:\n  rem_condless_act (state_succ s h) [] [] = []\n\ngoal (1 subgoal):\n 1. prefix as' (rem_condless_act (state_succ s h) [] [])", "using 1"], ["proof (prove)\nusing this:\n  rem_condless_act (state_succ s h) [] [] = []\n  as' = []\n\ngoal (1 subgoal):\n 1. prefix as' (rem_condless_act (state_succ s h) [] [])", "by simp"], ["proof (state)\nthis:\n  prefix as' (rem_condless_act (state_succ s h) [] [])\n\ngoal (2 subgoals):\n 1. \\<And>h h' as' s.\n       prefix (h' # as') (rem_condless_act s [h] []) \\<Longrightarrow>\n       prefix as' (rem_condless_act (state_succ s h) [] []) \\<and> h' = h\n 2. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "then"], ["proof (chain)\npicking this:\n  prefix as' (rem_condless_act (state_succ s h) [] [])", "have \"h = h'\""], ["proof (prove)\nusing this:\n  prefix as' (rem_condless_act (state_succ s h) [] [])\n\ngoal (1 subgoal):\n 1. h = h'", "using Nil.prems"], ["proof (prove)\nusing this:\n  prefix as' (rem_condless_act (state_succ s h) [] [])\n  prefix (h' # as') (rem_condless_act s [h] [])\n\ngoal (1 subgoal):\n 1. h = h'", "by force"], ["proof (state)\nthis:\n  h = h'\n\ngoal (2 subgoals):\n 1. \\<And>h h' as' s.\n       prefix (h' # as') (rem_condless_act s [h] []) \\<Longrightarrow>\n       prefix as' (rem_condless_act (state_succ s h) [] []) \\<and> h' = h\n 2. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "then"], ["proof (chain)\npicking this:\n  h = h'", "show ?case"], ["proof (prove)\nusing this:\n  h = h'\n\ngoal (1 subgoal):\n 1. prefix as' (rem_condless_act (state_succ s h) [] []) \\<and> h' = h", "using 2"], ["proof (prove)\nusing this:\n  h = h'\n  prefix as' (rem_condless_act (state_succ s h) [] [])\n\ngoal (1 subgoal):\n 1. prefix as' (rem_condless_act (state_succ s h) [] []) \\<and> h' = h", "by blast"], ["proof (state)\nthis:\n  prefix as' (rem_condless_act (state_succ s h) [] []) \\<and> h' = h\n\ngoal (1 subgoal):\n 1. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "case (Cons a as)"], ["proof (state)\nthis:\n  prefix (?h' # ?as') (rem_condless_act ?s [?h] as) \\<Longrightarrow>\n  prefix ?as' (rem_condless_act (state_succ ?s ?h) [] as) \\<and> ?h' = ?h\n  prefix (h' # as') (rem_condless_act s [h] (a # as))\n\ngoal (1 subgoal):\n 1. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "{"], ["proof (state)\nthis:\n  prefix (?h' # ?as') (rem_condless_act ?s [?h] as) \\<Longrightarrow>\n  prefix ?as' (rem_condless_act (state_succ ?s ?h) [] as) \\<and> ?h' = ?h\n  prefix (h' # as') (rem_condless_act s [h] (a # as))\n\ngoal (1 subgoal):\n 1. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "have \"rem_condless_act s [h] (a # as) = h # rem_condless_act (state_succ s h) [] (a # as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rem_condless_act s [h] (a # as) =\n    h # rem_condless_act (state_succ s h) [] (a # as)", "using rem_condless_act_cons"], ["proof (prove)\nusing this:\n  rem_condless_act ?s (?h' # ?pfx) ?as =\n  ?h' # rem_condless_act (state_succ ?s ?h') ?pfx ?as\n\ngoal (1 subgoal):\n 1. rem_condless_act s [h] (a # as) =\n    h # rem_condless_act (state_succ s h) [] (a # as)", "by fast"], ["proof (state)\nthis:\n  rem_condless_act s [h] (a # as) =\n  h # rem_condless_act (state_succ s h) [] (a # as)\n\ngoal (1 subgoal):\n 1. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "then"], ["proof (chain)\npicking this:\n  rem_condless_act s [h] (a # as) =\n  h # rem_condless_act (state_succ s h) [] (a # as)", "have \"h = h'\""], ["proof (prove)\nusing this:\n  rem_condless_act s [h] (a # as) =\n  h # rem_condless_act (state_succ s h) [] (a # as)\n\ngoal (1 subgoal):\n 1. h = h'", "using Cons.prems"], ["proof (prove)\nusing this:\n  rem_condless_act s [h] (a # as) =\n  h # rem_condless_act (state_succ s h) [] (a # as)\n  prefix (h' # as') (rem_condless_act s [h] (a # as))\n\ngoal (1 subgoal):\n 1. h = h'", "by simp"], ["proof (state)\nthis:\n  h = h'\n\ngoal (1 subgoal):\n 1. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "}"], ["proof (state)\nthis:\n  h = h'\n\ngoal (1 subgoal):\n 1. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "moreover"], ["proof (state)\nthis:\n  h = h'\n\ngoal (1 subgoal):\n 1. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "{"], ["proof (state)\nthis:\n  h = h'\n\ngoal (1 subgoal):\n 1. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "obtain l where \"(h' # as') @ l = (h # rem_condless_act (state_succ s h) [] (a # as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        (h' # as') @ l =\n        h # rem_condless_act (state_succ s h) [] (a # as) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using Cons.prems rem_condless_act_cons prefixE"], ["proof (prove)\nusing this:\n  prefix (h' # as') (rem_condless_act s [h] (a # as))\n  rem_condless_act ?s (?h' # ?pfx) ?as =\n  ?h' # rem_condless_act (state_succ ?s ?h') ?pfx ?as\n  \\<lbrakk>prefix ?xs ?ys;\n   \\<And>zs. ?ys = ?xs @ zs \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        (h' # as') @ l =\n        h # rem_condless_act (state_succ s h) [] (a # as) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (h' # as') @ l = h # rem_condless_act (state_succ s h) [] (a # as)\n\ngoal (1 subgoal):\n 1. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "then"], ["proof (chain)\npicking this:\n  (h' # as') @ l = h # rem_condless_act (state_succ s h) [] (a # as)", "have \"prefix (as' @ l) (rem_condless_act (state_succ s h) [] (a # as))\""], ["proof (prove)\nusing this:\n  (h' # as') @ l = h # rem_condless_act (state_succ s h) [] (a # as)\n\ngoal (1 subgoal):\n 1. prefix (as' @ l) (rem_condless_act (state_succ s h) [] (a # as))", "by simp"], ["proof (state)\nthis:\n  prefix (as' @ l) (rem_condless_act (state_succ s h) [] (a # as))\n\ngoal (1 subgoal):\n 1. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "then"], ["proof (chain)\npicking this:\n  prefix (as' @ l) (rem_condless_act (state_succ s h) [] (a # as))", "have \"prefix as' (rem_condless_act (state_succ s h) [] (a # as))\""], ["proof (prove)\nusing this:\n  prefix (as' @ l) (rem_condless_act (state_succ s h) [] (a # as))\n\ngoal (1 subgoal):\n 1. prefix as' (rem_condless_act (state_succ s h) [] (a # as))", "using append_prefixD"], ["proof (prove)\nusing this:\n  prefix (as' @ l) (rem_condless_act (state_succ s h) [] (a # as))\n  prefix (?xs @ ?ys) ?zs \\<Longrightarrow> prefix ?xs ?zs\n\ngoal (1 subgoal):\n 1. prefix as' (rem_condless_act (state_succ s h) [] (a # as))", "by blast"], ["proof (state)\nthis:\n  prefix as' (rem_condless_act (state_succ s h) [] (a # as))\n\ngoal (1 subgoal):\n 1. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "}"], ["proof (state)\nthis:\n  prefix as' (rem_condless_act (state_succ s h) [] (a # as))\n\ngoal (1 subgoal):\n 1. \\<And>a as h h' as' s.\n       \\<lbrakk>\\<And>h h' as' s.\n                   prefix (h' # as')\n                    (rem_condless_act s [h] as) \\<Longrightarrow>\n                   prefix as'\n                    (rem_condless_act (state_succ s h) [] as) \\<and>\n                   h' = h;\n        prefix (h' # as') (rem_condless_act s [h] (a # as))\\<rbrakk>\n       \\<Longrightarrow> prefix as'\n                          (rem_condless_act (state_succ s h) []\n                            (a # as)) \\<and>\n                         h' = h", "ultimately"], ["proof (chain)\npicking this:\n  h = h'\n  prefix as' (rem_condless_act (state_succ s h) [] (a # as))", "show ?case"], ["proof (prove)\nusing this:\n  h = h'\n  prefix as' (rem_condless_act (state_succ s h) [] (a # as))\n\ngoal (1 subgoal):\n 1. prefix as' (rem_condless_act (state_succ s h) [] (a # as)) \\<and> h' = h", "by fastforce"], ["proof (state)\nthis:\n  prefix as' (rem_condless_act (state_succ s h) [] (a # as)) \\<and> h' = h\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rem_condless_valid_2:\n  fixes as s\n  shows \"sat_precond_as s (rem_condless_act s [] as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_precond_as s (rem_condless_act s [] as)", "by (induction as arbitrary: s) (auto simp: rem_condless_act_cons)"], ["", "lemma rem_condless_valid_3:\n  fixes as s\n  shows \"length (rem_condless_act s [] as) \\<le> length as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (rem_condless_act s [] as) \\<le> length as", "by (induction as arbitrary: s)\n    (auto simp: rem_condless_act_cons le_SucI)"], ["", "lemma rem_condless_valid_4:\n  fixes as A s\n  assumes \"(set as \\<subseteq> A)\"\n  shows \"(set (rem_condless_act s [] as) \\<subseteq> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (rem_condless_act s [] as) \\<subseteq> A", "using assms"], ["proof (prove)\nusing this:\n  set as \\<subseteq> A\n\ngoal (1 subgoal):\n 1. set (rem_condless_act s [] as) \\<subseteq> A", "by (induction as arbitrary: A s) (auto simp: rem_condless_act_cons)"], ["", "lemma rem_condless_valid_6:\n  fixes as s P\n  shows \"length (filter P (rem_condless_act s [] as)) \\<le> length (filter P as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (filter P (rem_condless_act s [] as)) \\<le> length (filter P as)", "proof (induction as arbitrary: P s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P s.\n       length (filter P (rem_condless_act s [] []))\n       \\<le> length (filter P [])\n 2. \\<And>a as P s.\n       (\\<And>P s.\n           length (filter P (rem_condless_act s [] as))\n           \\<le> length (filter P as)) \\<Longrightarrow>\n       length (filter P (rem_condless_act s [] (a # as)))\n       \\<le> length (filter P (a # as))", "case (Cons a as)"], ["proof (state)\nthis:\n  length (filter ?P (rem_condless_act ?s [] as)) \\<le> length (filter ?P as)\n\ngoal (2 subgoals):\n 1. \\<And>P s.\n       length (filter P (rem_condless_act s [] []))\n       \\<le> length (filter P [])\n 2. \\<And>a as P s.\n       (\\<And>P s.\n           length (filter P (rem_condless_act s [] as))\n           \\<le> length (filter P as)) \\<Longrightarrow>\n       length (filter P (rem_condless_act s [] (a # as)))\n       \\<le> length (filter P (a # as))", "then"], ["proof (chain)\npicking this:\n  length (filter ?P (rem_condless_act ?s [] as)) \\<le> length (filter ?P as)", "show ?case"], ["proof (prove)\nusing this:\n  length (filter ?P (rem_condless_act ?s [] as)) \\<le> length (filter ?P as)\n\ngoal (1 subgoal):\n 1. length (filter P (rem_condless_act s [] (a # as)))\n    \\<le> length (filter P (a # as))", "by (simp add: rem_condless_act_cons le_SucI)"], ["proof (state)\nthis:\n  length (filter P (rem_condless_act s [] (a # as)))\n  \\<le> length (filter P (a # as))\n\ngoal (1 subgoal):\n 1. \\<And>P s.\n       length (filter P (rem_condless_act s [] []))\n       \\<le> length (filter P [])", "qed simp"], ["", "lemma rem_condless_valid_7:\n  fixes s P as as2\n  assumes \"(list_all P as \\<and> list_all P as2)\"\n  shows \"list_all P (rem_condless_act s as2 as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all P (rem_condless_act s as2 as)", "using assms"], ["proof (prove)\nusing this:\n  list_all P as \\<and> list_all P as2\n\ngoal (1 subgoal):\n 1. list_all P (rem_condless_act s as2 as)", "by (induction as arbitrary: P s as2) auto"], ["", "lemma rem_condless_valid_8:\n  fixes s as\n  shows \"subseq (rem_condless_act s [] as) as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (rem_condless_act s [] as) as", "by (induction as arbitrary: s) (auto simp: sublist_cons_4 rem_condless_act_cons)"], ["", "lemma rem_condless_valid_10:\n  fixes PROB as\n  assumes \"as \\<in> (valid_plans PROB)\"\n  shows \"(rem_condless_act s [] as \\<in> valid_plans PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rem_condless_act s [] as \\<in> valid_plans PROB", "using assms valid_plans_def rem_condless_valid_1 rem_condless_valid_4"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  valid_plans ?prob \\<equiv> {as. set as \\<subseteq> ?prob}\n  exec_plan ?s ?as = exec_plan ?s (rem_condless_act ?s [] ?as)\n  set ?as \\<subseteq> ?A \\<Longrightarrow>\n  set (rem_condless_act ?s [] ?as) \\<subseteq> ?A\n\ngoal (1 subgoal):\n 1. rem_condless_act s [] as \\<in> valid_plans PROB", "by blast"], ["", "lemma rem_condless_valid:\n  fixes as A s\n  assumes \"(exec_plan s as = exec_plan s (rem_condless_act s [] as))\"\n    \"(sat_precond_as s (rem_condless_act s [] as))\"\n    \"(length (rem_condless_act s [] as) \\<le> length as)\"\n    \"((set as \\<subseteq> A) \\<longrightarrow> (set (rem_condless_act s [] as) \\<subseteq> A))\"\n  shows \"(\\<forall>P. (length (filter P (rem_condless_act s [] as)) \\<le> length (filter P as)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P.\n       length (filter P (rem_condless_act s [] as))\n       \\<le> length (filter P as)", "using rem_condless_valid_1  rem_condless_valid_2 rem_condless_valid_3 rem_condless_valid_6\n    rem_condless_valid_4"], ["proof (prove)\nusing this:\n  exec_plan ?s ?as = exec_plan ?s (rem_condless_act ?s [] ?as)\n  sat_precond_as ?s (rem_condless_act ?s [] ?as)\n  length (rem_condless_act ?s [] ?as) \\<le> length ?as\n  length (filter ?P (rem_condless_act ?s [] ?as))\n  \\<le> length (filter ?P ?as)\n  set ?as \\<subseteq> ?A \\<Longrightarrow>\n  set (rem_condless_act ?s [] ?as) \\<subseteq> ?A\n\ngoal (1 subgoal):\n 1. \\<forall>P.\n       length (filter P (rem_condless_act s [] as))\n       \\<le> length (filter P as)", "by fast\n\n\n\\<comment> \\<open>NOTE type of `as` had to be fixed for lemma submap\\_imp\\_state\\_succ\\_submap.\\<close>"], ["", "lemma submap_sat_precond_submap:\n  fixes as :: \"'a action list\"\n  assumes \"(s1  \\<subseteq>\\<^sub>f s2)\" \"(sat_precond_as s1 as)\"\n  shows \"(sat_precond_as s2 as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_precond_as s2 as", "using assms"], ["proof (prove)\nusing this:\n  s1 \\<subseteq>\\<^sub>f s2\n  sat_precond_as s1 as\n\ngoal (1 subgoal):\n 1. sat_precond_as s2 as", "proof (induction as arbitrary: s1 s2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 (a # as)", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0; sat_precond_as ?s1.0 as\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as ?s2.0 as\n  s1 \\<subseteq>\\<^sub>f s2\n  sat_precond_as s1 (a # as)\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 (a # as)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0; sat_precond_as ?s1.0 as\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as ?s2.0 as\n  s1 \\<subseteq>\\<^sub>f s2\n  sat_precond_as s1 (a # as)\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 (a # as)", "have \"fst a \\<subseteq>\\<^sub>f s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s1", "using Cons.prems(2)"], ["proof (prove)\nusing this:\n  sat_precond_as s1 (a # as)\n\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s1", "by simp"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s1", "have \"fst a \\<subseteq>\\<^sub>f s2\""], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s2", "using Cons.prems(1) submap_imp_state_succ_submap_a"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s1\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   ?s2.0 \\<subseteq>\\<^sub>f ?s3.0\\<rbrakk>\n  \\<Longrightarrow> ?s1.0 \\<subseteq>\\<^sub>f ?s3.0\n\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s2", "by blast"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 (a # as)", "}"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 (a # as)", "note 1 = this"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 (a # as)", "{"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 (a # as)", "have 2: \"fst a \\<subseteq>\\<^sub>f s1\" \"sat_precond_as (state_succ s1 a) as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s1 &&& sat_precond_as (state_succ s1 a) as", "using Cons.prems(2)"], ["proof (prove)\nusing this:\n  sat_precond_as s1 (a # as)\n\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s1 &&& sat_precond_as (state_succ s1 a) as", "by simp+"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s1\n  sat_precond_as (state_succ s1 a) as\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s1\n  sat_precond_as (state_succ s1 a) as", "have \"state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\""], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s1\n  sat_precond_as (state_succ s1 a) as\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "using Cons.prems(1) submap_imp_state_succ_submap"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s1\n  sat_precond_as (state_succ s1 a) as\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<lbrakk>fst ?a \\<subseteq>\\<^sub>f ?s1.0;\n   ?s1.0 \\<subseteq>\\<^sub>f ?s2.0\\<rbrakk>\n  \\<Longrightarrow> state_succ ?s1.0 ?a \\<subseteq>\\<^sub>f\n                    state_succ ?s2.0 ?a\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "by blast"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "have 3: \"sat_precond_as (state_succ s2 a) as\""], ["proof (prove)\nusing this:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (1 subgoal):\n 1. sat_precond_as (state_succ s2 a) as", "using 2(2) Cons.IH"], ["proof (prove)\nusing this:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n  sat_precond_as (state_succ s1 a) as\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0; sat_precond_as ?s1.0 as\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as ?s2.0 as\n\ngoal (1 subgoal):\n 1. sat_precond_as (state_succ s2 a) as", "by blast"], ["proof (state)\nthis:\n  sat_precond_as (state_succ s2 a) as\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 (a # as)", "}"], ["proof (state)\nthis:\n  sat_precond_as (state_succ s2 a) as\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  sat_precond_as (state_succ s2 a) as", "show ?case"], ["proof (prove)\nusing this:\n  sat_precond_as (state_succ s2 a) as\n\ngoal (1 subgoal):\n 1. sat_precond_as s2 (a # as)", "using 1"], ["proof (prove)\nusing this:\n  sat_precond_as (state_succ s2 a) as\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. sat_precond_as s2 (a # as)", "by auto"], ["proof (state)\nthis:\n  sat_precond_as s2 (a # as)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s2 []", "qed auto\n\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma submap_init_submap_exec_i:\n  fixes s1 s2\n  assumes \"(s1 \\<subseteq>\\<^sub>f s2)\" \"(sat_precond_as s1 (a # as))\"\n  shows \"state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "using assms"], ["proof (prove)\nusing this:\n  s1 \\<subseteq>\\<^sub>f s2\n  sat_precond_as s1 (a # as)\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "proof (cases \"fst a \\<subseteq>\\<^sub>f s1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as);\n     fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n 2. \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "case true: True"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as);\n     fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n 2. \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "then"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s1", "show ?thesis"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "proof (cases \"fst a \\<subseteq>\\<^sub>f s2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n 2. \\<lbrakk>fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "case True"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n 2. \\<lbrakk>fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "then"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s2", "show ?thesis"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1\n     else s1) \\<subseteq>\\<^sub>f\n    (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2)", "using assms submap_imp_state_succ_submap_b state_succ_def true"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s2\n  s1 \\<subseteq>\\<^sub>f s2\n  sat_precond_as s1 (a # as)\n  ?s1.0 \\<subseteq>\\<^sub>f ?s2.0 \\<Longrightarrow>\n  ?s0.0 ++ ?s1.0 \\<subseteq>\\<^sub>f ?s0.0 ++ ?s2.0\n  state_succ ?s ?a \\<equiv>\n  if fst ?a \\<subseteq>\\<^sub>f ?s then snd ?a ++ ?s else ?s\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1\n     else s1) \\<subseteq>\\<^sub>f\n    (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2)", "by auto"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "case False"], ["proof (state)\nthis:\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "then"], ["proof (chain)\npicking this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "using assms submap_imp_state_succ_submap_a true"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n  s1 \\<subseteq>\\<^sub>f s2\n  sat_precond_as s1 (a # as)\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   ?s2.0 \\<subseteq>\\<^sub>f ?s3.0\\<rbrakk>\n  \\<Longrightarrow> ?s1.0 \\<subseteq>\\<^sub>f ?s3.0\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "by blast"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "case false: False"], ["proof (state)\nthis:\n  \\<not> fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "then"], ["proof (chain)\npicking this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s1", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "proof (cases \"fst a \\<subseteq>\\<^sub>f s2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n 2. \\<lbrakk>\\<not> fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "case True"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n 2. \\<lbrakk>\\<not> fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "then"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s2", "show ?thesis"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "using assms false"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s2\n  s1 \\<subseteq>\\<^sub>f s2\n  sat_precond_as s1 (a # as)\n  \\<not> fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "by auto"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "case False"], ["proof (state)\nthis:\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "then"], ["proof (chain)\npicking this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1\n     else s1) \\<subseteq>\\<^sub>f\n    (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2)", "using false assms"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n  \\<not> fst a \\<subseteq>\\<^sub>f s1\n  s1 \\<subseteq>\\<^sub>f s2\n  sat_precond_as s1 (a # as)\n\ngoal (1 subgoal):\n 1. (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1\n     else s1) \\<subseteq>\\<^sub>f\n    (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2)", "by simp"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma submap_init_submap_exec:\n  fixes s1 s2\n  assumes \"(s1 \\<subseteq>\\<^sub>f s2)\" \"(sat_precond_as s1 as)\"\n  shows \"(exec_plan s1 as \\<subseteq>\\<^sub>f exec_plan s2 as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s1 as \\<subseteq>\\<^sub>f exec_plan s2 as", "using assms"], ["proof (prove)\nusing this:\n  s1 \\<subseteq>\\<^sub>f s2\n  sat_precond_as s1 as\n\ngoal (1 subgoal):\n 1. exec_plan s1 as \\<subseteq>\\<^sub>f exec_plan s2 as", "proof (induction as arbitrary: s1 s2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0; sat_precond_as ?s1.0 as\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s1.0 as \\<subseteq>\\<^sub>f\n                    exec_plan ?s2.0 as\n  s1 \\<subseteq>\\<^sub>f s2\n  sat_precond_as s1 (a # as)\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "have \"state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "using Cons.prems submap_init_submap_exec_i"], ["proof (prove)\nusing this:\n  s1 \\<subseteq>\\<^sub>f s2\n  sat_precond_as s1 (a # as)\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   sat_precond_as ?s1.0 (?a # ?as)\\<rbrakk>\n  \\<Longrightarrow> state_succ ?s1.0 ?a \\<subseteq>\\<^sub>f\n                    state_succ ?s2.0 ?a\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "by blast"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "moreover"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "have \"sat_precond_as (state_succ s1 a) as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_precond_as (state_succ s1 a) as", "using Cons.prems(2)"], ["proof (prove)\nusing this:\n  sat_precond_as s1 (a # as)\n\ngoal (1 subgoal):\n 1. sat_precond_as (state_succ s1 a) as", "by simp"], ["proof (state)\nthis:\n  sat_precond_as (state_succ s1 a) as\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "ultimately"], ["proof (chain)\npicking this:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n  sat_precond_as (state_succ s1 a) as", "have \"exec_plan (state_succ s1 a) as \\<subseteq>\\<^sub>f exec_plan (state_succ s2 a) as\""], ["proof (prove)\nusing this:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n  sat_precond_as (state_succ s1 a) as\n\ngoal (1 subgoal):\n 1. exec_plan (state_succ s1 a) as \\<subseteq>\\<^sub>f\n    exec_plan (state_succ s2 a) as", "using Cons.IH"], ["proof (prove)\nusing this:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n  sat_precond_as (state_succ s1 a) as\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0; sat_precond_as ?s1.0 as\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s1.0 as \\<subseteq>\\<^sub>f\n                    exec_plan ?s2.0 as\n\ngoal (1 subgoal):\n 1. exec_plan (state_succ s1 a) as \\<subseteq>\\<^sub>f\n    exec_plan (state_succ s2 a) as", "by blast"], ["proof (state)\nthis:\n  exec_plan (state_succ s1 a) as \\<subseteq>\\<^sub>f\n  exec_plan (state_succ s2 a) as\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    sat_precond_as s1 as\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 (a # as)\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  exec_plan (state_succ s1 a) as \\<subseteq>\\<^sub>f\n  exec_plan (state_succ s2 a) as", "show ?case"], ["proof (prove)\nusing this:\n  exec_plan (state_succ s1 a) as \\<subseteq>\\<^sub>f\n  exec_plan (state_succ s2 a) as\n\ngoal (1 subgoal):\n 1. exec_plan s1 (a # as) \\<subseteq>\\<^sub>f exec_plan s2 (a # as)", "by simp"], ["proof (state)\nthis:\n  exec_plan s1 (a # as) \\<subseteq>\\<^sub>f exec_plan s2 (a # as)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2; sat_precond_as s1 []\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []", "qed simp\n\n\n\\<comment> \\<open>NOTE type of `as` had to be fixed for `submap\\_sat\\_precond\\_submap`.\\<close>"], ["", "lemma sat_precond_drest_sat_precond:\n  fixes vs s and as :: \"'a action list\"\n  assumes \"sat_precond_as (fmrestrict_set vs s) as\"\n  shows \"(sat_precond_as s as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_precond_as s as", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sat_precond_as s as", "have \"fmrestrict_set vs s \\<subseteq>\\<^sub>f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs s \\<subseteq>\\<^sub>f s", "by simp"], ["proof (state)\nthis:\n  fmrestrict_set vs s \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. sat_precond_as s as", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs s \\<subseteq>\\<^sub>f s", "show \"(sat_precond_as s as)\""], ["proof (prove)\nusing this:\n  fmrestrict_set vs s \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. sat_precond_as s as", "using assms submap_sat_precond_submap"], ["proof (prove)\nusing this:\n  fmrestrict_set vs s \\<subseteq>\\<^sub>f s\n  sat_precond_as (fmrestrict_set vs s) as\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   sat_precond_as ?s1.0 ?as\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as ?s2.0 ?as\n\ngoal (1 subgoal):\n 1. sat_precond_as s as", "by blast"], ["proof (state)\nthis:\n  sat_precond_as s as\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE name shortened to 'varset\\_action'.\\<close>"], ["", "definition varset_action where\n  \"varset_action a varset \\<equiv> (fmdom' (snd a) \\<subseteq> varset)\"\nfor a :: \"'a action\""], ["", "lemma varset_action_pair: \"(varset_action (p, e) vs) = (fmdom' e \\<subseteq> vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. varset_action (p, e) vs = (fmdom' e \\<subseteq> vs)", "unfolding varset_action_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmdom' (snd (p, e)) \\<subseteq> vs) = (fmdom' e \\<subseteq> vs)", "by auto"], ["", "lemma eq_effect_eq_vset:\n  fixes x y\n  assumes \"(snd x = snd y)\"\n  shows \"((\\<lambda>a. varset_action a vs) x = (\\<lambda>a. varset_action a vs) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. varset_action x vs = varset_action y vs", "unfolding varset_action_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmdom' (snd x) \\<subseteq> vs) = (fmdom' (snd y) \\<subseteq> vs)", "using assms"], ["proof (prove)\nusing this:\n  snd x = snd y\n\ngoal (1 subgoal):\n 1. (fmdom' (snd x) \\<subseteq> vs) = (fmdom' (snd y) \\<subseteq> vs)", "by presburger"], ["", "lemma rem_effectless_works_1:\n  fixes s as\n  shows \"(exec_plan s as = exec_plan s (rem_effectless_act as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s as = exec_plan s (rem_effectless_act as)", "by (induction as arbitrary: s) (auto simp: empty_eff_exec_eq)"], ["", "lemma rem_effectless_works_2:\n  fixes as s\n  assumes \"(sat_precond_as s as)\"\n  shows \"(sat_precond_as s (rem_effectless_act as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_precond_as s (rem_effectless_act as)", "using assms"], ["proof (prove)\nusing this:\n  sat_precond_as s as\n\ngoal (1 subgoal):\n 1. sat_precond_as s (rem_effectless_act as)", "by (induction as arbitrary: s) (auto simp: empty_eff_exec_eq)"], ["", "lemma rem_effectless_works_3:\n  fixes as\n  shows \"length (rem_effectless_act as) \\<le> length as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (rem_effectless_act as) \\<le> length as", "by (induction as) auto"], ["", "lemma rem_effectless_works_4:\n  fixes A as\n  assumes \"(set as \\<subseteq> A)\"\n  shows \"(set (rem_effectless_act as) \\<subseteq> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (rem_effectless_act as) \\<subseteq> A", "using assms"], ["proof (prove)\nusing this:\n  set as \\<subseteq> A\n\ngoal (1 subgoal):\n 1. set (rem_effectless_act as) \\<subseteq> A", "by (induction as arbitrary: A)  auto"], ["", "lemma rem_effectless_works_4':\n  fixes A as\n  assumes \"(as \\<in> valid_plans A)\"\n  shows \"(rem_effectless_act as \\<in> valid_plans A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rem_effectless_act as \\<in> valid_plans A", "using assms"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans A\n\ngoal (1 subgoal):\n 1. rem_effectless_act as \\<in> valid_plans A", "by (induction as arbitrary: A) (auto simp: valid_plans_def)\n\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma rem_effectless_works_5_i:\n  shows \"subseq (rem_effectless_act as) as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (rem_effectless_act as) as", "by (induction as) auto"], ["", "lemma rem_effectless_works_5:\n  fixes P as\n  shows \"length (filter P (rem_effectless_act as)) \\<le> length (filter P as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (filter P (rem_effectless_act as)) \\<le> length (filter P as)", "using rem_effectless_works_5_i sublist_imp_len_filter_le"], ["proof (prove)\nusing this:\n  subseq (rem_effectless_act ?as) ?as\n  subseq ?l' ?l \\<Longrightarrow>\n  length (filter ?P ?l') \\<le> length (filter ?P ?l)\n\ngoal (1 subgoal):\n 1. length (filter P (rem_effectless_act as)) \\<le> length (filter P as)", "by blast"], ["", "lemma rem_effectless_works_6:\n  fixes as\n  shows \"no_effectless_act (rem_effectless_act as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_effectless_act (rem_effectless_act as)", "by (induction as) auto"], ["", "lemma rem_effectless_works_7:\n  fixes as\n  shows \"no_effectless_act as =  list_all (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_effectless_act as =\n    list_all (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) as", "by (induction as) auto"], ["", "lemma rem_effectless_works_8:\n  fixes P as\n  assumes \"(list_all P as)\"\n  shows \"list_all P (rem_effectless_act as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all P (rem_effectless_act as)", "using assms"], ["proof (prove)\nusing this:\n  list_all P as\n\ngoal (1 subgoal):\n 1. list_all P (rem_effectless_act as)", "by (induction as arbitrary: P) auto\n\n\n\\<comment> \\<open>TODO move and replace `rem\\_effectless\\_works\\_5\\_i`.\\<close>"], ["", "lemma rem_effectless_works_9:\n  fixes as\n  shows \"subseq (rem_effectless_act as) as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (rem_effectless_act as) as", "by (induction as) auto"], ["", "lemma rem_effectless_works_10:\n  fixes as P\n  assumes \"(no_effectless_act as)\"\n  shows \"(no_effectless_act (filter P as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_effectless_act (filter P as)", "using assms"], ["proof (prove)\nusing this:\n  no_effectless_act as\n\ngoal (1 subgoal):\n 1. no_effectless_act (filter P as)", "by (auto simp: rem_effectless_works_7) (metis Ball_set filter_set member_filter)"], ["", "lemma rem_effectless_works_11:\n  fixes as1 as2\n  assumes \"subseq as1 (rem_effectless_act as2)\"\n  shows \"(subseq as1 as2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq as1 as2", "using assms rem_effectless_works_9 sublist_trans"], ["proof (prove)\nusing this:\n  subseq as1 (rem_effectless_act as2)\n  subseq (rem_effectless_act ?as) ?as\n  \\<lbrakk>subseq ?l1.0 ?l2.0; subseq ?l2.0 ?l3.0\\<rbrakk>\n  \\<Longrightarrow> subseq ?l1.0 ?l3.0\n\ngoal (1 subgoal):\n 1. subseq as1 as2", "by blast"], ["", "lemma rem_effectless_works_12:\n  fixes as1 as2\n  shows \"(no_effectless_act (as1 @ as2)) = (no_effectless_act as1 \\<and> no_effectless_act(as2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_effectless_act (as1 @ as2) =\n    (no_effectless_act as1 \\<and> no_effectless_act as2)", "by (induction as1) auto\n\n\n\\<comment> \\<open>TODO refactor into 'List\\_Utils.thy'.\\<close>"], ["", "lemma rem_effectless_works_13_i:\n  fixes x l\n  assumes \"ListMem x l\" \"list_all P l\"\n  shows \"P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x", "using assms"], ["proof (prove)\nusing this:\n  ListMem x l\n  list_all P l\n\ngoal (1 subgoal):\n 1. P x", "proof (induction l)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xs. list_all P (x # xs) \\<Longrightarrow> P x\n 2. \\<And>x xs y.\n       \\<lbrakk>ListMem x xs; list_all P xs \\<Longrightarrow> P x;\n        list_all P (y # xs)\\<rbrakk>\n       \\<Longrightarrow> P x", "case (insert x xs y)"], ["proof (state)\nthis:\n  ListMem x xs\n  list_all P xs \\<Longrightarrow> P x\n  list_all P (y # xs)\n\ngoal (2 subgoals):\n 1. \\<And>x xs. list_all P (x # xs) \\<Longrightarrow> P x\n 2. \\<And>x xs y.\n       \\<lbrakk>ListMem x xs; list_all P xs \\<Longrightarrow> P x;\n        list_all P (y # xs)\\<rbrakk>\n       \\<Longrightarrow> P x", "have 1: \"P y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P y", "using insert.prems list.pred_inject"], ["proof (prove)\nusing this:\n  list_all P (y # xs)\n  list_all ?P []\n  list_all ?P (?a # ?aa) = (?P ?a \\<and> list_all ?P ?aa)\n\ngoal (1 subgoal):\n 1. P y", "by simp"], ["proof (state)\nthis:\n  P y\n\ngoal (2 subgoals):\n 1. \\<And>x xs. list_all P (x # xs) \\<Longrightarrow> P x\n 2. \\<And>x xs y.\n       \\<lbrakk>ListMem x xs; list_all P xs \\<Longrightarrow> P x;\n        list_all P (y # xs)\\<rbrakk>\n       \\<Longrightarrow> P x", "then"], ["proof (chain)\npicking this:\n  P y", "have 2: \"list_all P l\""], ["proof (prove)\nusing this:\n  P y\n\ngoal (1 subgoal):\n 1. list_all P l", "using assms(2) list.pred_inject"], ["proof (prove)\nusing this:\n  P y\n  list_all P l\n  list_all ?P []\n  list_all ?P (?a # ?aa) = (?P ?a \\<and> list_all ?P ?aa)\n\ngoal (1 subgoal):\n 1. list_all P l", "by force"], ["proof (state)\nthis:\n  list_all P l\n\ngoal (2 subgoals):\n 1. \\<And>x xs. list_all P (x # xs) \\<Longrightarrow> P x\n 2. \\<And>x xs y.\n       \\<lbrakk>ListMem x xs; list_all P xs \\<Longrightarrow> P x;\n        list_all P (y # xs)\\<rbrakk>\n       \\<Longrightarrow> P x", "then"], ["proof (chain)\npicking this:\n  list_all P l", "show ?case"], ["proof (prove)\nusing this:\n  list_all P l\n\ngoal (1 subgoal):\n 1. P x", "using 1"], ["proof (prove)\nusing this:\n  list_all P l\n  P y\n\ngoal (1 subgoal):\n 1. P x", "proof (cases \"y = x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>list_all P l; P y; y = x\\<rbrakk> \\<Longrightarrow> P x\n 2. \\<lbrakk>list_all P l; P y; y \\<noteq> x\\<rbrakk> \\<Longrightarrow> P x", "case False"], ["proof (state)\nthis:\n  y \\<noteq> x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>list_all P l; P y; y = x\\<rbrakk> \\<Longrightarrow> P x\n 2. \\<lbrakk>list_all P l; P y; y \\<noteq> x\\<rbrakk> \\<Longrightarrow> P x", "then"], ["proof (chain)\npicking this:\n  y \\<noteq> x", "show ?thesis"], ["proof (prove)\nusing this:\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. P x", "using insert 2"], ["proof (prove)\nusing this:\n  y \\<noteq> x\n  ListMem x xs\n  list_all P xs \\<Longrightarrow> P x\n  list_all P (y # xs)\n  list_all P l\n\ngoal (1 subgoal):\n 1. P x", "by fastforce"], ["proof (state)\nthis:\n  P x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>list_all P l; P y; y = x\\<rbrakk> \\<Longrightarrow> P x", "qed simp"], ["proof (state)\nthis:\n  P x\n\ngoal (1 subgoal):\n 1. \\<And>x xs. list_all P (x # xs) \\<Longrightarrow> P x", "qed simp"], ["", "lemma rem_effectless_works_13:\n  fixes as1 as2\n  assumes \"(subseq as1 as2)\" \"(no_effectless_act as2)\"\n  shows \"(no_effectless_act as1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_effectless_act as1", "using assms"], ["proof (prove)\nusing this:\n  subseq as1 as2\n  no_effectless_act as2\n\ngoal (1 subgoal):\n 1. no_effectless_act as1", "proof (induction as1 arbitrary: as2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>as2.\n       \\<lbrakk>subseq [] as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act []\n 2. \\<And>a as1 as2.\n       \\<lbrakk>\\<And>as2.\n                   \\<lbrakk>subseq as1 as2; no_effectless_act as2\\<rbrakk>\n                   \\<Longrightarrow> no_effectless_act as1;\n        subseq (a # as1) as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act (a # as1)", "case (Cons a as1)"], ["proof (state)\nthis:\n  \\<lbrakk>subseq as1 ?as2.0; no_effectless_act ?as2.0\\<rbrakk>\n  \\<Longrightarrow> no_effectless_act as1\n  subseq (a # as1) as2\n  no_effectless_act as2\n\ngoal (2 subgoals):\n 1. \\<And>as2.\n       \\<lbrakk>subseq [] as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act []\n 2. \\<And>a as1 as2.\n       \\<lbrakk>\\<And>as2.\n                   \\<lbrakk>subseq as1 as2; no_effectless_act as2\\<rbrakk>\n                   \\<Longrightarrow> no_effectless_act as1;\n        subseq (a # as1) as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act (a # as1)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>subseq as1 ?as2.0; no_effectless_act ?as2.0\\<rbrakk>\n  \\<Longrightarrow> no_effectless_act as1\n  subseq (a # as1) as2\n  no_effectless_act as2\n\ngoal (2 subgoals):\n 1. \\<And>as2.\n       \\<lbrakk>subseq [] as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act []\n 2. \\<And>a as1 as2.\n       \\<lbrakk>\\<And>as2.\n                   \\<lbrakk>subseq as1 as2; no_effectless_act as2\\<rbrakk>\n                   \\<Longrightarrow> no_effectless_act as1;\n        subseq (a # as1) as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act (a # as1)", "have \"subseq as1 as2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq as1 as2", "using Cons.prems(1) sublist_CONS1_E"], ["proof (prove)\nusing this:\n  subseq (a # as1) as2\n  subseq (?h # ?l1.0) ?l2.0 \\<Longrightarrow> subseq ?l1.0 ?l2.0\n\ngoal (1 subgoal):\n 1. subseq as1 as2", "by metis"], ["proof (state)\nthis:\n  subseq as1 as2\n\ngoal (2 subgoals):\n 1. \\<And>as2.\n       \\<lbrakk>subseq [] as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act []\n 2. \\<And>a as1 as2.\n       \\<lbrakk>\\<And>as2.\n                   \\<lbrakk>subseq as1 as2; no_effectless_act as2\\<rbrakk>\n                   \\<Longrightarrow> no_effectless_act as1;\n        subseq (a # as1) as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act (a # as1)", "then"], ["proof (chain)\npicking this:\n  subseq as1 as2", "have \"no_effectless_act as1\""], ["proof (prove)\nusing this:\n  subseq as1 as2\n\ngoal (1 subgoal):\n 1. no_effectless_act as1", "using Cons.prems(2) Cons.IH"], ["proof (prove)\nusing this:\n  subseq as1 as2\n  no_effectless_act as2\n  \\<lbrakk>subseq as1 ?as2.0; no_effectless_act ?as2.0\\<rbrakk>\n  \\<Longrightarrow> no_effectless_act as1\n\ngoal (1 subgoal):\n 1. no_effectless_act as1", "by blast"], ["proof (state)\nthis:\n  no_effectless_act as1\n\ngoal (2 subgoals):\n 1. \\<And>as2.\n       \\<lbrakk>subseq [] as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act []\n 2. \\<And>a as1 as2.\n       \\<lbrakk>\\<And>as2.\n                   \\<lbrakk>subseq as1 as2; no_effectless_act as2\\<rbrakk>\n                   \\<Longrightarrow> no_effectless_act as1;\n        subseq (a # as1) as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act (a # as1)", "}"], ["proof (state)\nthis:\n  no_effectless_act as1\n\ngoal (2 subgoals):\n 1. \\<And>as2.\n       \\<lbrakk>subseq [] as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act []\n 2. \\<And>a as1 as2.\n       \\<lbrakk>\\<And>as2.\n                   \\<lbrakk>subseq as1 as2; no_effectless_act as2\\<rbrakk>\n                   \\<Longrightarrow> no_effectless_act as1;\n        subseq (a # as1) as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act (a # as1)", "moreover"], ["proof (state)\nthis:\n  no_effectless_act as1\n\ngoal (2 subgoals):\n 1. \\<And>as2.\n       \\<lbrakk>subseq [] as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act []\n 2. \\<And>a as1 as2.\n       \\<lbrakk>\\<And>as2.\n                   \\<lbrakk>subseq as1 as2; no_effectless_act as2\\<rbrakk>\n                   \\<Longrightarrow> no_effectless_act as1;\n        subseq (a # as1) as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act (a # as1)", "{"], ["proof (state)\nthis:\n  no_effectless_act as1\n\ngoal (2 subgoals):\n 1. \\<And>as2.\n       \\<lbrakk>subseq [] as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act []\n 2. \\<And>a as1 as2.\n       \\<lbrakk>\\<And>as2.\n                   \\<lbrakk>subseq as1 as2; no_effectless_act as2\\<rbrakk>\n                   \\<Longrightarrow> no_effectless_act as1;\n        subseq (a # as1) as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act (a # as1)", "have \"list_all (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) as2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) as2", "using Cons.prems(2) rem_effectless_works_7"], ["proof (prove)\nusing this:\n  no_effectless_act as2\n  no_effectless_act ?as =\n  list_all (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) ?as\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) as2", "by blast"], ["proof (state)\nthis:\n  list_all (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) as2\n\ngoal (2 subgoals):\n 1. \\<And>as2.\n       \\<lbrakk>subseq [] as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act []\n 2. \\<And>a as1 as2.\n       \\<lbrakk>\\<And>as2.\n                   \\<lbrakk>subseq as1 as2; no_effectless_act as2\\<rbrakk>\n                   \\<Longrightarrow> no_effectless_act as1;\n        subseq (a # as1) as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act (a # as1)", "moreover"], ["proof (state)\nthis:\n  list_all (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) as2\n\ngoal (2 subgoals):\n 1. \\<And>as2.\n       \\<lbrakk>subseq [] as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act []\n 2. \\<And>a as1 as2.\n       \\<lbrakk>\\<And>as2.\n                   \\<lbrakk>subseq as1 as2; no_effectless_act as2\\<rbrakk>\n                   \\<Longrightarrow> no_effectless_act as1;\n        subseq (a # as1) as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act (a # as1)", "have \"ListMem a as2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListMem a as2", "using Cons.prems(1) sublist_MEM"], ["proof (prove)\nusing this:\n  subseq (a # as1) as2\n  subseq (?h # ?l1.0) ?l2.0 \\<Longrightarrow> ListMem ?h ?l2.0\n\ngoal (1 subgoal):\n 1. ListMem a as2", "by fast"], ["proof (state)\nthis:\n  ListMem a as2\n\ngoal (2 subgoals):\n 1. \\<And>as2.\n       \\<lbrakk>subseq [] as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act []\n 2. \\<And>a as1 as2.\n       \\<lbrakk>\\<And>as2.\n                   \\<lbrakk>subseq as1 as2; no_effectless_act as2\\<rbrakk>\n                   \\<Longrightarrow> no_effectless_act as1;\n        subseq (a # as1) as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act (a # as1)", "ultimately"], ["proof (chain)\npicking this:\n  list_all (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) as2\n  ListMem a as2", "have \"fmdom' (snd a) \\<noteq> {}\""], ["proof (prove)\nusing this:\n  list_all (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) as2\n  ListMem a as2\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<noteq> {}", "using rem_effectless_works_13_i"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) as2\n  ListMem a as2\n  \\<lbrakk>ListMem ?x ?l; list_all ?P ?l\\<rbrakk> \\<Longrightarrow> ?P ?x\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<noteq> {}", "by fastforce"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>as2.\n       \\<lbrakk>subseq [] as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act []\n 2. \\<And>a as1 as2.\n       \\<lbrakk>\\<And>as2.\n                   \\<lbrakk>subseq as1 as2; no_effectless_act as2\\<rbrakk>\n                   \\<Longrightarrow> no_effectless_act as1;\n        subseq (a # as1) as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act (a # as1)", "}"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>as2.\n       \\<lbrakk>subseq [] as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act []\n 2. \\<And>a as1 as2.\n       \\<lbrakk>\\<And>as2.\n                   \\<lbrakk>subseq as1 as2; no_effectless_act as2\\<rbrakk>\n                   \\<Longrightarrow> no_effectless_act as1;\n        subseq (a # as1) as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act (a # as1)", "ultimately"], ["proof (chain)\npicking this:\n  no_effectless_act as1\n  fmdom' (snd a) \\<noteq> {}", "show ?case"], ["proof (prove)\nusing this:\n  no_effectless_act as1\n  fmdom' (snd a) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. no_effectless_act (a # as1)", "by simp"], ["proof (state)\nthis:\n  no_effectless_act (a # as1)\n\ngoal (1 subgoal):\n 1. \\<And>as2.\n       \\<lbrakk>subseq [] as2; no_effectless_act as2\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act []", "qed simp"], ["", "lemma rem_effectless_works_14:\n  fixes PROB as\n  shows \"exec_plan s as = exec_plan s (rem_effectless_act as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s as = exec_plan s (rem_effectless_act as)", "using rem_effectless_works_1"], ["proof (prove)\nusing this:\n  exec_plan ?s ?as = exec_plan ?s (rem_effectless_act ?as)\n\ngoal (1 subgoal):\n 1. exec_plan s as = exec_plan s (rem_effectless_act as)", "by blast"], ["", "lemma rem_effectless_works:\n  fixes s A as\n  assumes \"(exec_plan s as = exec_plan s (rem_effectless_act as))\"\n    \"(sat_precond_as s as \\<longrightarrow> sat_precond_as s (rem_effectless_act as))\"\n    \"(length (rem_effectless_act as) \\<le> length as)\"\n    \"((set as \\<subseteq> A) \\<longrightarrow> (set (rem_effectless_act as) \\<subseteq> A))\"\n    \"(no_effectless_act (rem_effectless_act as))\"\n  shows \"(\\<forall>P. length (filter P (rem_effectless_act as)) \\<le> length (filter P as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P.\n       length (filter P (rem_effectless_act as)) \\<le> length (filter P as)", "using assms rem_effectless_works_5"], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s (rem_effectless_act as)\n  sat_precond_as s as \\<longrightarrow>\n  sat_precond_as s (rem_effectless_act as)\n  length (rem_effectless_act as) \\<le> length as\n  set as \\<subseteq> A \\<longrightarrow>\n  set (rem_effectless_act as) \\<subseteq> A\n  no_effectless_act (rem_effectless_act as)\n  length (filter ?P (rem_effectless_act ?as)) \\<le> length (filter ?P ?as)\n\ngoal (1 subgoal):\n 1. \\<forall>P.\n       length (filter P (rem_effectless_act as)) \\<le> length (filter P as)", "by blast\n\n\n\\<comment> \\<open>NOTE name shortened.\\<close>"], ["", "definition rem_effectless_act_set where\n  \"rem_effectless_act_set A \\<equiv> {a \\<in> A. fmdom' (snd a) \\<noteq> {}}\""], ["", "lemma rem_effectless_act_subset_rem_effectless_act_set_thm:\n  fixes as A\n  assumes \"(set as \\<subseteq> A)\"\n  shows \"(set (rem_effectless_act as) \\<subseteq> rem_effectless_act_set A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (rem_effectless_act as) \\<subseteq> rem_effectless_act_set A", "unfolding rem_effectless_act_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (rem_effectless_act as)\n    \\<subseteq> {a \\<in> A. fmdom' (snd a) \\<noteq> {}}", "using assms"], ["proof (prove)\nusing this:\n  set as \\<subseteq> A\n\ngoal (1 subgoal):\n 1. set (rem_effectless_act as)\n    \\<subseteq> {a \\<in> A. fmdom' (snd a) \\<noteq> {}}", "by (induction as) auto"], ["", "lemma rem_effectless_act_set_no_empty_actions_thm:\n  fixes A\n  shows \"rem_effectless_act_set A \\<subseteq> {a. fmdom' (snd a) \\<noteq> {}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rem_effectless_act_set A \\<subseteq> {a. fmdom' (snd a) \\<noteq> {}}", "unfolding rem_effectless_act_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> A. fmdom' (snd a) \\<noteq> {}}\n    \\<subseteq> {a. fmdom' (snd a) \\<noteq> {}}", "by blast\n\n\n\\<comment> \\<open>NOTE proof required additional lemmas 'rem\\_effectless\\_works\\_7' and 'rem\\_condless\\_valid\\_7'.\\<close>"], ["", "lemma rem_condless_valid_9:\n  fixes s as\n  assumes \"no_effectless_act as\"\n  shows \"no_effectless_act (rem_condless_act s [] as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_effectless_act (rem_condless_act s [] as)", "using assms"], ["proof (prove)\nusing this:\n  no_effectless_act as\n\ngoal (1 subgoal):\n 1. no_effectless_act (rem_condless_act s [] as)", "proof (induction as arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       no_effectless_act [] \\<Longrightarrow>\n       no_effectless_act (rem_condless_act s [] [])\n 2. \\<And>a as s.\n       \\<lbrakk>\\<And>s.\n                   no_effectless_act as \\<Longrightarrow>\n                   no_effectless_act (rem_condless_act s [] as);\n        no_effectless_act (a # as)\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))", "case (Cons a as)"], ["proof (state)\nthis:\n  no_effectless_act as \\<Longrightarrow>\n  no_effectless_act (rem_condless_act ?s [] as)\n  no_effectless_act (a # as)\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       no_effectless_act [] \\<Longrightarrow>\n       no_effectless_act (rem_condless_act s [] [])\n 2. \\<And>a as s.\n       \\<lbrakk>\\<And>s.\n                   no_effectless_act as \\<Longrightarrow>\n                   no_effectless_act (rem_condless_act s [] as);\n        no_effectless_act (a # as)\\<rbrakk>\n       \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))", "then"], ["proof (chain)\npicking this:\n  no_effectless_act as \\<Longrightarrow>\n  no_effectless_act (rem_condless_act ?s [] as)\n  no_effectless_act (a # as)", "show ?case"], ["proof (prove)\nusing this:\n  no_effectless_act as \\<Longrightarrow>\n  no_effectless_act (rem_condless_act ?s [] as)\n  no_effectless_act (a # as)\n\ngoal (1 subgoal):\n 1. no_effectless_act (rem_condless_act s [] (a # as))", "using Cons"], ["proof (prove)\nusing this:\n  no_effectless_act as \\<Longrightarrow>\n  no_effectless_act (rem_condless_act ?s [] as)\n  no_effectless_act (a # as)\n  no_effectless_act as \\<Longrightarrow>\n  no_effectless_act (rem_condless_act ?s [] as)\n  no_effectless_act (a # as)\n\ngoal (1 subgoal):\n 1. no_effectless_act (rem_condless_act s [] (a # as))", "proof (cases \" fst a \\<subseteq>\\<^sub>f exec_plan s []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))\n 2. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))", "case True"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f exec_plan s []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))\n 2. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))", "then"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f exec_plan s []", "have \"rem_condless_act s [] (a # as) = a # rem_condless_act (state_succ s a) [] as\""], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f exec_plan s []\n\ngoal (1 subgoal):\n 1. rem_condless_act s [] (a # as) =\n    a # rem_condless_act (state_succ s a) [] as", "using rem_condless_act_cons"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f exec_plan s []\n  rem_condless_act ?s (?h' # ?pfx) ?as =\n  ?h' # rem_condless_act (state_succ ?s ?h') ?pfx ?as\n\ngoal (1 subgoal):\n 1. rem_condless_act s [] (a # as) =\n    a # rem_condless_act (state_succ s a) [] as", "by fastforce"], ["proof (state)\nthis:\n  rem_condless_act s [] (a # as) =\n  a # rem_condless_act (state_succ s a) [] as\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))\n 2. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))", "moreover"], ["proof (state)\nthis:\n  rem_condless_act s [] (a # as) =\n  a # rem_condless_act (state_succ s a) [] as\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))\n 2. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))", "{"], ["proof (state)\nthis:\n  rem_condless_act s [] (a # as) =\n  a # rem_condless_act (state_succ s a) [] as\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))\n 2. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))", "have \"fmdom' (snd a) \\<noteq> {}\"  \"no_effectless_act as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<noteq> {} &&& no_effectless_act as", "using Cons.prems"], ["proof (prove)\nusing this:\n  no_effectless_act (a # as)\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<noteq> {} &&& no_effectless_act as", "by simp+"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<noteq> {}\n  no_effectless_act as\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))\n 2. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<noteq> {}\n  no_effectless_act as", "have \"no_effectless_act (rem_condless_act (state_succ s a) [] as)\""], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<noteq> {}\n  no_effectless_act as\n\ngoal (1 subgoal):\n 1. no_effectless_act (rem_condless_act (state_succ s a) [] as)", "using Cons.IH"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<noteq> {}\n  no_effectless_act as\n  no_effectless_act as \\<Longrightarrow>\n  no_effectless_act (rem_condless_act ?s [] as)\n\ngoal (1 subgoal):\n 1. no_effectless_act (rem_condless_act (state_succ s a) [] as)", "by blast"], ["proof (state)\nthis:\n  no_effectless_act (rem_condless_act (state_succ s a) [] as)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))\n 2. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))", "}"], ["proof (state)\nthis:\n  no_effectless_act (rem_condless_act (state_succ s a) [] as)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))\n 2. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))", "moreover"], ["proof (state)\nthis:\n  no_effectless_act (rem_condless_act (state_succ s a) [] as)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))\n 2. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))", "have \"no_effectless_act [a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_effectless_act [a]", "using Cons.prems"], ["proof (prove)\nusing this:\n  no_effectless_act (a # as)\n\ngoal (1 subgoal):\n 1. no_effectless_act [a]", "by simp"], ["proof (state)\nthis:\n  no_effectless_act [a]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))\n 2. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))", "ultimately"], ["proof (chain)\npicking this:\n  rem_condless_act s [] (a # as) =\n  a # rem_condless_act (state_succ s a) [] as\n  no_effectless_act (rem_condless_act (state_succ s a) [] as)\n  no_effectless_act [a]", "show ?thesis"], ["proof (prove)\nusing this:\n  rem_condless_act s [] (a # as) =\n  a # rem_condless_act (state_succ s a) [] as\n  no_effectless_act (rem_condless_act (state_succ s a) [] as)\n  no_effectless_act [a]\n\ngoal (1 subgoal):\n 1. no_effectless_act (rem_condless_act s [] (a # as))", "using rem_effectless_works_12"], ["proof (prove)\nusing this:\n  rem_condless_act s [] (a # as) =\n  a # rem_condless_act (state_succ s a) [] as\n  no_effectless_act (rem_condless_act (state_succ s a) [] as)\n  no_effectless_act [a]\n  no_effectless_act (?as1.0 @ ?as2.0) =\n  (no_effectless_act ?as1.0 \\<and> no_effectless_act ?as2.0)\n\ngoal (1 subgoal):\n 1. no_effectless_act (rem_condless_act s [] (a # as))", "by force"], ["proof (state)\nthis:\n  no_effectless_act (rem_condless_act s [] (a # as))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s.\n                no_effectless_act as \\<Longrightarrow>\n                no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<And>s.\n        no_effectless_act as \\<Longrightarrow>\n        no_effectless_act (rem_condless_act s [] as);\n     no_effectless_act (a # as);\n     \\<not> fst a \\<subseteq>\\<^sub>f exec_plan s []\\<rbrakk>\n    \\<Longrightarrow> no_effectless_act (rem_condless_act s [] (a # as))", "qed simp"], ["proof (state)\nthis:\n  no_effectless_act (rem_condless_act s [] (a # as))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       no_effectless_act [] \\<Longrightarrow>\n       no_effectless_act (rem_condless_act s [] [])", "qed simp"], ["", "lemma graph_plan_lemma_17:\n  fixes as_1 as_2 as s\n  assumes \"(as_1 @ as_2 = as)\" \"(sat_precond_as s as)\"\n  shows \"((sat_precond_as s as_1) \\<and> sat_precond_as (exec_plan s as_1) as_2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_precond_as s as_1 \\<and> sat_precond_as (exec_plan s as_1) as_2", "using assms"], ["proof (prove)\nusing this:\n  as_1 @ as_2 = as\n  sat_precond_as s as\n\ngoal (1 subgoal):\n 1. sat_precond_as s as_1 \\<and> sat_precond_as (exec_plan s as_1) as_2", "proof (induction as arbitrary: as_1 as_2 s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>as_1 as_2 s.\n       \\<lbrakk>as_1 @ as_2 = []; sat_precond_as s []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                         sat_precond_as (exec_plan s as_1) as_2\n 2. \\<And>a as as_1 as_2 s.\n       \\<lbrakk>\\<And>as_1 as_2 s.\n                   \\<lbrakk>as_1 @ as_2 = as; sat_precond_as s as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                                     sat_precond_as (exec_plan s as_1) as_2;\n        as_1 @ as_2 = a # as; sat_precond_as s (a # as)\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                         sat_precond_as (exec_plan s as_1) as_2", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>?as_1.0 @ ?as_2.0 = as; sat_precond_as ?s as\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as ?s ?as_1.0 \\<and>\n                    sat_precond_as (exec_plan ?s ?as_1.0) ?as_2.0\n  as_1 @ as_2 = a # as\n  sat_precond_as s (a # as)\n\ngoal (2 subgoals):\n 1. \\<And>as_1 as_2 s.\n       \\<lbrakk>as_1 @ as_2 = []; sat_precond_as s []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                         sat_precond_as (exec_plan s as_1) as_2\n 2. \\<And>a as as_1 as_2 s.\n       \\<lbrakk>\\<And>as_1 as_2 s.\n                   \\<lbrakk>as_1 @ as_2 = as; sat_precond_as s as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                                     sat_precond_as (exec_plan s as_1) as_2;\n        as_1 @ as_2 = a # as; sat_precond_as s (a # as)\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                         sat_precond_as (exec_plan s as_1) as_2", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?as_1.0 @ ?as_2.0 = as; sat_precond_as ?s as\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as ?s ?as_1.0 \\<and>\n                    sat_precond_as (exec_plan ?s ?as_1.0) ?as_2.0\n  as_1 @ as_2 = a # as\n  sat_precond_as s (a # as)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?as_1.0 @ ?as_2.0 = as; sat_precond_as ?s as\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as ?s ?as_1.0 \\<and>\n                    sat_precond_as (exec_plan ?s ?as_1.0) ?as_2.0\n  as_1 @ as_2 = a # as\n  sat_precond_as s (a # as)\n\ngoal (1 subgoal):\n 1. sat_precond_as s as_1 \\<and> sat_precond_as (exec_plan s as_1) as_2", "proof(cases \"as_1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>as_1 as_2 s.\n                \\<lbrakk>as_1 @ as_2 = as; sat_precond_as s as\\<rbrakk>\n                \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                                  sat_precond_as (exec_plan s as_1) as_2;\n     as_1 @ as_2 = a # as; sat_precond_as s (a # as); as_1 = []\\<rbrakk>\n    \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                      sat_precond_as (exec_plan s as_1) as_2\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>as_1 as_2 s.\n                   \\<lbrakk>as_1 @ as_2 = as; sat_precond_as s as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                                     sat_precond_as (exec_plan s as_1) as_2;\n        as_1 @ as_2 = a # as; sat_precond_as s (a # as);\n        as_1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                         sat_precond_as (exec_plan s as_1) as_2", "case Nil"], ["proof (state)\nthis:\n  as_1 = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>as_1 as_2 s.\n                \\<lbrakk>as_1 @ as_2 = as; sat_precond_as s as\\<rbrakk>\n                \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                                  sat_precond_as (exec_plan s as_1) as_2;\n     as_1 @ as_2 = a # as; sat_precond_as s (a # as); as_1 = []\\<rbrakk>\n    \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                      sat_precond_as (exec_plan s as_1) as_2\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>as_1 as_2 s.\n                   \\<lbrakk>as_1 @ as_2 = as; sat_precond_as s as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                                     sat_precond_as (exec_plan s as_1) as_2;\n        as_1 @ as_2 = a # as; sat_precond_as s (a # as);\n        as_1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                         sat_precond_as (exec_plan s as_1) as_2", "then"], ["proof (chain)\npicking this:\n  as_1 = []", "show ?thesis"], ["proof (prove)\nusing this:\n  as_1 = []\n\ngoal (1 subgoal):\n 1. sat_precond_as s as_1 \\<and> sat_precond_as (exec_plan s as_1) as_2", "using Cons.prems(1, 2)"], ["proof (prove)\nusing this:\n  as_1 = []\n  as_1 @ as_2 = a # as\n  sat_precond_as s (a # as)\n\ngoal (1 subgoal):\n 1. sat_precond_as s as_1 \\<and> sat_precond_as (exec_plan s as_1) as_2", "by auto"], ["proof (state)\nthis:\n  sat_precond_as s as_1 \\<and> sat_precond_as (exec_plan s as_1) as_2\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>as_1 as_2 s.\n                   \\<lbrakk>as_1 @ as_2 = as; sat_precond_as s as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                                     sat_precond_as (exec_plan s as_1) as_2;\n        as_1 @ as_2 = a # as; sat_precond_as s (a # as);\n        as_1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                         sat_precond_as (exec_plan s as_1) as_2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>as_1 as_2 s.\n                   \\<lbrakk>as_1 @ as_2 = as; sat_precond_as s as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                                     sat_precond_as (exec_plan s as_1) as_2;\n        as_1 @ as_2 = a # as; sat_precond_as s (a # as);\n        as_1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                         sat_precond_as (exec_plan s as_1) as_2", "case (Cons a list)"], ["proof (state)\nthis:\n  as_1 = a # list\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>as_1 as_2 s.\n                   \\<lbrakk>as_1 @ as_2 = as; sat_precond_as s as\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                                     sat_precond_as (exec_plan s as_1) as_2;\n        as_1 @ as_2 = a__ # as; sat_precond_as s (a__ # as);\n        as_1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                         sat_precond_as (exec_plan s as_1) as_2", "then"], ["proof (chain)\npicking this:\n  as_1 = a # list", "show ?thesis"], ["proof (prove)\nusing this:\n  as_1 = a # list\n\ngoal (1 subgoal):\n 1. sat_precond_as s as_1 \\<and> sat_precond_as (exec_plan s as_1) as_2", "using Cons.prems(1, 2) Cons.IH hd_append2  list.distinct(1) list.sel(1, 3) tl_append2"], ["proof (prove)\nusing this:\n  as_1 = a # list\n  as_1 @ as_2 = a__ # as\n  sat_precond_as s (a__ # as)\n  \\<lbrakk>?as_1.0 @ ?as_2.0 = as; sat_precond_as ?s as\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as ?s ?as_1.0 \\<and>\n                    sat_precond_as (exec_plan ?s ?as_1.0) ?as_2.0\n  ?xs \\<noteq> [] \\<Longrightarrow> hd (?xs @ ?ys) = hd ?xs\n  [] \\<noteq> ?x21.0 # ?x22.0\n  hd (?x21.0 # ?x22.0) = ?x21.0\n  tl (?x21.0 # ?x22.0) = ?x22.0\n  ?xs \\<noteq> [] \\<Longrightarrow> tl (?xs @ ?ys) = tl ?xs @ ?ys\n\ngoal (1 subgoal):\n 1. sat_precond_as s as_1 \\<and> sat_precond_as (exec_plan s as_1) as_2", "by auto"], ["proof (state)\nthis:\n  sat_precond_as s as_1 \\<and> sat_precond_as (exec_plan s as_1) as_2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sat_precond_as s as_1 \\<and> sat_precond_as (exec_plan s as_1) as_2\n\ngoal (1 subgoal):\n 1. \\<And>as_1 as_2 s.\n       \\<lbrakk>as_1 @ as_2 = []; sat_precond_as s []\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s as_1 \\<and>\n                         sat_precond_as (exec_plan s as_1) as_2", "qed auto"], ["", "lemma nempty_eff_every_nempty_act:\n  fixes as\n  assumes \"(no_effectless_act as)\" \"(\\<forall>x. \\<not>(fmdom' (snd (f x)) = {}))\"\n  shows \"(list_all (\\<lambda>a. \\<not>(f a = (fmempty, fmempty))) as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>a. f a \\<noteq> (fmempty, fmempty)) as", "using assms"], ["proof (prove)\nusing this:\n  no_effectless_act as\n  \\<forall>x. fmdom' (snd (f x)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>a. f a \\<noteq> (fmempty, fmempty)) as", "proof (induction as arbitrary: f)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>no_effectless_act [];\n        \\<forall>x. fmdom' (snd (f x)) \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> list_all\n                          (\\<lambda>a. f a \\<noteq> (fmempty, fmempty)) []\n 2. \\<And>a as f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>no_effectless_act as;\n                    \\<forall>x. fmdom' (snd (f x)) \\<noteq> {}\\<rbrakk>\n                   \\<Longrightarrow> list_all\n(\\<lambda>a. f a \\<noteq> (fmempty, fmempty)) as;\n        no_effectless_act (a # as);\n        \\<forall>x. fmdom' (snd (f x)) \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> list_all\n                          (\\<lambda>a. f a \\<noteq> (fmempty, fmempty))\n                          (a # as)", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>no_effectless_act as;\n   \\<forall>x. fmdom' (snd (?f x)) \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> list_all (\\<lambda>a. ?f a \\<noteq> (fmempty, fmempty))\n                     as\n  no_effectless_act (a # as)\n  \\<forall>x. fmdom' (snd (f x)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>no_effectless_act [];\n        \\<forall>x. fmdom' (snd (f x)) \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> list_all\n                          (\\<lambda>a. f a \\<noteq> (fmempty, fmempty)) []\n 2. \\<And>a as f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>no_effectless_act as;\n                    \\<forall>x. fmdom' (snd (f x)) \\<noteq> {}\\<rbrakk>\n                   \\<Longrightarrow> list_all\n(\\<lambda>a. f a \\<noteq> (fmempty, fmempty)) as;\n        no_effectless_act (a # as);\n        \\<forall>x. fmdom' (snd (f x)) \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> list_all\n                          (\\<lambda>a. f a \\<noteq> (fmempty, fmempty))\n                          (a # as)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>no_effectless_act as;\n   \\<forall>x. fmdom' (snd (?f x)) \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> list_all (\\<lambda>a. ?f a \\<noteq> (fmempty, fmempty))\n                     as\n  no_effectless_act (a # as)\n  \\<forall>x. fmdom' (snd (f x)) \\<noteq> {}", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>no_effectless_act as;\n   \\<forall>x. fmdom' (snd (?f x)) \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> list_all (\\<lambda>a. ?f a \\<noteq> (fmempty, fmempty))\n                     as\n  no_effectless_act (a # as)\n  \\<forall>x. fmdom' (snd (f x)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>a. f a \\<noteq> (fmempty, fmempty)) (a # as)", "using fmdom'_empty snd_conv"], ["proof (prove)\nusing this:\n  \\<lbrakk>no_effectless_act as;\n   \\<forall>x. fmdom' (snd (?f x)) \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> list_all (\\<lambda>a. ?f a \\<noteq> (fmempty, fmempty))\n                     as\n  no_effectless_act (a # as)\n  \\<forall>x. fmdom' (snd (f x)) \\<noteq> {}\n  fmdom' fmempty = {}\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>a. f a \\<noteq> (fmempty, fmempty)) (a # as)", "by (metis (mono_tags, lifting) Ball_set)"], ["proof (state)\nthis:\n  list_all (\\<lambda>a. f a \\<noteq> (fmempty, fmempty)) (a # as)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>no_effectless_act [];\n        \\<forall>x. fmdom' (snd (f x)) \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> list_all\n                          (\\<lambda>a. f a \\<noteq> (fmempty, fmempty)) []", "qed simp"], ["", "lemma empty_replace_proj_dual7:\n  fixes s as as'\n  assumes \"sat_precond_as s (as @ as')\"\n  shows \"sat_precond_as (exec_plan s as) as'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_precond_as (exec_plan s as) as'", "using assms"], ["proof (prove)\nusing this:\n  sat_precond_as s (as @ as')\n\ngoal (1 subgoal):\n 1. sat_precond_as (exec_plan s as) as'", "by (induction as arbitrary: as' s) auto"], ["", "lemma not_vset_not_disj_eff_prod_dom_diff:\n  fixes PROB a vs\n  assumes \"(a \\<in> PROB)\" \"(\\<not>varset_action a vs)\"\n  shows \"\\<not>((fmdom' (snd a) \\<inter> ((prob_dom PROB) - vs)) = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq> {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq> {}", "have 1: \"fmdom' (snd a) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<noteq> {}", "using assms(2) varset_action_def"], ["proof (prove)\nusing this:\n  \\<not> varset_action a vs\n  varset_action ?a ?varset \\<equiv> fmdom' (snd ?a) \\<subseteq> ?varset\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq> {}", "{"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq> {}", "have \"fmdom' (snd a) \\<subseteq> prob_dom PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> prob_dom PROB", "using assms(1) FDOM_eff_subset_prob_dom_pair"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  fmdom' (snd ?a) \\<subseteq> prob_dom ?PROB\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> prob_dom PROB", "by metis"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<subseteq> prob_dom PROB", "have \"\n      fmdom' (snd a) \\<inter> (prob_dom PROB - vs)\n      = (fmdom' (snd a)) - (fmdom' (snd a) \\<inter> vs)\""], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n    fmdom' (snd a) - fmdom' (snd a) \\<inter> vs", "using Diff_Int_distrib"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> prob_dom PROB\n  ?C \\<inter> (?A - ?B) = ?C \\<inter> ?A - ?C \\<inter> ?B\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n    fmdom' (snd a) - fmdom' (snd a) \\<inter> vs", "by blast"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n  fmdom' (snd a) - fmdom' (snd a) \\<inter> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq> {}", "}"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n  fmdom' (snd a) - fmdom' (snd a) \\<inter> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq> {}", "note 2 = this"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n  fmdom' (snd a) - fmdom' (snd a) \\<inter> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n  fmdom' (snd a) - fmdom' (snd a) \\<inter> vs", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n  fmdom' (snd a) - fmdom' (snd a) \\<inter> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq> {}", "using 1 2"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n  fmdom' (snd a) - fmdom' (snd a) \\<inter> vs\n  fmdom' (snd a) \\<noteq> {}\n  fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n  fmdom' (snd a) - fmdom' (snd a) \\<inter> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq> {}", "proof (cases \"fmdom' (snd a) \\<inter> vs = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n             fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<noteq> {};\n     fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n     fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<inter> vs = {}\\<rbrakk>\n    \\<Longrightarrow> fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq>\n                      {}\n 2. \\<lbrakk>fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n             fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<noteq> {};\n     fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n     fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<inter> vs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq>\n                      {}", "case False"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> vs \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n             fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<noteq> {};\n     fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n     fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<inter> vs = {}\\<rbrakk>\n    \\<Longrightarrow> fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq>\n                      {}\n 2. \\<lbrakk>fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n             fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<noteq> {};\n     fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n     fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<inter> vs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq>\n                      {}", "{"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> vs \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n             fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<noteq> {};\n     fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n     fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<inter> vs = {}\\<rbrakk>\n    \\<Longrightarrow> fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq>\n                      {}\n 2. \\<lbrakk>fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n             fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<noteq> {};\n     fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n     fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<inter> vs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq>\n                      {}", "have \"\\<not>(fmdom' (snd a) \\<subseteq> vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> fmdom' (snd a) \\<subseteq> vs", "using assms(2) varset_action_def"], ["proof (prove)\nusing this:\n  \\<not> varset_action a vs\n  varset_action ?a ?varset \\<equiv> fmdom' (snd ?a) \\<subseteq> ?varset\n\ngoal (1 subgoal):\n 1. \\<not> fmdom' (snd a) \\<subseteq> vs", "by fast"], ["proof (state)\nthis:\n  \\<not> fmdom' (snd a) \\<subseteq> vs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n             fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<noteq> {};\n     fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n     fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<inter> vs = {}\\<rbrakk>\n    \\<Longrightarrow> fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq>\n                      {}\n 2. \\<lbrakk>fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n             fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<noteq> {};\n     fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n     fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<inter> vs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq>\n                      {}", "then"], ["proof (chain)\npicking this:\n  \\<not> fmdom' (snd a) \\<subseteq> vs", "have \"(fmdom' (snd a) \\<inter> vs \\<noteq> fmdom' (snd a))\""], ["proof (prove)\nusing this:\n  \\<not> fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs \\<noteq> fmdom' (snd a)", "by auto"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> vs \\<noteq> fmdom' (snd a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n             fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<noteq> {};\n     fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n     fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<inter> vs = {}\\<rbrakk>\n    \\<Longrightarrow> fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq>\n                      {}\n 2. \\<lbrakk>fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n             fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<noteq> {};\n     fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n     fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<inter> vs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq>\n                      {}", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<inter> vs \\<noteq> fmdom' (snd a)", "have \"(fmdom' (snd a) \\<inter> vs) \\<subset> fmdom' (snd a)\""], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<inter> vs \\<noteq> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs \\<subset> fmdom' (snd a)", "by blast"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> vs \\<subset> fmdom' (snd a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n             fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<noteq> {};\n     fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n     fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<inter> vs = {}\\<rbrakk>\n    \\<Longrightarrow> fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq>\n                      {}\n 2. \\<lbrakk>fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n             fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<noteq> {};\n     fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n     fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<inter> vs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq>\n                      {}", "}"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> vs \\<subset> fmdom' (snd a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n             fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<noteq> {};\n     fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n     fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<inter> vs = {}\\<rbrakk>\n    \\<Longrightarrow> fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq>\n                      {}\n 2. \\<lbrakk>fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n             fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<noteq> {};\n     fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n     fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<inter> vs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq>\n                      {}", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<inter> vs \\<subset> fmdom' (snd a)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<inter> vs \\<subset> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq> {}", "using 2"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<inter> vs \\<subset> fmdom' (snd a)\n  fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n  fmdom' (snd a) - fmdom' (snd a) \\<inter> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n             fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<noteq> {};\n     fmdom' (snd a) \\<inter> (prob_dom PROB - vs) =\n     fmdom' (snd a) - fmdom' (snd a) \\<inter> vs;\n     fmdom' (snd a) \\<inter> vs = {}\\<rbrakk>\n    \\<Longrightarrow> fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq>\n                      {}", "qed force"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> (prob_dom PROB - vs) \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vset_disj_dom_eff_diff:\n  fixes PROB a vs\n  assumes \"(varset_action a vs)\"\n  shows \"(((fmdom' (snd a)) \\<inter> (prob_dom PROB - vs)) = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) = {}", "using assms"], ["proof (prove)\nusing this:\n  varset_action a vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) = {}", "unfolding varset_action_def"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs) = {}", "by auto"], ["", "lemma vset_diff_disj_eff_vs:\n  fixes PROB a vs\n  assumes \"(varset_action a (prob_dom PROB - vs))\"\n  shows \"(((fmdom' (snd a)) \\<inter> vs) = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs = {}", "using assms"], ["proof (prove)\nusing this:\n  varset_action a (prob_dom PROB - vs)\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs = {}", "unfolding varset_action_def"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> prob_dom PROB - vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs = {}", "by blast"], ["", "lemma vset_nempty_efff_not_disj_eff_vs:\n  fixes PROB a vs\n  assumes \"(varset_action a vs)\" \"(fmdom' (snd a) \\<noteq> {})\"\n  shows \"\\<not>((fmdom' (snd a) \\<inter> vs)) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs \\<noteq> {}", "using assms"], ["proof (prove)\nusing this:\n  varset_action a vs\n  fmdom' (snd a) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs \\<noteq> {}", "unfolding varset_action_def"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> vs\n  fmdom' (snd a) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs \\<noteq> {}", "by auto"], ["", "lemma vset_disj_eff_diff:\n  fixes s a vs\n  assumes \"(varset_action a vs)\"\n  shows \"((fmdom' (snd a) \\<inter> (s - vs)) = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (s - vs) = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (s - vs) = {}", "have 1: \"fmdom' (snd a) \\<subseteq> vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> vs", "using assms"], ["proof (prove)\nusing this:\n  varset_action a vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> vs", "by (simp add: varset_action_def)"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (s - vs) = {}", "moreover"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (s - vs) = {}", "{"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (s - vs) = {}", "have \"fmdom' (snd a) \\<inter> (s - vs) = (fmdom' (snd a) \\<inter> s) - (fmdom' (snd a) \\<inter> vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (s - vs) =\n    fmdom' (snd a) \\<inter> s - fmdom' (snd a) \\<inter> vs", "using Diff_Int_distrib"], ["proof (prove)\nusing this:\n  ?C \\<inter> (?A - ?B) = ?C \\<inter> ?A - ?C \\<inter> ?B\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (s - vs) =\n    fmdom' (snd a) \\<inter> s - fmdom' (snd a) \\<inter> vs", "by fast"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> (s - vs) =\n  fmdom' (snd a) \\<inter> s - fmdom' (snd a) \\<inter> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (s - vs) = {}", "also"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> (s - vs) =\n  fmdom' (snd a) \\<inter> s - fmdom' (snd a) \\<inter> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (s - vs) = {}", "have \" \\<dots> = (fmdom' (snd a) \\<inter> s) - (fmdom' (snd a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> s - fmdom' (snd a) \\<inter> vs =\n    fmdom' (snd a) \\<inter> s - fmdom' (snd a)", "using 1"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> s - fmdom' (snd a) \\<inter> vs =\n    fmdom' (snd a) \\<inter> s - fmdom' (snd a)", "by auto"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> s - fmdom' (snd a) \\<inter> vs =\n  fmdom' (snd a) \\<inter> s - fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (s - vs) = {}", "finally"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<inter> (s - vs) =\n  fmdom' (snd a) \\<inter> s - fmdom' (snd a)", "have \"fmdom' (snd a) \\<inter> (s - vs) = {}\""], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<inter> (s - vs) =\n  fmdom' (snd a) \\<inter> s - fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (s - vs) = {}", "by simp"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> (s - vs) = {}\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (s - vs) = {}", "}"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> (s - vs) = {}\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (s - vs) = {}", "ultimately"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<subseteq> vs\n  fmdom' (snd a) \\<inter> (s - vs) = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> vs\n  fmdom' (snd a) \\<inter> (s - vs) = {}\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (s - vs) = {}", "by blast"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> (s - vs) = {}\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma list_all_list_mem:\n  fixes P and l :: \"'a list\"\n  shows \"list_all P l \\<longleftrightarrow> (\\<forall>e. ListMem e l \\<longrightarrow> P e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "assume P1: \"list_all P l\""], ["proof (state)\nthis:\n  list_all P l\n\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "{"], ["proof (state)\nthis:\n  list_all P l\n\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "assume P11: \"ListMem e l\""], ["proof (state)\nthis:\n  ListMem e l\n\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "then"], ["proof (chain)\npicking this:\n  ListMem e l", "have \"P e\""], ["proof (prove)\nusing this:\n  ListMem e l\n\ngoal (1 subgoal):\n 1. P e", "using P1 P11"], ["proof (prove)\nusing this:\n  ListMem e l\n  list_all P l\n  ListMem e l\n\ngoal (1 subgoal):\n 1. P e", "proof (induction l arbitrary: P)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xs P.\n       \\<lbrakk>list_all P (x # xs); ListMem x (x # xs)\\<rbrakk>\n       \\<Longrightarrow> P x\n 2. \\<And>x xs y P.\n       \\<lbrakk>ListMem x xs;\n        \\<And>P.\n           \\<lbrakk>list_all P xs; ListMem x xs\\<rbrakk>\n           \\<Longrightarrow> P x;\n        list_all P (y # xs); ListMem x (y # xs)\\<rbrakk>\n       \\<Longrightarrow> P x", "case (insert x xs y)"], ["proof (state)\nthis:\n  ListMem x xs\n  \\<lbrakk>list_all ?P xs; ListMem x xs\\<rbrakk> \\<Longrightarrow> ?P x\n  list_all P (y # xs)\n  ListMem x (y # xs)\n\ngoal (2 subgoals):\n 1. \\<And>x xs P.\n       \\<lbrakk>list_all P (x # xs); ListMem x (x # xs)\\<rbrakk>\n       \\<Longrightarrow> P x\n 2. \\<And>x xs y P.\n       \\<lbrakk>ListMem x xs;\n        \\<And>P.\n           \\<lbrakk>list_all P xs; ListMem x xs\\<rbrakk>\n           \\<Longrightarrow> P x;\n        list_all P (y # xs); ListMem x (y # xs)\\<rbrakk>\n       \\<Longrightarrow> P x", "then"], ["proof (chain)\npicking this:\n  ListMem x xs\n  \\<lbrakk>list_all ?P xs; ListMem x xs\\<rbrakk> \\<Longrightarrow> ?P x\n  list_all P (y # xs)\n  ListMem x (y # xs)", "show ?case"], ["proof (prove)\nusing this:\n  ListMem x xs\n  \\<lbrakk>list_all ?P xs; ListMem x xs\\<rbrakk> \\<Longrightarrow> ?P x\n  list_all P (y # xs)\n  ListMem x (y # xs)\n\ngoal (1 subgoal):\n 1. P x", "proof (cases \"y = x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ListMem x xs;\n     \\<And>P.\n        \\<lbrakk>list_all P xs; ListMem x xs\\<rbrakk> \\<Longrightarrow> P x;\n     list_all P (y # xs); ListMem x (y # xs); y = x\\<rbrakk>\n    \\<Longrightarrow> P x\n 2. \\<lbrakk>ListMem x xs;\n     \\<And>P.\n        \\<lbrakk>list_all P xs; ListMem x xs\\<rbrakk> \\<Longrightarrow> P x;\n     list_all P (y # xs); ListMem x (y # xs); y \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> P x", "case False"], ["proof (state)\nthis:\n  y \\<noteq> x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ListMem x xs;\n     \\<And>P.\n        \\<lbrakk>list_all P xs; ListMem x xs\\<rbrakk> \\<Longrightarrow> P x;\n     list_all P (y # xs); ListMem x (y # xs); y = x\\<rbrakk>\n    \\<Longrightarrow> P x\n 2. \\<lbrakk>ListMem x xs;\n     \\<And>P.\n        \\<lbrakk>list_all P xs; ListMem x xs\\<rbrakk> \\<Longrightarrow> P x;\n     list_all P (y # xs); ListMem x (y # xs); y \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> P x", "then"], ["proof (chain)\npicking this:\n  y \\<noteq> x", "have \"list_all P xs\" \"ListMem x xs\""], ["proof (prove)\nusing this:\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. list_all P xs &&& ListMem x xs", "using insert.prems(1) insert.hyps"], ["proof (prove)\nusing this:\n  y \\<noteq> x\n  list_all P (y # xs)\n  ListMem x xs\n\ngoal (1 subgoal):\n 1. list_all P xs &&& ListMem x xs", "by fastforce+"], ["proof (state)\nthis:\n  list_all P xs\n  ListMem x xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ListMem x xs;\n     \\<And>P.\n        \\<lbrakk>list_all P xs; ListMem x xs\\<rbrakk> \\<Longrightarrow> P x;\n     list_all P (y # xs); ListMem x (y # xs); y = x\\<rbrakk>\n    \\<Longrightarrow> P x\n 2. \\<lbrakk>ListMem x xs;\n     \\<And>P.\n        \\<lbrakk>list_all P xs; ListMem x xs\\<rbrakk> \\<Longrightarrow> P x;\n     list_all P (y # xs); ListMem x (y # xs); y \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> P x", "then"], ["proof (chain)\npicking this:\n  list_all P xs\n  ListMem x xs", "show ?thesis"], ["proof (prove)\nusing this:\n  list_all P xs\n  ListMem x xs\n\ngoal (1 subgoal):\n 1. P x", "using insert.IH"], ["proof (prove)\nusing this:\n  list_all P xs\n  ListMem x xs\n  \\<lbrakk>list_all ?P xs; ListMem x xs\\<rbrakk> \\<Longrightarrow> ?P x\n\ngoal (1 subgoal):\n 1. P x", "by blast"], ["proof (state)\nthis:\n  P x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ListMem x xs;\n     \\<And>P.\n        \\<lbrakk>list_all P xs; ListMem x xs\\<rbrakk> \\<Longrightarrow> P x;\n     list_all P (y # xs); ListMem x (y # xs); y = x\\<rbrakk>\n    \\<Longrightarrow> P x", "qed simp"], ["proof (state)\nthis:\n  P x\n\ngoal (1 subgoal):\n 1. \\<And>x xs P.\n       \\<lbrakk>list_all P (x # xs); ListMem x (x # xs)\\<rbrakk>\n       \\<Longrightarrow> P x", "qed simp"], ["proof (state)\nthis:\n  P e\n\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "}"], ["proof (state)\nthis:\n  ListMem ?e2 l \\<Longrightarrow> P ?e2\n\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>list_all P l; ListMem ?e2 l\\<rbrakk> \\<Longrightarrow> P ?e2\n\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>list_all P l; ListMem ?e2 l\\<rbrakk> \\<Longrightarrow> P ?e2\n\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>list_all P l; ListMem ?e2 l\\<rbrakk> \\<Longrightarrow> P ?e2\n\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "assume P2: \"(\\<forall>e. ListMem e l \\<longrightarrow> P e)\""], ["proof (state)\nthis:\n  \\<forall>e. ListMem e l \\<longrightarrow> P e\n\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "then"], ["proof (chain)\npicking this:\n  \\<forall>e. ListMem e l \\<longrightarrow> P e", "have \"list_all P l\""], ["proof (prove)\nusing this:\n  \\<forall>e. ListMem e l \\<longrightarrow> P e\n\ngoal (1 subgoal):\n 1. list_all P l", "proof(induction l arbitrary: P)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<forall>e. ListMem e [] \\<longrightarrow> P e \\<Longrightarrow>\n       list_all P []\n 2. \\<And>a l P.\n       \\<lbrakk>\\<And>P.\n                   \\<forall>e.\n                      ListMem e l \\<longrightarrow> P e \\<Longrightarrow>\n                   list_all P l;\n        \\<forall>e. ListMem e (a # l) \\<longrightarrow> P e\\<rbrakk>\n       \\<Longrightarrow> list_all P (a # l)", "case (Cons a l)"], ["proof (state)\nthis:\n  \\<forall>e. ListMem e l \\<longrightarrow> ?P e \\<Longrightarrow>\n  list_all ?P l\n  \\<forall>e. ListMem e (a # l) \\<longrightarrow> P e\n\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<forall>e. ListMem e [] \\<longrightarrow> P e \\<Longrightarrow>\n       list_all P []\n 2. \\<And>a l P.\n       \\<lbrakk>\\<And>P.\n                   \\<forall>e.\n                      ListMem e l \\<longrightarrow> P e \\<Longrightarrow>\n                   list_all P l;\n        \\<forall>e. ListMem e (a # l) \\<longrightarrow> P e\\<rbrakk>\n       \\<Longrightarrow> list_all P (a # l)", "{"], ["proof (state)\nthis:\n  \\<forall>e. ListMem e l \\<longrightarrow> ?P e \\<Longrightarrow>\n  list_all ?P l\n  \\<forall>e. ListMem e (a # l) \\<longrightarrow> P e\n\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<forall>e. ListMem e [] \\<longrightarrow> P e \\<Longrightarrow>\n       list_all P []\n 2. \\<And>a l P.\n       \\<lbrakk>\\<And>P.\n                   \\<forall>e.\n                      ListMem e l \\<longrightarrow> P e \\<Longrightarrow>\n                   list_all P l;\n        \\<forall>e. ListMem e (a # l) \\<longrightarrow> P e\\<rbrakk>\n       \\<Longrightarrow> list_all P (a # l)", "have \"\\<forall>e. ListMem e l \\<longrightarrow> P e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e. ListMem e l \\<longrightarrow> P e", "using Cons.prems insert"], ["proof (prove)\nusing this:\n  \\<forall>e. ListMem e (a # l) \\<longrightarrow> P e\n  ListMem ?x ?xs \\<Longrightarrow> ListMem ?x (?y # ?xs)\n\ngoal (1 subgoal):\n 1. \\<forall>e. ListMem e l \\<longrightarrow> P e", "by fast"], ["proof (state)\nthis:\n  \\<forall>e. ListMem e l \\<longrightarrow> P e\n\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<forall>e. ListMem e [] \\<longrightarrow> P e \\<Longrightarrow>\n       list_all P []\n 2. \\<And>a l P.\n       \\<lbrakk>\\<And>P.\n                   \\<forall>e.\n                      ListMem e l \\<longrightarrow> P e \\<Longrightarrow>\n                   list_all P l;\n        \\<forall>e. ListMem e (a # l) \\<longrightarrow> P e\\<rbrakk>\n       \\<Longrightarrow> list_all P (a # l)", "then"], ["proof (chain)\npicking this:\n  \\<forall>e. ListMem e l \\<longrightarrow> P e", "have \"list_all P l\""], ["proof (prove)\nusing this:\n  \\<forall>e. ListMem e l \\<longrightarrow> P e\n\ngoal (1 subgoal):\n 1. list_all P l", "using Cons.IH"], ["proof (prove)\nusing this:\n  \\<forall>e. ListMem e l \\<longrightarrow> P e\n  \\<forall>e. ListMem e l \\<longrightarrow> ?P e \\<Longrightarrow>\n  list_all ?P l\n\ngoal (1 subgoal):\n 1. list_all P l", "by blast"], ["proof (state)\nthis:\n  list_all P l\n\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<forall>e. ListMem e [] \\<longrightarrow> P e \\<Longrightarrow>\n       list_all P []\n 2. \\<And>a l P.\n       \\<lbrakk>\\<And>P.\n                   \\<forall>e.\n                      ListMem e l \\<longrightarrow> P e \\<Longrightarrow>\n                   list_all P l;\n        \\<forall>e. ListMem e (a # l) \\<longrightarrow> P e\\<rbrakk>\n       \\<Longrightarrow> list_all P (a # l)", "}"], ["proof (state)\nthis:\n  list_all P l\n\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<forall>e. ListMem e [] \\<longrightarrow> P e \\<Longrightarrow>\n       list_all P []\n 2. \\<And>a l P.\n       \\<lbrakk>\\<And>P.\n                   \\<forall>e.\n                      ListMem e l \\<longrightarrow> P e \\<Longrightarrow>\n                   list_all P l;\n        \\<forall>e. ListMem e (a # l) \\<longrightarrow> P e\\<rbrakk>\n       \\<Longrightarrow> list_all P (a # l)", "moreover"], ["proof (state)\nthis:\n  list_all P l\n\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<forall>e. ListMem e [] \\<longrightarrow> P e \\<Longrightarrow>\n       list_all P []\n 2. \\<And>a l P.\n       \\<lbrakk>\\<And>P.\n                   \\<forall>e.\n                      ListMem e l \\<longrightarrow> P e \\<Longrightarrow>\n                   list_all P l;\n        \\<forall>e. ListMem e (a # l) \\<longrightarrow> P e\\<rbrakk>\n       \\<Longrightarrow> list_all P (a # l)", "have \"P a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P a", "using Cons.prems elem"], ["proof (prove)\nusing this:\n  \\<forall>e. ListMem e (a # l) \\<longrightarrow> P e\n  ListMem ?x (?x # ?xs)\n\ngoal (1 subgoal):\n 1. P a", "by fast"], ["proof (state)\nthis:\n  P a\n\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<forall>e. ListMem e [] \\<longrightarrow> P e \\<Longrightarrow>\n       list_all P []\n 2. \\<And>a l P.\n       \\<lbrakk>\\<And>P.\n                   \\<forall>e.\n                      ListMem e l \\<longrightarrow> P e \\<Longrightarrow>\n                   list_all P l;\n        \\<forall>e. ListMem e (a # l) \\<longrightarrow> P e\\<rbrakk>\n       \\<Longrightarrow> list_all P (a # l)", "ultimately"], ["proof (chain)\npicking this:\n  list_all P l\n  P a", "show ?case"], ["proof (prove)\nusing this:\n  list_all P l\n  P a\n\ngoal (1 subgoal):\n 1. list_all P (a # l)", "by simp"], ["proof (state)\nthis:\n  list_all P (a # l)\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<forall>e. ListMem e [] \\<longrightarrow> P e \\<Longrightarrow>\n       list_all P []", "qed simp"], ["proof (state)\nthis:\n  list_all P l\n\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "}"], ["proof (state)\nthis:\n  \\<forall>e. ListMem e l \\<longrightarrow> P e \\<Longrightarrow>\n  list_all P l\n\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>list_all P l; ListMem ?e2 l\\<rbrakk> \\<Longrightarrow> P ?e2\n  \\<forall>e. ListMem e l \\<longrightarrow> P e \\<Longrightarrow>\n  list_all P l", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>list_all P l; ListMem ?e2 l\\<rbrakk> \\<Longrightarrow> P ?e2\n  \\<forall>e. ListMem e l \\<longrightarrow> P e \\<Longrightarrow>\n  list_all P l\n\ngoal (1 subgoal):\n 1. list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)", "by blast"], ["proof (state)\nthis:\n  list_all P l = (\\<forall>e. ListMem e l \\<longrightarrow> P e)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma every_vset_imp_drestrict_exec_eq:\n  fixes PROB vs as s\n  assumes \"(list_all (\\<lambda>a. varset_action a ((prob_dom PROB) - vs)) as)\"\n  shows \"(fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "have 1: \"\\<forall>e. ListMem e as \\<longrightarrow> varset_action e ((prob_dom PROB) - vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e.\n       ListMem e as \\<longrightarrow> varset_action e (prob_dom PROB - vs)", "using assms list_all_list_mem"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>a. varset_action a (prob_dom PROB - vs)) as\n  list_all ?P ?l = (\\<forall>e. ListMem e ?l \\<longrightarrow> ?P e)\n\ngoal (1 subgoal):\n 1. \\<forall>e.\n       ListMem e as \\<longrightarrow> varset_action e (prob_dom PROB - vs)", "by metis"], ["proof (state)\nthis:\n  \\<forall>e.\n     ListMem e as \\<longrightarrow> varset_action e (prob_dom PROB - vs)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "{"], ["proof (state)\nthis:\n  \\<forall>e.\n     ListMem e as \\<longrightarrow> varset_action e (prob_dom PROB - vs)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "assume \"ListMem a as\""], ["proof (state)\nthis:\n  ListMem a as\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  ListMem a as", "have \"varset_action a (prob_dom PROB - vs)\""], ["proof (prove)\nusing this:\n  ListMem a as\n\ngoal (1 subgoal):\n 1. varset_action a (prob_dom PROB - vs)", "using 1"], ["proof (prove)\nusing this:\n  ListMem a as\n  \\<forall>e.\n     ListMem e as \\<longrightarrow> varset_action e (prob_dom PROB - vs)\n\ngoal (1 subgoal):\n 1. varset_action a (prob_dom PROB - vs)", "by blast"], ["proof (state)\nthis:\n  varset_action a (prob_dom PROB - vs)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  varset_action a (prob_dom PROB - vs)", "have \"disjnt (fmdom' (snd a)) vs\""], ["proof (prove)\nusing this:\n  varset_action a (prob_dom PROB - vs)\n\ngoal (1 subgoal):\n 1. disjnt (fmdom' (snd a)) vs", "unfolding disjnt_def"], ["proof (prove)\nusing this:\n  varset_action a (prob_dom PROB - vs)\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs = {}", "using vset_diff_disj_eff_vs"], ["proof (prove)\nusing this:\n  varset_action a (prob_dom PROB - vs)\n  varset_action ?a (prob_dom ?PROB - ?vs) \\<Longrightarrow>\n  fmdom' (snd ?a) \\<inter> ?vs = {}\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs = {}", "by blast"], ["proof (state)\nthis:\n  disjnt (fmdom' (snd a)) vs\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "}"], ["proof (state)\nthis:\n  ListMem ?a2 as \\<Longrightarrow> disjnt (fmdom' (snd ?a2)) vs\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  ListMem ?a2 as \\<Longrightarrow> disjnt (fmdom' (snd ?a2)) vs", "have \"list_all (\\<lambda>a. disjnt (fmdom' (snd a)) vs) as\""], ["proof (prove)\nusing this:\n  ListMem ?a2 as \\<Longrightarrow> disjnt (fmdom' (snd ?a2)) vs\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>a. disjnt (fmdom' (snd a)) vs) as", "using list_all_list_mem"], ["proof (prove)\nusing this:\n  ListMem ?a2 as \\<Longrightarrow> disjnt (fmdom' (snd ?a2)) vs\n  list_all ?P ?l = (\\<forall>e. ListMem e ?l \\<longrightarrow> ?P e)\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>a. disjnt (fmdom' (snd a)) vs) as", "by blast"], ["proof (state)\nthis:\n  list_all (\\<lambda>a. disjnt (fmdom' (snd a)) vs) as\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  list_all (\\<lambda>a. disjnt (fmdom' (snd a)) vs) as", "have \"list_all (\\<lambda>a. disjnt (fmdom' (snd a)) vs) (rem_condless_act s [] as)\""], ["proof (prove)\nusing this:\n  list_all (\\<lambda>a. disjnt (fmdom' (snd a)) vs) as\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>a. disjnt (fmdom' (snd a)) vs)\n     (rem_condless_act s [] as)", "by (simp add: rem_condless_valid_7)"], ["proof (state)\nthis:\n  list_all (\\<lambda>a. disjnt (fmdom' (snd a)) vs)\n   (rem_condless_act s [] as)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  list_all (\\<lambda>a. disjnt (fmdom' (snd a)) vs)\n   (rem_condless_act s [] as)", "have \"exec_plan s as = exec_plan s (rem_condless_act s [] as)\""], ["proof (prove)\nusing this:\n  list_all (\\<lambda>a. disjnt (fmdom' (snd a)) vs)\n   (rem_condless_act s [] as)\n\ngoal (1 subgoal):\n 1. exec_plan s as = exec_plan s (rem_condless_act s [] as)", "using rem_condless_valid_1"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>a. disjnt (fmdom' (snd a)) vs)\n   (rem_condless_act s [] as)\n  exec_plan ?s ?as = exec_plan ?s (rem_condless_act ?s [] ?as)\n\ngoal (1 subgoal):\n 1. exec_plan s as = exec_plan s (rem_condless_act s [] as)", "by blast"], ["proof (state)\nthis:\n  exec_plan s as = exec_plan s (rem_condless_act s [] as)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  exec_plan s as = exec_plan s (rem_condless_act s [] as)", "have\"sat_precond_as s (rem_condless_act s [] as)\""], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s (rem_condless_act s [] as)\n\ngoal (1 subgoal):\n 1. sat_precond_as s (rem_condless_act s [] as)", "using rem_condless_valid_2"], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s (rem_condless_act s [] as)\n  sat_precond_as ?s (rem_condless_act ?s [] ?as)\n\ngoal (1 subgoal):\n 1. sat_precond_as s (rem_condless_act s [] as)", "by blast"], ["proof (state)\nthis:\n  sat_precond_as s (rem_condless_act s [] as)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  sat_precond_as s (rem_condless_act s [] as)", "have \"sat_precond_as s [a\\<leftarrow>as . \\<not> varset_action a (prob_dom PROB - vs)]\""], ["proof (prove)\nusing this:\n  sat_precond_as s (rem_condless_act s [] as)\n\ngoal (1 subgoal):\n 1. sat_precond_as s\n     (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs)) as)", "by (simp add: 1 ListMem_iff)"], ["proof (state)\nthis:\n  sat_precond_as s\n   (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs)) as)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  sat_precond_as s\n   (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs)) as)", "have \"fmrestrict_set vs s = fmrestrict_set vs s\""], ["proof (prove)\nusing this:\n  sat_precond_as s\n   (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs)) as)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs s", "by simp"], ["proof (state)\nthis:\n  fmrestrict_set vs s = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs s = fmrestrict_set vs s", "have \"\n    fmrestrict_set vs (exec_plan s as) =\n    fmrestrict_set vs (exec_plan s [a\\<leftarrow>as . \\<not> varset_action a (prob_dom PROB - vs)])\n  \""], ["proof (prove)\nusing this:\n  fmrestrict_set vs s = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s as) =\n    fmrestrict_set vs\n     (exec_plan s\n       (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs))\n         as))", "using 1 graph_plan_lemma_4[where\n        s = s and s' = s and as = \"rem_condless_act s [] as\" and vs = vs and\n        P = \"\\<lambda>a. varset_action a (prob_dom PROB - vs)\"\n        ] filter_empty_every_not vset_diff_disj_eff_vs 1disjoint_effects_no_effects\n      exec_plan.simps(1) fmdom'_restrict_set_precise list_all_list_mem"], ["proof (prove)\nusing this:\n  fmrestrict_set vs s = fmrestrict_set vs s\n  \\<forall>e.\n     ListMem e as \\<longrightarrow> varset_action e (prob_dom PROB - vs)\n  \\<lbrakk>\\<forall>a.\n              ListMem a (rem_condless_act s [] as) \\<and>\n              varset_action a (prob_dom PROB - vs) \\<longrightarrow>\n              fmdom' (snd a) \\<inter> vs = {};\n   sat_precond_as s (rem_condless_act s [] as);\n   sat_precond_as s\n    (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs))\n      (rem_condless_act s [] as));\n   fmrestrict_set vs s = fmrestrict_set vs s\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set vs\n                     (exec_plan s (rem_condless_act s [] as)) =\n                    fmrestrict_set vs\n                     (exec_plan s\n                       (filter\n                         (\\<lambda>a.\n                             \\<not> varset_action a (prob_dom PROB - vs))\n                         (rem_condless_act s [] as)))\n  (filter ?P ?l = []) = list_all (\\<lambda>x. \\<not> ?P x) ?l\n  varset_action ?a (prob_dom ?PROB - ?vs) \\<Longrightarrow>\n  fmdom' (snd ?a) \\<inter> ?vs = {}\n  \\<forall>e.\n     ListMem e as \\<longrightarrow> varset_action e (prob_dom PROB - vs)\n  \\<forall>a.\n     ListMem a ?as \\<longrightarrow>\n     fmdom' (fmrestrict_set ?vs (snd a)) = {} \\<Longrightarrow>\n  fmrestrict_set ?vs (exec_plan ?s ?as) = fmrestrict_set ?vs ?s\n  exec_plan ?s [] = ?s\n  fmdom' (fmrestrict_set ?A ?m) = fmdom' ?m \\<inter> ?A\n  list_all ?P ?l = (\\<forall>e. ListMem e ?l \\<longrightarrow> ?P e)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s as) =\n    fmrestrict_set vs\n     (exec_plan s\n       (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs))\n         as))", "by smt"], ["proof (state)\nthis:\n  fmrestrict_set vs (exec_plan s as) =\n  fmrestrict_set vs\n   (exec_plan s\n     (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs)) as))\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (exec_plan s as) =\n  fmrestrict_set vs\n   (exec_plan s\n     (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs)) as))", "have \"list_all (\\<lambda>a. varset_action a (prob_dom PROB - vs)) (rem_condless_act s [] as)\""], ["proof (prove)\nusing this:\n  fmrestrict_set vs (exec_plan s as) =\n  fmrestrict_set vs\n   (exec_plan s\n     (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs)) as))\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>a. varset_action a (prob_dom PROB - vs))\n     (rem_condless_act s [] as)", "using assms(1) rem_condless_valid_7 list.pred_inject(1)"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (exec_plan s as) =\n  fmrestrict_set vs\n   (exec_plan s\n     (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs)) as))\n  list_all (\\<lambda>a. varset_action a (prob_dom PROB - vs)) as\n  list_all ?P ?as \\<and> list_all ?P ?as2.0 \\<Longrightarrow>\n  list_all ?P (rem_condless_act ?s ?as2.0 ?as)\n  list_all ?P []\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>a. varset_action a (prob_dom PROB - vs))\n     (rem_condless_act s [] as)", "by blast"], ["proof (state)\nthis:\n  list_all (\\<lambda>a. varset_action a (prob_dom PROB - vs))\n   (rem_condless_act s [] as)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  list_all (\\<lambda>a. varset_action a (prob_dom PROB - vs))\n   (rem_condless_act s [] as)", "have \"filter (\\<lambda>a. \\<not>(varset_action a (prob_dom PROB - vs))) (rem_condless_act s [] as) = []\""], ["proof (prove)\nusing this:\n  list_all (\\<lambda>a. varset_action a (prob_dom PROB - vs))\n   (rem_condless_act s [] as)\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs))\n     (rem_condless_act s [] as) =\n    []", "using filter_empty_every_not"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>a. varset_action a (prob_dom PROB - vs))\n   (rem_condless_act s [] as)\n  (filter ?P ?l = []) = list_all (\\<lambda>x. \\<not> ?P x) ?l\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs))\n     (rem_condless_act s [] as) =\n    []", "by fastforce"], ["proof (state)\nthis:\n  filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs))\n   (rem_condless_act s [] as) =\n  []\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs))\n   (rem_condless_act s [] as) =\n  []", "have \"\n    sat_precond_as s (filter (\\<lambda>a. \\<not>(varset_action a (prob_dom PROB - vs)))\n    (rem_condless_act s []as))\n  \""], ["proof (prove)\nusing this:\n  filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs))\n   (rem_condless_act s [] as) =\n  []\n\ngoal (1 subgoal):\n 1. sat_precond_as s\n     (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs))\n       (rem_condless_act s [] as))", "by fastforce"], ["proof (state)\nthis:\n  sat_precond_as s\n   (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs))\n     (rem_condless_act s [] as))\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  sat_precond_as s\n   (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs))\n     (rem_condless_act s [] as))", "show ?thesis"], ["proof (prove)\nusing this:\n  sat_precond_as s\n   (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs))\n     (rem_condless_act s [] as))\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "using 1 vset_diff_disj_eff_vs disjoint_effects_no_effects fmdom'_restrict_set_precise"], ["proof (prove)\nusing this:\n  sat_precond_as s\n   (filter (\\<lambda>a. \\<not> varset_action a (prob_dom PROB - vs))\n     (rem_condless_act s [] as))\n  \\<forall>e.\n     ListMem e as \\<longrightarrow> varset_action e (prob_dom PROB - vs)\n  varset_action ?a (prob_dom ?PROB - ?vs) \\<Longrightarrow>\n  fmdom' (snd ?a) \\<inter> ?vs = {}\n  \\<forall>a.\n     ListMem a ?as \\<longrightarrow>\n     fmdom' (fmrestrict_set ?vs (snd a)) = {} \\<Longrightarrow>\n  fmrestrict_set ?vs (exec_plan ?s ?as) = fmrestrict_set ?vs ?s\n  fmdom' (fmrestrict_set ?A ?m) = fmdom' ?m \\<inter> ?A\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)", "by metis"], ["proof (state)\nthis:\n  fmrestrict_set vs s = fmrestrict_set vs (exec_plan s as)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma no_effectless_act_works:\n  fixes as\n  assumes \"(no_effectless_act as)\"\n  shows \"(filter (\\<lambda>a. \\<not>(fmdom' (snd a) = {})) as = as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) as = as", "using assms"], ["proof (prove)\nusing this:\n  no_effectless_act as\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) as = as", "by (simp add: Ball_set rem_effectless_works_7)"], ["", "lemma varset_act_diff_un_imp_varset_diff:\n  fixes a vs vs' vs''\n  assumes \"(varset_action a (vs'' -  (vs' \\<union> vs)))\"\n  shows \"(varset_action a (vs'' - vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. varset_action a (vs'' - vs)", "using assms"], ["proof (prove)\nusing this:\n  varset_action a (vs'' - (vs' \\<union> vs))\n\ngoal (1 subgoal):\n 1. varset_action a (vs'' - vs)", "unfolding varset_action_def"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> vs'' - (vs' \\<union> vs)\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> vs'' - vs", "by blast"], ["", "lemma vset_diff_union_vset_diff:\n  fixes s vs vs' a\n  assumes \"(varset_action a (s - (vs \\<union> vs')))\"\n  shows \"(varset_action a (s - vs'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. varset_action a (s - vs')", "using assms"], ["proof (prove)\nusing this:\n  varset_action a (s - (vs \\<union> vs'))\n\ngoal (1 subgoal):\n 1. varset_action a (s - vs')", "unfolding varset_action_def"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> s - (vs \\<union> vs')\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> s - vs'", "by blast"], ["", "lemma valid_filter_vset_dom_idempot:\n  fixes PROB as\n  assumes \"(as \\<in> valid_plans PROB)\"\n  shows \"(filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as", "using assms"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as", "proof (induction as)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] \\<in> valid_plans PROB \\<Longrightarrow>\n    filter (\\<lambda>a. varset_action a (prob_dom PROB)) [] = []\n 2. \\<And>a as.\n       \\<lbrakk>as \\<in> valid_plans PROB \\<Longrightarrow>\n                filter (\\<lambda>a. varset_action a (prob_dom PROB)) as =\n                as;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> filter\n                          (\\<lambda>a. varset_action a (prob_dom PROB))\n                          (a # as) =\n                         a # as", "case (Cons a as)"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB \\<Longrightarrow>\n  filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as\n  a # as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. [] \\<in> valid_plans PROB \\<Longrightarrow>\n    filter (\\<lambda>a. varset_action a (prob_dom PROB)) [] = []\n 2. \\<And>a as.\n       \\<lbrakk>as \\<in> valid_plans PROB \\<Longrightarrow>\n                filter (\\<lambda>a. varset_action a (prob_dom PROB)) as =\n                as;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> filter\n                          (\\<lambda>a. varset_action a (prob_dom PROB))\n                          (a # as) =\n                         a # as", "{"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB \\<Longrightarrow>\n  filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as\n  a # as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. [] \\<in> valid_plans PROB \\<Longrightarrow>\n    filter (\\<lambda>a. varset_action a (prob_dom PROB)) [] = []\n 2. \\<And>a as.\n       \\<lbrakk>as \\<in> valid_plans PROB \\<Longrightarrow>\n                filter (\\<lambda>a. varset_action a (prob_dom PROB)) as =\n                as;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> filter\n                          (\\<lambda>a. varset_action a (prob_dom PROB))\n                          (a # as) =\n                         a # as", "have \"as \\<in> valid_plans PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "using Cons.prems valid_plan_valid_tail"], ["proof (prove)\nusing this:\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  ?as \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "by fast"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. [] \\<in> valid_plans PROB \\<Longrightarrow>\n    filter (\\<lambda>a. varset_action a (prob_dom PROB)) [] = []\n 2. \\<And>a as.\n       \\<lbrakk>as \\<in> valid_plans PROB \\<Longrightarrow>\n                filter (\\<lambda>a. varset_action a (prob_dom PROB)) as =\n                as;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> filter\n                          (\\<lambda>a. varset_action a (prob_dom PROB))\n                          (a # as) =\n                         a # as", "then"], ["proof (chain)\npicking this:\n  as \\<in> valid_plans PROB", "have \"(filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as)\""], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as", "using Cons.IH"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  as \\<in> valid_plans PROB \\<Longrightarrow>\n  filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as", "by blast"], ["proof (state)\nthis:\n  filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as\n\ngoal (2 subgoals):\n 1. [] \\<in> valid_plans PROB \\<Longrightarrow>\n    filter (\\<lambda>a. varset_action a (prob_dom PROB)) [] = []\n 2. \\<And>a as.\n       \\<lbrakk>as \\<in> valid_plans PROB \\<Longrightarrow>\n                filter (\\<lambda>a. varset_action a (prob_dom PROB)) as =\n                as;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> filter\n                          (\\<lambda>a. varset_action a (prob_dom PROB))\n                          (a # as) =\n                         a # as", "}"], ["proof (state)\nthis:\n  filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as\n\ngoal (2 subgoals):\n 1. [] \\<in> valid_plans PROB \\<Longrightarrow>\n    filter (\\<lambda>a. varset_action a (prob_dom PROB)) [] = []\n 2. \\<And>a as.\n       \\<lbrakk>as \\<in> valid_plans PROB \\<Longrightarrow>\n                filter (\\<lambda>a. varset_action a (prob_dom PROB)) as =\n                as;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> filter\n                          (\\<lambda>a. varset_action a (prob_dom PROB))\n                          (a # as) =\n                         a # as", "moreover"], ["proof (state)\nthis:\n  filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as\n\ngoal (2 subgoals):\n 1. [] \\<in> valid_plans PROB \\<Longrightarrow>\n    filter (\\<lambda>a. varset_action a (prob_dom PROB)) [] = []\n 2. \\<And>a as.\n       \\<lbrakk>as \\<in> valid_plans PROB \\<Longrightarrow>\n                filter (\\<lambda>a. varset_action a (prob_dom PROB)) as =\n                as;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> filter\n                          (\\<lambda>a. varset_action a (prob_dom PROB))\n                          (a # as) =\n                         a # as", "{"], ["proof (state)\nthis:\n  filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as\n\ngoal (2 subgoals):\n 1. [] \\<in> valid_plans PROB \\<Longrightarrow>\n    filter (\\<lambda>a. varset_action a (prob_dom PROB)) [] = []\n 2. \\<And>a as.\n       \\<lbrakk>as \\<in> valid_plans PROB \\<Longrightarrow>\n                filter (\\<lambda>a. varset_action a (prob_dom PROB)) as =\n                as;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> filter\n                          (\\<lambda>a. varset_action a (prob_dom PROB))\n                          (a # as) =\n                         a # as", "have \"a \\<in> PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> PROB", "using Cons.prems valid_plan_valid_head"], ["proof (prove)\nusing this:\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow> ?h \\<in> ?PROB\n\ngoal (1 subgoal):\n 1. a \\<in> PROB", "by fast"], ["proof (state)\nthis:\n  a \\<in> PROB\n\ngoal (2 subgoals):\n 1. [] \\<in> valid_plans PROB \\<Longrightarrow>\n    filter (\\<lambda>a. varset_action a (prob_dom PROB)) [] = []\n 2. \\<And>a as.\n       \\<lbrakk>as \\<in> valid_plans PROB \\<Longrightarrow>\n                filter (\\<lambda>a. varset_action a (prob_dom PROB)) as =\n                as;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> filter\n                          (\\<lambda>a. varset_action a (prob_dom PROB))\n                          (a # as) =\n                         a # as", "then"], ["proof (chain)\npicking this:\n  a \\<in> PROB", "have \"varset_action a (prob_dom PROB)\""], ["proof (prove)\nusing this:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. varset_action a (prob_dom PROB)", "unfolding varset_action_def"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> prob_dom PROB", "using FDOM_eff_subset_prob_dom_pair"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  fmdom' (snd ?a) \\<subseteq> prob_dom ?PROB\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> prob_dom PROB", "by metis"], ["proof (state)\nthis:\n  varset_action a (prob_dom PROB)\n\ngoal (2 subgoals):\n 1. [] \\<in> valid_plans PROB \\<Longrightarrow>\n    filter (\\<lambda>a. varset_action a (prob_dom PROB)) [] = []\n 2. \\<And>a as.\n       \\<lbrakk>as \\<in> valid_plans PROB \\<Longrightarrow>\n                filter (\\<lambda>a. varset_action a (prob_dom PROB)) as =\n                as;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> filter\n                          (\\<lambda>a. varset_action a (prob_dom PROB))\n                          (a # as) =\n                         a # as", "}"], ["proof (state)\nthis:\n  varset_action a (prob_dom PROB)\n\ngoal (2 subgoals):\n 1. [] \\<in> valid_plans PROB \\<Longrightarrow>\n    filter (\\<lambda>a. varset_action a (prob_dom PROB)) [] = []\n 2. \\<And>a as.\n       \\<lbrakk>as \\<in> valid_plans PROB \\<Longrightarrow>\n                filter (\\<lambda>a. varset_action a (prob_dom PROB)) as =\n                as;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> filter\n                          (\\<lambda>a. varset_action a (prob_dom PROB))\n                          (a # as) =\n                         a # as", "ultimately"], ["proof (chain)\npicking this:\n  filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as\n  varset_action a (prob_dom PROB)", "show ?case"], ["proof (prove)\nusing this:\n  filter (\\<lambda>a. varset_action a (prob_dom PROB)) as = as\n  varset_action a (prob_dom PROB)\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>a. varset_action a (prob_dom PROB)) (a # as) = a # as", "by simp"], ["proof (state)\nthis:\n  filter (\\<lambda>a. varset_action a (prob_dom PROB)) (a # as) = a # as\n\ngoal (1 subgoal):\n 1. [] \\<in> valid_plans PROB \\<Longrightarrow>\n    filter (\\<lambda>a. varset_action a (prob_dom PROB)) [] = []", "qed fastforce"], ["", "lemma n_replace_proj_le_n_as_1:\n  fixes a vs vs'\n  assumes \"(vs \\<subseteq> vs')\" \"(varset_action a vs)\"\n  shows \"(varset_action a vs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. varset_action a vs'", "using assms"], ["proof (prove)\nusing this:\n  vs \\<subseteq> vs'\n  varset_action a vs\n\ngoal (1 subgoal):\n 1. varset_action a vs'", "unfolding varset_action_def"], ["proof (prove)\nusing this:\n  vs \\<subseteq> vs'\n  fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> vs'", "by simp"], ["", "lemma sat_precond_as_pfx:\n  fixes s\n  assumes \"(sat_precond_as s (as @ as'))\"\n  shows \"(sat_precond_as s as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_precond_as s as", "using assms"], ["proof (prove)\nusing this:\n  sat_precond_as s (as @ as')\n\ngoal (1 subgoal):\n 1. sat_precond_as s as", "proof (induction as arbitrary: s as')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s as'.\n       sat_precond_as s ([] @ as') \\<Longrightarrow> sat_precond_as s []\n 2. \\<And>a as s as'.\n       \\<lbrakk>\\<And>s as'.\n                   sat_precond_as s (as @ as') \\<Longrightarrow>\n                   sat_precond_as s as;\n        sat_precond_as s ((a # as) @ as')\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s (a # as)", "case (Cons a as)"], ["proof (state)\nthis:\n  sat_precond_as ?s (as @ ?as') \\<Longrightarrow> sat_precond_as ?s as\n  sat_precond_as s ((a # as) @ as')\n\ngoal (2 subgoals):\n 1. \\<And>s as'.\n       sat_precond_as s ([] @ as') \\<Longrightarrow> sat_precond_as s []\n 2. \\<And>a as s as'.\n       \\<lbrakk>\\<And>s as'.\n                   sat_precond_as s (as @ as') \\<Longrightarrow>\n                   sat_precond_as s as;\n        sat_precond_as s ((a # as) @ as')\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s (a # as)", "have \"fst a \\<subseteq>\\<^sub>f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s", "using Cons.prems"], ["proof (prove)\nusing this:\n  sat_precond_as s ((a # as) @ as')\n\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s", "by fastforce"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s\n\ngoal (2 subgoals):\n 1. \\<And>s as'.\n       sat_precond_as s ([] @ as') \\<Longrightarrow> sat_precond_as s []\n 2. \\<And>a as s as'.\n       \\<lbrakk>\\<And>s as'.\n                   sat_precond_as s (as @ as') \\<Longrightarrow>\n                   sat_precond_as s as;\n        sat_precond_as s ((a # as) @ as')\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s (a # as)", "moreover"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s\n\ngoal (2 subgoals):\n 1. \\<And>s as'.\n       sat_precond_as s ([] @ as') \\<Longrightarrow> sat_precond_as s []\n 2. \\<And>a as s as'.\n       \\<lbrakk>\\<And>s as'.\n                   sat_precond_as s (as @ as') \\<Longrightarrow>\n                   sat_precond_as s as;\n        sat_precond_as s ((a # as) @ as')\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s (a # as)", "have \"sat_precond_as (state_succ s a) (as @ as')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_precond_as (state_succ s a) (as @ as')", "using Cons.prems"], ["proof (prove)\nusing this:\n  sat_precond_as s ((a # as) @ as')\n\ngoal (1 subgoal):\n 1. sat_precond_as (state_succ s a) (as @ as')", "by simp"], ["proof (state)\nthis:\n  sat_precond_as (state_succ s a) (as @ as')\n\ngoal (2 subgoals):\n 1. \\<And>s as'.\n       sat_precond_as s ([] @ as') \\<Longrightarrow> sat_precond_as s []\n 2. \\<And>a as s as'.\n       \\<lbrakk>\\<And>s as'.\n                   sat_precond_as s (as @ as') \\<Longrightarrow>\n                   sat_precond_as s as;\n        sat_precond_as s ((a # as) @ as')\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s (a # as)", "ultimately"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s\n  sat_precond_as (state_succ s a) (as @ as')", "show ?case"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n  sat_precond_as (state_succ s a) (as @ as')\n\ngoal (1 subgoal):\n 1. sat_precond_as s (a # as)", "using Cons.IH sat_precond_as.simps(2)"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n  sat_precond_as (state_succ s a) (as @ as')\n  sat_precond_as ?s (as @ ?as') \\<Longrightarrow> sat_precond_as ?s as\n  sat_precond_as ?s (?a # ?as) =\n  (fst ?a \\<subseteq>\\<^sub>f ?s \\<and>\n   sat_precond_as (state_succ ?s ?a) ?as)\n\ngoal (1 subgoal):\n 1. sat_precond_as s (a # as)", "by blast"], ["proof (state)\nthis:\n  sat_precond_as s (a # as)\n\ngoal (1 subgoal):\n 1. \\<And>s as'.\n       sat_precond_as s ([] @ as') \\<Longrightarrow> sat_precond_as s []", "qed simp"], ["", "end"]]}