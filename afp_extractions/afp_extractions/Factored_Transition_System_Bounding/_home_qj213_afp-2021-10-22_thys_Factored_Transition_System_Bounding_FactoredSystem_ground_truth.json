{"file_name": "/home/qj213/afp-2021-10-22/thys/Factored_Transition_System_Bounding/FactoredSystem.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Factored_Transition_System_Bounding", "problem_names": ["lemma state_succ_pair: \"state_succ s (p, e) = (if (p \\<subseteq>\\<^sub>f s) then (e ++ s) else s)\"", "lemma exec_plan_Append:\n  fixes as_a as_b s\n  shows \"exec_plan s (as_a @ as_b) = exec_plan (exec_plan s as_a) as_b\"", "lemma cycle_removal_lemma:\n  fixes as1 as2 as3\n  assumes \"(exec_plan s (as1 @ as2) = exec_plan s as1)\"\n  shows \"(exec_plan s (as1 @ as2 @ as3) = exec_plan s (as1 @ as3))\"", "lemma empty_domain_fmap_set: \"{s. fmdom' s = {}} = {fmempty}\"", "lemma possible_states_set_ii_a:\n  fixes s x v\n  assumes \"(v \\<in> fmdom' s)\"\n  shows \"(fmdom' ((\\<lambda>s. fmupd v x s) s) = fmdom' s)\"", "lemma possible_states_set_ii_b:\n  fixes s x v\n  assumes \"(v \\<notin> fmdom' s)\"\n  shows \"(fmdom' ((\\<lambda>s. fmupd v x s) s) = fmdom' s \\<union> {v})\"", "lemma fmap_neq:\n  fixes s :: \"('a, bool) fmap\" and s' :: \"('a, bool) fmap\"\n  assumes \"(fmdom' s = fmdom' s')\"\n  shows \"((s \\<noteq> s') \\<longleftrightarrow> (\\<exists>v\\<in>(fmdom' s). fmlookup s v \\<noteq> fmlookup s' v))\"", "lemma fmdom'_fmsubset_restrict_set:\n  fixes X1 X2 and s :: \"('a, bool) fmap\"\n  assumes \"X1 \\<subseteq> X2\" \"fmdom' s = X2\"\n  shows \"fmdom' (fmrestrict_set X1 s) = X1\"", "lemma fmsubset_restrict_set:\n  fixes X1 X2 and s :: \"'a state\"\n  assumes \"X1 \\<subseteq> X2\" \"s \\<in> {s. fmdom' s = X2}\"\n  shows \"fmrestrict_set X1 s \\<in> {s. fmdom' s = X1}\"", "lemma fmupd_fmsubset_restrict_set:\n  fixes X v x and s :: \"'a state\"\n  assumes \"s \\<in> {s. fmdom' s = insert v X}\" \"fmlookup s v = Some x\"\n  shows \"s = fmupd v x (fmrestrict_set X s)\"", "lemma construction_of_all_possible_states_lemma:\n  fixes v X\n  assumes \"(v \\<notin> X)\"\n  shows \"({s. fmdom' s = insert v X}\n    = ((\\<lambda>s. fmupd v True s) ` {s. fmdom' s = X})\n      \\<union> ((\\<lambda>s. fmupd v False s) ` {s. fmdom' s = X})\n  )\"", "lemma FINITE_states:\n  fixes X :: \"'a set\"\n  shows \"finite X \\<Longrightarrow> finite {(s :: 'a state). fmdom' s = X}\"", "lemma bool_update_effect:\n  fixes s X x v b\n  assumes \"finite X\" \"s \\<in> {s :: 'a state. fmdom' s = X}\" \"x \\<in> X\" \"x \\<noteq> v\"\n  shows \"fmlookup ((\\<lambda>s :: 'a state. fmupd v b s) s) x = fmlookup s x\"", "lemma bool_update_inj:\n  fixes X :: \"'a set\" and v b\n  assumes \"finite X\" \"v \\<notin> X\"\n  shows \"inj_on (\\<lambda>s. fmupd v b s) {s :: 'a state. fmdom' s = X}\"", "lemma card_update:\n  fixes X v b\n  assumes \"finite (X :: 'a set)\" \"v \\<notin> X\"\n  shows \"\n    card ((\\<lambda>s. fmupd v b s) ` {s :: 'a state. fmdom' s = X})\n    = card {s :: 'a state. fmdom' s = X}\n  \"", "lemma updates_disjoint:\n  fixes X x\n  assumes \"finite X\" \"x \\<notin> X\"\n  shows \"\n    ((\\<lambda>s. fmupd x True s) ` {s. fmdom' s = X})\n    \\<inter> ((\\<lambda>s. fmupd x False s) ` {s. fmdom' s = X}) = {}\n  \"", "lemma card_of_set_of_all_possible_states:\n  fixes X :: \"'a set\"\n  assumes \"finite X\"\n  shows \"card {(s :: 'a state). fmdom' s = X} = 2 ^ (card X)\"", "lemma empty_state_list_lemma:\n  fixes as s\n  shows \"\\<not>([] = state_list s as)\"", "lemma state_list_length_non_zero:\n  fixes as s\n  shows \"\\<not>(0 = length (state_list s as))\"", "lemma state_list_length_lemma:\n  fixes as s\n  shows \"length as = length (state_list s as) - 1\"", "lemma state_list_length_lemma_2:\n  fixes as s\n  shows \"(length (state_list s as)) = (length as + 1)\"", "lemma state_set_thm:\n  fixes s1\n  shows \"s1 \\<in> state_set s2 \\<longleftrightarrow> prefix s1 s2 \\<and> s1 \\<noteq> []\"", "lemma state_set_finite:\n  fixes X\n  shows \"finite (state_set X)\"", "lemma LENGTH_state_set:\n  fixes X e\n  assumes \"e \\<in> state_set X\"\n  shows \"length e \\<le> length X\"", "lemma lemma_temp:\n  fixes x s as h\n  assumes \"x \\<in> state_set (state_list s as)\"\n  shows \"length (h # state_list s as) > length x\"", "lemma NIL_NOTIN_stateset:\n  fixes X\n  shows \"[] \\<notin> state_set X\"", "lemma state_set_card_i:\n  fixes X a\n  shows \"[a] \\<notin> (Cons a ` state_set X)\"", "lemma state_set_card_ii:\n  fixes X a\n  shows \"card (Cons a ` state_set X) = card (state_set X)\"", "lemma state_set_card_iii:\n  fixes X a\n  shows \"card (state_set (a # X)) = 1 + card (state_set X)\"", "lemma state_set_card:\n  fixes X\n  shows \"card (state_set X) = length X\"", "lemma FDOM_state_succ:\n  assumes \"fmdom' (snd a) \\<subseteq> fmdom' s\"\n  shows \"(fmdom' (state_succ s a) = fmdom' s)\"", "lemma FDOM_state_succ_subset:\n  \"fmdom' (state_succ s a) \\<subseteq> (fmdom' s \\<union> fmdom' (snd a))\"", "lemma FDOM_eff_subset_FDOM_valid_states:\n  fixes p e s\n  assumes \"(p, e) \\<in> PROB\" \"(s \\<in> valid_states PROB)\"\n  shows \"(fmdom' e \\<subseteq> fmdom' s)\"", "lemma FDOM_eff_subset_FDOM_valid_states_pair:\n  fixes a s\n  assumes \"a \\<in> PROB\" \"s \\<in> valid_states PROB\"\n  shows \"fmdom' (snd a) \\<subseteq> fmdom' s\"", "lemma FDOM_pre_subset_FDOM_valid_states:\n  fixes p e s\n  assumes \"(p, e) \\<in> PROB\" \"s \\<in> valid_states PROB\"\n  shows \"fmdom' p \\<subseteq> fmdom' s\"", "lemma FDOM_pre_subset_FDOM_valid_states_pair:\n  fixes a s\n  assumes \"a \\<in> PROB\" \"s \\<in> valid_states PROB\"\n  shows \"fmdom' (fst a) \\<subseteq> fmdom' s\"", "lemma action_dom_subset_valid_states_FDOM:\n  fixes p e s\n  assumes \"(p, e) \\<in> PROB\" \"s \\<in> valid_states PROB\"\n  shows \"action_dom p e \\<subseteq> fmdom' s\"", "lemma FDOM_eff_subset_prob_dom:\n  fixes p e\n  assumes \"(p, e) \\<in> PROB\"\n  shows \"fmdom' e \\<subseteq> prob_dom PROB\"", "lemma FDOM_eff_subset_prob_dom_pair:\n  fixes a\n  assumes \"a \\<in> PROB\"\n  shows \"fmdom' (snd a) \\<subseteq> prob_dom PROB\"", "lemma FDOM_pre_subset_prob_dom:\n  fixes p e\n  assumes \"(p, e) \\<in> PROB\"\n  shows \"fmdom' p \\<subseteq> prob_dom PROB\"", "lemma FDOM_pre_subset_prob_dom_pair:\n  fixes a\n  assumes \"a \\<in> PROB\"\n  shows \"fmdom' (fst a) \\<subseteq> prob_dom PROB\"", "lemma valid_plan_valid_head:\n  assumes \"(h # as \\<in> valid_plans PROB)\"\n  shows  \"h \\<in> PROB\"", "lemma valid_plan_valid_tail:\n  assumes \"(h # as \\<in> valid_plans PROB)\"\n  shows \"(as \\<in> valid_plans PROB)\"", "lemma valid_plan_pre_subset_prob_dom_pair:\n  assumes \"as \\<in> valid_plans PROB\"\n  shows \"(\\<forall>a. ListMem a as \\<longrightarrow> fmdom' (fst a) \\<subseteq> (prob_dom PROB))\"", "lemma valid_append_valid_suff:\n  assumes \"as1 @ as2 \\<in> (valid_plans PROB)\"\n  shows \"as2 \\<in> (valid_plans PROB)\"", "lemma valid_append_valid_pref:\n  assumes \"as1 @ as2 \\<in> (valid_plans PROB)\"\n  shows \"as1 \\<in> (valid_plans PROB)\"", "lemma valid_pref_suff_valid_append:\n  assumes \"as1 \\<in> (valid_plans PROB)\" \"as2 \\<in> (valid_plans PROB)\"\n  shows \"(as1 @ as2) \\<in> (valid_plans PROB)\"", "lemma MEM_statelist_FDOM:\n  fixes PROB h as s0\n  assumes \"s0 \\<in> (valid_states PROB)\" \"as \\<in> (valid_plans PROB)\" \"ListMem h (state_list s0 as)\"\n  shows \"(fmdom' h = fmdom' s0)\"", "lemma MEM_statelist_valid_state:\n  fixes PROB h as s0\n  assumes \"s0 \\<in> valid_states PROB\" \"as \\<in> valid_plans PROB\" \"ListMem h (state_list s0 as)\"\n  shows \"(h \\<in> valid_states PROB)\"", "lemma lemma_1_i:\n  fixes s a PROB\n  assumes \"s \\<in> valid_states PROB\" \"a \\<in> PROB\"\n  shows \"state_succ s a \\<in> valid_states PROB\"", "lemma lemma_1_ii:\n  \"last ` ((#) s ` state_set (state_list (state_succ s a) as))\n  = last ` state_set (state_list (state_succ s a) as)\"", "lemma lemma_1:\n  fixes as :: \"(('a, 'b) fmap \\<times> ('a, 'b) fmap) list\" and PPROB\n  assumes \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"((last ` (state_set (state_list s as))) \\<subseteq> valid_states PROB)\"", "lemma len_in_state_set_le_max_len:\n  fixes as x PROB\n  assumes \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\" \"\\<not>(as = [])\"\n    \"(x \\<in> state_set (state_list s as))\"\n  shows \"(length x \\<le> (Suc (length as)))\"", "lemma card_state_set_cons:\n  fixes as s h\n  shows \"\n    (card (state_set (state_list s (h # as)))\n    = Suc (card (state_set (state_list (state_succ s h) as))))\n  \"", "lemma card_state_set:\n  fixes as s\n  shows \"(Suc (length as)) = card (state_set (state_list s as))\"", "lemma neq_mems_state_set_neq_len:\n  fixes as x y s\n  assumes \"x \\<in> state_set (state_list s as)\" \"(y \\<in> state_set (state_list s as))\" \"\\<not>(x = y)\"\n  shows \"\\<not>(length x = length y)\"", "lemma not_eq_last_diff_paths_i:\n  fixes s as PROB\n  assumes \"s \\<in> valid_states PROB\" \"as \\<in> valid_plans PROB\" \"x \\<in> state_set (state_list s as)\"\n  shows \"last x \\<in> valid_states PROB\"", "lemma not_eq_last_diff_paths_ii:\n  assumes \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"\\<not>(inj (last) (state_set (state_list s as)) (valid_states PROB))\"\n  shows \"\\<exists>l1. \\<exists>l2.\n    l1 \\<in> state_set (state_list s as)\n    \\<and> l2 \\<in> state_set (state_list s as)\n    \\<and> last l1 = last l2\n    \\<and> l1 \\<noteq> l2\n  \"", "lemma not_eq_last_diff_paths:\n  fixes as PROB s\n  assumes \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"\\<not>(inj (last) (state_set (state_list s as)) (valid_states PROB))\"\n  shows \"(\\<exists>slist_1 slist_2.\n    (slist_1 \\<in> state_set (state_list s as))\n    \\<and> (slist_2 \\<in> state_set (state_list s as))\n    \\<and> ((last slist_1) = (last slist_2))\n    \\<and> \\<not>(length slist_1 = length slist_2))\n  \"", "lemma nempty_sl_in_state_set:\n  fixes sl\n  assumes \"sl \\<noteq> []\"\n  shows \"sl \\<in> state_set sl\"", "lemma empty_list_nin_state_set:\n  fixes h slist as\n  assumes \"(h # slist) \\<in> state_set (state_list s as)\"\n  shows \"(h = s)\"", "lemma cons_in_state_set_2:\n  fixes s slist h t\n  assumes \"(slist \\<noteq> [])\" \"((s # slist) \\<in> state_set (state_list s (h # t)))\"\n  shows \"(slist \\<in> state_set (state_list (state_succ s h) t))\"", "lemma valid_action_valid_succ:\n  assumes \"h \\<in> PROB\" \"s \\<in> valid_states PROB\"\n  shows \"(state_succ s h) \\<in> valid_states PROB\"", "lemma in_state_set_imp_eq_exec_prefix:\n  fixes slist as PROB s\n  assumes \"(as \\<noteq> [])\" \"(slist \\<noteq> [])\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"(slist \\<in> state_set (state_list s as))\"\n  shows\n    \"(\\<exists>as'. (prefix as' as) \\<and> (exec_plan s as' = last slist) \\<and> (length slist = Suc (length as')))\"", "lemma eq_last_state_imp_append_nempty_as:\n  fixes as PROB slist_1 slist_2\n  assumes \"(as \\<noteq> [])\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\" \"(slist_1 \\<noteq> [])\"\n    \"(slist_2 \\<noteq> [])\" \"(slist_1 \\<in> state_set (state_list s as))\"\n    \"(slist_2 \\<in> state_set (state_list s as))\" \"\\<not>(length slist_1 = length slist_2)\"\n    \"(last slist_1 = last slist_2)\"\n  shows \"(\\<exists>as1 as2 as3.\n    (as1 @ as2 @ as3 = as)\n    \\<and> (exec_plan s (as1 @ as2) = exec_plan s as1)\n    \\<and>  \\<not>(as2 = [])\n  )\"", "lemma FINITE_prob_dom:\n  assumes \"finite PROB\"\n  shows  \"finite (prob_dom PROB)\"", "lemma CARD_valid_states:\n  assumes \"finite (PROB :: 'a problem)\"\n  shows \"(card (valid_states PROB :: 'a state set) = 2 ^ card (prob_dom PROB))\"", "lemma FINITE_valid_states:\n  fixes PROB :: \"'a problem\"\n  shows \"finite PROB \\<Longrightarrow> finite ((valid_states PROB) :: 'a state set)\"", "lemma lemma_2:\n  fixes PROB :: \"'a problem\" and as :: \"('a action) list\" and s :: \"'a state\"\n  assumes \"finite PROB\" \"s \\<in> (valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"((length as) > (2 ^ (card (fmdom' s)) - 1))\"\n  shows \"(\\<exists>as1 as2 as3.\n    (as1 @ as2 @ as3 = as)\n    \\<and> (exec_plan s (as1 @ as2) = exec_plan s as1)\n    \\<and> \\<not>(as2 = [])\n  )\"", "lemma lemma_2_prob_dom:\n  fixes PROB and as :: \"('a action) list\" and s :: \"'a state\"\n  assumes \"finite PROB\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"(length as > (2 ^ (card (prob_dom PROB))) - 1)\"\n  shows \"(\\<exists>as1 as2 as3.\n    (as1 @ as2 @ as3 = as)\n    \\<and> (exec_plan s (as1 @ as2) = exec_plan s as1)\n    \\<and> \\<not>(as2 = [])\n  )\"", "lemma lemma_3:\n  fixes PROB :: \"'a problem\" and s :: \"'a state\"\n  assumes \"finite PROB\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"(length as > (2 ^ (card (prob_dom PROB)) - 1))\"\n  shows \"(\\<exists>as'.\n    (exec_plan s as = exec_plan s as')\n    \\<and> (length as' < length as)\n    \\<and> (subseq as' as)\n  )\"", "lemma sublist_valid_is_valid:\n  fixes as' as PROB\n  assumes \"(as \\<in> valid_plans PROB)\" \"(subseq as' as)\"\n  shows \"as' \\<in> valid_plans PROB\"", "theorem main_lemma:\n  fixes PROB :: \"'a problem\" and as s\n  assumes \"finite PROB\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"(\\<exists>as'.\n    (exec_plan s as = exec_plan s as')\n    \\<and> (subseq as' as)\n    \\<and> (length  as' \\<le> (2 ^ (card (prob_dom PROB))) - 1)\n  )\"", "lemma valid_as_valid_exec:\n  fixes as and s :: \"'a state\" and PROB :: \"'a problem\"\n  assumes \"(as \\<in> valid_plans PROB)\" \"(s \\<in> valid_states PROB)\"\n  shows \"(exec_plan s as \\<in> valid_states PROB)\"", "lemma exec_plan_fdom_subset:\n  fixes as s PROB\n  assumes \"(as \\<in> valid_plans PROB)\"\n  shows \"(fmdom' (exec_plan s as) \\<subseteq> (fmdom' s \\<union> prob_dom PROB))\"", "lemma reachable_s_finite_thm_1_a:\n  fixes s and PROB :: \"'a problem\"\n  assumes \"(s :: 'a state) \\<in> valid_states PROB\"\n  shows \"(\\<forall>l\\<in>reachable_s PROB s. l\\<in>valid_states PROB)\"", "lemma reachable_s_finite_thm_1:\n  assumes \"((s :: 'a state) \\<in> valid_states PROB)\"\n  shows \"(reachable_s PROB s \\<subseteq> valid_states PROB)\"", "lemma reachable_s_finite_thm:\n  fixes s :: \"'a state\"\n  assumes \"finite (PROB :: 'a problem)\" \"(s \\<in> valid_states PROB)\"\n  shows \"finite (reachable_s PROB s)\"", "lemma empty_plan_is_valid: \"[] \\<in> (valid_plans PROB)\"", "lemma valid_head_and_tail_valid_plan:\n  assumes \"(h \\<in> PROB)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"((h # as) \\<in> valid_plans PROB)\"", "lemma lemma_1_reachability_s_i:\n  fixes PROB s\n  assumes \"s \\<in> valid_states PROB\"\n  shows \"s \\<in> reachable_s PROB s\"", "lemma lemma_1_reachability_s:\n  fixes PROB :: \"'a problem\" and s :: \"'a state\" and as\n  assumes \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"((last ` state_set (state_list s as)) \\<subseteq> (reachable_s PROB s))\"", "lemma not_eq_last_diff_paths_reachability_s:\n  fixes PROB :: \"'a problem\" and s :: \"'a state\" and as\n  assumes \"s \\<in> valid_states PROB\" \"as \\<in> valid_plans PROB\"\n    \"\\<not>(inj last (state_set (state_list s as)) (reachable_s PROB s))\"\n  shows \"(\\<exists>slist_1 slist_2.\n    slist_1 \\<in> state_set (state_list s as)\n    \\<and> slist_2 \\<in> state_set (state_list s as)\n    \\<and> (last slist_1 = last slist_2)\n    \\<and> \\<not>(length slist_1 = length slist_2)\n  )\"", "lemma lemma_2_reachability_s_i:\n  fixes f :: \"'a \\<Rightarrow> 'b\" and s t\n  assumes \"finite t\" \"card t < card s\"\n  shows \"\\<not>(inj f s t)\"", "lemma lemma_2_reachability_s:\n  fixes PROB :: \"'a problem\" and as s\n  assumes \"finite PROB\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"(length as > card (reachable_s PROB s) - 1)\"\n  shows \"(\\<exists>as1 as2 as3.\n    (as1 @ as2 @ as3 = as) \\<and> (exec_plan s (as1 @ as2) = exec_plan s as1) \\<and> \\<not>(as2 = []))\"", "lemma lemma_3_reachability_s:\n  fixes as and PROB :: \"'a problem\" and s\n  assumes \"finite PROB\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"(length as > (card (reachable_s PROB s) - 1))\"\n  shows \"(\\<exists>as'.\n    (exec_plan s as = exec_plan s as')\n    \\<and> (length as' < length as)\n    \\<and> (subseq as' as)\n  )\"", "lemma main_lemma_reachability_s:\n  fixes PROB :: \"'a problem\" and as and s :: \"'a state\"\n  assumes \"finite PROB\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"(\\<exists>as'.\n      (exec_plan s as = exec_plan s as') \\<and> subseq as' as\n      \\<and> (length as' \\<le> (card (reachable_s PROB s) - 1)))\"", "lemma reachable_s_non_empty: \"\\<not>(reachable_s PROB s = {})\"", "lemma card_reachable_s_non_zero:\n  fixes s\n  assumes \"finite (PROB :: 'a problem)\" \"(s \\<in> valid_states PROB)\"\n  shows \"(0 < card (reachable_s PROB s))\"", "lemma exec_fdom_empty_prob:\n  fixes s\n  assumes \"(prob_dom PROB = {})\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"(exec_plan s as = fmempty)\"", "lemma reachable_s_empty_prob:\n  fixes PROB :: \"'a problem\" and s :: \"'a state\"\n  assumes \"(prob_dom PROB = {})\" \"(s \\<in> valid_states PROB)\"\n  shows \"((reachable_s PROB s) \\<subseteq> {fmempty})\"", "lemma sublist_valid_plan__alt:\n  assumes \"(as1 \\<in> valid_plans PROB)\" \"(subseq as2 as1)\"\n  shows \"(as2 \\<in> valid_plans PROB)\"", "lemma fmsubset_eq:\n  assumes \"s1 \\<subseteq>\\<^sub>f s2\"\n  shows \"(\\<forall>a. a |\\<in>| fmdom s1 \\<longrightarrow> fmlookup s1 a = fmlookup s2 a)\"", "lemma submap_imp_state_succ_submap_a:\n  assumes \"s1 \\<subseteq>\\<^sub>f s2\" \"s2 \\<subseteq>\\<^sub>f s3\"\n  shows \"s1 \\<subseteq>\\<^sub>f s3\"", "lemma submap_imp_state_succ_submap_b:\n  assumes \"s1 \\<subseteq>\\<^sub>f s2\"\n  shows \"(s0 ++ s1) \\<subseteq>\\<^sub>f (s0 ++ s2)\"", "lemma submap_imp_state_succ_submap:\n  fixes a :: \"'a action\" and s1 s2\n  assumes \"(fst a \\<subseteq>\\<^sub>f s1)\" \"(s1 \\<subseteq>\\<^sub>f s2)\"\n  shows \"(state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a)\"", "lemma pred_dom_subset_succ_submap:\n  fixes a :: \"'a action\" and s1 s2 :: \"'a state\"\n  assumes \"(fmdom' (fst a) \\<subseteq> fmdom' s1)\" \"(s1 \\<subseteq>\\<^sub>f s2)\"\n  shows \"(state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a)\"", "lemma valid_as_submap_init_submap_exec_i:\n  fixes s a\n  shows \"fmdom' s \\<subseteq> fmdom' (state_succ s a)\"", "lemma valid_as_submap_init_submap_exec:\n  fixes s1 s2 :: \"'a state\"\n  assumes \"(s1 \\<subseteq>\\<^sub>f s2) \" \"(\\<forall>a. ListMem a as \\<longrightarrow> (fmdom' (fst a) \\<subseteq> fmdom' s1))\"\n  shows \"(exec_plan s1 as \\<subseteq>\\<^sub>f exec_plan s2 as)\"", "lemma valid_plan_mems:\n  assumes \"(as \\<in> valid_plans PROB)\" \"(ListMem a as)\"\n  shows \"a \\<in> PROB\"", "lemma valid_states_nempty:\n  fixes PROB :: \"(('a, 'b) fmap \\<times> ('a, 'b) fmap) set\"\n  assumes \"finite PROB\"\n  shows \"\\<exists>s. s \\<in> (valid_states PROB)\"", "lemma empty_prob_dom_single_val_state:\n  assumes \"(prob_dom PROB = {})\"\n  shows \"(\\<exists>s. valid_states PROB = {s})\"", "lemma empty_prob_dom_imp_empty_plan_always_good:\n  fixes PROB s\n  assumes \"(prob_dom PROB = {})\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"(exec_plan s [] = exec_plan s as)\"", "lemma empty_prob_dom:\n  fixes PROB\n  assumes \"(prob_dom PROB = {})\"\n  shows \"(PROB = {(fmempty, fmempty)} \\<or> PROB = {})\"", "lemma empty_prob_dom_finite:\n  fixes PROB :: \"'a problem\"\n  assumes \"prob_dom PROB = {}\"\n  shows \"finite PROB\"", "lemma disj_imp_eq_proj_exec:\n  fixes a :: \"('a, 'b) fmap \\<times> ('a, 'b) fmap\" and vs s\n  assumes \"(fmdom' (snd a) \\<inter> vs) = {}\"\n  shows \"(fmrestrict_set vs s = fmrestrict_set vs (state_succ s a))\"", "lemma no_change_vs_eff_submap:\n  fixes a vs s\n  assumes \"(fmrestrict_set vs s = fmrestrict_set vs (state_succ s a))\" \"(fst a \\<subseteq>\\<^sub>f s)\"\n  shows \"(fmrestrict_set vs (snd a) \\<subseteq>\\<^sub>f (fmrestrict_set vs s))\"", "lemma sat_precond_as_proj_3:\n  fixes s and a :: \"('a, 'b) fmap \\<times> ('a, 'b) fmap\" and vs\n  assumes \"(fmdom' (fmrestrict_set vs (snd a)) = {})\"\n  shows \"((fmrestrict_set vs (state_succ s a)) = (fmrestrict_set vs s))\"", "lemma proj_eq_proj_exec_eq:\n  fixes s s' vs and a :: \"('a, 'b) fmap \\<times> ('a, 'b) fmap\" and a'\n  assumes \"((fmrestrict_set vs s) = (fmrestrict_set vs s'))\" \"((fst a \\<subseteq>\\<^sub>f s) = (fst a' \\<subseteq>\\<^sub>f s'))\"\n    \"(fmrestrict_set vs (snd a) = fmrestrict_set vs (snd a'))\"\n  shows \"(fmrestrict_set vs (state_succ s a) = fmrestrict_set vs (state_succ s' a'))\"", "lemma empty_eff_exec_eq:\n  fixes s a\n  assumes \"(fmdom' (snd a) = {})\"\n  shows \"(state_succ s a = s)\"", "lemma exec_as_proj_valid_2:\n  fixes a\n  assumes \"a \\<in> PROB\"\n  shows \"(action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB)\"", "lemma valid_filter_valid_as:\n  assumes \"(as \\<in> valid_plans PROB)\"\n  shows \"(filter P as \\<in> valid_plans PROB)\"", "lemma sublist_valid_plan:\n  assumes \"(subseq as' as)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"(as' \\<in> valid_plans PROB)\"", "lemma prob_subset_dom_subset:\n  assumes \"PROB1 \\<subseteq> PROB2\"\n  shows \"(prob_dom PROB1 \\<subseteq> prob_dom PROB2)\"", "lemma state_succ_valid_act_disjoint:\n  assumes \"(a \\<in> PROB)\" \"(vs \\<inter> (prob_dom PROB) = {})\"\n  shows \"(fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s)\"", "lemma exec_valid_as_disjoint:\n  fixes s\n  assumes \"(vs \\<inter> (prob_dom PROB) = {})\" \"(as \\<in> valid_plans PROB)\"\n  shows \"(fmrestrict_set vs (exec_plan s as) = fmrestrict_set vs s)\"", "lemma EQ_SS_DOM:\n  assumes \"\\<not>(ss = {})\" \"(stateSpace ss vs1)\" \"(stateSpace ss vs2)\"\n  shows \"(vs1 = vs2)\"", "lemma FINITE_SS:\n  fixes ss :: \"('a, bool) fmap set\"\n  assumes \"\\<not>(ss = {})\" \"(stateSpace ss domain)\"\n  shows \"finite ss\"", "lemma disjoint_effects_no_effects:\n  fixes s\n  assumes \"(\\<forall>a. ListMem a as \\<longrightarrow> (fmdom' (fmrestrict_set vs (snd a)) = {}))\"\n  shows \"(fmrestrict_set vs (exec_plan s as) = (fmrestrict_set vs s))\"", "lemma act_needed_asses_submap_succ_submap:\n  fixes a s1 s2\n  assumes \"(action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1)\" \"(s1 \\<subseteq>\\<^sub>f s2)\"\n  shows \"(state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a)\"", "lemma as_needed_asses_submap_exec_i:\n  fixes a s\n  assumes \"v \\<in> fmdom' (action_needed_asses a s)\"\n  shows \"\n    fmlookup (action_needed_asses a s) v = fmlookup s v\n    \\<and> fmlookup (action_needed_asses a s) v = fmlookup (fst a) v\"", "lemma as_needed_asses_submap_exec_ii:\n  fixes f g v\n  assumes \"v \\<in> fmdom' f\" \"f \\<subseteq>\\<^sub>f g\"\n  shows \"fmlookup f v = fmlookup g v\"", "lemma as_needed_asses_submap_exec_iii:\n  fixes f g v\n  shows \"\n    fmdom' (action_needed_asses a s)\n    = {v \\<in> fmdom' s. v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\"", "lemma as_needed_asses_submap_exec_iv:\n  fixes f a v\n  assumes \"v \\<in> fmdom' (action_needed_asses a s)\"\n  shows \"\n    fmlookup (action_needed_asses a s) v = fmlookup s v\n    \\<and> fmlookup (action_needed_asses a s) v = fmlookup (fst a) v\n    \\<and> fmlookup (fst a) v = fmlookup s v\"", "lemma as_needed_asses_submap_exec_v:\n  fixes f g v\n  assumes \"v \\<in> fmdom' f\" \"f \\<subseteq>\\<^sub>f g\"\n  shows \"v \\<in> fmdom' g\"", "lemma as_needed_asses_submap_exec_vi:\n  fixes a s1 s2 v\n  assumes \"v \\<in> fmdom' (action_needed_asses a s1)\"\n    \"(action_needed_asses a s1) \\<subseteq>\\<^sub>f (action_needed_asses a s2)\"\n  shows\n    \"(fmlookup (action_needed_asses a s1) v) = fmlookup (fst a) v\n    \\<and> (fmlookup (action_needed_asses a s2) v) = fmlookup (fst a) v \\<and>\n    fmlookup s1 v = fmlookup (fst a) v \\<and> fmlookup s2 v = fmlookup (fst a) v\"", "lemma as_needed_asses_submap_exec_vii:\n  fixes f g v\n  assumes \"\\<forall>v \\<in> fmdom' f. fmlookup f v = fmlookup g v\"\n  shows \"f \\<subseteq>\\<^sub>f g\"", "lemma as_needed_asses_submap_exec_viii:\n  fixes f g v\n  assumes \"f \\<subseteq>\\<^sub>f g\"\n  shows \"\\<forall>v \\<in> fmdom' f. fmlookup f v = fmlookup g v\"", "lemma as_needed_asses_submap_exec_viii':\n  fixes f g v\n  assumes \"f \\<subseteq>\\<^sub>f g\"\n  shows \"fmdom' f \\<subseteq> fmdom' g\"", "lemma as_needed_asses_submap_exec_ix:\n  fixes f g\n  shows \"f \\<subseteq>\\<^sub>f g = (\\<forall>v \\<in> fmdom' f. fmlookup f v = fmlookup g v)\"", "lemma as_needed_asses_submap_exec_x:\n  fixes f a v\n  assumes \"v \\<in> fmdom' (action_needed_asses a f)\"\n  shows \"v \\<in> fmdom' (fst a) \\<and> v \\<in> fmdom' f \\<and> fmlookup (fst a) v = fmlookup f v\"", "lemma as_needed_asses_submap_exec_xi:\n  fixes v a f g\n  assumes \"v \\<in> fmdom' (action_needed_asses a (f ++ g))\" \"v \\<in> fmdom' f\"\n  shows \"\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v\n    \\<and> fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v\"", "lemma as_needed_asses_submap_exec_xii:\n  fixes f g v\n  assumes \"v \\<in> fmdom' f\"\n  shows \"fmlookup (f ++ g) v = fmlookup f v\"", "lemma as_needed_asses_submap_exec_xii':\n  fixes f g v\n  assumes \"v \\<notin> fmdom' f\" \"v \\<in> fmdom' g\"\n  shows \"fmlookup (f ++ g) v = fmlookup g v\"", "lemma as_needed_asses_submap_exec:\n  fixes s1 s2\n  assumes \"(s1 \\<subseteq>\\<^sub>f s2)\"\n    \"(\\<forall>a. ListMem a as \\<longrightarrow> (action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1))\"\n  shows \"(exec_plan s1 as \\<subseteq>\\<^sub>f exec_plan s2 as)\"", "lemma action_needed_vars_subset_sys_needed_vars_subset:\n  assumes \"(a \\<in> PROB)\"\n  shows \"(action_needed_vars a s \\<subseteq> system_needed_vars PROB s)\"", "lemma action_needed_asses_submap_sys_needed_asses:\n  assumes \"(a \\<in> PROB)\"\n  shows \"(action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s)\"", "lemma system_needed_asses_include_action_needed_asses_1:\n  assumes \"(a \\<in> PROB)\"\n  shows \"(action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) = action_needed_vars a s)\"", "lemma system_needed_asses_include_action_needed_asses_i:\n  fixes A B f\n  assumes \"A \\<subseteq> B\"\n  shows \"fmrestrict_set A (fmrestrict_set B f) = fmrestrict_set A f\"", "lemma system_needed_asses_include_action_needed_asses:\n  assumes \"(a \\<in> PROB)\"\n  shows \"(action_needed_asses a (system_needed_asses PROB s) = action_needed_asses a s)\"", "lemma system_needed_asses_submap:\n  \"system_needed_asses PROB s \\<subseteq>\\<^sub>f s\"", "lemma as_works_from_system_needed_asses:\n  assumes \"(as \\<in> valid_plans PROB)\"\n  shows \"(exec_plan (system_needed_asses PROB s) as \\<subseteq>\\<^sub>f exec_plan s as)\""], "translations": [["", "lemma state_succ_pair: \"state_succ s (p, e) = (if (p \\<subseteq>\\<^sub>f s) then (e ++ s) else s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s (p, e) = (if p \\<subseteq>\\<^sub>f s then e ++ s else s)", "by (simp add: state_succ_def)\n\n\n\\<comment> \\<open>NOTE shortened to 'exec\\_plan'\\<close>\n\\<comment> \\<open>NOTE using 'fun' because of multiple definining equations.\\<close>\n\\<comment> \\<open>NOTE first argument was curried.\\<close>"], ["", "fun exec_plan where\n  \"exec_plan s [] = s\"\n| \"exec_plan s (a # as) = exec_plan (state_succ s a) as\""], ["", "lemma exec_plan_Append:\n  fixes as_a as_b s\n  shows \"exec_plan s (as_a @ as_b) = exec_plan (exec_plan s as_a) as_b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s (as_a @ as_b) = exec_plan (exec_plan s as_a) as_b", "by (induction as_a arbitrary: s as_b) auto"], ["", "text \\<open> Plan execution effectively eliminates cycles: i.e., if a given plan `as` may be partitioned\ninto plans `as1`, `as2` and `as3`, s.t. the sequential execution of `as1` and `as2` yields the same\nstate, `as2` may be skipped during plan execution. \\<close>"], ["", "lemma cycle_removal_lemma:\n  fixes as1 as2 as3\n  assumes \"(exec_plan s (as1 @ as2) = exec_plan s as1)\"\n  shows \"(exec_plan s (as1 @ as2 @ as3) = exec_plan s (as1 @ as3))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s (as1 @ as2 @ as3) = exec_plan s (as1 @ as3)", "using assms exec_plan_Append"], ["proof (prove)\nusing this:\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  exec_plan ?s (?as_a @ ?as_b) = exec_plan (exec_plan ?s ?as_a) ?as_b\n\ngoal (1 subgoal):\n 1. exec_plan s (as1 @ as2 @ as3) = exec_plan s (as1 @ as3)", "by metis"], ["", "subsubsection \"Characterization of the Set of Possible States\""], ["", "text \\<open> To show the construction principle of the set of possible states---in lemma\n`construction\\_of\\_all\\_possible\\_states\\_lemma`---the following ancillary proves of finite map\nproperties are required.\n\nMost importantly, in lemma `fmupd\\_fmrestrict\\_subset` we show how finite mappings `s` with domain\n@{term \"{v} \\<union> X\"} and `s v = (Some x)` are constructed from their restrictions to `X` via update, i.e.\n\n  s = fmupd v x (fmrestrict\\_set X s)\n\nThis is used in lemma `construction\\_of\\_all\\_possible\\_states\\_lemma` to show that the set of possible\nstates for variables @{term \"{v} \\<union> X\"} is constructed inductively from the set of all possible states for\nvariables `X` via update on point @{term \"v \\<notin> X\"}.\n\\<close>\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma empty_domain_fmap_set: \"{s. fmdom' s = {}} = {fmempty}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} = {fmempty}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} = {fmempty}", "let ?A = \"{s. fmdom' s = {}}\""], ["proof (state)\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} = {fmempty}", "let ?B = \"{fmempty}\""], ["proof (state)\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} = {fmempty}", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} = {fmempty}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} = {fmempty}", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "assume C: \"?A \\<noteq> ?B\""], ["proof (state)\nthis:\n  {s. fmdom' s = {}} \\<noteq> {fmempty}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  {s. fmdom' s = {}} \\<noteq> {fmempty}", "show False"], ["proof (prove)\nusing this:\n  {s. fmdom' s = {}} \\<noteq> {fmempty}\n\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "assume C1: \"?A \\<subset> ?B\""], ["proof (state)\nthis:\n  {s. fmdom' s = {}} \\<subset> {fmempty}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "have \"?A = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} = {}", "using C1"], ["proof (prove)\nusing this:\n  {s. fmdom' s = {}} \\<subset> {fmempty}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} = {}", "by force"], ["proof (state)\nthis:\n  {s. fmdom' s = {}} = {}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  {s. fmdom' s = {}} = {}", "have False"], ["proof (prove)\nusing this:\n  {s. fmdom' s = {}} = {}\n\ngoal (1 subgoal):\n 1. False", "using fmdom'_empty"], ["proof (prove)\nusing this:\n  {s. fmdom' s = {}} = {}\n  fmdom' fmempty = {}\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  {s. fmdom' s = {}} \\<subset> {fmempty} \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  {s. fmdom' s = {}} \\<subset> {fmempty} \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  {s. fmdom' s = {}} \\<subset> {fmempty} \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "assume C2: \"\\<not>(?A \\<subset> ?B)\""], ["proof (state)\nthis:\n  \\<not> {s. fmdom' s = {}} \\<subset> {fmempty}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> {s. fmdom' s = {}} \\<subset> {fmempty}", "have \"fmdom' fmempty = {}\""], ["proof (prove)\nusing this:\n  \\<not> {s. fmdom' s = {}} \\<subset> {fmempty}\n\ngoal (1 subgoal):\n 1. fmdom' fmempty = {}", "by auto"], ["proof (state)\nthis:\n  fmdom' fmempty = {}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  fmdom' fmempty = {}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "have \"fmempty \\<in> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmempty \\<in> {s. fmdom' s = {}}", "by auto"], ["proof (state)\nthis:\n  fmempty \\<in> {s. fmdom' s = {}}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  fmempty \\<in> {s. fmdom' s = {}}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "have \"?A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {}", "using calculation(2)"], ["proof (prove)\nusing this:\n  fmempty \\<in> {s. fmdom' s = {}}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  {s. fmdom' s = {}} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  {s. fmdom' s = {}} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "have \"\\<forall>a\\<in>?A.a\\<notin>?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>{s. fmdom' s = {}}. a \\<notin> {fmempty}", "by (metis (mono_tags, lifting)\n              C Collect_cong calculation(1) fmrestrict_set_dom fmrestrict_set_null singleton_conv)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>{s. fmdom' s = {}}. a \\<notin> {fmempty}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<forall>a\\<in>{s. fmdom' s = {}}. a \\<notin> {fmempty}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "have \"fmempty \\<in> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmempty \\<in> {fmempty}", "by auto"], ["proof (state)\nthis:\n  fmempty \\<in> {fmempty}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  fmempty \\<in> {fmempty}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "have \"\\<exists>a\\<in>?A.a\\<in>?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>{s. fmdom' s = {}}. a \\<in> {fmempty}", "by simp"], ["proof (state)\nthis:\n  \\<exists>a\\<in>{s. fmdom' s = {}}. a \\<in> {fmempty}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<exists>a\\<in>{s. fmdom' s = {}}. a \\<in> {fmempty}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "have \"\\<not>(\\<forall>a\\<in>?A.a\\<notin>?B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>a\\<in>{s. fmdom' s = {}}. a \\<notin> {fmempty})", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<forall>a\\<in>{s. fmdom' s = {}}. a \\<notin> {fmempty})\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  fmdom' fmempty = {}\n  fmempty \\<in> {s. fmdom' s = {}}\n  {s. fmdom' s = {}} \\<noteq> {}\n  \\<forall>a\\<in>{s. fmdom' s = {}}. a \\<notin> {fmempty}\n  fmempty \\<in> {fmempty}\n  \\<exists>a\\<in>{s. fmdom' s = {}}. a \\<in> {fmempty}\n  \\<not> (\\<forall>a\\<in>{s. fmdom' s = {}}. a \\<notin> {fmempty})", "have False"], ["proof (prove)\nusing this:\n  fmdom' fmempty = {}\n  fmempty \\<in> {s. fmdom' s = {}}\n  {s. fmdom' s = {}} \\<noteq> {}\n  \\<forall>a\\<in>{s. fmdom' s = {}}. a \\<notin> {fmempty}\n  fmempty \\<in> {fmempty}\n  \\<exists>a\\<in>{s. fmdom' s = {}}. a \\<in> {fmempty}\n  \\<not> (\\<forall>a\\<in>{s. fmdom' s = {}}. a \\<notin> {fmempty})\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  \\<not> {s. fmdom' s = {}} \\<subset> {fmempty} \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} \\<noteq> {fmempty} \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  {s. fmdom' s = {}} \\<subset> {fmempty} \\<Longrightarrow> False\n  \\<not> {s. fmdom' s = {}} \\<subset> {fmempty} \\<Longrightarrow> False", "show False"], ["proof (prove)\nusing this:\n  {s. fmdom' s = {}} \\<subset> {fmempty} \\<Longrightarrow> False\n  \\<not> {s. fmdom' s = {}} \\<subset> {fmempty} \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {s. fmdom' s = {}} = {fmempty}\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma possible_states_set_ii_a:\n  fixes s x v\n  assumes \"(v \\<in> fmdom' s)\"\n  shows \"(fmdom' ((\\<lambda>s. fmupd v x s) s) = fmdom' s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (fmupd v x s) = fmdom' s", "using assms insert_absorb"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' s\n  ?a \\<in> ?A \\<Longrightarrow> insert ?a ?A = ?A\n\ngoal (1 subgoal):\n 1. fmdom' (fmupd v x s) = fmdom' s", "by auto\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma possible_states_set_ii_b:\n  fixes s x v\n  assumes \"(v \\<notin> fmdom' s)\"\n  shows \"(fmdom' ((\\<lambda>s. fmupd v x s) s) = fmdom' s \\<union> {v})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (fmupd v x s) = fmdom' s \\<union> {v}", "by auto\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma fmap_neq:\n  fixes s :: \"('a, bool) fmap\" and s' :: \"('a, bool) fmap\"\n  assumes \"(fmdom' s = fmdom' s')\"\n  shows \"((s \\<noteq> s') \\<longleftrightarrow> (\\<exists>v\\<in>(fmdom' s). fmlookup s v \\<noteq> fmlookup s' v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s \\<noteq> s') =\n    (\\<exists>v\\<in>fmdom' s. fmlookup s v \\<noteq> fmlookup s' v)", "using assms fmap_ext fmdom'_notD"], ["proof (prove)\nusing this:\n  fmdom' s = fmdom' s'\n  (\\<And>x. fmlookup ?m x = fmlookup ?n x) \\<Longrightarrow> ?m = ?n\n  ?x \\<notin> fmdom' ?m \\<Longrightarrow> fmlookup ?m ?x = None\n\ngoal (1 subgoal):\n 1. (s \\<noteq> s') =\n    (\\<exists>v\\<in>fmdom' s. fmlookup s v \\<noteq> fmlookup s' v)", "by metis\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma fmdom'_fmsubset_restrict_set:\n  fixes X1 X2 and s :: \"('a, bool) fmap\"\n  assumes \"X1 \\<subseteq> X2\" \"fmdom' s = X2\"\n  shows \"fmdom' (fmrestrict_set X1 s) = X1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set X1 s) = X1", "using assms"], ["proof (prove)\nusing this:\n  X1 \\<subseteq> X2\n  fmdom' s = X2\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set X1 s) = X1", "by (metis (no_types, lifting)\n      antisym_conv fmdom'_notD fmdom'_notI fmlookup_restrict_set rev_subsetD subsetI)\n\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma fmsubset_restrict_set:\n  fixes X1 X2 and s :: \"'a state\"\n  assumes \"X1 \\<subseteq> X2\" \"s \\<in> {s. fmdom' s = X2}\"\n  shows \"fmrestrict_set X1 s \\<in> {s. fmdom' s = X1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set X1 s \\<in> {s. fmdom' s = X1}", "using assms fmdom'_fmsubset_restrict_set"], ["proof (prove)\nusing this:\n  X1 \\<subseteq> X2\n  s \\<in> {s. fmdom' s = X2}\n  \\<lbrakk>?X1.0 \\<subseteq> ?X2.0; fmdom' ?s = ?X2.0\\<rbrakk>\n  \\<Longrightarrow> fmdom' (fmrestrict_set ?X1.0 ?s) = ?X1.0\n\ngoal (1 subgoal):\n 1. fmrestrict_set X1 s \\<in> {s. fmdom' s = X1}", "by blast\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma fmupd_fmsubset_restrict_set:\n  fixes X v x and s :: \"'a state\"\n  assumes \"s \\<in> {s. fmdom' s = insert v X}\" \"fmlookup s v = Some x\"\n  shows \"s = fmupd v x (fmrestrict_set X s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "proof -\n  \\<comment> \\<open>Show that domains of 's' and 'fmupd v x (fmrestrict\\_set X s)' are identical.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "have 1: \"fmdom' s = insert v X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' s = insert v X", "using assms(1)"], ["proof (prove)\nusing this:\n  s \\<in> {s. fmdom' s = insert v X}\n\ngoal (1 subgoal):\n 1. fmdom' s = insert v X", "by simp"], ["proof (state)\nthis:\n  fmdom' s = insert v X\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "{"], ["proof (state)\nthis:\n  fmdom' s = insert v X\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "have \"X \\<subseteq> insert v X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> insert v X", "by auto"], ["proof (state)\nthis:\n  X \\<subseteq> insert v X\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "then"], ["proof (chain)\npicking this:\n  X \\<subseteq> insert v X", "have \"fmdom' (fmrestrict_set X s) = X\""], ["proof (prove)\nusing this:\n  X \\<subseteq> insert v X\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set X s) = X", "using 1 fmdom'_fmsubset_restrict_set"], ["proof (prove)\nusing this:\n  X \\<subseteq> insert v X\n  fmdom' s = insert v X\n  \\<lbrakk>?X1.0 \\<subseteq> ?X2.0; fmdom' ?s = ?X2.0\\<rbrakk>\n  \\<Longrightarrow> fmdom' (fmrestrict_set ?X1.0 ?s) = ?X1.0\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set X s) = X", "by metis"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set X s) = X\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set X s) = X", "have \"fmdom' (fmupd v x (fmrestrict_set X s)) = insert v X\""], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set X s) = X\n\ngoal (1 subgoal):\n 1. fmdom' (fmupd v x (fmrestrict_set X s)) = insert v X", "using assms(1) fmdom'_fmupd"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set X s) = X\n  s \\<in> {s. fmdom' s = insert v X}\n  fmdom' (fmupd ?a ?b ?m) = insert ?a (fmdom' ?m)\n\ngoal (1 subgoal):\n 1. fmdom' (fmupd v x (fmrestrict_set X s)) = insert v X", "by auto"], ["proof (state)\nthis:\n  fmdom' (fmupd v x (fmrestrict_set X s)) = insert v X\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "}"], ["proof (state)\nthis:\n  fmdom' (fmupd v x (fmrestrict_set X s)) = insert v X\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "note 2 = this"], ["proof (state)\nthis:\n  fmdom' (fmupd v x (fmrestrict_set X s)) = insert v X\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "moreover"], ["proof (state)\nthis:\n  fmdom' (fmupd v x (fmrestrict_set X s)) = insert v X\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "{"], ["proof (state)\nthis:\n  fmdom' (fmupd v x (fmrestrict_set X s)) = insert v X\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "fix w\n      \\<comment> \\<open>Show case for undefined variables (where lookup yields 'None').\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "assume \"w \\<notin> insert v X\""], ["proof (state)\nthis:\n  w \\<notin> insert v X\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "then"], ["proof (chain)\npicking this:\n  w \\<notin> insert v X", "have \"w \\<notin> fmdom' s\" \"w \\<notin> fmdom' (fmupd v x (fmrestrict_set X s))\""], ["proof (prove)\nusing this:\n  w \\<notin> insert v X\n\ngoal (1 subgoal):\n 1. w \\<notin> fmdom' s &&&\n    w \\<notin> fmdom' (fmupd v x (fmrestrict_set X s))", "using 1 2"], ["proof (prove)\nusing this:\n  w \\<notin> insert v X\n  fmdom' s = insert v X\n  fmdom' (fmupd v x (fmrestrict_set X s)) = insert v X\n\ngoal (1 subgoal):\n 1. w \\<notin> fmdom' s &&&\n    w \\<notin> fmdom' (fmupd v x (fmrestrict_set X s))", "by argo+"], ["proof (state)\nthis:\n  w \\<notin> fmdom' s\n  w \\<notin> fmdom' (fmupd v x (fmrestrict_set X s))\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "then"], ["proof (chain)\npicking this:\n  w \\<notin> fmdom' s\n  w \\<notin> fmdom' (fmupd v x (fmrestrict_set X s))", "have \"fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w\""], ["proof (prove)\nusing this:\n  w \\<notin> fmdom' s\n  w \\<notin> fmdom' (fmupd v x (fmrestrict_set X s))\n\ngoal (1 subgoal):\n 1. fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w", "using fmdom'_notD"], ["proof (prove)\nusing this:\n  w \\<notin> fmdom' s\n  w \\<notin> fmdom' (fmupd v x (fmrestrict_set X s))\n  ?x \\<notin> fmdom' ?m \\<Longrightarrow> fmlookup ?m ?x = None\n\ngoal (1 subgoal):\n 1. fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w", "by metis"], ["proof (state)\nthis:\n  fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "}\n      \\<comment> \\<open>Show case for defined variables (where lookup yields 'Some y').\\<close>"], ["proof (state)\nthis:\n  w \\<notin> insert v X \\<Longrightarrow>\n  fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "moreover"], ["proof (state)\nthis:\n  w \\<notin> insert v X \\<Longrightarrow>\n  fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "{"], ["proof (state)\nthis:\n  w \\<notin> insert v X \\<Longrightarrow>\n  fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "assume \"w \\<in> insert v X\""], ["proof (state)\nthis:\n  w \\<in> insert v X\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "then"], ["proof (chain)\npicking this:\n  w \\<in> insert v X", "have \"w \\<in> fmdom' s\" \"w \\<in> fmdom' (fmupd v x (fmrestrict_set X s))\""], ["proof (prove)\nusing this:\n  w \\<in> insert v X\n\ngoal (1 subgoal):\n 1. w \\<in> fmdom' s &&& w \\<in> fmdom' (fmupd v x (fmrestrict_set X s))", "using 1 2"], ["proof (prove)\nusing this:\n  w \\<in> insert v X\n  fmdom' s = insert v X\n  fmdom' (fmupd v x (fmrestrict_set X s)) = insert v X\n\ngoal (1 subgoal):\n 1. w \\<in> fmdom' s &&& w \\<in> fmdom' (fmupd v x (fmrestrict_set X s))", "by argo+"], ["proof (state)\nthis:\n  w \\<in> fmdom' s\n  w \\<in> fmdom' (fmupd v x (fmrestrict_set X s))\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "then"], ["proof (chain)\npicking this:\n  w \\<in> fmdom' s\n  w \\<in> fmdom' (fmupd v x (fmrestrict_set X s))", "have \"fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w\""], ["proof (prove)\nusing this:\n  w \\<in> fmdom' s\n  w \\<in> fmdom' (fmupd v x (fmrestrict_set X s))\n\ngoal (1 subgoal):\n 1. fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w", "by (cases \"w = v\")\n          (auto simp add: assms calculation)"], ["proof (state)\nthis:\n  fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "}"], ["proof (state)\nthis:\n  w \\<in> insert v X \\<Longrightarrow>\n  fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "ultimately"], ["proof (chain)\npicking this:\n  w \\<notin> insert v X \\<Longrightarrow>\n  fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w\n  w \\<in> insert v X \\<Longrightarrow>\n  fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w", "have \"fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w\""], ["proof (prove)\nusing this:\n  w \\<notin> insert v X \\<Longrightarrow>\n  fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w\n  w \\<in> insert v X \\<Longrightarrow>\n  fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w\n\ngoal (1 subgoal):\n 1. fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w", "by blast"], ["proof (state)\nthis:\n  fmlookup s w = fmlookup (fmupd v x (fmrestrict_set X s)) w\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "}"], ["proof (state)\nthis:\n  fmlookup s ?w2 = fmlookup (fmupd v x (fmrestrict_set X s)) ?w2\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "then"], ["proof (chain)\npicking this:\n  fmlookup s ?w2 = fmlookup (fmupd v x (fmrestrict_set X s)) ?w2", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup s ?w2 = fmlookup (fmupd v x (fmrestrict_set X s)) ?w2\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "using fmap_ext"], ["proof (prove)\nusing this:\n  fmlookup s ?w2 = fmlookup (fmupd v x (fmrestrict_set X s)) ?w2\n  (\\<And>x. fmlookup ?m x = fmlookup ?n x) \\<Longrightarrow> ?m = ?n\n\ngoal (1 subgoal):\n 1. s = fmupd v x (fmrestrict_set X s)", "by blast"], ["proof (state)\nthis:\n  s = fmupd v x (fmrestrict_set X s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma construction_of_all_possible_states_lemma:\n  fixes v X\n  assumes \"(v \\<notin> X)\"\n  shows \"({s. fmdom' s = insert v X}\n    = ((\\<lambda>s. fmupd v True s) ` {s. fmdom' s = X})\n      \\<union> ((\\<lambda>s. fmupd v False s) ` {s. fmdom' s = X})\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. fmdom' s = insert v X} =\n    fmupd v True ` {s. fmdom' s = X} \\<union>\n    fmupd v False ` {s. fmdom' s = X}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {s. fmdom' s = insert v X} =\n    fmupd v True ` {s. fmdom' s = X} \\<union>\n    fmupd v False ` {s. fmdom' s = X}", "fix v X"], ["proof (state)\ngoal (1 subgoal):\n 1. {s. fmdom' s = insert v X} =\n    fmupd v True ` {s. fmdom' s = X} \\<union>\n    fmupd v False ` {s. fmdom' s = X}", "let ?A = \"{s :: 'a state. fmdom' s = insert v X}\""], ["proof (state)\ngoal (1 subgoal):\n 1. {s. fmdom' s = insert v X} =\n    fmupd v True ` {s. fmdom' s = X} \\<union>\n    fmupd v False ` {s. fmdom' s = X}", "let ?B = \"\n    ((\\<lambda>s. fmupd v True s) ` {s :: 'a state. fmdom' s = X})\n    \\<union> ((\\<lambda>s. fmupd v False s) ` {s :: 'a state. fmdom' s = X})\n  \""], ["proof (state)\ngoal (1 subgoal):\n 1. {s. fmdom' s = insert v X} =\n    fmupd v True ` {s. fmdom' s = X} \\<union>\n    fmupd v False ` {s. fmdom' s = X}", "text \\<open>Show the goal by mutual inclusion. The inclusion @{term \"?B \\<subseteq> ?A\"} is trivial and can be solved by\n    automation. For the complimentary proof @{term \"?A \\<subseteq> ?B\"} however we need to do more work.\n    In our case we choose a proof by contradiction and show that an @{term \"s \\<in> ?A\"} which is not also in\n    '?B' cannot exist.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. {s. fmdom' s = insert v X} =\n    fmupd v True ` {s. fmdom' s = X} \\<union>\n    fmupd v False ` {s. fmdom' s = X}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {s. fmdom' s = insert v X} =\n    fmupd v True ` {s. fmdom' s = X} \\<union>\n    fmupd v False ` {s. fmdom' s = X}", "have \"?A \\<subseteq> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. fmdom' s = insert v X}\n    \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                fmupd v False ` {s. fmdom' s = X}", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "assume C: \"\\<not>(?A \\<subseteq> ?B)\""], ["proof (state)\nthis:\n  \\<not> {s. fmdom' s = insert v X}\n         \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                     fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<not> {s. fmdom' s = insert v X}\n         \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                     fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "have \"\\<exists>s\\<in>?A. s\\<notin>?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>{s. fmdom' s = insert v X}.\n       s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n                  fmupd v False ` {s. fmdom' s = X}", "using C"], ["proof (prove)\nusing this:\n  \\<not> {s. fmdom' s = insert v X}\n         \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                     fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>{s. fmdom' s = insert v X}.\n       s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n                  fmupd v False ` {s. fmdom' s = X}", "by auto"], ["proof (state)\nthis:\n  \\<exists>s\\<in>{s. fmdom' s = insert v X}.\n     s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n                fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<exists>s\\<in>{s. fmdom' s = insert v X}.\n     s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n                fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "obtain s where obtain_s: \"s\\<in>?A \\<and> s\\<notin>?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        s \\<in> {s. fmdom' s = insert v X} \\<and>\n        s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n                   fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using calculation"], ["proof (prove)\nusing this:\n  \\<not> {s. fmdom' s = insert v X}\n         \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                     fmupd v False ` {s. fmdom' s = X}\n  \\<exists>s\\<in>{s. fmdom' s = insert v X}.\n     s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n                fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        s \\<in> {s. fmdom' s = insert v X} \\<and>\n        s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n                   fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s \\<in> {s. fmdom' s = insert v X} \\<and>\n  s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n             fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  s \\<in> {s. fmdom' s = insert v X} \\<and>\n  s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n             fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "have \"s\\<notin>?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n               fmupd v False ` {s. fmdom' s = X}", "using obtain_s"], ["proof (prove)\nusing this:\n  s \\<in> {s. fmdom' s = insert v X} \\<and>\n  s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n             fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n               fmupd v False ` {s. fmdom' s = X}", "by auto"], ["proof (state)\nthis:\n  s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n             fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n             fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "have \"fmdom' s = X \\<union> {v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' s = X \\<union> {v}", "using obtain_s"], ["proof (prove)\nusing this:\n  s \\<in> {s. fmdom' s = insert v X} \\<and>\n  s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n             fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. fmdom' s = X \\<union> {v}", "by auto"], ["proof (state)\nthis:\n  fmdom' s = X \\<union> {v}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  fmdom' s = X \\<union> {v}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "have \"\\<forall>s'\\<in>?B. fmdom' s' = X \\<union> {v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s'\\<in>fmupd v True ` {s. fmdom' s = X} \\<union>\n                    fmupd v False ` {s. fmdom' s = X}.\n       fmdom' s' = X \\<union> {v}", "by auto"], ["proof (state)\nthis:\n  \\<forall>s'\\<in>fmupd v True ` {s. fmdom' s = X} \\<union>\n                  fmupd v False ` {s. fmdom' s = X}.\n     fmdom' s' = X \\<union> {v}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<forall>s'\\<in>fmupd v True ` {s. fmdom' s = X} \\<union>\n                  fmupd v False ` {s. fmdom' s = X}.\n     fmdom' s' = X \\<union> {v}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "have\n        \"(s \\<notin> ((\\<lambda>s. fmupd v True s) ` {s. fmdom' s = X}))\"\n        \"(s \\<notin> ((\\<lambda>s. fmupd v False s) ` {s. fmdom' s = X}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<notin> fmupd v True ` {s. fmdom' s = X} &&&\n    s \\<notin> fmupd v False ` {s. fmdom' s = X}", "using obtain_s"], ["proof (prove)\nusing this:\n  s \\<in> {s. fmdom' s = insert v X} \\<and>\n  s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n             fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. s \\<notin> fmupd v True ` {s. fmdom' s = X} &&&\n    s \\<notin> fmupd v False ` {s. fmdom' s = X}", "by blast+"], ["proof (state)\nthis:\n  s \\<notin> fmupd v True ` {s. fmdom' s = X}\n  s \\<notin> fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "text \\<open> Show that every state @{term \"s \\<in> ?A\"} has been constructed from another state with domain\n        'X'. \\<close>"], ["proof (state)\nthis:\n  s \\<notin> fmupd v True ` {s. fmdom' s = X}\n  s \\<notin> fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  s \\<notin> fmupd v True ` {s. fmdom' s = X}\n  s \\<notin> fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "{"], ["proof (state)\nthis:\n  s \\<notin> fmupd v True ` {s. fmdom' s = X}\n  s \\<notin> fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "fix s :: \"'a state\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "assume 1: \"s \\<in> {s :: 'a state. fmdom' s = insert v X}\""], ["proof (state)\nthis:\n  s \\<in> {s. fmdom' s = insert v X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  s \\<in> {s. fmdom' s = insert v X}", "have \"fmrestrict_set X s \\<in> {s :: 'a state. fmdom' s = X}\""], ["proof (prove)\nusing this:\n  s \\<in> {s. fmdom' s = insert v X}\n\ngoal (1 subgoal):\n 1. fmrestrict_set X s \\<in> {s. fmdom' s = X}", "using subset_insertI fmsubset_restrict_set"], ["proof (prove)\nusing this:\n  s \\<in> {s. fmdom' s = insert v X}\n  ?B \\<subseteq> insert ?a ?B\n  \\<lbrakk>?X1.0 \\<subseteq> ?X2.0; ?s \\<in> {s. fmdom' s = ?X2.0}\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?X1.0 ?s \\<in> {s. fmdom' s = ?X1.0}\n\ngoal (1 subgoal):\n 1. fmrestrict_set X s \\<in> {s. fmdom' s = X}", "by metis"], ["proof (state)\nthis:\n  fmrestrict_set X s \\<in> {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  fmrestrict_set X s \\<in> {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "{"], ["proof (state)\nthis:\n  fmrestrict_set X s \\<in> {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "assume \"fmlookup s v = Some True\""], ["proof (state)\nthis:\n  fmlookup s v = Some True\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  fmlookup s v = Some True", "have \"s = fmupd v True (fmrestrict_set X s)\""], ["proof (prove)\nusing this:\n  fmlookup s v = Some True\n\ngoal (1 subgoal):\n 1. s = fmupd v True (fmrestrict_set X s)", "using 1 fmupd_fmsubset_restrict_set"], ["proof (prove)\nusing this:\n  fmlookup s v = Some True\n  s \\<in> {s. fmdom' s = insert v X}\n  \\<lbrakk>?s \\<in> {s. fmdom' s = insert ?v ?X};\n   fmlookup ?s ?v = Some ?x\\<rbrakk>\n  \\<Longrightarrow> ?s = fmupd ?v ?x (fmrestrict_set ?X ?s)\n\ngoal (1 subgoal):\n 1. s = fmupd v True (fmrestrict_set X s)", "by metis"], ["proof (state)\nthis:\n  s = fmupd v True (fmrestrict_set X s)\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "}"], ["proof (state)\nthis:\n  fmlookup s v = Some True \\<Longrightarrow>\n  s = fmupd v True (fmrestrict_set X s)\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  fmlookup s v = Some True \\<Longrightarrow>\n  s = fmupd v True (fmrestrict_set X s)\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "{"], ["proof (state)\nthis:\n  fmlookup s v = Some True \\<Longrightarrow>\n  s = fmupd v True (fmrestrict_set X s)\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "assume \"fmlookup s v = Some False\""], ["proof (state)\nthis:\n  fmlookup s v = Some False\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  fmlookup s v = Some False", "have \"s = fmupd v False (fmrestrict_set X s)\""], ["proof (prove)\nusing this:\n  fmlookup s v = Some False\n\ngoal (1 subgoal):\n 1. s = fmupd v False (fmrestrict_set X s)", "using 1 fmupd_fmsubset_restrict_set"], ["proof (prove)\nusing this:\n  fmlookup s v = Some False\n  s \\<in> {s. fmdom' s = insert v X}\n  \\<lbrakk>?s \\<in> {s. fmdom' s = insert ?v ?X};\n   fmlookup ?s ?v = Some ?x\\<rbrakk>\n  \\<Longrightarrow> ?s = fmupd ?v ?x (fmrestrict_set ?X ?s)\n\ngoal (1 subgoal):\n 1. s = fmupd v False (fmrestrict_set X s)", "by fastforce"], ["proof (state)\nthis:\n  s = fmupd v False (fmrestrict_set X s)\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "}"], ["proof (state)\nthis:\n  fmlookup s v = Some False \\<Longrightarrow>\n  s = fmupd v False (fmrestrict_set X s)\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  fmlookup s v = Some False \\<Longrightarrow>\n  s = fmupd v False (fmrestrict_set X s)\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "have \"fmlookup s v \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup s v \\<noteq> None", "using 1 fmdom'_notI"], ["proof (prove)\nusing this:\n  s \\<in> {s. fmdom' s = insert v X}\n  fmlookup ?m ?x = None \\<Longrightarrow> ?x \\<notin> fmdom' ?m\n\ngoal (1 subgoal):\n 1. fmlookup s v \\<noteq> None", "by fastforce"], ["proof (state)\nthis:\n  fmlookup s v \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  fmrestrict_set X s \\<in> {s. fmdom' s = X}\n  fmlookup s v = Some True \\<Longrightarrow>\n  s = fmupd v True (fmrestrict_set X s)\n  fmlookup s v = Some False \\<Longrightarrow>\n  s = fmupd v False (fmrestrict_set X s)\n  fmlookup s v \\<noteq> None", "have \"\n          (s \\<in> ((\\<lambda>s. fmupd v True s) ` {s. fmdom' s = X}))\n          \\<or> (s \\<in> ((\\<lambda>s. fmupd v False s) ` {s. fmdom' s = X}))\n        \""], ["proof (prove)\nusing this:\n  fmrestrict_set X s \\<in> {s. fmdom' s = X}\n  fmlookup s v = Some True \\<Longrightarrow>\n  s = fmupd v True (fmrestrict_set X s)\n  fmlookup s v = Some False \\<Longrightarrow>\n  s = fmupd v False (fmrestrict_set X s)\n  fmlookup s v \\<noteq> None\n\ngoal (1 subgoal):\n 1. s \\<in> fmupd v True ` {s. fmdom' s = X} \\<or>\n    s \\<in> fmupd v False ` {s. fmdom' s = X}", "by force"], ["proof (state)\nthis:\n  s \\<in> fmupd v True ` {s. fmdom' s = X} \\<or>\n  s \\<in> fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "}"], ["proof (state)\nthis:\n  ?sa2 \\<in> {s. fmdom' s = insert v X} \\<Longrightarrow>\n  ?sa2 \\<in> fmupd v True ` {s. fmdom' s = X} \\<or>\n  ?sa2 \\<in> fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. \\<not> {s. fmdom' s = insert v X}\n           \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                       fmupd v False ` {s. fmdom' s = X} \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> {s. fmdom' s = insert v X}\n         \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                     fmupd v False ` {s. fmdom' s = X}\n  \\<exists>s\\<in>{s. fmdom' s = insert v X}.\n     s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n                fmupd v False ` {s. fmdom' s = X}\n  s \\<in> {s. fmdom' s = insert v X} \\<and>\n  s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n             fmupd v False ` {s. fmdom' s = X}\n  s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n             fmupd v False ` {s. fmdom' s = X}\n  fmdom' s = X \\<union> {v}\n  \\<forall>s'\\<in>fmupd v True ` {s. fmdom' s = X} \\<union>\n                  fmupd v False ` {s. fmdom' s = X}.\n     fmdom' s' = X \\<union> {v}\n  s \\<notin> fmupd v True ` {s. fmdom' s = X}\n  s \\<notin> fmupd v False ` {s. fmdom' s = X}\n  ?sa2 \\<in> {s. fmdom' s = insert v X} \\<Longrightarrow>\n  ?sa2 \\<in> fmupd v True ` {s. fmdom' s = X} \\<or>\n  ?sa2 \\<in> fmupd v False ` {s. fmdom' s = X}", "show False"], ["proof (prove)\nusing this:\n  \\<not> {s. fmdom' s = insert v X}\n         \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n                     fmupd v False ` {s. fmdom' s = X}\n  \\<exists>s\\<in>{s. fmdom' s = insert v X}.\n     s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n                fmupd v False ` {s. fmdom' s = X}\n  s \\<in> {s. fmdom' s = insert v X} \\<and>\n  s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n             fmupd v False ` {s. fmdom' s = X}\n  s \\<notin> fmupd v True ` {s. fmdom' s = X} \\<union>\n             fmupd v False ` {s. fmdom' s = X}\n  fmdom' s = X \\<union> {v}\n  \\<forall>s'\\<in>fmupd v True ` {s. fmdom' s = X} \\<union>\n                  fmupd v False ` {s. fmdom' s = X}.\n     fmdom' s' = X \\<union> {v}\n  s \\<notin> fmupd v True ` {s. fmdom' s = X}\n  s \\<notin> fmupd v False ` {s. fmdom' s = X}\n  ?sa2 \\<in> {s. fmdom' s = insert v X} \\<Longrightarrow>\n  ?sa2 \\<in> fmupd v True ` {s. fmdom' s = X} \\<or>\n  ?sa2 \\<in> fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. False", "by meson"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {s. fmdom' s = insert v X}\n  \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n              fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = insert v X} =\n    fmupd v True ` {s. fmdom' s = X} \\<union>\n    fmupd v False ` {s. fmdom' s = X}", "}"], ["proof (state)\nthis:\n  {s. fmdom' s = insert v X}\n  \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n              fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = insert v X} =\n    fmupd v True ` {s. fmdom' s = X} \\<union>\n    fmupd v False ` {s. fmdom' s = X}", "moreover"], ["proof (state)\nthis:\n  {s. fmdom' s = insert v X}\n  \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n              fmupd v False ` {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = insert v X} =\n    fmupd v True ` {s. fmdom' s = X} \\<union>\n    fmupd v False ` {s. fmdom' s = X}", "have \"?B \\<subseteq> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmupd v True ` {s. fmdom' s = X} \\<union>\n    fmupd v False ` {s. fmdom' s = X}\n    \\<subseteq> {s. fmdom' s = insert v X}", "by force"], ["proof (state)\nthis:\n  fmupd v True ` {s. fmdom' s = X} \\<union>\n  fmupd v False ` {s. fmdom' s = X}\n  \\<subseteq> {s. fmdom' s = insert v X}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = insert v X} =\n    fmupd v True ` {s. fmdom' s = X} \\<union>\n    fmupd v False ` {s. fmdom' s = X}", "ultimately"], ["proof (chain)\npicking this:\n  {s. fmdom' s = insert v X}\n  \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n              fmupd v False ` {s. fmdom' s = X}\n  fmupd v True ` {s. fmdom' s = X} \\<union>\n  fmupd v False ` {s. fmdom' s = X}\n  \\<subseteq> {s. fmdom' s = insert v X}", "show \"?A = ?B\""], ["proof (prove)\nusing this:\n  {s. fmdom' s = insert v X}\n  \\<subseteq> fmupd v True ` {s. fmdom' s = X} \\<union>\n              fmupd v False ` {s. fmdom' s = X}\n  fmupd v True ` {s. fmdom' s = X} \\<union>\n  fmupd v False ` {s. fmdom' s = X}\n  \\<subseteq> {s. fmdom' s = insert v X}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = insert v X} =\n    fmupd v True ` {s. fmdom' s = X} \\<union>\n    fmupd v False ` {s. fmdom' s = X}", "by blast"], ["proof (state)\nthis:\n  {s. fmdom' s = insert v X} =\n  fmupd v True ` {s. fmdom' s = X} \\<union>\n  fmupd v False ` {s. fmdom' s = X}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open> Another important property of the state set is cardinality, i.e. the number of distinct\nstates which can be modelled using a given finite variable set.\n\nAs lemma `card\\_of\\_set\\_of\\_all\\_possible\\_states` shows, for a finite variable set `X`, the number of\npossible states is `2 \\^ card X`, i.e. the number of assigning two discrete values to `card X` slots\nas known from combinatorics.\n\nAgain, some additional properties of finite maps had to be proven. Pivotally, in lemma\n`updates\\_disjoint`, it is shown that the image of updating a set of states with domain `X` on a\npoint @{term \"x \\<notin> X\"} with either `True` or `False` yields two distinct sets of states with domain\n@{term \"{x} \\<union> X\"}. \\<close>\n\n\\<comment> \\<open>NOTE goal has to stay implication otherwise induction rule won't watch.\\<close>"], ["", "lemma FINITE_states:\n  fixes X :: \"'a set\"\n  shows \"finite X \\<Longrightarrow> finite {(s :: 'a state). fmdom' s = X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite X \\<Longrightarrow> finite {s. fmdom' s = X}", "proof (induction  rule: finite.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {s. fmdom' s = {}}\n 2. \\<And>A a.\n       \\<lbrakk>finite A; finite {s. fmdom' s = A}\\<rbrakk>\n       \\<Longrightarrow> finite {s. fmdom' s = insert a A}", "case emptyI"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. finite {s. fmdom' s = {}}\n 2. \\<And>A a.\n       \\<lbrakk>finite A; finite {s. fmdom' s = A}\\<rbrakk>\n       \\<Longrightarrow> finite {s. fmdom' s = insert a A}", "then"], ["proof (chain)\npicking this:", "have \"{s. fmdom' s  = {}} = {fmempty}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} = {fmempty}", "by (simp add: empty_domain_fmap_set)"], ["proof (state)\nthis:\n  {s. fmdom' s = {}} = {fmempty}\n\ngoal (2 subgoals):\n 1. finite {s. fmdom' s = {}}\n 2. \\<And>A a.\n       \\<lbrakk>finite A; finite {s. fmdom' s = A}\\<rbrakk>\n       \\<Longrightarrow> finite {s. fmdom' s = insert a A}", "then"], ["proof (chain)\npicking this:\n  {s. fmdom' s = {}} = {fmempty}", "show ?case"], ["proof (prove)\nusing this:\n  {s. fmdom' s = {}} = {fmempty}\n\ngoal (1 subgoal):\n 1. finite {s. fmdom' s = {}}", "by (simp add: \\<open>{s. fmdom' s = {}} = {fmempty}\\<close>)"], ["proof (state)\nthis:\n  finite {s. fmdom' s = {}}\n\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>finite A; finite {s. fmdom' s = A}\\<rbrakk>\n       \\<Longrightarrow> finite {s. fmdom' s = insert a A}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>finite A; finite {s. fmdom' s = A}\\<rbrakk>\n       \\<Longrightarrow> finite {s. fmdom' s = insert a A}", "case (insertI A a)"], ["proof (state)\nthis:\n  finite A\n  finite {s. fmdom' s = A}\n\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>finite A; finite {s. fmdom' s = A}\\<rbrakk>\n       \\<Longrightarrow> finite {s. fmdom' s = insert a A}", "assume P1: \"finite A\"\n    and P2: \"finite {s. fmdom' s = A}\""], ["proof (state)\nthis:\n  finite A\n  finite {s. fmdom' s = A}\n\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>finite A; finite {s. fmdom' s = A}\\<rbrakk>\n       \\<Longrightarrow> finite {s. fmdom' s = insert a A}", "then"], ["proof (chain)\npicking this:\n  finite A\n  finite {s. fmdom' s = A}", "show ?case"], ["proof (prove)\nusing this:\n  finite A\n  finite {s. fmdom' s = A}\n\ngoal (1 subgoal):\n 1. finite {s. fmdom' s = insert a A}", "proof (cases \"a \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; finite {s. fmdom' s = A}; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> finite {s. fmdom' s = insert a A}\n 2. \\<lbrakk>finite A; finite {s. fmdom' s = A}; a \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> finite {s. fmdom' s = insert a A}", "case True"], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; finite {s. fmdom' s = A}; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> finite {s. fmdom' s = insert a A}\n 2. \\<lbrakk>finite A; finite {s. fmdom' s = A}; a \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> finite {s. fmdom' s = insert a A}", "then"], ["proof (chain)\npicking this:\n  a \\<in> A", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. finite {s. fmdom' s = insert a A}", "using insertI.IH insert_Diff"], ["proof (prove)\nusing this:\n  a \\<in> A\n  finite {s. fmdom' s = A}\n  ?a \\<in> ?A \\<Longrightarrow> insert ?a (?A - {?a}) = ?A\n\ngoal (1 subgoal):\n 1. finite {s. fmdom' s = insert a A}", "by fastforce"], ["proof (state)\nthis:\n  finite {s. fmdom' s = insert a A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite {s. fmdom' s = A}; a \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> finite {s. fmdom' s = insert a A}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite {s. fmdom' s = A}; a \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> finite {s. fmdom' s = insert a A}", "case False"], ["proof (state)\nthis:\n  a \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite {s. fmdom' s = A}; a \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> finite {s. fmdom' s = insert a A}", "then"], ["proof (chain)\npicking this:\n  a \\<notin> A", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<notin> A\n\ngoal (1 subgoal):\n 1. finite {s. fmdom' s = insert a A}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<notin> A \\<Longrightarrow> finite {s. fmdom' s = insert a A}", "have \"finite (\n          ((\\<lambda>s. fmupd a True s) ` {s. fmdom' s = A})\n            \\<union> ((\\<lambda>s. fmupd a False s) ` {s. fmdom' s = A}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (fmupd a True ` {s. fmdom' s = A} \\<union>\n      fmupd a False ` {s. fmdom' s = A})", "using False construction_of_all_possible_states_lemma insertI.IH"], ["proof (prove)\nusing this:\n  a \\<notin> A\n  ?v \\<notin> ?X \\<Longrightarrow>\n  {s. fmdom' s = insert ?v ?X} =\n  fmupd ?v True ` {s. fmdom' s = ?X} \\<union>\n  fmupd ?v False ` {s. fmdom' s = ?X}\n  finite {s. fmdom' s = A}\n\ngoal (1 subgoal):\n 1. finite\n     (fmupd a True ` {s. fmdom' s = A} \\<union>\n      fmupd a False ` {s. fmdom' s = A})", "by blast"], ["proof (state)\nthis:\n  finite\n   (fmupd a True ` {s. fmdom' s = A} \\<union>\n    fmupd a False ` {s. fmdom' s = A})\n\ngoal (1 subgoal):\n 1. a \\<notin> A \\<Longrightarrow> finite {s. fmdom' s = insert a A}", "then"], ["proof (chain)\npicking this:\n  finite\n   (fmupd a True ` {s. fmdom' s = A} \\<union>\n    fmupd a False ` {s. fmdom' s = A})", "show ?thesis"], ["proof (prove)\nusing this:\n  finite\n   (fmupd a True ` {s. fmdom' s = A} \\<union>\n    fmupd a False ` {s. fmdom' s = A})\n\ngoal (1 subgoal):\n 1. finite {s. fmdom' s = insert a A}", "using False construction_of_all_possible_states_lemma"], ["proof (prove)\nusing this:\n  finite\n   (fmupd a True ` {s. fmdom' s = A} \\<union>\n    fmupd a False ` {s. fmdom' s = A})\n  a \\<notin> A\n  ?v \\<notin> ?X \\<Longrightarrow>\n  {s. fmdom' s = insert ?v ?X} =\n  fmupd ?v True ` {s. fmdom' s = ?X} \\<union>\n  fmupd ?v False ` {s. fmdom' s = ?X}\n\ngoal (1 subgoal):\n 1. finite {s. fmdom' s = insert a A}", "by fastforce"], ["proof (state)\nthis:\n  finite {s. fmdom' s = insert a A}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite {s. fmdom' s = insert a A}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite {s. fmdom' s = insert a A}\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma bool_update_effect:\n  fixes s X x v b\n  assumes \"finite X\" \"s \\<in> {s :: 'a state. fmdom' s = X}\" \"x \\<in> X\" \"x \\<noteq> v\"\n  shows \"fmlookup ((\\<lambda>s :: 'a state. fmupd v b s) s) x = fmlookup s x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (fmupd v b s) x = fmlookup s x", "using assms fmupd_lookup"], ["proof (prove)\nusing this:\n  finite X\n  s \\<in> {s. fmdom' s = X}\n  x \\<in> X\n  x \\<noteq> v\n  fmlookup (fmupd ?a ?b ?m) ?a' =\n  (if ?a = ?a' then Some ?b else fmlookup ?m ?a')\n\ngoal (1 subgoal):\n 1. fmlookup (fmupd v b s) x = fmlookup s x", "by auto\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma bool_update_inj:\n  fixes X :: \"'a set\" and v b\n  assumes \"finite X\" \"v \\<notin> X\"\n  shows \"inj_on (\\<lambda>s. fmupd v b s) {s :: 'a state. fmdom' s = X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "let ?f = \"\\<lambda>s :: 'a state. fmupd v b s\""], ["proof (state)\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "fix s1 s2 :: \"'a state\""], ["proof (state)\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "assume \"s1 \\<in> {s :: 'a state. fmdom' s = X}\" \"s2 \\<in> {s :: 'a state. fmdom' s = X}\"\n      \"?f s1 = ?f s2\""], ["proof (state)\nthis:\n  s1 \\<in> {s. fmdom' s = X}\n  s2 \\<in> {s. fmdom' s = X}\n  fmupd v b s1 = fmupd v b s2\n\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "moreover"], ["proof (state)\nthis:\n  s1 \\<in> {s. fmdom' s = X}\n  s2 \\<in> {s. fmdom' s = X}\n  fmupd v b s1 = fmupd v b s2\n\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "{"], ["proof (state)\nthis:\n  s1 \\<in> {s. fmdom' s = X}\n  s2 \\<in> {s. fmdom' s = X}\n  fmupd v b s1 = fmupd v b s2\n\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "have\n        \"\\<forall>x\\<in>X. x \\<noteq> v \\<longrightarrow> fmlookup (?f s1) x = fmlookup s1 x\"\n        \"\\<forall>x\\<in>X. x \\<noteq> v \\<longrightarrow> fmlookup (?f s2) x = fmlookup s2 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X.\n       x \\<noteq> v \\<longrightarrow>\n       fmlookup (fmupd v b s1) x = fmlookup s1 x &&&\n    \\<forall>x\\<in>X.\n       x \\<noteq> v \\<longrightarrow>\n       fmlookup (fmupd v b s2) x = fmlookup s2 x", "by simp+"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X.\n     x \\<noteq> v \\<longrightarrow>\n     fmlookup (fmupd v b s1) x = fmlookup s1 x\n  \\<forall>x\\<in>X.\n     x \\<noteq> v \\<longrightarrow>\n     fmlookup (fmupd v b s2) x = fmlookup s2 x\n\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>X.\n     x \\<noteq> v \\<longrightarrow>\n     fmlookup (fmupd v b s1) x = fmlookup s1 x\n  \\<forall>x\\<in>X.\n     x \\<noteq> v \\<longrightarrow>\n     fmlookup (fmupd v b s2) x = fmlookup s2 x", "have\n        \"\\<forall>x\\<in>X. x \\<noteq> v \\<longrightarrow> fmlookup s1 x = fmlookup s2 x\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>X.\n     x \\<noteq> v \\<longrightarrow>\n     fmlookup (fmupd v b s1) x = fmlookup s1 x\n  \\<forall>x\\<in>X.\n     x \\<noteq> v \\<longrightarrow>\n     fmlookup (fmupd v b s2) x = fmlookup s2 x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X.\n       x \\<noteq> v \\<longrightarrow> fmlookup s1 x = fmlookup s2 x", "using calculation(3)"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>X.\n     x \\<noteq> v \\<longrightarrow>\n     fmlookup (fmupd v b s1) x = fmlookup s1 x\n  \\<forall>x\\<in>X.\n     x \\<noteq> v \\<longrightarrow>\n     fmlookup (fmupd v b s2) x = fmlookup s2 x\n  fmupd v b s1 = fmupd v b s2\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X.\n       x \\<noteq> v \\<longrightarrow> fmlookup s1 x = fmlookup s2 x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X.\n     x \\<noteq> v \\<longrightarrow> fmlookup s1 x = fmlookup s2 x\n\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "}"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X.\n     x \\<noteq> v \\<longrightarrow> fmlookup s1 x = fmlookup s2 x\n\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "moreover"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X.\n     x \\<noteq> v \\<longrightarrow> fmlookup s1 x = fmlookup s2 x\n\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "have \"fmlookup s1 v = fmlookup s2 v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup s1 v = fmlookup s2 v", "using calculation \\<open>v \\<notin> X\\<close>"], ["proof (prove)\nusing this:\n  s1 \\<in> {s. fmdom' s = X}\n  s2 \\<in> {s. fmdom' s = X}\n  fmupd v b s1 = fmupd v b s2\n  \\<forall>x\\<in>X.\n     x \\<noteq> v \\<longrightarrow> fmlookup s1 x = fmlookup s2 x\n  v \\<notin> X\n\ngoal (1 subgoal):\n 1. fmlookup s1 v = fmlookup s2 v", "by force"], ["proof (state)\nthis:\n  fmlookup s1 v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "ultimately"], ["proof (chain)\npicking this:\n  s1 \\<in> {s. fmdom' s = X}\n  s2 \\<in> {s. fmdom' s = X}\n  fmupd v b s1 = fmupd v b s2\n  \\<forall>x\\<in>X.\n     x \\<noteq> v \\<longrightarrow> fmlookup s1 x = fmlookup s2 x\n  fmlookup s1 v = fmlookup s2 v", "have \"s1 = s2\""], ["proof (prove)\nusing this:\n  s1 \\<in> {s. fmdom' s = X}\n  s2 \\<in> {s. fmdom' s = X}\n  fmupd v b s1 = fmupd v b s2\n  \\<forall>x\\<in>X.\n     x \\<noteq> v \\<longrightarrow> fmlookup s1 x = fmlookup s2 x\n  fmlookup s1 v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. s1 = s2", "using fmap_neq"], ["proof (prove)\nusing this:\n  s1 \\<in> {s. fmdom' s = X}\n  s2 \\<in> {s. fmdom' s = X}\n  fmupd v b s1 = fmupd v b s2\n  \\<forall>x\\<in>X.\n     x \\<noteq> v \\<longrightarrow> fmlookup s1 x = fmlookup s2 x\n  fmlookup s1 v = fmlookup s2 v\n  fmdom' ?s = fmdom' ?s' \\<Longrightarrow>\n  (?s \\<noteq> ?s') =\n  (\\<exists>v\\<in>fmdom' ?s. fmlookup ?s v \\<noteq> fmlookup ?s' v)\n\ngoal (1 subgoal):\n 1. s1 = s2", "by fastforce"], ["proof (state)\nthis:\n  s1 = s2\n\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?s1.2 \\<in> {s. fmdom' s = X}; ?s2.2 \\<in> {s. fmdom' s = X};\n   fmupd v b ?s1.2 = fmupd v b ?s2.2\\<rbrakk>\n  \\<Longrightarrow> ?s1.2 = ?s2.2\n\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?s1.2 \\<in> {s. fmdom' s = X}; ?s2.2 \\<in> {s. fmdom' s = X};\n   fmupd v b ?s1.2 = fmupd v b ?s2.2\\<rbrakk>\n  \\<Longrightarrow> ?s1.2 = ?s2.2", "show \"inj_on (\\<lambda>s. fmupd v b s) {s :: 'a state. fmdom' s = X}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?s1.2 \\<in> {s. fmdom' s = X}; ?s2.2 \\<in> {s. fmdom' s = X};\n   fmupd v b ?s1.2 = fmupd v b ?s2.2\\<rbrakk>\n  \\<Longrightarrow> ?s1.2 = ?s2.2\n\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "using inj_onI"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s1.2 \\<in> {s. fmdom' s = X}; ?s2.2 \\<in> {s. fmdom' s = X};\n   fmupd v b ?s1.2 = fmupd v b ?s2.2\\<rbrakk>\n  \\<Longrightarrow> ?s1.2 = ?s2.2\n  (\\<And>x y.\n      \\<lbrakk>x \\<in> ?A; y \\<in> ?A; ?f x = ?f y\\<rbrakk>\n      \\<Longrightarrow> x = y) \\<Longrightarrow>\n  inj_on ?f ?A\n\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "by blast"], ["proof (state)\nthis:\n  inj_on (fmupd v b) {s. fmdom' s = X}\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma card_update:\n  fixes X v b\n  assumes \"finite (X :: 'a set)\" \"v \\<notin> X\"\n  shows \"\n    card ((\\<lambda>s. fmupd v b s) ` {s :: 'a state. fmdom' s = X})\n    = card {s :: 'a state. fmdom' s = X}\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (fmupd v b ` {s. fmdom' s = X}) = card {s. fmdom' s = X}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (fmupd v b ` {s. fmdom' s = X}) = card {s. fmdom' s = X}", "have \"inj_on (\\<lambda>s. fmupd v b s) {s :: 'a state. fmdom' s = X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "using assms bool_update_inj"], ["proof (prove)\nusing this:\n  finite X\n  v \\<notin> X\n  \\<lbrakk>finite ?X; ?v \\<notin> ?X\\<rbrakk>\n  \\<Longrightarrow> inj_on (fmupd ?v ?b) {s. fmdom' s = ?X}\n\ngoal (1 subgoal):\n 1. inj_on (fmupd v b) {s. fmdom' s = X}", "by fast"], ["proof (state)\nthis:\n  inj_on (fmupd v b) {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. card (fmupd v b ` {s. fmdom' s = X}) = card {s. fmdom' s = X}", "then"], ["proof (chain)\npicking this:\n  inj_on (fmupd v b) {s. fmdom' s = X}", "show\n    \"card ((\\<lambda>s. fmupd v b s) ` {s :: 'a state. fmdom' s = X}) = card {s :: 'a state. fmdom' s = X}\""], ["proof (prove)\nusing this:\n  inj_on (fmupd v b) {s. fmdom' s = X}\n\ngoal (1 subgoal):\n 1. card (fmupd v b ` {s. fmdom' s = X}) = card {s. fmdom' s = X}", "using card_image"], ["proof (prove)\nusing this:\n  inj_on (fmupd v b) {s. fmdom' s = X}\n  inj_on ?f ?A \\<Longrightarrow> card (?f ` ?A) = card ?A\n\ngoal (1 subgoal):\n 1. card (fmupd v b ` {s. fmdom' s = X}) = card {s. fmdom' s = X}", "by blast"], ["proof (state)\nthis:\n  card (fmupd v b ` {s. fmdom' s = X}) = card {s. fmdom' s = X}\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma updates_disjoint:\n  fixes X x\n  assumes \"finite X\" \"x \\<notin> X\"\n  shows \"\n    ((\\<lambda>s. fmupd x True s) ` {s. fmdom' s = X})\n    \\<inter> ((\\<lambda>s. fmupd x False s) ` {s. fmdom' s = X}) = {}\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmupd x True ` {s. fmdom' s = X} \\<inter>\n    fmupd x False ` {s. fmdom' s = X} =\n    {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmupd x True ` {s. fmdom' s = X} \\<inter>\n    fmupd x False ` {s. fmdom' s = X} =\n    {}", "let ?A = \"((\\<lambda>s. fmupd x True s) ` {s. fmdom' s = X})\""], ["proof (state)\ngoal (1 subgoal):\n 1. fmupd x True ` {s. fmdom' s = X} \\<inter>\n    fmupd x False ` {s. fmdom' s = X} =\n    {}", "let ?B = \"((\\<lambda>s. fmupd x False s) ` {s. fmdom' s = X})\""], ["proof (state)\ngoal (1 subgoal):\n 1. fmupd x True ` {s. fmdom' s = X} \\<inter>\n    fmupd x False ` {s. fmdom' s = X} =\n    {}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. fmupd x True ` {s. fmdom' s = X} \\<inter>\n    fmupd x False ` {s. fmdom' s = X} =\n    {}", "assume C: \"\\<not>(\\<forall>a\\<in>?A. \\<forall>b\\<in>?B. a \\<noteq> b)\""], ["proof (state)\nthis:\n  \\<not> (\\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n             \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}. a \\<noteq> b)\n\ngoal (1 subgoal):\n 1. fmupd x True ` {s. fmdom' s = X} \\<inter>\n    fmupd x False ` {s. fmdom' s = X} =\n    {}", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n             \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}. a \\<noteq> b)", "have\n      \"\\<forall>a\\<in>?A. \\<forall>b\\<in>?B. fmlookup a x \\<noteq> fmlookup b x\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n             \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}. a \\<noteq> b)\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n       \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}.\n          fmlookup a x \\<noteq> fmlookup b x", "by simp"], ["proof (state)\nthis:\n  \\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n     \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}.\n        fmlookup a x \\<noteq> fmlookup b x\n\ngoal (1 subgoal):\n 1. fmupd x True ` {s. fmdom' s = X} \\<inter>\n    fmupd x False ` {s. fmdom' s = X} =\n    {}", "then"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n     \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}.\n        fmlookup a x \\<noteq> fmlookup b x", "have \"\\<forall>a\\<in>?A. \\<forall>b\\<in>?B. a \\<noteq> b\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n     \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}.\n        fmlookup a x \\<noteq> fmlookup b x\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n       \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}. a \\<noteq> b", "by blast"], ["proof (state)\nthis:\n  \\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n     \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}. a \\<noteq> b\n\ngoal (1 subgoal):\n 1. fmupd x True ` {s. fmdom' s = X} \\<inter>\n    fmupd x False ` {s. fmdom' s = X} =\n    {}", "then"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n     \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}. a \\<noteq> b", "have False"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n     \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}. a \\<noteq> b\n\ngoal (1 subgoal):\n 1. False", "using C"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n     \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}. a \\<noteq> b\n  \\<not> (\\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n             \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}. a \\<noteq> b)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. fmupd x True ` {s. fmdom' s = X} \\<inter>\n    fmupd x False ` {s. fmdom' s = X} =\n    {}", "}"], ["proof (state)\nthis:\n  \\<not> (\\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n             \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}.\n                a \\<noteq> b) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. fmupd x True ` {s. fmdom' s = X} \\<inter>\n    fmupd x False ` {s. fmdom' s = X} =\n    {}", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n             \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}.\n                a \\<noteq> b) \\<Longrightarrow>\n  False", "show \"?A \\<inter> ?B = {}\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n             \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}.\n                a \\<noteq> b) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. fmupd x True ` {s. fmdom' s = X} \\<inter>\n    fmupd x False ` {s. fmdom' s = X} =\n    {}", "using disjoint_iff_not_equal"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>a\\<in>fmupd x True ` {s. fmdom' s = X}.\n             \\<forall>b\\<in>fmupd x False ` {s. fmdom' s = X}.\n                a \\<noteq> b) \\<Longrightarrow>\n  False\n  (?A \\<inter> ?B = {}) =\n  (\\<forall>x\\<in>?A. \\<forall>y\\<in>?B. x \\<noteq> y)\n\ngoal (1 subgoal):\n 1. fmupd x True ` {s. fmdom' s = X} \\<inter>\n    fmupd x False ` {s. fmdom' s = X} =\n    {}", "by blast"], ["proof (state)\nthis:\n  fmupd x True ` {s. fmdom' s = X} \\<inter>\n  fmupd x False ` {s. fmdom' s = X} =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_of_set_of_all_possible_states:\n  fixes X :: \"'a set\"\n  assumes \"finite X\"\n  shows \"card {(s :: 'a state). fmdom' s = X} = 2 ^ (card X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {s. fmdom' s = X} = 2 ^ card X", "using assms"], ["proof (prove)\nusing this:\n  finite X\n\ngoal (1 subgoal):\n 1. card {s. fmdom' s = X} = 2 ^ card X", "proof (induction X)"], ["proof (state)\ngoal (2 subgoals):\n 1. card {s. fmdom' s = {}} = 2 ^ card {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card {s. fmdom' s = F} = 2 ^ card F\\<rbrakk>\n       \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                         2 ^ card (insert x F)", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. card {s. fmdom' s = {}} = 2 ^ card {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card {s. fmdom' s = F} = 2 ^ card F\\<rbrakk>\n       \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                         2 ^ card (insert x F)", "then"], ["proof (chain)\npicking this:", "have 1: \"{s :: 'a state. fmdom' s = {}} = {fmempty}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} = {fmempty}", "using empty_domain_fmap_set"], ["proof (prove)\nusing this:\n  {s. fmdom' s = {}} = {fmempty}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = {}} = {fmempty}", "by simp"], ["proof (state)\nthis:\n  {s. fmdom' s = {}} = {fmempty}\n\ngoal (2 subgoals):\n 1. card {s. fmdom' s = {}} = 2 ^ card {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card {s. fmdom' s = F} = 2 ^ card F\\<rbrakk>\n       \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                         2 ^ card (insert x F)", "then"], ["proof (chain)\npicking this:\n  {s. fmdom' s = {}} = {fmempty}", "have \"card {fmempty} = 1\""], ["proof (prove)\nusing this:\n  {s. fmdom' s = {}} = {fmempty}\n\ngoal (1 subgoal):\n 1. card {fmempty} = 1", "using is_singleton_altdef"], ["proof (prove)\nusing this:\n  {s. fmdom' s = {}} = {fmempty}\n  is_singleton ?A = (card ?A = 1)\n\ngoal (1 subgoal):\n 1. card {fmempty} = 1", "by blast"], ["proof (state)\nthis:\n  card {fmempty} = 1\n\ngoal (2 subgoals):\n 1. card {s. fmdom' s = {}} = 2 ^ card {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card {s. fmdom' s = F} = 2 ^ card F\\<rbrakk>\n       \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                         2 ^ card (insert x F)", "then"], ["proof (chain)\npicking this:\n  card {fmempty} = 1", "have \"2^(card {}) = 1\""], ["proof (prove)\nusing this:\n  card {fmempty} = 1\n\ngoal (1 subgoal):\n 1. (2::'b) ^ card {} = (1::'b)", "by auto"], ["proof (state)\nthis:\n  (2::?'b2) ^ card {} = (1::?'b2)\n\ngoal (2 subgoals):\n 1. card {s. fmdom' s = {}} = 2 ^ card {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card {s. fmdom' s = F} = 2 ^ card F\\<rbrakk>\n       \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                         2 ^ card (insert x F)", "then"], ["proof (chain)\npicking this:\n  (2::?'b2) ^ card {} = (1::?'b2)", "show ?case"], ["proof (prove)\nusing this:\n  (2::?'b2) ^ card {} = (1::?'b2)\n\ngoal (1 subgoal):\n 1. card {s. fmdom' s = {}} = 2 ^ card {}", "using 1"], ["proof (prove)\nusing this:\n  (2::?'b2) ^ card {} = (1::?'b2)\n  {s. fmdom' s = {}} = {fmempty}\n\ngoal (1 subgoal):\n 1. card {s. fmdom' s = {}} = 2 ^ card {}", "by auto"], ["proof (state)\nthis:\n  card {s. fmdom' s = {}} = 2 ^ card {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card {s. fmdom' s = F} = 2 ^ card F\\<rbrakk>\n       \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                         2 ^ card (insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card {s. fmdom' s = F} = 2 ^ card F\\<rbrakk>\n       \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                         2 ^ card (insert x F)", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  card {s. fmdom' s = F} = 2 ^ card F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        card {s. fmdom' s = F} = 2 ^ card F\\<rbrakk>\n       \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                         2 ^ card (insert x F)", "then"], ["proof (chain)\npicking this:\n  finite F\n  x \\<notin> F\n  card {s. fmdom' s = F} = 2 ^ card F", "show ?case\n    \\<comment> \\<open>TODO refactor and simplify proof further.\\<close>"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  card {s. fmdom' s = F} = 2 ^ card F\n\ngoal (1 subgoal):\n 1. card {s. fmdom' s = insert x F} = 2 ^ card (insert x F)", "proof (cases \"x \\<in> F\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<in> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)\n 2. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<notin> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)", "case True"], ["proof (state)\nthis:\n  x \\<in> F\n\ngoal (2 subgoals):\n 1. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<in> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)\n 2. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<notin> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)", "then"], ["proof (chain)\npicking this:\n  x \\<in> F", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> F\n\ngoal (1 subgoal):\n 1. card {s. fmdom' s = insert x F} = 2 ^ card (insert x F)", "using insert.hyps(2)"], ["proof (prove)\nusing this:\n  x \\<in> F\n  x \\<notin> F\n\ngoal (1 subgoal):\n 1. card {s. fmdom' s = insert x F} = 2 ^ card (insert x F)", "by blast"], ["proof (state)\nthis:\n  card {s. fmdom' s = insert x F} = 2 ^ card (insert x F)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<notin> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<notin> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)", "case False"], ["proof (state)\nthis:\n  x \\<notin> F\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<notin> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)", "then"], ["proof (chain)\npicking this:\n  x \\<notin> F", "have \"\n        {s :: 'a state. fmdom' s = insert x F}\n        = (\\<lambda>s. fmupd x True s) ` {s. fmdom' s = F} \\<union> (\\<lambda>s. fmupd x False s) ` {s. fmdom' s = F}\n      \""], ["proof (prove)\nusing this:\n  x \\<notin> F\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = insert x F} =\n    fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F}", "using False construction_of_all_possible_states_lemma"], ["proof (prove)\nusing this:\n  x \\<notin> F\n  x \\<notin> F\n  ?v \\<notin> ?X \\<Longrightarrow>\n  {s. fmdom' s = insert ?v ?X} =\n  fmupd ?v True ` {s. fmdom' s = ?X} \\<union>\n  fmupd ?v False ` {s. fmdom' s = ?X}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = insert x F} =\n    fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F}", "by metis"], ["proof (state)\nthis:\n  {s. fmdom' s = insert x F} =\n  fmupd x True ` {s. fmdom' s = F} \\<union>\n  fmupd x False ` {s. fmdom' s = F}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<notin> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)", "then"], ["proof (chain)\npicking this:\n  {s. fmdom' s = insert x F} =\n  fmupd x True ` {s. fmdom' s = F} \\<union>\n  fmupd x False ` {s. fmdom' s = F}", "have 2: \"\n        card ({s :: 'a state. fmdom' s = insert x F})\n        = card ((\\<lambda>s. fmupd x True s) ` {s. fmdom' s = F} \\<union> (\\<lambda>s. fmupd x False s) ` {s. fmdom' s = F})\n      \""], ["proof (prove)\nusing this:\n  {s. fmdom' s = insert x F} =\n  fmupd x True ` {s. fmdom' s = F} \\<union>\n  fmupd x False ` {s. fmdom' s = F}\n\ngoal (1 subgoal):\n 1. card {s. fmdom' s = insert x F} =\n    card\n     (fmupd x True ` {s. fmdom' s = F} \\<union>\n      fmupd x False ` {s. fmdom' s = F})", "by argo"], ["proof (state)\nthis:\n  card {s. fmdom' s = insert x F} =\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<notin> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)", "then"], ["proof (chain)\npicking this:\n  card {s. fmdom' s = insert x F} =\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F})", "have 3: \"2^(card (insert x F)) = 2 * 2^(card F)\""], ["proof (prove)\nusing this:\n  card {s. fmdom' s = insert x F} =\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F})\n\ngoal (1 subgoal):\n 1. (2::'b) ^ card (insert x F) = (2::'b) * (2::'b) ^ card F", "using False insert.hyps(1)"], ["proof (prove)\nusing this:\n  card {s. fmdom' s = insert x F} =\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F})\n  x \\<notin> F\n  finite F\n\ngoal (1 subgoal):\n 1. (2::'b) ^ card (insert x F) = (2::'b) * (2::'b) ^ card F", "by simp"], ["proof (state)\nthis:\n  (2::?'b1) ^ card (insert x F) = (2::?'b1) * (2::?'b1) ^ card F\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<notin> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)", "then"], ["proof (chain)\npicking this:\n  (2::?'b1) ^ card (insert x F) = (2::?'b1) * (2::?'b1) ^ card F", "have\n      \"card ((\\<lambda>s. fmupd x True s) ` {s. fmdom' s = F}) = 2^(card F)\"\n      \"card ((\\<lambda>s. fmupd x False s) ` {s. fmdom' s = F}) = 2^(card F)\""], ["proof (prove)\nusing this:\n  (2::?'b1) ^ card (insert x F) = (2::?'b1) * (2::?'b1) ^ card F\n\ngoal (1 subgoal):\n 1. card (fmupd x True ` {s. fmdom' s = F}) = 2 ^ card F &&&\n    card (fmupd x False ` {s. fmdom' s = F}) = 2 ^ card F", "using False card_update insert.IH insert.hyps(1)"], ["proof (prove)\nusing this:\n  (2::?'b1) ^ card (insert x F) = (2::?'b1) * (2::?'b1) ^ card F\n  x \\<notin> F\n  \\<lbrakk>finite ?X; ?v \\<notin> ?X\\<rbrakk>\n  \\<Longrightarrow> card (fmupd ?v ?b ` {s. fmdom' s = ?X}) =\n                    card {s. fmdom' s = ?X}\n  card {s. fmdom' s = F} = 2 ^ card F\n  finite F\n\ngoal (1 subgoal):\n 1. card (fmupd x True ` {s. fmdom' s = F}) = 2 ^ card F &&&\n    card (fmupd x False ` {s. fmdom' s = F}) = 2 ^ card F", "by metis+"], ["proof (state)\nthis:\n  card (fmupd x True ` {s. fmdom' s = F}) = 2 ^ card F\n  card (fmupd x False ` {s. fmdom' s = F}) = 2 ^ card F\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<notin> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)", "moreover"], ["proof (state)\nthis:\n  card (fmupd x True ` {s. fmdom' s = F}) = 2 ^ card F\n  card (fmupd x False ` {s. fmdom' s = F}) = 2 ^ card F\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<notin> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)", "have \"\n          ((\\<lambda>s. fmupd x True s) ` {s. fmdom' s = F})\n          \\<inter> ((\\<lambda>s. fmupd x False s) ` {s. fmdom' s = F})\n        = {}\n      \""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmupd x True ` {s. fmdom' s = F} \\<inter>\n    fmupd x False ` {s. fmdom' s = F} =\n    {}", "using False insert.hyps(1) updates_disjoint"], ["proof (prove)\nusing this:\n  x \\<notin> F\n  finite F\n  \\<lbrakk>finite ?X; ?x \\<notin> ?X\\<rbrakk>\n  \\<Longrightarrow> fmupd ?x True ` {s. fmdom' s = ?X} \\<inter>\n                    fmupd ?x False ` {s. fmdom' s = ?X} =\n                    {}\n\ngoal (1 subgoal):\n 1. fmupd x True ` {s. fmdom' s = F} \\<inter>\n    fmupd x False ` {s. fmdom' s = F} =\n    {}", "by metis"], ["proof (state)\nthis:\n  fmupd x True ` {s. fmdom' s = F} \\<inter>\n  fmupd x False ` {s. fmdom' s = F} =\n  {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<notin> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)", "moreover"], ["proof (state)\nthis:\n  fmupd x True ` {s. fmdom' s = F} \\<inter>\n  fmupd x False ` {s. fmdom' s = F} =\n  {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<notin> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)", "have \"card (\n          ((\\<lambda>s. fmupd x True s) ` {s. fmdom' s = F})\n          \\<union> ((\\<lambda>s. fmupd x False s) ` {s. fmdom' s = F})\n        )\n        = card (((\\<lambda>s. fmupd x True s) ` {s. fmdom' s = F}))\n          + card ((\\<lambda>s. fmupd x False s) ` {s. fmdom' s = F})\n      \""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     (fmupd x True ` {s. fmdom' s = F} \\<union>\n      fmupd x False ` {s. fmdom' s = F}) =\n    card (fmupd x True ` {s. fmdom' s = F}) +\n    card (fmupd x False ` {s. fmdom' s = F})", "using calculation card_Un_disjoint card.infinite\n        power_eq_0_iff rel_simps(76)"], ["proof (prove)\nusing this:\n  card (fmupd x True ` {s. fmdom' s = F}) = 2 ^ card F\n  card (fmupd x False ` {s. fmdom' s = F}) = 2 ^ card F\n  fmupd x True ` {s. fmdom' s = F} \\<inter>\n  fmupd x False ` {s. fmdom' s = F} =\n  {}\n  \\<lbrakk>finite ?A; finite ?B; ?A \\<inter> ?B = {}\\<rbrakk>\n  \\<Longrightarrow> card (?A \\<union> ?B) = card ?A + card ?B\n  infinite ?A \\<Longrightarrow> card ?A = 0\n  (?a ^ ?n = (0::?'a)) = (?a = (0::?'a) \\<and> 0 < ?n)\n  (0::?'a) \\<noteq> numeral ?n\n\ngoal (1 subgoal):\n 1. card\n     (fmupd x True ` {s. fmdom' s = F} \\<union>\n      fmupd x False ` {s. fmdom' s = F}) =\n    card (fmupd x True ` {s. fmdom' s = F}) +\n    card (fmupd x False ` {s. fmdom' s = F})", "by metis"], ["proof (state)\nthis:\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F}) =\n  card (fmupd x True ` {s. fmdom' s = F}) +\n  card (fmupd x False ` {s. fmdom' s = F})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<notin> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)", "then"], ["proof (chain)\npicking this:\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F}) =\n  card (fmupd x True ` {s. fmdom' s = F}) +\n  card (fmupd x False ` {s. fmdom' s = F})", "have \"card (\n          ((\\<lambda>s. fmupd x True s) ` {s. fmdom' s = F})\n          \\<union> ((\\<lambda>s. fmupd x False s) ` {s. fmdom' s = F})\n        )\n        = 2 * (2^(card F))\""], ["proof (prove)\nusing this:\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F}) =\n  card (fmupd x True ` {s. fmdom' s = F}) +\n  card (fmupd x False ` {s. fmdom' s = F})\n\ngoal (1 subgoal):\n 1. card\n     (fmupd x True ` {s. fmdom' s = F} \\<union>\n      fmupd x False ` {s. fmdom' s = F}) =\n    2 * 2 ^ card F", "using calculation(1, 2)"], ["proof (prove)\nusing this:\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F}) =\n  card (fmupd x True ` {s. fmdom' s = F}) +\n  card (fmupd x False ` {s. fmdom' s = F})\n  card (fmupd x True ` {s. fmdom' s = F}) = 2 ^ card F\n  card (fmupd x False ` {s. fmdom' s = F}) = 2 ^ card F\n\ngoal (1 subgoal):\n 1. card\n     (fmupd x True ` {s. fmdom' s = F} \\<union>\n      fmupd x False ` {s. fmdom' s = F}) =\n    2 * 2 ^ card F", "by presburger"], ["proof (state)\nthis:\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F}) =\n  2 * 2 ^ card F\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<notin> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)", "then"], ["proof (chain)\npicking this:\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F}) =\n  2 * 2 ^ card F", "have \"card (\n          ((\\<lambda>s. fmupd x True s) ` {s. fmdom' s = F})\n          \\<union> ((\\<lambda>s. fmupd x False s) ` {s. fmdom' s = F})\n        )\n        = 2^(card (insert x F))\""], ["proof (prove)\nusing this:\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F}) =\n  2 * 2 ^ card F\n\ngoal (1 subgoal):\n 1. card\n     (fmupd x True ` {s. fmdom' s = F} \\<union>\n      fmupd x False ` {s. fmdom' s = F}) =\n    2 ^ card (insert x F)", "using insert.IH 3"], ["proof (prove)\nusing this:\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F}) =\n  2 * 2 ^ card F\n  card {s. fmdom' s = F} = 2 ^ card F\n  (2::?'b1) ^ card (insert x F) = (2::?'b1) * (2::?'b1) ^ card F\n\ngoal (1 subgoal):\n 1. card\n     (fmupd x True ` {s. fmdom' s = F} \\<union>\n      fmupd x False ` {s. fmdom' s = F}) =\n    2 ^ card (insert x F)", "by metis"], ["proof (state)\nthis:\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F}) =\n  2 ^ card (insert x F)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite F; x \\<notin> F; card {s. fmdom' s = F} = 2 ^ card F;\n     x \\<notin> F\\<rbrakk>\n    \\<Longrightarrow> card {s. fmdom' s = insert x F} =\n                      2 ^ card (insert x F)", "then"], ["proof (chain)\npicking this:\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F}) =\n  2 ^ card (insert x F)", "show ?thesis"], ["proof (prove)\nusing this:\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F}) =\n  2 ^ card (insert x F)\n\ngoal (1 subgoal):\n 1. card {s. fmdom' s = insert x F} = 2 ^ card (insert x F)", "using \"2\""], ["proof (prove)\nusing this:\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F}) =\n  2 ^ card (insert x F)\n  card {s. fmdom' s = insert x F} =\n  card\n   (fmupd x True ` {s. fmdom' s = F} \\<union>\n    fmupd x False ` {s. fmdom' s = F})\n\ngoal (1 subgoal):\n 1. card {s. fmdom' s = insert x F} = 2 ^ card (insert x F)", "by argo"], ["proof (state)\nthis:\n  card {s. fmdom' s = insert x F} = 2 ^ card (insert x F)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card {s. fmdom' s = insert x F} = 2 ^ card (insert x F)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \"State Lists and State Sets\"\n\n\n\\<comment> \\<open>NOTE using fun because of two defining equations.\\<close>\n\\<comment> \\<open>NOTE paired argument replaced by currying.\\<close>"], ["", "fun state_list where\n  \"state_list s [] = [s]\"\n| \"state_list s (a # as) = s # state_list (state_succ s a) as\""], ["", "lemma empty_state_list_lemma:\n  fixes as s\n  shows \"\\<not>([] = state_list s as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<noteq> state_list s as", "proof (induction as)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] \\<noteq> state_list s []\n 2. \\<And>a as.\n       [] \\<noteq> state_list s as \\<Longrightarrow>\n       [] \\<noteq> state_list s (a # as)", "qed auto"], ["", "lemma state_list_length_non_zero:\n  fixes as s\n  shows \"\\<not>(0 = length (state_list s as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> length (state_list s as)", "proof (induction as)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<noteq> length (state_list s [])\n 2. \\<And>a as.\n       0 \\<noteq> length (state_list s as) \\<Longrightarrow>\n       0 \\<noteq> length (state_list s (a # as))", "qed auto"], ["", "lemma state_list_length_lemma:\n  fixes as s\n  shows \"length as = length (state_list s as) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length as = length (state_list s as) - 1", "proof (induction as arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s. length [] = length (state_list s []) - 1\n 2. \\<And>a as s.\n       (\\<And>s. length as = length (state_list s as) - 1) \\<Longrightarrow>\n       length (a # as) = length (state_list s (a # as)) - 1", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s. length [] = length (state_list s []) - 1\n 2. \\<And>a as s.\n       (\\<And>s. length as = length (state_list s as) - 1) \\<Longrightarrow>\n       length (a # as) = length (state_list s (a # as)) - 1", "case (Cons a as)"], ["proof (state)\nthis:\n  length as = length (state_list ?s as) - 1\n\ngoal (2 subgoals):\n 1. \\<And>s. length [] = length (state_list s []) - 1\n 2. \\<And>a as s.\n       (\\<And>s. length as = length (state_list s as) - 1) \\<Longrightarrow>\n       length (a # as) = length (state_list s (a # as)) - 1", "have \"length (state_list s (Cons a as)) - 1 =  length (state_list (state_succ s a) as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (state_list s (a # as)) - 1 =\n    length (state_list (state_succ s a) as)", "by auto\n      \\<comment> \\<open>TODO unwrap metis proof.\\<close>"], ["proof (state)\nthis:\n  length (state_list s (a # as)) - 1 =\n  length (state_list (state_succ s a) as)\n\ngoal (2 subgoals):\n 1. \\<And>s. length [] = length (state_list s []) - 1\n 2. \\<And>a as s.\n       (\\<And>s. length as = length (state_list s as) - 1) \\<Longrightarrow>\n       length (a # as) = length (state_list s (a # as)) - 1", "then"], ["proof (chain)\npicking this:\n  length (state_list s (a # as)) - 1 =\n  length (state_list (state_succ s a) as)", "show \"length (Cons a as) = length (state_list s (Cons a as)) - 1\""], ["proof (prove)\nusing this:\n  length (state_list s (a # as)) - 1 =\n  length (state_list (state_succ s a) as)\n\ngoal (1 subgoal):\n 1. length (a # as) = length (state_list s (a # as)) - 1", "by (metis Cons.IH Suc_diff_1 empty_state_list_lemma length_Cons length_greater_0_conv)"], ["proof (state)\nthis:\n  length (a # as) = length (state_list s (a # as)) - 1\n\ngoal (1 subgoal):\n 1. \\<And>s. length [] = length (state_list s []) - 1", "qed simp"], ["", "lemma state_list_length_lemma_2:\n  fixes as s\n  shows \"(length (state_list s as)) = (length as + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (state_list s as) = length as + 1", "proof (induction as arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s. length (state_list s []) = length [] + 1\n 2. \\<And>a as s.\n       (\\<And>s. length (state_list s as) = length as + 1) \\<Longrightarrow>\n       length (state_list s (a # as)) = length (a # as) + 1", "qed auto\n\n\n\\<comment> \\<open>NOTE using fun because of multiple defining equations.\\<close>\n\\<comment> \\<open>NOTE name shortened to 'state\\_def'\\<close>"], ["", "fun state_set where\n  \"state_set [] = {}\"\n| \"state_set (s # ss) = insert [s] (Cons s ` (state_set ss))\""], ["", "lemma state_set_thm:\n  fixes s1\n  shows \"s1 \\<in> state_set s2 \\<longleftrightarrow> prefix s1 s2 \\<and> s1 \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s1 \\<in> state_set s2) = (prefix s1 s2 \\<and> s1 \\<noteq> [])", "proof -\n  \\<comment> \\<open>NOTE Show equivalence by proving both directions. Left-to-right is trivial. Right-to-Left\n  primarily involves exploiting the prefix premise, induction hypothesis  and  `state\\_set`\n  definition.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. (s1 \\<in> state_set s2) = (prefix s1 s2 \\<and> s1 \\<noteq> [])", "have \"s1 \\<in> state_set s2 \\<Longrightarrow> prefix s1 s2 \\<and> s1 \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 \\<in> state_set s2 \\<Longrightarrow>\n    prefix s1 s2 \\<and> s1 \\<noteq> []", "by (induction s2 arbitrary: s1) auto"], ["proof (state)\nthis:\n  s1 \\<in> state_set s2 \\<Longrightarrow> prefix s1 s2 \\<and> s1 \\<noteq> []\n\ngoal (1 subgoal):\n 1. (s1 \\<in> state_set s2) = (prefix s1 s2 \\<and> s1 \\<noteq> [])", "moreover"], ["proof (state)\nthis:\n  s1 \\<in> state_set s2 \\<Longrightarrow> prefix s1 s2 \\<and> s1 \\<noteq> []\n\ngoal (1 subgoal):\n 1. (s1 \\<in> state_set s2) = (prefix s1 s2 \\<and> s1 \\<noteq> [])", "{"], ["proof (state)\nthis:\n  s1 \\<in> state_set s2 \\<Longrightarrow> prefix s1 s2 \\<and> s1 \\<noteq> []\n\ngoal (1 subgoal):\n 1. (s1 \\<in> state_set s2) = (prefix s1 s2 \\<and> s1 \\<noteq> [])", "assume P: \"prefix s1 s2\" \"s1 \\<noteq> []\""], ["proof (state)\nthis:\n  prefix s1 s2\n  s1 \\<noteq> []\n\ngoal (1 subgoal):\n 1. (s1 \\<in> state_set s2) = (prefix s1 s2 \\<and> s1 \\<noteq> [])", "then"], ["proof (chain)\npicking this:\n  prefix s1 s2\n  s1 \\<noteq> []", "have \"s1 \\<in> state_set s2\""], ["proof (prove)\nusing this:\n  prefix s1 s2\n  s1 \\<noteq> []\n\ngoal (1 subgoal):\n 1. s1 \\<in> state_set s2", "proof (induction s2 arbitrary: s1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>prefix s1 []; s1 \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> s1 \\<in> state_set []\n 2. \\<And>a s2 s1.\n       \\<lbrakk>\\<And>s1.\n                   \\<lbrakk>prefix s1 s2; s1 \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> s1 \\<in> state_set s2;\n        prefix s1 (a # s2); s1 \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> s1 \\<in> state_set (a # s2)", "case (Cons a s2)"], ["proof (state)\nthis:\n  \\<lbrakk>prefix ?s1.0 s2; ?s1.0 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?s1.0 \\<in> state_set s2\n  prefix s1 (a # s2)\n  s1 \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>prefix s1 []; s1 \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> s1 \\<in> state_set []\n 2. \\<And>a s2 s1.\n       \\<lbrakk>\\<And>s1.\n                   \\<lbrakk>prefix s1 s2; s1 \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> s1 \\<in> state_set s2;\n        prefix s1 (a # s2); s1 \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> s1 \\<in> state_set (a # s2)", "obtain s1' where 1: \"s1 = a # s1'\" \"prefix s1' s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s1'.\n        \\<lbrakk>s1 = a # s1'; prefix s1' s2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Cons.prems(1, 2) prefix_Cons"], ["proof (prove)\nusing this:\n  prefix s1 (a # s2)\n  s1 \\<noteq> []\n  prefix ?xs (?y # ?ys) =\n  (?xs = [] \\<or> (\\<exists>zs. ?xs = ?y # zs \\<and> prefix zs ?ys))\n\ngoal (1 subgoal):\n 1. (\\<And>s1'.\n        \\<lbrakk>s1 = a # s1'; prefix s1' s2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  s1 = a # s1'\n  prefix s1' s2\n\ngoal (2 subgoals):\n 1. \\<And>s1.\n       \\<lbrakk>prefix s1 []; s1 \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> s1 \\<in> state_set []\n 2. \\<And>a s2 s1.\n       \\<lbrakk>\\<And>s1.\n                   \\<lbrakk>prefix s1 s2; s1 \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> s1 \\<in> state_set s2;\n        prefix s1 (a # s2); s1 \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> s1 \\<in> state_set (a # s2)", "then"], ["proof (chain)\npicking this:\n  s1 = a # s1'\n  prefix s1' s2", "show ?case"], ["proof (prove)\nusing this:\n  s1 = a # s1'\n  prefix s1' s2\n\ngoal (1 subgoal):\n 1. s1 \\<in> state_set (a # s2)", "proof (cases \"s1' = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>s1 = a # s1'; prefix s1' s2; s1' = []\\<rbrakk>\n    \\<Longrightarrow> s1 \\<in> state_set (a # s2)\n 2. \\<lbrakk>s1 = a # s1'; prefix s1' s2; s1' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> s1 \\<in> state_set (a # s2)", "case True"], ["proof (state)\nthis:\n  s1' = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s1 = a # s1'; prefix s1' s2; s1' = []\\<rbrakk>\n    \\<Longrightarrow> s1 \\<in> state_set (a # s2)\n 2. \\<lbrakk>s1 = a # s1'; prefix s1' s2; s1' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> s1 \\<in> state_set (a # s2)", "then"], ["proof (chain)\npicking this:\n  s1' = []", "show ?thesis"], ["proof (prove)\nusing this:\n  s1' = []\n\ngoal (1 subgoal):\n 1. s1 \\<in> state_set (a # s2)", "using 1"], ["proof (prove)\nusing this:\n  s1' = []\n  s1 = a # s1'\n  prefix s1' s2\n\ngoal (1 subgoal):\n 1. s1 \\<in> state_set (a # s2)", "by force"], ["proof (state)\nthis:\n  s1 \\<in> state_set (a # s2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = a # s1'; prefix s1' s2; s1' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> s1 \\<in> state_set (a # s2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = a # s1'; prefix s1' s2; s1' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> s1 \\<in> state_set (a # s2)", "case False"], ["proof (state)\nthis:\n  s1' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = a # s1'; prefix s1' s2; s1' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> s1 \\<in> state_set (a # s2)", "then"], ["proof (chain)\npicking this:\n  s1' \\<noteq> []", "have \"s1' \\<in> state_set s2\""], ["proof (prove)\nusing this:\n  s1' \\<noteq> []\n\ngoal (1 subgoal):\n 1. s1' \\<in> state_set s2", "using 1 False Cons.IH"], ["proof (prove)\nusing this:\n  s1' \\<noteq> []\n  s1 = a # s1'\n  prefix s1' s2\n  s1' \\<noteq> []\n  \\<lbrakk>prefix ?s1.0 s2; ?s1.0 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> ?s1.0 \\<in> state_set s2\n\ngoal (1 subgoal):\n 1. s1' \\<in> state_set s2", "by blast"], ["proof (state)\nthis:\n  s1' \\<in> state_set s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 = a # s1'; prefix s1' s2; s1' \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> s1 \\<in> state_set (a # s2)", "then"], ["proof (chain)\npicking this:\n  s1' \\<in> state_set s2", "show ?thesis"], ["proof (prove)\nusing this:\n  s1' \\<in> state_set s2\n\ngoal (1 subgoal):\n 1. s1 \\<in> state_set (a # s2)", "using 1"], ["proof (prove)\nusing this:\n  s1' \\<in> state_set s2\n  s1 = a # s1'\n  prefix s1' s2\n\ngoal (1 subgoal):\n 1. s1 \\<in> state_set (a # s2)", "by fastforce"], ["proof (state)\nthis:\n  s1 \\<in> state_set (a # s2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s1 \\<in> state_set (a # s2)\n\ngoal (1 subgoal):\n 1. \\<And>s1.\n       \\<lbrakk>prefix s1 []; s1 \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> s1 \\<in> state_set []", "qed simp"], ["proof (state)\nthis:\n  s1 \\<in> state_set s2\n\ngoal (1 subgoal):\n 1. (s1 \\<in> state_set s2) = (prefix s1 s2 \\<and> s1 \\<noteq> [])", "}"], ["proof (state)\nthis:\n  \\<lbrakk>prefix s1 s2; s1 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> s1 \\<in> state_set s2\n\ngoal (1 subgoal):\n 1. (s1 \\<in> state_set s2) = (prefix s1 s2 \\<and> s1 \\<noteq> [])", "ultimately"], ["proof (chain)\npicking this:\n  s1 \\<in> state_set s2 \\<Longrightarrow> prefix s1 s2 \\<and> s1 \\<noteq> []\n  \\<lbrakk>prefix s1 s2; s1 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> s1 \\<in> state_set s2", "show \"s1 \\<in> state_set s2 \\<longleftrightarrow> prefix s1 s2 \\<and> s1 \\<noteq> []\""], ["proof (prove)\nusing this:\n  s1 \\<in> state_set s2 \\<Longrightarrow> prefix s1 s2 \\<and> s1 \\<noteq> []\n  \\<lbrakk>prefix s1 s2; s1 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> s1 \\<in> state_set s2\n\ngoal (1 subgoal):\n 1. (s1 \\<in> state_set s2) = (prefix s1 s2 \\<and> s1 \\<noteq> [])", "by blast"], ["proof (state)\nthis:\n  (s1 \\<in> state_set s2) = (prefix s1 s2 \\<and> s1 \\<noteq> [])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma state_set_finite:\n  fixes X\n  shows \"finite (state_set X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (state_set X)", "by (induction X) auto"], ["", "lemma LENGTH_state_set:\n  fixes X e\n  assumes \"e \\<in> state_set X\"\n  shows \"length e \\<le> length X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length e \\<le> length X", "using assms"], ["proof (prove)\nusing this:\n  e \\<in> state_set X\n\ngoal (1 subgoal):\n 1. length e \\<le> length X", "by (induction X arbitrary: e) auto"], ["", "lemma lemma_temp:\n  fixes x s as h\n  assumes \"x \\<in> state_set (state_list s as)\"\n  shows \"length (h # state_list s as) > length x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length x < length (h # state_list s as)", "using assms LENGTH_state_set le_imp_less_Suc"], ["proof (prove)\nusing this:\n  x \\<in> state_set (state_list s as)\n  ?e \\<in> state_set ?X \\<Longrightarrow> length ?e \\<le> length ?X\n  ?m \\<le> ?n \\<Longrightarrow> ?m < Suc ?n\n\ngoal (1 subgoal):\n 1. length x < length (h # state_list s as)", "by force"], ["", "lemma NIL_NOTIN_stateset:\n  fixes X\n  shows \"[] \\<notin> state_set X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<notin> state_set X", "by (induction X) auto\n\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma state_set_card_i:\n  fixes X a\n  shows \"[a] \\<notin> (Cons a ` state_set X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a] \\<notin> (#) a ` state_set X", "by (induction X) auto\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma state_set_card_ii:\n  fixes X a\n  shows \"card (Cons a ` state_set X) = card (state_set X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((#) a ` state_set X) = card (state_set X)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card ((#) a ` state_set X) = card (state_set X)", "have \"inj_on (Cons a) (state_set X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on ((#) a) (state_set X)", "by simp"], ["proof (state)\nthis:\n  inj_on ((#) a) (state_set X)\n\ngoal (1 subgoal):\n 1. card ((#) a ` state_set X) = card (state_set X)", "then"], ["proof (chain)\npicking this:\n  inj_on ((#) a) (state_set X)", "show ?thesis"], ["proof (prove)\nusing this:\n  inj_on ((#) a) (state_set X)\n\ngoal (1 subgoal):\n 1. card ((#) a ` state_set X) = card (state_set X)", "using card_image"], ["proof (prove)\nusing this:\n  inj_on ((#) a) (state_set X)\n  inj_on ?f ?A \\<Longrightarrow> card (?f ` ?A) = card ?A\n\ngoal (1 subgoal):\n 1. card ((#) a ` state_set X) = card (state_set X)", "by blast"], ["proof (state)\nthis:\n  card ((#) a ` state_set X) = card (state_set X)\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma state_set_card_iii:\n  fixes X a\n  shows \"card (state_set (a # X)) = 1 + card (state_set X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (state_set (a # X)) = 1 + card (state_set X)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (state_set (a # X)) = 1 + card (state_set X)", "have \"card (state_set (a # X)) = card (insert [a] (Cons a ` state_set X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (state_set (a # X)) = card (insert [a] ((#) a ` state_set X))", "by auto\n      \\<comment> \\<open>TODO unwrap this metis step.\\<close>"], ["proof (state)\nthis:\n  card (state_set (a # X)) = card (insert [a] ((#) a ` state_set X))\n\ngoal (1 subgoal):\n 1. card (state_set (a # X)) = 1 + card (state_set X)", "also"], ["proof (state)\nthis:\n  card (state_set (a # X)) = card (insert [a] ((#) a ` state_set X))\n\ngoal (1 subgoal):\n 1. card (state_set (a # X)) = 1 + card (state_set X)", "have \"\\<dots> = 1 + card (Cons a ` state_set X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (insert [a] ((#) a ` state_set X)) = 1 + card ((#) a ` state_set X)", "using state_set_card_i"], ["proof (prove)\nusing this:\n  [?a] \\<notin> (#) ?a ` state_set ?X\n\ngoal (1 subgoal):\n 1. card (insert [a] ((#) a ` state_set X)) = 1 + card ((#) a ` state_set X)", "by (metis Suc_eq_plus1_left card_insert_disjoint finite_imageI state_set_finite)"], ["proof (state)\nthis:\n  card (insert [a] ((#) a ` state_set X)) = 1 + card ((#) a ` state_set X)\n\ngoal (1 subgoal):\n 1. card (state_set (a # X)) = 1 + card (state_set X)", "also"], ["proof (state)\nthis:\n  card (insert [a] ((#) a ` state_set X)) = 1 + card ((#) a ` state_set X)\n\ngoal (1 subgoal):\n 1. card (state_set (a # X)) = 1 + card (state_set X)", "have\"\\<dots> = 1 + card (state_set X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + card ((#) a ` state_set X) = 1 + card (state_set X)", "using state_set_card_ii"], ["proof (prove)\nusing this:\n  card ((#) ?a ` state_set ?X) = card (state_set ?X)\n\ngoal (1 subgoal):\n 1. 1 + card ((#) a ` state_set X) = 1 + card (state_set X)", "by metis"], ["proof (state)\nthis:\n  1 + card ((#) a ` state_set X) = 1 + card (state_set X)\n\ngoal (1 subgoal):\n 1. card (state_set (a # X)) = 1 + card (state_set X)", "finally"], ["proof (chain)\npicking this:\n  card (state_set (a # X)) = 1 + card (state_set X)", "show \"card (state_set (a # X)) = 1 + card (state_set X)\""], ["proof (prove)\nusing this:\n  card (state_set (a # X)) = 1 + card (state_set X)\n\ngoal (1 subgoal):\n 1. card (state_set (a # X)) = 1 + card (state_set X)", "by blast"], ["proof (state)\nthis:\n  card (state_set (a # X)) = 1 + card (state_set X)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma state_set_card:\n  fixes X\n  shows \"card (state_set X) = length X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (state_set X) = length X", "proof (induction X)"], ["proof (state)\ngoal (2 subgoals):\n 1. card (state_set []) = length []\n 2. \\<And>a X.\n       card (state_set X) = length X \\<Longrightarrow>\n       card (state_set (a # X)) = length (a # X)", "case (Cons a X)"], ["proof (state)\nthis:\n  card (state_set X) = length X\n\ngoal (2 subgoals):\n 1. card (state_set []) = length []\n 2. \\<And>a X.\n       card (state_set X) = length X \\<Longrightarrow>\n       card (state_set (a # X)) = length (a # X)", "then"], ["proof (chain)\npicking this:\n  card (state_set X) = length X", "have \"card (state_set (a # X)) = 1 + card (state_set X)\""], ["proof (prove)\nusing this:\n  card (state_set X) = length X\n\ngoal (1 subgoal):\n 1. card (state_set (a # X)) = 1 + card (state_set X)", "using state_set_card_iii"], ["proof (prove)\nusing this:\n  card (state_set X) = length X\n  card (state_set (?a # ?X)) = 1 + card (state_set ?X)\n\ngoal (1 subgoal):\n 1. card (state_set (a # X)) = 1 + card (state_set X)", "by fast"], ["proof (state)\nthis:\n  card (state_set (a # X)) = 1 + card (state_set X)\n\ngoal (2 subgoals):\n 1. card (state_set []) = length []\n 2. \\<And>a X.\n       card (state_set X) = length X \\<Longrightarrow>\n       card (state_set (a # X)) = length (a # X)", "then"], ["proof (chain)\npicking this:\n  card (state_set (a # X)) = 1 + card (state_set X)", "show ?case"], ["proof (prove)\nusing this:\n  card (state_set (a # X)) = 1 + card (state_set X)\n\ngoal (1 subgoal):\n 1. card (state_set (a # X)) = length (a # X)", "using Cons"], ["proof (prove)\nusing this:\n  card (state_set (a # X)) = 1 + card (state_set X)\n  card (state_set X) = length X\n\ngoal (1 subgoal):\n 1. card (state_set (a # X)) = length (a # X)", "by fastforce"], ["proof (state)\nthis:\n  card (state_set (a # X)) = length (a # X)\n\ngoal (1 subgoal):\n 1. card (state_set []) = length []", "qed auto"], ["", "subsubsection \"Properties of Domain Changes During Plan Execution\""], ["", "lemma FDOM_state_succ:\n  assumes \"fmdom' (snd a) \\<subseteq> fmdom' s\"\n  shows \"(fmdom' (state_succ s a) = fmdom' s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (state_succ s a) = fmdom' s", "unfolding state_succ_def fmap_add_ltr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (if fst a \\<subseteq>\\<^sub>f s then s ++\\<^sub>f snd a else s) =\n    fmdom' s", "using assms"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. fmdom' (if fst a \\<subseteq>\\<^sub>f s then s ++\\<^sub>f snd a else s) =\n    fmdom' s", "by force"], ["", "lemma FDOM_state_succ_subset:\n  \"fmdom' (state_succ s a) \\<subseteq> (fmdom' s \\<union> fmdom' (snd a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (state_succ s a) \\<subseteq> fmdom' s \\<union> fmdom' (snd a)", "unfolding state_succ_def fmap_add_ltr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (if fst a \\<subseteq>\\<^sub>f s then s ++\\<^sub>f snd a else s)\n    \\<subseteq> fmdom' s \\<union> fmdom' (snd a)", "by simp\n\n\n\\<comment> \\<open>NOTE definition `qispl\\_then` removed (was not being used).\\<close>"], ["", "lemma FDOM_eff_subset_FDOM_valid_states:\n  fixes p e s\n  assumes \"(p, e) \\<in> PROB\" \"(s \\<in> valid_states PROB)\"\n  shows \"(fmdom' e \\<subseteq> fmdom' s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> fmdom' s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> fmdom' s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> fmdom' s", "have \"fmdom' e \\<subseteq> action_dom p e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> action_dom p e", "unfolding action_dom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> fmdom' p \\<union> fmdom' e", "by blast"], ["proof (state)\nthis:\n  fmdom' e \\<subseteq> action_dom p e\n\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> fmdom' s", "also"], ["proof (state)\nthis:\n  fmdom' e \\<subseteq> action_dom p e\n\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> fmdom' s", "have \"\\<dots> \\<subseteq> prob_dom PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_dom p e \\<subseteq> prob_dom PROB", "unfolding action_dom_def prob_dom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' p \\<union> fmdom' e\n    \\<subseteq> (\\<Union>(s1, s2)\\<in>PROB. fmdom' s1 \\<union> fmdom' s2)", "using assms(1)"], ["proof (prove)\nusing this:\n  (p, e) \\<in> PROB\n\ngoal (1 subgoal):\n 1. fmdom' p \\<union> fmdom' e\n    \\<subseteq> (\\<Union>(s1, s2)\\<in>PROB. fmdom' s1 \\<union> fmdom' s2)", "by blast"], ["proof (state)\nthis:\n  action_dom p e \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> fmdom' s", "finally"], ["proof (chain)\npicking this:\n  fmdom' e \\<subseteq> prob_dom PROB", "have \"fmdom' e \\<subseteq> fmdom' s\""], ["proof (prove)\nusing this:\n  fmdom' e \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> fmdom' s", "using assms"], ["proof (prove)\nusing this:\n  fmdom' e \\<subseteq> prob_dom PROB\n  (p, e) \\<in> PROB\n  s \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> fmdom' s", "by (auto simp: valid_states_def)"], ["proof (state)\nthis:\n  fmdom' e \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> fmdom' s", "}"], ["proof (state)\nthis:\n  fmdom' e \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> fmdom' s", "then"], ["proof (chain)\npicking this:\n  fmdom' e \\<subseteq> fmdom' s", "show \"fmdom' e \\<subseteq> fmdom' s\""], ["proof (prove)\nusing this:\n  fmdom' e \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> fmdom' s", "by simp"], ["proof (state)\nthis:\n  fmdom' e \\<subseteq> fmdom' s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma FDOM_eff_subset_FDOM_valid_states_pair:\n  fixes a s\n  assumes \"a \\<in> PROB\" \"s \\<in> valid_states PROB\"\n  shows \"fmdom' (snd a) \\<subseteq> fmdom' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s", "have \"fmdom' (snd a) \\<subseteq> (\\<lambda>(s1, s2). action_dom s1 s2) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a)\n    \\<subseteq> (case a of (s1, s2) \\<Rightarrow> action_dom s1 s2)", "unfolding action_dom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a)\n    \\<subseteq> (case a of\n                 (s1, s2) \\<Rightarrow> fmdom' s1 \\<union> fmdom' s2)", "using case_prod_beta"], ["proof (prove)\nusing this:\n  (case ?p of (x, xa) \\<Rightarrow> ?f x xa) = ?f (fst ?p) (snd ?p)\n\ngoal (1 subgoal):\n 1. fmdom' (snd a)\n    \\<subseteq> (case a of\n                 (s1, s2) \\<Rightarrow> fmdom' s1 \\<union> fmdom' s2)", "by fastforce"], ["proof (state)\nthis:\n  fmdom' (snd a)\n  \\<subseteq> (case a of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s", "also"], ["proof (state)\nthis:\n  fmdom' (snd a)\n  \\<subseteq> (case a of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s", "have \"\\<dots> \\<subseteq> prob_dom PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case a of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n    \\<subseteq> prob_dom PROB", "using assms(1) prob_dom_def Sup_upper"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  prob_dom ?prob \\<equiv> \\<Union>(s1, s2)\\<in>?prob. action_dom s1 s2\n  ?x \\<in> ?A \\<Longrightarrow> ?x \\<le> Sup ?A\n\ngoal (1 subgoal):\n 1. (case a of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n    \\<subseteq> prob_dom PROB", "by fast"], ["proof (state)\nthis:\n  (case a of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n  \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s", "finally"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<subseteq> prob_dom PROB", "have \"fmdom' (snd a) \\<subseteq> fmdom' s\""], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s", "using assms(2) valid_states_def"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> prob_dom PROB\n  s \\<in> valid_states PROB\n  valid_states ?prob \\<equiv> {s. fmdom' s = prob_dom ?prob}\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s", "by fast"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s", "}"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<subseteq> fmdom' s", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s", "by simp"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> fmdom' s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma FDOM_pre_subset_FDOM_valid_states:\n  fixes p e s\n  assumes \"(p, e) \\<in> PROB\" \"s \\<in> valid_states PROB\"\n  shows \"fmdom' p \\<subseteq> fmdom' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' p \\<subseteq> fmdom' s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmdom' p \\<subseteq> fmdom' s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. fmdom' p \\<subseteq> fmdom' s", "have \"fmdom' p \\<subseteq> (\\<lambda>(s1, s2). action_dom s1 s2) (p, e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' p\n    \\<subseteq> (case (p, e) of (s1, s2) \\<Rightarrow> action_dom s1 s2)", "using action_dom_def"], ["proof (prove)\nusing this:\n  action_dom ?s1.0 ?s2.0 \\<equiv> fmdom' ?s1.0 \\<union> fmdom' ?s2.0\n\ngoal (1 subgoal):\n 1. fmdom' p\n    \\<subseteq> (case (p, e) of (s1, s2) \\<Rightarrow> action_dom s1 s2)", "by fast"], ["proof (state)\nthis:\n  fmdom' p\n  \\<subseteq> (case (p, e) of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n\ngoal (1 subgoal):\n 1. fmdom' p \\<subseteq> fmdom' s", "also"], ["proof (state)\nthis:\n  fmdom' p\n  \\<subseteq> (case (p, e) of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n\ngoal (1 subgoal):\n 1. fmdom' p \\<subseteq> fmdom' s", "have \"\\<dots> \\<subseteq> prob_dom PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (p, e) of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n    \\<subseteq> prob_dom PROB", "using assms(1)"], ["proof (prove)\nusing this:\n  (p, e) \\<in> PROB\n\ngoal (1 subgoal):\n 1. (case (p, e) of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n    \\<subseteq> prob_dom PROB", "by (simp add: Sup_upper pair_imageI prob_dom_def)"], ["proof (state)\nthis:\n  (case (p, e) of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n  \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' p \\<subseteq> fmdom' s", "finally"], ["proof (chain)\npicking this:\n  fmdom' p \\<subseteq> prob_dom PROB", "have \"fmdom' p \\<subseteq> fmdom' s\""], ["proof (prove)\nusing this:\n  fmdom' p \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' p \\<subseteq> fmdom' s", "using assms(2) valid_states_def"], ["proof (prove)\nusing this:\n  fmdom' p \\<subseteq> prob_dom PROB\n  s \\<in> valid_states PROB\n  valid_states ?prob \\<equiv> {s. fmdom' s = prob_dom ?prob}\n\ngoal (1 subgoal):\n 1. fmdom' p \\<subseteq> fmdom' s", "by fast"], ["proof (state)\nthis:\n  fmdom' p \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. fmdom' p \\<subseteq> fmdom' s", "}"], ["proof (state)\nthis:\n  fmdom' p \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. fmdom' p \\<subseteq> fmdom' s", "then"], ["proof (chain)\npicking this:\n  fmdom' p \\<subseteq> fmdom' s", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' p \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. fmdom' p \\<subseteq> fmdom' s", "by simp"], ["proof (state)\nthis:\n  fmdom' p \\<subseteq> fmdom' s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma FDOM_pre_subset_FDOM_valid_states_pair:\n  fixes a s\n  assumes \"a \\<in> PROB\" \"s \\<in> valid_states PROB\"\n  shows \"fmdom' (fst a) \\<subseteq> fmdom' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> fmdom' s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> fmdom' s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> fmdom' s", "have \"fmdom' (fst a) \\<subseteq> (\\<lambda>(s1, s2). action_dom s1 s2) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (fst a)\n    \\<subseteq> (case a of (s1, s2) \\<Rightarrow> action_dom s1 s2)", "using action_dom_def"], ["proof (prove)\nusing this:\n  action_dom ?s1.0 ?s2.0 \\<equiv> fmdom' ?s1.0 \\<union> fmdom' ?s2.0\n\ngoal (1 subgoal):\n 1. fmdom' (fst a)\n    \\<subseteq> (case a of (s1, s2) \\<Rightarrow> action_dom s1 s2)", "by force"], ["proof (state)\nthis:\n  fmdom' (fst a)\n  \\<subseteq> (case a of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> fmdom' s", "also"], ["proof (state)\nthis:\n  fmdom' (fst a)\n  \\<subseteq> (case a of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> fmdom' s", "have \"\\<dots> \\<subseteq> prob_dom PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case a of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n    \\<subseteq> prob_dom PROB", "using assms(1)"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. (case a of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n    \\<subseteq> prob_dom PROB", "by (simp add: Sup_upper pair_imageI prob_dom_def)"], ["proof (state)\nthis:\n  (case a of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n  \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> fmdom' s", "finally"], ["proof (chain)\npicking this:\n  fmdom' (fst a) \\<subseteq> prob_dom PROB", "have \"fmdom' (fst a) \\<subseteq> fmdom' s\""], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> fmdom' s", "using assms(2) valid_states_def"], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<subseteq> prob_dom PROB\n  s \\<in> valid_states PROB\n  valid_states ?prob \\<equiv> {s. fmdom' s = prob_dom ?prob}\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> fmdom' s", "by fast"], ["proof (state)\nthis:\n  fmdom' (fst a) \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> fmdom' s", "}"], ["proof (state)\nthis:\n  fmdom' (fst a) \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> fmdom' s", "then"], ["proof (chain)\npicking this:\n  fmdom' (fst a) \\<subseteq> fmdom' s", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> fmdom' s", "by simp"], ["proof (state)\nthis:\n  fmdom' (fst a) \\<subseteq> fmdom' s\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>TODO unwrap the simp proof.\\<close>"], ["", "lemma action_dom_subset_valid_states_FDOM:\n  fixes p e s\n  assumes \"(p, e) \\<in> PROB\" \"s \\<in> valid_states PROB\"\n  shows \"action_dom p e \\<subseteq> fmdom' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_dom p e \\<subseteq> fmdom' s", "using assms"], ["proof (prove)\nusing this:\n  (p, e) \\<in> PROB\n  s \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. action_dom p e \\<subseteq> fmdom' s", "by (simp add: Sup_upper pair_imageI prob_dom_def valid_states_def)\n\n\n\\<comment> \\<open>TODO unwrap the metis proof.\\<close>"], ["", "lemma FDOM_eff_subset_prob_dom:\n  fixes p e\n  assumes \"(p, e) \\<in> PROB\"\n  shows \"fmdom' e \\<subseteq> prob_dom PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> prob_dom PROB", "using assms"], ["proof (prove)\nusing this:\n  (p, e) \\<in> PROB\n\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> prob_dom PROB", "by (metis Sup_upper Un_subset_iff action_dom_def pair_imageI prob_dom_def)"], ["", "lemma FDOM_eff_subset_prob_dom_pair:\n  fixes a\n  assumes \"a \\<in> PROB\"\n  shows \"fmdom' (snd a) \\<subseteq> prob_dom PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> prob_dom PROB", "using assms(1) FDOM_eff_subset_prob_dom surjective_pairing"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  (?p, ?e) \\<in> ?PROB \\<Longrightarrow>\n  fmdom' ?e \\<subseteq> prob_dom ?PROB\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> prob_dom PROB", "by metis\n\n\n\\<comment> \\<open>TODO unwrap metis proof.\\<close>"], ["", "lemma FDOM_pre_subset_prob_dom:\n  fixes p e\n  assumes \"(p, e) \\<in> PROB\"\n  shows \"fmdom' p \\<subseteq> prob_dom PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' p \\<subseteq> prob_dom PROB", "using assms"], ["proof (prove)\nusing this:\n  (p, e) \\<in> PROB\n\ngoal (1 subgoal):\n 1. fmdom' p \\<subseteq> prob_dom PROB", "by (metis (no_types) Sup_upper Un_subset_iff action_dom_def pair_imageI prob_dom_def)"], ["", "lemma FDOM_pre_subset_prob_dom_pair:\n  fixes a\n  assumes \"a \\<in> PROB\"\n  shows \"fmdom' (fst a) \\<subseteq> prob_dom PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> prob_dom PROB", "using assms FDOM_pre_subset_prob_dom surjective_pairing"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  (?p, ?e) \\<in> ?PROB \\<Longrightarrow>\n  fmdom' ?p \\<subseteq> prob_dom ?PROB\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> prob_dom PROB", "by metis"], ["", "subsubsection \"Properties of Valid Plans\""], ["", "lemma valid_plan_valid_head:\n  assumes \"(h # as \\<in> valid_plans PROB)\"\n  shows  \"h \\<in> PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<in> PROB", "using assms valid_plans_def"], ["proof (prove)\nusing this:\n  h # as \\<in> valid_plans PROB\n  valid_plans ?prob \\<equiv> {as. set as \\<subseteq> ?prob}\n\ngoal (1 subgoal):\n 1. h \\<in> PROB", "by force"], ["", "lemma valid_plan_valid_tail:\n  assumes \"(h # as \\<in> valid_plans PROB)\"\n  shows \"(as \\<in> valid_plans PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "using assms"], ["proof (prove)\nusing this:\n  h # as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "by (simp add: valid_plans_def)\n\n\n\\<comment> \\<open>TODO unwrap simp proof.\\<close>"], ["", "lemma valid_plan_pre_subset_prob_dom_pair:\n  assumes \"as \\<in> valid_plans PROB\"\n  shows \"(\\<forall>a. ListMem a as \\<longrightarrow> fmdom' (fst a) \\<subseteq> (prob_dom PROB))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       ListMem a as \\<longrightarrow>\n       fmdom' (fst a) \\<subseteq> prob_dom PROB", "unfolding valid_plans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       ListMem a as \\<longrightarrow>\n       fmdom' (fst a) \\<subseteq> prob_dom PROB", "using assms"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       ListMem a as \\<longrightarrow>\n       fmdom' (fst a) \\<subseteq> prob_dom PROB", "by (simp add: FDOM_pre_subset_prob_dom_pair ListMem_iff rev_subsetD valid_plans_def)"], ["", "lemma valid_append_valid_suff:\n  assumes \"as1 @ as2 \\<in> (valid_plans PROB)\"\n  shows \"as2 \\<in> (valid_plans PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as2 \\<in> valid_plans PROB", "using assms"], ["proof (prove)\nusing this:\n  as1 @ as2 \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. as2 \\<in> valid_plans PROB", "by (simp add: valid_plans_def)"], ["", "lemma valid_append_valid_pref:\n  assumes \"as1 @ as2 \\<in> (valid_plans PROB)\"\n  shows \"as1 \\<in> (valid_plans PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as1 \\<in> valid_plans PROB", "using assms"], ["proof (prove)\nusing this:\n  as1 @ as2 \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. as1 \\<in> valid_plans PROB", "by (simp add: valid_plans_def)"], ["", "lemma valid_pref_suff_valid_append:\n  assumes \"as1 \\<in> (valid_plans PROB)\" \"as2 \\<in> (valid_plans PROB)\"\n  shows \"(as1 @ as2) \\<in> (valid_plans PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as1 @ as2 \\<in> valid_plans PROB", "using assms"], ["proof (prove)\nusing this:\n  as1 \\<in> valid_plans PROB\n  as2 \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. as1 @ as2 \\<in> valid_plans PROB", "by (simp add: valid_plans_def)\n\n\n\\<comment> \\<open>NOTE showcase (case split seems necessary for MP of IH but the original proof does not need it).\\<close>"], ["", "lemma MEM_statelist_FDOM:\n  fixes PROB h as s0\n  assumes \"s0 \\<in> (valid_states PROB)\" \"as \\<in> (valid_plans PROB)\" \"ListMem h (state_list s0 as)\"\n  shows \"(fmdom' h = fmdom' s0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' h = fmdom' s0", "using assms"], ["proof (prove)\nusing this:\n  s0 \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  ListMem h (state_list s0 as)\n\ngoal (1 subgoal):\n 1. fmdom' h = fmdom' s0", "proof (induction as arbitrary: PROB h s0)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>PROB h s0.\n       \\<lbrakk>s0 \\<in> valid_states PROB; [] \\<in> valid_plans PROB;\n        ListMem h (state_list s0 [])\\<rbrakk>\n       \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<And>a as PROB h s0.\n       \\<lbrakk>\\<And>PROB h s0.\n                   \\<lbrakk>s0 \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB;\n                    ListMem h (state_list s0 as)\\<rbrakk>\n                   \\<Longrightarrow> fmdom' h = fmdom' s0;\n        s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n        ListMem h (state_list s0 (a # as))\\<rbrakk>\n       \\<Longrightarrow> fmdom' h = fmdom' s0", "case Nil"], ["proof (state)\nthis:\n  s0 \\<in> valid_states PROB\n  [] \\<in> valid_plans PROB\n  ListMem h (state_list s0 [])\n\ngoal (2 subgoals):\n 1. \\<And>PROB h s0.\n       \\<lbrakk>s0 \\<in> valid_states PROB; [] \\<in> valid_plans PROB;\n        ListMem h (state_list s0 [])\\<rbrakk>\n       \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<And>a as PROB h s0.\n       \\<lbrakk>\\<And>PROB h s0.\n                   \\<lbrakk>s0 \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB;\n                    ListMem h (state_list s0 as)\\<rbrakk>\n                   \\<Longrightarrow> fmdom' h = fmdom' s0;\n        s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n        ListMem h (state_list s0 (a # as))\\<rbrakk>\n       \\<Longrightarrow> fmdom' h = fmdom' s0", "have \"h = s0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h = s0", "using Nil.prems(3) ListMem_iff"], ["proof (prove)\nusing this:\n  ListMem h (state_list s0 [])\n  ListMem ?x ?xs = (?x \\<in> set ?xs)\n\ngoal (1 subgoal):\n 1. h = s0", "by force"], ["proof (state)\nthis:\n  h = s0\n\ngoal (2 subgoals):\n 1. \\<And>PROB h s0.\n       \\<lbrakk>s0 \\<in> valid_states PROB; [] \\<in> valid_plans PROB;\n        ListMem h (state_list s0 [])\\<rbrakk>\n       \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<And>a as PROB h s0.\n       \\<lbrakk>\\<And>PROB h s0.\n                   \\<lbrakk>s0 \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB;\n                    ListMem h (state_list s0 as)\\<rbrakk>\n                   \\<Longrightarrow> fmdom' h = fmdom' s0;\n        s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n        ListMem h (state_list s0 (a # as))\\<rbrakk>\n       \\<Longrightarrow> fmdom' h = fmdom' s0", "then"], ["proof (chain)\npicking this:\n  h = s0", "show ?case"], ["proof (prove)\nusing this:\n  h = s0\n\ngoal (1 subgoal):\n 1. fmdom' h = fmdom' s0", "by simp"], ["proof (state)\nthis:\n  fmdom' h = fmdom' s0\n\ngoal (1 subgoal):\n 1. \\<And>a as PROB h s0.\n       \\<lbrakk>\\<And>PROB h s0.\n                   \\<lbrakk>s0 \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB;\n                    ListMem h (state_list s0 as)\\<rbrakk>\n                   \\<Longrightarrow> fmdom' h = fmdom' s0;\n        s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n        ListMem h (state_list s0 (a # as))\\<rbrakk>\n       \\<Longrightarrow> fmdom' h = fmdom' s0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as PROB h s0.\n       \\<lbrakk>\\<And>PROB h s0.\n                   \\<lbrakk>s0 \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB;\n                    ListMem h (state_list s0 as)\\<rbrakk>\n                   \\<Longrightarrow> fmdom' h = fmdom' s0;\n        s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n        ListMem h (state_list s0 (a # as))\\<rbrakk>\n       \\<Longrightarrow> fmdom' h = fmdom' s0", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>?s0.0 \\<in> valid_states ?PROB; as \\<in> valid_plans ?PROB;\n   ListMem ?h (state_list ?s0.0 as)\\<rbrakk>\n  \\<Longrightarrow> fmdom' ?h = fmdom' ?s0.0\n  s0 \\<in> valid_states PROB\n  a # as \\<in> valid_plans PROB\n  ListMem h (state_list s0 (a # as))\n\ngoal (1 subgoal):\n 1. \\<And>a as PROB h s0.\n       \\<lbrakk>\\<And>PROB h s0.\n                   \\<lbrakk>s0 \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB;\n                    ListMem h (state_list s0 as)\\<rbrakk>\n                   \\<Longrightarrow> fmdom' h = fmdom' s0;\n        s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n        ListMem h (state_list s0 (a # as))\\<rbrakk>\n       \\<Longrightarrow> fmdom' h = fmdom' s0", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?s0.0 \\<in> valid_states ?PROB; as \\<in> valid_plans ?PROB;\n   ListMem ?h (state_list ?s0.0 as)\\<rbrakk>\n  \\<Longrightarrow> fmdom' ?h = fmdom' ?s0.0\n  s0 \\<in> valid_states PROB\n  a # as \\<in> valid_plans PROB\n  ListMem h (state_list s0 (a # as))", "show ?case\n    \\<comment> \\<open>NOTE This case split seems necessary to be able to infer\n\n          'ListMem h (state\\_list (state\\_succ s0 a) as)'\n\n        which is required in order to apply MP to the induction hypothesis.\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s0.0 \\<in> valid_states ?PROB; as \\<in> valid_plans ?PROB;\n   ListMem ?h (state_list ?s0.0 as)\\<rbrakk>\n  \\<Longrightarrow> fmdom' ?h = fmdom' ?s0.0\n  s0 \\<in> valid_states PROB\n  a # as \\<in> valid_plans PROB\n  ListMem h (state_list s0 (a # as))\n\ngoal (1 subgoal):\n 1. fmdom' h = fmdom' s0", "proof (cases \"h = s0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "case False\n      \\<comment> \\<open>TODO proof steps could be refactored into auxillary lemmas.\\<close>"], ["proof (state)\nthis:\n  h \\<noteq> s0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "{"], ["proof (state)\nthis:\n  h \\<noteq> s0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "have \"a \\<in> PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> PROB", "using Cons.prems(2) valid_plan_valid_head"], ["proof (prove)\nusing this:\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow> ?h \\<in> ?PROB\n\ngoal (1 subgoal):\n 1. a \\<in> PROB", "by fast"], ["proof (state)\nthis:\n  a \\<in> PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "then"], ["proof (chain)\npicking this:\n  a \\<in> PROB", "have \"fmdom' (snd a) \\<subseteq> fmdom' s0\""], ["proof (prove)\nusing this:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s0", "using Cons.prems(1) FDOM_eff_subset_FDOM_valid_states_pair"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  s0 \\<in> valid_states PROB\n  \\<lbrakk>?a \\<in> ?PROB; ?s \\<in> valid_states ?PROB\\<rbrakk>\n  \\<Longrightarrow> fmdom' (snd ?a) \\<subseteq> fmdom' ?s\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s0", "by blast"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> fmdom' s0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<subseteq> fmdom' s0", "have \"fmdom' (state_succ s0 a) = fmdom' s0\""], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> fmdom' s0\n\ngoal (1 subgoal):\n 1. fmdom' (state_succ s0 a) = fmdom' s0", "using FDOM_state_succ[of _ s0] Cons.prems(1) valid_states_def"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> fmdom' s0\n  fmdom' (snd ?a) \\<subseteq> fmdom' s0 \\<Longrightarrow>\n  fmdom' (state_succ s0 ?a) = fmdom' s0\n  s0 \\<in> valid_states PROB\n  valid_states ?prob \\<equiv> {s. fmdom' s = prob_dom ?prob}\n\ngoal (1 subgoal):\n 1. fmdom' (state_succ s0 a) = fmdom' s0", "by presburger"], ["proof (state)\nthis:\n  fmdom' (state_succ s0 a) = fmdom' s0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "}"], ["proof (state)\nthis:\n  fmdom' (state_succ s0 a) = fmdom' s0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "note 1 = this"], ["proof (state)\nthis:\n  fmdom' (state_succ s0 a) = fmdom' s0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "{"], ["proof (state)\nthis:\n  fmdom' (state_succ s0 a) = fmdom' s0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "have \"fmdom' s0 = prob_dom PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' s0 = prob_dom PROB", "using Cons.prems(1) valid_states_def"], ["proof (prove)\nusing this:\n  s0 \\<in> valid_states PROB\n  valid_states ?prob \\<equiv> {s. fmdom' s = prob_dom ?prob}\n\ngoal (1 subgoal):\n 1. fmdom' s0 = prob_dom PROB", "by fast"], ["proof (state)\nthis:\n  fmdom' s0 = prob_dom PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "then"], ["proof (chain)\npicking this:\n  fmdom' s0 = prob_dom PROB", "have \"state_succ s0 a \\<in> valid_states PROB\""], ["proof (prove)\nusing this:\n  fmdom' s0 = prob_dom PROB\n\ngoal (1 subgoal):\n 1. state_succ s0 a \\<in> valid_states PROB", "unfolding valid_states_def"], ["proof (prove)\nusing this:\n  fmdom' s0 = prob_dom PROB\n\ngoal (1 subgoal):\n 1. state_succ s0 a \\<in> {s. fmdom' s = prob_dom PROB}", "using 1"], ["proof (prove)\nusing this:\n  fmdom' s0 = prob_dom PROB\n  fmdom' (state_succ s0 a) = fmdom' s0\n\ngoal (1 subgoal):\n 1. state_succ s0 a \\<in> {s. fmdom' s = prob_dom PROB}", "by force"], ["proof (state)\nthis:\n  state_succ s0 a \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "}"], ["proof (state)\nthis:\n  state_succ s0 a \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "note 2 = this"], ["proof (state)\nthis:\n  state_succ s0 a \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "{"], ["proof (state)\nthis:\n  state_succ s0 a \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "have \"ListMem h (state_list (state_succ s0 a) as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListMem h (state_list (state_succ s0 a) as)", "using Cons.prems(3) False"], ["proof (prove)\nusing this:\n  ListMem h (state_list s0 (a # as))\n  h \\<noteq> s0\n\ngoal (1 subgoal):\n 1. ListMem h (state_list (state_succ s0 a) as)", "by (simp add: ListMem_iff)"], ["proof (state)\nthis:\n  ListMem h (state_list (state_succ s0 a) as)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "}"], ["proof (state)\nthis:\n  ListMem h (state_list (state_succ s0 a) as)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "note 3 = this"], ["proof (state)\nthis:\n  ListMem h (state_list (state_succ s0 a) as)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "{"], ["proof (state)\nthis:\n  ListMem h (state_list (state_succ s0 a) as)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "have \"as \\<in> valid_plans PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "using Cons.prems(2) valid_plan_valid_tail"], ["proof (prove)\nusing this:\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  ?as \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "by fast"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "then"], ["proof (chain)\npicking this:\n  as \\<in> valid_plans PROB", "have \"fmdom' h = fmdom' (state_succ s0 a)\""], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. fmdom' h = fmdom' (state_succ s0 a)", "using 1 2 3 Cons.IH[of \"state_succ s0 a\"]"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  fmdom' (state_succ s0 a) = fmdom' s0\n  state_succ s0 a \\<in> valid_states PROB\n  ListMem h (state_list (state_succ s0 a) as)\n  \\<lbrakk>state_succ s0 a \\<in> valid_states ?PROB;\n   as \\<in> valid_plans ?PROB;\n   ListMem ?h (state_list (state_succ s0 a) as)\\<rbrakk>\n  \\<Longrightarrow> fmdom' ?h = fmdom' (state_succ s0 a)\n\ngoal (1 subgoal):\n 1. fmdom' h = fmdom' (state_succ s0 a)", "by blast"], ["proof (state)\nthis:\n  fmdom' h = fmdom' (state_succ s0 a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "}"], ["proof (state)\nthis:\n  fmdom' h = fmdom' (state_succ s0 a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0\n 2. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h \\<noteq> s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "then"], ["proof (chain)\npicking this:\n  fmdom' h = fmdom' (state_succ s0 a)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' h = fmdom' (state_succ s0 a)\n\ngoal (1 subgoal):\n 1. fmdom' h = fmdom' s0", "using 1"], ["proof (prove)\nusing this:\n  fmdom' h = fmdom' (state_succ s0 a)\n  fmdom' (state_succ s0 a) = fmdom' s0\n\ngoal (1 subgoal):\n 1. fmdom' h = fmdom' s0", "by argo"], ["proof (state)\nthis:\n  fmdom' h = fmdom' s0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s0 PROB h.\n                \\<lbrakk>s0 \\<in> valid_states PROB;\n                 as \\<in> valid_plans PROB;\n                 ListMem h (state_list s0 as)\\<rbrakk>\n                \\<Longrightarrow> fmdom' h = fmdom' s0;\n     s0 \\<in> valid_states PROB; a # as \\<in> valid_plans PROB;\n     ListMem h (state_list s0 (a # as)); h = s0\\<rbrakk>\n    \\<Longrightarrow> fmdom' h = fmdom' s0", "qed simp"], ["proof (state)\nthis:\n  fmdom' h = fmdom' s0\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>TODO unwrap metis proof.\\<close>"], ["", "lemma MEM_statelist_valid_state:\n  fixes PROB h as s0\n  assumes \"s0 \\<in> valid_states PROB\" \"as \\<in> valid_plans PROB\" \"ListMem h (state_list s0 as)\"\n  shows \"(h \\<in> valid_states PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<in> valid_states PROB", "using assms"], ["proof (prove)\nusing this:\n  s0 \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  ListMem h (state_list s0 as)\n\ngoal (1 subgoal):\n 1. h \\<in> valid_states PROB", "by (metis MEM_statelist_FDOM mem_Collect_eq valid_states_def)\n\n\n\\<comment> \\<open>TODO refactor (characterization lemma for 'state\\_succ').\\<close>\n\\<comment> \\<open>TODO unwrap metis proof.\\<close>\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma lemma_1_i:\n  fixes s a PROB\n  assumes \"s \\<in> valid_states PROB\" \"a \\<in> PROB\"\n  shows \"state_succ s a \\<in> valid_states PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s a \\<in> valid_states PROB", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. state_succ s a \\<in> valid_states PROB", "by (metis FDOM_eff_subset_FDOM_valid_states_pair FDOM_state_succ mem_Collect_eq  valid_states_def)\n\n\\<comment> \\<open>TODO unwrap smt proof.\\<close>\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma lemma_1_ii:\n  \"last ` ((#) s ` state_set (state_list (state_succ s a) as))\n  = last ` state_set (state_list (state_succ s a) as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last ` (#) s ` state_set (state_list (state_succ s a) as) =\n    last ` state_set (state_list (state_succ s a) as)", "by (smt NIL_NOTIN_stateset image_cong image_image last_ConsR)"], ["", "lemma lemma_1:\n  fixes as :: \"(('a, 'b) fmap \\<times> ('a, 'b) fmap) list\" and PPROB\n  assumes \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"((last ` (state_set (state_list s as))) \\<subseteq> valid_states PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last ` state_set (state_list s as) \\<subseteq> valid_states PROB", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. last ` state_set (state_list s as) \\<subseteq> valid_states PROB", "proof (induction as arbitrary: s PROB)\n  \\<comment> \\<open>NOTE Base case simplifies to @{term \"{s} \\<subseteq> valid_states PROB\"} which itself follows directly from\n    1st assumption.\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<in> valid_states ?PROB; as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> last ` state_set (state_list ?s as)\n                    \\<subseteq> valid_states ?PROB\n  s \\<in> valid_states PROB\n  a # as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "text \\<open> Split the 'insert' term produced by @{term \"state_set (state_list s (a # as))\"} and proof\n      inclusion in 'valid\\_states PROB' for both parts. \\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<in> valid_states ?PROB; as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> last ` state_set (state_list ?s as)\n                    \\<subseteq> valid_states ?PROB\n  s \\<in> valid_states PROB\n  a # as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "{\n    \\<comment> \\<open>NOTE Inclusion of the first subset follows from the induction premise by simplification.\n      The inclusion of the second subset is shown by applying the induction hypothesis to\n      `state\\_succ s a` and some elementary set simplifications.\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<in> valid_states ?PROB; as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> last ` state_set (state_list ?s as)\n                    \\<subseteq> valid_states ?PROB\n  s \\<in> valid_states PROB\n  a # as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "have \"last [s] \\<in> valid_states PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last [s] \\<in> valid_states PROB", "using Cons.prems(1)"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. last [s] \\<in> valid_states PROB", "by simp"], ["proof (state)\nthis:\n  last [s] \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "moreover"], ["proof (state)\nthis:\n  last [s] \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "{"], ["proof (state)\nthis:\n  last [s] \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "{"], ["proof (state)\nthis:\n  last [s] \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "have \"a \\<in> PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> PROB", "using Cons.prems(2) valid_plan_valid_head"], ["proof (prove)\nusing this:\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow> ?h \\<in> ?PROB\n\ngoal (1 subgoal):\n 1. a \\<in> PROB", "by fast"], ["proof (state)\nthis:\n  a \\<in> PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  a \\<in> PROB", "have \"state_succ s a \\<in> valid_states PROB\""], ["proof (prove)\nusing this:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. state_succ s a \\<in> valid_states PROB", "using Cons.prems(1) lemma_1_i"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  s \\<in> valid_states PROB\n  \\<lbrakk>?s \\<in> valid_states ?PROB; ?a \\<in> ?PROB\\<rbrakk>\n  \\<Longrightarrow> state_succ ?s ?a \\<in> valid_states ?PROB\n\ngoal (1 subgoal):\n 1. state_succ s a \\<in> valid_states PROB", "by blast"], ["proof (state)\nthis:\n  state_succ s a \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "}"], ["proof (state)\nthis:\n  state_succ s a \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "moreover"], ["proof (state)\nthis:\n  state_succ s a \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "have \"as \\<in> valid_plans PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "using Cons.prems(2) valid_plan_valid_tail"], ["proof (prove)\nusing this:\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  ?as \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "by fast"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  as \\<in> valid_plans PROB", "have \"(last ` state_set (state_list (state_succ s a) as)) \\<subseteq> valid_states PROB\""], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. last ` state_set (state_list (state_succ s a) as)\n    \\<subseteq> valid_states PROB", "using  calculation Cons.IH[of \"state_succ s a\"]"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  state_succ s a \\<in> valid_states PROB\n  \\<lbrakk>state_succ s a \\<in> valid_states ?PROB;\n   as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> last ` state_set (state_list (state_succ s a) as)\n                    \\<subseteq> valid_states ?PROB\n\ngoal (1 subgoal):\n 1. last ` state_set (state_list (state_succ s a) as)\n    \\<subseteq> valid_states PROB", "by presburger"], ["proof (state)\nthis:\n  last ` state_set (state_list (state_succ s a) as)\n  \\<subseteq> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  last ` state_set (state_list (state_succ s a) as)\n  \\<subseteq> valid_states PROB", "have \"(last ` ((#) s ` state_set (state_list (state_succ s a) as))) \\<subseteq> valid_states PROB\""], ["proof (prove)\nusing this:\n  last ` state_set (state_list (state_succ s a) as)\n  \\<subseteq> valid_states PROB\n\ngoal (1 subgoal):\n 1. last ` (#) s ` state_set (state_list (state_succ s a) as)\n    \\<subseteq> valid_states PROB", "using lemma_1_ii"], ["proof (prove)\nusing this:\n  last ` state_set (state_list (state_succ s a) as)\n  \\<subseteq> valid_states PROB\n  last ` (#) ?s ` state_set (state_list (state_succ ?s ?a) ?as) =\n  last ` state_set (state_list (state_succ ?s ?a) ?as)\n\ngoal (1 subgoal):\n 1. last ` (#) s ` state_set (state_list (state_succ s a) as)\n    \\<subseteq> valid_states PROB", "by metis"], ["proof (state)\nthis:\n  last ` (#) s ` state_set (state_list (state_succ s a) as)\n  \\<subseteq> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "}"], ["proof (state)\nthis:\n  last ` (#) s ` state_set (state_list (state_succ s a) as)\n  \\<subseteq> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "ultimately"], ["proof (chain)\npicking this:\n  last [s] \\<in> valid_states PROB\n  last ` (#) s ` state_set (state_list (state_succ s a) as)\n  \\<subseteq> valid_states PROB", "have\n      \"(last ` insert [s] ((#) s ` state_set (state_list (state_succ s a) as))) \\<subseteq> valid_states PROB\""], ["proof (prove)\nusing this:\n  last [s] \\<in> valid_states PROB\n  last ` (#) s ` state_set (state_list (state_succ s a) as)\n  \\<subseteq> valid_states PROB\n\ngoal (1 subgoal):\n 1. last ` insert [s] ((#) s ` state_set (state_list (state_succ s a) as))\n    \\<subseteq> valid_states PROB", "by simp"], ["proof (state)\nthis:\n  last ` insert [s] ((#) s ` state_set (state_list (state_succ s a) as))\n  \\<subseteq> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "}"], ["proof (state)\nthis:\n  last ` insert [s] ((#) s ` state_set (state_list (state_succ s a) as))\n  \\<subseteq> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  last ` insert [s] ((#) s ` state_set (state_list (state_succ s a) as))\n  \\<subseteq> valid_states PROB", "show ?case"], ["proof (prove)\nusing this:\n  last ` insert [s] ((#) s ` state_set (state_list (state_succ s a) as))\n  \\<subseteq> valid_states PROB\n\ngoal (1 subgoal):\n 1. last ` state_set (state_list s (a # as)) \\<subseteq> valid_states PROB", "by fastforce"], ["proof (state)\nthis:\n  last ` state_set (state_list s (a # as)) \\<subseteq> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<And>s PROB.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> valid_states PROB", "qed auto\n\n\n\\<comment> \\<open>TODO unwrap metis proof.\\<close>"], ["", "lemma len_in_state_set_le_max_len:\n  fixes as x PROB\n  assumes \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\" \"\\<not>(as = [])\"\n    \"(x \\<in> state_set (state_list s as))\"\n  shows \"(length x \\<le> (Suc (length as)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length x \\<le> Suc (length as)", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  as \\<noteq> []\n  x \\<in> state_set (state_list s as)\n\ngoal (1 subgoal):\n 1. length x \\<le> Suc (length as)", "by (metis LENGTH_state_set Suc_eq_plus1_left add.commute state_list_length_lemma_2)"], ["", "lemma card_state_set_cons:\n  fixes as s h\n  shows \"\n    (card (state_set (state_list s (h # as)))\n    = Suc (card (state_set (state_list (state_succ s h) as))))\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (state_set (state_list s (h # as))) =\n    Suc (card (state_set (state_list (state_succ s h) as)))", "by (metis length_Cons state_list.simps(2) state_set_card)"], ["", "lemma card_state_set:\n  fixes as s\n  shows \"(Suc (length as)) = card (state_set (state_list s as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (length as) = card (state_set (state_list s as))", "by (simp add: state_list_length_lemma_2 state_set_card)"], ["", "lemma neq_mems_state_set_neq_len:\n  fixes as x y s\n  assumes \"x \\<in> state_set (state_list s as)\" \"(y \\<in> state_set (state_list s as))\" \"\\<not>(x = y)\"\n  shows \"\\<not>(length x = length y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length x \\<noteq> length y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length x \\<noteq> length y", "have \"x \\<noteq> []\" \"prefix x (state_list s as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> [] &&& prefix x (state_list s as)", "using assms(1) state_set_thm"], ["proof (prove)\nusing this:\n  x \\<in> state_set (state_list s as)\n  (?s1.0 \\<in> state_set ?s2.0) =\n  (prefix ?s1.0 ?s2.0 \\<and> ?s1.0 \\<noteq> [])\n\ngoal (1 subgoal):\n 1. x \\<noteq> [] &&& prefix x (state_list s as)", "by blast+"], ["proof (state)\nthis:\n  x \\<noteq> []\n  prefix x (state_list s as)\n\ngoal (1 subgoal):\n 1. length x \\<noteq> length y", "moreover"], ["proof (state)\nthis:\n  x \\<noteq> []\n  prefix x (state_list s as)\n\ngoal (1 subgoal):\n 1. length x \\<noteq> length y", "have \"y \\<noteq> []\" \"prefix y (state_list s as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> [] &&& prefix y (state_list s as)", "using assms(2) state_set_thm"], ["proof (prove)\nusing this:\n  y \\<in> state_set (state_list s as)\n  (?s1.0 \\<in> state_set ?s2.0) =\n  (prefix ?s1.0 ?s2.0 \\<and> ?s1.0 \\<noteq> [])\n\ngoal (1 subgoal):\n 1. y \\<noteq> [] &&& prefix y (state_list s as)", "by blast+"], ["proof (state)\nthis:\n  y \\<noteq> []\n  prefix y (state_list s as)\n\ngoal (1 subgoal):\n 1. length x \\<noteq> length y", "ultimately"], ["proof (chain)\npicking this:\n  x \\<noteq> []\n  prefix x (state_list s as)\n  y \\<noteq> []\n  prefix y (state_list s as)", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> []\n  prefix x (state_list s as)\n  y \\<noteq> []\n  prefix y (state_list s as)\n\ngoal (1 subgoal):\n 1. length x \\<noteq> length y", "using assms(3) append_eq_append_conv prefixE"], ["proof (prove)\nusing this:\n  x \\<noteq> []\n  prefix x (state_list s as)\n  y \\<noteq> []\n  prefix y (state_list s as)\n  x \\<noteq> y\n  length ?xs = length ?ys \\<or> length ?us = length ?vs \\<Longrightarrow>\n  (?xs @ ?us = ?ys @ ?vs) = (?xs = ?ys \\<and> ?us = ?vs)\n  \\<lbrakk>prefix ?xs ?ys;\n   \\<And>zs. ?ys = ?xs @ zs \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. length x \\<noteq> length y", "by metis"], ["proof (state)\nthis:\n  length x \\<noteq> length y\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE added definition (imported from pred\\_setScript.sml:1562).\\<close>"], ["", "definition inj :: \"('a \\<Rightarrow> 'b) \\<Rightarrow> 'a set \\<Rightarrow> 'b set \\<Rightarrow> bool\" where\n  \"inj f A B \\<equiv> (\\<forall>x \\<in> A. f x \\<in> B) \\<and> inj_on f A\"\n\n\n\\<comment> \\<open>NOTE added lemma; refactored from `not\\_eq\\_last\\_diff\\_paths`.\\<close>"], ["", "lemma not_eq_last_diff_paths_i:\n  fixes s as PROB\n  assumes \"s \\<in> valid_states PROB\" \"as \\<in> valid_plans PROB\" \"x \\<in> state_set (state_list s as)\"\n  shows \"last x \\<in> valid_states PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last x \\<in> valid_states PROB", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. last x \\<in> valid_states PROB", "have \"last x \\<in> last ` (state_set (state_list s as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last x \\<in> last ` state_set (state_list s as)", "using assms(3)"], ["proof (prove)\nusing this:\n  x \\<in> state_set (state_list s as)\n\ngoal (1 subgoal):\n 1. last x \\<in> last ` state_set (state_list s as)", "by simp"], ["proof (state)\nthis:\n  last x \\<in> last ` state_set (state_list s as)\n\ngoal (1 subgoal):\n 1. last x \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  last x \\<in> last ` state_set (state_list s as)", "show ?thesis"], ["proof (prove)\nusing this:\n  last x \\<in> last ` state_set (state_list s as)\n\ngoal (1 subgoal):\n 1. last x \\<in> valid_states PROB", "using assms(1, 2) lemma_1"], ["proof (prove)\nusing this:\n  last x \\<in> last ` state_set (state_list s as)\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<lbrakk>?s \\<in> valid_states ?PROB; ?as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> last ` state_set (state_list ?s ?as)\n                    \\<subseteq> valid_states ?PROB\n\ngoal (1 subgoal):\n 1. last x \\<in> valid_states PROB", "by blast"], ["proof (state)\nthis:\n  last x \\<in> valid_states PROB\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_eq_last_diff_paths_ii:\n  assumes \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"\\<not>(inj (last) (state_set (state_list s as)) (valid_states PROB))\"\n  shows \"\\<exists>l1. \\<exists>l2.\n    l1 \\<in> state_set (state_list s as)\n    \\<and> l2 \\<in> state_set (state_list s as)\n    \\<and> last l1 = last l2\n    \\<and> l1 \\<noteq> l2\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l1 l2.\n       l1 \\<in> state_set (state_list s as) \\<and>\n       l2 \\<in> state_set (state_list s as) \\<and>\n       last l1 = last l2 \\<and> l1 \\<noteq> l2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l1 l2.\n       l1 \\<in> state_set (state_list s as) \\<and>\n       l2 \\<in> state_set (state_list s as) \\<and>\n       last l1 = last l2 \\<and> l1 \\<noteq> l2", "let ?S=\"state_set (state_list s as)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l1 l2.\n       l1 \\<in> state_set (state_list s as) \\<and>\n       l2 \\<in> state_set (state_list s as) \\<and>\n       last l1 = last l2 \\<and> l1 \\<noteq> l2", "have 1: \"\\<not>(\\<forall>x\\<in>?S. last x \\<in> valid_states PROB) = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>state_set (state_list s as).\n        last x \\<in> valid_states PROB) \\<noteq>\n    False", "using assms(1, 2) not_eq_last_diff_paths_i"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<lbrakk>?s \\<in> valid_states ?PROB; ?as \\<in> valid_plans ?PROB;\n   ?x \\<in> state_set (state_list ?s ?as)\\<rbrakk>\n  \\<Longrightarrow> last ?x \\<in> valid_states ?PROB\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>state_set (state_list s as).\n        last x \\<in> valid_states PROB) \\<noteq>\n    False", "by blast"], ["proof (state)\nthis:\n  (\\<forall>x\\<in>state_set (state_list s as).\n      last x \\<in> valid_states PROB) \\<noteq>\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>l1 l2.\n       l1 \\<in> state_set (state_list s as) \\<and>\n       l2 \\<in> state_set (state_list s as) \\<and>\n       last l1 = last l2 \\<and> l1 \\<noteq> l2", "{"], ["proof (state)\nthis:\n  (\\<forall>x\\<in>state_set (state_list s as).\n      last x \\<in> valid_states PROB) \\<noteq>\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>l1 l2.\n       l1 \\<in> state_set (state_list s as) \\<and>\n       l2 \\<in> state_set (state_list s as) \\<and>\n       last l1 = last l2 \\<and> l1 \\<noteq> l2", "have\n      \"(\\<not>(inj (last) ?S (valid_states PROB))) = (\\<not>((\\<forall>x\\<in>?S. \\<forall>y\\<in>?S. last x = last y \\<longrightarrow> x = y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> FactoredSystem.inj last (state_set (state_list s as))\n             (valid_states PROB)) =\n    (\\<not> (\\<forall>x\\<in>state_set (state_list s as).\n                \\<forall>y\\<in>state_set (state_list s as).\n                   last x = last y \\<longrightarrow> x = y))", "unfolding inj_def inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> ((\\<forall>x\\<in>state_set (state_list s as).\n                 last x \\<in> valid_states PROB) \\<and>\n             (\\<forall>x\\<in>state_set (state_list s as).\n                 \\<forall>y\\<in>state_set (state_list s as).\n                    last x = last y \\<longrightarrow> x = y))) =\n    (\\<not> (\\<forall>x\\<in>state_set (state_list s as).\n                \\<forall>y\\<in>state_set (state_list s as).\n                   last x = last y \\<longrightarrow> x = y))", "using 1"], ["proof (prove)\nusing this:\n  (\\<forall>x\\<in>state_set (state_list s as).\n      last x \\<in> valid_states PROB) \\<noteq>\n  False\n\ngoal (1 subgoal):\n 1. (\\<not> ((\\<forall>x\\<in>state_set (state_list s as).\n                 last x \\<in> valid_states PROB) \\<and>\n             (\\<forall>x\\<in>state_set (state_list s as).\n                 \\<forall>y\\<in>state_set (state_list s as).\n                    last x = last y \\<longrightarrow> x = y))) =\n    (\\<not> (\\<forall>x\\<in>state_set (state_list s as).\n                \\<forall>y\\<in>state_set (state_list s as).\n                   last x = last y \\<longrightarrow> x = y))", "by blast"], ["proof (state)\nthis:\n  (\\<not> FactoredSystem.inj last (state_set (state_list s as))\n           (valid_states PROB)) =\n  (\\<not> (\\<forall>x\\<in>state_set (state_list s as).\n              \\<forall>y\\<in>state_set (state_list s as).\n                 last x = last y \\<longrightarrow> x = y))\n\ngoal (1 subgoal):\n 1. \\<exists>l1 l2.\n       l1 \\<in> state_set (state_list s as) \\<and>\n       l2 \\<in> state_set (state_list s as) \\<and>\n       last l1 = last l2 \\<and> l1 \\<noteq> l2", "then"], ["proof (chain)\npicking this:\n  (\\<not> FactoredSystem.inj last (state_set (state_list s as))\n           (valid_states PROB)) =\n  (\\<not> (\\<forall>x\\<in>state_set (state_list s as).\n              \\<forall>y\\<in>state_set (state_list s as).\n                 last x = last y \\<longrightarrow> x = y))", "have \"\n        (\\<not>(inj (last) ?S (valid_states PROB)))\n        = (\\<exists>x. \\<exists>y. x\\<in>?S \\<and> y\\<in>?S \\<and> last x = last y \\<and> x \\<noteq> y)\n      \""], ["proof (prove)\nusing this:\n  (\\<not> FactoredSystem.inj last (state_set (state_list s as))\n           (valid_states PROB)) =\n  (\\<not> (\\<forall>x\\<in>state_set (state_list s as).\n              \\<forall>y\\<in>state_set (state_list s as).\n                 last x = last y \\<longrightarrow> x = y))\n\ngoal (1 subgoal):\n 1. (\\<not> FactoredSystem.inj last (state_set (state_list s as))\n             (valid_states PROB)) =\n    (\\<exists>x y.\n        x \\<in> state_set (state_list s as) \\<and>\n        y \\<in> state_set (state_list s as) \\<and>\n        last x = last y \\<and> x \\<noteq> y)", "using assms(3)"], ["proof (prove)\nusing this:\n  (\\<not> FactoredSystem.inj last (state_set (state_list s as))\n           (valid_states PROB)) =\n  (\\<not> (\\<forall>x\\<in>state_set (state_list s as).\n              \\<forall>y\\<in>state_set (state_list s as).\n                 last x = last y \\<longrightarrow> x = y))\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (valid_states PROB)\n\ngoal (1 subgoal):\n 1. (\\<not> FactoredSystem.inj last (state_set (state_list s as))\n             (valid_states PROB)) =\n    (\\<exists>x y.\n        x \\<in> state_set (state_list s as) \\<and>\n        y \\<in> state_set (state_list s as) \\<and>\n        last x = last y \\<and> x \\<noteq> y)", "by blast"], ["proof (state)\nthis:\n  (\\<not> FactoredSystem.inj last (state_set (state_list s as))\n           (valid_states PROB)) =\n  (\\<exists>x y.\n      x \\<in> state_set (state_list s as) \\<and>\n      y \\<in> state_set (state_list s as) \\<and>\n      last x = last y \\<and> x \\<noteq> y)\n\ngoal (1 subgoal):\n 1. \\<exists>l1 l2.\n       l1 \\<in> state_set (state_list s as) \\<and>\n       l2 \\<in> state_set (state_list s as) \\<and>\n       last l1 = last l2 \\<and> l1 \\<noteq> l2", "}"], ["proof (state)\nthis:\n  (\\<not> FactoredSystem.inj last (state_set (state_list s as))\n           (valid_states PROB)) =\n  (\\<exists>x y.\n      x \\<in> state_set (state_list s as) \\<and>\n      y \\<in> state_set (state_list s as) \\<and>\n      last x = last y \\<and> x \\<noteq> y)\n\ngoal (1 subgoal):\n 1. \\<exists>l1 l2.\n       l1 \\<in> state_set (state_list s as) \\<and>\n       l2 \\<in> state_set (state_list s as) \\<and>\n       last l1 = last l2 \\<and> l1 \\<noteq> l2", "then"], ["proof (chain)\npicking this:\n  (\\<not> FactoredSystem.inj last (state_set (state_list s as))\n           (valid_states PROB)) =\n  (\\<exists>x y.\n      x \\<in> state_set (state_list s as) \\<and>\n      y \\<in> state_set (state_list s as) \\<and>\n      last x = last y \\<and> x \\<noteq> y)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<not> FactoredSystem.inj last (state_set (state_list s as))\n           (valid_states PROB)) =\n  (\\<exists>x y.\n      x \\<in> state_set (state_list s as) \\<and>\n      y \\<in> state_set (state_list s as) \\<and>\n      last x = last y \\<and> x \\<noteq> y)\n\ngoal (1 subgoal):\n 1. \\<exists>l1 l2.\n       l1 \\<in> state_set (state_list s as) \\<and>\n       l2 \\<in> state_set (state_list s as) \\<and>\n       last l1 = last l2 \\<and> l1 \\<noteq> l2", "using assms(3)"], ["proof (prove)\nusing this:\n  (\\<not> FactoredSystem.inj last (state_set (state_list s as))\n           (valid_states PROB)) =\n  (\\<exists>x y.\n      x \\<in> state_set (state_list s as) \\<and>\n      y \\<in> state_set (state_list s as) \\<and>\n      last x = last y \\<and> x \\<noteq> y)\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (valid_states PROB)\n\ngoal (1 subgoal):\n 1. \\<exists>l1 l2.\n       l1 \\<in> state_set (state_list s as) \\<and>\n       l2 \\<in> state_set (state_list s as) \\<and>\n       last l1 = last l2 \\<and> l1 \\<noteq> l2", "by blast"], ["proof (state)\nthis:\n  \\<exists>l1 l2.\n     l1 \\<in> state_set (state_list s as) \\<and>\n     l2 \\<in> state_set (state_list s as) \\<and>\n     last l1 = last l2 \\<and> l1 \\<noteq> l2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_eq_last_diff_paths:\n  fixes as PROB s\n  assumes \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"\\<not>(inj (last) (state_set (state_list s as)) (valid_states PROB))\"\n  shows \"(\\<exists>slist_1 slist_2.\n    (slist_1 \\<in> state_set (state_list s as))\n    \\<and> (slist_2 \\<in> state_set (state_list s as))\n    \\<and> ((last slist_1) = (last slist_2))\n    \\<and> \\<not>(length slist_1 = length slist_2))\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "obtain l1 l2 where \"\n      l1 \\<in> state_set (state_list s as)\n      \\<and> l2 \\<in> state_set (state_list s as)\n      \\<and> last l1 = last l2\n      \\<and> l1 \\<noteq> l2\n    \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l1 l2.\n        l1 \\<in> state_set (state_list s as) \\<and>\n        l2 \\<in> state_set (state_list s as) \\<and>\n        last l1 = last l2 \\<and> l1 \\<noteq> l2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(1, 2, 3) not_eq_last_diff_paths_ii"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (valid_states PROB)\n  \\<lbrakk>?s \\<in> valid_states ?PROB; ?as \\<in> valid_plans ?PROB;\n   \\<not> FactoredSystem.inj last (state_set (state_list ?s ?as))\n           (valid_states ?PROB)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l1 l2.\n                       l1 \\<in> state_set (state_list ?s ?as) \\<and>\n                       l2 \\<in> state_set (state_list ?s ?as) \\<and>\n                       last l1 = last l2 \\<and> l1 \\<noteq> l2\n\ngoal (1 subgoal):\n 1. (\\<And>l1 l2.\n        l1 \\<in> state_set (state_list s as) \\<and>\n        l2 \\<in> state_set (state_list s as) \\<and>\n        last l1 = last l2 \\<and> l1 \\<noteq> l2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l1 \\<in> state_set (state_list s as) \\<and>\n  l2 \\<in> state_set (state_list s as) \\<and>\n  last l1 = last l2 \\<and> l1 \\<noteq> l2\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "then"], ["proof (chain)\npicking this:\n  l1 \\<in> state_set (state_list s as) \\<and>\n  l2 \\<in> state_set (state_list s as) \\<and>\n  last l1 = last l2 \\<and> l1 \\<noteq> l2", "show ?thesis"], ["proof (prove)\nusing this:\n  l1 \\<in> state_set (state_list s as) \\<and>\n  l2 \\<in> state_set (state_list s as) \\<and>\n  last l1 = last l2 \\<and> l1 \\<noteq> l2\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "using neq_mems_state_set_neq_len"], ["proof (prove)\nusing this:\n  l1 \\<in> state_set (state_list s as) \\<and>\n  l2 \\<in> state_set (state_list s as) \\<and>\n  last l1 = last l2 \\<and> l1 \\<noteq> l2\n  \\<lbrakk>?x \\<in> state_set (state_list ?s ?as);\n   ?y \\<in> state_set (state_list ?s ?as); ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> length ?x \\<noteq> length ?y\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "by blast"], ["proof (state)\nthis:\n  \\<exists>slist_1 slist_2.\n     slist_1 \\<in> state_set (state_list s as) \\<and>\n     slist_2 \\<in> state_set (state_list s as) \\<and>\n     last slist_1 = last slist_2 \\<and>\n     length slist_1 \\<noteq> length slist_2\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE this lemma was removed due to being redundant and being shadowed later on:\n\n  lemma empty\\_list\\_nin\\_state\\_set\\<close>"], ["", "lemma nempty_sl_in_state_set:\n  fixes sl\n  assumes \"sl \\<noteq> []\"\n  shows \"sl \\<in> state_set sl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sl \\<in> state_set sl", "using assms state_set_thm"], ["proof (prove)\nusing this:\n  sl \\<noteq> []\n  (?s1.0 \\<in> state_set ?s2.0) =\n  (prefix ?s1.0 ?s2.0 \\<and> ?s1.0 \\<noteq> [])\n\ngoal (1 subgoal):\n 1. sl \\<in> state_set sl", "by auto"], ["", "lemma empty_list_nin_state_set:\n  fixes h slist as\n  assumes \"(h # slist) \\<in> state_set (state_list s as)\"\n  shows \"(h = s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h = s", "using assms"], ["proof (prove)\nusing this:\n  h # slist \\<in> state_set (state_list s as)\n\ngoal (1 subgoal):\n 1. h = s", "by (induction as) auto"], ["", "lemma cons_in_state_set_2:\n  fixes s slist h t\n  assumes \"(slist \\<noteq> [])\" \"((s # slist) \\<in> state_set (state_list s (h # t)))\"\n  shows \"(slist \\<in> state_set (state_list (state_succ s h) t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. slist \\<in> state_set (state_list (state_succ s h) t)", "using assms"], ["proof (prove)\nusing this:\n  slist \\<noteq> []\n  s # slist \\<in> state_set (state_list s (h # t))\n\ngoal (1 subgoal):\n 1. slist \\<in> state_set (state_list (state_succ s h) t)", "by (induction slist) auto\n\n\n\\<comment> \\<open>TODO move up and replace 'FactoredSystem.lemma\\_1\\_i'?\\<close>"], ["", "lemma valid_action_valid_succ:\n  assumes \"h \\<in> PROB\" \"s \\<in> valid_states PROB\"\n  shows \"(state_succ s h) \\<in> valid_states PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s h \\<in> valid_states PROB", "using assms lemma_1_i"], ["proof (prove)\nusing this:\n  h \\<in> PROB\n  s \\<in> valid_states PROB\n  \\<lbrakk>?s \\<in> valid_states ?PROB; ?a \\<in> ?PROB\\<rbrakk>\n  \\<Longrightarrow> state_succ ?s ?a \\<in> valid_states ?PROB\n\ngoal (1 subgoal):\n 1. state_succ s h \\<in> valid_states PROB", "by blast"], ["", "lemma in_state_set_imp_eq_exec_prefix:\n  fixes slist as PROB s\n  assumes \"(as \\<noteq> [])\" \"(slist \\<noteq> [])\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"(slist \\<in> state_set (state_list s as))\"\n  shows\n    \"(\\<exists>as'. (prefix as' as) \\<and> (exec_plan s as' = last slist) \\<and> (length slist = Suc (length as')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       prefix as' as \\<and>\n       exec_plan s as' = last slist \\<and> length slist = Suc (length as')", "using assms"], ["proof (prove)\nusing this:\n  as \\<noteq> []\n  slist \\<noteq> []\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  slist \\<in> state_set (state_list s as)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       prefix as' as \\<and>\n       exec_plan s as' = last slist \\<and> length slist = Suc (length as')", "proof (induction slist arbitrary: as s PROB)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>as s PROB.\n       \\<lbrakk>as \\<noteq> []; [] \\<noteq> []; s \\<in> valid_states PROB;\n        as \\<in> valid_plans PROB;\n        [] \\<in> state_set (state_list s as)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last [] \\<and>\n                            length [] = Suc (length as')\n 2. \\<And>a slist as s PROB.\n       \\<lbrakk>\\<And>as s PROB.\n                   \\<lbrakk>as \\<noteq> []; slist \\<noteq> [];\n                    s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n                    slist \\<in> state_set (state_list s as)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>as'.\n  prefix as' as \\<and>\n  exec_plan s as' = last slist \\<and> length slist = Suc (length as');\n        as \\<noteq> []; a # slist \\<noteq> []; s \\<in> valid_states PROB;\n        as \\<in> valid_plans PROB;\n        a # slist \\<in> state_set (state_list s as)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "case cons_1: (Cons a slist)"], ["proof (state)\nthis:\n  \\<lbrakk>?as \\<noteq> []; slist \\<noteq> []; ?s \\<in> valid_states ?PROB;\n   ?as \\<in> valid_plans ?PROB;\n   slist \\<in> state_set (state_list ?s ?as)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as'.\n                       prefix as' ?as \\<and>\n                       exec_plan ?s as' = last slist \\<and>\n                       length slist = Suc (length as')\n  as \\<noteq> []\n  a # slist \\<noteq> []\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  a # slist \\<in> state_set (state_list s as)\n\ngoal (2 subgoals):\n 1. \\<And>as s PROB.\n       \\<lbrakk>as \\<noteq> []; [] \\<noteq> []; s \\<in> valid_states PROB;\n        as \\<in> valid_plans PROB;\n        [] \\<in> state_set (state_list s as)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last [] \\<and>\n                            length [] = Suc (length as')\n 2. \\<And>a slist as s PROB.\n       \\<lbrakk>\\<And>as s PROB.\n                   \\<lbrakk>as \\<noteq> []; slist \\<noteq> [];\n                    s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n                    slist \\<in> state_set (state_list s as)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>as'.\n  prefix as' as \\<and>\n  exec_plan s as' = last slist \\<and> length slist = Suc (length as');\n        as \\<noteq> []; a # slist \\<noteq> []; s \\<in> valid_states PROB;\n        as \\<in> valid_plans PROB;\n        a # slist \\<in> state_set (state_list s as)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "have 1: \"s # slist \\<in> state_set (state_list s as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s # slist \\<in> state_set (state_list s as)", "using cons_1.prems(5) empty_list_nin_state_set"], ["proof (prove)\nusing this:\n  a # slist \\<in> state_set (state_list s as)\n  ?h # ?slist \\<in> state_set (state_list ?s ?as) \\<Longrightarrow> ?h = ?s\n\ngoal (1 subgoal):\n 1. s # slist \\<in> state_set (state_list s as)", "by auto"], ["proof (state)\nthis:\n  s # slist \\<in> state_set (state_list s as)\n\ngoal (2 subgoals):\n 1. \\<And>as s PROB.\n       \\<lbrakk>as \\<noteq> []; [] \\<noteq> []; s \\<in> valid_states PROB;\n        as \\<in> valid_plans PROB;\n        [] \\<in> state_set (state_list s as)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last [] \\<and>\n                            length [] = Suc (length as')\n 2. \\<And>a slist as s PROB.\n       \\<lbrakk>\\<And>as s PROB.\n                   \\<lbrakk>as \\<noteq> []; slist \\<noteq> [];\n                    s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n                    slist \\<in> state_set (state_list s as)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>as'.\n  prefix as' as \\<and>\n  exec_plan s as' = last slist \\<and> length slist = Suc (length as');\n        as \\<noteq> []; a # slist \\<noteq> []; s \\<in> valid_states PROB;\n        as \\<in> valid_plans PROB;\n        a # slist \\<in> state_set (state_list s as)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "then"], ["proof (chain)\npicking this:\n  s # slist \\<in> state_set (state_list s as)", "show ?case"], ["proof (prove)\nusing this:\n  s # slist \\<in> state_set (state_list s as)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       prefix as' as \\<and>\n       exec_plan s as' = last (a # slist) \\<and>\n       length (a # slist) = Suc (length as')", "using cons_1"], ["proof (prove)\nusing this:\n  s # slist \\<in> state_set (state_list s as)\n  \\<lbrakk>?as \\<noteq> []; slist \\<noteq> []; ?s \\<in> valid_states ?PROB;\n   ?as \\<in> valid_plans ?PROB;\n   slist \\<in> state_set (state_list ?s ?as)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as'.\n                       prefix as' ?as \\<and>\n                       exec_plan ?s as' = last slist \\<and>\n                       length slist = Suc (length as')\n  as \\<noteq> []\n  a # slist \\<noteq> []\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  a # slist \\<in> state_set (state_list s as)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       prefix as' as \\<and>\n       exec_plan s as' = last (a # slist) \\<and>\n       length (a # slist) = Suc (length as')", "proof (cases as)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>s # slist \\<in> state_set (state_list s as);\n     \\<And>as s PROB.\n        \\<lbrakk>as \\<noteq> []; slist \\<noteq> [];\n         s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n         slist \\<in> state_set (state_list s as)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>as'.\n                             prefix as' as \\<and>\n                             exec_plan s as' = last slist \\<and>\n                             length slist = Suc (length as');\n     as \\<noteq> []; a # slist \\<noteq> []; s \\<in> valid_states PROB;\n     as \\<in> valid_plans PROB; a # slist \\<in> state_set (state_list s as);\n     as = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as'.\n                         prefix as' as \\<and>\n                         exec_plan s as' = last (a # slist) \\<and>\n                         length (a # slist) = Suc (length as')\n 2. \\<And>aa list.\n       \\<lbrakk>s # slist \\<in> state_set (state_list s as);\n        \\<And>as s PROB.\n           \\<lbrakk>as \\<noteq> []; slist \\<noteq> [];\n            s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n            slist \\<in> state_set (state_list s as)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>as'.\n                                prefix as' as \\<and>\n                                exec_plan s as' = last slist \\<and>\n                                length slist = Suc (length as');\n        as \\<noteq> []; a # slist \\<noteq> []; s \\<in> valid_states PROB;\n        as \\<in> valid_plans PROB;\n        a # slist \\<in> state_set (state_list s as); as = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "case cons_2: (Cons a' R\\<^sub>a\\<^sub>s)"], ["proof (state)\nthis:\n  as = a' # R\\<^sub>a\\<^sub>s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s # slist \\<in> state_set (state_list s as);\n     \\<And>as s PROB.\n        \\<lbrakk>as \\<noteq> []; slist \\<noteq> [];\n         s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n         slist \\<in> state_set (state_list s as)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>as'.\n                             prefix as' as \\<and>\n                             exec_plan s as' = last slist \\<and>\n                             length slist = Suc (length as');\n     as \\<noteq> []; a # slist \\<noteq> []; s \\<in> valid_states PROB;\n     as \\<in> valid_plans PROB; a # slist \\<in> state_set (state_list s as);\n     as = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as'.\n                         prefix as' as \\<and>\n                         exec_plan s as' = last (a # slist) \\<and>\n                         length (a # slist) = Suc (length as')\n 2. \\<And>aa list.\n       \\<lbrakk>s # slist \\<in> state_set (state_list s as);\n        \\<And>as s PROB.\n           \\<lbrakk>as \\<noteq> []; slist \\<noteq> [];\n            s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n            slist \\<in> state_set (state_list s as)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>as'.\n                                prefix as' as \\<and>\n                                exec_plan s as' = last slist \\<and>\n                                length slist = Suc (length as');\n        as \\<noteq> []; a # slist \\<noteq> []; s \\<in> valid_states PROB;\n        as \\<in> valid_plans PROB;\n        a # slist \\<in> state_set (state_list s as); as = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "then"], ["proof (chain)\npicking this:\n  as = a' # R\\<^sub>a\\<^sub>s", "have a: \"state_succ s a' \\<in> valid_states PROB\""], ["proof (prove)\nusing this:\n  as = a' # R\\<^sub>a\\<^sub>s\n\ngoal (1 subgoal):\n 1. state_succ s a' \\<in> valid_states PROB", "using cons_1.prems(3, 4) valid_action_valid_succ valid_plan_valid_head"], ["proof (prove)\nusing this:\n  as = a' # R\\<^sub>a\\<^sub>s\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<lbrakk>?h \\<in> ?PROB; ?s \\<in> valid_states ?PROB\\<rbrakk>\n  \\<Longrightarrow> state_succ ?s ?h \\<in> valid_states ?PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow> ?h \\<in> ?PROB\n\ngoal (1 subgoal):\n 1. state_succ s a' \\<in> valid_states PROB", "by metis"], ["proof (state)\nthis:\n  state_succ s a' \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s # slist \\<in> state_set (state_list s as);\n     \\<And>as s PROB.\n        \\<lbrakk>as \\<noteq> []; slist \\<noteq> [];\n         s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n         slist \\<in> state_set (state_list s as)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>as'.\n                             prefix as' as \\<and>\n                             exec_plan s as' = last slist \\<and>\n                             length slist = Suc (length as');\n     as \\<noteq> []; a # slist \\<noteq> []; s \\<in> valid_states PROB;\n     as \\<in> valid_plans PROB; a # slist \\<in> state_set (state_list s as);\n     as = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as'.\n                         prefix as' as \\<and>\n                         exec_plan s as' = last (a # slist) \\<and>\n                         length (a # slist) = Suc (length as')\n 2. \\<And>aa list.\n       \\<lbrakk>s # slist \\<in> state_set (state_list s as);\n        \\<And>as s PROB.\n           \\<lbrakk>as \\<noteq> []; slist \\<noteq> [];\n            s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n            slist \\<in> state_set (state_list s as)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>as'.\n                                prefix as' as \\<and>\n                                exec_plan s as' = last slist \\<and>\n                                length slist = Suc (length as');\n        as \\<noteq> []; a # slist \\<noteq> []; s \\<in> valid_states PROB;\n        as \\<in> valid_plans PROB;\n        a # slist \\<in> state_set (state_list s as); as = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "then"], ["proof (chain)\npicking this:\n  state_succ s a' \\<in> valid_states PROB", "have b: \"R\\<^sub>a\\<^sub>s \\<in> valid_plans PROB\""], ["proof (prove)\nusing this:\n  state_succ s a' \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. R\\<^sub>a\\<^sub>s \\<in> valid_plans PROB", "using cons_1.prems(4) cons_2 valid_plan_valid_tail"], ["proof (prove)\nusing this:\n  state_succ s a' \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  as = a' # R\\<^sub>a\\<^sub>s\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  ?as \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. R\\<^sub>a\\<^sub>s \\<in> valid_plans PROB", "by fast"], ["proof (state)\nthis:\n  R\\<^sub>a\\<^sub>s \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s # slist \\<in> state_set (state_list s as);\n     \\<And>as s PROB.\n        \\<lbrakk>as \\<noteq> []; slist \\<noteq> [];\n         s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n         slist \\<in> state_set (state_list s as)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>as'.\n                             prefix as' as \\<and>\n                             exec_plan s as' = last slist \\<and>\n                             length slist = Suc (length as');\n     as \\<noteq> []; a # slist \\<noteq> []; s \\<in> valid_states PROB;\n     as \\<in> valid_plans PROB; a # slist \\<in> state_set (state_list s as);\n     as = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as'.\n                         prefix as' as \\<and>\n                         exec_plan s as' = last (a # slist) \\<and>\n                         length (a # slist) = Suc (length as')\n 2. \\<And>aa list.\n       \\<lbrakk>s # slist \\<in> state_set (state_list s as);\n        \\<And>as s PROB.\n           \\<lbrakk>as \\<noteq> []; slist \\<noteq> [];\n            s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n            slist \\<in> state_set (state_list s as)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>as'.\n                                prefix as' as \\<and>\n                                exec_plan s as' = last slist \\<and>\n                                length slist = Suc (length as');\n        as \\<noteq> []; a # slist \\<noteq> []; s \\<in> valid_states PROB;\n        as \\<in> valid_plans PROB;\n        a # slist \\<in> state_set (state_list s as); as = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "then"], ["proof (chain)\npicking this:\n  R\\<^sub>a\\<^sub>s \\<in> valid_plans PROB", "show ?thesis"], ["proof (prove)\nusing this:\n  R\\<^sub>a\\<^sub>s \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       prefix as' as \\<and>\n       exec_plan s as' = last (a # slist) \\<and>\n       length (a # slist) = Suc (length as')", "proof (cases slist)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>R\\<^sub>a\\<^sub>s \\<in> valid_plans PROB; slist = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as'.\n                         prefix as' as \\<and>\n                         exec_plan s as' = last (a # slist) \\<and>\n                         length (a # slist) = Suc (length as')\n 2. \\<And>aa list.\n       \\<lbrakk>R\\<^sub>a\\<^sub>s \\<in> valid_plans PROB;\n        slist = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "case Nil"], ["proof (state)\nthis:\n  slist = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>R\\<^sub>a\\<^sub>s \\<in> valid_plans PROB; slist = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as'.\n                         prefix as' as \\<and>\n                         exec_plan s as' = last (a # slist) \\<and>\n                         length (a # slist) = Suc (length as')\n 2. \\<And>aa list.\n       \\<lbrakk>R\\<^sub>a\\<^sub>s \\<in> valid_plans PROB;\n        slist = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "then"], ["proof (chain)\npicking this:\n  slist = []", "show ?thesis"], ["proof (prove)\nusing this:\n  slist = []\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       prefix as' as \\<and>\n       exec_plan s as' = last (a # slist) \\<and>\n       length (a # slist) = Suc (length as')", "using cons_1.prems(5) empty_list_nin_state_set"], ["proof (prove)\nusing this:\n  slist = []\n  a # slist \\<in> state_set (state_list s as)\n  ?h # ?slist \\<in> state_set (state_list ?s ?as) \\<Longrightarrow> ?h = ?s\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       prefix as' as \\<and>\n       exec_plan s as' = last (a # slist) \\<and>\n       length (a # slist) = Suc (length as')", "by auto"], ["proof (state)\nthis:\n  \\<exists>as'.\n     prefix as' as \\<and>\n     exec_plan s as' = last (a # slist) \\<and>\n     length (a # slist) = Suc (length as')\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>R\\<^sub>a\\<^sub>s \\<in> valid_plans PROB;\n        slist = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>R\\<^sub>a\\<^sub>s \\<in> valid_plans PROB;\n        slist = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "case cons_3: (Cons a'' R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t)"], ["proof (state)\nthis:\n  slist = a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>R\\<^sub>a\\<^sub>s \\<in> valid_plans PROB;\n        slist = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "then"], ["proof (chain)\npicking this:\n  slist = a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t", "have i: \"a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t \\<in> state_set (state_list (state_succ s a') R\\<^sub>a\\<^sub>s)\""], ["proof (prove)\nusing this:\n  slist = a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n\ngoal (1 subgoal):\n 1. a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n    \\<in> state_set (state_list (state_succ s a') R\\<^sub>a\\<^sub>s)", "using 1 cons_2 cons_in_state_set_2"], ["proof (prove)\nusing this:\n  slist = a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n  s # slist \\<in> state_set (state_list s as)\n  as = a' # R\\<^sub>a\\<^sub>s\n  \\<lbrakk>?slist \\<noteq> [];\n   ?s # ?slist \\<in> state_set (state_list ?s (?h # ?t))\\<rbrakk>\n  \\<Longrightarrow> ?slist\n                    \\<in> state_set (state_list (state_succ ?s ?h) ?t)\n\ngoal (1 subgoal):\n 1. a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n    \\<in> state_set (state_list (state_succ s a') R\\<^sub>a\\<^sub>s)", "by blast"], ["proof (state)\nthis:\n  a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n  \\<in> state_set (state_list (state_succ s a') R\\<^sub>a\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>R\\<^sub>a\\<^sub>s \\<in> valid_plans PROB;\n        slist = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "then"], ["proof (chain)\npicking this:\n  a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n  \\<in> state_set (state_list (state_succ s a') R\\<^sub>a\\<^sub>s)", "show ?thesis"], ["proof (prove)\nusing this:\n  a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n  \\<in> state_set (state_list (state_succ s a') R\\<^sub>a\\<^sub>s)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       prefix as' as \\<and>\n       exec_plan s as' = last (a # slist) \\<and>\n       length (a # slist) = Suc (length as')", "proof (cases R\\<^sub>a\\<^sub>s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n             \\<in> state_set\n                    (state_list (state_succ s a') R\\<^sub>a\\<^sub>s);\n     R\\<^sub>a\\<^sub>s = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as'.\n                         prefix as' as \\<and>\n                         exec_plan s as' = last (a # slist) \\<and>\n                         length (a # slist) = Suc (length as')\n 2. \\<And>aa list.\n       \\<lbrakk>a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n                \\<in> state_set\n                       (state_list (state_succ s a') R\\<^sub>a\\<^sub>s);\n        R\\<^sub>a\\<^sub>s = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "case Nil"], ["proof (state)\nthis:\n  R\\<^sub>a\\<^sub>s = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n             \\<in> state_set\n                    (state_list (state_succ s a') R\\<^sub>a\\<^sub>s);\n     R\\<^sub>a\\<^sub>s = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as'.\n                         prefix as' as \\<and>\n                         exec_plan s as' = last (a # slist) \\<and>\n                         length (a # slist) = Suc (length as')\n 2. \\<And>aa list.\n       \\<lbrakk>a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n                \\<in> state_set\n                       (state_list (state_succ s a') R\\<^sub>a\\<^sub>s);\n        R\\<^sub>a\\<^sub>s = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "then"], ["proof (chain)\npicking this:\n  R\\<^sub>a\\<^sub>s = []", "show ?thesis"], ["proof (prove)\nusing this:\n  R\\<^sub>a\\<^sub>s = []\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       prefix as' as \\<and>\n       exec_plan s as' = last (a # slist) \\<and>\n       length (a # slist) = Suc (length as')", "using i cons_2 cons_3"], ["proof (prove)\nusing this:\n  R\\<^sub>a\\<^sub>s = []\n  a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n  \\<in> state_set (state_list (state_succ s a') R\\<^sub>a\\<^sub>s)\n  as = a' # R\\<^sub>a\\<^sub>s\n  slist = a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       prefix as' as \\<and>\n       exec_plan s as' = last (a # slist) \\<and>\n       length (a # slist) = Suc (length as')", "by auto"], ["proof (state)\nthis:\n  \\<exists>as'.\n     prefix as' as \\<and>\n     exec_plan s as' = last (a # slist) \\<and>\n     length (a # slist) = Suc (length as')\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n                \\<in> state_set\n                       (state_list (state_succ s a') R\\<^sub>a\\<^sub>s);\n        R\\<^sub>a\\<^sub>s = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n                \\<in> state_set\n                       (state_list (state_succ s a') R\\<^sub>a\\<^sub>s);\n        R\\<^sub>a\\<^sub>s = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "case (Cons a''' R\\<^sub>a\\<^sub>s')"], ["proof (state)\nthis:\n  R\\<^sub>a\\<^sub>s = a''' # R\\<^sub>a\\<^sub>s'\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n                \\<in> state_set\n                       (state_list (state_succ s a') R\\<^sub>a\\<^sub>s);\n        R\\<^sub>a\\<^sub>s = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "then"], ["proof (chain)\npicking this:\n  R\\<^sub>a\\<^sub>s = a''' # R\\<^sub>a\\<^sub>s'", "obtain as' where\n          \"prefix as' (a''' # R\\<^sub>a\\<^sub>s')\" \"exec_plan (state_succ s a') as' = last slist\"\n          \"length slist = Suc (length as')\""], ["proof (prove)\nusing this:\n  R\\<^sub>a\\<^sub>s = a''' # R\\<^sub>a\\<^sub>s'\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        \\<lbrakk>prefix as' (a''' # R\\<^sub>a\\<^sub>s');\n         exec_plan (state_succ s a') as' = last slist;\n         length slist = Suc (length as')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cons_1.IH[of \"a''' # R\\<^sub>a\\<^sub>s'\" \"state_succ s a'\" PROB]"], ["proof (prove)\nusing this:\n  R\\<^sub>a\\<^sub>s = a''' # R\\<^sub>a\\<^sub>s'\n  \\<lbrakk>a''' # R\\<^sub>a\\<^sub>s' \\<noteq> []; slist \\<noteq> [];\n   state_succ s a' \\<in> valid_states PROB;\n   a''' # R\\<^sub>a\\<^sub>s' \\<in> valid_plans PROB;\n   slist\n   \\<in> state_set\n          (state_list (state_succ s a')\n            (a''' # R\\<^sub>a\\<^sub>s'))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as'.\n                       prefix as' (a''' # R\\<^sub>a\\<^sub>s') \\<and>\n                       exec_plan (state_succ s a') as' = last slist \\<and>\n                       length slist = Suc (length as')\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        \\<lbrakk>prefix as' (a''' # R\\<^sub>a\\<^sub>s');\n         exec_plan (state_succ s a') as' = last slist;\n         length slist = Suc (length as')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using i a b cons_3"], ["proof (prove)\nusing this:\n  R\\<^sub>a\\<^sub>s = a''' # R\\<^sub>a\\<^sub>s'\n  \\<lbrakk>a''' # R\\<^sub>a\\<^sub>s' \\<noteq> []; slist \\<noteq> [];\n   state_succ s a' \\<in> valid_states PROB;\n   a''' # R\\<^sub>a\\<^sub>s' \\<in> valid_plans PROB;\n   slist\n   \\<in> state_set\n          (state_list (state_succ s a')\n            (a''' # R\\<^sub>a\\<^sub>s'))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as'.\n                       prefix as' (a''' # R\\<^sub>a\\<^sub>s') \\<and>\n                       exec_plan (state_succ s a') as' = last slist \\<and>\n                       length slist = Suc (length as')\n  a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n  \\<in> state_set (state_list (state_succ s a') R\\<^sub>a\\<^sub>s)\n  state_succ s a' \\<in> valid_states PROB\n  R\\<^sub>a\\<^sub>s \\<in> valid_plans PROB\n  slist = a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        \\<lbrakk>prefix as' (a''' # R\\<^sub>a\\<^sub>s');\n         exec_plan (state_succ s a') as' = last slist;\n         length slist = Suc (length as')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prefix as' (a''' # R\\<^sub>a\\<^sub>s')\n  exec_plan (state_succ s a') as' = last slist\n  length slist = Suc (length as')\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n                \\<in> state_set\n                       (state_list (state_succ s a') R\\<^sub>a\\<^sub>s);\n        R\\<^sub>a\\<^sub>s = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last (a # slist) \\<and>\n                            length (a # slist) = Suc (length as')", "then"], ["proof (chain)\npicking this:\n  prefix as' (a''' # R\\<^sub>a\\<^sub>s')\n  exec_plan (state_succ s a') as' = last slist\n  length slist = Suc (length as')", "show ?thesis"], ["proof (prove)\nusing this:\n  prefix as' (a''' # R\\<^sub>a\\<^sub>s')\n  exec_plan (state_succ s a') as' = last slist\n  length slist = Suc (length as')\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       prefix as' as \\<and>\n       exec_plan s as' = last (a # slist) \\<and>\n       length (a # slist) = Suc (length as')", "using Cons_prefix_Cons cons_2 cons_3 exec_plan.simps(2) last.simps length_Cons\n            list.distinct(1) local.Cons"], ["proof (prove)\nusing this:\n  prefix as' (a''' # R\\<^sub>a\\<^sub>s')\n  exec_plan (state_succ s a') as' = last slist\n  length slist = Suc (length as')\n  prefix (?x # ?xs) (?y # ?ys) = (?x = ?y \\<and> prefix ?xs ?ys)\n  as = a' # R\\<^sub>a\\<^sub>s\n  slist = a'' # R\\<^sub>s\\<^sub>l\\<^sub>i\\<^sub>s\\<^sub>t\n  exec_plan ?s (?a # ?as) = exec_plan (state_succ ?s ?a) ?as\n  last (?x # ?xs) = (if ?xs = [] then ?x else last ?xs)\n  length (?x # ?xs) = Suc (length ?xs)\n  [] \\<noteq> ?x21.0 # ?x22.0\n  R\\<^sub>a\\<^sub>s = a''' # R\\<^sub>a\\<^sub>s'\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       prefix as' as \\<and>\n       exec_plan s as' = last (a # slist) \\<and>\n       length (a # slist) = Suc (length as')", "by metis"], ["proof (state)\nthis:\n  \\<exists>as'.\n     prefix as' as \\<and>\n     exec_plan s as' = last (a # slist) \\<and>\n     length (a # slist) = Suc (length as')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>as'.\n     prefix as' as \\<and>\n     exec_plan s as' = last (a # slist) \\<and>\n     length (a # slist) = Suc (length as')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>as'.\n     prefix as' as \\<and>\n     exec_plan s as' = last (a # slist) \\<and>\n     length (a # slist) = Suc (length as')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s # slist \\<in> state_set (state_list s as);\n     \\<And>as s PROB.\n        \\<lbrakk>as \\<noteq> []; slist \\<noteq> [];\n         s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n         slist \\<in> state_set (state_list s as)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>as'.\n                             prefix as' as \\<and>\n                             exec_plan s as' = last slist \\<and>\n                             length slist = Suc (length as');\n     as \\<noteq> []; a # slist \\<noteq> []; s \\<in> valid_states PROB;\n     as \\<in> valid_plans PROB; a # slist \\<in> state_set (state_list s as);\n     as = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as'.\n                         prefix as' as \\<and>\n                         exec_plan s as' = last (a # slist) \\<and>\n                         length (a # slist) = Suc (length as')", "qed auto"], ["proof (state)\nthis:\n  \\<exists>as'.\n     prefix as' as \\<and>\n     exec_plan s as' = last (a # slist) \\<and>\n     length (a # slist) = Suc (length as')\n\ngoal (1 subgoal):\n 1. \\<And>as s PROB.\n       \\<lbrakk>as \\<noteq> []; [] \\<noteq> []; s \\<in> valid_states PROB;\n        as \\<in> valid_plans PROB;\n        [] \\<in> state_set (state_list s as)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'.\n                            prefix as' as \\<and>\n                            exec_plan s as' = last [] \\<and>\n                            length [] = Suc (length as')", "qed auto"], ["", "lemma eq_last_state_imp_append_nempty_as:\n  fixes as PROB slist_1 slist_2\n  assumes \"(as \\<noteq> [])\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\" \"(slist_1 \\<noteq> [])\"\n    \"(slist_2 \\<noteq> [])\" \"(slist_1 \\<in> state_set (state_list s as))\"\n    \"(slist_2 \\<in> state_set (state_list s as))\" \"\\<not>(length slist_1 = length slist_2)\"\n    \"(last slist_1 = last slist_2)\"\n  shows \"(\\<exists>as1 as2 as3.\n    (as1 @ as2 @ as3 = as)\n    \\<and> (exec_plan s (as1 @ as2) = exec_plan s as1)\n    \\<and>  \\<not>(as2 = [])\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "obtain as_1 where 1: \"(prefix as_1 as)\" \"(exec_plan s as_1 = last slist_1)\"\n    \"length slist_1 = Suc (length as_1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as_1.\n        \\<lbrakk>prefix as_1 as; exec_plan s as_1 = last slist_1;\n         length slist_1 = Suc (length as_1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1, 2, 3, 4, 6) in_state_set_imp_eq_exec_prefix"], ["proof (prove)\nusing this:\n  as \\<noteq> []\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  slist_1 \\<noteq> []\n  slist_1 \\<in> state_set (state_list s as)\n  \\<lbrakk>?as \\<noteq> []; ?slist \\<noteq> []; ?s \\<in> valid_states ?PROB;\n   ?as \\<in> valid_plans ?PROB;\n   ?slist \\<in> state_set (state_list ?s ?as)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as'.\n                       prefix as' ?as \\<and>\n                       exec_plan ?s as' = last ?slist \\<and>\n                       length ?slist = Suc (length as')\n\ngoal (1 subgoal):\n 1. (\\<And>as_1.\n        \\<lbrakk>prefix as_1 as; exec_plan s as_1 = last slist_1;\n         length slist_1 = Suc (length as_1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prefix as_1 as\n  exec_plan s as_1 = last slist_1\n  length slist_1 = Suc (length as_1)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "obtain as_2 where 2: \"(prefix as_2 as)\" \"(exec_plan s as_2 = last slist_2)\"\n    \"(length slist_2) = Suc (length as_2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as_2.\n        \\<lbrakk>prefix as_2 as; exec_plan s as_2 = last slist_2;\n         length slist_2 = Suc (length as_2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1, 2, 3, 5, 7) in_state_set_imp_eq_exec_prefix"], ["proof (prove)\nusing this:\n  as \\<noteq> []\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  slist_2 \\<noteq> []\n  slist_2 \\<in> state_set (state_list s as)\n  \\<lbrakk>?as \\<noteq> []; ?slist \\<noteq> []; ?s \\<in> valid_states ?PROB;\n   ?as \\<in> valid_plans ?PROB;\n   ?slist \\<in> state_set (state_list ?s ?as)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as'.\n                       prefix as' ?as \\<and>\n                       exec_plan ?s as' = last ?slist \\<and>\n                       length ?slist = Suc (length as')\n\ngoal (1 subgoal):\n 1. (\\<And>as_2.\n        \\<lbrakk>prefix as_2 as; exec_plan s as_2 = last slist_2;\n         length slist_2 = Suc (length as_2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prefix as_2 as\n  exec_plan s as_2 = last slist_2\n  length slist_2 = Suc (length as_2)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  prefix as_2 as\n  exec_plan s as_2 = last slist_2\n  length slist_2 = Suc (length as_2)", "have \"length as_1 \\<noteq> length as_2\""], ["proof (prove)\nusing this:\n  prefix as_2 as\n  exec_plan s as_2 = last slist_2\n  length slist_2 = Suc (length as_2)\n\ngoal (1 subgoal):\n 1. length as_1 \\<noteq> length as_2", "using assms(8) 1(3) 2(3)"], ["proof (prove)\nusing this:\n  prefix as_2 as\n  exec_plan s as_2 = last slist_2\n  length slist_2 = Suc (length as_2)\n  length slist_1 \\<noteq> length slist_2\n  length slist_1 = Suc (length as_1)\n  length slist_2 = Suc (length as_2)\n\ngoal (1 subgoal):\n 1. length as_1 \\<noteq> length as_2", "by fastforce"], ["proof (state)\nthis:\n  length as_1 \\<noteq> length as_2\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  length as_1 \\<noteq> length as_2", "consider (i) \"length as_1 < length as_2\" | (ii) \"length as_1 > length as_2\""], ["proof (prove)\nusing this:\n  length as_1 \\<noteq> length as_2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length as_1 < length as_2 \\<Longrightarrow> thesis;\n     length as_2 < length as_1 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>length as_1 < length as_2 \\<Longrightarrow> ?thesis;\n   length as_2 < length as_1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>length as_1 < length as_2 \\<Longrightarrow> ?thesis;\n   length as_2 < length as_1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>length as_1 < length as_2 \\<Longrightarrow> ?thesis;\n   length as_2 < length as_1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. length as_1 < length as_2 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n 2. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "case i"], ["proof (state)\nthis:\n  length as_1 < length as_2\n\ngoal (2 subgoals):\n 1. length as_1 < length as_2 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n 2. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  length as_1 < length as_2", "have \"prefix as_1 as_2\""], ["proof (prove)\nusing this:\n  length as_1 < length as_2\n\ngoal (1 subgoal):\n 1. prefix as_1 as_2", "using 1(1) 2(1) len_gt_pref_is_pref"], ["proof (prove)\nusing this:\n  length as_1 < length as_2\n  prefix as_1 as\n  prefix as_2 as\n  \\<lbrakk>length ?l1.0 < length ?l2.0; prefix ?l1.0 ?l;\n   prefix ?l2.0 ?l\\<rbrakk>\n  \\<Longrightarrow> prefix ?l1.0 ?l2.0\n\ngoal (1 subgoal):\n 1. prefix as_1 as_2", "by blast"], ["proof (state)\nthis:\n  prefix as_1 as_2\n\ngoal (2 subgoals):\n 1. length as_1 < length as_2 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n 2. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  prefix as_1 as_2", "obtain a where a1: \"as_2 = as_1 @ a\""], ["proof (prove)\nusing this:\n  prefix as_1 as_2\n\ngoal (1 subgoal):\n 1. (\\<And>a. as_2 = as_1 @ a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prefixE"], ["proof (prove)\nusing this:\n  prefix as_1 as_2\n  \\<lbrakk>prefix ?xs ?ys;\n   \\<And>zs. ?ys = ?xs @ zs \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a. as_2 = as_1 @ a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  as_2 = as_1 @ a\n\ngoal (2 subgoals):\n 1. length as_1 < length as_2 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n 2. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  as_2 = as_1 @ a", "obtain b where b1: \"as = as_2 @ b\""], ["proof (prove)\nusing this:\n  as_2 = as_1 @ a\n\ngoal (1 subgoal):\n 1. (\\<And>b. as = as_2 @ b \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prefixE 2(1)"], ["proof (prove)\nusing this:\n  as_2 = as_1 @ a\n  \\<lbrakk>prefix ?xs ?ys;\n   \\<And>zs. ?ys = ?xs @ zs \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  prefix as_2 as\n\ngoal (1 subgoal):\n 1. (\\<And>b. as = as_2 @ b \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  as = as_2 @ b\n\ngoal (2 subgoals):\n 1. length as_1 < length as_2 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n 2. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "let ?as1=\"as_1\""], ["proof (state)\ngoal (2 subgoals):\n 1. length as_1 < length as_2 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n 2. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "let ?as2=\"a\""], ["proof (state)\ngoal (2 subgoals):\n 1. length as_1 < length as_2 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n 2. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "let ?as3=\"b\""], ["proof (state)\ngoal (2 subgoals):\n 1. length as_1 < length as_2 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n 2. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "have \"as = ?as1 @ ?as2 @ ?as3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as = as_1 @ a @ b", "using a1 b1"], ["proof (prove)\nusing this:\n  as_2 = as_1 @ a\n  as = as_2 @ b\n\ngoal (1 subgoal):\n 1. as = as_1 @ a @ b", "by simp"], ["proof (state)\nthis:\n  as = as_1 @ a @ b\n\ngoal (2 subgoals):\n 1. length as_1 < length as_2 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n 2. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  as = as_1 @ a @ b\n\ngoal (2 subgoals):\n 1. length as_1 < length as_2 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n 2. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "have \"exec_plan s (?as1 @ ?as2) = exec_plan s ?as1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s (as_1 @ a) = exec_plan s as_1", "using 1(2) 2(2) a1 assms(9)"], ["proof (prove)\nusing this:\n  exec_plan s as_1 = last slist_1\n  exec_plan s as_2 = last slist_2\n  as_2 = as_1 @ a\n  last slist_1 = last slist_2\n\ngoal (1 subgoal):\n 1. exec_plan s (as_1 @ a) = exec_plan s as_1", "by auto"], ["proof (state)\nthis:\n  exec_plan s (as_1 @ a) = exec_plan s as_1\n\ngoal (2 subgoals):\n 1. length as_1 < length as_2 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n 2. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  exec_plan s (as_1 @ a) = exec_plan s as_1\n\ngoal (2 subgoals):\n 1. length as_1 < length as_2 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n 2. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "have \"?as2 \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> []", "using i a1"], ["proof (prove)\nusing this:\n  length as_1 < length as_2\n  as_2 = as_1 @ a\n\ngoal (1 subgoal):\n 1. a \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  a \\<noteq> []\n\ngoal (2 subgoals):\n 1. length as_1 < length as_2 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n 2. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "ultimately"], ["proof (chain)\npicking this:\n  as = as_1 @ a @ b\n  exec_plan s (as_1 @ a) = exec_plan s as_1\n  a \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  as = as_1 @ a @ b\n  exec_plan s (as_1 @ a) = exec_plan s as_1\n  a \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  \\<exists>as1 as2 as3.\n     as1 @ as2 @ as3 = as \\<and>\n     exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "case ii"], ["proof (state)\nthis:\n  length as_2 < length as_1\n\ngoal (1 subgoal):\n 1. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  length as_2 < length as_1", "have \"prefix as_2 as_1\""], ["proof (prove)\nusing this:\n  length as_2 < length as_1\n\ngoal (1 subgoal):\n 1. prefix as_2 as_1", "using 1(1) 2(1) len_gt_pref_is_pref"], ["proof (prove)\nusing this:\n  length as_2 < length as_1\n  prefix as_1 as\n  prefix as_2 as\n  \\<lbrakk>length ?l1.0 < length ?l2.0; prefix ?l1.0 ?l;\n   prefix ?l2.0 ?l\\<rbrakk>\n  \\<Longrightarrow> prefix ?l1.0 ?l2.0\n\ngoal (1 subgoal):\n 1. prefix as_2 as_1", "by blast"], ["proof (state)\nthis:\n  prefix as_2 as_1\n\ngoal (1 subgoal):\n 1. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  prefix as_2 as_1", "obtain a where a2: \"as_1 = as_2 @ a\""], ["proof (prove)\nusing this:\n  prefix as_2 as_1\n\ngoal (1 subgoal):\n 1. (\\<And>a. as_1 = as_2 @ a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prefixE"], ["proof (prove)\nusing this:\n  prefix as_2 as_1\n  \\<lbrakk>prefix ?xs ?ys;\n   \\<And>zs. ?ys = ?xs @ zs \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a. as_1 = as_2 @ a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  as_1 = as_2 @ a\n\ngoal (1 subgoal):\n 1. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  as_1 = as_2 @ a", "obtain b where b2: \"as = as_1 @ b\""], ["proof (prove)\nusing this:\n  as_1 = as_2 @ a\n\ngoal (1 subgoal):\n 1. (\\<And>b. as = as_1 @ b \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prefixE 1(1)"], ["proof (prove)\nusing this:\n  as_1 = as_2 @ a\n  \\<lbrakk>prefix ?xs ?ys;\n   \\<And>zs. ?ys = ?xs @ zs \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  prefix as_1 as\n\ngoal (1 subgoal):\n 1. (\\<And>b. as = as_1 @ b \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  as = as_1 @ b\n\ngoal (1 subgoal):\n 1. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "let ?as1=\"as_2\""], ["proof (state)\ngoal (1 subgoal):\n 1. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "let ?as2=\"a\""], ["proof (state)\ngoal (1 subgoal):\n 1. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "let ?as3=\"b\""], ["proof (state)\ngoal (1 subgoal):\n 1. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "have \"as = ?as1 @ ?as2 @ ?as3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as = as_2 @ a @ b", "using a2 b2"], ["proof (prove)\nusing this:\n  as_1 = as_2 @ a\n  as = as_1 @ b\n\ngoal (1 subgoal):\n 1. as = as_2 @ a @ b", "by simp"], ["proof (state)\nthis:\n  as = as_2 @ a @ b\n\ngoal (1 subgoal):\n 1. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  as = as_2 @ a @ b\n\ngoal (1 subgoal):\n 1. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "have \"exec_plan s (?as1 @ ?as2) = exec_plan s ?as1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s (as_2 @ a) = exec_plan s as_2", "using 1(2) 2(2) a2 assms(9)"], ["proof (prove)\nusing this:\n  exec_plan s as_1 = last slist_1\n  exec_plan s as_2 = last slist_2\n  as_1 = as_2 @ a\n  last slist_1 = last slist_2\n\ngoal (1 subgoal):\n 1. exec_plan s (as_2 @ a) = exec_plan s as_2", "by auto"], ["proof (state)\nthis:\n  exec_plan s (as_2 @ a) = exec_plan s as_2\n\ngoal (1 subgoal):\n 1. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  exec_plan s (as_2 @ a) = exec_plan s as_2\n\ngoal (1 subgoal):\n 1. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "have \"?as2 \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> []", "using ii a2"], ["proof (prove)\nusing this:\n  length as_2 < length as_1\n  as_1 = as_2 @ a\n\ngoal (1 subgoal):\n 1. a \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  a \\<noteq> []\n\ngoal (1 subgoal):\n 1. length as_2 < length as_1 \\<Longrightarrow>\n    \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "ultimately"], ["proof (chain)\npicking this:\n  as = as_2 @ a @ b\n  exec_plan s (as_2 @ a) = exec_plan s as_2\n  a \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  as = as_2 @ a @ b\n  exec_plan s (as_2 @ a) = exec_plan s as_2\n  a \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  \\<exists>as1 as2 as3.\n     as1 @ as2 @ as3 = as \\<and>\n     exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>as1 as2 as3.\n     as1 @ as2 @ as3 = as \\<and>\n     exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma FINITE_prob_dom:\n  assumes \"finite PROB\"\n  shows  \"finite (prob_dom PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (prob_dom PROB)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (prob_dom PROB)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (prob_dom PROB)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (prob_dom PROB)", "assume P2: \"x \\<in> PROB\""], ["proof (state)\nthis:\n  x \\<in> PROB\n\ngoal (1 subgoal):\n 1. finite (prob_dom PROB)", "then"], ["proof (chain)\npicking this:\n  x \\<in> PROB", "have 1: \"(\\<lambda>(s1, s2). action_dom s1 s2) x = fmdom' (fst x) \\<union> fmdom' (snd x)\""], ["proof (prove)\nusing this:\n  x \\<in> PROB\n\ngoal (1 subgoal):\n 1. (case x of (s1, s2) \\<Rightarrow> action_dom s1 s2) =\n    fmdom' (fst x) \\<union> fmdom' (snd x)", "by (simp add: action_dom_def case_prod_beta')"], ["proof (state)\nthis:\n  (case x of (s1, s2) \\<Rightarrow> action_dom s1 s2) =\n  fmdom' (fst x) \\<union> fmdom' (snd x)\n\ngoal (1 subgoal):\n 1. finite (prob_dom PROB)", "then"], ["proof (chain)\npicking this:\n  (case x of (s1, s2) \\<Rightarrow> action_dom s1 s2) =\n  fmdom' (fst x) \\<union> fmdom' (snd x)", "have 2: \"finite (fset (fmdom (fst x)))\" \"finite (fset (fmdom (snd x)))\""], ["proof (prove)\nusing this:\n  (case x of (s1, s2) \\<Rightarrow> action_dom s1 s2) =\n  fmdom' (fst x) \\<union> fmdom' (snd x)\n\ngoal (1 subgoal):\n 1. finite (fset (fmdom (fst x))) &&& finite (fset (fmdom (snd x)))", "by auto"], ["proof (state)\nthis:\n  finite (fset (fmdom (fst x)))\n  finite (fset (fmdom (snd x)))\n\ngoal (1 subgoal):\n 1. finite (prob_dom PROB)", "then"], ["proof (chain)\npicking this:\n  finite (fset (fmdom (fst x)))\n  finite (fset (fmdom (snd x)))", "have 3: \"fset (fmdom (fst x)) = fmdom' (fst x)\" \"fset (fmdom (snd x)) = fmdom' (snd x)\""], ["proof (prove)\nusing this:\n  finite (fset (fmdom (fst x)))\n  finite (fset (fmdom (snd x)))\n\ngoal (1 subgoal):\n 1. fset (fmdom (fst x)) = fmdom' (fst x) &&&\n    fset (fmdom (snd x)) = fmdom' (snd x)", "by (auto simp add: fmdom'_alt_def)"], ["proof (state)\nthis:\n  fset (fmdom (fst x)) = fmdom' (fst x)\n  fset (fmdom (snd x)) = fmdom' (snd x)\n\ngoal (1 subgoal):\n 1. finite (prob_dom PROB)", "then"], ["proof (chain)\npicking this:\n  fset (fmdom (fst x)) = fmdom' (fst x)\n  fset (fmdom (snd x)) = fmdom' (snd x)", "have \"finite (fmdom' (fst x))\""], ["proof (prove)\nusing this:\n  fset (fmdom (fst x)) = fmdom' (fst x)\n  fset (fmdom (snd x)) = fmdom' (snd x)\n\ngoal (1 subgoal):\n 1. finite (fmdom' (fst x))", "using 2"], ["proof (prove)\nusing this:\n  fset (fmdom (fst x)) = fmdom' (fst x)\n  fset (fmdom (snd x)) = fmdom' (snd x)\n  finite (fset (fmdom (fst x)))\n  finite (fset (fmdom (snd x)))\n\ngoal (1 subgoal):\n 1. finite (fmdom' (fst x))", "by auto"], ["proof (state)\nthis:\n  finite (fmdom' (fst x))\n\ngoal (1 subgoal):\n 1. finite (prob_dom PROB)", "then"], ["proof (chain)\npicking this:\n  finite (fmdom' (fst x))", "have \"finite (fmdom' (snd x))\""], ["proof (prove)\nusing this:\n  finite (fmdom' (fst x))\n\ngoal (1 subgoal):\n 1. finite (fmdom' (snd x))", "using 2 3"], ["proof (prove)\nusing this:\n  finite (fmdom' (fst x))\n  finite (fset (fmdom (fst x)))\n  finite (fset (fmdom (snd x)))\n  fset (fmdom (fst x)) = fmdom' (fst x)\n  fset (fmdom (snd x)) = fmdom' (snd x)\n\ngoal (1 subgoal):\n 1. finite (fmdom' (snd x))", "by auto"], ["proof (state)\nthis:\n  finite (fmdom' (snd x))\n\ngoal (1 subgoal):\n 1. finite (prob_dom PROB)", "then"], ["proof (chain)\npicking this:\n  finite (fmdom' (snd x))", "have \"finite ((\\<lambda>(s1, s2). action_dom s1 s2) x)\""], ["proof (prove)\nusing this:\n  finite (fmdom' (snd x))\n\ngoal (1 subgoal):\n 1. finite (case x of (s1, s2) \\<Rightarrow> action_dom s1 s2)", "using 1 2 3"], ["proof (prove)\nusing this:\n  finite (fmdom' (snd x))\n  (case x of (s1, s2) \\<Rightarrow> action_dom s1 s2) =\n  fmdom' (fst x) \\<union> fmdom' (snd x)\n  finite (fset (fmdom (fst x)))\n  finite (fset (fmdom (snd x)))\n  fset (fmdom (fst x)) = fmdom' (fst x)\n  fset (fmdom (snd x)) = fmdom' (snd x)\n\ngoal (1 subgoal):\n 1. finite (case x of (s1, s2) \\<Rightarrow> action_dom s1 s2)", "by simp"], ["proof (state)\nthis:\n  finite (case x of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n\ngoal (1 subgoal):\n 1. finite (prob_dom PROB)", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> PROB \\<Longrightarrow>\n  finite (case ?x2 of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n\ngoal (1 subgoal):\n 1. finite (prob_dom PROB)", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> PROB \\<Longrightarrow>\n  finite (case ?x2 of (s1, s2) \\<Rightarrow> action_dom s1 s2)", "show \"finite (prob_dom PROB)\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> PROB \\<Longrightarrow>\n  finite (case ?x2 of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n\ngoal (1 subgoal):\n 1. finite (prob_dom PROB)", "unfolding prob_dom_def"], ["proof (prove)\nusing this:\n  ?x2 \\<in> PROB \\<Longrightarrow>\n  finite (case ?x2 of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n\ngoal (1 subgoal):\n 1. finite (\\<Union>(s1, s2)\\<in>PROB. action_dom s1 s2)", "using assms"], ["proof (prove)\nusing this:\n  ?x2 \\<in> PROB \\<Longrightarrow>\n  finite (case ?x2 of (s1, s2) \\<Rightarrow> action_dom s1 s2)\n  finite PROB\n\ngoal (1 subgoal):\n 1. finite (\\<Union>(s1, s2)\\<in>PROB. action_dom s1 s2)", "by blast"], ["proof (state)\nthis:\n  finite (prob_dom PROB)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma CARD_valid_states:\n  assumes \"finite (PROB :: 'a problem)\"\n  shows \"(card (valid_states PROB :: 'a state set) = 2 ^ card (prob_dom PROB))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (valid_states PROB) = 2 ^ card (prob_dom PROB)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (valid_states PROB) = 2 ^ card (prob_dom PROB)", "have 1: \"finite (prob_dom PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (prob_dom PROB)", "using assms FINITE_prob_dom"], ["proof (prove)\nusing this:\n  finite PROB\n  finite ?PROB \\<Longrightarrow> finite (prob_dom ?PROB)\n\ngoal (1 subgoal):\n 1. finite (prob_dom PROB)", "by blast"], ["proof (state)\nthis:\n  finite (prob_dom PROB)\n\ngoal (1 subgoal):\n 1. card (valid_states PROB) = 2 ^ card (prob_dom PROB)", "have\"(card (valid_states PROB :: 'a state set)) = card {s :: 'a state. fmdom' s = prob_dom PROB}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (valid_states PROB) = card {s. fmdom' s = prob_dom PROB}", "unfolding valid_states_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {s. fmdom' s = prob_dom PROB} = card {s. fmdom' s = prob_dom PROB}", "by simp"], ["proof (state)\nthis:\n  card (valid_states PROB) = card {s. fmdom' s = prob_dom PROB}\n\ngoal (1 subgoal):\n 1. card (valid_states PROB) = 2 ^ card (prob_dom PROB)", "also"], ["proof (state)\nthis:\n  card (valid_states PROB) = card {s. fmdom' s = prob_dom PROB}\n\ngoal (1 subgoal):\n 1. card (valid_states PROB) = 2 ^ card (prob_dom PROB)", "have \"...  = 2 ^ (card (prob_dom PROB))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {s. fmdom' s = prob_dom PROB} = 2 ^ card (prob_dom PROB)", "using 1 card_of_set_of_all_possible_states"], ["proof (prove)\nusing this:\n  finite (prob_dom PROB)\n  finite ?X \\<Longrightarrow> card {s. fmdom' s = ?X} = 2 ^ card ?X\n\ngoal (1 subgoal):\n 1. card {s. fmdom' s = prob_dom PROB} = 2 ^ card (prob_dom PROB)", "by blast"], ["proof (state)\nthis:\n  card {s. fmdom' s = prob_dom PROB} = 2 ^ card (prob_dom PROB)\n\ngoal (1 subgoal):\n 1. card (valid_states PROB) = 2 ^ card (prob_dom PROB)", "finally"], ["proof (chain)\npicking this:\n  card (valid_states PROB) = 2 ^ card (prob_dom PROB)", "show ?thesis"], ["proof (prove)\nusing this:\n  card (valid_states PROB) = 2 ^ card (prob_dom PROB)\n\ngoal (1 subgoal):\n 1. card (valid_states PROB) = 2 ^ card (prob_dom PROB)", "by blast"], ["proof (state)\nthis:\n  card (valid_states PROB) = 2 ^ card (prob_dom PROB)\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE type of 'valid\\_states PROB' has to be asserted to match 'FINITE\\_states' in the proof.\\<close>"], ["", "lemma FINITE_valid_states:\n  fixes PROB :: \"'a problem\"\n  shows \"finite PROB \\<Longrightarrow> finite ((valid_states PROB) :: 'a state set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite PROB \\<Longrightarrow> finite (valid_states PROB)", "proof (induction PROB rule: finite.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (valid_states {})\n 2. \\<And>A a.\n       \\<lbrakk>finite A; finite (valid_states A)\\<rbrakk>\n       \\<Longrightarrow> finite (valid_states (insert a A))", "case emptyI"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. finite (valid_states {})\n 2. \\<And>A a.\n       \\<lbrakk>finite A; finite (valid_states A)\\<rbrakk>\n       \\<Longrightarrow> finite (valid_states (insert a A))", "then"], ["proof (chain)\npicking this:", "have \"valid_states {} = {fmempty}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_states {} = {fmempty}", "unfolding valid_states_def prob_dom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {s. fmdom' s = (\\<Union>(s1, s2)\\<in>{}. action_dom s1 s2)} = {fmempty}", "using empty_domain_fmap_set"], ["proof (prove)\nusing this:\n  {s. fmdom' s = {}} = {fmempty}\n\ngoal (1 subgoal):\n 1. {s. fmdom' s = (\\<Union>(s1, s2)\\<in>{}. action_dom s1 s2)} = {fmempty}", "by force"], ["proof (state)\nthis:\n  valid_states {} = {fmempty}\n\ngoal (2 subgoals):\n 1. finite (valid_states {})\n 2. \\<And>A a.\n       \\<lbrakk>finite A; finite (valid_states A)\\<rbrakk>\n       \\<Longrightarrow> finite (valid_states (insert a A))", "then"], ["proof (chain)\npicking this:\n  valid_states {} = {fmempty}", "show ?case"], ["proof (prove)\nusing this:\n  valid_states {} = {fmempty}\n\ngoal (1 subgoal):\n 1. finite (valid_states {})", "by(subst \\<open>valid_states {} = {fmempty}\\<close>) auto"], ["proof (state)\nthis:\n  finite (valid_states {})\n\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>finite A; finite (valid_states A)\\<rbrakk>\n       \\<Longrightarrow> finite (valid_states (insert a A))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>finite A; finite (valid_states A)\\<rbrakk>\n       \\<Longrightarrow> finite (valid_states (insert a A))", "case (insertI A a)"], ["proof (state)\nthis:\n  finite A\n  finite (valid_states A)\n\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>finite A; finite (valid_states A)\\<rbrakk>\n       \\<Longrightarrow> finite (valid_states (insert a A))", "{"], ["proof (state)\nthis:\n  finite A\n  finite (valid_states A)\n\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>finite A; finite (valid_states A)\\<rbrakk>\n       \\<Longrightarrow> finite (valid_states (insert a A))", "then"], ["proof (chain)\npicking this:\n  finite A\n  finite (valid_states A)", "have \"finite (insert a A)\""], ["proof (prove)\nusing this:\n  finite A\n  finite (valid_states A)\n\ngoal (1 subgoal):\n 1. finite (insert a A)", "by blast"], ["proof (state)\nthis:\n  finite (insert a A)\n\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>finite A; finite (valid_states A)\\<rbrakk>\n       \\<Longrightarrow> finite (valid_states (insert a A))", "then"], ["proof (chain)\npicking this:\n  finite (insert a A)", "have \"finite (prob_dom (insert a A))\""], ["proof (prove)\nusing this:\n  finite (insert a A)\n\ngoal (1 subgoal):\n 1. finite (prob_dom (insert a A))", "using FINITE_prob_dom"], ["proof (prove)\nusing this:\n  finite (insert a A)\n  finite ?PROB \\<Longrightarrow> finite (prob_dom ?PROB)\n\ngoal (1 subgoal):\n 1. finite (prob_dom (insert a A))", "by blast"], ["proof (state)\nthis:\n  finite (prob_dom (insert a A))\n\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>finite A; finite (valid_states A)\\<rbrakk>\n       \\<Longrightarrow> finite (valid_states (insert a A))", "then"], ["proof (chain)\npicking this:\n  finite (prob_dom (insert a A))", "have \"finite {s :: 'a state. fmdom' s = prob_dom (insert a A)}\""], ["proof (prove)\nusing this:\n  finite (prob_dom (insert a A))\n\ngoal (1 subgoal):\n 1. finite {s. fmdom' s = prob_dom (insert a A)}", "using FINITE_states"], ["proof (prove)\nusing this:\n  finite (prob_dom (insert a A))\n  finite ?X \\<Longrightarrow> finite {s. fmdom' s = ?X}\n\ngoal (1 subgoal):\n 1. finite {s. fmdom' s = prob_dom (insert a A)}", "by blast"], ["proof (state)\nthis:\n  finite {s. fmdom' s = prob_dom (insert a A)}\n\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>finite A; finite (valid_states A)\\<rbrakk>\n       \\<Longrightarrow> finite (valid_states (insert a A))", "}"], ["proof (state)\nthis:\n  finite {s. fmdom' s = prob_dom (insert a A)}\n\ngoal (1 subgoal):\n 1. \\<And>A a.\n       \\<lbrakk>finite A; finite (valid_states A)\\<rbrakk>\n       \\<Longrightarrow> finite (valid_states (insert a A))", "then"], ["proof (chain)\npicking this:\n  finite {s. fmdom' s = prob_dom (insert a A)}", "show ?case"], ["proof (prove)\nusing this:\n  finite {s. fmdom' s = prob_dom (insert a A)}\n\ngoal (1 subgoal):\n 1. finite (valid_states (insert a A))", "unfolding valid_states_def"], ["proof (prove)\nusing this:\n  finite {s. fmdom' s = prob_dom (insert a A)}\n\ngoal (1 subgoal):\n 1. finite {s. fmdom' s = prob_dom (insert a A)}", "by simp"], ["proof (state)\nthis:\n  finite (valid_states (insert a A))\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE type of 'PROB' had to be fixed for use of 'FINITE\\_valid\\_states'.\\<close>"], ["", "lemma lemma_2:\n  fixes PROB :: \"'a problem\" and as :: \"('a action) list\" and s :: \"'a state\"\n  assumes \"finite PROB\" \"s \\<in> (valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"((length as) > (2 ^ (card (fmdom' s)) - 1))\"\n  shows \"(\\<exists>as1 as2 as3.\n    (as1 @ as2 @ as3 = as)\n    \\<and> (exec_plan s (as1 @ as2) = exec_plan s as1)\n    \\<and> \\<not>(as2 = [])\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "have \"Suc (length as) > 2^(card (fmdom' s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ card (fmdom' s) < Suc (length as)", "using assms(4)"], ["proof (prove)\nusing this:\n  2 ^ card (fmdom' s) - 1 < length as\n\ngoal (1 subgoal):\n 1. 2 ^ card (fmdom' s) < Suc (length as)", "by linarith"], ["proof (state)\nthis:\n  2 ^ card (fmdom' s) < Suc (length as)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  2 ^ card (fmdom' s) < Suc (length as)", "have 1: \"card (state_set (state_list s as)) > 2^card (fmdom' s)\""], ["proof (prove)\nusing this:\n  2 ^ card (fmdom' s) < Suc (length as)\n\ngoal (1 subgoal):\n 1. 2 ^ card (fmdom' s) < card (state_set (state_list s as))", "using card_state_set[symmetric]"], ["proof (prove)\nusing this:\n  2 ^ card (fmdom' s) < Suc (length as)\n  card (state_set (state_list ?s ?as)) = Suc (length ?as)\n\ngoal (1 subgoal):\n 1. 2 ^ card (fmdom' s) < card (state_set (state_list s as))", "by metis"], ["proof (state)\nthis:\n  2 ^ card (fmdom' s) < card (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "{\n    \\<comment> \\<open>NOTE type of 'valid\\_states PROB' had to be asserted to match 'FINITE\\_valid\\_states'.\\<close>"], ["proof (state)\nthis:\n  2 ^ card (fmdom' s) < card (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "have 2: \"finite (prob_dom PROB)\" \"finite ((valid_states PROB)  :: 'a state set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (prob_dom PROB) &&& finite (valid_states PROB)", "using assms(1) FINITE_prob_dom FINITE_valid_states"], ["proof (prove)\nusing this:\n  finite PROB\n  finite ?PROB \\<Longrightarrow> finite (prob_dom ?PROB)\n  finite ?PROB \\<Longrightarrow> finite (valid_states ?PROB)\n\ngoal (1 subgoal):\n 1. finite (prob_dom PROB) &&& finite (valid_states PROB)", "by blast+"], ["proof (state)\nthis:\n  finite (prob_dom PROB)\n  finite (valid_states PROB)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "have 3: \"fmdom' s = prob_dom PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' s = prob_dom PROB", "using assms(2) valid_states_def"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  valid_states ?prob \\<equiv> {s. fmdom' s = prob_dom ?prob}\n\ngoal (1 subgoal):\n 1. fmdom' s = prob_dom PROB", "by fast"], ["proof (state)\nthis:\n  fmdom' s = prob_dom PROB\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  fmdom' s = prob_dom PROB", "have \"card ((valid_states PROB) :: 'a state set) = 2^card (fmdom' s)\""], ["proof (prove)\nusing this:\n  fmdom' s = prob_dom PROB\n\ngoal (1 subgoal):\n 1. card (valid_states PROB) = 2 ^ card (fmdom' s)", "using assms(1) CARD_valid_states"], ["proof (prove)\nusing this:\n  fmdom' s = prob_dom PROB\n  finite PROB\n  finite ?PROB \\<Longrightarrow>\n  card (valid_states ?PROB) = 2 ^ card (prob_dom ?PROB)\n\ngoal (1 subgoal):\n 1. card (valid_states PROB) = 2 ^ card (fmdom' s)", "by auto"], ["proof (state)\nthis:\n  card (valid_states PROB) = 2 ^ card (fmdom' s)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  card (valid_states PROB) = 2 ^ card (fmdom' s)", "have 4: \"card (state_set (state_list (s :: 'a state) as)) > card ((valid_states PROB) :: 'a state set)\""], ["proof (prove)\nusing this:\n  card (valid_states PROB) = 2 ^ card (fmdom' s)\n\ngoal (1 subgoal):\n 1. card (valid_states PROB) < card (state_set (state_list s as))", "unfolding valid_states_def"], ["proof (prove)\nusing this:\n  card {s. fmdom' s = prob_dom PROB} = 2 ^ card (fmdom' s)\n\ngoal (1 subgoal):\n 1. card {s. fmdom' s = prob_dom PROB} < card (state_set (state_list s as))", "using 1 2(1) 3 card_of_set_of_all_possible_states[of \"prob_dom PROB\"]"], ["proof (prove)\nusing this:\n  card {s. fmdom' s = prob_dom PROB} = 2 ^ card (fmdom' s)\n  2 ^ card (fmdom' s) < card (state_set (state_list s as))\n  finite (prob_dom PROB)\n  fmdom' s = prob_dom PROB\n  finite (prob_dom PROB) \\<Longrightarrow>\n  card {s. fmdom' s = prob_dom PROB} = 2 ^ card (prob_dom PROB)\n\ngoal (1 subgoal):\n 1. card {s. fmdom' s = prob_dom PROB} < card (state_set (state_list s as))", "by argo\n        \\<comment> \\<open>TODO refactor into lemma.\\<close>"], ["proof (state)\nthis:\n  card (valid_states PROB) < card (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "{"], ["proof (state)\nthis:\n  card (valid_states PROB) < card (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "let ?S=\"state_set (state_list (s :: 'a state) as)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "let ?T=\"valid_states PROB :: 'a state set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "assume C2: \"inj_on last ?S\"\n        \\<comment> \\<open>TODO unwrap the metis step or refactor into lemma.\\<close>"], ["proof (state)\nthis:\n  inj_on last (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "have a: \"?T \\<subseteq> last ` ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_states PROB \\<subseteq> last ` state_set (state_list s as)", "using C2"], ["proof (prove)\nusing this:\n  inj_on last (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. valid_states PROB \\<subseteq> last ` state_set (state_list s as)", "by (metis \"2\"(2) \"4\" assms(2) assms(3) card_image card_mono lemma_1 not_less)"], ["proof (state)\nthis:\n  valid_states PROB \\<subseteq> last ` state_set (state_list s as)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "have \"finite (state_set (state_list s as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (state_set (state_list s as))", "using state_set_finite"], ["proof (prove)\nusing this:\n  finite (state_set ?X)\n\ngoal (1 subgoal):\n 1. finite (state_set (state_list s as))", "by auto"], ["proof (state)\nthis:\n  finite (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  finite (state_set (state_list s as))", "have \"card (last ` ?S) = card ?S\""], ["proof (prove)\nusing this:\n  finite (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. card (last ` state_set (state_list s as)) =\n    card (state_set (state_list s as))", "using C2 inj_on_iff_eq_card"], ["proof (prove)\nusing this:\n  finite (state_set (state_list s as))\n  inj_on last (state_set (state_list s as))\n  finite ?A \\<Longrightarrow> inj_on ?f ?A = (card (?f ` ?A) = card ?A)\n\ngoal (1 subgoal):\n 1. card (last ` state_set (state_list s as)) =\n    card (state_set (state_list s as))", "by blast"], ["proof (state)\nthis:\n  card (last ` state_set (state_list s as)) =\n  card (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "also"], ["proof (state)\nthis:\n  card (last ` state_set (state_list s as)) =\n  card (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "have \"\\<dots> > card ?T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (valid_states PROB) < card (state_set (state_list s as))", "using 4"], ["proof (prove)\nusing this:\n  card (valid_states PROB) < card (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. card (valid_states PROB) < card (state_set (state_list s as))", "by blast"], ["proof (state)\nthis:\n  card (valid_states PROB) < card (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  card (valid_states PROB) < card (state_set (state_list s as))", "have \"\\<exists>x. x \\<in> (last ` ?S) \\<and> x \\<notin> ?T\""], ["proof (prove)\nusing this:\n  card (valid_states PROB) < card (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<in> last ` state_set (state_list s as) \\<and>\n       x \\<notin> valid_states PROB", "using C2 a assms(2) assms(3) calculation lemma_1"], ["proof (prove)\nusing this:\n  card (valid_states PROB) < card (state_set (state_list s as))\n  inj_on last (state_set (state_list s as))\n  valid_states PROB \\<subseteq> last ` state_set (state_list s as)\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  card (last ` state_set (state_list s as)) =\n  card (state_set (state_list s as))\n  \\<lbrakk>?s \\<in> valid_states ?PROB; ?as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> last ` state_set (state_list ?s ?as)\n                    \\<subseteq> valid_states ?PROB\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<in> last ` state_set (state_list s as) \\<and>\n       x \\<notin> valid_states PROB", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>x.\n     x \\<in> last ` state_set (state_list s as) \\<and>\n     x \\<notin> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "}"], ["proof (state)\nthis:\n  inj_on last (state_set (state_list s as)) \\<Longrightarrow>\n  \\<exists>x.\n     x \\<in> last ` state_set (state_list s as) \\<and>\n     x \\<notin> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "note 5 = this"], ["proof (state)\nthis:\n  inj_on last (state_set (state_list s as)) \\<Longrightarrow>\n  \\<exists>x.\n     x \\<in> last ` state_set (state_list s as) \\<and>\n     x \\<notin> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  inj_on last (state_set (state_list s as)) \\<Longrightarrow>\n  \\<exists>x.\n     x \\<in> last ` state_set (state_list s as) \\<and>\n     x \\<notin> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "{"], ["proof (state)\nthis:\n  inj_on last (state_set (state_list s as)) \\<Longrightarrow>\n  \\<exists>x.\n     x \\<in> last ` state_set (state_list s as) \\<and>\n     x \\<notin> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "assume C: \"inj last (state_set (state_list (s :: 'a state) as)) (valid_states PROB)\""], ["proof (state)\nthis:\n  FactoredSystem.inj last (state_set (state_list s as)) (valid_states PROB)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  FactoredSystem.inj last (state_set (state_list s as)) (valid_states PROB)", "have \"inj_on last (state_set (state_list (s :: 'a state) as))\""], ["proof (prove)\nusing this:\n  FactoredSystem.inj last (state_set (state_list s as)) (valid_states PROB)\n\ngoal (1 subgoal):\n 1. inj_on last (state_set (state_list s as))", "using C inj_def"], ["proof (prove)\nusing this:\n  FactoredSystem.inj last (state_set (state_list s as)) (valid_states PROB)\n  FactoredSystem.inj last (state_set (state_list s as)) (valid_states PROB)\n  FactoredSystem.inj ?f ?A ?B \\<equiv>\n  (\\<forall>x\\<in>?A. ?f x \\<in> ?B) \\<and> inj_on ?f ?A\n\ngoal (1 subgoal):\n 1. inj_on last (state_set (state_list s as))", "by blast"], ["proof (state)\nthis:\n  inj_on last (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  inj_on last (state_set (state_list s as))", "obtain x where \"x \\<in> last ` (state_set (state_list s as)) \\<and> x \\<notin> valid_states PROB\""], ["proof (prove)\nusing this:\n  inj_on last (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> last ` state_set (state_list s as) \\<and>\n        x \\<notin> valid_states PROB \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 5"], ["proof (prove)\nusing this:\n  inj_on last (state_set (state_list s as))\n  inj_on last (state_set (state_list s as)) \\<Longrightarrow>\n  \\<exists>x.\n     x \\<in> last ` state_set (state_list s as) \\<and>\n     x \\<notin> valid_states PROB\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> last ` state_set (state_list s as) \\<and>\n        x \\<notin> valid_states PROB \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by presburger"], ["proof (state)\nthis:\n  x \\<in> last ` state_set (state_list s as) \\<and>\n  x \\<notin> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  x \\<in> last ` state_set (state_list s as) \\<and>\n  x \\<notin> valid_states PROB", "have \"\\<not>(\\<forall>x\\<in>state_set (state_list s as). last x \\<in> valid_states PROB)\""], ["proof (prove)\nusing this:\n  x \\<in> last ` state_set (state_list s as) \\<and>\n  x \\<notin> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>x\\<in>state_set (state_list s as).\n               last x \\<in> valid_states PROB)", "by blast"], ["proof (state)\nthis:\n  \\<not> (\\<forall>x\\<in>state_set (state_list s as).\n             last x \\<in> valid_states PROB)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>x\\<in>state_set (state_list s as).\n             last x \\<in> valid_states PROB)", "have \"\\<not>inj last (state_set (state_list (s :: 'a state) as)) (valid_states PROB)\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>x\\<in>state_set (state_list s as).\n             last x \\<in> valid_states PROB)\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj last (state_set (state_list s as))\n            (valid_states PROB)", "using inj_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>x\\<in>state_set (state_list s as).\n             last x \\<in> valid_states PROB)\n  FactoredSystem.inj ?f ?A ?B \\<equiv>\n  (\\<forall>x\\<in>?A. ?f x \\<in> ?B) \\<and> inj_on ?f ?A\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj last (state_set (state_list s as))\n            (valid_states PROB)", "by metis"], ["proof (state)\nthis:\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (valid_states PROB)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (valid_states PROB)", "have False"], ["proof (prove)\nusing this:\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (valid_states PROB)\n\ngoal (1 subgoal):\n 1. False", "using C"], ["proof (prove)\nusing this:\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (valid_states PROB)\n  FactoredSystem.inj last (state_set (state_list s as)) (valid_states PROB)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "}"], ["proof (state)\nthis:\n  FactoredSystem.inj last (state_set (state_list s as))\n   (valid_states PROB) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "ultimately"], ["proof (chain)\npicking this:\n  inj_on last (state_set (state_list s as)) \\<Longrightarrow>\n  \\<exists>x.\n     x \\<in> last ` state_set (state_list s as) \\<and>\n     x \\<notin> valid_states PROB\n  FactoredSystem.inj last (state_set (state_list s as))\n   (valid_states PROB) \\<Longrightarrow>\n  False", "have \"\\<not>inj last (state_set (state_list (s :: 'a state) as)) (valid_states PROB)\""], ["proof (prove)\nusing this:\n  inj_on last (state_set (state_list s as)) \\<Longrightarrow>\n  \\<exists>x.\n     x \\<in> last ` state_set (state_list s as) \\<and>\n     x \\<notin> valid_states PROB\n  FactoredSystem.inj last (state_set (state_list s as))\n   (valid_states PROB) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj last (state_set (state_list s as))\n            (valid_states PROB)", "unfolding inj_def"], ["proof (prove)\nusing this:\n  inj_on last (state_set (state_list s as)) \\<Longrightarrow>\n  \\<exists>x.\n     x \\<in> last ` state_set (state_list s as) \\<and>\n     x \\<notin> valid_states PROB\n  (\\<forall>x\\<in>state_set (state_list s as).\n      last x \\<in> valid_states PROB) \\<and>\n  inj_on last (state_set (state_list s as)) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<not> ((\\<forall>x\\<in>state_set (state_list s as).\n                last x \\<in> valid_states PROB) \\<and>\n            inj_on last (state_set (state_list s as)))", "by blast"], ["proof (state)\nthis:\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (valid_states PROB)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "}"], ["proof (state)\nthis:\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (valid_states PROB)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (valid_states PROB)", "obtain slist_1 slist_2 where 6:\n    \"slist_1 \\<in> state_set (state_list s as)\"\n    \"slist_2 \\<in> state_set (state_list s as)\"\n    \"(last slist_1 = last slist_2)\"\n    \"length slist_1 \\<noteq> length slist_2\""], ["proof (prove)\nusing this:\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (valid_states PROB)\n\ngoal (1 subgoal):\n 1. (\\<And>slist_1 slist_2.\n        \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n         slist_2 \\<in> state_set (state_list s as);\n         last slist_1 = last slist_2;\n         length slist_1 \\<noteq> length slist_2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2, 3) not_eq_last_diff_paths"], ["proof (prove)\nusing this:\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (valid_states PROB)\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<lbrakk>?s \\<in> valid_states ?PROB; ?as \\<in> valid_plans ?PROB;\n   \\<not> FactoredSystem.inj last (state_set (state_list ?s ?as))\n           (valid_states ?PROB)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>slist_1 slist_2.\n                       slist_1 \\<in> state_set (state_list ?s ?as) \\<and>\n                       slist_2 \\<in> state_set (state_list ?s ?as) \\<and>\n                       last slist_1 = last slist_2 \\<and>\n                       length slist_1 \\<noteq> length slist_2\n\ngoal (1 subgoal):\n 1. (\\<And>slist_1 slist_2.\n        \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n         slist_2 \\<in> state_set (state_list s as);\n         last slist_1 = last slist_2;\n         length slist_1 \\<noteq> length slist_2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n  length slist_1 \\<noteq> length slist_2\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n  length slist_1 \\<noteq> length slist_2", "show ?thesis"], ["proof (prove)\nusing this:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n  length slist_1 \\<noteq> length slist_2\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "proof (cases as)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n     slist_2 \\<in> state_set (state_list s as); last slist_1 = last slist_2;\n     length slist_1 \\<noteq> length slist_2; as = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as1 as2 as3.\n                         as1 @ as2 @ as3 = as \\<and>\n                         exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                         as2 \\<noteq> []\n 2. \\<And>a list.\n       \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n        slist_2 \\<in> state_set (state_list s as);\n        last slist_1 = last slist_2; length slist_1 \\<noteq> length slist_2;\n        as = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as1 as2 as3.\n                            as1 @ as2 @ as3 = as \\<and>\n                            exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                            as2 \\<noteq> []", "case Nil"], ["proof (state)\nthis:\n  as = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n     slist_2 \\<in> state_set (state_list s as); last slist_1 = last slist_2;\n     length slist_1 \\<noteq> length slist_2; as = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as1 as2 as3.\n                         as1 @ as2 @ as3 = as \\<and>\n                         exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                         as2 \\<noteq> []\n 2. \\<And>a list.\n       \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n        slist_2 \\<in> state_set (state_list s as);\n        last slist_1 = last slist_2; length slist_1 \\<noteq> length slist_2;\n        as = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as1 as2 as3.\n                            as1 @ as2 @ as3 = as \\<and>\n                            exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                            as2 \\<noteq> []", "text \\<open> 4th assumption is violated in the 'Nil' case. \\<close>"], ["proof (state)\nthis:\n  as = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n     slist_2 \\<in> state_set (state_list s as); last slist_1 = last slist_2;\n     length slist_1 \\<noteq> length slist_2; as = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as1 as2 as3.\n                         as1 @ as2 @ as3 = as \\<and>\n                         exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                         as2 \\<noteq> []\n 2. \\<And>a list.\n       \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n        slist_2 \\<in> state_set (state_list s as);\n        last slist_1 = last slist_2; length slist_1 \\<noteq> length slist_2;\n        as = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as1 as2 as3.\n                            as1 @ as2 @ as3 = as \\<and>\n                            exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                            as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  as = []", "have \"\\<not>(2 ^ card (fmdom' s) - 1 < length as)\""], ["proof (prove)\nusing this:\n  as = []\n\ngoal (1 subgoal):\n 1. \\<not> 2 ^ card (fmdom' s) - 1 < length as", "using Nil"], ["proof (prove)\nusing this:\n  as = []\n  as = []\n\ngoal (1 subgoal):\n 1. \\<not> 2 ^ card (fmdom' s) - 1 < length as", "by simp"], ["proof (state)\nthis:\n  \\<not> 2 ^ card (fmdom' s) - 1 < length as\n\ngoal (2 subgoals):\n 1. \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n     slist_2 \\<in> state_set (state_list s as); last slist_1 = last slist_2;\n     length slist_1 \\<noteq> length slist_2; as = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as1 as2 as3.\n                         as1 @ as2 @ as3 = as \\<and>\n                         exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                         as2 \\<noteq> []\n 2. \\<And>a list.\n       \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n        slist_2 \\<in> state_set (state_list s as);\n        last slist_1 = last slist_2; length slist_1 \\<noteq> length slist_2;\n        as = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as1 as2 as3.\n                            as1 @ as2 @ as3 = as \\<and>\n                            exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                            as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  \\<not> 2 ^ card (fmdom' s) - 1 < length as", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> 2 ^ card (fmdom' s) - 1 < length as\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "using assms(4)"], ["proof (prove)\nusing this:\n  \\<not> 2 ^ card (fmdom' s) - 1 < length as\n  2 ^ card (fmdom' s) - 1 < length as\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  \\<exists>as1 as2 as3.\n     as1 @ as2 @ as3 = as \\<and>\n     exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n        slist_2 \\<in> state_set (state_list s as);\n        last slist_1 = last slist_2; length slist_1 \\<noteq> length slist_2;\n        as = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as1 as2 as3.\n                            as1 @ as2 @ as3 = as \\<and>\n                            exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                            as2 \\<noteq> []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n        slist_2 \\<in> state_set (state_list s as);\n        last slist_1 = last slist_2; length slist_1 \\<noteq> length slist_2;\n        as = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as1 as2 as3.\n                            as1 @ as2 @ as3 = as \\<and>\n                            exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                            as2 \\<noteq> []", "case (Cons a list)"], ["proof (state)\nthis:\n  as = a # list\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n        slist_2 \\<in> state_set (state_list s as);\n        last slist_1 = last slist_2; length slist_1 \\<noteq> length slist_2;\n        as = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as1 as2 as3.\n                            as1 @ as2 @ as3 = as \\<and>\n                            exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                            as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  as = a # list", "have \"as \\<noteq> []\""], ["proof (prove)\nusing this:\n  as = a # list\n\ngoal (1 subgoal):\n 1. as \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n        slist_2 \\<in> state_set (state_list s as);\n        last slist_1 = last slist_2; length slist_1 \\<noteq> length slist_2;\n        as = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as1 as2 as3.\n                            as1 @ as2 @ as3 = as \\<and>\n                            exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                            as2 \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n        slist_2 \\<in> state_set (state_list s as);\n        last slist_1 = last slist_2; length slist_1 \\<noteq> length slist_2;\n        as = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as1 as2 as3.\n                            as1 @ as2 @ as3 = as \\<and>\n                            exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                            as2 \\<noteq> []", "have \"slist_1 \\<noteq> []\" \"slist_2 \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. slist_1 \\<noteq> [] &&& slist_2 \\<noteq> []", "using 6(1, 2) NIL_NOTIN_stateset"], ["proof (prove)\nusing this:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  [] \\<notin> state_set ?X\n\ngoal (1 subgoal):\n 1. slist_1 \\<noteq> [] &&& slist_2 \\<noteq> []", "by blast+"], ["proof (state)\nthis:\n  slist_1 \\<noteq> []\n  slist_2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n        slist_2 \\<in> state_set (state_list s as);\n        last slist_1 = last slist_2; length slist_1 \\<noteq> length slist_2;\n        as = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as1 as2 as3.\n                            as1 @ as2 @ as3 = as \\<and>\n                            exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                            as2 \\<noteq> []", "ultimately"], ["proof (chain)\npicking this:\n  as \\<noteq> []\n  slist_1 \\<noteq> []\n  slist_2 \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  as \\<noteq> []\n  slist_1 \\<noteq> []\n  slist_2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "using assms(2, 3) 6(1, 2, 3, 4) eq_last_state_imp_append_nempty_as"], ["proof (prove)\nusing this:\n  as \\<noteq> []\n  slist_1 \\<noteq> []\n  slist_2 \\<noteq> []\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n  length slist_1 \\<noteq> length slist_2\n  \\<lbrakk>?as \\<noteq> []; ?s \\<in> valid_states ?PROB;\n   ?as \\<in> valid_plans ?PROB; ?slist_1.0 \\<noteq> [];\n   ?slist_2.0 \\<noteq> []; ?slist_1.0 \\<in> state_set (state_list ?s ?as);\n   ?slist_2.0 \\<in> state_set (state_list ?s ?as);\n   length ?slist_1.0 \\<noteq> length ?slist_2.0;\n   last ?slist_1.0 = last ?slist_2.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as1 as2 as3.\n                       as1 @ as2 @ as3 = ?as \\<and>\n                       exec_plan ?s (as1 @ as2) = exec_plan ?s as1 \\<and>\n                       as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>as1 as2 as3.\n     as1 @ as2 @ as3 = as \\<and>\n     exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>as1 as2 as3.\n     as1 @ as2 @ as3 = as \\<and>\n     exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemma_2_prob_dom:\n  fixes PROB and as :: \"('a action) list\" and s :: \"'a state\"\n  assumes \"finite PROB\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"(length as > (2 ^ (card (prob_dom PROB))) - 1)\"\n  shows \"(\\<exists>as1 as2 as3.\n    (as1 @ as2 @ as3 = as)\n    \\<and> (exec_plan s (as1 @ as2) = exec_plan s as1)\n    \\<and> \\<not>(as2 = [])\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "have \"prob_dom PROB = fmdom' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_dom PROB = fmdom' s", "using assms(2) valid_states_def"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  valid_states ?prob \\<equiv> {s. fmdom' s = prob_dom ?prob}\n\ngoal (1 subgoal):\n 1. prob_dom PROB = fmdom' s", "by fast"], ["proof (state)\nthis:\n  prob_dom PROB = fmdom' s\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  prob_dom PROB = fmdom' s", "have \"2 ^ card (fmdom' s) - 1 < length as\""], ["proof (prove)\nusing this:\n  prob_dom PROB = fmdom' s\n\ngoal (1 subgoal):\n 1. 2 ^ card (fmdom' s) - 1 < length as", "using assms(4)"], ["proof (prove)\nusing this:\n  prob_dom PROB = fmdom' s\n  2 ^ card (prob_dom PROB) - 1 < length as\n\ngoal (1 subgoal):\n 1. 2 ^ card (fmdom' s) - 1 < length as", "by argo"], ["proof (state)\nthis:\n  2 ^ card (fmdom' s) - 1 < length as\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  2 ^ card (fmdom' s) - 1 < length as", "show ?thesis"], ["proof (prove)\nusing this:\n  2 ^ card (fmdom' s) - 1 < length as\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "using assms(1, 2, 3) lemma_2"], ["proof (prove)\nusing this:\n  2 ^ card (fmdom' s) - 1 < length as\n  finite PROB\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<lbrakk>finite ?PROB; ?s \\<in> valid_states ?PROB;\n   ?as \\<in> valid_plans ?PROB;\n   2 ^ card (fmdom' ?s) - 1 < length ?as\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as1 as2 as3.\n                       as1 @ as2 @ as3 = ?as \\<and>\n                       exec_plan ?s (as1 @ as2) = exec_plan ?s as1 \\<and>\n                       as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  \\<exists>as1 as2 as3.\n     as1 @ as2 @ as3 = as \\<and>\n     exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE type for `s` had to be fixed (type mismatch in obtain statement).\\<close>\n\\<comment> \\<open>NOTE type for `as1`, `as2` and `as3` had to be fixed (due type mismatch on `as1` in\n`cycle\\_removal\\_lemma`)\\<close>"], ["", "lemma lemma_3:\n  fixes PROB :: \"'a problem\" and s :: \"'a state\"\n  assumes \"finite PROB\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"(length as > (2 ^ (card (prob_dom PROB)) - 1))\"\n  shows \"(\\<exists>as'.\n    (exec_plan s as = exec_plan s as')\n    \\<and> (length as' < length as)\n    \\<and> (subseq as' as)\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "have \"prob_dom PROB = fmdom' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_dom PROB = fmdom' s", "using assms(2) valid_states_def"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  valid_states ?prob \\<equiv> {s. fmdom' s = prob_dom ?prob}\n\ngoal (1 subgoal):\n 1. prob_dom PROB = fmdom' s", "by fast"], ["proof (state)\nthis:\n  prob_dom PROB = fmdom' s\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "then"], ["proof (chain)\npicking this:\n  prob_dom PROB = fmdom' s", "have \"2 ^ card (fmdom' s) - 1 < length as\""], ["proof (prove)\nusing this:\n  prob_dom PROB = fmdom' s\n\ngoal (1 subgoal):\n 1. 2 ^ card (fmdom' s) - 1 < length as", "using assms(4)"], ["proof (prove)\nusing this:\n  prob_dom PROB = fmdom' s\n  2 ^ card (prob_dom PROB) - 1 < length as\n\ngoal (1 subgoal):\n 1. 2 ^ card (fmdom' s) - 1 < length as", "by argo"], ["proof (state)\nthis:\n  2 ^ card (fmdom' s) - 1 < length as\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "then"], ["proof (chain)\npicking this:\n  2 ^ card (fmdom' s) - 1 < length as", "obtain as1 as2 as3 :: \"'a action list\" where 1:\n    \"as1 @ as2 @ as3 = as\" \"exec_plan s (as1 @ as2) = exec_plan s as1\" \"as2 \\<noteq> []\""], ["proof (prove)\nusing this:\n  2 ^ card (fmdom' s) - 1 < length as\n\ngoal (1 subgoal):\n 1. (\\<And>as1 as2 as3.\n        \\<lbrakk>as1 @ as2 @ as3 = as;\n         exec_plan s (as1 @ as2) = exec_plan s as1; as2 \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1, 2, 3) lemma_2"], ["proof (prove)\nusing this:\n  2 ^ card (fmdom' s) - 1 < length as\n  finite PROB\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<lbrakk>finite ?PROB; ?s \\<in> valid_states ?PROB;\n   ?as \\<in> valid_plans ?PROB;\n   2 ^ card (fmdom' ?s) - 1 < length ?as\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as1 as2 as3.\n                       as1 @ as2 @ as3 = ?as \\<and>\n                       exec_plan ?s (as1 @ as2) = exec_plan ?s as1 \\<and>\n                       as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>as1 as2 as3.\n        \\<lbrakk>as1 @ as2 @ as3 = as;\n         exec_plan s (as1 @ as2) = exec_plan s as1; as2 \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  as1 @ as2 @ as3 = as\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "have 2: \"exec_plan s (as1 @ as3) = exec_plan s (as1 @ as2 @ as3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s (as1 @ as3) = exec_plan s (as1 @ as2 @ as3)", "using 1 cycle_removal_lemma"], ["proof (prove)\nusing this:\n  as1 @ as2 @ as3 = as\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as2 \\<noteq> []\n  exec_plan ?s (?as1.0 @ ?as2.0) = exec_plan ?s ?as1.0 \\<Longrightarrow>\n  exec_plan ?s (?as1.0 @ ?as2.0 @ ?as3.0) = exec_plan ?s (?as1.0 @ ?as3.0)\n\ngoal (1 subgoal):\n 1. exec_plan s (as1 @ as3) = exec_plan s (as1 @ as2 @ as3)", "by fastforce"], ["proof (state)\nthis:\n  exec_plan s (as1 @ as3) = exec_plan s (as1 @ as2 @ as3)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "let ?as' = \"as1 @ as3\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "have \"exec_plan s as = exec_plan s ?as'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s as = exec_plan s (as1 @ as3)", "using 1 2"], ["proof (prove)\nusing this:\n  as1 @ as2 @ as3 = as\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as2 \\<noteq> []\n  exec_plan s (as1 @ as3) = exec_plan s (as1 @ as2 @ as3)\n\ngoal (1 subgoal):\n 1. exec_plan s as = exec_plan s (as1 @ as3)", "by auto"], ["proof (state)\nthis:\n  exec_plan s as = exec_plan s (as1 @ as3)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "moreover"], ["proof (state)\nthis:\n  exec_plan s as = exec_plan s (as1 @ as3)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "have \"length ?as' < length as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (as1 @ as3) < length as", "using 1 nempty_list_append_length_add"], ["proof (prove)\nusing this:\n  as1 @ as2 @ as3 = as\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as2 \\<noteq> []\n  ?l2.0 \\<noteq> [] \\<Longrightarrow>\n  length (?l1.0 @ ?l3.0) < length (?l1.0 @ ?l2.0 @ ?l3.0)\n\ngoal (1 subgoal):\n 1. length (as1 @ as3) < length as", "by blast"], ["proof (state)\nthis:\n  length (as1 @ as3) < length as\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "moreover"], ["proof (state)\nthis:\n  length (as1 @ as3) < length as\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "have \"subseq ?as' as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (as1 @ as3) as", "using 1 subseq_append'"], ["proof (prove)\nusing this:\n  as1 @ as2 @ as3 = as\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as2 \\<noteq> []\n  subseq (?zs @ ?xs) (?zs @ ?ys) = subseq ?xs ?ys\n\ngoal (1 subgoal):\n 1. subseq (as1 @ as3) as", "by blast"], ["proof (state)\nthis:\n  subseq (as1 @ as3) as\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "ultimately"], ["proof (chain)\npicking this:\n  exec_plan s as = exec_plan s (as1 @ as3)\n  length (as1 @ as3) < length as\n  subseq (as1 @ as3) as", "show \"(\\<exists>as'.\n      (exec_plan s as = exec_plan s as') \\<and> (length as' < length as) \\<and> (subseq as' as))\""], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s (as1 @ as3)\n  length (as1 @ as3) < length as\n  subseq (as1 @ as3) as\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "by blast"], ["proof (state)\nthis:\n  \\<exists>as'.\n     exec_plan s as = exec_plan s as' \\<and>\n     length as' < length as \\<and> subseq as' as\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>TODO unwrap meson step.\\<close>"], ["", "lemma sublist_valid_is_valid:\n  fixes as' as PROB\n  assumes \"(as \\<in> valid_plans PROB)\" \"(subseq as' as)\"\n  shows \"as' \\<in> valid_plans PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as' \\<in> valid_plans PROB", "using assms"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  subseq as' as\n\ngoal (1 subgoal):\n 1. as' \\<in> valid_plans PROB", "by (simp add: valid_plans_def) (meson dual_order.trans fset_of_list_subset sublist_subset)\n\n\n\\<comment> \\<open>NOTE type of 's' had to be fixed (type mismatch in goal).\\<close>"], ["", "theorem main_lemma:\n  fixes PROB :: \"'a problem\" and as s\n  assumes \"finite PROB\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"(\\<exists>as'.\n    (exec_plan s as = exec_plan s as')\n    \\<and> (subseq as' as)\n    \\<and> (length  as' \\<le> (2 ^ (card (prob_dom PROB))) - 1)\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "proof (cases \"length as \\<le> (2 ^ (card (prob_dom PROB))) - 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1\n 2. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "case True"], ["proof (state)\nthis:\n  length as \\<le> 2 ^ card (prob_dom PROB) - 1\n\ngoal (2 subgoals):\n 1. length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1\n 2. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "then"], ["proof (chain)\npicking this:\n  length as \\<le> 2 ^ card (prob_dom PROB) - 1", "have \"exec_plan s as = exec_plan s as\""], ["proof (prove)\nusing this:\n  length as \\<le> 2 ^ card (prob_dom PROB) - 1\n\ngoal (1 subgoal):\n 1. exec_plan s as = exec_plan s as", "by simp"], ["proof (state)\nthis:\n  exec_plan s as = exec_plan s as\n\ngoal (2 subgoals):\n 1. length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1\n 2. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "then"], ["proof (chain)\npicking this:\n  exec_plan s as = exec_plan s as", "have \"subseq as as\""], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s as\n\ngoal (1 subgoal):\n 1. subseq as as", "by auto"], ["proof (state)\nthis:\n  subseq as as\n\ngoal (2 subgoals):\n 1. length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1\n 2. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "then"], ["proof (chain)\npicking this:\n  subseq as as", "have \"length as \\<le> (2^(card (prob_dom PROB)) - 1)\""], ["proof (prove)\nusing this:\n  subseq as as\n\ngoal (1 subgoal):\n 1. length as \\<le> 2 ^ card (prob_dom PROB) - 1", "using True"], ["proof (prove)\nusing this:\n  subseq as as\n  length as \\<le> 2 ^ card (prob_dom PROB) - 1\n\ngoal (1 subgoal):\n 1. length as \\<le> 2 ^ card (prob_dom PROB) - 1", "by auto"], ["proof (state)\nthis:\n  length as \\<le> 2 ^ card (prob_dom PROB) - 1\n\ngoal (2 subgoals):\n 1. length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1\n 2. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "then"], ["proof (chain)\npicking this:\n  length as \\<le> 2 ^ card (prob_dom PROB) - 1", "show ?thesis"], ["proof (prove)\nusing this:\n  length as \\<le> 2 ^ card (prob_dom PROB) - 1\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "by blast"], ["proof (state)\nthis:\n  \\<exists>as'.\n     exec_plan s as = exec_plan s as' \\<and>\n     subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1\n\ngoal (1 subgoal):\n 1. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "case False"], ["proof (state)\nthis:\n  \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1\n\ngoal (1 subgoal):\n 1. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "then"], ["proof (chain)\npicking this:\n  \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1", "have \"length as > (2 ^ (card (prob_dom PROB))) - 1\""], ["proof (prove)\nusing this:\n  \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1\n\ngoal (1 subgoal):\n 1. 2 ^ card (prob_dom PROB) - 1 < length as", "using False"], ["proof (prove)\nusing this:\n  \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1\n  \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1\n\ngoal (1 subgoal):\n 1. 2 ^ card (prob_dom PROB) - 1 < length as", "by auto"], ["proof (state)\nthis:\n  2 ^ card (prob_dom PROB) - 1 < length as\n\ngoal (1 subgoal):\n 1. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "then"], ["proof (chain)\npicking this:\n  2 ^ card (prob_dom PROB) - 1 < length as", "obtain as' where 1:\n    \"exec_plan s as = exec_plan s as'\" \"length as' < length as\" \"subseq as' as\""], ["proof (prove)\nusing this:\n  2 ^ card (prob_dom PROB) - 1 < length as\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        \\<lbrakk>exec_plan s as = exec_plan s as'; length as' < length as;\n         subseq as' as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms lemma_3"], ["proof (prove)\nusing this:\n  2 ^ card (prob_dom PROB) - 1 < length as\n  finite PROB\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<lbrakk>finite ?PROB; ?s \\<in> valid_states ?PROB;\n   ?as \\<in> valid_plans ?PROB;\n   2 ^ card (prob_dom ?PROB) - 1 < length ?as\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as'.\n                       exec_plan ?s ?as = exec_plan ?s as' \\<and>\n                       length as' < length ?as \\<and> subseq as' ?as\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        \\<lbrakk>exec_plan s as = exec_plan s as'; length as' < length as;\n         subseq as' as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  exec_plan s as = exec_plan s as'\n  length as' < length as\n  subseq as' as\n\ngoal (1 subgoal):\n 1. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "{"], ["proof (state)\nthis:\n  exec_plan s as = exec_plan s as'\n  length as' < length as\n  subseq as' as\n\ngoal (1 subgoal):\n 1. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "assume \"exec_plan s as = exec_plan s p\" \"subseq p as\"\n      \"2 ^ card (prob_dom PROB) - 1 < length p\""], ["proof (state)\nthis:\n  exec_plan s as = exec_plan s p\n  subseq p as\n  2 ^ card (prob_dom PROB) - 1 < length p\n\ngoal (1 subgoal):\n 1. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "then"], ["proof (chain)\npicking this:\n  exec_plan s as = exec_plan s p\n  subseq p as\n  2 ^ card (prob_dom PROB) - 1 < length p", "have \"(\\<exists>p'. (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and> length p' < length p)\""], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s p\n  subseq p as\n  2 ^ card (prob_dom PROB) - 1 < length p\n\ngoal (1 subgoal):\n 1. \\<exists>p'.\n       (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n       length p' < length p", "using assms(1, 2, 3) lemma_3 sublist_valid_is_valid"], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s p\n  subseq p as\n  2 ^ card (prob_dom PROB) - 1 < length p\n  finite PROB\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<lbrakk>finite ?PROB; ?s \\<in> valid_states ?PROB;\n   ?as \\<in> valid_plans ?PROB;\n   2 ^ card (prob_dom ?PROB) - 1 < length ?as\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as'.\n                       exec_plan ?s ?as = exec_plan ?s as' \\<and>\n                       length as' < length ?as \\<and> subseq as' ?as\n  \\<lbrakk>?as \\<in> valid_plans ?PROB; subseq ?as' ?as\\<rbrakk>\n  \\<Longrightarrow> ?as' \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. \\<exists>p'.\n       (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n       length p' < length p", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>p'.\n     (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n     length p' < length p\n\ngoal (1 subgoal):\n 1. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "}"], ["proof (state)\nthis:\n  \\<lbrakk>exec_plan s as = exec_plan s ?p2; subseq ?p2 as;\n   2 ^ card (prob_dom PROB) - 1 < length ?p2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p'.\n                       (exec_plan s as = exec_plan s p' \\<and>\n                        subseq p' as) \\<and>\n                       length p' < length ?p2\n\ngoal (1 subgoal):\n 1. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>exec_plan s as = exec_plan s ?p2; subseq ?p2 as;\n   2 ^ card (prob_dom PROB) - 1 < length ?p2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p'.\n                       (exec_plan s as = exec_plan s p' \\<and>\n                        subseq p' as) \\<and>\n                       length p' < length ?p2", "have \"\\<forall>p. exec_plan s as = exec_plan s p \\<and> subseq p as \\<longrightarrow>\n      (\\<exists>p'. (exec_plan s as = exec_plan s p' \\<and> subseq p' as)\n      \\<and> length p' \\<le> 2 ^ card (prob_dom PROB) - 1)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>exec_plan s as = exec_plan s ?p2; subseq ?p2 as;\n   2 ^ card (prob_dom PROB) - 1 < length ?p2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p'.\n                       (exec_plan s as = exec_plan s p' \\<and>\n                        subseq p' as) \\<and>\n                       length p' < length ?p2\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       exec_plan s as = exec_plan s p \\<and> subseq p as \\<longrightarrow>\n       (\\<exists>p'.\n           (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n           length p' \\<le> 2 ^ card (prob_dom PROB) - 1)", "using general_theorem[where\n        P = \"\\<lambda>(as'' :: 'a action list). (exec_plan s as = exec_plan s as'') \\<and> subseq as'' as\"\n        and l = \"(2 ^ (card (prob_dom (PROB ::'a problem)))) - 1\" and f = length]"], ["proof (prove)\nusing this:\n  \\<lbrakk>exec_plan s as = exec_plan s ?p2; subseq ?p2 as;\n   2 ^ card (prob_dom PROB) - 1 < length ?p2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p'.\n                       (exec_plan s as = exec_plan s p' \\<and>\n                        subseq p' as) \\<and>\n                       length p' < length ?p2\n  \\<forall>p.\n     (exec_plan s as = exec_plan s p \\<and> subseq p as) \\<and>\n     2 ^ card (prob_dom PROB) - 1 < length p \\<longrightarrow>\n     (\\<exists>p'.\n         (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n         length p' < length p) \\<Longrightarrow>\n  \\<forall>p.\n     exec_plan s as = exec_plan s p \\<and> subseq p as \\<longrightarrow>\n     (\\<exists>p'.\n         (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n         length p' \\<le> 2 ^ card (prob_dom PROB) - 1)\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       exec_plan s as = exec_plan s p \\<and> subseq p as \\<longrightarrow>\n       (\\<exists>p'.\n           (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n           length p' \\<le> 2 ^ card (prob_dom PROB) - 1)", "by blast"], ["proof (state)\nthis:\n  \\<forall>p.\n     exec_plan s as = exec_plan s p \\<and> subseq p as \\<longrightarrow>\n     (\\<exists>p'.\n         (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n         length p' \\<le> 2 ^ card (prob_dom PROB) - 1)\n\ngoal (1 subgoal):\n 1. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "then"], ["proof (chain)\npicking this:\n  \\<forall>p.\n     exec_plan s as = exec_plan s p \\<and> subseq p as \\<longrightarrow>\n     (\\<exists>p'.\n         (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n         length p' \\<le> 2 ^ card (prob_dom PROB) - 1)", "obtain p' where\n    \"exec_plan s as = exec_plan s p'\" \"subseq p' as\" \"length p' \\<le> 2 ^ card (prob_dom PROB) - 1\""], ["proof (prove)\nusing this:\n  \\<forall>p.\n     exec_plan s as = exec_plan s p \\<and> subseq p as \\<longrightarrow>\n     (\\<exists>p'.\n         (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n         length p' \\<le> 2 ^ card (prob_dom PROB) - 1)\n\ngoal (1 subgoal):\n 1. (\\<And>p'.\n        \\<lbrakk>exec_plan s as = exec_plan s p'; subseq p' as;\n         length p' \\<le> 2 ^ card (prob_dom PROB) - 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  exec_plan s as = exec_plan s p'\n  subseq p' as\n  length p' \\<le> 2 ^ card (prob_dom PROB) - 1\n\ngoal (1 subgoal):\n 1. \\<not> length as \\<le> 2 ^ card (prob_dom PROB) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "then"], ["proof (chain)\npicking this:\n  exec_plan s as = exec_plan s p'\n  subseq p' as\n  length p' \\<le> 2 ^ card (prob_dom PROB) - 1", "show ?thesis"], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s p'\n  subseq p' as\n  length p' \\<le> 2 ^ card (prob_dom PROB) - 1\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "using sublist_refl"], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s p'\n  subseq p' as\n  length p' \\<le> 2 ^ card (prob_dom PROB) - 1\n  subseq ?l ?l\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1", "by blast"], ["proof (state)\nthis:\n  \\<exists>as'.\n     exec_plan s as = exec_plan s as' \\<and>\n     subseq as' as \\<and> length as' \\<le> 2 ^ card (prob_dom PROB) - 1\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Reachable States\"\n\n\n\\<comment> \\<open>NOTE shortened to 'reachable\\_s'\\<close>"], ["", "definition reachable_s where\n  \"reachable_s PROB s \\<equiv> {exec_plan s as | as. as \\<in> valid_plans PROB}\"\n\n\n\\<comment> \\<open>NOTE types for `s` and `PROB` had to be fixed (type mismatch in goal).\\<close>"], ["", "lemma valid_as_valid_exec:\n  fixes as and s :: \"'a state\" and PROB :: \"'a problem\"\n  assumes \"(as \\<in> valid_plans PROB)\" \"(s \\<in> valid_states PROB)\"\n  shows \"(exec_plan s as \\<in> valid_states PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s as \\<in> valid_states PROB", "using assms"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  s \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. exec_plan s as \\<in> valid_states PROB", "proof (induction as arbitrary: s PROB)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>[] \\<in> valid_plans PROB;\n        s \\<in> valid_states PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] \\<in> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s \\<in> valid_states PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s as \\<in> valid_states PROB;\n        a # as \\<in> valid_plans PROB; s \\<in> valid_states PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (a # as) \\<in> valid_states PROB", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>as \\<in> valid_plans ?PROB; ?s \\<in> valid_states ?PROB\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s as \\<in> valid_states ?PROB\n  a # as \\<in> valid_plans PROB\n  s \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>[] \\<in> valid_plans PROB;\n        s \\<in> valid_states PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] \\<in> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s \\<in> valid_states PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s as \\<in> valid_states PROB;\n        a # as \\<in> valid_plans PROB; s \\<in> valid_states PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (a # as) \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>as \\<in> valid_plans ?PROB; ?s \\<in> valid_states ?PROB\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s as \\<in> valid_states ?PROB\n  a # as \\<in> valid_plans PROB\n  s \\<in> valid_states PROB", "have \"a \\<in> PROB\""], ["proof (prove)\nusing this:\n  \\<lbrakk>as \\<in> valid_plans ?PROB; ?s \\<in> valid_states ?PROB\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s as \\<in> valid_states ?PROB\n  a # as \\<in> valid_plans PROB\n  s \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. a \\<in> PROB", "using valid_plan_valid_head"], ["proof (prove)\nusing this:\n  \\<lbrakk>as \\<in> valid_plans ?PROB; ?s \\<in> valid_states ?PROB\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s as \\<in> valid_states ?PROB\n  a # as \\<in> valid_plans PROB\n  s \\<in> valid_states PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow> ?h \\<in> ?PROB\n\ngoal (1 subgoal):\n 1. a \\<in> PROB", "by metis"], ["proof (state)\nthis:\n  a \\<in> PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>[] \\<in> valid_plans PROB;\n        s \\<in> valid_states PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] \\<in> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s \\<in> valid_states PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s as \\<in> valid_states PROB;\n        a # as \\<in> valid_plans PROB; s \\<in> valid_states PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (a # as) \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  a \\<in> PROB", "have \"state_succ s a \\<in> valid_states PROB\""], ["proof (prove)\nusing this:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. state_succ s a \\<in> valid_states PROB", "using Cons.prems(2) valid_action_valid_succ"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  s \\<in> valid_states PROB\n  \\<lbrakk>?h \\<in> ?PROB; ?s \\<in> valid_states ?PROB\\<rbrakk>\n  \\<Longrightarrow> state_succ ?s ?h \\<in> valid_states ?PROB\n\ngoal (1 subgoal):\n 1. state_succ s a \\<in> valid_states PROB", "by blast"], ["proof (state)\nthis:\n  state_succ s a \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>[] \\<in> valid_plans PROB;\n        s \\<in> valid_states PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] \\<in> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s \\<in> valid_states PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s as \\<in> valid_states PROB;\n        a # as \\<in> valid_plans PROB; s \\<in> valid_states PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (a # as) \\<in> valid_states PROB", "moreover"], ["proof (state)\nthis:\n  state_succ s a \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>[] \\<in> valid_plans PROB;\n        s \\<in> valid_states PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] \\<in> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s \\<in> valid_states PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s as \\<in> valid_states PROB;\n        a # as \\<in> valid_plans PROB; s \\<in> valid_states PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (a # as) \\<in> valid_states PROB", "have \"as \\<in> valid_plans PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "using Cons.prems(1) valid_plan_valid_tail"], ["proof (prove)\nusing this:\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  ?as \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "by fast"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       \\<lbrakk>[] \\<in> valid_plans PROB;\n        s \\<in> valid_states PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] \\<in> valid_states PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s \\<in> valid_states PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s as \\<in> valid_states PROB;\n        a # as \\<in> valid_plans PROB; s \\<in> valid_states PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (a # as) \\<in> valid_states PROB", "ultimately"], ["proof (chain)\npicking this:\n  state_succ s a \\<in> valid_states PROB\n  as \\<in> valid_plans PROB", "show ?case"], ["proof (prove)\nusing this:\n  state_succ s a \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. exec_plan s (a # as) \\<in> valid_states PROB", "using Cons.IH"], ["proof (prove)\nusing this:\n  state_succ s a \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<lbrakk>as \\<in> valid_plans ?PROB; ?s \\<in> valid_states ?PROB\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s as \\<in> valid_states ?PROB\n\ngoal (1 subgoal):\n 1. exec_plan s (a # as) \\<in> valid_states PROB", "by force"], ["proof (state)\nthis:\n  exec_plan s (a # as) \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<And>s PROB.\n       \\<lbrakk>[] \\<in> valid_plans PROB;\n        s \\<in> valid_states PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] \\<in> valid_states PROB", "qed simp"], ["", "lemma exec_plan_fdom_subset:\n  fixes as s PROB\n  assumes \"(as \\<in> valid_plans PROB)\"\n  shows \"(fmdom' (exec_plan s as) \\<subseteq> (fmdom' s \\<union> prob_dom PROB))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (exec_plan s as) \\<subseteq> fmdom' s \\<union> prob_dom PROB", "using assms"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. fmdom' (exec_plan s as) \\<subseteq> fmdom' s \\<union> prob_dom PROB", "proof (induction as arbitrary: s PROB)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       [] \\<in> valid_plans PROB \\<Longrightarrow>\n       fmdom' (exec_plan s []) \\<subseteq> fmdom' s \\<union> prob_dom PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   as \\<in> valid_plans PROB \\<Longrightarrow>\n                   fmdom' (exec_plan s as)\n                   \\<subseteq> fmdom' s \\<union> prob_dom PROB;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> fmdom' (exec_plan s (a # as))\n                         \\<subseteq> fmdom' s \\<union> prob_dom PROB", "case (Cons a as)"], ["proof (state)\nthis:\n  as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  fmdom' (exec_plan ?s as) \\<subseteq> fmdom' ?s \\<union> prob_dom ?PROB\n  a # as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       [] \\<in> valid_plans PROB \\<Longrightarrow>\n       fmdom' (exec_plan s []) \\<subseteq> fmdom' s \\<union> prob_dom PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   as \\<in> valid_plans PROB \\<Longrightarrow>\n                   fmdom' (exec_plan s as)\n                   \\<subseteq> fmdom' s \\<union> prob_dom PROB;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> fmdom' (exec_plan s (a # as))\n                         \\<subseteq> fmdom' s \\<union> prob_dom PROB", "have \"as \\<in> valid_plans PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "using Cons.prems valid_plan_valid_tail"], ["proof (prove)\nusing this:\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  ?as \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "by fast"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       [] \\<in> valid_plans PROB \\<Longrightarrow>\n       fmdom' (exec_plan s []) \\<subseteq> fmdom' s \\<union> prob_dom PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   as \\<in> valid_plans PROB \\<Longrightarrow>\n                   fmdom' (exec_plan s as)\n                   \\<subseteq> fmdom' s \\<union> prob_dom PROB;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> fmdom' (exec_plan s (a # as))\n                         \\<subseteq> fmdom' s \\<union> prob_dom PROB", "then"], ["proof (chain)\npicking this:\n  as \\<in> valid_plans PROB", "have \"fmdom' (exec_plan (state_succ s a) as) \\<subseteq> fmdom' (state_succ s a) \\<union> prob_dom PROB\""], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. fmdom' (exec_plan (state_succ s a) as)\n    \\<subseteq> fmdom' (state_succ s a) \\<union> prob_dom PROB", "using Cons.IH[of _ \"state_succ s a\"]"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  fmdom' (exec_plan (state_succ s a) as)\n  \\<subseteq> fmdom' (state_succ s a) \\<union> prob_dom ?PROB\n\ngoal (1 subgoal):\n 1. fmdom' (exec_plan (state_succ s a) as)\n    \\<subseteq> fmdom' (state_succ s a) \\<union> prob_dom PROB", "by simp\n      \\<comment> \\<open>TODO unwrap metis proofs.\\<close>"], ["proof (state)\nthis:\n  fmdom' (exec_plan (state_succ s a) as)\n  \\<subseteq> fmdom' (state_succ s a) \\<union> prob_dom PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       [] \\<in> valid_plans PROB \\<Longrightarrow>\n       fmdom' (exec_plan s []) \\<subseteq> fmdom' s \\<union> prob_dom PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   as \\<in> valid_plans PROB \\<Longrightarrow>\n                   fmdom' (exec_plan s as)\n                   \\<subseteq> fmdom' s \\<union> prob_dom PROB;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> fmdom' (exec_plan s (a # as))\n                         \\<subseteq> fmdom' s \\<union> prob_dom PROB", "moreover"], ["proof (state)\nthis:\n  fmdom' (exec_plan (state_succ s a) as)\n  \\<subseteq> fmdom' (state_succ s a) \\<union> prob_dom PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       [] \\<in> valid_plans PROB \\<Longrightarrow>\n       fmdom' (exec_plan s []) \\<subseteq> fmdom' s \\<union> prob_dom PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   as \\<in> valid_plans PROB \\<Longrightarrow>\n                   fmdom' (exec_plan s as)\n                   \\<subseteq> fmdom' s \\<union> prob_dom PROB;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> fmdom' (exec_plan s (a # as))\n                         \\<subseteq> fmdom' s \\<union> prob_dom PROB", "have \"fmdom' s \\<union> fmdom' (snd a) \\<union> prob_dom PROB = fmdom' s \\<union> prob_dom PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' s \\<union> fmdom' (snd a) \\<union> prob_dom PROB =\n    fmdom' s \\<union> prob_dom PROB", "by (metis\n        Cons.prems FDOM_eff_subset_prob_dom_pair sup_absorb2 sup_assoc valid_plan_valid_head)"], ["proof (state)\nthis:\n  fmdom' s \\<union> fmdom' (snd a) \\<union> prob_dom PROB =\n  fmdom' s \\<union> prob_dom PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB.\n       [] \\<in> valid_plans PROB \\<Longrightarrow>\n       fmdom' (exec_plan s []) \\<subseteq> fmdom' s \\<union> prob_dom PROB\n 2. \\<And>a as s PROB.\n       \\<lbrakk>\\<And>s PROB.\n                   as \\<in> valid_plans PROB \\<Longrightarrow>\n                   fmdom' (exec_plan s as)\n                   \\<subseteq> fmdom' s \\<union> prob_dom PROB;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> fmdom' (exec_plan s (a # as))\n                         \\<subseteq> fmdom' s \\<union> prob_dom PROB", "ultimately"], ["proof (chain)\npicking this:\n  fmdom' (exec_plan (state_succ s a) as)\n  \\<subseteq> fmdom' (state_succ s a) \\<union> prob_dom PROB\n  fmdom' s \\<union> fmdom' (snd a) \\<union> prob_dom PROB =\n  fmdom' s \\<union> prob_dom PROB", "show ?case"], ["proof (prove)\nusing this:\n  fmdom' (exec_plan (state_succ s a) as)\n  \\<subseteq> fmdom' (state_succ s a) \\<union> prob_dom PROB\n  fmdom' s \\<union> fmdom' (snd a) \\<union> prob_dom PROB =\n  fmdom' s \\<union> prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' (exec_plan s (a # as))\n    \\<subseteq> fmdom' s \\<union> prob_dom PROB", "by (metis (no_types, lifting)\n        FDOM_state_succ_subset exec_plan.simps(2) order_refl subset_trans sup.mono)"], ["proof (state)\nthis:\n  fmdom' (exec_plan s (a # as)) \\<subseteq> fmdom' s \\<union> prob_dom PROB\n\ngoal (1 subgoal):\n 1. \\<And>s PROB.\n       [] \\<in> valid_plans PROB \\<Longrightarrow>\n       fmdom' (exec_plan s []) \\<subseteq> fmdom' s \\<union> prob_dom PROB", "qed simp\n\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma reachable_s_finite_thm_1_a:\n  fixes s and PROB :: \"'a problem\"\n  assumes \"(s :: 'a state) \\<in> valid_states PROB\"\n  shows \"(\\<forall>l\\<in>reachable_s PROB s. l\\<in>valid_states PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>reachable_s PROB s. l \\<in> valid_states PROB", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>reachable_s PROB s. l \\<in> valid_states PROB", "have 1: \"\\<forall>l\\<in>reachable_s PROB s. \\<exists>as. l = exec_plan s as \\<and> as \\<in> valid_plans PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>reachable_s PROB s.\n       \\<exists>as. l = exec_plan s as \\<and> as \\<in> valid_plans PROB", "using reachable_s_def"], ["proof (prove)\nusing this:\n  reachable_s ?PROB ?s \\<equiv>\n  {exec_plan ?s as |as. as \\<in> valid_plans ?PROB}\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>reachable_s PROB s.\n       \\<exists>as. l = exec_plan s as \\<and> as \\<in> valid_plans PROB", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>l\\<in>reachable_s PROB s.\n     \\<exists>as. l = exec_plan s as \\<and> as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>reachable_s PROB s. l \\<in> valid_states PROB", "{"], ["proof (state)\nthis:\n  \\<forall>l\\<in>reachable_s PROB s.\n     \\<exists>as. l = exec_plan s as \\<and> as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>reachable_s PROB s. l \\<in> valid_states PROB", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>reachable_s PROB s. l \\<in> valid_states PROB", "assume P1: \"l \\<in> reachable_s PROB s\"\n      \\<comment> \\<open>NOTE type for 's' and 'as' had to be fixed due to type mismatch in obtain statement.\\<close>"], ["proof (state)\nthis:\n  l \\<in> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>reachable_s PROB s. l \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  l \\<in> reachable_s PROB s", "obtain as :: \"'a action list\" where a: \"l = exec_plan s as \\<and> as \\<in> valid_plans PROB\""], ["proof (prove)\nusing this:\n  l \\<in> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        l = exec_plan s as \\<and>\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 1"], ["proof (prove)\nusing this:\n  l \\<in> reachable_s PROB s\n  \\<forall>l\\<in>reachable_s PROB s.\n     \\<exists>as. l = exec_plan s as \\<and> as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        l = exec_plan s as \\<and>\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l = exec_plan s as \\<and> as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>reachable_s PROB s. l \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  l = exec_plan s as \\<and> as \\<in> valid_plans PROB", "have \"exec_plan s as \\<in> valid_states PROB\""], ["proof (prove)\nusing this:\n  l = exec_plan s as \\<and> as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. exec_plan s as \\<in> valid_states PROB", "using assms a valid_as_valid_exec"], ["proof (prove)\nusing this:\n  l = exec_plan s as \\<and> as \\<in> valid_plans PROB\n  s \\<in> valid_states PROB\n  l = exec_plan s as \\<and> as \\<in> valid_plans PROB\n  \\<lbrakk>?as \\<in> valid_plans ?PROB; ?s \\<in> valid_states ?PROB\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s ?as \\<in> valid_states ?PROB\n\ngoal (1 subgoal):\n 1. exec_plan s as \\<in> valid_states PROB", "by blast"], ["proof (state)\nthis:\n  exec_plan s as \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>reachable_s PROB s. l \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  exec_plan s as \\<in> valid_states PROB", "have \"l \\<in> valid_states PROB\""], ["proof (prove)\nusing this:\n  exec_plan s as \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. l \\<in> valid_states PROB", "using a"], ["proof (prove)\nusing this:\n  exec_plan s as \\<in> valid_states PROB\n  l = exec_plan s as \\<and> as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. l \\<in> valid_states PROB", "by simp"], ["proof (state)\nthis:\n  l \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>reachable_s PROB s. l \\<in> valid_states PROB", "}"], ["proof (state)\nthis:\n  ?l2 \\<in> reachable_s PROB s \\<Longrightarrow> ?l2 \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>reachable_s PROB s. l \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  ?l2 \\<in> reachable_s PROB s \\<Longrightarrow> ?l2 \\<in> valid_states PROB", "show \"\\<forall>l \\<in> reachable_s PROB s. l \\<in> valid_states PROB\""], ["proof (prove)\nusing this:\n  ?l2 \\<in> reachable_s PROB s \\<Longrightarrow> ?l2 \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>reachable_s PROB s. l \\<in> valid_states PROB", "by blast"], ["proof (state)\nthis:\n  \\<forall>l\\<in>reachable_s PROB s. l \\<in> valid_states PROB\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reachable_s_finite_thm_1:\n  assumes \"((s :: 'a state) \\<in> valid_states PROB)\"\n  shows \"(reachable_s PROB s \\<subseteq> valid_states PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reachable_s PROB s \\<subseteq> valid_states PROB", "using assms reachable_s_finite_thm_1_a"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  ?s \\<in> valid_states ?PROB \\<Longrightarrow>\n  \\<forall>l\\<in>reachable_s ?PROB ?s. l \\<in> valid_states ?PROB\n\ngoal (1 subgoal):\n 1. reachable_s PROB s \\<subseteq> valid_states PROB", "by blast\n\n\n\\<comment> \\<open>NOTE second declaration skipped (this is declared twice in the source; see above)\\<close>\n\\<comment> \\<open>NOTE type for `s` had to be fixed (type mismatch in goal).\\<close>"], ["", "lemma reachable_s_finite_thm:\n  fixes s :: \"'a state\"\n  assumes \"finite (PROB :: 'a problem)\" \"(s \\<in> valid_states PROB)\"\n  shows \"finite (reachable_s PROB s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (reachable_s PROB s)", "using assms"], ["proof (prove)\nusing this:\n  finite PROB\n  s \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. finite (reachable_s PROB s)", "by (meson FINITE_valid_states reachable_s_finite_thm_1 rev_finite_subset)"], ["", "lemma empty_plan_is_valid: \"[] \\<in> (valid_plans PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> valid_plans PROB", "by (simp add: valid_plans_def)"], ["", "lemma valid_head_and_tail_valid_plan:\n  assumes \"(h \\<in> PROB)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"((h # as) \\<in> valid_plans PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h # as \\<in> valid_plans PROB", "using assms"], ["proof (prove)\nusing this:\n  h \\<in> PROB\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. h # as \\<in> valid_plans PROB", "by (auto simp: valid_plans_def)\n\n\n\\<comment> \\<open>TODO refactor\\<close>\n\\<comment> \\<open>NOTE added lemma\\<close>"], ["", "lemma lemma_1_reachability_s_i:\n  fixes PROB s\n  assumes \"s \\<in> valid_states PROB\"\n  shows \"s \\<in> reachable_s PROB s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> reachable_s PROB s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<in> reachable_s PROB s", "have \"[] \\<in> valid_plans PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> valid_plans PROB", "using empty_plan_is_valid"], ["proof (prove)\nusing this:\n  [] \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. [] \\<in> valid_plans PROB", "by blast"], ["proof (state)\nthis:\n  [] \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. s \\<in> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  [] \\<in> valid_plans PROB", "show ?thesis"], ["proof (prove)\nusing this:\n  [] \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. s \\<in> reachable_s PROB s", "unfolding reachable_s_def"], ["proof (prove)\nusing this:\n  [] \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. s \\<in> {exec_plan s as |as. as \\<in> valid_plans PROB}", "by force"], ["proof (state)\nthis:\n  s \\<in> reachable_s PROB s\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE types for 'PROB' and 's' had to be fixed (type mismatch in goal).\\<close>"], ["", "lemma lemma_1_reachability_s:\n  fixes PROB :: \"'a problem\" and s :: \"'a state\" and as\n  assumes \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"((last ` state_set (state_list s as)) \\<subseteq> (reachable_s PROB s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s", "proof(induction as arbitrary: PROB s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>PROB s.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> reachable_s PROB s\n 2. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "case Nil"], ["proof (state)\nthis:\n  s \\<in> valid_states PROB\n  [] \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<And>PROB s.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> reachable_s PROB s\n 2. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  s \\<in> valid_states PROB\n  [] \\<in> valid_plans PROB", "have \"(last ` state_set (state_list s [])) = {s}\""], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  [] \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. last ` state_set (state_list s []) = {s}", "by force"], ["proof (state)\nthis:\n  last ` state_set (state_list s []) = {s}\n\ngoal (2 subgoals):\n 1. \\<And>PROB s.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s [])\n                         \\<subseteq> reachable_s PROB s\n 2. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  last ` state_set (state_list s []) = {s}", "show ?case"], ["proof (prove)\nusing this:\n  last ` state_set (state_list s []) = {s}\n\ngoal (1 subgoal):\n 1. last ` state_set (state_list s []) \\<subseteq> reachable_s PROB s", "unfolding reachable_s_def"], ["proof (prove)\nusing this:\n  last ` state_set (state_list s []) = {s}\n\ngoal (1 subgoal):\n 1. last ` state_set (state_list s [])\n    \\<subseteq> {exec_plan s as |as. as \\<in> valid_plans PROB}", "using empty_plan_is_valid"], ["proof (prove)\nusing this:\n  last ` state_set (state_list s []) = {s}\n  [] \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. last ` state_set (state_list s [])\n    \\<subseteq> {exec_plan s as |as. as \\<in> valid_plans PROB}", "by force"], ["proof (state)\nthis:\n  last ` state_set (state_list s []) \\<subseteq> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "case cons: (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<in> valid_states ?PROB; as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> last ` state_set (state_list ?s as)\n                    \\<subseteq> reachable_s ?PROB ?s\n  s \\<in> valid_states PROB\n  a # as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "let ?S=\"last ` state_set (state_list s (a # as))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "let ?as=\"[]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "have \"last [s] = exec_plan s ?as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last [s] = exec_plan s []", "by simp"], ["proof (state)\nthis:\n  last [s] = exec_plan s []\n\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "moreover"], ["proof (state)\nthis:\n  last [s] = exec_plan s []\n\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "have \"?as \\<in> valid_plans PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> valid_plans PROB", "using empty_plan_is_valid"], ["proof (prove)\nusing this:\n  [] \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. [] \\<in> valid_plans PROB", "by auto"], ["proof (state)\nthis:\n  [] \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "ultimately"], ["proof (chain)\npicking this:\n  last [s] = exec_plan s []\n  [] \\<in> valid_plans PROB", "have \"\\<exists>as. (last [s] = exec_plan s as) \\<and> as \\<in> valid_plans PROB\""], ["proof (prove)\nusing this:\n  last [s] = exec_plan s []\n  [] \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<exists>as. last [s] = exec_plan s as \\<and> as \\<in> valid_plans PROB", "by blast"], ["proof (state)\nthis:\n  \\<exists>as. last [s] = exec_plan s as \\<and> as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "}"], ["proof (state)\nthis:\n  \\<exists>as. last [s] = exec_plan s as \\<and> as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "note 1 = this"], ["proof (state)\nthis:\n  \\<exists>as. last [s] = exec_plan s as \\<and> as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "{"], ["proof (state)\nthis:\n  \\<exists>as. last [s] = exec_plan s as \\<and> as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "assume P: \"x \\<in> ?S\""], ["proof (state)\nthis:\n  x \\<in> last ` state_set (state_list s (a # as))\n\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  x \\<in> last ` state_set (state_list s (a # as))", "consider\n      (a) \"x = last [s]\"\n      | (b) \"x \\<in> last ` ((#) s ` state_set (state_list (state_succ s a) as))\""], ["proof (prove)\nusing this:\n  x \\<in> last ` state_set (state_list s (a # as))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = last [s] \\<Longrightarrow> thesis;\n     x \\<in> last `\n             (#) s `\n             state_set (state_list (state_succ s a) as) \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>x = last [s] \\<Longrightarrow> ?thesis;\n   x \\<in> last `\n           (#) s `\n           state_set (state_list (state_succ s a) as) \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>x = last [s] \\<Longrightarrow> ?thesis;\n   x \\<in> last `\n           (#) s `\n           state_set (state_list (state_succ s a) as) \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "have \"x \\<in> reachable_s PROB s\""], ["proof (prove)\nusing this:\n  \\<lbrakk>x = last [s] \\<Longrightarrow> ?thesis;\n   x \\<in> last `\n           (#) s `\n           state_set (state_list (state_succ s a) as) \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. x \\<in> reachable_s PROB s", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. x = last [s] \\<Longrightarrow> x \\<in> reachable_s PROB s\n 2. x \\<in> last `\n            (#) s `\n            state_set (state_list (state_succ s a) as) \\<Longrightarrow>\n    x \\<in> reachable_s PROB s", "case a"], ["proof (state)\nthis:\n  x = last [s]\n\ngoal (2 subgoals):\n 1. x = last [s] \\<Longrightarrow> x \\<in> reachable_s PROB s\n 2. x \\<in> last `\n            (#) s `\n            state_set (state_list (state_succ s a) as) \\<Longrightarrow>\n    x \\<in> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  x = last [s]", "have \"x = s\""], ["proof (prove)\nusing this:\n  x = last [s]\n\ngoal (1 subgoal):\n 1. x = s", "by simp"], ["proof (state)\nthis:\n  x = s\n\ngoal (2 subgoals):\n 1. x = last [s] \\<Longrightarrow> x \\<in> reachable_s PROB s\n 2. x \\<in> last `\n            (#) s `\n            state_set (state_list (state_succ s a) as) \\<Longrightarrow>\n    x \\<in> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  x = s", "show ?thesis"], ["proof (prove)\nusing this:\n  x = s\n\ngoal (1 subgoal):\n 1. x \\<in> reachable_s PROB s", "using cons.prems(1) P lemma_1_reachability_s_i"], ["proof (prove)\nusing this:\n  x = s\n  s \\<in> valid_states PROB\n  x \\<in> last ` state_set (state_list s (a # as))\n  ?s \\<in> valid_states ?PROB \\<Longrightarrow>\n  ?s \\<in> reachable_s ?PROB ?s\n\ngoal (1 subgoal):\n 1. x \\<in> reachable_s PROB s", "by blast"], ["proof (state)\nthis:\n  x \\<in> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. x \\<in> last `\n            (#) s `\n            state_set (state_list (state_succ s a) as) \\<Longrightarrow>\n    x \\<in> reachable_s PROB s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> last `\n            (#) s `\n            state_set (state_list (state_succ s a) as) \\<Longrightarrow>\n    x \\<in> reachable_s PROB s", "case b"], ["proof (state)\nthis:\n  x \\<in> last ` (#) s ` state_set (state_list (state_succ s a) as)\n\ngoal (1 subgoal):\n 1. x \\<in> last `\n            (#) s `\n            state_set (state_list (state_succ s a) as) \\<Longrightarrow>\n    x \\<in> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  x \\<in> last ` (#) s ` state_set (state_list (state_succ s a) as)", "obtain x'' where i:\n        \"x'' \\<in> state_set (state_list (state_succ s a) as)\"\n        \"x = last (s # x'')\""], ["proof (prove)\nusing this:\n  x \\<in> last ` (#) s ` state_set (state_list (state_succ s a) as)\n\ngoal (1 subgoal):\n 1. (\\<And>x''.\n        \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n         x = last (s # x'')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x'' \\<in> state_set (state_list (state_succ s a) as)\n  x = last (s # x'')\n\ngoal (1 subgoal):\n 1. x \\<in> last `\n            (#) s `\n            state_set (state_list (state_succ s a) as) \\<Longrightarrow>\n    x \\<in> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  x'' \\<in> state_set (state_list (state_succ s a) as)\n  x = last (s # x'')", "show ?thesis"], ["proof (prove)\nusing this:\n  x'' \\<in> state_set (state_list (state_succ s a) as)\n  x = last (s # x'')\n\ngoal (1 subgoal):\n 1. x \\<in> reachable_s PROB s", "proof (cases \"x''\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n     x = last (s # x''); x'' = []\\<rbrakk>\n    \\<Longrightarrow> x \\<in> reachable_s PROB s\n 2. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "case Nil"], ["proof (state)\nthis:\n  x'' = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n     x = last (s # x''); x'' = []\\<rbrakk>\n    \\<Longrightarrow> x \\<in> reachable_s PROB s\n 2. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  x'' = []", "have \"x = s\""], ["proof (prove)\nusing this:\n  x'' = []\n\ngoal (1 subgoal):\n 1. x = s", "using i"], ["proof (prove)\nusing this:\n  x'' = []\n  x'' \\<in> state_set (state_list (state_succ s a) as)\n  x = last (s # x'')\n\ngoal (1 subgoal):\n 1. x = s", "by fastforce"], ["proof (state)\nthis:\n  x = s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n     x = last (s # x''); x'' = []\\<rbrakk>\n    \\<Longrightarrow> x \\<in> reachable_s PROB s\n 2. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  x = s", "show ?thesis"], ["proof (prove)\nusing this:\n  x = s\n\ngoal (1 subgoal):\n 1. x \\<in> reachable_s PROB s", "using cons.prems(1) lemma_1_reachability_s_i"], ["proof (prove)\nusing this:\n  x = s\n  s \\<in> valid_states PROB\n  ?s \\<in> valid_states ?PROB \\<Longrightarrow>\n  ?s \\<in> reachable_s ?PROB ?s\n\ngoal (1 subgoal):\n 1. x \\<in> reachable_s PROB s", "by blast"], ["proof (state)\nthis:\n  x \\<in> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "case (Cons a' list)"], ["proof (state)\nthis:\n  x'' = a' # list\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  x'' = a' # list", "obtain x' where a:\n          \"last (a' # list) = last x'\" \"x' \\<in> state_set (state_list (state_succ s a) as)\""], ["proof (prove)\nusing this:\n  x'' = a' # list\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>last (a' # list) = last x';\n         x' \\<in> state_set (state_list (state_succ s a) as)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using i(1)"], ["proof (prove)\nusing this:\n  x'' = a' # list\n  x'' \\<in> state_set (state_list (state_succ s a) as)\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>last (a' # list) = last x';\n         x' \\<in> state_set (state_list (state_succ s a) as)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  last (a' # list) = last x'\n  x' \\<in> state_set (state_list (state_succ s a) as)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "{"], ["proof (state)\nthis:\n  last (a' # list) = last x'\n  x' \\<in> state_set (state_list (state_succ s a) as)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "have \"state_succ s a \\<in> valid_states PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s a \\<in> valid_states PROB", "using cons.prems(1, 2) valid_action_valid_succ valid_plan_valid_head"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  a # as \\<in> valid_plans PROB\n  \\<lbrakk>?h \\<in> ?PROB; ?s \\<in> valid_states ?PROB\\<rbrakk>\n  \\<Longrightarrow> state_succ ?s ?h \\<in> valid_states ?PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow> ?h \\<in> ?PROB\n\ngoal (1 subgoal):\n 1. state_succ s a \\<in> valid_states PROB", "by metis"], ["proof (state)\nthis:\n  state_succ s a \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "moreover"], ["proof (state)\nthis:\n  state_succ s a \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "have \"as \\<in> valid_plans PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "using cons.prems(2) valid_plan_valid_tail"], ["proof (prove)\nusing this:\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  ?as \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "by fast"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "ultimately"], ["proof (chain)\npicking this:\n  state_succ s a \\<in> valid_states PROB\n  as \\<in> valid_plans PROB", "have\n            \"last ` state_set (state_list (state_succ s a) as) \\<subseteq> reachable_s PROB (state_succ s a)\""], ["proof (prove)\nusing this:\n  state_succ s a \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. last ` state_set (state_list (state_succ s a) as)\n    \\<subseteq> reachable_s PROB (state_succ s a)", "using cons.IH[of \"state_succ s a\"]"], ["proof (prove)\nusing this:\n  state_succ s a \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<lbrakk>state_succ s a \\<in> valid_states ?PROB;\n   as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> last ` state_set (state_list (state_succ s a) as)\n                    \\<subseteq> reachable_s ?PROB (state_succ s a)\n\ngoal (1 subgoal):\n 1. last ` state_set (state_list (state_succ s a) as)\n    \\<subseteq> reachable_s PROB (state_succ s a)", "by auto"], ["proof (state)\nthis:\n  last ` state_set (state_list (state_succ s a) as)\n  \\<subseteq> reachable_s PROB (state_succ s a)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  last ` state_set (state_list (state_succ s a) as)\n  \\<subseteq> reachable_s PROB (state_succ s a)", "have \"\\<exists>as'.\n                  last (a' # list) = exec_plan (state_succ s a) as' \\<and> (as' \\<in> (valid_plans PROB))\""], ["proof (prove)\nusing this:\n  last ` state_set (state_list (state_succ s a) as)\n  \\<subseteq> reachable_s PROB (state_succ s a)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       last (a' # list) = exec_plan (state_succ s a) as' \\<and>\n       as' \\<in> valid_plans PROB", "unfolding state_set.simps state_list.simps reachable_s_def"], ["proof (prove)\nusing this:\n  last ` state_set (state_list (state_succ s a) as)\n  \\<subseteq> {exec_plan (state_succ s a) as |as. as \\<in> valid_plans PROB}\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       last (a' # list) = exec_plan (state_succ s a) as' \\<and>\n       as' \\<in> valid_plans PROB", "using i(1) Cons"], ["proof (prove)\nusing this:\n  last ` state_set (state_list (state_succ s a) as)\n  \\<subseteq> {exec_plan (state_succ s a) as |as. as \\<in> valid_plans PROB}\n  x'' \\<in> state_set (state_list (state_succ s a) as)\n  x'' = a' # list\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       last (a' # list) = exec_plan (state_succ s a) as' \\<and>\n       as' \\<in> valid_plans PROB", "by blast"], ["proof (state)\nthis:\n  \\<exists>as'.\n     last (a' # list) = exec_plan (state_succ s a) as' \\<and>\n     as' \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "}"], ["proof (state)\nthis:\n  \\<exists>as'.\n     last (a' # list) = exec_plan (state_succ s a) as' \\<and>\n     as' \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  \\<exists>as'.\n     last (a' # list) = exec_plan (state_succ s a) as' \\<and>\n     as' \\<in> valid_plans PROB", "obtain as' where b:\n          \"last (a' # list) = exec_plan (state_succ s a) as'\" \"(as' \\<in> (valid_plans PROB))\""], ["proof (prove)\nusing this:\n  \\<exists>as'.\n     last (a' # list) = exec_plan (state_succ s a) as' \\<and>\n     as' \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        \\<lbrakk>last (a' # list) = exec_plan (state_succ s a) as';\n         as' \\<in> valid_plans PROB\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  last (a' # list) = exec_plan (state_succ s a) as'\n  as' \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  last (a' # list) = exec_plan (state_succ s a) as'\n  as' \\<in> valid_plans PROB", "have \"x = exec_plan (state_succ s a) as'\""], ["proof (prove)\nusing this:\n  last (a' # list) = exec_plan (state_succ s a) as'\n  as' \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. x = exec_plan (state_succ s a) as'", "using i(2) Cons a(1)"], ["proof (prove)\nusing this:\n  last (a' # list) = exec_plan (state_succ s a) as'\n  as' \\<in> valid_plans PROB\n  x = last (s # x'')\n  x'' = a' # list\n  last (a' # list) = last x'\n\ngoal (1 subgoal):\n 1. x = exec_plan (state_succ s a) as'", "by auto"], ["proof (state)\nthis:\n  x = exec_plan (state_succ s a) as'\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>x'' \\<in> state_set (state_list (state_succ s a) as);\n        x = last (s # x''); x'' = aa # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  x = exec_plan (state_succ s a) as'", "show ?thesis"], ["proof (prove)\nusing this:\n  x = exec_plan (state_succ s a) as'\n\ngoal (1 subgoal):\n 1. x \\<in> reachable_s PROB s", "unfolding reachable_s_def"], ["proof (prove)\nusing this:\n  x = exec_plan (state_succ s a) as'\n\ngoal (1 subgoal):\n 1. x \\<in> {exec_plan s as |as. as \\<in> valid_plans PROB}", "using cons.prems(2) b(2)"], ["proof (prove)\nusing this:\n  x = exec_plan (state_succ s a) as'\n  a # as \\<in> valid_plans PROB\n  as' \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. x \\<in> {exec_plan s as |as. as \\<in> valid_plans PROB}", "by (metis (mono_tags, lifting)  exec_plan.simps(2) mem_Collect_eq\n              valid_head_and_tail_valid_plan valid_plan_valid_head)"], ["proof (state)\nthis:\n  x \\<in> reachable_s PROB s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> reachable_s PROB s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> last ` state_set (state_list s (a # as)) \\<Longrightarrow>\n  ?x2 \\<in> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> last ` state_set (state_list s as)\n                                     \\<subseteq> reachable_s PROB s;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> last ` state_set (state_list s (a # as))\n                         \\<subseteq> reachable_s PROB s", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> last ` state_set (state_list s (a # as)) \\<Longrightarrow>\n  ?x2 \\<in> reachable_s PROB s", "show ?case"], ["proof (prove)\nusing this:\n  ?x2 \\<in> last ` state_set (state_list s (a # as)) \\<Longrightarrow>\n  ?x2 \\<in> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. last ` state_set (state_list s (a # as)) \\<subseteq> reachable_s PROB s", "by blast"], ["proof (state)\nthis:\n  last ` state_set (state_list s (a # as)) \\<subseteq> reachable_s PROB s\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE types for `PROB` and `s` had to be fixed for use of `lemma\\_1\\_reachability\\_s`.\\<close>"], ["", "lemma not_eq_last_diff_paths_reachability_s:\n  fixes PROB :: \"'a problem\" and s :: \"'a state\" and as\n  assumes \"s \\<in> valid_states PROB\" \"as \\<in> valid_plans PROB\"\n    \"\\<not>(inj last (state_set (state_list s as)) (reachable_s PROB s))\"\n  shows \"(\\<exists>slist_1 slist_2.\n    slist_1 \\<in> state_set (state_list s as)\n    \\<and> slist_2 \\<in> state_set (state_list s as)\n    \\<and> (last slist_1 = last slist_2)\n    \\<and> \\<not>(length slist_1 = length slist_2)\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "assume P1: \"x \\<in> state_set (state_list s as)\""], ["proof (state)\nthis:\n  x \\<in> state_set (state_list s as)\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "have a: \"last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s", "using assms(1, 2) lemma_1_reachability_s"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<lbrakk>?s \\<in> valid_states ?PROB; ?as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> last ` state_set (state_list ?s ?as)\n                    \\<subseteq> reachable_s ?PROB ?s\n\ngoal (1 subgoal):\n 1. last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s", "by fast"], ["proof (state)\nthis:\n  last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "then"], ["proof (chain)\npicking this:\n  last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s", "have \"\\<forall>as PROB. s \\<in> (valid_states PROB) \\<and> as \\<in> (valid_plans PROB) \\<longrightarrow> (last ` (state_set (state_list s as)) \\<subseteq> reachable_s PROB s)\""], ["proof (prove)\nusing this:\n  last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. \\<forall>as PROB.\n       s \\<in> valid_states PROB \\<and>\n       as \\<in> valid_plans PROB \\<longrightarrow>\n       last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s", "using lemma_1_reachability_s"], ["proof (prove)\nusing this:\n  last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s\n  \\<lbrakk>?s \\<in> valid_states ?PROB; ?as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> last ` state_set (state_list ?s ?as)\n                    \\<subseteq> reachable_s ?PROB ?s\n\ngoal (1 subgoal):\n 1. \\<forall>as PROB.\n       s \\<in> valid_states PROB \\<and>\n       as \\<in> valid_plans PROB \\<longrightarrow>\n       last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s", "by fast"], ["proof (state)\nthis:\n  \\<forall>as PROB.\n     s \\<in> valid_states PROB \\<and>\n     as \\<in> valid_plans PROB \\<longrightarrow>\n     last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "then"], ["proof (chain)\npicking this:\n  \\<forall>as PROB.\n     s \\<in> valid_states PROB \\<and>\n     as \\<in> valid_plans PROB \\<longrightarrow>\n     last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s", "have \"last x \\<in> valid_states PROB\""], ["proof (prove)\nusing this:\n  \\<forall>as PROB.\n     s \\<in> valid_states PROB \\<and>\n     as \\<in> valid_plans PROB \\<longrightarrow>\n     last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. last x \\<in> valid_states PROB", "using assms(1, 2) P1 lemma_1"], ["proof (prove)\nusing this:\n  \\<forall>as PROB.\n     s \\<in> valid_states PROB \\<and>\n     as \\<in> valid_plans PROB \\<longrightarrow>\n     last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  x \\<in> state_set (state_list s as)\n  \\<lbrakk>?s \\<in> valid_states ?PROB; ?as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> last ` state_set (state_list ?s ?as)\n                    \\<subseteq> valid_states ?PROB\n\ngoal (1 subgoal):\n 1. last x \\<in> valid_states PROB", "by fast"], ["proof (state)\nthis:\n  last x \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "then"], ["proof (chain)\npicking this:\n  last x \\<in> valid_states PROB", "have \"last x \\<in> reachable_s PROB s\""], ["proof (prove)\nusing this:\n  last x \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. last x \\<in> reachable_s PROB s", "using P1 a"], ["proof (prove)\nusing this:\n  last x \\<in> valid_states PROB\n  x \\<in> state_set (state_list s as)\n  last ` state_set (state_list s as) \\<subseteq> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. last x \\<in> reachable_s PROB s", "by fast"], ["proof (state)\nthis:\n  last x \\<in> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> state_set (state_list s as) \\<Longrightarrow>\n  last ?x2 \\<in> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "note 1 = this"], ["proof (state)\nthis:\n  ?x2 \\<in> state_set (state_list s as) \\<Longrightarrow>\n  last ?x2 \\<in> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "text \\<open> Show the goal by disproving the contradiction. \\<close>"], ["proof (state)\nthis:\n  ?x2 \\<in> state_set (state_list s as) \\<Longrightarrow>\n  last ?x2 \\<in> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "{"], ["proof (state)\nthis:\n  ?x2 \\<in> state_set (state_list s as) \\<Longrightarrow>\n  last ?x2 \\<in> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "assume C: \"(\\<forall>slist_1 slist_2. (slist_1 \\<in> state_set (state_list s as)\n      \\<and> slist_2 \\<in> state_set (state_list s as)\n      \\<and> (last slist_1 = last slist_2)) \\<longrightarrow> (length slist_1 = length slist_2))\""], ["proof (state)\nthis:\n  \\<forall>slist_1 slist_2.\n     slist_1 \\<in> state_set (state_list s as) \\<and>\n     slist_2 \\<in> state_set (state_list s as) \\<and>\n     last slist_1 = last slist_2 \\<longrightarrow>\n     length slist_1 = length slist_2\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "moreover"], ["proof (state)\nthis:\n  \\<forall>slist_1 slist_2.\n     slist_1 \\<in> state_set (state_list s as) \\<and>\n     slist_2 \\<in> state_set (state_list s as) \\<and>\n     last slist_1 = last slist_2 \\<longrightarrow>\n     length slist_1 = length slist_2\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "{"], ["proof (state)\nthis:\n  \\<forall>slist_1 slist_2.\n     slist_1 \\<in> state_set (state_list s as) \\<and>\n     slist_2 \\<in> state_set (state_list s as) \\<and>\n     last slist_1 = last slist_2 \\<longrightarrow>\n     length slist_1 = length slist_2\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "fix slist_1 slist_2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "assume C1: \"slist_1 \\<in> state_set (state_list s as)\" \"slist_2 \\<in> state_set (state_list s as)\"\n        \"(last slist_1 = last slist_2)\""], ["proof (state)\nthis:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "moreover"], ["proof (state)\nthis:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "have i: \"(length slist_1 = length slist_2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length slist_1 = length slist_2", "using C1 C"], ["proof (prove)\nusing this:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n  \\<forall>slist_1 slist_2.\n     slist_1 \\<in> state_set (state_list s as) \\<and>\n     slist_2 \\<in> state_set (state_list s as) \\<and>\n     last slist_1 = last slist_2 \\<longrightarrow>\n     length slist_1 = length slist_2\n\ngoal (1 subgoal):\n 1. length slist_1 = length slist_2", "by blast"], ["proof (state)\nthis:\n  length slist_1 = length slist_2\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "moreover"], ["proof (state)\nthis:\n  length slist_1 = length slist_2\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "have \"slist_1 = slist_2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. slist_1 = slist_2", "using C1(1, 2) i neq_mems_state_set_neq_len"], ["proof (prove)\nusing this:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  length slist_1 = length slist_2\n  \\<lbrakk>?x \\<in> state_set (state_list ?s ?as);\n   ?y \\<in> state_set (state_list ?s ?as); ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> length ?x \\<noteq> length ?y\n\ngoal (1 subgoal):\n 1. slist_1 = slist_2", "by auto"], ["proof (state)\nthis:\n  slist_1 = slist_2\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "ultimately"], ["proof (chain)\npicking this:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n  length slist_1 = length slist_2\n  slist_1 = slist_2", "have \"inj_on last (state_set (state_list s as))\""], ["proof (prove)\nusing this:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n  length slist_1 = length slist_2\n  slist_1 = slist_2\n\ngoal (1 subgoal):\n 1. inj_on last (state_set (state_list s as))", "unfolding inj_on_def"], ["proof (prove)\nusing this:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n  length slist_1 = length slist_2\n  slist_1 = slist_2\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>state_set (state_list s as).\n       \\<forall>y\\<in>state_set (state_list s as).\n          last x = last y \\<longrightarrow> x = y", "using C neq_mems_state_set_neq_len"], ["proof (prove)\nusing this:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n  length slist_1 = length slist_2\n  slist_1 = slist_2\n  \\<forall>slist_1 slist_2.\n     slist_1 \\<in> state_set (state_list s as) \\<and>\n     slist_2 \\<in> state_set (state_list s as) \\<and>\n     last slist_1 = last slist_2 \\<longrightarrow>\n     length slist_1 = length slist_2\n  \\<lbrakk>?x \\<in> state_set (state_list ?s ?as);\n   ?y \\<in> state_set (state_list ?s ?as); ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> length ?x \\<noteq> length ?y\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>state_set (state_list s as).\n       \\<forall>y\\<in>state_set (state_list s as).\n          last x = last y \\<longrightarrow> x = y", "by blast"], ["proof (state)\nthis:\n  inj_on last (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "then"], ["proof (chain)\npicking this:\n  inj_on last (state_set (state_list s as))", "have False"], ["proof (prove)\nusing this:\n  inj_on last (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. False", "using 1 inj_def assms(3)"], ["proof (prove)\nusing this:\n  inj_on last (state_set (state_list s as))\n  ?x2 \\<in> state_set (state_list s as) \\<Longrightarrow>\n  last ?x2 \\<in> reachable_s PROB s\n  FactoredSystem.inj ?f ?A ?B \\<equiv>\n  (\\<forall>x\\<in>?A. ?f x \\<in> ?B) \\<and> inj_on ?f ?A\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (reachable_s PROB s)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?slist_1.2 \\<in> state_set (state_list s as);\n   ?slist_2.2 \\<in> state_set (state_list s as);\n   last ?slist_1.2 = last ?slist_2.2\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>slist_1 slist_2.\n     slist_1 \\<in> state_set (state_list s as) \\<and>\n     slist_2 \\<in> state_set (state_list s as) \\<and>\n     last slist_1 = last slist_2 \\<longrightarrow>\n     length slist_1 = length slist_2\n  \\<lbrakk>?slist_1.2 \\<in> state_set (state_list s as);\n   ?slist_2.2 \\<in> state_set (state_list s as);\n   last ?slist_1.2 = last ?slist_2.2\\<rbrakk>\n  \\<Longrightarrow> False", "have False"], ["proof (prove)\nusing this:\n  \\<forall>slist_1 slist_2.\n     slist_1 \\<in> state_set (state_list s as) \\<and>\n     slist_2 \\<in> state_set (state_list s as) \\<and>\n     last slist_1 = last slist_2 \\<longrightarrow>\n     length slist_1 = length slist_2\n  \\<lbrakk>?slist_1.2 \\<in> state_set (state_list s as);\n   ?slist_2.2 \\<in> state_set (state_list s as);\n   last ?slist_1.2 = last ?slist_2.2\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "by (metis empty_state_list_lemma nempty_sl_in_state_set)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "}"], ["proof (state)\nthis:\n  \\<forall>slist_1 slist_2.\n     slist_1 \\<in> state_set (state_list s as) \\<and>\n     slist_2 \\<in> state_set (state_list s as) \\<and>\n     last slist_1 = last slist_2 \\<longrightarrow>\n     length slist_1 = length slist_2 \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "then"], ["proof (chain)\npicking this:\n  \\<forall>slist_1 slist_2.\n     slist_1 \\<in> state_set (state_list s as) \\<and>\n     slist_2 \\<in> state_set (state_list s as) \\<and>\n     last slist_1 = last slist_2 \\<longrightarrow>\n     length slist_1 = length slist_2 \\<Longrightarrow>\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>slist_1 slist_2.\n     slist_1 \\<in> state_set (state_list s as) \\<and>\n     slist_2 \\<in> state_set (state_list s as) \\<and>\n     last slist_1 = last slist_2 \\<longrightarrow>\n     length slist_1 = length slist_2 \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>slist_1 slist_2.\n       slist_1 \\<in> state_set (state_list s as) \\<and>\n       slist_2 \\<in> state_set (state_list s as) \\<and>\n       last slist_1 = last slist_2 \\<and>\n       length slist_1 \\<noteq> length slist_2", "by blast"], ["proof (state)\nthis:\n  \\<exists>slist_1 slist_2.\n     slist_1 \\<in> state_set (state_list s as) \\<and>\n     slist_2 \\<in> state_set (state_list s as) \\<and>\n     last slist_1 = last slist_2 \\<and>\n     length slist_1 \\<noteq> length slist_2\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE added lemma ( translation of `PHP` in pred\\_setScript.sml:3155).\\<close>"], ["", "lemma lemma_2_reachability_s_i:\n  fixes f :: \"'a \\<Rightarrow> 'b\" and s t\n  assumes \"finite t\" \"card t < card s\"\n  shows \"\\<not>(inj f s t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj f s t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj f s t", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj f s t", "assume C: \"inj f s t\""], ["proof (state)\nthis:\n  FactoredSystem.inj f s t\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj f s t", "then"], ["proof (chain)\npicking this:\n  FactoredSystem.inj f s t", "have 1: \"(\\<forall>x\\<in>s. f x \\<in> t)\" \"inj_on f s\""], ["proof (prove)\nusing this:\n  FactoredSystem.inj f s t\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>s. f x \\<in> t &&& inj_on f s", "unfolding inj_def"], ["proof (prove)\nusing this:\n  (\\<forall>x\\<in>s. f x \\<in> t) \\<and> inj_on f s\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>s. f x \\<in> t &&& inj_on f s", "by blast+"], ["proof (state)\nthis:\n  \\<forall>x\\<in>s. f x \\<in> t\n  inj_on f s\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj f s t", "moreover"], ["proof (state)\nthis:\n  \\<forall>x\\<in>s. f x \\<in> t\n  inj_on f s\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj f s t", "{"], ["proof (state)\nthis:\n  \\<forall>x\\<in>s. f x \\<in> t\n  inj_on f s\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj f s t", "have \"f ` s \\<subseteq> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` s \\<subseteq> t", "using 1"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>s. f x \\<in> t\n  inj_on f s\n\ngoal (1 subgoal):\n 1. f ` s \\<subseteq> t", "by fast"], ["proof (state)\nthis:\n  f ` s \\<subseteq> t\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj f s t", "then"], ["proof (chain)\npicking this:\n  f ` s \\<subseteq> t", "have \"card (f ` s) \\<le> card t\""], ["proof (prove)\nusing this:\n  f ` s \\<subseteq> t\n\ngoal (1 subgoal):\n 1. card (f ` s) \\<le> card t", "using assms(1) card_mono"], ["proof (prove)\nusing this:\n  f ` s \\<subseteq> t\n  finite t\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> card ?A \\<le> card ?B\n\ngoal (1 subgoal):\n 1. card (f ` s) \\<le> card t", "by auto"], ["proof (state)\nthis:\n  card (f ` s) \\<le> card t\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj f s t", "}"], ["proof (state)\nthis:\n  card (f ` s) \\<le> card t\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj f s t", "moreover"], ["proof (state)\nthis:\n  card (f ` s) \\<le> card t\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj f s t", "have \"card (f ` s) = card s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (f ` s) = card s", "using 1 card_image"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>s. f x \\<in> t\n  inj_on f s\n  inj_on ?f ?A \\<Longrightarrow> card (?f ` ?A) = card ?A\n\ngoal (1 subgoal):\n 1. card (f ` s) = card s", "by fast"], ["proof (state)\nthis:\n  card (f ` s) = card s\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj f s t", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>s. f x \\<in> t\n  inj_on f s\n  card (f ` s) \\<le> card t\n  card (f ` s) = card s", "have False"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>s. f x \\<in> t\n  inj_on f s\n  card (f ` s) \\<le> card t\n  card (f ` s) = card s\n\ngoal (1 subgoal):\n 1. False", "using assms(2)"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>s. f x \\<in> t\n  inj_on f s\n  card (f ` s) \\<le> card t\n  card (f ` s) = card s\n  card t < card s\n\ngoal (1 subgoal):\n 1. False", "by linarith"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj f s t", "}"], ["proof (state)\nthis:\n  FactoredSystem.inj f s t \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj f s t", "then"], ["proof (chain)\npicking this:\n  FactoredSystem.inj f s t \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  FactoredSystem.inj f s t \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj f s t", "by blast"], ["proof (state)\nthis:\n  \\<not> FactoredSystem.inj f s t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemma_2_reachability_s:\n  fixes PROB :: \"'a problem\" and as s\n  assumes \"finite PROB\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"(length as > card (reachable_s PROB s) - 1)\"\n  shows \"(\\<exists>as1 as2 as3.\n    (as1 @ as2 @ as3 = as) \\<and> (exec_plan s (as1 @ as2) = exec_plan s as1) \\<and> \\<not>(as2 = []))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "have \"Suc (length as) > card (reachable_s PROB s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (reachable_s PROB s) < Suc (length as)", "using assms(4)"], ["proof (prove)\nusing this:\n  card (reachable_s PROB s) - 1 < length as\n\ngoal (1 subgoal):\n 1. card (reachable_s PROB s) < Suc (length as)", "by fastforce"], ["proof (state)\nthis:\n  card (reachable_s PROB s) < Suc (length as)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  card (reachable_s PROB s) < Suc (length as)", "have \"card (state_set (state_list s as)) > card (reachable_s PROB s)\""], ["proof (prove)\nusing this:\n  card (reachable_s PROB s) < Suc (length as)\n\ngoal (1 subgoal):\n 1. card (reachable_s PROB s) < card (state_set (state_list s as))", "using card_state_set"], ["proof (prove)\nusing this:\n  card (reachable_s PROB s) < Suc (length as)\n  Suc (length ?as) = card (state_set (state_list ?s ?as))\n\ngoal (1 subgoal):\n 1. card (reachable_s PROB s) < card (state_set (state_list s as))", "by metis"], ["proof (state)\nthis:\n  card (reachable_s PROB s) < card (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "}"], ["proof (state)\nthis:\n  card (reachable_s PROB s) < card (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "note 1 = this"], ["proof (state)\nthis:\n  card (reachable_s PROB s) < card (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "{"], ["proof (state)\nthis:\n  card (reachable_s PROB s) < card (state_set (state_list s as))\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "have \"finite (reachable_s PROB s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (reachable_s PROB s)", "using assms(1, 2) reachable_s_finite_thm"], ["proof (prove)\nusing this:\n  finite PROB\n  s \\<in> valid_states PROB\n  \\<lbrakk>finite ?PROB; ?s \\<in> valid_states ?PROB\\<rbrakk>\n  \\<Longrightarrow> finite (reachable_s ?PROB ?s)\n\ngoal (1 subgoal):\n 1. finite (reachable_s PROB s)", "by blast"], ["proof (state)\nthis:\n  finite (reachable_s PROB s)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  finite (reachable_s PROB s)", "have \"\\<not>(inj last (state_set (state_list s as)) (reachable_s PROB s))\""], ["proof (prove)\nusing this:\n  finite (reachable_s PROB s)\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj last (state_set (state_list s as))\n            (reachable_s PROB s)", "using assms(4) 1 lemma_2_reachability_s_i"], ["proof (prove)\nusing this:\n  finite (reachable_s PROB s)\n  card (reachable_s PROB s) - 1 < length as\n  card (reachable_s PROB s) < card (state_set (state_list s as))\n  \\<lbrakk>finite ?t; card ?t < card ?s\\<rbrakk>\n  \\<Longrightarrow> \\<not> FactoredSystem.inj ?f ?s ?t\n\ngoal (1 subgoal):\n 1. \\<not> FactoredSystem.inj last (state_set (state_list s as))\n            (reachable_s PROB s)", "by blast"], ["proof (state)\nthis:\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (reachable_s PROB s)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "}"], ["proof (state)\nthis:\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (reachable_s PROB s)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "note 2 = this"], ["proof (state)\nthis:\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (reachable_s PROB s)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "obtain slist_1 slist_2 where 3:\n    \"slist_1 \\<in> state_set (state_list s as)\" \"slist_2 \\<in> state_set (state_list s as)\"\n    \"(last slist_1 = last slist_2)\" \"length slist_1 \\<noteq> length slist_2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>slist_1 slist_2.\n        \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n         slist_2 \\<in> state_set (state_list s as);\n         last slist_1 = last slist_2;\n         length slist_1 \\<noteq> length slist_2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2, 3) 2 not_eq_last_diff_paths_reachability_s"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<not> FactoredSystem.inj last (state_set (state_list s as))\n          (reachable_s PROB s)\n  \\<lbrakk>?s \\<in> valid_states ?PROB; ?as \\<in> valid_plans ?PROB;\n   \\<not> FactoredSystem.inj last (state_set (state_list ?s ?as))\n           (reachable_s ?PROB ?s)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>slist_1 slist_2.\n                       slist_1 \\<in> state_set (state_list ?s ?as) \\<and>\n                       slist_2 \\<in> state_set (state_list ?s ?as) \\<and>\n                       last slist_1 = last slist_2 \\<and>\n                       length slist_1 \\<noteq> length slist_2\n\ngoal (1 subgoal):\n 1. (\\<And>slist_1 slist_2.\n        \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n         slist_2 \\<in> state_set (state_list s as);\n         last slist_1 = last slist_2;\n         length slist_1 \\<noteq> length slist_2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n  length slist_1 \\<noteq> length slist_2\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n  length slist_1 \\<noteq> length slist_2", "show ?thesis"], ["proof (prove)\nusing this:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n  length slist_1 \\<noteq> length slist_2\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "using assms"], ["proof (prove)\nusing this:\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n  length slist_1 \\<noteq> length slist_2\n  finite PROB\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  card (reachable_s PROB s) - 1 < length as\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "proof(cases as)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n     slist_2 \\<in> state_set (state_list s as); last slist_1 = last slist_2;\n     length slist_1 \\<noteq> length slist_2; finite PROB;\n     s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n     card (reachable_s PROB s) - 1 < length as; as = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as1 as2 as3.\n                         as1 @ as2 @ as3 = as \\<and>\n                         exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                         as2 \\<noteq> []\n 2. \\<And>a list.\n       \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n        slist_2 \\<in> state_set (state_list s as);\n        last slist_1 = last slist_2; length slist_1 \\<noteq> length slist_2;\n        finite PROB; s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n        card (reachable_s PROB s) - 1 < length as; as = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as1 as2 as3.\n                            as1 @ as2 @ as3 = as \\<and>\n                            exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                            as2 \\<noteq> []", "case (Cons a list)"], ["proof (state)\nthis:\n  as = a # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n     slist_2 \\<in> state_set (state_list s as); last slist_1 = last slist_2;\n     length slist_1 \\<noteq> length slist_2; finite PROB;\n     s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n     card (reachable_s PROB s) - 1 < length as; as = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as1 as2 as3.\n                         as1 @ as2 @ as3 = as \\<and>\n                         exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                         as2 \\<noteq> []\n 2. \\<And>a list.\n       \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n        slist_2 \\<in> state_set (state_list s as);\n        last slist_1 = last slist_2; length slist_1 \\<noteq> length slist_2;\n        finite PROB; s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n        card (reachable_s PROB s) - 1 < length as; as = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as1 as2 as3.\n                            as1 @ as2 @ as3 = as \\<and>\n                            exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                            as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  as = a # list", "show ?thesis"], ["proof (prove)\nusing this:\n  as = a # list\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "using assms(2, 3) 3 eq_last_state_imp_append_nempty_as state_set_thm list.distinct(1)"], ["proof (prove)\nusing this:\n  as = a # list\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  slist_1 \\<in> state_set (state_list s as)\n  slist_2 \\<in> state_set (state_list s as)\n  last slist_1 = last slist_2\n  length slist_1 \\<noteq> length slist_2\n  \\<lbrakk>?as \\<noteq> []; ?s \\<in> valid_states ?PROB;\n   ?as \\<in> valid_plans ?PROB; ?slist_1.0 \\<noteq> [];\n   ?slist_2.0 \\<noteq> []; ?slist_1.0 \\<in> state_set (state_list ?s ?as);\n   ?slist_2.0 \\<in> state_set (state_list ?s ?as);\n   length ?slist_1.0 \\<noteq> length ?slist_2.0;\n   last ?slist_1.0 = last ?slist_2.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as1 as2 as3.\n                       as1 @ as2 @ as3 = ?as \\<and>\n                       exec_plan ?s (as1 @ as2) = exec_plan ?s as1 \\<and>\n                       as2 \\<noteq> []\n  (?s1.0 \\<in> state_set ?s2.0) =\n  (prefix ?s1.0 ?s2.0 \\<and> ?s1.0 \\<noteq> [])\n  [] \\<noteq> ?x21.0 # ?x22.0\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as \\<and>\n       exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []", "by metis"], ["proof (state)\nthis:\n  \\<exists>as1 as2 as3.\n     as1 @ as2 @ as3 = as \\<and>\n     exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>slist_1 \\<in> state_set (state_list s as);\n     slist_2 \\<in> state_set (state_list s as); last slist_1 = last slist_2;\n     length slist_1 \\<noteq> length slist_2; finite PROB;\n     s \\<in> valid_states PROB; as \\<in> valid_plans PROB;\n     card (reachable_s PROB s) - 1 < length as; as = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as1 as2 as3.\n                         as1 @ as2 @ as3 = as \\<and>\n                         exec_plan s (as1 @ as2) = exec_plan s as1 \\<and>\n                         as2 \\<noteq> []", "qed force"], ["proof (state)\nthis:\n  \\<exists>as1 as2 as3.\n     as1 @ as2 @ as3 = as \\<and>\n     exec_plan s (as1 @ as2) = exec_plan s as1 \\<and> as2 \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemma_3_reachability_s:\n  fixes as and PROB :: \"'a problem\" and s\n  assumes \"finite PROB\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n    \"(length as > (card (reachable_s PROB s) - 1))\"\n  shows \"(\\<exists>as'.\n    (exec_plan s as = exec_plan s as')\n    \\<and> (length as' < length as)\n    \\<and> (subseq as' as)\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "obtain as1 as2 as3 :: \"'a action list\" where 1:\n    \"(as1 @ as2 @ as3 = as)\" \"(exec_plan s (as1 @ as2) = exec_plan s as1)\" \"~(as2=[])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as1 as2 as3.\n        \\<lbrakk>as1 @ as2 @ as3 = as;\n         exec_plan s (as1 @ as2) = exec_plan s as1; as2 \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms lemma_2_reachability_s"], ["proof (prove)\nusing this:\n  finite PROB\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  card (reachable_s PROB s) - 1 < length as\n  \\<lbrakk>finite ?PROB; ?s \\<in> valid_states ?PROB;\n   ?as \\<in> valid_plans ?PROB;\n   card (reachable_s ?PROB ?s) - 1 < length ?as\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as1 as2 as3.\n                       as1 @ as2 @ as3 = ?as \\<and>\n                       exec_plan ?s (as1 @ as2) = exec_plan ?s as1 \\<and>\n                       as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>as1 as2 as3.\n        \\<lbrakk>as1 @ as2 @ as3 = as;\n         exec_plan s (as1 @ as2) = exec_plan s as1; as2 \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  as1 @ as2 @ as3 = as\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "then"], ["proof (chain)\npicking this:\n  as1 @ as2 @ as3 = as\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as2 \\<noteq> []", "have \"(exec_plan s (as1 @ as2) = exec_plan s as1)\""], ["proof (prove)\nusing this:\n  as1 @ as2 @ as3 = as\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. exec_plan s (as1 @ as2) = exec_plan s as1", "using 1"], ["proof (prove)\nusing this:\n  as1 @ as2 @ as3 = as\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as2 \\<noteq> []\n  as1 @ as2 @ as3 = as\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. exec_plan s (as1 @ as2) = exec_plan s as1", "by blast"], ["proof (state)\nthis:\n  exec_plan s (as1 @ as2) = exec_plan s as1\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "then"], ["proof (chain)\npicking this:\n  exec_plan s (as1 @ as2) = exec_plan s as1", "have 2: \"exec_plan s (as1 @ as3) = exec_plan s (as1 @ as2 @ as3)\""], ["proof (prove)\nusing this:\n  exec_plan s (as1 @ as2) = exec_plan s as1\n\ngoal (1 subgoal):\n 1. exec_plan s (as1 @ as3) = exec_plan s (as1 @ as2 @ as3)", "using 1 cycle_removal_lemma"], ["proof (prove)\nusing this:\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as1 @ as2 @ as3 = as\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as2 \\<noteq> []\n  exec_plan ?s (?as1.0 @ ?as2.0) = exec_plan ?s ?as1.0 \\<Longrightarrow>\n  exec_plan ?s (?as1.0 @ ?as2.0 @ ?as3.0) = exec_plan ?s (?as1.0 @ ?as3.0)\n\ngoal (1 subgoal):\n 1. exec_plan s (as1 @ as3) = exec_plan s (as1 @ as2 @ as3)", "by fastforce"], ["proof (state)\nthis:\n  exec_plan s (as1 @ as3) = exec_plan s (as1 @ as2 @ as3)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "let ?as' = \"as1 @ as3\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "have 3: \"exec_plan s as = exec_plan s ?as'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s as = exec_plan s (as1 @ as3)", "using 1 2"], ["proof (prove)\nusing this:\n  as1 @ as2 @ as3 = as\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as2 \\<noteq> []\n  exec_plan s (as1 @ as3) = exec_plan s (as1 @ as2 @ as3)\n\ngoal (1 subgoal):\n 1. exec_plan s as = exec_plan s (as1 @ as3)", "by argo"], ["proof (state)\nthis:\n  exec_plan s as = exec_plan s (as1 @ as3)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "then"], ["proof (chain)\npicking this:\n  exec_plan s as = exec_plan s (as1 @ as3)", "have \"as2 \\<noteq> []\""], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s (as1 @ as3)\n\ngoal (1 subgoal):\n 1. as2 \\<noteq> []", "using 1"], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s (as1 @ as3)\n  as1 @ as2 @ as3 = as\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. as2 \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "then"], ["proof (chain)\npicking this:\n  as2 \\<noteq> []", "have 4: \"length ?as' < length as\""], ["proof (prove)\nusing this:\n  as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. length (as1 @ as3) < length as", "using nempty_list_append_length_add 1"], ["proof (prove)\nusing this:\n  as2 \\<noteq> []\n  ?l2.0 \\<noteq> [] \\<Longrightarrow>\n  length (?l1.0 @ ?l3.0) < length (?l1.0 @ ?l2.0 @ ?l3.0)\n  as1 @ as2 @ as3 = as\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. length (as1 @ as3) < length as", "by blast"], ["proof (state)\nthis:\n  length (as1 @ as3) < length as\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "then"], ["proof (chain)\npicking this:\n  length (as1 @ as3) < length as", "have \"subseq ?as' as\""], ["proof (prove)\nusing this:\n  length (as1 @ as3) < length as\n\ngoal (1 subgoal):\n 1. subseq (as1 @ as3) as", "using 1 subseq_append'"], ["proof (prove)\nusing this:\n  length (as1 @ as3) < length as\n  as1 @ as2 @ as3 = as\n  exec_plan s (as1 @ as2) = exec_plan s as1\n  as2 \\<noteq> []\n  subseq (?zs @ ?xs) (?zs @ ?ys) = subseq ?xs ?ys\n\ngoal (1 subgoal):\n 1. subseq (as1 @ as3) as", "by blast"], ["proof (state)\nthis:\n  subseq (as1 @ as3) as\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "then"], ["proof (chain)\npicking this:\n  subseq (as1 @ as3) as", "show ?thesis"], ["proof (prove)\nusing this:\n  subseq (as1 @ as3) as\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "using 3 4"], ["proof (prove)\nusing this:\n  subseq (as1 @ as3) as\n  exec_plan s as = exec_plan s (as1 @ as3)\n  length (as1 @ as3) < length as\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       length as' < length as \\<and> subseq as' as", "by blast"], ["proof (state)\nthis:\n  \\<exists>as'.\n     exec_plan s as = exec_plan s as' \\<and>\n     length as' < length as \\<and> subseq as' as\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE type for `as` had to be fixed (type mismatch in goal).\\<close>"], ["", "lemma main_lemma_reachability_s:\n  fixes PROB :: \"'a problem\" and as and s :: \"'a state\"\n  assumes \"finite PROB\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"(\\<exists>as'.\n      (exec_plan s as = exec_plan s as') \\<and> subseq as' as\n      \\<and> (length as' \\<le> (card (reachable_s PROB s) - 1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "proof (cases \"length as \\<le> card (reachable_s PROB s) - 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "case False"], ["proof (state)\nthis:\n  \\<not> length as \\<le> card (reachable_s PROB s) - 1\n\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "let ?as' = \"as\""], ["proof (state)\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "have \"length as > card (reachable_s PROB s) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (reachable_s PROB s) - 1 < length as", "using False"], ["proof (prove)\nusing this:\n  \\<not> length as \\<le> card (reachable_s PROB s) - 1\n\ngoal (1 subgoal):\n 1. card (reachable_s PROB s) - 1 < length as", "by simp"], ["proof (state)\nthis:\n  card (reachable_s PROB s) - 1 < length as\n\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "{"], ["proof (state)\nthis:\n  card (reachable_s PROB s) - 1 < length as\n\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "fix p"], ["proof (state)\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "assume P: \"exec_plan s as = exec_plan s p\" \"subseq p as\"\n      \"card (reachable_s PROB s) - 1 < length p\""], ["proof (state)\nthis:\n  exec_plan s as = exec_plan s p\n  subseq p as\n  card (reachable_s PROB s) - 1 < length p\n\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "moreover"], ["proof (state)\nthis:\n  exec_plan s as = exec_plan s p\n  subseq p as\n  card (reachable_s PROB s) - 1 < length p\n\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "have \"p \\<in> valid_plans PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> valid_plans PROB", "using assms(3) P(2) sublist_valid_is_valid"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  subseq p as\n  \\<lbrakk>?as \\<in> valid_plans ?PROB; subseq ?as' ?as\\<rbrakk>\n  \\<Longrightarrow> ?as' \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. p \\<in> valid_plans PROB", "by blast"], ["proof (state)\nthis:\n  p \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "ultimately"], ["proof (chain)\npicking this:\n  exec_plan s as = exec_plan s p\n  subseq p as\n  card (reachable_s PROB s) - 1 < length p\n  p \\<in> valid_plans PROB", "obtain as' where 1:\n      \"exec_plan s p = exec_plan s as'\" \"length as' < length p\" \"subseq as' p\""], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s p\n  subseq p as\n  card (reachable_s PROB s) - 1 < length p\n  p \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        \\<lbrakk>exec_plan s p = exec_plan s as'; length as' < length p;\n         subseq as' p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms lemma_3_reachability_s"], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s p\n  subseq p as\n  card (reachable_s PROB s) - 1 < length p\n  p \\<in> valid_plans PROB\n  finite PROB\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<lbrakk>finite ?PROB; ?s \\<in> valid_states ?PROB;\n   ?as \\<in> valid_plans ?PROB;\n   card (reachable_s ?PROB ?s) - 1 < length ?as\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as'.\n                       exec_plan ?s ?as = exec_plan ?s as' \\<and>\n                       length as' < length ?as \\<and> subseq as' ?as\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        \\<lbrakk>exec_plan s p = exec_plan s as'; length as' < length p;\n         subseq as' p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  exec_plan s p = exec_plan s as'\n  length as' < length p\n  subseq as' p\n\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "then"], ["proof (chain)\npicking this:\n  exec_plan s p = exec_plan s as'\n  length as' < length p\n  subseq as' p", "have \"exec_plan s as = exec_plan s as'\""], ["proof (prove)\nusing this:\n  exec_plan s p = exec_plan s as'\n  length as' < length p\n  subseq as' p\n\ngoal (1 subgoal):\n 1. exec_plan s as = exec_plan s as'", "using P"], ["proof (prove)\nusing this:\n  exec_plan s p = exec_plan s as'\n  length as' < length p\n  subseq as' p\n  exec_plan s as = exec_plan s p\n  subseq p as\n  card (reachable_s PROB s) - 1 < length p\n\ngoal (1 subgoal):\n 1. exec_plan s as = exec_plan s as'", "by presburger"], ["proof (state)\nthis:\n  exec_plan s as = exec_plan s as'\n\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "moreover"], ["proof (state)\nthis:\n  exec_plan s as = exec_plan s as'\n\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "have \"subseq as' as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq as' as", "using P 1 sublist_trans"], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s p\n  subseq p as\n  card (reachable_s PROB s) - 1 < length p\n  exec_plan s p = exec_plan s as'\n  length as' < length p\n  subseq as' p\n  \\<lbrakk>subseq ?l1.0 ?l2.0; subseq ?l2.0 ?l3.0\\<rbrakk>\n  \\<Longrightarrow> subseq ?l1.0 ?l3.0\n\ngoal (1 subgoal):\n 1. subseq as' as", "by blast"], ["proof (state)\nthis:\n  subseq as' as\n\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "ultimately"], ["proof (chain)\npicking this:\n  exec_plan s as = exec_plan s as'\n  subseq as' as", "have \"(\\<exists>p'. (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and> length p' < length p)\""], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s as'\n  subseq as' as\n\ngoal (1 subgoal):\n 1. \\<exists>p'.\n       (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n       length p' < length p", "using 1"], ["proof (prove)\nusing this:\n  exec_plan s as = exec_plan s as'\n  subseq as' as\n  exec_plan s p = exec_plan s as'\n  length as' < length p\n  subseq as' p\n\ngoal (1 subgoal):\n 1. \\<exists>p'.\n       (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n       length p' < length p", "by blast"], ["proof (state)\nthis:\n  \\<exists>p'.\n     (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n     length p' < length p\n\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "}"], ["proof (state)\nthis:\n  \\<lbrakk>exec_plan s as = exec_plan s ?p2; subseq ?p2 as;\n   card (reachable_s PROB s) - 1 < length ?p2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p'.\n                       (exec_plan s as = exec_plan s p' \\<and>\n                        subseq p' as) \\<and>\n                       length p' < length ?p2\n\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>exec_plan s as = exec_plan s ?p2; subseq ?p2 as;\n   card (reachable_s PROB s) - 1 < length ?p2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p'.\n                       (exec_plan s as = exec_plan s p' \\<and>\n                        subseq p' as) \\<and>\n                       length p' < length ?p2", "have \"\\<forall>p.\n      exec_plan s as = exec_plan s p \\<and> subseq p as\n      \\<longrightarrow> (\\<exists>p'.\n        (exec_plan s as = exec_plan s p' \\<and> subseq p' as)\n        \\<and> length p' \\<le> card (reachable_s PROB s) - 1)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>exec_plan s as = exec_plan s ?p2; subseq ?p2 as;\n   card (reachable_s PROB s) - 1 < length ?p2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p'.\n                       (exec_plan s as = exec_plan s p' \\<and>\n                        subseq p' as) \\<and>\n                       length p' < length ?p2\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       exec_plan s as = exec_plan s p \\<and> subseq p as \\<longrightarrow>\n       (\\<exists>p'.\n           (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n           length p' \\<le> card (reachable_s PROB s) - 1)", "using general_theorem[of \"\\<lambda>as''. (exec_plan s as = exec_plan s as'') \\<and> subseq as'' as\"\n        \"(card (reachable_s (PROB :: 'a problem) (s :: 'a state)) - 1)\" length]"], ["proof (prove)\nusing this:\n  \\<lbrakk>exec_plan s as = exec_plan s ?p2; subseq ?p2 as;\n   card (reachable_s PROB s) - 1 < length ?p2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p'.\n                       (exec_plan s as = exec_plan s p' \\<and>\n                        subseq p' as) \\<and>\n                       length p' < length ?p2\n  \\<forall>p.\n     (exec_plan s as = exec_plan s p \\<and> subseq p as) \\<and>\n     card (reachable_s PROB s) - 1 < length p \\<longrightarrow>\n     (\\<exists>p'.\n         (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n         length p' < length p) \\<Longrightarrow>\n  \\<forall>p.\n     exec_plan s as = exec_plan s p \\<and> subseq p as \\<longrightarrow>\n     (\\<exists>p'.\n         (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n         length p' \\<le> card (reachable_s PROB s) - 1)\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       exec_plan s as = exec_plan s p \\<and> subseq p as \\<longrightarrow>\n       (\\<exists>p'.\n           (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n           length p' \\<le> card (reachable_s PROB s) - 1)", "by blast"], ["proof (state)\nthis:\n  \\<forall>p.\n     exec_plan s as = exec_plan s p \\<and> subseq p as \\<longrightarrow>\n     (\\<exists>p'.\n         (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n         length p' \\<le> card (reachable_s PROB s) - 1)\n\ngoal (2 subgoals):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n 2. \\<not> length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "then"], ["proof (chain)\npicking this:\n  \\<forall>p.\n     exec_plan s as = exec_plan s p \\<and> subseq p as \\<longrightarrow>\n     (\\<exists>p'.\n         (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n         length p' \\<le> card (reachable_s PROB s) - 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p.\n     exec_plan s as = exec_plan s p \\<and> subseq p as \\<longrightarrow>\n     (\\<exists>p'.\n         (exec_plan s as = exec_plan s p' \\<and> subseq p' as) \\<and>\n         length p' \\<le> card (reachable_s PROB s) - 1)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "by blast"], ["proof (state)\nthis:\n  \\<exists>as'.\n     exec_plan s as = exec_plan s as' \\<and>\n     subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1\n\ngoal (1 subgoal):\n 1. length as \\<le> card (reachable_s PROB s) - 1 \\<Longrightarrow>\n    \\<exists>as'.\n       exec_plan s as = exec_plan s as' \\<and>\n       subseq as' as \\<and> length as' \\<le> card (reachable_s PROB s) - 1", "qed blast"], ["", "lemma reachable_s_non_empty: \"\\<not>(reachable_s PROB s = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reachable_s PROB s \\<noteq> {}", "using empty_plan_is_valid reachable_s_def"], ["proof (prove)\nusing this:\n  [] \\<in> valid_plans ?PROB\n  reachable_s ?PROB ?s \\<equiv>\n  {exec_plan ?s as |as. as \\<in> valid_plans ?PROB}\n\ngoal (1 subgoal):\n 1. reachable_s PROB s \\<noteq> {}", "by blast"], ["", "lemma card_reachable_s_non_zero:\n  fixes s\n  assumes \"finite (PROB :: 'a problem)\" \"(s \\<in> valid_states PROB)\"\n  shows \"(0 < card (reachable_s PROB s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < card (reachable_s PROB s)", "using assms"], ["proof (prove)\nusing this:\n  finite PROB\n  s \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. 0 < card (reachable_s PROB s)", "by (simp add: card_gt_0_iff reachable_s_finite_thm reachable_s_non_empty)"], ["", "lemma exec_fdom_empty_prob:\n  fixes s\n  assumes \"(prob_dom PROB = {})\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"(exec_plan s as = fmempty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s as = fmempty", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. exec_plan s as = fmempty", "have \"fmdom' s = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' s = {}", "using assms(1, 2)"], ["proof (prove)\nusing this:\n  prob_dom PROB = {}\n  s \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. fmdom' s = {}", "by (simp add: valid_states_def)"], ["proof (state)\nthis:\n  fmdom' s = {}\n\ngoal (1 subgoal):\n 1. exec_plan s as = fmempty", "then"], ["proof (chain)\npicking this:\n  fmdom' s = {}", "show \"exec_plan s as = fmempty\""], ["proof (prove)\nusing this:\n  fmdom' s = {}\n\ngoal (1 subgoal):\n 1. exec_plan s as = fmempty", "using assms(1, 3)"], ["proof (prove)\nusing this:\n  fmdom' s = {}\n  prob_dom PROB = {}\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. exec_plan s as = fmempty", "by (metis\n        exec_plan_fdom_subset fmrestrict_set_dom fmrestrict_set_null subset_empty\n        sup_bot.left_neutral)"], ["proof (state)\nthis:\n  exec_plan s as = fmempty\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE types for `PROB` and `s` had to be fixed (type mismatch in goal).\\<close>"], ["", "lemma reachable_s_empty_prob:\n  fixes PROB :: \"'a problem\" and s :: \"'a state\"\n  assumes \"(prob_dom PROB = {})\" \"(s \\<in> valid_states PROB)\"\n  shows \"((reachable_s PROB s) \\<subseteq> {fmempty})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reachable_s PROB s \\<subseteq> {fmempty}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. reachable_s PROB s \\<subseteq> {fmempty}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. reachable_s PROB s \\<subseteq> {fmempty}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. reachable_s PROB s \\<subseteq> {fmempty}", "assume P1: \"x \\<in> reachable_s PROB s\""], ["proof (state)\nthis:\n  x \\<in> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. reachable_s PROB s \\<subseteq> {fmempty}", "then"], ["proof (chain)\npicking this:\n  x \\<in> reachable_s PROB s", "obtain as :: \"'a action list\" where a:\n      \"as \\<in> valid_plans PROB\" \"x = exec_plan s as\""], ["proof (prove)\nusing this:\n  x \\<in> reachable_s PROB s\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>as \\<in> valid_plans PROB; x = exec_plan s as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using reachable_s_def"], ["proof (prove)\nusing this:\n  x \\<in> reachable_s PROB s\n  reachable_s ?PROB ?s \\<equiv>\n  {exec_plan ?s as |as. as \\<in> valid_plans ?PROB}\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>as \\<in> valid_plans PROB; x = exec_plan s as\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB\n  x = exec_plan s as\n\ngoal (1 subgoal):\n 1. reachable_s PROB s \\<subseteq> {fmempty}", "then"], ["proof (chain)\npicking this:\n  as \\<in> valid_plans PROB\n  x = exec_plan s as", "have \"as \\<in> valid_plans PROB\" \"x = exec_plan s as\""], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  x = exec_plan s as\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB &&& x = exec_plan s as", "using a"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  x = exec_plan s as\n  as \\<in> valid_plans PROB\n  x = exec_plan s as\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB &&& x = exec_plan s as", "by auto"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB\n  x = exec_plan s as\n\ngoal (1 subgoal):\n 1. reachable_s PROB s \\<subseteq> {fmempty}", "then"], ["proof (chain)\npicking this:\n  as \\<in> valid_plans PROB\n  x = exec_plan s as", "have \"x = fmempty\""], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  x = exec_plan s as\n\ngoal (1 subgoal):\n 1. x = fmempty", "using assms(1, 2) exec_fdom_empty_prob"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  x = exec_plan s as\n  prob_dom PROB = {}\n  s \\<in> valid_states PROB\n  \\<lbrakk>prob_dom ?PROB = {}; ?s \\<in> valid_states ?PROB;\n   ?as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s ?as = fmempty\n\ngoal (1 subgoal):\n 1. x = fmempty", "by blast"], ["proof (state)\nthis:\n  x = fmempty\n\ngoal (1 subgoal):\n 1. reachable_s PROB s \\<subseteq> {fmempty}", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> reachable_s PROB s \\<Longrightarrow> ?x2 = fmempty\n\ngoal (1 subgoal):\n 1. reachable_s PROB s \\<subseteq> {fmempty}", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> reachable_s PROB s \\<Longrightarrow> ?x2 = fmempty", "show \"((reachable_s PROB s) \\<subseteq> {fmempty})\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> reachable_s PROB s \\<Longrightarrow> ?x2 = fmempty\n\ngoal (1 subgoal):\n 1. reachable_s PROB s \\<subseteq> {fmempty}", "by blast"], ["proof (state)\nthis:\n  reachable_s PROB s \\<subseteq> {fmempty}\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE this is semantically equivalent to `sublist\\_valid\\_is\\_valid`.\\<close>\n\\<comment> \\<open>NOTE Renamed to 'sublist\\_valid\\_plan\\_alt' because another lemma by the same name is declared\nlater.\\<close>"], ["", "lemma sublist_valid_plan__alt:\n  assumes \"(as1 \\<in> valid_plans PROB)\" \"(subseq as2 as1)\"\n  shows \"(as2 \\<in> valid_plans PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as2 \\<in> valid_plans PROB", "using assms"], ["proof (prove)\nusing this:\n  as1 \\<in> valid_plans PROB\n  subseq as2 as1\n\ngoal (1 subgoal):\n 1. as2 \\<in> valid_plans PROB", "by (auto simp add: sublist_valid_is_valid)"], ["", "lemma fmsubset_eq:\n  assumes \"s1 \\<subseteq>\\<^sub>f s2\"\n  shows \"(\\<forall>a. a |\\<in>| fmdom s1 \\<longrightarrow> fmlookup s1 a = fmlookup s2 a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       a |\\<in>| fmdom s1 \\<longrightarrow> fmlookup s1 a = fmlookup s2 a", "using assms"], ["proof (prove)\nusing this:\n  s1 \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       a |\\<in>| fmdom s1 \\<longrightarrow> fmlookup s1 a = fmlookup s2 a", "by (metis (mono_tags, lifting) domIff fmdom_notI fmsubset.rep_eq map_le_def)\n\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor/move into 'FmapUtils.thy'.\\<close>"], ["", "lemma submap_imp_state_succ_submap_a:\n  assumes \"s1 \\<subseteq>\\<^sub>f s2\" \"s2 \\<subseteq>\\<^sub>f s3\"\n  shows \"s1 \\<subseteq>\\<^sub>f s3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 \\<subseteq>\\<^sub>f s3", "using assms fmsubset.rep_eq map_le_trans"], ["proof (prove)\nusing this:\n  s1 \\<subseteq>\\<^sub>f s2\n  s2 \\<subseteq>\\<^sub>f s3\n  (?x \\<subseteq>\\<^sub>f ?xa) =\n  (fmlookup ?x \\<subseteq>\\<^sub>m fmlookup ?xa)\n  \\<lbrakk>?m1.0 \\<subseteq>\\<^sub>m ?m2.0;\n   ?m2.0 \\<subseteq>\\<^sub>m ?m3.0\\<rbrakk>\n  \\<Longrightarrow> ?m1.0 \\<subseteq>\\<^sub>m ?m3.0\n\ngoal (1 subgoal):\n 1. s1 \\<subseteq>\\<^sub>f s3", "by blast\n\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor into FmapUtils?\\<close>"], ["", "lemma submap_imp_state_succ_submap_b:\n  assumes \"s1 \\<subseteq>\\<^sub>f s2\"\n  shows \"(s0 ++ s1) \\<subseteq>\\<^sub>f (s0 ++ s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2", "assume C: \"\\<not>((s0 ++ s1) \\<subseteq>\\<^sub>f (s0 ++ s2))\""], ["proof (state)\nthis:\n  \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2\n\ngoal (1 subgoal):\n 1. s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2", "then"], ["proof (chain)\npicking this:\n  \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2", "have 1: \"(s0 ++ s1) = (s1 ++\\<^sub>f s0)\""], ["proof (prove)\nusing this:\n  \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2\n\ngoal (1 subgoal):\n 1. s0 ++ s1 = s1 ++\\<^sub>f s0", "using fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2\n  ?m1.0 ++ ?m2.0 \\<equiv> ?m2.0 ++\\<^sub>f ?m1.0\n\ngoal (1 subgoal):\n 1. s0 ++ s1 = s1 ++\\<^sub>f s0", "by blast"], ["proof (state)\nthis:\n  s0 ++ s1 = s1 ++\\<^sub>f s0\n\ngoal (1 subgoal):\n 1. s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2", "then"], ["proof (chain)\npicking this:\n  s0 ++ s1 = s1 ++\\<^sub>f s0", "have 2: \"(s0 ++ s2) = (s2 ++\\<^sub>f s0)\""], ["proof (prove)\nusing this:\n  s0 ++ s1 = s1 ++\\<^sub>f s0\n\ngoal (1 subgoal):\n 1. s0 ++ s2 = s2 ++\\<^sub>f s0", "using fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  s0 ++ s1 = s1 ++\\<^sub>f s0\n  ?m1.0 ++ ?m2.0 \\<equiv> ?m2.0 ++\\<^sub>f ?m1.0\n\ngoal (1 subgoal):\n 1. s0 ++ s2 = s2 ++\\<^sub>f s0", "by auto"], ["proof (state)\nthis:\n  s0 ++ s2 = s2 ++\\<^sub>f s0\n\ngoal (1 subgoal):\n 1. s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2", "then"], ["proof (chain)\npicking this:\n  s0 ++ s2 = s2 ++\\<^sub>f s0", "obtain a where 3:\n      \"a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and> fmlookup (s1 ++\\<^sub>f s0) \\<noteq> fmlookup (s2 ++\\<^sub>f s0)\""], ["proof (prove)\nusing this:\n  s0 ++ s2 = s2 ++\\<^sub>f s0\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n        fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n        fmlookup (s2 ++\\<^sub>f s0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using C 1 2 fmsubset.rep_eq domIff fmdom_notD map_le_def"], ["proof (prove)\nusing this:\n  s0 ++ s2 = s2 ++\\<^sub>f s0\n  \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2\n  s0 ++ s1 = s1 ++\\<^sub>f s0\n  s0 ++ s2 = s2 ++\\<^sub>f s0\n  (?x \\<subseteq>\\<^sub>f ?xa) =\n  (fmlookup ?x \\<subseteq>\\<^sub>m fmlookup ?xa)\n  (?a \\<in> dom ?m) = (?m ?a \\<noteq> None)\n  ?x |\\<notin>| fmdom ?m \\<Longrightarrow> fmlookup ?m ?x = None\n  (?m\\<^sub>1 \\<subseteq>\\<^sub>m ?m\\<^sub>2) =\n  (\\<forall>a\\<in>dom ?m\\<^sub>1. ?m\\<^sub>1 a = ?m\\<^sub>2 a)\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n        fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n        fmlookup (s2 ++\\<^sub>f s0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n  fmlookup (s1 ++\\<^sub>f s0) \\<noteq> fmlookup (s2 ++\\<^sub>f s0)\n\ngoal (1 subgoal):\n 1. s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2", "then"], ["proof (chain)\npicking this:\n  a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n  fmlookup (s1 ++\\<^sub>f s0) \\<noteq> fmlookup (s2 ++\\<^sub>f s0)", "have False"], ["proof (prove)\nusing this:\n  a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n  fmlookup (s1 ++\\<^sub>f s0) \\<noteq> fmlookup (s2 ++\\<^sub>f s0)\n\ngoal (1 subgoal):\n 1. False", "using assms(1) C"], ["proof (prove)\nusing this:\n  a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n  fmlookup (s1 ++\\<^sub>f s0) \\<noteq> fmlookup (s2 ++\\<^sub>f s0)\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2\n\ngoal (1 subgoal):\n 1. False", "proof (cases \"a |\\<in>| fmdom s1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<in>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  a |\\<in>| fmdom s1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<in>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  a |\\<in>| fmdom s1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<in>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "have \"fmlookup s1 a = fmlookup s2 a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup s1 a = fmlookup s2 a", "by (meson assms(1) calculation fmsubset_eq)"], ["proof (state)\nthis:\n  fmlookup s1 a = fmlookup s2 a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<in>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  fmlookup s1 a = fmlookup s2 a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<in>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "have \"fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s1 a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s1 a", "by (simp add: True)"], ["proof (state)\nthis:\n  fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s1 a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<in>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s1 a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<in>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "have \"a |\\<in>| fmdom s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a |\\<in>| fmdom s2", "using True calculation(2) fmdom_notD"], ["proof (prove)\nusing this:\n  a |\\<in>| fmdom s1\n  fmlookup s1 a = fmlookup s2 a\n  ?x |\\<notin>| fmdom ?m \\<Longrightarrow> fmlookup ?m ?x = None\n\ngoal (1 subgoal):\n 1. a |\\<in>| fmdom s2", "by fastforce"], ["proof (state)\nthis:\n  a |\\<in>| fmdom s2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<in>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  a |\\<in>| fmdom s2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<in>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "have \"fmlookup (s0 ++\\<^sub>f s2) a = fmlookup s2 a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (s0 ++\\<^sub>f s2) a = fmlookup s2 a", "by (simp add: calculation(4))"], ["proof (state)\nthis:\n  fmlookup (s0 ++\\<^sub>f s2) a = fmlookup s2 a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<in>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  fmlookup (s0 ++\\<^sub>f s2) a = fmlookup s2 a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<in>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "have \"fmlookup (s0 ++\\<^sub>f s1) a = fmlookup (s0 ++\\<^sub>f s2) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (s0 ++\\<^sub>f s1) a = fmlookup (s0 ++\\<^sub>f s2) a", "using calculation(2, 3, 5)"], ["proof (prove)\nusing this:\n  fmlookup s1 a = fmlookup s2 a\n  fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s1 a\n  fmlookup (s0 ++\\<^sub>f s2) a = fmlookup s2 a\n\ngoal (1 subgoal):\n 1. fmlookup (s0 ++\\<^sub>f s1) a = fmlookup (s0 ++\\<^sub>f s2) a", "by auto"], ["proof (state)\nthis:\n  fmlookup (s0 ++\\<^sub>f s1) a = fmlookup (s0 ++\\<^sub>f s2) a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<in>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  a |\\<in>| fmdom s1\n  fmlookup s1 a = fmlookup s2 a\n  fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s1 a\n  a |\\<in>| fmdom s2\n  fmlookup (s0 ++\\<^sub>f s2) a = fmlookup s2 a\n  fmlookup (s0 ++\\<^sub>f s1) a = fmlookup (s0 ++\\<^sub>f s2) a", "show ?thesis"], ["proof (prove)\nusing this:\n  a |\\<in>| fmdom s1\n  fmlookup s1 a = fmlookup s2 a\n  fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s1 a\n  a |\\<in>| fmdom s2\n  fmlookup (s0 ++\\<^sub>f s2) a = fmlookup s2 a\n  fmlookup (s0 ++\\<^sub>f s1) a = fmlookup (s0 ++\\<^sub>f s2) a\n\ngoal (1 subgoal):\n 1. False", "by (smt \"1\" \"2\" C assms domIff fmlookup_add fmsubset.rep_eq map_le_def)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  a |\\<notin>| fmdom s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  a |\\<notin>| fmdom s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "have \"fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a", "by (auto simp add: False)"], ["proof (state)\nthis:\n  fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n             fmlookup (s1 ++\\<^sub>f s0) \\<noteq>\n             fmlookup (s2 ++\\<^sub>f s0);\n     s1 \\<subseteq>\\<^sub>f s2;\n     \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2;\n     a |\\<notin>| fmdom s1\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  a |\\<notin>| fmdom s1\n  fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a", "show ?thesis"], ["proof (prove)\nusing this:\n  a |\\<notin>| fmdom s1\n  fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a\n\ngoal (1 subgoal):\n 1. False", "proof (cases \"a |\\<in>| fmdom s0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a |\\<notin>| fmdom s1;\n     fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a;\n     a |\\<in>| fmdom s0\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a |\\<notin>| fmdom s1;\n     fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a;\n     a |\\<notin>| fmdom s0\\<rbrakk>\n    \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  a |\\<in>| fmdom s0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a |\\<notin>| fmdom s1;\n     fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a;\n     a |\\<in>| fmdom s0\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a |\\<notin>| fmdom s1;\n     fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a;\n     a |\\<notin>| fmdom s0\\<rbrakk>\n    \\<Longrightarrow> False", "have \"a |\\<notin>| fmdom (s1 ++\\<^sub>f s0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a |\\<notin>| fmdom (s1 ++\\<^sub>f s0)", "by (smt \"1\" \"2\" C UnE assms dom_map_add fmadd.rep_eq fmsubset.rep_eq map_add_def\n              map_add_dom_app_simps(1) map_le_def)"], ["proof (state)\nthis:\n  a |\\<notin>| fmdom (s1 ++\\<^sub>f s0)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a |\\<notin>| fmdom s1;\n     fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a;\n     a |\\<in>| fmdom s0\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a |\\<notin>| fmdom s1;\n     fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a;\n     a |\\<notin>| fmdom s0\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  a |\\<notin>| fmdom (s1 ++\\<^sub>f s0)", "show ?thesis"], ["proof (prove)\nusing this:\n  a |\\<notin>| fmdom (s1 ++\\<^sub>f s0)\n\ngoal (1 subgoal):\n 1. False", "using 3"], ["proof (prove)\nusing this:\n  a |\\<notin>| fmdom (s1 ++\\<^sub>f s0)\n  a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n  fmlookup (s1 ++\\<^sub>f s0) \\<noteq> fmlookup (s2 ++\\<^sub>f s0)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a |\\<notin>| fmdom s1;\n     fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a;\n     a |\\<notin>| fmdom s0\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a |\\<notin>| fmdom s1;\n     fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a;\n     a |\\<notin>| fmdom s0\\<rbrakk>\n    \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  a |\\<notin>| fmdom s0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a |\\<notin>| fmdom s1;\n     fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a;\n     a |\\<notin>| fmdom s0\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  a |\\<notin>| fmdom s0", "have \"a |\\<notin>| fmdom (s1 ++\\<^sub>f s0)\""], ["proof (prove)\nusing this:\n  a |\\<notin>| fmdom s0\n\ngoal (1 subgoal):\n 1. a |\\<notin>| fmdom (s1 ++\\<^sub>f s0)", "using \\<open>fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a\\<close>"], ["proof (prove)\nusing this:\n  a |\\<notin>| fmdom s0\n  fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a\n\ngoal (1 subgoal):\n 1. a |\\<notin>| fmdom (s1 ++\\<^sub>f s0)", "by force"], ["proof (state)\nthis:\n  a |\\<notin>| fmdom (s1 ++\\<^sub>f s0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a |\\<notin>| fmdom s1;\n     fmlookup (s0 ++\\<^sub>f s1) a = fmlookup s0 a;\n     a |\\<notin>| fmdom s0\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  a |\\<notin>| fmdom (s1 ++\\<^sub>f s0)", "show ?thesis"], ["proof (prove)\nusing this:\n  a |\\<notin>| fmdom (s1 ++\\<^sub>f s0)\n\ngoal (1 subgoal):\n 1. False", "using 3"], ["proof (prove)\nusing this:\n  a |\\<notin>| fmdom (s1 ++\\<^sub>f s0)\n  a |\\<in>| fmdom (s1 ++\\<^sub>f s0) \\<and>\n  fmlookup (s1 ++\\<^sub>f s0) \\<noteq> fmlookup (s2 ++\\<^sub>f s0)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2", "}"], ["proof (state)\nthis:\n  \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2", "then"], ["proof (chain)\npicking this:\n  \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2 \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2", "by blast"], ["proof (state)\nthis:\n  s0 ++ s1 \\<subseteq>\\<^sub>f s0 ++ s2\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE type for `a` had to be fixed (type mismatch in goal).\\<close>"], ["", "lemma submap_imp_state_succ_submap:\n  fixes a :: \"'a action\" and s1 s2\n  assumes \"(fst a \\<subseteq>\\<^sub>f s1)\" \"(s1 \\<subseteq>\\<^sub>f s2)\"\n  shows \"(state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "have 1: \"state_succ s1 a = (snd a ++ s1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s1 a = snd a ++ s1", "using assms(1)"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. state_succ s1 a = snd a ++ s1", "by (simp add: state_succ_def)"], ["proof (state)\nthis:\n  state_succ s1 a = snd a ++ s1\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "then"], ["proof (chain)\npicking this:\n  state_succ s1 a = snd a ++ s1", "have \"fst a \\<subseteq>\\<^sub>f s2\""], ["proof (prove)\nusing this:\n  state_succ s1 a = snd a ++ s1\n\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s2", "using assms(1, 2) submap_imp_state_succ_submap_a"], ["proof (prove)\nusing this:\n  state_succ s1 a = snd a ++ s1\n  fst a \\<subseteq>\\<^sub>f s1\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   ?s2.0 \\<subseteq>\\<^sub>f ?s3.0\\<rbrakk>\n  \\<Longrightarrow> ?s1.0 \\<subseteq>\\<^sub>f ?s3.0\n\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s2", "by auto"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "then"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s2", "have 2: \"state_succ s2 a = (snd a ++ s2)\""], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. state_succ s2 a = snd a ++ s2", "using 1 state_succ_def"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s2\n  state_succ s1 a = snd a ++ s1\n  state_succ ?s ?a \\<equiv>\n  if fst ?a \\<subseteq>\\<^sub>f ?s then snd ?a ++ ?s else ?s\n\ngoal (1 subgoal):\n 1. state_succ s2 a = snd a ++ s2", "by metis"], ["proof (state)\nthis:\n  state_succ s2 a = snd a ++ s2\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "then"], ["proof (chain)\npicking this:\n  state_succ s2 a = snd a ++ s2", "have \"snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2\""], ["proof (prove)\nusing this:\n  state_succ s2 a = snd a ++ s2\n\ngoal (1 subgoal):\n 1. snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2", "using assms(2) submap_imp_state_succ_submap_b"], ["proof (prove)\nusing this:\n  state_succ s2 a = snd a ++ s2\n  s1 \\<subseteq>\\<^sub>f s2\n  ?s1.0 \\<subseteq>\\<^sub>f ?s2.0 \\<Longrightarrow>\n  ?s0.0 ++ ?s1.0 \\<subseteq>\\<^sub>f ?s0.0 ++ ?s2.0\n\ngoal (1 subgoal):\n 1. snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2", "by fast"], ["proof (state)\nthis:\n  snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "then"], ["proof (chain)\npicking this:\n  snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2", "show ?thesis"], ["proof (prove)\nusing this:\n  snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "using 1 2"], ["proof (prove)\nusing this:\n  snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2\n  state_succ s1 a = snd a ++ s1\n  state_succ s2 a = snd a ++ s2\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "by argo"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE types for `a`, `s1` and `s2` had to be fixed (type mismatch in goal).\\<close>"], ["", "lemma pred_dom_subset_succ_submap:\n  fixes a :: \"'a action\" and s1 s2 :: \"'a state\"\n  assumes \"(fmdom' (fst a) \\<subseteq> fmdom' s1)\" \"(s1 \\<subseteq>\\<^sub>f s2)\"\n  shows \"(state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "using assms"], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n  s1 \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n  s1 \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1\n     else s1) \\<subseteq>\\<^sub>f\n    (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2)", "proof (auto)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2\n 2. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> snd a ++ s1 \\<subseteq>\\<^sub>f s2\n 3. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "assume P1: \"fmdom' (fst a) \\<subseteq> fmdom' s1\" \"s1 \\<subseteq>\\<^sub>f s2\" \"fst a \\<subseteq>\\<^sub>f s1\" \"fst a \\<subseteq>\\<^sub>f s2\""], ["proof (state)\nthis:\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (3 subgoals):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2\n 2. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> snd a ++ s1 \\<subseteq>\\<^sub>f s2\n 3. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  fst a \\<subseteq>\\<^sub>f s2", "show \"snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2\""], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2", "using submap_imp_state_succ_submap_b"], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  fst a \\<subseteq>\\<^sub>f s2\n  ?s1.0 \\<subseteq>\\<^sub>f ?s2.0 \\<Longrightarrow>\n  ?s0.0 ++ ?s1.0 \\<subseteq>\\<^sub>f ?s0.0 ++ ?s2.0\n\ngoal (1 subgoal):\n 1. snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2", "by fast"], ["proof (state)\nthis:\n  snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> snd a ++ s1 \\<subseteq>\\<^sub>f s2\n 2. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> snd a ++ s1 \\<subseteq>\\<^sub>f s2\n 2. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "assume P2: \"fmdom' (fst a) \\<subseteq> fmdom' s1\" \"s1 \\<subseteq>\\<^sub>f s2\" \"fst a \\<subseteq>\\<^sub>f s1\" \"\\<not> fst a \\<subseteq>\\<^sub>f s2\""], ["proof (state)\nthis:\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> snd a ++ s1 \\<subseteq>\\<^sub>f s2\n 2. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  \\<not> fst a \\<subseteq>\\<^sub>f s2", "show \"snd a ++ s1 \\<subseteq>\\<^sub>f s2\""], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. snd a ++ s1 \\<subseteq>\\<^sub>f s2", "using submap_imp_state_succ_submap_a"], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   ?s2.0 \\<subseteq>\\<^sub>f ?s3.0\\<rbrakk>\n  \\<Longrightarrow> ?s1.0 \\<subseteq>\\<^sub>f ?s3.0\n\ngoal (1 subgoal):\n 1. snd a ++ s1 \\<subseteq>\\<^sub>f s2", "by blast"], ["proof (state)\nthis:\n  snd a ++ s1 \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "assume P3: \"fmdom' (fst a) \\<subseteq> fmdom' s1\" \"s1 \\<subseteq>\\<^sub>f s2\" \"\\<not> fst a \\<subseteq>\\<^sub>f s1\" \"fst a \\<subseteq>\\<^sub>f s2\""], ["proof (state)\nthis:\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<not> fst a \\<subseteq>\\<^sub>f s1\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "{"], ["proof (state)\nthis:\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<not> fst a \\<subseteq>\\<^sub>f s1\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "have a: \"fmlookup s1 \\<subseteq>\\<^sub>m fmlookup s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup s1 \\<subseteq>\\<^sub>m fmlookup s2", "using P3(2) fmsubset.rep_eq"], ["proof (prove)\nusing this:\n  s1 \\<subseteq>\\<^sub>f s2\n  (?x \\<subseteq>\\<^sub>f ?xa) =\n  (fmlookup ?x \\<subseteq>\\<^sub>m fmlookup ?xa)\n\ngoal (1 subgoal):\n 1. fmlookup s1 \\<subseteq>\\<^sub>m fmlookup s2", "by blast"], ["proof (state)\nthis:\n  fmlookup s1 \\<subseteq>\\<^sub>m fmlookup s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "{"], ["proof (state)\nthis:\n  fmlookup s1 \\<subseteq>\\<^sub>m fmlookup s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "have \"\\<not>(fmlookup (fst a) \\<subseteq>\\<^sub>m fmlookup s1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> fmlookup (fst a) \\<subseteq>\\<^sub>m fmlookup s1", "using P3(3) fmsubset.rep_eq"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s1\n  (?x \\<subseteq>\\<^sub>f ?xa) =\n  (fmlookup ?x \\<subseteq>\\<^sub>m fmlookup ?xa)\n\ngoal (1 subgoal):\n 1. \\<not> fmlookup (fst a) \\<subseteq>\\<^sub>m fmlookup s1", "by blast"], ["proof (state)\nthis:\n  \\<not> fmlookup (fst a) \\<subseteq>\\<^sub>m fmlookup s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  \\<not> fmlookup (fst a) \\<subseteq>\\<^sub>m fmlookup s1", "have \"\\<exists>v \\<in> dom (fmlookup (fst a)). fmlookup (fst a) v \\<noteq> fmlookup s1 v\""], ["proof (prove)\nusing this:\n  \\<not> fmlookup (fst a) \\<subseteq>\\<^sub>m fmlookup s1\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>dom (fmlookup (fst a)).\n       fmlookup (fst a) v \\<noteq> fmlookup s1 v", "using map_le_def"], ["proof (prove)\nusing this:\n  \\<not> fmlookup (fst a) \\<subseteq>\\<^sub>m fmlookup s1\n  (?m\\<^sub>1 \\<subseteq>\\<^sub>m ?m\\<^sub>2) =\n  (\\<forall>a\\<in>dom ?m\\<^sub>1. ?m\\<^sub>1 a = ?m\\<^sub>2 a)\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>dom (fmlookup (fst a)).\n       fmlookup (fst a) v \\<noteq> fmlookup s1 v", "by fast"], ["proof (state)\nthis:\n  \\<exists>v\\<in>dom (fmlookup (fst a)).\n     fmlookup (fst a) v \\<noteq> fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "}"], ["proof (state)\nthis:\n  \\<exists>v\\<in>dom (fmlookup (fst a)).\n     fmlookup (fst a) v \\<noteq> fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  \\<exists>v\\<in>dom (fmlookup (fst a)).\n     fmlookup (fst a) v \\<noteq> fmlookup s1 v", "obtain v where b: \"v \\<in> dom (fmlookup (fst a))\" \"fmlookup (fst a) v \\<noteq> fmlookup s1 v\""], ["proof (prove)\nusing this:\n  \\<exists>v\\<in>dom (fmlookup (fst a)).\n     fmlookup (fst a) v \\<noteq> fmlookup s1 v\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> dom (fmlookup (fst a));\n         fmlookup (fst a) v \\<noteq> fmlookup s1 v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v \\<in> dom (fmlookup (fst a))\n  fmlookup (fst a) v \\<noteq> fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  v \\<in> dom (fmlookup (fst a))\n  fmlookup (fst a) v \\<noteq> fmlookup s1 v", "have \"fmlookup (fst a) v \\<noteq> fmlookup s2 v\""], ["proof (prove)\nusing this:\n  v \\<in> dom (fmlookup (fst a))\n  fmlookup (fst a) v \\<noteq> fmlookup s1 v\n\ngoal (1 subgoal):\n 1. fmlookup (fst a) v \\<noteq> fmlookup s2 v", "using assms(1) a  contra_subsetD fmdom'.rep_eq map_le_def"], ["proof (prove)\nusing this:\n  v \\<in> dom (fmlookup (fst a))\n  fmlookup (fst a) v \\<noteq> fmlookup s1 v\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n  fmlookup s1 \\<subseteq>\\<^sub>m fmlookup s2\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<notin> ?A\n  fmdom' ?x = dom (fmlookup ?x)\n  (?m\\<^sub>1 \\<subseteq>\\<^sub>m ?m\\<^sub>2) =\n  (\\<forall>a\\<in>dom ?m\\<^sub>1. ?m\\<^sub>1 a = ?m\\<^sub>2 a)\n\ngoal (1 subgoal):\n 1. fmlookup (fst a) v \\<noteq> fmlookup s2 v", "by metis"], ["proof (state)\nthis:\n  fmlookup (fst a) v \\<noteq> fmlookup s2 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  fmlookup (fst a) v \\<noteq> fmlookup s2 v", "have \"\\<not>(fst a \\<subseteq>\\<^sub>f s2)\""], ["proof (prove)\nusing this:\n  fmlookup (fst a) v \\<noteq> fmlookup s2 v\n\ngoal (1 subgoal):\n 1. \\<not> fst a \\<subseteq>\\<^sub>f s2", "using b fmsubset.rep_eq map_le_def"], ["proof (prove)\nusing this:\n  fmlookup (fst a) v \\<noteq> fmlookup s2 v\n  v \\<in> dom (fmlookup (fst a))\n  fmlookup (fst a) v \\<noteq> fmlookup s1 v\n  (?x \\<subseteq>\\<^sub>f ?xa) =\n  (fmlookup ?x \\<subseteq>\\<^sub>m fmlookup ?xa)\n  (?m\\<^sub>1 \\<subseteq>\\<^sub>m ?m\\<^sub>2) =\n  (\\<forall>a\\<in>dom ?m\\<^sub>1. ?m\\<^sub>1 a = ?m\\<^sub>2 a)\n\ngoal (1 subgoal):\n 1. \\<not> fst a \\<subseteq>\\<^sub>f s2", "by metis"], ["proof (state)\nthis:\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "}"], ["proof (state)\nthis:\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (fst a) \\<subseteq> fmdom' s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s2", "show \"s1 \\<subseteq>\\<^sub>f snd a ++ s2\""], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. s1 \\<subseteq>\\<^sub>f snd a ++ s2", "using P3(4)"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. s1 \\<subseteq>\\<^sub>f snd a ++ s2", "by simp"], ["proof (state)\nthis:\n  s1 \\<subseteq>\\<^sub>f snd a ++ s2\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor.\\<close>"], ["", "lemma valid_as_submap_init_submap_exec_i:\n  fixes s a\n  shows \"fmdom' s \\<subseteq> fmdom' (state_succ s a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' s \\<subseteq> fmdom' (state_succ s a)", "proof (cases \"fst a \\<subseteq>\\<^sub>f s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmdom' s \\<subseteq> fmdom' (state_succ s a)\n 2. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmdom' s \\<subseteq> fmdom' (state_succ s a)", "case True"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s\n\ngoal (2 subgoals):\n 1. fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmdom' s \\<subseteq> fmdom' (state_succ s a)\n 2. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmdom' s \\<subseteq> fmdom' (state_succ s a)", "then"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s", "have \"state_succ s a = s ++\\<^sub>f (snd a)\""], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. state_succ s a = s ++\\<^sub>f snd a", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. (if fst a \\<subseteq>\\<^sub>f s then snd a ++ s else s) =\n    s ++\\<^sub>f snd a", "using fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n  ?m1.0 ++ ?m2.0 \\<equiv> ?m2.0 ++\\<^sub>f ?m1.0\n\ngoal (1 subgoal):\n 1. (if fst a \\<subseteq>\\<^sub>f s then snd a ++ s else s) =\n    s ++\\<^sub>f snd a", "by auto"], ["proof (state)\nthis:\n  state_succ s a = s ++\\<^sub>f snd a\n\ngoal (2 subgoals):\n 1. fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmdom' s \\<subseteq> fmdom' (state_succ s a)\n 2. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmdom' s \\<subseteq> fmdom' (state_succ s a)", "then"], ["proof (chain)\npicking this:\n  state_succ s a = s ++\\<^sub>f snd a", "have \"fmdom' (state_succ s a) = fmdom' s \\<union> fmdom' (snd a)\""], ["proof (prove)\nusing this:\n  state_succ s a = s ++\\<^sub>f snd a\n\ngoal (1 subgoal):\n 1. fmdom' (state_succ s a) = fmdom' s \\<union> fmdom' (snd a)", "using fmdom'_add"], ["proof (prove)\nusing this:\n  state_succ s a = s ++\\<^sub>f snd a\n  fmdom' (?m ++\\<^sub>f ?n) = fmdom' ?m \\<union> fmdom' ?n\n\ngoal (1 subgoal):\n 1. fmdom' (state_succ s a) = fmdom' s \\<union> fmdom' (snd a)", "by simp"], ["proof (state)\nthis:\n  fmdom' (state_succ s a) = fmdom' s \\<union> fmdom' (snd a)\n\ngoal (2 subgoals):\n 1. fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmdom' s \\<subseteq> fmdom' (state_succ s a)\n 2. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmdom' s \\<subseteq> fmdom' (state_succ s a)", "then"], ["proof (chain)\npicking this:\n  fmdom' (state_succ s a) = fmdom' s \\<union> fmdom' (snd a)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' (state_succ s a) = fmdom' s \\<union> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' s \\<subseteq> fmdom' (state_succ s a)", "by simp"], ["proof (state)\nthis:\n  fmdom' s \\<subseteq> fmdom' (state_succ s a)\n\ngoal (1 subgoal):\n 1. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmdom' s \\<subseteq> fmdom' (state_succ s a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmdom' s \\<subseteq> fmdom' (state_succ s a)", "case False"], ["proof (state)\nthis:\n  \\<not> fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmdom' s \\<subseteq> fmdom' (state_succ s a)", "then"], ["proof (chain)\npicking this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmdom' s \\<subseteq> fmdom' (state_succ s a)", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmdom' s\n    \\<subseteq> fmdom'\n                 (if fst a \\<subseteq>\\<^sub>f s then snd a ++ s else s)", "by simp"], ["proof (state)\nthis:\n  fmdom' s \\<subseteq> fmdom' (state_succ s a)\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE types for `s1` and `s2` had to be fixed in order to apply `pred\\_dom\\_subset\\_succ\\_submap`.\\<close>"], ["", "lemma valid_as_submap_init_submap_exec:\n  fixes s1 s2 :: \"'a state\"\n  assumes \"(s1 \\<subseteq>\\<^sub>f s2) \" \"(\\<forall>a. ListMem a as \\<longrightarrow> (fmdom' (fst a) \\<subseteq> fmdom' s1))\"\n  shows \"(exec_plan s1 as \\<subseteq>\\<^sub>f exec_plan s2 as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s1 as \\<subseteq>\\<^sub>f exec_plan s2 as", "using assms"], ["proof (prove)\nusing this:\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<forall>a.\n     ListMem a as \\<longrightarrow> fmdom' (fst a) \\<subseteq> fmdom' s1\n\ngoal (1 subgoal):\n 1. exec_plan s1 as \\<subseteq>\\<^sub>f exec_plan s2 as", "proof (induction as arbitrary: s1 s2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   \\<forall>a.\n      ListMem a as \\<longrightarrow>\n      fmdom' (fst a) \\<subseteq> fmdom' ?s1.0\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s1.0 as \\<subseteq>\\<^sub>f\n                    exec_plan ?s2.0 as\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     fmdom' (fst aa) \\<subseteq> fmdom' s1\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   \\<forall>a.\n      ListMem a as \\<longrightarrow>\n      fmdom' (fst a) \\<subseteq> fmdom' ?s1.0\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s1.0 as \\<subseteq>\\<^sub>f\n                    exec_plan ?s2.0 as\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     fmdom' (fst aa) \\<subseteq> fmdom' s1\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "have \"ListMem a (a # as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListMem a (a # as)", "using elem"], ["proof (prove)\nusing this:\n  ListMem ?x (?x # ?xs)\n\ngoal (1 subgoal):\n 1. ListMem a (a # as)", "by fast"], ["proof (state)\nthis:\n  ListMem a (a # as)\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  ListMem a (a # as)", "have \"fmdom' (fst a) \\<subseteq> fmdom' s1\""], ["proof (prove)\nusing this:\n  ListMem a (a # as)\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> fmdom' s1", "using Cons.prems(2)"], ["proof (prove)\nusing this:\n  ListMem a (a # as)\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     fmdom' (fst aa) \\<subseteq> fmdom' s1\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> fmdom' s1", "by blast"], ["proof (state)\nthis:\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  fmdom' (fst a) \\<subseteq> fmdom' s1", "have \"state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\""], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "using Cons.prems(1) pred_dom_subset_succ_submap"], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<subseteq> fmdom' s1\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<lbrakk>fmdom' (fst ?a) \\<subseteq> fmdom' ?s1.0;\n   ?s1.0 \\<subseteq>\\<^sub>f ?s2.0\\<rbrakk>\n  \\<Longrightarrow> state_succ ?s1.0 ?a \\<subseteq>\\<^sub>f\n                    state_succ ?s2.0 ?a\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "by fast"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "}"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "note 1 = this"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "{"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "fix b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "assume \"ListMem b as\""], ["proof (state)\nthis:\n  ListMem b as\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  ListMem b as", "have \"ListMem b (a # as)\""], ["proof (prove)\nusing this:\n  ListMem b as\n\ngoal (1 subgoal):\n 1. ListMem b (a # as)", "using insert"], ["proof (prove)\nusing this:\n  ListMem b as\n  ListMem ?x ?xs \\<Longrightarrow> ListMem ?x (?y # ?xs)\n\ngoal (1 subgoal):\n 1. ListMem b (a # as)", "by fast"], ["proof (state)\nthis:\n  ListMem b (a # as)\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  ListMem b (a # as)", "have a: \"fmdom' (fst b) \\<subseteq> fmdom' s1\""], ["proof (prove)\nusing this:\n  ListMem b (a # as)\n\ngoal (1 subgoal):\n 1. fmdom' (fst b) \\<subseteq> fmdom' s1", "using Cons.prems(2)"], ["proof (prove)\nusing this:\n  ListMem b (a # as)\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     fmdom' (fst aa) \\<subseteq> fmdom' s1\n\ngoal (1 subgoal):\n 1. fmdom' (fst b) \\<subseteq> fmdom' s1", "by blast"], ["proof (state)\nthis:\n  fmdom' (fst b) \\<subseteq> fmdom' s1\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  fmdom' (fst b) \\<subseteq> fmdom' s1", "have \"fmdom' s1 \\<subseteq> fmdom' (state_succ s1 a)\""], ["proof (prove)\nusing this:\n  fmdom' (fst b) \\<subseteq> fmdom' s1\n\ngoal (1 subgoal):\n 1. fmdom' s1 \\<subseteq> fmdom' (state_succ s1 a)", "using valid_as_submap_init_submap_exec_i"], ["proof (prove)\nusing this:\n  fmdom' (fst b) \\<subseteq> fmdom' s1\n  fmdom' ?s \\<subseteq> fmdom' (state_succ ?s ?a)\n\ngoal (1 subgoal):\n 1. fmdom' s1 \\<subseteq> fmdom' (state_succ s1 a)", "by metis"], ["proof (state)\nthis:\n  fmdom' s1 \\<subseteq> fmdom' (state_succ s1 a)\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  fmdom' s1 \\<subseteq> fmdom' (state_succ s1 a)", "have \"fmdom' (fst b) \\<subseteq> fmdom' (state_succ s1 a)\""], ["proof (prove)\nusing this:\n  fmdom' s1 \\<subseteq> fmdom' (state_succ s1 a)\n\ngoal (1 subgoal):\n 1. fmdom' (fst b) \\<subseteq> fmdom' (state_succ s1 a)", "using a"], ["proof (prove)\nusing this:\n  fmdom' s1 \\<subseteq> fmdom' (state_succ s1 a)\n  fmdom' (fst b) \\<subseteq> fmdom' s1\n\ngoal (1 subgoal):\n 1. fmdom' (fst b) \\<subseteq> fmdom' (state_succ s1 a)", "by simp"], ["proof (state)\nthis:\n  fmdom' (fst b) \\<subseteq> fmdom' (state_succ s1 a)\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "}"], ["proof (state)\nthis:\n  ListMem ?b2 as \\<Longrightarrow>\n  fmdom' (fst ?b2) \\<subseteq> fmdom' (state_succ s1 a)\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fst aa) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  ListMem ?b2 as \\<Longrightarrow>\n  fmdom' (fst ?b2) \\<subseteq> fmdom' (state_succ s1 a)", "show ?case"], ["proof (prove)\nusing this:\n  ListMem ?b2 as \\<Longrightarrow>\n  fmdom' (fst ?b2) \\<subseteq> fmdom' (state_succ s1 a)\n\ngoal (1 subgoal):\n 1. exec_plan s1 (a # as) \\<subseteq>\\<^sub>f exec_plan s2 (a # as)", "using 1 Cons.IH[of \"(state_succ s1 a)\" \"(state_succ s2 a)\"]"], ["proof (prove)\nusing this:\n  ListMem ?b2 as \\<Longrightarrow>\n  fmdom' (fst ?b2) \\<subseteq> fmdom' (state_succ s1 a)\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n  \\<lbrakk>state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a;\n   \\<forall>aa.\n      ListMem aa as \\<longrightarrow>\n      fmdom' (fst aa) \\<subseteq> fmdom' (state_succ s1 a)\\<rbrakk>\n  \\<Longrightarrow> exec_plan (state_succ s1 a) as \\<subseteq>\\<^sub>f\n                    exec_plan (state_succ s2 a) as\n\ngoal (1 subgoal):\n 1. exec_plan s1 (a # as) \\<subseteq>\\<^sub>f exec_plan s2 (a # as)", "by fastforce"], ["proof (state)\nthis:\n  exec_plan s1 (a # as) \\<subseteq>\\<^sub>f exec_plan s2 (a # as)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           fmdom' (fst a) \\<subseteq> fmdom' s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []", "qed auto"], ["", "lemma valid_plan_mems:\n  assumes \"(as \\<in> valid_plans PROB)\" \"(ListMem a as)\"\n  shows \"a \\<in> PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> PROB", "using assms ListMem_iff in_set_conv_decomp valid_append_valid_suff valid_plan_valid_head"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  ListMem a as\n  ListMem ?x ?xs = (?x \\<in> set ?xs)\n  (?x \\<in> set ?xs) = (\\<exists>ys zs. ?xs = ys @ ?x # zs)\n  ?as1.0 @ ?as2.0 \\<in> valid_plans ?PROB \\<Longrightarrow>\n  ?as2.0 \\<in> valid_plans ?PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow> ?h \\<in> ?PROB\n\ngoal (1 subgoal):\n 1. a \\<in> PROB", "by (metis)\n\n\n\\<comment> \\<open>NOTE typing moved into 'fixes' due to type mismatches when using lemma.\\<close>\n\\<comment> \\<open>NOTE showcase (this can't be used due to type problems when the type is specified within\nproposition.\\<close>"], ["", "lemma valid_states_nempty:\n  fixes PROB :: \"(('a, 'b) fmap \\<times> ('a, 'b) fmap) set\"\n  assumes \"finite PROB\"\n  shows \"\\<exists>s. s \\<in> (valid_states PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s. s \\<in> valid_states PROB", "unfolding valid_states_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s. s \\<in> {s. fmdom' s = prob_dom PROB}", "using fmchoice'[OF FINITE_prob_dom[OF assms], where Q = \"\\<lambda>_ _. True\"]"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>prob_dom PROB. \\<exists>y. True \\<Longrightarrow>\n  \\<exists>m. fmdom' m = prob_dom PROB \\<and> fmpred (\\<lambda>_ _. True) m\n\ngoal (1 subgoal):\n 1. \\<exists>s. s \\<in> {s. fmdom' s = prob_dom PROB}", "by auto"], ["", "lemma empty_prob_dom_single_val_state:\n  assumes \"(prob_dom PROB = {})\"\n  shows \"(\\<exists>s. valid_states PROB = {s})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s. valid_states PROB = {s}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s. valid_states PROB = {s}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s. valid_states PROB = {s}", "assume C: \"\\<not>(\\<exists>s. valid_states PROB = {s})\""], ["proof (state)\nthis:\n  \\<nexists>s. valid_states PROB = {s}\n\ngoal (1 subgoal):\n 1. \\<exists>s. valid_states PROB = {s}", "then"], ["proof (chain)\npicking this:\n  \\<nexists>s. valid_states PROB = {s}", "have \"valid_states PROB = {s. fmdom' s = {}}\""], ["proof (prove)\nusing this:\n  \\<nexists>s. valid_states PROB = {s}\n\ngoal (1 subgoal):\n 1. valid_states PROB = {s. fmdom' s = {}}", "using assms"], ["proof (prove)\nusing this:\n  \\<nexists>s. valid_states PROB = {s}\n  prob_dom PROB = {}\n\ngoal (1 subgoal):\n 1. valid_states PROB = {s. fmdom' s = {}}", "by (simp add: valid_states_def)"], ["proof (state)\nthis:\n  valid_states PROB = {s. fmdom' s = {}}\n\ngoal (1 subgoal):\n 1. \\<exists>s. valid_states PROB = {s}", "then"], ["proof (chain)\npicking this:\n  valid_states PROB = {s. fmdom' s = {}}", "have \"\\<exists>s. valid_states PROB = {s}\""], ["proof (prove)\nusing this:\n  valid_states PROB = {s. fmdom' s = {}}\n\ngoal (1 subgoal):\n 1. \\<exists>s. valid_states PROB = {s}", "using empty_domain_fmap_set"], ["proof (prove)\nusing this:\n  valid_states PROB = {s. fmdom' s = {}}\n  {s. fmdom' s = {}} = {fmempty}\n\ngoal (1 subgoal):\n 1. \\<exists>s. valid_states PROB = {s}", "by blast"], ["proof (state)\nthis:\n  \\<exists>s. valid_states PROB = {s}\n\ngoal (1 subgoal):\n 1. \\<exists>s. valid_states PROB = {s}", "then"], ["proof (chain)\npicking this:\n  \\<exists>s. valid_states PROB = {s}", "have False"], ["proof (prove)\nusing this:\n  \\<exists>s. valid_states PROB = {s}\n\ngoal (1 subgoal):\n 1. False", "using C"], ["proof (prove)\nusing this:\n  \\<exists>s. valid_states PROB = {s}\n  \\<nexists>s. valid_states PROB = {s}\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>s. valid_states PROB = {s}", "}"], ["proof (state)\nthis:\n  \\<nexists>s. valid_states PROB = {s} \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<exists>s. valid_states PROB = {s}", "then"], ["proof (chain)\npicking this:\n  \\<nexists>s. valid_states PROB = {s} \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>s. valid_states PROB = {s} \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<exists>s. valid_states PROB = {s}", "by blast"], ["proof (state)\nthis:\n  \\<exists>s. valid_states PROB = {s}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma empty_prob_dom_imp_empty_plan_always_good:\n  fixes PROB s\n  assumes \"(prob_dom PROB = {})\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"(exec_plan s [] = exec_plan s as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s [] = exec_plan s as", "using assms empty_plan_is_valid exec_fdom_empty_prob"], ["proof (prove)\nusing this:\n  prob_dom PROB = {}\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  [] \\<in> valid_plans ?PROB\n  \\<lbrakk>prob_dom ?PROB = {}; ?s \\<in> valid_states ?PROB;\n   ?as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s ?as = fmempty\n\ngoal (1 subgoal):\n 1. exec_plan s [] = exec_plan s as", "by fastforce"], ["", "lemma empty_prob_dom:\n  fixes PROB\n  assumes \"(prob_dom PROB = {})\"\n  shows \"(PROB = {(fmempty, fmempty)} \\<or> PROB = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "using assms"], ["proof (prove)\nusing this:\n  prob_dom PROB = {}\n\ngoal (1 subgoal):\n 1. PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "proof (cases \"PROB = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>prob_dom PROB = {}; PROB = {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}\n 2. \\<lbrakk>prob_dom PROB = {}; PROB \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "case False"], ["proof (state)\nthis:\n  PROB \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>prob_dom PROB = {}; PROB = {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}\n 2. \\<lbrakk>prob_dom PROB = {}; PROB \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "have \"\\<Union>((\\<lambda>(s1, s2). fmdom' s1 \\<union> fmdom' s2) ` PROB) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>(s1, s2)\\<in>PROB. fmdom' s1 \\<union> fmdom' s2) = {}", "using assms"], ["proof (prove)\nusing this:\n  prob_dom PROB = {}\n\ngoal (1 subgoal):\n 1. (\\<Union>(s1, s2)\\<in>PROB. fmdom' s1 \\<union> fmdom' s2) = {}", "by (simp add: prob_dom_def action_dom_def)"], ["proof (state)\nthis:\n  (\\<Union>(s1, s2)\\<in>PROB. fmdom' s1 \\<union> fmdom' s2) = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>prob_dom PROB = {}; PROB = {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}\n 2. \\<lbrakk>prob_dom PROB = {}; PROB \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "then"], ["proof (chain)\npicking this:\n  (\\<Union>(s1, s2)\\<in>PROB. fmdom' s1 \\<union> fmdom' s2) = {}", "have 1:\"\\<forall>a\\<in>PROB. (\\<lambda>(s1, s2). fmdom' s1 \\<union> fmdom' s2) a = {}\""], ["proof (prove)\nusing this:\n  (\\<Union>(s1, s2)\\<in>PROB. fmdom' s1 \\<union> fmdom' s2) = {}\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>PROB.\n       (case a of (s1, s2) \\<Rightarrow> fmdom' s1 \\<union> fmdom' s2) = {}", "using  Union_empty_conv"], ["proof (prove)\nusing this:\n  (\\<Union>(s1, s2)\\<in>PROB. fmdom' s1 \\<union> fmdom' s2) = {}\n  (\\<Union> ?A = {}) = (\\<forall>x\\<in>?A. x = {})\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>PROB.\n       (case a of (s1, s2) \\<Rightarrow> fmdom' s1 \\<union> fmdom' s2) = {}", "by auto"], ["proof (state)\nthis:\n  \\<forall>a\\<in>PROB.\n     (case a of (s1, s2) \\<Rightarrow> fmdom' s1 \\<union> fmdom' s2) = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>prob_dom PROB = {}; PROB = {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}\n 2. \\<lbrakk>prob_dom PROB = {}; PROB \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "{"], ["proof (state)\nthis:\n  \\<forall>a\\<in>PROB.\n     (case a of (s1, s2) \\<Rightarrow> fmdom' s1 \\<union> fmdom' s2) = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>prob_dom PROB = {}; PROB = {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}\n 2. \\<lbrakk>prob_dom PROB = {}; PROB \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "fix a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>prob_dom PROB = {}; PROB = {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}\n 2. \\<lbrakk>prob_dom PROB = {}; PROB \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "assume P1: \"a\\<in>PROB\""], ["proof (state)\nthis:\n  a \\<in> PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>prob_dom PROB = {}; PROB = {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}\n 2. \\<lbrakk>prob_dom PROB = {}; PROB \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "then"], ["proof (chain)\npicking this:\n  a \\<in> PROB", "have \"(\\<lambda>(s1, s2). fmdom' s1 \\<union> fmdom' s2) a = {}\""], ["proof (prove)\nusing this:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. (case a of (s1, s2) \\<Rightarrow> fmdom' s1 \\<union> fmdom' s2) = {}", "using 1"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  \\<forall>a\\<in>PROB.\n     (case a of (s1, s2) \\<Rightarrow> fmdom' s1 \\<union> fmdom' s2) = {}\n\ngoal (1 subgoal):\n 1. (case a of (s1, s2) \\<Rightarrow> fmdom' s1 \\<union> fmdom' s2) = {}", "by simp"], ["proof (state)\nthis:\n  (case a of (s1, s2) \\<Rightarrow> fmdom' s1 \\<union> fmdom' s2) = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>prob_dom PROB = {}; PROB = {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}\n 2. \\<lbrakk>prob_dom PROB = {}; PROB \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "then"], ["proof (chain)\npicking this:\n  (case a of (s1, s2) \\<Rightarrow> fmdom' s1 \\<union> fmdom' s2) = {}", "have a: \"fmdom' (fst a) = {}\" \"fmdom' (snd a) = {}\""], ["proof (prove)\nusing this:\n  (case a of (s1, s2) \\<Rightarrow> fmdom' s1 \\<union> fmdom' s2) = {}\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) = {} &&& fmdom' (snd a) = {}", "by auto+"], ["proof (state)\nthis:\n  fmdom' (fst a) = {}\n  fmdom' (snd a) = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>prob_dom PROB = {}; PROB = {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}\n 2. \\<lbrakk>prob_dom PROB = {}; PROB \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "then"], ["proof (chain)\npicking this:\n  fmdom' (fst a) = {}\n  fmdom' (snd a) = {}", "have b: \"fst a = fmempty\""], ["proof (prove)\nusing this:\n  fmdom' (fst a) = {}\n  fmdom' (snd a) = {}\n\ngoal (1 subgoal):\n 1. fst a = fmempty", "using fmrestrict_set_dom fmrestrict_set_null"], ["proof (prove)\nusing this:\n  fmdom' (fst a) = {}\n  fmdom' (snd a) = {}\n  fmrestrict_set (fmdom' ?m) ?m = ?m\n  fmrestrict_set {} ?m = fmempty\n\ngoal (1 subgoal):\n 1. fst a = fmempty", "by metis"], ["proof (state)\nthis:\n  fst a = fmempty\n\ngoal (2 subgoals):\n 1. \\<lbrakk>prob_dom PROB = {}; PROB = {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}\n 2. \\<lbrakk>prob_dom PROB = {}; PROB \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "then"], ["proof (chain)\npicking this:\n  fst a = fmempty", "have \"snd a = fmempty\""], ["proof (prove)\nusing this:\n  fst a = fmempty\n\ngoal (1 subgoal):\n 1. snd a = fmempty", "using a(2) fmrestrict_set_dom fmrestrict_set_null"], ["proof (prove)\nusing this:\n  fst a = fmempty\n  fmdom' (snd a) = {}\n  fmrestrict_set (fmdom' ?m) ?m = ?m\n  fmrestrict_set {} ?m = fmempty\n\ngoal (1 subgoal):\n 1. snd a = fmempty", "by metis"], ["proof (state)\nthis:\n  snd a = fmempty\n\ngoal (2 subgoals):\n 1. \\<lbrakk>prob_dom PROB = {}; PROB = {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}\n 2. \\<lbrakk>prob_dom PROB = {}; PROB \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "then"], ["proof (chain)\npicking this:\n  snd a = fmempty", "have \"a = (fmempty, fmempty)\""], ["proof (prove)\nusing this:\n  snd a = fmempty\n\ngoal (1 subgoal):\n 1. a = (fmempty, fmempty)", "using b surjective_pairing"], ["proof (prove)\nusing this:\n  snd a = fmempty\n  fst a = fmempty\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. a = (fmempty, fmempty)", "by metis"], ["proof (state)\nthis:\n  a = (fmempty, fmempty)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>prob_dom PROB = {}; PROB = {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}\n 2. \\<lbrakk>prob_dom PROB = {}; PROB \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "}"], ["proof (state)\nthis:\n  ?a2 \\<in> PROB \\<Longrightarrow> ?a2 = (fmempty, fmempty)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>prob_dom PROB = {}; PROB = {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}\n 2. \\<lbrakk>prob_dom PROB = {}; PROB \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "then"], ["proof (chain)\npicking this:\n  ?a2 \\<in> PROB \\<Longrightarrow> ?a2 = (fmempty, fmempty)", "have \"PROB = {(fmempty, fmempty)}\""], ["proof (prove)\nusing this:\n  ?a2 \\<in> PROB \\<Longrightarrow> ?a2 = (fmempty, fmempty)\n\ngoal (1 subgoal):\n 1. PROB = {(fmempty, fmempty)}", "using False"], ["proof (prove)\nusing this:\n  ?a2 \\<in> PROB \\<Longrightarrow> ?a2 = (fmempty, fmempty)\n  PROB \\<noteq> {}\n\ngoal (1 subgoal):\n 1. PROB = {(fmempty, fmempty)}", "by blast"], ["proof (state)\nthis:\n  PROB = {(fmempty, fmempty)}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>prob_dom PROB = {}; PROB = {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}\n 2. \\<lbrakk>prob_dom PROB = {}; PROB \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "then"], ["proof (chain)\npicking this:\n  PROB = {(fmempty, fmempty)}", "show ?thesis"], ["proof (prove)\nusing this:\n  PROB = {(fmempty, fmempty)}\n\ngoal (1 subgoal):\n 1. PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "by blast"], ["proof (state)\nthis:\n  PROB = {(fmempty, fmempty)} \\<or> PROB = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prob_dom PROB = {}; PROB = {}\\<rbrakk>\n    \\<Longrightarrow> PROB = {(fmempty, fmempty)} \\<or> PROB = {}", "qed simp"], ["", "lemma empty_prob_dom_finite:\n  fixes PROB :: \"'a problem\"\n  assumes \"prob_dom PROB = {}\"\n  shows \"finite PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite PROB", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite PROB", "consider (i) \"PROB = {(fmempty, fmempty)}\" | (ii) \"PROB = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>PROB = {(fmempty, fmempty)} \\<Longrightarrow> thesis;\n     PROB = {} \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms empty_prob_dom"], ["proof (prove)\nusing this:\n  prob_dom PROB = {}\n  prob_dom ?PROB = {} \\<Longrightarrow>\n  ?PROB = {(fmempty, fmempty)} \\<or> ?PROB = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>PROB = {(fmempty, fmempty)} \\<Longrightarrow> thesis;\n     PROB = {} \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>PROB = {(fmempty, fmempty)} \\<Longrightarrow> ?thesis;\n   PROB = {} \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. finite PROB", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>PROB = {(fmempty, fmempty)} \\<Longrightarrow> ?thesis;\n   PROB = {} \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>PROB = {(fmempty, fmempty)} \\<Longrightarrow> ?thesis;\n   PROB = {} \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. finite PROB", "by (cases) auto"], ["proof (state)\nthis:\n  finite PROB\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE type for `a` had to be fixed (type mismatch in goal).\\<close>"], ["", "lemma disj_imp_eq_proj_exec:\n  fixes a :: \"('a, 'b) fmap \\<times> ('a, 'b) fmap\" and vs s\n  assumes \"(fmdom' (snd a) \\<inter> vs) = {}\"\n  shows \"(fmrestrict_set vs s = fmrestrict_set vs (state_succ s a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (state_succ s a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (state_succ s a)", "have \"disjnt (fmdom' (snd a)) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjnt (fmdom' (snd a)) vs", "using assms disjnt_def"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<inter> vs = {}\n  disjnt ?A ?B = (?A \\<inter> ?B = {})\n\ngoal (1 subgoal):\n 1. disjnt (fmdom' (snd a)) vs", "by fast"], ["proof (state)\nthis:\n  disjnt (fmdom' (snd a)) vs\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (state_succ s a)", "then"], ["proof (chain)\npicking this:\n  disjnt (fmdom' (snd a)) vs", "show ?thesis"], ["proof (prove)\nusing this:\n  disjnt (fmdom' (snd a)) vs\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (state_succ s a)", "using disj_dom_drest_fupdate_eq state_succ_pair surjective_pairing"], ["proof (prove)\nusing this:\n  disjnt (fmdom' (snd a)) vs\n  disjnt (fmdom' ?x) ?vs \\<Longrightarrow>\n  fmrestrict_set ?vs ?s = fmrestrict_set ?vs (?x ++ ?s)\n  state_succ ?s (?p, ?e) =\n  (if ?p \\<subseteq>\\<^sub>f ?s then ?e ++ ?s else ?s)\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (state_succ s a)", "by metis"], ["proof (state)\nthis:\n  fmrestrict_set vs s = fmrestrict_set vs (state_succ s a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma no_change_vs_eff_submap:\n  fixes a vs s\n  assumes \"(fmrestrict_set vs s = fmrestrict_set vs (state_succ s a))\" \"(fst a \\<subseteq>\\<^sub>f s)\"\n  shows \"(fmrestrict_set vs (snd a) \\<subseteq>\\<^sub>f (fmrestrict_set vs s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd a) \\<subseteq>\\<^sub>f fmrestrict_set vs s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd a) \\<subseteq>\\<^sub>f fmrestrict_set vs s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd a) \\<subseteq>\\<^sub>f fmrestrict_set vs s", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd a) \\<subseteq>\\<^sub>f fmrestrict_set vs s", "assume P3: \"x \\<in> dom (fmlookup (fmrestrict_set vs (snd a)))\""], ["proof (state)\nthis:\n  x \\<in> dom (fmlookup (fmrestrict_set vs (snd a)))\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd a) \\<subseteq>\\<^sub>f fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  x \\<in> dom (fmlookup (fmrestrict_set vs (snd a)))", "have \"(fmlookup (fmrestrict_set vs (snd a))) x = (fmlookup (fmrestrict_set vs s)) x\""], ["proof (prove)\nusing this:\n  x \\<in> dom (fmlookup (fmrestrict_set vs (snd a)))\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (snd a)) x =\n    fmlookup (fmrestrict_set vs s) x", "proof (cases \"fmlookup (fmrestrict_set vs (snd a)) x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> dom (fmlookup (fmrestrict_set vs (snd a)));\n     fmlookup (fmrestrict_set vs (snd a)) x = None\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                      fmlookup (fmrestrict_set vs s) x\n 2. \\<And>aa.\n       \\<lbrakk>x \\<in> dom (fmlookup (fmrestrict_set vs (snd a)));\n        fmlookup (fmrestrict_set vs (snd a)) x = Some aa\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                         fmlookup (fmrestrict_set vs s) x", "case None"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (snd a)) x = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> dom (fmlookup (fmrestrict_set vs (snd a)));\n     fmlookup (fmrestrict_set vs (snd a)) x = None\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                      fmlookup (fmrestrict_set vs s) x\n 2. \\<And>aa.\n       \\<lbrakk>x \\<in> dom (fmlookup (fmrestrict_set vs (snd a)));\n        fmlookup (fmrestrict_set vs (snd a)) x = Some aa\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                         fmlookup (fmrestrict_set vs s) x", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set vs (snd a)) x = None", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs (snd a)) x = None\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (snd a)) x =\n    fmlookup (fmrestrict_set vs s) x", "using P3"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs (snd a)) x = None\n  x \\<in> dom (fmlookup (fmrestrict_set vs (snd a)))\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (snd a)) x =\n    fmlookup (fmrestrict_set vs s) x", "by blast"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (snd a)) x = fmlookup (fmrestrict_set vs s) x\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>x \\<in> dom (fmlookup (fmrestrict_set vs (snd a)));\n        fmlookup (fmrestrict_set vs (snd a)) x = Some aa\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                         fmlookup (fmrestrict_set vs s) x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>x \\<in> dom (fmlookup (fmrestrict_set vs (snd a)));\n        fmlookup (fmrestrict_set vs (snd a)) x = Some aa\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                         fmlookup (fmrestrict_set vs s) x", "case (Some y)"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (snd a)) x = Some y\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>x \\<in> dom (fmlookup (fmrestrict_set vs (snd a)));\n        fmlookup (fmrestrict_set vs (snd a)) x = Some aa\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                         fmlookup (fmrestrict_set vs s) x", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set vs (snd a)) x = Some y", "have \"fmrestrict_set vs s = fmrestrict_set vs (s ++\\<^sub>f snd a)\""], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs (snd a)) x = Some y\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (s ++\\<^sub>f snd a)", "using assms"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs (snd a)) x = Some y\n  fmrestrict_set vs s = fmrestrict_set vs (state_succ s a)\n  fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (s ++\\<^sub>f snd a)", "by (simp add: state_succ_def fmap_add_ltr_def)"], ["proof (state)\nthis:\n  fmrestrict_set vs s = fmrestrict_set vs (s ++\\<^sub>f snd a)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>x \\<in> dom (fmlookup (fmrestrict_set vs (snd a)));\n        fmlookup (fmrestrict_set vs (snd a)) x = Some aa\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                         fmlookup (fmrestrict_set vs s) x", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs s = fmrestrict_set vs (s ++\\<^sub>f snd a)", "have \"fmlookup (fmrestrict_set vs s) = fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a))\""], ["proof (prove)\nusing this:\n  fmrestrict_set vs s = fmrestrict_set vs (s ++\\<^sub>f snd a)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs s) =\n    fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a))", "by auto"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs s) =\n  fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>x \\<in> dom (fmlookup (fmrestrict_set vs (snd a)));\n        fmlookup (fmrestrict_set vs (snd a)) x = Some aa\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                         fmlookup (fmrestrict_set vs s) x", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set vs s) =\n  fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a))", "have 1: \"\n            fmlookup (fmrestrict_set vs s) x\n            = (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None)\n          \""], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs s) =\n  fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a))\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs s) x =\n    (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None)", "using fmlookup_restrict_set"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs s) =\n  fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a))\n  fmlookup (fmrestrict_set ?A ?m) ?x =\n  (if ?x \\<in> ?A then fmlookup ?m ?x else None)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs s) x =\n    (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None)", "by metis"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs s) x =\n  (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>x \\<in> dom (fmlookup (fmrestrict_set vs (snd a)));\n        fmlookup (fmrestrict_set vs (snd a)) x = Some aa\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                         fmlookup (fmrestrict_set vs s) x", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set vs s) x =\n  (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs s) x =\n  (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (snd a)) x =\n    fmlookup (fmrestrict_set vs s) x", "proof (cases \"x \\<in> vs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>fmlookup (fmrestrict_set vs s) x =\n             (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None);\n     x \\<in> vs\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                      fmlookup (fmrestrict_set vs s) x\n 2. \\<lbrakk>fmlookup (fmrestrict_set vs s) x =\n             (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None);\n     x \\<notin> vs\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                      fmlookup (fmrestrict_set vs s) x", "case True"], ["proof (state)\nthis:\n  x \\<in> vs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmlookup (fmrestrict_set vs s) x =\n             (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None);\n     x \\<in> vs\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                      fmlookup (fmrestrict_set vs s) x\n 2. \\<lbrakk>fmlookup (fmrestrict_set vs s) x =\n             (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None);\n     x \\<notin> vs\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                      fmlookup (fmrestrict_set vs s) x", "then"], ["proof (chain)\npicking this:\n  x \\<in> vs", "have \"fmlookup (fmrestrict_set vs s) x = fmlookup (s ++\\<^sub>f snd a) x\""], ["proof (prove)\nusing this:\n  x \\<in> vs\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs s) x = fmlookup (s ++\\<^sub>f snd a) x", "using True 1"], ["proof (prove)\nusing this:\n  x \\<in> vs\n  x \\<in> vs\n  fmlookup (fmrestrict_set vs s) x =\n  (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs s) x = fmlookup (s ++\\<^sub>f snd a) x", "by auto"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs s) x = fmlookup (s ++\\<^sub>f snd a) x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmlookup (fmrestrict_set vs s) x =\n             (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None);\n     x \\<in> vs\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                      fmlookup (fmrestrict_set vs s) x\n 2. \\<lbrakk>fmlookup (fmrestrict_set vs s) x =\n             (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None);\n     x \\<notin> vs\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                      fmlookup (fmrestrict_set vs s) x", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set vs s) x = fmlookup (s ++\\<^sub>f snd a) x", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs s) x = fmlookup (s ++\\<^sub>f snd a) x\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (snd a)) x =\n    fmlookup (fmrestrict_set vs s) x", "using Some fmadd.rep_eq fmlookup_restrict_set map_add_Some_iff"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs s) x = fmlookup (s ++\\<^sub>f snd a) x\n  fmlookup (fmrestrict_set vs (snd a)) x = Some y\n  fmlookup (?x ++\\<^sub>f ?xa) = Map.map_add (fmlookup ?x) (fmlookup ?xa)\n  fmlookup (fmrestrict_set ?A ?m) ?x =\n  (if ?x \\<in> ?A then fmlookup ?m ?x else None)\n  (Map.map_add ?m ?n ?k = Some ?x) =\n  (?n ?k = Some ?x \\<or> ?n ?k = None \\<and> ?m ?k = Some ?x)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (snd a)) x =\n    fmlookup (fmrestrict_set vs s) x", "by (metis (mono_tags, lifting))"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (snd a)) x = fmlookup (fmrestrict_set vs s) x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmlookup (fmrestrict_set vs s) x =\n             (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None);\n     x \\<notin> vs\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                      fmlookup (fmrestrict_set vs s) x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmlookup (fmrestrict_set vs s) x =\n             (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None);\n     x \\<notin> vs\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                      fmlookup (fmrestrict_set vs s) x", "case False"], ["proof (state)\nthis:\n  x \\<notin> vs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmlookup (fmrestrict_set vs s) x =\n             (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None);\n     x \\<notin> vs\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                      fmlookup (fmrestrict_set vs s) x", "then"], ["proof (chain)\npicking this:\n  x \\<notin> vs", "have 1: \"fmlookup (fmrestrict_set vs s) x = None\""], ["proof (prove)\nusing this:\n  x \\<notin> vs\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs s) x = None", "using False \"1\""], ["proof (prove)\nusing this:\n  x \\<notin> vs\n  x \\<notin> vs\n  fmlookup (fmrestrict_set vs s) x =\n  (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs s) x = None", "by auto"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs s) x = None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmlookup (fmrestrict_set vs s) x =\n             (if x \\<in> vs then fmlookup (s ++\\<^sub>f snd a) x else None);\n     x \\<notin> vs\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (snd a)) x =\n                      fmlookup (fmrestrict_set vs s) x", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set vs s) x = None", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs s) x = None\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (snd a)) x =\n    fmlookup (fmrestrict_set vs s) x", "using 1 False"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs s) x = None\n  fmlookup (fmrestrict_set vs s) x = None\n  x \\<notin> vs\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (snd a)) x =\n    fmlookup (fmrestrict_set vs s) x", "by auto"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (snd a)) x = fmlookup (fmrestrict_set vs s) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (snd a)) x = fmlookup (fmrestrict_set vs s) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (snd a)) x = fmlookup (fmrestrict_set vs s) x\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd a) \\<subseteq>\\<^sub>f fmrestrict_set vs s", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> dom (fmlookup (fmrestrict_set vs (snd a))) \\<Longrightarrow>\n  fmlookup (fmrestrict_set vs (snd a)) ?x2 =\n  fmlookup (fmrestrict_set vs s) ?x2\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd a) \\<subseteq>\\<^sub>f fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> dom (fmlookup (fmrestrict_set vs (snd a))) \\<Longrightarrow>\n  fmlookup (fmrestrict_set vs (snd a)) ?x2 =\n  fmlookup (fmrestrict_set vs s) ?x2", "have \"(fmlookup (fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>m fmlookup (fmrestrict_set vs s))\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> dom (fmlookup (fmrestrict_set vs (snd a))) \\<Longrightarrow>\n  fmlookup (fmrestrict_set vs (snd a)) ?x2 =\n  fmlookup (fmrestrict_set vs s) ?x2\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>m\n    fmlookup (fmrestrict_set vs s)", "using map_le_def"], ["proof (prove)\nusing this:\n  ?x2 \\<in> dom (fmlookup (fmrestrict_set vs (snd a))) \\<Longrightarrow>\n  fmlookup (fmrestrict_set vs (snd a)) ?x2 =\n  fmlookup (fmrestrict_set vs s) ?x2\n  (?m\\<^sub>1 \\<subseteq>\\<^sub>m ?m\\<^sub>2) =\n  (\\<forall>a\\<in>dom ?m\\<^sub>1. ?m\\<^sub>1 a = ?m\\<^sub>2 a)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>m\n    fmlookup (fmrestrict_set vs s)", "by blast"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>m\n  fmlookup (fmrestrict_set vs s)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd a) \\<subseteq>\\<^sub>f fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>m\n  fmlookup (fmrestrict_set vs s)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>m\n  fmlookup (fmrestrict_set vs s)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd a) \\<subseteq>\\<^sub>f fmrestrict_set vs s", "using fmsubset.rep_eq"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>m\n  fmlookup (fmrestrict_set vs s)\n  (?x \\<subseteq>\\<^sub>f ?xa) =\n  (fmlookup ?x \\<subseteq>\\<^sub>m fmlookup ?xa)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd a) \\<subseteq>\\<^sub>f fmrestrict_set vs s", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set vs (snd a) \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE type of `a` had to be fixed.\\<close>"], ["", "lemma sat_precond_as_proj_3:\n  fixes s and a :: \"('a, 'b) fmap \\<times> ('a, 'b) fmap\" and vs\n  assumes \"(fmdom' (fmrestrict_set vs (snd a)) = {})\"\n  shows \"((fmrestrict_set vs (state_succ s a)) = (fmrestrict_set vs s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "have \"fmdom' (fmrestrict_set vs (fmrestrict_set vs (snd a))) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (fmrestrict_set vs (snd a))) = {}", "using assms fmrestrict_set_dom fmrestrict_set_empty fmrestrict_set_null"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) = {}\n  fmrestrict_set (fmdom' ?m) ?m = ?m\n  fmrestrict_set ?A fmempty = fmempty\n  fmrestrict_set {} ?m = fmempty\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (fmrestrict_set vs (snd a))) = {}", "by metis"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (fmrestrict_set vs (snd a))) = {}\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "{"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (fmrestrict_set vs (snd a))) = {}\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "assume C: \"x \\<in> fmdom' (snd a) \\<and> x \\<in> vs\""], ["proof (state)\nthis:\n  x \\<in> fmdom' (snd a) \\<and> x \\<in> vs\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  x \\<in> fmdom' (snd a) \\<and> x \\<in> vs", "have a: \"x \\<in> fmdom' (snd a)\" \"x \\<in> vs\""], ["proof (prove)\nusing this:\n  x \\<in> fmdom' (snd a) \\<and> x \\<in> vs\n\ngoal (1 subgoal):\n 1. x \\<in> fmdom' (snd a) &&& x \\<in> vs", "using C"], ["proof (prove)\nusing this:\n  x \\<in> fmdom' (snd a) \\<and> x \\<in> vs\n  x \\<in> fmdom' (snd a) \\<and> x \\<in> vs\n\ngoal (1 subgoal):\n 1. x \\<in> fmdom' (snd a) &&& x \\<in> vs", "by blast+"], ["proof (state)\nthis:\n  x \\<in> fmdom' (snd a)\n  x \\<in> vs\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  x \\<in> fmdom' (snd a)\n  x \\<in> vs", "have \"fmlookup (snd a) x \\<noteq> None\""], ["proof (prove)\nusing this:\n  x \\<in> fmdom' (snd a)\n  x \\<in> vs\n\ngoal (1 subgoal):\n 1. fmlookup (snd a) x \\<noteq> None", "using fmdom'_notI"], ["proof (prove)\nusing this:\n  x \\<in> fmdom' (snd a)\n  x \\<in> vs\n  fmlookup ?m ?x = None \\<Longrightarrow> ?x \\<notin> fmdom' ?m\n\ngoal (1 subgoal):\n 1. fmlookup (snd a) x \\<noteq> None", "by metis"], ["proof (state)\nthis:\n  fmlookup (snd a) x \\<noteq> None\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fmlookup (snd a) x \\<noteq> None", "have \"fmlookup (fmrestrict_set vs (snd a)) x \\<noteq> None\""], ["proof (prove)\nusing this:\n  fmlookup (snd a) x \\<noteq> None\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (snd a)) x \\<noteq> None", "using a(2)"], ["proof (prove)\nusing this:\n  fmlookup (snd a) x \\<noteq> None\n  x \\<in> vs\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (snd a)) x \\<noteq> None", "by force"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (snd a)) x \\<noteq> None\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set vs (snd a)) x \\<noteq> None", "have \"x \\<in> fmdom' (fmrestrict_set vs (snd a))\""], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs (snd a)) x \\<noteq> None\n\ngoal (1 subgoal):\n 1. x \\<in> fmdom' (fmrestrict_set vs (snd a))", "using fmdom'_notD"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs (snd a)) x \\<noteq> None\n  ?x \\<notin> fmdom' ?m \\<Longrightarrow> fmlookup ?m ?x = None\n\ngoal (1 subgoal):\n 1. x \\<in> fmdom' (fmrestrict_set vs (snd a))", "by metis"], ["proof (state)\nthis:\n  x \\<in> fmdom' (fmrestrict_set vs (snd a))\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  x \\<in> fmdom' (fmrestrict_set vs (snd a))", "have \"fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\""], ["proof (prove)\nusing this:\n  x \\<in> fmdom' (fmrestrict_set vs (snd a))\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}", "have False"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n  fmdom' (fmrestrict_set vs (snd a)) = {}\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> fmdom' (snd a) \\<and> ?x2 \\<in> vs \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> fmdom' (snd a) \\<and> ?x2 \\<in> vs \\<Longrightarrow> False", "have \"\\<forall>x. \\<not>(x \\<in> fmdom' (snd a) \\<and> x \\<in> vs)\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> fmdom' (snd a) \\<and> ?x2 \\<in> vs \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<forall>x. \\<not> (x \\<in> fmdom' (snd a) \\<and> x \\<in> vs)", "by blast"], ["proof (state)\nthis:\n  \\<forall>x. \\<not> (x \\<in> fmdom' (snd a) \\<and> x \\<in> vs)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  \\<forall>x. \\<not> (x \\<in> fmdom' (snd a) \\<and> x \\<in> vs)", "have 1: \"fmdom' (snd a) \\<inter> vs = {}\""], ["proof (prove)\nusing this:\n  \\<forall>x. \\<not> (x \\<in> fmdom' (snd a) \\<and> x \\<in> vs)\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs = {}", "by blast"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> vs = {}\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "have \"disjnt (fmdom' (snd a)) vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjnt (fmdom' (snd a)) vs", "using 1 disjnt_def"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<inter> vs = {}\n  disjnt ?A ?B = (?A \\<inter> ?B = {})\n\ngoal (1 subgoal):\n 1. disjnt (fmdom' (snd a)) vs", "by blast"], ["proof (state)\nthis:\n  disjnt (fmdom' (snd a)) vs\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  disjnt (fmdom' (snd a)) vs", "show ?thesis"], ["proof (prove)\nusing this:\n  disjnt (fmdom' (snd a)) vs\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "using 1 disj_imp_eq_proj_exec"], ["proof (prove)\nusing this:\n  disjnt (fmdom' (snd a)) vs\n  fmdom' (snd a) \\<inter> vs = {}\n  fmdom' (snd ?a) \\<inter> ?vs = {} \\<Longrightarrow>\n  fmrestrict_set ?vs ?s = fmrestrict_set ?vs (state_succ ?s ?a)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "by metis"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE type for `a` had to be fixed (type mismatch in goal).\\<close>\n\\<comment> \\<open>TODO showcase (quick win with simp).\\<close>"], ["", "lemma proj_eq_proj_exec_eq:\n  fixes s s' vs and a :: \"('a, 'b) fmap \\<times> ('a, 'b) fmap\" and a'\n  assumes \"((fmrestrict_set vs s) = (fmrestrict_set vs s'))\" \"((fst a \\<subseteq>\\<^sub>f s) = (fst a' \\<subseteq>\\<^sub>f s'))\"\n    \"(fmrestrict_set vs (snd a) = fmrestrict_set vs (snd a'))\"\n  shows \"(fmrestrict_set vs (state_succ s a) = fmrestrict_set vs (state_succ s' a'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) =\n    fmrestrict_set vs (state_succ s' a')", "using assms"], ["proof (prove)\nusing this:\n  fmrestrict_set vs s = fmrestrict_set vs s'\n  (fst a \\<subseteq>\\<^sub>f s) = (fst a' \\<subseteq>\\<^sub>f s')\n  fmrestrict_set vs (snd a) = fmrestrict_set vs (snd a')\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) =\n    fmrestrict_set vs (state_succ s' a')", "by (simp add: fmap_add_ltr_def state_succ_def)"], ["", "lemma empty_eff_exec_eq:\n  fixes s a\n  assumes \"(fmdom' (snd a) = {})\"\n  shows \"(state_succ s a = s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s a = s", "using assms"], ["proof (prove)\nusing this:\n  fmdom' (snd a) = {}\n\ngoal (1 subgoal):\n 1. state_succ s a = s", "unfolding state_succ_def fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  fmdom' (snd a) = {}\n\ngoal (1 subgoal):\n 1. (if fst a \\<subseteq>\\<^sub>f s then s ++\\<^sub>f snd a else s) = s", "by (metis fmadd_empty(2) fmrestrict_set_dom fmrestrict_set_null)"], ["", "lemma exec_as_proj_valid_2:\n  fixes a\n  assumes \"a \\<in> PROB\"\n  shows \"(action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB", "by (simp add: FDOM_eff_subset_prob_dom_pair FDOM_pre_subset_prob_dom_pair action_dom_def)"], ["", "lemma valid_filter_valid_as:\n  assumes \"(as \\<in> valid_plans PROB)\"\n  shows \"(filter P as \\<in> valid_plans PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter P as \\<in> valid_plans PROB", "using assms"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. filter P as \\<in> valid_plans PROB", "by(auto simp: valid_plans_def)"], ["", "lemma sublist_valid_plan:\n  assumes \"(subseq as' as)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"(as' \\<in> valid_plans PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as' \\<in> valid_plans PROB", "using assms"], ["proof (prove)\nusing this:\n  subseq as' as\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. as' \\<in> valid_plans PROB", "by (auto simp: valid_plans_def) (meson fset_mp fset_of_list_elem sublist_subset subsetCE)"], ["", "lemma prob_subset_dom_subset:\n  assumes \"PROB1 \\<subseteq> PROB2\"\n  shows \"(prob_dom PROB1 \\<subseteq> prob_dom PROB2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_dom PROB1 \\<subseteq> prob_dom PROB2", "using assms"], ["proof (prove)\nusing this:\n  PROB1 \\<subseteq> PROB2\n\ngoal (1 subgoal):\n 1. prob_dom PROB1 \\<subseteq> prob_dom PROB2", "by (auto simp add: prob_dom_def)"], ["", "lemma state_succ_valid_act_disjoint:\n  assumes \"(a \\<in> PROB)\" \"(vs \\<inter> (prob_dom PROB) = {})\"\n  shows \"(fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  vs \\<inter> prob_dom PROB = {}\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "by (smt\n      FDOM_eff_subset_prob_dom_pair disj_imp_eq_proj_exec inf.absorb1\n      inf_bot_right inf_commute inf_left_commute\n      )"], ["", "lemma exec_valid_as_disjoint:\n  fixes s\n  assumes \"(vs \\<inter> (prob_dom PROB) = {})\" \"(as \\<in> valid_plans PROB)\"\n  shows \"(fmrestrict_set vs (exec_plan s as) = fmrestrict_set vs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s as) = fmrestrict_set vs s", "using assms"], ["proof (prove)\nusing this:\n  vs \\<inter> prob_dom PROB = {}\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s as) = fmrestrict_set vs s", "proof (induction as arbitrary: s vs PROB)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s vs PROB.\n       \\<lbrakk>vs \\<inter> prob_dom PROB = {};\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s []) =\n                         fmrestrict_set vs s\n 2. \\<And>a as s vs PROB.\n       \\<lbrakk>\\<And>s vs PROB.\n                   \\<lbrakk>vs \\<inter> prob_dom PROB = {};\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s as) =\n                                     fmrestrict_set vs s;\n        vs \\<inter> prob_dom PROB = {};\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                         fmrestrict_set vs s", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>?vs \\<inter> prob_dom ?PROB = {};\n   as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (exec_plan ?s as) =\n                    fmrestrict_set ?vs ?s\n  vs \\<inter> prob_dom PROB = {}\n  a # as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<And>s vs PROB.\n       \\<lbrakk>vs \\<inter> prob_dom PROB = {};\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s []) =\n                         fmrestrict_set vs s\n 2. \\<And>a as s vs PROB.\n       \\<lbrakk>\\<And>s vs PROB.\n                   \\<lbrakk>vs \\<inter> prob_dom PROB = {};\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s as) =\n                                     fmrestrict_set vs s;\n        vs \\<inter> prob_dom PROB = {};\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                         fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?vs \\<inter> prob_dom ?PROB = {};\n   as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (exec_plan ?s as) =\n                    fmrestrict_set ?vs ?s\n  vs \\<inter> prob_dom PROB = {}\n  a # as \\<in> valid_plans PROB", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?vs \\<inter> prob_dom ?PROB = {};\n   as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (exec_plan ?s as) =\n                    fmrestrict_set ?vs ?s\n  vs \\<inter> prob_dom PROB = {}\n  a # as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s (a # as)) = fmrestrict_set vs s", "by (metis exec_plan.simps(2) state_succ_valid_act_disjoint valid_plan_valid_head\n        valid_plan_valid_tail)"], ["proof (state)\nthis:\n  fmrestrict_set vs (exec_plan s (a # as)) = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. \\<And>s vs PROB.\n       \\<lbrakk>vs \\<inter> prob_dom PROB = {};\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s []) =\n                         fmrestrict_set vs s", "qed simp"], ["", "definition state_successors where\n  \"state_successors PROB s \\<equiv> ((state_succ s ` PROB) - {s})\""], ["", "subsection \"State Spaces\""], ["", "definition stateSpace where\n  \"stateSpace ss vs \\<equiv> (\\<forall>s. s \\<in> ss \\<longrightarrow> (fmdom' s = vs))\""], ["", "lemma EQ_SS_DOM:\n  assumes \"\\<not>(ss = {})\" \"(stateSpace ss vs1)\" \"(stateSpace ss vs2)\"\n  shows \"(vs1 = vs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vs1 = vs2", "using assms"], ["proof (prove)\nusing this:\n  ss \\<noteq> {}\n  stateSpace ss vs1\n  stateSpace ss vs2\n\ngoal (1 subgoal):\n 1. vs1 = vs2", "by (auto simp: stateSpace_def)\n\n\n\\<comment> \\<open>NOTE Name 'dom' changed to 'domain' because of name clash with 'Map.dom'.\\<close>"], ["", "lemma FINITE_SS:\n  fixes ss :: \"('a, bool) fmap set\"\n  assumes \"\\<not>(ss = {})\" \"(stateSpace ss domain)\"\n  shows \"finite ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ss", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite ss", "have 1: \"stateSpace ss domain = (\\<forall>s. s \\<in> ss \\<longrightarrow> (fmdom' s = domain))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stateSpace ss domain =\n    (\\<forall>s. s \\<in> ss \\<longrightarrow> fmdom' s = domain)", "by (simp add: stateSpace_def)"], ["proof (state)\nthis:\n  stateSpace ss domain =\n  (\\<forall>s. s \\<in> ss \\<longrightarrow> fmdom' s = domain)\n\ngoal (1 subgoal):\n 1. finite ss", "{"], ["proof (state)\nthis:\n  stateSpace ss domain =\n  (\\<forall>s. s \\<in> ss \\<longrightarrow> fmdom' s = domain)\n\ngoal (1 subgoal):\n 1. finite ss", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. finite ss", "assume P1: \"s \\<in> ss\""], ["proof (state)\nthis:\n  s \\<in> ss\n\ngoal (1 subgoal):\n 1. finite ss", "have \"fmdom' s = domain\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' s = domain", "using assms 1 P1"], ["proof (prove)\nusing this:\n  ss \\<noteq> {}\n  stateSpace ss domain\n  stateSpace ss domain =\n  (\\<forall>s. s \\<in> ss \\<longrightarrow> fmdom' s = domain)\n  s \\<in> ss\n\ngoal (1 subgoal):\n 1. fmdom' s = domain", "by blast"], ["proof (state)\nthis:\n  fmdom' s = domain\n\ngoal (1 subgoal):\n 1. finite ss", "then"], ["proof (chain)\npicking this:\n  fmdom' s = domain", "have \"s \\<in> {s. fmdom' s = domain}\""], ["proof (prove)\nusing this:\n  fmdom' s = domain\n\ngoal (1 subgoal):\n 1. s \\<in> {s. fmdom' s = domain}", "by auto"], ["proof (state)\nthis:\n  s \\<in> {s. fmdom' s = domain}\n\ngoal (1 subgoal):\n 1. finite ss", "}"], ["proof (state)\nthis:\n  ?s2 \\<in> ss \\<Longrightarrow> ?s2 \\<in> {s. fmdom' s = domain}\n\ngoal (1 subgoal):\n 1. finite ss", "then"], ["proof (chain)\npicking this:\n  ?s2 \\<in> ss \\<Longrightarrow> ?s2 \\<in> {s. fmdom' s = domain}", "have 2: \"ss \\<subseteq> {s. fmdom' s = domain}\""], ["proof (prove)\nusing this:\n  ?s2 \\<in> ss \\<Longrightarrow> ?s2 \\<in> {s. fmdom' s = domain}\n\ngoal (1 subgoal):\n 1. ss \\<subseteq> {s. fmdom' s = domain}", "by blast\n      \\<comment> \\<open>TODO add lemma (finite (fmdom' s))\\<close>"], ["proof (state)\nthis:\n  ss \\<subseteq> {s. fmdom' s = domain}\n\ngoal (1 subgoal):\n 1. finite ss", "then"], ["proof (chain)\npicking this:\n  ss \\<subseteq> {s. fmdom' s = domain}", "have \"finite domain\""], ["proof (prove)\nusing this:\n  ss \\<subseteq> {s. fmdom' s = domain}\n\ngoal (1 subgoal):\n 1. finite domain", "using 1 assms"], ["proof (prove)\nusing this:\n  ss \\<subseteq> {s. fmdom' s = domain}\n  stateSpace ss domain =\n  (\\<forall>s. s \\<in> ss \\<longrightarrow> fmdom' s = domain)\n  ss \\<noteq> {}\n  stateSpace ss domain\n\ngoal (1 subgoal):\n 1. finite domain", "by fastforce"], ["proof (state)\nthis:\n  finite domain\n\ngoal (1 subgoal):\n 1. finite ss", "then"], ["proof (chain)\npicking this:\n  finite domain", "have \"finite {s :: 'a state. fmdom' s = domain}\""], ["proof (prove)\nusing this:\n  finite domain\n\ngoal (1 subgoal):\n 1. finite {s. fmdom' s = domain}", "using FINITE_states"], ["proof (prove)\nusing this:\n  finite domain\n  finite ?X \\<Longrightarrow> finite {s. fmdom' s = ?X}\n\ngoal (1 subgoal):\n 1. finite {s. fmdom' s = domain}", "by blast"], ["proof (state)\nthis:\n  finite {s. fmdom' s = domain}\n\ngoal (1 subgoal):\n 1. finite ss", "then"], ["proof (chain)\npicking this:\n  finite {s. fmdom' s = domain}", "show ?thesis"], ["proof (prove)\nusing this:\n  finite {s. fmdom' s = domain}\n\ngoal (1 subgoal):\n 1. finite ss", "using 2 finite_subset"], ["proof (prove)\nusing this:\n  finite {s. fmdom' s = domain}\n  ss \\<subseteq> {s. fmdom' s = domain}\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite ss", "by auto"], ["proof (state)\nthis:\n  finite ss\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma disjoint_effects_no_effects:\n  fixes s\n  assumes \"(\\<forall>a. ListMem a as \\<longrightarrow> (fmdom' (fmrestrict_set vs (snd a)) = {}))\"\n  shows \"(fmrestrict_set vs (exec_plan s as) = (fmrestrict_set vs s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s as) = fmrestrict_set vs s", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow> fmdom' (fmrestrict_set vs (snd a)) = {}\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s as) = fmrestrict_set vs s", "proof (induction as arbitrary: s vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s vs.\n       \\<forall>a.\n          ListMem a [] \\<longrightarrow>\n          fmdom' (fmrestrict_set vs (snd a)) = {} \\<Longrightarrow>\n       fmrestrict_set vs (exec_plan s []) = fmrestrict_set vs s\n 2. \\<And>a as s vs.\n       \\<lbrakk>\\<And>s vs.\n                   \\<forall>a.\n                      ListMem a as \\<longrightarrow>\n                      fmdom' (fmrestrict_set vs (snd a)) =\n                      {} \\<Longrightarrow>\n                   fmrestrict_set vs (exec_plan s as) = fmrestrict_set vs s;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fmrestrict_set vs (snd aa)) = {}\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                         fmrestrict_set vs s", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     fmdom' (fmrestrict_set ?vs (snd a)) = {} \\<Longrightarrow>\n  fmrestrict_set ?vs (exec_plan ?s as) = fmrestrict_set ?vs ?s\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     fmdom' (fmrestrict_set vs (snd aa)) = {}\n\ngoal (2 subgoals):\n 1. \\<And>s vs.\n       \\<forall>a.\n          ListMem a [] \\<longrightarrow>\n          fmdom' (fmrestrict_set vs (snd a)) = {} \\<Longrightarrow>\n       fmrestrict_set vs (exec_plan s []) = fmrestrict_set vs s\n 2. \\<And>a as s vs.\n       \\<lbrakk>\\<And>s vs.\n                   \\<forall>a.\n                      ListMem a as \\<longrightarrow>\n                      fmdom' (fmrestrict_set vs (snd a)) =\n                      {} \\<Longrightarrow>\n                   fmrestrict_set vs (exec_plan s as) = fmrestrict_set vs s;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fmrestrict_set vs (snd aa)) = {}\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                         fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     fmdom' (fmrestrict_set ?vs (snd a)) = {} \\<Longrightarrow>\n  fmrestrict_set ?vs (exec_plan ?s as) = fmrestrict_set ?vs ?s\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     fmdom' (fmrestrict_set vs (snd aa)) = {}", "have \"ListMem a (a # as)\""], ["proof (prove)\nusing this:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     fmdom' (fmrestrict_set ?vs (snd a)) = {} \\<Longrightarrow>\n  fmrestrict_set ?vs (exec_plan ?s as) = fmrestrict_set ?vs ?s\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     fmdom' (fmrestrict_set vs (snd aa)) = {}\n\ngoal (1 subgoal):\n 1. ListMem a (a # as)", "using elem"], ["proof (prove)\nusing this:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     fmdom' (fmrestrict_set ?vs (snd a)) = {} \\<Longrightarrow>\n  fmrestrict_set ?vs (exec_plan ?s as) = fmrestrict_set ?vs ?s\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     fmdom' (fmrestrict_set vs (snd aa)) = {}\n  ListMem ?x (?x # ?xs)\n\ngoal (1 subgoal):\n 1. ListMem a (a # as)", "by fast"], ["proof (state)\nthis:\n  ListMem a (a # as)\n\ngoal (2 subgoals):\n 1. \\<And>s vs.\n       \\<forall>a.\n          ListMem a [] \\<longrightarrow>\n          fmdom' (fmrestrict_set vs (snd a)) = {} \\<Longrightarrow>\n       fmrestrict_set vs (exec_plan s []) = fmrestrict_set vs s\n 2. \\<And>a as s vs.\n       \\<lbrakk>\\<And>s vs.\n                   \\<forall>a.\n                      ListMem a as \\<longrightarrow>\n                      fmdom' (fmrestrict_set vs (snd a)) =\n                      {} \\<Longrightarrow>\n                   fmrestrict_set vs (exec_plan s as) = fmrestrict_set vs s;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fmrestrict_set vs (snd aa)) = {}\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                         fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  ListMem a (a # as)", "have \"fmdom' (fmrestrict_set vs (snd a)) = {}\""], ["proof (prove)\nusing this:\n  ListMem a (a # as)\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (snd a)) = {}", "using Cons.prems(1)"], ["proof (prove)\nusing this:\n  ListMem a (a # as)\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     fmdom' (fmrestrict_set vs (snd aa)) = {}\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (snd a)) = {}", "by blast"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) = {}\n\ngoal (2 subgoals):\n 1. \\<And>s vs.\n       \\<forall>a.\n          ListMem a [] \\<longrightarrow>\n          fmdom' (fmrestrict_set vs (snd a)) = {} \\<Longrightarrow>\n       fmrestrict_set vs (exec_plan s []) = fmrestrict_set vs s\n 2. \\<And>a as s vs.\n       \\<lbrakk>\\<And>s vs.\n                   \\<forall>a.\n                      ListMem a as \\<longrightarrow>\n                      fmdom' (fmrestrict_set vs (snd a)) =\n                      {} \\<Longrightarrow>\n                   fmrestrict_set vs (exec_plan s as) = fmrestrict_set vs s;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fmrestrict_set vs (snd aa)) = {}\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                         fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) = {}", "have \"fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\""], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) = {}\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "using sat_precond_as_proj_3"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) = {}\n  fmdom' (fmrestrict_set ?vs (snd ?a)) = {} \\<Longrightarrow>\n  fmrestrict_set ?vs (state_succ ?s ?a) = fmrestrict_set ?vs ?s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n\ngoal (2 subgoals):\n 1. \\<And>s vs.\n       \\<forall>a.\n          ListMem a [] \\<longrightarrow>\n          fmdom' (fmrestrict_set vs (snd a)) = {} \\<Longrightarrow>\n       fmrestrict_set vs (exec_plan s []) = fmrestrict_set vs s\n 2. \\<And>a as s vs.\n       \\<lbrakk>\\<And>s vs.\n                   \\<forall>a.\n                      ListMem a as \\<longrightarrow>\n                      fmdom' (fmrestrict_set vs (snd a)) =\n                      {} \\<Longrightarrow>\n                   fmrestrict_set vs (exec_plan s as) = fmrestrict_set vs s;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           fmdom' (fmrestrict_set vs (snd aa)) = {}\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s (a # as)) =\n                         fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "show ?case"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s (a # as)) = fmrestrict_set vs s", "by (simp add: Cons.IH Cons.prems insert)"], ["proof (state)\nthis:\n  fmrestrict_set vs (exec_plan s (a # as)) = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. \\<And>s vs.\n       \\<forall>a.\n          ListMem a [] \\<longrightarrow>\n          fmdom' (fmrestrict_set vs (snd a)) = {} \\<Longrightarrow>\n       fmrestrict_set vs (exec_plan s []) = fmrestrict_set vs s", "qed auto"], ["", "subsection \"Needed Asses\"\n\n\n\\<comment> \\<open>NOTE name shortened.\\<close>"], ["", "definition action_needed_vars where\n  \"action_needed_vars a s \\<equiv> {v. (v \\<in> fmdom' s) \\<and> (v \\<in> fmdom' (fst a))\n    \\<and> (fmlookup (fst a) v = fmlookup s v)}\"\n  \\<comment> \\<open>NOTE name shortened to 'action\\_needed\\_asses'.\\<close>"], ["", "definition action_needed_asses where\n  \"action_needed_asses a s \\<equiv> fmrestrict_set (action_needed_vars a s) s\"\n\n\n\\<comment> \\<open>NOTE type for 'a' had to be fixed (type mismatch in goal).\\<close>"], ["", "lemma act_needed_asses_submap_succ_submap:\n  fixes a s1 s2\n  assumes \"(action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1)\" \"(s1 \\<subseteq>\\<^sub>f s2)\"\n  shows \"(state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "using assms"], ["proof (prove)\nusing this:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n  s1 \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n  s1 \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1\n     else s1) \\<subseteq>\\<^sub>f\n    (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2)", "proof (auto)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2\n 2. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> snd a ++ s1 \\<subseteq>\\<^sub>f s2\n 3. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "assume P1: \"action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\" \"s1 \\<subseteq>\\<^sub>f s2\" \"fst a \\<subseteq>\\<^sub>f s1\"\n    \"fst a \\<subseteq>\\<^sub>f s2\""], ["proof (state)\nthis:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (3 subgoals):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2\n 2. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> snd a ++ s1 \\<subseteq>\\<^sub>f s2\n 3. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  fst a \\<subseteq>\\<^sub>f s2", "show \"snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2\""], ["proof (prove)\nusing this:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2", "using submap_imp_state_succ_submap_b"], ["proof (prove)\nusing this:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  fst a \\<subseteq>\\<^sub>f s2\n  ?s1.0 \\<subseteq>\\<^sub>f ?s2.0 \\<Longrightarrow>\n  ?s0.0 ++ ?s1.0 \\<subseteq>\\<^sub>f ?s0.0 ++ ?s2.0\n\ngoal (1 subgoal):\n 1. snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2", "by blast"], ["proof (state)\nthis:\n  snd a ++ s1 \\<subseteq>\\<^sub>f snd a ++ s2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> snd a ++ s1 \\<subseteq>\\<^sub>f s2\n 2. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> snd a ++ s1 \\<subseteq>\\<^sub>f s2\n 2. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "assume P2: \"action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\" \"s1 \\<subseteq>\\<^sub>f s2\" \"fst a \\<subseteq>\\<^sub>f s1\"\n    \"\\<not> fst a \\<subseteq>\\<^sub>f s2\""], ["proof (state)\nthis:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1;\n     \\<not> fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> snd a ++ s1 \\<subseteq>\\<^sub>f s2\n 2. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  \\<not> fst a \\<subseteq>\\<^sub>f s2", "show \"snd a ++ s1 \\<subseteq>\\<^sub>f s2\""], ["proof (prove)\nusing this:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. snd a ++ s1 \\<subseteq>\\<^sub>f s2", "using submap_imp_state_succ_submap_a"], ["proof (prove)\nusing this:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n  s1 \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   ?s2.0 \\<subseteq>\\<^sub>f ?s3.0\\<rbrakk>\n  \\<Longrightarrow> ?s1.0 \\<subseteq>\\<^sub>f ?s3.0\n\ngoal (1 subgoal):\n 1. snd a ++ s1 \\<subseteq>\\<^sub>f s2", "by blast"], ["proof (state)\nthis:\n  snd a ++ s1 \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "assume P3: \"action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\" \"s1 \\<subseteq>\\<^sub>f s2\" \"\\<not> fst a \\<subseteq>\\<^sub>f s1\"\n    \"fst a \\<subseteq>\\<^sub>f s2\""], ["proof (state)\nthis:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<not> fst a \\<subseteq>\\<^sub>f s1\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "let ?vs1=\"{v \\<in> fmdom' s1. v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "let ?vs2=\"{v \\<in> fmdom' s2. v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "let ?f=\"fmrestrict_set ?vs1 s1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "let ?g=\"fmrestrict_set ?vs2 s2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "have 1: \"fmdom' ?f = ?vs1\" \"fmdom' ?g = ?vs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom'\n     (fmrestrict_set\n       {v \\<in> fmdom' s1.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n       s1) =\n    {v \\<in> fmdom' s1.\n     v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v} &&&\n    fmdom'\n     (fmrestrict_set\n       {v \\<in> fmdom' s2.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n       s2) =\n    {v \\<in> fmdom' s2.\n     v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}", "unfolding action_needed_asses_def action_needed_vars_def fmdom'_restrict_set_precise"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' s1 \\<inter>\n    {v \\<in> fmdom' s1.\n     v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v} =\n    {v \\<in> fmdom' s1.\n     v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v} &&&\n    fmdom' s2 \\<inter>\n    {v \\<in> fmdom' s2.\n     v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v} =\n    {v \\<in> fmdom' s2.\n     v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}", "by blast+"], ["proof (state)\nthis:\n  fmdom'\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1) =\n  {v \\<in> fmdom' s1.\n   v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n  fmdom'\n   (fmrestrict_set\n     {v \\<in> fmdom' s2.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n     s2) =\n  {v \\<in> fmdom' s2.\n   v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "have 2: \"fmlookup ?g \\<subseteq>\\<^sub>m fmlookup ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s2.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n       s2) \\<subseteq>\\<^sub>m\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s1.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n       s1)", "using P3(1)"], ["proof (prove)\nusing this:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n\ngoal (1 subgoal):\n 1. fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s2.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n       s2) \\<subseteq>\\<^sub>m\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s1.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n       s1)", "unfolding action_needed_asses_def action_needed_vars_def"], ["proof (prove)\nusing this:\n  fmrestrict_set\n   {v \\<in> fmdom' s2.\n    v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n   s2 \\<subseteq>\\<^sub>f\n  fmrestrict_set\n   {v \\<in> fmdom' s1.\n    v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n   s1\n\ngoal (1 subgoal):\n 1. fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s2.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n       s2) \\<subseteq>\\<^sub>m\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s1.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n       s1)", "using fmsubset.rep_eq"], ["proof (prove)\nusing this:\n  fmrestrict_set\n   {v \\<in> fmdom' s2.\n    v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n   s2 \\<subseteq>\\<^sub>f\n  fmrestrict_set\n   {v \\<in> fmdom' s1.\n    v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n   s1\n  (?x \\<subseteq>\\<^sub>f ?xa) =\n  (fmlookup ?x \\<subseteq>\\<^sub>m fmlookup ?xa)\n\ngoal (1 subgoal):\n 1. fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s2.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n       s2) \\<subseteq>\\<^sub>m\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s1.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n       s1)", "by blast"], ["proof (state)\nthis:\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s2.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n     s2) \\<subseteq>\\<^sub>m\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "{"], ["proof (state)\nthis:\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s2.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n     s2) \\<subseteq>\\<^sub>m\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "{"], ["proof (state)\nthis:\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s2.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n     s2) \\<subseteq>\\<^sub>m\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "assume P3_1: \"v \\<in> fmdom' ?g\""], ["proof (state)\nthis:\n  v \\<in> fmdom'\n           (fmrestrict_set\n             {v \\<in> fmdom' s2.\n              v \\<in> fmdom' (fst a) \\<and>\n              fmlookup (fst a) v = fmlookup s2 v}\n             s2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom'\n           (fmrestrict_set\n             {v \\<in> fmdom' s2.\n              v \\<in> fmdom' (fst a) \\<and>\n              fmlookup (fst a) v = fmlookup s2 v}\n             s2)", "have \"v \\<in> fmdom' s2\" \"v \\<in> fmdom' (fst a)\" \"fmlookup (fst a) v = fmlookup s2 v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom'\n           (fmrestrict_set\n             {v \\<in> fmdom' s2.\n              v \\<in> fmdom' (fst a) \\<and>\n              fmlookup (fst a) v = fmlookup s2 v}\n             s2)\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' s2 &&&\n    v \\<in> fmdom' (fst a) &&& fmlookup (fst a) v = fmlookup s2 v", "using 1"], ["proof (prove)\nusing this:\n  v \\<in> fmdom'\n           (fmrestrict_set\n             {v \\<in> fmdom' s2.\n              v \\<in> fmdom' (fst a) \\<and>\n              fmlookup (fst a) v = fmlookup s2 v}\n             s2)\n  fmdom'\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1) =\n  {v \\<in> fmdom' s1.\n   v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n  fmdom'\n   (fmrestrict_set\n     {v \\<in> fmdom' s2.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n     s2) =\n  {v \\<in> fmdom' s2.\n   v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' s2 &&&\n    v \\<in> fmdom' (fst a) &&& fmlookup (fst a) v = fmlookup s2 v", "by simp+"], ["proof (state)\nthis:\n  v \\<in> fmdom' s2\n  v \\<in> fmdom' (fst a)\n  fmlookup (fst a) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' s2\n  v \\<in> fmdom' (fst a)\n  fmlookup (fst a) v = fmlookup s2 v", "have \"fmlookup (fst a) v = fmlookup ?g v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' s2\n  v \\<in> fmdom' (fst a)\n  fmlookup (fst a) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. fmlookup (fst a) v =\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s2.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n       s2)\n     v", "by simp"], ["proof (state)\nthis:\n  fmlookup (fst a) v =\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s2.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n     s2)\n   v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  fmlookup (fst a) v =\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s2.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n     s2)\n   v", "have \"fmlookup (fst a) v = fmlookup ?f v\""], ["proof (prove)\nusing this:\n  fmlookup (fst a) v =\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s2.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n     s2)\n   v\n\ngoal (1 subgoal):\n 1. fmlookup (fst a) v =\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s1.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n       s1)\n     v", "using 2"], ["proof (prove)\nusing this:\n  fmlookup (fst a) v =\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s2.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n     s2)\n   v\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s2.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n     s2) \\<subseteq>\\<^sub>m\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n\ngoal (1 subgoal):\n 1. fmlookup (fst a) v =\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s1.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n       s1)\n     v", "by (metis (mono_tags, lifting) P3_1 domIff fmdom'_notI map_le_def)"], ["proof (state)\nthis:\n  fmlookup (fst a) v =\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n   v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "}"], ["proof (state)\nthis:\n  ?v2\n  \\<in> fmdom'\n         (fmrestrict_set\n           {v \\<in> fmdom' s2.\n            v \\<in> fmdom' (fst a) \\<and>\n            fmlookup (fst a) v = fmlookup s2 v}\n           s2) \\<Longrightarrow>\n  fmlookup (fst a) ?v2 =\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n   ?v2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  ?v2\n  \\<in> fmdom'\n         (fmrestrict_set\n           {v \\<in> fmdom' s2.\n            v \\<in> fmdom' (fst a) \\<and>\n            fmlookup (fst a) v = fmlookup s2 v}\n           s2) \\<Longrightarrow>\n  fmlookup (fst a) ?v2 =\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n   ?v2", "have i: \"fmlookup (fst a) \\<subseteq>\\<^sub>m fmlookup ?f\""], ["proof (prove)\nusing this:\n  ?v2\n  \\<in> fmdom'\n         (fmrestrict_set\n           {v \\<in> fmdom' s2.\n            v \\<in> fmdom' (fst a) \\<and>\n            fmlookup (fst a) v = fmlookup s2 v}\n           s2) \\<Longrightarrow>\n  fmlookup (fst a) ?v2 =\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n   ?v2\n\ngoal (1 subgoal):\n 1. fmlookup (fst a) \\<subseteq>\\<^sub>m\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s1.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n       s1)", "using P3(4) 1(2)"], ["proof (prove)\nusing this:\n  ?v2\n  \\<in> fmdom'\n         (fmrestrict_set\n           {v \\<in> fmdom' s2.\n            v \\<in> fmdom' (fst a) \\<and>\n            fmlookup (fst a) v = fmlookup s2 v}\n           s2) \\<Longrightarrow>\n  fmlookup (fst a) ?v2 =\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n   ?v2\n  fst a \\<subseteq>\\<^sub>f s2\n  fmdom'\n   (fmrestrict_set\n     {v \\<in> fmdom' s2.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n     s2) =\n  {v \\<in> fmdom' s2.\n   v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s2 v}\n\ngoal (1 subgoal):\n 1. fmlookup (fst a) \\<subseteq>\\<^sub>m\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s1.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n       s1)", "by (smt domIff fmdom'_notD fmsubset.rep_eq map_le_def mem_Collect_eq)"], ["proof (state)\nthis:\n  fmlookup (fst a) \\<subseteq>\\<^sub>m\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "{"], ["proof (state)\nthis:\n  fmlookup (fst a) \\<subseteq>\\<^sub>m\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "assume P3_2: \"v \\<in> dom (fmlookup (fst a))\""], ["proof (state)\nthis:\n  v \\<in> dom (fmlookup (fst a))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  v \\<in> dom (fmlookup (fst a))", "have \"fmlookup (fst a) v = fmlookup ?f v\""], ["proof (prove)\nusing this:\n  v \\<in> dom (fmlookup (fst a))\n\ngoal (1 subgoal):\n 1. fmlookup (fst a) v =\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s1.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n       s1)\n     v", "using i"], ["proof (prove)\nusing this:\n  v \\<in> dom (fmlookup (fst a))\n  fmlookup (fst a) \\<subseteq>\\<^sub>m\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n\ngoal (1 subgoal):\n 1. fmlookup (fst a) v =\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s1.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n       s1)\n     v", "by (meson domIff fmdom'_notI map_le_def)"], ["proof (state)\nthis:\n  fmlookup (fst a) v =\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n   v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  fmlookup (fst a) v =\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n   v", "have \"v \\<in> ?vs1\""], ["proof (prove)\nusing this:\n  fmlookup (fst a) v =\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n   v\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> fmdom' s1.\n             v \\<in> fmdom' (fst a) \\<and>\n             fmlookup (fst a) v = fmlookup s1 v}", "using P3_2 1(1)"], ["proof (prove)\nusing this:\n  fmlookup (fst a) v =\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1)\n   v\n  v \\<in> dom (fmlookup (fst a))\n  fmdom'\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n     s1) =\n  {v \\<in> fmdom' s1.\n   v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> fmdom' s1.\n             v \\<in> fmdom' (fst a) \\<and>\n             fmlookup (fst a) v = fmlookup s1 v}", "by (metis (no_types, lifting) domIff fmdom'_notD)"], ["proof (state)\nthis:\n  v \\<in> {v \\<in> fmdom' s1.\n           v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  v \\<in> {v \\<in> fmdom' s1.\n           v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}", "have \"fmlookup (fst a) v = fmlookup s1 v\""], ["proof (prove)\nusing this:\n  v \\<in> {v \\<in> fmdom' s1.\n           v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s1 v}\n\ngoal (1 subgoal):\n 1. fmlookup (fst a) v = fmlookup s1 v", "by blast"], ["proof (state)\nthis:\n  fmlookup (fst a) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "}"], ["proof (state)\nthis:\n  ?v2 \\<in> dom (fmlookup (fst a)) \\<Longrightarrow>\n  fmlookup (fst a) ?v2 = fmlookup s1 ?v2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  ?v2 \\<in> dom (fmlookup (fst a)) \\<Longrightarrow>\n  fmlookup (fst a) ?v2 = fmlookup s1 ?v2", "have \"fst a \\<subseteq>\\<^sub>f s1\""], ["proof (prove)\nusing this:\n  ?v2 \\<in> dom (fmlookup (fst a)) \\<Longrightarrow>\n  fmlookup (fst a) ?v2 = fmlookup s1 ?v2\n\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s1", "by (simp add: map_le_def fmsubset.rep_eq)"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "}"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a s1;\n     s1 \\<subseteq>\\<^sub>f s2; \\<not> fst a \\<subseteq>\\<^sub>f s1;\n     fst a \\<subseteq>\\<^sub>f s2\\<rbrakk>\n    \\<Longrightarrow> s1 \\<subseteq>\\<^sub>f snd a ++ s2", "then"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s1", "show \"s1 \\<subseteq>\\<^sub>f snd a ++ s2\""], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. s1 \\<subseteq>\\<^sub>f snd a ++ s2", "using P3(3)"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s1\n  \\<not> fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. s1 \\<subseteq>\\<^sub>f snd a ++ s2", "by simp"], ["proof (state)\nthis:\n  s1 \\<subseteq>\\<^sub>f snd a ++ s2\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor.\\<close>"], ["", "lemma as_needed_asses_submap_exec_i:\n  fixes a s\n  assumes \"v \\<in> fmdom' (action_needed_asses a s)\"\n  shows \"\n    fmlookup (action_needed_asses a s) v = fmlookup s v\n    \\<and> fmlookup (action_needed_asses a s) v = fmlookup (fst a) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s) v = fmlookup s v \\<and>\n    fmlookup (action_needed_asses a s) v = fmlookup (fst a) v", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a s)\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s) v = fmlookup s v \\<and>\n    fmlookup (action_needed_asses a s) v = fmlookup (fst a) v", "unfolding action_needed_asses_def action_needed_vars_def"], ["proof (prove)\nusing this:\n  v \\<in> fmdom'\n           (fmrestrict_set\n             {v \\<in> fmdom' s.\n              v \\<in> fmdom' (fst a) \\<and>\n              fmlookup (fst a) v = fmlookup s v}\n             s)\n\ngoal (1 subgoal):\n 1. fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n       s)\n     v =\n    fmlookup s v \\<and>\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n       s)\n     v =\n    fmlookup (fst a) v", "using fmdom'_notI fmlookup_restrict_set"], ["proof (prove)\nusing this:\n  v \\<in> fmdom'\n           (fmrestrict_set\n             {v \\<in> fmdom' s.\n              v \\<in> fmdom' (fst a) \\<and>\n              fmlookup (fst a) v = fmlookup s v}\n             s)\n  fmlookup ?m ?x = None \\<Longrightarrow> ?x \\<notin> fmdom' ?m\n  fmlookup (fmrestrict_set ?A ?m) ?x =\n  (if ?x \\<in> ?A then fmlookup ?m ?x else None)\n\ngoal (1 subgoal):\n 1. fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n       s)\n     v =\n    fmlookup s v \\<and>\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n       s)\n     v =\n    fmlookup (fst a) v", "by (smt mem_Collect_eq)\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor.\\<close>"], ["", "lemma as_needed_asses_submap_exec_ii:\n  fixes f g v\n  assumes \"v \\<in> fmdom' f\" \"f \\<subseteq>\\<^sub>f g\"\n  shows \"fmlookup f v = fmlookup g v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup f v = fmlookup g v", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' f\n  f \\<subseteq>\\<^sub>f g\n\ngoal (1 subgoal):\n 1. fmlookup f v = fmlookup g v", "by (meson fmdom'_notI fmdom_notD fmsubset_eq)\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor.\\<close>"], ["", "lemma as_needed_asses_submap_exec_iii:\n  fixes f g v\n  shows \"\n    fmdom' (action_needed_asses a s)\n    = {v \\<in> fmdom' s. v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (action_needed_asses a s) =\n    {v \\<in> fmdom' s.\n     v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}", "unfolding action_needed_asses_def action_needed_vars_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom'\n     (fmrestrict_set\n       {v \\<in> fmdom' s.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n       s) =\n    {v \\<in> fmdom' s.\n     v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}", "by (simp add: Set.filter_def fmfilter_alt_defs(4))\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma as_needed_asses_submap_exec_iv:\n  fixes f a v\n  assumes \"v \\<in> fmdom' (action_needed_asses a s)\"\n  shows \"\n    fmlookup (action_needed_asses a s) v = fmlookup s v\n    \\<and> fmlookup (action_needed_asses a s) v = fmlookup (fst a) v\n    \\<and> fmlookup (fst a) v = fmlookup s v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s) v = fmlookup s v \\<and>\n    fmlookup (action_needed_asses a s) v = fmlookup (fst a) v \\<and>\n    fmlookup (fst a) v = fmlookup s v", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a s)\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s) v = fmlookup s v \\<and>\n    fmlookup (action_needed_asses a s) v = fmlookup (fst a) v \\<and>\n    fmlookup (fst a) v = fmlookup s v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a s) \\<Longrightarrow>\n    fmlookup (action_needed_asses a s) v = fmlookup s v \\<and>\n    fmlookup (action_needed_asses a s) v = fmlookup (fst a) v \\<and>\n    fmlookup (fst a) v = fmlookup s v", "have 1: \"v \\<in> {v \\<in> fmdom' s. v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> fmdom' s.\n             v \\<in> fmdom' (fst a) \\<and>\n             fmlookup (fst a) v = fmlookup s v}", "using assms as_needed_asses_submap_exec_iii"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a s)\n  fmdom' (action_needed_asses ?a ?s) =\n  {v \\<in> fmdom' ?s.\n   v \\<in> fmdom' (fst ?a) \\<and> fmlookup (fst ?a) v = fmlookup ?s v}\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> fmdom' s.\n             v \\<in> fmdom' (fst a) \\<and>\n             fmlookup (fst a) v = fmlookup s v}", "by metis"], ["proof (state)\nthis:\n  v \\<in> {v \\<in> fmdom' s.\n           v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a s) \\<Longrightarrow>\n    fmlookup (action_needed_asses a s) v = fmlookup s v \\<and>\n    fmlookup (action_needed_asses a s) v = fmlookup (fst a) v \\<and>\n    fmlookup (fst a) v = fmlookup s v", "then"], ["proof (chain)\npicking this:\n  v \\<in> {v \\<in> fmdom' s.\n           v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}", "have 2: \"fmlookup (action_needed_asses a s) v = fmlookup s v\""], ["proof (prove)\nusing this:\n  v \\<in> {v \\<in> fmdom' s.\n           v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s) v = fmlookup s v", "unfolding action_needed_asses_def action_needed_vars_def"], ["proof (prove)\nusing this:\n  v \\<in> {v \\<in> fmdom' s.\n           v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n\ngoal (1 subgoal):\n 1. fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s.\n        v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n       s)\n     v =\n    fmlookup s v", "by force"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s) v = fmlookup s v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a s) \\<Longrightarrow>\n    fmlookup (action_needed_asses a s) v = fmlookup s v \\<and>\n    fmlookup (action_needed_asses a s) v = fmlookup (fst a) v \\<and>\n    fmlookup (fst a) v = fmlookup s v", "moreover"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s) v = fmlookup s v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a s) \\<Longrightarrow>\n    fmlookup (action_needed_asses a s) v = fmlookup s v \\<and>\n    fmlookup (action_needed_asses a s) v = fmlookup (fst a) v \\<and>\n    fmlookup (fst a) v = fmlookup s v", "have 3: \"fmlookup (action_needed_asses a s) v = fmlookup (fst a) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s) v = fmlookup (fst a) v", "using 1 2"], ["proof (prove)\nusing this:\n  v \\<in> {v \\<in> fmdom' s.\n           v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n  fmlookup (action_needed_asses a s) v = fmlookup s v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s) v = fmlookup (fst a) v", "by simp"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s) v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a s) \\<Longrightarrow>\n    fmlookup (action_needed_asses a s) v = fmlookup s v \\<and>\n    fmlookup (action_needed_asses a s) v = fmlookup (fst a) v \\<and>\n    fmlookup (fst a) v = fmlookup s v", "moreover"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s) v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a s) \\<Longrightarrow>\n    fmlookup (action_needed_asses a s) v = fmlookup s v \\<and>\n    fmlookup (action_needed_asses a s) v = fmlookup (fst a) v \\<and>\n    fmlookup (fst a) v = fmlookup s v", "have \"fmlookup (fst a) v = fmlookup s v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (fst a) v = fmlookup s v", "using 2 3"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a s) v = fmlookup s v\n  fmlookup (action_needed_asses a s) v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. fmlookup (fst a) v = fmlookup s v", "by argo"], ["proof (state)\nthis:\n  fmlookup (fst a) v = fmlookup s v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a s) \\<Longrightarrow>\n    fmlookup (action_needed_asses a s) v = fmlookup s v \\<and>\n    fmlookup (action_needed_asses a s) v = fmlookup (fst a) v \\<and>\n    fmlookup (fst a) v = fmlookup s v", "ultimately"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a s) v = fmlookup s v\n  fmlookup (action_needed_asses a s) v = fmlookup (fst a) v\n  fmlookup (fst a) v = fmlookup s v", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a s) v = fmlookup s v\n  fmlookup (action_needed_asses a s) v = fmlookup (fst a) v\n  fmlookup (fst a) v = fmlookup s v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s) v = fmlookup s v \\<and>\n    fmlookup (action_needed_asses a s) v = fmlookup (fst a) v \\<and>\n    fmlookup (fst a) v = fmlookup s v", "by blast"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s) v = fmlookup s v \\<and>\n  fmlookup (action_needed_asses a s) v = fmlookup (fst a) v \\<and>\n  fmlookup (fst a) v = fmlookup s v\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor (into Fmap\\_Utils.thy).\\<close>"], ["", "lemma as_needed_asses_submap_exec_v:\n  fixes f g v\n  assumes \"v \\<in> fmdom' f\" \"f \\<subseteq>\\<^sub>f g\"\n  shows \"v \\<in> fmdom' g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> fmdom' g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> fmdom' g", "obtain b where 1: \"fmlookup f v = b\" \"b \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>fmlookup f v = b; b \\<noteq> None\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' f\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>fmlookup f v = b; b \\<noteq> None\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson fmdom'_notI)"], ["proof (state)\nthis:\n  fmlookup f v = b\n  b \\<noteq> None\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' g", "then"], ["proof (chain)\npicking this:\n  fmlookup f v = b\n  b \\<noteq> None", "have \"fmlookup g v = b\""], ["proof (prove)\nusing this:\n  fmlookup f v = b\n  b \\<noteq> None\n\ngoal (1 subgoal):\n 1. fmlookup g v = b", "using as_needed_asses_submap_exec_ii[OF assms]"], ["proof (prove)\nusing this:\n  fmlookup f v = b\n  b \\<noteq> None\n  fmlookup f v = fmlookup g v\n\ngoal (1 subgoal):\n 1. fmlookup g v = b", "by argo"], ["proof (state)\nthis:\n  fmlookup g v = b\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' g", "then"], ["proof (chain)\npicking this:\n  fmlookup g v = b", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup g v = b\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' g", "using 1 fmdom'_notD"], ["proof (prove)\nusing this:\n  fmlookup g v = b\n  fmlookup f v = b\n  b \\<noteq> None\n  ?x \\<notin> fmdom' ?m \\<Longrightarrow> fmlookup ?m ?x = None\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' g", "by fastforce"], ["proof (state)\nthis:\n  v \\<in> fmdom' g\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor.\\<close>"], ["", "lemma as_needed_asses_submap_exec_vi:\n  fixes a s1 s2 v\n  assumes \"v \\<in> fmdom' (action_needed_asses a s1)\"\n    \"(action_needed_asses a s1) \\<subseteq>\\<^sub>f (action_needed_asses a s2)\"\n  shows\n    \"(fmlookup (action_needed_asses a s1) v) = fmlookup (fst a) v\n    \\<and> (fmlookup (action_needed_asses a s2) v) = fmlookup (fst a) v \\<and>\n    fmlookup s1 v = fmlookup (fst a) v \\<and> fmlookup s2 v = fmlookup (fst a) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s1) v = fmlookup (fst a) v \\<and>\n    fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v \\<and>\n    fmlookup s1 v = fmlookup (fst a) v \\<and>\n    fmlookup s2 v = fmlookup (fst a) v", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a s1)\n  action_needed_asses a s1 \\<subseteq>\\<^sub>f action_needed_asses a s2\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s1) v = fmlookup (fst a) v \\<and>\n    fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v \\<and>\n    fmlookup s1 v = fmlookup (fst a) v \\<and>\n    fmlookup s2 v = fmlookup (fst a) v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "have 1:\n    \"fmlookup (action_needed_asses a s1) v = fmlookup s1 v\"\n    \"fmlookup (action_needed_asses a s1) v = fmlookup (fst a) v\"\n    \"fmlookup (fst a) v = fmlookup s1 v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s1) v = fmlookup s1 v &&&\n    fmlookup (action_needed_asses a s1) v = fmlookup (fst a) v &&&\n    fmlookup (fst a) v = fmlookup s1 v", "using as_needed_asses_submap_exec_iv[OF assms(1)]"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a s1) v = fmlookup s1 v \\<and>\n  fmlookup (action_needed_asses a s1) v = fmlookup (fst a) v \\<and>\n  fmlookup (fst a) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s1) v = fmlookup s1 v &&&\n    fmlookup (action_needed_asses a s1) v = fmlookup (fst a) v &&&\n    fmlookup (fst a) v = fmlookup s1 v", "by blast+"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s1) v = fmlookup s1 v\n  fmlookup (action_needed_asses a s1) v = fmlookup (fst a) v\n  fmlookup (fst a) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "moreover"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s1) v = fmlookup s1 v\n  fmlookup (action_needed_asses a s1) v = fmlookup (fst a) v\n  fmlookup (fst a) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "{"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s1) v = fmlookup s1 v\n  fmlookup (action_needed_asses a s1) v = fmlookup (fst a) v\n  fmlookup (fst a) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "have \"fmlookup (action_needed_asses a s1) v = fmlookup (action_needed_asses a s2) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s1) v =\n    fmlookup (action_needed_asses a s2) v", "using as_needed_asses_submap_exec_ii[OF assms]"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a s1) v =\n  fmlookup (action_needed_asses a s2) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s1) v =\n    fmlookup (action_needed_asses a s2) v", "by simp"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s1) v =\n  fmlookup (action_needed_asses a s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "then"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a s1) v =\n  fmlookup (action_needed_asses a s2) v", "have \"fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v\""], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a s1) v =\n  fmlookup (action_needed_asses a s2) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v", "using 1(2)"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a s1) v =\n  fmlookup (action_needed_asses a s2) v\n  fmlookup (action_needed_asses a s1) v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v", "by argo"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "note 2 = this"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "moreover"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "{"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "have \"v \\<in> fmdom' (action_needed_asses a s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a s2)", "using as_needed_asses_submap_exec_v[OF assms]"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a s2)\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a s2)", "by simp"], ["proof (state)\nthis:\n  v \\<in> fmdom' (action_needed_asses a s2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (action_needed_asses a s2)", "have \"fmlookup s2 v = fmlookup (action_needed_asses a s2) v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a s2)\n\ngoal (1 subgoal):\n 1. fmlookup s2 v = fmlookup (action_needed_asses a s2) v", "using as_needed_asses_submap_exec_i"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a s2)\n  ?v \\<in> fmdom' (action_needed_asses ?a ?s) \\<Longrightarrow>\n  fmlookup (action_needed_asses ?a ?s) ?v = fmlookup ?s ?v \\<and>\n  fmlookup (action_needed_asses ?a ?s) ?v = fmlookup (fst ?a) ?v\n\ngoal (1 subgoal):\n 1. fmlookup s2 v = fmlookup (action_needed_asses a s2) v", "by metis"], ["proof (state)\nthis:\n  fmlookup s2 v = fmlookup (action_needed_asses a s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "also"], ["proof (state)\nthis:\n  fmlookup s2 v = fmlookup (action_needed_asses a s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "have \"\\<dots> = fmlookup (fst a) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v", "using 2"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v", "by simp"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "finally"], ["proof (chain)\npicking this:\n  fmlookup s2 v = fmlookup (fst a) v", "have \"fmlookup s2 v = fmlookup (fst a) v\""], ["proof (prove)\nusing this:\n  fmlookup s2 v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. fmlookup s2 v = fmlookup (fst a) v", "by simp"], ["proof (state)\nthis:\n  fmlookup s2 v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "}"], ["proof (state)\nthis:\n  fmlookup s2 v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a s1);\n     action_needed_asses a s1 \\<subseteq>\\<^sub>f\n     action_needed_asses a s2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a s1) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup (action_needed_asses a s2) v =\n                      fmlookup (fst a) v \\<and>\n                      fmlookup s1 v = fmlookup (fst a) v \\<and>\n                      fmlookup s2 v = fmlookup (fst a) v", "ultimately"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a s1) v = fmlookup s1 v\n  fmlookup (action_needed_asses a s1) v = fmlookup (fst a) v\n  fmlookup (fst a) v = fmlookup s1 v\n  fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v\n  fmlookup s2 v = fmlookup (fst a) v", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a s1) v = fmlookup s1 v\n  fmlookup (action_needed_asses a s1) v = fmlookup (fst a) v\n  fmlookup (fst a) v = fmlookup s1 v\n  fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v\n  fmlookup s2 v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a s1) v = fmlookup (fst a) v \\<and>\n    fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v \\<and>\n    fmlookup s1 v = fmlookup (fst a) v \\<and>\n    fmlookup s2 v = fmlookup (fst a) v", "by argo"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a s1) v = fmlookup (fst a) v \\<and>\n  fmlookup (action_needed_asses a s2) v = fmlookup (fst a) v \\<and>\n  fmlookup s1 v = fmlookup (fst a) v \\<and>\n  fmlookup s2 v = fmlookup (fst a) v\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>TODO refactor.\\<close>\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma as_needed_asses_submap_exec_vii:\n  fixes f g v\n  assumes \"\\<forall>v \\<in> fmdom' f. fmlookup f v = fmlookup g v\"\n  shows \"f \\<subseteq>\\<^sub>f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<subseteq>\\<^sub>f g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<subseteq>\\<^sub>f g", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<subseteq>\\<^sub>f g", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<subseteq>\\<^sub>f g", "assume a: \"v \\<in> fmdom' f\""], ["proof (state)\nthis:\n  v \\<in> fmdom' f\n\ngoal (1 subgoal):\n 1. f \\<subseteq>\\<^sub>f g", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' f", "have \"v \\<in> dom (fmlookup f)\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' f\n\ngoal (1 subgoal):\n 1. v \\<in> dom (fmlookup f)", "by simp"], ["proof (state)\nthis:\n  v \\<in> dom (fmlookup f)\n\ngoal (1 subgoal):\n 1. f \\<subseteq>\\<^sub>f g", "moreover"], ["proof (state)\nthis:\n  v \\<in> dom (fmlookup f)\n\ngoal (1 subgoal):\n 1. f \\<subseteq>\\<^sub>f g", "have \"fmlookup f v = fmlookup g v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup f v = fmlookup g v", "using assms a"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>fmdom' f. fmlookup f v = fmlookup g v\n  v \\<in> fmdom' f\n\ngoal (1 subgoal):\n 1. fmlookup f v = fmlookup g v", "by blast"], ["proof (state)\nthis:\n  fmlookup f v = fmlookup g v\n\ngoal (1 subgoal):\n 1. f \\<subseteq>\\<^sub>f g", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> dom (fmlookup f)\n  fmlookup f v = fmlookup g v", "have \"v \\<in> dom (fmlookup f) \\<longrightarrow> fmlookup f v = fmlookup g v\""], ["proof (prove)\nusing this:\n  v \\<in> dom (fmlookup f)\n  fmlookup f v = fmlookup g v\n\ngoal (1 subgoal):\n 1. v \\<in> dom (fmlookup f) \\<longrightarrow> fmlookup f v = fmlookup g v", "by blast"], ["proof (state)\nthis:\n  v \\<in> dom (fmlookup f) \\<longrightarrow> fmlookup f v = fmlookup g v\n\ngoal (1 subgoal):\n 1. f \\<subseteq>\\<^sub>f g", "}"], ["proof (state)\nthis:\n  ?va2 \\<in> fmdom' f \\<Longrightarrow>\n  ?va2 \\<in> dom (fmlookup f) \\<longrightarrow>\n  fmlookup f ?va2 = fmlookup g ?va2\n\ngoal (1 subgoal):\n 1. f \\<subseteq>\\<^sub>f g", "then"], ["proof (chain)\npicking this:\n  ?va2 \\<in> fmdom' f \\<Longrightarrow>\n  ?va2 \\<in> dom (fmlookup f) \\<longrightarrow>\n  fmlookup f ?va2 = fmlookup g ?va2", "have \"fmlookup f \\<subseteq>\\<^sub>m fmlookup g\""], ["proof (prove)\nusing this:\n  ?va2 \\<in> fmdom' f \\<Longrightarrow>\n  ?va2 \\<in> dom (fmlookup f) \\<longrightarrow>\n  fmlookup f ?va2 = fmlookup g ?va2\n\ngoal (1 subgoal):\n 1. fmlookup f \\<subseteq>\\<^sub>m fmlookup g", "by (simp add: map_le_def)"], ["proof (state)\nthis:\n  fmlookup f \\<subseteq>\\<^sub>m fmlookup g\n\ngoal (1 subgoal):\n 1. f \\<subseteq>\\<^sub>f g", "then"], ["proof (chain)\npicking this:\n  fmlookup f \\<subseteq>\\<^sub>m fmlookup g", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup f \\<subseteq>\\<^sub>m fmlookup g\n\ngoal (1 subgoal):\n 1. f \\<subseteq>\\<^sub>f g", "by (simp add: fmsubset.rep_eq)"], ["proof (state)\nthis:\n  f \\<subseteq>\\<^sub>f g\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>TODO refactor.\\<close>\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma as_needed_asses_submap_exec_viii:\n  fixes f g v\n  assumes \"f \\<subseteq>\\<^sub>f g\"\n  shows \"\\<forall>v \\<in> fmdom' f. fmlookup f v = fmlookup g v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>fmdom' f. fmlookup f v = fmlookup g v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>fmdom' f. fmlookup f v = fmlookup g v", "have 1: \"fmlookup f \\<subseteq>\\<^sub>m fmlookup g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup f \\<subseteq>\\<^sub>m fmlookup g", "using assms"], ["proof (prove)\nusing this:\n  f \\<subseteq>\\<^sub>f g\n\ngoal (1 subgoal):\n 1. fmlookup f \\<subseteq>\\<^sub>m fmlookup g", "by (simp add: fmsubset.rep_eq)"], ["proof (state)\nthis:\n  fmlookup f \\<subseteq>\\<^sub>m fmlookup g\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>fmdom' f. fmlookup f v = fmlookup g v", "{"], ["proof (state)\nthis:\n  fmlookup f \\<subseteq>\\<^sub>m fmlookup g\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>fmdom' f. fmlookup f v = fmlookup g v", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>fmdom' f. fmlookup f v = fmlookup g v", "assume \"v \\<in> fmdom' f\""], ["proof (state)\nthis:\n  v \\<in> fmdom' f\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>fmdom' f. fmlookup f v = fmlookup g v", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' f", "have \"v \\<in> dom (fmlookup f)\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' f\n\ngoal (1 subgoal):\n 1. v \\<in> dom (fmlookup f)", "by simp"], ["proof (state)\nthis:\n  v \\<in> dom (fmlookup f)\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>fmdom' f. fmlookup f v = fmlookup g v", "then"], ["proof (chain)\npicking this:\n  v \\<in> dom (fmlookup f)", "have \"fmlookup f v = fmlookup g v\""], ["proof (prove)\nusing this:\n  v \\<in> dom (fmlookup f)\n\ngoal (1 subgoal):\n 1. fmlookup f v = fmlookup g v", "using 1 map_le_def"], ["proof (prove)\nusing this:\n  v \\<in> dom (fmlookup f)\n  fmlookup f \\<subseteq>\\<^sub>m fmlookup g\n  (?m\\<^sub>1 \\<subseteq>\\<^sub>m ?m\\<^sub>2) =\n  (\\<forall>a\\<in>dom ?m\\<^sub>1. ?m\\<^sub>1 a = ?m\\<^sub>2 a)\n\ngoal (1 subgoal):\n 1. fmlookup f v = fmlookup g v", "by metis"], ["proof (state)\nthis:\n  fmlookup f v = fmlookup g v\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>fmdom' f. fmlookup f v = fmlookup g v", "}"], ["proof (state)\nthis:\n  ?va2 \\<in> fmdom' f \\<Longrightarrow> fmlookup f ?va2 = fmlookup g ?va2\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>fmdom' f. fmlookup f v = fmlookup g v", "then"], ["proof (chain)\npicking this:\n  ?va2 \\<in> fmdom' f \\<Longrightarrow> fmlookup f ?va2 = fmlookup g ?va2", "show ?thesis"], ["proof (prove)\nusing this:\n  ?va2 \\<in> fmdom' f \\<Longrightarrow> fmlookup f ?va2 = fmlookup g ?va2\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>fmdom' f. fmlookup f v = fmlookup g v", "by blast"], ["proof (state)\nthis:\n  \\<forall>v\\<in>fmdom' f. fmlookup f v = fmlookup g v\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma as_needed_asses_submap_exec_viii':\n  fixes f g v\n  assumes \"f \\<subseteq>\\<^sub>f g\"\n  shows \"fmdom' f \\<subseteq> fmdom' g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' f \\<subseteq> fmdom' g", "using assms as_needed_asses_submap_exec_v subsetI"], ["proof (prove)\nusing this:\n  f \\<subseteq>\\<^sub>f g\n  \\<lbrakk>?v \\<in> fmdom' ?f; ?f \\<subseteq>\\<^sub>f ?g\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> fmdom' ?g\n  (\\<And>x. x \\<in> ?A \\<Longrightarrow> x \\<in> ?B) \\<Longrightarrow>\n  ?A \\<subseteq> ?B\n\ngoal (1 subgoal):\n 1. fmdom' f \\<subseteq> fmdom' g", "by metis\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor.\\<close>"], ["", "lemma as_needed_asses_submap_exec_ix:\n  fixes f g\n  shows \"f \\<subseteq>\\<^sub>f g = (\\<forall>v \\<in> fmdom' f. fmlookup f v = fmlookup g v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<subseteq>\\<^sub>f g) =\n    (\\<forall>v\\<in>fmdom' f. fmlookup f v = fmlookup g v)", "using as_needed_asses_submap_exec_vii  as_needed_asses_submap_exec_viii"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>fmdom' ?f. fmlookup ?f v = fmlookup ?g v \\<Longrightarrow>\n  ?f \\<subseteq>\\<^sub>f ?g\n  ?f \\<subseteq>\\<^sub>f ?g \\<Longrightarrow>\n  \\<forall>v\\<in>fmdom' ?f. fmlookup ?f v = fmlookup ?g v\n\ngoal (1 subgoal):\n 1. (f \\<subseteq>\\<^sub>f g) =\n    (\\<forall>v\\<in>fmdom' f. fmlookup f v = fmlookup g v)", "by metis\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma as_needed_asses_submap_exec_x:\n  fixes f a v\n  assumes \"v \\<in> fmdom' (action_needed_asses a f)\"\n  shows \"v \\<in> fmdom' (fst a) \\<and> v \\<in> fmdom' f \\<and> fmlookup (fst a) v = fmlookup f v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a) \\<and>\n    v \\<in> fmdom' f \\<and> fmlookup (fst a) v = fmlookup f v", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a f)\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a) \\<and>\n    v \\<in> fmdom' f \\<and> fmlookup (fst a) v = fmlookup f v", "unfolding action_needed_asses_def action_needed_vars_def"], ["proof (prove)\nusing this:\n  v \\<in> fmdom'\n           (fmrestrict_set\n             {v \\<in> fmdom' f.\n              v \\<in> fmdom' (fst a) \\<and>\n              fmlookup (fst a) v = fmlookup f v}\n             f)\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a) \\<and>\n    v \\<in> fmdom' f \\<and> fmlookup (fst a) v = fmlookup f v", "using as_needed_asses_submap_exec_i assms"], ["proof (prove)\nusing this:\n  v \\<in> fmdom'\n           (fmrestrict_set\n             {v \\<in> fmdom' f.\n              v \\<in> fmdom' (fst a) \\<and>\n              fmlookup (fst a) v = fmlookup f v}\n             f)\n  ?v \\<in> fmdom' (action_needed_asses ?a ?s) \\<Longrightarrow>\n  fmlookup (action_needed_asses ?a ?s) ?v = fmlookup ?s ?v \\<and>\n  fmlookup (action_needed_asses ?a ?s) ?v = fmlookup (fst ?a) ?v\n  v \\<in> fmdom' (action_needed_asses a f)\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a) \\<and>\n    v \\<in> fmdom' f \\<and> fmlookup (fst a) v = fmlookup f v", "by (metis fmdom'_notD fmdom'_notI)\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor.\\<close>"], ["", "lemma as_needed_asses_submap_exec_xi:\n  fixes v a f g\n  assumes \"v \\<in> fmdom' (action_needed_asses a (f ++ g))\" \"v \\<in> fmdom' f\"\n  shows \"\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v\n    \\<and> fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "have 1: \"v \\<in> {v \\<in> fmdom' (f ++ g). v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup (f ++ g) v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> fmdom' (f ++ g).\n             v \\<in> fmdom' (fst a) \\<and>\n             fmlookup (fst a) v = fmlookup (f ++ g) v}", "using as_needed_asses_submap_exec_x[OF assms(1)]"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fst a) \\<and>\n  v \\<in> fmdom' (f ++ g) \\<and> fmlookup (fst a) v = fmlookup (f ++ g) v\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> fmdom' (f ++ g).\n             v \\<in> fmdom' (fst a) \\<and>\n             fmlookup (fst a) v = fmlookup (f ++ g) v}", "by blast"], ["proof (state)\nthis:\n  v \\<in> {v \\<in> fmdom' (f ++ g).\n           v \\<in> fmdom' (fst a) \\<and>\n           fmlookup (fst a) v = fmlookup (f ++ g) v}\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "{"], ["proof (state)\nthis:\n  v \\<in> {v \\<in> fmdom' (f ++ g).\n           v \\<in> fmdom' (fst a) \\<and>\n           fmlookup (fst a) v = fmlookup (f ++ g) v}\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "have \"v |\\<in>| fmdom f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v |\\<in>| fmdom f", "using assms(2)"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' f\n\ngoal (1 subgoal):\n 1. v |\\<in>| fmdom f", "by (meson fmdom'_notI fmdom_notD)"], ["proof (state)\nthis:\n  v |\\<in>| fmdom f\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "then"], ["proof (chain)\npicking this:\n  v |\\<in>| fmdom f", "have \"fmlookup (f ++ g) v = fmlookup f v\""], ["proof (prove)\nusing this:\n  v |\\<in>| fmdom f\n\ngoal (1 subgoal):\n 1. fmlookup (f ++ g) v = fmlookup f v", "unfolding fmap_add_ltr_def fmlookup_add"], ["proof (prove)\nusing this:\n  v |\\<in>| fmdom f\n\ngoal (1 subgoal):\n 1. (if v |\\<in>| fmdom f then fmlookup f v else fmlookup g v) =\n    fmlookup f v", "by simp"], ["proof (state)\nthis:\n  fmlookup (f ++ g) v = fmlookup f v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "}"], ["proof (state)\nthis:\n  fmlookup (f ++ g) v = fmlookup f v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "note 2 = this"], ["proof (state)\nthis:\n  fmlookup (f ++ g) v = fmlookup f v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "{"], ["proof (state)\nthis:\n  fmlookup (f ++ g) v = fmlookup f v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "have \"fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (f ++ g) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (f ++ g) v", "unfolding action_needed_asses_def action_needed_vars_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' (f ++ g).\n        v \\<in> fmdom' (fst a) \\<and>\n        fmlookup (fst a) v = fmlookup (f ++ g) v}\n       (f ++ g))\n     v =\n    fmlookup (f ++ g) v", "using 1"], ["proof (prove)\nusing this:\n  v \\<in> {v \\<in> fmdom' (f ++ g).\n           v \\<in> fmdom' (fst a) \\<and>\n           fmlookup (fst a) v = fmlookup (f ++ g) v}\n\ngoal (1 subgoal):\n 1. fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' (f ++ g).\n        v \\<in> fmdom' (fst a) \\<and>\n        fmlookup (fst a) v = fmlookup (f ++ g) v}\n       (f ++ g))\n     v =\n    fmlookup (f ++ g) v", "by force"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (f ++ g) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "then"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (f ++ g) v", "have \"fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v\""], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (f ++ g) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v", "using 2"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (f ++ g) v\n  fmlookup (f ++ g) v = fmlookup f v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v", "by simp"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "note 3 = this"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "moreover"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "{"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "have \"fmlookup (fst a) v = fmlookup (f ++ g) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (fst a) v = fmlookup (f ++ g) v", "using 1"], ["proof (prove)\nusing this:\n  v \\<in> {v \\<in> fmdom' (f ++ g).\n           v \\<in> fmdom' (fst a) \\<and>\n           fmlookup (fst a) v = fmlookup (f ++ g) v}\n\ngoal (1 subgoal):\n 1. fmlookup (fst a) v = fmlookup (f ++ g) v", "by simp"], ["proof (state)\nthis:\n  fmlookup (fst a) v = fmlookup (f ++ g) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "also"], ["proof (state)\nthis:\n  fmlookup (fst a) v = fmlookup (f ++ g) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "have \"\\<dots> = fmlookup f v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (f ++ g) v = fmlookup f v", "using 2"], ["proof (prove)\nusing this:\n  fmlookup (f ++ g) v = fmlookup f v\n\ngoal (1 subgoal):\n 1. fmlookup (f ++ g) v = fmlookup f v", "by simp"], ["proof (state)\nthis:\n  fmlookup (f ++ g) v = fmlookup f v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "also"], ["proof (state)\nthis:\n  fmlookup (f ++ g) v = fmlookup f v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "have \"\\<dots> = fmlookup (action_needed_asses a (f ++ g)) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup f v = fmlookup (action_needed_asses a (f ++ g)) v", "using 3"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v\n\ngoal (1 subgoal):\n 1. fmlookup f v = fmlookup (action_needed_asses a (f ++ g)) v", "by simp"], ["proof (state)\nthis:\n  fmlookup f v = fmlookup (action_needed_asses a (f ++ g)) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "finally"], ["proof (chain)\npicking this:\n  fmlookup (fst a) v = fmlookup (action_needed_asses a (f ++ g)) v", "have \"fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v\""], ["proof (prove)\nusing this:\n  fmlookup (fst a) v = fmlookup (action_needed_asses a (f ++ g)) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "by simp"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "ultimately"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n    fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v", "by blast"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup f v \\<and>\n  fmlookup (action_needed_asses a (f ++ g)) v = fmlookup (fst a) v\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor (into Fmap\\_Utils.thy).\\<close>"], ["", "lemma as_needed_asses_submap_exec_xii:\n  fixes f g v\n  assumes \"v \\<in> fmdom' f\"\n  shows \"fmlookup (f ++ g) v = fmlookup f v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (f ++ g) v = fmlookup f v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmlookup (f ++ g) v = fmlookup f v", "have \"v |\\<in>| fmdom f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v |\\<in>| fmdom f", "using assms(1) fmdom'_notI fmdom_notD"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' f\n  fmlookup ?m ?x = None \\<Longrightarrow> ?x \\<notin> fmdom' ?m\n  ?x |\\<notin>| fmdom ?m \\<Longrightarrow> fmlookup ?m ?x = None\n\ngoal (1 subgoal):\n 1. v |\\<in>| fmdom f", "by metis"], ["proof (state)\nthis:\n  v |\\<in>| fmdom f\n\ngoal (1 subgoal):\n 1. fmlookup (f ++ g) v = fmlookup f v", "then"], ["proof (chain)\npicking this:\n  v |\\<in>| fmdom f", "show ?thesis"], ["proof (prove)\nusing this:\n  v |\\<in>| fmdom f\n\ngoal (1 subgoal):\n 1. fmlookup (f ++ g) v = fmlookup f v", "unfolding fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  v |\\<in>| fmdom f\n\ngoal (1 subgoal):\n 1. fmlookup (g ++\\<^sub>f f) v = fmlookup f v", "using fmlookup_add"], ["proof (prove)\nusing this:\n  v |\\<in>| fmdom f\n  fmlookup (?m ++\\<^sub>f ?n) ?x =\n  (if ?x |\\<in>| fmdom ?n then fmlookup ?n ?x else fmlookup ?m ?x)\n\ngoal (1 subgoal):\n 1. fmlookup (g ++\\<^sub>f f) v = fmlookup f v", "by force"], ["proof (state)\nthis:\n  fmlookup (f ++ g) v = fmlookup f v\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma as_needed_asses_submap_exec_xii':\n  fixes f g v\n  assumes \"v \\<notin> fmdom' f\" \"v \\<in> fmdom' g\"\n  shows \"fmlookup (f ++ g) v = fmlookup g v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (f ++ g) v = fmlookup g v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmlookup (f ++ g) v = fmlookup g v", "have \"\\<not>(v |\\<in>| fmdom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v |\\<notin>| fmdom f", "using assms(1) fmdom'_notI fmdom_notD"], ["proof (prove)\nusing this:\n  v \\<notin> fmdom' f\n  fmlookup ?m ?x = None \\<Longrightarrow> ?x \\<notin> fmdom' ?m\n  ?x |\\<notin>| fmdom ?m \\<Longrightarrow> fmlookup ?m ?x = None\n\ngoal (1 subgoal):\n 1. v |\\<notin>| fmdom f", "by fastforce"], ["proof (state)\nthis:\n  v |\\<notin>| fmdom f\n\ngoal (1 subgoal):\n 1. fmlookup (f ++ g) v = fmlookup g v", "moreover"], ["proof (state)\nthis:\n  v |\\<notin>| fmdom f\n\ngoal (1 subgoal):\n 1. fmlookup (f ++ g) v = fmlookup g v", "have \"v |\\<in>| fmdom g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v |\\<in>| fmdom g", "using assms(2) fmdom'_notI fmdom_notD"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' g\n  fmlookup ?m ?x = None \\<Longrightarrow> ?x \\<notin> fmdom' ?m\n  ?x |\\<notin>| fmdom ?m \\<Longrightarrow> fmlookup ?m ?x = None\n\ngoal (1 subgoal):\n 1. v |\\<in>| fmdom g", "by metis"], ["proof (state)\nthis:\n  v |\\<in>| fmdom g\n\ngoal (1 subgoal):\n 1. fmlookup (f ++ g) v = fmlookup g v", "ultimately"], ["proof (chain)\npicking this:\n  v |\\<notin>| fmdom f\n  v |\\<in>| fmdom g", "show ?thesis"], ["proof (prove)\nusing this:\n  v |\\<notin>| fmdom f\n  v |\\<in>| fmdom g\n\ngoal (1 subgoal):\n 1. fmlookup (f ++ g) v = fmlookup g v", "unfolding fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  v |\\<notin>| fmdom f\n  v |\\<in>| fmdom g\n\ngoal (1 subgoal):\n 1. fmlookup (g ++\\<^sub>f f) v = fmlookup g v", "using fmlookup_add"], ["proof (prove)\nusing this:\n  v |\\<notin>| fmdom f\n  v |\\<in>| fmdom g\n  fmlookup (?m ++\\<^sub>f ?n) ?x =\n  (if ?x |\\<in>| fmdom ?n then fmlookup ?n ?x else fmlookup ?m ?x)\n\ngoal (1 subgoal):\n 1. fmlookup (g ++\\<^sub>f f) v = fmlookup g v", "by simp"], ["proof (state)\nthis:\n  fmlookup (f ++ g) v = fmlookup g v\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE showcase.\\<close>"], ["", "lemma as_needed_asses_submap_exec:\n  fixes s1 s2\n  assumes \"(s1 \\<subseteq>\\<^sub>f s2)\"\n    \"(\\<forall>a. ListMem a as \\<longrightarrow> (action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1))\"\n  shows \"(exec_plan s1 as \\<subseteq>\\<^sub>f exec_plan s2 as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s1 as \\<subseteq>\\<^sub>f exec_plan s2 as", "using assms"], ["proof (prove)\nusing this:\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n\ngoal (1 subgoal):\n 1. exec_plan s1 as \\<subseteq>\\<^sub>f exec_plan s2 as", "proof (induction as arbitrary: s1 s2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "case (Cons a as)\n    \\<comment> \\<open>Proof the premises of the induction hypothesis for 'state\\_succ s1 a' and 'state\\_succ s2 a'.\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   \\<forall>a.\n      ListMem a as \\<longrightarrow>\n      action_needed_asses a ?s2.0 \\<subseteq>\\<^sub>f\n      action_needed_asses a ?s1.0\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s1.0 as \\<subseteq>\\<^sub>f\n                    exec_plan ?s2.0 as\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     action_needed_asses aa s2 \\<subseteq>\\<^sub>f action_needed_asses aa s1\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   \\<forall>a.\n      ListMem a as \\<longrightarrow>\n      action_needed_asses a ?s2.0 \\<subseteq>\\<^sub>f\n      action_needed_asses a ?s1.0\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s1.0 as \\<subseteq>\\<^sub>f\n                    exec_plan ?s2.0 as\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     action_needed_asses aa s2 \\<subseteq>\\<^sub>f action_needed_asses aa s1\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   \\<forall>a.\n      ListMem a as \\<longrightarrow>\n      action_needed_asses a ?s2.0 \\<subseteq>\\<^sub>f\n      action_needed_asses a ?s1.0\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s1.0 as \\<subseteq>\\<^sub>f\n                    exec_plan ?s2.0 as\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     action_needed_asses aa s2 \\<subseteq>\\<^sub>f action_needed_asses aa s1", "have \"action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   \\<forall>a.\n      ListMem a as \\<longrightarrow>\n      action_needed_asses a ?s2.0 \\<subseteq>\\<^sub>f\n      action_needed_asses a ?s1.0\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s1.0 as \\<subseteq>\\<^sub>f\n                    exec_plan ?s2.0 as\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     action_needed_asses aa s2 \\<subseteq>\\<^sub>f action_needed_asses aa s1\n\ngoal (1 subgoal):\n 1. action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1", "using Cons.prems(2) elem"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   \\<forall>a.\n      ListMem a as \\<longrightarrow>\n      action_needed_asses a ?s2.0 \\<subseteq>\\<^sub>f\n      action_needed_asses a ?s1.0\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s1.0 as \\<subseteq>\\<^sub>f\n                    exec_plan ?s2.0 as\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     action_needed_asses aa s2 \\<subseteq>\\<^sub>f action_needed_asses aa s1\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     action_needed_asses aa s2 \\<subseteq>\\<^sub>f action_needed_asses aa s1\n  ListMem ?x (?x # ?xs)\n\ngoal (1 subgoal):\n 1. action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1", "by metis"], ["proof (state)\nthis:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1", "have \"state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\""], ["proof (prove)\nusing this:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "using Cons.prems(1) act_needed_asses_submap_succ_submap"], ["proof (prove)\nusing this:\n  action_needed_asses a s2 \\<subseteq>\\<^sub>f action_needed_asses a s1\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<lbrakk>action_needed_asses ?a ?s2.0 \\<subseteq>\\<^sub>f\n           action_needed_asses ?a ?s1.0;\n   ?s1.0 \\<subseteq>\\<^sub>f ?s2.0\\<rbrakk>\n  \\<Longrightarrow> state_succ ?s1.0 ?a \\<subseteq>\\<^sub>f\n                    state_succ ?s2.0 ?a\n\ngoal (1 subgoal):\n 1. state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a", "by blast"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "}"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "note 1 = this"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "moreover"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "{"], ["proof (state)\nthis:\n  state_succ s1 a \\<subseteq>\\<^sub>f state_succ s2 a\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "fix a'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "assume P: \"ListMem a' as\"\n      \\<comment> \\<open>Show the goal by rule 'as\\_needed\\_asses\\_submap\\_exec\\_ix'.\\<close>"], ["proof (state)\nthis:\n  ListMem a' as\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "let ?f=\"action_needed_asses a' (state_succ s2 a)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "let ?g=\"action_needed_asses a' (state_succ s1 a)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "fix v"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "assume P_1: \"v \\<in> fmdom' ?f\""], ["proof (state)\nthis:\n  v \\<in> fmdom' (action_needed_asses a' (state_succ s2 a))\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (action_needed_asses a' (state_succ s2 a))", "have \"fmlookup ?f v = fmlookup ?g v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a' (state_succ s2 a))\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n    fmlookup (action_needed_asses a' (state_succ s1 a)) v", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  v \\<in> fmdom'\n           (action_needed_asses a'\n             (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n\ngoal (1 subgoal):\n 1. fmlookup\n     (action_needed_asses a'\n       (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n     v =\n    fmlookup\n     (action_needed_asses a'\n       (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n     v", "text \\<open> Split cases on the if-then branches introduced by the definition of 'state\\_succ'.\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> fmdom'\n           (action_needed_asses a'\n             (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n\ngoal (1 subgoal):\n 1. fmlookup\n     (action_needed_asses a'\n       (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n     v =\n    fmlookup\n     (action_needed_asses a'\n       (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n     v", "proof (auto)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2));\n     fst a \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2));\n     fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' s1) v\n 3. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 4. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' s1) v", "assume P_1_1: \"v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2))\" \"fst a \\<subseteq>\\<^sub>f s2\"\n          \"fst a \\<subseteq>\\<^sub>f s1\""], ["proof (state)\nthis:\n  v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2))\n  fst a \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (4 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2));\n     fst a \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2));\n     fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' s1) v\n 3. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 4. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' s1) v", "have i: \"action_needed_asses a' s2 \\<subseteq>\\<^sub>f action_needed_asses a' s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_needed_asses a' s2 \\<subseteq>\\<^sub>f action_needed_asses a' s1", "using Cons.prems(2) P insert"], ["proof (prove)\nusing this:\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     action_needed_asses aa s2 \\<subseteq>\\<^sub>f action_needed_asses aa s1\n  ListMem a' as\n  ListMem ?x ?xs \\<Longrightarrow> ListMem ?x (?y # ?xs)\n\ngoal (1 subgoal):\n 1. action_needed_asses a' s2 \\<subseteq>\\<^sub>f action_needed_asses a' s1", "by fast"], ["proof (state)\nthis:\n  action_needed_asses a' s2 \\<subseteq>\\<^sub>f action_needed_asses a' s1\n\ngoal (4 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2));\n     fst a \\<subseteq>\\<^sub>f s2; fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2));\n     fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' s1) v\n 3. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 4. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' s1) v", "then"], ["proof (chain)\npicking this:\n  action_needed_asses a' s2 \\<subseteq>\\<^sub>f action_needed_asses a' s1", "show \"\n            fmlookup (action_needed_asses a' (snd a ++ s2)) v\n            = fmlookup (action_needed_asses a' (snd a ++ s1)) v\""], ["proof (prove)\nusing this:\n  action_needed_asses a' s2 \\<subseteq>\\<^sub>f action_needed_asses a' s1\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n    fmlookup (action_needed_asses a' (snd a ++ s1)) v", "proof (cases \"v \\<in> fmdom' ?g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>action_needed_asses a' s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a' s1;\n     v \\<in> fmdom' (action_needed_asses a' (state_succ s1 a))\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>action_needed_asses a' s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a' s1;\n     v \\<notin> fmdom' (action_needed_asses a' (state_succ s1 a))\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "case true: True"], ["proof (state)\nthis:\n  v \\<in> fmdom' (action_needed_asses a' (state_succ s1 a))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>action_needed_asses a' s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a' s1;\n     v \\<in> fmdom' (action_needed_asses a' (state_succ s1 a))\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>action_needed_asses a' s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a' s1;\n     v \\<notin> fmdom' (action_needed_asses a' (state_succ s1 a))\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (action_needed_asses a' (state_succ s1 a))", "have A:\n            \"v \\<in> fmdom' (fst a') \\<and> v \\<in> fmdom' (snd a ++ s1)\n                \\<and> fmlookup (fst a') v = fmlookup (snd a ++ s1) v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a' (state_succ s1 a))\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a') \\<and>\n    v \\<in> fmdom' (snd a ++ s1) \\<and>\n    fmlookup (fst a') v = fmlookup (snd a ++ s1) v", "using as_needed_asses_submap_exec_x[OF true]"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a' (state_succ s1 a))\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (state_succ s1 a) \\<and>\n  fmlookup (fst a') v = fmlookup (state_succ s1 a) v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a') \\<and>\n    v \\<in> fmdom' (snd a ++ s1) \\<and>\n    fmlookup (fst a') v = fmlookup (snd a ++ s1) v", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  v \\<in> fmdom'\n           (action_needed_asses a'\n             (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom'\n           (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1) \\<and>\n  fmlookup (fst a') v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1) v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a') \\<and>\n    v \\<in> fmdom' (snd a ++ s1) \\<and>\n    fmlookup (fst a') v = fmlookup (snd a ++ s1) v", "using P_1_1(3)"], ["proof (prove)\nusing this:\n  v \\<in> fmdom'\n           (action_needed_asses a'\n             (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom'\n           (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1) \\<and>\n  fmlookup (fst a') v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1) v\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a') \\<and>\n    v \\<in> fmdom' (snd a ++ s1) \\<and>\n    fmlookup (fst a') v = fmlookup (snd a ++ s1) v", "by simp"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s1) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s1) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>action_needed_asses a' s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a' s1;\n     v \\<in> fmdom' (action_needed_asses a' (state_succ s1 a))\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>action_needed_asses a' s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a' s1;\n     v \\<notin> fmdom' (action_needed_asses a' (state_succ s1 a))\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s1) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s1) v", "have B:\n            \"v \\<in> fmdom' (fst a') \\<and> v \\<in> fmdom' (snd a ++ s2)\n                \\<and> fmlookup (fst a') v = fmlookup (snd a ++ s2) v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s1) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s1) v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a') \\<and>\n    v \\<in> fmdom' (snd a ++ s2) \\<and>\n    fmlookup (fst a') v = fmlookup (snd a ++ s2) v", "using as_needed_asses_submap_exec_x[OF P_1]"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s1) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s1) v\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (state_succ s2 a) \\<and>\n  fmlookup (fst a') v = fmlookup (state_succ s2 a) v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a') \\<and>\n    v \\<in> fmdom' (snd a ++ s2) \\<and>\n    fmlookup (fst a') v = fmlookup (snd a ++ s2) v", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s1) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s1) v\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom'\n           (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2) \\<and>\n  fmlookup (fst a') v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2) v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a') \\<and>\n    v \\<in> fmdom' (snd a ++ s2) \\<and>\n    fmlookup (fst a') v = fmlookup (snd a ++ s2) v", "using P_1_1(2)"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s1) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s1) v\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom'\n           (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2) \\<and>\n  fmlookup (fst a') v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2) v\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a') \\<and>\n    v \\<in> fmdom' (snd a ++ s2) \\<and>\n    fmlookup (fst a') v = fmlookup (snd a ++ s2) v", "by simp"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s2) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s2) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>action_needed_asses a' s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a' s1;\n     v \\<in> fmdom' (action_needed_asses a' (state_succ s1 a))\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>action_needed_asses a' s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a' s1;\n     v \\<notin> fmdom' (action_needed_asses a' (state_succ s1 a))\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s2) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s2) v", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s2) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s2) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n    fmlookup (action_needed_asses a' (snd a ++ s1)) v", "proof (cases \"v \\<in> fmdom' (snd a)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "case True"], ["proof (state)\nthis:\n  v \\<in> fmdom' (snd a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (snd a)", "have I:\n              \"fmlookup (snd a ++ s2) v = fmlookup (snd a) v\"\n              \"fmlookup (snd a ++ s1) v = fmlookup (snd a) v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmlookup (snd a ++ s2) v = fmlookup (snd a) v &&&\n    fmlookup (snd a ++ s1) v = fmlookup (snd a) v", "using as_needed_asses_submap_exec_xii"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (snd a)\n  ?v \\<in> fmdom' ?f \\<Longrightarrow>\n  fmlookup (?f ++ ?g) ?v = fmlookup ?f ?v\n\ngoal (1 subgoal):\n 1. fmlookup (snd a ++ s2) v = fmlookup (snd a) v &&&\n    fmlookup (snd a ++ s1) v = fmlookup (snd a) v", "by fast+"], ["proof (state)\nthis:\n  fmlookup (snd a ++ s2) v = fmlookup (snd a) v\n  fmlookup (snd a ++ s1) v = fmlookup (snd a) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "moreover"], ["proof (state)\nthis:\n  fmlookup (snd a ++ s2) v = fmlookup (snd a) v\n  fmlookup (snd a ++ s1) v = fmlookup (snd a) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "{"], ["proof (state)\nthis:\n  fmlookup (snd a ++ s2) v = fmlookup (snd a) v\n  fmlookup (snd a ++ s1) v = fmlookup (snd a) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "have \"fmlookup ?f v = fmlookup (snd a ++ s2) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n    fmlookup (snd a ++ s2) v", "using as_needed_asses_submap_exec_iv[OF P_1]"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (state_succ s2 a) v \\<and>\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (fst a') v \\<and>\n  fmlookup (fst a') v = fmlookup (state_succ s2 a) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n    fmlookup (snd a ++ s2) v", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n   v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2)\n   v \\<and>\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n   v =\n  fmlookup (fst a') v \\<and>\n  fmlookup (fst a') v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2) v\n\ngoal (1 subgoal):\n 1. fmlookup\n     (action_needed_asses a'\n       (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n     v =\n    fmlookup (snd a ++ s2) v", "using P_1_1(2)"], ["proof (prove)\nusing this:\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n   v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2)\n   v \\<and>\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n   v =\n  fmlookup (fst a') v \\<and>\n  fmlookup (fst a') v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2) v\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. fmlookup\n     (action_needed_asses a'\n       (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n     v =\n    fmlookup (snd a ++ s2) v", "by presburger"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (snd a ++ s2) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (snd a ++ s2) v", "have \"fmlookup ?f v = fmlookup (snd a) v\""], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (snd a ++ s2) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n    fmlookup (snd a) v", "using I(1)"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (snd a ++ s2) v\n  fmlookup (snd a ++ s2) v = fmlookup (snd a) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n    fmlookup (snd a) v", "by argo"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v = fmlookup (snd a) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v = fmlookup (snd a) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "moreover"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v = fmlookup (snd a) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "{"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v = fmlookup (snd a) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "have \"fmlookup ?g v = fmlookup (snd a ++ s1) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n    fmlookup (snd a ++ s1) v", "using as_needed_asses_submap_exec_iv[OF true]"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (state_succ s1 a) v \\<and>\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (fst a') v \\<and>\n  fmlookup (fst a') v = fmlookup (state_succ s1 a) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n    fmlookup (snd a ++ s1) v", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n   v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1)\n   v \\<and>\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n   v =\n  fmlookup (fst a') v \\<and>\n  fmlookup (fst a') v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1) v\n\ngoal (1 subgoal):\n 1. fmlookup\n     (action_needed_asses a'\n       (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n     v =\n    fmlookup (snd a ++ s1) v", "using P_1_1(3)"], ["proof (prove)\nusing this:\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n   v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1)\n   v \\<and>\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n   v =\n  fmlookup (fst a') v \\<and>\n  fmlookup (fst a') v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1) v\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. fmlookup\n     (action_needed_asses a'\n       (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n     v =\n    fmlookup (snd a ++ s1) v", "by presburger"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (snd a ++ s1) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (snd a ++ s1) v", "have \"fmlookup ?g v = fmlookup (snd a) v\""], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (snd a ++ s1) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n    fmlookup (snd a) v", "using I(2)"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (snd a ++ s1) v\n  fmlookup (snd a ++ s1) v = fmlookup (snd a) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n    fmlookup (snd a) v", "by argo"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v = fmlookup (snd a) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v = fmlookup (snd a) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "ultimately"], ["proof (chain)\npicking this:\n  fmlookup (snd a ++ s2) v = fmlookup (snd a) v\n  fmlookup (snd a ++ s1) v = fmlookup (snd a) v\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v = fmlookup (snd a) v\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v = fmlookup (snd a) v", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s2) v = fmlookup (snd a) v\n  fmlookup (snd a ++ s1) v = fmlookup (snd a) v\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v = fmlookup (snd a) v\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v = fmlookup (snd a) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n    fmlookup (action_needed_asses a' (snd a ++ s1)) v", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s2) v = fmlookup (snd a) v\n  fmlookup (snd a ++ s1) v = fmlookup (snd a) v\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n   v =\n  fmlookup (snd a) v\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n   v =\n  fmlookup (snd a) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n    fmlookup (action_needed_asses a' (snd a ++ s1)) v", "using P_1_1(2, 3)"], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s2) v = fmlookup (snd a) v\n  fmlookup (snd a ++ s1) v = fmlookup (snd a) v\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n   v =\n  fmlookup (snd a) v\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n   v =\n  fmlookup (snd a) v\n  fst a \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n    fmlookup (action_needed_asses a' (snd a ++ s1)) v", "by presburger"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n  fmlookup (action_needed_asses a' (snd a ++ s1)) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "case False"], ["proof (state)\nthis:\n  v \\<notin> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  v \\<notin> fmdom' (snd a)", "have I: \"v \\<in> fmdom' s1\" \"v \\<in> fmdom' s2\""], ["proof (prove)\nusing this:\n  v \\<notin> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' s1 &&& v \\<in> fmdom' s2", "using A B"], ["proof (prove)\nusing this:\n  v \\<notin> fmdom' (snd a)\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s1) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s1) v\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s2) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s2) v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' s1 &&& v \\<in> fmdom' s2", "unfolding fmap_add_ltr_def fmdom'_add"], ["proof (prove)\nusing this:\n  v \\<notin> fmdom' (snd a)\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' s1 \\<union> fmdom' (snd a) \\<and>\n  fmlookup (fst a') v = fmlookup (s1 ++\\<^sub>f snd a) v\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' s2 \\<union> fmdom' (snd a) \\<and>\n  fmlookup (fst a') v = fmlookup (s2 ++\\<^sub>f snd a) v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' s1 &&& v \\<in> fmdom' s2", "by blast+"], ["proof (state)\nthis:\n  v \\<in> fmdom' s1\n  v \\<in> fmdom' s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "{"], ["proof (state)\nthis:\n  v \\<in> fmdom' s1\n  v \\<in> fmdom' s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "have \"fmlookup ?g v = fmlookup (snd a ++ s1) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n    fmlookup (snd a ++ s1) v", "using as_needed_asses_submap_exec_iv[OF true]"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (state_succ s1 a) v \\<and>\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (fst a') v \\<and>\n  fmlookup (fst a') v = fmlookup (state_succ s1 a) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n    fmlookup (snd a ++ s1) v", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n   v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1)\n   v \\<and>\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n   v =\n  fmlookup (fst a') v \\<and>\n  fmlookup (fst a') v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1) v\n\ngoal (1 subgoal):\n 1. fmlookup\n     (action_needed_asses a'\n       (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n     v =\n    fmlookup (snd a ++ s1) v", "using P_1_1(3)"], ["proof (prove)\nusing this:\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n   v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1)\n   v \\<and>\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n   v =\n  fmlookup (fst a') v \\<and>\n  fmlookup (fst a') v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1) v\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. fmlookup\n     (action_needed_asses a'\n       (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n     v =\n    fmlookup (snd a ++ s1) v", "by presburger"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (snd a ++ s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (snd a ++ s1) v", "have \"fmlookup ?g v = fmlookup s1 v\""], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (snd a ++ s1) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s1 a)) v = fmlookup s1 v", "using as_needed_asses_submap_exec_xii'[OF False I(1)]"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (snd a ++ s1) v\n  fmlookup (snd a ++ s1) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s1 a)) v = fmlookup s1 v", "by simp"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "moreover"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "{"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "have \"fmlookup (snd a ++ s1) v = fmlookup s1 v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (snd a ++ s1) v = fmlookup s1 v", "using as_needed_asses_submap_exec_xii'[OF False I(1)]"], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s1) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. fmlookup (snd a ++ s1) v = fmlookup s1 v", "by simp"], ["proof (state)\nthis:\n  fmlookup (snd a ++ s1) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "moreover"], ["proof (state)\nthis:\n  fmlookup (snd a ++ s1) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "from \\<open>fmlookup (snd a ++ s1) v = fmlookup s1 v\\<close>"], ["proof (chain)\npicking this:\n  fmlookup (snd a ++ s1) v = fmlookup s1 v", "have \"fmlookup (fst a') v = fmlookup s1 v\""], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s1) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. fmlookup (fst a') v = fmlookup s1 v", "using A(1)"], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s1) v = fmlookup s1 v\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s1) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s1) v\n\ngoal (1 subgoal):\n 1. fmlookup (fst a') v = fmlookup s1 v", "by argo"], ["proof (state)\nthis:\n  fmlookup (fst a') v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "ultimately"], ["proof (chain)\npicking this:\n  fmlookup (snd a ++ s1) v = fmlookup s1 v\n  fmlookup (fst a') v = fmlookup s1 v", "have \"fmlookup (action_needed_asses a' s1) v = fmlookup s1 v\""], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s1) v = fmlookup s1 v\n  fmlookup (fst a') v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' s1) v = fmlookup s1 v", "using A(1) I(1)"], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s1) v = fmlookup s1 v\n  fmlookup (fst a') v = fmlookup s1 v\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s1) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s1) v\n  v \\<in> fmdom' s1\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' s1) v = fmlookup s1 v", "unfolding action_needed_asses_def action_needed_vars_def\n                    fmlookup_restrict_set"], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s1) v = fmlookup s1 v\n  fmlookup (fst a') v = fmlookup s1 v\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s1) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s1) v\n  v \\<in> fmdom' s1\n\ngoal (1 subgoal):\n 1. (if v \\<in> {v \\<in> fmdom' s1.\n                 v \\<in> fmdom' (fst a') \\<and>\n                 fmlookup (fst a') v = fmlookup s1 v}\n     then fmlookup s1 v else None) =\n    fmlookup s1 v", "by simp"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' s1) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' s1) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "ultimately"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v = fmlookup s1 v\n  fmlookup (action_needed_asses a' s1) v = fmlookup s1 v", "have \"fmlookup ?g v = fmlookup (action_needed_asses a' s1) v\""], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v = fmlookup s1 v\n  fmlookup (action_needed_asses a' s1) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n    fmlookup (action_needed_asses a' s1) v", "by argo"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "note II = this"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "{"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "have \"fmlookup ?f v = fmlookup (snd a ++ s2) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n    fmlookup (snd a ++ s2) v", "using as_needed_asses_submap_exec_iv[OF P_1]"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (state_succ s2 a) v \\<and>\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (fst a') v \\<and>\n  fmlookup (fst a') v = fmlookup (state_succ s2 a) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n    fmlookup (snd a ++ s2) v", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n   v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2)\n   v \\<and>\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n   v =\n  fmlookup (fst a') v \\<and>\n  fmlookup (fst a') v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2) v\n\ngoal (1 subgoal):\n 1. fmlookup\n     (action_needed_asses a'\n       (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n     v =\n    fmlookup (snd a ++ s2) v", "using P_1_1(2)"], ["proof (prove)\nusing this:\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n   v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2)\n   v \\<and>\n  fmlookup\n   (action_needed_asses a'\n     (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n   v =\n  fmlookup (fst a') v \\<and>\n  fmlookup (fst a') v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2) v\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. fmlookup\n     (action_needed_asses a'\n       (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2))\n     v =\n    fmlookup (snd a ++ s2) v", "by presburger"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (snd a ++ s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "moreover"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (snd a ++ s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "from \\<open>fmlookup ?f v = fmlookup (snd a ++ s2) v\\<close>"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (snd a ++ s2) v", "have \\<alpha>: \"fmlookup ?f v = fmlookup s2 v\""], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (snd a ++ s2) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v = fmlookup s2 v", "using as_needed_asses_submap_exec_xii'[OF False I(2)]"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (snd a ++ s2) v\n  fmlookup (snd a ++ s2) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v = fmlookup s2 v", "by argo"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "ultimately"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (snd a ++ s2) v\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v = fmlookup s2 v", "have \"fmlookup (snd a ++ s2) v = fmlookup s2 v\""], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (snd a ++ s2) v\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. fmlookup (snd a ++ s2) v = fmlookup s2 v", "by argo"], ["proof (state)\nthis:\n  fmlookup (snd a ++ s2) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "moreover"], ["proof (state)\nthis:\n  fmlookup (snd a ++ s2) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "{"], ["proof (state)\nthis:\n  fmlookup (snd a ++ s2) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "from \\<open>fmlookup (snd a ++ s2) v = fmlookup s2 v\\<close>"], ["proof (chain)\npicking this:\n  fmlookup (snd a ++ s2) v = fmlookup s2 v", "have \"fmlookup (fst a') v = fmlookup s2 v\""], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s2) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. fmlookup (fst a') v = fmlookup s2 v", "using B(1)"], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s2) v = fmlookup s2 v\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s2) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s2) v\n\ngoal (1 subgoal):\n 1. fmlookup (fst a') v = fmlookup s2 v", "by argo"], ["proof (state)\nthis:\n  fmlookup (fst a') v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  fmlookup (fst a') v = fmlookup s2 v", "have \"fmlookup (action_needed_asses a' s2) v = fmlookup s2 v\""], ["proof (prove)\nusing this:\n  fmlookup (fst a') v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' s2) v = fmlookup s2 v", "using B(1) I(2)"], ["proof (prove)\nusing this:\n  fmlookup (fst a') v = fmlookup s2 v\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s2) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s2) v\n  v \\<in> fmdom' s2\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' s2) v = fmlookup s2 v", "unfolding action_needed_asses_def action_needed_vars_def\n                    fmlookup_restrict_set"], ["proof (prove)\nusing this:\n  fmlookup (fst a') v = fmlookup s2 v\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s2) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s2) v\n  v \\<in> fmdom' s2\n\ngoal (1 subgoal):\n 1. (if v \\<in> {v \\<in> fmdom' s2.\n                 v \\<in> fmdom' (fst a') \\<and>\n                 fmlookup (fst a') v = fmlookup s2 v}\n     then fmlookup s2 v else None) =\n    fmlookup s2 v", "by simp"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' s2) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' s2) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "ultimately"], ["proof (chain)\npicking this:\n  fmlookup (snd a ++ s2) v = fmlookup s2 v\n  fmlookup (action_needed_asses a' s2) v = fmlookup s2 v", "have \"fmlookup ?f v = fmlookup (action_needed_asses a' s2) v\""], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s2) v = fmlookup s2 v\n  fmlookup (action_needed_asses a' s2) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n    fmlookup (action_needed_asses a' s2) v", "using \\<alpha>"], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s2) v = fmlookup s2 v\n  fmlookup (action_needed_asses a' s2) v = fmlookup s2 v\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n    fmlookup (action_needed_asses a' s2) v", "by argo"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "note III = this"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "{"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "have \"v \\<in> fmdom' (action_needed_asses a' s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a' s2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a' s2)", "have \"fmlookup (fst a') v = fmlookup s1 v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (fst a') v = fmlookup s1 v", "by (simp add: A False I(1) as_needed_asses_submap_exec_xii')"], ["proof (state)\nthis:\n  fmlookup (fst a') v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a' s2)", "then"], ["proof (chain)\npicking this:\n  fmlookup (fst a') v = fmlookup s1 v", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (fst a') v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a' s2)", "by (simp add: A Cons.prems(1) I(1, 2)\n                      as_needed_asses_submap_exec_ii as_needed_asses_submap_exec_iii)"], ["proof (state)\nthis:\n  v \\<in> fmdom' (action_needed_asses a' s2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<in> fmdom' (action_needed_asses a' s2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (action_needed_asses a' s2)", "have \"\n                      fmlookup (action_needed_asses a' s2) v\n                      = fmlookup (action_needed_asses a' s1) v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a' s2)\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' s2) v =\n    fmlookup (action_needed_asses a' s1) v", "using i as_needed_asses_submap_exec_ix[of \"action_needed_asses a' s2\"\n                    \"action_needed_asses a' s1\"]"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a' s2)\n  action_needed_asses a' s2 \\<subseteq>\\<^sub>f action_needed_asses a' s1\n  (action_needed_asses a' s2 \\<subseteq>\\<^sub>f\n   action_needed_asses a' s1) =\n  (\\<forall>v\\<in>fmdom' (action_needed_asses a' s2).\n      fmlookup (action_needed_asses a' s2) v =\n      fmlookup (action_needed_asses a' s1) v)\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' s2) v =\n    fmlookup (action_needed_asses a' s1) v", "by blast"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' s2) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' s2) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "note IV = this"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' s2) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "{"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' s2) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "have \"fmlookup ?f v = fmlookup (action_needed_asses a' s2) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n    fmlookup (action_needed_asses a' s2) v", "using III"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s2) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n    fmlookup (action_needed_asses a' s2) v", "by simp"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "also"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "have \"\\<dots> = fmlookup (action_needed_asses a' s1) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' s2) v =\n    fmlookup (action_needed_asses a' s1) v", "using IV"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' s2) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' s2) v =\n    fmlookup (action_needed_asses a' s1) v", "by simp"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' s2) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "finally"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s1) v", "have \"\\<dots> = fmlookup ?g v\""], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' s1) v =\n    fmlookup (action_needed_asses a' (state_succ s1 a)) v", "using II"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s1) v\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' s1) v =\n    fmlookup (action_needed_asses a' (state_succ s1 a)) v", "by simp"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' s1) v =\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' s1) v =\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a') \\<and>\n             v \\<in> fmdom' (snd a ++ s2) \\<and>\n             fmlookup (fst a') v = fmlookup (snd a ++ s2) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a' s1) v =\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' s1) v =\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n    fmlookup (action_needed_asses a' (snd a ++ s1)) v", "unfolding action_needed_asses_def action_needed_vars_def state_succ_def"], ["proof (prove)\nusing this:\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a') \\<and> fmlookup (fst a') v = fmlookup s1 v}\n     s1)\n   v =\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom'\n               (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1).\n      v \\<in> fmdom' (fst a') \\<and>\n      fmlookup (fst a') v =\n      fmlookup (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1) v}\n     (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n   v\n\ngoal (1 subgoal):\n 1. fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' (snd a ++ s2).\n        v \\<in> fmdom' (fst a') \\<and>\n        fmlookup (fst a') v = fmlookup (snd a ++ s2) v}\n       (snd a ++ s2))\n     v =\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' (snd a ++ s1).\n        v \\<in> fmdom' (fst a') \\<and>\n        fmlookup (fst a') v = fmlookup (snd a ++ s1) v}\n       (snd a ++ s1))\n     v", "using P_1_1 A B"], ["proof (prove)\nusing this:\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom' s1.\n      v \\<in> fmdom' (fst a') \\<and> fmlookup (fst a') v = fmlookup s1 v}\n     s1)\n   v =\n  fmlookup\n   (fmrestrict_set\n     {v \\<in> fmdom'\n               (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1).\n      v \\<in> fmdom' (fst a') \\<and>\n      fmlookup (fst a') v =\n      fmlookup (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1) v}\n     (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1))\n   v\n  v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2))\n  fst a \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s1) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s1) v\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s2) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s2) v\n\ngoal (1 subgoal):\n 1. fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' (snd a ++ s2).\n        v \\<in> fmdom' (fst a') \\<and>\n        fmlookup (fst a') v = fmlookup (snd a ++ s2) v}\n       (snd a ++ s2))\n     v =\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' (snd a ++ s1).\n        v \\<in> fmdom' (fst a') \\<and>\n        fmlookup (fst a') v = fmlookup (snd a ++ s1) v}\n       (snd a ++ s1))\n     v", "by simp"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n  fmlookup (action_needed_asses a' (snd a ++ s1)) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n  fmlookup (action_needed_asses a' (snd a ++ s1)) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a' s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a' s1;\n     v \\<notin> fmdom' (action_needed_asses a' (state_succ s1 a))\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a' s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a' s1;\n     v \\<notin> fmdom' (action_needed_asses a' (state_succ s1 a))\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "case false: False"], ["proof (state)\nthis:\n  v \\<notin> fmdom' (action_needed_asses a' (state_succ s1 a))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a' s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a' s1;\n     v \\<notin> fmdom' (action_needed_asses a' (state_succ s1 a))\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "have A:\n            \"v \\<in> fmdom' (fst a') \\<and> v \\<in> fmdom' (snd a ++ s2)\n                \\<and> fmlookup (fst a') v = fmlookup (snd a ++ s2) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a') \\<and>\n    v \\<in> fmdom' (snd a ++ s2) \\<and>\n    fmlookup (fst a') v = fmlookup (snd a ++ s2) v", "using as_needed_asses_submap_exec_x[OF P_1]"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (state_succ s2 a) \\<and>\n  fmlookup (fst a') v = fmlookup (state_succ s2 a) v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a') \\<and>\n    v \\<in> fmdom' (snd a ++ s2) \\<and>\n    fmlookup (fst a') v = fmlookup (snd a ++ s2) v", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom'\n           (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2) \\<and>\n  fmlookup (fst a') v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2) v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a') \\<and>\n    v \\<in> fmdom' (snd a ++ s2) \\<and>\n    fmlookup (fst a') v = fmlookup (snd a ++ s2) v", "using P_1_1(2)"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom'\n           (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2) \\<and>\n  fmlookup (fst a') v =\n  fmlookup (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2) v\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a') \\<and>\n    v \\<in> fmdom' (snd a ++ s2) \\<and>\n    fmlookup (fst a') v = fmlookup (snd a ++ s2) v", "by simp"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s2) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a' s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a' s1;\n     v \\<notin> fmdom' (action_needed_asses a' (state_succ s1 a))\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "from false"], ["proof (chain)\npicking this:\n  v \\<notin> fmdom' (action_needed_asses a' (state_succ s1 a))", "have B:\n            \"\\<not>(v \\<in> fmdom' (snd a ++ s1)) \\<or> \\<not>(fmlookup (fst a') v = fmlookup (snd a ++ s1) v)\""], ["proof (prove)\nusing this:\n  v \\<notin> fmdom' (action_needed_asses a' (state_succ s1 a))\n\ngoal (1 subgoal):\n 1. v \\<notin> fmdom' (snd a ++ s1) \\<or>\n    fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v", "by (simp add: A P_1_1(3) as_needed_asses_submap_exec_iii state_succ_def)"], ["proof (state)\nthis:\n  v \\<notin> fmdom' (snd a ++ s1) \\<or>\n  fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>action_needed_asses a' s2 \\<subseteq>\\<^sub>f\n             action_needed_asses a' s1;\n     v \\<notin> fmdom' (action_needed_asses a' (state_succ s1 a))\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  v \\<notin> fmdom' (snd a ++ s1) \\<or>\n  fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<notin> fmdom' (snd a ++ s1) \\<or>\n  fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n    fmlookup (action_needed_asses a' (snd a ++ s1)) v", "proof (cases \"v \\<in> fmdom' (snd a)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "case True"], ["proof (state)\nthis:\n  v \\<in> fmdom' (snd a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (snd a)", "have I: \"v \\<in> fmdom' (snd a ++ s1)\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (snd a ++ s1)", "unfolding fmap_add_ltr_def fmdom'_add"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' s1 \\<union> fmdom' (snd a)", "by simp"], ["proof (state)\nthis:\n  v \\<in> fmdom' (snd a ++ s1)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "{"], ["proof (state)\nthis:\n  v \\<in> fmdom' (snd a ++ s1)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "from True"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (snd a)", "have\n                \"fmlookup (snd a ++ s2) v = fmlookup (snd a) v\"\n                \"fmlookup (snd a ++ s1) v = fmlookup (snd a) v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmlookup (snd a ++ s2) v = fmlookup (snd a) v &&&\n    fmlookup (snd a ++ s1) v = fmlookup (snd a) v", "using as_needed_asses_submap_exec_xii"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (snd a)\n  ?v \\<in> fmdom' ?f \\<Longrightarrow>\n  fmlookup (?f ++ ?g) ?v = fmlookup ?f ?v\n\ngoal (1 subgoal):\n 1. fmlookup (snd a ++ s2) v = fmlookup (snd a) v &&&\n    fmlookup (snd a ++ s1) v = fmlookup (snd a) v", "by fast+"], ["proof (state)\nthis:\n  fmlookup (snd a ++ s2) v = fmlookup (snd a) v\n  fmlookup (snd a ++ s1) v = fmlookup (snd a) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  fmlookup (snd a ++ s2) v = fmlookup (snd a) v\n  fmlookup (snd a ++ s1) v = fmlookup (snd a) v", "have \"fmlookup (snd a ++ s1) v = fmlookup (snd a ++ s2) v\""], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s2) v = fmlookup (snd a) v\n  fmlookup (snd a ++ s1) v = fmlookup (snd a) v\n\ngoal (1 subgoal):\n 1. fmlookup (snd a ++ s1) v = fmlookup (snd a ++ s2) v", "by auto"], ["proof (state)\nthis:\n  fmlookup (snd a ++ s1) v = fmlookup (snd a ++ s2) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "also"], ["proof (state)\nthis:\n  fmlookup (snd a ++ s1) v = fmlookup (snd a ++ s2) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "have \" \\<dots> = fmlookup (fst a') v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (snd a ++ s2) v = fmlookup (fst a') v", "using A"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s2) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s2) v\n\ngoal (1 subgoal):\n 1. fmlookup (snd a ++ s2) v = fmlookup (fst a') v", "by simp"], ["proof (state)\nthis:\n  fmlookup (snd a ++ s2) v = fmlookup (fst a') v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "finally"], ["proof (chain)\npicking this:\n  fmlookup (snd a ++ s1) v = fmlookup (fst a') v", "have \"fmlookup (snd a ++ s1) v = fmlookup (fst a') v\""], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s1) v = fmlookup (fst a') v\n\ngoal (1 subgoal):\n 1. fmlookup (snd a ++ s1) v = fmlookup (fst a') v", "by simp"], ["proof (state)\nthis:\n  fmlookup (snd a ++ s1) v = fmlookup (fst a') v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "}"], ["proof (state)\nthis:\n  fmlookup (snd a ++ s1) v = fmlookup (fst a') v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<in> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  fmlookup (snd a ++ s1) v = fmlookup (fst a') v", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s1) v = fmlookup (fst a') v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n    fmlookup (action_needed_asses a' (snd a ++ s1)) v", "using B I"], ["proof (prove)\nusing this:\n  fmlookup (snd a ++ s1) v = fmlookup (fst a') v\n  v \\<notin> fmdom' (snd a ++ s1) \\<or>\n  fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v\n  v \\<in> fmdom' (snd a ++ s1)\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n    fmlookup (action_needed_asses a' (snd a ++ s1)) v", "by presburger"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n  fmlookup (action_needed_asses a' (snd a ++ s1)) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "case False"], ["proof (state)\nthis:\n  v \\<notin> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  v \\<notin> fmdom' (snd a)", "have I: \"v \\<in> fmdom' s2\""], ["proof (prove)\nusing this:\n  v \\<notin> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' s2", "using A"], ["proof (prove)\nusing this:\n  v \\<notin> fmdom' (snd a)\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' (snd a ++ s2) \\<and>\n  fmlookup (fst a') v = fmlookup (snd a ++ s2) v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' s2", "unfolding fmap_add_ltr_def fmdom'_add"], ["proof (prove)\nusing this:\n  v \\<notin> fmdom' (snd a)\n  v \\<in> fmdom' (fst a') \\<and>\n  v \\<in> fmdom' s2 \\<union> fmdom' (snd a) \\<and>\n  fmlookup (fst a') v = fmlookup (s2 ++\\<^sub>f snd a) v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' s2", "by blast"], ["proof (state)\nthis:\n  v \\<in> fmdom' s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "{"], ["proof (state)\nthis:\n  v \\<in> fmdom' s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "from P_1"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (action_needed_asses a' (state_succ s2 a))", "have \"fmlookup ?f v \\<noteq> None\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a' (state_succ s2 a))\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v \\<noteq> None", "by (meson fmdom'_notI)"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "moreover"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "from false"], ["proof (chain)\npicking this:\n  v \\<notin> fmdom' (action_needed_asses a' (state_succ s1 a))", "have \"fmlookup ?g v = None\""], ["proof (prove)\nusing this:\n  v \\<notin> fmdom' (action_needed_asses a' (state_succ s1 a))\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s1 a)) v = None", "by (simp add: fmdom'_notD)"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v = None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "ultimately"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v \\<noteq> None\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v = None", "have \"fmlookup ?f v \\<noteq> fmlookup ?g v\""], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v \\<noteq> None\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v = None\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v \\<noteq>\n    fmlookup (action_needed_asses a' (state_succ s1 a)) v", "by simp"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v \\<noteq>\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v \\<noteq>\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "moreover"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v \\<noteq>\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "{"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v \\<noteq>\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "{"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v \\<noteq>\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "from P_1_1(2)"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s2", "have \"state_succ s2 a = snd a ++ s2\""], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. state_succ s2 a = snd a ++ s2", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s2\n\ngoal (1 subgoal):\n 1. (if fst a \\<subseteq>\\<^sub>f s2 then snd a ++ s2 else s2) = snd a ++ s2", "by simp"], ["proof (state)\nthis:\n  state_succ s2 a = snd a ++ s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "moreover"], ["proof (state)\nthis:\n  state_succ s2 a = snd a ++ s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "from \\<open>state_succ s2 a = snd a ++ s2\\<close>"], ["proof (chain)\npicking this:\n  state_succ s2 a = snd a ++ s2", "have\n                  \"fmlookup (state_succ s2 a) v = fmlookup s2 v\""], ["proof (prove)\nusing this:\n  state_succ s2 a = snd a ++ s2\n\ngoal (1 subgoal):\n 1. fmlookup (state_succ s2 a) v = fmlookup s2 v", "using as_needed_asses_submap_exec_xii'[OF False I]"], ["proof (prove)\nusing this:\n  state_succ s2 a = snd a ++ s2\n  fmlookup (snd a ++ s2) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. fmlookup (state_succ s2 a) v = fmlookup s2 v", "by simp"], ["proof (state)\nthis:\n  fmlookup (state_succ s2 a) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "ultimately"], ["proof (chain)\npicking this:\n  state_succ s2 a = snd a ++ s2\n  fmlookup (state_succ s2 a) v = fmlookup s2 v", "have \"fmlookup ?f v = fmlookup (action_needed_asses a' s2) v\""], ["proof (prove)\nusing this:\n  state_succ s2 a = snd a ++ s2\n  fmlookup (state_succ s2 a) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n    fmlookup (action_needed_asses a' s2) v", "unfolding action_needed_asses_def action_needed_vars_def"], ["proof (prove)\nusing this:\n  state_succ s2 a = snd a ++ s2\n  fmlookup (state_succ s2 a) v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' (state_succ s2 a).\n        v \\<in> fmdom' (fst a') \\<and>\n        fmlookup (fst a') v = fmlookup (state_succ s2 a) v}\n       (state_succ s2 a))\n     v =\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s2.\n        v \\<in> fmdom' (fst a') \\<and> fmlookup (fst a') v = fmlookup s2 v}\n       s2)\n     v", "by (simp add: A I)"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "note I = this"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "moreover"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "{"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s2) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "from P_1_1(3)"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s1", "have \"state_succ s1 a = snd a ++ s1\""], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. state_succ s1 a = snd a ++ s1", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. (if fst a \\<subseteq>\\<^sub>f s1 then snd a ++ s1 else s1) = snd a ++ s1", "by simp"], ["proof (state)\nthis:\n  state_succ s1 a = snd a ++ s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "moreover"], ["proof (state)\nthis:\n  state_succ s1 a = snd a ++ s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "from \\<open>state_succ s1 a = snd a ++ s1\\<close> False"], ["proof (chain)\npicking this:\n  state_succ s1 a = snd a ++ s1\n  v \\<notin> fmdom' (snd a)", "have \"fmlookup (state_succ s1 a) v = fmlookup s1 v\""], ["proof (prove)\nusing this:\n  state_succ s1 a = snd a ++ s1\n  v \\<notin> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmlookup (state_succ s1 a) v = fmlookup s1 v", "unfolding fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  state_succ s1 a = s1 ++\\<^sub>f snd a\n  v \\<notin> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmlookup (state_succ s1 a) v = fmlookup s1 v", "using fmlookup_add"], ["proof (prove)\nusing this:\n  state_succ s1 a = s1 ++\\<^sub>f snd a\n  v \\<notin> fmdom' (snd a)\n  fmlookup (?m ++\\<^sub>f ?n) ?x =\n  (if ?x |\\<in>| fmdom ?n then fmlookup ?n ?x else fmlookup ?m ?x)\n\ngoal (1 subgoal):\n 1. fmlookup (state_succ s1 a) v = fmlookup s1 v", "by (simp add: fmdom'_alt_def fmember.rep_eq)"], ["proof (state)\nthis:\n  fmlookup (state_succ s1 a) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "ultimately"], ["proof (chain)\npicking this:\n  state_succ s1 a = snd a ++ s1\n  fmlookup (state_succ s1 a) v = fmlookup s1 v", "have \"fmlookup ?g v = fmlookup (action_needed_asses a' s1) v\""], ["proof (prove)\nusing this:\n  state_succ s1 a = snd a ++ s1\n  fmlookup (state_succ s1 a) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n    fmlookup (action_needed_asses a' s1) v", "unfolding action_needed_asses_def action_needed_vars_def"], ["proof (prove)\nusing this:\n  state_succ s1 a = snd a ++ s1\n  fmlookup (state_succ s1 a) v = fmlookup s1 v\n\ngoal (1 subgoal):\n 1. fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' (state_succ s1 a).\n        v \\<in> fmdom' (fst a') \\<and>\n        fmlookup (fst a') v = fmlookup (state_succ s1 a) v}\n       (state_succ s1 a))\n     v =\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s1.\n        v \\<in> fmdom' (fst a') \\<and> fmlookup (fst a') v = fmlookup s1 v}\n       s1)\n     v", "using FDOM_state_succ_subset"], ["proof (prove)\nusing this:\n  state_succ s1 a = snd a ++ s1\n  fmlookup (state_succ s1 a) v = fmlookup s1 v\n  fmdom' (state_succ ?s ?a) \\<subseteq> fmdom' ?s \\<union> fmdom' (snd ?a)\n\ngoal (1 subgoal):\n 1. fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' (state_succ s1 a).\n        v \\<in> fmdom' (fst a') \\<and>\n        fmlookup (fst a') v = fmlookup (state_succ s1 a) v}\n       (state_succ s1 a))\n     v =\n    fmlookup\n     (fmrestrict_set\n       {v \\<in> fmdom' s1.\n        v \\<in> fmdom' (fst a') \\<and> fmlookup (fst a') v = fmlookup s1 v}\n       s1)\n     v", "by auto"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "moreover"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "{"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "have \"v \\<in> fmdom' (action_needed_asses a' s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a' s2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a' s2)", "have \"v \\<in> fmdom' s2 \\<union> fmdom' (snd a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> fmdom' s2 \\<union> fmdom' (snd a)", "by (metis (no_types) A FDOM_state_succ_subset P_1_1(2) state_succ_def subsetCE)"], ["proof (state)\nthis:\n  v \\<in> fmdom' s2 \\<union> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a' s2)", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' s2 \\<union> fmdom' (snd a)", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' s2 \\<union> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (action_needed_asses a' s2)", "by (simp add: A False as_needed_asses_submap_exec_iii as_needed_asses_submap_exec_xii')"], ["proof (state)\nthis:\n  v \\<in> fmdom' (action_needed_asses a' s2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<in> fmdom' (action_needed_asses a' s2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (action_needed_asses a' s2)", "have \"\n                      fmlookup (action_needed_asses a' s2) v\n                      = fmlookup (action_needed_asses a' s1) v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a' s2)\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' s2) v =\n    fmlookup (action_needed_asses a' s1) v", "using i as_needed_asses_submap_exec_ix[of \"action_needed_asses a' s2\"\n                      \"action_needed_asses a' s1\"]"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a' s2)\n  action_needed_asses a' s2 \\<subseteq>\\<^sub>f action_needed_asses a' s1\n  (action_needed_asses a' s2 \\<subseteq>\\<^sub>f\n   action_needed_asses a' s1) =\n  (\\<forall>v\\<in>fmdom' (action_needed_asses a' s2).\n      fmlookup (action_needed_asses a' s2) v =\n      fmlookup (action_needed_asses a' s1) v)\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' s2) v =\n    fmlookup (action_needed_asses a' s1) v", "by blast"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' s2) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' s2) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "ultimately"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s2) v\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (action_needed_asses a' s1) v\n  fmlookup (action_needed_asses a' s2) v =\n  fmlookup (action_needed_asses a' s1) v", "have \"fmlookup ?f v = fmlookup ?g v\""], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' s2) v\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v =\n  fmlookup (action_needed_asses a' s1) v\n  fmlookup (action_needed_asses a' s2) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n    fmlookup (action_needed_asses a' (state_succ s1 a)) v", "by simp"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "}"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> fmdom' (snd a ++ s1) \\<or>\n             fmlookup (fst a') v \\<noteq> fmlookup (snd a ++ s1) v;\n     v \\<notin> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v", "ultimately"], ["proof (chain)\npicking this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v \\<noteq>\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v \\<noteq>\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n    fmlookup (action_needed_asses a' (snd a ++ s1)) v", "by simp"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n  fmlookup (action_needed_asses a' (snd a ++ s1)) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n  fmlookup (action_needed_asses a' (snd a ++ s1)) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n  fmlookup (action_needed_asses a' (snd a ++ s1)) v\n\ngoal (3 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2));\n     fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' s1) v\n 2. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 3. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' s1) v", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2));\n     fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' s1) v\n 2. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 3. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' s1) v", "assume P2: \"v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2))\" \"fst a \\<subseteq>\\<^sub>f s2\"\n          \"\\<not> fst a \\<subseteq>\\<^sub>f s1\""], ["proof (state)\nthis:\n  v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2))\n  fst a \\<subseteq>\\<^sub>f s2\n  \\<not> fst a \\<subseteq>\\<^sub>f s1\n\ngoal (3 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2));\n     fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' s1) v\n 2. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 3. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' s1) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2))\n  fst a \\<subseteq>\\<^sub>f s2\n  \\<not> fst a \\<subseteq>\\<^sub>f s1", "show \"\n            fmlookup (action_needed_asses a' (snd a ++ s2)) v\n            = fmlookup (action_needed_asses a' s1) v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2))\n  fst a \\<subseteq>\\<^sub>f s2\n  \\<not> fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n    fmlookup (action_needed_asses a' s1) v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2));\n     fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' s1) v", "obtain aa :: \"('a, 'b) fmap \\<Rightarrow> ('a, 'b) fmap \\<Rightarrow> 'a\" where\n            \"\\<forall>x0 x1. (\\<exists>v2. v2 \\<in> fmdom' x1\n                \\<and> fmlookup x1 v2 \\<noteq> fmlookup x0 v2) = (aa x0 x1 \\<in> fmdom' x1\n                \\<and> fmlookup x1 (aa x0 x1) \\<noteq> fmlookup x0 (aa x0 x1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>aa.\n        \\<forall>x0 x1.\n           (\\<exists>v2.\n               v2 \\<in> fmdom' x1 \\<and>\n               fmlookup x1 v2 \\<noteq> fmlookup x0 v2) =\n           (aa x0 x1 \\<in> fmdom' x1 \\<and>\n            fmlookup x1 (aa x0 x1) \\<noteq>\n            fmlookup x0 (aa x0 x1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  \\<forall>x0 x1.\n     (\\<exists>v2.\n         v2 \\<in> fmdom' x1 \\<and> fmlookup x1 v2 \\<noteq> fmlookup x0 v2) =\n     (aa x0 x1 \\<in> fmdom' x1 \\<and>\n      fmlookup x1 (aa x0 x1) \\<noteq> fmlookup x0 (aa x0 x1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2));\n     fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' s1) v", "then"], ["proof (chain)\npicking this:\n  \\<forall>x0 x1.\n     (\\<exists>v2.\n         v2 \\<in> fmdom' x1 \\<and> fmlookup x1 v2 \\<noteq> fmlookup x0 v2) =\n     (aa x0 x1 \\<in> fmdom' x1 \\<and>\n      fmlookup x1 (aa x0 x1) \\<noteq> fmlookup x0 (aa x0 x1))", "have f1: \"\\<forall>f fa. aa fa f \\<in> fmdom' f\n              \\<and> fmlookup f (aa fa f) \\<noteq> fmlookup fa (aa fa f) \\<or> f \\<subseteq>\\<^sub>f fa\""], ["proof (prove)\nusing this:\n  \\<forall>x0 x1.\n     (\\<exists>v2.\n         v2 \\<in> fmdom' x1 \\<and> fmlookup x1 v2 \\<noteq> fmlookup x0 v2) =\n     (aa x0 x1 \\<in> fmdom' x1 \\<and>\n      fmlookup x1 (aa x0 x1) \\<noteq> fmlookup x0 (aa x0 x1))\n\ngoal (1 subgoal):\n 1. \\<forall>f fa.\n       aa fa f \\<in> fmdom' f \\<and>\n       fmlookup f (aa fa f) \\<noteq> fmlookup fa (aa fa f) \\<or>\n       f \\<subseteq>\\<^sub>f fa", "by (meson as_needed_asses_submap_exec_vii)"], ["proof (state)\nthis:\n  \\<forall>f fa.\n     aa fa f \\<in> fmdom' f \\<and>\n     fmlookup f (aa fa f) \\<noteq> fmlookup fa (aa fa f) \\<or>\n     f \\<subseteq>\\<^sub>f fa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2));\n     fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' s1) v", "then"], ["proof (chain)\npicking this:\n  \\<forall>f fa.\n     aa fa f \\<in> fmdom' f \\<and>\n     fmlookup f (aa fa f) \\<noteq> fmlookup fa (aa fa f) \\<or>\n     f \\<subseteq>\\<^sub>f fa", "have f2: \"aa s1 (fst a) \\<in> fmdom' (fst a)\n              \\<and> fmlookup (fst a) (aa s1 (fst a)) \\<noteq> fmlookup s1 (aa s1 (fst a))\""], ["proof (prove)\nusing this:\n  \\<forall>f fa.\n     aa fa f \\<in> fmdom' f \\<and>\n     fmlookup f (aa fa f) \\<noteq> fmlookup fa (aa fa f) \\<or>\n     f \\<subseteq>\\<^sub>f fa\n\ngoal (1 subgoal):\n 1. aa s1 (fst a) \\<in> fmdom' (fst a) \\<and>\n    fmlookup (fst a) (aa s1 (fst a)) \\<noteq> fmlookup s1 (aa s1 (fst a))", "using P2(3)"], ["proof (prove)\nusing this:\n  \\<forall>f fa.\n     aa fa f \\<in> fmdom' f \\<and>\n     fmlookup f (aa fa f) \\<noteq> fmlookup fa (aa fa f) \\<or>\n     f \\<subseteq>\\<^sub>f fa\n  \\<not> fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. aa s1 (fst a) \\<in> fmdom' (fst a) \\<and>\n    fmlookup (fst a) (aa s1 (fst a)) \\<noteq> fmlookup s1 (aa s1 (fst a))", "by blast"], ["proof (state)\nthis:\n  aa s1 (fst a) \\<in> fmdom' (fst a) \\<and>\n  fmlookup (fst a) (aa s1 (fst a)) \\<noteq> fmlookup s1 (aa s1 (fst a))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2));\n     fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' s1) v", "then"], ["proof (chain)\npicking this:\n  aa s1 (fst a) \\<in> fmdom' (fst a) \\<and>\n  fmlookup (fst a) (aa s1 (fst a)) \\<noteq> fmlookup s1 (aa s1 (fst a))", "have \"aa s1 (fst a) \\<in> fmdom' s2\""], ["proof (prove)\nusing this:\n  aa s1 (fst a) \\<in> fmdom' (fst a) \\<and>\n  fmlookup (fst a) (aa s1 (fst a)) \\<noteq> fmlookup s1 (aa s1 (fst a))\n\ngoal (1 subgoal):\n 1. aa s1 (fst a) \\<in> fmdom' s2", "by (metis (full_types) P2(2) as_needed_asses_submap_exec_v)"], ["proof (state)\nthis:\n  aa s1 (fst a) \\<in> fmdom' s2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2));\n     fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' s1) v", "then"], ["proof (chain)\npicking this:\n  aa s1 (fst a) \\<in> fmdom' s2", "have \"aa s1 (fst a) \\<in> fmdom' (action_needed_asses a s2)\""], ["proof (prove)\nusing this:\n  aa s1 (fst a) \\<in> fmdom' s2\n\ngoal (1 subgoal):\n 1. aa s1 (fst a) \\<in> fmdom' (action_needed_asses a s2)", "using f2"], ["proof (prove)\nusing this:\n  aa s1 (fst a) \\<in> fmdom' s2\n  aa s1 (fst a) \\<in> fmdom' (fst a) \\<and>\n  fmlookup (fst a) (aa s1 (fst a)) \\<noteq> fmlookup s1 (aa s1 (fst a))\n\ngoal (1 subgoal):\n 1. aa s1 (fst a) \\<in> fmdom' (action_needed_asses a s2)", "by (simp add: P2(2) as_needed_asses_submap_exec_iii\n                as_needed_asses_submap_exec_viii)"], ["proof (state)\nthis:\n  aa s1 (fst a) \\<in> fmdom' (action_needed_asses a s2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' (snd a ++ s2));\n     fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n                      fmlookup (action_needed_asses a' s1) v", "then"], ["proof (chain)\npicking this:\n  aa s1 (fst a) \\<in> fmdom' (action_needed_asses a s2)", "show ?thesis"], ["proof (prove)\nusing this:\n  aa s1 (fst a) \\<in> fmdom' (action_needed_asses a s2)\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n    fmlookup (action_needed_asses a' s1) v", "using f1"], ["proof (prove)\nusing this:\n  aa s1 (fst a) \\<in> fmdom' (action_needed_asses a s2)\n  \\<forall>f fa.\n     aa fa f \\<in> fmdom' f \\<and>\n     fmlookup f (aa fa f) \\<noteq> fmlookup fa (aa fa f) \\<or>\n     f \\<subseteq>\\<^sub>f fa\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n    fmlookup (action_needed_asses a' s1) v", "by (metis (no_types) Cons.prems(2) P2(3) as_needed_asses_submap_exec_vi elem)"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (snd a ++ s2)) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' s1) v", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' s1) v", "assume P3: \"v \\<in> fmdom' (action_needed_asses a' s2)\" \"\\<not> fst a \\<subseteq>\\<^sub>f s2\" \"fst a \\<subseteq>\\<^sub>f s1\""], ["proof (state)\nthis:\n  v \\<in> fmdom' (action_needed_asses a' s2)\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' (snd a ++ s1)) v\n 2. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' s1) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (action_needed_asses a' s2)\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1", "show \"\n            fmlookup (action_needed_asses a' s2) v\n            = fmlookup (action_needed_asses a' (snd a ++ s1)) v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a' s2)\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' s2) v =\n    fmlookup (action_needed_asses a' (snd a ++ s1)) v", "using Cons.prems(1) submap_imp_state_succ_submap_a"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a' s2)\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n  fst a \\<subseteq>\\<^sub>f s1\n  s1 \\<subseteq>\\<^sub>f s2\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   ?s2.0 \\<subseteq>\\<^sub>f ?s3.0\\<rbrakk>\n  \\<Longrightarrow> ?s1.0 \\<subseteq>\\<^sub>f ?s3.0\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' s2) v =\n    fmlookup (action_needed_asses a' (snd a ++ s1)) v", "by blast"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' s2) v =\n  fmlookup (action_needed_asses a' (snd a ++ s1)) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' s1) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' s1) v", "assume P4: \"v \\<in> fmdom' (action_needed_asses a' s2)\" \"\\<not> fst a \\<subseteq>\\<^sub>f s2\" \"\\<not> fst a \\<subseteq>\\<^sub>f s1\""], ["proof (state)\nthis:\n  v \\<in> fmdom' (action_needed_asses a' s2)\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n  \\<not> fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (action_needed_asses a' s2);\n     \\<not> fst a \\<subseteq>\\<^sub>f s2;\n     \\<not> fst a \\<subseteq>\\<^sub>f s1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (action_needed_asses a' s2) v =\n                      fmlookup (action_needed_asses a' s1) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (action_needed_asses a' s2)\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n  \\<not> fst a \\<subseteq>\\<^sub>f s1", "show \"\n            fmlookup (action_needed_asses a' s2) v\n            = fmlookup (action_needed_asses a' s1) v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (action_needed_asses a' s2)\n  \\<not> fst a \\<subseteq>\\<^sub>f s2\n  \\<not> fst a \\<subseteq>\\<^sub>f s1\n\ngoal (1 subgoal):\n 1. fmlookup (action_needed_asses a' s2) v =\n    fmlookup (action_needed_asses a' s1) v", "by (simp add: Cons.prems(2) P as_needed_asses_submap_exec_ii insert)"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' s2) v =\n  fmlookup (action_needed_asses a' s1) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmlookup (action_needed_asses a' (state_succ s2 a)) v =\n  fmlookup (action_needed_asses a' (state_succ s1 a)) v\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "}"], ["proof (state)\nthis:\n  ?v2\n  \\<in> fmdom' (action_needed_asses a' (state_succ s2 a)) \\<Longrightarrow>\n  fmlookup (action_needed_asses a' (state_succ s2 a)) ?v2 =\n  fmlookup (action_needed_asses a' (state_succ s1 a)) ?v2\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  ?v2\n  \\<in> fmdom' (action_needed_asses a' (state_succ s2 a)) \\<Longrightarrow>\n  fmlookup (action_needed_asses a' (state_succ s2 a)) ?v2 =\n  fmlookup (action_needed_asses a' (state_succ s1 a)) ?v2", "have a: \"?f \\<subseteq>\\<^sub>f ?g\""], ["proof (prove)\nusing this:\n  ?v2\n  \\<in> fmdom' (action_needed_asses a' (state_succ s2 a)) \\<Longrightarrow>\n  fmlookup (action_needed_asses a' (state_succ s2 a)) ?v2 =\n  fmlookup (action_needed_asses a' (state_succ s1 a)) ?v2\n\ngoal (1 subgoal):\n 1. action_needed_asses a' (state_succ s2 a) \\<subseteq>\\<^sub>f\n    action_needed_asses a' (state_succ s1 a)", "using as_needed_asses_submap_exec_ix"], ["proof (prove)\nusing this:\n  ?v2\n  \\<in> fmdom' (action_needed_asses a' (state_succ s2 a)) \\<Longrightarrow>\n  fmlookup (action_needed_asses a' (state_succ s2 a)) ?v2 =\n  fmlookup (action_needed_asses a' (state_succ s1 a)) ?v2\n  (?f \\<subseteq>\\<^sub>f ?g) =\n  (\\<forall>v\\<in>fmdom' ?f. fmlookup ?f v = fmlookup ?g v)\n\ngoal (1 subgoal):\n 1. action_needed_asses a' (state_succ s2 a) \\<subseteq>\\<^sub>f\n    action_needed_asses a' (state_succ s1 a)", "by blast"], ["proof (state)\nthis:\n  action_needed_asses a' (state_succ s2 a) \\<subseteq>\\<^sub>f\n  action_needed_asses a' (state_succ s1 a)\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "}"], ["proof (state)\nthis:\n  ListMem ?a'2 as \\<Longrightarrow>\n  action_needed_asses ?a'2 (state_succ s2 a) \\<subseteq>\\<^sub>f\n  action_needed_asses ?a'2 (state_succ s1 a)\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "note 2 = this"], ["proof (state)\nthis:\n  ListMem ?a'2 as \\<Longrightarrow>\n  action_needed_asses ?a'2 (state_succ s2 a) \\<subseteq>\\<^sub>f\n  action_needed_asses ?a'2 (state_succ s1 a)\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []\n 2. \\<And>a as s1 s2.\n       \\<lbrakk>\\<And>s1 s2.\n                   \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       action_needed_asses a s2 \\<subseteq>\\<^sub>f\n                       action_needed_asses a s1\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s1 as \\<subseteq>\\<^sub>f\n                                     exec_plan s2 as;\n        s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           action_needed_asses aa s2 \\<subseteq>\\<^sub>f\n           action_needed_asses aa s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 (a # as) \\<subseteq>\\<^sub>f\n                         exec_plan s2 (a # as)", "then"], ["proof (chain)\npicking this:\n  ListMem ?a'2 as \\<Longrightarrow>\n  action_needed_asses ?a'2 (state_succ s2 a) \\<subseteq>\\<^sub>f\n  action_needed_asses ?a'2 (state_succ s1 a)", "show ?case"], ["proof (prove)\nusing this:\n  ListMem ?a'2 as \\<Longrightarrow>\n  action_needed_asses ?a'2 (state_succ s2 a) \\<subseteq>\\<^sub>f\n  action_needed_asses ?a'2 (state_succ s1 a)\n\ngoal (1 subgoal):\n 1. exec_plan s1 (a # as) \\<subseteq>\\<^sub>f exec_plan s2 (a # as)", "unfolding exec_plan.simps"], ["proof (prove)\nusing this:\n  ListMem ?a'2 as \\<Longrightarrow>\n  action_needed_asses ?a'2 (state_succ s2 a) \\<subseteq>\\<^sub>f\n  action_needed_asses ?a'2 (state_succ s1 a)\n\ngoal (1 subgoal):\n 1. exec_plan (state_succ s1 a) as \\<subseteq>\\<^sub>f\n    exec_plan (state_succ s2 a) as", "using Cons.IH[of \"state_succ s1 a\" \"state_succ s2 a\", OF 1]"], ["proof (prove)\nusing this:\n  ListMem ?a'2 as \\<Longrightarrow>\n  action_needed_asses ?a'2 (state_succ s2 a) \\<subseteq>\\<^sub>f\n  action_needed_asses ?a'2 (state_succ s1 a)\n  \\<forall>aa.\n     ListMem aa as \\<longrightarrow>\n     action_needed_asses aa (state_succ s2 a) \\<subseteq>\\<^sub>f\n     action_needed_asses aa (state_succ s1 a) \\<Longrightarrow>\n  exec_plan (state_succ s1 a) as \\<subseteq>\\<^sub>f\n  exec_plan (state_succ s2 a) as\n\ngoal (1 subgoal):\n 1. exec_plan (state_succ s1 a) as \\<subseteq>\\<^sub>f\n    exec_plan (state_succ s2 a) as", "by blast"], ["proof (state)\nthis:\n  exec_plan s1 (a # as) \\<subseteq>\\<^sub>f exec_plan s2 (a # as)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<subseteq>\\<^sub>f s2;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           action_needed_asses a s2 \\<subseteq>\\<^sub>f\n           action_needed_asses a s1\\<rbrakk>\n       \\<Longrightarrow> exec_plan s1 [] \\<subseteq>\\<^sub>f exec_plan s2 []", "qed simp\n\n\n\\<comment> \\<open>NOTE name shortened.\\<close>"], ["", "definition system_needed_vars where\n  \"system_needed_vars PROB s \\<equiv> (\\<Union>{action_needed_vars a s | a. a \\<in> PROB})\"\n\n\\<comment> \\<open>NOTE name shortened.\\<close>"], ["", "definition system_needed_asses where\n  \"system_needed_asses PROB s \\<equiv> (fmrestrict_set (system_needed_vars PROB s) s)\""], ["", "lemma action_needed_vars_subset_sys_needed_vars_subset:\n  assumes \"(a \\<in> PROB)\"\n  shows \"(action_needed_vars a s \\<subseteq> system_needed_vars PROB s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_needed_vars a s \\<subseteq> system_needed_vars PROB s", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. action_needed_vars a s \\<subseteq> system_needed_vars PROB s", "by (auto simp: system_needed_vars_def) (metis surjective_pairing)"], ["", "lemma action_needed_asses_submap_sys_needed_asses:\n  assumes \"(a \\<in> PROB)\"\n  shows \"(action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s", "have \"action_needed_asses a s = fmrestrict_set (action_needed_vars a s) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_needed_asses a s = fmrestrict_set (action_needed_vars a s) s", "unfolding action_needed_asses_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set (action_needed_vars a s) s =\n    fmrestrict_set (action_needed_vars a s) s", "by simp"], ["proof (state)\nthis:\n  action_needed_asses a s = fmrestrict_set (action_needed_vars a s) s\n\ngoal (1 subgoal):\n 1. action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s", "then"], ["proof (chain)\npicking this:\n  action_needed_asses a s = fmrestrict_set (action_needed_vars a s) s", "have \"system_needed_asses PROB s = (fmrestrict_set (system_needed_vars PROB s) s)\""], ["proof (prove)\nusing this:\n  action_needed_asses a s = fmrestrict_set (action_needed_vars a s) s\n\ngoal (1 subgoal):\n 1. system_needed_asses PROB s =\n    fmrestrict_set (system_needed_vars PROB s) s", "unfolding system_needed_asses_def"], ["proof (prove)\nusing this:\n  action_needed_asses a s = fmrestrict_set (action_needed_vars a s) s\n\ngoal (1 subgoal):\n 1. fmrestrict_set (system_needed_vars PROB s) s =\n    fmrestrict_set (system_needed_vars PROB s) s", "by simp"], ["proof (state)\nthis:\n  system_needed_asses PROB s = fmrestrict_set (system_needed_vars PROB s) s\n\ngoal (1 subgoal):\n 1. action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s", "then"], ["proof (chain)\npicking this:\n  system_needed_asses PROB s = fmrestrict_set (system_needed_vars PROB s) s", "have 1: \"action_needed_vars a s \\<subseteq> system_needed_vars PROB s\""], ["proof (prove)\nusing this:\n  system_needed_asses PROB s = fmrestrict_set (system_needed_vars PROB s) s\n\ngoal (1 subgoal):\n 1. action_needed_vars a s \\<subseteq> system_needed_vars PROB s", "unfolding action_needed_vars_subset_sys_needed_vars_subset"], ["proof (prove)\nusing this:\n  system_needed_asses PROB s = fmrestrict_set (system_needed_vars PROB s) s\n\ngoal (1 subgoal):\n 1. action_needed_vars a s \\<subseteq> system_needed_vars PROB s", "using assms action_needed_vars_subset_sys_needed_vars_subset"], ["proof (prove)\nusing this:\n  system_needed_asses PROB s = fmrestrict_set (system_needed_vars PROB s) s\n  a \\<in> PROB\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  action_needed_vars ?a ?s \\<subseteq> system_needed_vars ?PROB ?s\n\ngoal (1 subgoal):\n 1. action_needed_vars a s \\<subseteq> system_needed_vars PROB s", "by fast"], ["proof (state)\nthis:\n  action_needed_vars a s \\<subseteq> system_needed_vars PROB s\n\ngoal (1 subgoal):\n 1. action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s", "{"], ["proof (state)\nthis:\n  action_needed_vars a s \\<subseteq> system_needed_vars PROB s\n\ngoal (1 subgoal):\n 1. action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s", "assume P1: \"x \\<in> dom (fmlookup (fmrestrict_set (action_needed_vars a s) s))\""], ["proof (state)\nthis:\n  x \\<in> dom (fmlookup (fmrestrict_set (action_needed_vars a s) s))\n\ngoal (1 subgoal):\n 1. action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s", "then"], ["proof (chain)\npicking this:\n  x \\<in> dom (fmlookup (fmrestrict_set (action_needed_vars a s) s))", "have a: \"fmlookup (fmrestrict_set (action_needed_vars a s) s) x = fmlookup s x\""], ["proof (prove)\nusing this:\n  x \\<in> dom (fmlookup (fmrestrict_set (action_needed_vars a s) s))\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (action_needed_vars a s) s) x = fmlookup s x", "by (auto simp: fmdom'_restrict_set_precise)"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (action_needed_vars a s) s) x = fmlookup s x\n\ngoal (1 subgoal):\n 1. action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set (action_needed_vars a s) s) x = fmlookup s x", "have \"fmlookup (fmrestrict_set (system_needed_vars PROB s) s) x = fmlookup s x\""], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set (action_needed_vars a s) s) x = fmlookup s x\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (system_needed_vars PROB s) s) x = fmlookup s x", "using 1 contra_subsetD"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set (action_needed_vars a s) s) x = fmlookup s x\n  action_needed_vars a s \\<subseteq> system_needed_vars PROB s\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<notin> ?A\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (system_needed_vars PROB s) s) x = fmlookup s x", "by fastforce"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) x = fmlookup s x\n\ngoal (1 subgoal):\n 1. action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) x = fmlookup s x", "have \"\n      fmlookup (fmrestrict_set (action_needed_vars a s) s) x\n      = fmlookup (fmrestrict_set (system_needed_vars PROB s) s) x\n    \""], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) x = fmlookup s x\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (action_needed_vars a s) s) x =\n    fmlookup (fmrestrict_set (system_needed_vars PROB s) s) x", "using a"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) x = fmlookup s x\n  fmlookup (fmrestrict_set (action_needed_vars a s) s) x = fmlookup s x\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (action_needed_vars a s) s) x =\n    fmlookup (fmrestrict_set (system_needed_vars PROB s) s) x", "by argo"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (action_needed_vars a s) s) x =\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) x\n\ngoal (1 subgoal):\n 1. action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s", "}"], ["proof (state)\nthis:\n  ?x2\n  \\<in> dom (fmlookup\n              (fmrestrict_set (action_needed_vars a s) s)) \\<Longrightarrow>\n  fmlookup (fmrestrict_set (action_needed_vars a s) s) ?x2 =\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) ?x2\n\ngoal (1 subgoal):\n 1. action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s", "then"], ["proof (chain)\npicking this:\n  ?x2\n  \\<in> dom (fmlookup\n              (fmrestrict_set (action_needed_vars a s) s)) \\<Longrightarrow>\n  fmlookup (fmrestrict_set (action_needed_vars a s) s) ?x2 =\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) ?x2", "have \"\n      fmlookup (fmrestrict_set (action_needed_vars a s) s)\n      \\<subseteq>\\<^sub>m fmlookup (fmrestrict_set (system_needed_vars PROB s) s)\n    \""], ["proof (prove)\nusing this:\n  ?x2\n  \\<in> dom (fmlookup\n              (fmrestrict_set (action_needed_vars a s) s)) \\<Longrightarrow>\n  fmlookup (fmrestrict_set (action_needed_vars a s) s) ?x2 =\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) ?x2\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (action_needed_vars a s) s) \\<subseteq>\\<^sub>m\n    fmlookup (fmrestrict_set (system_needed_vars PROB s) s)", "using map_le_def"], ["proof (prove)\nusing this:\n  ?x2\n  \\<in> dom (fmlookup\n              (fmrestrict_set (action_needed_vars a s) s)) \\<Longrightarrow>\n  fmlookup (fmrestrict_set (action_needed_vars a s) s) ?x2 =\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) ?x2\n  (?m\\<^sub>1 \\<subseteq>\\<^sub>m ?m\\<^sub>2) =\n  (\\<forall>a\\<in>dom ?m\\<^sub>1. ?m\\<^sub>1 a = ?m\\<^sub>2 a)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (action_needed_vars a s) s) \\<subseteq>\\<^sub>m\n    fmlookup (fmrestrict_set (system_needed_vars PROB s) s)", "by blast"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (action_needed_vars a s) s) \\<subseteq>\\<^sub>m\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s)\n\ngoal (1 subgoal):\n 1. action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set (action_needed_vars a s) s) \\<subseteq>\\<^sub>m\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s)", "show \"(action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s)\""], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set (action_needed_vars a s) s) \\<subseteq>\\<^sub>m\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s)\n\ngoal (1 subgoal):\n 1. action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s", "by (simp add: fmsubset.rep_eq action_needed_asses_def system_needed_asses_def)"], ["proof (state)\nthis:\n  action_needed_asses a s \\<subseteq>\\<^sub>f system_needed_asses PROB s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma system_needed_asses_include_action_needed_asses_1:\n  assumes \"(a \\<in> PROB)\"\n  shows \"(action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) = action_needed_vars a s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "let ?A=\"{v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n      v \\<in> fmdom' (fst a)\n      \\<and> fmlookup (fst a) v = fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}\""], ["proof (state)\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "let ?B=\"{v \\<in> fmdom' s. v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\""], ["proof (state)\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "assume \"v \\<in> ?A\""], ["proof (state)\nthis:\n  v \\<in> {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n           v \\<in> fmdom' (fst a) \\<and>\n           fmlookup (fst a) v =\n           fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "then"], ["proof (chain)\npicking this:\n  v \\<in> {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n           v \\<in> fmdom' (fst a) \\<and>\n           fmlookup (fst a) v =\n           fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}", "have i: \"v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s)\" \"v \\<in> fmdom' (fst a)\"\n      \"fmlookup (fst a) v = fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v\""], ["proof (prove)\nusing this:\n  v \\<in> {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n           v \\<in> fmdom' (fst a) \\<and>\n           fmlookup (fst a) v =\n           fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s) &&&\n    v \\<in> fmdom' (fst a) &&&\n    fmlookup (fst a) v =\n    fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v", "by blast+"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s)\n  v \\<in> fmdom' (fst a)\n  fmlookup (fst a) v =\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s)\n  v \\<in> fmdom' (fst a)\n  fmlookup (fst a) v =\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v", "have \"v \\<in> fmdom' s\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s)\n  v \\<in> fmdom' (fst a)\n  fmlookup (fst a) v =\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' s", "by (simp add: fmdom'_restrict_set_precise)"], ["proof (state)\nthis:\n  v \\<in> fmdom' s\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "moreover"], ["proof (state)\nthis:\n  v \\<in> fmdom' s\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "have \"fmlookup (fst a) v = fmlookup s v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (fst a) v = fmlookup s v", "using i(2, 3) fmdom'_notI"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fst a)\n  fmlookup (fst a) v =\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v\n  fmlookup ?m ?x = None \\<Longrightarrow> ?x \\<notin> fmdom' ?m\n\ngoal (1 subgoal):\n 1. fmlookup (fst a) v = fmlookup s v", "by force"], ["proof (state)\nthis:\n  fmlookup (fst a) v = fmlookup s v\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' s\n  fmlookup (fst a) v = fmlookup s v", "have \"v \\<in> ?B\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' s\n  fmlookup (fst a) v = fmlookup s v\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> fmdom' s.\n             v \\<in> fmdom' (fst a) \\<and>\n             fmlookup (fst a) v = fmlookup s v}", "using i"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' s\n  fmlookup (fst a) v = fmlookup s v\n  v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s)\n  v \\<in> fmdom' (fst a)\n  fmlookup (fst a) v =\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> fmdom' s.\n             v \\<in> fmdom' (fst a) \\<and>\n             fmlookup (fst a) v = fmlookup s v}", "by blast"], ["proof (state)\nthis:\n  v \\<in> {v \\<in> fmdom' s.\n           v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "}"], ["proof (state)\nthis:\n  ?v2\n  \\<in> {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n         v \\<in> fmdom' (fst a) \\<and>\n         fmlookup (fst a) v =\n         fmlookup (fmrestrict_set (system_needed_vars PROB s) s)\n          v} \\<Longrightarrow>\n  ?v2\n  \\<in> {v \\<in> fmdom' s.\n         v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "then"], ["proof (chain)\npicking this:\n  ?v2\n  \\<in> {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n         v \\<in> fmdom' (fst a) \\<and>\n         fmlookup (fst a) v =\n         fmlookup (fmrestrict_set (system_needed_vars PROB s) s)\n          v} \\<Longrightarrow>\n  ?v2\n  \\<in> {v \\<in> fmdom' s.\n         v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}", "have 1: \"?A \\<subseteq> ?B\""], ["proof (prove)\nusing this:\n  ?v2\n  \\<in> {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n         v \\<in> fmdom' (fst a) \\<and>\n         fmlookup (fst a) v =\n         fmlookup (fmrestrict_set (system_needed_vars PROB s) s)\n          v} \\<Longrightarrow>\n  ?v2\n  \\<in> {v \\<in> fmdom' s.\n         v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n\ngoal (1 subgoal):\n 1. {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n     v \\<in> fmdom' (fst a) \\<and>\n     fmlookup (fst a) v =\n     fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}\n    \\<subseteq> {v \\<in> fmdom' s.\n                 v \\<in> fmdom' (fst a) \\<and>\n                 fmlookup (fst a) v = fmlookup s v}", "by blast"], ["proof (state)\nthis:\n  {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n   v \\<in> fmdom' (fst a) \\<and>\n   fmlookup (fst a) v =\n   fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}\n  \\<subseteq> {v \\<in> fmdom' s.\n               v \\<in> fmdom' (fst a) \\<and>\n               fmlookup (fst a) v = fmlookup s v}\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "{"], ["proof (state)\nthis:\n  {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n   v \\<in> fmdom' (fst a) \\<and>\n   fmlookup (fst a) v =\n   fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}\n  \\<subseteq> {v \\<in> fmdom' s.\n               v \\<in> fmdom' (fst a) \\<and>\n               fmlookup (fst a) v = fmlookup s v}\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "assume P: \"v \\<in> ?B\""], ["proof (state)\nthis:\n  v \\<in> {v \\<in> fmdom' s.\n           v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "then"], ["proof (chain)\npicking this:\n  v \\<in> {v \\<in> fmdom' s.\n           v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}", "have ii: \"v \\<in> fmdom' s\" \"v \\<in> fmdom' (fst a)\" \"fmlookup (fst a) v = fmlookup s v\""], ["proof (prove)\nusing this:\n  v \\<in> {v \\<in> fmdom' s.\n           v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' s &&&\n    v \\<in> fmdom' (fst a) &&& fmlookup (fst a) v = fmlookup s v", "by blast+"], ["proof (state)\nthis:\n  v \\<in> fmdom' s\n  v \\<in> fmdom' (fst a)\n  fmlookup (fst a) v = fmlookup s v\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "moreover"], ["proof (state)\nthis:\n  v \\<in> fmdom' s\n  v \\<in> fmdom' (fst a)\n  fmlookup (fst a) v = fmlookup s v\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "{"], ["proof (state)\nthis:\n  v \\<in> fmdom' s\n  v \\<in> fmdom' (fst a)\n  fmlookup (fst a) v = fmlookup s v\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "have \"\\<exists>s'. v \\<in> s' \\<and> (\\<exists>a. (s' = action_needed_vars a s) \\<and> a \\<in> PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s'.\n       v \\<in> s' \\<and>\n       (\\<exists>a. s' = action_needed_vars a s \\<and> a \\<in> PROB)", "unfolding action_needed_vars_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s'.\n       v \\<in> s' \\<and>\n       (\\<exists>a.\n           s' =\n           {v \\<in> fmdom' s.\n            v \\<in> fmdom' (fst a) \\<and>\n            fmlookup (fst a) v = fmlookup s v} \\<and>\n           a \\<in> PROB)", "using assms P action_needed_vars_def"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  v \\<in> {v \\<in> fmdom' s.\n           v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n  action_needed_vars ?a ?s \\<equiv>\n  {v \\<in> fmdom' ?s.\n   v \\<in> fmdom' (fst ?a) \\<and> fmlookup (fst ?a) v = fmlookup ?s v}\n\ngoal (1 subgoal):\n 1. \\<exists>s'.\n       v \\<in> s' \\<and>\n       (\\<exists>a.\n           s' =\n           {v \\<in> fmdom' s.\n            v \\<in> fmdom' (fst a) \\<and>\n            fmlookup (fst a) v = fmlookup s v} \\<and>\n           a \\<in> PROB)", "by metis"], ["proof (state)\nthis:\n  \\<exists>s'.\n     v \\<in> s' \\<and>\n     (\\<exists>a. s' = action_needed_vars a s \\<and> a \\<in> PROB)\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "then"], ["proof (chain)\npicking this:\n  \\<exists>s'.\n     v \\<in> s' \\<and>\n     (\\<exists>a. s' = action_needed_vars a s \\<and> a \\<in> PROB)", "obtain s' where \\<alpha>: \"v \\<in> s'\" \"(\\<exists>a. (s' = action_needed_vars a s) \\<and> a \\<in> PROB)\""], ["proof (prove)\nusing this:\n  \\<exists>s'.\n     v \\<in> s' \\<and>\n     (\\<exists>a. s' = action_needed_vars a s \\<and> a \\<in> PROB)\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>v \\<in> s';\n         \\<exists>a.\n            s' = action_needed_vars a s \\<and> a \\<in> PROB\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v \\<in> s'\n  \\<exists>a. s' = action_needed_vars a s \\<and> a \\<in> PROB\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "moreover"], ["proof (state)\nthis:\n  v \\<in> s'\n  \\<exists>a. s' = action_needed_vars a s \\<and> a \\<in> PROB\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "obtain a' where \"s' = action_needed_vars a' s\" \"a' \\<in> PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        \\<lbrakk>s' = action_needed_vars a' s; a' \\<in> PROB\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<alpha>"], ["proof (prove)\nusing this:\n  v \\<in> s'\n  \\<exists>a. s' = action_needed_vars a s \\<and> a \\<in> PROB\n\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        \\<lbrakk>s' = action_needed_vars a' s; a' \\<in> PROB\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s' = action_needed_vars a' s\n  a' \\<in> PROB\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> s'\n  \\<exists>a. s' = action_needed_vars a s \\<and> a \\<in> PROB\n  s' = action_needed_vars a' s\n  a' \\<in> PROB", "have \"v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s)\""], ["proof (prove)\nusing this:\n  v \\<in> s'\n  \\<exists>a. s' = action_needed_vars a s \\<and> a \\<in> PROB\n  s' = action_needed_vars a' s\n  a' \\<in> PROB\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s)", "unfolding fmdom'_restrict_set_precise"], ["proof (prove)\nusing this:\n  v \\<in> s'\n  \\<exists>a. s' = action_needed_vars a s \\<and> a \\<in> PROB\n  s' = action_needed_vars a' s\n  a' \\<in> PROB\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' s \\<inter> system_needed_vars PROB s", "using action_needed_vars_subset_sys_needed_vars_subset ii(1)"], ["proof (prove)\nusing this:\n  v \\<in> s'\n  \\<exists>a. s' = action_needed_vars a s \\<and> a \\<in> PROB\n  s' = action_needed_vars a' s\n  a' \\<in> PROB\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  action_needed_vars ?a ?s \\<subseteq> system_needed_vars ?PROB ?s\n  v \\<in> fmdom' s\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' s \\<inter> system_needed_vars PROB s", "by blast"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s)\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "}"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s)\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "note iii = this"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s)\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "moreover"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s)\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "have \"fmlookup (fst a) v = fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (fst a) v =\n    fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v", "using ii(3) iii fmdom'_notI"], ["proof (prove)\nusing this:\n  fmlookup (fst a) v = fmlookup s v\n  v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s)\n  fmlookup ?m ?x = None \\<Longrightarrow> ?x \\<notin> fmdom' ?m\n\ngoal (1 subgoal):\n 1. fmlookup (fst a) v =\n    fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v", "by force"], ["proof (state)\nthis:\n  fmlookup (fst a) v =\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' s\n  v \\<in> fmdom' (fst a)\n  fmlookup (fst a) v = fmlookup s v\n  v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s)\n  fmlookup (fst a) v =\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v", "have \"v \\<in> ?A\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' s\n  v \\<in> fmdom' (fst a)\n  fmlookup (fst a) v = fmlookup s v\n  v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s)\n  fmlookup (fst a) v =\n  fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n             v \\<in> fmdom' (fst a) \\<and>\n             fmlookup (fst a) v =\n             fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}", "by blast"], ["proof (state)\nthis:\n  v \\<in> {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n           v \\<in> fmdom' (fst a) \\<and>\n           fmlookup (fst a) v =\n           fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "}"], ["proof (state)\nthis:\n  ?v2\n  \\<in> {v \\<in> fmdom' s.\n         v \\<in> fmdom' (fst a) \\<and>\n         fmlookup (fst a) v = fmlookup s v} \\<Longrightarrow>\n  ?v2\n  \\<in> {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n         v \\<in> fmdom' (fst a) \\<and>\n         fmlookup (fst a) v =\n         fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "then"], ["proof (chain)\npicking this:\n  ?v2\n  \\<in> {v \\<in> fmdom' s.\n         v \\<in> fmdom' (fst a) \\<and>\n         fmlookup (fst a) v = fmlookup s v} \\<Longrightarrow>\n  ?v2\n  \\<in> {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n         v \\<in> fmdom' (fst a) \\<and>\n         fmlookup (fst a) v =\n         fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}", "have \"?B \\<subseteq> ?A\""], ["proof (prove)\nusing this:\n  ?v2\n  \\<in> {v \\<in> fmdom' s.\n         v \\<in> fmdom' (fst a) \\<and>\n         fmlookup (fst a) v = fmlookup s v} \\<Longrightarrow>\n  ?v2\n  \\<in> {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n         v \\<in> fmdom' (fst a) \\<and>\n         fmlookup (fst a) v =\n         fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}\n\ngoal (1 subgoal):\n 1. {v \\<in> fmdom' s.\n     v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n    \\<subseteq> {v \\<in> fmdom'\n                          (fmrestrict_set (system_needed_vars PROB s) s).\n                 v \\<in> fmdom' (fst a) \\<and>\n                 fmlookup (fst a) v =\n                 fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}", "by blast"], ["proof (state)\nthis:\n  {v \\<in> fmdom' s.\n   v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n  \\<subseteq> {v \\<in> fmdom'\n                        (fmrestrict_set (system_needed_vars PROB s) s).\n               v \\<in> fmdom' (fst a) \\<and>\n               fmlookup (fst a) v =\n               fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "then"], ["proof (chain)\npicking this:\n  {v \\<in> fmdom' s.\n   v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n  \\<subseteq> {v \\<in> fmdom'\n                        (fmrestrict_set (system_needed_vars PROB s) s).\n               v \\<in> fmdom' (fst a) \\<and>\n               fmlookup (fst a) v =\n               fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}", "show ?thesis"], ["proof (prove)\nusing this:\n  {v \\<in> fmdom' s.\n   v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n  \\<subseteq> {v \\<in> fmdom'\n                        (fmrestrict_set (system_needed_vars PROB s) s).\n               v \\<in> fmdom' (fst a) \\<and>\n               fmlookup (fst a) v =\n               fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "unfolding action_needed_vars_def"], ["proof (prove)\nusing this:\n  {v \\<in> fmdom' s.\n   v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n  \\<subseteq> {v \\<in> fmdom'\n                        (fmrestrict_set (system_needed_vars PROB s) s).\n               v \\<in> fmdom' (fst a) \\<and>\n               fmlookup (fst a) v =\n               fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}\n\ngoal (1 subgoal):\n 1. {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n     v \\<in> fmdom' (fst a) \\<and>\n     fmlookup (fst a) v =\n     fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v} =\n    {v \\<in> fmdom' s.\n     v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}", "using 1"], ["proof (prove)\nusing this:\n  {v \\<in> fmdom' s.\n   v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}\n  \\<subseteq> {v \\<in> fmdom'\n                        (fmrestrict_set (system_needed_vars PROB s) s).\n               v \\<in> fmdom' (fst a) \\<and>\n               fmlookup (fst a) v =\n               fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}\n  {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n   v \\<in> fmdom' (fst a) \\<and>\n   fmlookup (fst a) v =\n   fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v}\n  \\<subseteq> {v \\<in> fmdom' s.\n               v \\<in> fmdom' (fst a) \\<and>\n               fmlookup (fst a) v = fmlookup s v}\n\ngoal (1 subgoal):\n 1. {v \\<in> fmdom' (fmrestrict_set (system_needed_vars PROB s) s).\n     v \\<in> fmdom' (fst a) \\<and>\n     fmlookup (fst a) v =\n     fmlookup (fmrestrict_set (system_needed_vars PROB s) s) v} =\n    {v \\<in> fmdom' s.\n     v \\<in> fmdom' (fst a) \\<and> fmlookup (fst a) v = fmlookup s v}", "by blast"], ["proof (state)\nthis:\n  action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n  action_needed_vars a s\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor (proven elsewhere?).\\<close>"], ["", "lemma system_needed_asses_include_action_needed_asses_i:\n  fixes A B f\n  assumes \"A \\<subseteq> B\"\n  shows \"fmrestrict_set A (fmrestrict_set B f) = fmrestrict_set A f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set A (fmrestrict_set B f) = fmrestrict_set A f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set A (fmrestrict_set B f) = fmrestrict_set A f", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set A (fmrestrict_set B f) = fmrestrict_set A f", "let ?f'=\"fmrestrict_set A f\""], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set A (fmrestrict_set B f) = fmrestrict_set A f", "let ?f''=\"fmrestrict_set A (fmrestrict_set B f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set A (fmrestrict_set B f) = fmrestrict_set A f", "assume C: \"?f'' \\<noteq> ?f'\""], ["proof (state)\nthis:\n  fmrestrict_set A (fmrestrict_set B f) \\<noteq> fmrestrict_set A f\n\ngoal (1 subgoal):\n 1. fmrestrict_set A (fmrestrict_set B f) = fmrestrict_set A f", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set A (fmrestrict_set B f) \\<noteq> fmrestrict_set A f", "obtain v where 1: \"fmlookup ?f'' v \\<noteq> fmlookup ?f' v\""], ["proof (prove)\nusing this:\n  fmrestrict_set A (fmrestrict_set B f) \\<noteq> fmrestrict_set A f\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n        fmlookup (fmrestrict_set A f) v \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson fmap_ext)"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n  fmlookup (fmrestrict_set A f) v\n\ngoal (1 subgoal):\n 1. fmrestrict_set A (fmrestrict_set B f) = fmrestrict_set A f", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n  fmlookup (fmrestrict_set A f) v", "have False"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n  fmlookup (fmrestrict_set A f) v\n\ngoal (1 subgoal):\n 1. False", "proof (cases \"v \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n             fmlookup (fmrestrict_set A f) v;\n     v \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n             fmlookup (fmrestrict_set A f) v;\n     v \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  v \\<in> A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n             fmlookup (fmrestrict_set A f) v;\n     v \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n             fmlookup (fmrestrict_set A f) v;\n     v \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "have \"fmlookup ?f'' v = fmlookup (fmrestrict_set B f) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set A (fmrestrict_set B f)) v =\n    fmlookup (fmrestrict_set B f) v", "using True fmlookup_restrict_set"], ["proof (prove)\nusing this:\n  v \\<in> A\n  fmlookup (fmrestrict_set ?A ?m) ?x =\n  (if ?x \\<in> ?A then fmlookup ?m ?x else None)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set A (fmrestrict_set B f)) v =\n    fmlookup (fmrestrict_set B f) v", "by simp"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set A (fmrestrict_set B f)) v =\n  fmlookup (fmrestrict_set B f) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n             fmlookup (fmrestrict_set A f) v;\n     v \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n             fmlookup (fmrestrict_set A f) v;\n     v \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set A (fmrestrict_set B f)) v =\n  fmlookup (fmrestrict_set B f) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n             fmlookup (fmrestrict_set A f) v;\n     v \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n             fmlookup (fmrestrict_set A f) v;\n     v \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "have \"fmlookup (fmrestrict_set B f) v = fmlookup ?f' v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set B f) v = fmlookup (fmrestrict_set A f) v", "using True assms(1)"], ["proof (prove)\nusing this:\n  v \\<in> A\n  A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set B f) v = fmlookup (fmrestrict_set A f) v", "by auto"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set B f) v = fmlookup (fmrestrict_set A f) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n             fmlookup (fmrestrict_set A f) v;\n     v \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n             fmlookup (fmrestrict_set A f) v;\n     v \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set A (fmrestrict_set B f)) v =\n  fmlookup (fmrestrict_set B f) v\n  fmlookup (fmrestrict_set B f) v = fmlookup (fmrestrict_set A f) v", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set A (fmrestrict_set B f)) v =\n  fmlookup (fmrestrict_set B f) v\n  fmlookup (fmrestrict_set B f) v = fmlookup (fmrestrict_set A f) v\n\ngoal (1 subgoal):\n 1. False", "using 1"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set A (fmrestrict_set B f)) v =\n  fmlookup (fmrestrict_set B f) v\n  fmlookup (fmrestrict_set B f) v = fmlookup (fmrestrict_set A f) v\n  fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n  fmlookup (fmrestrict_set A f) v\n\ngoal (1 subgoal):\n 1. False", "by argo"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n             fmlookup (fmrestrict_set A f) v;\n     v \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n             fmlookup (fmrestrict_set A f) v;\n     v \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  v \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n             fmlookup (fmrestrict_set A f) v;\n     v \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  v \\<notin> A", "have \"fmlookup ?f' v = None\" \"fmlookup ?f'' v = None\""], ["proof (prove)\nusing this:\n  v \\<notin> A\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set A f) v = None &&&\n    fmlookup (fmrestrict_set A (fmrestrict_set B f)) v = None", "using fmlookup_restrict_set"], ["proof (prove)\nusing this:\n  v \\<notin> A\n  fmlookup (fmrestrict_set ?A ?m) ?x =\n  (if ?x \\<in> ?A then fmlookup ?m ?x else None)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set A f) v = None &&&\n    fmlookup (fmrestrict_set A (fmrestrict_set B f)) v = None", "by auto+"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set A f) v = None\n  fmlookup (fmrestrict_set A (fmrestrict_set B f)) v = None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n             fmlookup (fmrestrict_set A f) v;\n     v \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set A f) v = None\n  fmlookup (fmrestrict_set A (fmrestrict_set B f)) v = None", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set A f) v = None\n  fmlookup (fmrestrict_set A (fmrestrict_set B f)) v = None\n\ngoal (1 subgoal):\n 1. False", "using 1"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set A f) v = None\n  fmlookup (fmrestrict_set A (fmrestrict_set B f)) v = None\n  fmlookup (fmrestrict_set A (fmrestrict_set B f)) v \\<noteq>\n  fmlookup (fmrestrict_set A f) v\n\ngoal (1 subgoal):\n 1. False", "by argo"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. fmrestrict_set A (fmrestrict_set B f) = fmrestrict_set A f", "}"], ["proof (state)\nthis:\n  fmrestrict_set A (fmrestrict_set B f) \\<noteq>\n  fmrestrict_set A f \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. fmrestrict_set A (fmrestrict_set B f) = fmrestrict_set A f", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set A (fmrestrict_set B f) \\<noteq>\n  fmrestrict_set A f \\<Longrightarrow>\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set A (fmrestrict_set B f) \\<noteq>\n  fmrestrict_set A f \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. fmrestrict_set A (fmrestrict_set B f) = fmrestrict_set A f", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set A (fmrestrict_set B f) = fmrestrict_set A f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma system_needed_asses_include_action_needed_asses:\n  assumes \"(a \\<in> PROB)\"\n  shows \"(action_needed_asses a (system_needed_asses PROB s) = action_needed_asses a s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_needed_asses a (system_needed_asses PROB s) =\n    action_needed_asses a s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. action_needed_asses a (system_needed_asses PROB s) =\n    action_needed_asses a s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. action_needed_asses a (system_needed_asses PROB s) =\n    action_needed_asses a s", "have \" action_needed_vars a s \\<subseteq> system_needed_vars PROB s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_needed_vars a s \\<subseteq> system_needed_vars PROB s", "using action_needed_vars_subset_sys_needed_vars_subset[OF assms]"], ["proof (prove)\nusing this:\n  action_needed_vars a ?s \\<subseteq> system_needed_vars PROB ?s\n\ngoal (1 subgoal):\n 1. action_needed_vars a s \\<subseteq> system_needed_vars PROB s", "by simp"], ["proof (state)\nthis:\n  action_needed_vars a s \\<subseteq> system_needed_vars PROB s\n\ngoal (1 subgoal):\n 1. action_needed_asses a (system_needed_asses PROB s) =\n    action_needed_asses a s", "then"], ["proof (chain)\npicking this:\n  action_needed_vars a s \\<subseteq> system_needed_vars PROB s", "have \"\n        fmrestrict_set (action_needed_vars a s) (fmrestrict_set (system_needed_vars PROB s) s) =\n        fmrestrict_set (action_needed_vars a s) s\""], ["proof (prove)\nusing this:\n  action_needed_vars a s \\<subseteq> system_needed_vars PROB s\n\ngoal (1 subgoal):\n 1. fmrestrict_set (action_needed_vars a s)\n     (fmrestrict_set (system_needed_vars PROB s) s) =\n    fmrestrict_set (action_needed_vars a s) s", "using system_needed_asses_include_action_needed_asses_i"], ["proof (prove)\nusing this:\n  action_needed_vars a s \\<subseteq> system_needed_vars PROB s\n  ?A \\<subseteq> ?B \\<Longrightarrow>\n  fmrestrict_set ?A (fmrestrict_set ?B ?f) = fmrestrict_set ?A ?f\n\ngoal (1 subgoal):\n 1. fmrestrict_set (action_needed_vars a s)\n     (fmrestrict_set (system_needed_vars PROB s) s) =\n    fmrestrict_set (action_needed_vars a s) s", "by fast"], ["proof (state)\nthis:\n  fmrestrict_set (action_needed_vars a s)\n   (fmrestrict_set (system_needed_vars PROB s) s) =\n  fmrestrict_set (action_needed_vars a s) s\n\ngoal (1 subgoal):\n 1. action_needed_asses a (system_needed_asses PROB s) =\n    action_needed_asses a s", "}"], ["proof (state)\nthis:\n  fmrestrict_set (action_needed_vars a s)\n   (fmrestrict_set (system_needed_vars PROB s) s) =\n  fmrestrict_set (action_needed_vars a s) s\n\ngoal (1 subgoal):\n 1. action_needed_asses a (system_needed_asses PROB s) =\n    action_needed_asses a s", "moreover"], ["proof (state)\nthis:\n  fmrestrict_set (action_needed_vars a s)\n   (fmrestrict_set (system_needed_vars PROB s) s) =\n  fmrestrict_set (action_needed_vars a s) s\n\ngoal (1 subgoal):\n 1. action_needed_asses a (system_needed_asses PROB s) =\n    action_needed_asses a s", "{"], ["proof (state)\nthis:\n  fmrestrict_set (action_needed_vars a s)\n   (fmrestrict_set (system_needed_vars PROB s) s) =\n  fmrestrict_set (action_needed_vars a s) s\n\ngoal (1 subgoal):\n 1. action_needed_asses a (system_needed_asses PROB s) =\n    action_needed_asses a s", "have\n      \"action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) = action_needed_vars a s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "using system_needed_asses_include_action_needed_asses_1[OF assms]"], ["proof (prove)\nusing this:\n  action_needed_vars a (fmrestrict_set (system_needed_vars PROB ?s) ?s) =\n  action_needed_vars a ?s\n\ngoal (1 subgoal):\n 1. action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n    action_needed_vars a s", "by simp"], ["proof (state)\nthis:\n  action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n  action_needed_vars a s\n\ngoal (1 subgoal):\n 1. action_needed_asses a (system_needed_asses PROB s) =\n    action_needed_asses a s", "then"], ["proof (chain)\npicking this:\n  action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n  action_needed_vars a s", "have \"fmrestrict_set (action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s))\n        (fmrestrict_set (system_needed_vars PROB s) s) =\n        fmrestrict_set (action_needed_vars a s) s\n        \\<longleftrightarrow> fmrestrict_set (action_needed_vars a s) (fmrestrict_set (system_needed_vars PROB s) s) =\n            fmrestrict_set (action_needed_vars a s) s\""], ["proof (prove)\nusing this:\n  action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s) =\n  action_needed_vars a s\n\ngoal (1 subgoal):\n 1. (fmrestrict_set\n      (action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s))\n      (fmrestrict_set (system_needed_vars PROB s) s) =\n     fmrestrict_set (action_needed_vars a s) s) =\n    (fmrestrict_set (action_needed_vars a s)\n      (fmrestrict_set (system_needed_vars PROB s) s) =\n     fmrestrict_set (action_needed_vars a s) s)", "by simp"], ["proof (state)\nthis:\n  (fmrestrict_set\n    (action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s))\n    (fmrestrict_set (system_needed_vars PROB s) s) =\n   fmrestrict_set (action_needed_vars a s) s) =\n  (fmrestrict_set (action_needed_vars a s)\n    (fmrestrict_set (system_needed_vars PROB s) s) =\n   fmrestrict_set (action_needed_vars a s) s)\n\ngoal (1 subgoal):\n 1. action_needed_asses a (system_needed_asses PROB s) =\n    action_needed_asses a s", "}"], ["proof (state)\nthis:\n  (fmrestrict_set\n    (action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s))\n    (fmrestrict_set (system_needed_vars PROB s) s) =\n   fmrestrict_set (action_needed_vars a s) s) =\n  (fmrestrict_set (action_needed_vars a s)\n    (fmrestrict_set (system_needed_vars PROB s) s) =\n   fmrestrict_set (action_needed_vars a s) s)\n\ngoal (1 subgoal):\n 1. action_needed_asses a (system_needed_asses PROB s) =\n    action_needed_asses a s", "ultimately"], ["proof (chain)\npicking this:\n  fmrestrict_set (action_needed_vars a s)\n   (fmrestrict_set (system_needed_vars PROB s) s) =\n  fmrestrict_set (action_needed_vars a s) s\n  (fmrestrict_set\n    (action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s))\n    (fmrestrict_set (system_needed_vars PROB s) s) =\n   fmrestrict_set (action_needed_vars a s) s) =\n  (fmrestrict_set (action_needed_vars a s)\n    (fmrestrict_set (system_needed_vars PROB s) s) =\n   fmrestrict_set (action_needed_vars a s) s)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set (action_needed_vars a s)\n   (fmrestrict_set (system_needed_vars PROB s) s) =\n  fmrestrict_set (action_needed_vars a s) s\n  (fmrestrict_set\n    (action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s))\n    (fmrestrict_set (system_needed_vars PROB s) s) =\n   fmrestrict_set (action_needed_vars a s) s) =\n  (fmrestrict_set (action_needed_vars a s)\n    (fmrestrict_set (system_needed_vars PROB s) s) =\n   fmrestrict_set (action_needed_vars a s) s)\n\ngoal (1 subgoal):\n 1. action_needed_asses a (system_needed_asses PROB s) =\n    action_needed_asses a s", "unfolding  action_needed_asses_def system_needed_asses_def"], ["proof (prove)\nusing this:\n  fmrestrict_set (action_needed_vars a s)\n   (fmrestrict_set (system_needed_vars PROB s) s) =\n  fmrestrict_set (action_needed_vars a s) s\n  (fmrestrict_set\n    (action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s))\n    (fmrestrict_set (system_needed_vars PROB s) s) =\n   fmrestrict_set (action_needed_vars a s) s) =\n  (fmrestrict_set (action_needed_vars a s)\n    (fmrestrict_set (system_needed_vars PROB s) s) =\n   fmrestrict_set (action_needed_vars a s) s)\n\ngoal (1 subgoal):\n 1. fmrestrict_set\n     (action_needed_vars a (fmrestrict_set (system_needed_vars PROB s) s))\n     (fmrestrict_set (system_needed_vars PROB s) s) =\n    fmrestrict_set (action_needed_vars a s) s", "by simp"], ["proof (state)\nthis:\n  action_needed_asses a (system_needed_asses PROB s) =\n  action_needed_asses a s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma system_needed_asses_submap:\n  \"system_needed_asses PROB s \\<subseteq>\\<^sub>f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. system_needed_asses PROB s \\<subseteq>\\<^sub>f s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. system_needed_asses PROB s \\<subseteq>\\<^sub>f s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. system_needed_asses PROB s \\<subseteq>\\<^sub>f s", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. system_needed_asses PROB s \\<subseteq>\\<^sub>f s", "assume P: \"x\\<in> dom (fmlookup (system_needed_asses PROB s))\""], ["proof (state)\nthis:\n  x \\<in> dom (fmlookup (system_needed_asses PROB s))\n\ngoal (1 subgoal):\n 1. system_needed_asses PROB s \\<subseteq>\\<^sub>f s", "then"], ["proof (chain)\npicking this:\n  x \\<in> dom (fmlookup (system_needed_asses PROB s))", "have \"system_needed_asses PROB s = (fmrestrict_set (system_needed_vars PROB s) s)\""], ["proof (prove)\nusing this:\n  x \\<in> dom (fmlookup (system_needed_asses PROB s))\n\ngoal (1 subgoal):\n 1. system_needed_asses PROB s =\n    fmrestrict_set (system_needed_vars PROB s) s", "by (simp add: system_needed_asses_def)"], ["proof (state)\nthis:\n  system_needed_asses PROB s = fmrestrict_set (system_needed_vars PROB s) s\n\ngoal (1 subgoal):\n 1. system_needed_asses PROB s \\<subseteq>\\<^sub>f s", "then"], ["proof (chain)\npicking this:\n  system_needed_asses PROB s = fmrestrict_set (system_needed_vars PROB s) s", "have \"fmlookup (system_needed_asses PROB s) x = fmlookup s x\""], ["proof (prove)\nusing this:\n  system_needed_asses PROB s = fmrestrict_set (system_needed_vars PROB s) s\n\ngoal (1 subgoal):\n 1. fmlookup (system_needed_asses PROB s) x = fmlookup s x", "using P"], ["proof (prove)\nusing this:\n  system_needed_asses PROB s = fmrestrict_set (system_needed_vars PROB s) s\n  x \\<in> dom (fmlookup (system_needed_asses PROB s))\n\ngoal (1 subgoal):\n 1. fmlookup (system_needed_asses PROB s) x = fmlookup s x", "by (auto simp: fmdom'_restrict_set_precise)"], ["proof (state)\nthis:\n  fmlookup (system_needed_asses PROB s) x = fmlookup s x\n\ngoal (1 subgoal):\n 1. system_needed_asses PROB s \\<subseteq>\\<^sub>f s", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> dom (fmlookup (system_needed_asses PROB s)) \\<Longrightarrow>\n  fmlookup (system_needed_asses PROB s) ?x2 = fmlookup s ?x2\n\ngoal (1 subgoal):\n 1. system_needed_asses PROB s \\<subseteq>\\<^sub>f s", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> dom (fmlookup (system_needed_asses PROB s)) \\<Longrightarrow>\n  fmlookup (system_needed_asses PROB s) ?x2 = fmlookup s ?x2", "have \"fmlookup (system_needed_asses PROB s) \\<subseteq>\\<^sub>m fmlookup s\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> dom (fmlookup (system_needed_asses PROB s)) \\<Longrightarrow>\n  fmlookup (system_needed_asses PROB s) ?x2 = fmlookup s ?x2\n\ngoal (1 subgoal):\n 1. fmlookup (system_needed_asses PROB s) \\<subseteq>\\<^sub>m fmlookup s", "using map_le_def"], ["proof (prove)\nusing this:\n  ?x2 \\<in> dom (fmlookup (system_needed_asses PROB s)) \\<Longrightarrow>\n  fmlookup (system_needed_asses PROB s) ?x2 = fmlookup s ?x2\n  (?m\\<^sub>1 \\<subseteq>\\<^sub>m ?m\\<^sub>2) =\n  (\\<forall>a\\<in>dom ?m\\<^sub>1. ?m\\<^sub>1 a = ?m\\<^sub>2 a)\n\ngoal (1 subgoal):\n 1. fmlookup (system_needed_asses PROB s) \\<subseteq>\\<^sub>m fmlookup s", "by blast"], ["proof (state)\nthis:\n  fmlookup (system_needed_asses PROB s) \\<subseteq>\\<^sub>m fmlookup s\n\ngoal (1 subgoal):\n 1. system_needed_asses PROB s \\<subseteq>\\<^sub>f s", "then"], ["proof (chain)\npicking this:\n  fmlookup (system_needed_asses PROB s) \\<subseteq>\\<^sub>m fmlookup s", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (system_needed_asses PROB s) \\<subseteq>\\<^sub>m fmlookup s\n\ngoal (1 subgoal):\n 1. system_needed_asses PROB s \\<subseteq>\\<^sub>f s", "using fmsubset.rep_eq"], ["proof (prove)\nusing this:\n  fmlookup (system_needed_asses PROB s) \\<subseteq>\\<^sub>m fmlookup s\n  (?x \\<subseteq>\\<^sub>f ?xa) =\n  (fmlookup ?x \\<subseteq>\\<^sub>m fmlookup ?xa)\n\ngoal (1 subgoal):\n 1. system_needed_asses PROB s \\<subseteq>\\<^sub>f s", "by fast"], ["proof (state)\nthis:\n  system_needed_asses PROB s \\<subseteq>\\<^sub>f s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma as_works_from_system_needed_asses:\n  assumes \"(as \\<in> valid_plans PROB)\"\n  shows \"(exec_plan (system_needed_asses PROB s) as \\<subseteq>\\<^sub>f exec_plan s as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan (system_needed_asses PROB s) as \\<subseteq>\\<^sub>f\n    exec_plan s as", "using assms"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. exec_plan (system_needed_asses PROB s) as \\<subseteq>\\<^sub>f\n    exec_plan s as", "by (metis\n      action_needed_asses_def\n      as_needed_asses_submap_exec\n      fmsubset_restrict_set_mono system_needed_asses_def\n      system_needed_asses_include_action_needed_asses\n      system_needed_asses_include_action_needed_asses_1\n      system_needed_asses_submap\n      valid_plan_mems\n      )"], ["", "end"]]}