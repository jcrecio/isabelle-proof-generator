{"file_name": "/home/qj213/afp-2021-10-22/thys/Factored_Transition_System_Bounding/FSSublist.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Factored_Transition_System_Bounding", "problem_names": ["lemma sublist_HOL4_equiv_subseq:\n  fixes l1 l2\n  shows \"sublist_HOL4 l1 l2 \\<longleftrightarrow> subseq l1 l2\"", "lemma list_frag_HOL4_equiv_sublist:\n  shows \"list_frag_HOL4 l l' \\<longleftrightarrow> sublist l' l\"", "lemma sublist_EQNS: \n  \"subseq [] l = True\" \n  \"subseq (h # t) [] = False\"", "lemma sublist_refl: \"subseq l l\"", "lemma sublist_cons: \n  assumes \"subseq l1 l2\"\n  shows \"subseq l1 (h # l2)\"", "lemma sublist_NIL: \"subseq l1 [] = (l1 = [])\"", "lemma sublist_trans: \n  fixes l1 l2\n  assumes \"subseq l1 l2\" \"subseq l2 l3\" \n  shows \"subseq l1 l3\"", "lemma sublist_length:\n  fixes l l'\n  assumes \"subseq l l'\"\n  shows \"length l \\<le> length l'\"", "lemma sublist_CONS1_E: \n  fixes l1 l2\n  assumes \"subseq (h # l1) l2\"\n  shows \"subseq l1 l2\"", "lemma sublist_equal_lengths: \n  fixes l1 l2\n  assumes \"subseq l1 l2\" \"(length l1 = length l2)\"\n  shows \"(l1 = l2)\"", "lemma sublist_antisym: \n  assumes \"subseq l1 l2\" \"subseq l2 l1\"\n  shows \"(l1 = l2)\"", "lemma sublist_append_back: \n  fixes l1 l2 \n  shows \"subseq l1 (l2 @ l1)\"", "lemma sublist_snoc: \n  fixes l1 l2 \n  assumes \"subseq l1 l2\"\n  shows \"subseq l1 (l2 @ [h])\"", "lemma sublist_append_front: \n  fixes l1 l2\n  shows \"subseq l1 (l1 @ l2)\"", "lemma append_sublist_1: \n  assumes \"subseq (l1 @ l2) l\"\n  shows \"subseq l1 l \\<and> subseq l2 l\"", "lemma sublist_prefix:  \n  shows \"subseq (h # l1) l2 \\<Longrightarrow> \\<exists>l2a l2b. l2 = l2a @ [h] @ l2b \\<and> \\<not>ListMem h l2a\"", "lemma sublist_skip: \n  fixes l1 l2 h l1'\n  assumes \"l1 = (h # l1')\" \"l2 = l2a @ [h] @ l2b\" \"subseq l1 l2\" \"\\<not>(ListMem h l2a)\"\n  shows \"subseq l1 (h # l2b)\"", "lemma sublist_split_trans:\n  fixes l1 l2 h l1'\n  assumes \"l1 = (h # l1')\" \"l2 = l2a @ [h] @ l2b\" \"subseq l1 l2\" \"\\<not>(ListMem h l2a)\"\n  shows \"subseq l1' l2b\"", "lemma sublist_cons_exists: \n  shows \"\n    subseq (h # l1) l2 \n    \\<longleftrightarrow> (\\<exists>l2a l2b. (l2 = l2a @ [h] @ l2b) \\<and> \\<not>ListMem h l2a \\<and> subseq l1 l2b)\n  \"", "lemma sublist_append_exists: \n  fixes l1 l2 \n  shows \"subseq (l1 @ l2) l3 \\<Longrightarrow> \\<exists>l3a l3b. (l3 = l3a @ l3b) \\<and> subseq l1 l3a \\<and> subseq l2 l3b\"", "lemma sublist_append_both_I: \n  assumes \"subseq a b\" \"subseq c d\"\n  shows \"subseq (a @ c) (b @ d)\"", "lemma sublist_append: \n  assumes \"subseq l1 l1'\" \"subseq l2 l2'\"\n  shows \"subseq (l1 @ l2) (l1' @ l2')\"", "lemma sublist_append2: \n  assumes \"subseq l1 l2\"\n  shows \"subseq l1 (l2 @ l3)\"", "lemma append_sublist: \n  shows \"subseq (l1 @ l2 @ l3) l \\<Longrightarrow> subseq (l1 @ l3) l\"", "lemma sublist_subset: \n  assumes \"subseq l1 l2\"\n  shows \"set l1 \\<subseteq> set l2\"", "lemma sublist_filter: \n  fixes P l \n  shows \"subseq (filter P l) l\"", "lemma sublist_cons_2: \n  fixes l1 l2 h\n  shows \"(subseq (h # l1) (h # l2) \\<longleftrightarrow> (subseq l1 l2))\"", "lemma sublist_every: \n  fixes l1 l2 P\n  assumes \"(subseq l1 l2 \\<and> list_all P l2)\"\n  shows \"list_all P l1\"", "lemma sublist_SING_MEM: \"subseq [h] l \\<longleftrightarrow> ListMem h l\"", "lemma sublist_append_exists_2: \n  fixes l1 l2 l3\n  assumes \"subseq (h # l1) l2\"\n  shows \"(\\<exists>l3 l4. (l2 = l3 @ [h] @ l4) \\<and> (subseq l1 l4))\"", "lemma sublist_append_4: \n  fixes l l1 l2 h\n  assumes \"(subseq (h # l) (l1 @ [h] @ l2))\" \"(list_all (\\<lambda>x. \\<not>(h = x)) l1)\"\n  shows \"subseq l l2\"", "lemma sublist_append_5: \n  fixes l l1 l2 h\n  assumes \"(subseq (h # l) (l1 @ l2))\" \"(list_all (\\<lambda>x. \\<not>(h = x)) l1)\"\n  shows \"subseq (h # l) l2\"", "lemma sublist_append_6: \n  fixes l l1 l2 h\n  assumes \"(subseq (h # l) (l1 @ l2))\" \"(\\<not>(ListMem h l1))\"\n  shows \"subseq (h # l) l2\"", "lemma sublist_MEM: \n  fixes h l1 l2 \n  shows \"subseq (h # l1) l2 \\<Longrightarrow> ListMem h l2\"", "lemma sublist_cons_4: \n  fixes l h l'\n  shows \"subseq l l' \\<Longrightarrow> subseq l (h # l')\"", "theorem sublist_imp_len_filter_le: \n  fixes P l l'\n  assumes \"subseq l' l\" \n  shows \"length (filter P l') \\<le> length (filter P l)\"", "theorem list_with_three_types_shorten_type2: \n  fixes P1 P2 P3 k1 f PProbs PProbl s l\n  assumes \"(PProbs s)\" \"(PProbl l)\" \n    \"(\\<forall>l s. \n      (PProbs s)\n      \\<and> (PProbl l)\n      \\<and> (list_all P1 l) \n      \\<longrightarrow> (\\<exists>l'. \n          (f s l' = f s l) \n          \\<and> (length (filter P2 l') \\<le> k1)\n          \\<and> (length (filter P3 l') \\<le> length (filter P3 l))\n          \\<and> (list_all P1 l')\n          \\<and> (subseq l' l)\n      )\n    )\" \n    \"(\\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2))\" \n    \"(\\<forall>s l. (PProbs s) \\<and> (PProbl l) \\<longrightarrow> (PProbs (f s l)))\" \n    \"(\\<forall>l1 l2. (subseq l1 l2) \\<and> (PProbl l2) \\<longrightarrow> (PProbl l1))\" \n    \"(\\<forall>l1 l2. PProbl (l1 @ l2) \\<longleftrightarrow> (PProbl l1 \\<and> PProbl l2))\" \n  shows \"(\\<exists>l'. \n    (f s l' = f s l)\n    \\<and> (length (filter P3 l') \\<le> length (filter P3 l)) \n    \\<and> (\\<forall>l''. \n      (sublist l'' l') \\<and> (list_all P1 l'')\n       \\<longrightarrow> (length (filter P2 l'') \\<le> k1)\n    )\n    \\<and> (subseq l' l)\n  )\"", "lemma isPREFIX_sublist: \n  fixes x y\n  assumes \"prefix x y\"\n  shows \"subseq x y\""], "translations": [["", "lemma sublist_HOL4_equiv_subseq:\n  fixes l1 l2\n  shows \"sublist_HOL4 l1 l2 \\<longleftrightarrow> subseq l1 l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sublist_HOL4 l1 l2 = subseq l1 l2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sublist_HOL4 l1 l2 = subseq l1 l2", "have \"subseq l1 l2 = list_emb (\\<lambda>x y. x = y) l1 l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l1 l2 = subseq l1 l2", "by blast"], ["proof (state)\nthis:\n  subseq l1 l2 = subseq l1 l2\n\ngoal (1 subgoal):\n 1. sublist_HOL4 l1 l2 = subseq l1 l2", "moreover"], ["proof (state)\nthis:\n  subseq l1 l2 = subseq l1 l2\n\ngoal (1 subgoal):\n 1. sublist_HOL4 l1 l2 = subseq l1 l2", "{"], ["proof (state)\nthis:\n  subseq l1 l2 = subseq l1 l2\n\ngoal (1 subgoal):\n 1. sublist_HOL4 l1 l2 = subseq l1 l2", "have \"sublist_HOL4 l1 l2 \\<longleftrightarrow> list_emb (\\<lambda>x y. x = y) l1 l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sublist_HOL4 l1 l2 = subseq l1 l2", "proof (induction rule: sublist_HOL4.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>l1. sublist_HOL4 [] l1 = subseq [] l1\n 2. \\<And>h t. sublist_HOL4 (h # t) [] = subseq (h # t) []\n 3. \\<And>x l1 y l2.\n       \\<lbrakk>sublist_HOL4 l1 l2 = subseq l1 l2;\n        sublist_HOL4 (x # l1) l2 = subseq (x # l1) l2\\<rbrakk>\n       \\<Longrightarrow> sublist_HOL4 (x # l1) (y # l2) =\n                         subseq (x # l1) (y # l2)", "case (3 x l1 y l2)"], ["proof (state)\nthis:\n  sublist_HOL4 l1 l2 = subseq l1 l2\n  sublist_HOL4 (x # l1) l2 = subseq (x # l1) l2\n\ngoal (3 subgoals):\n 1. \\<And>l1. sublist_HOL4 [] l1 = subseq [] l1\n 2. \\<And>h t. sublist_HOL4 (h # t) [] = subseq (h # t) []\n 3. \\<And>x l1 y l2.\n       \\<lbrakk>sublist_HOL4 l1 l2 = subseq l1 l2;\n        sublist_HOL4 (x # l1) l2 = subseq (x # l1) l2\\<rbrakk>\n       \\<Longrightarrow> sublist_HOL4 (x # l1) (y # l2) =\n                         subseq (x # l1) (y # l2)", "then"], ["proof (chain)\npicking this:\n  sublist_HOL4 l1 l2 = subseq l1 l2\n  sublist_HOL4 (x # l1) l2 = subseq (x # l1) l2", "show \"sublist_HOL4 (x # l1) (y # l2) \\<longleftrightarrow> list_emb (\\<lambda>x y. x = y) (x # l1) (y # l2)\""], ["proof (prove)\nusing this:\n  sublist_HOL4 l1 l2 = subseq l1 l2\n  sublist_HOL4 (x # l1) l2 = subseq (x # l1) l2\n\ngoal (1 subgoal):\n 1. sublist_HOL4 (x # l1) (y # l2) = subseq (x # l1) (y # l2)", "proof (cases \"x = y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>sublist_HOL4 l1 l2 = subseq l1 l2;\n     sublist_HOL4 (x # l1) l2 = subseq (x # l1) l2; x = y\\<rbrakk>\n    \\<Longrightarrow> sublist_HOL4 (x # l1) (y # l2) =\n                      subseq (x # l1) (y # l2)\n 2. \\<lbrakk>sublist_HOL4 l1 l2 = subseq l1 l2;\n     sublist_HOL4 (x # l1) l2 = subseq (x # l1) l2; x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> sublist_HOL4 (x # l1) (y # l2) =\n                      subseq (x # l1) (y # l2)", "case True"], ["proof (state)\nthis:\n  x = y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sublist_HOL4 l1 l2 = subseq l1 l2;\n     sublist_HOL4 (x # l1) l2 = subseq (x # l1) l2; x = y\\<rbrakk>\n    \\<Longrightarrow> sublist_HOL4 (x # l1) (y # l2) =\n                      subseq (x # l1) (y # l2)\n 2. \\<lbrakk>sublist_HOL4 l1 l2 = subseq l1 l2;\n     sublist_HOL4 (x # l1) l2 = subseq (x # l1) l2; x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> sublist_HOL4 (x # l1) (y # l2) =\n                      subseq (x # l1) (y # l2)", "then"], ["proof (chain)\npicking this:\n  x = y", "show ?thesis"], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. sublist_HOL4 (x # l1) (y # l2) = subseq (x # l1) (y # l2)", "using \"3.IH\"(1, 2)"], ["proof (prove)\nusing this:\n  x = y\n  sublist_HOL4 l1 l2 = subseq l1 l2\n  sublist_HOL4 (x # l1) l2 = subseq (x # l1) l2\n\ngoal (1 subgoal):\n 1. sublist_HOL4 (x # l1) (y # l2) = subseq (x # l1) (y # l2)", "by (metis sublist_HOL4.simps(3) subseq_Cons' subseq_Cons2_iff)"], ["proof (state)\nthis:\n  sublist_HOL4 (x # l1) (y # l2) = subseq (x # l1) (y # l2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sublist_HOL4 l1 l2 = subseq l1 l2;\n     sublist_HOL4 (x # l1) l2 = subseq (x # l1) l2; x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> sublist_HOL4 (x # l1) (y # l2) =\n                      subseq (x # l1) (y # l2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>sublist_HOL4 l1 l2 = subseq l1 l2;\n     sublist_HOL4 (x # l1) l2 = subseq (x # l1) l2; x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> sublist_HOL4 (x # l1) (y # l2) =\n                      subseq (x # l1) (y # l2)", "case False"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sublist_HOL4 l1 l2 = subseq l1 l2;\n     sublist_HOL4 (x # l1) l2 = subseq (x # l1) l2; x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> sublist_HOL4 (x # l1) (y # l2) =\n                      subseq (x # l1) (y # l2)", "then"], ["proof (chain)\npicking this:\n  x \\<noteq> y", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. sublist_HOL4 (x # l1) (y # l2) = subseq (x # l1) (y # l2)", "using \"3.IH\"(2)"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  sublist_HOL4 (x # l1) l2 = subseq (x # l1) l2\n\ngoal (1 subgoal):\n 1. sublist_HOL4 (x # l1) (y # l2) = subseq (x # l1) (y # l2)", "by force"], ["proof (state)\nthis:\n  sublist_HOL4 (x # l1) (y # l2) = subseq (x # l1) (y # l2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sublist_HOL4 (x # l1) (y # l2) = subseq (x # l1) (y # l2)\n\ngoal (2 subgoals):\n 1. \\<And>l1. sublist_HOL4 [] l1 = subseq [] l1\n 2. \\<And>h t. sublist_HOL4 (h # t) [] = subseq (h # t) []", "qed simp+"], ["proof (state)\nthis:\n  sublist_HOL4 l1 l2 = subseq l1 l2\n\ngoal (1 subgoal):\n 1. sublist_HOL4 l1 l2 = subseq l1 l2", "}"], ["proof (state)\nthis:\n  sublist_HOL4 l1 l2 = subseq l1 l2\n\ngoal (1 subgoal):\n 1. sublist_HOL4 l1 l2 = subseq l1 l2", "ultimately"], ["proof (chain)\npicking this:\n  subseq l1 l2 = subseq l1 l2\n  sublist_HOL4 l1 l2 = subseq l1 l2", "show ?thesis"], ["proof (prove)\nusing this:\n  subseq l1 l2 = subseq l1 l2\n  sublist_HOL4 l1 l2 = subseq l1 l2\n\ngoal (1 subgoal):\n 1. sublist_HOL4 l1 l2 = subseq l1 l2", "by blast"], ["proof (state)\nthis:\n  sublist_HOL4 l1 l2 = subseq l1 l2\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open> Likewise as with `sublist` and `subseq`, the HOL4 definition of `list\\_frag` \n(list\\_utilsScript.sml:207) has a an Isabelle/HOL counterpart in `sublist` (Sublist.thy:1124).\n\nThe equivalence claim is proven in the technical lemma `list\\_frag\\_HOL4\\_equiv\\_sublist`. Note that\n`sublist` reverses the argument order of `list\\_frag`. Other than that, both definitions are\nsyntactically identical. \\<close>"], ["", "definition list_frag_HOL4 where\n  \"list_frag_HOL4 l frag \\<equiv> \\<exists>pfx sfx. pfx @ frag @ sfx = l\""], ["", "lemma list_frag_HOL4_equiv_sublist:\n  shows \"list_frag_HOL4 l l' \\<longleftrightarrow> sublist l' l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_frag_HOL4 l l' = sublist l' l", "unfolding list_frag_HOL4_def sublist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>pfx sfx. pfx @ l' @ sfx = l) =\n    (\\<exists>ps ss. l = ps @ l' @ ss)", "by blast"], ["", "text \\<open> Given these equivalences, occurences of `sublist` and `list\\_frag` in the original HOL4 \nsource are now always translated directly to `subseq` and `sublist` respectively.\n\nThe remainer of this subsection is concerned with characterizations of `sublist`/ `subseq`. \\<close>"], ["", "lemma sublist_EQNS: \n  \"subseq [] l = True\" \n  \"subseq (h # t) [] = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq [] l = True &&& subseq (h # t) [] = False", "by auto"], ["", "lemma sublist_refl: \"subseq l l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l l", "by auto"], ["", "lemma sublist_cons: \n  assumes \"subseq l1 l2\"\n  shows \"subseq l1 (h # l2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l1 (h # l2)", "using assms"], ["proof (prove)\nusing this:\n  subseq l1 l2\n\ngoal (1 subgoal):\n 1. subseq l1 (h # l2)", "by blast"], ["", "lemma sublist_NIL: \"subseq l1 [] = (l1 = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l1 [] = (l1 = [])", "by fastforce"], ["", "lemma sublist_trans: \n  fixes l1 l2\n  assumes \"subseq l1 l2\" \"subseq l2 l3\" \n  shows \"subseq l1 l3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l1 l3", "using assms"], ["proof (prove)\nusing this:\n  subseq l1 l2\n  subseq l2 l3\n\ngoal (1 subgoal):\n 1. subseq l1 l3", "by force \n\n\n\\<comment> \\<open>NOTE can be solved directly with 'list\\_emb\\_length'.\\<close>"], ["", "lemma sublist_length:\n  fixes l l'\n  assumes \"subseq l l'\"\n  shows \"length l \\<le> length l'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length l \\<le> length l'", "using assms list_emb_length"], ["proof (prove)\nusing this:\n  subseq l l'\n  list_emb ?P ?xs ?ys \\<Longrightarrow> length ?xs \\<le> length ?ys\n\ngoal (1 subgoal):\n 1. length l \\<le> length l'", "by blast \n\n\n\\<comment> \\<open>NOTE can be solved directly with subseq\\_Cons'.\\<close>"], ["", "lemma sublist_CONS1_E: \n  fixes l1 l2\n  assumes \"subseq (h # l1) l2\"\n  shows \"subseq l1 l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l1 l2", "using assms subseq_Cons'"], ["proof (prove)\nusing this:\n  subseq (h # l1) l2\n  subseq (?x # ?xs) ?ys \\<Longrightarrow> subseq ?xs ?ys\n\ngoal (1 subgoal):\n 1. subseq l1 l2", "by metis"], ["", "lemma sublist_equal_lengths: \n  fixes l1 l2\n  assumes \"subseq l1 l2\" \"(length l1 = length l2)\"\n  shows \"(l1 = l2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l1 = l2", "using assms subseq_same_length"], ["proof (prove)\nusing this:\n  subseq l1 l2\n  length l1 = length l2\n  \\<lbrakk>subseq ?xs ?ys; length ?xs = length ?ys\\<rbrakk>\n  \\<Longrightarrow> ?xs = ?ys\n\ngoal (1 subgoal):\n 1. l1 = l2", "by blast\n\n\n\\<comment> \\<open>NOTE can be solved directly with 'subseq\\_order.antisym'.\\<close>"], ["", "lemma sublist_antisym: \n  assumes \"subseq l1 l2\" \"subseq l2 l1\"\n  shows \"(l1 = l2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l1 = l2", "using assms subseq_order.antisym"], ["proof (prove)\nusing this:\n  subseq l1 l2\n  subseq l2 l1\n  \\<lbrakk>subseq ?x ?y; subseq ?y ?x\\<rbrakk> \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. l1 = l2", "by blast"], ["", "lemma sublist_append_back: \n  fixes l1 l2 \n  shows \"subseq l1 (l2 @ l1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l1 (l2 @ l1)", "by blast\n\n\n\\<comment> \\<open>NOTE can be solved directly with 'subseq\\_rev\\_drop\\_many'.\\<close>"], ["", "lemma sublist_snoc: \n  fixes l1 l2 \n  assumes \"subseq l1 l2\"\n  shows \"subseq l1 (l2 @ [h])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l1 (l2 @ [h])", "using assms subseq_rev_drop_many"], ["proof (prove)\nusing this:\n  subseq l1 l2\n  subseq ?xs ?ys \\<Longrightarrow> subseq ?xs (?ys @ ?zs)\n\ngoal (1 subgoal):\n 1. subseq l1 (l2 @ [h])", "by blast"], ["", "lemma sublist_append_front: \n  fixes l1 l2\n  shows \"subseq l1 (l1 @ l2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l1 (l1 @ l2)", "by fast"], ["", "lemma append_sublist_1: \n  assumes \"subseq (l1 @ l2) l\"\n  shows \"subseq l1 l \\<and> subseq l2 l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l1 l \\<and> subseq l2 l", "using assms sublist_append_back sublist_append_front sublist_trans"], ["proof (prove)\nusing this:\n  subseq (l1 @ l2) l\n  subseq ?l1.0 (?l2.0 @ ?l1.0)\n  subseq ?l1.0 (?l1.0 @ ?l2.0)\n  \\<lbrakk>subseq ?l1.0 ?l2.0; subseq ?l2.0 ?l3.0\\<rbrakk>\n  \\<Longrightarrow> subseq ?l1.0 ?l3.0\n\ngoal (1 subgoal):\n 1. subseq l1 l \\<and> subseq l2 l", "by blast \n\n\n\\<comment> \\<open>NOTE added lemma (eventually wasn't needed in the remaining proofs).\\<close>"], ["", "lemma sublist_prefix:  \n  shows \"subseq (h # l1) l2 \\<Longrightarrow> \\<exists>l2a l2b. l2 = l2a @ [h] @ l2b \\<and> \\<not>ListMem h l2a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (h # l1) l2 \\<Longrightarrow>\n    \\<exists>l2a l2b. l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a", "proof (induction l2 arbitrary: h l1)\n  \\<comment> \\<open>NOTE l2 cannot be empty when @{term \"(h # l1)\"} isn't.\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>h l1.\n       subseq (h # l1) [] \\<Longrightarrow>\n       \\<exists>l2a l2b. [] = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a\n 2. \\<And>a l2 h l1.\n       \\<lbrakk>\\<And>h l1.\n                   subseq (h # l1) l2 \\<Longrightarrow>\n                   \\<exists>l2a l2b.\n                      l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a;\n        subseq (h # l1) (a # l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l2a l2b.\n                            a # l2 = l2a @ [h] @ l2b \\<and>\n                            \\<not> ListMem h l2a", "case Nil"], ["proof (state)\nthis:\n  subseq (h # l1) []\n\ngoal (2 subgoals):\n 1. \\<And>h l1.\n       subseq (h # l1) [] \\<Longrightarrow>\n       \\<exists>l2a l2b. [] = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a\n 2. \\<And>a l2 h l1.\n       \\<lbrakk>\\<And>h l1.\n                   subseq (h # l1) l2 \\<Longrightarrow>\n                   \\<exists>l2a l2b.\n                      l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a;\n        subseq (h # l1) (a # l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l2a l2b.\n                            a # l2 = l2a @ [h] @ l2b \\<and>\n                            \\<not> ListMem h l2a", "have \"\\<not>(subseq (h # l1) [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> subseq (h # l1) []", "by simp"], ["proof (state)\nthis:\n  \\<not> subseq (h # l1) []\n\ngoal (2 subgoals):\n 1. \\<And>h l1.\n       subseq (h # l1) [] \\<Longrightarrow>\n       \\<exists>l2a l2b. [] = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a\n 2. \\<And>a l2 h l1.\n       \\<lbrakk>\\<And>h l1.\n                   subseq (h # l1) l2 \\<Longrightarrow>\n                   \\<exists>l2a l2b.\n                      l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a;\n        subseq (h # l1) (a # l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l2a l2b.\n                            a # l2 = l2a @ [h] @ l2b \\<and>\n                            \\<not> ListMem h l2a", "then"], ["proof (chain)\npicking this:\n  \\<not> subseq (h # l1) []", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> subseq (h # l1) []\n\ngoal (1 subgoal):\n 1. \\<exists>l2a l2b. [] = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a", "using Nil.prems"], ["proof (prove)\nusing this:\n  \\<not> subseq (h # l1) []\n  subseq (h # l1) []\n\ngoal (1 subgoal):\n 1. \\<exists>l2a l2b. [] = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a", "by blast"], ["proof (state)\nthis:\n  \\<exists>l2a l2b. [] = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a\n\ngoal (1 subgoal):\n 1. \\<And>a l2 h l1.\n       \\<lbrakk>\\<And>h l1.\n                   subseq (h # l1) l2 \\<Longrightarrow>\n                   \\<exists>l2a l2b.\n                      l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a;\n        subseq (h # l1) (a # l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l2a l2b.\n                            a # l2 = l2a @ [h] @ l2b \\<and>\n                            \\<not> ListMem h l2a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l2 h l1.\n       \\<lbrakk>\\<And>h l1.\n                   subseq (h # l1) l2 \\<Longrightarrow>\n                   \\<exists>l2a l2b.\n                      l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a;\n        subseq (h # l1) (a # l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l2a l2b.\n                            a # l2 = l2a @ [h] @ l2b \\<and>\n                            \\<not> ListMem h l2a", "case (Cons a l2)"], ["proof (state)\nthis:\n  subseq (?h # ?l1.0) l2 \\<Longrightarrow>\n  \\<exists>l2aa l2b. l2 = l2aa @ [?h] @ l2b \\<and> \\<not> ListMem ?h l2aa\n  subseq (h # l1) (a # l2)\n\ngoal (1 subgoal):\n 1. \\<And>a l2 h l1.\n       \\<lbrakk>\\<And>h l1.\n                   subseq (h # l1) l2 \\<Longrightarrow>\n                   \\<exists>l2a l2b.\n                      l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a;\n        subseq (h # l1) (a # l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l2a l2b.\n                            a # l2 = l2a @ [h] @ l2b \\<and>\n                            \\<not> ListMem h l2a", "then"], ["proof (chain)\npicking this:\n  subseq (?h # ?l1.0) l2 \\<Longrightarrow>\n  \\<exists>l2aa l2b. l2 = l2aa @ [?h] @ l2b \\<and> \\<not> ListMem ?h l2aa\n  subseq (h # l1) (a # l2)", "show ?case"], ["proof (prove)\nusing this:\n  subseq (?h # ?l1.0) l2 \\<Longrightarrow>\n  \\<exists>l2aa l2b. l2 = l2aa @ [?h] @ l2b \\<and> \\<not> ListMem ?h l2aa\n  subseq (h # l1) (a # l2)\n\ngoal (1 subgoal):\n 1. \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa", "proof (cases \"a = h\")\n    \\<comment> \\<open>NOTE If a = h then a trivial solution exists in l2a = [] and l2b = l2.\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>h l1.\n                subseq (h # l1) l2 \\<Longrightarrow>\n                \\<exists>l2aa l2b.\n                   l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa;\n     subseq (h # l1) (a # l2); a = h\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l2aa l2b.\n                         a # l2 = l2aa @ [h] @ l2b \\<and>\n                         \\<not> ListMem h l2aa\n 2. \\<lbrakk>\\<And>h l1.\n                subseq (h # l1) l2 \\<Longrightarrow>\n                \\<exists>l2aa l2b.\n                   l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa;\n     subseq (h # l1) (a # l2); a \\<noteq> h\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l2aa l2b.\n                         a # l2 = l2aa @ [h] @ l2b \\<and>\n                         \\<not> ListMem h l2aa", "case True"], ["proof (state)\nthis:\n  a = h\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>h l1.\n                subseq (h # l1) l2 \\<Longrightarrow>\n                \\<exists>l2aa l2b.\n                   l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa;\n     subseq (h # l1) (a # l2); a = h\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l2aa l2b.\n                         a # l2 = l2aa @ [h] @ l2b \\<and>\n                         \\<not> ListMem h l2aa\n 2. \\<lbrakk>\\<And>h l1.\n                subseq (h # l1) l2 \\<Longrightarrow>\n                \\<exists>l2aa l2b.\n                   l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa;\n     subseq (h # l1) (a # l2); a \\<noteq> h\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l2aa l2b.\n                         a # l2 = l2aa @ [h] @ l2b \\<and>\n                         \\<not> ListMem h l2aa", "then"], ["proof (chain)\npicking this:\n  a = h", "show \"\\<exists> l2a l2b. (Cons a l2) = l2a @ [h] @ l2b \\<and> \\<not>ListMem h l2a\""], ["proof (prove)\nusing this:\n  a = h\n\ngoal (1 subgoal):\n 1. \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa", "using ListMem_iff"], ["proof (prove)\nusing this:\n  a = h\n  ListMem ?x ?xs = (?x \\<in> set ?xs)\n\ngoal (1 subgoal):\n 1. \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa", "by force"], ["proof (state)\nthis:\n  \\<exists>l2aa l2b. a # l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h l1.\n                subseq (h # l1) l2 \\<Longrightarrow>\n                \\<exists>l2aa l2b.\n                   l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa;\n     subseq (h # l1) (a # l2); a \\<noteq> h\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l2aa l2b.\n                         a # l2 = l2aa @ [h] @ l2b \\<and>\n                         \\<not> ListMem h l2aa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h l1.\n                subseq (h # l1) l2 \\<Longrightarrow>\n                \\<exists>l2aa l2b.\n                   l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa;\n     subseq (h # l1) (a # l2); a \\<noteq> h\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l2aa l2b.\n                         a # l2 = l2aa @ [h] @ l2b \\<and>\n                         \\<not> ListMem h l2aa", "case False"], ["proof (state)\nthis:\n  a \\<noteq> h\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h l1.\n                subseq (h # l1) l2 \\<Longrightarrow>\n                \\<exists>l2aa l2b.\n                   l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa;\n     subseq (h # l1) (a # l2); a \\<noteq> h\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l2aa l2b.\n                         a # l2 = l2aa @ [h] @ l2b \\<and>\n                         \\<not> ListMem h l2aa", "have \"subseq (h # l1) l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (h # l1) l2", "using Cons.prems False subseq_Cons2_neq"], ["proof (prove)\nusing this:\n  subseq (h # l1) (a # l2)\n  a \\<noteq> h\n  \\<lbrakk>subseq (?x # ?xs) (?y # ?ys); ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> subseq (?x # ?xs) ?ys\n\ngoal (1 subgoal):\n 1. subseq (h # l1) l2", "by force"], ["proof (state)\nthis:\n  subseq (h # l1) l2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h l1.\n                subseq (h # l1) l2 \\<Longrightarrow>\n                \\<exists>l2aa l2b.\n                   l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa;\n     subseq (h # l1) (a # l2); a \\<noteq> h\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l2aa l2b.\n                         a # l2 = l2aa @ [h] @ l2b \\<and>\n                         \\<not> ListMem h l2aa", "then"], ["proof (chain)\npicking this:\n  subseq (h # l1) l2", "obtain l2a l2b where \"l2 = l2a @ [h] @ l2b\" \"\\<not>ListMem h l2a\""], ["proof (prove)\nusing this:\n  subseq (h # l1) l2\n\ngoal (1 subgoal):\n 1. (\\<And>l2aa l2b.\n        \\<lbrakk>l2 = l2aa @ [h] @ l2b; \\<not> ListMem h l2aa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Cons.IH Cons.prems"], ["proof (prove)\nusing this:\n  subseq (h # l1) l2\n  subseq (?h # ?l1.0) l2 \\<Longrightarrow>\n  \\<exists>l2aa l2b. l2 = l2aa @ [?h] @ l2b \\<and> \\<not> ListMem ?h l2aa\n  subseq (h # l1) (a # l2)\n\ngoal (1 subgoal):\n 1. (\\<And>l2aa l2b.\n        \\<lbrakk>l2 = l2aa @ [h] @ l2b; \\<not> ListMem h l2aa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by meson"], ["proof (state)\nthis:\n  l2 = l2a @ [h] @ l2b\n  \\<not> ListMem h l2a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h l1.\n                subseq (h # l1) l2 \\<Longrightarrow>\n                \\<exists>l2aa l2b.\n                   l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa;\n     subseq (h # l1) (a # l2); a \\<noteq> h\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l2aa l2b.\n                         a # l2 = l2aa @ [h] @ l2b \\<and>\n                         \\<not> ListMem h l2aa", "moreover"], ["proof (state)\nthis:\n  l2 = l2a @ [h] @ l2b\n  \\<not> ListMem h l2a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h l1.\n                subseq (h # l1) l2 \\<Longrightarrow>\n                \\<exists>l2aa l2b.\n                   l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa;\n     subseq (h # l1) (a # l2); a \\<noteq> h\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l2aa l2b.\n                         a # l2 = l2aa @ [h] @ l2b \\<and>\n                         \\<not> ListMem h l2aa", "have \"a # l2 = (a # l2a) @ [h] @ l2b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a # l2 = (a # l2a) @ [h] @ l2b", "using calculation(1)"], ["proof (prove)\nusing this:\n  l2 = l2a @ [h] @ l2b\n\ngoal (1 subgoal):\n 1. a # l2 = (a # l2a) @ [h] @ l2b", "by simp"], ["proof (state)\nthis:\n  a # l2 = (a # l2a) @ [h] @ l2b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h l1.\n                subseq (h # l1) l2 \\<Longrightarrow>\n                \\<exists>l2aa l2b.\n                   l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa;\n     subseq (h # l1) (a # l2); a \\<noteq> h\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l2aa l2b.\n                         a # l2 = l2aa @ [h] @ l2b \\<and>\n                         \\<not> ListMem h l2aa", "moreover"], ["proof (state)\nthis:\n  a # l2 = (a # l2a) @ [h] @ l2b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h l1.\n                subseq (h # l1) l2 \\<Longrightarrow>\n                \\<exists>l2aa l2b.\n                   l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa;\n     subseq (h # l1) (a # l2); a \\<noteq> h\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l2aa l2b.\n                         a # l2 = l2aa @ [h] @ l2b \\<and>\n                         \\<not> ListMem h l2aa", "have \"\\<not>(ListMem h (a # l2a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ListMem h (a # l2a)", "using False calculation(2) ListMem.simps"], ["proof (prove)\nusing this:\n  a \\<noteq> h\n  \\<not> ListMem h l2a\n  ListMem ?a1.0 ?a2.0 =\n  ((\\<exists>x xs. ?a1.0 = x \\<and> ?a2.0 = x # xs) \\<or>\n   (\\<exists>x xs y. ?a1.0 = x \\<and> ?a2.0 = y # xs \\<and> ListMem x xs))\n\ngoal (1 subgoal):\n 1. \\<not> ListMem h (a # l2a)", "by fastforce"], ["proof (state)\nthis:\n  \\<not> ListMem h (a # l2a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>h l1.\n                subseq (h # l1) l2 \\<Longrightarrow>\n                \\<exists>l2aa l2b.\n                   l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa;\n     subseq (h # l1) (a # l2); a \\<noteq> h\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l2aa l2b.\n                         a # l2 = l2aa @ [h] @ l2b \\<and>\n                         \\<not> ListMem h l2aa", "ultimately"], ["proof (chain)\npicking this:\n  l2 = l2a @ [h] @ l2b\n  \\<not> ListMem h l2a\n  a # l2 = (a # l2a) @ [h] @ l2b\n  \\<not> ListMem h (a # l2a)", "show ?thesis"], ["proof (prove)\nusing this:\n  l2 = l2a @ [h] @ l2b\n  \\<not> ListMem h l2a\n  a # l2 = (a # l2a) @ [h] @ l2b\n  \\<not> ListMem h (a # l2a)\n\ngoal (1 subgoal):\n 1. \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa", "by blast"], ["proof (state)\nthis:\n  \\<exists>l2aa l2b. a # l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>l2aa l2b. a # l2 = l2aa @ [h] @ l2b \\<and> \\<not> ListMem h l2aa\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE added lemma (eventually wasn't needed in the remaining proofs).\\<close>"], ["", "lemma sublist_skip: \n  fixes l1 l2 h l1'\n  assumes \"l1 = (h # l1')\" \"l2 = l2a @ [h] @ l2b\" \"subseq l1 l2\" \"\\<not>(ListMem h l2a)\"\n  shows \"subseq l1 (h # l2b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l1 (h # l2b)", "using assms"], ["proof (prove)\nusing this:\n  l1 = h # l1'\n  l2 = l2a @ [h] @ l2b\n  subseq l1 l2\n  \\<not> ListMem h l2a\n\ngoal (1 subgoal):\n 1. subseq l1 (h # l2b)", "proof (induction l2a arbitrary: l1 l2 h l1')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l1 l2 h l1'.\n       \\<lbrakk>l1 = h # l1'; l2 = [] @ [h] @ l2b; subseq l1 l2;\n        \\<not> ListMem h []\\<rbrakk>\n       \\<Longrightarrow> subseq l1 (h # l2b)\n 2. \\<And>a l2a l1 l2 h l1'.\n       \\<lbrakk>\\<And>l1 l2 h l1'.\n                   \\<lbrakk>l1 = h # l1'; l2 = l2a @ [h] @ l2b;\n                    subseq l1 l2; \\<not> ListMem h l2a\\<rbrakk>\n                   \\<Longrightarrow> subseq l1 (h # l2b);\n        l1 = h # l1'; l2 = (a # l2a) @ [h] @ l2b; subseq l1 l2;\n        \\<not> ListMem h (a # l2a)\\<rbrakk>\n       \\<Longrightarrow> subseq l1 (h # l2b)", "case Nil"], ["proof (state)\nthis:\n  l1 = h # l1'\n  l2 = [] @ [h] @ l2b\n  subseq l1 l2\n  \\<not> ListMem h []\n\ngoal (2 subgoals):\n 1. \\<And>l1 l2 h l1'.\n       \\<lbrakk>l1 = h # l1'; l2 = [] @ [h] @ l2b; subseq l1 l2;\n        \\<not> ListMem h []\\<rbrakk>\n       \\<Longrightarrow> subseq l1 (h # l2b)\n 2. \\<And>a l2a l1 l2 h l1'.\n       \\<lbrakk>\\<And>l1 l2 h l1'.\n                   \\<lbrakk>l1 = h # l1'; l2 = l2a @ [h] @ l2b;\n                    subseq l1 l2; \\<not> ListMem h l2a\\<rbrakk>\n                   \\<Longrightarrow> subseq l1 (h # l2b);\n        l1 = h # l1'; l2 = (a # l2a) @ [h] @ l2b; subseq l1 l2;\n        \\<not> ListMem h (a # l2a)\\<rbrakk>\n       \\<Longrightarrow> subseq l1 (h # l2b)", "then"], ["proof (chain)\npicking this:\n  l1 = h # l1'\n  l2 = [] @ [h] @ l2b\n  subseq l1 l2\n  \\<not> ListMem h []", "have \"l2 = h # l2b\""], ["proof (prove)\nusing this:\n  l1 = h # l1'\n  l2 = [] @ [h] @ l2b\n  subseq l1 l2\n  \\<not> ListMem h []\n\ngoal (1 subgoal):\n 1. l2 = h # l2b", "by fastforce"], ["proof (state)\nthis:\n  l2 = h # l2b\n\ngoal (2 subgoals):\n 1. \\<And>l1 l2 h l1'.\n       \\<lbrakk>l1 = h # l1'; l2 = [] @ [h] @ l2b; subseq l1 l2;\n        \\<not> ListMem h []\\<rbrakk>\n       \\<Longrightarrow> subseq l1 (h # l2b)\n 2. \\<And>a l2a l1 l2 h l1'.\n       \\<lbrakk>\\<And>l1 l2 h l1'.\n                   \\<lbrakk>l1 = h # l1'; l2 = l2a @ [h] @ l2b;\n                    subseq l1 l2; \\<not> ListMem h l2a\\<rbrakk>\n                   \\<Longrightarrow> subseq l1 (h # l2b);\n        l1 = h # l1'; l2 = (a # l2a) @ [h] @ l2b; subseq l1 l2;\n        \\<not> ListMem h (a # l2a)\\<rbrakk>\n       \\<Longrightarrow> subseq l1 (h # l2b)", "then"], ["proof (chain)\npicking this:\n  l2 = h # l2b", "show ?case"], ["proof (prove)\nusing this:\n  l2 = h # l2b\n\ngoal (1 subgoal):\n 1. subseq l1 (h # l2b)", "using Nil.prems(3)"], ["proof (prove)\nusing this:\n  l2 = h # l2b\n  subseq l1 l2\n\ngoal (1 subgoal):\n 1. subseq l1 (h # l2b)", "by blast"], ["proof (state)\nthis:\n  subseq l1 (h # l2b)\n\ngoal (1 subgoal):\n 1. \\<And>a l2a l1 l2 h l1'.\n       \\<lbrakk>\\<And>l1 l2 h l1'.\n                   \\<lbrakk>l1 = h # l1'; l2 = l2a @ [h] @ l2b;\n                    subseq l1 l2; \\<not> ListMem h l2a\\<rbrakk>\n                   \\<Longrightarrow> subseq l1 (h # l2b);\n        l1 = h # l1'; l2 = (a # l2a) @ [h] @ l2b; subseq l1 l2;\n        \\<not> ListMem h (a # l2a)\\<rbrakk>\n       \\<Longrightarrow> subseq l1 (h # l2b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l2a l1 l2 h l1'.\n       \\<lbrakk>\\<And>l1 l2 h l1'.\n                   \\<lbrakk>l1 = h # l1'; l2 = l2a @ [h] @ l2b;\n                    subseq l1 l2; \\<not> ListMem h l2a\\<rbrakk>\n                   \\<Longrightarrow> subseq l1 (h # l2b);\n        l1 = h # l1'; l2 = (a # l2a) @ [h] @ l2b; subseq l1 l2;\n        \\<not> ListMem h (a # l2a)\\<rbrakk>\n       \\<Longrightarrow> subseq l1 (h # l2b)", "case (Cons a l2a)"], ["proof (state)\nthis:\n  \\<lbrakk>?l1.0 = ?h # ?l1'; ?l2.0 = l2a @ [?h] @ l2b; subseq ?l1.0 ?l2.0;\n   \\<not> ListMem ?h l2a\\<rbrakk>\n  \\<Longrightarrow> subseq ?l1.0 (?h # l2b)\n  l1 = h # l1'\n  l2 = (a # l2a) @ [h] @ l2b\n  subseq l1 l2\n  \\<not> ListMem h (a # l2a)\n\ngoal (1 subgoal):\n 1. \\<And>a l2a l1 l2 h l1'.\n       \\<lbrakk>\\<And>l1 l2 h l1'.\n                   \\<lbrakk>l1 = h # l1'; l2 = l2a @ [h] @ l2b;\n                    subseq l1 l2; \\<not> ListMem h l2a\\<rbrakk>\n                   \\<Longrightarrow> subseq l1 (h # l2b);\n        l1 = h # l1'; l2 = (a # l2a) @ [h] @ l2b; subseq l1 l2;\n        \\<not> ListMem h (a # l2a)\\<rbrakk>\n       \\<Longrightarrow> subseq l1 (h # l2b)", "have \"a \\<noteq> h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> h", "using Cons.prems(4) ListMem.simps"], ["proof (prove)\nusing this:\n  \\<not> ListMem h (a # l2a)\n  ListMem ?a1.0 ?a2.0 =\n  ((\\<exists>x xs. ?a1.0 = x \\<and> ?a2.0 = x # xs) \\<or>\n   (\\<exists>x xs y. ?a1.0 = x \\<and> ?a2.0 = y # xs \\<and> ListMem x xs))\n\ngoal (1 subgoal):\n 1. a \\<noteq> h", "by fast"], ["proof (state)\nthis:\n  a \\<noteq> h\n\ngoal (1 subgoal):\n 1. \\<And>a l2a l1 l2 h l1'.\n       \\<lbrakk>\\<And>l1 l2 h l1'.\n                   \\<lbrakk>l1 = h # l1'; l2 = l2a @ [h] @ l2b;\n                    subseq l1 l2; \\<not> ListMem h l2a\\<rbrakk>\n                   \\<Longrightarrow> subseq l1 (h # l2b);\n        l1 = h # l1'; l2 = (a # l2a) @ [h] @ l2b; subseq l1 l2;\n        \\<not> ListMem h (a # l2a)\\<rbrakk>\n       \\<Longrightarrow> subseq l1 (h # l2b)", "then"], ["proof (chain)\npicking this:\n  a \\<noteq> h", "have \"subseq l1 (l2a @ [h] @ l2b)\""], ["proof (prove)\nusing this:\n  a \\<noteq> h\n\ngoal (1 subgoal):\n 1. subseq l1 (l2a @ [h] @ l2b)", "using Cons.prems(1, 2, 3) subseq_Cons2_neq"], ["proof (prove)\nusing this:\n  a \\<noteq> h\n  l1 = h # l1'\n  l2 = (a # l2a) @ [h] @ l2b\n  subseq l1 l2\n  \\<lbrakk>subseq (?x # ?xs) (?y # ?ys); ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> subseq (?x # ?xs) ?ys\n\ngoal (1 subgoal):\n 1. subseq l1 (l2a @ [h] @ l2b)", "by force"], ["proof (state)\nthis:\n  subseq l1 (l2a @ [h] @ l2b)\n\ngoal (1 subgoal):\n 1. \\<And>a l2a l1 l2 h l1'.\n       \\<lbrakk>\\<And>l1 l2 h l1'.\n                   \\<lbrakk>l1 = h # l1'; l2 = l2a @ [h] @ l2b;\n                    subseq l1 l2; \\<not> ListMem h l2a\\<rbrakk>\n                   \\<Longrightarrow> subseq l1 (h # l2b);\n        l1 = h # l1'; l2 = (a # l2a) @ [h] @ l2b; subseq l1 l2;\n        \\<not> ListMem h (a # l2a)\\<rbrakk>\n       \\<Longrightarrow> subseq l1 (h # l2b)", "moreover"], ["proof (state)\nthis:\n  subseq l1 (l2a @ [h] @ l2b)\n\ngoal (1 subgoal):\n 1. \\<And>a l2a l1 l2 h l1'.\n       \\<lbrakk>\\<And>l1 l2 h l1'.\n                   \\<lbrakk>l1 = h # l1'; l2 = l2a @ [h] @ l2b;\n                    subseq l1 l2; \\<not> ListMem h l2a\\<rbrakk>\n                   \\<Longrightarrow> subseq l1 (h # l2b);\n        l1 = h # l1'; l2 = (a # l2a) @ [h] @ l2b; subseq l1 l2;\n        \\<not> ListMem h (a # l2a)\\<rbrakk>\n       \\<Longrightarrow> subseq l1 (h # l2b)", "have \"\\<not>ListMem h l2a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ListMem h l2a", "using Cons.prems(4) insert"], ["proof (prove)\nusing this:\n  \\<not> ListMem h (a # l2a)\n  ListMem ?x ?xs \\<Longrightarrow> ListMem ?x (?y # ?xs)\n\ngoal (1 subgoal):\n 1. \\<not> ListMem h l2a", "by metis"], ["proof (state)\nthis:\n  \\<not> ListMem h l2a\n\ngoal (1 subgoal):\n 1. \\<And>a l2a l1 l2 h l1'.\n       \\<lbrakk>\\<And>l1 l2 h l1'.\n                   \\<lbrakk>l1 = h # l1'; l2 = l2a @ [h] @ l2b;\n                    subseq l1 l2; \\<not> ListMem h l2a\\<rbrakk>\n                   \\<Longrightarrow> subseq l1 (h # l2b);\n        l1 = h # l1'; l2 = (a # l2a) @ [h] @ l2b; subseq l1 l2;\n        \\<not> ListMem h (a # l2a)\\<rbrakk>\n       \\<Longrightarrow> subseq l1 (h # l2b)", "ultimately"], ["proof (chain)\npicking this:\n  subseq l1 (l2a @ [h] @ l2b)\n  \\<not> ListMem h l2a", "have \"subseq l1 (h # l2b)\""], ["proof (prove)\nusing this:\n  subseq l1 (l2a @ [h] @ l2b)\n  \\<not> ListMem h l2a\n\ngoal (1 subgoal):\n 1. subseq l1 (h # l2b)", "using Cons.IH Cons.prems"], ["proof (prove)\nusing this:\n  subseq l1 (l2a @ [h] @ l2b)\n  \\<not> ListMem h l2a\n  \\<lbrakk>?l1.0 = ?h # ?l1'; ?l2.0 = l2a @ [?h] @ l2b; subseq ?l1.0 ?l2.0;\n   \\<not> ListMem ?h l2a\\<rbrakk>\n  \\<Longrightarrow> subseq ?l1.0 (?h # l2b)\n  l1 = h # l1'\n  l2 = (a # l2a) @ [h] @ l2b\n  subseq l1 l2\n  \\<not> ListMem h (a # l2a)\n\ngoal (1 subgoal):\n 1. subseq l1 (h # l2b)", "by meson"], ["proof (state)\nthis:\n  subseq l1 (h # l2b)\n\ngoal (1 subgoal):\n 1. \\<And>a l2a l1 l2 h l1'.\n       \\<lbrakk>\\<And>l1 l2 h l1'.\n                   \\<lbrakk>l1 = h # l1'; l2 = l2a @ [h] @ l2b;\n                    subseq l1 l2; \\<not> ListMem h l2a\\<rbrakk>\n                   \\<Longrightarrow> subseq l1 (h # l2b);\n        l1 = h # l1'; l2 = (a # l2a) @ [h] @ l2b; subseq l1 l2;\n        \\<not> ListMem h (a # l2a)\\<rbrakk>\n       \\<Longrightarrow> subseq l1 (h # l2b)", "then"], ["proof (chain)\npicking this:\n  subseq l1 (h # l2b)", "show ?case"], ["proof (prove)\nusing this:\n  subseq l1 (h # l2b)\n\ngoal (1 subgoal):\n 1. subseq l1 (h # l2b)", "by simp"], ["proof (state)\nthis:\n  subseq l1 (h # l2b)\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE added lemma (eventually wasn't needed in the remaining proofs).\\<close>"], ["", "lemma sublist_split_trans:\n  fixes l1 l2 h l1'\n  assumes \"l1 = (h # l1')\" \"l2 = l2a @ [h] @ l2b\" \"subseq l1 l2\" \"\\<not>(ListMem h l2a)\"\n  shows \"subseq l1' l2b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l1' l2b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. subseq l1' l2b", "have \"subseq (h # l1') (h # l2b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (h # l1') (h # l2b)", "using assms sublist_skip"], ["proof (prove)\nusing this:\n  l1 = h # l1'\n  l2 = l2a @ [h] @ l2b\n  subseq l1 l2\n  \\<not> ListMem h l2a\n  \\<lbrakk>?l1.0 = ?h # ?l1'; ?l2.0 = ?l2a @ [?h] @ ?l2b;\n   subseq ?l1.0 ?l2.0; \\<not> ListMem ?h ?l2a\\<rbrakk>\n  \\<Longrightarrow> subseq ?l1.0 (?h # ?l2b)\n\ngoal (1 subgoal):\n 1. subseq (h # l1') (h # l2b)", "by metis"], ["proof (state)\nthis:\n  subseq (h # l1') (h # l2b)\n\ngoal (1 subgoal):\n 1. subseq l1' l2b", "then"], ["proof (chain)\npicking this:\n  subseq (h # l1') (h # l2b)", "show ?thesis"], ["proof (prove)\nusing this:\n  subseq (h # l1') (h # l2b)\n\ngoal (1 subgoal):\n 1. subseq l1' l2b", "using subseq_Cons2'"], ["proof (prove)\nusing this:\n  subseq (h # l1') (h # l2b)\n  subseq (?x # ?xs) (?x # ?ys) \\<Longrightarrow> subseq ?xs ?ys\n\ngoal (1 subgoal):\n 1. subseq l1' l2b", "by metis"], ["proof (state)\nthis:\n  subseq l1' l2b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sublist_cons_exists: \n  shows \"\n    subseq (h # l1) l2 \n    \\<longleftrightarrow> (\\<exists>l2a l2b. (l2 = l2a @ [h] @ l2b) \\<and> \\<not>ListMem h l2a \\<and> subseq l1 l2b)\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (h # l1) l2 =\n    (\\<exists>l2a l2b.\n        l2 = l2a @ [h] @ l2b \\<and>\n        \\<not> ListMem h l2a \\<and> subseq l1 l2b)", "proof -\n  \\<comment> \\<open>NOTE show both directions of the equivalence in pure proof blocks.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. subseq (h # l1) l2 =\n    (\\<exists>l2a l2b.\n        l2 = l2a @ [h] @ l2b \\<and>\n        \\<not> ListMem h l2a \\<and> subseq l1 l2b)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. subseq (h # l1) l2 =\n    (\\<exists>l2a l2b.\n        l2 = l2a @ [h] @ l2b \\<and>\n        \\<not> ListMem h l2a \\<and> subseq l1 l2b)", "have \n      \"subseq (h # l1) l2 \\<Longrightarrow> (\\<exists>l2a l2b. (l2 = l2a @ [h] @ l2b) \\<and> \\<not>ListMem h l2a \\<and> subseq l1 l2b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (h # l1) l2 \\<Longrightarrow>\n    \\<exists>l2a l2b.\n       l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a \\<and> subseq l1 l2b", "proof (induction l2 arbitrary: h l1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>h l1.\n       subseq (h # l1) [] \\<Longrightarrow>\n       \\<exists>l2a l2b.\n          [] = l2a @ [h] @ l2b \\<and>\n          \\<not> ListMem h l2a \\<and> subseq l1 l2b\n 2. \\<And>a l2 h l1.\n       \\<lbrakk>\\<And>h l1.\n                   subseq (h # l1) l2 \\<Longrightarrow>\n                   \\<exists>l2a l2b.\n                      l2 = l2a @ [h] @ l2b \\<and>\n                      \\<not> ListMem h l2a \\<and> subseq l1 l2b;\n        subseq (h # l1) (a # l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l2a l2b.\n                            a # l2 = l2a @ [h] @ l2b \\<and>\n                            \\<not> ListMem h l2a \\<and> subseq l1 l2b", "case (Cons a l2)"], ["proof (state)\nthis:\n  subseq (?h # ?l1.0) l2 \\<Longrightarrow>\n  \\<exists>l2aa l2b.\n     l2 = l2aa @ [?h] @ l2b \\<and>\n     \\<not> ListMem ?h l2aa \\<and> subseq ?l1.0 l2b\n  subseq (h # l1) (a # l2)\n\ngoal (2 subgoals):\n 1. \\<And>h l1.\n       subseq (h # l1) [] \\<Longrightarrow>\n       \\<exists>l2a l2b.\n          [] = l2a @ [h] @ l2b \\<and>\n          \\<not> ListMem h l2a \\<and> subseq l1 l2b\n 2. \\<And>a l2 h l1.\n       \\<lbrakk>\\<And>h l1.\n                   subseq (h # l1) l2 \\<Longrightarrow>\n                   \\<exists>l2a l2b.\n                      l2 = l2a @ [h] @ l2b \\<and>\n                      \\<not> ListMem h l2a \\<and> subseq l1 l2b;\n        subseq (h # l1) (a # l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l2a l2b.\n                            a # l2 = l2a @ [h] @ l2b \\<and>\n                            \\<not> ListMem h l2a \\<and> subseq l1 l2b", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "proof (cases \"a = h\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b\n 2. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "case True\n          \\<comment> \\<open>NOTE This case has a trivial solution in '?l2a = []', '?l2b = l2'.\\<close>"], ["proof (state)\nthis:\n  a = h\n\ngoal (2 subgoals):\n 1. a = h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b\n 2. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "let ?l2a=\"[]\""], ["proof (state)\ngoal (2 subgoals):\n 1. a = h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b\n 2. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "have \"(a # l2) = ?l2a @ [h] @ l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a # l2 = [] @ [h] @ l2", "using True"], ["proof (prove)\nusing this:\n  a = h\n\ngoal (1 subgoal):\n 1. a # l2 = [] @ [h] @ l2", "by auto"], ["proof (state)\nthis:\n  a # l2 = [] @ [h] @ l2\n\ngoal (2 subgoals):\n 1. a = h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b\n 2. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "moreover"], ["proof (state)\nthis:\n  a # l2 = [] @ [h] @ l2\n\ngoal (2 subgoals):\n 1. a = h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b\n 2. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "have \"\\<not>(ListMem h ?l2a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ListMem h []", "using ListMem_iff"], ["proof (prove)\nusing this:\n  ListMem ?x ?xs = (?x \\<in> set ?xs)\n\ngoal (1 subgoal):\n 1. \\<not> ListMem h []", "by force"], ["proof (state)\nthis:\n  \\<not> ListMem h []\n\ngoal (2 subgoals):\n 1. a = h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b\n 2. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "moreover"], ["proof (state)\nthis:\n  \\<not> ListMem h []\n\ngoal (2 subgoals):\n 1. a = h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b\n 2. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "have \"subseq l1 l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l1 l2", "using Cons.prems True"], ["proof (prove)\nusing this:\n  subseq (h # l1) (a # l2)\n  a = h\n\ngoal (1 subgoal):\n 1. subseq l1 l2", "by simp"], ["proof (state)\nthis:\n  subseq l1 l2\n\ngoal (2 subgoals):\n 1. a = h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b\n 2. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "ultimately"], ["proof (chain)\npicking this:\n  a # l2 = [] @ [h] @ l2\n  \\<not> ListMem h []\n  subseq l1 l2", "show ?thesis"], ["proof (prove)\nusing this:\n  a # l2 = [] @ [h] @ l2\n  \\<not> ListMem h []\n  subseq l1 l2\n\ngoal (1 subgoal):\n 1. \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "by blast"], ["proof (state)\nthis:\n  \\<exists>l2aa l2b.\n     a # l2 = l2aa @ [h] @ l2b \\<and>\n     \\<not> ListMem h l2aa \\<and> subseq l1 l2b\n\ngoal (1 subgoal):\n 1. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "case False"], ["proof (state)\nthis:\n  a \\<noteq> h\n\ngoal (1 subgoal):\n 1. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "have 1: \"subseq (h # l1) l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (h # l1) l2", "using Cons.prems False subseq_Cons2_neq"], ["proof (prove)\nusing this:\n  subseq (h # l1) (a # l2)\n  a \\<noteq> h\n  \\<lbrakk>subseq (?x # ?xs) (?y # ?ys); ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> subseq (?x # ?xs) ?ys\n\ngoal (1 subgoal):\n 1. subseq (h # l1) l2", "by metis"], ["proof (state)\nthis:\n  subseq (h # l1) l2\n\ngoal (1 subgoal):\n 1. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "then"], ["proof (chain)\npicking this:\n  subseq (h # l1) l2", "obtain l2a l2b where \"l2 = l2a @ [h] @ l2b\" \"\\<not>ListMem h l2a\""], ["proof (prove)\nusing this:\n  subseq (h # l1) l2\n\ngoal (1 subgoal):\n 1. (\\<And>l2aa l2b.\n        \\<lbrakk>l2 = l2aa @ [h] @ l2b; \\<not> ListMem h l2aa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Cons.IH Cons.prems"], ["proof (prove)\nusing this:\n  subseq (h # l1) l2\n  subseq (?h # ?l1.0) l2 \\<Longrightarrow>\n  \\<exists>l2aa l2b.\n     l2 = l2aa @ [?h] @ l2b \\<and>\n     \\<not> ListMem ?h l2aa \\<and> subseq ?l1.0 l2b\n  subseq (h # l1) (a # l2)\n\ngoal (1 subgoal):\n 1. (\\<And>l2aa l2b.\n        \\<lbrakk>l2 = l2aa @ [h] @ l2b; \\<not> ListMem h l2aa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by meson"], ["proof (state)\nthis:\n  l2 = l2a @ [h] @ l2b\n  \\<not> ListMem h l2a\n\ngoal (1 subgoal):\n 1. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "moreover"], ["proof (state)\nthis:\n  l2 = l2a @ [h] @ l2b\n  \\<not> ListMem h l2a\n\ngoal (1 subgoal):\n 1. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "have \"a # l2 = (a # l2a) @ [h] @ l2b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a # l2 = (a # l2a) @ [h] @ l2b", "using calculation(1)"], ["proof (prove)\nusing this:\n  l2 = l2a @ [h] @ l2b\n\ngoal (1 subgoal):\n 1. a # l2 = (a # l2a) @ [h] @ l2b", "by simp"], ["proof (state)\nthis:\n  a # l2 = (a # l2a) @ [h] @ l2b\n\ngoal (1 subgoal):\n 1. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "moreover"], ["proof (state)\nthis:\n  a # l2 = (a # l2a) @ [h] @ l2b\n\ngoal (1 subgoal):\n 1. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "have \"\\<not>(ListMem h (a # l2a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ListMem h (a # l2a)", "using False calculation(2) ListMem.simps"], ["proof (prove)\nusing this:\n  a \\<noteq> h\n  \\<not> ListMem h l2a\n  ListMem ?a1.0 ?a2.0 =\n  ((\\<exists>x xs. ?a1.0 = x \\<and> ?a2.0 = x # xs) \\<or>\n   (\\<exists>x xs y. ?a1.0 = x \\<and> ?a2.0 = y # xs \\<and> ListMem x xs))\n\ngoal (1 subgoal):\n 1. \\<not> ListMem h (a # l2a)", "by fastforce"], ["proof (state)\nthis:\n  \\<not> ListMem h (a # l2a)\n\ngoal (1 subgoal):\n 1. a \\<noteq> h \\<Longrightarrow>\n    \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "ultimately"], ["proof (chain)\npicking this:\n  l2 = l2a @ [h] @ l2b\n  \\<not> ListMem h l2a\n  a # l2 = (a # l2a) @ [h] @ l2b\n  \\<not> ListMem h (a # l2a)", "show ?thesis"], ["proof (prove)\nusing this:\n  l2 = l2a @ [h] @ l2b\n  \\<not> ListMem h l2a\n  a # l2 = (a # l2a) @ [h] @ l2b\n  \\<not> ListMem h (a # l2a)\n\ngoal (1 subgoal):\n 1. \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "using 1 sublist_split_trans"], ["proof (prove)\nusing this:\n  l2 = l2a @ [h] @ l2b\n  \\<not> ListMem h l2a\n  a # l2 = (a # l2a) @ [h] @ l2b\n  \\<not> ListMem h (a # l2a)\n  subseq (h # l1) l2\n  \\<lbrakk>?l1.0 = ?h # ?l1'; ?l2.0 = ?l2a @ [?h] @ ?l2b;\n   subseq ?l1.0 ?l2.0; \\<not> ListMem ?h ?l2a\\<rbrakk>\n  \\<Longrightarrow> subseq ?l1' ?l2b\n\ngoal (1 subgoal):\n 1. \\<exists>l2aa l2b.\n       a # l2 = l2aa @ [h] @ l2b \\<and>\n       \\<not> ListMem h l2aa \\<and> subseq l1 l2b", "by metis"], ["proof (state)\nthis:\n  \\<exists>l2aa l2b.\n     a # l2 = l2aa @ [h] @ l2b \\<and>\n     \\<not> ListMem h l2aa \\<and> subseq l1 l2b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>l2aa l2b.\n     a # l2 = l2aa @ [h] @ l2b \\<and>\n     \\<not> ListMem h l2aa \\<and> subseq l1 l2b\n\ngoal (1 subgoal):\n 1. \\<And>h l1.\n       subseq (h # l1) [] \\<Longrightarrow>\n       \\<exists>l2a l2b.\n          [] = l2a @ [h] @ l2b \\<and>\n          \\<not> ListMem h l2a \\<and> subseq l1 l2b", "qed simp"], ["proof (state)\nthis:\n  subseq (h # l1) l2 \\<Longrightarrow>\n  \\<exists>l2a l2b.\n     l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a \\<and> subseq l1 l2b\n\ngoal (1 subgoal):\n 1. subseq (h # l1) l2 =\n    (\\<exists>l2a l2b.\n        l2 = l2a @ [h] @ l2b \\<and>\n        \\<not> ListMem h l2a \\<and> subseq l1 l2b)", "}"], ["proof (state)\nthis:\n  subseq (h # l1) l2 \\<Longrightarrow>\n  \\<exists>l2a l2b.\n     l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a \\<and> subseq l1 l2b\n\ngoal (1 subgoal):\n 1. subseq (h # l1) l2 =\n    (\\<exists>l2a l2b.\n        l2 = l2a @ [h] @ l2b \\<and>\n        \\<not> ListMem h l2a \\<and> subseq l1 l2b)", "moreover"], ["proof (state)\nthis:\n  subseq (h # l1) l2 \\<Longrightarrow>\n  \\<exists>l2a l2b.\n     l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a \\<and> subseq l1 l2b\n\ngoal (1 subgoal):\n 1. subseq (h # l1) l2 =\n    (\\<exists>l2a l2b.\n        l2 = l2a @ [h] @ l2b \\<and>\n        \\<not> ListMem h l2a \\<and> subseq l1 l2b)", "{"], ["proof (state)\nthis:\n  subseq (h # l1) l2 \\<Longrightarrow>\n  \\<exists>l2a l2b.\n     l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a \\<and> subseq l1 l2b\n\ngoal (1 subgoal):\n 1. subseq (h # l1) l2 =\n    (\\<exists>l2a l2b.\n        l2 = l2a @ [h] @ l2b \\<and>\n        \\<not> ListMem h l2a \\<and> subseq l1 l2b)", "assume \"\\<exists>l2a l2b. (l2 = l2a @ [h] @ l2b) \\<and> \\<not>ListMem h l2a \\<and> subseq l1 l2b\""], ["proof (state)\nthis:\n  \\<exists>l2a l2b.\n     l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a \\<and> subseq l1 l2b\n\ngoal (1 subgoal):\n 1. subseq (h # l1) l2 =\n    (\\<exists>l2a l2b.\n        l2 = l2a @ [h] @ l2b \\<and>\n        \\<not> ListMem h l2a \\<and> subseq l1 l2b)", "then"], ["proof (chain)\npicking this:\n  \\<exists>l2a l2b.\n     l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a \\<and> subseq l1 l2b", "have  \"subseq (h # l1) l2\""], ["proof (prove)\nusing this:\n  \\<exists>l2a l2b.\n     l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a \\<and> subseq l1 l2b\n\ngoal (1 subgoal):\n 1. subseq (h # l1) l2", "by auto"], ["proof (state)\nthis:\n  subseq (h # l1) l2\n\ngoal (1 subgoal):\n 1. subseq (h # l1) l2 =\n    (\\<exists>l2a l2b.\n        l2 = l2a @ [h] @ l2b \\<and>\n        \\<not> ListMem h l2a \\<and> subseq l1 l2b)", "}"], ["proof (state)\nthis:\n  \\<exists>l2a l2b.\n     l2 = l2a @ [h] @ l2b \\<and>\n     \\<not> ListMem h l2a \\<and> subseq l1 l2b \\<Longrightarrow>\n  subseq (h # l1) l2\n\ngoal (1 subgoal):\n 1. subseq (h # l1) l2 =\n    (\\<exists>l2a l2b.\n        l2 = l2a @ [h] @ l2b \\<and>\n        \\<not> ListMem h l2a \\<and> subseq l1 l2b)", "ultimately"], ["proof (chain)\npicking this:\n  subseq (h # l1) l2 \\<Longrightarrow>\n  \\<exists>l2a l2b.\n     l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a \\<and> subseq l1 l2b\n  \\<exists>l2a l2b.\n     l2 = l2a @ [h] @ l2b \\<and>\n     \\<not> ListMem h l2a \\<and> subseq l1 l2b \\<Longrightarrow>\n  subseq (h # l1) l2", "show ?thesis"], ["proof (prove)\nusing this:\n  subseq (h # l1) l2 \\<Longrightarrow>\n  \\<exists>l2a l2b.\n     l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a \\<and> subseq l1 l2b\n  \\<exists>l2a l2b.\n     l2 = l2a @ [h] @ l2b \\<and>\n     \\<not> ListMem h l2a \\<and> subseq l1 l2b \\<Longrightarrow>\n  subseq (h # l1) l2\n\ngoal (1 subgoal):\n 1. subseq (h # l1) l2 =\n    (\\<exists>l2a l2b.\n        l2 = l2a @ [h] @ l2b \\<and>\n        \\<not> ListMem h l2a \\<and> subseq l1 l2b)", "by argo"], ["proof (state)\nthis:\n  subseq (h # l1) l2 =\n  (\\<exists>l2a l2b.\n      l2 = l2a @ [h] @ l2b \\<and> \\<not> ListMem h l2a \\<and> subseq l1 l2b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sublist_append_exists: \n  fixes l1 l2 \n  shows \"subseq (l1 @ l2) l3 \\<Longrightarrow> \\<exists>l3a l3b. (l3 = l3a @ l3b) \\<and> subseq l1 l3a \\<and> subseq l2 l3b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (l1 @ l2) l3 \\<Longrightarrow>\n    \\<exists>l3a l3b.\n       l3 = l3a @ l3b \\<and> subseq l1 l3a \\<and> subseq l2 l3b", "using list_emb_appendD"], ["proof (prove)\nusing this:\n  list_emb ?P (?xs @ ?ys) ?zs \\<Longrightarrow>\n  \\<exists>us vs.\n     ?zs = us @ vs \\<and> list_emb ?P ?xs us \\<and> list_emb ?P ?ys vs\n\ngoal (1 subgoal):\n 1. subseq (l1 @ l2) l3 \\<Longrightarrow>\n    \\<exists>l3a l3b.\n       l3 = l3a @ l3b \\<and> subseq l1 l3a \\<and> subseq l2 l3b", "by fast\n\n\n\\<comment> \\<open>NOTE can be solved directly with 'list\\_emb\\_append\\_mono'.\\<close>"], ["", "lemma sublist_append_both_I: \n  assumes \"subseq a b\" \"subseq c d\"\n  shows \"subseq (a @ c) (b @ d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (a @ c) (b @ d)", "using assms list_emb_append_mono"], ["proof (prove)\nusing this:\n  subseq a b\n  subseq c d\n  \\<lbrakk>list_emb ?P ?xs ?xs'; list_emb ?P ?ys ?ys'\\<rbrakk>\n  \\<Longrightarrow> list_emb ?P (?xs @ ?ys) (?xs' @ ?ys')\n\ngoal (1 subgoal):\n 1. subseq (a @ c) (b @ d)", "by blast"], ["", "lemma sublist_append: \n  assumes \"subseq l1 l1'\" \"subseq l2 l2'\"\n  shows \"subseq (l1 @ l2) (l1' @ l2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (l1 @ l2) (l1' @ l2')", "using assms sublist_append_both_I"], ["proof (prove)\nusing this:\n  subseq l1 l1'\n  subseq l2 l2'\n  \\<lbrakk>subseq ?a ?b; subseq ?c ?d\\<rbrakk>\n  \\<Longrightarrow> subseq (?a @ ?c) (?b @ ?d)\n\ngoal (1 subgoal):\n 1. subseq (l1 @ l2) (l1' @ l2')", "by blast"], ["", "lemma sublist_append2: \n  assumes \"subseq l1 l2\"\n  shows \"subseq l1 (l2 @ l3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l1 (l2 @ l3)", "using assms sublist_append[of \"l1\" \"l2\" \"[]\" \"l3\"]"], ["proof (prove)\nusing this:\n  subseq l1 l2\n  \\<lbrakk>subseq l1 l2; subseq [] l3\\<rbrakk>\n  \\<Longrightarrow> subseq (l1 @ []) (l2 @ l3)\n\ngoal (1 subgoal):\n 1. subseq l1 (l2 @ l3)", "by fast"], ["", "lemma append_sublist: \n  shows \"subseq (l1 @ l2 @ l3) l \\<Longrightarrow> subseq (l1 @ l3) l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (l1 @ l2 @ l3) l \\<Longrightarrow> subseq (l1 @ l3) l", "proof (induction l)"], ["proof (state)\ngoal (2 subgoals):\n 1. subseq (l1 @ l2 @ l3) [] \\<Longrightarrow> subseq (l1 @ l3) []\n 2. \\<And>a l.\n       \\<lbrakk>subseq (l1 @ l2 @ l3) l \\<Longrightarrow>\n                subseq (l1 @ l3) l;\n        subseq (l1 @ l2 @ l3) (a # l)\\<rbrakk>\n       \\<Longrightarrow> subseq (l1 @ l3) (a # l)", "case Nil"], ["proof (state)\nthis:\n  subseq (l1 @ l2 @ l3) []\n\ngoal (2 subgoals):\n 1. subseq (l1 @ l2 @ l3) [] \\<Longrightarrow> subseq (l1 @ l3) []\n 2. \\<And>a l.\n       \\<lbrakk>subseq (l1 @ l2 @ l3) l \\<Longrightarrow>\n                subseq (l1 @ l3) l;\n        subseq (l1 @ l2 @ l3) (a # l)\\<rbrakk>\n       \\<Longrightarrow> subseq (l1 @ l3) (a # l)", "then"], ["proof (chain)\npicking this:\n  subseq (l1 @ l2 @ l3) []", "show ?case"], ["proof (prove)\nusing this:\n  subseq (l1 @ l2 @ l3) []\n\ngoal (1 subgoal):\n 1. subseq (l1 @ l3) []", "using sublist_NIL"], ["proof (prove)\nusing this:\n  subseq (l1 @ l2 @ l3) []\n  subseq ?l1.0 [] = (?l1.0 = [])\n\ngoal (1 subgoal):\n 1. subseq (l1 @ l3) []", "by fastforce"], ["proof (state)\nthis:\n  subseq (l1 @ l3) []\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>subseq (l1 @ l2 @ l3) l \\<Longrightarrow>\n                subseq (l1 @ l3) l;\n        subseq (l1 @ l2 @ l3) (a # l)\\<rbrakk>\n       \\<Longrightarrow> subseq (l1 @ l3) (a # l)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>subseq (l1 @ l2 @ l3) l \\<Longrightarrow>\n                subseq (l1 @ l3) l;\n        subseq (l1 @ l2 @ l3) (a # l)\\<rbrakk>\n       \\<Longrightarrow> subseq (l1 @ l3) (a # l)", "case (Cons a l)"], ["proof (state)\nthis:\n  subseq (l1 @ l2 @ l3) l \\<Longrightarrow> subseq (l1 @ l3) l\n  subseq (l1 @ l2 @ l3) (a # l)\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>subseq (l1 @ l2 @ l3) l \\<Longrightarrow>\n                subseq (l1 @ l3) l;\n        subseq (l1 @ l2 @ l3) (a # l)\\<rbrakk>\n       \\<Longrightarrow> subseq (l1 @ l3) (a # l)", "then"], ["proof (chain)\npicking this:\n  subseq (l1 @ l2 @ l3) l \\<Longrightarrow> subseq (l1 @ l3) l\n  subseq (l1 @ l2 @ l3) (a # l)", "show ?case"], ["proof (prove)\nusing this:\n  subseq (l1 @ l2 @ l3) l \\<Longrightarrow> subseq (l1 @ l3) l\n  subseq (l1 @ l2 @ l3) (a # l)\n\ngoal (1 subgoal):\n 1. subseq (l1 @ l3) (a # l)", "proof (cases l1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>subseq (l1 @ l2 @ l3) l \\<Longrightarrow> subseq (l1 @ l3) l;\n     subseq (l1 @ l2 @ l3) (a # l); l1 = []\\<rbrakk>\n    \\<Longrightarrow> subseq (l1 @ l3) (a # l)\n 2. \\<And>aa list.\n       \\<lbrakk>subseq (l1 @ l2 @ l3) l \\<Longrightarrow>\n                subseq (l1 @ l3) l;\n        subseq (l1 @ l2 @ l3) (a # l); l1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> subseq (l1 @ l3) (a # l)", "case Nil"], ["proof (state)\nthis:\n  l1 = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>subseq (l1 @ l2 @ l3) l \\<Longrightarrow> subseq (l1 @ l3) l;\n     subseq (l1 @ l2 @ l3) (a # l); l1 = []\\<rbrakk>\n    \\<Longrightarrow> subseq (l1 @ l3) (a # l)\n 2. \\<And>aa list.\n       \\<lbrakk>subseq (l1 @ l2 @ l3) l \\<Longrightarrow>\n                subseq (l1 @ l3) l;\n        subseq (l1 @ l2 @ l3) (a # l); l1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> subseq (l1 @ l3) (a # l)", "then"], ["proof (chain)\npicking this:\n  l1 = []", "show ?thesis"], ["proof (prove)\nusing this:\n  l1 = []\n\ngoal (1 subgoal):\n 1. subseq (l1 @ l3) (a # l)", "using Cons.prems append_sublist_1"], ["proof (prove)\nusing this:\n  l1 = []\n  subseq (l1 @ l2 @ l3) (a # l)\n  subseq (?l1.0 @ ?l2.0) ?l \\<Longrightarrow>\n  subseq ?l1.0 ?l \\<and> subseq ?l2.0 ?l\n\ngoal (1 subgoal):\n 1. subseq (l1 @ l3) (a # l)", "by auto"], ["proof (state)\nthis:\n  subseq (l1 @ l3) (a # l)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>subseq (l1 @ l2 @ l3) l \\<Longrightarrow>\n                subseq (l1 @ l3) l;\n        subseq (l1 @ l2 @ l3) (a # l); l1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> subseq (l1 @ l3) (a # l)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>subseq (l1 @ l2 @ l3) l \\<Longrightarrow>\n                subseq (l1 @ l3) l;\n        subseq (l1 @ l2 @ l3) (a # l); l1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> subseq (l1 @ l3) (a # l)", "case (Cons a list)"], ["proof (state)\nthis:\n  l1 = a # list\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>subseq (l1 @ l2 @ l3) l \\<Longrightarrow>\n                subseq (l1 @ l3) l;\n        subseq (l1 @ l2 @ l3) (a__ # l); l1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> subseq (l1 @ l3) (a__ # l)", "then"], ["proof (chain)\npicking this:\n  l1 = a # list", "show ?thesis"], ["proof (prove)\nusing this:\n  l1 = a # list\n\ngoal (1 subgoal):\n 1. subseq (l1 @ l3) (a__ # l)", "using Cons.prems subseq_append' subseq_order.dual_order.trans"], ["proof (prove)\nusing this:\n  l1 = a # list\n  subseq (l1 @ l2 @ l3) (a__ # l)\n  subseq (?zs @ ?xs) (?zs @ ?ys) = subseq ?xs ?ys\n  \\<lbrakk>subseq ?b ?a; subseq ?c ?b\\<rbrakk>\n  \\<Longrightarrow> subseq ?c ?a\n\ngoal (1 subgoal):\n 1. subseq (l1 @ l3) (a__ # l)", "by blast"], ["proof (state)\nthis:\n  subseq (l1 @ l3) (a__ # l)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  subseq (l1 @ l3) (a # l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sublist_subset: \n  assumes \"subseq l1 l2\"\n  shows \"set l1 \\<subseteq> set l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set l1 \\<subseteq> set l2", "using assms set_nths_subset subseq_conv_nths"], ["proof (prove)\nusing this:\n  subseq l1 l2\n  set (nths ?xs ?I) \\<subseteq> set ?xs\n  subseq ?xs ?ys = (\\<exists>N. ?xs = nths ?ys N)\n\ngoal (1 subgoal):\n 1. set l1 \\<subseteq> set l2", "by metis"], ["", "lemma sublist_filter: \n  fixes P l \n  shows \"subseq (filter P l) l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (filter P l) l", "using subseq_filter_left"], ["proof (prove)\nusing this:\n  subseq (filter ?P ?xs) ?xs\n\ngoal (1 subgoal):\n 1. subseq (filter P l) l", "by blast"], ["", "lemma sublist_cons_2: \n  fixes l1 l2 h\n  shows \"(subseq (h # l1) (h # l2) \\<longleftrightarrow> (subseq l1 l2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (h # l1) (h # l2) = subseq l1 l2", "by fastforce"], ["", "lemma sublist_every: \n  fixes l1 l2 P\n  assumes \"(subseq l1 l2 \\<and> list_all P l2)\"\n  shows \"list_all P l1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all P l1", "by (metis (full_types) Ball_set assms list_emb_set)"], ["", "lemma sublist_SING_MEM: \"subseq [h] l \\<longleftrightarrow> ListMem h l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq [h] l = ListMem h l", "using ListMem_iff subseq_singleton_left"], ["proof (prove)\nusing this:\n  ListMem ?x ?xs = (?x \\<in> set ?xs)\n  subseq [?x] ?ys = (?x \\<in> set ?ys)\n\ngoal (1 subgoal):\n 1. subseq [h] l = ListMem h l", "by metis\n\n\n\\<comment> \\<open>NOTE renamed due to previous declaration of `sublist\\_append\\_exists\\_2.\\<close>"], ["", "lemma sublist_append_exists_2: \n  fixes l1 l2 l3\n  assumes \"subseq (h # l1) l2\"\n  shows \"(\\<exists>l3 l4. (l2 = l3 @ [h] @ l4) \\<and> (subseq l1 l4))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l3 l4. l2 = l3 @ [h] @ l4 \\<and> subseq l1 l4", "using assms sublist_cons_exists"], ["proof (prove)\nusing this:\n  subseq (h # l1) l2\n  subseq (?h # ?l1.0) ?l2.0 =\n  (\\<exists>l2a l2b.\n      ?l2.0 = l2a @ [?h] @ l2b \\<and>\n      \\<not> ListMem ?h l2a \\<and> subseq ?l1.0 l2b)\n\ngoal (1 subgoal):\n 1. \\<exists>l3 l4. l2 = l3 @ [h] @ l4 \\<and> subseq l1 l4", "by metis"], ["", "lemma sublist_append_4: \n  fixes l l1 l2 h\n  assumes \"(subseq (h # l) (l1 @ [h] @ l2))\" \"(list_all (\\<lambda>x. \\<not>(h = x)) l1)\"\n  shows \"subseq l l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l l2", "using assms"], ["proof (prove)\nusing this:\n  subseq (h # l) (l1 @ [h] @ l2)\n  list_all ((\\<noteq>) h) l1\n\ngoal (1 subgoal):\n 1. subseq l l2", "proof (induction l1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>subseq (h # l) ([] @ [h] @ l2);\n     list_all ((\\<noteq>) h) []\\<rbrakk>\n    \\<Longrightarrow> subseq l l2\n 2. \\<And>a l1.\n       \\<lbrakk>\\<lbrakk>subseq (h # l) (l1 @ [h] @ l2);\n                 list_all ((\\<noteq>) h) l1\\<rbrakk>\n                \\<Longrightarrow> subseq l l2;\n        subseq (h # l) ((a # l1) @ [h] @ l2);\n        list_all ((\\<noteq>) h) (a # l1)\\<rbrakk>\n       \\<Longrightarrow> subseq l l2", "qed auto"], ["", "lemma sublist_append_5: \n  fixes l l1 l2 h\n  assumes \"(subseq (h # l) (l1 @ l2))\" \"(list_all (\\<lambda>x. \\<not>(h = x)) l1)\"\n  shows \"subseq (h # l) l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (h # l) l2", "using assms"], ["proof (prove)\nusing this:\n  subseq (h # l) (l1 @ l2)\n  list_all ((\\<noteq>) h) l1\n\ngoal (1 subgoal):\n 1. subseq (h # l) l2", "proof (induction l1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>subseq (h # l) ([] @ l2); list_all ((\\<noteq>) h) []\\<rbrakk>\n    \\<Longrightarrow> subseq (h # l) l2\n 2. \\<And>a l1.\n       \\<lbrakk>\\<lbrakk>subseq (h # l) (l1 @ l2);\n                 list_all ((\\<noteq>) h) l1\\<rbrakk>\n                \\<Longrightarrow> subseq (h # l) l2;\n        subseq (h # l) ((a # l1) @ l2);\n        list_all ((\\<noteq>) h) (a # l1)\\<rbrakk>\n       \\<Longrightarrow> subseq (h # l) l2", "qed auto"], ["", "lemma sublist_append_6: \n  fixes l l1 l2 h\n  assumes \"(subseq (h # l) (l1 @ l2))\" \"(\\<not>(ListMem h l1))\"\n  shows \"subseq (h # l) l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (h # l) l2", "using assms"], ["proof (prove)\nusing this:\n  subseq (h # l) (l1 @ l2)\n  \\<not> ListMem h l1\n\ngoal (1 subgoal):\n 1. subseq (h # l) l2", "proof (induction l1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>subseq (h # l) ([] @ l2); \\<not> ListMem h []\\<rbrakk>\n    \\<Longrightarrow> subseq (h # l) l2\n 2. \\<And>a l1.\n       \\<lbrakk>\\<lbrakk>subseq (h # l) (l1 @ l2);\n                 \\<not> ListMem h l1\\<rbrakk>\n                \\<Longrightarrow> subseq (h # l) l2;\n        subseq (h # l) ((a # l1) @ l2); \\<not> ListMem h (a # l1)\\<rbrakk>\n       \\<Longrightarrow> subseq (h # l) l2", "case (Cons a l1)"], ["proof (state)\nthis:\n  \\<lbrakk>subseq (h # l) (l1 @ l2); \\<not> ListMem h l1\\<rbrakk>\n  \\<Longrightarrow> subseq (h # l) l2\n  subseq (h # l) ((a # l1) @ l2)\n  \\<not> ListMem h (a # l1)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>subseq (h # l) ([] @ l2); \\<not> ListMem h []\\<rbrakk>\n    \\<Longrightarrow> subseq (h # l) l2\n 2. \\<And>a l1.\n       \\<lbrakk>\\<lbrakk>subseq (h # l) (l1 @ l2);\n                 \\<not> ListMem h l1\\<rbrakk>\n                \\<Longrightarrow> subseq (h # l) l2;\n        subseq (h # l) ((a # l1) @ l2); \\<not> ListMem h (a # l1)\\<rbrakk>\n       \\<Longrightarrow> subseq (h # l) l2", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>subseq (h # l) (l1 @ l2); \\<not> ListMem h l1\\<rbrakk>\n  \\<Longrightarrow> subseq (h # l) l2\n  subseq (h # l) ((a # l1) @ l2)\n  \\<not> ListMem h (a # l1)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>subseq (h # l) (l1 @ l2); \\<not> ListMem h l1\\<rbrakk>\n  \\<Longrightarrow> subseq (h # l) l2\n  subseq (h # l) ((a # l1) @ l2)\n  \\<not> ListMem h (a # l1)\n\ngoal (1 subgoal):\n 1. subseq (h # l) l2", "by (simp add: ListMem_iff)"], ["proof (state)\nthis:\n  subseq (h # l) l2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>subseq (h # l) ([] @ l2); \\<not> ListMem h []\\<rbrakk>\n    \\<Longrightarrow> subseq (h # l) l2", "qed simp"], ["", "lemma sublist_MEM: \n  fixes h l1 l2 \n  shows \"subseq (h # l1) l2 \\<Longrightarrow> ListMem h l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (h # l1) l2 \\<Longrightarrow> ListMem h l2", "proof (induction l2)"], ["proof (state)\ngoal (2 subgoals):\n 1. subseq (h # l1) [] \\<Longrightarrow> ListMem h []\n 2. \\<And>a l2.\n       \\<lbrakk>subseq (h # l1) l2 \\<Longrightarrow> ListMem h l2;\n        subseq (h # l1) (a # l2)\\<rbrakk>\n       \\<Longrightarrow> ListMem h (a # l2)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. subseq (h # l1) [] \\<Longrightarrow> ListMem h []\n 2. \\<And>a l2.\n       \\<lbrakk>subseq (h # l1) l2 \\<Longrightarrow> ListMem h l2;\n        subseq (h # l1) (a # l2)\\<rbrakk>\n       \\<Longrightarrow> ListMem h (a # l2)", "case (Cons a l2)"], ["proof (state)\nthis:\n  subseq (h # l1) l2 \\<Longrightarrow> ListMem h l2\n  subseq (h # l1) (a # l2)\n\ngoal (2 subgoals):\n 1. subseq (h # l1) [] \\<Longrightarrow> ListMem h []\n 2. \\<And>a l2.\n       \\<lbrakk>subseq (h # l1) l2 \\<Longrightarrow> ListMem h l2;\n        subseq (h # l1) (a # l2)\\<rbrakk>\n       \\<Longrightarrow> ListMem h (a # l2)", "then"], ["proof (chain)\npicking this:\n  subseq (h # l1) l2 \\<Longrightarrow> ListMem h l2\n  subseq (h # l1) (a # l2)", "show ?case"], ["proof (prove)\nusing this:\n  subseq (h # l1) l2 \\<Longrightarrow> ListMem h l2\n  subseq (h # l1) (a # l2)\n\ngoal (1 subgoal):\n 1. ListMem h (a # l2)", "using elem insert subseq_Cons2_neq"], ["proof (prove)\nusing this:\n  subseq (h # l1) l2 \\<Longrightarrow> ListMem h l2\n  subseq (h # l1) (a # l2)\n  ListMem ?x (?x # ?xs)\n  ListMem ?x ?xs \\<Longrightarrow> ListMem ?x (?y # ?xs)\n  \\<lbrakk>subseq (?x # ?xs) (?y # ?ys); ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> subseq (?x # ?xs) ?ys\n\ngoal (1 subgoal):\n 1. ListMem h (a # l2)", "by metis"], ["proof (state)\nthis:\n  ListMem h (a # l2)\n\ngoal (1 subgoal):\n 1. subseq (h # l1) [] \\<Longrightarrow> ListMem h []", "qed simp"], ["", "lemma sublist_cons_4: \n  fixes l h l'\n  shows \"subseq l l' \\<Longrightarrow> subseq l (h # l')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq l l' \\<Longrightarrow> subseq l (h # l')", "using sublist_cons"], ["proof (prove)\nusing this:\n  subseq ?l1.0 ?l2.0 \\<Longrightarrow> subseq ?l1.0 (?h # ?l2.0)\n\ngoal (1 subgoal):\n 1. subseq l l' \\<Longrightarrow> subseq l (h # l')", "by blast"], ["", "subsection \"Main Theorems\""], ["", "theorem sublist_imp_len_filter_le: \n  fixes P l l'\n  assumes \"subseq l' l\" \n  shows \"length (filter P l') \\<le> length (filter P l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (filter P l') \\<le> length (filter P l)", "using assms"], ["proof (prove)\nusing this:\n  subseq l' l\n\ngoal (1 subgoal):\n 1. length (filter P l') \\<le> length (filter P l)", "by (simp add: sublist_length)\n\n\n\\<comment> \\<open>TODO showcase (non-trivial proof translation/ obscurity).\\<close>"], ["", "theorem list_with_three_types_shorten_type2: \n  fixes P1 P2 P3 k1 f PProbs PProbl s l\n  assumes \"(PProbs s)\" \"(PProbl l)\" \n    \"(\\<forall>l s. \n      (PProbs s)\n      \\<and> (PProbl l)\n      \\<and> (list_all P1 l) \n      \\<longrightarrow> (\\<exists>l'. \n          (f s l' = f s l) \n          \\<and> (length (filter P2 l') \\<le> k1)\n          \\<and> (length (filter P3 l') \\<le> length (filter P3 l))\n          \\<and> (list_all P1 l')\n          \\<and> (subseq l' l)\n      )\n    )\" \n    \"(\\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2))\" \n    \"(\\<forall>s l. (PProbs s) \\<and> (PProbl l) \\<longrightarrow> (PProbs (f s l)))\" \n    \"(\\<forall>l1 l2. (subseq l1 l2) \\<and> (PProbl l2) \\<longrightarrow> (PProbl l1))\" \n    \"(\\<forall>l1 l2. PProbl (l1 @ l2) \\<longleftrightarrow> (PProbl l1 \\<and> PProbl l2))\" \n  shows \"(\\<exists>l'. \n    (f s l' = f s l)\n    \\<and> (length (filter P3 l') \\<le> length (filter P3 l)) \n    \\<and> (\\<forall>l''. \n      (sublist l'' l') \\<and> (list_all P1 l'')\n       \\<longrightarrow> (length (filter P2 l'') \\<le> k1)\n    )\n    \\<and> (subseq l' l)\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       f s l' = f s l \\<and>\n       length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n       (\\<forall>l''.\n           sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n           length (filter P2 l'') \\<le> k1) \\<and>\n       subseq l' l", "using assms"], ["proof (prove)\nusing this:\n  PProbs s\n  PProbl l\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n  \\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\n\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       f s l' = f s l \\<and>\n       length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n       (\\<forall>l''.\n           sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n           length (filter P2 l'') \\<le> k1) \\<and>\n       subseq l' l", "proof (induction \"filter (\\<lambda>x. \\<not>P1 x) l\" arbitrary: P1 P2 P3 k1 f PProbs PProbl s l)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>[] = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l\n 2. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "case Nil"], ["proof (state)\nthis:\n  [] = filter (\\<lambda>x. \\<not> P1 x) l\n  PProbs s\n  PProbl l\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n  \\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\n\ngoal (2 subgoals):\n 1. \\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>[] = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l\n 2. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "then"], ["proof (chain)\npicking this:\n  [] = filter (\\<lambda>x. \\<not> P1 x) l\n  PProbs s\n  PProbl l\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n  \\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)", "have \"list_all (\\<lambda>x. P1 x) l\""], ["proof (prove)\nusing this:\n  [] = filter (\\<lambda>x. \\<not> P1 x) l\n  PProbs s\n  PProbl l\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n  \\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\n\ngoal (1 subgoal):\n 1. list_all P1 l", "using Nil(1) filter_empty_every_not[of \"\\<lambda>x. \\<not>P1 x\" l]"], ["proof (prove)\nusing this:\n  [] = filter (\\<lambda>x. \\<not> P1 x) l\n  PProbs s\n  PProbl l\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n  \\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\n  [] = filter (\\<lambda>x. \\<not> P1 x) l\n  (filter (\\<lambda>x. \\<not> P1 x) l = []) =\n  list_all (\\<lambda>x. \\<not> \\<not> P1 x) l\n\ngoal (1 subgoal):\n 1. list_all P1 l", "by presburger"], ["proof (state)\nthis:\n  list_all P1 l\n\ngoal (2 subgoals):\n 1. \\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>[] = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l\n 2. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "then"], ["proof (chain)\npicking this:\n  list_all P1 l", "obtain l' where 1:\n    \"(f s l' = f s l)\" \"length (filter P2 l') \\<le> k1\" \"length (filter P3 l') \\<le> length (filter P3 l)\" \n    \"list_all P1 l'\" \"subseq l' l\""], ["proof (prove)\nusing this:\n  list_all P1 l\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>f s l' = f s l; length (filter P2 l') \\<le> k1;\n         length (filter P3 l') \\<le> length (filter P3 l); list_all P1 l';\n         subseq l' l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Nil.prems(1, 2, 3)"], ["proof (prove)\nusing this:\n  list_all P1 l\n  PProbs s\n  PProbl l\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>f s l' = f s l; length (filter P2 l') \\<le> k1;\n         length (filter P3 l') \\<le> length (filter P3 l); list_all P1 l';\n         subseq l' l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f s l' = f s l\n  length (filter P2 l') \\<le> k1\n  length (filter P3 l') \\<le> length (filter P3 l)\n  list_all P1 l'\n  subseq l' l\n\ngoal (2 subgoals):\n 1. \\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>[] = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l\n 2. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "moreover"], ["proof (state)\nthis:\n  f s l' = f s l\n  length (filter P2 l') \\<le> k1\n  length (filter P3 l') \\<le> length (filter P3 l)\n  list_all P1 l'\n  subseq l' l\n\ngoal (2 subgoals):\n 1. \\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>[] = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l\n 2. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "{"], ["proof (state)\nthis:\n  f s l' = f s l\n  length (filter P2 l') \\<le> k1\n  length (filter P3 l') \\<le> length (filter P3 l)\n  list_all P1 l'\n  subseq l' l\n\ngoal (2 subgoals):\n 1. \\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>[] = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l\n 2. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "fix l''"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>[] = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l\n 2. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "assume \"sublist l'' l'\" \"list_all P1 l''\""], ["proof (state)\nthis:\n  sublist l'' l'\n  list_all P1 l''\n\ngoal (2 subgoals):\n 1. \\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>[] = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l\n 2. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "then"], ["proof (chain)\npicking this:\n  sublist l'' l'\n  list_all P1 l''", "have \"subseq l'' l'\""], ["proof (prove)\nusing this:\n  sublist l'' l'\n  list_all P1 l''\n\ngoal (1 subgoal):\n 1. subseq l'' l'", "by blast\n        \\<comment> \\<open>NOTE original proof uses `frag\\_len\\_filter\\_le` which however requires the fact\n      `sublist l' ?l`. Unfortunately, this could not be derived in Isabelle/HOL.\\<close>"], ["proof (state)\nthis:\n  subseq l'' l'\n\ngoal (2 subgoals):\n 1. \\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>[] = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l\n 2. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "then"], ["proof (chain)\npicking this:\n  subseq l'' l'", "have \"length (filter P2 l'') \\<le> length (filter P2 l')\""], ["proof (prove)\nusing this:\n  subseq l'' l'\n\ngoal (1 subgoal):\n 1. length (filter P2 l'') \\<le> length (filter P2 l')", "using sublist_imp_len_filter_le"], ["proof (prove)\nusing this:\n  subseq l'' l'\n  subseq ?l' ?l \\<Longrightarrow>\n  length (filter ?P ?l') \\<le> length (filter ?P ?l)\n\ngoal (1 subgoal):\n 1. length (filter P2 l'') \\<le> length (filter P2 l')", "by blast"], ["proof (state)\nthis:\n  length (filter P2 l'') \\<le> length (filter P2 l')\n\ngoal (2 subgoals):\n 1. \\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>[] = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l\n 2. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "then"], ["proof (chain)\npicking this:\n  length (filter P2 l'') \\<le> length (filter P2 l')", "have \"length (filter P2 l'') \\<le> k1\""], ["proof (prove)\nusing this:\n  length (filter P2 l'') \\<le> length (filter P2 l')\n\ngoal (1 subgoal):\n 1. length (filter P2 l'') \\<le> k1", "using 1"], ["proof (prove)\nusing this:\n  length (filter P2 l'') \\<le> length (filter P2 l')\n  f s l' = f s l\n  length (filter P2 l') \\<le> k1\n  length (filter P3 l') \\<le> length (filter P3 l)\n  list_all P1 l'\n  subseq l' l\n\ngoal (1 subgoal):\n 1. length (filter P2 l'') \\<le> k1", "by linarith"], ["proof (state)\nthis:\n  length (filter P2 l'') \\<le> k1\n\ngoal (2 subgoals):\n 1. \\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>[] = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l\n 2. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "}"], ["proof (state)\nthis:\n  \\<lbrakk>sublist ?l''2 l'; list_all P1 ?l''2\\<rbrakk>\n  \\<Longrightarrow> length (filter P2 ?l''2) \\<le> k1\n\ngoal (2 subgoals):\n 1. \\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>[] = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l\n 2. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "ultimately"], ["proof (chain)\npicking this:\n  f s l' = f s l\n  length (filter P2 l') \\<le> k1\n  length (filter P3 l') \\<le> length (filter P3 l)\n  list_all P1 l'\n  subseq l' l\n  \\<lbrakk>sublist ?l''2 l'; list_all P1 ?l''2\\<rbrakk>\n  \\<Longrightarrow> length (filter P2 ?l''2) \\<le> k1", "show ?case"], ["proof (prove)\nusing this:\n  f s l' = f s l\n  length (filter P2 l') \\<le> k1\n  length (filter P3 l') \\<le> length (filter P3 l)\n  list_all P1 l'\n  subseq l' l\n  \\<lbrakk>sublist ?l''2 l'; list_all P1 ?l''2\\<rbrakk>\n  \\<Longrightarrow> length (filter P2 ?l''2) \\<le> k1\n\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       f s l' = f s l \\<and>\n       length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n       (\\<forall>l''.\n           sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n           length (filter P2 l'') \\<le> k1) \\<and>\n       subseq l' l", "by blast"], ["proof (state)\nthis:\n  \\<exists>l'.\n     f s l' = f s l \\<and>\n     length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n     (\\<forall>l''.\n         sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n         length (filter P2 l'') \\<le> k1) \\<and>\n     subseq l' l\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "case (Cons a x)\n    \\<comment> \\<open>NOTE The proof of the induction step basically consists of construction a list \n    `?l'=l'' @ [a] @ l'''` where `l''` and `l'''` are lists obtained from certain specifications\n    of the induction hypothesis.\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>x = filter (\\<lambda>x. \\<not> ?P1.0 x) ?l; ?PProbs ?s;\n   ?PProbl ?l;\n   \\<forall>l s.\n      ?PProbs s \\<and> ?PProbl l \\<and> list_all ?P1.0 l \\<longrightarrow>\n      (\\<exists>l'.\n          ?f s l' = ?f s l \\<and>\n          length (filter ?P2.0 l') \\<le> ?k1.0 \\<and>\n          length (filter ?P3.0 l') \\<le> length (filter ?P3.0 l) \\<and>\n          list_all ?P1.0 l' \\<and> subseq l' l);\n   \\<forall>s l1 l2. ?f (?f s l1) l2 = ?f s (l1 @ l2);\n   \\<forall>s l.\n      ?PProbs s \\<and> ?PProbl l \\<longrightarrow> ?PProbs (?f s l);\n   \\<forall>l1 l2.\n      subseq l1 l2 \\<and> ?PProbl l2 \\<longrightarrow> ?PProbl l1;\n   \\<forall>l1 l2.\n      ?PProbl (l1 @ l2) = (?PProbl l1 \\<and> ?PProbl l2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l'.\n                       ?f ?s l' = ?f ?s ?l \\<and>\n                       length (filter ?P3.0 l')\n                       \\<le> length (filter ?P3.0 ?l) \\<and>\n                       (\\<forall>l''.\n                           sublist l'' l' \\<and>\n                           list_all ?P1.0 l'' \\<longrightarrow>\n                           length (filter ?P2.0 l'') \\<le> ?k1.0) \\<and>\n                       subseq l' ?l\n  a # x = filter (\\<lambda>x. \\<not> P1 x) l\n  PProbs s\n  PProbl l\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n  \\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>x = filter (\\<lambda>x. \\<not> ?P1.0 x) ?l; ?PProbs ?s;\n   ?PProbl ?l;\n   \\<forall>l s.\n      ?PProbs s \\<and> ?PProbl l \\<and> list_all ?P1.0 l \\<longrightarrow>\n      (\\<exists>l'.\n          ?f s l' = ?f s l \\<and>\n          length (filter ?P2.0 l') \\<le> ?k1.0 \\<and>\n          length (filter ?P3.0 l') \\<le> length (filter ?P3.0 l) \\<and>\n          list_all ?P1.0 l' \\<and> subseq l' l);\n   \\<forall>s l1 l2. ?f (?f s l1) l2 = ?f s (l1 @ l2);\n   \\<forall>s l.\n      ?PProbs s \\<and> ?PProbl l \\<longrightarrow> ?PProbs (?f s l);\n   \\<forall>l1 l2.\n      subseq l1 l2 \\<and> ?PProbl l2 \\<longrightarrow> ?PProbl l1;\n   \\<forall>l1 l2.\n      ?PProbl (l1 @ l2) = (?PProbl l1 \\<and> ?PProbl l2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l'.\n                       ?f ?s l' = ?f ?s ?l \\<and>\n                       length (filter ?P3.0 l')\n                       \\<le> length (filter ?P3.0 ?l) \\<and>\n                       (\\<forall>l''.\n                           sublist l'' l' \\<and>\n                           list_all ?P1.0 l'' \\<longrightarrow>\n                           length (filter ?P2.0 l'') \\<le> ?k1.0) \\<and>\n                       subseq l' ?l\n  a # x = filter (\\<lambda>x. \\<not> P1 x) l\n  PProbs s\n  PProbl l\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n  \\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)", "obtain l1 l2 where 2: \n    \"l = l1 @ a # l2\" \"(\\<forall>u\\<in>set l1. P1 u)\" \"\\<not> P1 a \\<and> x = [x\\<leftarrow>l2 . \\<not> P1 x]\""], ["proof (prove)\nusing this:\n  \\<lbrakk>x = filter (\\<lambda>x. \\<not> ?P1.0 x) ?l; ?PProbs ?s;\n   ?PProbl ?l;\n   \\<forall>l s.\n      ?PProbs s \\<and> ?PProbl l \\<and> list_all ?P1.0 l \\<longrightarrow>\n      (\\<exists>l'.\n          ?f s l' = ?f s l \\<and>\n          length (filter ?P2.0 l') \\<le> ?k1.0 \\<and>\n          length (filter ?P3.0 l') \\<le> length (filter ?P3.0 l) \\<and>\n          list_all ?P1.0 l' \\<and> subseq l' l);\n   \\<forall>s l1 l2. ?f (?f s l1) l2 = ?f s (l1 @ l2);\n   \\<forall>s l.\n      ?PProbs s \\<and> ?PProbl l \\<longrightarrow> ?PProbs (?f s l);\n   \\<forall>l1 l2.\n      subseq l1 l2 \\<and> ?PProbl l2 \\<longrightarrow> ?PProbl l1;\n   \\<forall>l1 l2.\n      ?PProbl (l1 @ l2) = (?PProbl l1 \\<and> ?PProbl l2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l'.\n                       ?f ?s l' = ?f ?s ?l \\<and>\n                       length (filter ?P3.0 l')\n                       \\<le> length (filter ?P3.0 ?l) \\<and>\n                       (\\<forall>l''.\n                           sublist l'' l' \\<and>\n                           list_all ?P1.0 l'' \\<longrightarrow>\n                           length (filter ?P2.0 l'') \\<le> ?k1.0) \\<and>\n                       subseq l' ?l\n  a # x = filter (\\<lambda>x. \\<not> P1 x) l\n  PProbs s\n  PProbl l\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n  \\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\n\ngoal (1 subgoal):\n 1. (\\<And>l1 l2.\n        \\<lbrakk>l = l1 @ a # l2; \\<forall>u\\<in>set l1. P1 u;\n         \\<not> P1 a \\<and> x = filter (\\<lambda>x. \\<not> P1 x) l2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Cons(2) filter_eq_Cons_iff[of \"\\<lambda>x. \\<not>P1 x\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>x = filter (\\<lambda>x. \\<not> ?P1.0 x) ?l; ?PProbs ?s;\n   ?PProbl ?l;\n   \\<forall>l s.\n      ?PProbs s \\<and> ?PProbl l \\<and> list_all ?P1.0 l \\<longrightarrow>\n      (\\<exists>l'.\n          ?f s l' = ?f s l \\<and>\n          length (filter ?P2.0 l') \\<le> ?k1.0 \\<and>\n          length (filter ?P3.0 l') \\<le> length (filter ?P3.0 l) \\<and>\n          list_all ?P1.0 l' \\<and> subseq l' l);\n   \\<forall>s l1 l2. ?f (?f s l1) l2 = ?f s (l1 @ l2);\n   \\<forall>s l.\n      ?PProbs s \\<and> ?PProbl l \\<longrightarrow> ?PProbs (?f s l);\n   \\<forall>l1 l2.\n      subseq l1 l2 \\<and> ?PProbl l2 \\<longrightarrow> ?PProbl l1;\n   \\<forall>l1 l2.\n      ?PProbl (l1 @ l2) = (?PProbl l1 \\<and> ?PProbl l2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l'.\n                       ?f ?s l' = ?f ?s ?l \\<and>\n                       length (filter ?P3.0 l')\n                       \\<le> length (filter ?P3.0 ?l) \\<and>\n                       (\\<forall>l''.\n                           sublist l'' l' \\<and>\n                           list_all ?P1.0 l'' \\<longrightarrow>\n                           length (filter ?P2.0 l'') \\<le> ?k1.0) \\<and>\n                       subseq l' ?l\n  a # x = filter (\\<lambda>x. \\<not> P1 x) l\n  PProbs s\n  PProbl l\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n  \\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\n  a # x = filter (\\<lambda>x. \\<not> P1 x) l\n  (filter (\\<lambda>x. \\<not> P1 x) ?ys = ?x # ?xs) =\n  (\\<exists>us vs.\n      ?ys = us @ ?x # vs \\<and>\n      (\\<forall>u\\<in>set us. \\<not> \\<not> P1 u) \\<and>\n      \\<not> P1 ?x \\<and> ?xs = filter (\\<lambda>x. \\<not> P1 x) vs)\n\ngoal (1 subgoal):\n 1. (\\<And>l1 l2.\n        \\<lbrakk>l = l1 @ a # l2; \\<forall>u\\<in>set l1. P1 u;\n         \\<not> P1 a \\<and> x = filter (\\<lambda>x. \\<not> P1 x) l2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  l = l1 @ a # l2\n  \\<forall>u\\<in>set l1. P1 u\n  \\<not> P1 a \\<and> x = filter (\\<lambda>x. \\<not> P1 x) l2\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "then"], ["proof (chain)\npicking this:\n  l = l1 @ a # l2\n  \\<forall>u\\<in>set l1. P1 u\n  \\<not> P1 a \\<and> x = filter (\\<lambda>x. \\<not> P1 x) l2", "have 3: \"PProbl l2\""], ["proof (prove)\nusing this:\n  l = l1 @ a # l2\n  \\<forall>u\\<in>set l1. P1 u\n  \\<not> P1 a \\<and> x = filter (\\<lambda>x. \\<not> P1 x) l2\n\ngoal (1 subgoal):\n 1. PProbl l2", "using Cons.prems(2, 6) 2(1) sublist_append_back"], ["proof (prove)\nusing this:\n  l = l1 @ a # l2\n  \\<forall>u\\<in>set l1. P1 u\n  \\<not> P1 a \\<and> x = filter (\\<lambda>x. \\<not> P1 x) l2\n  PProbl l\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  l = l1 @ a # l2\n  subseq ?l1.0 (?l2.0 @ ?l1.0)\n\ngoal (1 subgoal):\n 1. PProbl l2", "by blast\n      \\<comment> \\<open>NOTE Use the induction hypothesis to obtain a specific  `l'''`.\\<close>"], ["proof (state)\nthis:\n  PProbl l2\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "{"], ["proof (state)\nthis:\n  PProbl l2\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "have \"x = filter (\\<lambda>x. \\<not>P1 x) l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = filter (\\<lambda>x. \\<not> P1 x) l2", "using 2(3)"], ["proof (prove)\nusing this:\n  \\<not> P1 a \\<and> x = filter (\\<lambda>x. \\<not> P1 x) l2\n\ngoal (1 subgoal):\n 1. x = filter (\\<lambda>x. \\<not> P1 x) l2", "by blast"], ["proof (state)\nthis:\n  x = filter (\\<lambda>x. \\<not> P1 x) l2\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "moreover"], ["proof (state)\nthis:\n  x = filter (\\<lambda>x. \\<not> P1 x) l2\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "have \"PProbs (f (f s l1) [a])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PProbs (f (f s l1) [a])", "using Cons.prems(1, 2, 5, 6, 7) 2(1) elem sublist_SING_MEM"], ["proof (prove)\nusing this:\n  PProbs s\n  PProbl l\n  \\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\n  l = l1 @ a # l2\n  ListMem ?x (?x # ?xs)\n  subseq [?h] ?l = ListMem ?h ?l\n\ngoal (1 subgoal):\n 1. PProbs (f (f s l1) [a])", "by metis"], ["proof (state)\nthis:\n  PProbs (f (f s l1) [a])\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "moreover"], ["proof (state)\nthis:\n  PProbs (f (f s l1) [a])\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "have \"\\<forall>l s. PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow> (\\<exists>l'. \n      f s l' = f s l \\<and> length (filter P2 l') \\<le> k1 \\<and> length (filter P3 l') \\<le> length (filter P3 l)\n      \\<and> list_all P1 l' \\<and> subseq l' l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l s.\n       PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n       (\\<exists>l'.\n           f s l' = f s l \\<and>\n           length (filter P2 l') \\<le> k1 \\<and>\n           length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n           list_all P1 l' \\<and> subseq l' l)", "using Cons.prems(3)"], ["proof (prove)\nusing this:\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n\ngoal (1 subgoal):\n 1. \\<forall>l s.\n       PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n       (\\<exists>l'.\n           f s l' = f s l \\<and>\n           length (filter P2 l') \\<le> k1 \\<and>\n           length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n           list_all P1 l' \\<and> subseq l' l)", "by blast"], ["proof (state)\nthis:\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "moreover"], ["proof (state)\nthis:\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "have \"\\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\" \n      \"\\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\" \n      \"\\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\"\n      \"\\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2) &&&\n     \\<forall>s l.\n        PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)) &&&\n    \\<forall>l1 l2.\n       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1 &&&\n    \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)", "using Cons.prems(4, 5, 6, 7)"], ["proof (prove)\nusing this:\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n  \\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\n\ngoal (1 subgoal):\n 1. (\\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2) &&&\n     \\<forall>s l.\n        PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)) &&&\n    \\<forall>l1 l2.\n       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1 &&&\n    \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)", "by blast+"], ["proof (state)\nthis:\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n  \\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "ultimately"], ["proof (chain)\npicking this:\n  x = filter (\\<lambda>x. \\<not> P1 x) l2\n  PProbs (f (f s l1) [a])\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n  \\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)", "have \"\\<exists>l'. \n      f (f (f s l1) [a]) l' = f (f (f s l1) [a]) l2 \\<and> length (filter P3 l') \\<le> length (filter P3 l2)\n      \\<and> (\\<forall>l''. sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow> length (filter P2 l'') \\<le> k1) \\<and> subseq l' l2\""], ["proof (prove)\nusing this:\n  x = filter (\\<lambda>x. \\<not> P1 x) l2\n  PProbs (f (f s l1) [a])\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n  \\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\n\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       f (f (f s l1) [a]) l' = f (f (f s l1) [a]) l2 \\<and>\n       length (filter P3 l') \\<le> length (filter P3 l2) \\<and>\n       (\\<forall>l''.\n           sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n           length (filter P2 l'') \\<le> k1) \\<and>\n       subseq l' l2", "using 3 Cons(1)[of P1 l2, where s=\"(f (f s l1) [a])\"]"], ["proof (prove)\nusing this:\n  x = filter (\\<lambda>x. \\<not> P1 x) l2\n  PProbs (f (f s l1) [a])\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n  \\<forall>s l. PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l)\n  \\<forall>l1 l2. subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\n  PProbl l2\n  \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l2;\n   ?PProbs (f (f s l1) [a]); ?PProbl l2;\n   \\<forall>l s.\n      ?PProbs s \\<and> ?PProbl l \\<and> list_all P1 l \\<longrightarrow>\n      (\\<exists>l'.\n          ?f s l' = ?f s l \\<and>\n          length (filter ?P2.0 l') \\<le> ?k1.0 \\<and>\n          length (filter ?P3.0 l') \\<le> length (filter ?P3.0 l) \\<and>\n          list_all P1 l' \\<and> subseq l' l);\n   \\<forall>s l1 l2. ?f (?f s l1) l2 = ?f s (l1 @ l2);\n   \\<forall>s l.\n      ?PProbs s \\<and> ?PProbl l \\<longrightarrow> ?PProbs (?f s l);\n   \\<forall>l1 l2.\n      subseq l1 l2 \\<and> ?PProbl l2 \\<longrightarrow> ?PProbl l1;\n   \\<forall>l1 l2.\n      ?PProbl (l1 @ l2) = (?PProbl l1 \\<and> ?PProbl l2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l'.\n                       ?f (f (f s l1) [a]) l' =\n                       ?f (f (f s l1) [a]) l2 \\<and>\n                       length (filter ?P3.0 l')\n                       \\<le> length (filter ?P3.0 l2) \\<and>\n                       (\\<forall>l''.\n                           sublist l'' l' \\<and>\n                           list_all P1 l'' \\<longrightarrow>\n                           length (filter ?P2.0 l'') \\<le> ?k1.0) \\<and>\n                       subseq l' l2\n\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       f (f (f s l1) [a]) l' = f (f (f s l1) [a]) l2 \\<and>\n       length (filter P3 l') \\<le> length (filter P3 l2) \\<and>\n       (\\<forall>l''.\n           sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n           length (filter P2 l'') \\<le> k1) \\<and>\n       subseq l' l2", "by blast"], ["proof (state)\nthis:\n  \\<exists>l'.\n     f (f (f s l1) [a]) l' = f (f (f s l1) [a]) l2 \\<and>\n     length (filter P3 l') \\<le> length (filter P3 l2) \\<and>\n     (\\<forall>l''.\n         sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n         length (filter P2 l'') \\<le> k1) \\<and>\n     subseq l' l2\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "}"], ["proof (state)\nthis:\n  \\<exists>l'.\n     f (f (f s l1) [a]) l' = f (f (f s l1) [a]) l2 \\<and>\n     length (filter P3 l') \\<le> length (filter P3 l2) \\<and>\n     (\\<forall>l''.\n         sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n         length (filter P2 l'') \\<le> k1) \\<and>\n     subseq l' l2\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "then"], ["proof (chain)\npicking this:\n  \\<exists>l'.\n     f (f (f s l1) [a]) l' = f (f (f s l1) [a]) l2 \\<and>\n     length (filter P3 l') \\<le> length (filter P3 l2) \\<and>\n     (\\<forall>l''.\n         sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n         length (filter P2 l'') \\<le> k1) \\<and>\n     subseq l' l2", "obtain l''' where 4:\n    \"f (f (f s l1) [a]) l''' = f (f (f s l1) [a]) l2\" \n    \"length (filter P3 l''') \\<le> length (filter P3 l2)\" \n    \"(\\<forall>l''. sublist l'' l''' \\<and> list_all P1 l'' \\<longrightarrow> length (filter P2 l'') \\<le> k1) \\<and> subseq l''' l2\""], ["proof (prove)\nusing this:\n  \\<exists>l'.\n     f (f (f s l1) [a]) l' = f (f (f s l1) [a]) l2 \\<and>\n     length (filter P3 l') \\<le> length (filter P3 l2) \\<and>\n     (\\<forall>l''.\n         sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n         length (filter P2 l'') \\<le> k1) \\<and>\n     subseq l' l2\n\ngoal (1 subgoal):\n 1. (\\<And>l'''.\n        \\<lbrakk>f (f (f s l1) [a]) l''' = f (f (f s l1) [a]) l2;\n         length (filter P3 l''') \\<le> length (filter P3 l2);\n         (\\<forall>l''.\n             sublist l'' l''' \\<and> list_all P1 l'' \\<longrightarrow>\n             length (filter P2 l'') \\<le> k1) \\<and>\n         subseq l''' l2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f (f (f s l1) [a]) l''' = f (f (f s l1) [a]) l2\n  length (filter P3 l''') \\<le> length (filter P3 l2)\n  (\\<forall>l''.\n      sublist l'' l''' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l''' l2\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "then"], ["proof (chain)\npicking this:\n  f (f (f s l1) [a]) l''' = f (f (f s l1) [a]) l2\n  length (filter P3 l''') \\<le> length (filter P3 l2)\n  (\\<forall>l''.\n      sublist l'' l''' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l''' l2", "have \"f s (l1 @ [a] @ l''') = f s (l1 @ [a] @ l2)\""], ["proof (prove)\nusing this:\n  f (f (f s l1) [a]) l''' = f (f (f s l1) [a]) l2\n  length (filter P3 l''') \\<le> length (filter P3 l2)\n  (\\<forall>l''.\n      sublist l'' l''' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l''' l2\n\ngoal (1 subgoal):\n 1. f s (l1 @ [a] @ l''') = f s (l1 @ [a] @ l2)", "using Cons.prems(4)"], ["proof (prove)\nusing this:\n  f (f (f s l1) [a]) l''' = f (f (f s l1) [a]) l2\n  length (filter P3 l''') \\<le> length (filter P3 l2)\n  (\\<forall>l''.\n      sublist l'' l''' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l''' l2\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n\ngoal (1 subgoal):\n 1. f s (l1 @ [a] @ l''') = f s (l1 @ [a] @ l2)", "by auto"], ["proof (state)\nthis:\n  f s (l1 @ [a] @ l''') = f s (l1 @ [a] @ l2)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "then"], ["proof (chain)\npicking this:\n  f s (l1 @ [a] @ l''') = f s (l1 @ [a] @ l2)", "have \"subseq l''' l2\""], ["proof (prove)\nusing this:\n  f s (l1 @ [a] @ l''') = f s (l1 @ [a] @ l2)\n\ngoal (1 subgoal):\n 1. subseq l''' l2", "using 4(3)"], ["proof (prove)\nusing this:\n  f s (l1 @ [a] @ l''') = f s (l1 @ [a] @ l2)\n  (\\<forall>l''.\n      sublist l'' l''' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l''' l2\n\ngoal (1 subgoal):\n 1. subseq l''' l2", "by blast\n      \\<comment> \\<open>NOTE Use the induction hypothesis to obtain a specific  `l''`.\\<close>"], ["proof (state)\nthis:\n  subseq l''' l2\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "{"], ["proof (state)\nthis:\n  subseq l''' l2\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "have \"\\<forall>l s. \n        PProbs s \\<and> PProbl l1 \\<and> list_all P1 l1 \n        \\<longrightarrow> (\\<exists>l''. \n          f s l'' = f s l1 \\<and> length (filter P2 l'') \\<le> k1 \\<and> length (filter P3 l'') \\<le> length (filter P3 l1)\n          \\<and> list_all P1 l'' \\<and> subseq l'' l1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l s.\n       PProbs s \\<and> PProbl l1 \\<and> list_all P1 l1 \\<longrightarrow>\n       (\\<exists>l''.\n           f s l'' = f s l1 \\<and>\n           length (filter P2 l'') \\<le> k1 \\<and>\n           length (filter P3 l'') \\<le> length (filter P3 l1) \\<and>\n           list_all P1 l'' \\<and> subseq l'' l1)", "using Cons.prems(3)"], ["proof (prove)\nusing this:\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n     (\\<exists>l'.\n         f s l' = f s l \\<and>\n         length (filter P2 l') \\<le> k1 \\<and>\n         length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n         list_all P1 l' \\<and> subseq l' l)\n\ngoal (1 subgoal):\n 1. \\<forall>l s.\n       PProbs s \\<and> PProbl l1 \\<and> list_all P1 l1 \\<longrightarrow>\n       (\\<exists>l''.\n           f s l'' = f s l1 \\<and>\n           length (filter P2 l'') \\<le> k1 \\<and>\n           length (filter P3 l'') \\<le> length (filter P3 l1) \\<and>\n           list_all P1 l'' \\<and> subseq l'' l1)", "by blast"], ["proof (state)\nthis:\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l1 \\<and> list_all P1 l1 \\<longrightarrow>\n     (\\<exists>l''.\n         f s l'' = f s l1 \\<and>\n         length (filter P2 l'') \\<le> k1 \\<and>\n         length (filter P3 l'') \\<le> length (filter P3 l1) \\<and>\n         list_all P1 l'' \\<and> subseq l'' l1)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "then"], ["proof (chain)\npicking this:\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l1 \\<and> list_all P1 l1 \\<longrightarrow>\n     (\\<exists>l''.\n         f s l'' = f s l1 \\<and>\n         length (filter P2 l'') \\<le> k1 \\<and>\n         length (filter P3 l'') \\<le> length (filter P3 l1) \\<and>\n         list_all P1 l'' \\<and> subseq l'' l1)", "have \"\\<exists>l''. \n        f s l'' = f s l1 \\<and> length (filter P2 l'') \\<le> k1 \\<and> length (filter P3 l'') \\<le> length (filter P3 l1)\n        \\<and> list_all P1 l'' \\<and> subseq l'' l1\""], ["proof (prove)\nusing this:\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l1 \\<and> list_all P1 l1 \\<longrightarrow>\n     (\\<exists>l''.\n         f s l'' = f s l1 \\<and>\n         length (filter P2 l'') \\<le> k1 \\<and>\n         length (filter P3 l'') \\<le> length (filter P3 l1) \\<and>\n         list_all P1 l'' \\<and> subseq l'' l1)\n\ngoal (1 subgoal):\n 1. \\<exists>l''.\n       f s l'' = f s l1 \\<and>\n       length (filter P2 l'') \\<le> k1 \\<and>\n       length (filter P3 l'') \\<le> length (filter P3 l1) \\<and>\n       list_all P1 l'' \\<and> subseq l'' l1", "using Cons.prems(1, 2, 7) 2(1, 2)"], ["proof (prove)\nusing this:\n  \\<forall>l s.\n     PProbs s \\<and> PProbl l1 \\<and> list_all P1 l1 \\<longrightarrow>\n     (\\<exists>l''.\n         f s l'' = f s l1 \\<and>\n         length (filter P2 l'') \\<le> k1 \\<and>\n         length (filter P3 l'') \\<le> length (filter P3 l1) \\<and>\n         list_all P1 l'' \\<and> subseq l'' l1)\n  PProbs s\n  PProbl l\n  \\<forall>l1 l2. PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\n  l = l1 @ a # l2\n  \\<forall>u\\<in>set l1. P1 u\n\ngoal (1 subgoal):\n 1. \\<exists>l''.\n       f s l'' = f s l1 \\<and>\n       length (filter P2 l'') \\<le> k1 \\<and>\n       length (filter P3 l'') \\<le> length (filter P3 l1) \\<and>\n       list_all P1 l'' \\<and> subseq l'' l1", "by (metis Ball_set)"], ["proof (state)\nthis:\n  \\<exists>l''.\n     f s l'' = f s l1 \\<and>\n     length (filter P2 l'') \\<le> k1 \\<and>\n     length (filter P3 l'') \\<le> length (filter P3 l1) \\<and>\n     list_all P1 l'' \\<and> subseq l'' l1\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "}"], ["proof (state)\nthis:\n  \\<exists>l''.\n     f s l'' = f s l1 \\<and>\n     length (filter P2 l'') \\<le> k1 \\<and>\n     length (filter P3 l'') \\<le> length (filter P3 l1) \\<and>\n     list_all P1 l'' \\<and> subseq l'' l1\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "then"], ["proof (chain)\npicking this:\n  \\<exists>l''.\n     f s l'' = f s l1 \\<and>\n     length (filter P2 l'') \\<le> k1 \\<and>\n     length (filter P3 l'') \\<le> length (filter P3 l1) \\<and>\n     list_all P1 l'' \\<and> subseq l'' l1", "obtain l'' where 5:\n    \"f s l'' = f s l1\" \"length (filter P2 l'') \\<le> k1\" \n    \"length (filter P3 l'') \\<le> length (filter P3 l1)\" \"list_all P1 l'' \\<and> subseq l'' l1\""], ["proof (prove)\nusing this:\n  \\<exists>l''.\n     f s l'' = f s l1 \\<and>\n     length (filter P2 l'') \\<le> k1 \\<and>\n     length (filter P3 l'') \\<le> length (filter P3 l1) \\<and>\n     list_all P1 l'' \\<and> subseq l'' l1\n\ngoal (1 subgoal):\n 1. (\\<And>l''.\n        \\<lbrakk>f s l'' = f s l1; length (filter P2 l'') \\<le> k1;\n         length (filter P3 l'') \\<le> length (filter P3 l1);\n         list_all P1 l'' \\<and> subseq l'' l1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f s l'' = f s l1\n  length (filter P2 l'') \\<le> k1\n  length (filter P3 l'') \\<le> length (filter P3 l1)\n  list_all P1 l'' \\<and> subseq l'' l1\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "text \\<open> Proof the proposition by providing the witness @{term \"l'=(l'' @ [a] @ l''')\"}. \\<close>"], ["proof (state)\nthis:\n  f s l'' = f s l1\n  length (filter P2 l'') \\<le> k1\n  length (filter P3 l'') \\<le> length (filter P3 l1)\n  list_all P1 l'' \\<and> subseq l'' l1\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "let ?l'=\"(l'' @ [a] @ l''') \""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "have \"\\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)", "by (simp add: Cons.prems(4))"], ["proof (state)\nthis:\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "text \\<open> Rewrite and show the goal.\\<close>"], ["proof (state)\nthis:\n  \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "have \"f s ?l' = f s (l1 @ [a] @ l2) \\<longleftrightarrow> f s (l'' @ (a # l''')) = f s (l1 @ (a # l2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f s (l'' @ [a] @ l''') = f s (l1 @ [a] @ l2)) =\n    (f s (l'' @ a # l''') = f s (l1 @ a # l2))", "by simp"], ["proof (state)\nthis:\n  (f s (l'' @ [a] @ l''') = f s (l1 @ [a] @ l2)) =\n  (f s (l'' @ a # l''') = f s (l1 @ a # l2))\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "also"], ["proof (state)\nthis:\n  (f s (l'' @ [a] @ l''') = f s (l1 @ [a] @ l2)) =\n  (f s (l'' @ a # l''') = f s (l1 @ a # l2))\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "have \"\\<dots> \\<longleftrightarrow> f (f (f s l1) [a]) l''' = f (f (f s l1) [a]) l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f s (l'' @ a # l''') = f s (l1 @ a # l2)) =\n    (f (f (f s l1) [a]) l''' = f (f (f s l1) [a]) l2)", "by (metis Cons.prems(4) \\<open>f s l'' = f s l1\\<close> calculation)"], ["proof (state)\nthis:\n  (f s (l'' @ a # l''') = f s (l1 @ a # l2)) =\n  (f (f (f s l1) [a]) l''' = f (f (f s l1) [a]) l2)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "finally"], ["proof (chain)\npicking this:\n  (f s (l'' @ [a] @ l''') = f s (l1 @ [a] @ l2)) =\n  (f (f (f s l1) [a]) l''' = f (f (f s l1) [a]) l2)", "have \"f s ?l' = f s (l1 @ [a] @ l2)\""], ["proof (prove)\nusing this:\n  (f s (l'' @ [a] @ l''') = f s (l1 @ [a] @ l2)) =\n  (f (f (f s l1) [a]) l''' = f (f (f s l1) [a]) l2)\n\ngoal (1 subgoal):\n 1. f s (l'' @ [a] @ l''') = f s (l1 @ [a] @ l2)", "using 4(1)"], ["proof (prove)\nusing this:\n  (f s (l'' @ [a] @ l''') = f s (l1 @ [a] @ l2)) =\n  (f (f (f s l1) [a]) l''' = f (f (f s l1) [a]) l2)\n  f (f (f s l1) [a]) l''' = f (f (f s l1) [a]) l2\n\ngoal (1 subgoal):\n 1. f s (l'' @ [a] @ l''') = f s (l1 @ [a] @ l2)", "by blast"], ["proof (state)\nthis:\n  f s (l'' @ [a] @ l''') = f s (l1 @ [a] @ l2)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "}"], ["proof (state)\nthis:\n  f s (l'' @ [a] @ l''') = f s (l1 @ [a] @ l2)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "moreover"], ["proof (state)\nthis:\n  f s (l'' @ [a] @ l''') = f s (l1 @ [a] @ l2)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "{"], ["proof (state)\nthis:\n  f s (l'' @ [a] @ l''') = f s (l1 @ [a] @ l2)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "have \"\n      length (filter P3 ?l') \\<le> length (filter P3 (l1 @ [a] @ l2))\n      \\<longleftrightarrow> \n        (length (filter P3 l'') + 1 + length (filter P3 l''') \n        \\<le> length (filter P3 l1) + 1 + length (filter P3 l2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (length (filter P3 (l'' @ [a] @ l'''))\n     \\<le> length (filter P3 (l1 @ [a] @ l2))) =\n    (length (filter P3 l'') + 1 + length (filter P3 l''')\n     \\<le> length (filter P3 l1) + 1 + length (filter P3 l2))", "by force"], ["proof (state)\nthis:\n  (length (filter P3 (l'' @ [a] @ l'''))\n   \\<le> length (filter P3 (l1 @ [a] @ l2))) =\n  (length (filter P3 l'') + 1 + length (filter P3 l''')\n   \\<le> length (filter P3 l1) + 1 + length (filter P3 l2))\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "then"], ["proof (chain)\npicking this:\n  (length (filter P3 (l'' @ [a] @ l'''))\n   \\<le> length (filter P3 (l1 @ [a] @ l2))) =\n  (length (filter P3 l'') + 1 + length (filter P3 l''')\n   \\<le> length (filter P3 l1) + 1 + length (filter P3 l2))", "have \" \n      length (filter P3 ?l') \\<le> length (filter P3 (l1 @ [a] @ l2))\n      \\<longleftrightarrow>\n        length (filter P3 l'') + length (filter P3 l''') \n        \\<le> length (filter P3 l1) + length (filter P3 l2)\""], ["proof (prove)\nusing this:\n  (length (filter P3 (l'' @ [a] @ l'''))\n   \\<le> length (filter P3 (l1 @ [a] @ l2))) =\n  (length (filter P3 l'') + 1 + length (filter P3 l''')\n   \\<le> length (filter P3 l1) + 1 + length (filter P3 l2))\n\ngoal (1 subgoal):\n 1. (length (filter P3 (l'' @ [a] @ l'''))\n     \\<le> length (filter P3 (l1 @ [a] @ l2))) =\n    (length (filter P3 l'') + length (filter P3 l''')\n     \\<le> length (filter P3 l1) + length (filter P3 l2))", "by linarith"], ["proof (state)\nthis:\n  (length (filter P3 (l'' @ [a] @ l'''))\n   \\<le> length (filter P3 (l1 @ [a] @ l2))) =\n  (length (filter P3 l'') + length (filter P3 l''')\n   \\<le> length (filter P3 l1) + length (filter P3 l2))\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "then"], ["proof (chain)\npicking this:\n  (length (filter P3 (l'' @ [a] @ l'''))\n   \\<le> length (filter P3 (l1 @ [a] @ l2))) =\n  (length (filter P3 l'') + length (filter P3 l''')\n   \\<le> length (filter P3 l1) + length (filter P3 l2))", "have \"length (filter P3 ?l') \\<le> length (filter P3 (l1 @ [a] @ l2))\""], ["proof (prove)\nusing this:\n  (length (filter P3 (l'' @ [a] @ l'''))\n   \\<le> length (filter P3 (l1 @ [a] @ l2))) =\n  (length (filter P3 l'') + length (filter P3 l''')\n   \\<le> length (filter P3 l1) + length (filter P3 l2))\n\ngoal (1 subgoal):\n 1. length (filter P3 (l'' @ [a] @ l'''))\n    \\<le> length (filter P3 (l1 @ [a] @ l2))", "using 4(2) \\<open>length (filter P3 l'') \\<le> length (filter P3 l1)\\<close> \n        add_mono_thms_linordered_semiring(1)"], ["proof (prove)\nusing this:\n  (length (filter P3 (l'' @ [a] @ l'''))\n   \\<le> length (filter P3 (l1 @ [a] @ l2))) =\n  (length (filter P3 l'') + length (filter P3 l''')\n   \\<le> length (filter P3 l1) + length (filter P3 l2))\n  length (filter P3 l''') \\<le> length (filter P3 l2)\n  length (filter P3 l'') \\<le> length (filter P3 l1)\n  ?i \\<le> ?j \\<and> ?k \\<le> ?l \\<Longrightarrow> ?i + ?k \\<le> ?j + ?l\n\ngoal (1 subgoal):\n 1. length (filter P3 (l'' @ [a] @ l'''))\n    \\<le> length (filter P3 (l1 @ [a] @ l2))", "by blast"], ["proof (state)\nthis:\n  length (filter P3 (l'' @ [a] @ l'''))\n  \\<le> length (filter P3 (l1 @ [a] @ l2))\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "}"], ["proof (state)\nthis:\n  length (filter P3 (l'' @ [a] @ l'''))\n  \\<le> length (filter P3 (l1 @ [a] @ l2))\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "moreover"], ["proof (state)\nthis:\n  length (filter P3 (l'' @ [a] @ l'''))\n  \\<le> length (filter P3 (l1 @ [a] @ l2))\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "{"], ["proof (state)\nthis:\n  length (filter P3 (l'' @ [a] @ l'''))\n  \\<le> length (filter P3 (l1 @ [a] @ l2))\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "fix l''''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "assume P: \"sublist l'''' ?l'\" \"list_all P1 l''''\""], ["proof (state)\nthis:\n  sublist l'''' (l'' @ [a] @ l''')\n  list_all P1 l''''\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "have \"list_all P1 l1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all P1 l1", "using 2(2) Ball_set"], ["proof (prove)\nusing this:\n  \\<forall>u\\<in>set l1. P1 u\n  Ball (set ?xs) ?P = list_all ?P ?xs\n\ngoal (1 subgoal):\n 1. list_all P1 l1", "by blast"], ["proof (state)\nthis:\n  list_all P1 l1\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "consider (i) \"sublist l'''' l''\" | (ii) \"sublist l'''' l'''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sublist l'''' l'' \\<Longrightarrow> thesis;\n     sublist l'''' l''' \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using P(1, 2) 2(3)  LIST_FRAG_DICHOTOMY_2"], ["proof (prove)\nusing this:\n  sublist l'''' (l'' @ [a] @ l''')\n  list_all P1 l''''\n  \\<not> P1 a \\<and> x = filter (\\<lambda>x. \\<not> P1 x) l2\n  \\<lbrakk>sublist ?l (?la @ [?x] @ ?lb); \\<not> ?P ?x;\n   list_all ?P ?l\\<rbrakk>\n  \\<Longrightarrow> sublist ?l ?la \\<or> sublist ?l ?lb\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sublist l'''' l'' \\<Longrightarrow> thesis;\n     sublist l'''' l''' \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by metis"], ["proof (state)\nthis:\n  \\<lbrakk>sublist l'''' l'' \\<Longrightarrow> ?thesis;\n   sublist l'''' l''' \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>sublist l'''' l'' \\<Longrightarrow> ?thesis;\n   sublist l'''' l''' \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "have \"length (filter P2 l'''') \\<le> k1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>sublist l'''' l'' \\<Longrightarrow> ?thesis;\n   sublist l'''' l''' \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. length (filter P2 l'''') \\<le> k1", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. sublist l'''' l'' \\<Longrightarrow> length (filter P2 l'''') \\<le> k1\n 2. sublist l'''' l''' \\<Longrightarrow> length (filter P2 l'''') \\<le> k1", "case i"], ["proof (state)\nthis:\n  sublist l'''' l''\n\ngoal (2 subgoals):\n 1. sublist l'''' l'' \\<Longrightarrow> length (filter P2 l'''') \\<le> k1\n 2. sublist l'''' l''' \\<Longrightarrow> length (filter P2 l'''') \\<le> k1", "then"], ["proof (chain)\npicking this:\n  sublist l'''' l''", "have \"length (filter P2 l'''') \\<le> length (filter P2 l'')\""], ["proof (prove)\nusing this:\n  sublist l'''' l''\n\ngoal (1 subgoal):\n 1. length (filter P2 l'''') \\<le> length (filter P2 l'')", "using frag_len_filter_le"], ["proof (prove)\nusing this:\n  sublist l'''' l''\n  sublist ?l' ?l \\<Longrightarrow>\n  length (filter ?P ?l') \\<le> length (filter ?P ?l)\n\ngoal (1 subgoal):\n 1. length (filter P2 l'''') \\<le> length (filter P2 l'')", "by blast"], ["proof (state)\nthis:\n  length (filter P2 l'''') \\<le> length (filter P2 l'')\n\ngoal (2 subgoals):\n 1. sublist l'''' l'' \\<Longrightarrow> length (filter P2 l'''') \\<le> k1\n 2. sublist l'''' l''' \\<Longrightarrow> length (filter P2 l'''') \\<le> k1", "then"], ["proof (chain)\npicking this:\n  length (filter P2 l'''') \\<le> length (filter P2 l'')", "show ?thesis"], ["proof (prove)\nusing this:\n  length (filter P2 l'''') \\<le> length (filter P2 l'')\n\ngoal (1 subgoal):\n 1. length (filter P2 l'''') \\<le> k1", "using 5(2) order_trans"], ["proof (prove)\nusing this:\n  length (filter P2 l'''') \\<le> length (filter P2 l'')\n  length (filter P2 l'') \\<le> k1\n  \\<lbrakk>?x \\<le> ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x \\<le> ?z\n\ngoal (1 subgoal):\n 1. length (filter P2 l'''') \\<le> k1", "by blast"], ["proof (state)\nthis:\n  length (filter P2 l'''') \\<le> k1\n\ngoal (1 subgoal):\n 1. sublist l'''' l''' \\<Longrightarrow> length (filter P2 l'''') \\<le> k1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sublist l'''' l''' \\<Longrightarrow> length (filter P2 l'''') \\<le> k1", "case ii"], ["proof (state)\nthis:\n  sublist l'''' l'''\n\ngoal (1 subgoal):\n 1. sublist l'''' l''' \\<Longrightarrow> length (filter P2 l'''') \\<le> k1", "then"], ["proof (chain)\npicking this:\n  sublist l'''' l'''", "show ?thesis"], ["proof (prove)\nusing this:\n  sublist l'''' l'''\n\ngoal (1 subgoal):\n 1. length (filter P2 l'''') \\<le> k1", "using 4(3) P(2)"], ["proof (prove)\nusing this:\n  sublist l'''' l'''\n  (\\<forall>l''.\n      sublist l'' l''' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l''' l2\n  list_all P1 l''''\n\ngoal (1 subgoal):\n 1. length (filter P2 l'''') \\<le> k1", "by blast"], ["proof (state)\nthis:\n  length (filter P2 l'''') \\<le> k1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (filter P2 l'''') \\<le> k1\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "}\n    \\<comment> \\<open>NOTE the following two steps seem to be necessary to convince Isabelle that the split \n  @{term \"l = l1 @ a # l2\"} matches the split `(l1 @ [a] @ l2` and the previous proof steps therefore is \n  prove the goal.\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>sublist ?l''''2 (l'' @ [a] @ l'''); list_all P1 ?l''''2\\<rbrakk>\n  \\<Longrightarrow> length (filter P2 ?l''''2) \\<le> k1\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>sublist ?l''''2 (l'' @ [a] @ l'''); list_all P1 ?l''''2\\<rbrakk>\n  \\<Longrightarrow> length (filter P2 ?l''''2) \\<le> k1\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "{"], ["proof (state)\nthis:\n  \\<lbrakk>sublist ?l''''2 (l'' @ [a] @ l'''); list_all P1 ?l''''2\\<rbrakk>\n  \\<Longrightarrow> length (filter P2 ?l''''2) \\<le> k1\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "have \"subseq ?l' (l1 @ [a] @ l2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (l'' @ [a] @ l''') (l1 @ [a] @ l2)", "by (simp add: FSSublist.sublist_append \\<open>list_all P1 l'' \\<and> subseq l'' l1\\<close> \\<open>subseq l''' l2\\<close>)"], ["proof (state)\nthis:\n  subseq (l'' @ [a] @ l''') (l1 @ [a] @ l2)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "}"], ["proof (state)\nthis:\n  subseq (l'' @ [a] @ l''') (l1 @ [a] @ l2)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "moreover"], ["proof (state)\nthis:\n  subseq (l'' @ [a] @ l''') (l1 @ [a] @ l2)\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "have \"l = l1 @ [a] @ l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l = l1 @ [a] @ l2", "using 2"], ["proof (prove)\nusing this:\n  l = l1 @ a # l2\n  \\<forall>u\\<in>set l1. P1 u\n  \\<not> P1 a \\<and> x = filter (\\<lambda>x. \\<not> P1 x) l2\n\ngoal (1 subgoal):\n 1. l = l1 @ [a] @ l2", "by force"], ["proof (state)\nthis:\n  l = l1 @ [a] @ l2\n\ngoal (1 subgoal):\n 1. \\<And>a x P1 l P2 P3 k1 f PProbs PProbl s.\n       \\<lbrakk>\\<And>P1 l P2 P3 k1 f PProbs PProbl s.\n                   \\<lbrakk>x = filter (\\<lambda>x. \\<not> P1 x) l;\n                    PProbs s; PProbl l;\n                    \\<forall>l s.\n                       PProbs s \\<and>\n                       PProbl l \\<and> list_all P1 l \\<longrightarrow>\n                       (\\<exists>l'.\n                           f s l' = f s l \\<and>\n                           length (filter P2 l') \\<le> k1 \\<and>\n                           length (filter P3 l')\n                           \\<le> length (filter P3 l) \\<and>\n                           list_all P1 l' \\<and> subseq l' l);\n                    \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n                    \\<forall>s l.\n                       PProbs s \\<and> PProbl l \\<longrightarrow>\n                       PProbs (f s l);\n                    \\<forall>l1 l2.\n                       subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow>\n                       PProbl l1;\n                    \\<forall>l1 l2.\n                       PProbl (l1 @ l2) =\n                       (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>l'.\n  f s l' = f s l \\<and>\n  length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n  (\\<forall>l''.\n      sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n      length (filter P2 l'') \\<le> k1) \\<and>\n  subseq l' l;\n        a # x = filter (\\<lambda>x. \\<not> P1 x) l; PProbs s; PProbl l;\n        \\<forall>l s.\n           PProbs s \\<and> PProbl l \\<and> list_all P1 l \\<longrightarrow>\n           (\\<exists>l'.\n               f s l' = f s l \\<and>\n               length (filter P2 l') \\<le> k1 \\<and>\n               length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n               list_all P1 l' \\<and> subseq l' l);\n        \\<forall>s l1 l2. f (f s l1) l2 = f s (l1 @ l2);\n        \\<forall>s l.\n           PProbs s \\<and> PProbl l \\<longrightarrow> PProbs (f s l);\n        \\<forall>l1 l2.\n           subseq l1 l2 \\<and> PProbl l2 \\<longrightarrow> PProbl l1;\n        \\<forall>l1 l2.\n           PProbl (l1 @ l2) = (PProbl l1 \\<and> PProbl l2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            f s l' = f s l \\<and>\n                            length (filter P3 l')\n                            \\<le> length (filter P3 l) \\<and>\n                            (\\<forall>l''.\n                                sublist l'' l' \\<and>\n                                list_all P1 l'' \\<longrightarrow>\n                                length (filter P2 l'') \\<le> k1) \\<and>\n                            subseq l' l", "ultimately"], ["proof (chain)\npicking this:\n  f s (l'' @ [a] @ l''') = f s (l1 @ [a] @ l2)\n  length (filter P3 (l'' @ [a] @ l'''))\n  \\<le> length (filter P3 (l1 @ [a] @ l2))\n  \\<lbrakk>sublist ?l''''2 (l'' @ [a] @ l'''); list_all P1 ?l''''2\\<rbrakk>\n  \\<Longrightarrow> length (filter P2 ?l''''2) \\<le> k1\n  subseq (l'' @ [a] @ l''') (l1 @ [a] @ l2)\n  l = l1 @ [a] @ l2", "show ?case"], ["proof (prove)\nusing this:\n  f s (l'' @ [a] @ l''') = f s (l1 @ [a] @ l2)\n  length (filter P3 (l'' @ [a] @ l'''))\n  \\<le> length (filter P3 (l1 @ [a] @ l2))\n  \\<lbrakk>sublist ?l''''2 (l'' @ [a] @ l'''); list_all P1 ?l''''2\\<rbrakk>\n  \\<Longrightarrow> length (filter P2 ?l''''2) \\<le> k1\n  subseq (l'' @ [a] @ l''') (l1 @ [a] @ l2)\n  l = l1 @ [a] @ l2\n\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       f s l' = f s l \\<and>\n       length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n       (\\<forall>l''.\n           sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n           length (filter P2 l'') \\<le> k1) \\<and>\n       subseq l' l", "by blast"], ["proof (state)\nthis:\n  \\<exists>l'.\n     f s l' = f s l \\<and>\n     length (filter P3 l') \\<le> length (filter P3 l) \\<and>\n     (\\<forall>l''.\n         sublist l'' l' \\<and> list_all P1 l'' \\<longrightarrow>\n         length (filter P2 l'') \\<le> k1) \\<and>\n     subseq l' l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma isPREFIX_sublist: \n  fixes x y\n  assumes \"prefix x y\"\n  shows \"subseq x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq x y", "using assms prefix_order.dual_order.antisym"], ["proof (prove)\nusing this:\n  prefix x y\n  \\<lbrakk>prefix ?b ?a; prefix ?a ?b\\<rbrakk> \\<Longrightarrow> ?a = ?b\n\ngoal (1 subgoal):\n 1. subseq x y", "by blast"], ["", "end"]]}