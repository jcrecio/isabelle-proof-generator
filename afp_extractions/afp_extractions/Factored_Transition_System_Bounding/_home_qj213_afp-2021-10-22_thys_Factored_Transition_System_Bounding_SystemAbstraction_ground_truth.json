{"file_name": "/home/qj213/afp-2021-10-22/thys/Factored_Transition_System_Bounding/SystemAbstraction.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Factored_Transition_System_Bounding", "problem_names": ["lemma action_proj_pair: \"action_proj (p, e) vs = (fmrestrict_set vs p, fmrestrict_set vs e)\"", "lemma as_proj_pair:\n  \"as_proj ((p, e) # as) vs = (if (fmdom' (fmrestrict_set vs e) \\<noteq> {})\n    then action_proj (p, e) vs # as_proj as vs\n    else as_proj as vs\n  )\"\n  \"as_proj [] vs = []\"", "lemma proj_state_succ:\n  fixes s a vs\n  assumes \"(fst a \\<subseteq>\\<^sub>f s)\"\n  shows  \"(state_succ (fmrestrict_set vs s) (action_proj a vs) = fmrestrict_set vs (state_succ s a))\"", "lemma graph_plan_lemma_1:\n  fixes s vs as\n  assumes \"sat_precond_as s as\"\n  shows \"(exec_plan (fmrestrict_set vs s) (as_proj as vs) = (fmrestrict_set vs (exec_plan s as)))\"", "lemma  proj_action_dom_eq_inter:\n  shows \"\n    action_dom (fst (action_proj a vs)) (snd (action_proj a vs))\n    = (action_dom (fst a) (snd a) \\<inter> vs)\n  \"", "lemma graph_plan_neq_mems_state_set_neq_len:\n  shows \"prob_dom (prob_proj PROB vs) = (prob_dom PROB \\<inter> vs)\"", "lemma graph_plan_not_eq_last_diff_paths:\n  fixes PROB vs\n  assumes \"(s \\<in> valid_states PROB)\"\n  shows \"((fmrestrict_set vs s) \\<in> valid_states (prob_proj PROB vs))\"", "lemma dom_eff_subset_imp_dom_succ_eq_proj:\n  fixes h s vs\n  assumes \"(fmdom' (snd h) \\<subseteq> fmdom' s)\"\n  shows \"(fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h))\"", "lemma drest_proj_succ_eq_drest_succ:\n  fixes h s vs\n  assumes \"fst h \\<subseteq>\\<^sub>f s\" \"(fmdom' (snd h) \\<subseteq> fmdom' s)\"\n  shows \"(fmrestrict_set vs (state_succ s (action_proj h vs)) = fmrestrict_set vs (state_succ s h))\"", "lemma drest_succ_proj_eq_drest_succ:\n  fixes s vs as\n  assumes \"(fst a \\<subseteq>\\<^sub>f s)\"\n  shows \"(state_succ (fmrestrict_set vs s) (action_proj a vs) = fmrestrict_set vs (state_succ s a))\"", "lemma exec_drest_cons_proj_eq_succ:\n  fixes as PROB vs a\n  assumes \"fst a \\<subseteq>\\<^sub>f s\"\n  shows \"(\n    exec_plan (fmrestrict_set vs s) (action_proj a vs # as)\n    = exec_plan (fmrestrict_set vs (state_succ s a)) as\n  )\"", "lemma exec_drest:\n  fixes as a vs\n  assumes \"(fst a \\<subseteq>\\<^sub>f s)\"\n  shows \"(\n    exec_plan (fmrestrict_set vs (state_succ s a)) as\n    = exec_plan (fmrestrict_set vs s) (action_proj a vs # as)\n  )\"", "lemma not_empty_eff_in_as_proj:\n  fixes as a vs\n  assumes \"fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\"\n  shows \"(as_proj (a # as) vs = (action_proj a vs # as_proj as vs))\"", "lemma empty_eff_not_in_as_proj:\n  fixes as a vs\n  assumes \"(fmdom' (fmrestrict_set vs (snd a)) = {})\"\n  shows \"(as_proj (a # as) vs = as_proj as vs)\"", "lemma empty_eff_drest_no_eff:\n  fixes s and a and vs\n  assumes \"(fmdom' (fmrestrict_set vs (snd a)) = {})\"\n  shows \"(fmrestrict_set vs (state_succ s (action_proj a vs)) = fmrestrict_set vs s)\"", "lemma sat_precond_exec_as_proj_eq_proj_exec:\n  fixes as vs s\n  assumes \"(sat_precond_as s as)\"\n  shows \"(exec_plan (fmrestrict_set vs s) (as_proj as vs) = fmrestrict_set vs (exec_plan s as))\"", "lemma action_proj_in_prob_proj:\n  assumes \"(a \\<in> PROB)\"\n  shows \"(action_proj a vs \\<in> prob_proj PROB vs)\"", "lemma valid_as_valid_as_proj:\n  fixes PROB vs\n  assumes \"(as \\<in> valid_plans PROB)\"\n  shows \"(as_proj as vs \\<in> valid_plans (prob_proj PROB vs))\"", "lemma finite_imp_finite_prob_proj:\n  fixes PROB\n  assumes \"finite PROB\"\n  shows \"(finite (prob_proj PROB vs))\"", "lemma\n  fixes PROB vs as and s :: \"'a state\"\n  assumes \"finite PROB\" \"s \\<in> valid_states PROB\" \"as \\<in> (valid_plans PROB)\" \"finite vs\"\n    \"length (as_proj as vs) > ((2 :: nat) ^ card vs) - 1\" \"sat_precond_as s as\"\n  shows \"(\\<exists>as1 as2 as3.\n    (as1 @ as2 @ as3 = as_proj as vs)\n    \\<and> (exec_plan (fmrestrict_set vs s) (as1 @ as2) = exec_plan (fmrestrict_set vs s) as1)\n    \\<and> (as2 \\<noteq> [])\n  )\"", "lemma as_proj_eq_filter_action_proj:\n  fixes as vs\n  shows \"as_proj as vs = filter (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) (map (\\<lambda>a. action_proj a vs) as)\"", "lemma append_eq_as_proj:\n  fixes as1 as2 as3 p vs\n  assumes \"(as1 @ as2 @ as3 = as_proj p vs)\"\n  shows \"(\\<exists>p_1 p_2 p_3.\n    (p_1 @ p_2 @ p_3 = p)\n    \\<and> (as2 = as_proj p_2 vs)\n    \\<and> (as1 = as_proj p_1 vs)\n  )\"", "lemma succ_drest_eq_drest_succ:\n  fixes a s vs\n  shows \"\n    state_succ (fmrestrict_set vs s) (action_proj a vs)\n    = fmrestrict_set vs (state_succ s (action_proj a vs))\n  \"", "lemma proj_exec_proj_eq_exec_proj:\n  fixes s as vs\n  shows \"\n    fmrestrict_set vs (exec_plan (fmrestrict_set vs s) (as_proj as vs))\n    = exec_plan (fmrestrict_set vs s) (as_proj as vs)\n  \"", "lemma proj_exec_proj_eq_exec_proj':\n  fixes s as vs\n  shows \"\n    fmrestrict_set vs (exec_plan (fmrestrict_set vs s) (as_proj as vs))\n     = fmrestrict_set vs (exec_plan s (as_proj as vs))\n  \"", "lemma graph_plan_lemma_9:\n  fixes s as vs\n  shows \"\n    fmrestrict_set vs (exec_plan s (as_proj as vs))\n    = exec_plan (fmrestrict_set vs s) (as_proj as vs)\n  \"", "lemma act_dom_proj_eff_subset_act_dom_eff:\n  fixes a vs\n  shows \"fmdom' (snd (action_proj a vs)) \\<subseteq> fmdom' (snd a)\"", "lemma exec_as_proj_valid:\n  fixes as s PROB vs\n  assumes \"s \\<in> valid_states PROB\" \"(as \\<in> valid_plans PROB)\"\n  shows  \"(exec_plan s (as_proj as vs) \\<in> valid_states PROB)\"", "lemma drest_exec_as_proj_eq_drest_exec:\n  fixes s as vs\n  assumes \"sat_precond_as s as\"\n  shows \"(fmrestrict_set vs (exec_plan s (as_proj as vs)) = fmrestrict_set vs (exec_plan s as))\"", "lemma action_proj_idempot:\n  fixes a vs\n  shows \"action_proj (action_proj a vs) vs = (action_proj a vs)\"", "lemma  action_proj_idempot':\n  fixes a vs\n  assumes \"(action_dom (fst a) (snd a) \\<subseteq> vs)\"\n  shows \"(action_proj a vs = a)\"", "lemma action_proj_idempot'':\n  fixes P vs\n  assumes \"prob_dom P \\<subseteq> vs\"\n  shows \"prob_proj P vs = P\"", "lemma sat_precond_as_proj:\n  fixes as s s' vs\n  assumes \"(sat_precond_as s as)\" \"(fmrestrict_set vs s = fmrestrict_set vs s')\"\n  shows \"(sat_precond_as s' (as_proj as vs))\"", "lemma sat_precond_drest_as_proj:\n  fixes as s s' vs\n  assumes \"(sat_precond_as s as)\" \"(fmrestrict_set vs s = fmrestrict_set vs s')\"\n  shows \"(sat_precond_as (fmrestrict_set vs s') (as_proj as vs))\"", "lemma as_proj_eq_as:\n  assumes \"(no_effectless_act as)\" \"(as \\<in> valid_plans PROB)\" \"(prob_dom PROB \\<subseteq> vs)\"\n  shows \"(as_proj as vs = as)\"", "lemma exec_rem_effless_as_proj_eq_exec_as_proj:\n  fixes s\n  shows \"exec_plan s (as_proj (rem_effectless_act as) vs) = exec_plan s (as_proj as vs)\"", "lemma exec_as_proj_eq_exec_as:\n  fixes PROB as vs s\n  assumes \"(as \\<in> valid_plans PROB)\" \"(prob_dom PROB \\<subseteq> vs)\"\n  shows \"(exec_plan s (as_proj as vs) = exec_plan s as)\"", "lemma dom_prob_proj: \"prob_dom (prob_proj PROB vs) \\<subseteq> vs\"", "lemma subset_proj_absorb_1_a:\n  fixes f vs1 vs2\n  assumes \"(vs1 \\<subseteq> vs2)\"\n  shows \"fmrestrict_set vs1 (fmrestrict_set vs2 f) = fmrestrict_set vs1 f\"", "lemma subset_proj_absorb_1:\n  assumes \"(vs1 \\<subseteq> vs2)\"\n  shows \"(action_proj (action_proj a vs2) vs1 = action_proj a vs1)\"", "lemma subset_proj_absorb:\n  fixes PROB vs1 vs2\n  assumes \"vs1 \\<subseteq> vs2\"\n  shows \"prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1\"", "lemma union_proj_absorb:\n  fixes PROB vs vs'\n  shows \"prob_proj (prob_proj PROB (vs \\<union> vs')) vs = prob_proj PROB vs\"", "lemma NOT_VS_IN_DOM_PROJ_PRE_EFF:\n  fixes ROB vs v a\n  assumes \"\\<not>(v \\<in> vs)\" \"(a \\<in> PROB)\"\n  shows \"(\n    ((v \\<in> fmdom' (fst a)) \\<longrightarrow> (v \\<in> fmdom' (fst (action_proj a (prob_dom PROB - vs)))))\n    \\<and> ((v \\<in> fmdom' (snd a)) \\<longrightarrow> (v \\<in> fmdom' (snd (action_proj a (prob_dom PROB - vs)))))\n  )\"", "lemma IN_DISJ_DEP_IMP_DEP_DIFF:\n  fixes PROB vs vs' v v'\n  assumes \"(v \\<in> vs')\" \"(v' \\<in> vs')\" \"(disjnt vs vs')\"\n  shows \"(dep PROB v v' \\<longrightarrow> dep (prob_proj PROB (prob_dom PROB - vs)) v v')\"", "lemma  PROB_DOM_PROJ_DIFF:\n  fixes P vs\n  shows \"prob_dom (prob_proj PROB (prob_dom PROB - vs)) = (prob_dom PROB) - vs\"", "lemma  two_children_parent_mems_le_finite:\n  fixes PROB vs\n  assumes \"(vs \\<subseteq> prob_dom PROB)\"\n  shows \"(prob_dom (prob_proj PROB vs) = vs)\"", "lemma PROJ_DOM_PRE_EFF_SUBSET_DOM:\n  fixes a vs\n  shows \"\n    (fmdom' (fst (action_proj a vs)) \\<subseteq> fmdom' (fst a))\n    \\<and> (fmdom' (snd (action_proj a vs)) \\<subseteq> fmdom' (snd a))\n  \"", "lemma NOT_IN_PRE_EFF_NOT_IN_PRE_EFF_PROJ:\n  fixes a v vs\n  shows \"\n    (\\<not>(v \\<in> fmdom' (fst a)) \\<longrightarrow> \\<not>(v \\<in> fmdom' (fst (action_proj a vs))))\n    \\<and> (\\<not>(v \\<in> fmdom' (snd a)) \\<longrightarrow> \\<not>(v \\<in> fmdom' (snd (action_proj a vs))))\n  \"", "lemma dep_proj_dep:\n  assumes \"dep (prob_proj PROB vs) v v'\"\n  shows \"dep PROB v v'\"", "lemma NDEP_PROJ_NDEP:\n  fixes PROB vs vs' vs''\n  assumes \"(\\<not>dep_var_set PROB vs vs')\"\n  shows \"(\\<not>dep_var_set (prob_proj PROB vs'') vs vs')\"", "lemma SUBSET_PROJ_DOM_DISJ:\n  fixes PROB vs vs'\n  assumes \"(vs \\<subseteq> (prob_dom (prob_proj PROB (prob_dom PROB - vs'))))\"\n  shows \"disjnt vs vs'\"", "lemma NOT_VS_DEP_IMP_DEP_PROJ:\n  fixes PROB vs v v'\n  assumes \"\\<not>(v \\<in> vs)\" \"\\<not>(v' \\<in> vs)\" \"(dep PROB v v')\"\n  shows \"(dep (prob_proj PROB (prob_dom PROB - vs)) v v')\"", "lemma DISJ_PROJ_NDEP_IMP_NDEP:\n  fixes PROB vs vs' vs''\n  assumes\n    \"(disjnt vs vs'')\" \"disjnt vs vs'\"\n    \"\\<not>(dep_var_set (prob_proj PROB (prob_dom PROB - vs)) vs' vs'')\"\n  shows \"\\<not>(dep_var_set PROB vs' vs'')\"", "lemma PROJ_DOM_IDEMPOT:\n  fixes PROB\n  shows \"prob_proj PROB (prob_dom PROB) = PROB\"", "lemma prob_proj_idempot:\n  fixes vs vs'\n  assumes \"(vs \\<subseteq> vs')\"\n  shows \"(prob_proj PROB vs = prob_proj (prob_proj PROB vs') vs)\"", "lemma prob_proj_dom_diff_eq_prob_proj_prob_proj_dom_diff:\n  fixes vs vs'\n  shows \"\n    prob_proj PROB (prob_dom PROB - (vs \\<union> vs'))\n    = prob_proj\n      (prob_proj PROB (prob_dom PROB - vs))\n      (prob_dom (prob_proj PROB (prob_dom PROB - vs)) - vs')\n\"", "lemma PROJ_DEP_IMP_DEP:\n  fixes PROB vs v v'\n  assumes \"dep (prob_proj PROB (prob_dom PROB - vs)) v v'\"\n  shows \"dep PROB v v'\"", "lemma PROJ_NDEP_TC_IMP_NDEP_TC_OR:\n  fixes PROB vs v v'\n  assumes \"\\<not>((\\<lambda>v1' v2'. dep (prob_proj PROB (prob_dom PROB - vs)) v1' v2')\\<^sup>+\\<^sup>+ v v')\"\n  shows \"(\n    (\\<not>((\\<lambda>v1' v2'. dep PROB v1' v2')\\<^sup>+\\<^sup>+ v v'))\n    \\<or> (\\<exists>v''.\n      v'' \\<in> vs\n      \\<and> ((\\<lambda>v1' v2'. dep PROB v1' v2')\\<^sup>+\\<^sup>+ v v'')\n      \\<and> ((\\<lambda>v1' v2'. dep PROB v1' v2')\\<^sup>+\\<^sup>+ v'' v')\n    )\n  )\"", "lemma every_action_proj_eq_as_proj:\n  fixes as vs\n  shows \"list_all (\\<lambda> a. action_proj a vs = a) (as_proj as vs)\"", "lemma empty_eff_not_in_as_proj_2:\n  fixes a as vs\n  assumes \"fmdom' (snd (action_proj a vs)) = {}\"\n  shows \"(as_proj as vs = as_proj (a # as) vs)\"", "lemma sublist_as_proj_eq_as:\n  fixes as' as vs\n  assumes \"subseq as' (as_proj as vs)\"\n  shows \"(as_proj as' vs = as')\"", "lemma DISJ_EFF_DISJ_PROJ_EFF:\n  fixes a s vs\n  assumes \"fmdom' (snd a) \\<inter> s = {}\"\n  shows \"(fmdom' (snd (action_proj a vs)) \\<inter> s = {})\n\"", "lemma state_succ_proj_eq_state_succ:\n  fixes a s vs\n  assumes \"(varset_action a vs)\" \"(fst a \\<subseteq>\\<^sub>f s)\" \"(fmdom' (snd a) \\<subseteq> fmdom' s)\"\n  shows \"(state_succ s (action_proj a vs) = state_succ s a)\"", "lemma no_effectless_proj:\n  fixes vs as\n  shows \"no_effectless_act (as_proj as vs)\"", "lemma as_proj_valid_in_prob_proj:\n  fixes PROB vs as\n  assumes \"(as \\<in> valid_plans PROB)\"\n  shows \"(as_proj as vs \\<in> valid_plans (prob_proj PROB vs))\"", "lemma prob_proj_comm:\n  fixes PROB vs vs'\n  shows \"prob_proj (prob_proj PROB vs) vs' = prob_proj (prob_proj PROB vs') vs\"", "lemma vset_proj_imp_vset:\n  fixes vs vs' a\n  assumes \"(varset_action a vs')\" \"(varset_action (action_proj a vs') vs)\"\n  shows \"(varset_action a vs)\"", "lemma  vset_imp_vset_act_proj_diff:\n  fixes PROB vs vs' a\n  assumes \"(varset_action a vs)\"\n  shows \"(varset_action (action_proj a (prob_dom PROB - vs')) vs)\"", "lemma action_proj_disj_diff:\n  assumes \"(action_dom (fst a) (snd a) \\<subseteq> vs1)\" \"(vs2 \\<inter> vs3 = {})\"\n  shows \"(action_proj (action_proj a (vs1 - vs2)) vs3 = action_proj a vs3)\"", "lemma disj_proj_proj_eq_proj:\n  fixes PROB vs vs'\n  assumes \"(vs \\<inter> vs' = {})\"\n  shows \"prob_proj (prob_proj PROB (prob_dom PROB - vs')) vs = prob_proj PROB vs\"", "lemma n_replace_proj_le_n_as_2:\n  fixes a vs vs'\n  assumes \"(vs \\<subseteq> vs')\" \"(varset_action a vs')\"\n  shows \"(varset_action (action_proj a vs') vs \\<longleftrightarrow> varset_action a vs)\"", "lemma empty_problem_proj_bound:\n  fixes PROB :: \"'a problem\"\n  shows \"problem_plan_bound (prob_proj PROB {}) = 0\"", "lemma problem_plan_bound_works_proj:\n  fixes PROB :: \"'a problem\" and s as vs\n  assumes \"finite PROB\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\" \"(sat_precond_as s as)\"\n  shows \"(\\<exists>as'.\n    (exec_plan (fmrestrict_set vs s) as' = exec_plan (fmrestrict_set vs s) (as_proj as vs))\n    \\<and> (length as' \\<le> problem_plan_bound (prob_proj PROB vs))\n    \\<and> (subseq as' (as_proj as vs))\n    \\<and> (sat_precond_as s as')\n    \\<and> (no_effectless_act as')\n  )\"", "lemma action_proj_inter_i: \"fmrestrict_set V (fmrestrict_set W f) = fmrestrict_set (V \\<inter> W) f\"", "lemma action_proj_inter: \"action_proj (action_proj a vs1) vs2 = action_proj a (vs1 \\<inter> vs2)\"", "lemma prob_proj_inter: \"prob_proj (prob_proj PROB vs1) vs2 = prob_proj PROB (vs1 \\<inter> vs2)\"", "lemma state_succ_fixpoint_if:\n  fixes a s PROB\n  assumes \"a \\<in> PROB\" \"(s \\<in> valid_states PROB)\" \"fst a \\<subseteq>\\<^sub>f s\" \"agree (snd a) s\"\n  shows \"state_succ s a = s\"", "lemma agree_state_succ_idempot:\n  assumes \"(a \\<in> PROB)\" \"(s \\<in> valid_states PROB)\" \"(agree (snd a) s)\"\n  shows \"(state_succ s a = s)\"", "lemma fmdom'_fmrestrict_set:\n  fixes X f\n  shows \"fmdom' (fmrestrict_set X f) = X \\<inter> (fmdom' f)\"", "lemma fmdom'_fmrestrict_set_fmadd:\n  fixes X f g\n  shows \"fmdom' (fmrestrict_set X (f ++\\<^sub>f g)) = X \\<inter> (fmdom' f \\<union> fmdom' g)\"", "lemma fmrestrict_agree:\n  fixes X x f g\n  assumes \"agree (fmrestrict_set X f) (fmrestrict_set X g)\" \"x \\<in> X \\<inter> fmdom' f \\<inter> fmdom' g\"\n  shows \"fmlookup (fmrestrict_set X f) x = fmlookup (fmrestrict_set X g) x\"", "lemma agree_restrict_state_succ_idempot:\n  assumes \"(a \\<in> PROB)\" \"(s \\<in> valid_states PROB)\"\n    \"(agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s))\"\n  shows \"(fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s)\"", "lemma agree_exec_idempot:\n  assumes \"(as \\<in> valid_plans PROB)\" \"(s \\<in> valid_states PROB)\"\n    \"(\\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) s)\"\n  shows \"(exec_plan s as = s)\"", "lemma agree_restrict_exec_idempot:\n  fixes s s'\n  assumes \"(as \\<in> valid_plans PROB)\" \"(s' \\<in> valid_states PROB)\" \"(s \\<in> valid_states PROB)\"\n    \"(\\<forall>a. ListMem a as \\<longrightarrow> agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s))\"\n    \"(fmrestrict_set vs s' = fmrestrict_set vs s)\"\n  shows  \"(fmrestrict_set vs (exec_plan s' as) = fmrestrict_set vs s)\"", "lemma agree_restrict_exec_idempot_pair:\n  fixes s s'\n  assumes \"(as \\<in> valid_plans PROB)\" \"(s' \\<in> valid_states PROB)\" \"(s \\<in> valid_states PROB)\"\n    \"(\\<forall>p e. ListMem (p, e) as \\<longrightarrow> agree (fmrestrict_set vs e) (fmrestrict_set vs s))\"\n    \"(fmrestrict_set vs s' = fmrestrict_set vs s)\"\n  shows \"(fmrestrict_set vs (exec_plan s' as) = fmrestrict_set vs s)\"", "lemma agree_comm: \"agree x x' = agree x' x\"", "lemma restricted_agree_imp_agree:\n  assumes \"(fmdom' s2 \\<subseteq> vs)\" \"(agree (fmrestrict_set vs s1) s2)\"\n  shows \"(agree s1 s2)\"", "lemma agree_imp_submap:\n  assumes \"f1 \\<subseteq>\\<^sub>f f2\"\n  shows \"agree f1 f2\"", "lemma agree_FUNION:\n  assumes \"(agree fm fm1)\" \"(agree fm fm2)\"\n  shows \"(agree fm (fm1 ++ fm2))\"", "lemma agree_fm_list_union:\n  fixes fm\n  assumes \"(\\<forall>fm'. ListMem fm' fmList \\<longrightarrow> agree fm fm')\"\n  shows \"(agree fm (foldr fmap_add_ltr fmList fmempty))\"", "lemma DRESTRICT_EQ_AGREE:\n  assumes \"(fmdom' s2 \\<subseteq> vs2)\" \"(fmdom' s1 \\<subseteq> vs1)\"\n  shows \"((fmrestrict_set vs2 s1 = fmrestrict_set vs1 s2) \\<longrightarrow> agree s1 s2)\"", "lemma  SUBMAPS_AGREE: \"(s1 \\<subseteq>\\<^sub>f s) \\<and> (s2 \\<subseteq>\\<^sub>f s) \\<Longrightarrow> (agree s1 s2)\"", "lemma snapshot_pair: \"snapshot PROB s = {(p, e). (p, e) \\<in> PROB \\<and> agree p s \\<and> agree e s}\"", "lemma action_agree_valid_in_snapshot:\n  assumes \"(a \\<in> PROB)\" \"(agree (fst a) s)\" \"(agree (snd a) s)\"\n  shows \"(a \\<in> snapshot PROB s)\"", "lemma as_mem_agree_valid_in_snapshot:\n  assumes \"(\\<forall>a. ListMem a as \\<longrightarrow> agree (fst a) s \\<and> agree (snd a) s)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"(as \\<in> valid_plans (snapshot PROB s))\"", "lemma fmrestrict_agree_monotonous:\n  fixes f g X\n  assumes \"agree f g\"\n  shows \"agree (fmrestrict_set X f) (fmrestrict_set X g)\"", "lemma SUBMAP_FUNION_DRESTRICT_i:\n  fixes v vsa vsb f g\n  assumes \"v \\<in> vsa\"\n  shows \"\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) f) v\n    = fmlookup (fmrestrict_set (vsa \\<inter> vs) f) v\n  \"", "lemma SUBMAP_FUNION_DRESTRICT':\n  assumes \"(agree fma fmb)\" \"(vsa \\<subseteq> fmdom' fma)\" \"(vsb \\<subseteq> fmdom' fmb)\"\n    \"(fmrestrict_set vsa fm  = fmrestrict_set (vsa \\<inter> vs) fma)\"\n    \"(fmrestrict_set vsb fm = fmrestrict_set (vsb \\<inter> vs) fmb)\"\n  shows \"(fmrestrict_set (vsa \\<union> vsb) fm = fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\"", "lemma UNION_FUNION_DRESTRICT_SUBMAP:\n  assumes \"(vs1 \\<subseteq> fmdom' fma)\" \"(vs2 \\<subseteq> fmdom' fmb)\" \"(agree fma fmb)\"\n    \"(fmrestrict_set vs1 fma \\<subseteq>\\<^sub>f s)\" \"(fmrestrict_set vs2 fmb \\<subseteq>\\<^sub>f s)\"\n  shows \"(fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s)\"", "lemma agree_DRESTRICT:\n  assumes \"agree s1 s2\"\n  shows \"agree (fmrestrict_set vs s1) (fmrestrict_set vs s2)\"", "lemma agree_DRESTRICT_2:\n  assumes \"(fmdom' s1 \\<subseteq> vs1)\" \"(fmdom' s2 \\<subseteq> vs2)\" \"(agree s1 s2)\"\n  shows \"(agree (fmrestrict_set vs2 s1) (fmrestrict_set vs1 s2))\"", "lemma snapshot_eq_filter:\n  shows \"snapshot PROB s = Set.filter (\\<lambda>a. agree (fst a) s \\<and> agree (snd a) s) PROB\"", "lemma FINITE_snapshot:\n  assumes \"finite PROB\"\n  shows \"finite (snapshot PROB s)\"", "lemma dom_proj_snapshot:\n  \"prob_dom (prob_proj PROB (prob_dom (snapshot PROB s))) = prob_dom (snapshot PROB s)\"", "lemma valid_states_snapshot:\n  \"valid_states (prob_proj PROB (prob_dom (snapshot PROB s))) = valid_states (snapshot PROB s)\"", "lemma valid_proj_neq_succ_restricted_neq_succ:\n  assumes \"(x' \\<in> prob_proj PROB vs)\" \"(state_succ s x' \\<noteq> s)\"\n  shows \"(fmrestrict_set vs (state_succ s x') \\<noteq> fmrestrict_set vs s)\"", "lemma proj_successors: \"\n  ((\\<lambda>s. fmrestrict_set vs s) ` (state_successors (prob_proj PROB vs) s))\n   \\<subseteq> (state_successors (prob_proj PROB vs) (fmrestrict_set vs s))\n\"", "lemma  state_in_successor_proj_in_state_in_successor: \"\n  (s' \\<in> state_successors (prob_proj PROB vs) s)\n  \\<Longrightarrow> (fmrestrict_set vs s'  \\<in> state_successors (prob_proj PROB vs) (fmrestrict_set vs s))\"", "lemma proj_FDOM_eff_subset_FDOM_valid_states:\n  fixes p e s\n  assumes \"((p, e) \\<in> prob_proj PROB vs)\" \"(s \\<in> valid_states PROB)\"\n  shows \"(fmdom' e \\<subseteq> fmdom' s)\"", "lemma valid_proj_action_valid_succ:\n  assumes \"(h \\<in> prob_proj PROB vs)\" \"(s \\<in> valid_states PROB)\"\n  shows \"(state_succ s h \\<in> valid_states PROB)\"", "lemma proj_successors_of_valid_are_valid:\n  assumes \"(s \\<in> valid_states PROB)\"\n  shows \"(state_successors (prob_proj PROB vs) s \\<subseteq> (valid_states PROB))\"", "lemma fmrestrict_set_inter_img:\n  fixes A X Y\n  shows \"fmrestrict_set (X \\<inter> Y) ` A = (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A\"", "lemma invariantStateSpace_thm_9:\n  fixes ss vs1 vs2\n  shows \"ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1\"", "lemma FINITE_ss_proj:\n  fixes ss vs\n  assumes \"finite ss\"\n  shows \"finite (ss_proj ss vs)\"", "lemma nempty_stateSpace_nempty_ss_proj:\n  assumes \"(ss \\<noteq> {})\"\n  shows \"(ss_proj ss vs \\<noteq> {})\"", "lemma invariantStateSpace_thm_5:\n  fixes ss vs domain\n  assumes \"(stateSpace ss domain)\"\n  shows \"(stateSpace (ss_proj ss vs) (domain \\<inter> vs))\"", "lemma dom_subset_ssproj_eq_ss:\n  fixes ss domain vs\n  assumes \"(stateSpace ss domain)\" \"(domain \\<subseteq> vs)\"\n  shows \"(ss_proj ss vs = ss)\"", "lemma  neq_vs_neq_ss_proj:\n  fixes vs\n  assumes \"(ss \\<noteq> {})\" \"(stateSpace ss vs)\" \"(vs1 \\<subseteq> vs)\" \"(vs2 \\<subseteq> vs)\" \"(vs1 \\<noteq> vs2)\"\n  shows \"(ss_proj ss vs1 \\<noteq> ss_proj ss vs2)\"", "lemma subset_dom_stateSpace_ss_proj:\n  fixes vs1 vs2\n  assumes \"(vs1 \\<subseteq> vs2)\" \"(stateSpace ss vs2)\"\n  shows \"(stateSpace (ss_proj ss vs1) vs1)\"", "lemma card_proj_leq:\n  assumes \"finite PROB\"\n  shows \"card (prob_proj PROB vs) \\<le> card PROB\""], "translations": [["", "lemma action_proj_pair: \"action_proj (p, e) vs = (fmrestrict_set vs p, fmrestrict_set vs e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_proj (p, e) vs = (fmrestrict_set vs p, fmrestrict_set vs e)", "unfolding action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrestrict_set vs (fst (p, e)), fmrestrict_set vs (snd (p, e))) =\n    (fmrestrict_set vs p, fmrestrict_set vs e)", "by simp"], ["", "definition prob_proj where\n  \"prob_proj PROB vs \\<equiv> (\\<lambda>a. action_proj a vs) ` PROB\"\n\n\n\\<comment> \\<open>NOTE  using 'fun' due to multiple defining equations.\\<close>\n\\<comment> \\<open>NOTE  name shortened.\\<close>"], ["", "fun as_proj where\n  \"as_proj [] _ = []\"\n| \"as_proj (a # as) vs = (if fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n    then action_proj a vs # as_proj as vs\n    else as_proj as vs\n  )\"\n\n\n\\<comment> \\<open>TODO the lemma might be superfluous (follows directly from 'as\\_proj.simps').\\<close>"], ["", "lemma as_proj_pair:\n  \"as_proj ((p, e) # as) vs = (if (fmdom' (fmrestrict_set vs e) \\<noteq> {})\n    then action_proj (p, e) vs # as_proj as vs\n    else as_proj as vs\n  )\"\n  \"as_proj [] vs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as_proj ((p, e) # as) vs =\n    (if fmdom' (fmrestrict_set vs e) \\<noteq> {}\n     then action_proj (p, e) vs # as_proj as vs else as_proj as vs) &&&\n    as_proj [] vs = []", "by (simp)+"], ["", "lemma proj_state_succ:\n  fixes s a vs\n  assumes \"(fst a \\<subseteq>\\<^sub>f s)\"\n  shows  \"(state_succ (fmrestrict_set vs s) (action_proj a vs) = fmrestrict_set vs (state_succ s a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "have \"\n    fmrestrict_set vs (if fst a \\<subseteq>\\<^sub>f s then snd a ++ s else s)\n    = fmrestrict_set vs (snd a ++ s)\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (if fst a \\<subseteq>\\<^sub>f s then snd a ++ s else s) =\n    fmrestrict_set vs (snd a ++ s)", "using assms"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (if fst a \\<subseteq>\\<^sub>f s then snd a ++ s else s) =\n    fmrestrict_set vs (snd a ++ s)", "by simp"], ["proof (state)\nthis:\n  fmrestrict_set vs\n   (if fst a \\<subseteq>\\<^sub>f s then snd a ++ s else s) =\n  fmrestrict_set vs (snd a ++ s)\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "moreover"], ["proof (state)\nthis:\n  fmrestrict_set vs\n   (if fst a \\<subseteq>\\<^sub>f s then snd a ++ s else s) =\n  fmrestrict_set vs (snd a ++ s)\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "{"], ["proof (state)\nthis:\n  fmrestrict_set vs\n   (if fst a \\<subseteq>\\<^sub>f s then snd a ++ s else s) =\n  fmrestrict_set vs (snd a ++ s)\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "assume \"fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s\""], ["proof (state)\nthis:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "then"], ["proof (chain)\npicking this:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s", "have \"\n      (state_succ (fmrestrict_set vs s) (action_proj a vs)\n       = fmrestrict_set vs (snd a ++ s))\n    \""], ["proof (prove)\nusing this:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (snd a ++ s)", "unfolding state_succ_def action_proj_def fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. (if fst (fmrestrict_set vs (fst a),\n             fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n        fmrestrict_set vs s\n     then fmrestrict_set vs s ++\\<^sub>f\n          snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))\n     else fmrestrict_set vs s) =\n    fmrestrict_set vs (s ++\\<^sub>f snd a)", "by force"], ["proof (state)\nthis:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (snd a ++ s)\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "}"], ["proof (state)\nthis:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (snd a ++ s)\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "moreover"], ["proof (state)\nthis:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (snd a ++ s)\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "{"], ["proof (state)\nthis:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (snd a ++ s)\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "assume \"\\<not>(fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s)\""], ["proof (state)\nthis:\n  \\<not> fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "then"], ["proof (chain)\npicking this:\n  \\<not> fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s", "have \"\n      (state_succ (fmrestrict_set vs s) (action_proj a vs)\n       = fmrestrict_set vs (snd a ++ s))\n    \""], ["proof (prove)\nusing this:\n  \\<not> fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (snd a ++ s)", "unfolding state_succ_def  action_proj_def"], ["proof (prove)\nusing this:\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. (if fst (fmrestrict_set vs (fst a),\n             fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n        fmrestrict_set vs s\n     then snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) ++\n          fmrestrict_set vs s\n     else fmrestrict_set vs s) =\n    fmrestrict_set vs (snd a ++ s)", "using assms fmsubset_restrict_set_mono"], ["proof (prove)\nusing this:\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         fmrestrict_set vs s\n  fst a \\<subseteq>\\<^sub>f s\n  ?m \\<subseteq>\\<^sub>f ?n \\<Longrightarrow>\n  fmrestrict_set ?A ?m \\<subseteq>\\<^sub>f fmrestrict_set ?A ?n\n\ngoal (1 subgoal):\n 1. (if fst (fmrestrict_set vs (fst a),\n             fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n        fmrestrict_set vs s\n     then snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) ++\n          fmrestrict_set vs s\n     else fmrestrict_set vs s) =\n    fmrestrict_set vs (snd a ++ s)", "by auto"], ["proof (state)\nthis:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (snd a ++ s)\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "}"], ["proof (state)\nthis:\n  \\<not> fst (action_proj a vs) \\<subseteq>\\<^sub>f\n         fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (snd a ++ s)\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "ultimately"], ["proof (chain)\npicking this:\n  fmrestrict_set vs\n   (if fst a \\<subseteq>\\<^sub>f s then snd a ++ s else s) =\n  fmrestrict_set vs (snd a ++ s)\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (snd a ++ s)\n  \\<not> fst (action_proj a vs) \\<subseteq>\\<^sub>f\n         fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (snd a ++ s)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set vs\n   (if fst a \\<subseteq>\\<^sub>f s then snd a ++ s else s) =\n  fmrestrict_set vs (snd a ++ s)\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (snd a ++ s)\n  \\<not> fst (action_proj a vs) \\<subseteq>\\<^sub>f\n         fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (snd a ++ s)\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  fmrestrict_set vs\n   (if fst a \\<subseteq>\\<^sub>f s then snd a ++ s else s) =\n  fmrestrict_set vs (snd a ++ s)\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s \\<Longrightarrow>\n  (if fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s\n   then snd (action_proj a vs) ++ fmrestrict_set vs s\n   else fmrestrict_set vs s) =\n  fmrestrict_set vs (snd a ++ s)\n  \\<not> fst (action_proj a vs) \\<subseteq>\\<^sub>f\n         fmrestrict_set vs s \\<Longrightarrow>\n  (if fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s\n   then snd (action_proj a vs) ++ fmrestrict_set vs s\n   else fmrestrict_set vs s) =\n  fmrestrict_set vs (snd a ++ s)\n\ngoal (1 subgoal):\n 1. (if fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s\n     then snd (action_proj a vs) ++ fmrestrict_set vs s\n     else fmrestrict_set vs s) =\n    fmrestrict_set vs\n     (if fst a \\<subseteq>\\<^sub>f s then snd a ++ s else s)", "by argo"], ["proof (state)\nthis:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma graph_plan_lemma_1:\n  fixes s vs as\n  assumes \"sat_precond_as s as\"\n  shows \"(exec_plan (fmrestrict_set vs s) (as_proj as vs) = (fmrestrict_set vs (exec_plan s as)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n    fmrestrict_set vs (exec_plan s as)", "using assms"], ["proof (prove)\nusing this:\n  sat_precond_as s as\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n    fmrestrict_set vs (exec_plan s as)", "proof (induction as arbitrary: s vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s vs.\n       sat_precond_as s [] \\<Longrightarrow>\n       exec_plan (fmrestrict_set vs s) (as_proj [] vs) =\n       fmrestrict_set vs (exec_plan s [])\n 2. \\<And>a as s vs.\n       \\<lbrakk>\\<And>s vs.\n                   sat_precond_as s as \\<Longrightarrow>\n                   exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                   fmrestrict_set vs (exec_plan s as);\n        sat_precond_as s (a # as)\\<rbrakk>\n       \\<Longrightarrow> exec_plan (fmrestrict_set vs s)\n                          (as_proj (a # as) vs) =\n                         fmrestrict_set vs (exec_plan s (a # as))", "case (Cons a as)"], ["proof (state)\nthis:\n  sat_precond_as ?s as \\<Longrightarrow>\n  exec_plan (fmrestrict_set ?vs ?s) (as_proj as ?vs) =\n  fmrestrict_set ?vs (exec_plan ?s as)\n  sat_precond_as s (a # as)\n\ngoal (2 subgoals):\n 1. \\<And>s vs.\n       sat_precond_as s [] \\<Longrightarrow>\n       exec_plan (fmrestrict_set vs s) (as_proj [] vs) =\n       fmrestrict_set vs (exec_plan s [])\n 2. \\<And>a as s vs.\n       \\<lbrakk>\\<And>s vs.\n                   sat_precond_as s as \\<Longrightarrow>\n                   exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                   fmrestrict_set vs (exec_plan s as);\n        sat_precond_as s (a # as)\\<rbrakk>\n       \\<Longrightarrow> exec_plan (fmrestrict_set vs s)\n                          (as_proj (a # as) vs) =\n                         fmrestrict_set vs (exec_plan s (a # as))", "then"], ["proof (chain)\npicking this:\n  sat_precond_as ?s as \\<Longrightarrow>\n  exec_plan (fmrestrict_set ?vs ?s) (as_proj as ?vs) =\n  fmrestrict_set ?vs (exec_plan ?s as)\n  sat_precond_as s (a # as)", "show ?case"], ["proof (prove)\nusing this:\n  sat_precond_as ?s as \\<Longrightarrow>\n  exec_plan (fmrestrict_set ?vs ?s) (as_proj as ?vs) =\n  fmrestrict_set ?vs (exec_plan ?s as)\n  sat_precond_as s (a # as)\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs) =\n    fmrestrict_set vs (exec_plan s (a # as))", "proof (cases \"fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s vs.\n                sat_precond_as s as \\<Longrightarrow>\n                exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                fmrestrict_set vs (exec_plan s as);\n     sat_precond_as s (a # as);\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan (fmrestrict_set vs s)\n                       (as_proj (a # as) vs) =\n                      fmrestrict_set vs (exec_plan s (a # as))\n 2. \\<lbrakk>\\<And>s vs.\n                sat_precond_as s as \\<Longrightarrow>\n                exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                fmrestrict_set vs (exec_plan s as);\n     sat_precond_as s (a # as);\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan (fmrestrict_set vs s)\n                       (as_proj (a # as) vs) =\n                      fmrestrict_set vs (exec_plan s (a # as))", "case True"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s vs.\n                sat_precond_as s as \\<Longrightarrow>\n                exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                fmrestrict_set vs (exec_plan s as);\n     sat_precond_as s (a # as);\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan (fmrestrict_set vs s)\n                       (as_proj (a # as) vs) =\n                      fmrestrict_set vs (exec_plan s (a # as))\n 2. \\<lbrakk>\\<And>s vs.\n                sat_precond_as s as \\<Longrightarrow>\n                exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                fmrestrict_set vs (exec_plan s as);\n     sat_precond_as s (a # as);\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan (fmrestrict_set vs s)\n                       (as_proj (a # as) vs) =\n                      fmrestrict_set vs (exec_plan s (a # as))", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}", "have\n      \"state_succ (fmrestrict_set vs s) (action_proj a vs) = fmrestrict_set vs (state_succ s a)\""], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "using Cons.prems proj_state_succ"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n  sat_precond_as s (a # as)\n  fst ?a \\<subseteq>\\<^sub>f ?s \\<Longrightarrow>\n  state_succ (fmrestrict_set ?vs ?s) (action_proj ?a ?vs) =\n  fmrestrict_set ?vs (state_succ ?s ?a)\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "by fastforce"], ["proof (state)\nthis:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s vs.\n                sat_precond_as s as \\<Longrightarrow>\n                exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                fmrestrict_set vs (exec_plan s as);\n     sat_precond_as s (a # as);\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan (fmrestrict_set vs s)\n                       (as_proj (a # as) vs) =\n                      fmrestrict_set vs (exec_plan s (a # as))\n 2. \\<lbrakk>\\<And>s vs.\n                sat_precond_as s as \\<Longrightarrow>\n                exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                fmrestrict_set vs (exec_plan s as);\n     sat_precond_as s (a # as);\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan (fmrestrict_set vs s)\n                       (as_proj (a # as) vs) =\n                      fmrestrict_set vs (exec_plan s (a # as))", "then"], ["proof (chain)\npicking this:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s a)", "show ?thesis"], ["proof (prove)\nusing this:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s a)\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs) =\n    fmrestrict_set vs (exec_plan s (a # as))", "unfolding exec_plan.simps sat_precond_as.simps as_proj.simps"], ["proof (prove)\nusing this:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s a)\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s)\n     (if fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n      then action_proj a vs # as_proj as vs else as_proj as vs) =\n    fmrestrict_set vs (exec_plan (state_succ s a) as)", "using Cons.IH Cons.prems True"], ["proof (prove)\nusing this:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s a)\n  sat_precond_as ?s as \\<Longrightarrow>\n  exec_plan (fmrestrict_set ?vs ?s) (as_proj as ?vs) =\n  fmrestrict_set ?vs (exec_plan ?s as)\n  sat_precond_as s (a # as)\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s)\n     (if fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n      then action_proj a vs # as_proj as vs else as_proj as vs) =\n    fmrestrict_set vs (exec_plan (state_succ s a) as)", "by simp"], ["proof (state)\nthis:\n  exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs) =\n  fmrestrict_set vs (exec_plan s (a # as))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s vs.\n                sat_precond_as s as \\<Longrightarrow>\n                exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                fmrestrict_set vs (exec_plan s as);\n     sat_precond_as s (a # as);\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan (fmrestrict_set vs s)\n                       (as_proj (a # as) vs) =\n                      fmrestrict_set vs (exec_plan s (a # as))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s vs.\n                sat_precond_as s as \\<Longrightarrow>\n                exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                fmrestrict_set vs (exec_plan s as);\n     sat_precond_as s (a # as);\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan (fmrestrict_set vs s)\n                       (as_proj (a # as) vs) =\n                      fmrestrict_set vs (exec_plan s (a # as))", "case False"], ["proof (state)\nthis:\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s vs.\n                sat_precond_as s as \\<Longrightarrow>\n                exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                fmrestrict_set vs (exec_plan s as);\n     sat_precond_as s (a # as);\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan (fmrestrict_set vs s)\n                       (as_proj (a # as) vs) =\n                      fmrestrict_set vs (exec_plan s (a # as))", "then"], ["proof (chain)\npicking this:\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}", "have \"(fmdom' (snd a) \\<inter> vs = {})\""], ["proof (prove)\nusing this:\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs = {}", "using False fmdom'_restrict_set_precise[of vs \"snd a\"]"], ["proof (prove)\nusing this:\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n  fmdom' (fmrestrict_set vs (snd a)) = fmdom' (snd a) \\<inter> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs = {}", "by argo"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> vs = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s vs.\n                sat_precond_as s as \\<Longrightarrow>\n                exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                fmrestrict_set vs (exec_plan s as);\n     sat_precond_as s (a # as);\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan (fmrestrict_set vs s)\n                       (as_proj (a # as) vs) =\n                      fmrestrict_set vs (exec_plan s (a # as))", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<inter> vs = {}", "have \"fmrestrict_set vs s = fmrestrict_set vs (state_succ s a)\""], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<inter> vs = {}\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (state_succ s a)", "using disj_imp_eq_proj_exec"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<inter> vs = {}\n  fmdom' (snd ?a) \\<inter> ?vs = {} \\<Longrightarrow>\n  fmrestrict_set ?vs ?s = fmrestrict_set ?vs (state_succ ?s ?a)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s = fmrestrict_set vs (state_succ s a)", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set vs s = fmrestrict_set vs (state_succ s a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s vs.\n                sat_precond_as s as \\<Longrightarrow>\n                exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                fmrestrict_set vs (exec_plan s as);\n     sat_precond_as s (a # as);\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan (fmrestrict_set vs s)\n                       (as_proj (a # as) vs) =\n                      fmrestrict_set vs (exec_plan s (a # as))", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs s = fmrestrict_set vs (state_succ s a)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set vs s = fmrestrict_set vs (state_succ s a)\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs) =\n    fmrestrict_set vs (exec_plan s (a # as))", "unfolding exec_plan.simps sat_precond_as.simps as_proj.simps"], ["proof (prove)\nusing this:\n  fmrestrict_set vs s = fmrestrict_set vs (state_succ s a)\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s)\n     (if fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n      then action_proj a vs # as_proj as vs else as_proj as vs) =\n    fmrestrict_set vs (exec_plan (state_succ s a) as)", "using Cons.IH Cons.prems False"], ["proof (prove)\nusing this:\n  fmrestrict_set vs s = fmrestrict_set vs (state_succ s a)\n  sat_precond_as ?s as \\<Longrightarrow>\n  exec_plan (fmrestrict_set ?vs ?s) (as_proj as ?vs) =\n  fmrestrict_set ?vs (exec_plan ?s as)\n  sat_precond_as s (a # as)\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s)\n     (if fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n      then action_proj a vs # as_proj as vs else as_proj as vs) =\n    fmrestrict_set vs (exec_plan (state_succ s a) as)", "by simp"], ["proof (state)\nthis:\n  exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs) =\n  fmrestrict_set vs (exec_plan s (a # as))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs) =\n  fmrestrict_set vs (exec_plan s (a # as))\n\ngoal (1 subgoal):\n 1. \\<And>s vs.\n       sat_precond_as s [] \\<Longrightarrow>\n       exec_plan (fmrestrict_set vs s) (as_proj [] vs) =\n       fmrestrict_set vs (exec_plan s [])", "qed simp\n\n\n\\<comment> \\<open>TODO the proofs are inefficient (detailed proofs?).\\<close>"], ["", "lemma  proj_action_dom_eq_inter:\n  shows \"\n    action_dom (fst (action_proj a vs)) (snd (action_proj a vs))\n    = (action_dom (fst a) (snd a) \\<inter> vs)\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_dom (fst (action_proj a vs)) (snd (action_proj a vs)) =\n    action_dom (fst a) (snd a) \\<inter> vs", "unfolding action_dom_def action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom'\n     (fst (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))) \\<union>\n    fmdom' (snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))) =\n    (fmdom' (fst a) \\<union> fmdom' (snd a)) \\<inter> vs", "by (auto simp: fmdom'_restrict_set_precise)"], ["", "lemma graph_plan_neq_mems_state_set_neq_len:\n  shows \"prob_dom (prob_proj PROB vs) = (prob_dom PROB \\<inter> vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) = prob_dom PROB \\<inter> vs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) = prob_dom PROB \\<inter> vs", "have \"\n      prob_dom (prob_proj PROB vs)\n      = (\n        \\<Union>(s1, s2)\\<in>(\\<lambda>a. (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)))\n        `  PROB. action_dom s1 s2\n      )\n    \""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) =\n    (\\<Union>(s1,\n        s2)\\<in>(\\<lambda>a.\n                    (fmrestrict_set vs (fst a),\n                     fmrestrict_set vs (snd a))) `\n                PROB.\n        action_dom s1 s2)", "unfolding prob_dom_def prob_proj_def action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>(s1,\n        s2)\\<in>(\\<lambda>a.\n                    (fmrestrict_set vs (fst a),\n                     fmrestrict_set vs (snd a))) `\n                PROB.\n        action_dom s1 s2) =\n    (\\<Union>(s1,\n        s2)\\<in>(\\<lambda>a.\n                    (fmrestrict_set vs (fst a),\n                     fmrestrict_set vs (snd a))) `\n                PROB.\n        action_dom s1 s2)", "by blast"], ["proof (state)\nthis:\n  prob_dom (prob_proj PROB vs) =\n  (\\<Union>(s1,\n      s2)\\<in>(\\<lambda>a.\n                  (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))) `\n              PROB.\n      action_dom s1 s2)\n\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) = prob_dom PROB \\<inter> vs", "moreover"], ["proof (state)\nthis:\n  prob_dom (prob_proj PROB vs) =\n  (\\<Union>(s1,\n      s2)\\<in>(\\<lambda>a.\n                  (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))) `\n              PROB.\n      action_dom s1 s2)\n\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) = prob_dom PROB \\<inter> vs", "{"], ["proof (state)\nthis:\n  prob_dom (prob_proj PROB vs) =\n  (\\<Union>(s1,\n      s2)\\<in>(\\<lambda>a.\n                  (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))) `\n              PROB.\n      action_dom s1 s2)\n\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) = prob_dom PROB \\<inter> vs", "have \"\n    (prob_dom PROB \\<inter> vs)\n    = (\\<Union>a\\<in>PROB. action_dom (fst a) (snd a)  \\<inter> vs)\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_dom PROB \\<inter> vs =\n    (\\<Union>a\\<in>PROB. action_dom (fst a) (snd a) \\<inter> vs)", "unfolding prob_dom_def prob_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>(s1, s2)\\<in>PROB. action_dom s1 s2) \\<inter> vs =\n    (\\<Union>a\\<in>PROB. action_dom (fst a) (snd a) \\<inter> vs)", "using SUP_cong"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A = ?B;\n   \\<And>x. x \\<in> ?B \\<Longrightarrow> ?C x = ?D x\\<rbrakk>\n  \\<Longrightarrow> Sup (?C ` ?A) = Sup (?D ` ?B)\n\ngoal (1 subgoal):\n 1. (\\<Union>(s1, s2)\\<in>PROB. action_dom s1 s2) \\<inter> vs =\n    (\\<Union>a\\<in>PROB. action_dom (fst a) (snd a) \\<inter> vs)", "by auto"], ["proof (state)\nthis:\n  prob_dom PROB \\<inter> vs =\n  (\\<Union>a\\<in>PROB. action_dom (fst a) (snd a) \\<inter> vs)\n\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) = prob_dom PROB \\<inter> vs", "also"], ["proof (state)\nthis:\n  prob_dom PROB \\<inter> vs =\n  (\\<Union>a\\<in>PROB. action_dom (fst a) (snd a) \\<inter> vs)\n\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) = prob_dom PROB \\<inter> vs", "have \"\\<dots> = (\\<Union>a\\<in>PROB. action_dom (fst (action_proj a vs)) (snd (action_proj a vs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>a\\<in>PROB. action_dom (fst a) (snd a) \\<inter> vs) =\n    (\\<Union>a\\<in>PROB.\n        action_dom (fst (action_proj a vs)) (snd (action_proj a vs)))", "using proj_action_dom_eq_inter[symmetric]"], ["proof (prove)\nusing this:\n  action_dom (fst ?a) (snd ?a) \\<inter> ?vs =\n  action_dom (fst (action_proj ?a ?vs)) (snd (action_proj ?a ?vs))\n\ngoal (1 subgoal):\n 1. (\\<Union>a\\<in>PROB. action_dom (fst a) (snd a) \\<inter> vs) =\n    (\\<Union>a\\<in>PROB.\n        action_dom (fst (action_proj a vs)) (snd (action_proj a vs)))", "by fast"], ["proof (state)\nthis:\n  (\\<Union>a\\<in>PROB. action_dom (fst a) (snd a) \\<inter> vs) =\n  (\\<Union>a\\<in>PROB.\n      action_dom (fst (action_proj a vs)) (snd (action_proj a vs)))\n\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) = prob_dom PROB \\<inter> vs", "finally"], ["proof (chain)\npicking this:\n  prob_dom PROB \\<inter> vs =\n  (\\<Union>a\\<in>PROB.\n      action_dom (fst (action_proj a vs)) (snd (action_proj a vs)))", "have \"\n      (prob_dom PROB \\<inter> vs)\n      = (\\<Union>a\\<in>PROB. fmdom' (fmrestrict_set vs (fst a)) \\<union> fmdom' (fmrestrict_set vs (snd a)))\n    \""], ["proof (prove)\nusing this:\n  prob_dom PROB \\<inter> vs =\n  (\\<Union>a\\<in>PROB.\n      action_dom (fst (action_proj a vs)) (snd (action_proj a vs)))\n\ngoal (1 subgoal):\n 1. prob_dom PROB \\<inter> vs =\n    (\\<Union>a\\<in>PROB.\n        fmdom' (fmrestrict_set vs (fst a)) \\<union>\n        fmdom' (fmrestrict_set vs (snd a)))", "unfolding action_dom_def action_proj_def"], ["proof (prove)\nusing this:\n  prob_dom PROB \\<inter> vs =\n  (\\<Union>a\\<in>PROB.\n      fmdom'\n       (fst (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))) \\<union>\n      fmdom' (snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))))\n\ngoal (1 subgoal):\n 1. prob_dom PROB \\<inter> vs =\n    (\\<Union>a\\<in>PROB.\n        fmdom' (fmrestrict_set vs (fst a)) \\<union>\n        fmdom' (fmrestrict_set vs (snd a)))", "by simp"], ["proof (state)\nthis:\n  prob_dom PROB \\<inter> vs =\n  (\\<Union>a\\<in>PROB.\n      fmdom' (fmrestrict_set vs (fst a)) \\<union>\n      fmdom' (fmrestrict_set vs (snd a)))\n\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) = prob_dom PROB \\<inter> vs", "}"], ["proof (state)\nthis:\n  prob_dom PROB \\<inter> vs =\n  (\\<Union>a\\<in>PROB.\n      fmdom' (fmrestrict_set vs (fst a)) \\<union>\n      fmdom' (fmrestrict_set vs (snd a)))\n\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) = prob_dom PROB \\<inter> vs", "ultimately"], ["proof (chain)\npicking this:\n  prob_dom (prob_proj PROB vs) =\n  (\\<Union>(s1,\n      s2)\\<in>(\\<lambda>a.\n                  (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))) `\n              PROB.\n      action_dom s1 s2)\n  prob_dom PROB \\<inter> vs =\n  (\\<Union>a\\<in>PROB.\n      fmdom' (fmrestrict_set vs (fst a)) \\<union>\n      fmdom' (fmrestrict_set vs (snd a)))", "show ?thesis"], ["proof (prove)\nusing this:\n  prob_dom (prob_proj PROB vs) =\n  (\\<Union>(s1,\n      s2)\\<in>(\\<lambda>a.\n                  (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))) `\n              PROB.\n      action_dom s1 s2)\n  prob_dom PROB \\<inter> vs =\n  (\\<Union>a\\<in>PROB.\n      fmdom' (fmrestrict_set vs (fst a)) \\<union>\n      fmdom' (fmrestrict_set vs (snd a)))\n\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) = prob_dom PROB \\<inter> vs", "by (metis (mono_tags, lifting) SUP_cong UN_simps(10) action_dom_def case_prod_beta' prod.sel(1)\n        snd_conv)"], ["proof (state)\nthis:\n  prob_dom (prob_proj PROB vs) = prob_dom PROB \\<inter> vs\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>TODO more detailed proof.\\<close>"], ["", "lemma graph_plan_not_eq_last_diff_paths:\n  fixes PROB vs\n  assumes \"(s \\<in> valid_states PROB)\"\n  shows \"((fmrestrict_set vs s) \\<in> valid_states (prob_proj PROB vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)", "unfolding valid_states_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs s \\<in> {s. fmdom' s = prob_dom (prob_proj PROB vs)}", "using graph_plan_neq_mems_state_set_neq_len"], ["proof (prove)\nusing this:\n  prob_dom (prob_proj ?PROB ?vs) = prob_dom ?PROB \\<inter> ?vs\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s \\<in> {s. fmdom' s = prob_dom (prob_proj PROB vs)}", "by (metis (mono_tags, lifting)\n      assms fmdom'.rep_eq fmlookup_fmrestrict_set_dom inf_commute mem_Collect_eq valid_states_def)"], ["", "lemma dom_eff_subset_imp_dom_succ_eq_proj:\n  fixes h s vs\n  assumes \"(fmdom' (snd h) \\<subseteq> fmdom' s)\"\n  shows \"(fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)", "proof (cases \"fst (fmrestrict_set vs (fst h), fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fst (fmrestrict_set vs (fst h),\n         fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n    s \\<Longrightarrow>\n    fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)\n 2. \\<not> fst (fmrestrict_set vs (fst h),\n                fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n           s \\<Longrightarrow>\n    fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)", "case true: True"], ["proof (state)\nthis:\n  fst (fmrestrict_set vs (fst h),\n       fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n  s\n\ngoal (2 subgoals):\n 1. fst (fmrestrict_set vs (fst h),\n         fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n    s \\<Longrightarrow>\n    fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)\n 2. \\<not> fst (fmrestrict_set vs (fst h),\n                fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n           s \\<Longrightarrow>\n    fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)", "then"], ["proof (chain)\npicking this:\n  fst (fmrestrict_set vs (fst h),\n       fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n  s", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (fmrestrict_set vs (fst h),\n       fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n  s\n\ngoal (1 subgoal):\n 1. fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)", "proof (cases \"fst h \\<subseteq>\\<^sub>f s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>fst (fmrestrict_set vs (fst h),\n                  fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n             s;\n     fst h \\<subseteq>\\<^sub>f s\\<rbrakk>\n    \\<Longrightarrow> fmdom' (state_succ s (action_proj h vs)) =\n                      fmdom' (state_succ s h)\n 2. \\<lbrakk>fst (fmrestrict_set vs (fst h),\n                  fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n             s;\n     \\<not> fst h \\<subseteq>\\<^sub>f s\\<rbrakk>\n    \\<Longrightarrow> fmdom' (state_succ s (action_proj h vs)) =\n                      fmdom' (state_succ s h)", "case True"], ["proof (state)\nthis:\n  fst h \\<subseteq>\\<^sub>f s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst (fmrestrict_set vs (fst h),\n                  fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n             s;\n     fst h \\<subseteq>\\<^sub>f s\\<rbrakk>\n    \\<Longrightarrow> fmdom' (state_succ s (action_proj h vs)) =\n                      fmdom' (state_succ s h)\n 2. \\<lbrakk>fst (fmrestrict_set vs (fst h),\n                  fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n             s;\n     \\<not> fst h \\<subseteq>\\<^sub>f s\\<rbrakk>\n    \\<Longrightarrow> fmdom' (state_succ s (action_proj h vs)) =\n                      fmdom' (state_succ s h)", "then"], ["proof (chain)\npicking this:\n  fst h \\<subseteq>\\<^sub>f s", "show ?thesis"], ["proof (prove)\nusing this:\n  fst h \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)", "unfolding state_succ_def action_proj_def"], ["proof (prove)\nusing this:\n  fst h \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmdom'\n     (if fst (fmrestrict_set vs (fst h),\n              fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n         s\n      then snd (fmrestrict_set vs (fst h), fmrestrict_set vs (snd h)) ++ s\n      else s) =\n    fmdom' (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s)", "using true True"], ["proof (prove)\nusing this:\n  fst h \\<subseteq>\\<^sub>f s\n  fst (fmrestrict_set vs (fst h),\n       fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n  s\n  fst h \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmdom'\n     (if fst (fmrestrict_set vs (fst h),\n              fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n         s\n      then snd (fmrestrict_set vs (fst h), fmrestrict_set vs (snd h)) ++ s\n      else s) =\n    fmdom' (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s)", "by simp (smt assms fmap_add_ltr_def fmdom'.rep_eq fmdom'_add fmlookup_fmrestrict_set_dom\n          inf.absorb_iff2 inf.left_commute sup.absorb_iff1)"], ["proof (state)\nthis:\n  fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fst (fmrestrict_set vs (fst h),\n                  fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n             s;\n     \\<not> fst h \\<subseteq>\\<^sub>f s\\<rbrakk>\n    \\<Longrightarrow> fmdom' (state_succ s (action_proj h vs)) =\n                      fmdom' (state_succ s h)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>fst (fmrestrict_set vs (fst h),\n                  fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n             s;\n     \\<not> fst h \\<subseteq>\\<^sub>f s\\<rbrakk>\n    \\<Longrightarrow> fmdom' (state_succ s (action_proj h vs)) =\n                      fmdom' (state_succ s h)", "case False"], ["proof (state)\nthis:\n  \\<not> fst h \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fst (fmrestrict_set vs (fst h),\n                  fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n             s;\n     \\<not> fst h \\<subseteq>\\<^sub>f s\\<rbrakk>\n    \\<Longrightarrow> fmdom' (state_succ s (action_proj h vs)) =\n                      fmdom' (state_succ s h)", "then"], ["proof (chain)\npicking this:\n  \\<not> fst h \\<subseteq>\\<^sub>f s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> fst h \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)", "unfolding state_succ_def action_proj_def"], ["proof (prove)\nusing this:\n  \\<not> fst h \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmdom'\n     (if fst (fmrestrict_set vs (fst h),\n              fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n         s\n      then snd (fmrestrict_set vs (fst h), fmrestrict_set vs (snd h)) ++ s\n      else s) =\n    fmdom' (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s)", "using true False"], ["proof (prove)\nusing this:\n  \\<not> fst h \\<subseteq>\\<^sub>f s\n  fst (fmrestrict_set vs (fst h),\n       fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n  s\n  \\<not> fst h \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmdom'\n     (if fst (fmrestrict_set vs (fst h),\n              fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n         s\n      then snd (fmrestrict_set vs (fst h), fmrestrict_set vs (snd h)) ++ s\n      else s) =\n    fmdom' (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s)", "by simp (metis (no_types) assms dual_order.trans fmap_add_ltr_def fmdom'.rep_eq fmdom'_add\n          fmlookup_fmrestrict_set_dom inf_le2 sup.absorb_iff1)"], ["proof (state)\nthis:\n  fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)\n\ngoal (1 subgoal):\n 1. \\<not> fst (fmrestrict_set vs (fst h),\n                fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n           s \\<Longrightarrow>\n    fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> fst (fmrestrict_set vs (fst h),\n                fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n           s \\<Longrightarrow>\n    fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)", "case False"], ["proof (state)\nthis:\n  \\<not> fst (fmrestrict_set vs (fst h),\n              fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n         s\n\ngoal (1 subgoal):\n 1. \\<not> fst (fmrestrict_set vs (fst h),\n                fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n           s \\<Longrightarrow>\n    fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)", "then"], ["proof (chain)\npicking this:\n  \\<not> fst (fmrestrict_set vs (fst h),\n              fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n         s", "have \"fmdom' s = fmdom' (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s)\""], ["proof (prove)\nusing this:\n  \\<not> fst (fmrestrict_set vs (fst h),\n              fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n         s\n\ngoal (1 subgoal):\n 1. fmdom' s =\n    fmdom' (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s)", "using sat_precond_as_proj_4"], ["proof (prove)\nusing this:\n  \\<not> fst (fmrestrict_set vs (fst h),\n              fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n         s\n  ?fm2.0 \\<subseteq>\\<^sub>f ?fm1.0 \\<Longrightarrow>\n  fmrestrict_set ?vs ?fm2.0 \\<subseteq>\\<^sub>f ?fm1.0\n\ngoal (1 subgoal):\n 1. fmdom' s =\n    fmdom' (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s)", "by auto"], ["proof (state)\nthis:\n  fmdom' s = fmdom' (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s)\n\ngoal (1 subgoal):\n 1. \\<not> fst (fmrestrict_set vs (fst h),\n                fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n           s \\<Longrightarrow>\n    fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)", "then"], ["proof (chain)\npicking this:\n  fmdom' s = fmdom' (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' s = fmdom' (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s)\n\ngoal (1 subgoal):\n 1. fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)", "unfolding state_succ_def action_proj_def"], ["proof (prove)\nusing this:\n  fmdom' s = fmdom' (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s)\n\ngoal (1 subgoal):\n 1. fmdom'\n     (if fst (fmrestrict_set vs (fst h),\n              fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n         s\n      then snd (fmrestrict_set vs (fst h), fmrestrict_set vs (snd h)) ++ s\n      else s) =\n    fmdom' (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s)", "using False"], ["proof (prove)\nusing this:\n  fmdom' s = fmdom' (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s)\n  \\<not> fst (fmrestrict_set vs (fst h),\n              fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n         s\n\ngoal (1 subgoal):\n 1. fmdom'\n     (if fst (fmrestrict_set vs (fst h),\n              fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n         s\n      then snd (fmrestrict_set vs (fst h), fmrestrict_set vs (snd h)) ++ s\n      else s) =\n    fmdom' (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s)", "by presburger"], ["proof (state)\nthis:\n  fmdom' (state_succ s (action_proj h vs)) = fmdom' (state_succ s h)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma drest_proj_succ_eq_drest_succ:\n  fixes h s vs\n  assumes \"fst h \\<subseteq>\\<^sub>f s\" \"(fmdom' (snd h) \\<subseteq> fmdom' s)\"\n  shows \"(fmrestrict_set vs (state_succ s (action_proj h vs)) = fmrestrict_set vs (state_succ s h))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (state_succ s h)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (state_succ s h)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (state_succ s h)", "have 1: \"fmrestrict_set vs (fst h) \\<subseteq>\\<^sub>f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (fst h) \\<subseteq>\\<^sub>f s", "using assms(1) submap_imp_state_succ_submap_a"], ["proof (prove)\nusing this:\n  fst h \\<subseteq>\\<^sub>f s\n  \\<lbrakk>?s1.0 \\<subseteq>\\<^sub>f ?s2.0;\n   ?s2.0 \\<subseteq>\\<^sub>f ?s3.0\\<rbrakk>\n  \\<Longrightarrow> ?s1.0 \\<subseteq>\\<^sub>f ?s3.0\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (fst h) \\<subseteq>\\<^sub>f s", "by (simp add: sat_precond_as_proj_4)"], ["proof (state)\nthis:\n  fmrestrict_set vs (fst h) \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (state_succ s h)", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (fst h) \\<subseteq>\\<^sub>f s", "have \"\n      fmrestrict_set vs (state_succ s (action_proj h vs))\n      = fmrestrict_set vs (fmrestrict_set vs (snd h) ++ s)\n    \""], ["proof (prove)\nusing this:\n  fmrestrict_set vs (fst h) \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (fmrestrict_set vs (snd h) ++ s)", "unfolding state_succ_def action_proj_def"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (fst h) \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (if fst (fmrestrict_set vs (fst h),\n              fmrestrict_set vs (snd h)) \\<subseteq>\\<^sub>f\n         s\n      then snd (fmrestrict_set vs (fst h), fmrestrict_set vs (snd h)) ++ s\n      else s) =\n    fmrestrict_set vs (fmrestrict_set vs (snd h) ++ s)", "by simp"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s (action_proj h vs)) =\n  fmrestrict_set vs (fmrestrict_set vs (snd h) ++ s)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (state_succ s h)", "also"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s (action_proj h vs)) =\n  fmrestrict_set vs (fmrestrict_set vs (snd h) ++ s)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (state_succ s h)", "have \"\\<dots> = fmrestrict_set vs s ++\\<^sub>f fmrestrict_set vs (fmrestrict_set vs (snd h))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (fmrestrict_set vs (snd h) ++ s) =\n    fmrestrict_set vs s ++\\<^sub>f\n    fmrestrict_set vs (fmrestrict_set vs (snd h))", "unfolding fmap_add_ltr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (s ++\\<^sub>f fmrestrict_set vs (snd h)) =\n    fmrestrict_set vs s ++\\<^sub>f\n    fmrestrict_set vs (fmrestrict_set vs (snd h))", "by simp\n        \\<comment> \\<open>TODO\n      refactor the step 'fmrestrict\\_set ?X (fmrestrict\\_set ?X ?f) = fmrestrict\\_set ?X ?f' into\n      own lemma in 'FmapUtils.thy'.\\<close>"], ["proof (state)\nthis:\n  fmrestrict_set vs (fmrestrict_set vs (snd h) ++ s) =\n  fmrestrict_set vs s ++\\<^sub>f\n  fmrestrict_set vs (fmrestrict_set vs (snd h))\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (state_succ s h)", "also"], ["proof (state)\nthis:\n  fmrestrict_set vs (fmrestrict_set vs (snd h) ++ s) =\n  fmrestrict_set vs s ++\\<^sub>f\n  fmrestrict_set vs (fmrestrict_set vs (snd h))\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (state_succ s h)", "have \"\\<dots> = fmrestrict_set vs s ++\\<^sub>f fmrestrict_set vs (snd h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs s ++\\<^sub>f\n    fmrestrict_set vs (fmrestrict_set vs (snd h)) =\n    fmrestrict_set vs s ++\\<^sub>f fmrestrict_set vs (snd h)", "using fmfilter_alt_defs(4) fmfilter_cong fmlookup_filter fmrestrict_set_dom option.simps(3)"], ["proof (prove)\nusing this:\n  fmrestrict_set ?A = fmfilter (\\<lambda>a. a \\<in> ?A)\n  (\\<And>x y.\n      fmlookup ?m x = Some y \\<Longrightarrow>\n      ?P x = ?Q x) \\<Longrightarrow>\n  fmfilter ?P ?m = fmfilter ?Q ?m\n  fmlookup (fmfilter ?P ?m) ?x = (if ?P ?x then fmlookup ?m ?x else None)\n  fmrestrict_set (fmdom' ?m) ?m = ?m\n  Some ?x2.0 \\<noteq> None\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s ++\\<^sub>f\n    fmrestrict_set vs (fmrestrict_set vs (snd h)) =\n    fmrestrict_set vs s ++\\<^sub>f fmrestrict_set vs (snd h)", "by metis"], ["proof (state)\nthis:\n  fmrestrict_set vs s ++\\<^sub>f\n  fmrestrict_set vs (fmrestrict_set vs (snd h)) =\n  fmrestrict_set vs s ++\\<^sub>f fmrestrict_set vs (snd h)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (state_succ s h)", "finally"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (state_succ s (action_proj h vs)) =\n  fmrestrict_set vs s ++\\<^sub>f fmrestrict_set vs (snd h)", "have \"\n      fmrestrict_set vs (state_succ s (action_proj h vs))\n      = fmrestrict_set vs (snd h ++ s)\n    \""], ["proof (prove)\nusing this:\n  fmrestrict_set vs (state_succ s (action_proj h vs)) =\n  fmrestrict_set vs s ++\\<^sub>f fmrestrict_set vs (snd h)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (snd h ++ s)", "unfolding fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (state_succ s (action_proj h vs)) =\n  fmrestrict_set vs s ++\\<^sub>f fmrestrict_set vs (snd h)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (s ++\\<^sub>f snd h)", "by simp"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s (action_proj h vs)) =\n  fmrestrict_set vs (snd h ++ s)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (state_succ s h)", "}"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s (action_proj h vs)) =\n  fmrestrict_set vs (snd h ++ s)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (state_succ s h)", "moreover"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s (action_proj h vs)) =\n  fmrestrict_set vs (snd h ++ s)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (state_succ s h)", "have \"fmrestrict_set vs (state_succ s h) = fmrestrict_set vs ((snd h) ++ s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s h) = fmrestrict_set vs (snd h ++ s)", "unfolding state_succ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s) =\n    fmrestrict_set vs (snd h ++ s)", "using assms(1)"], ["proof (prove)\nusing this:\n  fst h \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (if fst h \\<subseteq>\\<^sub>f s then snd h ++ s else s) =\n    fmrestrict_set vs (snd h ++ s)", "by simp"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s h) = fmrestrict_set vs (snd h ++ s)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (state_succ s h)", "ultimately"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (state_succ s (action_proj h vs)) =\n  fmrestrict_set vs (snd h ++ s)\n  fmrestrict_set vs (state_succ s h) = fmrestrict_set vs (snd h ++ s)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (state_succ s (action_proj h vs)) =\n  fmrestrict_set vs (snd h ++ s)\n  fmrestrict_set vs (state_succ s h) = fmrestrict_set vs (snd h ++ s)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj h vs)) =\n    fmrestrict_set vs (state_succ s h)", "by simp"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s (action_proj h vs)) =\n  fmrestrict_set vs (state_succ s h)\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>TODO remove? This is equivalent to 'proj\\_state\\_succ'.\\<close>"], ["", "lemma drest_succ_proj_eq_drest_succ:\n  fixes s vs as\n  assumes \"(fst a \\<subseteq>\\<^sub>f s)\"\n  shows \"(state_succ (fmrestrict_set vs s) (action_proj a vs) = fmrestrict_set vs (state_succ s a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "using assms proj_state_succ"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n  fst ?a \\<subseteq>\\<^sub>f ?s \\<Longrightarrow>\n  state_succ (fmrestrict_set ?vs ?s) (action_proj ?a ?vs) =\n  fmrestrict_set ?vs (state_succ ?s ?a)\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s a)", "by blast"], ["", "lemma exec_drest_cons_proj_eq_succ:\n  fixes as PROB vs a\n  assumes \"fst a \\<subseteq>\\<^sub>f s\"\n  shows \"(\n    exec_plan (fmrestrict_set vs s) (action_proj a vs # as)\n    = exec_plan (fmrestrict_set vs (state_succ s a)) as\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (action_proj a vs # as) =\n    exec_plan (fmrestrict_set vs (state_succ s a)) as", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (action_proj a vs # as) =\n    exec_plan (fmrestrict_set vs (state_succ s a)) as", "have \"exec_plan (state_succ (fmrestrict_set vs s) (action_proj a vs)) as =\n  exec_plan (fmrestrict_set vs (state_succ s a)) as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan (state_succ (fmrestrict_set vs s) (action_proj a vs)) as =\n    exec_plan (fmrestrict_set vs (state_succ s a)) as", "using assms drest_succ_proj_eq_drest_succ"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n  fst ?a \\<subseteq>\\<^sub>f ?s \\<Longrightarrow>\n  state_succ (fmrestrict_set ?vs ?s) (action_proj ?a ?vs) =\n  fmrestrict_set ?vs (state_succ ?s ?a)\n\ngoal (1 subgoal):\n 1. exec_plan (state_succ (fmrestrict_set vs s) (action_proj a vs)) as =\n    exec_plan (fmrestrict_set vs (state_succ s a)) as", "by metis"], ["proof (state)\nthis:\n  exec_plan (state_succ (fmrestrict_set vs s) (action_proj a vs)) as =\n  exec_plan (fmrestrict_set vs (state_succ s a)) as\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (action_proj a vs # as) =\n    exec_plan (fmrestrict_set vs (state_succ s a)) as", "then"], ["proof (chain)\npicking this:\n  exec_plan (state_succ (fmrestrict_set vs s) (action_proj a vs)) as =\n  exec_plan (fmrestrict_set vs (state_succ s a)) as", "show ?thesis"], ["proof (prove)\nusing this:\n  exec_plan (state_succ (fmrestrict_set vs s) (action_proj a vs)) as =\n  exec_plan (fmrestrict_set vs (state_succ s a)) as\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (action_proj a vs # as) =\n    exec_plan (fmrestrict_set vs (state_succ s a)) as", "unfolding prob_proj_def"], ["proof (prove)\nusing this:\n  exec_plan (state_succ (fmrestrict_set vs s) (action_proj a vs)) as =\n  exec_plan (fmrestrict_set vs (state_succ s a)) as\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (action_proj a vs # as) =\n    exec_plan (fmrestrict_set vs (state_succ s a)) as", "by simp"], ["proof (state)\nthis:\n  exec_plan (fmrestrict_set vs s) (action_proj a vs # as) =\n  exec_plan (fmrestrict_set vs (state_succ s a)) as\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exec_drest:\n  fixes as a vs\n  assumes \"(fst a \\<subseteq>\\<^sub>f s)\"\n  shows \"(\n    exec_plan (fmrestrict_set vs (state_succ s a)) as\n    = exec_plan (fmrestrict_set vs s) (action_proj a vs # as)\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs (state_succ s a)) as =\n    exec_plan (fmrestrict_set vs s) (action_proj a vs # as)", "using assms proj_state_succ"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n  fst ?a \\<subseteq>\\<^sub>f ?s \\<Longrightarrow>\n  state_succ (fmrestrict_set ?vs ?s) (action_proj ?a ?vs) =\n  fmrestrict_set ?vs (state_succ ?s ?a)\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs (state_succ s a)) as =\n    exec_plan (fmrestrict_set vs s) (action_proj a vs # as)", "by fastforce"], ["", "lemma not_empty_eff_in_as_proj:\n  fixes as a vs\n  assumes \"fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\"\n  shows \"(as_proj (a # as) vs = (action_proj a vs # as_proj as vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as_proj (a # as) vs = action_proj a vs # as_proj as vs", "unfolding action_proj_def as_proj.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n     then (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) #\n          as_proj as vs\n     else as_proj as vs) =\n    (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) # as_proj as vs", "using assms"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (if fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n     then (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) #\n          as_proj as vs\n     else as_proj as vs) =\n    (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) # as_proj as vs", "by argo"], ["", "lemma empty_eff_not_in_as_proj:\n  fixes as a vs\n  assumes \"(fmdom' (fmrestrict_set vs (snd a)) = {})\"\n  shows \"(as_proj (a # as) vs = as_proj as vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as_proj (a # as) vs = as_proj as vs", "unfolding action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. as_proj (a # as) vs = as_proj as vs", "using assms"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) = {}\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs = as_proj as vs", "by simp"], ["", "lemma empty_eff_drest_no_eff:\n  fixes s and a and vs\n  assumes \"(fmdom' (fmrestrict_set vs (snd a)) = {})\"\n  shows \"(fmrestrict_set vs (state_succ s (action_proj a vs)) = fmrestrict_set vs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj a vs)) =\n    fmrestrict_set vs s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj a vs)) =\n    fmrestrict_set vs s", "have \"fmdom' (snd (action_proj a vs)) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) = {}", "unfolding action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))) = {}", "using assms"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) = {}\n\ngoal (1 subgoal):\n 1. fmdom' (snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))) = {}", "by simp"], ["proof (state)\nthis:\n  fmdom' (snd (action_proj a vs)) = {}\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj a vs)) =\n    fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd (action_proj a vs)) = {}", "have \"state_succ s (action_proj a vs) = s\""], ["proof (prove)\nusing this:\n  fmdom' (snd (action_proj a vs)) = {}\n\ngoal (1 subgoal):\n 1. state_succ s (action_proj a vs) = s", "using empty_eff_exec_eq"], ["proof (prove)\nusing this:\n  fmdom' (snd (action_proj a vs)) = {}\n  fmdom' (snd ?a) = {} \\<Longrightarrow> state_succ ?s ?a = ?s\n\ngoal (1 subgoal):\n 1. state_succ s (action_proj a vs) = s", "by fast"], ["proof (state)\nthis:\n  state_succ s (action_proj a vs) = s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj a vs)) =\n    fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  state_succ s (action_proj a vs) = s", "show ?thesis"], ["proof (prove)\nusing this:\n  state_succ s (action_proj a vs) = s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj a vs)) =\n    fmrestrict_set vs s", "by simp"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s (action_proj a vs)) = fmrestrict_set vs s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sat_precond_exec_as_proj_eq_proj_exec:\n  fixes as vs s\n  assumes \"(sat_precond_as s as)\"\n  shows \"(exec_plan (fmrestrict_set vs s) (as_proj as vs) = fmrestrict_set vs (exec_plan s as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n    fmrestrict_set vs (exec_plan s as)", "using assms"], ["proof (prove)\nusing this:\n  sat_precond_as s as\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n    fmrestrict_set vs (exec_plan s as)", "proof (induction as)"], ["proof (state)\ngoal (2 subgoals):\n 1. sat_precond_as s [] \\<Longrightarrow>\n    exec_plan (fmrestrict_set vs s) (as_proj [] vs) =\n    fmrestrict_set vs (exec_plan s [])\n 2. \\<And>a as.\n       \\<lbrakk>sat_precond_as s as \\<Longrightarrow>\n                exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                fmrestrict_set vs (exec_plan s as);\n        sat_precond_as s (a # as)\\<rbrakk>\n       \\<Longrightarrow> exec_plan (fmrestrict_set vs s)\n                          (as_proj (a # as) vs) =\n                         fmrestrict_set vs (exec_plan s (a # as))", "case (Cons a as)"], ["proof (state)\nthis:\n  sat_precond_as s as \\<Longrightarrow>\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n  fmrestrict_set vs (exec_plan s as)\n  sat_precond_as s (a # as)\n\ngoal (2 subgoals):\n 1. sat_precond_as s [] \\<Longrightarrow>\n    exec_plan (fmrestrict_set vs s) (as_proj [] vs) =\n    fmrestrict_set vs (exec_plan s [])\n 2. \\<And>a as.\n       \\<lbrakk>sat_precond_as s as \\<Longrightarrow>\n                exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                fmrestrict_set vs (exec_plan s as);\n        sat_precond_as s (a # as)\\<rbrakk>\n       \\<Longrightarrow> exec_plan (fmrestrict_set vs s)\n                          (as_proj (a # as) vs) =\n                         fmrestrict_set vs (exec_plan s (a # as))", "then"], ["proof (chain)\npicking this:\n  sat_precond_as s as \\<Longrightarrow>\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n  fmrestrict_set vs (exec_plan s as)\n  sat_precond_as s (a # as)", "show ?case"], ["proof (prove)\nusing this:\n  sat_precond_as s as \\<Longrightarrow>\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n  fmrestrict_set vs (exec_plan s as)\n  sat_precond_as s (a # as)\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs) =\n    fmrestrict_set vs (exec_plan s (a # as))", "using Cons.prems graph_plan_lemma_1"], ["proof (prove)\nusing this:\n  sat_precond_as s as \\<Longrightarrow>\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n  fmrestrict_set vs (exec_plan s as)\n  sat_precond_as s (a # as)\n  sat_precond_as s (a # as)\n  sat_precond_as ?s ?as \\<Longrightarrow>\n  exec_plan (fmrestrict_set ?vs ?s) (as_proj ?as ?vs) =\n  fmrestrict_set ?vs (exec_plan ?s ?as)\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs) =\n    fmrestrict_set vs (exec_plan s (a # as))", "by blast"], ["proof (state)\nthis:\n  exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs) =\n  fmrestrict_set vs (exec_plan s (a # as))\n\ngoal (1 subgoal):\n 1. sat_precond_as s [] \\<Longrightarrow>\n    exec_plan (fmrestrict_set vs s) (as_proj [] vs) =\n    fmrestrict_set vs (exec_plan s [])", "qed auto"], ["", "lemma action_proj_in_prob_proj:\n  assumes \"(a \\<in> PROB)\"\n  shows \"(action_proj a vs \\<in> prob_proj PROB vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_proj a vs \\<in> prob_proj PROB vs", "unfolding action_proj_def prob_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))\n    \\<in> (\\<lambda>a.\n              (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))) `\n          PROB", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))\n    \\<in> (\\<lambda>a.\n              (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))) `\n          PROB", "by simp"], ["", "lemma valid_as_valid_as_proj:\n  fixes PROB vs\n  assumes \"(as \\<in> valid_plans PROB)\"\n  shows \"(as_proj as vs \\<in> valid_plans (prob_proj PROB vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as_proj as vs \\<in> valid_plans (prob_proj PROB vs)", "using assms"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. as_proj as vs \\<in> valid_plans (prob_proj PROB vs)", "proof (induction \"as\" arbitrary: PROB vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       [] \\<in> valid_plans PROB \\<Longrightarrow>\n       as_proj [] vs \\<in> valid_plans (prob_proj PROB vs)\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   as \\<in> valid_plans PROB \\<Longrightarrow>\n                   as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs\n                         \\<in> valid_plans (prob_proj PROB vs)", "case (Cons a as)"], ["proof (state)\nthis:\n  as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  as_proj as ?vs \\<in> valid_plans (prob_proj ?PROB ?vs)\n  a # as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       [] \\<in> valid_plans PROB \\<Longrightarrow>\n       as_proj [] vs \\<in> valid_plans (prob_proj PROB vs)\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   as \\<in> valid_plans PROB \\<Longrightarrow>\n                   as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs\n                         \\<in> valid_plans (prob_proj PROB vs)", "then"], ["proof (chain)\npicking this:\n  as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  as_proj as ?vs \\<in> valid_plans (prob_proj ?PROB ?vs)\n  a # as \\<in> valid_plans PROB", "show ?case"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  as_proj as ?vs \\<in> valid_plans (prob_proj ?PROB ?vs)\n  a # as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)", "using assms Cons"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  as_proj as ?vs \\<in> valid_plans (prob_proj ?PROB ?vs)\n  a # as \\<in> valid_plans PROB\n  as \\<in> valid_plans PROB\n  as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  as_proj as ?vs \\<in> valid_plans (prob_proj ?PROB ?vs)\n  a # as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)", "proof(cases \"fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)\n 2. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)", "case True"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)\n 2. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}", "have 1: \"as_proj (a # as) vs = action_proj a vs # as_proj as vs\""], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs = action_proj a vs # as_proj as vs", "using True"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs = action_proj a vs # as_proj as vs", "by simp"], ["proof (state)\nthis:\n  as_proj (a # as) vs = action_proj a vs # as_proj as vs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)\n 2. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)", "then"], ["proof (chain)\npicking this:\n  as_proj (a # as) vs = action_proj a vs # as_proj as vs", "have \"as \\<in> valid_plans PROB\""], ["proof (prove)\nusing this:\n  as_proj (a # as) vs = action_proj a vs # as_proj as vs\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "using Cons.prems valid_plan_valid_tail"], ["proof (prove)\nusing this:\n  as_proj (a # as) vs = action_proj a vs # as_proj as vs\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  ?as \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "by fast"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)\n 2. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)", "then"], ["proof (chain)\npicking this:\n  as \\<in> valid_plans PROB", "have \"as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\""], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. as_proj as vs \\<in> valid_plans (prob_proj PROB vs)", "using Cons.IH 1"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  as_proj as ?vs \\<in> valid_plans (prob_proj ?PROB ?vs)\n  as_proj (a # as) vs = action_proj a vs # as_proj as vs\n\ngoal (1 subgoal):\n 1. as_proj as vs \\<in> valid_plans (prob_proj PROB vs)", "by simp"], ["proof (state)\nthis:\n  as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)\n 2. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)", "then"], ["proof (chain)\npicking this:\n  as_proj as vs \\<in> valid_plans (prob_proj PROB vs)", "have \"action_proj a vs # as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\""], ["proof (prove)\nusing this:\n  as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. action_proj a vs # as_proj as vs \\<in> valid_plans (prob_proj PROB vs)", "using Cons.prems action_proj_in_prob_proj valid_head_and_tail_valid_plan valid_plan_valid_head"], ["proof (prove)\nusing this:\n  as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n  a # as \\<in> valid_plans PROB\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  action_proj ?a ?vs \\<in> prob_proj ?PROB ?vs\n  \\<lbrakk>?h \\<in> ?PROB; ?as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> ?h # ?as \\<in> valid_plans ?PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow> ?h \\<in> ?PROB\n\ngoal (1 subgoal):\n 1. action_proj a vs # as_proj as vs \\<in> valid_plans (prob_proj PROB vs)", "by metis"], ["proof (state)\nthis:\n  action_proj a vs # as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)\n 2. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)", "then"], ["proof (chain)\npicking this:\n  action_proj a vs # as_proj as vs \\<in> valid_plans (prob_proj PROB vs)", "show ?thesis"], ["proof (prove)\nusing this:\n  action_proj a vs # as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)", "using 1"], ["proof (prove)\nusing this:\n  action_proj a vs # as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n  as_proj (a # as) vs = action_proj a vs # as_proj as vs\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)", "by argo"], ["proof (state)\nthis:\n  as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)", "case False"], ["proof (state)\nthis:\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)", "then"], ["proof (chain)\npicking this:\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}", "have \"as_proj (a # as) vs = as_proj as vs\""], ["proof (prove)\nusing this:\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs = as_proj as vs", "using False"], ["proof (prove)\nusing this:\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs = as_proj as vs", "by auto"], ["proof (state)\nthis:\n  as_proj (a # as) vs = as_proj as vs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)", "then"], ["proof (chain)\npicking this:\n  as_proj (a # as) vs = as_proj as vs", "have \"as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)\""], ["proof (prove)\nusing this:\n  as_proj (a # as) vs = as_proj as vs\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)", "using assms Cons valid_plan_valid_tail"], ["proof (prove)\nusing this:\n  as_proj (a # as) vs = as_proj as vs\n  as \\<in> valid_plans PROB\n  as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  as_proj as ?vs \\<in> valid_plans (prob_proj ?PROB ?vs)\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  ?as \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)", "by metis"], ["proof (state)\nthis:\n  as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>PROB vs.\n                as \\<in> valid_plans PROB \\<Longrightarrow>\n                as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB; as \\<in> valid_plans PROB;\n     \\<And>PROB vs.\n        as \\<in> valid_plans PROB \\<Longrightarrow>\n        as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n     a # as \\<in> valid_plans PROB;\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj (a # as) vs\n                      \\<in> valid_plans (prob_proj PROB vs)", "then"], ["proof (chain)\npicking this:\n  as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)", "show ?thesis"], ["proof (prove)\nusing this:\n  as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)", "using assms Cons.IH(1)"], ["proof (prove)\nusing this:\n  as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)\n  as \\<in> valid_plans PROB\n  as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  as_proj as ?vs \\<in> valid_plans (prob_proj ?PROB ?vs)\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)", "by blast"], ["proof (state)\nthis:\n  as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  as_proj (a # as) vs \\<in> valid_plans (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<And>PROB vs.\n       [] \\<in> valid_plans PROB \\<Longrightarrow>\n       as_proj [] vs \\<in> valid_plans (prob_proj PROB vs)", "qed (simp add: valid_plans_def)"], ["", "lemma finite_imp_finite_prob_proj:\n  fixes PROB\n  assumes \"finite PROB\"\n  shows \"(finite (prob_proj PROB vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (prob_proj PROB vs)", "unfolding prob_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ((\\<lambda>a. action_proj a vs) ` PROB)", "using assms"], ["proof (prove)\nusing this:\n  finite PROB\n\ngoal (1 subgoal):\n 1. finite ((\\<lambda>a. action_proj a vs) ` PROB)", "by simp\n\n\n\\<comment> \\<open>NOTE Base 2 in 5th assumption had to be explicitely fixed to 'nat' type to be able to use the\nlinearity lemma for powers of natural numbers.\\<close>"], ["", "lemma\n  fixes PROB vs as and s :: \"'a state\"\n  assumes \"finite PROB\" \"s \\<in> valid_states PROB\" \"as \\<in> (valid_plans PROB)\" \"finite vs\"\n    \"length (as_proj as vs) > ((2 :: nat) ^ card vs) - 1\" \"sat_precond_as s as\"\n  shows \"(\\<exists>as1 as2 as3.\n    (as1 @ as2 @ as3 = as_proj as vs)\n    \\<and> (exec_plan (fmrestrict_set vs s) (as1 @ as2) = exec_plan (fmrestrict_set vs s) as1)\n    \\<and> (as2 \\<noteq> [])\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "have \"card (fmdom' (fmrestrict_set vs s)) \\<le> card vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (fmdom' (fmrestrict_set vs s)) \\<le> card vs", "using assms(4) graph_plan_card_state_set"], ["proof (prove)\nusing this:\n  finite vs\n  finite ?vs \\<Longrightarrow>\n  card (fmdom' (fmrestrict_set ?vs ?s)) \\<le> card ?vs\n\ngoal (1 subgoal):\n 1. card (fmdom' (fmrestrict_set vs s)) \\<le> card vs", "by fast"], ["proof (state)\nthis:\n  card (fmdom' (fmrestrict_set vs s)) \\<le> card vs\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  card (fmdom' (fmrestrict_set vs s)) \\<le> card vs", "have \"(2 :: nat) ^ (card (fmdom' (fmrestrict_set vs s))) - 1 \\<le> 2 ^ (card vs) - 1\""], ["proof (prove)\nusing this:\n  card (fmdom' (fmrestrict_set vs s)) \\<le> card vs\n\ngoal (1 subgoal):\n 1. 2 ^ card (fmdom' (fmrestrict_set vs s)) - 1 \\<le> 2 ^ card vs - 1", "using power_increasing diff_le_mono"], ["proof (prove)\nusing this:\n  card (fmdom' (fmrestrict_set vs s)) \\<le> card vs\n  \\<lbrakk>?n \\<le> ?N; (1::?'a) \\<le> ?a\\<rbrakk>\n  \\<Longrightarrow> ?a ^ ?n \\<le> ?a ^ ?N\n  ?m \\<le> ?n \\<Longrightarrow> ?m - ?l \\<le> ?n - ?l\n\ngoal (1 subgoal):\n 1. 2 ^ card (fmdom' (fmrestrict_set vs s)) - 1 \\<le> 2 ^ card vs - 1", "by force"], ["proof (state)\nthis:\n  2 ^ card (fmdom' (fmrestrict_set vs s)) - 1 \\<le> 2 ^ card vs - 1\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "also"], ["proof (state)\nthis:\n  2 ^ card (fmdom' (fmrestrict_set vs s)) - 1 \\<le> 2 ^ card vs - 1\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "have \"... < length (as_proj as vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ card vs - 1 < length (as_proj as vs)", "using assms(5)"], ["proof (prove)\nusing this:\n  2 ^ card vs - 1 < length (as_proj as vs)\n\ngoal (1 subgoal):\n 1. 2 ^ card vs - 1 < length (as_proj as vs)", "by blast"], ["proof (state)\nthis:\n  2 ^ card vs - 1 < length (as_proj as vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "finally"], ["proof (chain)\npicking this:\n  2 ^ card (fmdom' (fmrestrict_set vs s)) - 1 < length (as_proj as vs)", "have \"2 ^ card (fmdom' (fmrestrict_set vs s)) - 1 < length (as_proj as vs)\""], ["proof (prove)\nusing this:\n  2 ^ card (fmdom' (fmrestrict_set vs s)) - 1 < length (as_proj as vs)\n\ngoal (1 subgoal):\n 1. 2 ^ card (fmdom' (fmrestrict_set vs s)) - 1 < length (as_proj as vs)", "by blast"], ["proof (state)\nthis:\n  2 ^ card (fmdom' (fmrestrict_set vs s)) - 1 < length (as_proj as vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "}"], ["proof (state)\nthis:\n  2 ^ card (fmdom' (fmrestrict_set vs s)) - 1 < length (as_proj as vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "note 1 = this"], ["proof (state)\nthis:\n  2 ^ card (fmdom' (fmrestrict_set vs s)) - 1 < length (as_proj as vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  2 ^ card (fmdom' (fmrestrict_set vs s)) - 1 < length (as_proj as vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "have \"fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)", "using assms(2) graph_plan_not_eq_last_diff_paths"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  ?s \\<in> valid_states ?PROB \\<Longrightarrow>\n  fmrestrict_set ?vs ?s \\<in> valid_states (prob_proj ?PROB ?vs)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "have \"as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as_proj as vs \\<in> valid_plans (prob_proj PROB vs)", "using assms(3) valid_as_valid_as_proj"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  as_proj ?as ?vs \\<in> valid_plans (prob_proj ?PROB ?vs)\n\ngoal (1 subgoal):\n 1. as_proj as vs \\<in> valid_plans (prob_proj PROB vs)", "by blast"], ["proof (state)\nthis:\n  as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "moreover"], ["proof (state)\nthis:\n  as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "have \"finite (prob_proj PROB vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (prob_proj PROB vs)", "using assms(1) finite_imp_finite_prob_proj"], ["proof (prove)\nusing this:\n  finite PROB\n  finite ?PROB \\<Longrightarrow> finite (prob_proj ?PROB ?vs)\n\ngoal (1 subgoal):\n 1. finite (prob_proj PROB vs)", "by blast"], ["proof (state)\nthis:\n  finite (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "ultimately"], ["proof (chain)\npicking this:\n  2 ^ card (fmdom' (fmrestrict_set vs s)) - 1 < length (as_proj as vs)\n  fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)\n  as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n  finite (prob_proj PROB vs)", "show ?thesis"], ["proof (prove)\nusing this:\n  2 ^ card (fmdom' (fmrestrict_set vs s)) - 1 < length (as_proj as vs)\n  fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)\n  as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n  finite (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "using lemma_2[where PROB=\"prob_proj PROB vs\" and as=\"as_proj as vs\" and s=\"fmrestrict_set vs s\"]"], ["proof (prove)\nusing this:\n  2 ^ card (fmdom' (fmrestrict_set vs s)) - 1 < length (as_proj as vs)\n  fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)\n  as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n  finite (prob_proj PROB vs)\n  \\<lbrakk>finite (prob_proj PROB vs);\n   fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs);\n   as_proj as vs \\<in> valid_plans (prob_proj PROB vs);\n   2 ^ card (fmdom' (fmrestrict_set vs s)) - 1\n   < length (as_proj as vs)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as1 as2 as3.\n                       as1 @ as2 @ as3 = as_proj as vs \\<and>\n                       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n                       exec_plan (fmrestrict_set vs s) as1 \\<and>\n                       as2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>as1 as2 as3.\n       as1 @ as2 @ as3 = as_proj as vs \\<and>\n       exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n       exec_plan (fmrestrict_set vs s) as1 \\<and>\n       as2 \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  \\<exists>as1 as2 as3.\n     as1 @ as2 @ as3 = as_proj as vs \\<and>\n     exec_plan (fmrestrict_set vs s) (as1 @ as2) =\n     exec_plan (fmrestrict_set vs s) as1 \\<and>\n     as2 \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma as_proj_eq_filter_action_proj:\n  fixes as vs\n  shows \"as_proj as vs = filter (\\<lambda>a. fmdom' (snd a) \\<noteq> {}) (map (\\<lambda>a. action_proj a vs) as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as_proj as vs =\n    filter (\\<lambda>a. fmdom' (snd a) \\<noteq> {})\n     (map (\\<lambda>a. action_proj a vs) as)", "by (induction as) (auto simp add: action_proj_def)"], ["", "lemma append_eq_as_proj:\n  fixes as1 as2 as3 p vs\n  assumes \"(as1 @ as2 @ as3 = as_proj p vs)\"\n  shows \"(\\<exists>p_1 p_2 p_3.\n    (p_1 @ p_2 @ p_3 = p)\n    \\<and> (as2 = as_proj p_2 vs)\n    \\<and> (as1 = as_proj p_1 vs)\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2 p_3.\n       p_1 @ p_2 @ p_3 = p \\<and>\n       as2 = as_proj p_2 vs \\<and> as1 = as_proj p_1 vs", "using assms append_eq_as_proj_1 as_proj_eq_filter_action_proj"], ["proof (prove)\nusing this:\n  as1 @ as2 @ as3 = as_proj p vs\n  ?as1.0 @ ?as2.0 @ ?as3.0 = filter ?f1.0 (map ?f2.0 ?p) \\<Longrightarrow>\n  \\<exists>p_1 p_2 p_3.\n     p_1 @ p_2 @ p_3 = ?p \\<and>\n     ?as1.0 = filter ?f1.0 (map ?f2.0 p_1) \\<and>\n     ?as2.0 = filter ?f1.0 (map ?f2.0 p_2) \\<and>\n     ?as3.0 = filter ?f1.0 (map ?f2.0 p_3)\n  as_proj ?as ?vs =\n  filter (\\<lambda>a. fmdom' (snd a) \\<noteq> {})\n   (map (\\<lambda>a. action_proj a ?vs) ?as)\n\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2 p_3.\n       p_1 @ p_2 @ p_3 = p \\<and>\n       as2 = as_proj p_2 vs \\<and> as1 = as_proj p_1 vs", "by (metis (no_types, lifting))"], ["", "lemma succ_drest_eq_drest_succ:\n  fixes a s vs\n  shows \"\n    state_succ (fmrestrict_set vs s) (action_proj a vs)\n    = fmrestrict_set vs (state_succ s (action_proj a vs))\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "let ?lhs = \"state_succ (fmrestrict_set vs s) (action_proj a vs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "let ?rhs = \"fmrestrict_set vs (state_succ s (action_proj a vs))\"\n    \\<comment> \\<open>NOTE Show lhs and rhs equality by splitting on the cases introduced by the if-then branching\n    of 'state\\_succ'.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "assume P1: \"fst (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f fmrestrict_set vs s\""], ["proof (state)\nthis:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "then"], ["proof (chain)\npicking this:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s", "have a: \"fst (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f s\""], ["proof (prove)\nusing this:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fst (fmrestrict_set vs (fst a),\n         fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n    s", "using drest_smap_drest_smap_drest"], ["proof (prove)\nusing this:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s\n  (fmrestrict_set ?vs ?x \\<subseteq>\\<^sub>f ?s) =\n  (fmrestrict_set ?vs ?x \\<subseteq>\\<^sub>f fmrestrict_set ?vs ?s)\n\ngoal (1 subgoal):\n 1. fst (fmrestrict_set vs (fst a),\n         fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n    s", "by auto"], ["proof (state)\nthis:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "then"], ["proof (chain)\npicking this:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  s", "have \"?lhs = fmrestrict_set vs (snd a) ++ fmrestrict_set vs s\""], ["proof (prove)\nusing this:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (snd a) ++ fmrestrict_set vs s", "unfolding state_succ_def action_proj_def"], ["proof (prove)\nusing this:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  s\n\ngoal (1 subgoal):\n 1. (if fst (fmrestrict_set vs (fst a),\n             fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n        fmrestrict_set vs s\n     then snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) ++\n          fmrestrict_set vs s\n     else fmrestrict_set vs s) =\n    fmrestrict_set vs (snd a) ++ fmrestrict_set vs s", "using P1"], ["proof (prove)\nusing this:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  s\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. (if fst (fmrestrict_set vs (fst a),\n             fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n        fmrestrict_set vs s\n     then snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) ++\n          fmrestrict_set vs s\n     else fmrestrict_set vs s) =\n    fmrestrict_set vs (snd a) ++ fmrestrict_set vs s", "by simp"], ["proof (state)\nthis:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (snd a) ++ fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "moreover"], ["proof (state)\nthis:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (snd a) ++ fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "{"], ["proof (state)\nthis:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (snd a) ++ fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "have rhs: \"?rhs = fmrestrict_set vs (fmrestrict_set vs (snd a) ++ s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj a vs)) =\n    fmrestrict_set vs (fmrestrict_set vs (snd a) ++ s)", "unfolding state_succ_def action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (if fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         s\n      then snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) ++ s\n      else s) =\n    fmrestrict_set vs (fmrestrict_set vs (snd a) ++ s)", "using a"], ["proof (prove)\nusing this:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (if fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         s\n      then snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) ++ s\n      else s) =\n    fmrestrict_set vs (fmrestrict_set vs (snd a) ++ s)", "by auto"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s (action_proj a vs)) =\n  fmrestrict_set vs (fmrestrict_set vs (snd a) ++ s)\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "also"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s (action_proj a vs)) =\n  fmrestrict_set vs (fmrestrict_set vs (snd a) ++ s)\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "have \"\\<dots> = (fmrestrict_set vs (fmrestrict_set vs (snd a)) ++ fmrestrict_set vs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (fmrestrict_set vs (snd a) ++ s) =\n    fmrestrict_set vs (fmrestrict_set vs (snd a)) ++ fmrestrict_set vs s", "unfolding fmap_add_ltr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (s ++\\<^sub>f fmrestrict_set vs (snd a)) =\n    fmrestrict_set vs s ++\\<^sub>f\n    fmrestrict_set vs (fmrestrict_set vs (snd a))", "by simp"], ["proof (state)\nthis:\n  fmrestrict_set vs (fmrestrict_set vs (snd a) ++ s) =\n  fmrestrict_set vs (fmrestrict_set vs (snd a)) ++ fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "finally"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (state_succ s (action_proj a vs)) =\n  fmrestrict_set vs (fmrestrict_set vs (snd a)) ++ fmrestrict_set vs s", "have \"?rhs = (fmrestrict_set vs (snd a) ++ fmrestrict_set vs s)\""], ["proof (prove)\nusing this:\n  fmrestrict_set vs (state_succ s (action_proj a vs)) =\n  fmrestrict_set vs (fmrestrict_set vs (snd a)) ++ fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj a vs)) =\n    fmrestrict_set vs (snd a) ++ fmrestrict_set vs s", "unfolding fmfilter_alt_defs(4)"], ["proof (prove)\nusing this:\n  fmfilter (\\<lambda>a. a \\<in> vs) (state_succ s (action_proj a vs)) =\n  fmfilter (\\<lambda>a. a \\<in> vs)\n   (fmfilter (\\<lambda>a. a \\<in> vs) (snd a)) ++\n  fmfilter (\\<lambda>a. a \\<in> vs) s\n\ngoal (1 subgoal):\n 1. fmfilter (\\<lambda>a. a \\<in> vs) (state_succ s (action_proj a vs)) =\n    fmfilter (\\<lambda>a. a \\<in> vs) (snd a) ++\n    fmfilter (\\<lambda>a. a \\<in> vs) s", "by fastforce"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s (action_proj a vs)) =\n  fmrestrict_set vs (snd a) ++ fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "}"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s (action_proj a vs)) =\n  fmrestrict_set vs (snd a) ++ fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "ultimately"], ["proof (chain)\npicking this:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (snd a) ++ fmrestrict_set vs s\n  fmrestrict_set vs (state_succ s (action_proj a vs)) =\n  fmrestrict_set vs (snd a) ++ fmrestrict_set vs s", "have \"?lhs = ?rhs\""], ["proof (prove)\nusing this:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (snd a) ++ fmrestrict_set vs s\n  fmrestrict_set vs (state_succ s (action_proj a vs)) =\n  fmrestrict_set vs (snd a) ++ fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "by argo"], ["proof (state)\nthis:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s (action_proj a vs))\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "}"], ["proof (state)\nthis:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s (action_proj a vs))\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "moreover"], ["proof (state)\nthis:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s (action_proj a vs))\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "{"], ["proof (state)\nthis:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s (action_proj a vs))\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "assume P2: \"\\<not>(fst (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f fmrestrict_set vs s)\""], ["proof (state)\nthis:\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "then"], ["proof (chain)\npicking this:\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         fmrestrict_set vs s", "have a: \"\\<not>(fst (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f s)\""], ["proof (prove)\nusing this:\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. \\<not> fst (fmrestrict_set vs (fst a),\n                fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n           s", "using drest_smap_drest_smap_drest"], ["proof (prove)\nusing this:\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         fmrestrict_set vs s\n  (fmrestrict_set ?vs ?x \\<subseteq>\\<^sub>f ?s) =\n  (fmrestrict_set ?vs ?x \\<subseteq>\\<^sub>f fmrestrict_set ?vs ?s)\n\ngoal (1 subgoal):\n 1. \\<not> fst (fmrestrict_set vs (fst a),\n                fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n           s", "by auto"], ["proof (state)\nthis:\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "then"], ["proof (chain)\npicking this:\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         s", "have \"?lhs = fmrestrict_set vs s\""], ["proof (prove)\nusing this:\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs s", "unfolding state_succ_def action_proj_def"], ["proof (prove)\nusing this:\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         s\n\ngoal (1 subgoal):\n 1. (if fst (fmrestrict_set vs (fst a),\n             fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n        fmrestrict_set vs s\n     then snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) ++\n          fmrestrict_set vs s\n     else fmrestrict_set vs s) =\n    fmrestrict_set vs s", "using P2"], ["proof (prove)\nusing this:\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         s\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. (if fst (fmrestrict_set vs (fst a),\n             fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n        fmrestrict_set vs s\n     then snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) ++\n          fmrestrict_set vs s\n     else fmrestrict_set vs s) =\n    fmrestrict_set vs s", "by argo"], ["proof (state)\nthis:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "moreover"], ["proof (state)\nthis:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "have \"?rhs = fmrestrict_set vs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s (action_proj a vs)) =\n    fmrestrict_set vs s", "unfolding state_succ_def action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (if fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         s\n      then snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) ++ s\n      else s) =\n    fmrestrict_set vs s", "using a"], ["proof (prove)\nusing this:\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (if fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         s\n      then snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) ++ s\n      else s) =\n    fmrestrict_set vs s", "by presburger"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s (action_proj a vs)) = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "ultimately"], ["proof (chain)\npicking this:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) = fmrestrict_set vs s\n  fmrestrict_set vs (state_succ s (action_proj a vs)) = fmrestrict_set vs s", "have \"?lhs = ?rhs\""], ["proof (prove)\nusing this:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) = fmrestrict_set vs s\n  fmrestrict_set vs (state_succ s (action_proj a vs)) = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "by simp"], ["proof (state)\nthis:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s (action_proj a vs))\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "}"], ["proof (state)\nthis:\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s (action_proj a vs))\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "ultimately"], ["proof (chain)\npicking this:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s (action_proj a vs))\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s (action_proj a vs))", "show \"?lhs = ?rhs\""], ["proof (prove)\nusing this:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s (action_proj a vs))\n  \\<not> fst (fmrestrict_set vs (fst a),\n              fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n         fmrestrict_set vs s \\<Longrightarrow>\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s (action_proj a vs))\n\ngoal (1 subgoal):\n 1. state_succ (fmrestrict_set vs s) (action_proj a vs) =\n    fmrestrict_set vs (state_succ s (action_proj a vs))", "by blast"], ["proof (state)\nthis:\n  state_succ (fmrestrict_set vs s) (action_proj a vs) =\n  fmrestrict_set vs (state_succ s (action_proj a vs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proj_exec_proj_eq_exec_proj:\n  fixes s as vs\n  shows \"\n    fmrestrict_set vs (exec_plan (fmrestrict_set vs s) (as_proj as vs))\n    = exec_plan (fmrestrict_set vs s) (as_proj as vs)\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan (fmrestrict_set vs s) (as_proj as vs)) =\n    exec_plan (fmrestrict_set vs s) (as_proj as vs)", "proof (induction as arbitrary: s vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s vs.\n       fmrestrict_set vs (exec_plan (fmrestrict_set vs s) (as_proj [] vs)) =\n       exec_plan (fmrestrict_set vs s) (as_proj [] vs)\n 2. \\<And>a as s vs.\n       (\\<And>s vs.\n           fmrestrict_set vs\n            (exec_plan (fmrestrict_set vs s) (as_proj as vs)) =\n           exec_plan (fmrestrict_set vs s)\n            (as_proj as vs)) \\<Longrightarrow>\n       fmrestrict_set vs\n        (exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs)) =\n       exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs)", "case (Cons a as)"], ["proof (state)\nthis:\n  fmrestrict_set ?vs (exec_plan (fmrestrict_set ?vs ?s) (as_proj as ?vs)) =\n  exec_plan (fmrestrict_set ?vs ?s) (as_proj as ?vs)\n\ngoal (2 subgoals):\n 1. \\<And>s vs.\n       fmrestrict_set vs (exec_plan (fmrestrict_set vs s) (as_proj [] vs)) =\n       exec_plan (fmrestrict_set vs s) (as_proj [] vs)\n 2. \\<And>a as s vs.\n       (\\<And>s vs.\n           fmrestrict_set vs\n            (exec_plan (fmrestrict_set vs s) (as_proj as vs)) =\n           exec_plan (fmrestrict_set vs s)\n            (as_proj as vs)) \\<Longrightarrow>\n       fmrestrict_set vs\n        (exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs)) =\n       exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set ?vs (exec_plan (fmrestrict_set ?vs ?s) (as_proj as ?vs)) =\n  exec_plan (fmrestrict_set ?vs ?s) (as_proj as ?vs)", "show ?case"], ["proof (prove)\nusing this:\n  fmrestrict_set ?vs (exec_plan (fmrestrict_set ?vs ?s) (as_proj as ?vs)) =\n  exec_plan (fmrestrict_set ?vs ?s) (as_proj as ?vs)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs)) =\n    exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs)", "by (simp add: succ_drest_eq_drest_succ)"], ["proof (state)\nthis:\n  fmrestrict_set vs\n   (exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs)) =\n  exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs)\n\ngoal (1 subgoal):\n 1. \\<And>s vs.\n       fmrestrict_set vs (exec_plan (fmrestrict_set vs s) (as_proj [] vs)) =\n       exec_plan (fmrestrict_set vs s) (as_proj [] vs)", "qed (simp add: fmfilter_alt_defs(4))"], ["", "lemma proj_exec_proj_eq_exec_proj':\n  fixes s as vs\n  shows \"\n    fmrestrict_set vs (exec_plan (fmrestrict_set vs s) (as_proj as vs))\n     = fmrestrict_set vs (exec_plan s (as_proj as vs))\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan (fmrestrict_set vs s) (as_proj as vs)) =\n    fmrestrict_set vs (exec_plan s (as_proj as vs))", "proof (induction as arbitrary: s vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s vs.\n       fmrestrict_set vs (exec_plan (fmrestrict_set vs s) (as_proj [] vs)) =\n       fmrestrict_set vs (exec_plan s (as_proj [] vs))\n 2. \\<And>a as s vs.\n       (\\<And>s vs.\n           fmrestrict_set vs\n            (exec_plan (fmrestrict_set vs s) (as_proj as vs)) =\n           fmrestrict_set vs\n            (exec_plan s (as_proj as vs))) \\<Longrightarrow>\n       fmrestrict_set vs\n        (exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs)) =\n       fmrestrict_set vs (exec_plan s (as_proj (a # as) vs))", "case (Cons a as)"], ["proof (state)\nthis:\n  fmrestrict_set ?vs (exec_plan (fmrestrict_set ?vs ?s) (as_proj as ?vs)) =\n  fmrestrict_set ?vs (exec_plan ?s (as_proj as ?vs))\n\ngoal (2 subgoals):\n 1. \\<And>s vs.\n       fmrestrict_set vs (exec_plan (fmrestrict_set vs s) (as_proj [] vs)) =\n       fmrestrict_set vs (exec_plan s (as_proj [] vs))\n 2. \\<And>a as s vs.\n       (\\<And>s vs.\n           fmrestrict_set vs\n            (exec_plan (fmrestrict_set vs s) (as_proj as vs)) =\n           fmrestrict_set vs\n            (exec_plan s (as_proj as vs))) \\<Longrightarrow>\n       fmrestrict_set vs\n        (exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs)) =\n       fmrestrict_set vs (exec_plan s (as_proj (a # as) vs))", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set ?vs (exec_plan (fmrestrict_set ?vs ?s) (as_proj as ?vs)) =\n  fmrestrict_set ?vs (exec_plan ?s (as_proj as ?vs))", "show ?case"], ["proof (prove)\nusing this:\n  fmrestrict_set ?vs (exec_plan (fmrestrict_set ?vs ?s) (as_proj as ?vs)) =\n  fmrestrict_set ?vs (exec_plan ?s (as_proj as ?vs))\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs)) =\n    fmrestrict_set vs (exec_plan s (as_proj (a # as) vs))", "by (simp add: succ_drest_eq_drest_succ)"], ["proof (state)\nthis:\n  fmrestrict_set vs\n   (exec_plan (fmrestrict_set vs s) (as_proj (a # as) vs)) =\n  fmrestrict_set vs (exec_plan s (as_proj (a # as) vs))\n\ngoal (1 subgoal):\n 1. \\<And>s vs.\n       fmrestrict_set vs (exec_plan (fmrestrict_set vs s) (as_proj [] vs)) =\n       fmrestrict_set vs (exec_plan s (as_proj [] vs))", "qed (simp add: fmfilter_alt_defs(4))"], ["", "lemma graph_plan_lemma_9:\n  fixes s as vs\n  shows \"\n    fmrestrict_set vs (exec_plan s (as_proj as vs))\n    = exec_plan (fmrestrict_set vs s) (as_proj as vs)\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n    exec_plan (fmrestrict_set vs s) (as_proj as vs)", "by (metis proj_exec_proj_eq_exec_proj' proj_exec_proj_eq_exec_proj)"], ["", "lemma act_dom_proj_eff_subset_act_dom_eff:\n  fixes a vs\n  shows \"fmdom' (snd (action_proj a vs)) \\<subseteq> fmdom' (snd a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<subseteq> fmdom' (snd a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<subseteq> fmdom' (snd a)", "have \"snd (action_proj a vs) = fmrestrict_set vs (snd a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (action_proj a vs) = fmrestrict_set vs (snd a)", "unfolding action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) =\n    fmrestrict_set vs (snd a)", "by simp"], ["proof (state)\nthis:\n  snd (action_proj a vs) = fmrestrict_set vs (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<subseteq> fmdom' (snd a)", "then"], ["proof (chain)\npicking this:\n  snd (action_proj a vs) = fmrestrict_set vs (snd a)", "have \"fmlookup (fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>m fmlookup (snd a)\""], ["proof (prove)\nusing this:\n  snd (action_proj a vs) = fmrestrict_set vs (snd a)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>m\n    fmlookup (snd a)", "by (simp add: map_le_def fmdom'_restrict_set_precise)"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>m fmlookup (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<subseteq> fmdom' (snd a)", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>m fmlookup (snd a)", "have \"dom (fmlookup (fmrestrict_set vs (snd a))) \\<subseteq> dom (fmlookup (snd a))\""], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>m fmlookup (snd a)\n\ngoal (1 subgoal):\n 1. dom (fmlookup (fmrestrict_set vs (snd a)))\n    \\<subseteq> dom (fmlookup (snd a))", "using map_le_implies_dom_le"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>m fmlookup (snd a)\n  ?f \\<subseteq>\\<^sub>m ?g \\<Longrightarrow> dom ?f \\<subseteq> dom ?g\n\ngoal (1 subgoal):\n 1. dom (fmlookup (fmrestrict_set vs (snd a)))\n    \\<subseteq> dom (fmlookup (snd a))", "by blast"], ["proof (state)\nthis:\n  dom (fmlookup (fmrestrict_set vs (snd a)))\n  \\<subseteq> dom (fmlookup (snd a))\n\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<subseteq> fmdom' (snd a)", "then"], ["proof (chain)\npicking this:\n  dom (fmlookup (fmrestrict_set vs (snd a)))\n  \\<subseteq> dom (fmlookup (snd a))", "have \"fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)\""], ["proof (prove)\nusing this:\n  dom (fmlookup (fmrestrict_set vs (snd a)))\n  \\<subseteq> dom (fmlookup (snd a))\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)", "using fmdom'.rep_eq"], ["proof (prove)\nusing this:\n  dom (fmlookup (fmrestrict_set vs (snd a)))\n  \\<subseteq> dom (fmlookup (snd a))\n  fmdom' ?x = dom (fmlookup ?x)\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)", "by metis"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<subseteq> fmdom' (snd a)", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<subseteq> fmdom' (snd a)", "unfolding action_proj_def"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)))\n    \\<subseteq> fmdom' (snd a)", "by simp"], ["proof (state)\nthis:\n  fmdom' (snd (action_proj a vs)) \\<subseteq> fmdom' (snd a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exec_as_proj_valid:\n  fixes as s PROB vs\n  assumes \"s \\<in> valid_states PROB\" \"(as \\<in> valid_plans PROB)\"\n  shows  \"(exec_plan s (as_proj as vs) \\<in> valid_states PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s (as_proj as vs) \\<in> valid_states PROB", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj as vs) \\<in> valid_states PROB", "proof (induction as arbitrary: s PROB vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<in> valid_states ?PROB; as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s (as_proj as ?vs) \\<in> valid_states ?PROB\n  s \\<in> valid_states PROB\n  a # as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?s \\<in> valid_states ?PROB; as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s (as_proj as ?vs) \\<in> valid_states ?PROB\n  s \\<in> valid_states PROB\n  a # as \\<in> valid_plans PROB", "have 1: \"as \\<in> valid_plans PROB\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<in> valid_states ?PROB; as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s (as_proj as ?vs) \\<in> valid_states ?PROB\n  s \\<in> valid_states PROB\n  a # as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "using Cons.prems(2) valid_plan_valid_tail"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<in> valid_states ?PROB; as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s (as_proj as ?vs) \\<in> valid_states ?PROB\n  s \\<in> valid_states PROB\n  a # as \\<in> valid_plans PROB\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  ?as \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "by fast"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  as \\<in> valid_plans PROB", "have 2: \"exec_plan s (as_proj as vs) \\<in> valid_states PROB\""], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj as vs) \\<in> valid_states PROB", "using Cons.prems(1) Cons.IH(1)"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  s \\<in> valid_states PROB\n  \\<lbrakk>?s \\<in> valid_states ?PROB; as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s (as_proj as ?vs) \\<in> valid_states ?PROB\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj as vs) \\<in> valid_states PROB", "by blast\n      \\<comment> \\<open>NOTE split on the if-then branch introduced by 'as\\_proj'.\\<close>"], ["proof (state)\nthis:\n  exec_plan s (as_proj as vs) \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "moreover"], ["proof (state)\nthis:\n  exec_plan s (as_proj as vs) \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "{"], ["proof (state)\nthis:\n  exec_plan s (as_proj as vs) \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "assume P: \"fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\""], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}", "have \"\n      exec_plan s (as_proj (a # as) vs)\n      = exec_plan (state_succ s (action_proj a vs)) (as_proj as vs)\n    \""], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (a # as) vs) =\n    exec_plan (state_succ s (action_proj a vs)) (as_proj as vs)", "by simp\n        \\<comment> \\<open>NOTE split on the if-then branch introduced by 'state\\_succ'\\<close>"], ["proof (state)\nthis:\n  exec_plan s (as_proj (a # as) vs) =\n  exec_plan (state_succ s (action_proj a vs)) (as_proj as vs)\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "moreover"], ["proof (state)\nthis:\n  exec_plan s (as_proj (a # as) vs) =\n  exec_plan (state_succ s (action_proj a vs)) (as_proj as vs)\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "{"], ["proof (state)\nthis:\n  exec_plan s (as_proj (a # as) vs) =\n  exec_plan (state_succ s (action_proj a vs)) (as_proj as vs)\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "assume \"fst (action_proj a vs) \\<subseteq>\\<^sub>f s\""], ["proof (state)\nthis:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s", "have 3: \"\n        exec_plan (state_succ s (action_proj a vs)) (as_proj as vs)\n        = exec_plan (snd (action_proj a vs) ++ s) (as_proj as vs)\n      \""], ["proof (prove)\nusing this:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. exec_plan (state_succ s (action_proj a vs)) (as_proj as vs) =\n    exec_plan (snd (action_proj a vs) ++ s) (as_proj as vs)", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. exec_plan\n     (if fst (action_proj a vs) \\<subseteq>\\<^sub>f s\n      then snd (action_proj a vs) ++ s else s)\n     (as_proj as vs) =\n    exec_plan (snd (action_proj a vs) ++ s) (as_proj as vs)", "using calculation"], ["proof (prove)\nusing this:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s\n  exec_plan s (as_proj (a # as) vs) =\n  exec_plan (state_succ s (action_proj a vs)) (as_proj as vs)\n\ngoal (1 subgoal):\n 1. exec_plan\n     (if fst (action_proj a vs) \\<subseteq>\\<^sub>f s\n      then snd (action_proj a vs) ++ s else s)\n     (as_proj as vs) =\n    exec_plan (snd (action_proj a vs) ++ s) (as_proj as vs)", "by simp"], ["proof (state)\nthis:\n  exec_plan (state_succ s (action_proj a vs)) (as_proj as vs) =\n  exec_plan (snd (action_proj a vs) ++ s) (as_proj as vs)\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "{\n        \\<comment> \\<open>TODO Unsure why this proof step is necessary at all, but it should be refactored into a\n          dedicated lemma @{term \"s \\<in> valid_states PROB \\<Longrightarrow> fmdom' s = prob_dom PROB\"}.\\<close>"], ["proof (state)\nthis:\n  exec_plan (state_succ s (action_proj a vs)) (as_proj as vs) =\n  exec_plan (snd (action_proj a vs) ++ s) (as_proj as vs)\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "{"], ["proof (state)\nthis:\n  exec_plan (state_succ s (action_proj a vs)) (as_proj as vs) =\n  exec_plan (snd (action_proj a vs) ++ s) (as_proj as vs)\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "have \"s \\<in> valid_states PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> valid_states PROB", "using Cons.prems"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  a # as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. s \\<in> valid_states PROB", "by simp"], ["proof (state)\nthis:\n  s \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  s \\<in> valid_states PROB", "have \"s \\<in> {s'. fmdom' s' = prob_dom PROB}\""], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. s \\<in> {s'. fmdom' s' = prob_dom PROB}", "unfolding valid_states_def"], ["proof (prove)\nusing this:\n  s \\<in> {s. fmdom' s = prob_dom PROB}\n\ngoal (1 subgoal):\n 1. s \\<in> {s'. fmdom' s' = prob_dom PROB}", "by simp"], ["proof (state)\nthis:\n  s \\<in> {s'. fmdom' s' = prob_dom PROB}\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  s \\<in> {s'. fmdom' s' = prob_dom PROB}", "obtain s' where \"s' = s\" \"fmdom' s' = prob_dom PROB\""], ["proof (prove)\nusing this:\n  s \\<in> {s'. fmdom' s' = prob_dom PROB}\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>s' = s; fmdom' s' = prob_dom PROB\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s' = s\n  fmdom' s' = prob_dom PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  s' = s\n  fmdom' s' = prob_dom PROB", "have \"fmdom' s = prob_dom PROB\""], ["proof (prove)\nusing this:\n  s' = s\n  fmdom' s' = prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' s = prob_dom PROB", "by simp"], ["proof (state)\nthis:\n  fmdom' s = prob_dom PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "}\n          \\<comment> \\<open>TODO Refactor this step ('also ...' for subset chain; replace fact\n        `fmdom' s = prob\\_dom PROB` in last step with MP step from lemma refactored above.\\<close>"], ["proof (state)\nthis:\n  fmdom' s = prob_dom PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "moreover"], ["proof (state)\nthis:\n  fmdom' s = prob_dom PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "{"], ["proof (state)\nthis:\n  fmdom' s = prob_dom PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "have \"(snd (action_proj a vs) ++ s) = (s ++\\<^sub>f fmrestrict_set vs (snd a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (action_proj a vs) ++ s = s ++\\<^sub>f fmrestrict_set vs (snd a)", "unfolding action_proj_def fmap_add_ltr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. s ++\\<^sub>f\n    snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) =\n    s ++\\<^sub>f fmrestrict_set vs (snd a)", "by simp"], ["proof (state)\nthis:\n  snd (action_proj a vs) ++ s = s ++\\<^sub>f fmrestrict_set vs (snd a)\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  snd (action_proj a vs) ++ s = s ++\\<^sub>f fmrestrict_set vs (snd a)", "have a: \"a \\<in> PROB\""], ["proof (prove)\nusing this:\n  snd (action_proj a vs) ++ s = s ++\\<^sub>f fmrestrict_set vs (snd a)\n\ngoal (1 subgoal):\n 1. a \\<in> PROB", "using Cons.prems(2) valid_plan_valid_head"], ["proof (prove)\nusing this:\n  snd (action_proj a vs) ++ s = s ++\\<^sub>f fmrestrict_set vs (snd a)\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow> ?h \\<in> ?PROB\n\ngoal (1 subgoal):\n 1. a \\<in> PROB", "by fast"], ["proof (state)\nthis:\n  a \\<in> PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  a \\<in> PROB", "have \"action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB\""], ["proof (prove)\nusing this:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB", "using exec_as_proj_valid_2"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  action_dom (fst ?a) (snd ?a) \\<subseteq> prob_dom ?PROB\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB", "by blast"], ["proof (state)\nthis:\n  action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB", "have \"fmdom' (snd a) \\<subseteq> action_dom (fst a) (snd a)\""], ["proof (prove)\nusing this:\n  action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> action_dom (fst a) (snd a)", "unfolding action_dom_def"], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<union> fmdom' (snd a) \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' (fst a) \\<union> fmdom' (snd a)", "by simp"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> action_dom (fst a) (snd a)\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<subseteq> action_dom (fst a) (snd a)", "have \"fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)\""], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> action_dom (fst a) (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)", "using action_proj_def act_dom_proj_eff_subset_act_dom_eff snd_conv"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> action_dom (fst a) (snd a)\n  action_proj ?a ?vs \\<equiv>\n  (fmrestrict_set ?vs (fst ?a), fmrestrict_set ?vs (snd ?a))\n  fmdom' (snd (action_proj ?a ?vs)) \\<subseteq> fmdom' (snd ?a)\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)", "by metis"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)", "have \"fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> prob_dom PROB\""], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> prob_dom PROB", "using FDOM_eff_subset_prob_dom_pair a"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  fmdom' (snd ?a) \\<subseteq> prob_dom ?PROB\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> prob_dom PROB", "by blast"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> prob_dom PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> prob_dom PROB", "have \"fmdom' (s ++\\<^sub>f fmrestrict_set vs (snd a)) = fmdom' s\""], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' (s ++\\<^sub>f fmrestrict_set vs (snd a)) = fmdom' s", "by (simp add: calculation sup.absorb_iff1)"], ["proof (state)\nthis:\n  fmdom' (s ++\\<^sub>f fmrestrict_set vs (snd a)) = fmdom' s\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "}"], ["proof (state)\nthis:\n  fmdom' (s ++\\<^sub>f fmrestrict_set vs (snd a)) = fmdom' s\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "ultimately"], ["proof (chain)\npicking this:\n  fmdom' s = prob_dom PROB\n  fmdom' (s ++\\<^sub>f fmrestrict_set vs (snd a)) = fmdom' s", "have \"(snd (action_proj a vs) ++ s) \\<in> valid_states PROB\""], ["proof (prove)\nusing this:\n  fmdom' s = prob_dom PROB\n  fmdom' (s ++\\<^sub>f fmrestrict_set vs (snd a)) = fmdom' s\n\ngoal (1 subgoal):\n 1. snd (action_proj a vs) ++ s \\<in> valid_states PROB", "unfolding action_proj_def fmap_add_ltr_def valid_states_def"], ["proof (prove)\nusing this:\n  fmdom' s = prob_dom PROB\n  fmdom' (s ++\\<^sub>f fmrestrict_set vs (snd a)) = fmdom' s\n\ngoal (1 subgoal):\n 1. s ++\\<^sub>f snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))\n    \\<in> {s. fmdom' s = prob_dom PROB}", "by simp"], ["proof (state)\nthis:\n  snd (action_proj a vs) ++ s \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "}"], ["proof (state)\nthis:\n  snd (action_proj a vs) ++ s \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  snd (action_proj a vs) ++ s \\<in> valid_states PROB", "have \"exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\""], ["proof (prove)\nusing this:\n  snd (action_proj a vs) ++ s \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB", "using 1 3 calculation(1) Cons.IH[where s = \"snd (action_proj a vs) ++ s\"]"], ["proof (prove)\nusing this:\n  snd (action_proj a vs) ++ s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  exec_plan (state_succ s (action_proj a vs)) (as_proj as vs) =\n  exec_plan (snd (action_proj a vs) ++ s) (as_proj as vs)\n  exec_plan s (as_proj (a # as) vs) =\n  exec_plan (state_succ s (action_proj a vs)) (as_proj as vs)\n  \\<lbrakk>snd (action_proj a vs) ++ s \\<in> valid_states ?PROB;\n   as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> exec_plan (snd (action_proj a vs) ++ s) (as_proj as ?vs)\n                    \\<in> valid_states ?PROB\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB", "by presburger"], ["proof (state)\nthis:\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "}"], ["proof (state)\nthis:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "moreover"], ["proof (state)\nthis:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "{"], ["proof (state)\nthis:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "assume \"\\<not>(fst (action_proj a vs) \\<subseteq>\\<^sub>f s)\""], ["proof (state)\nthis:\n  \\<not> fst (action_proj a vs) \\<subseteq>\\<^sub>f s\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  \\<not> fst (action_proj a vs) \\<subseteq>\\<^sub>f s", "have \"\n        exec_plan (state_succ s (action_proj a vs)) (as_proj as vs)\n        = exec_plan s (as_proj as vs)\n      \""], ["proof (prove)\nusing this:\n  \\<not> fst (action_proj a vs) \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. exec_plan (state_succ s (action_proj a vs)) (as_proj as vs) =\n    exec_plan s (as_proj as vs)", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  \\<not> fst (action_proj a vs) \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. exec_plan\n     (if fst (action_proj a vs) \\<subseteq>\\<^sub>f s\n      then snd (action_proj a vs) ++ s else s)\n     (as_proj as vs) =\n    exec_plan s (as_proj as vs)", "by simp"], ["proof (state)\nthis:\n  exec_plan (state_succ s (action_proj a vs)) (as_proj as vs) =\n  exec_plan s (as_proj as vs)\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  exec_plan (state_succ s (action_proj a vs)) (as_proj as vs) =\n  exec_plan s (as_proj as vs)", "have \"exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\""], ["proof (prove)\nusing this:\n  exec_plan (state_succ s (action_proj a vs)) (as_proj as vs) =\n  exec_plan s (as_proj as vs)\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB", "using 2"], ["proof (prove)\nusing this:\n  exec_plan (state_succ s (action_proj a vs)) (as_proj as vs) =\n  exec_plan s (as_proj as vs)\n  exec_plan s (as_proj as vs) \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB", "by force"], ["proof (state)\nthis:\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "}"], ["proof (state)\nthis:\n  \\<not> fst (action_proj a vs) \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "ultimately"], ["proof (chain)\npicking this:\n  exec_plan s (as_proj (a # as) vs) =\n  exec_plan (state_succ s (action_proj a vs)) (as_proj as vs)\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n  \\<not> fst (action_proj a vs) \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB", "have \"exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\""], ["proof (prove)\nusing this:\n  exec_plan s (as_proj (a # as) vs) =\n  exec_plan (state_succ s (action_proj a vs)) (as_proj as vs)\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n  \\<not> fst (action_proj a vs) \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB", "by blast"], ["proof (state)\nthis:\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "}"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "moreover"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "{"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "assume \"fmdom' (fmrestrict_set vs (snd a)) = {}\""], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) = {}\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) = {}", "have \"\n      exec_plan s (as_proj (a # as) vs) =\n      exec_plan s (as_proj as vs)\n    \""], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) = {}\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (a # as) vs) = exec_plan s (as_proj as vs)", "by simp"], ["proof (state)\nthis:\n  exec_plan s (as_proj (a # as) vs) = exec_plan s (as_proj as vs)\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "then"], ["proof (chain)\npicking this:\n  exec_plan s (as_proj (a # as) vs) = exec_plan s (as_proj as vs)", "have \"exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\""], ["proof (prove)\nusing this:\n  exec_plan s (as_proj (a # as) vs) = exec_plan s (as_proj as vs)\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB", "using 2"], ["proof (prove)\nusing this:\n  exec_plan s (as_proj (a # as) vs) = exec_plan s (as_proj as vs)\n  exec_plan s (as_proj as vs) \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB", "by argo"], ["proof (state)\nthis:\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "}"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) = {} \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB\n 2. \\<And>a as s PROB vs.\n       \\<lbrakk>\\<And>s PROB vs.\n                   \\<lbrakk>s \\<in> valid_states PROB;\n                    as \\<in> valid_plans PROB\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s (as_proj as vs)\n                                     \\<in> valid_states PROB;\n        s \\<in> valid_states PROB; a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj (a # as) vs)\n                         \\<in> valid_states PROB", "ultimately"], ["proof (chain)\npicking this:\n  exec_plan s (as_proj as vs) \\<in> valid_states PROB\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n  fmdom' (fmrestrict_set vs (snd a)) = {} \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB", "show ?case"], ["proof (prove)\nusing this:\n  exec_plan s (as_proj as vs) \\<in> valid_states PROB\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n  fmdom' (fmrestrict_set vs (snd a)) = {} \\<Longrightarrow>\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB", "by blast"], ["proof (state)\nthis:\n  exec_plan s (as_proj (a # as) vs) \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. \\<And>s PROB vs.\n       \\<lbrakk>s \\<in> valid_states PROB;\n        [] \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (as_proj [] vs) \\<in> valid_states PROB", "qed simp"], ["", "lemma drest_exec_as_proj_eq_drest_exec:\n  fixes s as vs\n  assumes \"sat_precond_as s as\"\n  shows \"(fmrestrict_set vs (exec_plan s (as_proj as vs)) = fmrestrict_set vs (exec_plan s as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n    fmrestrict_set vs (exec_plan s as)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n    fmrestrict_set vs (exec_plan s as)", "have 1: \"\n    (fmrestrict_set vs (exec_plan s (as_proj as vs))\n    = exec_plan (fmrestrict_set vs s) (as_proj as vs))\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n    exec_plan (fmrestrict_set vs s) (as_proj as vs)", "using graph_plan_lemma_9"], ["proof (prove)\nusing this:\n  fmrestrict_set ?vs (exec_plan ?s (as_proj ?as ?vs)) =\n  exec_plan (fmrestrict_set ?vs ?s) (as_proj ?as ?vs)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n    exec_plan (fmrestrict_set vs s) (as_proj as vs)", "by auto"], ["proof (state)\nthis:\n  fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n  exec_plan (fmrestrict_set vs s) (as_proj as vs)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n    fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n  exec_plan (fmrestrict_set vs s) (as_proj as vs)", "obtain s' where 2: \"exec_plan (fmrestrict_set vs s) (as_proj as vs) = fmrestrict_set vs s'\""], ["proof (prove)\nusing this:\n  fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n  exec_plan (fmrestrict_set vs s) (as_proj as vs)\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n        fmrestrict_set vs s' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 1"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n  exec_plan (fmrestrict_set vs s) (as_proj as vs)\n  fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n  exec_plan (fmrestrict_set vs s) (as_proj as vs)\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n        fmrestrict_set vs s' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) = fmrestrict_set vs s'\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n    fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) = fmrestrict_set vs s'", "have \"fmrestrict_set vs s' = fmrestrict_set vs (exec_plan s as)\""], ["proof (prove)\nusing this:\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) = fmrestrict_set vs s'\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s' = fmrestrict_set vs (exec_plan s as)", "using assms sat_precond_exec_as_proj_eq_proj_exec"], ["proof (prove)\nusing this:\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) = fmrestrict_set vs s'\n  sat_precond_as s as\n  sat_precond_as ?s ?as \\<Longrightarrow>\n  exec_plan (fmrestrict_set ?vs ?s) (as_proj ?as ?vs) =\n  fmrestrict_set ?vs (exec_plan ?s ?as)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s' = fmrestrict_set vs (exec_plan s as)", "by metis"], ["proof (state)\nthis:\n  fmrestrict_set vs s' = fmrestrict_set vs (exec_plan s as)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n    fmrestrict_set vs (exec_plan s as)", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs s' = fmrestrict_set vs (exec_plan s as)", "show\n    \"fmrestrict_set vs (exec_plan s (as_proj as vs)) = fmrestrict_set vs (exec_plan s as)\""], ["proof (prove)\nusing this:\n  fmrestrict_set vs s' = fmrestrict_set vs (exec_plan s as)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n    fmrestrict_set vs (exec_plan s as)", "using 1 2"], ["proof (prove)\nusing this:\n  fmrestrict_set vs s' = fmrestrict_set vs (exec_plan s as)\n  fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n  exec_plan (fmrestrict_set vs s) (as_proj as vs)\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) = fmrestrict_set vs s'\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n    fmrestrict_set vs (exec_plan s as)", "by argo"], ["proof (state)\nthis:\n  fmrestrict_set vs (exec_plan s (as_proj as vs)) =\n  fmrestrict_set vs (exec_plan s as)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma action_proj_idempot:\n  fixes a vs\n  shows \"action_proj (action_proj a vs) vs = (action_proj a vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_proj (action_proj a vs) vs = action_proj a vs", "unfolding action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrestrict_set vs\n      (fst (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))),\n     fmrestrict_set vs\n      (snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)))) =\n    (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))", "by (simp add: fmfilter_alt_defs(4))"], ["", "lemma  action_proj_idempot':\n  fixes a vs\n  assumes \"(action_dom (fst a) (snd a) \\<subseteq> vs)\"\n  shows \"(action_proj a vs = a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_proj a vs = a", "using assms"], ["proof (prove)\nusing this:\n  action_dom (fst a) (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. action_proj a vs = a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs \\<Longrightarrow>\n    action_proj a vs = a", "have 1: \"action_proj a vs = (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_proj a vs =\n    (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))", "by (simp add: action_proj_def)"], ["proof (state)\nthis:\n  action_proj a vs = (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs \\<Longrightarrow>\n    action_proj a vs = a", "then"], ["proof (chain)\npicking this:\n  action_proj a vs = (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))", "have 2: \"(fmdom' (fst a) \\<union> fmdom' (snd a)) \\<subseteq> vs\""], ["proof (prove)\nusing this:\n  action_proj a vs = (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<union> fmdom' (snd a) \\<subseteq> vs", "unfolding action_dom_def"], ["proof (prove)\nusing this:\n  action_proj a vs = (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<union> fmdom' (snd a) \\<subseteq> vs", "using assms"], ["proof (prove)\nusing this:\n  action_proj a vs = (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))\n  action_dom (fst a) (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<union> fmdom' (snd a) \\<subseteq> vs", "by (auto simp add: action_dom_def)\n      \\<comment> \\<open>NOTE Show that both components of 'a' remain unchanged.\\<close>"], ["proof (state)\nthis:\n  fmdom' (fst a) \\<union> fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs \\<Longrightarrow>\n    action_proj a vs = a", "{"], ["proof (state)\nthis:\n  fmdom' (fst a) \\<union> fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs \\<Longrightarrow>\n    action_proj a vs = a", "then"], ["proof (chain)\npicking this:\n  fmdom' (fst a) \\<union> fmdom' (snd a) \\<subseteq> vs", "have \"fmdom' (fst a) \\<subseteq> vs\""], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<union> fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmdom' (fst a) \\<subseteq> vs", "by blast"], ["proof (state)\nthis:\n  fmdom' (fst a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs \\<Longrightarrow>\n    action_proj a vs = a", "then"], ["proof (chain)\npicking this:\n  fmdom' (fst a) \\<subseteq> vs", "have \"fmrestrict_set vs (fst a) = (fst a)\""], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (fst a) = fst a", "using exec_drest_5"], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<subseteq> vs\n  fmdom' ?x \\<subseteq> ?vs \\<Longrightarrow> fmrestrict_set ?vs ?x = ?x\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (fst a) = fst a", "by auto"], ["proof (state)\nthis:\n  fmrestrict_set vs (fst a) = fst a\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs \\<Longrightarrow>\n    action_proj a vs = a", "}"], ["proof (state)\nthis:\n  fmrestrict_set vs (fst a) = fst a\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs \\<Longrightarrow>\n    action_proj a vs = a", "moreover"], ["proof (state)\nthis:\n  fmrestrict_set vs (fst a) = fst a\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs \\<Longrightarrow>\n    action_proj a vs = a", "{"], ["proof (state)\nthis:\n  fmrestrict_set vs (fst a) = fst a\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs \\<Longrightarrow>\n    action_proj a vs = a", "have \"fmdom' (snd a) \\<subseteq> vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> vs", "using 2"], ["proof (prove)\nusing this:\n  fmdom' (fst a) \\<union> fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> vs", "by auto"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs \\<Longrightarrow>\n    action_proj a vs = a", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<subseteq> vs", "have \"fmrestrict_set vs (snd a) = (snd a)\""], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd a) = snd a", "using exec_drest_5"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> vs\n  fmdom' ?x \\<subseteq> ?vs \\<Longrightarrow> fmrestrict_set ?vs ?x = ?x\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd a) = snd a", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set vs (snd a) = snd a\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs \\<Longrightarrow>\n    action_proj a vs = a", "}"], ["proof (state)\nthis:\n  fmrestrict_set vs (snd a) = snd a\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs \\<Longrightarrow>\n    action_proj a vs = a", "ultimately"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (fst a) = fst a\n  fmrestrict_set vs (snd a) = snd a", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (fst a) = fst a\n  fmrestrict_set vs (snd a) = snd a\n\ngoal (1 subgoal):\n 1. action_proj a vs = a", "using 1"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (fst a) = fst a\n  fmrestrict_set vs (snd a) = snd a\n  action_proj a vs = (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a))\n\ngoal (1 subgoal):\n 1. action_proj a vs = a", "by simp"], ["proof (state)\nthis:\n  action_proj a vs = a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma action_proj_idempot'':\n  fixes P vs\n  assumes \"prob_dom P \\<subseteq> vs\"\n  shows \"prob_proj P vs = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_proj P vs = P", "using assms"], ["proof (prove)\nusing this:\n  prob_dom P \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. prob_proj P vs = P", "proof -\n  \\<comment> \\<open>TODO refactor.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. prob_dom P \\<subseteq> vs \\<Longrightarrow> prob_proj P vs = P", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. prob_dom P \\<subseteq> vs \\<Longrightarrow> prob_proj P vs = P", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. prob_dom P \\<subseteq> vs \\<Longrightarrow> prob_proj P vs = P", "assume \"a \\<in> P\""], ["proof (state)\nthis:\n  a \\<in> P\n\ngoal (1 subgoal):\n 1. prob_dom P \\<subseteq> vs \\<Longrightarrow> prob_proj P vs = P", "then"], ["proof (chain)\npicking this:\n  a \\<in> P", "have \"action_dom (fst a) (snd a) \\<subseteq> vs\""], ["proof (prove)\nusing this:\n  a \\<in> P\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs", "using assms exec_as_proj_valid_2"], ["proof (prove)\nusing this:\n  a \\<in> P\n  prob_dom P \\<subseteq> vs\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  action_dom (fst ?a) (snd ?a) \\<subseteq> prob_dom ?PROB\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs", "by fast"], ["proof (state)\nthis:\n  action_dom (fst a) (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. prob_dom P \\<subseteq> vs \\<Longrightarrow> prob_proj P vs = P", "then"], ["proof (chain)\npicking this:\n  action_dom (fst a) (snd a) \\<subseteq> vs", "have \"action_proj a vs = a\""], ["proof (prove)\nusing this:\n  action_dom (fst a) (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. action_proj a vs = a", "using action_proj_idempot'"], ["proof (prove)\nusing this:\n  action_dom (fst a) (snd a) \\<subseteq> vs\n  action_dom (fst ?a) (snd ?a) \\<subseteq> ?vs \\<Longrightarrow>\n  action_proj ?a ?vs = ?a\n\ngoal (1 subgoal):\n 1. action_proj a vs = a", "by fast"], ["proof (state)\nthis:\n  action_proj a vs = a\n\ngoal (1 subgoal):\n 1. prob_dom P \\<subseteq> vs \\<Longrightarrow> prob_proj P vs = P", "}"], ["proof (state)\nthis:\n  ?a2 \\<in> P \\<Longrightarrow> action_proj ?a2 vs = ?a2\n\ngoal (1 subgoal):\n 1. prob_dom P \\<subseteq> vs \\<Longrightarrow> prob_proj P vs = P", "then"], ["proof (chain)\npicking this:\n  ?a2 \\<in> P \\<Longrightarrow> action_proj ?a2 vs = ?a2", "have \"prob_proj P vs = P\""], ["proof (prove)\nusing this:\n  ?a2 \\<in> P \\<Longrightarrow> action_proj ?a2 vs = ?a2\n\ngoal (1 subgoal):\n 1. prob_proj P vs = P", "unfolding prob_proj_def"], ["proof (prove)\nusing this:\n  ?a2 \\<in> P \\<Longrightarrow> action_proj ?a2 vs = ?a2\n\ngoal (1 subgoal):\n 1. (\\<lambda>a. action_proj a vs) ` P = P", "by force"], ["proof (state)\nthis:\n  prob_proj P vs = P\n\ngoal (1 subgoal):\n 1. prob_dom P \\<subseteq> vs \\<Longrightarrow> prob_proj P vs = P", "then"], ["proof (chain)\npicking this:\n  prob_proj P vs = P", "show ?thesis"], ["proof (prove)\nusing this:\n  prob_proj P vs = P\n\ngoal (1 subgoal):\n 1. prob_proj P vs = P", "unfolding prob_proj_def"], ["proof (prove)\nusing this:\n  (\\<lambda>a. action_proj a vs) ` P = P\n\ngoal (1 subgoal):\n 1. (\\<lambda>a. action_proj a vs) ` P = P", "by simp"], ["proof (state)\nthis:\n  prob_proj P vs = P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sat_precond_as_proj:\n  fixes as s s' vs\n  assumes \"(sat_precond_as s as)\" \"(fmrestrict_set vs s = fmrestrict_set vs s')\"\n  shows \"(sat_precond_as s' (as_proj as vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_precond_as s' (as_proj as vs)", "using assms"], ["proof (prove)\nusing this:\n  sat_precond_as s as\n  fmrestrict_set vs s = fmrestrict_set vs s'\n\ngoal (1 subgoal):\n 1. sat_precond_as s' (as_proj as vs)", "proof (induction as arbitrary: s s' vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>sat_precond_as ?s as;\n   fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s'\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as ?s' (as_proj as ?vs)\n  sat_precond_as s (a # as)\n  fmrestrict_set vs s = fmrestrict_set vs s'\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>sat_precond_as ?s as;\n   fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s'\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as ?s' (as_proj as ?vs)\n  sat_precond_as s (a # as)\n  fmrestrict_set vs s = fmrestrict_set vs s'", "have 1:\n    \"fst a \\<subseteq>\\<^sub>f s\" \"sat_precond_as (state_succ s a) as\""], ["proof (prove)\nusing this:\n  \\<lbrakk>sat_precond_as ?s as;\n   fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s'\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as ?s' (as_proj as ?vs)\n  sat_precond_as s (a # as)\n  fmrestrict_set vs s = fmrestrict_set vs s'\n\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s &&& sat_precond_as (state_succ s a) as", "using Cons.prems(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>sat_precond_as ?s as;\n   fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s'\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as ?s' (as_proj as ?vs)\n  sat_precond_as s (a # as)\n  fmrestrict_set vs s = fmrestrict_set vs s'\n  sat_precond_as s (a # as)\n\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s &&& sat_precond_as (state_succ s a) as", "by simp+"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s\n  sat_precond_as (state_succ s a) as\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s\n  sat_precond_as (state_succ s a) as", "have 2: \"fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s\""], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n  sat_precond_as (state_succ s a) as\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s", "using assms(1) sat_precond_as_proj_4"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n  sat_precond_as (state_succ s a) as\n  sat_precond_as s as\n  ?fm2.0 \\<subseteq>\\<^sub>f ?fm1.0 \\<Longrightarrow>\n  fmrestrict_set ?vs ?fm2.0 \\<subseteq>\\<^sub>f ?fm1.0\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "moreover"], ["proof (state)\nthis:\n  fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "{"], ["proof (state)\nthis:\n  fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "assume \"fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\""], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}", "have \"\n      sat_precond_as s' (as_proj (a # as) vs)\n      = (\n        fst (action_proj a vs) \\<subseteq>\\<^sub>f s'\n        \\<and> sat_precond_as (state_succ s' (action_proj a vs)) (as_proj as vs)\n      )\n    \""], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. sat_precond_as s' (as_proj (a # as) vs) =\n    (fst (action_proj a vs) \\<subseteq>\\<^sub>f s' \\<and>\n     sat_precond_as (state_succ s' (action_proj a vs)) (as_proj as vs))", "using calculation"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n  fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. sat_precond_as s' (as_proj (a # as) vs) =\n    (fst (action_proj a vs) \\<subseteq>\\<^sub>f s' \\<and>\n     sat_precond_as (state_succ s' (action_proj a vs)) (as_proj as vs))", "by simp"], ["proof (state)\nthis:\n  sat_precond_as s' (as_proj (a # as) vs) =\n  (fst (action_proj a vs) \\<subseteq>\\<^sub>f s' \\<and>\n   sat_precond_as (state_succ s' (action_proj a vs)) (as_proj as vs))\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "moreover"], ["proof (state)\nthis:\n  sat_precond_as s' (as_proj (a # as) vs) =\n  (fst (action_proj a vs) \\<subseteq>\\<^sub>f s' \\<and>\n   sat_precond_as (state_succ s' (action_proj a vs)) (as_proj as vs))\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "{"], ["proof (state)\nthis:\n  sat_precond_as s' (as_proj (a # as) vs) =\n  (fst (action_proj a vs) \\<subseteq>\\<^sub>f s' \\<and>\n   sat_precond_as (state_succ s' (action_proj a vs)) (as_proj as vs))\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "have \"fst (action_proj a vs) \\<subseteq>\\<^sub>f s' = (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (action_proj a vs) \\<subseteq>\\<^sub>f s') =\n    (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s')", "unfolding action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (fmrestrict_set vs (fst a),\n          fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n     s') =\n    (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s')", "by simp"], ["proof (state)\nthis:\n  (fst (action_proj a vs) \\<subseteq>\\<^sub>f s') =\n  (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s')\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "moreover"], ["proof (state)\nthis:\n  (fst (action_proj a vs) \\<subseteq>\\<^sub>f s') =\n  (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s')\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "have \"(fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s) = (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s) =\n    (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s')", "using Cons.prems(2) sat_precond_as_proj_1"], ["proof (prove)\nusing this:\n  fmrestrict_set vs s = fmrestrict_set vs s'\n  fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s' \\<Longrightarrow>\n  (fmrestrict_set ?vs ?x \\<subseteq>\\<^sub>f ?s) =\n  (fmrestrict_set ?vs ?x \\<subseteq>\\<^sub>f ?s')\n\ngoal (1 subgoal):\n 1. (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s) =\n    (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s')", "by blast"], ["proof (state)\nthis:\n  (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s) =\n  (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s')\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "ultimately"], ["proof (chain)\npicking this:\n  (fst (action_proj a vs) \\<subseteq>\\<^sub>f s') =\n  (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s')\n  (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s) =\n  (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s')", "have \"fst (action_proj a vs) \\<subseteq>\\<^sub>f s'\""], ["proof (prove)\nusing this:\n  (fst (action_proj a vs) \\<subseteq>\\<^sub>f s') =\n  (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s')\n  (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s) =\n  (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s')\n\ngoal (1 subgoal):\n 1. fst (action_proj a vs) \\<subseteq>\\<^sub>f s'", "using 2"], ["proof (prove)\nusing this:\n  (fst (action_proj a vs) \\<subseteq>\\<^sub>f s') =\n  (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s')\n  (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s) =\n  (fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s')\n  fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fst (action_proj a vs) \\<subseteq>\\<^sub>f s'", "by blast"], ["proof (state)\nthis:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s'\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "}\n      \\<comment> \\<open>TODO detailled proof for this sledgehammered step.\\<close>"], ["proof (state)\nthis:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s'\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "moreover"], ["proof (state)\nthis:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s'\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "have \"sat_precond_as (state_succ s' (action_proj a vs)) (as_proj as vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_precond_as (state_succ s' (action_proj a vs)) (as_proj as vs)", "using 1 Cons.IH Cons.prems(2) drest_succ_proj_eq_drest_succ succ_drest_eq_drest_succ"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n  sat_precond_as (state_succ s a) as\n  \\<lbrakk>sat_precond_as ?s as;\n   fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s'\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as ?s' (as_proj as ?vs)\n  fmrestrict_set vs s = fmrestrict_set vs s'\n  fst ?a \\<subseteq>\\<^sub>f ?s \\<Longrightarrow>\n  state_succ (fmrestrict_set ?vs ?s) (action_proj ?a ?vs) =\n  fmrestrict_set ?vs (state_succ ?s ?a)\n  state_succ (fmrestrict_set ?vs ?s) (action_proj ?a ?vs) =\n  fmrestrict_set ?vs (state_succ ?s (action_proj ?a ?vs))\n\ngoal (1 subgoal):\n 1. sat_precond_as (state_succ s' (action_proj a vs)) (as_proj as vs)", "by metis"], ["proof (state)\nthis:\n  sat_precond_as (state_succ s' (action_proj a vs)) (as_proj as vs)\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "ultimately"], ["proof (chain)\npicking this:\n  sat_precond_as s' (as_proj (a # as) vs) =\n  (fst (action_proj a vs) \\<subseteq>\\<^sub>f s' \\<and>\n   sat_precond_as (state_succ s' (action_proj a vs)) (as_proj as vs))\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s'\n  sat_precond_as (state_succ s' (action_proj a vs)) (as_proj as vs)", "have \"(sat_precond_as s' (as_proj (a # as) vs))\""], ["proof (prove)\nusing this:\n  sat_precond_as s' (as_proj (a # as) vs) =\n  (fst (action_proj a vs) \\<subseteq>\\<^sub>f s' \\<and>\n   sat_precond_as (state_succ s' (action_proj a vs)) (as_proj as vs))\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s'\n  sat_precond_as (state_succ s' (action_proj a vs)) (as_proj as vs)\n\ngoal (1 subgoal):\n 1. sat_precond_as s' (as_proj (a # as) vs)", "by blast"], ["proof (state)\nthis:\n  sat_precond_as s' (as_proj (a # as) vs)\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "}"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  sat_precond_as s' (as_proj (a # as) vs)\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "moreover"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  sat_precond_as s' (as_proj (a # as) vs)\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "{"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  sat_precond_as s' (as_proj (a # as) vs)\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "assume P1: \"\\<not>(fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {})\""], ["proof (state)\nthis:\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}", "have \"sat_precond_as s' (as_proj (a # as) vs)\""], ["proof (prove)\nusing this:\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. sat_precond_as s' (as_proj (a # as) vs)", "proof (cases \"as_proj (a # as) vs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {};\n     as_proj (a # as) vs = []\\<rbrakk>\n    \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)\n 2. \\<And>aa list.\n       \\<lbrakk>\\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {};\n        as_proj (a # as) vs = aa # list\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "case Cons2: (Cons a' list)\n        \\<comment> \\<open>TODO unfold the sledgehammered metis steps.\\<close>"], ["proof (state)\nthis:\n  as_proj (a # as) vs = a' # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {};\n     as_proj (a # as) vs = []\\<rbrakk>\n    \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)\n 2. \\<And>aa list.\n       \\<lbrakk>\\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {};\n        as_proj (a # as) vs = aa # list\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  as_proj (a # as) vs = a' # list", "have a: \"\n          sat_precond_as s' (as_proj (a # as) vs)\n          = (fst a' \\<subseteq>\\<^sub>f s') \\<and> sat_precond_as (state_succ s' a') list\n        \""], ["proof (prove)\nusing this:\n  as_proj (a # as) vs = a' # list\n\ngoal (1 subgoal):\n 1. sat_precond_as s' (as_proj (a # as) vs) =\n    (fst a' \\<subseteq>\\<^sub>f s') \\<and>\n    sat_precond_as (state_succ s' a') list", "using P1 Cons.IH Cons.prems(1, 2) Cons2"], ["proof (prove)\nusing this:\n  as_proj (a # as) vs = a' # list\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n  \\<lbrakk>sat_precond_as ?s as;\n   fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s'\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as ?s' (as_proj as ?vs)\n  sat_precond_as s (a # as)\n  fmrestrict_set vs s = fmrestrict_set vs s'\n  as_proj (a # as) vs = a' # list\n\ngoal (1 subgoal):\n 1. sat_precond_as s' (as_proj (a # as) vs) =\n    (fst a' \\<subseteq>\\<^sub>f s') \\<and>\n    sat_precond_as (state_succ s' a') list", "by (metis sat_precond_as_proj_3 empty_eff_not_in_as_proj sat_precond_as.simps(2))"], ["proof (state)\nthis:\n  sat_precond_as s' (as_proj (a # as) vs) =\n  (fst a' \\<subseteq>\\<^sub>f s') \\<and>\n  sat_precond_as (state_succ s' a') list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {};\n     as_proj (a # as) vs = []\\<rbrakk>\n    \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)\n 2. \\<And>aa list.\n       \\<lbrakk>\\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {};\n        as_proj (a # as) vs = aa # list\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  sat_precond_as s' (as_proj (a # as) vs) =\n  (fst a' \\<subseteq>\\<^sub>f s') \\<and>\n  sat_precond_as (state_succ s' a') list", "have b: \"fst a' \\<subseteq>\\<^sub>f s'\""], ["proof (prove)\nusing this:\n  sat_precond_as s' (as_proj (a # as) vs) =\n  (fst a' \\<subseteq>\\<^sub>f s') \\<and>\n  sat_precond_as (state_succ s' a') list\n\ngoal (1 subgoal):\n 1. fst a' \\<subseteq>\\<^sub>f s'", "unfolding sat_precond_as.simps(2)"], ["proof (prove)\nusing this:\n  sat_precond_as s' (as_proj (a # as) vs) =\n  (fst a' \\<subseteq>\\<^sub>f s') \\<and>\n  sat_precond_as (state_succ s' a') list\n\ngoal (1 subgoal):\n 1. fst a' \\<subseteq>\\<^sub>f s'", "using P1 Cons.IH Cons.prems(1, 2) sat_precond_as_proj_3 empty_eff_not_in_as_proj"], ["proof (prove)\nusing this:\n  sat_precond_as s' (as_proj (a # as) vs) =\n  (fst a' \\<subseteq>\\<^sub>f s') \\<and>\n  sat_precond_as (state_succ s' a') list\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n  \\<lbrakk>sat_precond_as ?s as;\n   fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s'\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as ?s' (as_proj as ?vs)\n  sat_precond_as s (a # as)\n  fmrestrict_set vs s = fmrestrict_set vs s'\n  fmdom' (fmrestrict_set ?vs (snd ?a)) = {} \\<Longrightarrow>\n  fmrestrict_set ?vs (state_succ ?s ?a) = fmrestrict_set ?vs ?s\n  fmdom' (fmrestrict_set ?vs (snd ?a)) = {} \\<Longrightarrow>\n  as_proj (?a # ?as) ?vs = as_proj ?as ?vs\n\ngoal (1 subgoal):\n 1. fst a' \\<subseteq>\\<^sub>f s'", "by (metis sat_precond_as.simps(2))"], ["proof (state)\nthis:\n  fst a' \\<subseteq>\\<^sub>f s'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {};\n     as_proj (a # as) vs = []\\<rbrakk>\n    \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)\n 2. \\<And>aa list.\n       \\<lbrakk>\\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {};\n        as_proj (a # as) vs = aa # list\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  fst a' \\<subseteq>\\<^sub>f s'", "have \"sat_precond_as (state_succ s' a') list\""], ["proof (prove)\nusing this:\n  fst a' \\<subseteq>\\<^sub>f s'\n\ngoal (1 subgoal):\n 1. sat_precond_as (state_succ s' a') list", "using a"], ["proof (prove)\nusing this:\n  fst a' \\<subseteq>\\<^sub>f s'\n  sat_precond_as s' (as_proj (a # as) vs) =\n  (fst a' \\<subseteq>\\<^sub>f s') \\<and>\n  sat_precond_as (state_succ s' a') list\n\ngoal (1 subgoal):\n 1. sat_precond_as (state_succ s' a') list", "by blast"], ["proof (state)\nthis:\n  sat_precond_as (state_succ s' a') list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {};\n     as_proj (a # as) vs = []\\<rbrakk>\n    \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)\n 2. \\<And>aa list.\n       \\<lbrakk>\\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {};\n        as_proj (a # as) vs = aa # list\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  sat_precond_as (state_succ s' a') list", "show ?thesis"], ["proof (prove)\nusing this:\n  sat_precond_as (state_succ s' a') list\n\ngoal (1 subgoal):\n 1. sat_precond_as s' (as_proj (a # as) vs)", "using a b"], ["proof (prove)\nusing this:\n  sat_precond_as (state_succ s' a') list\n  sat_precond_as s' (as_proj (a # as) vs) =\n  (fst a' \\<subseteq>\\<^sub>f s') \\<and>\n  sat_precond_as (state_succ s' a') list\n  fst a' \\<subseteq>\\<^sub>f s'\n\ngoal (1 subgoal):\n 1. sat_precond_as s' (as_proj (a # as) vs)", "by blast"], ["proof (state)\nthis:\n  sat_precond_as s' (as_proj (a # as) vs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {};\n     as_proj (a # as) vs = []\\<rbrakk>\n    \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "qed fastforce"], ["proof (state)\nthis:\n  sat_precond_as s' (as_proj (a # as) vs)\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "}"], ["proof (state)\nthis:\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  sat_precond_as s' (as_proj (a # as) vs)\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as s' (as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj (a # as) vs)", "ultimately"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  sat_precond_as s' (as_proj (a # as) vs)\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  sat_precond_as s' (as_proj (a # as) vs)", "show ?case"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f s\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  sat_precond_as s' (as_proj (a # as) vs)\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  sat_precond_as s' (as_proj (a # as) vs)\n\ngoal (1 subgoal):\n 1. sat_precond_as s' (as_proj (a # as) vs)", "by blast"], ["proof (state)\nthis:\n  sat_precond_as s' (as_proj (a # as) vs)\n\ngoal (1 subgoal):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as s' (as_proj [] vs)", "qed simp"], ["", "lemma sat_precond_drest_as_proj:\n  fixes as s s' vs\n  assumes \"(sat_precond_as s as)\" \"(fmrestrict_set vs s = fmrestrict_set vs s')\"\n  shows \"(sat_precond_as (fmrestrict_set vs s') (as_proj as vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_precond_as (fmrestrict_set vs s') (as_proj as vs)", "using assms"], ["proof (prove)\nusing this:\n  sat_precond_as s as\n  fmrestrict_set vs s = fmrestrict_set vs s'\n\ngoal (1 subgoal):\n 1. sat_precond_as (fmrestrict_set vs s') (as_proj as vs)", "proof (induction as arbitrary: s s' vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n(as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj (a # as) vs)", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>sat_precond_as ?s as;\n   fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s'\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as (fmrestrict_set ?vs ?s') (as_proj as ?vs)\n  sat_precond_as s (a # as)\n  fmrestrict_set vs s = fmrestrict_set vs s'\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n(as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>sat_precond_as ?s as;\n   fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s'\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as (fmrestrict_set ?vs ?s') (as_proj as ?vs)\n  sat_precond_as s (a # as)\n  fmrestrict_set vs s = fmrestrict_set vs s'", "have 1: \"fst a \\<subseteq>\\<^sub>f s\" \"sat_precond_as (state_succ s a) as\""], ["proof (prove)\nusing this:\n  \\<lbrakk>sat_precond_as ?s as;\n   fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s'\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as (fmrestrict_set ?vs ?s') (as_proj as ?vs)\n  sat_precond_as s (a # as)\n  fmrestrict_set vs s = fmrestrict_set vs s'\n\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s &&& sat_precond_as (state_succ s a) as", "using Cons.prems"], ["proof (prove)\nusing this:\n  \\<lbrakk>sat_precond_as ?s as;\n   fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s'\\<rbrakk>\n  \\<Longrightarrow> sat_precond_as (fmrestrict_set ?vs ?s') (as_proj as ?vs)\n  sat_precond_as s (a # as)\n  fmrestrict_set vs s = fmrestrict_set vs s'\n  sat_precond_as s (a # as)\n  fmrestrict_set vs s = fmrestrict_set vs s'\n\ngoal (1 subgoal):\n 1. fst a \\<subseteq>\\<^sub>f s &&& sat_precond_as (state_succ s a) as", "by auto+"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s\n  sat_precond_as (state_succ s a) as\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n(as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s\n  sat_precond_as (state_succ s a) as", "have \"fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f fmrestrict_set vs s\""], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n  sat_precond_as (state_succ s a) as\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f fmrestrict_set vs s", "using fmsubset_restrict_set_mono"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n  sat_precond_as (state_succ s a) as\n  ?m \\<subseteq>\\<^sub>f ?n \\<Longrightarrow>\n  fmrestrict_set ?A ?m \\<subseteq>\\<^sub>f fmrestrict_set ?A ?n\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f fmrestrict_set vs s", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n(as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f fmrestrict_set vs s", "have \"fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s'\""], ["proof (prove)\nusing this:\n  fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s'", "unfolding action_proj_def"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fst (fmrestrict_set vs (fst a),\n         fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n    fmrestrict_set vs s'", "using Cons.prems(2) sat_precond_as_proj_1"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (fst a) \\<subseteq>\\<^sub>f fmrestrict_set vs s\n  fmrestrict_set vs s = fmrestrict_set vs s'\n  fmrestrict_set ?vs ?s = fmrestrict_set ?vs ?s' \\<Longrightarrow>\n  (fmrestrict_set ?vs ?x \\<subseteq>\\<^sub>f ?s) =\n  (fmrestrict_set ?vs ?x \\<subseteq>\\<^sub>f ?s')\n\ngoal (1 subgoal):\n 1. fst (fmrestrict_set vs (fst a),\n         fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n    fmrestrict_set vs s'", "by simp"], ["proof (state)\nthis:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s'\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n(as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s'", "have \"fmrestrict_set vs (snd a) = fmrestrict_set vs (snd (action_proj a vs))\""], ["proof (prove)\nusing this:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f fmrestrict_set vs s'\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd a) = fmrestrict_set vs (snd (action_proj a vs))", "unfolding action_proj_def"], ["proof (prove)\nusing this:\n  fst (fmrestrict_set vs (fst a),\n       fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n  fmrestrict_set vs s'\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd a) =\n    fmrestrict_set vs\n     (snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)))", "by (simp add: fmfilter_alt_defs(4))"], ["proof (state)\nthis:\n  fmrestrict_set vs (snd a) = fmrestrict_set vs (snd (action_proj a vs))\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n(as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (snd a) = fmrestrict_set vs (snd (action_proj a vs))", "have \"fst (action_proj a vs) \\<subseteq>\\<^sub>f s\""], ["proof (prove)\nusing this:\n  fmrestrict_set vs (snd a) = fmrestrict_set vs (snd (action_proj a vs))\n\ngoal (1 subgoal):\n 1. fst (action_proj a vs) \\<subseteq>\\<^sub>f s", "unfolding action_proj_def"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (snd a) =\n  fmrestrict_set vs\n   (snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)))\n\ngoal (1 subgoal):\n 1. fst (fmrestrict_set vs (fst a),\n         fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n    s", "using 1(1) fst_conv sat_precond_as_proj_4"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (snd a) =\n  fmrestrict_set vs\n   (snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)))\n  fst a \\<subseteq>\\<^sub>f s\n  fst (?x1.0, ?x2.0) = ?x1.0\n  ?fm2.0 \\<subseteq>\\<^sub>f ?fm1.0 \\<Longrightarrow>\n  fmrestrict_set ?vs ?fm2.0 \\<subseteq>\\<^sub>f ?fm1.0\n\ngoal (1 subgoal):\n 1. fst (fmrestrict_set vs (fst a),\n         fmrestrict_set vs (snd a)) \\<subseteq>\\<^sub>f\n    s", "by auto\n      \\<comment> \\<open>TODO unfold these sledgehammered steps.\\<close>"], ["proof (state)\nthis:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n(as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s", "have \"\n    fmrestrict_set vs (state_succ s a)\n    = fmrestrict_set vs (state_succ (fmrestrict_set vs s') (action_proj a vs))\n  \""], ["proof (prove)\nusing this:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) =\n    fmrestrict_set vs (state_succ (fmrestrict_set vs s') (action_proj a vs))", "using 1(1) Cons.prems(2)"], ["proof (prove)\nusing this:\n  fst (action_proj a vs) \\<subseteq>\\<^sub>f s\n  fst a \\<subseteq>\\<^sub>f s\n  fmrestrict_set vs s = fmrestrict_set vs s'\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) =\n    fmrestrict_set vs (state_succ (fmrestrict_set vs s') (action_proj a vs))", "by (metis fmfilter_alt_defs(4) fmfilter_true fmlookup_restrict_set\n        drest_succ_proj_eq_drest_succ option.simps(3))"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s a) =\n  fmrestrict_set vs (state_succ (fmrestrict_set vs s') (action_proj a vs))\n\ngoal (2 subgoals):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj [] vs)\n 2. \\<And>a as s s' vs.\n       \\<lbrakk>\\<And>s s' vs.\n                   \\<lbrakk>sat_precond_as s as;\n                    fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n                   \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n(as_proj as vs);\n        sat_precond_as s (a # as);\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (state_succ s a) =\n  fmrestrict_set vs (state_succ (fmrestrict_set vs s') (action_proj a vs))", "show ?case"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (state_succ s a) =\n  fmrestrict_set vs (state_succ (fmrestrict_set vs s') (action_proj a vs))\n\ngoal (1 subgoal):\n 1. sat_precond_as (fmrestrict_set vs s') (as_proj (a # as) vs)", "using Cons.prems(1, 2)"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (state_succ s a) =\n  fmrestrict_set vs (state_succ (fmrestrict_set vs s') (action_proj a vs))\n  sat_precond_as s (a # as)\n  fmrestrict_set vs s = fmrestrict_set vs s'\n\ngoal (1 subgoal):\n 1. sat_precond_as (fmrestrict_set vs s') (as_proj (a # as) vs)", "by (metis fmfilter_alt_defs(4) fmfilter_true fmlookup_restrict_set sat_precond_as_proj\n        option.simps(3))"], ["proof (state)\nthis:\n  sat_precond_as (fmrestrict_set vs s') (as_proj (a # as) vs)\n\ngoal (1 subgoal):\n 1. \\<And>s s' vs.\n       \\<lbrakk>sat_precond_as s [];\n        fmrestrict_set vs s = fmrestrict_set vs s'\\<rbrakk>\n       \\<Longrightarrow> sat_precond_as (fmrestrict_set vs s')\n                          (as_proj [] vs)", "qed simp"], ["", "lemma as_proj_eq_as:\n  assumes \"(no_effectless_act as)\" \"(as \\<in> valid_plans PROB)\" \"(prob_dom PROB \\<subseteq> vs)\"\n  shows \"(as_proj as vs = as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as_proj as vs = as", "using assms"], ["proof (prove)\nusing this:\n  no_effectless_act as\n  as \\<in> valid_plans PROB\n  prob_dom PROB \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. as_proj as vs = as", "proof (induction as arbitrary: PROB vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "case (Cons a as)\n    \\<comment> \\<open>NOTE We only need to look at the first branch of 'as\\_proj'.\\<close>\n    \\<comment> \\<open>TODO step should be refactored and proven explicitely because it's so pivotal.\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>no_effectless_act as; as \\<in> valid_plans ?PROB;\n   prob_dom ?PROB \\<subseteq> ?vs\\<rbrakk>\n  \\<Longrightarrow> as_proj as ?vs = as\n  no_effectless_act (a # as)\n  a # as \\<in> valid_plans PROB\n  prob_dom PROB \\<subseteq> vs\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>no_effectless_act as; as \\<in> valid_plans ?PROB;\n   prob_dom ?PROB \\<subseteq> ?vs\\<rbrakk>\n  \\<Longrightarrow> as_proj as ?vs = as\n  no_effectless_act (a # as)\n  a # as \\<in> valid_plans PROB\n  prob_dom PROB \\<subseteq> vs", "have \"fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>no_effectless_act as; as \\<in> valid_plans ?PROB;\n   prob_dom ?PROB \\<subseteq> ?vs\\<rbrakk>\n  \\<Longrightarrow> as_proj as ?vs = as\n  no_effectless_act (a # as)\n  a # as \\<in> valid_plans PROB\n  prob_dom PROB \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}", "unfolding fmdom'_restrict_set_precise"], ["proof (prove)\nusing this:\n  \\<lbrakk>no_effectless_act as; as \\<in> valid_plans ?PROB;\n   prob_dom ?PROB \\<subseteq> ?vs\\<rbrakk>\n  \\<Longrightarrow> as_proj as ?vs = as\n  no_effectless_act (a # as)\n  a # as \\<in> valid_plans PROB\n  prob_dom PROB \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs \\<noteq> {}", "by (metis\n        FDOM_eff_subset_prob_dom_pair dual_order.trans inf.orderE\n        no_effectless_act.simps(2) valid_plan_valid_head)\n      \\<comment> \\<open>NOTE Proof 'action\\_proj a vs = a' for the first branch of 'as\\_proj'.\\<close>"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "moreover"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "{"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "assume \"fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\"\n      \\<comment> \\<open>NOTE show 'action\\_proj a vs = a'.\\<close>"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "moreover"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "{"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "have \"as_proj (a # as) vs = action_proj a vs # as_proj as vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as_proj (a # as) vs = action_proj a vs # as_proj as vs", "using calculation"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs = action_proj a vs # as_proj as vs", "by force"], ["proof (state)\nthis:\n  as_proj (a # as) vs = action_proj a vs # as_proj as vs\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "then"], ["proof (chain)\npicking this:\n  as_proj (a # as) vs = action_proj a vs # as_proj as vs", "have \"a \\<in> PROB\""], ["proof (prove)\nusing this:\n  as_proj (a # as) vs = action_proj a vs # as_proj as vs\n\ngoal (1 subgoal):\n 1. a \\<in> PROB", "using Cons.prems(2) valid_plan_valid_head"], ["proof (prove)\nusing this:\n  as_proj (a # as) vs = action_proj a vs # as_proj as vs\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow> ?h \\<in> ?PROB\n\ngoal (1 subgoal):\n 1. a \\<in> PROB", "by fast"], ["proof (state)\nthis:\n  a \\<in> PROB\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "then"], ["proof (chain)\npicking this:\n  a \\<in> PROB", "have \"action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB\""], ["proof (prove)\nusing this:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB", "using exec_as_proj_valid_2"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  action_dom (fst ?a) (snd ?a) \\<subseteq> prob_dom ?PROB\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB", "by fast"], ["proof (state)\nthis:\n  action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "then"], ["proof (chain)\npicking this:\n  action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB", "have \"action_dom (fst a) (snd a) \\<subseteq> vs\""], ["proof (prove)\nusing this:\n  action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs", "using Cons.prems(3)"], ["proof (prove)\nusing this:\n  action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB\n  prob_dom PROB \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> vs", "by fast"], ["proof (state)\nthis:\n  action_dom (fst a) (snd a) \\<subseteq> vs\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "then"], ["proof (chain)\npicking this:\n  action_dom (fst a) (snd a) \\<subseteq> vs", "have \"action_proj a vs = a\""], ["proof (prove)\nusing this:\n  action_dom (fst a) (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. action_proj a vs = a", "using action_proj_idempot'"], ["proof (prove)\nusing this:\n  action_dom (fst a) (snd a) \\<subseteq> vs\n  action_dom (fst ?a) (snd ?a) \\<subseteq> ?vs \\<Longrightarrow>\n  action_proj ?a ?vs = ?a\n\ngoal (1 subgoal):\n 1. action_proj a vs = a", "by fast"], ["proof (state)\nthis:\n  action_proj a vs = a\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "}\n      \\<comment> \\<open>NOTE show that 'as\\_proj as vs = as'.\\<close>"], ["proof (state)\nthis:\n  action_proj a vs = a\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "moreover"], ["proof (state)\nthis:\n  action_proj a vs = a\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "{"], ["proof (state)\nthis:\n  action_proj a vs = a\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "have 1: \"no_effectless_act as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_effectless_act as", "using Cons.prems(1)"], ["proof (prove)\nusing this:\n  no_effectless_act (a # as)\n\ngoal (1 subgoal):\n 1. no_effectless_act as", "by simp"], ["proof (state)\nthis:\n  no_effectless_act as\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "then"], ["proof (chain)\npicking this:\n  no_effectless_act as", "have \"as \\<in> valid_plans PROB\""], ["proof (prove)\nusing this:\n  no_effectless_act as\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "using Cons.prems(2) valid_plan_valid_tail"], ["proof (prove)\nusing this:\n  no_effectless_act as\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  ?as \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "by fast"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "then"], ["proof (chain)\npicking this:\n  as \\<in> valid_plans PROB", "have \"as_proj as vs = as\""], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. as_proj as vs = as", "using Cons.prems(3) Cons.IH 1"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  prob_dom PROB \\<subseteq> vs\n  \\<lbrakk>no_effectless_act as; as \\<in> valid_plans ?PROB;\n   prob_dom ?PROB \\<subseteq> ?vs\\<rbrakk>\n  \\<Longrightarrow> as_proj as ?vs = as\n  no_effectless_act as\n\ngoal (1 subgoal):\n 1. as_proj as vs = as", "by blast"], ["proof (state)\nthis:\n  as_proj as vs = as\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "}"], ["proof (state)\nthis:\n  as_proj as vs = as\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "ultimately"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n  action_proj a vs = a\n  as_proj as vs = as", "have \"as_proj (a # as) vs = a # as\""], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n  action_proj a vs = a\n  as_proj as vs = as\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs = a # as", "by simp"], ["proof (state)\nthis:\n  as_proj (a # as) vs = a # as\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "}"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  as_proj (a # as) vs = a # as\n\ngoal (2 subgoals):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []\n 2. \\<And>a as PROB vs.\n       \\<lbrakk>\\<And>PROB vs.\n                   \\<lbrakk>no_effectless_act as; as \\<in> valid_plans PROB;\n                    prob_dom PROB \\<subseteq> vs\\<rbrakk>\n                   \\<Longrightarrow> as_proj as vs = as;\n        no_effectless_act (a # as); a # as \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj (a # as) vs = a # as", "ultimately"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  as_proj (a # as) vs = a # as", "show ?case"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {} \\<Longrightarrow>\n  as_proj (a # as) vs = a # as\n\ngoal (1 subgoal):\n 1. as_proj (a # as) vs = a # as", "by fast"], ["proof (state)\nthis:\n  as_proj (a # as) vs = a # as\n\ngoal (1 subgoal):\n 1. \\<And>PROB vs.\n       \\<lbrakk>no_effectless_act []; [] \\<in> valid_plans PROB;\n        prob_dom PROB \\<subseteq> vs\\<rbrakk>\n       \\<Longrightarrow> as_proj [] vs = []", "qed simp"], ["", "lemma exec_rem_effless_as_proj_eq_exec_as_proj:\n  fixes s\n  shows \"exec_plan s (as_proj (rem_effectless_act as) vs) = exec_plan s (as_proj as vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (rem_effectless_act as) vs) =\n    exec_plan s (as_proj as vs)", "proof (induction as arbitrary: s vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s vs.\n       exec_plan s (as_proj (rem_effectless_act []) vs) =\n       exec_plan s (as_proj [] vs)\n 2. \\<And>a as s vs.\n       (\\<And>s vs.\n           exec_plan s (as_proj (rem_effectless_act as) vs) =\n           exec_plan s (as_proj as vs)) \\<Longrightarrow>\n       exec_plan s (as_proj (rem_effectless_act (a # as)) vs) =\n       exec_plan s (as_proj (a # as) vs)", "case (Cons a as)\n    \\<comment> \\<open>Split cases on the branching introduced by `remove\\_effectless\\_act` and `as\\_proj`.\\<close>"], ["proof (state)\nthis:\n  exec_plan ?s (as_proj (rem_effectless_act as) ?vs) =\n  exec_plan ?s (as_proj as ?vs)\n\ngoal (2 subgoals):\n 1. \\<And>s vs.\n       exec_plan s (as_proj (rem_effectless_act []) vs) =\n       exec_plan s (as_proj [] vs)\n 2. \\<And>a as s vs.\n       (\\<And>s vs.\n           exec_plan s (as_proj (rem_effectless_act as) vs) =\n           exec_plan s (as_proj as vs)) \\<Longrightarrow>\n       exec_plan s (as_proj (rem_effectless_act (a # as)) vs) =\n       exec_plan s (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  exec_plan ?s (as_proj (rem_effectless_act as) ?vs) =\n  exec_plan ?s (as_proj as ?vs)", "show ?case"], ["proof (prove)\nusing this:\n  exec_plan ?s (as_proj (rem_effectless_act as) ?vs) =\n  exec_plan ?s (as_proj as ?vs)\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (rem_effectless_act (a # as)) vs) =\n    exec_plan s (as_proj (a # as) vs)", "proof (cases \"fmdom' (snd a) \\<noteq> {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s vs.\n                exec_plan s (as_proj (rem_effectless_act as) vs) =\n                exec_plan s (as_proj as vs);\n     fmdom' (snd a) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)\n 2. \\<lbrakk>\\<And>s vs.\n                exec_plan s (as_proj (rem_effectless_act as) vs) =\n                exec_plan s (as_proj as vs);\n     \\<not> fmdom' (snd a) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)", "case true1: True"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s vs.\n                exec_plan s (as_proj (rem_effectless_act as) vs) =\n                exec_plan s (as_proj as vs);\n     fmdom' (snd a) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)\n 2. \\<lbrakk>\\<And>s vs.\n                exec_plan s (as_proj (rem_effectless_act as) vs) =\n                exec_plan s (as_proj as vs);\n     \\<not> fmdom' (snd a) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<noteq> {}", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (rem_effectless_act (a # as)) vs) =\n    exec_plan s (as_proj (a # as) vs)", "proof (cases \"fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>fmdom' (snd a) \\<noteq> {};\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)\n 2. \\<lbrakk>fmdom' (snd a) \\<noteq> {};\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)", "case False"], ["proof (state)\nthis:\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmdom' (snd a) \\<noteq> {};\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)\n 2. \\<lbrakk>fmdom' (snd a) \\<noteq> {};\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (rem_effectless_act (a # as)) vs) =\n    exec_plan s (as_proj (a # as) vs)", "by (simp add: Cons true1)"], ["proof (state)\nthis:\n  exec_plan s (as_proj (rem_effectless_act (a # as)) vs) =\n  exec_plan s (as_proj (a # as) vs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (snd a) \\<noteq> {};\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)", "qed (simp add: Cons true1)"], ["proof (state)\nthis:\n  exec_plan s (as_proj (rem_effectless_act (a # as)) vs) =\n  exec_plan s (as_proj (a # as) vs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s vs.\n                exec_plan s (as_proj (rem_effectless_act as) vs) =\n                exec_plan s (as_proj as vs);\n     \\<not> fmdom' (snd a) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s vs.\n                exec_plan s (as_proj (rem_effectless_act as) vs) =\n                exec_plan s (as_proj as vs);\n     \\<not> fmdom' (snd a) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)", "case False"], ["proof (state)\nthis:\n  \\<not> fmdom' (snd a) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s vs.\n                exec_plan s (as_proj (rem_effectless_act as) vs) =\n                exec_plan s (as_proj as vs);\n     \\<not> fmdom' (snd a) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  \\<not> fmdom' (snd a) \\<noteq> {}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> fmdom' (snd a) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (rem_effectless_act (a # as)) vs) =\n    exec_plan s (as_proj (a # as) vs)", "proof (cases \"fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> fmdom' (snd a) \\<noteq> {};\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)\n 2. \\<lbrakk>\\<not> fmdom' (snd a) \\<noteq> {};\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)", "case true2: True"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> fmdom' (snd a) \\<noteq> {};\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)\n 2. \\<lbrakk>\\<not> fmdom' (snd a) \\<noteq> {};\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}", "have 1: \"fmdom' (snd a) \\<inter> vs = {}\""], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs = {}", "using False Int_empty_left"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n  \\<not> fmdom' (snd a) \\<noteq> {}\n  {} \\<inter> ?B = {}\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> vs = {}", "by force\n          \\<comment> \\<open>NOTE This step shows that the case for @{term \"fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\"} is\n            impossible.\\<close>\n          \\<comment> \\<open>TODO could be refactored into a (simp) lemma (`as\\_proj\\_eq\\_as` also uses this?).\\<close>"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> vs = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> fmdom' (snd a) \\<noteq> {};\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)\n 2. \\<lbrakk>\\<not> fmdom' (snd a) \\<noteq> {};\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<inter> vs = {}", "have \"fmdom' (fmrestrict_set vs (snd a)) = {}\""], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<inter> vs = {}\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (snd a)) = {}", "by (simp add: fmdom'_restrict_set_precise)"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> fmdom' (snd a) \\<noteq> {};\n     fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)\n 2. \\<lbrakk>\\<not> fmdom' (snd a) \\<noteq> {};\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) = {}\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (rem_effectless_act (a # as)) vs) =\n    exec_plan s (as_proj (a # as) vs)", "using true2"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) = {}\n  fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj (rem_effectless_act (a # as)) vs) =\n    exec_plan s (as_proj (a # as) vs)", "by blast"], ["proof (state)\nthis:\n  exec_plan s (as_proj (rem_effectless_act (a # as)) vs) =\n  exec_plan s (as_proj (a # as) vs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> fmdom' (snd a) \\<noteq> {};\n     \\<not> fmdom' (fmrestrict_set vs (snd a)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> exec_plan s\n                       (as_proj (rem_effectless_act (a # as)) vs) =\n                      exec_plan s (as_proj (a # as) vs)", "qed (simp add: Cons)"], ["proof (state)\nthis:\n  exec_plan s (as_proj (rem_effectless_act (a # as)) vs) =\n  exec_plan s (as_proj (a # as) vs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  exec_plan s (as_proj (rem_effectless_act (a # as)) vs) =\n  exec_plan s (as_proj (a # as) vs)\n\ngoal (1 subgoal):\n 1. \\<And>s vs.\n       exec_plan s (as_proj (rem_effectless_act []) vs) =\n       exec_plan s (as_proj [] vs)", "qed simp"], ["", "lemma exec_as_proj_eq_exec_as:\n  fixes PROB as vs s\n  assumes \"(as \\<in> valid_plans PROB)\" \"(prob_dom PROB \\<subseteq> vs)\"\n  shows \"(exec_plan s (as_proj as vs) = exec_plan s as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s (as_proj as vs) = exec_plan s as", "using assms as_proj_eq_as exec_rem_effless_as_proj_eq_exec_as_proj rem_effectless_works_1 rem_effectless_works_6\n    rem_effectless_works_9 sublist_valid_plan"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  prob_dom PROB \\<subseteq> vs\n  \\<lbrakk>no_effectless_act ?as; ?as \\<in> valid_plans ?PROB;\n   prob_dom ?PROB \\<subseteq> ?vs\\<rbrakk>\n  \\<Longrightarrow> as_proj ?as ?vs = ?as\n  exec_plan ?s (as_proj (rem_effectless_act ?as) ?vs) =\n  exec_plan ?s (as_proj ?as ?vs)\n  exec_plan ?s ?as = exec_plan ?s (rem_effectless_act ?as)\n  no_effectless_act (rem_effectless_act ?as)\n  subseq (rem_effectless_act ?as) ?as\n  \\<lbrakk>subseq ?as' ?as; ?as \\<in> valid_plans ?PROB\\<rbrakk>\n  \\<Longrightarrow> ?as' \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. exec_plan s (as_proj as vs) = exec_plan s as", "by metis"], ["", "lemma dom_prob_proj: \"prob_dom (prob_proj PROB vs) \\<subseteq> vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) \\<subseteq> vs", "using graph_plan_neq_mems_state_set_neq_len"], ["proof (prove)\nusing this:\n  prob_dom (prob_proj ?PROB ?vs) = prob_dom ?PROB \\<inter> ?vs\n\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) \\<subseteq> vs", "by fast\n\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor into `FmapUtils.thy`.\\<close>"], ["", "lemma subset_proj_absorb_1_a:\n  fixes f vs1 vs2\n  assumes \"(vs1 \\<subseteq> vs2)\"\n  shows \"fmrestrict_set vs1 (fmrestrict_set vs2 f) = fmrestrict_set vs1 f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs1 (fmrestrict_set vs2 f) = fmrestrict_set vs1 f", "using assms"], ["proof (prove)\nusing this:\n  vs1 \\<subseteq> vs2\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs1 (fmrestrict_set vs2 f) = fmrestrict_set vs1 f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vs1 \\<subseteq> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 (fmrestrict_set vs2 f) = fmrestrict_set vs1 f", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. vs1 \\<subseteq> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 (fmrestrict_set vs2 f) = fmrestrict_set vs1 f", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. vs1 \\<subseteq> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 (fmrestrict_set vs2 f) = fmrestrict_set vs1 f", "have \"fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) v = fmlookup (fmrestrict_set vs1 f) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) v =\n    fmlookup (fmrestrict_set vs1 f) v", "using assms"], ["proof (prove)\nusing this:\n  vs1 \\<subseteq> vs2\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) v =\n    fmlookup (fmrestrict_set vs1 f) v", "proof (cases \"v \\<in> vs1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>vs1 \\<subseteq> vs2; v \\<in> vs1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f))\n                       v =\n                      fmlookup (fmrestrict_set vs1 f) v\n 2. \\<lbrakk>vs1 \\<subseteq> vs2; v \\<notin> vs1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f))\n                       v =\n                      fmlookup (fmrestrict_set vs1 f) v", "case False"], ["proof (state)\nthis:\n  v \\<notin> vs1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>vs1 \\<subseteq> vs2; v \\<in> vs1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f))\n                       v =\n                      fmlookup (fmrestrict_set vs1 f) v\n 2. \\<lbrakk>vs1 \\<subseteq> vs2; v \\<notin> vs1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f))\n                       v =\n                      fmlookup (fmrestrict_set vs1 f) v", "then"], ["proof (chain)\npicking this:\n  v \\<notin> vs1", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<notin> vs1\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) v =\n    fmlookup (fmrestrict_set vs1 f) v", "proof (cases \"v \\<in> vs2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<notin> vs1; v \\<in> vs2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f))\n                       v =\n                      fmlookup (fmrestrict_set vs1 f) v\n 2. \\<lbrakk>v \\<notin> vs1; v \\<notin> vs2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f))\n                       v =\n                      fmlookup (fmrestrict_set vs1 f) v", "case False"], ["proof (state)\nthis:\n  v \\<notin> vs2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<notin> vs1; v \\<in> vs2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f))\n                       v =\n                      fmlookup (fmrestrict_set vs1 f) v\n 2. \\<lbrakk>v \\<notin> vs1; v \\<notin> vs2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f))\n                       v =\n                      fmlookup (fmrestrict_set vs1 f) v", "then"], ["proof (chain)\npicking this:\n  v \\<notin> vs2", "have \"v \\<notin> vs1\""], ["proof (prove)\nusing this:\n  v \\<notin> vs2\n\ngoal (1 subgoal):\n 1. v \\<notin> vs1", "using False assms"], ["proof (prove)\nusing this:\n  v \\<notin> vs2\n  v \\<notin> vs2\n  vs1 \\<subseteq> vs2\n\ngoal (1 subgoal):\n 1. v \\<notin> vs1", "by blast"], ["proof (state)\nthis:\n  v \\<notin> vs1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<notin> vs1; v \\<in> vs2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f))\n                       v =\n                      fmlookup (fmrestrict_set vs1 f) v\n 2. \\<lbrakk>v \\<notin> vs1; v \\<notin> vs2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f))\n                       v =\n                      fmlookup (fmrestrict_set vs1 f) v", "then"], ["proof (chain)\npicking this:\n  v \\<notin> vs1", "have\n          \"fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) v = None\"\n          \"fmlookup (fmrestrict_set vs1 f) v = None\""], ["proof (prove)\nusing this:\n  v \\<notin> vs1\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) v = None &&&\n    fmlookup (fmrestrict_set vs1 f) v = None", "by simp+"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) v = None\n  fmlookup (fmrestrict_set vs1 f) v = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<notin> vs1; v \\<in> vs2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f))\n                       v =\n                      fmlookup (fmrestrict_set vs1 f) v\n 2. \\<lbrakk>v \\<notin> vs1; v \\<notin> vs2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f))\n                       v =\n                      fmlookup (fmrestrict_set vs1 f) v", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) v = None\n  fmlookup (fmrestrict_set vs1 f) v = None", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) v = None\n  fmlookup (fmrestrict_set vs1 f) v = None\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) v =\n    fmlookup (fmrestrict_set vs1 f) v", "by argo"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) v =\n  fmlookup (fmrestrict_set vs1 f) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> vs1; v \\<in> vs2\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f))\n                       v =\n                      fmlookup (fmrestrict_set vs1 f) v", "qed simp"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) v =\n  fmlookup (fmrestrict_set vs1 f) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vs1 \\<subseteq> vs2; v \\<in> vs1\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f))\n                       v =\n                      fmlookup (fmrestrict_set vs1 f) v", "qed auto"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) v =\n  fmlookup (fmrestrict_set vs1 f) v\n\ngoal (1 subgoal):\n 1. vs1 \\<subseteq> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 (fmrestrict_set vs2 f) = fmrestrict_set vs1 f", "}"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) ?v2 =\n  fmlookup (fmrestrict_set vs1 f) ?v2\n\ngoal (1 subgoal):\n 1. vs1 \\<subseteq> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 (fmrestrict_set vs2 f) = fmrestrict_set vs1 f", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) ?v2 =\n  fmlookup (fmrestrict_set vs1 f) ?v2", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) ?v2 =\n  fmlookup (fmrestrict_set vs1 f) ?v2\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs1 (fmrestrict_set vs2 f) = fmrestrict_set vs1 f", "using fmap_ext"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs1 (fmrestrict_set vs2 f)) ?v2 =\n  fmlookup (fmrestrict_set vs1 f) ?v2\n  (\\<And>x. fmlookup ?m x = fmlookup ?n x) \\<Longrightarrow> ?m = ?n\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs1 (fmrestrict_set vs2 f) = fmrestrict_set vs1 f", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set vs1 (fmrestrict_set vs2 f) = fmrestrict_set vs1 f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subset_proj_absorb_1:\n  assumes \"(vs1 \\<subseteq> vs2)\"\n  shows \"(action_proj (action_proj a vs2) vs1 = action_proj a vs1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_proj (action_proj a vs2) vs1 = action_proj a vs1", "using assms"], ["proof (prove)\nusing this:\n  vs1 \\<subseteq> vs2\n\ngoal (1 subgoal):\n 1. action_proj (action_proj a vs2) vs1 = action_proj a vs1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vs1 \\<subseteq> vs2 \\<Longrightarrow>\n    action_proj (action_proj a vs2) vs1 = action_proj a vs1", "have\n    \"fmrestrict_set vs1 (fmrestrict_set vs2 (fst a)) = fmrestrict_set vs1 (fst a)\"\n    \"fmrestrict_set vs1 (fmrestrict_set vs2 (snd a)) = fmrestrict_set vs1 (snd a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs1 (fmrestrict_set vs2 (fst a)) =\n    fmrestrict_set vs1 (fst a) &&&\n    fmrestrict_set vs1 (fmrestrict_set vs2 (snd a)) =\n    fmrestrict_set vs1 (snd a)", "using assms subset_proj_absorb_1_a"], ["proof (prove)\nusing this:\n  vs1 \\<subseteq> vs2\n  ?vs1.0 \\<subseteq> ?vs2.0 \\<Longrightarrow>\n  fmrestrict_set ?vs1.0 (fmrestrict_set ?vs2.0 ?f) =\n  fmrestrict_set ?vs1.0 ?f\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs1 (fmrestrict_set vs2 (fst a)) =\n    fmrestrict_set vs1 (fst a) &&&\n    fmrestrict_set vs1 (fmrestrict_set vs2 (snd a)) =\n    fmrestrict_set vs1 (snd a)", "by blast+"], ["proof (state)\nthis:\n  fmrestrict_set vs1 (fmrestrict_set vs2 (fst a)) =\n  fmrestrict_set vs1 (fst a)\n  fmrestrict_set vs1 (fmrestrict_set vs2 (snd a)) =\n  fmrestrict_set vs1 (snd a)\n\ngoal (1 subgoal):\n 1. vs1 \\<subseteq> vs2 \\<Longrightarrow>\n    action_proj (action_proj a vs2) vs1 = action_proj a vs1", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs1 (fmrestrict_set vs2 (fst a)) =\n  fmrestrict_set vs1 (fst a)\n  fmrestrict_set vs1 (fmrestrict_set vs2 (snd a)) =\n  fmrestrict_set vs1 (snd a)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set vs1 (fmrestrict_set vs2 (fst a)) =\n  fmrestrict_set vs1 (fst a)\n  fmrestrict_set vs1 (fmrestrict_set vs2 (snd a)) =\n  fmrestrict_set vs1 (snd a)\n\ngoal (1 subgoal):\n 1. action_proj (action_proj a vs2) vs1 = action_proj a vs1", "unfolding action_proj_def"], ["proof (prove)\nusing this:\n  fmrestrict_set vs1 (fmrestrict_set vs2 (fst a)) =\n  fmrestrict_set vs1 (fst a)\n  fmrestrict_set vs1 (fmrestrict_set vs2 (snd a)) =\n  fmrestrict_set vs1 (snd a)\n\ngoal (1 subgoal):\n 1. (fmrestrict_set vs1\n      (fst (fmrestrict_set vs2 (fst a), fmrestrict_set vs2 (snd a))),\n     fmrestrict_set vs1\n      (snd (fmrestrict_set vs2 (fst a), fmrestrict_set vs2 (snd a)))) =\n    (fmrestrict_set vs1 (fst a), fmrestrict_set vs1 (snd a))", "by simp"], ["proof (state)\nthis:\n  action_proj (action_proj a vs2) vs1 = action_proj a vs1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subset_proj_absorb:\n  fixes PROB vs1 vs2\n  assumes \"vs1 \\<subseteq> vs2\"\n  shows \"prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "have \"\n      prob_proj (prob_proj PROB vs2) vs1\n      = ((\\<lambda>a. action_proj a vs1) \\<circ> (\\<lambda>a. action_proj a vs2)) ` PROB\n    \""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs2) vs1 =\n    ((\\<lambda>a. action_proj a vs1) \\<circ>\n     (\\<lambda>a. action_proj a vs2)) `\n    PROB", "unfolding prob_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a. action_proj a vs1) `\n    (\\<lambda>a. action_proj a vs2) ` PROB =\n    ((\\<lambda>a. action_proj a vs1) \\<circ>\n     (\\<lambda>a. action_proj a vs2)) `\n    PROB", "by fastforce"], ["proof (state)\nthis:\n  prob_proj (prob_proj PROB vs2) vs1 =\n  ((\\<lambda>a. action_proj a vs1) \\<circ>\n   (\\<lambda>a. action_proj a vs2)) `\n  PROB\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "also"], ["proof (state)\nthis:\n  prob_proj (prob_proj PROB vs2) vs1 =\n  ((\\<lambda>a. action_proj a vs1) \\<circ>\n   (\\<lambda>a. action_proj a vs2)) `\n  PROB\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "have \"\\<dots> = (\\<lambda>a. action_proj (action_proj a vs2) vs1) ` PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>a. action_proj a vs1) \\<circ>\n     (\\<lambda>a. action_proj a vs2)) `\n    PROB =\n    (\\<lambda>a. action_proj (action_proj a vs2) vs1) ` PROB", "by fastforce"], ["proof (state)\nthis:\n  ((\\<lambda>a. action_proj a vs1) \\<circ>\n   (\\<lambda>a. action_proj a vs2)) `\n  PROB =\n  (\\<lambda>a. action_proj (action_proj a vs2) vs1) ` PROB\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "also"], ["proof (state)\nthis:\n  ((\\<lambda>a. action_proj a vs1) \\<circ>\n   (\\<lambda>a. action_proj a vs2)) `\n  PROB =\n  (\\<lambda>a. action_proj (action_proj a vs2) vs1) ` PROB\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "have \"\\<dots> = (\\<lambda>a. action_proj a vs1) ` PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a. action_proj (action_proj a vs2) vs1) ` PROB =\n    (\\<lambda>a. action_proj a vs1) ` PROB", "using assms subset_proj_absorb_1"], ["proof (prove)\nusing this:\n  vs1 \\<subseteq> vs2\n  ?vs1.0 \\<subseteq> ?vs2.0 \\<Longrightarrow>\n  action_proj (action_proj ?a ?vs2.0) ?vs1.0 = action_proj ?a ?vs1.0\n\ngoal (1 subgoal):\n 1. (\\<lambda>a. action_proj (action_proj a vs2) vs1) ` PROB =\n    (\\<lambda>a. action_proj a vs1) ` PROB", "by metis"], ["proof (state)\nthis:\n  (\\<lambda>a. action_proj (action_proj a vs2) vs1) ` PROB =\n  (\\<lambda>a. action_proj a vs1) ` PROB\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "also"], ["proof (state)\nthis:\n  (\\<lambda>a. action_proj (action_proj a vs2) vs1) ` PROB =\n  (\\<lambda>a. action_proj a vs1) ` PROB\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "have \"\\<dots> = prob_proj PROB vs1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a. action_proj a vs1) ` PROB = prob_proj PROB vs1", "unfolding prob_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a. action_proj a vs1) ` PROB =\n    (\\<lambda>a. action_proj a vs1) ` PROB", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>a. action_proj a vs1) ` PROB = prob_proj PROB vs1\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "finally"], ["proof (chain)\npicking this:\n  prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "have \"prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1\""], ["proof (prove)\nusing this:\n  prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "by simp"], ["proof (state)\nthis:\n  prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "}"], ["proof (state)\nthis:\n  prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "then"], ["proof (chain)\npicking this:\n  prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "show ?thesis"], ["proof (prove)\nusing this:\n  prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1", "by simp"], ["proof (state)\nthis:\n  prob_proj (prob_proj PROB vs2) vs1 = prob_proj PROB vs1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma union_proj_absorb:\n  fixes PROB vs vs'\n  shows \"prob_proj (prob_proj PROB (vs \\<union> vs')) vs = prob_proj PROB vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB (vs \\<union> vs')) vs = prob_proj PROB vs", "by (simp add: subset_proj_absorb)"], ["", "lemma NOT_VS_IN_DOM_PROJ_PRE_EFF:\n  fixes ROB vs v a\n  assumes \"\\<not>(v \\<in> vs)\" \"(a \\<in> PROB)\"\n  shows \"(\n    ((v \\<in> fmdom' (fst a)) \\<longrightarrow> (v \\<in> fmdom' (fst (action_proj a (prob_dom PROB - vs)))))\n    \\<and> ((v \\<in> fmdom' (snd a)) \\<longrightarrow> (v \\<in> fmdom' (snd (action_proj a (prob_dom PROB - vs)))))\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<in> fmdom' (fst a) \\<longrightarrow>\n     v \\<in> fmdom' (fst (action_proj a (prob_dom PROB - vs)))) \\<and>\n    (v \\<in> fmdom' (snd a) \\<longrightarrow>\n     v \\<in> fmdom' (snd (action_proj a (prob_dom PROB - vs))))", "unfolding action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<in> fmdom' (fst a) \\<longrightarrow>\n     v \\<in> fmdom'\n              (fst (fmrestrict_set (prob_dom PROB - vs) (fst a),\n                    fmrestrict_set (prob_dom PROB - vs) (snd a)))) \\<and>\n    (v \\<in> fmdom' (snd a) \\<longrightarrow>\n     v \\<in> fmdom'\n              (snd (fmrestrict_set (prob_dom PROB - vs) (fst a),\n                    fmrestrict_set (prob_dom PROB - vs) (snd a))))", "using assms"], ["proof (prove)\nusing this:\n  v \\<notin> vs\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. (v \\<in> fmdom' (fst a) \\<longrightarrow>\n     v \\<in> fmdom'\n              (fst (fmrestrict_set (prob_dom PROB - vs) (fst a),\n                    fmrestrict_set (prob_dom PROB - vs) (snd a)))) \\<and>\n    (v \\<in> fmdom' (snd a) \\<longrightarrow>\n     v \\<in> fmdom'\n              (snd (fmrestrict_set (prob_dom PROB - vs) (fst a),\n                    fmrestrict_set (prob_dom PROB - vs) (snd a))))", "by (simp add: IN_FDOM_DRESTRICT_DIFF FDOM_pre_subset_prob_dom_pair\n      FDOM_eff_subset_prob_dom_pair)"], ["", "lemma IN_DISJ_DEP_IMP_DEP_DIFF:\n  fixes PROB vs vs' v v'\n  assumes \"(v \\<in> vs')\" \"(v' \\<in> vs')\" \"(disjnt vs vs')\"\n  shows \"(dep PROB v v' \\<longrightarrow> dep (prob_proj PROB (prob_dom PROB - vs)) v v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dep PROB v v' \\<longrightarrow>\n    dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> vs'\n  v' \\<in> vs'\n  disjnt vs vs'\n\ngoal (1 subgoal):\n 1. dep PROB v v' \\<longrightarrow>\n    dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "proof (cases \"v = v'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs'; v = v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n 2. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs';\n     v \\<noteq> v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "case False"], ["proof (state)\nthis:\n  v \\<noteq> v'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs'; v = v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n 2. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs';\n     v \\<noteq> v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "{"], ["proof (state)\nthis:\n  v \\<noteq> v'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs'; v = v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n 2. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs';\n     v \\<noteq> v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "assume P: \"dep PROB v v'\""], ["proof (state)\nthis:\n  dep PROB v v'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs'; v = v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n 2. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs';\n     v \\<noteq> v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "then"], ["proof (chain)\npicking this:\n  dep PROB v v'", "obtain a where a:\n      \"(v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or> v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a))\"\n      \"a \\<in> PROB\""], ["proof (prove)\nusing this:\n  dep PROB v v'\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n                 v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a);\n         a \\<in> PROB\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dep_def"], ["proof (prove)\nusing this:\n  (\\<exists>a.\n      a \\<in> PROB \\<and>\n      (v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n       v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a))) \\<or>\n  v = v'\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n                 v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a);\n         a \\<in> PROB\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using False"], ["proof (prove)\nusing this:\n  (\\<exists>a.\n      a \\<in> PROB \\<and>\n      (v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n       v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a))) \\<or>\n  v = v'\n  v \\<noteq> v'\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n                 v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a);\n         a \\<in> PROB\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n  v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a)\n  a \\<in> PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs'; v = v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n 2. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs';\n     v \\<noteq> v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "{"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n  v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a)\n  a \\<in> PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs'; v = v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n 2. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs';\n     v \\<noteq> v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "have \"v \\<notin> vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<notin> vs", "using assms(1, 3)"], ["proof (prove)\nusing this:\n  v \\<in> vs'\n  disjnt vs vs'\n\ngoal (1 subgoal):\n 1. v \\<notin> vs", "unfolding disjnt_def"], ["proof (prove)\nusing this:\n  v \\<in> vs'\n  vs \\<inter> vs' = {}\n\ngoal (1 subgoal):\n 1. v \\<notin> vs", "by blast"], ["proof (state)\nthis:\n  v \\<notin> vs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs'; v = v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n 2. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs';\n     v \\<noteq> v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "then"], ["proof (chain)\npicking this:\n  v \\<notin> vs", "have \"(v \\<in> fmdom' (fst a) \\<longrightarrow> v \\<in> fmdom' (fst (action_proj a (prob_dom PROB - vs))))\"\n        \"(v \\<in> fmdom' (snd a) \\<longrightarrow> v \\<in> fmdom' (snd (action_proj a (prob_dom PROB - vs))))\""], ["proof (prove)\nusing this:\n  v \\<notin> vs\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a) \\<longrightarrow>\n    v \\<in> fmdom' (fst (action_proj a (prob_dom PROB - vs))) &&&\n    v \\<in> fmdom' (snd a) \\<longrightarrow>\n    v \\<in> fmdom' (snd (action_proj a (prob_dom PROB - vs)))", "using a NOT_VS_IN_DOM_PROJ_PRE_EFF"], ["proof (prove)\nusing this:\n  v \\<notin> vs\n  v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n  v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a)\n  a \\<in> PROB\n  \\<lbrakk>?v \\<notin> ?vs; ?a \\<in> ?PROB\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> fmdom' (fst ?a) \\<longrightarrow>\n                     ?v \\<in> fmdom'\n                               (fst (action_proj ?a\n(prob_dom ?PROB - ?vs)))) \\<and>\n                    (?v \\<in> fmdom' (snd ?a) \\<longrightarrow>\n                     ?v \\<in> fmdom'\n                               (snd (action_proj ?a\n(prob_dom ?PROB - ?vs))))\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fst a) \\<longrightarrow>\n    v \\<in> fmdom' (fst (action_proj a (prob_dom PROB - vs))) &&&\n    v \\<in> fmdom' (snd a) \\<longrightarrow>\n    v \\<in> fmdom' (snd (action_proj a (prob_dom PROB - vs)))", "by metis+"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fst a) \\<longrightarrow>\n  v \\<in> fmdom' (fst (action_proj a (prob_dom PROB - vs)))\n  v \\<in> fmdom' (snd a) \\<longrightarrow>\n  v \\<in> fmdom' (snd (action_proj a (prob_dom PROB - vs)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs'; v = v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n 2. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs';\n     v \\<noteq> v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "}"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fst a) \\<longrightarrow>\n  v \\<in> fmdom' (fst (action_proj a (prob_dom PROB - vs)))\n  v \\<in> fmdom' (snd a) \\<longrightarrow>\n  v \\<in> fmdom' (snd (action_proj a (prob_dom PROB - vs)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs'; v = v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n 2. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs';\n     v \\<noteq> v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "note b = this"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fst a) \\<longrightarrow>\n  v \\<in> fmdom' (fst (action_proj a (prob_dom PROB - vs)))\n  v \\<in> fmdom' (snd a) \\<longrightarrow>\n  v \\<in> fmdom' (snd (action_proj a (prob_dom PROB - vs)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs'; v = v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n 2. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs';\n     v \\<noteq> v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (fst a) \\<longrightarrow>\n  v \\<in> fmdom' (fst (action_proj a (prob_dom PROB - vs)))\n  v \\<in> fmdom' (snd a) \\<longrightarrow>\n  v \\<in> fmdom' (snd (action_proj a (prob_dom PROB - vs)))", "consider (i) \"v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a)\"\n      | (ii) \"v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a)\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fst a) \\<longrightarrow>\n  v \\<in> fmdom' (fst (action_proj a (prob_dom PROB - vs)))\n  v \\<in> fmdom' (snd a) \\<longrightarrow>\n  v \\<in> fmdom' (snd (action_proj a (prob_dom PROB - vs)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a) \\<and>\n             v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n             thesis;\n     v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using a"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fst a) \\<longrightarrow>\n  v \\<in> fmdom' (fst (action_proj a (prob_dom PROB - vs)))\n  v \\<in> fmdom' (snd a) \\<longrightarrow>\n  v \\<in> fmdom' (snd (action_proj a (prob_dom PROB - vs)))\n  v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n  v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a)\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> fmdom' (fst a) \\<and>\n             v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n             thesis;\n     v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>v \\<in> fmdom' (fst a) \\<and>\n           v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n           ?thesis;\n   v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs'; v = v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n 2. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs';\n     v \\<noteq> v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>v \\<in> fmdom' (fst a) \\<and>\n           v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n           ?thesis;\n   v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "have \"dep (prob_proj PROB (prob_dom PROB - vs)) v v'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>v \\<in> fmdom' (fst a) \\<and>\n           v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n           ?thesis;\n   v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n    dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n 2. v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n    dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "case i"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a)\n\ngoal (2 subgoals):\n 1. v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n    dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n 2. v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n    dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a)", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "using assms(2, 3) a(2) b(1)"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a)\n  v' \\<in> vs'\n  disjnt vs vs'\n  a \\<in> PROB\n  v \\<in> fmdom' (fst a) \\<longrightarrow>\n  v \\<in> fmdom' (fst (action_proj a (prob_dom PROB - vs)))\n\ngoal (1 subgoal):\n 1. dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "by (meson dep_def disjnt_iff action_proj_in_prob_proj NOT_VS_IN_DOM_PROJ_PRE_EFF)"], ["proof (state)\nthis:\n  dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n    dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n    dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "case ii"], ["proof (state)\nthis:\n  v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a) \\<Longrightarrow>\n    dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a)", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "using assms(2, 3) a(2) b(2)"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a)\n  v' \\<in> vs'\n  disjnt vs vs'\n  a \\<in> PROB\n  v \\<in> fmdom' (snd a) \\<longrightarrow>\n  v \\<in> fmdom' (snd (action_proj a (prob_dom PROB - vs)))\n\ngoal (1 subgoal):\n 1. dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "by (meson dep_def disjnt_iff action_proj_in_prob_proj NOT_VS_IN_DOM_PROJ_PRE_EFF)"], ["proof (state)\nthis:\n  dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs'; v = v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n 2. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs';\n     v \\<noteq> v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "}"], ["proof (state)\nthis:\n  dep PROB v v' \\<Longrightarrow>\n  dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs'; v = v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n 2. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs';\n     v \\<noteq> v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "then"], ["proof (chain)\npicking this:\n  dep PROB v v' \\<Longrightarrow>\n  dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "show ?thesis"], ["proof (prove)\nusing this:\n  dep PROB v v' \\<Longrightarrow>\n  dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n\ngoal (1 subgoal):\n 1. dep PROB v v' \\<longrightarrow>\n    dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "by blast"], ["proof (state)\nthis:\n  dep PROB v v' \\<longrightarrow>\n  dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> vs'; v' \\<in> vs'; disjnt vs vs'; v = v'\\<rbrakk>\n    \\<Longrightarrow> dep PROB v v' \\<longrightarrow>\n                      dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "qed (auto simp: dep_def prob_proj_def disjnt_def)"], ["", "lemma  PROB_DOM_PROJ_DIFF:\n  fixes P vs\n  shows \"prob_dom (prob_proj PROB (prob_dom PROB - vs)) = (prob_dom PROB) - vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB (prob_dom PROB - vs)) = prob_dom PROB - vs", "using graph_plan_neq_mems_state_set_neq_len"], ["proof (prove)\nusing this:\n  prob_dom (prob_proj ?PROB ?vs) = prob_dom ?PROB \\<inter> ?vs\n\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB (prob_dom PROB - vs)) = prob_dom PROB - vs", "by fastforce"], ["", "lemma  two_children_parent_mems_le_finite:\n  fixes PROB vs\n  assumes \"(vs \\<subseteq> prob_dom PROB)\"\n  shows \"(prob_dom (prob_proj PROB vs) = vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) = vs", "using assms graph_plan_neq_mems_state_set_neq_len"], ["proof (prove)\nusing this:\n  vs \\<subseteq> prob_dom PROB\n  prob_dom (prob_proj ?PROB ?vs) = prob_dom ?PROB \\<inter> ?vs\n\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) = vs", "by fast\n\n\n\\<comment> \\<open>TODO showcase (non-trivial proof).\\<close>\n\\<comment> \\<open>TODO find explicit proof.\\<close>"], ["", "lemma PROJ_DOM_PRE_EFF_SUBSET_DOM:\n  fixes a vs\n  shows \"\n    (fmdom' (fst (action_proj a vs)) \\<subseteq> fmdom' (fst a))\n    \\<and> (fmdom' (snd (action_proj a vs)) \\<subseteq> fmdom' (snd a))\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (fst (action_proj a vs)) \\<subseteq> fmdom' (fst a) \\<and>\n    fmdom' (snd (action_proj a vs)) \\<subseteq> fmdom' (snd a)", "unfolding action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (fst (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)))\n    \\<subseteq> fmdom' (fst a) \\<and>\n    fmdom' (snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)))\n    \\<subseteq> fmdom' (snd a)", "by (auto simp: fmdom'_restrict_set_precise)"], ["", "lemma NOT_IN_PRE_EFF_NOT_IN_PRE_EFF_PROJ:\n  fixes a v vs\n  shows \"\n    (\\<not>(v \\<in> fmdom' (fst a)) \\<longrightarrow> \\<not>(v \\<in> fmdom' (fst (action_proj a vs))))\n    \\<and> (\\<not>(v \\<in> fmdom' (snd a)) \\<longrightarrow> \\<not>(v \\<in> fmdom' (snd (action_proj a vs))))\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<notin> fmdom' (fst a) \\<longrightarrow>\n     v \\<notin> fmdom' (fst (action_proj a vs))) \\<and>\n    (v \\<notin> fmdom' (snd a) \\<longrightarrow>\n     v \\<notin> fmdom' (snd (action_proj a vs)))", "using PROJ_DOM_PRE_EFF_SUBSET_DOM rev_subsetD"], ["proof (prove)\nusing this:\n  fmdom' (fst (action_proj ?a ?vs)) \\<subseteq> fmdom' (fst ?a) \\<and>\n  fmdom' (snd (action_proj ?a ?vs)) \\<subseteq> fmdom' (snd ?a)\n  \\<lbrakk>?c \\<in> ?A; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?B\n\ngoal (1 subgoal):\n 1. (v \\<notin> fmdom' (fst a) \\<longrightarrow>\n     v \\<notin> fmdom' (fst (action_proj a vs))) \\<and>\n    (v \\<notin> fmdom' (snd a) \\<longrightarrow>\n     v \\<notin> fmdom' (snd (action_proj a vs)))", "by metis"], ["", "lemma dep_proj_dep:\n  assumes \"dep (prob_proj PROB vs) v v'\"\n  shows \"dep PROB v v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dep PROB v v'", "using assms"], ["proof (prove)\nusing this:\n  dep (prob_proj PROB vs) v v'\n\ngoal (1 subgoal):\n 1. dep PROB v v'", "unfolding dep_def prob_proj_def action_proj_def image_def"], ["proof (prove)\nusing this:\n  (\\<exists>a.\n      a \\<in> {y. \\<exists>x\\<in>PROB.\n                     y =\n                     (fmrestrict_set vs (fst x),\n                      fmrestrict_set vs (snd x))} \\<and>\n      (v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n       v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a))) \\<or>\n  v = v'\n\ngoal (1 subgoal):\n 1. (\\<exists>a.\n        a \\<in> PROB \\<and>\n        (v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n         v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a))) \\<or>\n    v = v'", "apply (auto simp: fmdom'_restrict_set_precise)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba.\n       \\<lbrakk>v \\<noteq> v'; (aa, ba) \\<in> PROB; v \\<in> fmdom' aa;\n        v \\<in> vs; v' \\<in> fmdom' ba; v' \\<in> vs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (a, b) \\<in> PROB \\<and>\n                            (v \\<in> fmdom' a \\<and> v' \\<in> fmdom' b \\<or>\n                             v \\<in> fmdom' b \\<and> v' \\<in> fmdom' b)\n 2. \\<And>aa ba.\n       \\<lbrakk>v \\<noteq> v'; (aa, ba) \\<in> PROB; v \\<in> fmdom' ba;\n        v \\<in> vs; v' \\<in> fmdom' ba; v' \\<in> vs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a b.\n                            (a, b) \\<in> PROB \\<and>\n                            (v \\<in> fmdom' a \\<and> v' \\<in> fmdom' b \\<or>\n                             v \\<in> fmdom' b \\<and> v' \\<in> fmdom' b)", "by auto"], ["", "lemma NDEP_PROJ_NDEP:\n  fixes PROB vs vs' vs''\n  assumes \"(\\<not>dep_var_set PROB vs vs')\"\n  shows \"(\\<not>dep_var_set (prob_proj PROB vs'') vs vs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> dep_var_set (prob_proj PROB vs'') vs vs'", "using assms dep_proj_dep"], ["proof (prove)\nusing this:\n  \\<not> dep_var_set PROB vs vs'\n  dep (prob_proj ?PROB ?vs) ?v ?v' \\<Longrightarrow> dep ?PROB ?v ?v'\n\ngoal (1 subgoal):\n 1. \\<not> dep_var_set (prob_proj PROB vs'') vs vs'", "unfolding dep_var_set_def"], ["proof (prove)\nusing this:\n  \\<not> (disjnt vs vs' \\<and>\n          (\\<exists>v1 v2.\n              v1 \\<in> vs \\<and> v2 \\<in> vs' \\<and> dep PROB v1 v2))\n  dep (prob_proj ?PROB ?vs) ?v ?v' \\<Longrightarrow> dep ?PROB ?v ?v'\n\ngoal (1 subgoal):\n 1. \\<not> (disjnt vs vs' \\<and>\n            (\\<exists>v1 v2.\n                v1 \\<in> vs \\<and>\n                v2 \\<in> vs' \\<and> dep (prob_proj PROB vs'') v1 v2))", "by metis"], ["", "lemma SUBSET_PROJ_DOM_DISJ:\n  fixes PROB vs vs'\n  assumes \"(vs \\<subseteq> (prob_dom (prob_proj PROB (prob_dom PROB - vs'))))\"\n  shows \"disjnt vs vs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. disjnt vs vs'", "using assms"], ["proof (prove)\nusing this:\n  vs \\<subseteq> prob_dom (prob_proj PROB (prob_dom PROB - vs'))\n\ngoal (1 subgoal):\n 1. disjnt vs vs'", "by (auto simp add: PROB_DOM_PROJ_DIFF subset_iff disjnt_iff)\n\n\n\\<comment> \\<open>TODO showcase (lemma which is solved effortlessly by automation).\\<close>"], ["", "lemma NOT_VS_DEP_IMP_DEP_PROJ:\n  fixes PROB vs v v'\n  assumes \"\\<not>(v \\<in> vs)\" \"\\<not>(v' \\<in> vs)\" \"(dep PROB v v')\"\n  shows \"(dep (prob_proj PROB (prob_dom PROB - vs)) v v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "using assms"], ["proof (prove)\nusing this:\n  v \\<notin> vs\n  v' \\<notin> vs\n  dep PROB v v'\n\ngoal (1 subgoal):\n 1. dep (prob_proj PROB (prob_dom PROB - vs)) v v'", "by (metis Diff_disjoint Diff_iff disjnt_def insertCI IN_DISJ_DEP_IMP_DEP_DIFF)"], ["", "lemma DISJ_PROJ_NDEP_IMP_NDEP:\n  fixes PROB vs vs' vs''\n  assumes\n    \"(disjnt vs vs'')\" \"disjnt vs vs'\"\n    \"\\<not>(dep_var_set (prob_proj PROB (prob_dom PROB - vs)) vs' vs'')\"\n  shows \"\\<not>(dep_var_set PROB vs' vs'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> dep_var_set PROB vs' vs''", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> dep_var_set PROB vs' vs''", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> dep_var_set PROB vs' vs''", "assume C: \"dep_var_set PROB vs' vs''\""], ["proof (state)\nthis:\n  dep_var_set PROB vs' vs''\n\ngoal (1 subgoal):\n 1. \\<not> dep_var_set PROB vs' vs''", "then"], ["proof (chain)\npicking this:\n  dep_var_set PROB vs' vs''", "obtain v1 v2 where \"v1 \\<in> vs'\" \"v2 \\<in> vs''\" \"disjnt vs' vs''\" \"dep PROB v1 v2\""], ["proof (prove)\nusing this:\n  dep_var_set PROB vs' vs''\n\ngoal (1 subgoal):\n 1. (\\<And>v1 v2.\n        \\<lbrakk>v1 \\<in> vs'; v2 \\<in> vs''; disjnt vs' vs'';\n         dep PROB v1 v2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dep_var_set_def"], ["proof (prove)\nusing this:\n  disjnt vs' vs'' \\<and>\n  (\\<exists>v1 v2. v1 \\<in> vs' \\<and> v2 \\<in> vs'' \\<and> dep PROB v1 v2)\n\ngoal (1 subgoal):\n 1. (\\<And>v1 v2.\n        \\<lbrakk>v1 \\<in> vs'; v2 \\<in> vs''; disjnt vs' vs'';\n         dep PROB v1 v2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v1 \\<in> vs'\n  v2 \\<in> vs''\n  disjnt vs' vs''\n  dep PROB v1 v2\n\ngoal (1 subgoal):\n 1. \\<not> dep_var_set PROB vs' vs''", "then"], ["proof (chain)\npicking this:\n  v1 \\<in> vs'\n  v2 \\<in> vs''\n  disjnt vs' vs''\n  dep PROB v1 v2", "have \"\\<exists>v1 v2.\n      v1 \\<in> vs' \\<and> v2 \\<in> vs'' \\<and> disjnt vs' vs'' \\<and> dep (prob_proj PROB (prob_dom PROB - vs)) v1 v2\n    \""], ["proof (prove)\nusing this:\n  v1 \\<in> vs'\n  v2 \\<in> vs''\n  disjnt vs' vs''\n  dep PROB v1 v2\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2.\n       v1 \\<in> vs' \\<and>\n       v2 \\<in> vs'' \\<and>\n       disjnt vs' vs'' \\<and>\n       dep (prob_proj PROB (prob_dom PROB - vs)) v1 v2", "using assms(1, 2) IntI disjnt_def empty_iff NOT_VS_DEP_IMP_DEP_PROJ"], ["proof (prove)\nusing this:\n  v1 \\<in> vs'\n  v2 \\<in> vs''\n  disjnt vs' vs''\n  dep PROB v1 v2\n  disjnt vs vs''\n  disjnt vs vs'\n  \\<lbrakk>?c \\<in> ?A; ?c \\<in> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?A \\<inter> ?B\n  disjnt ?A ?B = (?A \\<inter> ?B = {})\n  (?c \\<in> {}) = False\n  \\<lbrakk>?v \\<notin> ?vs; ?v' \\<notin> ?vs; dep ?PROB ?v ?v'\\<rbrakk>\n  \\<Longrightarrow> dep (prob_proj ?PROB (prob_dom ?PROB - ?vs)) ?v ?v'\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2.\n       v1 \\<in> vs' \\<and>\n       v2 \\<in> vs'' \\<and>\n       disjnt vs' vs'' \\<and>\n       dep (prob_proj PROB (prob_dom PROB - vs)) v1 v2", "by metis"], ["proof (state)\nthis:\n  \\<exists>v1 v2.\n     v1 \\<in> vs' \\<and>\n     v2 \\<in> vs'' \\<and>\n     disjnt vs' vs'' \\<and> dep (prob_proj PROB (prob_dom PROB - vs)) v1 v2\n\ngoal (1 subgoal):\n 1. \\<not> dep_var_set PROB vs' vs''", "then"], ["proof (chain)\npicking this:\n  \\<exists>v1 v2.\n     v1 \\<in> vs' \\<and>\n     v2 \\<in> vs'' \\<and>\n     disjnt vs' vs'' \\<and> dep (prob_proj PROB (prob_dom PROB - vs)) v1 v2", "have False"], ["proof (prove)\nusing this:\n  \\<exists>v1 v2.\n     v1 \\<in> vs' \\<and>\n     v2 \\<in> vs'' \\<and>\n     disjnt vs' vs'' \\<and> dep (prob_proj PROB (prob_dom PROB - vs)) v1 v2\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>v1 v2.\n     v1 \\<in> vs' \\<and>\n     v2 \\<in> vs'' \\<and>\n     disjnt vs' vs'' \\<and> dep (prob_proj PROB (prob_dom PROB - vs)) v1 v2\n  disjnt vs vs''\n  disjnt vs vs'\n  \\<not> dep_var_set (prob_proj PROB (prob_dom PROB - vs)) vs' vs''\n\ngoal (1 subgoal):\n 1. False", "unfolding dep_var_set_def"], ["proof (prove)\nusing this:\n  \\<exists>v1 v2.\n     v1 \\<in> vs' \\<and>\n     v2 \\<in> vs'' \\<and>\n     disjnt vs' vs'' \\<and> dep (prob_proj PROB (prob_dom PROB - vs)) v1 v2\n  disjnt vs vs''\n  disjnt vs vs'\n  \\<not> (disjnt vs' vs'' \\<and>\n          (\\<exists>v1 v2.\n              v1 \\<in> vs' \\<and>\n              v2 \\<in> vs'' \\<and>\n              dep (prob_proj PROB (prob_dom PROB - vs)) v1 v2))\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> dep_var_set PROB vs' vs''", "}"], ["proof (state)\nthis:\n  dep_var_set PROB vs' vs'' \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> dep_var_set PROB vs' vs''", "then"], ["proof (chain)\npicking this:\n  dep_var_set PROB vs' vs'' \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  dep_var_set PROB vs' vs'' \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> dep_var_set PROB vs' vs''", "using assms"], ["proof (prove)\nusing this:\n  dep_var_set PROB vs' vs'' \\<Longrightarrow> False\n  disjnt vs vs''\n  disjnt vs vs'\n  \\<not> dep_var_set (prob_proj PROB (prob_dom PROB - vs)) vs' vs''\n\ngoal (1 subgoal):\n 1. \\<not> dep_var_set PROB vs' vs''", "unfolding dep_var_set_def"], ["proof (prove)\nusing this:\n  disjnt vs' vs'' \\<and>\n  (\\<exists>v1 v2.\n      v1 \\<in> vs' \\<and>\n      v2 \\<in> vs'' \\<and> dep PROB v1 v2) \\<Longrightarrow>\n  False\n  disjnt vs vs''\n  disjnt vs vs'\n  \\<not> (disjnt vs' vs'' \\<and>\n          (\\<exists>v1 v2.\n              v1 \\<in> vs' \\<and>\n              v2 \\<in> vs'' \\<and>\n              dep (prob_proj PROB (prob_dom PROB - vs)) v1 v2))\n\ngoal (1 subgoal):\n 1. \\<not> (disjnt vs' vs'' \\<and>\n            (\\<exists>v1 v2.\n                v1 \\<in> vs' \\<and> v2 \\<in> vs'' \\<and> dep PROB v1 v2))", "by argo"], ["proof (state)\nthis:\n  \\<not> dep_var_set PROB vs' vs''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma PROJ_DOM_IDEMPOT:\n  fixes PROB\n  shows \"prob_proj PROB (prob_dom PROB) = PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_proj PROB (prob_dom PROB) = PROB", "using action_proj_idempot''"], ["proof (prove)\nusing this:\n  prob_dom ?P \\<subseteq> ?vs \\<Longrightarrow> prob_proj ?P ?vs = ?P\n\ngoal (1 subgoal):\n 1. prob_proj PROB (prob_dom PROB) = PROB", "by blast"], ["", "lemma prob_proj_idempot:\n  fixes vs vs'\n  assumes \"(vs \\<subseteq> vs')\"\n  shows \"(prob_proj PROB vs = prob_proj (prob_proj PROB vs') vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_proj PROB vs = prob_proj (prob_proj PROB vs') vs", "using assms subset_proj_absorb"], ["proof (prove)\nusing this:\n  vs \\<subseteq> vs'\n  ?vs1.0 \\<subseteq> ?vs2.0 \\<Longrightarrow>\n  prob_proj (prob_proj ?PROB ?vs2.0) ?vs1.0 = prob_proj ?PROB ?vs1.0\n\ngoal (1 subgoal):\n 1. prob_proj PROB vs = prob_proj (prob_proj PROB vs') vs", "by blast"], ["", "lemma prob_proj_dom_diff_eq_prob_proj_prob_proj_dom_diff:\n  fixes vs vs'\n  shows \"\n    prob_proj PROB (prob_dom PROB - (vs \\<union> vs'))\n    = prob_proj\n      (prob_proj PROB (prob_dom PROB - vs))\n      (prob_dom (prob_proj PROB (prob_dom PROB - vs)) - vs')\n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_proj PROB (prob_dom PROB - (vs \\<union> vs')) =\n    prob_proj (prob_proj PROB (prob_dom PROB - vs))\n     (prob_dom (prob_proj PROB (prob_dom PROB - vs)) - vs')", "using PROB_DOM_PROJ_DIFF subset_proj_absorb"], ["proof (prove)\nusing this:\n  prob_dom (prob_proj ?PROB (prob_dom ?PROB - ?vs)) = prob_dom ?PROB - ?vs\n  ?vs1.0 \\<subseteq> ?vs2.0 \\<Longrightarrow>\n  prob_proj (prob_proj ?PROB ?vs2.0) ?vs1.0 = prob_proj ?PROB ?vs1.0\n\ngoal (1 subgoal):\n 1. prob_proj PROB (prob_dom PROB - (vs \\<union> vs')) =\n    prob_proj (prob_proj PROB (prob_dom PROB - vs))\n     (prob_dom (prob_proj PROB (prob_dom PROB - vs)) - vs')", "by (metis Compl_Diff_eq Diff_subset compl_eq_compl_iff sup_assoc)"], ["", "lemma PROJ_DEP_IMP_DEP:\n  fixes PROB vs v v'\n  assumes \"dep (prob_proj PROB (prob_dom PROB - vs)) v v'\"\n  shows \"dep PROB v v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dep PROB v v'", "using assms"], ["proof (prove)\nusing this:\n  dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n\ngoal (1 subgoal):\n 1. dep PROB v v'", "unfolding dep_def prob_proj_def"], ["proof (prove)\nusing this:\n  (\\<exists>a.\n      a \\<in> (\\<lambda>a. action_proj a (prob_dom PROB - vs)) ` PROB \\<and>\n      (v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n       v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a))) \\<or>\n  v = v'\n\ngoal (1 subgoal):\n 1. (\\<exists>a.\n        a \\<in> PROB \\<and>\n        (v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n         v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a))) \\<or>\n    v = v'", "proof (cases \"v = v'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<exists>a.\n                 a \\<in> (\\<lambda>a. action_proj a (prob_dom PROB - vs)) `\n                         PROB \\<and>\n                 (v \\<in> fmdom' (fst a) \\<and>\n                  v' \\<in> fmdom' (snd a) \\<or>\n                  v \\<in> fmdom' (snd a) \\<and>\n                  v' \\<in> fmdom' (snd a))) \\<or>\n             v = v';\n     v = v'\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a.\n                          a \\<in> PROB \\<and>\n                          (v \\<in> fmdom' (fst a) \\<and>\n                           v' \\<in> fmdom' (snd a) \\<or>\n                           v \\<in> fmdom' (snd a) \\<and>\n                           v' \\<in> fmdom' (snd a))) \\<or>\n                      v = v'\n 2. \\<lbrakk>(\\<exists>a.\n                 a \\<in> (\\<lambda>a. action_proj a (prob_dom PROB - vs)) `\n                         PROB \\<and>\n                 (v \\<in> fmdom' (fst a) \\<and>\n                  v' \\<in> fmdom' (snd a) \\<or>\n                  v \\<in> fmdom' (snd a) \\<and>\n                  v' \\<in> fmdom' (snd a))) \\<or>\n             v = v';\n     v \\<noteq> v'\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a.\n                          a \\<in> PROB \\<and>\n                          (v \\<in> fmdom' (fst a) \\<and>\n                           v' \\<in> fmdom' (snd a) \\<or>\n                           v \\<in> fmdom' (snd a) \\<and>\n                           v' \\<in> fmdom' (snd a))) \\<or>\n                      v = v'", "case False"], ["proof (state)\nthis:\n  v \\<noteq> v'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<exists>a.\n                 a \\<in> (\\<lambda>a. action_proj a (prob_dom PROB - vs)) `\n                         PROB \\<and>\n                 (v \\<in> fmdom' (fst a) \\<and>\n                  v' \\<in> fmdom' (snd a) \\<or>\n                  v \\<in> fmdom' (snd a) \\<and>\n                  v' \\<in> fmdom' (snd a))) \\<or>\n             v = v';\n     v = v'\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a.\n                          a \\<in> PROB \\<and>\n                          (v \\<in> fmdom' (fst a) \\<and>\n                           v' \\<in> fmdom' (snd a) \\<or>\n                           v \\<in> fmdom' (snd a) \\<and>\n                           v' \\<in> fmdom' (snd a))) \\<or>\n                      v = v'\n 2. \\<lbrakk>(\\<exists>a.\n                 a \\<in> (\\<lambda>a. action_proj a (prob_dom PROB - vs)) `\n                         PROB \\<and>\n                 (v \\<in> fmdom' (fst a) \\<and>\n                  v' \\<in> fmdom' (snd a) \\<or>\n                  v \\<in> fmdom' (snd a) \\<and>\n                  v' \\<in> fmdom' (snd a))) \\<or>\n             v = v';\n     v \\<noteq> v'\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a.\n                          a \\<in> PROB \\<and>\n                          (v \\<in> fmdom' (fst a) \\<and>\n                           v' \\<in> fmdom' (snd a) \\<or>\n                           v \\<in> fmdom' (snd a) \\<and>\n                           v' \\<in> fmdom' (snd a))) \\<or>\n                      v = v'", "then"], ["proof (chain)\npicking this:\n  v \\<noteq> v'", "show \"(\\<exists>a.\n      a \\<in> PROB\n      \\<and> (v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or> v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a)))\n    \\<or> v = v'\""], ["proof (prove)\nusing this:\n  v \\<noteq> v'\n\ngoal (1 subgoal):\n 1. (\\<exists>a.\n        a \\<in> PROB \\<and>\n        (v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n         v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a))) \\<or>\n    v = v'", "using assms"], ["proof (prove)\nusing this:\n  v \\<noteq> v'\n  dep (prob_proj PROB (prob_dom PROB - vs)) v v'\n\ngoal (1 subgoal):\n 1. (\\<exists>a.\n        a \\<in> PROB \\<and>\n        (v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n         v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a))) \\<or>\n    v = v'", "unfolding dep_def prob_proj_def"], ["proof (prove)\nusing this:\n  v \\<noteq> v'\n  (\\<exists>a.\n      a \\<in> (\\<lambda>a. action_proj a (prob_dom PROB - vs)) ` PROB \\<and>\n      (v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n       v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a))) \\<or>\n  v = v'\n\ngoal (1 subgoal):\n 1. (\\<exists>a.\n        a \\<in> PROB \\<and>\n        (v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n         v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a))) \\<or>\n    v = v'", "by (smt image_iff NOT_IN_PRE_EFF_NOT_IN_PRE_EFF_PROJ)"], ["proof (state)\nthis:\n  (\\<exists>a.\n      a \\<in> PROB \\<and>\n      (v \\<in> fmdom' (fst a) \\<and> v' \\<in> fmdom' (snd a) \\<or>\n       v \\<in> fmdom' (snd a) \\<and> v' \\<in> fmdom' (snd a))) \\<or>\n  v = v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<exists>a.\n                 a \\<in> (\\<lambda>a. action_proj a (prob_dom PROB - vs)) `\n                         PROB \\<and>\n                 (v \\<in> fmdom' (fst a) \\<and>\n                  v' \\<in> fmdom' (snd a) \\<or>\n                  v \\<in> fmdom' (snd a) \\<and>\n                  v' \\<in> fmdom' (snd a))) \\<or>\n             v = v';\n     v = v'\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a.\n                          a \\<in> PROB \\<and>\n                          (v \\<in> fmdom' (fst a) \\<and>\n                           v' \\<in> fmdom' (snd a) \\<or>\n                           v \\<in> fmdom' (snd a) \\<and>\n                           v' \\<in> fmdom' (snd a))) \\<or>\n                      v = v'", "qed blast"], ["", "lemma PROJ_NDEP_TC_IMP_NDEP_TC_OR:\n  fixes PROB vs v v'\n  assumes \"\\<not>((\\<lambda>v1' v2'. dep (prob_proj PROB (prob_dom PROB - vs)) v1' v2')\\<^sup>+\\<^sup>+ v v')\"\n  shows \"(\n    (\\<not>((\\<lambda>v1' v2'. dep PROB v1' v2')\\<^sup>+\\<^sup>+ v v'))\n    \\<or> (\\<exists>v''.\n      v'' \\<in> vs\n      \\<and> ((\\<lambda>v1' v2'. dep PROB v1' v2')\\<^sup>+\\<^sup>+ v v'')\n      \\<and> ((\\<lambda>v1' v2'. dep PROB v1' v2')\\<^sup>+\\<^sup>+ v'' v')\n    )\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (dep PROB)\\<^sup>+\\<^sup>+ v v' \\<or>\n    (\\<exists>v''.\n        v'' \\<in> vs \\<and>\n        (dep PROB)\\<^sup>+\\<^sup>+ v v'' \\<and>\n        (dep PROB)\\<^sup>+\\<^sup>+ v'' v')", "using assms NOT_VS_DEP_IMP_DEP_PROJ DEP_REFL REFL_TC_CONJ[of\n      \"\\<lambda>v v'. dep PROB v  v'\" \"\\<lambda>v. \\<not>(v \\<in> vs)\" \"\\<lambda>v v'. dep (prob_proj PROB (prob_dom PROB- vs)) v v'\"\n      v v']"], ["proof (prove)\nusing this:\n  \\<not> (dep (prob_proj PROB (prob_dom PROB - vs)))\\<^sup>+\\<^sup>+ v v'\n  \\<lbrakk>?v \\<notin> ?vs; ?v' \\<notin> ?vs; dep ?PROB ?v ?v'\\<rbrakk>\n  \\<Longrightarrow> dep (prob_proj ?PROB (prob_dom ?PROB - ?vs)) ?v ?v'\n  reflexive (dep ?PROB)\n  \\<lbrakk>reflexive (dep PROB);\n   \\<forall>x y.\n      x \\<notin> vs \\<and> y \\<notin> vs \\<longrightarrow>\n      dep PROB x y \\<longrightarrow>\n      dep (prob_proj PROB (prob_dom PROB - vs)) x y;\n   \\<not> (dep (prob_proj PROB (prob_dom PROB - vs)))\\<^sup>+\\<^sup>+ v\n           v'\\<rbrakk>\n  \\<Longrightarrow> \\<not> (dep PROB)\\<^sup>+\\<^sup>+ v v' \\<or>\n                    (\\<exists>z.\n                        \\<not> z \\<notin> vs \\<and>\n                        (dep PROB)\\<^sup>+\\<^sup>+ v z \\<and>\n                        (dep PROB)\\<^sup>+\\<^sup>+ z v')\n\ngoal (1 subgoal):\n 1. \\<not> (dep PROB)\\<^sup>+\\<^sup>+ v v' \\<or>\n    (\\<exists>v''.\n        v'' \\<in> vs \\<and>\n        (dep PROB)\\<^sup>+\\<^sup>+ v v'' \\<and>\n        (dep PROB)\\<^sup>+\\<^sup>+ v'' v')", "by fastforce"], ["", "lemma every_action_proj_eq_as_proj:\n  fixes as vs\n  shows \"list_all (\\<lambda> a. action_proj a vs = a) (as_proj as vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>a. action_proj a vs = a) (as_proj as vs)", "by (induction as) (auto simp add: action_proj_idempot)"], ["", "lemma empty_eff_not_in_as_proj_2:\n  fixes a as vs\n  assumes \"fmdom' (snd (action_proj a vs)) = {}\"\n  shows \"(as_proj as vs = as_proj (a # as) vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as_proj as vs = as_proj (a # as) vs", "using assms"], ["proof (prove)\nusing this:\n  fmdom' (snd (action_proj a vs)) = {}\n\ngoal (1 subgoal):\n 1. as_proj as vs = as_proj (a # as) vs", "by (auto simp add: action_proj_def)"], ["", "declare[[smt_timeout=100]]"], ["", "lemma sublist_as_proj_eq_as:\n  fixes as' as vs\n  assumes \"subseq as' (as_proj as vs)\"\n  shows \"(as_proj as' vs = as')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as_proj as' vs = as'", "using assms"], ["proof (prove)\nusing this:\n  subseq as' (as_proj as vs)\n\ngoal (1 subgoal):\n 1. as_proj as' vs = as'", "proof (induction as arbitrary: as' vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>as' vs.\n       subseq as' (as_proj [] vs) \\<Longrightarrow> as_proj as' vs = as'\n 2. \\<And>a as as' vs.\n       \\<lbrakk>\\<And>as' vs.\n                   subseq as' (as_proj as vs) \\<Longrightarrow>\n                   as_proj as' vs = as';\n        subseq as' (as_proj (a # as) vs)\\<rbrakk>\n       \\<Longrightarrow> as_proj as' vs = as'", "case Nil"], ["proof (state)\nthis:\n  subseq as' (as_proj [] vs)\n\ngoal (2 subgoals):\n 1. \\<And>as' vs.\n       subseq as' (as_proj [] vs) \\<Longrightarrow> as_proj as' vs = as'\n 2. \\<And>a as as' vs.\n       \\<lbrakk>\\<And>as' vs.\n                   subseq as' (as_proj as vs) \\<Longrightarrow>\n                   as_proj as' vs = as';\n        subseq as' (as_proj (a # as) vs)\\<rbrakk>\n       \\<Longrightarrow> as_proj as' vs = as'", "moreover"], ["proof (state)\nthis:\n  subseq as' (as_proj [] vs)\n\ngoal (2 subgoals):\n 1. \\<And>as' vs.\n       subseq as' (as_proj [] vs) \\<Longrightarrow> as_proj as' vs = as'\n 2. \\<And>a as as' vs.\n       \\<lbrakk>\\<And>as' vs.\n                   subseq as' (as_proj as vs) \\<Longrightarrow>\n                   as_proj as' vs = as';\n        subseq as' (as_proj (a # as) vs)\\<rbrakk>\n       \\<Longrightarrow> as_proj as' vs = as'", "have \"as' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as' = []", "using Nil.prems sublist_NIL"], ["proof (prove)\nusing this:\n  subseq as' (as_proj [] vs)\n  subseq ?l1.0 [] = (?l1.0 = [])\n\ngoal (1 subgoal):\n 1. as' = []", "by force"], ["proof (state)\nthis:\n  as' = []\n\ngoal (2 subgoals):\n 1. \\<And>as' vs.\n       subseq as' (as_proj [] vs) \\<Longrightarrow> as_proj as' vs = as'\n 2. \\<And>a as as' vs.\n       \\<lbrakk>\\<And>as' vs.\n                   subseq as' (as_proj as vs) \\<Longrightarrow>\n                   as_proj as' vs = as';\n        subseq as' (as_proj (a # as) vs)\\<rbrakk>\n       \\<Longrightarrow> as_proj as' vs = as'", "then"], ["proof (chain)\npicking this:\n  as' = []", "show ?case"], ["proof (prove)\nusing this:\n  as' = []\n\ngoal (1 subgoal):\n 1. as_proj as' vs = as'", "by simp"], ["proof (state)\nthis:\n  as_proj as' vs = as'\n\ngoal (1 subgoal):\n 1. \\<And>a as as' vs.\n       \\<lbrakk>\\<And>as' vs.\n                   subseq as' (as_proj as vs) \\<Longrightarrow>\n                   as_proj as' vs = as';\n        subseq as' (as_proj (a # as) vs)\\<rbrakk>\n       \\<Longrightarrow> as_proj as' vs = as'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as as' vs.\n       \\<lbrakk>\\<And>as' vs.\n                   subseq as' (as_proj as vs) \\<Longrightarrow>\n                   as_proj as' vs = as';\n        subseq as' (as_proj (a # as) vs)\\<rbrakk>\n       \\<Longrightarrow> as_proj as' vs = as'", "case cons: (Cons a as)"], ["proof (state)\nthis:\n  subseq ?as' (as_proj as ?vs) \\<Longrightarrow> as_proj ?as' ?vs = ?as'\n  subseq as' (as_proj (a # as) vs)\n\ngoal (1 subgoal):\n 1. \\<And>a as as' vs.\n       \\<lbrakk>\\<And>as' vs.\n                   subseq as' (as_proj as vs) \\<Longrightarrow>\n                   as_proj as' vs = as';\n        subseq as' (as_proj (a # as) vs)\\<rbrakk>\n       \\<Longrightarrow> as_proj as' vs = as'", "then"], ["proof (chain)\npicking this:\n  subseq ?as' (as_proj as ?vs) \\<Longrightarrow> as_proj ?as' ?vs = ?as'\n  subseq as' (as_proj (a # as) vs)", "show ?case"], ["proof (prove)\nusing this:\n  subseq ?as' (as_proj as ?vs) \\<Longrightarrow> as_proj ?as' ?vs = ?as'\n  subseq as' (as_proj (a # as) vs)\n\ngoal (1 subgoal):\n 1. as_proj as' vs = as'", "proof (cases \"as'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>as' vs.\n                subseq as' (as_proj as vs) \\<Longrightarrow>\n                as_proj as' vs = as';\n     subseq as' (as_proj (a # as) vs); as' = []\\<rbrakk>\n    \\<Longrightarrow> as_proj as' vs = as'\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>as' vs.\n                   subseq as' (as_proj as vs) \\<Longrightarrow>\n                   as_proj as' vs = as';\n        subseq as' (as_proj (a # as) vs); as' = aa # list\\<rbrakk>\n       \\<Longrightarrow> as_proj as' vs = as'", "case (Cons aa list)"], ["proof (state)\nthis:\n  as' = aa # list\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>as' vs.\n                subseq as' (as_proj as vs) \\<Longrightarrow>\n                as_proj as' vs = as';\n     subseq as' (as_proj (a # as) vs); as' = []\\<rbrakk>\n    \\<Longrightarrow> as_proj as' vs = as'\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>as' vs.\n                   subseq as' (as_proj as vs) \\<Longrightarrow>\n                   as_proj as' vs = as';\n        subseq as' (as_proj (a # as) vs); as' = aa # list\\<rbrakk>\n       \\<Longrightarrow> as_proj as' vs = as'", "then"], ["proof (chain)\npicking this:\n  as' = aa # list", "show ?thesis"], ["proof (prove)\nusing this:\n  as' = aa # list\n\ngoal (1 subgoal):\n 1. as_proj as' vs = as'", "proof (cases \"fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>as' = aa # list;\n     fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj as' vs = as'\n 2. \\<lbrakk>as' = aa # list;\n     \\<not> fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj as' vs = as'", "case True"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>as' = aa # list;\n     fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj as' vs = as'\n 2. \\<lbrakk>as' = aa # list;\n     \\<not> fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj as' vs = as'", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}", "have \"as_proj as' vs = action_proj aa vs # as_proj list vs\""], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. as_proj as' vs = action_proj aa vs # as_proj list vs", "using Cons True"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\n  as' = aa # list\n  fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. as_proj as' vs = action_proj aa vs # as_proj list vs", "by auto"], ["proof (state)\nthis:\n  as_proj as' vs = action_proj aa vs # as_proj list vs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>as' = aa # list;\n     fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj as' vs = as'\n 2. \\<lbrakk>as' = aa # list;\n     \\<not> fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj as' vs = as'", "then"], ["proof (chain)\npicking this:\n  as_proj as' vs = action_proj aa vs # as_proj list vs", "show ?thesis"], ["proof (prove)\nusing this:\n  as_proj as' vs = action_proj aa vs # as_proj list vs\n\ngoal (1 subgoal):\n 1. as_proj as' vs = as'", "by (metis as_proj.simps(2) cons.IH cons.prems action_proj_idempot local.Cons\n            subseq_Cons2_iff)"], ["proof (state)\nthis:\n  as_proj as' vs = as'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>as' = aa # list;\n     \\<not> fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj as' vs = as'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>as' = aa # list;\n     \\<not> fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj as' vs = as'", "case False"], ["proof (state)\nthis:\n  \\<not> fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>as' = aa # list;\n     \\<not> fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj as' vs = as'", "then"], ["proof (chain)\npicking this:\n  \\<not> fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}", "have \"as_proj as' vs = as_proj list vs\""], ["proof (prove)\nusing this:\n  \\<not> fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. as_proj as' vs = as_proj list vs", "using Cons False"], ["proof (prove)\nusing this:\n  \\<not> fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\n  as' = aa # list\n  \\<not> fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. as_proj as' vs = as_proj list vs", "by simp"], ["proof (state)\nthis:\n  as_proj as' vs = as_proj list vs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>as' = aa # list;\n     \\<not> fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> as_proj as' vs = as'", "then"], ["proof (chain)\npicking this:\n  as_proj as' vs = as_proj list vs", "show ?thesis"], ["proof (prove)\nusing this:\n  as_proj as' vs = as_proj list vs\n\ngoal (1 subgoal):\n 1. as_proj as' vs = as'", "using cons False"], ["proof (prove)\nusing this:\n  as_proj as' vs = as_proj list vs\n  subseq ?as' (as_proj as ?vs) \\<Longrightarrow> as_proj ?as' ?vs = ?as'\n  subseq as' (as_proj (a # as) vs)\n  \\<not> fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. as_proj as' vs = as'", "unfolding Cons"], ["proof (prove)\nusing this:\n  as_proj (aa # list) vs = as_proj list vs\n  subseq ?as' (as_proj as ?vs) \\<Longrightarrow> as_proj ?as' ?vs = ?as'\n  subseq (aa # list) (as_proj (a # as) vs)\n  \\<not> fmdom' (fmrestrict_set vs (snd aa)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. as_proj (aa # list) vs = aa # list", "by (smt action_proj_def action_proj_idempot as_proj.simps(2) prod.inject subseq_Cons2_neq)"], ["proof (state)\nthis:\n  as_proj as' vs = as'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  as_proj as' vs = as'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>as' vs.\n                subseq as' (as_proj as vs) \\<Longrightarrow>\n                as_proj as' vs = as';\n     subseq as' (as_proj (a # as) vs); as' = []\\<rbrakk>\n    \\<Longrightarrow> as_proj as' vs = as'", "qed simp"], ["proof (state)\nthis:\n  as_proj as' vs = as'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DISJ_EFF_DISJ_PROJ_EFF:\n  fixes a s vs\n  assumes \"fmdom' (snd a) \\<inter> s = {}\"\n  shows \"(fmdom' (snd (action_proj a vs)) \\<inter> s = {})\n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<inter> s = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<inter> s = {}", "have 1: \"snd (action_proj a vs) = fmrestrict_set vs (snd a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (action_proj a vs) = fmrestrict_set vs (snd a)", "unfolding action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (fmrestrict_set vs (fst a), fmrestrict_set vs (snd a)) =\n    fmrestrict_set vs (snd a)", "by simp"], ["proof (state)\nthis:\n  snd (action_proj a vs) = fmrestrict_set vs (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<inter> s = {}", "then"], ["proof (chain)\npicking this:\n  snd (action_proj a vs) = fmrestrict_set vs (snd a)", "have \"fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)\""], ["proof (prove)\nusing this:\n  snd (action_proj a vs) = fmrestrict_set vs (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)", "using act_dom_proj_eff_subset_act_dom_eff"], ["proof (prove)\nusing this:\n  snd (action_proj a vs) = fmrestrict_set vs (snd a)\n  fmdom' (snd (action_proj ?a ?vs)) \\<subseteq> fmdom' (snd ?a)\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)", "by metis"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<inter> s = {}", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<inter> s = {}", "using assms 1"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) \\<subseteq> fmdom' (snd a)\n  fmdom' (snd a) \\<inter> s = {}\n  snd (action_proj a vs) = fmrestrict_set vs (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<inter> s = {}", "by auto"], ["proof (state)\nthis:\n  fmdom' (snd (action_proj a vs)) \\<inter> s = {}\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE showcase (the step using `graph\\_plan\\_lemma\\_5`--- labelled by '[1]'--- is non-trivial proof\ndue to missing premises and the last six proof steps are redundant).\\<close>"], ["", "lemma state_succ_proj_eq_state_succ:\n  fixes a s vs\n  assumes \"(varset_action a vs)\" \"(fst a \\<subseteq>\\<^sub>f s)\" \"(fmdom' (snd a) \\<subseteq> fmdom' s)\"\n  shows \"(state_succ s (action_proj a vs) = state_succ s a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s (action_proj a vs) = state_succ s a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. state_succ s (action_proj a vs) = state_succ s a", "have 1: \"fmdom' (snd a) \\<inter> (fmdom' s - vs) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (fmdom' s - vs) = {}", "using assms(1) vset_disj_eff_diff"], ["proof (prove)\nusing this:\n  varset_action a vs\n  varset_action ?a ?vs \\<Longrightarrow>\n  fmdom' (snd ?a) \\<inter> (?s - ?vs) = {}\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (fmdom' s - vs) = {}", "by blast"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> (fmdom' s - vs) = {}\n\ngoal (1 subgoal):\n 1. state_succ s (action_proj a vs) = state_succ s a", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<inter> (fmdom' s - vs) = {}", "have  2:\n    \"fmrestrict_set (fmdom' s - vs) s = fmrestrict_set (fmdom' s - vs) (state_succ s a)\""], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<inter> (fmdom' s - vs) = {}\n\ngoal (1 subgoal):\n 1. fmrestrict_set (fmdom' s - vs) s =\n    fmrestrict_set (fmdom' s - vs) (state_succ s a)", "using disj_imp_eq_proj_exec[where vs = \"fmdom' s - vs\"]"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<inter> (fmdom' s - vs) = {}\n  fmdom' (snd ?a) \\<inter> (fmdom' s - vs) = {} \\<Longrightarrow>\n  fmrestrict_set (fmdom' s - vs) ?s =\n  fmrestrict_set (fmdom' s - vs) (state_succ ?s ?a)\n\ngoal (1 subgoal):\n 1. fmrestrict_set (fmdom' s - vs) s =\n    fmrestrict_set (fmdom' s - vs) (state_succ s a)", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set (fmdom' s - vs) s =\n  fmrestrict_set (fmdom' s - vs) (state_succ s a)\n\ngoal (1 subgoal):\n 1. state_succ s (action_proj a vs) = state_succ s a", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set (fmdom' s - vs) s =\n  fmrestrict_set (fmdom' s - vs) (state_succ s a)", "have \"fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) = {}\""], ["proof (prove)\nusing this:\n  fmrestrict_set (fmdom' s - vs) s =\n  fmrestrict_set (fmdom' s - vs) (state_succ s a)\n\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) = {}", "using 1 DISJ_EFF_DISJ_PROJ_EFF[where s = \"(fmdom' s - vs)\"]"], ["proof (prove)\nusing this:\n  fmrestrict_set (fmdom' s - vs) s =\n  fmrestrict_set (fmdom' s - vs) (state_succ s a)\n  fmdom' (snd a) \\<inter> (fmdom' s - vs) = {}\n  fmdom' (snd ?a) \\<inter> (fmdom' s - vs) = {} \\<Longrightarrow>\n  fmdom' (snd (action_proj ?a ?vs)) \\<inter> (fmdom' s - vs) = {}\n\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) = {}", "by blast"], ["proof (state)\nthis:\n  fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) = {}\n\ngoal (1 subgoal):\n 1. state_succ s (action_proj a vs) = state_succ s a", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) = {}", "have \"\n    fmrestrict_set (fmdom' s - vs) s\n    = fmrestrict_set (fmdom' s - vs) (state_succ s (action_proj a vs))\n  \""], ["proof (prove)\nusing this:\n  fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) = {}\n\ngoal (1 subgoal):\n 1. fmrestrict_set (fmdom' s - vs) s =\n    fmrestrict_set (fmdom' s - vs) (state_succ s (action_proj a vs))", "using disj_imp_eq_proj_exec[where a = \"(action_proj a vs)\" and vs = \"fmdom' s - vs\"]"], ["proof (prove)\nusing this:\n  fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) = {}\n  fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) =\n  {} \\<Longrightarrow>\n  fmrestrict_set (fmdom' s - vs) ?s =\n  fmrestrict_set (fmdom' s - vs) (state_succ ?s (action_proj a vs))\n\ngoal (1 subgoal):\n 1. fmrestrict_set (fmdom' s - vs) s =\n    fmrestrict_set (fmdom' s - vs) (state_succ s (action_proj a vs))", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set (fmdom' s - vs) s =\n  fmrestrict_set (fmdom' s - vs) (state_succ s (action_proj a vs))\n\ngoal (1 subgoal):\n 1. state_succ s (action_proj a vs) = state_succ s a", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set (fmdom' s - vs) s =\n  fmrestrict_set (fmdom' s - vs) (state_succ s (action_proj a vs))", "have \"fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) = {}\""], ["proof (prove)\nusing this:\n  fmrestrict_set (fmdom' s - vs) s =\n  fmrestrict_set (fmdom' s - vs) (state_succ s (action_proj a vs))\n\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) = {}", "using 1 DISJ_EFF_DISJ_PROJ_EFF[where s = \"(fmdom' s - vs)\"]"], ["proof (prove)\nusing this:\n  fmrestrict_set (fmdom' s - vs) s =\n  fmrestrict_set (fmdom' s - vs) (state_succ s (action_proj a vs))\n  fmdom' (snd a) \\<inter> (fmdom' s - vs) = {}\n  fmdom' (snd ?a) \\<inter> (fmdom' s - vs) = {} \\<Longrightarrow>\n  fmdom' (snd (action_proj ?a ?vs)) \\<inter> (fmdom' s - vs) = {}\n\ngoal (1 subgoal):\n 1. fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) = {}", "by blast"], ["proof (state)\nthis:\n  fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) = {}\n\ngoal (1 subgoal):\n 1. state_succ s (action_proj a vs) = state_succ s a", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) = {}", "have \"\n    fmrestrict_set (fmdom' s - vs) s =\n    fmrestrict_set (fmdom' s - vs) (state_succ s (action_proj a vs))\n  \""], ["proof (prove)\nusing this:\n  fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) = {}\n\ngoal (1 subgoal):\n 1. fmrestrict_set (fmdom' s - vs) s =\n    fmrestrict_set (fmdom' s - vs) (state_succ s (action_proj a vs))", "using disj_imp_eq_proj_exec[of \"action_proj a vs\" \"fmdom' s - vs\"]"], ["proof (prove)\nusing this:\n  fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) = {}\n  fmdom' (snd (action_proj a vs)) \\<inter> (fmdom' s - vs) =\n  {} \\<Longrightarrow>\n  fmrestrict_set (fmdom' s - vs) ?s =\n  fmrestrict_set (fmdom' s - vs) (state_succ ?s (action_proj a vs))\n\ngoal (1 subgoal):\n 1. fmrestrict_set (fmdom' s - vs) s =\n    fmrestrict_set (fmdom' s - vs) (state_succ s (action_proj a vs))", "by fast\n      \\<comment> \\<open>[1]\\<close>\n      \\<comment> \\<open>TODO unwrap this step.\\<close>"], ["proof (state)\nthis:\n  fmrestrict_set (fmdom' s - vs) s =\n  fmrestrict_set (fmdom' s - vs) (state_succ s (action_proj a vs))\n\ngoal (1 subgoal):\n 1. state_succ s (action_proj a vs) = state_succ s a", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set (fmdom' s - vs) s =\n  fmrestrict_set (fmdom' s - vs) (state_succ s (action_proj a vs))", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set (fmdom' s - vs) s =\n  fmrestrict_set (fmdom' s - vs) (state_succ s (action_proj a vs))\n\ngoal (1 subgoal):\n 1. state_succ s (action_proj a vs) = state_succ s a", "using 2 FDOM_state_succ graph_plan_lemma_5[where s = \"state_succ s (action_proj a vs)\"\n        and s' = \"state_succ s a\" and vs = vs] assms(2, 3) dom_eff_subset_imp_dom_succ_eq_proj\n      drest_proj_succ_eq_drest_succ"], ["proof (prove)\nusing this:\n  fmrestrict_set (fmdom' s - vs) s =\n  fmrestrict_set (fmdom' s - vs) (state_succ s (action_proj a vs))\n  fmrestrict_set (fmdom' s - vs) s =\n  fmrestrict_set (fmdom' s - vs) (state_succ s a)\n  fmdom' (snd ?a) \\<subseteq> fmdom' ?s \\<Longrightarrow>\n  fmdom' (state_succ ?s ?a) = fmdom' ?s\n  \\<lbrakk>fmrestrict_set (fmdom' (state_succ s (action_proj a vs)) - vs)\n            (state_succ s (action_proj a vs)) =\n           fmrestrict_set (fmdom' (state_succ s a) - vs) (state_succ s a);\n   fmrestrict_set vs (state_succ s (action_proj a vs)) =\n   fmrestrict_set vs (state_succ s a)\\<rbrakk>\n  \\<Longrightarrow> state_succ s (action_proj a vs) = state_succ s a\n  fst a \\<subseteq>\\<^sub>f s\n  fmdom' (snd a) \\<subseteq> fmdom' s\n  fmdom' (snd ?h) \\<subseteq> fmdom' ?s \\<Longrightarrow>\n  fmdom' (state_succ ?s (action_proj ?h ?vs)) = fmdom' (state_succ ?s ?h)\n  \\<lbrakk>fst ?h \\<subseteq>\\<^sub>f ?s;\n   fmdom' (snd ?h) \\<subseteq> fmdom' ?s\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs\n                     (state_succ ?s (action_proj ?h ?vs)) =\n                    fmrestrict_set ?vs (state_succ ?s ?h)\n\ngoal (1 subgoal):\n 1. state_succ s (action_proj a vs) = state_succ s a", "by metis"], ["proof (state)\nthis:\n  state_succ s (action_proj a vs) = state_succ s a\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE duplicate declaration of lemma `state\\_succ\\_proj\\_eq\\_state\\_succ` removed.\\<close>"], ["", "lemma no_effectless_proj:\n  fixes vs as\n  shows \"no_effectless_act (as_proj as vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_effectless_act (as_proj as vs)", "by (induction as arbitrary: vs) (auto simp add: action_proj_def)\n\n\n\\<comment> \\<open>NOTE duplicate (this is identical to `valid\\_as\\_valid\\_as\\_proj`).\\<close>"], ["", "lemma as_proj_valid_in_prob_proj:\n  fixes PROB vs as\n  assumes \"(as \\<in> valid_plans PROB)\"\n  shows \"(as_proj as vs \\<in> valid_plans (prob_proj PROB vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as_proj as vs \\<in> valid_plans (prob_proj PROB vs)", "using assms valid_as_valid_as_proj"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  as_proj ?as ?vs \\<in> valid_plans (prob_proj ?PROB ?vs)\n\ngoal (1 subgoal):\n 1. as_proj as vs \\<in> valid_plans (prob_proj PROB vs)", "by blast\n\n\n\\<comment> \\<open>TODO Unwrap the smt proof.\\<close>"], ["", "lemma prob_proj_comm:\n  fixes PROB vs vs'\n  shows \"prob_proj (prob_proj PROB vs) vs' = prob_proj (prob_proj PROB vs') vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs) vs' = prob_proj (prob_proj PROB vs') vs", "by (smt graph_plan_neq_mems_state_set_neq_len inf_commute inf_le2 PROJ_DOM_IDEMPOT prob_proj_idempot)\n\n\n\\<comment> \\<open>TODO Unwrap the metis proof.\\<close>"], ["", "lemma vset_proj_imp_vset:\n  fixes vs vs' a\n  assumes \"(varset_action a vs')\" \"(varset_action (action_proj a vs') vs)\"\n  shows \"(varset_action a vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. varset_action a vs", "unfolding varset_action_def action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> vs", "using assms"], ["proof (prove)\nusing this:\n  varset_action a vs'\n  varset_action (action_proj a vs') vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> vs", "by (metis action_proj_def exec_drest_5 snd_conv varset_action_def)"], ["", "lemma  vset_imp_vset_act_proj_diff:\n  fixes PROB vs vs' a\n  assumes \"(varset_action a vs)\"\n  shows \"(varset_action (action_proj a (prob_dom PROB - vs')) vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. varset_action (action_proj a (prob_dom PROB - vs')) vs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. varset_action (action_proj a (prob_dom PROB - vs')) vs", "have 1: \"(fmdom' (snd a) \\<subseteq> vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> vs", "using assms varset_action_def"], ["proof (prove)\nusing this:\n  varset_action a vs\n  varset_action ?a ?varset \\<equiv> fmdom' (snd ?a) \\<subseteq> ?varset\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> vs", "by metis"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. varset_action (action_proj a (prob_dom PROB - vs')) vs", "moreover"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. varset_action (action_proj a (prob_dom PROB - vs')) vs", "{\n    \\<comment> \\<open>TODO refactor and put into `Fmap\\_Utils`.\\<close>"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. varset_action (action_proj a (prob_dom PROB - vs')) vs", "have \"\n      fmdom' (snd (\n        fmrestrict_set (prob_dom PROB - vs') (fst a)\n        , fmrestrict_set (prob_dom PROB - vs') (snd a)\n      ))\n      = (fmdom' (snd a) \\<inter> (prob_dom PROB - vs'))\n    \""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom'\n     (snd (fmrestrict_set (prob_dom PROB - vs') (fst a),\n           fmrestrict_set (prob_dom PROB - vs') (snd a))) =\n    fmdom' (snd a) \\<inter> (prob_dom PROB - vs')", "by (simp add: Int_def Set.filter_def fmfilter_alt_defs(4))"], ["proof (state)\nthis:\n  fmdom'\n   (snd (fmrestrict_set (prob_dom PROB - vs') (fst a),\n         fmrestrict_set (prob_dom PROB - vs') (snd a))) =\n  fmdom' (snd a) \\<inter> (prob_dom PROB - vs')\n\ngoal (1 subgoal):\n 1. varset_action (action_proj a (prob_dom PROB - vs')) vs", "also"], ["proof (state)\nthis:\n  fmdom'\n   (snd (fmrestrict_set (prob_dom PROB - vs') (fst a),\n         fmrestrict_set (prob_dom PROB - vs') (snd a))) =\n  fmdom' (snd a) \\<inter> (prob_dom PROB - vs')\n\ngoal (1 subgoal):\n 1. varset_action (action_proj a (prob_dom PROB - vs')) vs", "have \"\\<dots> \\<subseteq> fmdom' (snd a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<inter> (prob_dom PROB - vs') \\<subseteq> fmdom' (snd a)", "by simp"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<inter> (prob_dom PROB - vs') \\<subseteq> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. varset_action (action_proj a (prob_dom PROB - vs')) vs", "finally"], ["proof (chain)\npicking this:\n  fmdom'\n   (snd (fmrestrict_set (prob_dom PROB - vs') (fst a),\n         fmrestrict_set (prob_dom PROB - vs') (snd a)))\n  \\<subseteq> fmdom' (snd a)", "have \"fmdom' (snd (\n        fmrestrict_set (prob_dom PROB - vs') (fst a)\n        , fmrestrict_set (prob_dom PROB - vs') (snd a)\n      ))\n      \\<subseteq> vs\n    \""], ["proof (prove)\nusing this:\n  fmdom'\n   (snd (fmrestrict_set (prob_dom PROB - vs') (fst a),\n         fmrestrict_set (prob_dom PROB - vs') (snd a)))\n  \\<subseteq> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmdom'\n     (snd (fmrestrict_set (prob_dom PROB - vs') (fst a),\n           fmrestrict_set (prob_dom PROB - vs') (snd a)))\n    \\<subseteq> vs", "using 1"], ["proof (prove)\nusing this:\n  fmdom'\n   (snd (fmrestrict_set (prob_dom PROB - vs') (fst a),\n         fmrestrict_set (prob_dom PROB - vs') (snd a)))\n  \\<subseteq> fmdom' (snd a)\n  fmdom' (snd a) \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmdom'\n     (snd (fmrestrict_set (prob_dom PROB - vs') (fst a),\n           fmrestrict_set (prob_dom PROB - vs') (snd a)))\n    \\<subseteq> vs", "by simp"], ["proof (state)\nthis:\n  fmdom'\n   (snd (fmrestrict_set (prob_dom PROB - vs') (fst a),\n         fmrestrict_set (prob_dom PROB - vs') (snd a)))\n  \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. varset_action (action_proj a (prob_dom PROB - vs')) vs", "}"], ["proof (state)\nthis:\n  fmdom'\n   (snd (fmrestrict_set (prob_dom PROB - vs') (fst a),\n         fmrestrict_set (prob_dom PROB - vs') (snd a)))\n  \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. varset_action (action_proj a (prob_dom PROB - vs')) vs", "ultimately"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<subseteq> vs\n  fmdom'\n   (snd (fmrestrict_set (prob_dom PROB - vs') (fst a),\n         fmrestrict_set (prob_dom PROB - vs') (snd a)))\n  \\<subseteq> vs", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> vs\n  fmdom'\n   (snd (fmrestrict_set (prob_dom PROB - vs') (fst a),\n         fmrestrict_set (prob_dom PROB - vs') (snd a)))\n  \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. varset_action (action_proj a (prob_dom PROB - vs')) vs", "unfolding varset_action_def dep_var_set_def dep_def action_proj_def"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> vs\n  fmdom'\n   (snd (fmrestrict_set (prob_dom PROB - vs') (fst a),\n         fmrestrict_set (prob_dom PROB - vs') (snd a)))\n  \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmdom'\n     (snd (fmrestrict_set (prob_dom PROB - vs') (fst a),\n           fmrestrict_set (prob_dom PROB - vs') (snd a)))\n    \\<subseteq> vs", "by blast"], ["proof (state)\nthis:\n  varset_action (action_proj a (prob_dom PROB - vs')) vs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma action_proj_disj_diff:\n  assumes \"(action_dom (fst a) (snd a) \\<subseteq> vs1)\" \"(vs2 \\<inter> vs3 = {})\"\n  shows \"(action_proj (action_proj a (vs1 - vs2)) vs3 = action_proj a vs3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_proj (action_proj a (vs1 - vs2)) vs3 = action_proj a vs3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. action_proj (action_proj a (vs1 - vs2)) vs3 = action_proj a vs3", "have \"\\<forall>f fa fb p.\n    action_proj (action_proj (action_proj p f) fb) fa = action_proj (action_proj p f) fb\n    \\<or> \\<not> action_dom (fst p::('a, 'b) fmap) (snd p::(_, 'c) fmap) \\<inter> (f \\<inter> fb) \\<subseteq> fa\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f fa fb p.\n       action_proj (action_proj (action_proj p f) fb) fa =\n       action_proj (action_proj p f) fb \\<or>\n       \\<not> action_dom (fst p) (snd p) \\<inter> (f \\<inter> fb)\n              \\<subseteq> fa", "by (metis (no_types) action_proj_idempot' proj_action_dom_eq_inter inf_assoc)"], ["proof (state)\nthis:\n  \\<forall>f fa fb p.\n     action_proj (action_proj (action_proj p f) fb) fa =\n     action_proj (action_proj p f) fb \\<or>\n     \\<not> action_dom (fst p) (snd p) \\<inter> (f \\<inter> fb)\n            \\<subseteq> fa\n\ngoal (1 subgoal):\n 1. action_proj (action_proj a (vs1 - vs2)) vs3 = action_proj a vs3", "then"], ["proof (chain)\npicking this:\n  \\<forall>f fa fb p.\n     action_proj (action_proj (action_proj p f) fb) fa =\n     action_proj (action_proj p f) fb \\<or>\n     \\<not> action_dom (fst p) (snd p) \\<inter> (f \\<inter> fb)\n            \\<subseteq> fa", "have \"\\<forall>f fa p.\n    action_proj (action_proj (p::('a, 'b) fmap \\<times> (_, 'c) fmap) f) fa\n    = action_proj p (f \\<inter> fa)\n  \""], ["proof (prove)\nusing this:\n  \\<forall>f fa fb p.\n     action_proj (action_proj (action_proj p f) fb) fa =\n     action_proj (action_proj p f) fb \\<or>\n     \\<not> action_dom (fst p) (snd p) \\<inter> (f \\<inter> fb)\n            \\<subseteq> fa\n\ngoal (1 subgoal):\n 1. \\<forall>f fa p.\n       action_proj (action_proj p f) fa = action_proj p (f \\<inter> fa)", "by (metis (no_types) inf.cobounded2 inf_commute subset_proj_absorb_1)"], ["proof (state)\nthis:\n  \\<forall>f fa p.\n     action_proj (action_proj p f) fa = action_proj p (f \\<inter> fa)\n\ngoal (1 subgoal):\n 1. action_proj (action_proj a (vs1 - vs2)) vs3 = action_proj a vs3", "then"], ["proof (chain)\npicking this:\n  \\<forall>f fa p.\n     action_proj (action_proj p f) fa = action_proj p (f \\<inter> fa)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>f fa p.\n     action_proj (action_proj p f) fa = action_proj p (f \\<inter> fa)\n\ngoal (1 subgoal):\n 1. action_proj (action_proj a (vs1 - vs2)) vs3 = action_proj a vs3", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>f fa p.\n     action_proj (action_proj p f) fa = action_proj p (f \\<inter> fa)\n  action_dom (fst a) (snd a) \\<subseteq> vs1\n  vs2 \\<inter> vs3 = {}\n\ngoal (1 subgoal):\n 1. action_proj (action_proj a (vs1 - vs2)) vs3 = action_proj a vs3", "by (metis Diff_Int_distrib2 Diff_empty action_proj_idempot')"], ["proof (state)\nthis:\n  action_proj (action_proj a (vs1 - vs2)) vs3 = action_proj a vs3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma disj_proj_proj_eq_proj:\n  fixes PROB vs vs'\n  assumes \"(vs \\<inter> vs' = {})\"\n  shows \"prob_proj (prob_proj PROB (prob_dom PROB - vs')) vs = prob_proj PROB vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB (prob_dom PROB - vs')) vs = prob_proj PROB vs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB (prob_dom PROB - vs')) vs = prob_proj PROB vs", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB (prob_dom PROB - vs')) vs = prob_proj PROB vs", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB (prob_dom PROB - vs')) vs = prob_proj PROB vs", "assume P: \"a \\<in> PROB\""], ["proof (state)\nthis:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB (prob_dom PROB - vs')) vs = prob_proj PROB vs", "moreover"], ["proof (state)\nthis:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB (prob_dom PROB - vs')) vs = prob_proj PROB vs", "have \"action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB", "using P exec_as_proj_valid_2"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  action_dom (fst ?a) (snd ?a) \\<subseteq> prob_dom ?PROB\n\ngoal (1 subgoal):\n 1. action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB", "by blast"], ["proof (state)\nthis:\n  action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB (prob_dom PROB - vs')) vs = prob_proj PROB vs", "ultimately"], ["proof (chain)\npicking this:\n  a \\<in> PROB\n  action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB", "have \"action_proj (action_proj a (prob_dom PROB - vs')) vs = action_proj a vs\""], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. action_proj (action_proj a (prob_dom PROB - vs')) vs = action_proj a vs", "using assms action_proj_disj_diff[of a \"prob_dom PROB\" vs' vs]"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB\n  vs \\<inter> vs' = {}\n  \\<lbrakk>action_dom (fst a) (snd a) \\<subseteq> prob_dom PROB;\n   vs' \\<inter> vs = {}\\<rbrakk>\n  \\<Longrightarrow> action_proj (action_proj a (prob_dom PROB - vs')) vs =\n                    action_proj a vs\n\ngoal (1 subgoal):\n 1. action_proj (action_proj a (prob_dom PROB - vs')) vs = action_proj a vs", "by blast"], ["proof (state)\nthis:\n  action_proj (action_proj a (prob_dom PROB - vs')) vs = action_proj a vs\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB (prob_dom PROB - vs')) vs = prob_proj PROB vs", "}"], ["proof (state)\nthis:\n  ?a2 \\<in> PROB \\<Longrightarrow>\n  action_proj (action_proj ?a2 (prob_dom PROB - vs')) vs =\n  action_proj ?a2 vs\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB (prob_dom PROB - vs')) vs = prob_proj PROB vs", "then"], ["proof (chain)\npicking this:\n  ?a2 \\<in> PROB \\<Longrightarrow>\n  action_proj (action_proj ?a2 (prob_dom PROB - vs')) vs =\n  action_proj ?a2 vs", "show ?thesis"], ["proof (prove)\nusing this:\n  ?a2 \\<in> PROB \\<Longrightarrow>\n  action_proj (action_proj ?a2 (prob_dom PROB - vs')) vs =\n  action_proj ?a2 vs\n\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB (prob_dom PROB - vs')) vs = prob_proj PROB vs", "unfolding prob_proj_def"], ["proof (prove)\nusing this:\n  ?a2 \\<in> PROB \\<Longrightarrow>\n  action_proj (action_proj ?a2 (prob_dom PROB - vs')) vs =\n  action_proj ?a2 vs\n\ngoal (1 subgoal):\n 1. (\\<lambda>a. action_proj a vs) `\n    (\\<lambda>a. action_proj a (prob_dom PROB - vs')) ` PROB =\n    (\\<lambda>a. action_proj a vs) ` PROB", "by (smt image_cong image_image)"], ["proof (state)\nthis:\n  prob_proj (prob_proj PROB (prob_dom PROB - vs')) vs = prob_proj PROB vs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma n_replace_proj_le_n_as_2:\n  fixes a vs vs'\n  assumes \"(vs \\<subseteq> vs')\" \"(varset_action a vs')\"\n  shows \"(varset_action (action_proj a vs') vs \\<longleftrightarrow> varset_action a vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. varset_action (action_proj a vs') vs = varset_action a vs", "unfolding varset_action_def action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmdom' (snd (fmrestrict_set vs' (fst a), fmrestrict_set vs' (snd a)))\n     \\<subseteq> vs) =\n    (fmdom' (snd a) \\<subseteq> vs)", "using assms"], ["proof (prove)\nusing this:\n  vs \\<subseteq> vs'\n  varset_action a vs'\n\ngoal (1 subgoal):\n 1. (fmdom' (snd (fmrestrict_set vs' (fst a), fmrestrict_set vs' (snd a)))\n     \\<subseteq> vs) =\n    (fmdom' (snd a) \\<subseteq> vs)", "by (simp add: exec_drest_5 varset_action_def)\n\n\n\\<comment> \\<open>NOTE type of `PROB` had to be fixed for use of `empty\\_problem\\_bound`.\\<close>"], ["", "lemma empty_problem_proj_bound:\n  fixes PROB :: \"'a problem\"\n  shows \"problem_plan_bound (prob_proj PROB {}) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. problem_plan_bound (prob_proj PROB {}) = 0", "proof -\n  \\<comment> \\<open>TODO refactor?\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. problem_plan_bound (prob_proj PROB {}) = 0", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. problem_plan_bound (prob_proj PROB {}) = 0", "have \"prob_proj {} {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_proj {} {} = {}", "unfolding prob_proj_def action_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a. (fmrestrict_set {} (fst a), fmrestrict_set {} (snd a))) `\n    {} =\n    {}", "using image_empty"], ["proof (prove)\nusing this:\n  ?f ` {} = {}\n\ngoal (1 subgoal):\n 1. (\\<lambda>a. (fmrestrict_set {} (fst a), fmrestrict_set {} (snd a))) `\n    {} =\n    {}", "by simp"], ["proof (state)\nthis:\n  prob_proj {} {} = {}\n\ngoal (1 subgoal):\n 1. problem_plan_bound (prob_proj PROB {}) = 0", "moreover"], ["proof (state)\nthis:\n  prob_proj {} {} = {}\n\ngoal (1 subgoal):\n 1. problem_plan_bound (prob_proj PROB {}) = 0", "{"], ["proof (state)\nthis:\n  prob_proj {} {} = {}\n\ngoal (1 subgoal):\n 1. problem_plan_bound (prob_proj PROB {}) = 0", "assume P: \"PROB \\<noteq> {}\""], ["proof (state)\nthis:\n  PROB \\<noteq> {}\n\ngoal (1 subgoal):\n 1. problem_plan_bound (prob_proj PROB {}) = 0", "have \"\\<forall>a. (fmrestrict_set {} (fst a), fmrestrict_set {} (snd a)) = (fmempty, fmempty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       (fmrestrict_set {} (fst a), fmrestrict_set {} (snd a)) =\n       (fmempty, fmempty)", "using fmrestrict_set_null"], ["proof (prove)\nusing this:\n  fmrestrict_set {} ?m = fmempty\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       (fmrestrict_set {} (fst a), fmrestrict_set {} (snd a)) =\n       (fmempty, fmempty)", "by simp"], ["proof (state)\nthis:\n  \\<forall>a.\n     (fmrestrict_set {} (fst a), fmrestrict_set {} (snd a)) =\n     (fmempty, fmempty)\n\ngoal (1 subgoal):\n 1. problem_plan_bound (prob_proj PROB {}) = 0", "then"], ["proof (chain)\npicking this:\n  \\<forall>a.\n     (fmrestrict_set {} (fst a), fmrestrict_set {} (snd a)) =\n     (fmempty, fmempty)", "have \"prob_proj PROB {} = {(fmempty, fmempty)}\""], ["proof (prove)\nusing this:\n  \\<forall>a.\n     (fmrestrict_set {} (fst a), fmrestrict_set {} (snd a)) =\n     (fmempty, fmempty)\n\ngoal (1 subgoal):\n 1. prob_proj PROB {} = {(fmempty, fmempty)}", "unfolding prob_proj_def action_proj_def"], ["proof (prove)\nusing this:\n  \\<forall>a.\n     (fmrestrict_set {} (fst a), fmrestrict_set {} (snd a)) =\n     (fmempty, fmempty)\n\ngoal (1 subgoal):\n 1. (\\<lambda>a. (fmrestrict_set {} (fst a), fmrestrict_set {} (snd a))) `\n    PROB =\n    {(fmempty, fmempty)}", "using P"], ["proof (prove)\nusing this:\n  \\<forall>a.\n     (fmrestrict_set {} (fst a), fmrestrict_set {} (snd a)) =\n     (fmempty, fmempty)\n  PROB \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<lambda>a. (fmrestrict_set {} (fst a), fmrestrict_set {} (snd a))) `\n    PROB =\n    {(fmempty, fmempty)}", "by auto"], ["proof (state)\nthis:\n  prob_proj PROB {} = {(fmempty, fmempty)}\n\ngoal (1 subgoal):\n 1. problem_plan_bound (prob_proj PROB {}) = 0", "}"], ["proof (state)\nthis:\n  PROB \\<noteq> {} \\<Longrightarrow>\n  prob_proj PROB {} = {(fmempty, fmempty)}\n\ngoal (1 subgoal):\n 1. problem_plan_bound (prob_proj PROB {}) = 0", "ultimately"], ["proof (chain)\npicking this:\n  prob_proj {} {} = {}\n  PROB \\<noteq> {} \\<Longrightarrow>\n  prob_proj PROB {} = {(fmempty, fmempty)}", "consider\n      (i) \"prob_proj PROB {} = {}\"\n      | (ii) \"prob_proj PROB {} = {(fmempty, fmempty)}\""], ["proof (prove)\nusing this:\n  prob_proj {} {} = {}\n  PROB \\<noteq> {} \\<Longrightarrow>\n  prob_proj PROB {} = {(fmempty, fmempty)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>prob_proj PROB {} = {} \\<Longrightarrow> thesis;\n     prob_proj PROB {} = {(fmempty, fmempty)} \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (cases \"PROB = {}\") force+"], ["proof (state)\nthis:\n  \\<lbrakk>prob_proj PROB {} = {} \\<Longrightarrow> ?thesis1;\n   prob_proj PROB {} = {(fmempty, fmempty)} \\<Longrightarrow>\n   ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. problem_plan_bound (prob_proj PROB {}) = 0", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>prob_proj PROB {} = {} \\<Longrightarrow> ?thesis1;\n   prob_proj PROB {} = {(fmempty, fmempty)} \\<Longrightarrow>\n   ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1", "have \"prob_dom (prob_proj PROB {}) = {}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>prob_proj PROB {} = {} \\<Longrightarrow> ?thesis1;\n   prob_proj PROB {} = {(fmempty, fmempty)} \\<Longrightarrow>\n   ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB {}) = {}", "unfolding prob_dom_def action_dom_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>prob_proj PROB {} = {} \\<Longrightarrow> ?thesis1;\n   prob_proj PROB {} = {(fmempty, fmempty)} \\<Longrightarrow>\n   ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. (\\<Union>(s1, s2)\\<in>prob_proj PROB {}. fmdom' s1 \\<union> fmdom' s2) =\n    {}", "using fmdom'_empty"], ["proof (prove)\nusing this:\n  \\<lbrakk>prob_proj PROB {} = {} \\<Longrightarrow> ?thesis1;\n   prob_proj PROB {} = {(fmempty, fmempty)} \\<Longrightarrow>\n   ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n  fmdom' fmempty = {}\n\ngoal (1 subgoal):\n 1. (\\<Union>(s1, s2)\\<in>prob_proj PROB {}. fmdom' s1 \\<union> fmdom' s2) =\n    {}", "by (cases) force+"], ["proof (state)\nthis:\n  prob_dom (prob_proj PROB {}) = {}\n\ngoal (1 subgoal):\n 1. problem_plan_bound (prob_proj PROB {}) = 0", "}"], ["proof (state)\nthis:\n  prob_dom (prob_proj PROB {}) = {}\n\ngoal (1 subgoal):\n 1. problem_plan_bound (prob_proj PROB {}) = 0", "then"], ["proof (chain)\npicking this:\n  prob_dom (prob_proj PROB {}) = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  prob_dom (prob_proj PROB {}) = {}\n\ngoal (1 subgoal):\n 1. problem_plan_bound (prob_proj PROB {}) = 0", "using empty_problem_bound[where PROB=\"prob_proj PROB {}\"]"], ["proof (prove)\nusing this:\n  prob_dom (prob_proj PROB {}) = {}\n  prob_dom (prob_proj PROB {}) = {} \\<Longrightarrow>\n  problem_plan_bound (prob_proj PROB {}) = 0\n\ngoal (1 subgoal):\n 1. problem_plan_bound (prob_proj PROB {}) = 0", "by blast"], ["proof (state)\nthis:\n  problem_plan_bound (prob_proj PROB {}) = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma problem_plan_bound_works_proj:\n  fixes PROB :: \"'a problem\" and s as vs\n  assumes \"finite PROB\" \"(s \\<in> valid_states PROB)\" \"(as \\<in> valid_plans PROB)\" \"(sat_precond_as s as)\"\n  shows \"(\\<exists>as'.\n    (exec_plan (fmrestrict_set vs s) as' = exec_plan (fmrestrict_set vs s) (as_proj as vs))\n    \\<and> (length as' \\<le> problem_plan_bound (prob_proj PROB vs))\n    \\<and> (subseq as' (as_proj as vs))\n    \\<and> (sat_precond_as s as')\n    \\<and> (no_effectless_act as')\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "have \"exec_plan (fmrestrict_set vs s) (as_proj as vs) = fmrestrict_set vs (exec_plan s as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n    fmrestrict_set vs (exec_plan s as)", "using assms(4) sat_precond_exec_as_proj_eq_proj_exec"], ["proof (prove)\nusing this:\n  sat_precond_as s as\n  sat_precond_as ?s ?as \\<Longrightarrow>\n  exec_plan (fmrestrict_set ?vs ?s) (as_proj ?as ?vs) =\n  fmrestrict_set ?vs (exec_plan ?s ?as)\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n    fmrestrict_set vs (exec_plan s as)", "by blast"], ["proof (state)\nthis:\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n  fmrestrict_set vs (exec_plan s as)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "moreover"], ["proof (state)\nthis:\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n  fmrestrict_set vs (exec_plan s as)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "have \"fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)", "using assms(2) graph_plan_not_eq_last_diff_paths"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  ?s \\<in> valid_states ?PROB \\<Longrightarrow>\n  fmrestrict_set ?vs ?s \\<in> valid_states (prob_proj ?PROB ?vs)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)", "by auto"], ["proof (state)\nthis:\n  fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "moreover"], ["proof (state)\nthis:\n  fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "have \"as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as_proj as vs \\<in> valid_plans (prob_proj PROB vs)", "using assms(3) valid_as_valid_as_proj"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  as_proj ?as ?vs \\<in> valid_plans (prob_proj ?PROB ?vs)\n\ngoal (1 subgoal):\n 1. as_proj as vs \\<in> valid_plans (prob_proj PROB vs)", "by blast"], ["proof (state)\nthis:\n  as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "moreover"], ["proof (state)\nthis:\n  as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "have \"finite (prob_proj PROB vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (prob_proj PROB vs)", "unfolding prob_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ((\\<lambda>a. action_proj a vs) ` PROB)", "using assms(1)"], ["proof (prove)\nusing this:\n  finite PROB\n\ngoal (1 subgoal):\n 1. finite ((\\<lambda>a. action_proj a vs) ` PROB)", "by simp"], ["proof (state)\nthis:\n  finite (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "ultimately"], ["proof (chain)\npicking this:\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n  fmrestrict_set vs (exec_plan s as)\n  fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)\n  as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n  finite (prob_proj PROB vs)", "have \"\\<exists>as'.\n      exec_plan (fmrestrict_set vs s) (as_proj as vs) = exec_plan (fmrestrict_set vs s) as'\n      \\<and> subseq as' (as_proj as vs) \\<and> length as' \\<le> problem_plan_bound (prob_proj PROB vs)\n    \""], ["proof (prove)\nusing this:\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n  fmrestrict_set vs (exec_plan s as)\n  fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)\n  as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n  finite (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n       exec_plan (fmrestrict_set vs s) as' \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs)", "using problem_plan_bound_works[of \"prob_proj PROB vs\"\n          \"fmrestrict_set vs s\" \"as_proj as vs\"]"], ["proof (prove)\nusing this:\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n  fmrestrict_set vs (exec_plan s as)\n  fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs)\n  as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\n  finite (prob_proj PROB vs)\n  \\<lbrakk>finite (prob_proj PROB vs);\n   fmrestrict_set vs s \\<in> valid_states (prob_proj PROB vs);\n   as_proj as vs \\<in> valid_plans (prob_proj PROB vs)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as'.\n                       exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                       exec_plan (fmrestrict_set vs s) as' \\<and>\n                       subseq as' (as_proj as vs) \\<and>\n                       length as'\n                       \\<le> problem_plan_bound (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n       exec_plan (fmrestrict_set vs s) as' \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs)", "by blast"], ["proof (state)\nthis:\n  \\<exists>as'.\n     exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n     exec_plan (fmrestrict_set vs s) as' \\<and>\n     subseq as' (as_proj as vs) \\<and>\n     length as' \\<le> problem_plan_bound (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "}"], ["proof (state)\nthis:\n  \\<exists>as'.\n     exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n     exec_plan (fmrestrict_set vs s) as' \\<and>\n     subseq as' (as_proj as vs) \\<and>\n     length as' \\<le> problem_plan_bound (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "then"], ["proof (chain)\npicking this:\n  \\<exists>as'.\n     exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n     exec_plan (fmrestrict_set vs s) as' \\<and>\n     subseq as' (as_proj as vs) \\<and>\n     length as' \\<le> problem_plan_bound (prob_proj PROB vs)", "obtain as' where\n    \"exec_plan (fmrestrict_set vs s) (as_proj as vs) = exec_plan (fmrestrict_set vs s) as'\"\n    \"subseq as' (as_proj as vs) \\<and> length as' \\<le> problem_plan_bound (prob_proj PROB vs)\""], ["proof (prove)\nusing this:\n  \\<exists>as'.\n     exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n     exec_plan (fmrestrict_set vs s) as' \\<and>\n     subseq as' (as_proj as vs) \\<and>\n     length as' \\<le> problem_plan_bound (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. (\\<And>as'.\n        \\<lbrakk>exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n                 exec_plan (fmrestrict_set vs s) as';\n         subseq as' (as_proj as vs) \\<and>\n         length as' \\<le> problem_plan_bound (prob_proj PROB vs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n  exec_plan (fmrestrict_set vs s) as'\n  subseq as' (as_proj as vs) \\<and>\n  length as' \\<le> problem_plan_bound (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "moreover"], ["proof (state)\nthis:\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n  exec_plan (fmrestrict_set vs s) as'\n  subseq as' (as_proj as vs) \\<and>\n  length as' \\<le> problem_plan_bound (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "{"], ["proof (state)\nthis:\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n  exec_plan (fmrestrict_set vs s) as'\n  subseq as' (as_proj as vs) \\<and>\n  length as' \\<le> problem_plan_bound (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "have \"\n      exec_plan (fmrestrict_set vs s) as\n      = exec_plan (fmrestrict_set vs s) (rem_condless_act (fmrestrict_set vs s) [] as)\n    \""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) as =\n    exec_plan (fmrestrict_set vs s)\n     (rem_condless_act (fmrestrict_set vs s) [] as)", "using rem_condless_valid_1[of \"fmrestrict_set vs s\" as]"], ["proof (prove)\nusing this:\n  exec_plan (fmrestrict_set vs s) as =\n  exec_plan (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as)\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s) as =\n    exec_plan (fmrestrict_set vs s)\n     (rem_condless_act (fmrestrict_set vs s) [] as)", "by blast"], ["proof (state)\nthis:\n  exec_plan (fmrestrict_set vs s) as =\n  exec_plan (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "then"], ["proof (chain)\npicking this:\n  exec_plan (fmrestrict_set vs s) as =\n  exec_plan (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as)", "have \"subseq (rem_condless_act (fmrestrict_set vs s) [] as') as'\""], ["proof (prove)\nusing this:\n  exec_plan (fmrestrict_set vs s) as =\n  exec_plan (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as)\n\ngoal (1 subgoal):\n 1. subseq (rem_condless_act (fmrestrict_set vs s) [] as') as'", "using rem_condless_valid_8 [of \"fmrestrict_set vs s\" as']"], ["proof (prove)\nusing this:\n  exec_plan (fmrestrict_set vs s) as =\n  exec_plan (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as)\n  subseq (rem_condless_act (fmrestrict_set vs s) [] as') as'\n\ngoal (1 subgoal):\n 1. subseq (rem_condless_act (fmrestrict_set vs s) [] as') as'", "by blast"], ["proof (state)\nthis:\n  subseq (rem_condless_act (fmrestrict_set vs s) [] as') as'\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "}"], ["proof (state)\nthis:\n  subseq (rem_condless_act (fmrestrict_set vs s) [] as') as'\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "moreover"], ["proof (state)\nthis:\n  subseq (rem_condless_act (fmrestrict_set vs s) [] as') as'\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "have \"length (rem_condless_act (fmrestrict_set vs s) [] as') \\<le> length as'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (rem_condless_act (fmrestrict_set vs s) [] as') \\<le> length as'", "using rem_condless_valid_3[of \"fmrestrict_set vs s\"]"], ["proof (prove)\nusing this:\n  length (rem_condless_act (fmrestrict_set vs s) [] ?as) \\<le> length ?as\n\ngoal (1 subgoal):\n 1. length (rem_condless_act (fmrestrict_set vs s) [] as') \\<le> length as'", "by fast"], ["proof (state)\nthis:\n  length (rem_condless_act (fmrestrict_set vs s) [] as') \\<le> length as'\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "moreover"], ["proof (state)\nthis:\n  length (rem_condless_act (fmrestrict_set vs s) [] as') \\<le> length as'\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "have 4:\n    \"sat_precond_as (fmrestrict_set vs s) (rem_condless_act (fmrestrict_set vs s) [] as')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat_precond_as (fmrestrict_set vs s)\n     (rem_condless_act (fmrestrict_set vs s) [] as')", "using rem_condless_valid_2[of \"fmrestrict_set vs s\" as']"], ["proof (prove)\nusing this:\n  sat_precond_as (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as')\n\ngoal (1 subgoal):\n 1. sat_precond_as (fmrestrict_set vs s)\n     (rem_condless_act (fmrestrict_set vs s) [] as')", "by blast"], ["proof (state)\nthis:\n  sat_precond_as (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as')\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "moreover"], ["proof (state)\nthis:\n  sat_precond_as (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as')\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "have \"\n    exec_plan (fmrestrict_set vs s) (rem_condless_act (fmrestrict_set vs s) [] as')\n    = exec_plan (fmrestrict_set vs s)\n      (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s)\n     (rem_condless_act (fmrestrict_set vs s) [] as') =\n    exec_plan (fmrestrict_set vs s)\n     (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))", "using rem_effectless_works_1[of \"fmrestrict_set vs s\"\n        \"rem_condless_act (fmrestrict_set vs s) [] as'\"]"], ["proof (prove)\nusing this:\n  exec_plan (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as') =\n  exec_plan (fmrestrict_set vs s)\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n\ngoal (1 subgoal):\n 1. exec_plan (fmrestrict_set vs s)\n     (rem_condless_act (fmrestrict_set vs s) [] as') =\n    exec_plan (fmrestrict_set vs s)\n     (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))", "by blast"], ["proof (state)\nthis:\n  exec_plan (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as') =\n  exec_plan (fmrestrict_set vs s)\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "moreover"], ["proof (state)\nthis:\n  exec_plan (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as') =\n  exec_plan (fmrestrict_set vs s)\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "{"], ["proof (state)\nthis:\n  exec_plan (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as') =\n  exec_plan (fmrestrict_set vs s)\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "have \"\n      subseq (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as))\n     (rem_condless_act (fmrestrict_set vs s) [] as)\n    \""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq\n     (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as))\n     (rem_condless_act (fmrestrict_set vs s) [] as)", "using rem_effectless_works_9[of\n          \"(rem_condless_act (fmrestrict_set vs s) [] (as :: 'a action list))\"]"], ["proof (prove)\nusing this:\n  subseq (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as))\n   (rem_condless_act (fmrestrict_set vs s) [] as)\n\ngoal (1 subgoal):\n 1. subseq\n     (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as))\n     (rem_condless_act (fmrestrict_set vs s) [] as)", "by blast"], ["proof (state)\nthis:\n  subseq (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as))\n   (rem_condless_act (fmrestrict_set vs s) [] as)\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "then"], ["proof (chain)\npicking this:\n  subseq (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as))\n   (rem_condless_act (fmrestrict_set vs s) [] as)", "have \"\n      length (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n      \\<le> length (rem_condless_act (fmrestrict_set vs s) [] as')\n    \""], ["proof (prove)\nusing this:\n  subseq (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as))\n   (rem_condless_act (fmrestrict_set vs s) [] as)\n\ngoal (1 subgoal):\n 1. length\n     (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n    \\<le> length (rem_condless_act (fmrestrict_set vs s) [] as')", "using rem_effectless_works_3[of\n          \"(rem_condless_act (fmrestrict_set vs s) [] (as' :: 'a action list))\"]"], ["proof (prove)\nusing this:\n  subseq (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as))\n   (rem_condless_act (fmrestrict_set vs s) [] as)\n  length\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n  \\<le> length (rem_condless_act (fmrestrict_set vs s) [] as')\n\ngoal (1 subgoal):\n 1. length\n     (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n    \\<le> length (rem_condless_act (fmrestrict_set vs s) [] as')", "by simp"], ["proof (state)\nthis:\n  length\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n  \\<le> length (rem_condless_act (fmrestrict_set vs s) [] as')\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "then"], ["proof (chain)\npicking this:\n  length\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n  \\<le> length (rem_condless_act (fmrestrict_set vs s) [] as')", "have \"\n      sat_precond_as (fmrestrict_set vs s)\n      (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n    \""], ["proof (prove)\nusing this:\n  length\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n  \\<le> length (rem_condless_act (fmrestrict_set vs s) [] as')\n\ngoal (1 subgoal):\n 1. sat_precond_as (fmrestrict_set vs s)\n     (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))", "using 4 rem_effectless_works_2[of \"fmrestrict_set vs s\"\n          \"(rem_condless_act (fmrestrict_set vs s) [] as')\"]"], ["proof (prove)\nusing this:\n  length\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n  \\<le> length (rem_condless_act (fmrestrict_set vs s) [] as')\n  sat_precond_as (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as')\n  sat_precond_as (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as') \\<Longrightarrow>\n  sat_precond_as (fmrestrict_set vs s)\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n\ngoal (1 subgoal):\n 1. sat_precond_as (fmrestrict_set vs s)\n     (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))", "by blast"], ["proof (state)\nthis:\n  sat_precond_as (fmrestrict_set vs s)\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "then"], ["proof (chain)\npicking this:\n  sat_precond_as (fmrestrict_set vs s)\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))", "have\n      \"no_effectless_act (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\""], ["proof (prove)\nusing this:\n  sat_precond_as (fmrestrict_set vs s)\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n\ngoal (1 subgoal):\n 1. no_effectless_act\n     (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))", "using rem_effectless_works_6[of \"(rem_condless_act (fmrestrict_set vs s) [] (as' ::'a action list))\"]"], ["proof (prove)\nusing this:\n  sat_precond_as (fmrestrict_set vs s)\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n  no_effectless_act\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n\ngoal (1 subgoal):\n 1. no_effectless_act\n     (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))", "by simp"], ["proof (state)\nthis:\n  no_effectless_act\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "}"], ["proof (state)\nthis:\n  no_effectless_act\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "ultimately"], ["proof (chain)\npicking this:\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n  exec_plan (fmrestrict_set vs s) as'\n  subseq as' (as_proj as vs) \\<and>\n  length as' \\<le> problem_plan_bound (prob_proj PROB vs)\n  subseq (rem_condless_act (fmrestrict_set vs s) [] as') as'\n  length (rem_condless_act (fmrestrict_set vs s) [] as') \\<le> length as'\n  sat_precond_as (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as')\n  exec_plan (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as') =\n  exec_plan (fmrestrict_set vs s)\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n  no_effectless_act\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))", "show ?thesis"], ["proof (prove)\nusing this:\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n  exec_plan (fmrestrict_set vs s) as'\n  subseq as' (as_proj as vs) \\<and>\n  length as' \\<le> problem_plan_bound (prob_proj PROB vs)\n  subseq (rem_condless_act (fmrestrict_set vs s) [] as') as'\n  length (rem_condless_act (fmrestrict_set vs s) [] as') \\<le> length as'\n  sat_precond_as (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as')\n  exec_plan (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as') =\n  exec_plan (fmrestrict_set vs s)\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n  no_effectless_act\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "using rem_effectless_works_13 rem_condless_valid_1 order_trans\n      no_effectless_proj sat_precond_drest_sat_precond subseq_order.order_trans"], ["proof (prove)\nusing this:\n  exec_plan (fmrestrict_set vs s) (as_proj as vs) =\n  exec_plan (fmrestrict_set vs s) as'\n  subseq as' (as_proj as vs) \\<and>\n  length as' \\<le> problem_plan_bound (prob_proj PROB vs)\n  subseq (rem_condless_act (fmrestrict_set vs s) [] as') as'\n  length (rem_condless_act (fmrestrict_set vs s) [] as') \\<le> length as'\n  sat_precond_as (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as')\n  exec_plan (fmrestrict_set vs s)\n   (rem_condless_act (fmrestrict_set vs s) [] as') =\n  exec_plan (fmrestrict_set vs s)\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n  no_effectless_act\n   (rem_effectless_act (rem_condless_act (fmrestrict_set vs s) [] as'))\n  \\<lbrakk>subseq ?as1.0 ?as2.0; no_effectless_act ?as2.0\\<rbrakk>\n  \\<Longrightarrow> no_effectless_act ?as1.0\n  exec_plan ?s ?as = exec_plan ?s (rem_condless_act ?s [] ?as)\n  \\<lbrakk>?x \\<le> ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x \\<le> ?z\n  no_effectless_act (as_proj ?as ?vs)\n  sat_precond_as (fmrestrict_set ?vs ?s) ?as \\<Longrightarrow>\n  sat_precond_as ?s ?as\n  \\<lbrakk>subseq ?x ?y; subseq ?y ?z\\<rbrakk>\n  \\<Longrightarrow> subseq ?x ?z\n\ngoal (1 subgoal):\n 1. \\<exists>as'.\n       exec_plan (fmrestrict_set vs s) as' =\n       exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n       length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n       subseq as' (as_proj as vs) \\<and>\n       sat_precond_as s as' \\<and> no_effectless_act as'", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  \\<exists>as'.\n     exec_plan (fmrestrict_set vs s) as' =\n     exec_plan (fmrestrict_set vs s) (as_proj as vs) \\<and>\n     length as' \\<le> problem_plan_bound (prob_proj PROB vs) \\<and>\n     subseq as' (as_proj as vs) \\<and>\n     sat_precond_as s as' \\<and> no_effectless_act as'\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor into `Fmap\\_Utils`.\\<close>"], ["", "lemma action_proj_inter_i: \"fmrestrict_set V (fmrestrict_set W f) = fmrestrict_set (V \\<inter> W) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set V (fmrestrict_set W f) = fmrestrict_set (V \\<inter> W) f", "unfolding fmfilter_alt_defs(4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmfilter (\\<lambda>a. a \\<in> V) (fmfilter (\\<lambda>a. a \\<in> W) f) =\n    fmfilter (\\<lambda>a. a \\<in> V \\<inter> W) f", "by simp"], ["", "lemma action_proj_inter: \"action_proj (action_proj a vs1) vs2 = action_proj a (vs1 \\<inter> vs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_proj (action_proj a vs1) vs2 = action_proj a (vs1 \\<inter> vs2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. action_proj (action_proj a vs1) vs2 = action_proj a (vs1 \\<inter> vs2)", "have\n    \"fmrestrict_set vs2 (fmrestrict_set vs1 (fst a)) = fmrestrict_set (vs1 \\<inter> vs2) (fst a)\"\n    \"fmrestrict_set vs2 (fmrestrict_set vs1 (snd a)) = fmrestrict_set (vs1 \\<inter> vs2) (snd a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs2 (fmrestrict_set vs1 (fst a)) =\n    fmrestrict_set (vs1 \\<inter> vs2) (fst a) &&&\n    fmrestrict_set vs2 (fmrestrict_set vs1 (snd a)) =\n    fmrestrict_set (vs1 \\<inter> vs2) (snd a)", "using inf_commute action_proj_inter_i"], ["proof (prove)\nusing this:\n  inf ?x ?y = inf ?y ?x\n  fmrestrict_set ?V (fmrestrict_set ?W ?f) =\n  fmrestrict_set (?V \\<inter> ?W) ?f\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs2 (fmrestrict_set vs1 (fst a)) =\n    fmrestrict_set (vs1 \\<inter> vs2) (fst a) &&&\n    fmrestrict_set vs2 (fmrestrict_set vs1 (snd a)) =\n    fmrestrict_set (vs1 \\<inter> vs2) (snd a)", "by metis+"], ["proof (state)\nthis:\n  fmrestrict_set vs2 (fmrestrict_set vs1 (fst a)) =\n  fmrestrict_set (vs1 \\<inter> vs2) (fst a)\n  fmrestrict_set vs2 (fmrestrict_set vs1 (snd a)) =\n  fmrestrict_set (vs1 \\<inter> vs2) (snd a)\n\ngoal (1 subgoal):\n 1. action_proj (action_proj a vs1) vs2 = action_proj a (vs1 \\<inter> vs2)", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs2 (fmrestrict_set vs1 (fst a)) =\n  fmrestrict_set (vs1 \\<inter> vs2) (fst a)\n  fmrestrict_set vs2 (fmrestrict_set vs1 (snd a)) =\n  fmrestrict_set (vs1 \\<inter> vs2) (snd a)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set vs2 (fmrestrict_set vs1 (fst a)) =\n  fmrestrict_set (vs1 \\<inter> vs2) (fst a)\n  fmrestrict_set vs2 (fmrestrict_set vs1 (snd a)) =\n  fmrestrict_set (vs1 \\<inter> vs2) (snd a)\n\ngoal (1 subgoal):\n 1. action_proj (action_proj a vs1) vs2 = action_proj a (vs1 \\<inter> vs2)", "unfolding action_proj_def"], ["proof (prove)\nusing this:\n  fmrestrict_set vs2 (fmrestrict_set vs1 (fst a)) =\n  fmrestrict_set (vs1 \\<inter> vs2) (fst a)\n  fmrestrict_set vs2 (fmrestrict_set vs1 (snd a)) =\n  fmrestrict_set (vs1 \\<inter> vs2) (snd a)\n\ngoal (1 subgoal):\n 1. (fmrestrict_set vs2\n      (fst (fmrestrict_set vs1 (fst a), fmrestrict_set vs1 (snd a))),\n     fmrestrict_set vs2\n      (snd (fmrestrict_set vs1 (fst a), fmrestrict_set vs1 (snd a)))) =\n    (fmrestrict_set (vs1 \\<inter> vs2) (fst a),\n     fmrestrict_set (vs1 \\<inter> vs2) (snd a))", "by simp"], ["proof (state)\nthis:\n  action_proj (action_proj a vs1) vs2 = action_proj a (vs1 \\<inter> vs2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prob_proj_inter: \"prob_proj (prob_proj PROB vs1) vs2 = prob_proj PROB (vs1 \\<inter> vs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_proj (prob_proj PROB vs1) vs2 = prob_proj PROB (vs1 \\<inter> vs2)", "unfolding prob_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a. action_proj a vs2) `\n    (\\<lambda>a. action_proj a vs1) ` PROB =\n    (\\<lambda>a. action_proj a (vs1 \\<inter> vs2)) ` PROB", "using set_eq_iff image_iff action_proj_inter"], ["proof (prove)\nusing this:\n  (?A = ?B) = (\\<forall>x. (x \\<in> ?A) = (x \\<in> ?B))\n  (?z \\<in> ?f ` ?A) = (\\<exists>x\\<in>?A. ?z = ?f x)\n  action_proj (action_proj ?a ?vs1.0) ?vs2.0 =\n  action_proj ?a (?vs1.0 \\<inter> ?vs2.0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>a. action_proj a vs2) `\n    (\\<lambda>a. action_proj a vs1) ` PROB =\n    (\\<lambda>a. action_proj a (vs1 \\<inter> vs2)) ` PROB", "supply[[smt_timeout=100]]"], ["proof (prove)\nusing this:\n  (?A = ?B) = (\\<forall>x. (x \\<in> ?A) = (x \\<in> ?B))\n  (?z \\<in> ?f ` ?A) = (\\<exists>x\\<in>?A. ?z = ?f x)\n  action_proj (action_proj ?a ?vs1.0) ?vs2.0 =\n  action_proj ?a (?vs1.0 \\<inter> ?vs2.0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>a. action_proj a vs2) `\n    (\\<lambda>a. action_proj a vs1) ` PROB =\n    (\\<lambda>a. action_proj a (vs1 \\<inter> vs2)) ` PROB", "by (smt image_cong image_image)"], ["", "subsection \"Snapshotting\""], ["", "text \\<open> A snapshot is an abstraction concept of the system in which the assignment of a set of\nvariables is fixed and actions whose preconditions or effects violate the fixed assignments are\neliminated. [Abdulaziz et al., p.28]\n\nFormally this notion is build on the definition of agreement of states (`agree`), which\nstates that variables `v`, `v'`in the shared domain of two states must be assigned to the same\nvalue. A snapshot w.r.t to a state `s` is then defined as the set of actions of a problem where the\nprecondition and the effect agree. [Abdulaziz et al., Definition 16, HOL4 Definition 16, p.28] \\<close>\n\n\n\\<comment> \\<open>NOTE  name shortened.\\<close>"], ["", "definition agree where\n  \"agree s1 s2 \\<equiv> (\\<forall>v. (v \\<in> fmdom' s1) \\<and> (v \\<in> fmdom' s2) \\<longrightarrow> (fmlookup s1 v = fmlookup s2 v))\"\n\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma state_succ_fixpoint_if:\n  fixes a s PROB\n  assumes \"a \\<in> PROB\" \"(s \\<in> valid_states PROB)\" \"fst a \\<subseteq>\\<^sub>f s\" \"agree (snd a) s\"\n  shows \"state_succ s a = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s a = s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. state_succ s a = s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. state_succ s a = s", "have \"fmdom' (snd a) \\<subseteq> fmdom' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s", "using assms(1, 2) FDOM_eff_subset_FDOM_valid_states_pair"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  s \\<in> valid_states PROB\n  \\<lbrakk>?a \\<in> ?PROB; ?s \\<in> valid_states ?PROB\\<rbrakk>\n  \\<Longrightarrow> fmdom' (snd ?a) \\<subseteq> fmdom' ?s\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s", "by blast"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. state_succ s a = s", "moreover"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. state_succ s a = s", "have \"\\<forall>x. x \\<in> fmdom' (snd a) \\<longrightarrow> fmlookup (snd a) x = fmlookup s x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> fmdom' (snd a) \\<longrightarrow>\n       fmlookup (snd a) x = fmlookup s x", "using assms(4) calculation(1) agree_def subsetCE"], ["proof (prove)\nusing this:\n  agree (snd a) s\n  fmdom' (snd a) \\<subseteq> fmdom' s\n  agree ?s1.0 ?s2.0 \\<equiv>\n  \\<forall>v.\n     v \\<in> fmdom' ?s1.0 \\<and> v \\<in> fmdom' ?s2.0 \\<longrightarrow>\n     fmlookup ?s1.0 v = fmlookup ?s2.0 v\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?A \\<Longrightarrow> ?P;\n   ?c \\<in> ?B \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> fmdom' (snd a) \\<longrightarrow>\n       fmlookup (snd a) x = fmlookup s x", "by metis"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> fmdom' (snd a) \\<longrightarrow>\n     fmlookup (snd a) x = fmlookup s x\n\ngoal (1 subgoal):\n 1. state_succ s a = s", "moreover"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> fmdom' (snd a) \\<longrightarrow>\n     fmlookup (snd a) x = fmlookup s x\n\ngoal (1 subgoal):\n 1. state_succ s a = s", "have \"s ++\\<^sub>f snd a = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s ++\\<^sub>f snd a = s", "using calculation(2)"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> fmdom' (snd a) \\<longrightarrow>\n     fmlookup (snd a) x = fmlookup s x\n\ngoal (1 subgoal):\n 1. s ++\\<^sub>f snd a = s", "by (metis fmap_ext fmdom'_notD fmdom_notI fmlookup_add)"], ["proof (state)\nthis:\n  s ++\\<^sub>f snd a = s\n\ngoal (1 subgoal):\n 1. state_succ s a = s", "}"], ["proof (state)\nthis:\n  s ++\\<^sub>f snd a = s\n\ngoal (1 subgoal):\n 1. state_succ s a = s", "then"], ["proof (chain)\npicking this:\n  s ++\\<^sub>f snd a = s", "show ?thesis"], ["proof (prove)\nusing this:\n  s ++\\<^sub>f snd a = s\n\ngoal (1 subgoal):\n 1. state_succ s a = s", "using fmap_add_ltr_def state_succ_def"], ["proof (prove)\nusing this:\n  s ++\\<^sub>f snd a = s\n  ?m1.0 ++ ?m2.0 \\<equiv> ?m2.0 ++\\<^sub>f ?m1.0\n  state_succ ?s ?a \\<equiv>\n  if fst ?a \\<subseteq>\\<^sub>f ?s then snd ?a ++ ?s else ?s\n\ngoal (1 subgoal):\n 1. state_succ s a = s", "by metis"], ["proof (state)\nthis:\n  state_succ s a = s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma agree_state_succ_idempot:\n  assumes \"(a \\<in> PROB)\" \"(s \\<in> valid_states PROB)\" \"(agree (snd a) s)\"\n  shows \"(state_succ s a = s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s a = s", "proof (cases \"fst a \\<subseteq>\\<^sub>f s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow> state_succ s a = s\n 2. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow> state_succ s a = s", "case True"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s\n\ngoal (2 subgoals):\n 1. fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow> state_succ s a = s\n 2. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow> state_succ s a = s", "then"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s", "show ?thesis"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. state_succ s a = s", "using assms state_succ_fixpoint_if"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n  a \\<in> PROB\n  s \\<in> valid_states PROB\n  agree (snd a) s\n  \\<lbrakk>?a \\<in> ?PROB; ?s \\<in> valid_states ?PROB;\n   fst ?a \\<subseteq>\\<^sub>f ?s; agree (snd ?a) ?s\\<rbrakk>\n  \\<Longrightarrow> state_succ ?s ?a = ?s\n\ngoal (1 subgoal):\n 1. state_succ s a = s", "by blast"], ["proof (state)\nthis:\n  state_succ s a = s\n\ngoal (1 subgoal):\n 1. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow> state_succ s a = s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow> state_succ s a = s", "case False"], ["proof (state)\nthis:\n  \\<not> fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow> state_succ s a = s", "then"], ["proof (chain)\npicking this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. state_succ s a = s", "unfolding state_succ_def fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. (if fst a \\<subseteq>\\<^sub>f s then s ++\\<^sub>f snd a else s) = s", "by simp"], ["proof (state)\nthis:\n  state_succ s a = s\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor into `Fmap\\_Utils`.\\<close>"], ["", "lemma fmdom'_fmrestrict_set:\n  fixes X f\n  shows \"fmdom' (fmrestrict_set X f) = X \\<inter> (fmdom' f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set X f) = X \\<inter> fmdom' f", "unfolding fmdom'_alt_def fmfilter_alt_defs(4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fset (fmdom (fmfilter (\\<lambda>a. a \\<in> X) f)) =\n    X \\<inter> fset (fmdom f)", "by auto\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor into 'Fmap\\_Utils'.\\<close>"], ["", "lemma fmdom'_fmrestrict_set_fmadd:\n  fixes X f g\n  shows \"fmdom' (fmrestrict_set X (f ++\\<^sub>f g)) = X \\<inter> (fmdom' f \\<union> fmdom' g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set X (f ++\\<^sub>f g)) =\n    X \\<inter> (fmdom' f \\<union> fmdom' g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set X (f ++\\<^sub>f g)) =\n    X \\<inter> (fmdom' f \\<union> fmdom' g)", "have \"fmrestrict_set X (f ++\\<^sub>f g) = fmrestrict_set X f ++\\<^sub>f fmrestrict_set X g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set X (f ++\\<^sub>f g) =\n    fmrestrict_set X f ++\\<^sub>f fmrestrict_set X g", "using fmrestrict_set_add_distrib"], ["proof (prove)\nusing this:\n  fmrestrict_set ?A (?m ++\\<^sub>f ?n) =\n  fmrestrict_set ?A ?m ++\\<^sub>f fmrestrict_set ?A ?n\n\ngoal (1 subgoal):\n 1. fmrestrict_set X (f ++\\<^sub>f g) =\n    fmrestrict_set X f ++\\<^sub>f fmrestrict_set X g", "by fast"], ["proof (state)\nthis:\n  fmrestrict_set X (f ++\\<^sub>f g) =\n  fmrestrict_set X f ++\\<^sub>f fmrestrict_set X g\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set X (f ++\\<^sub>f g)) =\n    X \\<inter> (fmdom' f \\<union> fmdom' g)", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set X (f ++\\<^sub>f g) =\n  fmrestrict_set X f ++\\<^sub>f fmrestrict_set X g", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set X (f ++\\<^sub>f g) =\n  fmrestrict_set X f ++\\<^sub>f fmrestrict_set X g\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set X (f ++\\<^sub>f g)) =\n    X \\<inter> (fmdom' f \\<union> fmdom' g)", "using fmdom'_fmrestrict_set fmdom'_add"], ["proof (prove)\nusing this:\n  fmrestrict_set X (f ++\\<^sub>f g) =\n  fmrestrict_set X f ++\\<^sub>f fmrestrict_set X g\n  fmdom' (fmrestrict_set ?X ?f) = ?X \\<inter> fmdom' ?f\n  fmdom' (?m ++\\<^sub>f ?n) = fmdom' ?m \\<union> fmdom' ?n\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set X (f ++\\<^sub>f g)) =\n    X \\<inter> (fmdom' f \\<union> fmdom' g)", "by metis"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set X (f ++\\<^sub>f g)) =\n  X \\<inter> (fmdom' f \\<union> fmdom' g)\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor into 'Fmap\\_Utils'.\\<close>"], ["", "lemma fmrestrict_agree:\n  fixes X x f g\n  assumes \"agree (fmrestrict_set X f) (fmrestrict_set X g)\" \"x \\<in> X \\<inter> fmdom' f \\<inter> fmdom' g\"\n  shows \"fmlookup (fmrestrict_set X f) x = fmlookup (fmrestrict_set X g) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set X f) x = fmlookup (fmrestrict_set X g) x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set X f) x = fmlookup (fmrestrict_set X g) x", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set X f) x = fmlookup (fmrestrict_set X g) x", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set X f) x = fmlookup (fmrestrict_set X g) x", "assume \"v \\<in> X \\<inter> fmdom' f \\<inter> fmdom' g\""], ["proof (state)\nthis:\n  v \\<in> X \\<inter> fmdom' f \\<inter> fmdom' g\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set X f) x = fmlookup (fmrestrict_set X g) x", "then"], ["proof (chain)\npicking this:\n  v \\<in> X \\<inter> fmdom' f \\<inter> fmdom' g", "have \"v \\<in> fmdom' (fmrestrict_set X f) \\<and> v \\<in> fmdom' (fmrestrict_set X g)\""], ["proof (prove)\nusing this:\n  v \\<in> X \\<inter> fmdom' f \\<inter> fmdom' g\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fmrestrict_set X f) \\<and>\n    v \\<in> fmdom' (fmrestrict_set X g)", "using fmdom'_fmrestrict_set"], ["proof (prove)\nusing this:\n  v \\<in> X \\<inter> fmdom' f \\<inter> fmdom' g\n  fmdom' (fmrestrict_set ?X ?f) = ?X \\<inter> fmdom' ?f\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' (fmrestrict_set X f) \\<and>\n    v \\<in> fmdom' (fmrestrict_set X g)", "by force"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fmrestrict_set X f) \\<and>\n  v \\<in> fmdom' (fmrestrict_set X g)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set X f) x = fmlookup (fmrestrict_set X g) x", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (fmrestrict_set X f) \\<and>\n  v \\<in> fmdom' (fmrestrict_set X g)", "have \"fmlookup (fmrestrict_set X f) v = fmlookup (fmrestrict_set X g) v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fmrestrict_set X f) \\<and>\n  v \\<in> fmdom' (fmrestrict_set X g)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set X f) v = fmlookup (fmrestrict_set X g) v", "using assms(1)"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fmrestrict_set X f) \\<and>\n  v \\<in> fmdom' (fmrestrict_set X g)\n  agree (fmrestrict_set X f) (fmrestrict_set X g)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set X f) v = fmlookup (fmrestrict_set X g) v", "unfolding agree_def"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fmrestrict_set X f) \\<and>\n  v \\<in> fmdom' (fmrestrict_set X g)\n  \\<forall>v.\n     v \\<in> fmdom' (fmrestrict_set X f) \\<and>\n     v \\<in> fmdom' (fmrestrict_set X g) \\<longrightarrow>\n     fmlookup (fmrestrict_set X f) v = fmlookup (fmrestrict_set X g) v\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set X f) v = fmlookup (fmrestrict_set X g) v", "by blast"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set X f) v = fmlookup (fmrestrict_set X g) v\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set X f) x = fmlookup (fmrestrict_set X g) x", "}"], ["proof (state)\nthis:\n  ?v2 \\<in> X \\<inter> fmdom' f \\<inter> fmdom' g \\<Longrightarrow>\n  fmlookup (fmrestrict_set X f) ?v2 = fmlookup (fmrestrict_set X g) ?v2\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set X f) x = fmlookup (fmrestrict_set X g) x", "then"], ["proof (chain)\npicking this:\n  ?v2 \\<in> X \\<inter> fmdom' f \\<inter> fmdom' g \\<Longrightarrow>\n  fmlookup (fmrestrict_set X f) ?v2 = fmlookup (fmrestrict_set X g) ?v2", "show ?thesis"], ["proof (prove)\nusing this:\n  ?v2 \\<in> X \\<inter> fmdom' f \\<inter> fmdom' g \\<Longrightarrow>\n  fmlookup (fmrestrict_set X f) ?v2 = fmlookup (fmrestrict_set X g) ?v2\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set X f) x = fmlookup (fmrestrict_set X g) x", "using assms"], ["proof (prove)\nusing this:\n  ?v2 \\<in> X \\<inter> fmdom' f \\<inter> fmdom' g \\<Longrightarrow>\n  fmlookup (fmrestrict_set X f) ?v2 = fmlookup (fmrestrict_set X g) ?v2\n  agree (fmrestrict_set X f) (fmrestrict_set X g)\n  x \\<in> X \\<inter> fmdom' f \\<inter> fmdom' g\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set X f) x = fmlookup (fmrestrict_set X g) x", "by blast"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set X f) x = fmlookup (fmrestrict_set X g) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma agree_restrict_state_succ_idempot:\n  assumes \"(a \\<in> PROB)\" \"(s \\<in> valid_states PROB)\"\n    \"(agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s))\"\n  shows \"(fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "proof (cases \"fst a \\<subseteq>\\<^sub>f s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n 2. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "case True"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s\n\ngoal (2 subgoals):\n 1. fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n 2. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fst a \\<subseteq>\\<^sub>f s", "have \"state_succ s a = s ++\\<^sub>f snd a\""], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. state_succ s a = s ++\\<^sub>f snd a", "unfolding state_succ_def fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. (if fst a \\<subseteq>\\<^sub>f s then s ++\\<^sub>f snd a else s) =\n    s ++\\<^sub>f snd a", "by simp"], ["proof (state)\nthis:\n  state_succ s a = s ++\\<^sub>f snd a\n\ngoal (2 subgoals):\n 1. fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n 2. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "{"], ["proof (state)\nthis:\n  state_succ s a = s ++\\<^sub>f snd a\n\ngoal (2 subgoals):\n 1. fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n 2. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "fix v"], ["proof (state)\ngoal (2 subgoals):\n 1. fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n 2. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "have \"fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v = fmlookup (fmrestrict_set vs s) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n    fmlookup (fmrestrict_set vs s) v", "proof (cases \"v \\<in> fmdom' (snd a)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> fmdom' (snd a) \\<Longrightarrow>\n    fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n    fmlookup (fmrestrict_set vs s) v\n 2. v \\<notin> fmdom' (snd a) \\<Longrightarrow>\n    fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n    fmlookup (fmrestrict_set vs s) v", "case True"], ["proof (state)\nthis:\n  v \\<in> fmdom' (snd a)\n\ngoal (2 subgoals):\n 1. v \\<in> fmdom' (snd a) \\<Longrightarrow>\n    fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n    fmlookup (fmrestrict_set vs s) v\n 2. v \\<notin> fmdom' (snd a) \\<Longrightarrow>\n    fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n    fmlookup (fmrestrict_set vs s) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (snd a)", "have 1: \"fmdom' (fmrestrict_set vs (s ++\\<^sub>f snd a)) = vs \\<inter> (fmdom' s \\<union> fmdom' (snd a))\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (s ++\\<^sub>f snd a)) =\n    vs \\<inter> (fmdom' s \\<union> fmdom' (snd a))", "unfolding fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (s ++\\<^sub>f snd a)) =\n    vs \\<inter> (fmdom' s \\<union> fmdom' (snd a))", "using fmdom'_fmrestrict_set_fmadd"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (snd a)\n  fmdom' (fmrestrict_set ?X (?f ++\\<^sub>f ?g)) =\n  ?X \\<inter> (fmdom' ?f \\<union> fmdom' ?g)\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (s ++\\<^sub>f snd a)) =\n    vs \\<inter> (fmdom' s \\<union> fmdom' (snd a))", "by metis"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (s ++\\<^sub>f snd a)) =\n  vs \\<inter> (fmdom' s \\<union> fmdom' (snd a))\n\ngoal (2 subgoals):\n 1. v \\<in> fmdom' (snd a) \\<Longrightarrow>\n    fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n    fmlookup (fmrestrict_set vs s) v\n 2. v \\<notin> fmdom' (snd a) \\<Longrightarrow>\n    fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n    fmlookup (fmrestrict_set vs s) v", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (s ++\\<^sub>f snd a)) =\n  vs \\<inter> (fmdom' s \\<union> fmdom' (snd a))", "have 2: \"fmdom' (fmrestrict_set vs (snd a)) = vs \\<inter> fmdom' (snd a)\""], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (s ++\\<^sub>f snd a)) =\n  vs \\<inter> (fmdom' s \\<union> fmdom' (snd a))\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (snd a)) = vs \\<inter> fmdom' (snd a)", "using fmdom'_fmrestrict_set"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (s ++\\<^sub>f snd a)) =\n  vs \\<inter> (fmdom' s \\<union> fmdom' (snd a))\n  fmdom' (fmrestrict_set ?X ?f) = ?X \\<inter> fmdom' ?f\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set vs (snd a)) = vs \\<inter> fmdom' (snd a)", "by metis"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set vs (snd a)) = vs \\<inter> fmdom' (snd a)\n\ngoal (2 subgoals):\n 1. v \\<in> fmdom' (snd a) \\<Longrightarrow>\n    fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n    fmlookup (fmrestrict_set vs s) v\n 2. v \\<notin> fmdom' (snd a) \\<Longrightarrow>\n    fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n    fmlookup (fmrestrict_set vs s) v", "then"], ["proof (chain)\npicking this:\n  fmdom' (fmrestrict_set vs (snd a)) = vs \\<inter> fmdom' (snd a)", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) = vs \\<inter> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n    fmlookup (fmrestrict_set vs s) v", "using 1 2"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set vs (snd a)) = vs \\<inter> fmdom' (snd a)\n  fmdom' (fmrestrict_set vs (s ++\\<^sub>f snd a)) =\n  vs \\<inter> (fmdom' s \\<union> fmdom' (snd a))\n  fmdom' (fmrestrict_set vs (snd a)) = vs \\<inter> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n    fmlookup (fmrestrict_set vs s) v", "proof (cases \"v \\<in> vs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>fmdom' (fmrestrict_set vs (snd a)) =\n             vs \\<inter> fmdom' (snd a);\n     fmdom' (fmrestrict_set vs (s ++\\<^sub>f snd a)) =\n     vs \\<inter> (fmdom' s \\<union> fmdom' (snd a));\n     fmdom' (fmrestrict_set vs (snd a)) = vs \\<inter> fmdom' (snd a);\n     v \\<in> vs\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v\n 2. \\<lbrakk>fmdom' (fmrestrict_set vs (snd a)) =\n             vs \\<inter> fmdom' (snd a);\n     fmdom' (fmrestrict_set vs (s ++\\<^sub>f snd a)) =\n     vs \\<inter> (fmdom' s \\<union> fmdom' (snd a));\n     fmdom' (fmrestrict_set vs (snd a)) = vs \\<inter> fmdom' (snd a);\n     v \\<notin> vs\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v", "case true: True"], ["proof (state)\nthis:\n  v \\<in> vs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fmdom' (fmrestrict_set vs (snd a)) =\n             vs \\<inter> fmdom' (snd a);\n     fmdom' (fmrestrict_set vs (s ++\\<^sub>f snd a)) =\n     vs \\<inter> (fmdom' s \\<union> fmdom' (snd a));\n     fmdom' (fmrestrict_set vs (snd a)) = vs \\<inter> fmdom' (snd a);\n     v \\<in> vs\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v\n 2. \\<lbrakk>fmdom' (fmrestrict_set vs (snd a)) =\n             vs \\<inter> fmdom' (snd a);\n     fmdom' (fmrestrict_set vs (s ++\\<^sub>f snd a)) =\n     vs \\<inter> (fmdom' s \\<union> fmdom' (snd a));\n     fmdom' (fmrestrict_set vs (snd a)) = vs \\<inter> fmdom' (snd a);\n     v \\<notin> vs\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> vs", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> vs\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n    fmlookup (fmrestrict_set vs s) v", "proof (cases \"v \\<in> (fmdom' s \\<inter> fmdom' (snd a))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs; v \\<in> fmdom' s \\<inter> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v\n 2. \\<lbrakk>v \\<in> vs;\n     v \\<notin> fmdom' s \\<inter> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v", "case True"], ["proof (state)\nthis:\n  v \\<in> fmdom' s \\<inter> fmdom' (snd a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs; v \\<in> fmdom' s \\<inter> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v\n 2. \\<lbrakk>v \\<in> vs;\n     v \\<notin> fmdom' s \\<inter> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' s \\<inter> fmdom' (snd a)", "have \"v \\<in> vs \\<inter> fmdom' s \\<inter> fmdom' (snd a)\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' s \\<inter> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. v \\<in> vs \\<inter> fmdom' s \\<inter> fmdom' (snd a)", "using true"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' s \\<inter> fmdom' (snd a)\n  v \\<in> vs\n\ngoal (1 subgoal):\n 1. v \\<in> vs \\<inter> fmdom' s \\<inter> fmdom' (snd a)", "by blast"], ["proof (state)\nthis:\n  v \\<in> vs \\<inter> fmdom' s \\<inter> fmdom' (snd a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs; v \\<in> fmdom' s \\<inter> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v\n 2. \\<lbrakk>v \\<in> vs;\n     v \\<notin> fmdom' s \\<inter> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> vs \\<inter> fmdom' s \\<inter> fmdom' (snd a)", "have \"fmlookup (fmrestrict_set vs (snd a)) v = fmlookup (fmrestrict_set vs s) v\""], ["proof (prove)\nusing this:\n  v \\<in> vs \\<inter> fmdom' s \\<inter> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (snd a)) v =\n    fmlookup (fmrestrict_set vs s) v", "using assms(3) fmrestrict_agree"], ["proof (prove)\nusing this:\n  v \\<in> vs \\<inter> fmdom' s \\<inter> fmdom' (snd a)\n  agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n  \\<lbrakk>agree (fmrestrict_set ?X ?f) (fmrestrict_set ?X ?g);\n   ?x \\<in> ?X \\<inter> fmdom' ?f \\<inter> fmdom' ?g\\<rbrakk>\n  \\<Longrightarrow> fmlookup (fmrestrict_set ?X ?f) ?x =\n                    fmlookup (fmrestrict_set ?X ?g) ?x\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (snd a)) v =\n    fmlookup (fmrestrict_set vs s) v", "by fast"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (snd a)) v = fmlookup (fmrestrict_set vs s) v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> vs; v \\<in> fmdom' s \\<inter> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v\n 2. \\<lbrakk>v \\<in> vs;\n     v \\<notin> fmdom' s \\<inter> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set vs (snd a)) v = fmlookup (fmrestrict_set vs s) v", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs (snd a)) v = fmlookup (fmrestrict_set vs s) v\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n    fmlookup (fmrestrict_set vs s) v", "by fastforce"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n  fmlookup (fmrestrict_set vs s) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> vs;\n     v \\<notin> fmdom' s \\<inter> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> vs;\n     v \\<notin> fmdom' s \\<inter> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v", "case False"], ["proof (state)\nthis:\n  v \\<notin> fmdom' s \\<inter> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> vs;\n     v \\<notin> fmdom' s \\<inter> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v", "then"], ["proof (chain)\npicking this:\n  v \\<notin> fmdom' s \\<inter> fmdom' (snd a)", "have \"fmdom' (snd a) \\<subseteq> fmdom' s\""], ["proof (prove)\nusing this:\n  v \\<notin> fmdom' s \\<inter> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s", "using assms(1, 2) FDOM_eff_subset_FDOM_valid_states_pair"], ["proof (prove)\nusing this:\n  v \\<notin> fmdom' s \\<inter> fmdom' (snd a)\n  a \\<in> PROB\n  s \\<in> valid_states PROB\n  \\<lbrakk>?a \\<in> ?PROB; ?s \\<in> valid_states ?PROB\\<rbrakk>\n  \\<Longrightarrow> fmdom' (snd ?a) \\<subseteq> fmdom' ?s\n\ngoal (1 subgoal):\n 1. fmdom' (snd a) \\<subseteq> fmdom' s", "by metis"], ["proof (state)\nthis:\n  fmdom' (snd a) \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> vs;\n     v \\<notin> fmdom' s \\<inter> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd a) \\<subseteq> fmdom' s", "have \"v \\<notin> fmdom' (snd a)\""], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. v \\<notin> fmdom' (snd a)", "using true False"], ["proof (prove)\nusing this:\n  fmdom' (snd a) \\<subseteq> fmdom' s\n  v \\<in> vs\n  v \\<notin> fmdom' s \\<inter> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. v \\<notin> fmdom' (snd a)", "by blast"], ["proof (state)\nthis:\n  v \\<notin> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> vs;\n     v \\<notin> fmdom' s \\<inter> fmdom' (snd a)\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v", "then"], ["proof (chain)\npicking this:\n  v \\<notin> fmdom' (snd a)", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<notin> fmdom' (snd a)\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n    fmlookup (fmrestrict_set vs s) v", "by fastforce"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n  fmlookup (fmrestrict_set vs s) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n  fmlookup (fmrestrict_set vs s) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fmdom' (fmrestrict_set vs (snd a)) =\n             vs \\<inter> fmdom' (snd a);\n     fmdom' (fmrestrict_set vs (s ++\\<^sub>f snd a)) =\n     vs \\<inter> (fmdom' s \\<union> fmdom' (snd a));\n     fmdom' (fmrestrict_set vs (snd a)) = vs \\<inter> fmdom' (snd a);\n     v \\<notin> vs\\<rbrakk>\n    \\<Longrightarrow> fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n                      fmlookup (fmrestrict_set vs s) v", "qed auto"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n  fmlookup (fmrestrict_set vs s) v\n\ngoal (1 subgoal):\n 1. v \\<notin> fmdom' (snd a) \\<Longrightarrow>\n    fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n    fmlookup (fmrestrict_set vs s) v", "qed fastforce"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) v =\n  fmlookup (fmrestrict_set vs s) v\n\ngoal (2 subgoals):\n 1. fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n 2. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "}"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) ?v2 =\n  fmlookup (fmrestrict_set vs s) ?v2\n\ngoal (2 subgoals):\n 1. fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n 2. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) ?v2 =\n  fmlookup (fmrestrict_set vs s) ?v2", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) ?v2 =\n  fmlookup (fmrestrict_set vs s) ?v2\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "unfolding state_succ_def fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) ?v2 =\n  fmlookup (fmrestrict_set vs s) ?v2\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (if fst a \\<subseteq>\\<^sub>f s then s ++\\<^sub>f snd a else s) =\n    fmrestrict_set vs s", "using fmap_ext"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set vs (s ++\\<^sub>f snd a)) ?v2 =\n  fmlookup (fmrestrict_set vs s) ?v2\n  (\\<And>x. fmlookup ?m x = fmlookup ?n x) \\<Longrightarrow> ?m = ?n\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (if fst a \\<subseteq>\\<^sub>f s then s ++\\<^sub>f snd a else s) =\n    fmrestrict_set vs s", "by metis"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "case False"], ["proof (state)\nthis:\n  \\<not> fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. \\<not> fst a \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (if fst a \\<subseteq>\\<^sub>f s then snd a ++ s else s) =\n    fmrestrict_set vs s", "by simp"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s a) = fmrestrict_set vs s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma agree_exec_idempot:\n  assumes \"(as \\<in> valid_plans PROB)\" \"(s \\<in> valid_states PROB)\"\n    \"(\\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) s)\"\n  shows \"(exec_plan s as = s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s as = s", "using assms"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  s \\<in> valid_states PROB\n  \\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) s\n\ngoal (1 subgoal):\n 1. exec_plan s as = s", "proof (induction as arbitrary: PROB s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>PROB s.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>a. ListMem a [] \\<longrightarrow> agree (snd a) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] = s\n 2. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (snd a) s\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s as = s;\n        a # as \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow> agree (snd aa) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (a # as) = s", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>as \\<in> valid_plans ?PROB; ?s \\<in> valid_states ?PROB;\n   \\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) ?s\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s as = ?s\n  a # as \\<in> valid_plans PROB\n  s \\<in> valid_states PROB\n  \\<forall>aa. ListMem aa (a # as) \\<longrightarrow> agree (snd aa) s\n\ngoal (2 subgoals):\n 1. \\<And>PROB s.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>a. ListMem a [] \\<longrightarrow> agree (snd a) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] = s\n 2. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (snd a) s\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s as = s;\n        a # as \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow> agree (snd aa) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (a # as) = s", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>as \\<in> valid_plans ?PROB; ?s \\<in> valid_states ?PROB;\n   \\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) ?s\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s as = ?s\n  a # as \\<in> valid_plans PROB\n  s \\<in> valid_states PROB\n  \\<forall>aa. ListMem aa (a # as) \\<longrightarrow> agree (snd aa) s", "have 1: \"a \\<in> PROB\""], ["proof (prove)\nusing this:\n  \\<lbrakk>as \\<in> valid_plans ?PROB; ?s \\<in> valid_states ?PROB;\n   \\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) ?s\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s as = ?s\n  a # as \\<in> valid_plans PROB\n  s \\<in> valid_states PROB\n  \\<forall>aa. ListMem aa (a # as) \\<longrightarrow> agree (snd aa) s\n\ngoal (1 subgoal):\n 1. a \\<in> PROB", "using Cons.prems(1) valid_plan_valid_head"], ["proof (prove)\nusing this:\n  \\<lbrakk>as \\<in> valid_plans ?PROB; ?s \\<in> valid_states ?PROB;\n   \\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) ?s\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s as = ?s\n  a # as \\<in> valid_plans PROB\n  s \\<in> valid_states PROB\n  \\<forall>aa. ListMem aa (a # as) \\<longrightarrow> agree (snd aa) s\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow> ?h \\<in> ?PROB\n\ngoal (1 subgoal):\n 1. a \\<in> PROB", "by fast"], ["proof (state)\nthis:\n  a \\<in> PROB\n\ngoal (2 subgoals):\n 1. \\<And>PROB s.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>a. ListMem a [] \\<longrightarrow> agree (snd a) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] = s\n 2. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (snd a) s\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s as = s;\n        a # as \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow> agree (snd aa) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (a # as) = s", "then"], ["proof (chain)\npicking this:\n  a \\<in> PROB", "have 2: \"as \\<in> valid_plans PROB\""], ["proof (prove)\nusing this:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "using Cons.prems(1) valid_plan_valid_tail"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  ?as \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "by fast"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<And>PROB s.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>a. ListMem a [] \\<longrightarrow> agree (snd a) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] = s\n 2. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (snd a) s\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s as = s;\n        a # as \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow> agree (snd aa) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (a # as) = s", "then"], ["proof (chain)\npicking this:\n  as \\<in> valid_plans PROB", "have 3: \"\\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) s\""], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) s", "using Cons.prems(3) ListMem.simps"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  \\<forall>aa. ListMem aa (a # as) \\<longrightarrow> agree (snd aa) s\n  ListMem ?a1.0 ?a2.0 =\n  ((\\<exists>x xs. ?a1.0 = x \\<and> ?a2.0 = x # xs) \\<or>\n   (\\<exists>x xs y. ?a1.0 = x \\<and> ?a2.0 = y # xs \\<and> ListMem x xs))\n\ngoal (1 subgoal):\n 1. \\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) s", "by metis"], ["proof (state)\nthis:\n  \\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) s\n\ngoal (2 subgoals):\n 1. \\<And>PROB s.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>a. ListMem a [] \\<longrightarrow> agree (snd a) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] = s\n 2. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (snd a) s\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s as = s;\n        a # as \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow> agree (snd aa) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (a # as) = s", "then"], ["proof (chain)\npicking this:\n  \\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) s", "have \"ListMem a (a # as)\""], ["proof (prove)\nusing this:\n  \\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) s\n\ngoal (1 subgoal):\n 1. ListMem a (a # as)", "using elem"], ["proof (prove)\nusing this:\n  \\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) s\n  ListMem ?x (?x # ?xs)\n\ngoal (1 subgoal):\n 1. ListMem a (a # as)", "by fast"], ["proof (state)\nthis:\n  ListMem a (a # as)\n\ngoal (2 subgoals):\n 1. \\<And>PROB s.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>a. ListMem a [] \\<longrightarrow> agree (snd a) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] = s\n 2. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (snd a) s\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s as = s;\n        a # as \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow> agree (snd aa) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (a # as) = s", "then"], ["proof (chain)\npicking this:\n  ListMem a (a # as)", "have \"agree (snd a) s\""], ["proof (prove)\nusing this:\n  ListMem a (a # as)\n\ngoal (1 subgoal):\n 1. agree (snd a) s", "using Cons.prems(3)"], ["proof (prove)\nusing this:\n  ListMem a (a # as)\n  \\<forall>aa. ListMem aa (a # as) \\<longrightarrow> agree (snd aa) s\n\ngoal (1 subgoal):\n 1. agree (snd a) s", "by blast"], ["proof (state)\nthis:\n  agree (snd a) s\n\ngoal (2 subgoals):\n 1. \\<And>PROB s.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>a. ListMem a [] \\<longrightarrow> agree (snd a) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] = s\n 2. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (snd a) s\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s as = s;\n        a # as \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow> agree (snd aa) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (a # as) = s", "then"], ["proof (chain)\npicking this:\n  agree (snd a) s", "have 4: \"state_succ s a = s\""], ["proof (prove)\nusing this:\n  agree (snd a) s\n\ngoal (1 subgoal):\n 1. state_succ s a = s", "using Cons.prems(1, 2) 1 agree_state_succ_idempot"], ["proof (prove)\nusing this:\n  agree (snd a) s\n  a # as \\<in> valid_plans PROB\n  s \\<in> valid_states PROB\n  a \\<in> PROB\n  \\<lbrakk>?a \\<in> ?PROB; ?s \\<in> valid_states ?PROB;\n   agree (snd ?a) ?s\\<rbrakk>\n  \\<Longrightarrow> state_succ ?s ?a = ?s\n\ngoal (1 subgoal):\n 1. state_succ s a = s", "by blast"], ["proof (state)\nthis:\n  state_succ s a = s\n\ngoal (2 subgoals):\n 1. \\<And>PROB s.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>a. ListMem a [] \\<longrightarrow> agree (snd a) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] = s\n 2. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (snd a) s\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s as = s;\n        a # as \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow> agree (snd aa) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (a # as) = s", "then"], ["proof (chain)\npicking this:\n  state_succ s a = s", "have \"exec_plan s as = s\""], ["proof (prove)\nusing this:\n  state_succ s a = s\n\ngoal (1 subgoal):\n 1. exec_plan s as = s", "using Cons.IH Cons.prems(2) 2 3"], ["proof (prove)\nusing this:\n  state_succ s a = s\n  \\<lbrakk>as \\<in> valid_plans ?PROB; ?s \\<in> valid_states ?PROB;\n   \\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) ?s\\<rbrakk>\n  \\<Longrightarrow> exec_plan ?s as = ?s\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<forall>a. ListMem a as \\<longrightarrow> agree (snd a) s\n\ngoal (1 subgoal):\n 1. exec_plan s as = s", "by blast"], ["proof (state)\nthis:\n  exec_plan s as = s\n\ngoal (2 subgoals):\n 1. \\<And>PROB s.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>a. ListMem a [] \\<longrightarrow> agree (snd a) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] = s\n 2. \\<And>a as PROB s.\n       \\<lbrakk>\\<And>PROB s.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (snd a) s\\<rbrakk>\n                   \\<Longrightarrow> exec_plan s as = s;\n        a # as \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow> agree (snd aa) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s (a # as) = s", "then"], ["proof (chain)\npicking this:\n  exec_plan s as = s", "show ?case"], ["proof (prove)\nusing this:\n  exec_plan s as = s\n\ngoal (1 subgoal):\n 1. exec_plan s (a # as) = s", "using 4"], ["proof (prove)\nusing this:\n  exec_plan s as = s\n  state_succ s a = s\n\ngoal (1 subgoal):\n 1. exec_plan s (a # as) = s", "by simp"], ["proof (state)\nthis:\n  exec_plan s (a # as) = s\n\ngoal (1 subgoal):\n 1. \\<And>PROB s.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s \\<in> valid_states PROB;\n        \\<forall>a. ListMem a [] \\<longrightarrow> agree (snd a) s\\<rbrakk>\n       \\<Longrightarrow> exec_plan s [] = s", "qed simp"], ["", "lemma agree_restrict_exec_idempot:\n  fixes s s'\n  assumes \"(as \\<in> valid_plans PROB)\" \"(s' \\<in> valid_states PROB)\" \"(s \\<in> valid_states PROB)\"\n    \"(\\<forall>a. ListMem a as \\<longrightarrow> agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s))\"\n    \"(fmrestrict_set vs s' = fmrestrict_set vs s)\"\n  shows  \"(fmrestrict_set vs (exec_plan s' as) = fmrestrict_set vs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s' as) = fmrestrict_set vs s", "using assms"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  s' \\<in> valid_states PROB\n  s \\<in> valid_states PROB\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n  fmrestrict_set vs s' = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s' as) = fmrestrict_set vs s", "proof (induction as arbitrary: PROB s s' vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>PROB s s' vs.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' []) =\n                         fmrestrict_set vs s\n 2. \\<And>a as PROB s s' vs.\n       \\<lbrakk>\\<And>PROB s s' vs.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s' \\<in> valid_states PROB; s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (fmrestrict_set vs (snd a))\n                        (fmrestrict_set vs s);\n                    fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s' as) =\n                                     fmrestrict_set vs s;\n        a # as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fmrestrict_set vs (snd aa)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                         fmrestrict_set vs s", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>as \\<in> valid_plans ?PROB; ?s' \\<in> valid_states ?PROB;\n   ?s \\<in> valid_states ?PROB;\n   \\<forall>a.\n      ListMem a as \\<longrightarrow>\n      agree (fmrestrict_set ?vs (snd a)) (fmrestrict_set ?vs ?s);\n   fmrestrict_set ?vs ?s' = fmrestrict_set ?vs ?s\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (exec_plan ?s' as) =\n                    fmrestrict_set ?vs ?s\n  a # as \\<in> valid_plans PROB\n  s' \\<in> valid_states PROB\n  s \\<in> valid_states PROB\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     agree (fmrestrict_set vs (snd aa)) (fmrestrict_set vs s)\n  fmrestrict_set vs s' = fmrestrict_set vs s\n\ngoal (2 subgoals):\n 1. \\<And>PROB s s' vs.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' []) =\n                         fmrestrict_set vs s\n 2. \\<And>a as PROB s s' vs.\n       \\<lbrakk>\\<And>PROB s s' vs.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s' \\<in> valid_states PROB; s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (fmrestrict_set vs (snd a))\n                        (fmrestrict_set vs s);\n                    fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s' as) =\n                                     fmrestrict_set vs s;\n        a # as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fmrestrict_set vs (snd aa)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                         fmrestrict_set vs s", "have 1: \"as \\<in> valid_plans PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "using Cons.prems(1) valid_plan_valid_tail"], ["proof (prove)\nusing this:\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  ?as \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "by fast"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<And>PROB s s' vs.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' []) =\n                         fmrestrict_set vs s\n 2. \\<And>a as PROB s s' vs.\n       \\<lbrakk>\\<And>PROB s s' vs.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s' \\<in> valid_states PROB; s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (fmrestrict_set vs (snd a))\n                        (fmrestrict_set vs s);\n                    fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s' as) =\n                                     fmrestrict_set vs s;\n        a # as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fmrestrict_set vs (snd aa)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                         fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  as \\<in> valid_plans PROB", "have 2: \"\\<forall>a. ListMem a as \\<longrightarrow> agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\""], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       ListMem a as \\<longrightarrow>\n       agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)", "using Cons.prems(4) ListMem.simps"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     agree (fmrestrict_set vs (snd aa)) (fmrestrict_set vs s)\n  ListMem ?a1.0 ?a2.0 =\n  ((\\<exists>x xs. ?a1.0 = x \\<and> ?a2.0 = x # xs) \\<or>\n   (\\<exists>x xs y. ?a1.0 = x \\<and> ?a2.0 = y # xs \\<and> ListMem x xs))\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       ListMem a as \\<longrightarrow>\n       agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)", "by metis"], ["proof (state)\nthis:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n\ngoal (2 subgoals):\n 1. \\<And>PROB s s' vs.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' []) =\n                         fmrestrict_set vs s\n 2. \\<And>a as PROB s s' vs.\n       \\<lbrakk>\\<And>PROB s s' vs.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s' \\<in> valid_states PROB; s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (fmrestrict_set vs (snd a))\n                        (fmrestrict_set vs s);\n                    fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s' as) =\n                                     fmrestrict_set vs s;\n        a # as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fmrestrict_set vs (snd aa)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                         fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)", "have 3: \"a \\<in> PROB\""], ["proof (prove)\nusing this:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n\ngoal (1 subgoal):\n 1. a \\<in> PROB", "using Cons.prems(1) valid_plan_valid_head"], ["proof (prove)\nusing this:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow> ?h \\<in> ?PROB\n\ngoal (1 subgoal):\n 1. a \\<in> PROB", "by metis"], ["proof (state)\nthis:\n  a \\<in> PROB\n\ngoal (2 subgoals):\n 1. \\<And>PROB s s' vs.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' []) =\n                         fmrestrict_set vs s\n 2. \\<And>a as PROB s s' vs.\n       \\<lbrakk>\\<And>PROB s s' vs.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s' \\<in> valid_states PROB; s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (fmrestrict_set vs (snd a))\n                        (fmrestrict_set vs s);\n                    fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s' as) =\n                                     fmrestrict_set vs s;\n        a # as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fmrestrict_set vs (snd aa)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                         fmrestrict_set vs s", "moreover"], ["proof (state)\nthis:\n  a \\<in> PROB\n\ngoal (2 subgoals):\n 1. \\<And>PROB s s' vs.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' []) =\n                         fmrestrict_set vs s\n 2. \\<And>a as PROB s s' vs.\n       \\<lbrakk>\\<And>PROB s s' vs.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s' \\<in> valid_states PROB; s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (fmrestrict_set vs (snd a))\n                        (fmrestrict_set vs s);\n                    fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s' as) =\n                                     fmrestrict_set vs s;\n        a # as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fmrestrict_set vs (snd aa)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                         fmrestrict_set vs s", "{"], ["proof (state)\nthis:\n  a \\<in> PROB\n\ngoal (2 subgoals):\n 1. \\<And>PROB s s' vs.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' []) =\n                         fmrestrict_set vs s\n 2. \\<And>a as PROB s s' vs.\n       \\<lbrakk>\\<And>PROB s s' vs.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s' \\<in> valid_states PROB; s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (fmrestrict_set vs (snd a))\n                        (fmrestrict_set vs s);\n                    fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s' as) =\n                                     fmrestrict_set vs s;\n        a # as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fmrestrict_set vs (snd aa)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                         fmrestrict_set vs s", "have \"ListMem a (a # as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListMem a (a # as)", "using elem"], ["proof (prove)\nusing this:\n  ListMem ?x (?x # ?xs)\n\ngoal (1 subgoal):\n 1. ListMem a (a # as)", "by fast"], ["proof (state)\nthis:\n  ListMem a (a # as)\n\ngoal (2 subgoals):\n 1. \\<And>PROB s s' vs.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' []) =\n                         fmrestrict_set vs s\n 2. \\<And>a as PROB s s' vs.\n       \\<lbrakk>\\<And>PROB s s' vs.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s' \\<in> valid_states PROB; s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (fmrestrict_set vs (snd a))\n                        (fmrestrict_set vs s);\n                    fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s' as) =\n                                     fmrestrict_set vs s;\n        a # as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fmrestrict_set vs (snd aa)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                         fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  ListMem a (a # as)", "have \"agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\""], ["proof (prove)\nusing this:\n  ListMem a (a # as)\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)", "using Cons.prems(4) calculation(1)"], ["proof (prove)\nusing this:\n  ListMem a (a # as)\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     agree (fmrestrict_set vs (snd aa)) (fmrestrict_set vs s)\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)", "by blast"], ["proof (state)\nthis:\n  agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n\ngoal (2 subgoals):\n 1. \\<And>PROB s s' vs.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' []) =\n                         fmrestrict_set vs s\n 2. \\<And>a as PROB s s' vs.\n       \\<lbrakk>\\<And>PROB s s' vs.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s' \\<in> valid_states PROB; s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (fmrestrict_set vs (snd a))\n                        (fmrestrict_set vs s);\n                    fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s' as) =\n                                     fmrestrict_set vs s;\n        a # as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fmrestrict_set vs (snd aa)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                         fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)", "have \"agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s')\""], ["proof (prove)\nusing this:\n  agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s')", "using Cons.prems(5)"], ["proof (prove)\nusing this:\n  agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n  fmrestrict_set vs s' = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s')", "by simp"], ["proof (state)\nthis:\n  agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s')\n\ngoal (2 subgoals):\n 1. \\<And>PROB s s' vs.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' []) =\n                         fmrestrict_set vs s\n 2. \\<And>a as PROB s s' vs.\n       \\<lbrakk>\\<And>PROB s s' vs.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s' \\<in> valid_states PROB; s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (fmrestrict_set vs (snd a))\n                        (fmrestrict_set vs s);\n                    fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s' as) =\n                                     fmrestrict_set vs s;\n        a # as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fmrestrict_set vs (snd aa)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                         fmrestrict_set vs s", "}"], ["proof (state)\nthis:\n  agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s')\n\ngoal (2 subgoals):\n 1. \\<And>PROB s s' vs.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' []) =\n                         fmrestrict_set vs s\n 2. \\<And>a as PROB s s' vs.\n       \\<lbrakk>\\<And>PROB s s' vs.\n                   \\<lbrakk>as \\<in> valid_plans PROB;\n                    s' \\<in> valid_states PROB; s \\<in> valid_states PROB;\n                    \\<forall>a.\n                       ListMem a as \\<longrightarrow>\n                       agree (fmrestrict_set vs (snd a))\n                        (fmrestrict_set vs s);\n                    fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n                   \\<Longrightarrow> fmrestrict_set vs (exec_plan s' as) =\n                                     fmrestrict_set vs s;\n        a # as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fmrestrict_set vs (snd aa)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                         fmrestrict_set vs s", "ultimately"], ["proof (chain)\npicking this:\n  a \\<in> PROB\n  agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s')", "show ?case"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s')\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s' (a # as)) = fmrestrict_set vs s", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s')\n  as \\<in> valid_plans PROB\n  s' \\<in> valid_states PROB\n  s \\<in> valid_states PROB\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n  fmrestrict_set vs s' = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s' (a # as)) = fmrestrict_set vs s", "proof (cases \"fst a \\<subseteq>\\<^sub>f s'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "case True"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "{"], ["proof (state)\nthis:\n  fst a \\<subseteq>\\<^sub>f s'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "have a: \"s' \\<in> valid_states PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' \\<in> valid_states PROB", "using Cons.prems(2)"], ["proof (prove)\nusing this:\n  s' \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. s' \\<in> valid_states PROB", "by simp"], ["proof (state)\nthis:\n  s' \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "moreover"], ["proof (state)\nthis:\n  s' \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "have \"state_succ s' a \\<in> valid_states PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s' a \\<in> valid_states PROB", "using 3 a lemma_1_i"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  s' \\<in> valid_states PROB\n  \\<lbrakk>?s \\<in> valid_states ?PROB; ?a \\<in> ?PROB\\<rbrakk>\n  \\<Longrightarrow> state_succ ?s ?a \\<in> valid_states ?PROB\n\ngoal (1 subgoal):\n 1. state_succ s' a \\<in> valid_states PROB", "by blast"], ["proof (state)\nthis:\n  state_succ s' a \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "moreover"], ["proof (state)\nthis:\n  state_succ s' a \\<in> valid_states PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "have\n        \" \\<forall>a. ListMem a as \\<longrightarrow> agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       ListMem a as \\<longrightarrow>\n       agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)", "using 2"], ["proof (prove)\nusing this:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       ListMem a as \\<longrightarrow>\n       agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)", "by blast"], ["proof (state)\nthis:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "moreover"], ["proof (state)\nthis:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "{"], ["proof (state)\nthis:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "have \"ListMem a (a # as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListMem a (a # as)", "using elem"], ["proof (prove)\nusing this:\n  ListMem ?x (?x # ?xs)\n\ngoal (1 subgoal):\n 1. ListMem a (a # as)", "by fast"], ["proof (state)\nthis:\n  ListMem a (a # as)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  ListMem a (a # as)", "have \"agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\""], ["proof (prove)\nusing this:\n  ListMem a (a # as)\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)", "using Cons.prems(4) calculation(1)"], ["proof (prove)\nusing this:\n  ListMem a (a # as)\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     agree (fmrestrict_set vs (snd aa)) (fmrestrict_set vs s)\n  s' \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)", "by blast"], ["proof (state)\nthis:\n  agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)", "have \"fmrestrict_set vs (state_succ s' a) = fmrestrict_set vs s\""], ["proof (prove)\nusing this:\n  agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s' a) = fmrestrict_set vs s", "using Cons.prems(5) 3 a agree_restrict_state_succ_idempot"], ["proof (prove)\nusing this:\n  agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n  fmrestrict_set vs s' = fmrestrict_set vs s\n  a \\<in> PROB\n  s' \\<in> valid_states PROB\n  \\<lbrakk>?a \\<in> ?PROB; ?s \\<in> valid_states ?PROB;\n   agree (fmrestrict_set ?vs (snd ?a)) (fmrestrict_set ?vs ?s)\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (state_succ ?s ?a) =\n                    fmrestrict_set ?vs ?s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s' a) = fmrestrict_set vs s", "by metis"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s' a) = fmrestrict_set vs s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "}"], ["proof (state)\nthis:\n  fmrestrict_set vs (state_succ s' a) = fmrestrict_set vs s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "ultimately"], ["proof (chain)\npicking this:\n  s' \\<in> valid_states PROB\n  state_succ s' a \\<in> valid_states PROB\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n  fmrestrict_set vs (state_succ s' a) = fmrestrict_set vs s", "have \"fmrestrict_set vs (exec_plan (state_succ s' a) as) = fmrestrict_set vs s\""], ["proof (prove)\nusing this:\n  s' \\<in> valid_states PROB\n  state_succ s' a \\<in> valid_states PROB\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n  fmrestrict_set vs (state_succ s' a) = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan (state_succ s' a) as) = fmrestrict_set vs s", "using assms(3) 1 Cons.IH[where s'=\"state_succ s' a\"]"], ["proof (prove)\nusing this:\n  s' \\<in> valid_states PROB\n  state_succ s' a \\<in> valid_states PROB\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n  fmrestrict_set vs (state_succ s' a) = fmrestrict_set vs s\n  s \\<in> valid_states PROB\n  as \\<in> valid_plans PROB\n  \\<lbrakk>as \\<in> valid_plans ?PROB;\n   state_succ s' a \\<in> valid_states ?PROB; ?s \\<in> valid_states ?PROB;\n   \\<forall>a.\n      ListMem a as \\<longrightarrow>\n      agree (fmrestrict_set ?vs (snd a)) (fmrestrict_set ?vs ?s);\n   fmrestrict_set ?vs (state_succ s' a) = fmrestrict_set ?vs ?s\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (exec_plan (state_succ s' a) as) =\n                    fmrestrict_set ?vs ?s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan (state_succ s' a) as) = fmrestrict_set vs s", "by auto"], ["proof (state)\nthis:\n  fmrestrict_set vs (exec_plan (state_succ s' a) as) = fmrestrict_set vs s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "}"], ["proof (state)\nthis:\n  fmrestrict_set vs (exec_plan (state_succ s' a) as) = fmrestrict_set vs s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s\n 2. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (exec_plan (state_succ s' a) as) = fmrestrict_set vs s", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (exec_plan (state_succ s' a) as) = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s' (a # as)) = fmrestrict_set vs s", "by simp"], ["proof (state)\nthis:\n  fmrestrict_set vs (exec_plan s' (a # as)) = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "case False"], ["proof (state)\nthis:\n  \\<not> fst a \\<subseteq>\\<^sub>f s'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "moreover"], ["proof (state)\nthis:\n  \\<not> fst a \\<subseteq>\\<^sub>f s'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "have \"exec_plan s' (a # as) = exec_plan s' as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_plan s' (a # as) = exec_plan s' as", "using False"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s'\n\ngoal (1 subgoal):\n 1. exec_plan s' (a # as) = exec_plan s' as", "by (simp add: state_succ_def)"], ["proof (state)\nthis:\n  exec_plan s' (a # as) = exec_plan s' as\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> PROB;\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s');\n     as \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n     s \\<in> valid_states PROB;\n     \\<forall>a.\n        ListMem a as \\<longrightarrow>\n        agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n     fmrestrict_set vs s' = fmrestrict_set vs s;\n     \\<not> fst a \\<subseteq>\\<^sub>f s'\\<rbrakk>\n    \\<Longrightarrow> fmrestrict_set vs (exec_plan s' (a # as)) =\n                      fmrestrict_set vs s", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s'\n  exec_plan s' (a # as) = exec_plan s' as", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s'\n  exec_plan s' (a # as) = exec_plan s' as\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s' (a # as)) = fmrestrict_set vs s", "using Cons.IH Cons.prems(2, 3, 5) 1 2"], ["proof (prove)\nusing this:\n  \\<not> fst a \\<subseteq>\\<^sub>f s'\n  exec_plan s' (a # as) = exec_plan s' as\n  \\<lbrakk>as \\<in> valid_plans ?PROB; ?s' \\<in> valid_states ?PROB;\n   ?s \\<in> valid_states ?PROB;\n   \\<forall>a.\n      ListMem a as \\<longrightarrow>\n      agree (fmrestrict_set ?vs (snd a)) (fmrestrict_set ?vs ?s);\n   fmrestrict_set ?vs ?s' = fmrestrict_set ?vs ?s\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (exec_plan ?s' as) =\n                    fmrestrict_set ?vs ?s\n  s' \\<in> valid_states PROB\n  s \\<in> valid_states PROB\n  fmrestrict_set vs s' = fmrestrict_set vs s\n  as \\<in> valid_plans PROB\n  \\<forall>a.\n     ListMem a as \\<longrightarrow>\n     agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s' (a # as)) = fmrestrict_set vs s", "by presburger"], ["proof (state)\nthis:\n  fmrestrict_set vs (exec_plan s' (a # as)) = fmrestrict_set vs s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmrestrict_set vs (exec_plan s' (a # as)) = fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. \\<And>PROB s s' vs.\n       \\<lbrakk>[] \\<in> valid_plans PROB; s' \\<in> valid_states PROB;\n        s \\<in> valid_states PROB;\n        \\<forall>a.\n           ListMem a [] \\<longrightarrow>\n           agree (fmrestrict_set vs (snd a)) (fmrestrict_set vs s);\n        fmrestrict_set vs s' = fmrestrict_set vs s\\<rbrakk>\n       \\<Longrightarrow> fmrestrict_set vs (exec_plan s' []) =\n                         fmrestrict_set vs s", "qed simp"], ["", "lemma agree_restrict_exec_idempot_pair:\n  fixes s s'\n  assumes \"(as \\<in> valid_plans PROB)\" \"(s' \\<in> valid_states PROB)\" \"(s \\<in> valid_states PROB)\"\n    \"(\\<forall>p e. ListMem (p, e) as \\<longrightarrow> agree (fmrestrict_set vs e) (fmrestrict_set vs s))\"\n    \"(fmrestrict_set vs s' = fmrestrict_set vs s)\"\n  shows \"(fmrestrict_set vs (exec_plan s' as) = fmrestrict_set vs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s' as) = fmrestrict_set vs s", "using assms agree_restrict_exec_idempot"], ["proof (prove)\nusing this:\n  as \\<in> valid_plans PROB\n  s' \\<in> valid_states PROB\n  s \\<in> valid_states PROB\n  \\<forall>p e.\n     ListMem (p, e) as \\<longrightarrow>\n     agree (fmrestrict_set vs e) (fmrestrict_set vs s)\n  fmrestrict_set vs s' = fmrestrict_set vs s\n  \\<lbrakk>?as \\<in> valid_plans ?PROB; ?s' \\<in> valid_states ?PROB;\n   ?s \\<in> valid_states ?PROB;\n   \\<forall>a.\n      ListMem a ?as \\<longrightarrow>\n      agree (fmrestrict_set ?vs (snd a)) (fmrestrict_set ?vs ?s);\n   fmrestrict_set ?vs ?s' = fmrestrict_set ?vs ?s\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (exec_plan ?s' ?as) =\n                    fmrestrict_set ?vs ?s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (exec_plan s' as) = fmrestrict_set vs s", "by fastforce"], ["", "lemma agree_comm: \"agree x x' = agree x' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree x x' = agree x' x", "unfolding agree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>v.\n        v \\<in> fmdom' x \\<and> v \\<in> fmdom' x' \\<longrightarrow>\n        fmlookup x v = fmlookup x' v) =\n    (\\<forall>v.\n        v \\<in> fmdom' x' \\<and> v \\<in> fmdom' x \\<longrightarrow>\n        fmlookup x' v = fmlookup x v)", "by fastforce"], ["", "lemma restricted_agree_imp_agree:\n  assumes \"(fmdom' s2 \\<subseteq> vs)\" \"(agree (fmrestrict_set vs s1) s2)\"\n  shows \"(agree s1 s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree s1 s2", "using assms contra_subsetD fmlookup_restrict_set Int_iff fmdom'_fmrestrict_set"], ["proof (prove)\nusing this:\n  fmdom' s2 \\<subseteq> vs\n  agree (fmrestrict_set vs s1) s2\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<notin> ?A\n  fmlookup (fmrestrict_set ?A ?m) ?x =\n  (if ?x \\<in> ?A then fmlookup ?m ?x else None)\n  (?c \\<in> ?A \\<inter> ?B) = (?c \\<in> ?A \\<and> ?c \\<in> ?B)\n  fmdom' (fmrestrict_set ?X ?f) = ?X \\<inter> fmdom' ?f\n\ngoal (1 subgoal):\n 1. agree s1 s2", "unfolding agree_def"], ["proof (prove)\nusing this:\n  fmdom' s2 \\<subseteq> vs\n  \\<forall>v.\n     v \\<in> fmdom' (fmrestrict_set vs s1) \\<and>\n     v \\<in> fmdom' s2 \\<longrightarrow>\n     fmlookup (fmrestrict_set vs s1) v = fmlookup s2 v\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<notin> ?A\n  fmlookup (fmrestrict_set ?A ?m) ?x =\n  (if ?x \\<in> ?A then fmlookup ?m ?x else None)\n  (?c \\<in> ?A \\<inter> ?B) = (?c \\<in> ?A \\<and> ?c \\<in> ?B)\n  fmdom' (fmrestrict_set ?X ?f) = ?X \\<inter> fmdom' ?f\n\ngoal (1 subgoal):\n 1. \\<forall>v.\n       v \\<in> fmdom' s1 \\<and> v \\<in> fmdom' s2 \\<longrightarrow>\n       fmlookup s1 v = fmlookup s2 v", "by metis"], ["", "lemma agree_imp_submap:\n  assumes \"f1 \\<subseteq>\\<^sub>f f2\"\n  shows \"agree f1 f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree f1 f2", "using assms"], ["proof (prove)\nusing this:\n  f1 \\<subseteq>\\<^sub>f f2\n\ngoal (1 subgoal):\n 1. agree f1 f2", "unfolding agree_def"], ["proof (prove)\nusing this:\n  f1 \\<subseteq>\\<^sub>f f2\n\ngoal (1 subgoal):\n 1. \\<forall>v.\n       v \\<in> fmdom' f1 \\<and> v \\<in> fmdom' f2 \\<longrightarrow>\n       fmlookup f1 v = fmlookup f2 v", "by (simp add: as_needed_asses_submap_exec_ii)"], ["", "lemma agree_FUNION:\n  assumes \"(agree fm fm1)\" \"(agree fm fm2)\"\n  shows \"(agree fm (fm1 ++ fm2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree fm (fm1 ++ fm2)", "unfolding agree_def fmap_add_ltr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v.\n       v \\<in> fmdom' fm \\<and>\n       v \\<in> fmdom' (fm2 ++\\<^sub>f fm1) \\<longrightarrow>\n       fmlookup fm v = fmlookup (fm2 ++\\<^sub>f fm1) v", "using assms"], ["proof (prove)\nusing this:\n  agree fm fm1\n  agree fm fm2\n\ngoal (1 subgoal):\n 1. \\<forall>v.\n       v \\<in> fmdom' fm \\<and>\n       v \\<in> fmdom' (fm2 ++\\<^sub>f fm1) \\<longrightarrow>\n       fmlookup fm v = fmlookup (fm2 ++\\<^sub>f fm1) v", "by (metis agree_def fmlookup_add fmlookup_dom'_iff)"], ["", "lemma agree_fm_list_union:\n  fixes fm\n  assumes \"(\\<forall>fm'. ListMem fm' fmList \\<longrightarrow> agree fm fm')\"\n  shows \"(agree fm (foldr fmap_add_ltr fmList fmempty))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree fm (foldr (++) fmList fmempty)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>fm'. ListMem fm' fmList \\<longrightarrow> agree fm fm'\n\ngoal (1 subgoal):\n 1. agree fm (foldr (++) fmList fmempty)", "proof (induction \"fmList\" arbitrary: fm)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>fm.\n       \\<forall>fm'.\n          ListMem fm' [] \\<longrightarrow> agree fm fm' \\<Longrightarrow>\n       agree fm (foldr (++) [] fmempty)\n 2. \\<And>a fmList fm.\n       \\<lbrakk>\\<And>fm.\n                   \\<forall>fm'.\n                      ListMem fm' fmList \\<longrightarrow>\n                      agree fm fm' \\<Longrightarrow>\n                   agree fm (foldr (++) fmList fmempty);\n        \\<forall>fm'.\n           ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'\\<rbrakk>\n       \\<Longrightarrow> agree fm (foldr (++) (a # fmList) fmempty)", "case Nil"], ["proof (state)\nthis:\n  \\<forall>fm'. ListMem fm' [] \\<longrightarrow> agree fm fm'\n\ngoal (2 subgoals):\n 1. \\<And>fm.\n       \\<forall>fm'.\n          ListMem fm' [] \\<longrightarrow> agree fm fm' \\<Longrightarrow>\n       agree fm (foldr (++) [] fmempty)\n 2. \\<And>a fmList fm.\n       \\<lbrakk>\\<And>fm.\n                   \\<forall>fm'.\n                      ListMem fm' fmList \\<longrightarrow>\n                      agree fm fm' \\<Longrightarrow>\n                   agree fm (foldr (++) fmList fmempty);\n        \\<forall>fm'.\n           ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'\\<rbrakk>\n       \\<Longrightarrow> agree fm (foldr (++) (a # fmList) fmempty)", "then"], ["proof (chain)\npicking this:\n  \\<forall>fm'. ListMem fm' [] \\<longrightarrow> agree fm fm'", "have \"foldr fmap_add_ltr [] fmempty = fmempty\""], ["proof (prove)\nusing this:\n  \\<forall>fm'. ListMem fm' [] \\<longrightarrow> agree fm fm'\n\ngoal (1 subgoal):\n 1. foldr (++) [] fmempty = fmempty", "using Nil"], ["proof (prove)\nusing this:\n  \\<forall>fm'. ListMem fm' [] \\<longrightarrow> agree fm fm'\n  \\<forall>fm'. ListMem fm' [] \\<longrightarrow> agree fm fm'\n\ngoal (1 subgoal):\n 1. foldr (++) [] fmempty = fmempty", "by simp"], ["proof (state)\nthis:\n  foldr (++) [] fmempty = fmempty\n\ngoal (2 subgoals):\n 1. \\<And>fm.\n       \\<forall>fm'.\n          ListMem fm' [] \\<longrightarrow> agree fm fm' \\<Longrightarrow>\n       agree fm (foldr (++) [] fmempty)\n 2. \\<And>a fmList fm.\n       \\<lbrakk>\\<And>fm.\n                   \\<forall>fm'.\n                      ListMem fm' fmList \\<longrightarrow>\n                      agree fm fm' \\<Longrightarrow>\n                   agree fm (foldr (++) fmList fmempty);\n        \\<forall>fm'.\n           ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'\\<rbrakk>\n       \\<Longrightarrow> agree fm (foldr (++) (a # fmList) fmempty)", "then"], ["proof (chain)\npicking this:\n  foldr (++) [] fmempty = fmempty", "show ?case"], ["proof (prove)\nusing this:\n  foldr (++) [] fmempty = fmempty\n\ngoal (1 subgoal):\n 1. agree fm (foldr (++) [] fmempty)", "unfolding agree_def"], ["proof (prove)\nusing this:\n  foldr (++) [] fmempty = fmempty\n\ngoal (1 subgoal):\n 1. \\<forall>v.\n       v \\<in> fmdom' fm \\<and>\n       v \\<in> fmdom' (foldr (++) [] fmempty) \\<longrightarrow>\n       fmlookup fm v = fmlookup (foldr (++) [] fmempty) v", "by auto"], ["proof (state)\nthis:\n  agree fm (foldr (++) [] fmempty)\n\ngoal (1 subgoal):\n 1. \\<And>a fmList fm.\n       \\<lbrakk>\\<And>fm.\n                   \\<forall>fm'.\n                      ListMem fm' fmList \\<longrightarrow>\n                      agree fm fm' \\<Longrightarrow>\n                   agree fm (foldr (++) fmList fmempty);\n        \\<forall>fm'.\n           ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'\\<rbrakk>\n       \\<Longrightarrow> agree fm (foldr (++) (a # fmList) fmempty)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a fmList fm.\n       \\<lbrakk>\\<And>fm.\n                   \\<forall>fm'.\n                      ListMem fm' fmList \\<longrightarrow>\n                      agree fm fm' \\<Longrightarrow>\n                   agree fm (foldr (++) fmList fmempty);\n        \\<forall>fm'.\n           ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'\\<rbrakk>\n       \\<Longrightarrow> agree fm (foldr (++) (a # fmList) fmempty)", "case (Cons a fmList)"], ["proof (state)\nthis:\n  \\<forall>fm'.\n     ListMem fm' fmList \\<longrightarrow> agree ?fm fm' \\<Longrightarrow>\n  agree ?fm (foldr (++) fmList fmempty)\n  \\<forall>fm'. ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'\n\ngoal (1 subgoal):\n 1. \\<And>a fmList fm.\n       \\<lbrakk>\\<And>fm.\n                   \\<forall>fm'.\n                      ListMem fm' fmList \\<longrightarrow>\n                      agree fm fm' \\<Longrightarrow>\n                   agree fm (foldr (++) fmList fmempty);\n        \\<forall>fm'.\n           ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'\\<rbrakk>\n       \\<Longrightarrow> agree fm (foldr (++) (a # fmList) fmempty)", "then"], ["proof (chain)\npicking this:\n  \\<forall>fm'.\n     ListMem fm' fmList \\<longrightarrow> agree ?fm fm' \\<Longrightarrow>\n  agree ?fm (foldr (++) fmList fmempty)\n  \\<forall>fm'. ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'", "have \"\\<forall>fm'. ListMem fm' fmList \\<longrightarrow> agree fm fm'\""], ["proof (prove)\nusing this:\n  \\<forall>fm'.\n     ListMem fm' fmList \\<longrightarrow> agree ?fm fm' \\<Longrightarrow>\n  agree ?fm (foldr (++) fmList fmempty)\n  \\<forall>fm'. ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'\n\ngoal (1 subgoal):\n 1. \\<forall>fm'. ListMem fm' fmList \\<longrightarrow> agree fm fm'", "using Cons.prems insert"], ["proof (prove)\nusing this:\n  \\<forall>fm'.\n     ListMem fm' fmList \\<longrightarrow> agree ?fm fm' \\<Longrightarrow>\n  agree ?fm (foldr (++) fmList fmempty)\n  \\<forall>fm'. ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'\n  \\<forall>fm'. ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'\n  ListMem ?x ?xs \\<Longrightarrow> ListMem ?x (?y # ?xs)\n\ngoal (1 subgoal):\n 1. \\<forall>fm'. ListMem fm' fmList \\<longrightarrow> agree fm fm'", "by fast"], ["proof (state)\nthis:\n  \\<forall>fm'. ListMem fm' fmList \\<longrightarrow> agree fm fm'\n\ngoal (1 subgoal):\n 1. \\<And>a fmList fm.\n       \\<lbrakk>\\<And>fm.\n                   \\<forall>fm'.\n                      ListMem fm' fmList \\<longrightarrow>\n                      agree fm fm' \\<Longrightarrow>\n                   agree fm (foldr (++) fmList fmempty);\n        \\<forall>fm'.\n           ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'\\<rbrakk>\n       \\<Longrightarrow> agree fm (foldr (++) (a # fmList) fmempty)", "then"], ["proof (chain)\npicking this:\n  \\<forall>fm'. ListMem fm' fmList \\<longrightarrow> agree fm fm'", "have 1: \"agree fm (foldr fmap_add_ltr fmList fmempty)\""], ["proof (prove)\nusing this:\n  \\<forall>fm'. ListMem fm' fmList \\<longrightarrow> agree fm fm'\n\ngoal (1 subgoal):\n 1. agree fm (foldr (++) fmList fmempty)", "using Cons.IH"], ["proof (prove)\nusing this:\n  \\<forall>fm'. ListMem fm' fmList \\<longrightarrow> agree fm fm'\n  \\<forall>fm'.\n     ListMem fm' fmList \\<longrightarrow> agree ?fm fm' \\<Longrightarrow>\n  agree ?fm (foldr (++) fmList fmempty)\n\ngoal (1 subgoal):\n 1. agree fm (foldr (++) fmList fmempty)", "by blast"], ["proof (state)\nthis:\n  agree fm (foldr (++) fmList fmempty)\n\ngoal (1 subgoal):\n 1. \\<And>a fmList fm.\n       \\<lbrakk>\\<And>fm.\n                   \\<forall>fm'.\n                      ListMem fm' fmList \\<longrightarrow>\n                      agree fm fm' \\<Longrightarrow>\n                   agree fm (foldr (++) fmList fmempty);\n        \\<forall>fm'.\n           ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'\\<rbrakk>\n       \\<Longrightarrow> agree fm (foldr (++) (a # fmList) fmempty)", "then"], ["proof (chain)\npicking this:\n  agree fm (foldr (++) fmList fmempty)", "have \"agree fm a\""], ["proof (prove)\nusing this:\n  agree fm (foldr (++) fmList fmempty)\n\ngoal (1 subgoal):\n 1. agree fm a", "using Cons.prems elem"], ["proof (prove)\nusing this:\n  agree fm (foldr (++) fmList fmempty)\n  \\<forall>fm'. ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'\n  ListMem ?x (?x # ?xs)\n\ngoal (1 subgoal):\n 1. agree fm a", "by fast"], ["proof (state)\nthis:\n  agree fm a\n\ngoal (1 subgoal):\n 1. \\<And>a fmList fm.\n       \\<lbrakk>\\<And>fm.\n                   \\<forall>fm'.\n                      ListMem fm' fmList \\<longrightarrow>\n                      agree fm fm' \\<Longrightarrow>\n                   agree fm (foldr (++) fmList fmempty);\n        \\<forall>fm'.\n           ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'\\<rbrakk>\n       \\<Longrightarrow> agree fm (foldr (++) (a # fmList) fmempty)", "then"], ["proof (chain)\npicking this:\n  agree fm a", "have \"agree fm (a ++ foldr fmap_add_ltr fmList fmempty)\""], ["proof (prove)\nusing this:\n  agree fm a\n\ngoal (1 subgoal):\n 1. agree fm (a ++ foldr (++) fmList fmempty)", "using 1 agree_FUNION"], ["proof (prove)\nusing this:\n  agree fm a\n  agree fm (foldr (++) fmList fmempty)\n  \\<lbrakk>agree ?fm ?fm1.0; agree ?fm ?fm2.0\\<rbrakk>\n  \\<Longrightarrow> agree ?fm (?fm1.0 ++ ?fm2.0)\n\ngoal (1 subgoal):\n 1. agree fm (a ++ foldr (++) fmList fmempty)", "by blast"], ["proof (state)\nthis:\n  agree fm (a ++ foldr (++) fmList fmempty)\n\ngoal (1 subgoal):\n 1. \\<And>a fmList fm.\n       \\<lbrakk>\\<And>fm.\n                   \\<forall>fm'.\n                      ListMem fm' fmList \\<longrightarrow>\n                      agree fm fm' \\<Longrightarrow>\n                   agree fm (foldr (++) fmList fmempty);\n        \\<forall>fm'.\n           ListMem fm' (a # fmList) \\<longrightarrow> agree fm fm'\\<rbrakk>\n       \\<Longrightarrow> agree fm (foldr (++) (a # fmList) fmempty)", "then"], ["proof (chain)\npicking this:\n  agree fm (a ++ foldr (++) fmList fmempty)", "show ?case"], ["proof (prove)\nusing this:\n  agree fm (a ++ foldr (++) fmList fmempty)\n\ngoal (1 subgoal):\n 1. agree fm (foldr (++) (a # fmList) fmempty)", "by simp"], ["proof (state)\nthis:\n  agree fm (foldr (++) (a # fmList) fmempty)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DRESTRICT_EQ_AGREE:\n  assumes \"(fmdom' s2 \\<subseteq> vs2)\" \"(fmdom' s1 \\<subseteq> vs1)\"\n  shows \"((fmrestrict_set vs2 s1 = fmrestrict_set vs1 s2) \\<longrightarrow> agree s1 s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs2 s1 = fmrestrict_set vs1 s2 \\<longrightarrow>\n    agree s1 s2", "using assms fmdom'_restrict_set restricted_agree_imp_agree"], ["proof (prove)\nusing this:\n  fmdom' s2 \\<subseteq> vs2\n  fmdom' s1 \\<subseteq> vs1\n  fmdom' (fmrestrict_set ?A ?m) \\<subseteq> ?A\n  \\<lbrakk>fmdom' ?s2.0 \\<subseteq> ?vs;\n   agree (fmrestrict_set ?vs ?s1.0) ?s2.0\\<rbrakk>\n  \\<Longrightarrow> agree ?s1.0 ?s2.0\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs2 s1 = fmrestrict_set vs1 s2 \\<longrightarrow>\n    agree s1 s2", "by (metis agree_def)"], ["", "lemma  SUBMAPS_AGREE: \"(s1 \\<subseteq>\\<^sub>f s) \\<and> (s2 \\<subseteq>\\<^sub>f s) \\<Longrightarrow> (agree s1 s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 \\<subseteq>\\<^sub>f s \\<and>\n    s2 \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    agree s1 s2", "unfolding agree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 \\<subseteq>\\<^sub>f s \\<and>\n    s2 \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    \\<forall>v.\n       v \\<in> fmdom' s1 \\<and> v \\<in> fmdom' s2 \\<longrightarrow>\n       fmlookup s1 v = fmlookup s2 v", "by (metis as_needed_asses_submap_exec_ii)\n\n\n\\<comment> \\<open>NOTE name shortened.\\<close>"], ["", "definition snapshot where\n  \"snapshot PROB s = {a | a. a \\<in> PROB \\<and> agree (fst a) s \\<and> agree (snd a) s}\""], ["", "lemma snapshot_pair: \"snapshot PROB s = {(p, e). (p, e) \\<in> PROB \\<and> agree p s \\<and> agree e s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snapshot PROB s =\n    {(p, e). (p, e) \\<in> PROB \\<and> agree p s \\<and> agree e s}", "unfolding snapshot_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a |a. a \\<in> PROB \\<and> agree (fst a) s \\<and> agree (snd a) s} =\n    {(p, e). (p, e) \\<in> PROB \\<and> agree p s \\<and> agree e s}", "by fastforce"], ["", "lemma action_agree_valid_in_snapshot:\n  assumes \"(a \\<in> PROB)\" \"(agree (fst a) s)\" \"(agree (snd a) s)\"\n  shows \"(a \\<in> snapshot PROB s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> snapshot PROB s", "unfolding snapshot_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> {a |a.\n             a \\<in> PROB \\<and> agree (fst a) s \\<and> agree (snd a) s}", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  agree (fst a) s\n  agree (snd a) s\n\ngoal (1 subgoal):\n 1. a \\<in> {a |a.\n             a \\<in> PROB \\<and> agree (fst a) s \\<and> agree (snd a) s}", "by blast"], ["", "lemma as_mem_agree_valid_in_snapshot:\n  assumes \"(\\<forall>a. ListMem a as \\<longrightarrow> agree (fst a) s \\<and> agree (snd a) s)\" \"(as \\<in> valid_plans PROB)\"\n  shows \"(as \\<in> valid_plans (snapshot PROB s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as \\<in> valid_plans (snapshot PROB s)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow> agree (fst a) s \\<and> agree (snd a) s\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans (snapshot PROB s)", "proof (induction as)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a.\n                ListMem a [] \\<longrightarrow>\n                agree (fst a) s \\<and> agree (snd a) s;\n     [] \\<in> valid_plans PROB\\<rbrakk>\n    \\<Longrightarrow> [] \\<in> valid_plans (snapshot PROB s)\n 2. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "case Nil"], ["proof (state)\nthis:\n  \\<forall>a.\n     ListMem a [] \\<longrightarrow> agree (fst a) s \\<and> agree (snd a) s\n  [] \\<in> valid_plans PROB\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a.\n                ListMem a [] \\<longrightarrow>\n                agree (fst a) s \\<and> agree (snd a) s;\n     [] \\<in> valid_plans PROB\\<rbrakk>\n    \\<Longrightarrow> [] \\<in> valid_plans (snapshot PROB s)\n 2. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "then"], ["proof (chain)\npicking this:\n  \\<forall>a.\n     ListMem a [] \\<longrightarrow> agree (fst a) s \\<and> agree (snd a) s\n  [] \\<in> valid_plans PROB", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>a.\n     ListMem a [] \\<longrightarrow> agree (fst a) s \\<and> agree (snd a) s\n  [] \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. [] \\<in> valid_plans (snapshot PROB s)", "using empty_plan_is_valid"], ["proof (prove)\nusing this:\n  \\<forall>a.\n     ListMem a [] \\<longrightarrow> agree (fst a) s \\<and> agree (snd a) s\n  [] \\<in> valid_plans PROB\n  [] \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. [] \\<in> valid_plans (snapshot PROB s)", "by blast"], ["proof (state)\nthis:\n  [] \\<in> valid_plans (snapshot PROB s)\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>a.\n              ListMem a as \\<longrightarrow>\n              agree (fst a) s \\<and> agree (snd a) s;\n   as \\<in> valid_plans PROB\\<rbrakk>\n  \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s)\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     agree (fst aa) s \\<and> agree (snd aa) s\n  a # as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>a.\n              ListMem a as \\<longrightarrow>\n              agree (fst a) s \\<and> agree (snd a) s;\n   as \\<in> valid_plans PROB\\<rbrakk>\n  \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s)\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     agree (fst aa) s \\<and> agree (snd aa) s\n  a # as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "have \"\\<forall>a. ListMem a as \\<longrightarrow> agree (fst a) s \\<and> agree (snd a) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       ListMem a as \\<longrightarrow> agree (fst a) s \\<and> agree (snd a) s", "using Cons.prems(1) insert"], ["proof (prove)\nusing this:\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     agree (fst aa) s \\<and> agree (snd aa) s\n  ListMem ?x ?xs \\<Longrightarrow> ListMem ?x (?y # ?xs)\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       ListMem a as \\<longrightarrow> agree (fst a) s \\<and> agree (snd a) s", "by fast"], ["proof (state)\nthis:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow> agree (fst a) s \\<and> agree (snd a) s\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "moreover"], ["proof (state)\nthis:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow> agree (fst a) s \\<and> agree (snd a) s\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "have \"(as \\<in> valid_plans PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "using Cons.prems(2) valid_plan_valid_tail"], ["proof (prove)\nusing this:\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow>\n  ?as \\<in> valid_plans ?PROB\n\ngoal (1 subgoal):\n 1. as \\<in> valid_plans PROB", "by fast"], ["proof (state)\nthis:\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow> agree (fst a) s \\<and> agree (snd a) s\n  as \\<in> valid_plans PROB", "have \"set as \\<subseteq> snapshot PROB s\""], ["proof (prove)\nusing this:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow> agree (fst a) s \\<and> agree (snd a) s\n  as \\<in> valid_plans PROB\n\ngoal (1 subgoal):\n 1. set as \\<subseteq> snapshot PROB s", "using Cons.IH valid_plans_def"], ["proof (prove)\nusing this:\n  \\<forall>a.\n     ListMem a as \\<longrightarrow> agree (fst a) s \\<and> agree (snd a) s\n  as \\<in> valid_plans PROB\n  \\<lbrakk>\\<forall>a.\n              ListMem a as \\<longrightarrow>\n              agree (fst a) s \\<and> agree (snd a) s;\n   as \\<in> valid_plans PROB\\<rbrakk>\n  \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s)\n  valid_plans ?prob \\<equiv> {as. set as \\<subseteq> ?prob}\n\ngoal (1 subgoal):\n 1. set as \\<subseteq> snapshot PROB s", "by fast"], ["proof (state)\nthis:\n  set as \\<subseteq> snapshot PROB s\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "}"], ["proof (state)\nthis:\n  set as \\<subseteq> snapshot PROB s\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "note 1 = this"], ["proof (state)\nthis:\n  set as \\<subseteq> snapshot PROB s\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "{"], ["proof (state)\nthis:\n  set as \\<subseteq> snapshot PROB s\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "have a: \"a \\<in> PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> PROB", "using Cons.prems(2) valid_plan_valid_head"], ["proof (prove)\nusing this:\n  a # as \\<in> valid_plans PROB\n  ?h # ?as \\<in> valid_plans ?PROB \\<Longrightarrow> ?h \\<in> ?PROB\n\ngoal (1 subgoal):\n 1. a \\<in> PROB", "by metis"], ["proof (state)\nthis:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "then"], ["proof (chain)\npicking this:\n  a \\<in> PROB", "have \"ListMem a (a # as)\""], ["proof (prove)\nusing this:\n  a \\<in> PROB\n\ngoal (1 subgoal):\n 1. ListMem a (a # as)", "using elem"], ["proof (prove)\nusing this:\n  a \\<in> PROB\n  ListMem ?x (?x # ?xs)\n\ngoal (1 subgoal):\n 1. ListMem a (a # as)", "by fast"], ["proof (state)\nthis:\n  ListMem a (a # as)\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "then"], ["proof (chain)\npicking this:\n  ListMem a (a # as)", "have \"agree (fst a) s \\<and> agree (snd a) s\""], ["proof (prove)\nusing this:\n  ListMem a (a # as)\n\ngoal (1 subgoal):\n 1. agree (fst a) s \\<and> agree (snd a) s", "using Cons.prems(1)"], ["proof (prove)\nusing this:\n  ListMem a (a # as)\n  \\<forall>aa.\n     ListMem aa (a # as) \\<longrightarrow>\n     agree (fst aa) s \\<and> agree (snd aa) s\n\ngoal (1 subgoal):\n 1. agree (fst a) s \\<and> agree (snd a) s", "by blast"], ["proof (state)\nthis:\n  agree (fst a) s \\<and> agree (snd a) s\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "then"], ["proof (chain)\npicking this:\n  agree (fst a) s \\<and> agree (snd a) s", "have \"a \\<in> snapshot PROB s\""], ["proof (prove)\nusing this:\n  agree (fst a) s \\<and> agree (snd a) s\n\ngoal (1 subgoal):\n 1. a \\<in> snapshot PROB s", "using a snapshot_def"], ["proof (prove)\nusing this:\n  agree (fst a) s \\<and> agree (snd a) s\n  a \\<in> PROB\n  snapshot ?PROB ?s =\n  {a |a. a \\<in> ?PROB \\<and> agree (fst a) ?s \\<and> agree (snd a) ?s}\n\ngoal (1 subgoal):\n 1. a \\<in> snapshot PROB s", "by auto"], ["proof (state)\nthis:\n  a \\<in> snapshot PROB s\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "}"], ["proof (state)\nthis:\n  a \\<in> snapshot PROB s\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "then"], ["proof (chain)\npicking this:\n  a \\<in> snapshot PROB s", "have \"set (a # as) \\<subseteq> snapshot PROB s\""], ["proof (prove)\nusing this:\n  a \\<in> snapshot PROB s\n\ngoal (1 subgoal):\n 1. set (a # as) \\<subseteq> snapshot PROB s", "using 1 set_simps(2)"], ["proof (prove)\nusing this:\n  a \\<in> snapshot PROB s\n  set as \\<subseteq> snapshot PROB s\n  set (?x21.0 # ?x22.0) = insert ?x21.0 (set ?x22.0)\n\ngoal (1 subgoal):\n 1. set (a # as) \\<subseteq> snapshot PROB s", "by simp"], ["proof (state)\nthis:\n  set (a # as) \\<subseteq> snapshot PROB s\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       \\<lbrakk>\\<lbrakk>\\<forall>a.\n                            ListMem a as \\<longrightarrow>\n                            agree (fst a) s \\<and> agree (snd a) s;\n                 as \\<in> valid_plans PROB\\<rbrakk>\n                \\<Longrightarrow> as \\<in> valid_plans (snapshot PROB s);\n        \\<forall>aa.\n           ListMem aa (a # as) \\<longrightarrow>\n           agree (fst aa) s \\<and> agree (snd aa) s;\n        a # as \\<in> valid_plans PROB\\<rbrakk>\n       \\<Longrightarrow> a # as \\<in> valid_plans (snapshot PROB s)", "then"], ["proof (chain)\npicking this:\n  set (a # as) \\<subseteq> snapshot PROB s", "show ?case"], ["proof (prove)\nusing this:\n  set (a # as) \\<subseteq> snapshot PROB s\n\ngoal (1 subgoal):\n 1. a # as \\<in> valid_plans (snapshot PROB s)", "using valid_plans_def"], ["proof (prove)\nusing this:\n  set (a # as) \\<subseteq> snapshot PROB s\n  valid_plans ?prob \\<equiv> {as. set as \\<subseteq> ?prob}\n\ngoal (1 subgoal):\n 1. a # as \\<in> valid_plans (snapshot PROB s)", "by blast"], ["proof (state)\nthis:\n  a # as \\<in> valid_plans (snapshot PROB s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fmrestrict_agree_monotonous:\n  fixes f g X\n  assumes \"agree f g\"\n  shows \"agree (fmrestrict_set X f) (fmrestrict_set X g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree (fmrestrict_set X f) (fmrestrict_set X g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. agree (fmrestrict_set X f) (fmrestrict_set X g)", "let ?F=\"fmdom' (fmrestrict_set X f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. agree (fmrestrict_set X f) (fmrestrict_set X g)", "let ?G=\"fmdom' (fmrestrict_set X g)\""], ["proof (state)\ngoal (1 subgoal):\n 1. agree (fmrestrict_set X f) (fmrestrict_set X g)", "have 1: \"?F = X \\<inter> fmdom' f\" \"?G = X \\<inter> fmdom' g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set X f) = X \\<inter> fmdom' f &&&\n    fmdom' (fmrestrict_set X g) = X \\<inter> fmdom' g", "using fmdom'_fmrestrict_set"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set ?X ?f) = ?X \\<inter> fmdom' ?f\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set X f) = X \\<inter> fmdom' f &&&\n    fmdom' (fmrestrict_set X g) = X \\<inter> fmdom' g", "by metis+"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set X f) = X \\<inter> fmdom' f\n  fmdom' (fmrestrict_set X g) = X \\<inter> fmdom' g\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set X f) (fmrestrict_set X g)", "{"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set X f) = X \\<inter> fmdom' f\n  fmdom' (fmrestrict_set X g) = X \\<inter> fmdom' g\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set X f) (fmrestrict_set X g)", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. agree (fmrestrict_set X f) (fmrestrict_set X g)", "assume \"v \\<in> ?F\" \"v \\<in> ?G\""], ["proof (state)\nthis:\n  v \\<in> fmdom' (fmrestrict_set X f)\n  v \\<in> fmdom' (fmrestrict_set X g)\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set X f) (fmrestrict_set X g)", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' (fmrestrict_set X f)\n  v \\<in> fmdom' (fmrestrict_set X g)", "have \"v \\<in> fmdom' f\" \"v \\<in> fmdom' g\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fmrestrict_set X f)\n  v \\<in> fmdom' (fmrestrict_set X g)\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' f &&& v \\<in> fmdom' g", "using 1"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fmrestrict_set X f)\n  v \\<in> fmdom' (fmrestrict_set X g)\n  fmdom' (fmrestrict_set X f) = X \\<inter> fmdom' f\n  fmdom' (fmrestrict_set X g) = X \\<inter> fmdom' g\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' f &&& v \\<in> fmdom' g", "by blast+"], ["proof (state)\nthis:\n  v \\<in> fmdom' f\n  v \\<in> fmdom' g\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set X f) (fmrestrict_set X g)", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' f\n  v \\<in> fmdom' g", "have \"fmlookup f v = fmlookup g v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' f\n  v \\<in> fmdom' g\n\ngoal (1 subgoal):\n 1. fmlookup f v = fmlookup g v", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' f\n  v \\<in> fmdom' g\n  agree f g\n\ngoal (1 subgoal):\n 1. fmlookup f v = fmlookup g v", "unfolding agree_def"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' f\n  v \\<in> fmdom' g\n  \\<forall>v.\n     v \\<in> fmdom' f \\<and> v \\<in> fmdom' g \\<longrightarrow>\n     fmlookup f v = fmlookup g v\n\ngoal (1 subgoal):\n 1. fmlookup f v = fmlookup g v", "by blast"], ["proof (state)\nthis:\n  fmlookup f v = fmlookup g v\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set X f) (fmrestrict_set X g)", "then"], ["proof (chain)\npicking this:\n  fmlookup f v = fmlookup g v", "have \"fmlookup (fmrestrict_set X f) v = fmlookup (fmrestrict_set X g) v\""], ["proof (prove)\nusing this:\n  fmlookup f v = fmlookup g v\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set X f) v = fmlookup (fmrestrict_set X g) v", "unfolding fmlookup_restrict_set"], ["proof (prove)\nusing this:\n  fmlookup f v = fmlookup g v\n\ngoal (1 subgoal):\n 1. (if v \\<in> X then fmlookup f v else None) =\n    (if v \\<in> X then fmlookup g v else None)", "by argo"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set X f) v = fmlookup (fmrestrict_set X g) v\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set X f) (fmrestrict_set X g)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?v2 \\<in> fmdom' (fmrestrict_set X f);\n   ?v2 \\<in> fmdom' (fmrestrict_set X g)\\<rbrakk>\n  \\<Longrightarrow> fmlookup (fmrestrict_set X f) ?v2 =\n                    fmlookup (fmrestrict_set X g) ?v2\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set X f) (fmrestrict_set X g)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?v2 \\<in> fmdom' (fmrestrict_set X f);\n   ?v2 \\<in> fmdom' (fmrestrict_set X g)\\<rbrakk>\n  \\<Longrightarrow> fmlookup (fmrestrict_set X f) ?v2 =\n                    fmlookup (fmrestrict_set X g) ?v2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v2 \\<in> fmdom' (fmrestrict_set X f);\n   ?v2 \\<in> fmdom' (fmrestrict_set X g)\\<rbrakk>\n  \\<Longrightarrow> fmlookup (fmrestrict_set X f) ?v2 =\n                    fmlookup (fmrestrict_set X g) ?v2\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set X f) (fmrestrict_set X g)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v2 \\<in> fmdom' (fmrestrict_set X f);\n   ?v2 \\<in> fmdom' (fmrestrict_set X g)\\<rbrakk>\n  \\<Longrightarrow> fmlookup (fmrestrict_set X f) ?v2 =\n                    fmlookup (fmrestrict_set X g) ?v2\n  agree f g\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set X f) (fmrestrict_set X g)", "unfolding agree_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v2 \\<in> fmdom' (fmrestrict_set X f);\n   ?v2 \\<in> fmdom' (fmrestrict_set X g)\\<rbrakk>\n  \\<Longrightarrow> fmlookup (fmrestrict_set X f) ?v2 =\n                    fmlookup (fmrestrict_set X g) ?v2\n  \\<forall>v.\n     v \\<in> fmdom' f \\<and> v \\<in> fmdom' g \\<longrightarrow>\n     fmlookup f v = fmlookup g v\n\ngoal (1 subgoal):\n 1. \\<forall>v.\n       v \\<in> fmdom' (fmrestrict_set X f) \\<and>\n       v \\<in> fmdom' (fmrestrict_set X g) \\<longrightarrow>\n       fmlookup (fmrestrict_set X f) v = fmlookup (fmrestrict_set X g) v", "by blast"], ["proof (state)\nthis:\n  agree (fmrestrict_set X f) (fmrestrict_set X g)\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>TODO remove if not used.\\<close>"], ["", "lemma SUBMAP_FUNION_DRESTRICT_i:\n  fixes v vsa vsb f g\n  assumes \"v \\<in> vsa\"\n  shows \"\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) f) v\n    = fmlookup (fmrestrict_set (vsa \\<inter> vs) f) v\n  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) f) v =\n    fmlookup (fmrestrict_set (vsa \\<inter> vs) f) v", "unfolding fmlookup_restrict_set"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if v \\<in> (vsa \\<union> vsb) \\<inter> vs then fmlookup f v\n     else None) =\n    (if v \\<in> vsa \\<inter> vs then fmlookup f v else None)", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> vsa\n\ngoal (1 subgoal):\n 1. (if v \\<in> (vsa \\<union> vsb) \\<inter> vs then fmlookup f v\n     else None) =\n    (if v \\<in> vsa \\<inter> vs then fmlookup f v else None)", "by auto"], ["", "lemma SUBMAP_FUNION_DRESTRICT':\n  assumes \"(agree fma fmb)\" \"(vsa \\<subseteq> fmdom' fma)\" \"(vsb \\<subseteq> fmdom' fmb)\"\n    \"(fmrestrict_set vsa fm  = fmrestrict_set (vsa \\<inter> vs) fma)\"\n    \"(fmrestrict_set vsb fm = fmrestrict_set (vsb \\<inter> vs) fmb)\"\n  shows \"(fmrestrict_set (vsa \\<union> vsb) fm = fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set (vsa \\<union> vsb) fm =\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set (vsa \\<union> vsb) fm =\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)", "let ?f=\"fmrestrict_set (vsa \\<union> vsb) fm\""], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set (vsa \\<union> vsb) fm =\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)", "let ?g=\"fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)\""], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set (vsa \\<union> vsb) fm =\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)", "have 1: \"?g = fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb ++\\<^sub>f fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb) =\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb ++\\<^sub>f\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma", "unfolding fmap_add_ltr_def fmrestrict_set_add_distrib"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb ++\\<^sub>f\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma =\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb ++\\<^sub>f\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma", "by simp"], ["proof (state)\nthis:\n  fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb) =\n  fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb ++\\<^sub>f\n  fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vsa \\<union> vsb) fm =\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)", "have 2: \"agree (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma) (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma)\n     (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb)", "using assms(1) fmrestrict_agree_monotonous"], ["proof (prove)\nusing this:\n  agree fma fmb\n  agree ?f ?g \\<Longrightarrow>\n  agree (fmrestrict_set ?X ?f) (fmrestrict_set ?X ?g)\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma)\n     (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb)", "by blast"], ["proof (state)\nthis:\n  agree (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma)\n   (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb)\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vsa \\<union> vsb) fm =\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)", "have 3:\n    \"fmdom' (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma) = ((vsa \\<union> vsb) \\<inter> vs) \\<inter> fmdom' fma\"\n    \"fmdom' (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb) = ((vsa \\<union> vsb) \\<inter> vs) \\<inter> fmdom' fmb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma) =\n    (vsa \\<union> vsb) \\<inter> vs \\<inter> fmdom' fma &&&\n    fmdom' (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb) =\n    (vsa \\<union> vsb) \\<inter> vs \\<inter> fmdom' fmb", "using fmdom'_fmrestrict_set"], ["proof (prove)\nusing this:\n  fmdom' (fmrestrict_set ?X ?f) = ?X \\<inter> fmdom' ?f\n\ngoal (1 subgoal):\n 1. fmdom' (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma) =\n    (vsa \\<union> vsb) \\<inter> vs \\<inter> fmdom' fma &&&\n    fmdom' (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb) =\n    (vsa \\<union> vsb) \\<inter> vs \\<inter> fmdom' fmb", "by metis+"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma) =\n  (vsa \\<union> vsb) \\<inter> vs \\<inter> fmdom' fma\n  fmdom' (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb) =\n  (vsa \\<union> vsb) \\<inter> vs \\<inter> fmdom' fmb\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vsa \\<union> vsb) fm =\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)", "{"], ["proof (state)\nthis:\n  fmdom' (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma) =\n  (vsa \\<union> vsb) \\<inter> vs \\<inter> fmdom' fma\n  fmdom' (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb) =\n  (vsa \\<union> vsb) \\<inter> vs \\<inter> fmdom' fmb\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vsa \\<union> vsb) fm =\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set (vsa \\<union> vsb) fm =\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)", "have \"fmlookup ?f v = fmlookup ?g v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v", "proof (cases \"v \\<in> ((vsa \\<union> vsb) \\<inter> vs)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> (vsa \\<union> vsb) \\<inter> vs \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v\n 2. v \\<notin> (vsa \\<union> vsb) \\<inter> vs \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v", "case True\n        \\<comment> \\<open>TODO unwrap smt proof.\\<close>"], ["proof (state)\nthis:\n  v \\<in> (vsa \\<union> vsb) \\<inter> vs\n\ngoal (2 subgoals):\n 1. v \\<in> (vsa \\<union> vsb) \\<inter> vs \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v\n 2. v \\<notin> (vsa \\<union> vsb) \\<inter> vs \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v", "then"], ["proof (chain)\npicking this:\n  v \\<in> (vsa \\<union> vsb) \\<inter> vs", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> (vsa \\<union> vsb) \\<inter> vs\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v", "using assms(1, 2, 3, 4, 5) 1"], ["proof (prove)\nusing this:\n  v \\<in> (vsa \\<union> vsb) \\<inter> vs\n  agree fma fmb\n  vsa \\<subseteq> fmdom' fma\n  vsb \\<subseteq> fmdom' fmb\n  fmrestrict_set vsa fm = fmrestrict_set (vsa \\<inter> vs) fma\n  fmrestrict_set vsb fm = fmrestrict_set (vsb \\<inter> vs) fmb\n  fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb) =\n  fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb ++\\<^sub>f\n  fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v", "by (smt IntD1 SUBMAP_FUNION_DRESTRICT_i UnE agree_def domIff fmdom'.rep_eq fmdom'_alt_def\n            fmdom'_fmrestrict_set fmlookup_add fmlookup_restrict_set inf_sup_distrib2 notin_fset\n            subset_iff sup_commute)"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n  fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)) v\n\ngoal (1 subgoal):\n 1. v \\<notin> (vsa \\<union> vsb) \\<inter> vs \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<notin> (vsa \\<union> vsb) \\<inter> vs \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v", "case False"], ["proof (state)\nthis:\n  v \\<notin> (vsa \\<union> vsb) \\<inter> vs\n\ngoal (1 subgoal):\n 1. v \\<notin> (vsa \\<union> vsb) \\<inter> vs \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v", "then"], ["proof (chain)\npicking this:\n  v \\<notin> (vsa \\<union> vsb) \\<inter> vs", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<notin> (vsa \\<union> vsb) \\<inter> vs\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<notin> (vsa \\<union> vsb) \\<inter> vs \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v", "have \"v \\<notin> vsa \\<union> vsb \\<or> v \\<notin> vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<notin> vsa \\<union> vsb \\<or> v \\<notin> vs", "using False"], ["proof (prove)\nusing this:\n  v \\<notin> (vsa \\<union> vsb) \\<inter> vs\n\ngoal (1 subgoal):\n 1. v \\<notin> vsa \\<union> vsb \\<or> v \\<notin> vs", "by blast"], ["proof (state)\nthis:\n  v \\<notin> vsa \\<union> vsb \\<or> v \\<notin> vs\n\ngoal (1 subgoal):\n 1. v \\<notin> (vsa \\<union> vsb) \\<inter> vs \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v", "then"], ["proof (chain)\npicking this:\n  v \\<notin> vsa \\<union> vsb \\<or> v \\<notin> vs", "have \"fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v = None\""], ["proof (prove)\nusing this:\n  v \\<notin> vsa \\<union> vsb \\<or> v \\<notin> vs\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v = None", "using assms(4, 5)"], ["proof (prove)\nusing this:\n  v \\<notin> vsa \\<union> vsb \\<or> v \\<notin> vs\n  fmrestrict_set vsa fm = fmrestrict_set (vsa \\<inter> vs) fma\n  fmrestrict_set vsb fm = fmrestrict_set (vsb \\<inter> vs) fmb\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v = None", "by (metis Int_iff Un_iff fmlookup_restrict_set)"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v = None\n\ngoal (1 subgoal):\n 1. v \\<notin> (vsa \\<union> vsb) \\<inter> vs \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v = None", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v = None\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v", "using False"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v = None\n  v \\<notin> (vsa \\<union> vsb) \\<inter> vs\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n    fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n     v", "by auto"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n  fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n  fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) v =\n  fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)) v\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vsa \\<union> vsb) fm =\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)", "}"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) ?v2 =\n  fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n   ?v2\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vsa \\<union> vsb) fm =\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) ?v2 =\n  fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n   ?v2", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) ?v2 =\n  fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n   ?v2\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vsa \\<union> vsb) fm =\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)", "using 1 fmap_ext"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set (vsa \\<union> vsb) fm) ?v2 =\n  fmlookup (fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb))\n   ?v2\n  fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb) =\n  fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fmb ++\\<^sub>f\n  fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) fma\n  (\\<And>x. fmlookup ?m x = fmlookup ?n x) \\<Longrightarrow> ?m = ?n\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vsa \\<union> vsb) fm =\n    fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set (vsa \\<union> vsb) fm =\n  fmrestrict_set ((vsa \\<union> vsb) \\<inter> vs) (fma ++ fmb)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma UNION_FUNION_DRESTRICT_SUBMAP:\n  assumes \"(vs1 \\<subseteq> fmdom' fma)\" \"(vs2 \\<subseteq> fmdom' fmb)\" \"(agree fma fmb)\"\n    \"(fmrestrict_set vs1 fma \\<subseteq>\\<^sub>f s)\" \"(fmrestrict_set vs2 fmb \\<subseteq>\\<^sub>f s)\"\n  shows \"(fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "let ?f=\"fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)\""], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "assume P: \"v \\<in> fmdom' ?f\""], ["proof (state)\nthis:\n  v \\<in> fmdom' (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb))\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "{"], ["proof (state)\nthis:\n  v \\<in> fmdom' (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb))\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "have \"v \\<in> (vs1 \\<union> vs2) \\<inter> (fmdom' fma \\<union> fmdom' fmb)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> (vs1 \\<union> vs2) \\<inter> (fmdom' fma \\<union> fmdom' fmb)", "using P"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb))\n\ngoal (1 subgoal):\n 1. v \\<in> (vs1 \\<union> vs2) \\<inter> (fmdom' fma \\<union> fmdom' fmb)", "unfolding fmap_add_ltr_def fmdom'_fmrestrict_set fmdom'_add"], ["proof (prove)\nusing this:\n  v \\<in> (vs1 \\<union> vs2) \\<inter> (fmdom' fmb \\<union> fmdom' fma)\n\ngoal (1 subgoal):\n 1. v \\<in> (vs1 \\<union> vs2) \\<inter> (fmdom' fma \\<union> fmdom' fmb)", "by force"], ["proof (state)\nthis:\n  v \\<in> (vs1 \\<union> vs2) \\<inter> (fmdom' fma \\<union> fmdom' fmb)\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "then"], ["proof (chain)\npicking this:\n  v \\<in> (vs1 \\<union> vs2) \\<inter> (fmdom' fma \\<union> fmdom' fmb)", "have \"v \\<in> vs1 \\<union> vs2\" \"v \\<in> fmdom' fma \\<union> fmdom' fmb\""], ["proof (prove)\nusing this:\n  v \\<in> (vs1 \\<union> vs2) \\<inter> (fmdom' fma \\<union> fmdom' fmb)\n\ngoal (1 subgoal):\n 1. v \\<in> vs1 \\<union> vs2 &&& v \\<in> fmdom' fma \\<union> fmdom' fmb", "by fast+"], ["proof (state)\nthis:\n  v \\<in> vs1 \\<union> vs2\n  v \\<in> fmdom' fma \\<union> fmdom' fmb\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "}"], ["proof (state)\nthis:\n  v \\<in> vs1 \\<union> vs2\n  v \\<in> fmdom' fma \\<union> fmdom' fmb\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "note 1 = this"], ["proof (state)\nthis:\n  v \\<in> vs1 \\<union> vs2\n  v \\<in> fmdom' fma \\<union> fmdom' fmb\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "then"], ["proof (chain)\npicking this:\n  v \\<in> vs1 \\<union> vs2\n  v \\<in> fmdom' fma \\<union> fmdom' fmb", "have 2: \"fmlookup ?f v = fmlookup (fmb ++\\<^sub>f fma) v\""], ["proof (prove)\nusing this:\n  v \\<in> vs1 \\<union> vs2\n  v \\<in> fmdom' fma \\<union> fmdom' fmb\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup (fmb ++\\<^sub>f fma) v", "unfolding fmlookup_restrict_set fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  v \\<in> vs1 \\<union> vs2\n  v \\<in> fmdom' fma \\<union> fmdom' fmb\n\ngoal (1 subgoal):\n 1. (if v \\<in> vs1 \\<union> vs2 then fmlookup (fmb ++\\<^sub>f fma) v\n     else None) =\n    fmlookup (fmb ++\\<^sub>f fma) v", "by argo"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n  fmlookup (fmb ++\\<^sub>f fma) v\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "then"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n  fmlookup (fmb ++\\<^sub>f fma) v", "consider\n      (i) \"v \\<in> vs1\"\n      | (ii) \"v \\<in> vs2\"\n      | (iii) \"\\<not>v\\<in> vs1 \\<and> \\<not>v\\<in>vs2\""], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n  fmlookup (fmb ++\\<^sub>f fma) v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> vs1 \\<Longrightarrow> thesis;\n     v \\<in> vs2 \\<Longrightarrow> thesis;\n     v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>v \\<in> vs1 \\<Longrightarrow> ?thesis;\n   v \\<in> vs2 \\<Longrightarrow> ?thesis;\n   v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>v \\<in> vs1 \\<Longrightarrow> ?thesis;\n   v \\<in> vs2 \\<Longrightarrow> ?thesis;\n   v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "have \"fmlookup ?f v = fmlookup s v\""], ["proof (prove)\nusing this:\n  \\<lbrakk>v \\<in> vs1 \\<Longrightarrow> ?thesis;\n   v \\<in> vs2 \\<Longrightarrow> ?thesis;\n   v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "proof (cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. v \\<in> vs1 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v\n 2. v \\<in> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v\n 3. v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "case i"], ["proof (state)\nthis:\n  v \\<in> vs1\n\ngoal (3 subgoals):\n 1. v \\<in> vs1 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v\n 2. v \\<in> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v\n 3. v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "then"], ["proof (chain)\npicking this:\n  v \\<in> vs1", "have \"v \\<in> fmdom' fma\""], ["proof (prove)\nusing this:\n  v \\<in> vs1\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' fma", "using assms(1)"], ["proof (prove)\nusing this:\n  v \\<in> vs1\n  vs1 \\<subseteq> fmdom' fma\n\ngoal (1 subgoal):\n 1. v \\<in> fmdom' fma", "by blast"], ["proof (state)\nthis:\n  v \\<in> fmdom' fma\n\ngoal (3 subgoals):\n 1. v \\<in> vs1 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v\n 2. v \\<in> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v\n 3. v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "then"], ["proof (chain)\npicking this:\n  v \\<in> fmdom' fma", "have \"fmlookup ?f v = fmlookup fma v\""], ["proof (prove)\nusing this:\n  v \\<in> fmdom' fma\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup fma v", "unfolding 2 fmlookup_add"], ["proof (prove)\nusing this:\n  v \\<in> fmdom' fma\n\ngoal (1 subgoal):\n 1. (if v |\\<in>| fmdom fma then fmlookup fma v else fmlookup fmb v) =\n    fmlookup fma v", "by (simp add: fmdom'_alt_def notin_fset)"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n  fmlookup fma v\n\ngoal (3 subgoals):\n 1. v \\<in> vs1 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v\n 2. v \\<in> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v\n 3. v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "also"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n  fmlookup fma v\n\ngoal (3 subgoals):\n 1. v \\<in> vs1 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v\n 2. v \\<in> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v\n 3. v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "have \"\\<dots> = fmlookup (fmrestrict_set vs1 fma) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup fma v = fmlookup (fmrestrict_set vs1 fma) v", "unfolding fmlookup_restrict_set"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup fma v = (if v \\<in> vs1 then fmlookup fma v else None)", "using i"], ["proof (prove)\nusing this:\n  v \\<in> vs1\n\ngoal (1 subgoal):\n 1. fmlookup fma v = (if v \\<in> vs1 then fmlookup fma v else None)", "by simp"], ["proof (state)\nthis:\n  fmlookup fma v = fmlookup (fmrestrict_set vs1 fma) v\n\ngoal (3 subgoals):\n 1. v \\<in> vs1 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v\n 2. v \\<in> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v\n 3. v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "finally"], ["proof (chain)\npicking this:\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n  fmlookup (fmrestrict_set vs1 fma) v", "show ?thesis"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n  fmlookup (fmrestrict_set vs1 fma) v\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "using assms(4)"], ["proof (prove)\nusing this:\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n  fmlookup (fmrestrict_set vs1 fma) v\n  fmrestrict_set vs1 fma \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "by (metis (mono_tags, lifting) P domIff fmdom'_notI fmsubset.rep_eq map_le_def)"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v = fmlookup s v\n\ngoal (2 subgoals):\n 1. v \\<in> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v\n 2. v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "next\n      \\<comment> \\<open>TODO unwrap smt proof.\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v\n 2. v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "case ii"], ["proof (state)\nthis:\n  v \\<in> vs2\n\ngoal (2 subgoals):\n 1. v \\<in> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v\n 2. v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "then"], ["proof (chain)\npicking this:\n  v \\<in> vs2", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> vs2\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "using assms(2, 3, 5) 2 P"], ["proof (prove)\nusing this:\n  v \\<in> vs2\n  vs2 \\<subseteq> fmdom' fmb\n  agree fma fmb\n  fmrestrict_set vs2 fmb \\<subseteq>\\<^sub>f s\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n  fmlookup (fmb ++\\<^sub>f fma) v\n  v \\<in> fmdom' (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb))\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "by (smt SUBMAP_FUNION_DRESTRICT_i agree_def\n            fmdom'.rep_eq fmdom'_fmrestrict_set fmdom'_notD fmdom'_notI fmlookup_add\n            fmrestrict_set_dom fmsubset.rep_eq inf.orderE map_le_def subset_Un_eq)"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v = fmlookup s v\n\ngoal (1 subgoal):\n 1. v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "case iii"], ["proof (state)\nthis:\n  v \\<notin> vs1 \\<and> v \\<notin> vs2\n\ngoal (1 subgoal):\n 1. v \\<notin> vs1 \\<and> v \\<notin> vs2 \\<Longrightarrow>\n    fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "then"], ["proof (chain)\npicking this:\n  v \\<notin> vs1 \\<and> v \\<notin> vs2", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<notin> vs1 \\<and> v \\<notin> vs2\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "using 1"], ["proof (prove)\nusing this:\n  v \\<notin> vs1 \\<and> v \\<notin> vs2\n  v \\<in> vs1 \\<union> vs2\n  v \\<in> fmdom' fma \\<union> fmdom' fmb\n\ngoal (1 subgoal):\n 1. fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v =\n    fmlookup s v", "by blast"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v = fmlookup s v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) v = fmlookup s v\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "}"], ["proof (state)\nthis:\n  ?v2\n  \\<in> fmdom'\n         (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) \\<Longrightarrow>\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) ?v2 =\n  fmlookup s ?v2\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "then"], ["proof (chain)\npicking this:\n  ?v2\n  \\<in> fmdom'\n         (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) \\<Longrightarrow>\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) ?v2 =\n  fmlookup s ?v2", "show ?thesis"], ["proof (prove)\nusing this:\n  ?v2\n  \\<in> fmdom'\n         (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) \\<Longrightarrow>\n  fmlookup (fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb)) ?v2 =\n  fmlookup s ?v2\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s", "by (simp add: as_needed_asses_submap_exec_vii)"], ["proof (state)\nthis:\n  fmrestrict_set (vs1 \\<union> vs2) (fma ++ fmb) \\<subseteq>\\<^sub>f s\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>TODO unwrap sledgehammered metis proof.\\<close>"], ["", "(* TODO duplicate lemma? *)"], ["", "lemma agree_DRESTRICT:\n  assumes \"agree s1 s2\"\n  shows \"agree (fmrestrict_set vs s1) (fmrestrict_set vs s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree (fmrestrict_set vs s1) (fmrestrict_set vs s2)", "using assms"], ["proof (prove)\nusing this:\n  agree s1 s2\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set vs s1) (fmrestrict_set vs s2)", "by (fact fmrestrict_agree_monotonous)"], ["", "lemma agree_DRESTRICT_2:\n  assumes \"(fmdom' s1 \\<subseteq> vs1)\" \"(fmdom' s2 \\<subseteq> vs2)\" \"(agree s1 s2)\"\n  shows \"(agree (fmrestrict_set vs2 s1) (fmrestrict_set vs1 s2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. agree (fmrestrict_set vs2 s1) (fmrestrict_set vs1 s2)", "using assms"], ["proof (prove)\nusing this:\n  fmdom' s1 \\<subseteq> vs1\n  fmdom' s2 \\<subseteq> vs2\n  agree s1 s2\n\ngoal (1 subgoal):\n 1. agree (fmrestrict_set vs2 s1) (fmrestrict_set vs1 s2)", "unfolding agree_def fmdom'_restrict_set_precise"], ["proof (prove)\nusing this:\n  fmdom' s1 \\<subseteq> vs1\n  fmdom' s2 \\<subseteq> vs2\n  \\<forall>v.\n     v \\<in> fmdom' s1 \\<and> v \\<in> fmdom' s2 \\<longrightarrow>\n     fmlookup s1 v = fmlookup s2 v\n\ngoal (1 subgoal):\n 1. \\<forall>v.\n       v \\<in> fmdom' s1 \\<inter> vs2 \\<and>\n       v \\<in> fmdom' s2 \\<inter> vs1 \\<longrightarrow>\n       fmlookup (fmrestrict_set vs2 s1) v =\n       fmlookup (fmrestrict_set vs1 s2) v", "by auto\n\n\\<comment> \\<open>NOTE added lemma.\\<close>"], ["", "lemma snapshot_eq_filter:\n  shows \"snapshot PROB s = Set.filter (\\<lambda>a. agree (fst a) s \\<and> agree (snd a) s) PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snapshot PROB s =\n    Set.filter (\\<lambda>a. agree (fst a) s \\<and> agree (snd a) s) PROB", "unfolding snapshot_def Set.filter_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a |a. a \\<in> PROB \\<and> agree (fst a) s \\<and> agree (snd a) s} =\n    {a \\<in> PROB. agree (fst a) s \\<and> agree (snd a) s}", "by presburger\n\n\\<comment> \\<open>NOTE moved up.\\<close>"], ["", "corollary snapshot_subset:\n  shows \"snapshot PROB s \\<subseteq> PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snapshot PROB s \\<subseteq> PROB", "unfolding snapshot_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a |a. a \\<in> PROB \\<and> agree (fst a) s \\<and> agree (snd a) s}\n    \\<subseteq> PROB", "using snapshot_eq_filter"], ["proof (prove)\nusing this:\n  snapshot ?PROB ?s =\n  Set.filter (\\<lambda>a. agree (fst a) ?s \\<and> agree (snd a) ?s) ?PROB\n\ngoal (1 subgoal):\n 1. {a |a. a \\<in> PROB \\<and> agree (fst a) s \\<and> agree (snd a) s}\n    \\<subseteq> PROB", "by blast"], ["", "lemma FINITE_snapshot:\n  assumes \"finite PROB\"\n  shows \"finite (snapshot PROB s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (snapshot PROB s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (snapshot PROB s)", "have \"snapshot PROB s \\<subseteq> PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snapshot PROB s \\<subseteq> PROB", "using snapshot_subset"], ["proof (prove)\nusing this:\n  snapshot ?PROB ?s \\<subseteq> ?PROB\n\ngoal (1 subgoal):\n 1. snapshot PROB s \\<subseteq> PROB", "by blast"], ["proof (state)\nthis:\n  snapshot PROB s \\<subseteq> PROB\n\ngoal (1 subgoal):\n 1. finite (snapshot PROB s)", "then"], ["proof (chain)\npicking this:\n  snapshot PROB s \\<subseteq> PROB", "show ?thesis"], ["proof (prove)\nusing this:\n  snapshot PROB s \\<subseteq> PROB\n\ngoal (1 subgoal):\n 1. finite (snapshot PROB s)", "using assms finite_subset[of \"snapshot PROB s\" PROB]"], ["proof (prove)\nusing this:\n  snapshot PROB s \\<subseteq> PROB\n  finite PROB\n  \\<lbrakk>snapshot PROB s \\<subseteq> PROB; finite PROB\\<rbrakk>\n  \\<Longrightarrow> finite (snapshot PROB s)\n\ngoal (1 subgoal):\n 1. finite (snapshot PROB s)", "by blast"], ["proof (state)\nthis:\n  finite (snapshot PROB s)\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE moved up (declared above the previous lemma).\nlemma snapshot\\_subset\\<close>\n\n\\<comment> \\<open>TODO unwrap metis proof.\\<close>"], ["", "lemma dom_proj_snapshot:\n  \"prob_dom (prob_proj PROB (prob_dom (snapshot PROB s))) = prob_dom (snapshot PROB s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB (prob_dom (snapshot PROB s))) =\n    prob_dom (snapshot PROB s)", "by (metis snapshot_subset two_children_parent_mems_le_finite prob_subset_dom_subset)"], ["", "lemma valid_states_snapshot:\n  \"valid_states (prob_proj PROB (prob_dom (snapshot PROB s))) = valid_states (snapshot PROB s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_states (prob_proj PROB (prob_dom (snapshot PROB s))) =\n    valid_states (snapshot PROB s)", "by (metis dom_proj_snapshot valid_states_def)"], ["", "lemma valid_proj_neq_succ_restricted_neq_succ:\n  assumes \"(x' \\<in> prob_proj PROB vs)\" \"(state_succ s x' \\<noteq> s)\"\n  shows \"(fmrestrict_set vs (state_succ s x') \\<noteq> fmrestrict_set vs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs (state_succ s x') \\<noteq> fmrestrict_set vs s", "unfolding state_succ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (if fst x' \\<subseteq>\\<^sub>f s then snd x' ++ s else s) \\<noteq>\n    fmrestrict_set vs s", "using FDOM_eff_subset_prob_dom_pair dom_prob_proj limited_dom_neq_restricted_neq"], ["proof (prove)\nusing this:\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  fmdom' (snd ?a) \\<subseteq> prob_dom ?PROB\n  prob_dom (prob_proj ?PROB ?vs) \\<subseteq> ?vs\n  \\<lbrakk>fmdom' ?f1.0 \\<subseteq> ?vs;\n   ?f1.0 ++ ?f2.0 \\<noteq> ?f2.0\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (?f1.0 ++ ?f2.0) \\<noteq>\n                    fmrestrict_set ?vs ?f2.0\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (if fst x' \\<subseteq>\\<^sub>f s then snd x' ++ s else s) \\<noteq>\n    fmrestrict_set vs s", "using assms(1, 2)"], ["proof (prove)\nusing this:\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  fmdom' (snd ?a) \\<subseteq> prob_dom ?PROB\n  prob_dom (prob_proj ?PROB ?vs) \\<subseteq> ?vs\n  \\<lbrakk>fmdom' ?f1.0 \\<subseteq> ?vs;\n   ?f1.0 ++ ?f2.0 \\<noteq> ?f2.0\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (?f1.0 ++ ?f2.0) \\<noteq>\n                    fmrestrict_set ?vs ?f2.0\n  x' \\<in> prob_proj PROB vs\n  state_succ s x' \\<noteq> s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs\n     (if fst x' \\<subseteq>\\<^sub>f s then snd x' ++ s else s) \\<noteq>\n    fmrestrict_set vs s", "by (smt dual_order.trans state_succ_def)"], ["", "lemma proj_successors: \"\n  ((\\<lambda>s. fmrestrict_set vs s) ` (state_successors (prob_proj PROB vs) s))\n   \\<subseteq> (state_successors (prob_proj PROB vs) (fmrestrict_set vs s))\n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "let ?A=\"((\\<lambda>s. fmrestrict_set vs s) ` (state_successors (prob_proj PROB vs) s))\""], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "let ?B=\"(state_successors (prob_proj PROB vs) (fmrestrict_set vs s))\""], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "assume P: \"x \\<in> ?A\""], ["proof (state)\nthis:\n  x \\<in> fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "then"], ["proof (chain)\npicking this:\n  x \\<in> fmrestrict_set vs ` state_successors (prob_proj PROB vs) s", "obtain x' x'' where a:\n      \"x'' \\<in> prob_proj PROB vs\" \"x' = state_succ s x''\" \"x' \\<noteq> s\" \"x = fmrestrict_set vs x'\""], ["proof (prove)\nusing this:\n  x \\<in> fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n\ngoal (1 subgoal):\n 1. (\\<And>x'' x'.\n        \\<lbrakk>x'' \\<in> prob_proj PROB vs; x' = state_succ s x'';\n         x' \\<noteq> s; x = fmrestrict_set vs x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding state_successors_def subset_iff"], ["proof (prove)\nusing this:\n  x \\<in> fmrestrict_set vs ` (state_succ s ` prob_proj PROB vs - {s})\n\ngoal (1 subgoal):\n 1. (\\<And>x'' x'.\n        \\<lbrakk>x'' \\<in> prob_proj PROB vs; x' = state_succ s x'';\n         x' \\<noteq> s; x = fmrestrict_set vs x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x'' \\<in> prob_proj PROB vs\n  x' = state_succ s x''\n  x' \\<noteq> s\n  x = fmrestrict_set vs x'\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "moreover"], ["proof (state)\nthis:\n  x'' \\<in> prob_proj PROB vs\n  x' = state_succ s x''\n  x' \\<noteq> s\n  x = fmrestrict_set vs x'\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "{"], ["proof (state)\nthis:\n  x'' \\<in> prob_proj PROB vs\n  x' = state_succ s x''\n  x' \\<noteq> s\n  x = fmrestrict_set vs x'\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "have \"(\\<exists>x''.\n        x'' \\<in> prob_proj PROB vs \\<and> x = state_succ (fmrestrict_set vs s) x''\n        \\<and> x \\<noteq> fmrestrict_set vs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "proof (cases \"fst x'' \\<subseteq>\\<^sub>f s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fst x'' \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s\n 2. \\<not> fst x'' \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "case true: True"], ["proof (state)\nthis:\n  fst x'' \\<subseteq>\\<^sub>f s\n\ngoal (2 subgoals):\n 1. fst x'' \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s\n 2. \\<not> fst x'' \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fst x'' \\<subseteq>\\<^sub>f s", "show ?thesis"], ["proof (prove)\nusing this:\n  fst x'' \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "proof (cases \"fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "case True"], ["proof (state)\nthis:\n  fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "{"], ["proof (state)\nthis:\n  fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "have \"fmdom' (snd x'') \\<subseteq> vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd x'') \\<subseteq> vs", "using a(1) FDOM_eff_subset_prob_dom_pair dom_prob_proj dual_order.trans"], ["proof (prove)\nusing this:\n  x'' \\<in> prob_proj PROB vs\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  fmdom' (snd ?a) \\<subseteq> prob_dom ?PROB\n  prob_dom (prob_proj ?PROB ?vs) \\<subseteq> ?vs\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n\ngoal (1 subgoal):\n 1. fmdom' (snd x'') \\<subseteq> vs", "by metis"], ["proof (state)\nthis:\n  fmdom' (snd x'') \\<subseteq> vs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd x'') \\<subseteq> vs", "have \"fmrestrict_set vs (snd x'') = snd x''\""], ["proof (prove)\nusing this:\n  fmdom' (snd x'') \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd x'') = snd x''", "using exec_drest_5"], ["proof (prove)\nusing this:\n  fmdom' (snd x'') \\<subseteq> vs\n  fmdom' ?x \\<subseteq> ?vs \\<Longrightarrow> fmrestrict_set ?vs ?x = ?x\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd x'') = snd x''", "by fast"], ["proof (state)\nthis:\n  fmrestrict_set vs (snd x'') = snd x''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "}"], ["proof (state)\nthis:\n  fmrestrict_set vs (snd x'') = snd x''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "note i = this"], ["proof (state)\nthis:\n  fmrestrict_set vs (snd x'') = snd x''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "{"], ["proof (state)\nthis:\n  fmrestrict_set vs (snd x'') = snd x''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "have \"x = fmrestrict_set vs (snd x'' ++ s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = fmrestrict_set vs (snd x'' ++ s)", "using a(2, 4) true"], ["proof (prove)\nusing this:\n  x' = state_succ s x''\n  x = fmrestrict_set vs x'\n  fst x'' \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. x = fmrestrict_set vs (snd x'' ++ s)", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  x' = (if fst x'' \\<subseteq>\\<^sub>f s then snd x'' ++ s else s)\n  x = fmrestrict_set vs x'\n  fst x'' \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. x = fmrestrict_set vs (snd x'' ++ s)", "by simp"], ["proof (state)\nthis:\n  x = fmrestrict_set vs (snd x'' ++ s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  x = fmrestrict_set vs (snd x'' ++ s)", "have \"x = fmrestrict_set vs (snd x'') ++ fmrestrict_set vs s\""], ["proof (prove)\nusing this:\n  x = fmrestrict_set vs (snd x'' ++ s)\n\ngoal (1 subgoal):\n 1. x = fmrestrict_set vs (snd x'') ++ fmrestrict_set vs s", "unfolding fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  x = fmrestrict_set vs (s ++\\<^sub>f snd x'')\n\ngoal (1 subgoal):\n 1. x = fmrestrict_set vs s ++\\<^sub>f fmrestrict_set vs (snd x'')", "using fmrestrict_set_add_distrib"], ["proof (prove)\nusing this:\n  x = fmrestrict_set vs (s ++\\<^sub>f snd x'')\n  fmrestrict_set ?A (?m ++\\<^sub>f ?n) =\n  fmrestrict_set ?A ?m ++\\<^sub>f fmrestrict_set ?A ?n\n\ngoal (1 subgoal):\n 1. x = fmrestrict_set vs s ++\\<^sub>f fmrestrict_set vs (snd x'')", "by simp"], ["proof (state)\nthis:\n  x = fmrestrict_set vs (snd x'') ++ fmrestrict_set vs s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  x = fmrestrict_set vs (snd x'') ++ fmrestrict_set vs s", "have \"x = snd x'' ++ fmrestrict_set vs s\""], ["proof (prove)\nusing this:\n  x = fmrestrict_set vs (snd x'') ++ fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. x = snd x'' ++ fmrestrict_set vs s", "using i"], ["proof (prove)\nusing this:\n  x = fmrestrict_set vs (snd x'') ++ fmrestrict_set vs s\n  fmrestrict_set vs (snd x'') = snd x''\n\ngoal (1 subgoal):\n 1. x = snd x'' ++ fmrestrict_set vs s", "by simp"], ["proof (state)\nthis:\n  x = snd x'' ++ fmrestrict_set vs s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  x = snd x'' ++ fmrestrict_set vs s", "have \"x = state_succ (fmrestrict_set vs s) x''\""], ["proof (prove)\nusing this:\n  x = snd x'' ++ fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. x = state_succ (fmrestrict_set vs s) x''", "unfolding state_succ_def"], ["proof (prove)\nusing this:\n  x = snd x'' ++ fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. x =\n    (if fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n     then snd x'' ++ fmrestrict_set vs s else fmrestrict_set vs s)", "using True"], ["proof (prove)\nusing this:\n  x = snd x'' ++ fmrestrict_set vs s\n  fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. x =\n    (if fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n     then snd x'' ++ fmrestrict_set vs s else fmrestrict_set vs s)", "by argo"], ["proof (state)\nthis:\n  x = state_succ (fmrestrict_set vs s) x''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "}"], ["proof (state)\nthis:\n  x = state_succ (fmrestrict_set vs s) x''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "moreover"], ["proof (state)\nthis:\n  x = state_succ (fmrestrict_set vs s) x''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "have  \"x \\<noteq> fmrestrict_set vs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> fmrestrict_set vs s", "using a valid_proj_neq_succ_restricted_neq_succ"], ["proof (prove)\nusing this:\n  x'' \\<in> prob_proj PROB vs\n  x' = state_succ s x''\n  x' \\<noteq> s\n  x = fmrestrict_set vs x'\n  \\<lbrakk>?x' \\<in> prob_proj ?PROB ?vs;\n   state_succ ?s ?x' \\<noteq> ?s\\<rbrakk>\n  \\<Longrightarrow> fmrestrict_set ?vs (state_succ ?s ?x') \\<noteq>\n                    fmrestrict_set ?vs ?s\n\ngoal (1 subgoal):\n 1. x \\<noteq> fmrestrict_set vs s", "by fast"], ["proof (state)\nthis:\n  x \\<noteq> fmrestrict_set vs s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "ultimately"], ["proof (chain)\npicking this:\n  x = state_succ (fmrestrict_set vs s) x''\n  x \\<noteq> fmrestrict_set vs s", "show ?thesis"], ["proof (prove)\nusing this:\n  x = state_succ (fmrestrict_set vs s) x''\n  x \\<noteq> fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "using a(1)"], ["proof (prove)\nusing this:\n  x = state_succ (fmrestrict_set vs s) x''\n  x \\<noteq> fmrestrict_set vs s\n  x'' \\<in> prob_proj PROB vs\n\ngoal (1 subgoal):\n 1. \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "by blast"], ["proof (state)\nthis:\n  \\<exists>x''.\n     x'' \\<in> prob_proj PROB vs \\<and>\n     x = state_succ (fmrestrict_set vs s) x'' \\<and>\n     x \\<noteq> fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "case False"], ["proof (state)\nthis:\n  \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s \\<Longrightarrow>\n    \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "have \"x'' \\<in> (\\<lambda>p. action_proj p vs) ` PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x'' \\<in> (\\<lambda>p. action_proj p vs) ` PROB", "using calculation(1) prob_proj_def"], ["proof (prove)\nusing this:\n  x'' \\<in> prob_proj PROB vs\n  prob_proj ?PROB ?vs \\<equiv> (\\<lambda>a. action_proj a ?vs) ` ?PROB\n\ngoal (1 subgoal):\n 1. x'' \\<in> (\\<lambda>p. action_proj p vs) ` PROB", "by auto"], ["proof (state)\nthis:\n  x'' \\<in> (\\<lambda>p. action_proj p vs) ` PROB\n\ngoal (1 subgoal):\n 1. \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s \\<Longrightarrow>\n    \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  x'' \\<in> (\\<lambda>p. action_proj p vs) ` PROB", "have \"action_proj x'' vs = x''\""], ["proof (prove)\nusing this:\n  x'' \\<in> (\\<lambda>p. action_proj p vs) ` PROB\n\ngoal (1 subgoal):\n 1. action_proj x'' vs = x''", "using action_proj_idempot"], ["proof (prove)\nusing this:\n  x'' \\<in> (\\<lambda>p. action_proj p vs) ` PROB\n  action_proj (action_proj ?a ?vs) ?vs = action_proj ?a ?vs\n\ngoal (1 subgoal):\n 1. action_proj x'' vs = x''", "by blast"], ["proof (state)\nthis:\n  action_proj x'' vs = x''\n\ngoal (1 subgoal):\n 1. \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s \\<Longrightarrow>\n    \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  action_proj x'' vs = x''", "show ?thesis"], ["proof (prove)\nusing this:\n  action_proj x'' vs = x''\n\ngoal (1 subgoal):\n 1. \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "by (metis (no_types) False action_proj_pair fmsubset_restrict_set_mono fstI\n                  surjective_pairing true)"], ["proof (state)\nthis:\n  \\<exists>x''.\n     x'' \\<in> prob_proj PROB vs \\<and>\n     x = state_succ (fmrestrict_set vs s) x'' \\<and>\n     x \\<noteq> fmrestrict_set vs s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x''.\n     x'' \\<in> prob_proj PROB vs \\<and>\n     x = state_succ (fmrestrict_set vs s) x'' \\<and>\n     x \\<noteq> fmrestrict_set vs s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x''.\n     x'' \\<in> prob_proj PROB vs \\<and>\n     x = state_succ (fmrestrict_set vs s) x'' \\<and>\n     x \\<noteq> fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. \\<not> fst x'' \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> fst x'' \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "case False"], ["proof (state)\nthis:\n  \\<not> fst x'' \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. \\<not> fst x'' \\<subseteq>\\<^sub>f s \\<Longrightarrow>\n    \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  \\<not> fst x'' \\<subseteq>\\<^sub>f s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> fst x'' \\<subseteq>\\<^sub>f s\n\ngoal (1 subgoal):\n 1. \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "proof (cases \"fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>\\<not> fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "case True"], ["proof (state)\nthis:\n  fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>\\<not> fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s", "have \"fmdom' (snd x'') \\<subseteq> vs\""], ["proof (prove)\nusing this:\n  fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fmdom' (snd x'') \\<subseteq> vs", "using FDOM_eff_subset_prob_dom_pair dom_prob_proj"], ["proof (prove)\nusing this:\n  fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  fmdom' (snd ?a) \\<subseteq> prob_dom ?PROB\n  prob_dom (prob_proj ?PROB ?vs) \\<subseteq> ?vs\n\ngoal (1 subgoal):\n 1. fmdom' (snd x'') \\<subseteq> vs", "using a(1) dual_order.trans"], ["proof (prove)\nusing this:\n  fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  fmdom' (snd ?a) \\<subseteq> prob_dom ?PROB\n  prob_dom (prob_proj ?PROB ?vs) \\<subseteq> ?vs\n  x'' \\<in> prob_proj PROB vs\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n\ngoal (1 subgoal):\n 1. fmdom' (snd x'') \\<subseteq> vs", "by metis"], ["proof (state)\nthis:\n  fmdom' (snd x'') \\<subseteq> vs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>\\<not> fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fmdom' (snd x'') \\<subseteq> vs", "have \"fmrestrict_set vs (snd x'') = snd x''\""], ["proof (prove)\nusing this:\n  fmdom' (snd x'') \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd x'') = snd x''", "using exec_drest_5"], ["proof (prove)\nusing this:\n  fmdom' (snd x'') \\<subseteq> vs\n  fmdom' ?x \\<subseteq> ?vs \\<Longrightarrow> fmrestrict_set ?vs ?x = ?x\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (snd x'') = snd x''", "by fast"], ["proof (state)\nthis:\n  fmrestrict_set vs (snd x'') = snd x''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> fst x'' \\<subseteq>\\<^sub>f s;\n     fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s\n 2. \\<lbrakk>\\<not> fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (snd x'') = snd x''", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (snd x'') = snd x''\n\ngoal (1 subgoal):\n 1. \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "unfolding state_succ_def fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (snd x'') = snd x''\n\ngoal (1 subgoal):\n 1. \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x =\n       (if fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n        then fmrestrict_set vs s ++\\<^sub>f snd x''\n        else fmrestrict_set vs s) \\<and>\n       x \\<noteq> fmrestrict_set vs s", "using False True sublist_as_proj_eq_as_1"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (snd x'') = snd x''\n  \\<not> fst x'' \\<subseteq>\\<^sub>f s\n  fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n  ?x \\<subseteq>\\<^sub>f fmrestrict_set ?vs ?s \\<Longrightarrow>\n  ?x \\<subseteq>\\<^sub>f ?s\n\ngoal (1 subgoal):\n 1. \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x =\n       (if fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n        then fmrestrict_set vs s ++\\<^sub>f snd x''\n        else fmrestrict_set vs s) \\<and>\n       x \\<noteq> fmrestrict_set vs s", "by fast"], ["proof (state)\nthis:\n  \\<exists>x''.\n     x'' \\<in> prob_proj PROB vs \\<and>\n     x = state_succ (fmrestrict_set vs s) x'' \\<and>\n     x \\<noteq> fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "case False"], ["proof (state)\nthis:\n  \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s", "have \"fmdom' (fst x'') \\<subseteq> vs\""], ["proof (prove)\nusing this:\n  \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fmdom' (fst x'') \\<subseteq> vs", "using FDOM_pre_subset_prob_dom_pair dom_prob_proj"], ["proof (prove)\nusing this:\n  \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  fmdom' (fst ?a) \\<subseteq> prob_dom ?PROB\n  prob_dom (prob_proj ?PROB ?vs) \\<subseteq> ?vs\n\ngoal (1 subgoal):\n 1. fmdom' (fst x'') \\<subseteq> vs", "using a(1) dual_order.trans"], ["proof (prove)\nusing this:\n  \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n  ?a \\<in> ?PROB \\<Longrightarrow>\n  fmdom' (fst ?a) \\<subseteq> prob_dom ?PROB\n  prob_dom (prob_proj ?PROB ?vs) \\<subseteq> ?vs\n  x'' \\<in> prob_proj PROB vs\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n\ngoal (1 subgoal):\n 1. fmdom' (fst x'') \\<subseteq> vs", "by metis"], ["proof (state)\nthis:\n  fmdom' (fst x'') \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fmdom' (fst x'') \\<subseteq> vs", "have \"fmrestrict_set vs (fst x'') = fst x''\""], ["proof (prove)\nusing this:\n  fmdom' (fst x'') \\<subseteq> vs\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs (fst x'') = fst x''", "by (simp add: exec_drest_5)"], ["proof (state)\nthis:\n  fmrestrict_set vs (fst x'') = fst x''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> fst x'' \\<subseteq>\\<^sub>f s;\n     \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x''.\n                         x'' \\<in> prob_proj PROB vs \\<and>\n                         x = state_succ (fmrestrict_set vs s) x'' \\<and>\n                         x \\<noteq> fmrestrict_set vs s", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs (fst x'') = fst x''", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (fst x'') = fst x''\n\ngoal (1 subgoal):\n 1. \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x = state_succ (fmrestrict_set vs s) x'' \\<and>\n       x \\<noteq> fmrestrict_set vs s", "unfolding state_succ_def fmap_add_ltr_def"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (fst x'') = fst x''\n\ngoal (1 subgoal):\n 1. \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x =\n       (if fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n        then fmrestrict_set vs s ++\\<^sub>f snd x''\n        else fmrestrict_set vs s) \\<and>\n       x \\<noteq> fmrestrict_set vs s", "using a False fmsubset_restrict_set_mono"], ["proof (prove)\nusing this:\n  fmrestrict_set vs (fst x'') = fst x''\n  x'' \\<in> prob_proj PROB vs\n  x' = state_succ s x''\n  x' \\<noteq> s\n  x = fmrestrict_set vs x'\n  \\<not> fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n  ?m \\<subseteq>\\<^sub>f ?n \\<Longrightarrow>\n  fmrestrict_set ?A ?m \\<subseteq>\\<^sub>f fmrestrict_set ?A ?n\n\ngoal (1 subgoal):\n 1. \\<exists>x''.\n       x'' \\<in> prob_proj PROB vs \\<and>\n       x =\n       (if fst x'' \\<subseteq>\\<^sub>f fmrestrict_set vs s\n        then fmrestrict_set vs s ++\\<^sub>f snd x''\n        else fmrestrict_set vs s) \\<and>\n       x \\<noteq> fmrestrict_set vs s", "by (metis state_succ_def)"], ["proof (state)\nthis:\n  \\<exists>x''.\n     x'' \\<in> prob_proj PROB vs \\<and>\n     x = state_succ (fmrestrict_set vs s) x'' \\<and>\n     x \\<noteq> fmrestrict_set vs s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x''.\n     x'' \\<in> prob_proj PROB vs \\<and>\n     x = state_succ (fmrestrict_set vs s) x'' \\<and>\n     x \\<noteq> fmrestrict_set vs s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x''.\n     x'' \\<in> prob_proj PROB vs \\<and>\n     x = state_succ (fmrestrict_set vs s) x'' \\<and>\n     x \\<noteq> fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "}"], ["proof (state)\nthis:\n  \\<exists>x''.\n     x'' \\<in> prob_proj PROB vs \\<and>\n     x = state_succ (fmrestrict_set vs s) x'' \\<and>\n     x \\<noteq> fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x''.\n     x'' \\<in> prob_proj PROB vs \\<and>\n     x = state_succ (fmrestrict_set vs s) x'' \\<and>\n     x \\<noteq> fmrestrict_set vs s", "obtain x'' where \"x'' \\<in> prob_proj PROB vs\" \"x = state_succ (fmrestrict_set vs s) x''\"\n      \"x \\<noteq> fmrestrict_set vs s\""], ["proof (prove)\nusing this:\n  \\<exists>x''.\n     x'' \\<in> prob_proj PROB vs \\<and>\n     x = state_succ (fmrestrict_set vs s) x'' \\<and>\n     x \\<noteq> fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. (\\<And>x''.\n        \\<lbrakk>x'' \\<in> prob_proj PROB vs;\n         x = state_succ (fmrestrict_set vs s) x'';\n         x \\<noteq> fmrestrict_set vs s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x'' \\<in> prob_proj PROB vs\n  x = state_succ (fmrestrict_set vs s) x''\n  x \\<noteq> fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "then"], ["proof (chain)\npicking this:\n  x'' \\<in> prob_proj PROB vs\n  x = state_succ (fmrestrict_set vs s) x''\n  x \\<noteq> fmrestrict_set vs s", "have \"x \\<in> ?B\""], ["proof (prove)\nusing this:\n  x'' \\<in> prob_proj PROB vs\n  x = state_succ (fmrestrict_set vs s) x''\n  x \\<noteq> fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. x \\<in> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "unfolding state_successors_def"], ["proof (prove)\nusing this:\n  x'' \\<in> prob_proj PROB vs\n  x = state_succ (fmrestrict_set vs s) x''\n  x \\<noteq> fmrestrict_set vs s\n\ngoal (1 subgoal):\n 1. x \\<in> state_succ (fmrestrict_set vs s) ` prob_proj PROB vs -\n            {fmrestrict_set vs s}", "by blast"], ["proof (state)\nthis:\n  x \\<in> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "}"], ["proof (state)\nthis:\n  ?x2\n  \\<in> fmrestrict_set vs `\n        state_successors (prob_proj PROB vs) s \\<Longrightarrow>\n  ?x2 \\<in> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "then"], ["proof (chain)\npicking this:\n  ?x2\n  \\<in> fmrestrict_set vs `\n        state_successors (prob_proj PROB vs) s \\<Longrightarrow>\n  ?x2 \\<in> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x2\n  \\<in> fmrestrict_set vs `\n        state_successors (prob_proj PROB vs) s \\<Longrightarrow>\n  ?x2 \\<in> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n    \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set vs ` state_successors (prob_proj PROB vs) s\n  \\<subseteq> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  state_in_successor_proj_in_state_in_successor: \"\n  (s' \\<in> state_successors (prob_proj PROB vs) s)\n  \\<Longrightarrow> (fmrestrict_set vs s'  \\<in> state_successors (prob_proj PROB vs) (fmrestrict_set vs s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' \\<in> state_successors (prob_proj PROB vs) s \\<Longrightarrow>\n    fmrestrict_set vs s'\n    \\<in> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "using proj_successors"], ["proof (prove)\nusing this:\n  fmrestrict_set ?vs ` state_successors (prob_proj ?PROB ?vs) ?s\n  \\<subseteq> state_successors (prob_proj ?PROB ?vs) (fmrestrict_set ?vs ?s)\n\ngoal (1 subgoal):\n 1. s' \\<in> state_successors (prob_proj PROB vs) s \\<Longrightarrow>\n    fmrestrict_set vs s'\n    \\<in> state_successors (prob_proj PROB vs) (fmrestrict_set vs s)", "by force"], ["", "lemma proj_FDOM_eff_subset_FDOM_valid_states:\n  fixes p e s\n  assumes \"((p, e) \\<in> prob_proj PROB vs)\" \"(s \\<in> valid_states PROB)\"\n  shows \"(fmdom' e \\<subseteq> fmdom' s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> fmdom' s", "using assms"], ["proof (prove)\nusing this:\n  (p, e) \\<in> prob_proj PROB vs\n  s \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> fmdom' s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, e) \\<in> prob_proj PROB vs;\n     s \\<in> valid_states PROB\\<rbrakk>\n    \\<Longrightarrow> fmdom' e \\<subseteq> fmdom' s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, e) \\<in> prob_proj PROB vs;\n     s \\<in> valid_states PROB\\<rbrakk>\n    \\<Longrightarrow> fmdom' e \\<subseteq> fmdom' s", "obtain p' e' where \"(p', e') \\<in> PROB\" \"(p, e) = action_proj (p', e') vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p' e'.\n        \\<lbrakk>(p', e') \\<in> PROB;\n         (p, e) = action_proj (p', e') vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  (p, e) \\<in> prob_proj PROB vs\n\ngoal (1 subgoal):\n 1. (\\<And>p' e'.\n        \\<lbrakk>(p', e') \\<in> PROB;\n         (p, e) = action_proj (p', e') vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding prob_proj_def"], ["proof (prove)\nusing this:\n  (p, e) \\<in> (\\<lambda>a. action_proj a vs) ` PROB\n\ngoal (1 subgoal):\n 1. (\\<And>p' e'.\n        \\<lbrakk>(p', e') \\<in> PROB;\n         (p, e) = action_proj (p', e') vs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  (p', e') \\<in> PROB\n  (p, e) = action_proj (p', e') vs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, e) \\<in> prob_proj PROB vs;\n     s \\<in> valid_states PROB\\<rbrakk>\n    \\<Longrightarrow> fmdom' e \\<subseteq> fmdom' s", "then"], ["proof (chain)\npicking this:\n  (p', e') \\<in> PROB\n  (p, e) = action_proj (p', e') vs", "have \"fmdom' e \\<subseteq> prob_dom (prob_proj PROB vs)\""], ["proof (prove)\nusing this:\n  (p', e') \\<in> PROB\n  (p, e) = action_proj (p', e') vs\n\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> prob_dom (prob_proj PROB vs)", "using assms FDOM_eff_subset_prob_dom"], ["proof (prove)\nusing this:\n  (p', e') \\<in> PROB\n  (p, e) = action_proj (p', e') vs\n  (p, e) \\<in> prob_proj PROB vs\n  s \\<in> valid_states PROB\n  (?p, ?e) \\<in> ?PROB \\<Longrightarrow>\n  fmdom' ?e \\<subseteq> prob_dom ?PROB\n\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> prob_dom (prob_proj PROB vs)", "by blast"], ["proof (state)\nthis:\n  fmdom' e \\<subseteq> prob_dom (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, e) \\<in> prob_proj PROB vs;\n     s \\<in> valid_states PROB\\<rbrakk>\n    \\<Longrightarrow> fmdom' e \\<subseteq> fmdom' s", "also"], ["proof (state)\nthis:\n  fmdom' e \\<subseteq> prob_dom (prob_proj PROB vs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, e) \\<in> prob_proj PROB vs;\n     s \\<in> valid_states PROB\\<rbrakk>\n    \\<Longrightarrow> fmdom' e \\<subseteq> fmdom' s", "have \"\\<dots> = prob_dom PROB \\<inter> vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) = prob_dom PROB \\<inter> vs", "using graph_plan_neq_mems_state_set_neq_len"], ["proof (prove)\nusing this:\n  prob_dom (prob_proj ?PROB ?vs) = prob_dom ?PROB \\<inter> ?vs\n\ngoal (1 subgoal):\n 1. prob_dom (prob_proj PROB vs) = prob_dom PROB \\<inter> vs", "by fast"], ["proof (state)\nthis:\n  prob_dom (prob_proj PROB vs) = prob_dom PROB \\<inter> vs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, e) \\<in> prob_proj PROB vs;\n     s \\<in> valid_states PROB\\<rbrakk>\n    \\<Longrightarrow> fmdom' e \\<subseteq> fmdom' s", "finally"], ["proof (chain)\npicking this:\n  fmdom' e \\<subseteq> prob_dom PROB \\<inter> vs", "have \"fmdom' e \\<subseteq> prob_dom PROB\""], ["proof (prove)\nusing this:\n  fmdom' e \\<subseteq> prob_dom PROB \\<inter> vs\n\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> prob_dom PROB", "by simp"], ["proof (state)\nthis:\n  fmdom' e \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, e) \\<in> prob_proj PROB vs;\n     s \\<in> valid_states PROB\\<rbrakk>\n    \\<Longrightarrow> fmdom' e \\<subseteq> fmdom' s", "}"], ["proof (state)\nthis:\n  fmdom' e \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, e) \\<in> prob_proj PROB vs;\n     s \\<in> valid_states PROB\\<rbrakk>\n    \\<Longrightarrow> fmdom' e \\<subseteq> fmdom' s", "moreover"], ["proof (state)\nthis:\n  fmdom' e \\<subseteq> prob_dom PROB\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, e) \\<in> prob_proj PROB vs;\n     s \\<in> valid_states PROB\\<rbrakk>\n    \\<Longrightarrow> fmdom' e \\<subseteq> fmdom' s", "have \"fmdom' s = prob_dom PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' s = prob_dom PROB", "using assms(2)"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n\ngoal (1 subgoal):\n 1. fmdom' s = prob_dom PROB", "unfolding valid_states_def"], ["proof (prove)\nusing this:\n  s \\<in> {s. fmdom' s = prob_dom PROB}\n\ngoal (1 subgoal):\n 1. fmdom' s = prob_dom PROB", "by simp"], ["proof (state)\nthis:\n  fmdom' s = prob_dom PROB\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, e) \\<in> prob_proj PROB vs;\n     s \\<in> valid_states PROB\\<rbrakk>\n    \\<Longrightarrow> fmdom' e \\<subseteq> fmdom' s", "ultimately"], ["proof (chain)\npicking this:\n  fmdom' e \\<subseteq> prob_dom PROB\n  fmdom' s = prob_dom PROB", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' e \\<subseteq> prob_dom PROB\n  fmdom' s = prob_dom PROB\n\ngoal (1 subgoal):\n 1. fmdom' e \\<subseteq> fmdom' s", "by simp"], ["proof (state)\nthis:\n  fmdom' e \\<subseteq> fmdom' s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma valid_proj_action_valid_succ:\n  assumes \"(h \\<in> prob_proj PROB vs)\" \"(s \\<in> valid_states PROB)\"\n  shows \"(state_succ s h \\<in> valid_states PROB)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s h \\<in> valid_states PROB", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. state_succ s h \\<in> valid_states PROB", "have \"fmdom' (snd h) \\<subseteq> fmdom' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (snd h) \\<subseteq> fmdom' s", "using assms proj_FDOM_eff_subset_FDOM_valid_states surjective_pairing"], ["proof (prove)\nusing this:\n  h \\<in> prob_proj PROB vs\n  s \\<in> valid_states PROB\n  \\<lbrakk>(?p, ?e) \\<in> prob_proj ?PROB ?vs;\n   ?s \\<in> valid_states ?PROB\\<rbrakk>\n  \\<Longrightarrow> fmdom' ?e \\<subseteq> fmdom' ?s\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. fmdom' (snd h) \\<subseteq> fmdom' s", "by metis"], ["proof (state)\nthis:\n  fmdom' (snd h) \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. state_succ s h \\<in> valid_states PROB", "moreover"], ["proof (state)\nthis:\n  fmdom' (snd h) \\<subseteq> fmdom' s\n\ngoal (1 subgoal):\n 1. state_succ s h \\<in> valid_states PROB", "have \"fmdom' (state_succ s h) = fmdom' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmdom' (state_succ s h) = fmdom' s", "using calculation(1) FDOM_state_succ"], ["proof (prove)\nusing this:\n  fmdom' (snd h) \\<subseteq> fmdom' s\n  fmdom' (snd ?a) \\<subseteq> fmdom' ?s \\<Longrightarrow>\n  fmdom' (state_succ ?s ?a) = fmdom' ?s\n\ngoal (1 subgoal):\n 1. fmdom' (state_succ s h) = fmdom' s", "by metis"], ["proof (state)\nthis:\n  fmdom' (state_succ s h) = fmdom' s\n\ngoal (1 subgoal):\n 1. state_succ s h \\<in> valid_states PROB", "ultimately"], ["proof (chain)\npicking this:\n  fmdom' (snd h) \\<subseteq> fmdom' s\n  fmdom' (state_succ s h) = fmdom' s", "show ?thesis"], ["proof (prove)\nusing this:\n  fmdom' (snd h) \\<subseteq> fmdom' s\n  fmdom' (state_succ s h) = fmdom' s\n\ngoal (1 subgoal):\n 1. state_succ s h \\<in> valid_states PROB", "using assms(2) valid_states_def"], ["proof (prove)\nusing this:\n  fmdom' (snd h) \\<subseteq> fmdom' s\n  fmdom' (state_succ s h) = fmdom' s\n  s \\<in> valid_states PROB\n  valid_states ?prob \\<equiv> {s. fmdom' s = prob_dom ?prob}\n\ngoal (1 subgoal):\n 1. state_succ s h \\<in> valid_states PROB", "by blast"], ["proof (state)\nthis:\n  state_succ s h \\<in> valid_states PROB\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proj_successors_of_valid_are_valid:\n  assumes \"(s \\<in> valid_states PROB)\"\n  shows \"(state_successors (prob_proj PROB vs) s \\<subseteq> (valid_states PROB))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_successors (prob_proj PROB vs) s \\<subseteq> valid_states PROB", "unfolding state_successors_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. state_succ s ` prob_proj PROB vs - {s} \\<subseteq> valid_states PROB", "using assms valid_proj_action_valid_succ"], ["proof (prove)\nusing this:\n  s \\<in> valid_states PROB\n  \\<lbrakk>?h \\<in> prob_proj ?PROB ?vs;\n   ?s \\<in> valid_states ?PROB\\<rbrakk>\n  \\<Longrightarrow> state_succ ?s ?h \\<in> valid_states ?PROB\n\ngoal (1 subgoal):\n 1. state_succ s ` prob_proj PROB vs - {s} \\<subseteq> valid_states PROB", "by blast"], ["", "subsection \"State Space Projection\"\n\n\\<comment> \\<open>NOTE  name shortened.\\<close>"], ["", "definition ss_proj where\n  \"ss_proj ss vs \\<equiv> (\\<lambda>s. fmrestrict_set vs s) ` ss\"\n\n\\<comment> \\<open>NOTE added lemma.\\<close>\n\\<comment> \\<open>TODO refactor into 'Fmap\\_Utils'.\\<close>"], ["", "lemma fmrestrict_set_inter_img:\n  fixes A X Y\n  shows \"fmrestrict_set (X \\<inter> Y) ` A = (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "proof -\n  \\<comment> \\<open>NOTE Proof by mutual inclusion.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "let ?lhs = \"fmrestrict_set (X \\<inter> Y) ` A\""], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "let ?rhs = \"(fmrestrict_set X \\<circ> fmrestrict_set Y) ` A\""], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "assume \"a \\<in> A\""], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "have \"(fmrestrict_set X \\<circ> fmrestrict_set Y) a = fmrestrict_set X (fmrestrict_set Y a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrestrict_set X \\<circ> fmrestrict_set Y) a =\n    fmrestrict_set X (fmrestrict_set Y a)", "by auto"], ["proof (state)\nthis:\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) a =\n  fmrestrict_set X (fmrestrict_set Y a)\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "also"], ["proof (state)\nthis:\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) a =\n  fmrestrict_set X (fmrestrict_set Y a)\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "have \"\\<dots> = fmrestrict_set (X \\<inter> Y) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set X (fmrestrict_set Y a) = fmrestrict_set (X \\<inter> Y) a", "using action_proj_inter_i"], ["proof (prove)\nusing this:\n  fmrestrict_set ?V (fmrestrict_set ?W ?f) =\n  fmrestrict_set (?V \\<inter> ?W) ?f\n\ngoal (1 subgoal):\n 1. fmrestrict_set X (fmrestrict_set Y a) = fmrestrict_set (X \\<inter> Y) a", "by fast"], ["proof (state)\nthis:\n  fmrestrict_set X (fmrestrict_set Y a) = fmrestrict_set (X \\<inter> Y) a\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "finally"], ["proof (chain)\npicking this:\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) a =\n  fmrestrict_set (X \\<inter> Y) a", "have \"(fmrestrict_set X \\<circ> fmrestrict_set Y) a = fmrestrict_set (X \\<inter> Y) a\""], ["proof (prove)\nusing this:\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) a =\n  fmrestrict_set (X \\<inter> Y) a\n\ngoal (1 subgoal):\n 1. (fmrestrict_set X \\<circ> fmrestrict_set Y) a =\n    fmrestrict_set (X \\<inter> Y) a", "by auto"], ["proof (state)\nthis:\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) a =\n  fmrestrict_set (X \\<inter> Y) a\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "}"], ["proof (state)\nthis:\n  ?a2 \\<in> A \\<Longrightarrow>\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) ?a2 =\n  fmrestrict_set (X \\<inter> Y) ?a2\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "note 1 = this"], ["proof (state)\nthis:\n  ?a2 \\<in> A \\<Longrightarrow>\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) ?a2 =\n  fmrestrict_set (X \\<inter> Y) ?a2\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "{"], ["proof (state)\nthis:\n  ?a2 \\<in> A \\<Longrightarrow>\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) ?a2 =\n  fmrestrict_set (X \\<inter> Y) ?a2\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "assume P: \"a \\<in> A\""], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "then"], ["proof (chain)\npicking this:\n  a \\<in> A", "have \"fmrestrict_set (X \\<inter> Y) a \\<in> ?lhs\""], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) a \\<in> fmrestrict_set (X \\<inter> Y) ` A", "by simp"], ["proof (state)\nthis:\n  fmrestrict_set (X \\<inter> Y) a \\<in> fmrestrict_set (X \\<inter> Y) ` A\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "moreover"], ["proof (state)\nthis:\n  fmrestrict_set (X \\<inter> Y) a \\<in> fmrestrict_set (X \\<inter> Y) ` A\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "have \"(fmrestrict_set X \\<circ> fmrestrict_set Y) a \\<in> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fmrestrict_set X \\<circ> fmrestrict_set Y) a\n    \\<in> (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "using P"], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. (fmrestrict_set X \\<circ> fmrestrict_set Y) a\n    \\<in> (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "by blast"], ["proof (state)\nthis:\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) a\n  \\<in> (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "ultimately"], ["proof (chain)\npicking this:\n  fmrestrict_set (X \\<inter> Y) a \\<in> fmrestrict_set (X \\<inter> Y) ` A\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) a\n  \\<in> (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "have\n      \"fmrestrict_set (X \\<inter> Y) a \\<in> ?rhs\" \"(fmrestrict_set X \\<circ> fmrestrict_set Y) a \\<in> ?lhs\""], ["proof (prove)\nusing this:\n  fmrestrict_set (X \\<inter> Y) a \\<in> fmrestrict_set (X \\<inter> Y) ` A\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) a\n  \\<in> (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) a\n    \\<in> (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A &&&\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) a\n    \\<in> fmrestrict_set (X \\<inter> Y) ` A", "using P 1"], ["proof (prove)\nusing this:\n  fmrestrict_set (X \\<inter> Y) a \\<in> fmrestrict_set (X \\<inter> Y) ` A\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) a\n  \\<in> (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A\n  a \\<in> A\n  ?a2 \\<in> A \\<Longrightarrow>\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) ?a2 =\n  fmrestrict_set (X \\<inter> Y) ?a2\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) a\n    \\<in> (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A &&&\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) a\n    \\<in> fmrestrict_set (X \\<inter> Y) ` A", "by metis+"], ["proof (state)\nthis:\n  fmrestrict_set (X \\<inter> Y) a\n  \\<in> (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) a\n  \\<in> fmrestrict_set (X \\<inter> Y) ` A\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "}"], ["proof (state)\nthis:\n  ?a2 \\<in> A \\<Longrightarrow>\n  fmrestrict_set (X \\<inter> Y) ?a2\n  \\<in> (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A\n  ?a2 \\<in> A \\<Longrightarrow>\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) ?a2\n  \\<in> fmrestrict_set (X \\<inter> Y) ` A\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "then"], ["proof (chain)\npicking this:\n  ?a2 \\<in> A \\<Longrightarrow>\n  fmrestrict_set (X \\<inter> Y) ?a2\n  \\<in> (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A\n  ?a2 \\<in> A \\<Longrightarrow>\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) ?a2\n  \\<in> fmrestrict_set (X \\<inter> Y) ` A", "show ?thesis"], ["proof (prove)\nusing this:\n  ?a2 \\<in> A \\<Longrightarrow>\n  fmrestrict_set (X \\<inter> Y) ?a2\n  \\<in> (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A\n  ?a2 \\<in> A \\<Longrightarrow>\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) ?a2\n  \\<in> fmrestrict_set (X \\<inter> Y) ` A\n\ngoal (1 subgoal):\n 1. fmrestrict_set (X \\<inter> Y) ` A =\n    (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set (X \\<inter> Y) ` A =\n  (fmrestrict_set X \\<circ> fmrestrict_set Y) ` A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma invariantStateSpace_thm_9:\n  fixes ss vs1 vs2\n  shows \"ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1", "have \"\n      ss_proj ss (vs1 \\<inter> vs2)\n      = fmrestrict_set (vs1 \\<inter> vs2) ` ss\n    \""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss_proj ss (vs1 \\<inter> vs2) = fmrestrict_set (vs1 \\<inter> vs2) ` ss", "unfolding ss_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<inter> vs2) ` ss =\n    fmrestrict_set (vs1 \\<inter> vs2) ` ss", "by simp"], ["proof (state)\nthis:\n  ss_proj ss (vs1 \\<inter> vs2) = fmrestrict_set (vs1 \\<inter> vs2) ` ss\n\ngoal (1 subgoal):\n 1. ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1", "also"], ["proof (state)\nthis:\n  ss_proj ss (vs1 \\<inter> vs2) = fmrestrict_set (vs1 \\<inter> vs2) ` ss\n\ngoal (1 subgoal):\n 1. ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1", "have \"\\<dots> = (fmrestrict_set vs1 \\<circ> fmrestrict_set vs2) ` ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<inter> vs2) ` ss =\n    (fmrestrict_set vs1 \\<circ> fmrestrict_set vs2) ` ss", "using fmrestrict_set_inter_img"], ["proof (prove)\nusing this:\n  fmrestrict_set (?X \\<inter> ?Y) ` ?A =\n  (fmrestrict_set ?X \\<circ> fmrestrict_set ?Y) ` ?A\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<inter> vs2) ` ss =\n    (fmrestrict_set vs1 \\<circ> fmrestrict_set vs2) ` ss", "by metis"], ["proof (state)\nthis:\n  fmrestrict_set (vs1 \\<inter> vs2) ` ss =\n  (fmrestrict_set vs1 \\<circ> fmrestrict_set vs2) ` ss\n\ngoal (1 subgoal):\n 1. ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1", "finally"], ["proof (chain)\npicking this:\n  ss_proj ss (vs1 \\<inter> vs2) =\n  (fmrestrict_set vs1 \\<circ> fmrestrict_set vs2) ` ss", "have \"ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1\""], ["proof (prove)\nusing this:\n  ss_proj ss (vs1 \\<inter> vs2) =\n  (fmrestrict_set vs1 \\<circ> fmrestrict_set vs2) ` ss\n\ngoal (1 subgoal):\n 1. ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1", "unfolding ss_proj_def"], ["proof (prove)\nusing this:\n  fmrestrict_set (vs1 \\<inter> vs2) ` ss =\n  (fmrestrict_set vs1 \\<circ> fmrestrict_set vs2) ` ss\n\ngoal (1 subgoal):\n 1. fmrestrict_set (vs1 \\<inter> vs2) ` ss =\n    fmrestrict_set vs1 ` fmrestrict_set vs2 ` ss", "by force"], ["proof (state)\nthis:\n  ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1\n\ngoal (1 subgoal):\n 1. ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1", "}"], ["proof (state)\nthis:\n  ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1\n\ngoal (1 subgoal):\n 1. ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1", "then"], ["proof (chain)\npicking this:\n  ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1", "show ?thesis"], ["proof (prove)\nusing this:\n  ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1\n\ngoal (1 subgoal):\n 1. ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1", "by simp"], ["proof (state)\nthis:\n  ss_proj ss (vs1 \\<inter> vs2) = ss_proj (ss_proj ss vs2) vs1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma FINITE_ss_proj:\n  fixes ss vs\n  assumes \"finite ss\"\n  shows \"finite (ss_proj ss vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (ss_proj ss vs)", "unfolding ss_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (fmrestrict_set vs ` ss)", "using assms"], ["proof (prove)\nusing this:\n  finite ss\n\ngoal (1 subgoal):\n 1. finite (fmrestrict_set vs ` ss)", "by simp"], ["", "lemma nempty_stateSpace_nempty_ss_proj:\n  assumes \"(ss \\<noteq> {})\"\n  shows \"(ss_proj ss vs \\<noteq> {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss_proj ss vs \\<noteq> {}", "unfolding ss_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` ss \\<noteq> {}", "using assms"], ["proof (prove)\nusing this:\n  ss \\<noteq> {}\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` ss \\<noteq> {}", "by simp"], ["", "lemma invariantStateSpace_thm_5:\n  fixes ss vs domain\n  assumes \"(stateSpace ss domain)\"\n  shows \"(stateSpace (ss_proj ss vs) (domain \\<inter> vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stateSpace (ss_proj ss vs) (domain \\<inter> vs)", "using assms"], ["proof (prove)\nusing this:\n  stateSpace ss domain\n\ngoal (1 subgoal):\n 1. stateSpace (ss_proj ss vs) (domain \\<inter> vs)", "unfolding stateSpace_def ss_proj_def"], ["proof (prove)\nusing this:\n  \\<forall>s. s \\<in> ss \\<longrightarrow> fmdom' s = domain\n\ngoal (1 subgoal):\n 1. \\<forall>s.\n       s \\<in> fmrestrict_set vs ` ss \\<longrightarrow>\n       fmdom' s = domain \\<inter> vs", "by (metis (no_types, lifting) fmdom'_fmrestrict_set imageE inf_commute)"], ["", "lemma dom_subset_ssproj_eq_ss:\n  fixes ss domain vs\n  assumes \"(stateSpace ss domain)\" \"(domain \\<subseteq> vs)\"\n  shows \"(ss_proj ss vs = ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss_proj ss vs = ss", "unfolding ss_proj_def stateSpace_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` ss = ss", "using assms exec_drest_5"], ["proof (prove)\nusing this:\n  stateSpace ss domain\n  domain \\<subseteq> vs\n  fmdom' ?x \\<subseteq> ?vs \\<Longrightarrow> fmrestrict_set ?vs ?x = ?x\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs ` ss = ss", "by (metis (mono_tags, lifting) image_cong image_ident stateSpace_def)\n\n\\<comment> \\<open>TODO refactor duplicate proof steps in case split.\\<close>"], ["", "lemma  neq_vs_neq_ss_proj:\n  fixes vs\n  assumes \"(ss \\<noteq> {})\" \"(stateSpace ss vs)\" \"(vs1 \\<subseteq> vs)\" \"(vs2 \\<subseteq> vs)\" \"(vs1 \\<noteq> vs2)\"\n  shows \"(ss_proj ss vs1 \\<noteq> ss_proj ss vs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss_proj ss vs1 \\<noteq> ss_proj ss vs2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ss_proj ss vs1 \\<noteq> ss_proj ss vs2", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. ss_proj ss vs1 \\<noteq> ss_proj ss vs2", "have 1: \"\\<exists>f. f \\<in> ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. f \\<in> ss", "using assms(1)"], ["proof (prove)\nusing this:\n  ss \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>f. f \\<in> ss", "by blast"], ["proof (state)\nthis:\n  \\<exists>f. f \\<in> ss\n\ngoal (1 subgoal):\n 1. ss_proj ss vs1 \\<noteq> ss_proj ss vs2", "then"], ["proof (chain)\npicking this:\n  \\<exists>f. f \\<in> ss", "obtain x where \" (x \\<in> vs1 \\<and> x \\<notin> vs2) \\<or> (x \\<in> vs2 \\<and> x \\<notin> vs1)\""], ["proof (prove)\nusing this:\n  \\<exists>f. f \\<in> ss\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> vs1 \\<and> x \\<notin> vs2 \\<or>\n        x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(5)"], ["proof (prove)\nusing this:\n  \\<exists>f. f \\<in> ss\n  vs1 \\<noteq> vs2\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> vs1 \\<and> x \\<notin> vs2 \\<or>\n        x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> vs1 \\<and> x \\<notin> vs2 \\<or> x \\<in> vs2 \\<and> x \\<notin> vs1\n\ngoal (1 subgoal):\n 1. ss_proj ss vs1 \\<noteq> ss_proj ss vs2", "then"], ["proof (chain)\npicking this:\n  x \\<in> vs1 \\<and> x \\<notin> vs2 \\<or> x \\<in> vs2 \\<and> x \\<notin> vs1", "consider (i) \"x \\<in> vs1 \\<and> x \\<notin> vs2\" | (ii) \"x \\<in> vs2 \\<and> x \\<notin> vs1\""], ["proof (prove)\nusing this:\n  x \\<in> vs1 \\<and> x \\<notin> vs2 \\<or> x \\<in> vs2 \\<and> x \\<notin> vs1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow> thesis;\n     x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow> ?thesis;\n   x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. ss_proj ss vs1 \\<noteq> ss_proj ss vs2", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow> ?thesis;\n   x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "have \"fmrestrict_set vs1 ` ss \\<noteq>  fmrestrict_set vs2 ` ss\""], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow> ?thesis;\n   x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n 2. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "case i"], ["proof (state)\nthis:\n  x \\<in> vs1 \\<and> x \\<notin> vs2\n\ngoal (2 subgoals):\n 1. x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n 2. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "{"], ["proof (state)\nthis:\n  x \\<in> vs1 \\<and> x \\<notin> vs2\n\ngoal (2 subgoals):\n 1. x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n 2. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "fix s' t'"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n 2. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "assume \"s' \\<in> fmrestrict_set vs1 ` ss\" \"t' \\<in> fmrestrict_set vs2 ` ss\""], ["proof (state)\nthis:\n  s' \\<in> fmrestrict_set vs1 ` ss\n  t' \\<in> fmrestrict_set vs2 ` ss\n\ngoal (2 subgoals):\n 1. x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n 2. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  s' \\<in> fmrestrict_set vs1 ` ss\n  t' \\<in> fmrestrict_set vs2 ` ss", "obtain s t where a:\n          \"s \\<in> ss\" \"s' = fmrestrict_set vs1 s\" \"t \\<in> ss\" \"t' = fmrestrict_set vs2 t\""], ["proof (prove)\nusing this:\n  s' \\<in> fmrestrict_set vs1 ` ss\n  t' \\<in> fmrestrict_set vs2 ` ss\n\ngoal (1 subgoal):\n 1. (\\<And>s t.\n        \\<lbrakk>s \\<in> ss; s' = fmrestrict_set vs1 s; t \\<in> ss;\n         t' = fmrestrict_set vs2 t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s \\<in> ss\n  s' = fmrestrict_set vs1 s\n  t \\<in> ss\n  t' = fmrestrict_set vs2 t\n\ngoal (2 subgoals):\n 1. x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n 2. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  s \\<in> ss\n  s' = fmrestrict_set vs1 s\n  t \\<in> ss\n  t' = fmrestrict_set vs2 t", "have \"fmdom' s = vs\""], ["proof (prove)\nusing this:\n  s \\<in> ss\n  s' = fmrestrict_set vs1 s\n  t \\<in> ss\n  t' = fmrestrict_set vs2 t\n\ngoal (1 subgoal):\n 1. fmdom' s = vs", "using assms(2)"], ["proof (prove)\nusing this:\n  s \\<in> ss\n  s' = fmrestrict_set vs1 s\n  t \\<in> ss\n  t' = fmrestrict_set vs2 t\n  stateSpace ss vs\n\ngoal (1 subgoal):\n 1. fmdom' s = vs", "by (simp add: stateSpace_def)"], ["proof (state)\nthis:\n  fmdom' s = vs\n\ngoal (2 subgoals):\n 1. x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n 2. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  fmdom' s = vs", "have b: \"fmdom' s' = vs1\""], ["proof (prove)\nusing this:\n  fmdom' s = vs\n\ngoal (1 subgoal):\n 1. fmdom' s' = vs1", "using assms(3) a fmdom'_fmrestrict_set inf.order_iff"], ["proof (prove)\nusing this:\n  fmdom' s = vs\n  vs1 \\<subseteq> vs\n  s \\<in> ss\n  s' = fmrestrict_set vs1 s\n  t \\<in> ss\n  t' = fmrestrict_set vs2 t\n  fmdom' (fmrestrict_set ?X ?f) = ?X \\<inter> fmdom' ?f\n  (?a \\<le> ?b) = (?a = inf ?a ?b)\n\ngoal (1 subgoal):\n 1. fmdom' s' = vs1", "by metis"], ["proof (state)\nthis:\n  fmdom' s' = vs1\n\ngoal (2 subgoals):\n 1. x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n 2. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  fmdom' s' = vs1", "have \"fmdom' t = vs\""], ["proof (prove)\nusing this:\n  fmdom' s' = vs1\n\ngoal (1 subgoal):\n 1. fmdom' t = vs", "using assms(2) a(3)"], ["proof (prove)\nusing this:\n  fmdom' s' = vs1\n  stateSpace ss vs\n  t \\<in> ss\n\ngoal (1 subgoal):\n 1. fmdom' t = vs", "by (simp add: stateSpace_def)"], ["proof (state)\nthis:\n  fmdom' t = vs\n\ngoal (2 subgoals):\n 1. x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n 2. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  fmdom' t = vs", "have \"fmdom' t' = vs2\""], ["proof (prove)\nusing this:\n  fmdom' t = vs\n\ngoal (1 subgoal):\n 1. fmdom' t' = vs2", "using assms(4) a(4) fmdom'_fmrestrict_set inf.order_iff"], ["proof (prove)\nusing this:\n  fmdom' t = vs\n  vs2 \\<subseteq> vs\n  t' = fmrestrict_set vs2 t\n  fmdom' (fmrestrict_set ?X ?f) = ?X \\<inter> fmdom' ?f\n  (?a \\<le> ?b) = (?a = inf ?a ?b)\n\ngoal (1 subgoal):\n 1. fmdom' t' = vs2", "by metis"], ["proof (state)\nthis:\n  fmdom' t' = vs2\n\ngoal (2 subgoals):\n 1. x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n 2. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  fmdom' t' = vs2", "have \"fmlookup s' x \\<noteq> None\" \"fmlookup t' x = None\""], ["proof (prove)\nusing this:\n  fmdom' t' = vs2\n\ngoal (1 subgoal):\n 1. fmlookup s' x \\<noteq> None &&& fmlookup t' x = None", "using i b domIff fmdom'_alt_def fmdom.rep_eq"], ["proof (prove)\nusing this:\n  fmdom' t' = vs2\n  x \\<in> vs1 \\<and> x \\<notin> vs2\n  fmdom' s' = vs1\n  (?a \\<in> dom ?m) = (?m ?a \\<noteq> None)\n  fmdom' ?m = fset (fmdom ?m)\n  fset (fmdom ?x) = dom (fmlookup ?x)\n\ngoal (1 subgoal):\n 1. fmlookup s' x \\<noteq> None &&& fmlookup t' x = None", "by metis+"], ["proof (state)\nthis:\n  fmlookup s' x \\<noteq> None\n  fmlookup t' x = None\n\ngoal (2 subgoals):\n 1. x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n 2. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  fmlookup s' x \\<noteq> None\n  fmlookup t' x = None", "have \"s' \\<noteq> t'\""], ["proof (prove)\nusing this:\n  fmlookup s' x \\<noteq> None\n  fmlookup t' x = None\n\ngoal (1 subgoal):\n 1. s' \\<noteq> t'", "by blast"], ["proof (state)\nthis:\n  s' \\<noteq> t'\n\ngoal (2 subgoals):\n 1. x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n 2. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?s'2 \\<in> fmrestrict_set vs1 ` ss;\n   ?t'2 \\<in> fmrestrict_set vs2 ` ss\\<rbrakk>\n  \\<Longrightarrow> ?s'2 \\<noteq> ?t'2\n\ngoal (2 subgoals):\n 1. x \\<in> vs1 \\<and> x \\<notin> vs2 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n 2. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?s'2 \\<in> fmrestrict_set vs1 ` ss;\n   ?t'2 \\<in> fmrestrict_set vs2 ` ss\\<rbrakk>\n  \\<Longrightarrow> ?s'2 \\<noteq> ?t'2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s'2 \\<in> fmrestrict_set vs1 ` ss;\n   ?t'2 \\<in> fmrestrict_set vs2 ` ss\\<rbrakk>\n  \\<Longrightarrow> ?s'2 \\<noteq> ?t'2\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "using 1 neq_funs_neq_images"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s'2 \\<in> fmrestrict_set vs1 ` ss;\n   ?t'2 \\<in> fmrestrict_set vs2 ` ss\\<rbrakk>\n  \\<Longrightarrow> ?s'2 \\<noteq> ?t'2\n  \\<exists>f. f \\<in> ss\n  \\<lbrakk>\\<forall>x.\n              x \\<in> ?s \\<longrightarrow>\n              (\\<forall>y.\n                  y \\<in> ?s \\<longrightarrow> ?f1.0 x \\<noteq> ?f2.0 y);\n   \\<exists>x. x \\<in> ?s\\<rbrakk>\n  \\<Longrightarrow> ?f1.0 ` ?s \\<noteq> ?f2.0 ` ?s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n\ngoal (1 subgoal):\n 1. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "case ii"], ["proof (state)\nthis:\n  x \\<in> vs2 \\<and> x \\<notin> vs1\n\ngoal (1 subgoal):\n 1. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "{"], ["proof (state)\nthis:\n  x \\<in> vs2 \\<and> x \\<notin> vs1\n\ngoal (1 subgoal):\n 1. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "fix s' t'"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "assume \"s' \\<in> fmrestrict_set vs1 ` ss\" \"t' \\<in> fmrestrict_set vs2 ` ss\""], ["proof (state)\nthis:\n  s' \\<in> fmrestrict_set vs1 ` ss\n  t' \\<in> fmrestrict_set vs2 ` ss\n\ngoal (1 subgoal):\n 1. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  s' \\<in> fmrestrict_set vs1 ` ss\n  t' \\<in> fmrestrict_set vs2 ` ss", "obtain s t where c:\n          \"s \\<in> ss\" \"s' = fmrestrict_set vs1 s\" \"t \\<in> ss\" \"t' = fmrestrict_set vs2 t\""], ["proof (prove)\nusing this:\n  s' \\<in> fmrestrict_set vs1 ` ss\n  t' \\<in> fmrestrict_set vs2 ` ss\n\ngoal (1 subgoal):\n 1. (\\<And>s t.\n        \\<lbrakk>s \\<in> ss; s' = fmrestrict_set vs1 s; t \\<in> ss;\n         t' = fmrestrict_set vs2 t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s \\<in> ss\n  s' = fmrestrict_set vs1 s\n  t \\<in> ss\n  t' = fmrestrict_set vs2 t\n\ngoal (1 subgoal):\n 1. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  s \\<in> ss\n  s' = fmrestrict_set vs1 s\n  t \\<in> ss\n  t' = fmrestrict_set vs2 t", "have \"fmdom' s = vs\""], ["proof (prove)\nusing this:\n  s \\<in> ss\n  s' = fmrestrict_set vs1 s\n  t \\<in> ss\n  t' = fmrestrict_set vs2 t\n\ngoal (1 subgoal):\n 1. fmdom' s = vs", "using assms(2)"], ["proof (prove)\nusing this:\n  s \\<in> ss\n  s' = fmrestrict_set vs1 s\n  t \\<in> ss\n  t' = fmrestrict_set vs2 t\n  stateSpace ss vs\n\ngoal (1 subgoal):\n 1. fmdom' s = vs", "by (simp add: stateSpace_def)"], ["proof (state)\nthis:\n  fmdom' s = vs\n\ngoal (1 subgoal):\n 1. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  fmdom' s = vs", "have d: \"fmdom' s' = vs1\""], ["proof (prove)\nusing this:\n  fmdom' s = vs\n\ngoal (1 subgoal):\n 1. fmdom' s' = vs1", "using assms(3) c(2) fmdom'_fmrestrict_set inf.order_iff"], ["proof (prove)\nusing this:\n  fmdom' s = vs\n  vs1 \\<subseteq> vs\n  s' = fmrestrict_set vs1 s\n  fmdom' (fmrestrict_set ?X ?f) = ?X \\<inter> fmdom' ?f\n  (?a \\<le> ?b) = (?a = inf ?a ?b)\n\ngoal (1 subgoal):\n 1. fmdom' s' = vs1", "by metis"], ["proof (state)\nthis:\n  fmdom' s' = vs1\n\ngoal (1 subgoal):\n 1. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  fmdom' s' = vs1", "have  \"fmdom' t = vs\""], ["proof (prove)\nusing this:\n  fmdom' s' = vs1\n\ngoal (1 subgoal):\n 1. fmdom' t = vs", "using assms(2) c(3)"], ["proof (prove)\nusing this:\n  fmdom' s' = vs1\n  stateSpace ss vs\n  t \\<in> ss\n\ngoal (1 subgoal):\n 1. fmdom' t = vs", "by (simp add: stateSpace_def)"], ["proof (state)\nthis:\n  fmdom' t = vs\n\ngoal (1 subgoal):\n 1. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  fmdom' t = vs", "have \"fmdom' t' = vs2\""], ["proof (prove)\nusing this:\n  fmdom' t = vs\n\ngoal (1 subgoal):\n 1. fmdom' t' = vs2", "using assms(4) c(4) fmdom'_fmrestrict_set inf.order_iff"], ["proof (prove)\nusing this:\n  fmdom' t = vs\n  vs2 \\<subseteq> vs\n  t' = fmrestrict_set vs2 t\n  fmdom' (fmrestrict_set ?X ?f) = ?X \\<inter> fmdom' ?f\n  (?a \\<le> ?b) = (?a = inf ?a ?b)\n\ngoal (1 subgoal):\n 1. fmdom' t' = vs2", "by metis"], ["proof (state)\nthis:\n  fmdom' t' = vs2\n\ngoal (1 subgoal):\n 1. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  fmdom' t' = vs2", "have \"fmlookup s' x = None\" \"fmlookup t' x \\<noteq> None\""], ["proof (prove)\nusing this:\n  fmdom' t' = vs2\n\ngoal (1 subgoal):\n 1. fmlookup s' x = None &&& fmlookup t' x \\<noteq> None", "using ii d domIff fmdom'_alt_def fmdom.rep_eq"], ["proof (prove)\nusing this:\n  fmdom' t' = vs2\n  x \\<in> vs2 \\<and> x \\<notin> vs1\n  fmdom' s' = vs1\n  (?a \\<in> dom ?m) = (?m ?a \\<noteq> None)\n  fmdom' ?m = fset (fmdom ?m)\n  fset (fmdom ?x) = dom (fmlookup ?x)\n\ngoal (1 subgoal):\n 1. fmlookup s' x = None &&& fmlookup t' x \\<noteq> None", "by metis+"], ["proof (state)\nthis:\n  fmlookup s' x = None\n  fmlookup t' x \\<noteq> None\n\ngoal (1 subgoal):\n 1. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  fmlookup s' x = None\n  fmlookup t' x \\<noteq> None", "have \"s' \\<noteq> t'\""], ["proof (prove)\nusing this:\n  fmlookup s' x = None\n  fmlookup t' x \\<noteq> None\n\ngoal (1 subgoal):\n 1. s' \\<noteq> t'", "by blast"], ["proof (state)\nthis:\n  s' \\<noteq> t'\n\ngoal (1 subgoal):\n 1. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?s'2 \\<in> fmrestrict_set vs1 ` ss;\n   ?t'2 \\<in> fmrestrict_set vs2 ` ss\\<rbrakk>\n  \\<Longrightarrow> ?s'2 \\<noteq> ?t'2\n\ngoal (1 subgoal):\n 1. x \\<in> vs2 \\<and> x \\<notin> vs1 \\<Longrightarrow>\n    fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?s'2 \\<in> fmrestrict_set vs1 ` ss;\n   ?t'2 \\<in> fmrestrict_set vs2 ` ss\\<rbrakk>\n  \\<Longrightarrow> ?s'2 \\<noteq> ?t'2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s'2 \\<in> fmrestrict_set vs1 ` ss;\n   ?t'2 \\<in> fmrestrict_set vs2 ` ss\\<rbrakk>\n  \\<Longrightarrow> ?s'2 \\<noteq> ?t'2\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "using 1 neq_funs_neq_images"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s'2 \\<in> fmrestrict_set vs1 ` ss;\n   ?t'2 \\<in> fmrestrict_set vs2 ` ss\\<rbrakk>\n  \\<Longrightarrow> ?s'2 \\<noteq> ?t'2\n  \\<exists>f. f \\<in> ss\n  \\<lbrakk>\\<forall>x.\n              x \\<in> ?s \\<longrightarrow>\n              (\\<forall>y.\n                  y \\<in> ?s \\<longrightarrow> ?f1.0 x \\<noteq> ?f2.0 y);\n   \\<exists>x. x \\<in> ?s\\<rbrakk>\n  \\<Longrightarrow> ?f1.0 ` ?s \\<noteq> ?f2.0 ` ?s\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "by blast"], ["proof (state)\nthis:\n  fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n\ngoal (1 subgoal):\n 1. ss_proj ss vs1 \\<noteq> ss_proj ss vs2", "}"], ["proof (state)\nthis:\n  fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n\ngoal (1 subgoal):\n 1. ss_proj ss vs1 \\<noteq> ss_proj ss vs2", "then"], ["proof (chain)\npicking this:\n  fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "show ?thesis"], ["proof (prove)\nusing this:\n  fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n\ngoal (1 subgoal):\n 1. ss_proj ss vs1 \\<noteq> ss_proj ss vs2", "unfolding ss_proj_def"], ["proof (prove)\nusing this:\n  fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss\n\ngoal (1 subgoal):\n 1. fmrestrict_set vs1 ` ss \\<noteq> fmrestrict_set vs2 ` ss", "by blast"], ["proof (state)\nthis:\n  ss_proj ss vs1 \\<noteq> ss_proj ss vs2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subset_dom_stateSpace_ss_proj:\n  fixes vs1 vs2\n  assumes \"(vs1 \\<subseteq> vs2)\" \"(stateSpace ss vs2)\"\n  shows \"(stateSpace (ss_proj ss vs1) vs1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stateSpace (ss_proj ss vs1) vs1", "using assms"], ["proof (prove)\nusing this:\n  vs1 \\<subseteq> vs2\n  stateSpace ss vs2\n\ngoal (1 subgoal):\n 1. stateSpace (ss_proj ss vs1) vs1", "by (metis inf.absorb_iff2 invariantStateSpace_thm_5)"], ["", "lemma card_proj_leq:\n  assumes \"finite PROB\"\n  shows \"card (prob_proj PROB vs) \\<le> card PROB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (prob_proj PROB vs) \\<le> card PROB", "unfolding prob_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((\\<lambda>a. action_proj a vs) ` PROB) \\<le> card PROB", "using assms card_image_le"], ["proof (prove)\nusing this:\n  finite PROB\n  finite ?A \\<Longrightarrow> card (?f ` ?A) \\<le> card ?A\n\ngoal (1 subgoal):\n 1. card ((\\<lambda>a. action_proj a vs) ` PROB) \\<le> card PROB", "by blast"], ["", "end"]]}