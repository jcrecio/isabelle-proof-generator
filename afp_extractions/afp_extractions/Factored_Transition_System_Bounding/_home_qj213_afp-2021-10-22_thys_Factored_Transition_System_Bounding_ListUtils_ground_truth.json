{"file_name": "/home/qj213/afp-2021-10-22/thys/Factored_Transition_System_Bounding/ListUtils.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Factored_Transition_System_Bounding", "problem_names": ["lemma len_ge_0: \n  fixes l\n  shows \"length l \\<ge> 0\"", "lemma len_gt_pref_is_pref: \n  fixes l l1 l2\n  assumes \"(length l2 > length l1)\" \"(prefix l1 l)\" \"(prefix l2 l)\"\n  shows \"(prefix l1 l2)\"", "lemma nempty_list_append_length_add: \n  fixes l1 l2 l3\n  assumes \"l2 \\<noteq> []\"\n  shows \"length (l1 @ l3) < length (l1 @ l2 @l3)\"", "lemma append_filter: \n  fixes f1 :: \"'a \\<Rightarrow> bool\" and f2 as1 as2 and p :: \"'a list\"\n  assumes \"(as1 @ as2 = filter f1 (map f2 p))\"\n  shows \"(\\<exists>p_1 p_2. \n    (p_1 @ p_2 = p) \n    \\<and> (as1 = filter f1 (map f2 p_1)) \n    \\<and> (as2 = filter f1 (map f2 p_2))\n  )\"", "lemma append_eq_as_proj_1: \n  fixes f1 :: \"'a \\<Rightarrow> bool\" and f2 as1 as2 as3 and p :: \"'a list\"\n  assumes \"(as1 @ as2 @ as3 = filter f1 (map f2  p))\"\n  shows \"(\\<exists>p_1 p_2 p_3. \n    (p_1 @ p_2 @ p_3 = p) \n    \\<and> (as1 = filter f1 (map f2 p_1)) \n    \\<and> (as2 = filter f1 (map f2 p_2)) \n    \\<and> (as3 = filter f1 (map f2 p_3))\n  )\"", "lemma filter_empty_every_not: \"\\<And>P l. (filter (\\<lambda>x. P x) l = []) = list_all (\\<lambda>x. \\<not>P x) l\"", "lemma MEM_SPLIT:\n  fixes x l\n  assumes \"\\<not>ListMem x l\" \n  shows \"\\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2\"", "lemma APPEND_EQ_APPEND_MID:\n  fixes l1 l2 m1 m2 e\n  shows \n    \"(l1 @ [e] @ l2 = m1 @ m2) \n      \\<longleftrightarrow>\n        (\\<exists>l. (m1 = l1 @ [e] @ l) \\<and> (l2 = l @ m2)) \\<or>\n        (\\<exists>l. (l1 = m1 @ l) \\<and> (m2 = l @ [e] @ l2))\"", "lemma LIST_FRAG_DICHOTOMY:\n  fixes l la x lb\n  assumes \"sublist l (la @ [x] @ lb)\" \"\\<not>ListMem x l\"\n  shows \"sublist l la \\<or> sublist l lb\"", "lemma LIST_FRAG_DICHOTOMY_2:\n  fixes l la x lb P\n  assumes \"sublist l (la @ [x] @ lb) \" \"\\<not>P x\" \"list_all P l\"\n  shows \"sublist l la \\<or> sublist l lb\"", "lemma frag_len_filter_le:\n  fixes P l' l\n  assumes \"sublist l' l\"\n  shows \"length (filter P l') \\<le> length (filter P l)\""], "translations": [["", "lemma len_ge_0: \n  fixes l\n  shows \"length l \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> length l", "by simp"], ["", "lemma len_gt_pref_is_pref: \n  fixes l l1 l2\n  assumes \"(length l2 > length l1)\" \"(prefix l1 l)\" \"(prefix l2 l)\"\n  shows \"(prefix l1 l2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix l1 l2", "using assms"], ["proof (prove)\nusing this:\n  length l1 < length l2\n  prefix l1 l\n  prefix l2 l\n\ngoal (1 subgoal):\n 1. prefix l1 l2", "proof (induction l2 arbitrary: l1 l)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l1 l.\n       \\<lbrakk>length l1 < length []; prefix l1 l; prefix [] l\\<rbrakk>\n       \\<Longrightarrow> prefix l1 []\n 2. \\<And>a l2 l1 l.\n       \\<lbrakk>\\<And>l1 l.\n                   \\<lbrakk>length l1 < length l2; prefix l1 l;\n                    prefix l2 l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 l2;\n        length l1 < length (a # l2); prefix l1 l; prefix (a # l2) l\\<rbrakk>\n       \\<Longrightarrow> prefix l1 (a # l2)", "case Nil"], ["proof (state)\nthis:\n  length l1 < length []\n  prefix l1 l\n  prefix [] l\n\ngoal (2 subgoals):\n 1. \\<And>l1 l.\n       \\<lbrakk>length l1 < length []; prefix l1 l; prefix [] l\\<rbrakk>\n       \\<Longrightarrow> prefix l1 []\n 2. \\<And>a l2 l1 l.\n       \\<lbrakk>\\<And>l1 l.\n                   \\<lbrakk>length l1 < length l2; prefix l1 l;\n                    prefix l2 l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 l2;\n        length l1 < length (a # l2); prefix l1 l; prefix (a # l2) l\\<rbrakk>\n       \\<Longrightarrow> prefix l1 (a # l2)", "then"], ["proof (chain)\npicking this:\n  length l1 < length []\n  prefix l1 l\n  prefix [] l", "have \"\\<not>(length [] > length l1)\""], ["proof (prove)\nusing this:\n  length l1 < length []\n  prefix l1 l\n  prefix [] l\n\ngoal (1 subgoal):\n 1. \\<not> length l1 < length []", "by simp"], ["proof (state)\nthis:\n  \\<not> length l1 < length []\n\ngoal (2 subgoals):\n 1. \\<And>l1 l.\n       \\<lbrakk>length l1 < length []; prefix l1 l; prefix [] l\\<rbrakk>\n       \\<Longrightarrow> prefix l1 []\n 2. \\<And>a l2 l1 l.\n       \\<lbrakk>\\<And>l1 l.\n                   \\<lbrakk>length l1 < length l2; prefix l1 l;\n                    prefix l2 l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 l2;\n        length l1 < length (a # l2); prefix l1 l; prefix (a # l2) l\\<rbrakk>\n       \\<Longrightarrow> prefix l1 (a # l2)", "then"], ["proof (chain)\npicking this:\n  \\<not> length l1 < length []", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> length l1 < length []\n\ngoal (1 subgoal):\n 1. prefix l1 []", "using Nil"], ["proof (prove)\nusing this:\n  \\<not> length l1 < length []\n  length l1 < length []\n  prefix l1 l\n  prefix [] l\n\ngoal (1 subgoal):\n 1. prefix l1 []", "by blast"], ["proof (state)\nthis:\n  prefix l1 []\n\ngoal (1 subgoal):\n 1. \\<And>a l2 l1 l.\n       \\<lbrakk>\\<And>l1 l.\n                   \\<lbrakk>length l1 < length l2; prefix l1 l;\n                    prefix l2 l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 l2;\n        length l1 < length (a # l2); prefix l1 l; prefix (a # l2) l\\<rbrakk>\n       \\<Longrightarrow> prefix l1 (a # l2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l2 l1 l.\n       \\<lbrakk>\\<And>l1 l.\n                   \\<lbrakk>length l1 < length l2; prefix l1 l;\n                    prefix l2 l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 l2;\n        length l1 < length (a # l2); prefix l1 l; prefix (a # l2) l\\<rbrakk>\n       \\<Longrightarrow> prefix l1 (a # l2)", "case (Cons a l2)"], ["proof (state)\nthis:\n  \\<lbrakk>length ?l1.0 < length l2; prefix ?l1.0 ?l; prefix l2 ?l\\<rbrakk>\n  \\<Longrightarrow> prefix ?l1.0 l2\n  length l1 < length (a # l2)\n  prefix l1 l\n  prefix (a # l2) l\n\ngoal (1 subgoal):\n 1. \\<And>a l2 l1 l.\n       \\<lbrakk>\\<And>l1 l.\n                   \\<lbrakk>length l1 < length l2; prefix l1 l;\n                    prefix l2 l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 l2;\n        length l1 < length (a # l2); prefix l1 l; prefix (a # l2) l\\<rbrakk>\n       \\<Longrightarrow> prefix l1 (a # l2)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>length ?l1.0 < length l2; prefix ?l1.0 ?l; prefix l2 ?l\\<rbrakk>\n  \\<Longrightarrow> prefix ?l1.0 l2\n  length l1 < length (a # l2)\n  prefix l1 l\n  prefix (a # l2) l", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?l1.0 < length l2; prefix ?l1.0 ?l; prefix l2 ?l\\<rbrakk>\n  \\<Longrightarrow> prefix ?l1.0 l2\n  length l1 < length (a # l2)\n  prefix l1 l\n  prefix (a # l2) l\n\ngoal (1 subgoal):\n 1. prefix l1 (a # l2)", "proof(induction l1 arbitrary: l)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>\\<And>l1 l.\n                   \\<lbrakk>length l1 < length l2; prefix l1 l;\n                    prefix l2 l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 l2;\n        length [] < length (a # l2); prefix [] l; prefix (a # l2) l\\<rbrakk>\n       \\<Longrightarrow> prefix [] (a # l2)\n 2. \\<And>aa l1 l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>\\<And>l1 l.\n                               \\<lbrakk>length l1 < length l2; prefix l1 l;\n                                prefix l2 l\\<rbrakk>\n                               \\<Longrightarrow> prefix l1 l2;\n                    length l1 < length (a # l2); prefix l1 l;\n                    prefix (a # l2) l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 (a # l2);\n        \\<And>l1 l.\n           \\<lbrakk>length l1 < length l2; prefix l1 l; prefix l2 l\\<rbrakk>\n           \\<Longrightarrow> prefix l1 l2;\n        length (aa # l1) < length (a # l2); prefix (aa # l1) l;\n        prefix (a # l2) l\\<rbrakk>\n       \\<Longrightarrow> prefix (aa # l1) (a # l2)", "case Nil"], ["proof (state)\nthis:\n  \\<lbrakk>length ?l1.0 < length l2; prefix ?l1.0 ?l; prefix l2 ?l\\<rbrakk>\n  \\<Longrightarrow> prefix ?l1.0 l2\n  length [] < length (a # l2)\n  prefix [] l\n  prefix (a # l2) l\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>\\<And>l1 l.\n                   \\<lbrakk>length l1 < length l2; prefix l1 l;\n                    prefix l2 l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 l2;\n        length [] < length (a # l2); prefix [] l; prefix (a # l2) l\\<rbrakk>\n       \\<Longrightarrow> prefix [] (a # l2)\n 2. \\<And>aa l1 l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>\\<And>l1 l.\n                               \\<lbrakk>length l1 < length l2; prefix l1 l;\n                                prefix l2 l\\<rbrakk>\n                               \\<Longrightarrow> prefix l1 l2;\n                    length l1 < length (a # l2); prefix l1 l;\n                    prefix (a # l2) l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 (a # l2);\n        \\<And>l1 l.\n           \\<lbrakk>length l1 < length l2; prefix l1 l; prefix l2 l\\<rbrakk>\n           \\<Longrightarrow> prefix l1 l2;\n        length (aa # l1) < length (a # l2); prefix (aa # l1) l;\n        prefix (a # l2) l\\<rbrakk>\n       \\<Longrightarrow> prefix (aa # l1) (a # l2)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>length ?l1.0 < length l2; prefix ?l1.0 ?l; prefix l2 ?l\\<rbrakk>\n  \\<Longrightarrow> prefix ?l1.0 l2\n  length [] < length (a # l2)\n  prefix [] l\n  prefix (a # l2) l", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?l1.0 < length l2; prefix ?l1.0 ?l; prefix l2 ?l\\<rbrakk>\n  \\<Longrightarrow> prefix ?l1.0 l2\n  length [] < length (a # l2)\n  prefix [] l\n  prefix (a # l2) l\n\ngoal (1 subgoal):\n 1. prefix [] (a # l2)", "using Nil_prefix"], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?l1.0 < length l2; prefix ?l1.0 ?l; prefix l2 ?l\\<rbrakk>\n  \\<Longrightarrow> prefix ?l1.0 l2\n  length [] < length (a # l2)\n  prefix [] l\n  prefix (a # l2) l\n  prefix [] ?xs\n\ngoal (1 subgoal):\n 1. prefix [] (a # l2)", "by blast"], ["proof (state)\nthis:\n  prefix [] (a # l2)\n\ngoal (1 subgoal):\n 1. \\<And>aa l1 l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>\\<And>l1 l.\n                               \\<lbrakk>length l1 < length l2; prefix l1 l;\n                                prefix l2 l\\<rbrakk>\n                               \\<Longrightarrow> prefix l1 l2;\n                    length l1 < length (a # l2); prefix l1 l;\n                    prefix (a # l2) l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 (a # l2);\n        \\<And>l1 l.\n           \\<lbrakk>length l1 < length l2; prefix l1 l; prefix l2 l\\<rbrakk>\n           \\<Longrightarrow> prefix l1 l2;\n        length (aa # l1) < length (a # l2); prefix (aa # l1) l;\n        prefix (a # l2) l\\<rbrakk>\n       \\<Longrightarrow> prefix (aa # l1) (a # l2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa l1 l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>\\<And>l1 l.\n                               \\<lbrakk>length l1 < length l2; prefix l1 l;\n                                prefix l2 l\\<rbrakk>\n                               \\<Longrightarrow> prefix l1 l2;\n                    length l1 < length (a # l2); prefix l1 l;\n                    prefix (a # l2) l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 (a # l2);\n        \\<And>l1 l.\n           \\<lbrakk>length l1 < length l2; prefix l1 l; prefix l2 l\\<rbrakk>\n           \\<Longrightarrow> prefix l1 l2;\n        length (aa # l1) < length (a # l2); prefix (aa # l1) l;\n        prefix (a # l2) l\\<rbrakk>\n       \\<Longrightarrow> prefix (aa # l1) (a # l2)", "case (Cons b l1)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>l1 l.\n              \\<lbrakk>length l1 < length l2; prefix l1 l;\n               prefix l2 l\\<rbrakk>\n              \\<Longrightarrow> prefix l1 l2;\n   length l1 < length (a # l2); prefix l1 ?l; prefix (a # l2) ?l\\<rbrakk>\n  \\<Longrightarrow> prefix l1 (a # l2)\n  \\<lbrakk>length ?l1.0 < length l2; prefix ?l1.0 ?l; prefix l2 ?l\\<rbrakk>\n  \\<Longrightarrow> prefix ?l1.0 l2\n  length (b # l1) < length (a # l2)\n  prefix (b # l1) l\n  prefix (a # l2) l\n\ngoal (1 subgoal):\n 1. \\<And>aa l1 l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>\\<And>l1 l.\n                               \\<lbrakk>length l1 < length l2; prefix l1 l;\n                                prefix l2 l\\<rbrakk>\n                               \\<Longrightarrow> prefix l1 l2;\n                    length l1 < length (a # l2); prefix l1 l;\n                    prefix (a # l2) l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 (a # l2);\n        \\<And>l1 l.\n           \\<lbrakk>length l1 < length l2; prefix l1 l; prefix l2 l\\<rbrakk>\n           \\<Longrightarrow> prefix l1 l2;\n        length (aa # l1) < length (a # l2); prefix (aa # l1) l;\n        prefix (a # l2) l\\<rbrakk>\n       \\<Longrightarrow> prefix (aa # l1) (a # l2)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>l1 l.\n              \\<lbrakk>length l1 < length l2; prefix l1 l;\n               prefix l2 l\\<rbrakk>\n              \\<Longrightarrow> prefix l1 l2;\n   length l1 < length (a # l2); prefix l1 ?l; prefix (a # l2) ?l\\<rbrakk>\n  \\<Longrightarrow> prefix l1 (a # l2)\n  \\<lbrakk>length ?l1.0 < length l2; prefix ?l1.0 ?l; prefix l2 ?l\\<rbrakk>\n  \\<Longrightarrow> prefix ?l1.0 l2\n  length (b # l1) < length (a # l2)\n  prefix (b # l1) l\n  prefix (a # l2) l", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>l1 l.\n              \\<lbrakk>length l1 < length l2; prefix l1 l;\n               prefix l2 l\\<rbrakk>\n              \\<Longrightarrow> prefix l1 l2;\n   length l1 < length (a # l2); prefix l1 ?l; prefix (a # l2) ?l\\<rbrakk>\n  \\<Longrightarrow> prefix l1 (a # l2)\n  \\<lbrakk>length ?l1.0 < length l2; prefix ?l1.0 ?l; prefix l2 ?l\\<rbrakk>\n  \\<Longrightarrow> prefix ?l1.0 l2\n  length (b # l1) < length (a # l2)\n  prefix (b # l1) l\n  prefix (a # l2) l\n\ngoal (1 subgoal):\n 1. prefix (b # l1) (a # l2)", "proof(cases l)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>\\<And>l1 l.\n                            \\<lbrakk>length l1 < length l2; prefix l1 l;\n                             prefix l2 l\\<rbrakk>\n                            \\<Longrightarrow> prefix l1 l2;\n                 length l1 < length (a # l2); prefix l1 l;\n                 prefix (a # l2) l\\<rbrakk>\n                \\<Longrightarrow> prefix l1 (a # l2);\n     \\<And>l1 l.\n        \\<lbrakk>length l1 < length l2; prefix l1 l; prefix l2 l\\<rbrakk>\n        \\<Longrightarrow> prefix l1 l2;\n     length (b # l1) < length (a # l2); prefix (b # l1) l;\n     prefix (a # l2) l; l = []\\<rbrakk>\n    \\<Longrightarrow> prefix (b # l1) (a # l2)\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>\\<And>l1 l.\n                               \\<lbrakk>length l1 < length l2; prefix l1 l;\n                                prefix l2 l\\<rbrakk>\n                               \\<Longrightarrow> prefix l1 l2;\n                    length l1 < length (a # l2); prefix l1 l;\n                    prefix (a # l2) l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 (a # l2);\n        \\<And>l1 l.\n           \\<lbrakk>length l1 < length l2; prefix l1 l; prefix l2 l\\<rbrakk>\n           \\<Longrightarrow> prefix l1 l2;\n        length (b # l1) < length (a # l2); prefix (b # l1) l;\n        prefix (a # l2) l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "case Nil"], ["proof (state)\nthis:\n  l = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>\\<And>l1 l.\n                            \\<lbrakk>length l1 < length l2; prefix l1 l;\n                             prefix l2 l\\<rbrakk>\n                            \\<Longrightarrow> prefix l1 l2;\n                 length l1 < length (a # l2); prefix l1 l;\n                 prefix (a # l2) l\\<rbrakk>\n                \\<Longrightarrow> prefix l1 (a # l2);\n     \\<And>l1 l.\n        \\<lbrakk>length l1 < length l2; prefix l1 l; prefix l2 l\\<rbrakk>\n        \\<Longrightarrow> prefix l1 l2;\n     length (b # l1) < length (a # l2); prefix (b # l1) l;\n     prefix (a # l2) l; l = []\\<rbrakk>\n    \\<Longrightarrow> prefix (b # l1) (a # l2)\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>\\<And>l1 l.\n                               \\<lbrakk>length l1 < length l2; prefix l1 l;\n                                prefix l2 l\\<rbrakk>\n                               \\<Longrightarrow> prefix l1 l2;\n                    length l1 < length (a # l2); prefix l1 l;\n                    prefix (a # l2) l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 (a # l2);\n        \\<And>l1 l.\n           \\<lbrakk>length l1 < length l2; prefix l1 l; prefix l2 l\\<rbrakk>\n           \\<Longrightarrow> prefix l1 l2;\n        length (b # l1) < length (a # l2); prefix (b # l1) l;\n        prefix (a # l2) l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "then"], ["proof (chain)\npicking this:\n  l = []", "have \"\\<not>(prefix (a # l2) l)\""], ["proof (prove)\nusing this:\n  l = []\n\ngoal (1 subgoal):\n 1. \\<not> prefix (a # l2) l", "by simp"], ["proof (state)\nthis:\n  \\<not> prefix (a # l2) l\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>\\<And>l1 l.\n                            \\<lbrakk>length l1 < length l2; prefix l1 l;\n                             prefix l2 l\\<rbrakk>\n                            \\<Longrightarrow> prefix l1 l2;\n                 length l1 < length (a # l2); prefix l1 l;\n                 prefix (a # l2) l\\<rbrakk>\n                \\<Longrightarrow> prefix l1 (a # l2);\n     \\<And>l1 l.\n        \\<lbrakk>length l1 < length l2; prefix l1 l; prefix l2 l\\<rbrakk>\n        \\<Longrightarrow> prefix l1 l2;\n     length (b # l1) < length (a # l2); prefix (b # l1) l;\n     prefix (a # l2) l; l = []\\<rbrakk>\n    \\<Longrightarrow> prefix (b # l1) (a # l2)\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>\\<And>l1 l.\n                               \\<lbrakk>length l1 < length l2; prefix l1 l;\n                                prefix l2 l\\<rbrakk>\n                               \\<Longrightarrow> prefix l1 l2;\n                    length l1 < length (a # l2); prefix l1 l;\n                    prefix (a # l2) l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 (a # l2);\n        \\<And>l1 l.\n           \\<lbrakk>length l1 < length l2; prefix l1 l; prefix l2 l\\<rbrakk>\n           \\<Longrightarrow> prefix l1 l2;\n        length (b # l1) < length (a # l2); prefix (b # l1) l;\n        prefix (a # l2) l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "then"], ["proof (chain)\npicking this:\n  \\<not> prefix (a # l2) l", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> prefix (a # l2) l\n\ngoal (1 subgoal):\n 1. prefix (b # l1) (a # l2)", "using Cons.prems(4)"], ["proof (prove)\nusing this:\n  \\<not> prefix (a # l2) l\n  prefix (a # l2) l\n\ngoal (1 subgoal):\n 1. prefix (b # l1) (a # l2)", "by simp"], ["proof (state)\nthis:\n  prefix (b # l1) (a # l2)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>\\<And>l1 l.\n                               \\<lbrakk>length l1 < length l2; prefix l1 l;\n                                prefix l2 l\\<rbrakk>\n                               \\<Longrightarrow> prefix l1 l2;\n                    length l1 < length (a # l2); prefix l1 l;\n                    prefix (a # l2) l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 (a # l2);\n        \\<And>l1 l.\n           \\<lbrakk>length l1 < length l2; prefix l1 l; prefix l2 l\\<rbrakk>\n           \\<Longrightarrow> prefix l1 l2;\n        length (b # l1) < length (a # l2); prefix (b # l1) l;\n        prefix (a # l2) l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>\\<And>l1 l.\n                               \\<lbrakk>length l1 < length l2; prefix l1 l;\n                                prefix l2 l\\<rbrakk>\n                               \\<Longrightarrow> prefix l1 l2;\n                    length l1 < length (a # l2); prefix l1 l;\n                    prefix (a # l2) l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 (a # l2);\n        \\<And>l1 l.\n           \\<lbrakk>length l1 < length l2; prefix l1 l; prefix l2 l\\<rbrakk>\n           \\<Longrightarrow> prefix l1 l2;\n        length (b # l1) < length (a # l2); prefix (b # l1) l;\n        prefix (a # l2) l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "case (Cons c l)"], ["proof (state)\nthis:\n  lb__ = c # l\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>\\<And>l1 l.\n                               \\<lbrakk>length l1 < length l2; prefix l1 l;\n                                prefix l2 l\\<rbrakk>\n                               \\<Longrightarrow> prefix l1 l2;\n                    length l1 < length (a # l2); prefix l1 l;\n                    prefix (a # l2) l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 (a # l2);\n        \\<And>l1 l.\n           \\<lbrakk>length l1 < length l2; prefix l1 l; prefix l2 l\\<rbrakk>\n           \\<Longrightarrow> prefix l1 l2;\n        length (b # l1) < length (a # l2); prefix (b # l1) lb__;\n        prefix (a # l2) lb__; lb__ = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "then"], ["proof (chain)\npicking this:\n  lb__ = c # l", "have 1: \"length l2 > length l1\""], ["proof (prove)\nusing this:\n  lb__ = c # l\n\ngoal (1 subgoal):\n 1. length l1 < length l2", "using Cons.prems(2)"], ["proof (prove)\nusing this:\n  lb__ = c # l\n  length (b # l1) < length (a # l2)\n\ngoal (1 subgoal):\n 1. length l1 < length l2", "by fastforce"], ["proof (state)\nthis:\n  length l1 < length l2\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>\\<And>l1 l.\n                               \\<lbrakk>length l1 < length l2; prefix l1 l;\n                                prefix l2 l\\<rbrakk>\n                               \\<Longrightarrow> prefix l1 l2;\n                    length l1 < length (a # l2); prefix l1 l;\n                    prefix (a # l2) l\\<rbrakk>\n                   \\<Longrightarrow> prefix l1 (a # l2);\n        \\<And>l1 l.\n           \\<lbrakk>length l1 < length l2; prefix l1 l; prefix l2 l\\<rbrakk>\n           \\<Longrightarrow> prefix l1 l2;\n        length (b # l1) < length (a # l2); prefix (b # l1) lb__;\n        prefix (a # l2) lb__; lb__ = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "then"], ["proof (chain)\npicking this:\n  length l1 < length l2", "show ?thesis"], ["proof (prove)\nusing this:\n  length l1 < length l2\n\ngoal (1 subgoal):\n 1. prefix (b # l1) (a # l2)", "using Cons"], ["proof (prove)\nusing this:\n  length l1 < length l2\n  lb__ = c # l\n\ngoal (1 subgoal):\n 1. prefix (b # l1) (a # l2)", "proof(cases l)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>length l1 < length l2; lb__ = c # l; l = []\\<rbrakk>\n    \\<Longrightarrow> prefix (b # l1) (a # l2)\n 2. \\<And>aa list.\n       \\<lbrakk>length l1 < length l2; lb__ = c # l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "case Nil"], ["proof (state)\nthis:\n  l = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length l1 < length l2; lb__ = c # l; l = []\\<rbrakk>\n    \\<Longrightarrow> prefix (b # l1) (a # l2)\n 2. \\<And>aa list.\n       \\<lbrakk>length l1 < length l2; lb__ = c # l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "then"], ["proof (chain)\npicking this:\n  l = []", "have \"l1 = [c]\" \"l2 = [c]\""], ["proof (prove)\nusing this:\n  l = []\n\ngoal (1 subgoal):\n 1. l1 = [c] &&& l2 = [c]", "using Cons.prems(3, 4) local.Cons 1"], ["proof (prove)\nusing this:\n  l = []\n  prefix (b # l1) lb__\n  prefix (a # l2) lb__\n  lb__ = c # l\n  length l1 < length l2\n\ngoal (1 subgoal):\n 1. l1 = [c] &&& l2 = [c]", "by fastforce+"], ["proof (state)\nthis:\n  l1 = [c]\n  l2 = [c]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length l1 < length l2; lb__ = c # l; l = []\\<rbrakk>\n    \\<Longrightarrow> prefix (b # l1) (a # l2)\n 2. \\<And>aa list.\n       \\<lbrakk>length l1 < length l2; lb__ = c # l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "then"], ["proof (chain)\npicking this:\n  l1 = [c]\n  l2 = [c]", "show ?thesis"], ["proof (prove)\nusing this:\n  l1 = [c]\n  l2 = [c]\n\ngoal (1 subgoal):\n 1. prefix (b # l1) (a # l2)", "using 1"], ["proof (prove)\nusing this:\n  l1 = [c]\n  l2 = [c]\n  length l1 < length l2\n\ngoal (1 subgoal):\n 1. prefix (b # l1) (a # l2)", "by auto"], ["proof (state)\nthis:\n  prefix (b # l1) (a # l2)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>length l1 < length l2; lb__ = c # l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>length l1 < length l2; lb__ = c # l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "case (Cons d l')"], ["proof (state)\nthis:\n  l = d # l'\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>length l1 < length l2; lb__ = c # l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "{"], ["proof (state)\nthis:\n  l = d # l'\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>length l1 < length l2; lb__ = c # l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "thm len_ge_0"], ["proof (state)\nthis:\n  l = d # l'\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>length l1 < length l2; lb__ = c # l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "have \"length l1 \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> length l1", "by simp"], ["proof (state)\nthis:\n  0 \\<le> length l1\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>length l1 < length l2; lb__ = c # l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "then"], ["proof (chain)\npicking this:\n  0 \\<le> length l1", "have \"length l2 > 0\""], ["proof (prove)\nusing this:\n  0 \\<le> length l1\n\ngoal (1 subgoal):\n 1. 0 < length l2", "using 1"], ["proof (prove)\nusing this:\n  0 \\<le> length l1\n  length l1 < length l2\n\ngoal (1 subgoal):\n 1. 0 < length l2", "by force"], ["proof (state)\nthis:\n  0 < length l2\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>length l1 < length l2; lb__ = c # l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "then"], ["proof (chain)\npicking this:\n  0 < length l2", "have \"l2 \\<noteq> []\""], ["proof (prove)\nusing this:\n  0 < length l2\n\ngoal (1 subgoal):\n 1. l2 \\<noteq> []", "using 1"], ["proof (prove)\nusing this:\n  0 < length l2\n  length l1 < length l2\n\ngoal (1 subgoal):\n 1. l2 \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  l2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>length l1 < length l2; lb__ = c # l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "}"], ["proof (state)\nthis:\n  l2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>length l1 < length l2; lb__ = c # l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "then"], ["proof (chain)\npicking this:\n  l2 \\<noteq> []", "have \"length (a # l1) \\<le> length (b # l2)\""], ["proof (prove)\nusing this:\n  l2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. length (a # l1) \\<le> length (b # l2)", "using 1 le_eq_less_or_eq"], ["proof (prove)\nusing this:\n  l2 \\<noteq> []\n  length l1 < length l2\n  (?m \\<le> ?n) = (?m < ?n \\<or> ?m = ?n)\n\ngoal (1 subgoal):\n 1. length (a # l1) \\<le> length (b # l2)", "by simp"], ["proof (state)\nthis:\n  length (a # l1) \\<le> length (b # l2)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>length l1 < length l2; lb__ = c # l; l = aa # list\\<rbrakk>\n       \\<Longrightarrow> prefix (b # l1) (a # l2)", "then"], ["proof (chain)\npicking this:\n  length (a # l1) \\<le> length (b # l2)", "show ?thesis"], ["proof (prove)\nusing this:\n  length (a # l1) \\<le> length (b # l2)\n\ngoal (1 subgoal):\n 1. prefix (b # l1) (a # l2)", "using Cons.prems(3, 4) prefix_length_prefix"], ["proof (prove)\nusing this:\n  length (a # l1) \\<le> length (b # l2)\n  prefix (b # l1) lb__\n  prefix (a # l2) lb__\n  \\<lbrakk>prefix ?ps ?xs; prefix ?qs ?xs;\n   length ?ps \\<le> length ?qs\\<rbrakk>\n  \\<Longrightarrow> prefix ?ps ?qs\n\ngoal (1 subgoal):\n 1. prefix (b # l1) (a # l2)", "by fastforce"], ["proof (state)\nthis:\n  prefix (b # l1) (a # l2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prefix (b # l1) (a # l2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prefix (b # l1) (a # l2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prefix l1 (a # l2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nempty_list_append_length_add: \n  fixes l1 l2 l3\n  assumes \"l2 \\<noteq> []\"\n  shows \"length (l1 @ l3) < length (l1 @ l2 @l3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (l1 @ l3) < length (l1 @ l2 @ l3)", "using assms"], ["proof (prove)\nusing this:\n  l2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. length (l1 @ l3) < length (l1 @ l2 @ l3)", "by (induction l2) auto"], ["", "lemma append_filter: \n  fixes f1 :: \"'a \\<Rightarrow> bool\" and f2 as1 as2 and p :: \"'a list\"\n  assumes \"(as1 @ as2 = filter f1 (map f2 p))\"\n  shows \"(\\<exists>p_1 p_2. \n    (p_1 @ p_2 = p) \n    \\<and> (as1 = filter f1 (map f2 p_1)) \n    \\<and> (as2 = filter f1 (map f2 p_2))\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2.\n       p_1 @ p_2 = p \\<and>\n       as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)", "using assms"], ["proof (prove)\nusing this:\n  as1 @ as2 = filter f1 (map f2 p)\n\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2.\n       p_1 @ p_2 = p \\<and>\n       as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)", "proof (induction p arbitrary: f1 f2 as1 as2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f1 f2 as1 as2.\n       as1 @ as2 = filter f1 (map f2 []) \\<Longrightarrow>\n       \\<exists>p_1 p_2.\n          p_1 @ p_2 = [] \\<and>\n          as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)\n 2. \\<And>a p f1 f2 as1 as2.\n       \\<lbrakk>\\<And>f1 f2 as1 as2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "case Nil"], ["proof (state)\nthis:\n  as1 @ as2 = filter f1 (map f2 [])\n\ngoal (2 subgoals):\n 1. \\<And>f1 f2 as1 as2.\n       as1 @ as2 = filter f1 (map f2 []) \\<Longrightarrow>\n       \\<exists>p_1 p_2.\n          p_1 @ p_2 = [] \\<and>\n          as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)\n 2. \\<And>a p f1 f2 as1 as2.\n       \\<lbrakk>\\<And>f1 f2 as1 as2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "from Nil"], ["proof (chain)\npicking this:\n  as1 @ as2 = filter f1 (map f2 [])", "have 1: \"as1 @ as2 = []\""], ["proof (prove)\nusing this:\n  as1 @ as2 = filter f1 (map f2 [])\n\ngoal (1 subgoal):\n 1. as1 @ as2 = []", "by force"], ["proof (state)\nthis:\n  as1 @ as2 = []\n\ngoal (2 subgoals):\n 1. \\<And>f1 f2 as1 as2.\n       as1 @ as2 = filter f1 (map f2 []) \\<Longrightarrow>\n       \\<exists>p_1 p_2.\n          p_1 @ p_2 = [] \\<and>\n          as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)\n 2. \\<And>a p f1 f2 as1 as2.\n       \\<lbrakk>\\<And>f1 f2 as1 as2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "then"], ["proof (chain)\npicking this:\n  as1 @ as2 = []", "have 2: \"as1 = []\" \"as2 = []\""], ["proof (prove)\nusing this:\n  as1 @ as2 = []\n\ngoal (1 subgoal):\n 1. as1 = [] &&& as2 = []", "by blast+"], ["proof (state)\nthis:\n  as1 = []\n  as2 = []\n\ngoal (2 subgoals):\n 1. \\<And>f1 f2 as1 as2.\n       as1 @ as2 = filter f1 (map f2 []) \\<Longrightarrow>\n       \\<exists>p_1 p_2.\n          p_1 @ p_2 = [] \\<and>\n          as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)\n 2. \\<And>a p f1 f2 as1 as2.\n       \\<lbrakk>\\<And>f1 f2 as1 as2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "let ?p1=\"[]\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f1 f2 as1 as2.\n       as1 @ as2 = filter f1 (map f2 []) \\<Longrightarrow>\n       \\<exists>p_1 p_2.\n          p_1 @ p_2 = [] \\<and>\n          as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)\n 2. \\<And>a p f1 f2 as1 as2.\n       \\<lbrakk>\\<And>f1 f2 as1 as2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "let ?p2=\"[]\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f1 f2 as1 as2.\n       as1 @ as2 = filter f1 (map f2 []) \\<Longrightarrow>\n       \\<exists>p_1 p_2.\n          p_1 @ p_2 = [] \\<and>\n          as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)\n 2. \\<And>a p f1 f2 as1 as2.\n       \\<lbrakk>\\<And>f1 f2 as1 as2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "from 1 2"], ["proof (chain)\npicking this:\n  as1 @ as2 = []\n  as1 = []\n  as2 = []", "have \"?p1 @ ?p2 = []\" \"as1 = (filter f1 (map f2 ?p1))\" \"as2 = (filter f1 (map f2 ?p2))\""], ["proof (prove)\nusing this:\n  as1 @ as2 = []\n  as1 = []\n  as2 = []\n\ngoal (1 subgoal):\n 1. [] @ [] = [] &&&\n    as1 = filter f1 (map f2 []) &&& as2 = filter f1 (map f2 [])", "subgoal"], ["proof (prove)\nusing this:\n  as1 @ as2 = []\n  as1 = []\n  as2 = []\n\ngoal (1 subgoal):\n 1. [] @ [] = []", "by blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. as1 = filter f1 (map f2 [])\n 2. as2 = filter f1 (map f2 [])", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. as1 = filter f1 (map f2 [])", "using 2(1)"], ["proof (prove)\nusing this:\n  as1 = []\n\ngoal (1 subgoal):\n 1. as1 = filter f1 (map f2 [])", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. as2 = filter f1 (map f2 [])", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. as2 = filter f1 (map f2 [])", "using 2(2)"], ["proof (prove)\nusing this:\n  as2 = []\n\ngoal (1 subgoal):\n 1. as2 = filter f1 (map f2 [])", "by simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  [] @ [] = []\n  as1 = filter f1 (map f2 [])\n  as2 = filter f1 (map f2 [])\n\ngoal (2 subgoals):\n 1. \\<And>f1 f2 as1 as2.\n       as1 @ as2 = filter f1 (map f2 []) \\<Longrightarrow>\n       \\<exists>p_1 p_2.\n          p_1 @ p_2 = [] \\<and>\n          as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)\n 2. \\<And>a p f1 f2 as1 as2.\n       \\<lbrakk>\\<And>f1 f2 as1 as2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "then"], ["proof (chain)\npicking this:\n  [] @ [] = []\n  as1 = filter f1 (map f2 [])\n  as2 = filter f1 (map f2 [])", "show ?case"], ["proof (prove)\nusing this:\n  [] @ [] = []\n  as1 = filter f1 (map f2 [])\n  as2 = filter f1 (map f2 [])\n\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2.\n       p_1 @ p_2 = [] \\<and>\n       as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)", "by fast"], ["proof (state)\nthis:\n  \\<exists>p_1 p_2.\n     p_1 @ p_2 = [] \\<and>\n     as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)\n\ngoal (1 subgoal):\n 1. \\<And>a p f1 f2 as1 as2.\n       \\<lbrakk>\\<And>f1 f2 as1 as2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p f1 f2 as1 as2.\n       \\<lbrakk>\\<And>f1 f2 as1 as2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "case cons: (Cons a p)"], ["proof (state)\nthis:\n  ?as1.0 @ ?as2.0 = filter ?f1.0 (map ?f2.0 p) \\<Longrightarrow>\n  \\<exists>p_1 p_2.\n     p_1 @ p_2 = p \\<and>\n     ?as1.0 = filter ?f1.0 (map ?f2.0 p_1) \\<and>\n     ?as2.0 = filter ?f1.0 (map ?f2.0 p_2)\n  as1 @ as2 = filter f1 (map f2 (a # p))\n\ngoal (1 subgoal):\n 1. \\<And>a p f1 f2 as1 as2.\n       \\<lbrakk>\\<And>f1 f2 as1 as2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "then"], ["proof (chain)\npicking this:\n  ?as1.0 @ ?as2.0 = filter ?f1.0 (map ?f2.0 p) \\<Longrightarrow>\n  \\<exists>p_1 p_2.\n     p_1 @ p_2 = p \\<and>\n     ?as1.0 = filter ?f1.0 (map ?f2.0 p_1) \\<and>\n     ?as2.0 = filter ?f1.0 (map ?f2.0 p_2)\n  as1 @ as2 = filter f1 (map f2 (a # p))", "show ?case"], ["proof (prove)\nusing this:\n  ?as1.0 @ ?as2.0 = filter ?f1.0 (map ?f2.0 p) \\<Longrightarrow>\n  \\<exists>p_1 p_2.\n     p_1 @ p_2 = p \\<and>\n     ?as1.0 = filter ?f1.0 (map ?f2.0 p_1) \\<and>\n     ?as2.0 = filter ?f1.0 (map ?f2.0 p_2)\n  as1 @ as2 = filter f1 (map f2 (a # p))\n\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2.\n       p_1 @ p_2 = a # p \\<and>\n       as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)", "proof (cases \"as1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>as1 as2 f1 f2.\n                as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                \\<exists>p_1 p_2.\n                   p_1 @ p_2 = p \\<and>\n                   as1 = filter f1 (map f2 p_1) \\<and>\n                   as2 = filter f1 (map f2 p_2);\n     as1 @ as2 = filter f1 (map f2 (a # p)); as1 = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>as1 as2 f1 f2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p)); as1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "case Nil"], ["proof (state)\nthis:\n  as1 = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>as1 as2 f1 f2.\n                as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                \\<exists>p_1 p_2.\n                   p_1 @ p_2 = p \\<and>\n                   as1 = filter f1 (map f2 p_1) \\<and>\n                   as2 = filter f1 (map f2 p_2);\n     as1 @ as2 = filter f1 (map f2 (a # p)); as1 = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>as1 as2 f1 f2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p)); as1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "from cons.prems Nil"], ["proof (chain)\npicking this:\n  as1 @ as2 = filter f1 (map f2 (a # p))\n  as1 = []", "have 1: \"as2 = filter f1 (map f2 (a # p))\""], ["proof (prove)\nusing this:\n  as1 @ as2 = filter f1 (map f2 (a # p))\n  as1 = []\n\ngoal (1 subgoal):\n 1. as2 = filter f1 (map f2 (a # p))", "by simp"], ["proof (state)\nthis:\n  as2 = filter f1 (map f2 (a # p))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>as1 as2 f1 f2.\n                as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                \\<exists>p_1 p_2.\n                   p_1 @ p_2 = p \\<and>\n                   as1 = filter f1 (map f2 p_1) \\<and>\n                   as2 = filter f1 (map f2 p_2);\n     as1 @ as2 = filter f1 (map f2 (a # p)); as1 = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>as1 as2 f1 f2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p)); as1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "let ?p1=\"[]\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>as1 as2 f1 f2.\n                as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                \\<exists>p_1 p_2.\n                   p_1 @ p_2 = p \\<and>\n                   as1 = filter f1 (map f2 p_1) \\<and>\n                   as2 = filter f1 (map f2 p_2);\n     as1 @ as2 = filter f1 (map f2 (a # p)); as1 = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>as1 as2 f1 f2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p)); as1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "let ?p2=\"a # p\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>as1 as2 f1 f2.\n                as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                \\<exists>p_1 p_2.\n                   p_1 @ p_2 = p \\<and>\n                   as1 = filter f1 (map f2 p_1) \\<and>\n                   as2 = filter f1 (map f2 p_2);\n     as1 @ as2 = filter f1 (map f2 (a # p)); as1 = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>as1 as2 f1 f2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p)); as1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "have \"?p1 @ ?p2 = a # p\" \"as1 = filter f1 (map f2 ?p1)\" \"as2 = filter f1 (map f2 ?p2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] @ a # p = a # p &&&\n    as1 = filter f1 (map f2 []) &&& as2 = filter f1 (map f2 (a # p))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. [] @ a # p = a # p", "by simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. as1 = filter f1 (map f2 [])\n 2. as2 = filter f1 (map f2 (a # p))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. as1 = filter f1 (map f2 [])", "using Nil"], ["proof (prove)\nusing this:\n  as1 = []\n\ngoal (1 subgoal):\n 1. as1 = filter f1 (map f2 [])", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. as2 = filter f1 (map f2 (a # p))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. as2 = filter f1 (map f2 (a # p))", "using 1"], ["proof (prove)\nusing this:\n  as2 = filter f1 (map f2 (a # p))\n\ngoal (1 subgoal):\n 1. as2 = filter f1 (map f2 (a # p))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  [] @ a # p = a # p\n  as1 = filter f1 (map f2 [])\n  as2 = filter f1 (map f2 (a # p))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>as1 as2 f1 f2.\n                as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                \\<exists>p_1 p_2.\n                   p_1 @ p_2 = p \\<and>\n                   as1 = filter f1 (map f2 p_1) \\<and>\n                   as2 = filter f1 (map f2 p_2);\n     as1 @ as2 = filter f1 (map f2 (a # p)); as1 = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)\n 2. \\<And>aa list.\n       \\<lbrakk>\\<And>as1 as2 f1 f2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p)); as1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "then"], ["proof (chain)\npicking this:\n  [] @ a # p = a # p\n  as1 = filter f1 (map f2 [])\n  as2 = filter f1 (map f2 (a # p))", "show ?thesis"], ["proof (prove)\nusing this:\n  [] @ a # p = a # p\n  as1 = filter f1 (map f2 [])\n  as2 = filter f1 (map f2 (a # p))\n\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2.\n       p_1 @ p_2 = a # p \\<and>\n       as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)", "by blast"], ["proof (state)\nthis:\n  \\<exists>p_1 p_2.\n     p_1 @ p_2 = a # p \\<and>\n     as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>as1 as2 f1 f2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p)); as1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>as1 as2 f1 f2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p)); as1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "case (Cons a' p')"], ["proof (state)\nthis:\n  as1 = a' # p'\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>\\<And>as1 as2 f1 f2.\n                   as1 @ as2 = filter f1 (map f2 p) \\<Longrightarrow>\n                   \\<exists>p_1 p_2.\n                      p_1 @ p_2 = p \\<and>\n                      as1 = filter f1 (map f2 p_1) \\<and>\n                      as2 = filter f1 (map f2 p_2);\n        as1 @ as2 = filter f1 (map f2 (a # p)); as1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p_1 p_2.\n                            p_1 @ p_2 = a # p \\<and>\n                            as1 = filter f1 (map f2 p_1) \\<and>\n                            as2 = filter f1 (map f2 p_2)", "then"], ["proof (chain)\npicking this:\n  as1 = a' # p'", "show ?thesis"], ["proof (prove)\nusing this:\n  as1 = a' # p'\n\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2.\n       p_1 @ p_2 = a # p \\<and>\n       as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)", "proof (cases \"\\<not>f1 (f2 a)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)\n 2. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "case True"], ["proof (state)\nthis:\n  \\<not> f1 (f2 a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)\n 2. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "hence \"filter f1 (map f2 (a # p)) = filter f1 (map f2 p)\""], ["proof (prove)\nusing this:\n  \\<not> f1 (f2 a)\n\ngoal (1 subgoal):\n 1. filter f1 (map f2 (a # p)) = filter f1 (map f2 p)", "by fastforce"], ["proof (state)\nthis:\n  filter f1 (map f2 (a # p)) = filter f1 (map f2 p)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)\n 2. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "hence \"as1 @ as2 = filter f1 (map f2 p)\""], ["proof (prove)\nusing this:\n  filter f1 (map f2 (a # p)) = filter f1 (map f2 p)\n\ngoal (1 subgoal):\n 1. as1 @ as2 = filter f1 (map f2 p)", "using cons.prems"], ["proof (prove)\nusing this:\n  filter f1 (map f2 (a # p)) = filter f1 (map f2 p)\n  as1 @ as2 = filter f1 (map f2 (a # p))\n\ngoal (1 subgoal):\n 1. as1 @ as2 = filter f1 (map f2 p)", "by argo"], ["proof (state)\nthis:\n  as1 @ as2 = filter f1 (map f2 p)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)\n 2. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "then"], ["proof (chain)\npicking this:\n  as1 @ as2 = filter f1 (map f2 p)", "obtain p1 p2 where a:\n        \"p1 @ p2 = p\" \"as1 = filter f1 (map f2 p1)\" \"as2 = filter f1 (map f2 p2)\""], ["proof (prove)\nusing this:\n  as1 @ as2 = filter f1 (map f2 p)\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        \\<lbrakk>p1 @ p2 = p; as1 = filter f1 (map f2 p1);\n         as2 = filter f1 (map f2 p2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cons.IH"], ["proof (prove)\nusing this:\n  as1 @ as2 = filter f1 (map f2 p)\n  ?as1.0 @ ?as2.0 = filter ?f1.0 (map ?f2.0 p) \\<Longrightarrow>\n  \\<exists>p_1 p_2.\n     p_1 @ p_2 = p \\<and>\n     ?as1.0 = filter ?f1.0 (map ?f2.0 p_1) \\<and>\n     ?as2.0 = filter ?f1.0 (map ?f2.0 p_2)\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        \\<lbrakk>p1 @ p2 = p; as1 = filter f1 (map f2 p1);\n         as2 = filter f1 (map f2 p2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by meson"], ["proof (state)\nthis:\n  p1 @ p2 = p\n  as1 = filter f1 (map f2 p1)\n  as2 = filter f1 (map f2 p2)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)\n 2. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "let ?p1=\"a # p1\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)\n 2. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "let ?p2=\"p2\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)\n 2. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "have \"?p1 @ ?p2 = a # p\" \"as1 = filter f1 (map f2 ?p1)\" \"as2 = filter f1 (map f2 ?p2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a # p1) @ p2 = a # p &&&\n    as1 = filter f1 (map f2 (a # p1)) &&& as2 = filter f1 (map f2 p2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a # p1) @ p2 = a # p", "using a(1)"], ["proof (prove)\nusing this:\n  p1 @ p2 = p\n\ngoal (1 subgoal):\n 1. (a # p1) @ p2 = a # p", "by fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. as1 = filter f1 (map f2 (a # p1))\n 2. as2 = filter f1 (map f2 p2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. as1 = filter f1 (map f2 (a # p1))", "using True a(2)"], ["proof (prove)\nusing this:\n  \\<not> f1 (f2 a)\n  as1 = filter f1 (map f2 p1)\n\ngoal (1 subgoal):\n 1. as1 = filter f1 (map f2 (a # p1))", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. as2 = filter f1 (map f2 p2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. as2 = filter f1 (map f2 p2)", "using a(3)"], ["proof (prove)\nusing this:\n  as2 = filter f1 (map f2 p2)\n\ngoal (1 subgoal):\n 1. as2 = filter f1 (map f2 p2)", "by blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (a # p1) @ p2 = a # p\n  as1 = filter f1 (map f2 (a # p1))\n  as2 = filter f1 (map f2 p2)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)\n 2. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "then"], ["proof (chain)\npicking this:\n  (a # p1) @ p2 = a # p\n  as1 = filter f1 (map f2 (a # p1))\n  as2 = filter f1 (map f2 p2)", "show ?thesis"], ["proof (prove)\nusing this:\n  (a # p1) @ p2 = a # p\n  as1 = filter f1 (map f2 (a # p1))\n  as2 = filter f1 (map f2 p2)\n\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2.\n       p_1 @ p_2 = a # p \\<and>\n       as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)", "by blast"], ["proof (state)\nthis:\n  \\<exists>p_1 p_2.\n     p_1 @ p_2 = a # p \\<and>\n     as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "case False"], ["proof (state)\nthis:\n  \\<not> \\<not> f1 (f2 a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "hence \"filter f1 (map f2 (a # p)) = f2 a # filter f1 (map f2 p)\""], ["proof (prove)\nusing this:\n  \\<not> \\<not> f1 (f2 a)\n\ngoal (1 subgoal):\n 1. filter f1 (map f2 (a # p)) = f2 a # filter f1 (map f2 p)", "by fastforce"], ["proof (state)\nthis:\n  filter f1 (map f2 (a # p)) = f2 a # filter f1 (map f2 p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "then"], ["proof (chain)\npicking this:\n  filter f1 (map f2 (a # p)) = f2 a # filter f1 (map f2 p)", "have 1: \"a' = f2 a\" \"p' @ as2 = filter f1 (map f2 p)\" \"as1 = a' # p'\""], ["proof (prove)\nusing this:\n  filter f1 (map f2 (a # p)) = f2 a # filter f1 (map f2 p)\n\ngoal (1 subgoal):\n 1. a' = f2 a &&& p' @ as2 = filter f1 (map f2 p) &&& as1 = a' # p'", "using cons.prems Cons"], ["proof (prove)\nusing this:\n  filter f1 (map f2 (a # p)) = f2 a # filter f1 (map f2 p)\n  as1 @ as2 = filter f1 (map f2 (a # p))\n  as1 = a' # p'\n\ngoal (1 subgoal):\n 1. a' = f2 a &&& p' @ as2 = filter f1 (map f2 p) &&& as1 = a' # p'", "by fastforce+"], ["proof (state)\nthis:\n  a' = f2 a\n  p' @ as2 = filter f1 (map f2 p)\n  as1 = a' # p'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "then"], ["proof (chain)\npicking this:\n  a' = f2 a\n  p' @ as2 = filter f1 (map f2 p)\n  as1 = a' # p'", "obtain p1 p2 where 2:\n        \"p1 @ p2 = p\" \"p' = filter f1 (map f2 p1)\" \"as2 = filter f1 (map f2 p2)\""], ["proof (prove)\nusing this:\n  a' = f2 a\n  p' @ as2 = filter f1 (map f2 p)\n  as1 = a' # p'\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        \\<lbrakk>p1 @ p2 = p; p' = filter f1 (map f2 p1);\n         as2 = filter f1 (map f2 p2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cons.IH"], ["proof (prove)\nusing this:\n  a' = f2 a\n  p' @ as2 = filter f1 (map f2 p)\n  as1 = a' # p'\n  ?as1.0 @ ?as2.0 = filter ?f1.0 (map ?f2.0 p) \\<Longrightarrow>\n  \\<exists>p_1 p_2.\n     p_1 @ p_2 = p \\<and>\n     ?as1.0 = filter ?f1.0 (map ?f2.0 p_1) \\<and>\n     ?as2.0 = filter ?f1.0 (map ?f2.0 p_2)\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        \\<lbrakk>p1 @ p2 = p; p' = filter f1 (map f2 p1);\n         as2 = filter f1 (map f2 p2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by meson"], ["proof (state)\nthis:\n  p1 @ p2 = p\n  p' = filter f1 (map f2 p1)\n  as2 = filter f1 (map f2 p2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "let ?p1=\"a # p1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "let ?p2=\"p2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "have \"?p1 @ ?p2 = a # p\" \"as1 = filter f1 (map f2 ?p1)\" \"as2 = filter f1 (map f2 ?p2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a # p1) @ p2 = a # p &&&\n    as1 = filter f1 (map f2 (a # p1)) &&& as2 = filter f1 (map f2 p2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a # p1) @ p2 = a # p", "using 2(1)"], ["proof (prove)\nusing this:\n  p1 @ p2 = p\n\ngoal (1 subgoal):\n 1. (a # p1) @ p2 = a # p", "by simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. as1 = filter f1 (map f2 (a # p1))\n 2. as2 = filter f1 (map f2 p2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. as1 = filter f1 (map f2 (a # p1))", "using False 1(1, 3) 2(2)"], ["proof (prove)\nusing this:\n  \\<not> \\<not> f1 (f2 a)\n  a' = f2 a\n  as1 = a' # p'\n  p' = filter f1 (map f2 p1)\n\ngoal (1 subgoal):\n 1. as1 = filter f1 (map f2 (a # p1))", "by force"], ["proof (prove)\ngoal (1 subgoal):\n 1. as2 = filter f1 (map f2 p2)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. as2 = filter f1 (map f2 p2)", "using 2(3)"], ["proof (prove)\nusing this:\n  as2 = filter f1 (map f2 p2)\n\ngoal (1 subgoal):\n 1. as2 = filter f1 (map f2 p2)", "by blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (a # p1) @ p2 = a # p\n  as1 = filter f1 (map f2 (a # p1))\n  as2 = filter f1 (map f2 p2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>as1 = a' # p'; \\<not> \\<not> f1 (f2 a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p_1 p_2.\n                         p_1 @ p_2 = a # p \\<and>\n                         as1 = filter f1 (map f2 p_1) \\<and>\n                         as2 = filter f1 (map f2 p_2)", "then"], ["proof (chain)\npicking this:\n  (a # p1) @ p2 = a # p\n  as1 = filter f1 (map f2 (a # p1))\n  as2 = filter f1 (map f2 p2)", "show ?thesis"], ["proof (prove)\nusing this:\n  (a # p1) @ p2 = a # p\n  as1 = filter f1 (map f2 (a # p1))\n  as2 = filter f1 (map f2 p2)\n\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2.\n       p_1 @ p_2 = a # p \\<and>\n       as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)", "by blast"], ["proof (state)\nthis:\n  \\<exists>p_1 p_2.\n     p_1 @ p_2 = a # p \\<and>\n     as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>p_1 p_2.\n     p_1 @ p_2 = a # p \\<and>\n     as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>p_1 p_2.\n     p_1 @ p_2 = a # p \\<and>\n     as1 = filter f1 (map f2 p_1) \\<and> as2 = filter f1 (map f2 p_2)\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE types of `f1` and `p` had to be fixed for `append\\_eq\\_as\\_proj\\_1`.\\<close>"], ["", "lemma append_eq_as_proj_1: \n  fixes f1 :: \"'a \\<Rightarrow> bool\" and f2 as1 as2 as3 and p :: \"'a list\"\n  assumes \"(as1 @ as2 @ as3 = filter f1 (map f2  p))\"\n  shows \"(\\<exists>p_1 p_2 p_3. \n    (p_1 @ p_2 @ p_3 = p) \n    \\<and> (as1 = filter f1 (map f2 p_1)) \n    \\<and> (as2 = filter f1 (map f2 p_2)) \n    \\<and> (as3 = filter f1 (map f2 p_3))\n  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2 p_3.\n       p_1 @ p_2 @ p_3 = p \\<and>\n       as1 = filter f1 (map f2 p_1) \\<and>\n       as2 = filter f1 (map f2 p_2) \\<and> as3 = filter f1 (map f2 p_3)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2 p_3.\n       p_1 @ p_2 @ p_3 = p \\<and>\n       as1 = filter f1 (map f2 p_1) \\<and>\n       as2 = filter f1 (map f2 p_2) \\<and> as3 = filter f1 (map f2 p_3)", "from assms"], ["proof (chain)\npicking this:\n  as1 @ as2 @ as3 = filter f1 (map f2 p)", "obtain p_1 p_2 where 1: \"(p_1 @ p_2 = p)\" \"(as1 = filter f1 (map f2 p_1))\" \n    \"(as2 @ as3 = filter f1 (map f2 p_2))\""], ["proof (prove)\nusing this:\n  as1 @ as2 @ as3 = filter f1 (map f2 p)\n\ngoal (1 subgoal):\n 1. (\\<And>p_1 p_2.\n        \\<lbrakk>p_1 @ p_2 = p; as1 = filter f1 (map f2 p_1);\n         as2 @ as3 = filter f1 (map f2 p_2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using append_filter[of as1 \"(as2 @ as3)\"]"], ["proof (prove)\nusing this:\n  as1 @ as2 @ as3 = filter f1 (map f2 p)\n  as1 @ as2 @ as3 = filter ?f1.0 (map ?f2.0 ?p) \\<Longrightarrow>\n  \\<exists>p_1 p_2.\n     p_1 @ p_2 = ?p \\<and>\n     as1 = filter ?f1.0 (map ?f2.0 p_1) \\<and>\n     as2 @ as3 = filter ?f1.0 (map ?f2.0 p_2)\n\ngoal (1 subgoal):\n 1. (\\<And>p_1 p_2.\n        \\<lbrakk>p_1 @ p_2 = p; as1 = filter f1 (map f2 p_1);\n         as2 @ as3 = filter f1 (map f2 p_2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by meson"], ["proof (state)\nthis:\n  p_1 @ p_2 = p\n  as1 = filter f1 (map f2 p_1)\n  as2 @ as3 = filter f1 (map f2 p_2)\n\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2 p_3.\n       p_1 @ p_2 @ p_3 = p \\<and>\n       as1 = filter f1 (map f2 p_1) \\<and>\n       as2 = filter f1 (map f2 p_2) \\<and> as3 = filter f1 (map f2 p_3)", "moreover"], ["proof (state)\nthis:\n  p_1 @ p_2 = p\n  as1 = filter f1 (map f2 p_1)\n  as2 @ as3 = filter f1 (map f2 p_2)\n\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2 p_3.\n       p_1 @ p_2 @ p_3 = p \\<and>\n       as1 = filter f1 (map f2 p_1) \\<and>\n       as2 = filter f1 (map f2 p_2) \\<and> as3 = filter f1 (map f2 p_3)", "from 1"], ["proof (chain)\npicking this:\n  p_1 @ p_2 = p\n  as1 = filter f1 (map f2 p_1)\n  as2 @ as3 = filter f1 (map f2 p_2)", "obtain p_a p_b where \"(p_a @ p_b = p_2)\" \"(as2 = filter f1 (map f2 p_a))\"\n    \"(as3 = filter f1 (map f2 p_b))\""], ["proof (prove)\nusing this:\n  p_1 @ p_2 = p\n  as1 = filter f1 (map f2 p_1)\n  as2 @ as3 = filter f1 (map f2 p_2)\n\ngoal (1 subgoal):\n 1. (\\<And>p_a p_b.\n        \\<lbrakk>p_a @ p_b = p_2; as2 = filter f1 (map f2 p_a);\n         as3 = filter f1 (map f2 p_b)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using append_filter[where p=p_2]"], ["proof (prove)\nusing this:\n  p_1 @ p_2 = p\n  as1 = filter f1 (map f2 p_1)\n  as2 @ as3 = filter f1 (map f2 p_2)\n  ?as1.0 @ ?as2.0 = filter ?f1.0 (map ?f2.0 p_2) \\<Longrightarrow>\n  \\<exists>p_1 p_2a.\n     p_1 @ p_2a = p_2 \\<and>\n     ?as1.0 = filter ?f1.0 (map ?f2.0 p_1) \\<and>\n     ?as2.0 = filter ?f1.0 (map ?f2.0 p_2a)\n\ngoal (1 subgoal):\n 1. (\\<And>p_a p_b.\n        \\<lbrakk>p_a @ p_b = p_2; as2 = filter f1 (map f2 p_a);\n         as3 = filter f1 (map f2 p_b)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by meson"], ["proof (state)\nthis:\n  p_a @ p_b = p_2\n  as2 = filter f1 (map f2 p_a)\n  as3 = filter f1 (map f2 p_b)\n\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2 p_3.\n       p_1 @ p_2 @ p_3 = p \\<and>\n       as1 = filter f1 (map f2 p_1) \\<and>\n       as2 = filter f1 (map f2 p_2) \\<and> as3 = filter f1 (map f2 p_3)", "ultimately"], ["proof (chain)\npicking this:\n  p_1 @ p_2 = p\n  as1 = filter f1 (map f2 p_1)\n  as2 @ as3 = filter f1 (map f2 p_2)\n  p_a @ p_b = p_2\n  as2 = filter f1 (map f2 p_a)\n  as3 = filter f1 (map f2 p_b)", "show ?thesis"], ["proof (prove)\nusing this:\n  p_1 @ p_2 = p\n  as1 = filter f1 (map f2 p_1)\n  as2 @ as3 = filter f1 (map f2 p_2)\n  p_a @ p_b = p_2\n  as2 = filter f1 (map f2 p_a)\n  as3 = filter f1 (map f2 p_b)\n\ngoal (1 subgoal):\n 1. \\<exists>p_1 p_2 p_3.\n       p_1 @ p_2 @ p_3 = p \\<and>\n       as1 = filter f1 (map f2 p_1) \\<and>\n       as2 = filter f1 (map f2 p_2) \\<and> as3 = filter f1 (map f2 p_3)", "by blast"], ["proof (state)\nthis:\n  \\<exists>p_1 p_2 p_3.\n     p_1 @ p_2 @ p_3 = p \\<and>\n     as1 = filter f1 (map f2 p_1) \\<and>\n     as2 = filter f1 (map f2 p_2) \\<and> as3 = filter f1 (map f2 p_3)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filter_empty_every_not: \"\\<And>P l. (filter (\\<lambda>x. P x) l = []) = list_all (\\<lambda>x. \\<not>P x) l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P l. (filter P l = []) = list_all (\\<lambda>x. \\<not> P x) l", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P l. (filter P l = []) = list_all (\\<lambda>x. \\<not> P x) l", "fix P l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P l. (filter P l = []) = list_all (\\<lambda>x. \\<not> P x) l", "show \"(filter (\\<lambda>x. P x) l = []) = list_all (\\<lambda>x. \\<not>P x) l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (filter P l = []) = list_all (\\<lambda>x. \\<not> P x) l", "apply(induction l)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (filter P [] = []) = list_all (\\<lambda>x. \\<not> P x) []\n 2. \\<And>a l.\n       (filter P l = []) =\n       list_all (\\<lambda>x. \\<not> P x) l \\<Longrightarrow>\n       (filter P (a # l) = []) = list_all (\\<lambda>x. \\<not> P x) (a # l)", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (filter P l = []) = list_all (\\<lambda>x. \\<not> P x) l\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE added lemma (listScript.sml:810).\\<close>"], ["", "lemma MEM_SPLIT:\n  fixes x l\n  assumes \"\\<not>ListMem x l\" \n  shows \"\\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2", "assume C: \"\\<not>(\\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2)\""], ["proof (state)\nthis:\n  \\<not> (\\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2)\n\ngoal (1 subgoal):\n 1. \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2)", "have \"\\<exists>l1 l2. l = l1 @ [x] @ l2\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2)\n\ngoal (1 subgoal):\n 1. \\<exists>l1 l2. l = l1 @ [x] @ l2", "by blast"], ["proof (state)\nthis:\n  \\<exists>l1 l2. l = l1 @ [x] @ l2\n\ngoal (1 subgoal):\n 1. \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2", "then"], ["proof (chain)\npicking this:\n  \\<exists>l1 l2. l = l1 @ [x] @ l2", "obtain l1 l2 where 1: \"l = l1 @ [x] @ l2\""], ["proof (prove)\nusing this:\n  \\<exists>l1 l2. l = l1 @ [x] @ l2\n\ngoal (1 subgoal):\n 1. (\\<And>l1 l2.\n        l = l1 @ [x] @ l2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l = l1 @ [x] @ l2\n\ngoal (1 subgoal):\n 1. \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2", "from assms"], ["proof (chain)\npicking this:\n  \\<not> ListMem x l", "have 2: \"(\\<forall>xs. l \\<noteq> x # xs) \\<and> (\\<forall>xs. (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs)\""], ["proof (prove)\nusing this:\n  \\<not> ListMem x l\n\ngoal (1 subgoal):\n 1. (\\<forall>xs. l \\<noteq> x # xs) \\<and>\n    (\\<forall>xs. (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs)", "using ListMem_iff"], ["proof (prove)\nusing this:\n  \\<not> ListMem x l\n  ListMem ?x ?xs = (?x \\<in> set ?xs)\n\ngoal (1 subgoal):\n 1. (\\<forall>xs. l \\<noteq> x # xs) \\<and>\n    (\\<forall>xs. (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs)", "by fastforce"], ["proof (state)\nthis:\n  (\\<forall>xs. l \\<noteq> x # xs) \\<and>\n  (\\<forall>xs. (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs)\n\ngoal (1 subgoal):\n 1. \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2", "then"], ["proof (chain)\npicking this:\n  (\\<forall>xs. l \\<noteq> x # xs) \\<and>\n  (\\<forall>xs. (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs)", "have False"], ["proof (prove)\nusing this:\n  (\\<forall>xs. l \\<noteq> x # xs) \\<and>\n  (\\<forall>xs. (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs)\n\ngoal (1 subgoal):\n 1. False", "proof (cases l1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n             (\\<forall>xs.\n                 (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs);\n     l1 = []\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "case Nil"], ["proof (state)\nthis:\n  l1 = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n             (\\<forall>xs.\n                 (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs);\n     l1 = []\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "let ?xs=\"l2\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n             (\\<forall>xs.\n                 (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs);\n     l1 = []\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "from 1 Nil"], ["proof (chain)\npicking this:\n  l = l1 @ [x] @ l2\n  l1 = []", "have \"l = [x] @ ?xs\""], ["proof (prove)\nusing this:\n  l = l1 @ [x] @ l2\n  l1 = []\n\ngoal (1 subgoal):\n 1. l = [x] @ l2", "by blast"], ["proof (state)\nthis:\n  l = [x] @ l2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n             (\\<forall>xs.\n                 (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs);\n     l1 = []\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  l = [x] @ l2", "show ?thesis"], ["proof (prove)\nusing this:\n  l = [x] @ l2\n\ngoal (1 subgoal):\n 1. False", "using 2"], ["proof (prove)\nusing this:\n  l = [x] @ l2\n  (\\<forall>xs. l \\<noteq> x # xs) \\<and>\n  (\\<forall>xs. (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "case (Cons a list)"], ["proof (state)\nthis:\n  l1 = a # list\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  l1 = a # list\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "let ?y=\"a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "let ?xs=\"list @ [x] @ l2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "from 1 Cons"], ["proof (chain)\npicking this:\n  l = l1 @ [x] @ l2\n  l1 = a # list", "have \"l = ?y # ?xs\""], ["proof (prove)\nusing this:\n  l = l1 @ [x] @ l2\n  l1 = a # list\n\ngoal (1 subgoal):\n 1. l = a # list @ [x] @ l2", "by simp"], ["proof (state)\nthis:\n  l = a # list @ [x] @ l2\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  l = a # list @ [x] @ l2\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "have \"ListMem x ?xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ListMem x (list @ [x] @ l2)", "by (simp add: ListMem_iff)"], ["proof (state)\nthis:\n  ListMem x (list @ [x] @ l2)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  l = a # list @ [x] @ l2\n  ListMem x (list @ [x] @ l2)", "have \"\\<exists>xs. \\<exists>y. l = y # xs \\<and> ListMem x xs\""], ["proof (prove)\nusing this:\n  l = a # list @ [x] @ l2\n  ListMem x (list @ [x] @ l2)\n\ngoal (1 subgoal):\n 1. \\<exists>xs y. l = y # xs \\<and> ListMem x xs", "by blast"], ["proof (state)\nthis:\n  \\<exists>xs y. l = y # xs \\<and> ListMem x xs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>xs y. l = y # xs \\<and> ListMem x xs", "have \"\\<not>(\\<forall>xs. (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs)\""], ["proof (prove)\nusing this:\n  \\<exists>xs y. l = y # xs \\<and> ListMem x xs\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>xs.\n               (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs)", "by presburger"], ["proof (state)\nthis:\n  \\<not> (\\<forall>xs.\n             (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  \\<not> (\\<forall>xs.\n             (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>(\\<forall>xs. l \\<noteq> x # xs) \\<and>\n                (\\<forall>xs.\n                    (\\<forall>y. l \\<noteq> y # xs) \\<or>\n                    \\<not> ListMem x xs);\n        l1 = a # list\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>xs.\n             (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>xs.\n             (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs)\n\ngoal (1 subgoal):\n 1. False", "using 2"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>xs.\n             (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs)\n  (\\<forall>xs. l \\<noteq> x # xs) \\<and>\n  (\\<forall>xs. (\\<forall>y. l \\<noteq> y # xs) \\<or> \\<not> ListMem x xs)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2", "}"], ["proof (state)\nthis:\n  \\<not> (\\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2) \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2", "by blast"], ["proof (state)\nthis:\n  \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2\n\ngoal:\nNo subgoals!", "qed\n\n\n\\<comment> \\<open>NOTE added lemma (listScript.sml:2784)\\<close>"], ["", "lemma APPEND_EQ_APPEND_MID:\n  fixes l1 l2 m1 m2 e\n  shows \n    \"(l1 @ [e] @ l2 = m1 @ m2) \n      \\<longleftrightarrow>\n        (\\<exists>l. (m1 = l1 @ [e] @ l) \\<and> (l2 = l @ m2)) \\<or>\n        (\\<exists>l. (l1 = m1 @ l) \\<and> (m2 = l @ [e] @ l2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l1 @ [e] @ l2 = m1 @ m2) =\n    ((\\<exists>l. m1 = l1 @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n     (\\<exists>l. l1 = m1 @ l \\<and> m2 = l @ [e] @ l2))", "proof (induction \"l1\" arbitrary: m1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m1.\n       ([] @ [e] @ l2 = m1 @ m2) =\n       ((\\<exists>l. m1 = [] @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n        (\\<exists>l. [] = m1 @ l \\<and> m2 = l @ [e] @ l2))\n 2. \\<And>a l1 m1.\n       (\\<And>m1.\n           (l1 @ [e] @ l2 = m1 @ m2) =\n           ((\\<exists>l. m1 = l1 @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n            (\\<exists>l.\n                l1 = m1 @ l \\<and> m2 = l @ [e] @ l2))) \\<Longrightarrow>\n       ((a # l1) @ [e] @ l2 = m1 @ m2) =\n       ((\\<exists>l. m1 = (a # l1) @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n        (\\<exists>l. a # l1 = m1 @ l \\<and> m2 = l @ [e] @ l2))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>m1.\n       ([] @ [e] @ l2 = m1 @ m2) =\n       ((\\<exists>l. m1 = [] @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n        (\\<exists>l. [] = m1 @ l \\<and> m2 = l @ [e] @ l2))\n 2. \\<And>a l1 m1.\n       (\\<And>m1.\n           (l1 @ [e] @ l2 = m1 @ m2) =\n           ((\\<exists>l. m1 = l1 @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n            (\\<exists>l.\n                l1 = m1 @ l \\<and> m2 = l @ [e] @ l2))) \\<Longrightarrow>\n       ((a # l1) @ [e] @ l2 = m1 @ m2) =\n       ((\\<exists>l. m1 = (a # l1) @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n        (\\<exists>l. a # l1 = m1 @ l \\<and> m2 = l @ [e] @ l2))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([] @ [e] @ l2 = m1 @ m2) =\n    ((\\<exists>l. m1 = [] @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n     (\\<exists>l. [] = m1 @ l \\<and> m2 = l @ [e] @ l2))", "by (simp; metis Cons_eq_append_conv)+"], ["proof (state)\nthis:\n  ([] @ [e] @ l2 = m1 @ m2) =\n  ((\\<exists>l. m1 = [] @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n   (\\<exists>l. [] = m1 @ l \\<and> m2 = l @ [e] @ l2))\n\ngoal (1 subgoal):\n 1. \\<And>a l1 m1.\n       (\\<And>m1.\n           (l1 @ [e] @ l2 = m1 @ m2) =\n           ((\\<exists>l. m1 = l1 @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n            (\\<exists>l.\n                l1 = m1 @ l \\<and> m2 = l @ [e] @ l2))) \\<Longrightarrow>\n       ((a # l1) @ [e] @ l2 = m1 @ m2) =\n       ((\\<exists>l. m1 = (a # l1) @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n        (\\<exists>l. a # l1 = m1 @ l \\<and> m2 = l @ [e] @ l2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l1 m1.\n       (\\<And>m1.\n           (l1 @ [e] @ l2 = m1 @ m2) =\n           ((\\<exists>l. m1 = l1 @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n            (\\<exists>l.\n                l1 = m1 @ l \\<and> m2 = l @ [e] @ l2))) \\<Longrightarrow>\n       ((a # l1) @ [e] @ l2 = m1 @ m2) =\n       ((\\<exists>l. m1 = (a # l1) @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n        (\\<exists>l. a # l1 = m1 @ l \\<and> m2 = l @ [e] @ l2))", "case (Cons a l1)"], ["proof (state)\nthis:\n  (l1 @ [e] @ l2 = ?m1.0 @ m2) =\n  ((\\<exists>l. ?m1.0 = l1 @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n   (\\<exists>l. l1 = ?m1.0 @ l \\<and> m2 = l @ [e] @ l2))\n\ngoal (1 subgoal):\n 1. \\<And>a l1 m1.\n       (\\<And>m1.\n           (l1 @ [e] @ l2 = m1 @ m2) =\n           ((\\<exists>l. m1 = l1 @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n            (\\<exists>l.\n                l1 = m1 @ l \\<and> m2 = l @ [e] @ l2))) \\<Longrightarrow>\n       ((a # l1) @ [e] @ l2 = m1 @ m2) =\n       ((\\<exists>l. m1 = (a # l1) @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n        (\\<exists>l. a # l1 = m1 @ l \\<and> m2 = l @ [e] @ l2))", "then"], ["proof (chain)\npicking this:\n  (l1 @ [e] @ l2 = ?m1.0 @ m2) =\n  ((\\<exists>l. ?m1.0 = l1 @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n   (\\<exists>l. l1 = ?m1.0 @ l \\<and> m2 = l @ [e] @ l2))", "show ?case"], ["proof (prove)\nusing this:\n  (l1 @ [e] @ l2 = ?m1.0 @ m2) =\n  ((\\<exists>l. ?m1.0 = l1 @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n   (\\<exists>l. l1 = ?m1.0 @ l \\<and> m2 = l @ [e] @ l2))\n\ngoal (1 subgoal):\n 1. ((a # l1) @ [e] @ l2 = m1 @ m2) =\n    ((\\<exists>l. m1 = (a # l1) @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n     (\\<exists>l. a # l1 = m1 @ l \\<and> m2 = l @ [e] @ l2))", "by (cases m1; simp; blast)"], ["proof (state)\nthis:\n  ((a # l1) @ [e] @ l2 = m1 @ m2) =\n  ((\\<exists>l. m1 = (a # l1) @ [e] @ l \\<and> l2 = l @ m2) \\<or>\n   (\\<exists>l. a # l1 = m1 @ l \\<and> m2 = l @ [e] @ l2))\n\ngoal:\nNo subgoals!", "qed\n\n\\<comment> \\<open>NOTE variable `P` was removed (redundant).\\<close>"], ["", "lemma LIST_FRAG_DICHOTOMY:\n  fixes l la x lb\n  assumes \"sublist l (la @ [x] @ lb)\" \"\\<not>ListMem x l\"\n  shows \"sublist l la \\<or> sublist l lb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "from assms(1)"], ["proof (chain)\npicking this:\n  sublist l (la @ [x] @ lb)", "obtain pfx sfx where 1: \"pfx @ l @ sfx = la @ [x] @ lb\""], ["proof (prove)\nusing this:\n  sublist l (la @ [x] @ lb)\n\ngoal (1 subgoal):\n 1. (\\<And>pfx sfx.\n        pfx @ l @ sfx = la @ [x] @ lb \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding sublist_def"], ["proof (prove)\nusing this:\n  \\<exists>ps ss. la @ [x] @ lb = ps @ l @ ss\n\ngoal (1 subgoal):\n 1. (\\<And>pfx sfx.\n        pfx @ l @ sfx = la @ [x] @ lb \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  pfx @ l @ sfx = la @ [x] @ lb\n\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<not> ListMem x l", "have 2: \"\\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2\""], ["proof (prove)\nusing this:\n  \\<not> ListMem x l\n\ngoal (1 subgoal):\n 1. \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2", "using MEM_SPLIT[OF assms(2)]"], ["proof (prove)\nusing this:\n  \\<not> ListMem x l\n  \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2\n\ngoal (1 subgoal):\n 1. \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2", "by blast"], ["proof (state)\nthis:\n  \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2\n\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "from 1"], ["proof (chain)\npicking this:\n  pfx @ l @ sfx = la @ [x] @ lb", "consider (a) \"(\\<exists>lc. pfx = la @ [x] @ lc \\<and> lb = lc @ l @ sfx)\" \n      | (b) \"(\\<exists>lc. la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb)\""], ["proof (prove)\nusing this:\n  pfx @ l @ sfx = la @ [x] @ lb\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>lc.\n                pfx = la @ [x] @ lc \\<and>\n                lb = lc @ l @ sfx \\<Longrightarrow>\n             thesis;\n     \\<exists>lc.\n        la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using APPEND_EQ_APPEND_MID[of la x lb pfx \"l @ sfx\"]"], ["proof (prove)\nusing this:\n  pfx @ l @ sfx = la @ [x] @ lb\n  (la @ [x] @ lb = pfx @ l @ sfx) =\n  ((\\<exists>lc. pfx = la @ [x] @ lc \\<and> lb = lc @ l @ sfx) \\<or>\n   (\\<exists>lc. la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>lc.\n                pfx = la @ [x] @ lc \\<and>\n                lb = lc @ l @ sfx \\<Longrightarrow>\n             thesis;\n     \\<exists>lc.\n        la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by presburger"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>lc.\n              pfx = la @ [x] @ lc \\<and> lb = lc @ l @ sfx \\<Longrightarrow>\n           ?thesis;\n   \\<exists>lc.\n      la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<exists>lc.\n              pfx = la @ [x] @ lc \\<and> lb = lc @ l @ sfx \\<Longrightarrow>\n           ?thesis;\n   \\<exists>lc.\n      la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "have \"\\<exists>pfx' sfx. (pfx' @ l @ sfx = la) \\<or> (pfx'@  l @ sfx = lb)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<exists>lc.\n              pfx = la @ [x] @ lc \\<and> lb = lc @ l @ sfx \\<Longrightarrow>\n           ?thesis;\n   \\<exists>lc.\n      la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>lc.\n       pfx = la @ [x] @ lc \\<and> lb = lc @ l @ sfx \\<Longrightarrow>\n    \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb\n 2. \\<exists>lc.\n       la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb \\<Longrightarrow>\n    \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb", "case a\n        \\<comment> \\<open>NOTE `lc` is `l'` in original proof.\\<close>"], ["proof (state)\nthis:\n  \\<exists>lc. pfx = la @ [x] @ lc \\<and> lb = lc @ l @ sfx\n\ngoal (2 subgoals):\n 1. \\<exists>lc.\n       pfx = la @ [x] @ lc \\<and> lb = lc @ l @ sfx \\<Longrightarrow>\n    \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb\n 2. \\<exists>lc.\n       la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb \\<Longrightarrow>\n    \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb", "then"], ["proof (chain)\npicking this:\n  \\<exists>lc. pfx = la @ [x] @ lc \\<and> lb = lc @ l @ sfx", "obtain lc where a: \"pfx = la @ [x] @ lc\" \"lb = lc @ l @ sfx\""], ["proof (prove)\nusing this:\n  \\<exists>lc. pfx = la @ [x] @ lc \\<and> lb = lc @ l @ sfx\n\ngoal (1 subgoal):\n 1. (\\<And>lc.\n        \\<lbrakk>pfx = la @ [x] @ lc; lb = lc @ l @ sfx\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  pfx = la @ [x] @ lc\n  lb = lc @ l @ sfx\n\ngoal (2 subgoals):\n 1. \\<exists>lc.\n       pfx = la @ [x] @ lc \\<and> lb = lc @ l @ sfx \\<Longrightarrow>\n    \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb\n 2. \\<exists>lc.\n       la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb \\<Longrightarrow>\n    \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb", "then"], ["proof (chain)\npicking this:\n  pfx = la @ [x] @ lc\n  lb = lc @ l @ sfx", "show ?thesis"], ["proof (prove)\nusing this:\n  pfx = la @ [x] @ lc\n  lb = lc @ l @ sfx\n\ngoal (1 subgoal):\n 1. \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb", "by blast"], ["proof (state)\nthis:\n  \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb\n\ngoal (1 subgoal):\n 1. \\<exists>lc.\n       la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb \\<Longrightarrow>\n    \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>lc.\n       la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb \\<Longrightarrow>\n    \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb", "case b"], ["proof (state)\nthis:\n  \\<exists>lc. la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb\n\ngoal (1 subgoal):\n 1. \\<exists>lc.\n       la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb \\<Longrightarrow>\n    \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb", "then"], ["proof (chain)\npicking this:\n  \\<exists>lc. la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb", "obtain lc where i: \"la = pfx @ lc\" \"l @ sfx = lc @ [x] @ lb\""], ["proof (prove)\nusing this:\n  \\<exists>lc. la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb\n\ngoal (1 subgoal):\n 1. (\\<And>lc.\n        \\<lbrakk>la = pfx @ lc; l @ sfx = lc @ [x] @ lb\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  la = pfx @ lc\n  l @ sfx = lc @ [x] @ lb\n\ngoal (1 subgoal):\n 1. \\<exists>lc.\n       la = pfx @ lc \\<and> l @ sfx = lc @ [x] @ lb \\<Longrightarrow>\n    \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb", "then"], ["proof (chain)\npicking this:\n  la = pfx @ lc\n  l @ sfx = lc @ [x] @ lb", "show ?thesis"], ["proof (prove)\nusing this:\n  la = pfx @ lc\n  l @ sfx = lc @ [x] @ lb\n\ngoal (1 subgoal):\n 1. \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb", "using 2"], ["proof (prove)\nusing this:\n  la = pfx @ lc\n  l @ sfx = lc @ [x] @ lb\n  \\<forall>l1 l2. l \\<noteq> l1 @ [x] @ l2\n\ngoal (1 subgoal):\n 1. \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb", "by (metis APPEND_EQ_APPEND_MID)"], ["proof (state)\nthis:\n  \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb\n\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "}"], ["proof (state)\nthis:\n  \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb\n\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "then"], ["proof (chain)\npicking this:\n  \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb\n\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "unfolding sublist_def"], ["proof (prove)\nusing this:\n  \\<exists>pfx' sfx. pfx' @ l @ sfx = la \\<or> pfx' @ l @ sfx = lb\n\ngoal (1 subgoal):\n 1. (\\<exists>ps ss. la = ps @ l @ ss) \\<or>\n    (\\<exists>ps ss. lb = ps @ l @ ss)", "by blast"], ["proof (state)\nthis:\n  sublist l la \\<or> sublist l lb\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LIST_FRAG_DICHOTOMY_2:\n  fixes l la x lb P\n  assumes \"sublist l (la @ [x] @ lb) \" \"\\<not>P x\" \"list_all P l\"\n  shows \"sublist l la \\<or> sublist l lb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "assume \"\\<not>P x\" \"list_all P l\""], ["proof (state)\nthis:\n  \\<not> P x\n  list_all P l\n\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "then"], ["proof (chain)\npicking this:\n  \\<not> P x\n  list_all P l", "have \"\\<not>ListMem x l\""], ["proof (prove)\nusing this:\n  \\<not> P x\n  list_all P l\n\ngoal (1 subgoal):\n 1. \\<not> ListMem x l", "proof (induction l arbitrary: x P)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x P.\n       \\<lbrakk>\\<not> P x; list_all P []\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x []\n 2. \\<And>a l x P.\n       \\<lbrakk>\\<And>x P.\n                   \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n                   \\<Longrightarrow> \\<not> ListMem x l;\n        \\<not> P x; list_all P (a # l)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x (a # l)", "case Nil"], ["proof (state)\nthis:\n  \\<not> P x\n  list_all P []\n\ngoal (2 subgoals):\n 1. \\<And>x P.\n       \\<lbrakk>\\<not> P x; list_all P []\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x []\n 2. \\<And>a l x P.\n       \\<lbrakk>\\<And>x P.\n                   \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n                   \\<Longrightarrow> \\<not> ListMem x l;\n        \\<not> P x; list_all P (a # l)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x (a # l)", "then"], ["proof (chain)\npicking this:\n  \\<not> P x\n  list_all P []", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> P x\n  list_all P []\n\ngoal (1 subgoal):\n 1. \\<not> ListMem x []", "using ListMem_iff"], ["proof (prove)\nusing this:\n  \\<not> P x\n  list_all P []\n  ListMem ?x ?xs = (?x \\<in> set ?xs)\n\ngoal (1 subgoal):\n 1. \\<not> ListMem x []", "by force"], ["proof (state)\nthis:\n  \\<not> ListMem x []\n\ngoal (1 subgoal):\n 1. \\<And>a l x P.\n       \\<lbrakk>\\<And>x P.\n                   \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n                   \\<Longrightarrow> \\<not> ListMem x l;\n        \\<not> P x; list_all P (a # l)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x (a # l)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l x P.\n       \\<lbrakk>\\<And>x P.\n                   \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n                   \\<Longrightarrow> \\<not> ListMem x l;\n        \\<not> P x; list_all P (a # l)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x (a # l)", "case (Cons a l)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> ?P ?x; list_all ?P l\\<rbrakk>\n  \\<Longrightarrow> \\<not> ListMem ?x l\n  \\<not> P x\n  list_all P (a # l)\n\ngoal (1 subgoal):\n 1. \\<And>a l x P.\n       \\<lbrakk>\\<And>x P.\n                   \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n                   \\<Longrightarrow> \\<not> ListMem x l;\n        \\<not> P x; list_all P (a # l)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x (a # l)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> ?P ?x; list_all ?P l\\<rbrakk>\n  \\<Longrightarrow> \\<not> ListMem ?x l\n  \\<not> P x\n  list_all P (a # l)\n\ngoal (1 subgoal):\n 1. \\<And>a l x P.\n       \\<lbrakk>\\<And>x P.\n                   \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n                   \\<Longrightarrow> \\<not> ListMem x l;\n        \\<not> P x; list_all P (a # l)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x (a # l)", "have \"list_all P l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all P l", "using Cons.prems(2)"], ["proof (prove)\nusing this:\n  list_all P (a # l)\n\ngoal (1 subgoal):\n 1. list_all P l", "by simp"], ["proof (state)\nthis:\n  list_all P l\n\ngoal (1 subgoal):\n 1. \\<And>a l x P.\n       \\<lbrakk>\\<And>x P.\n                   \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n                   \\<Longrightarrow> \\<not> ListMem x l;\n        \\<not> P x; list_all P (a # l)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x (a # l)", "then"], ["proof (chain)\npicking this:\n  list_all P l", "have \"\\<not>ListMem x l\""], ["proof (prove)\nusing this:\n  list_all P l\n\ngoal (1 subgoal):\n 1. \\<not> ListMem x l", "using Cons.prems(1) Cons.IH"], ["proof (prove)\nusing this:\n  list_all P l\n  \\<not> P x\n  \\<lbrakk>\\<not> ?P ?x; list_all ?P l\\<rbrakk>\n  \\<Longrightarrow> \\<not> ListMem ?x l\n\ngoal (1 subgoal):\n 1. \\<not> ListMem x l", "by blast"], ["proof (state)\nthis:\n  \\<not> ListMem x l\n\ngoal (1 subgoal):\n 1. \\<And>a l x P.\n       \\<lbrakk>\\<And>x P.\n                   \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n                   \\<Longrightarrow> \\<not> ListMem x l;\n        \\<not> P x; list_all P (a # l)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x (a # l)", "}"], ["proof (state)\nthis:\n  \\<not> ListMem x l\n\ngoal (1 subgoal):\n 1. \\<And>a l x P.\n       \\<lbrakk>\\<And>x P.\n                   \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n                   \\<Longrightarrow> \\<not> ListMem x l;\n        \\<not> P x; list_all P (a # l)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x (a # l)", "moreover"], ["proof (state)\nthis:\n  \\<not> ListMem x l\n\ngoal (1 subgoal):\n 1. \\<And>a l x P.\n       \\<lbrakk>\\<And>x P.\n                   \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n                   \\<Longrightarrow> \\<not> ListMem x l;\n        \\<not> P x; list_all P (a # l)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x (a # l)", "{"], ["proof (state)\nthis:\n  \\<not> ListMem x l\n\ngoal (1 subgoal):\n 1. \\<And>a l x P.\n       \\<lbrakk>\\<And>x P.\n                   \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n                   \\<Longrightarrow> \\<not> ListMem x l;\n        \\<not> P x; list_all P (a # l)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x (a # l)", "have \"P a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P a", "using Cons.prems(2)"], ["proof (prove)\nusing this:\n  list_all P (a # l)\n\ngoal (1 subgoal):\n 1. P a", "by simp"], ["proof (state)\nthis:\n  P a\n\ngoal (1 subgoal):\n 1. \\<And>a l x P.\n       \\<lbrakk>\\<And>x P.\n                   \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n                   \\<Longrightarrow> \\<not> ListMem x l;\n        \\<not> P x; list_all P (a # l)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x (a # l)", "then"], ["proof (chain)\npicking this:\n  P a", "have \"a \\<noteq> x\""], ["proof (prove)\nusing this:\n  P a\n\ngoal (1 subgoal):\n 1. a \\<noteq> x", "using Cons.prems(1)"], ["proof (prove)\nusing this:\n  P a\n  \\<not> P x\n\ngoal (1 subgoal):\n 1. a \\<noteq> x", "by meson"], ["proof (state)\nthis:\n  a \\<noteq> x\n\ngoal (1 subgoal):\n 1. \\<And>a l x P.\n       \\<lbrakk>\\<And>x P.\n                   \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n                   \\<Longrightarrow> \\<not> ListMem x l;\n        \\<not> P x; list_all P (a # l)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x (a # l)", "}"], ["proof (state)\nthis:\n  a \\<noteq> x\n\ngoal (1 subgoal):\n 1. \\<And>a l x P.\n       \\<lbrakk>\\<And>x P.\n                   \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n                   \\<Longrightarrow> \\<not> ListMem x l;\n        \\<not> P x; list_all P (a # l)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ListMem x (a # l)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> ListMem x l\n  a \\<noteq> x", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> ListMem x l\n  a \\<noteq> x\n\ngoal (1 subgoal):\n 1. \\<not> ListMem x (a # l)", "using Cons.prems(1, 2) ListMem_iff list.pred_set"], ["proof (prove)\nusing this:\n  \\<not> ListMem x l\n  a \\<noteq> x\n  \\<not> P x\n  list_all P (a # l)\n  ListMem ?x ?xs = (?x \\<in> set ?xs)\n  list_all ?P = (\\<lambda>x. Ball (set x) ?P)\n\ngoal (1 subgoal):\n 1. \\<not> ListMem x (a # l)", "by metis"], ["proof (state)\nthis:\n  \\<not> ListMem x (a # l)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> ListMem x l\n\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n  \\<Longrightarrow> \\<not> ListMem x l\n\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n  \\<Longrightarrow> \\<not> ListMem x l", "have \"\\<not>ListMem x l\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n  \\<Longrightarrow> \\<not> ListMem x l\n\ngoal (1 subgoal):\n 1. \\<not> ListMem x l", "using assms(2, 3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> P x; list_all P l\\<rbrakk>\n  \\<Longrightarrow> \\<not> ListMem x l\n  \\<not> P x\n  list_all P l\n\ngoal (1 subgoal):\n 1. \\<not> ListMem x l", "by fast"], ["proof (state)\nthis:\n  \\<not> ListMem x l\n\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "then"], ["proof (chain)\npicking this:\n  \\<not> ListMem x l", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ListMem x l\n\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "using assms(1) LIST_FRAG_DICHOTOMY"], ["proof (prove)\nusing this:\n  \\<not> ListMem x l\n  sublist l (la @ [x] @ lb)\n  \\<lbrakk>sublist ?l (?la @ [?x] @ ?lb); \\<not> ListMem ?x ?l\\<rbrakk>\n  \\<Longrightarrow> sublist ?l ?la \\<or> sublist ?l ?lb\n\ngoal (1 subgoal):\n 1. sublist l la \\<or> sublist l lb", "by metis"], ["proof (state)\nthis:\n  sublist l la \\<or> sublist l lb\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma frag_len_filter_le:\n  fixes P l' l\n  assumes \"sublist l' l\"\n  shows \"length (filter P l') \\<le> length (filter P l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (filter P l') \\<le> length (filter P l)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length (filter P l') \\<le> length (filter P l)", "obtain ps ss where \"l = ps @ l' @ ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps ss.\n        l = ps @ l' @ ss \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms sublist_def"], ["proof (prove)\nusing this:\n  sublist l' l\n  sublist ?xs ?ys = (\\<exists>ps ss. ?ys = ps @ ?xs @ ss)\n\ngoal (1 subgoal):\n 1. (\\<And>ps ss.\n        l = ps @ l' @ ss \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l = ps @ l' @ ss\n\ngoal (1 subgoal):\n 1. length (filter P l') \\<le> length (filter P l)", "then"], ["proof (chain)\npicking this:\n  l = ps @ l' @ ss", "have 1:\n    \"length (filter P l) = length (filter P ps) + length (filter P l') + length (filter P ss)\""], ["proof (prove)\nusing this:\n  l = ps @ l' @ ss\n\ngoal (1 subgoal):\n 1. length (filter P l) =\n    length (filter P ps) + length (filter P l') + length (filter P ss)", "by force"], ["proof (state)\nthis:\n  length (filter P l) =\n  length (filter P ps) + length (filter P l') + length (filter P ss)\n\ngoal (1 subgoal):\n 1. length (filter P l') \\<le> length (filter P l)", "then"], ["proof (chain)\npicking this:\n  length (filter P l) =\n  length (filter P ps) + length (filter P l') + length (filter P ss)", "have \"length (filter P ps) \\<ge> 0\" \"length (filter P ss) \\<ge> 0\""], ["proof (prove)\nusing this:\n  length (filter P l) =\n  length (filter P ps) + length (filter P l') + length (filter P ss)\n\ngoal (1 subgoal):\n 1. 0 \\<le> length (filter P ps) &&& 0 \\<le> length (filter P ss)", "by blast+"], ["proof (state)\nthis:\n  0 \\<le> length (filter P ps)\n  0 \\<le> length (filter P ss)\n\ngoal (1 subgoal):\n 1. length (filter P l') \\<le> length (filter P l)", "then"], ["proof (chain)\npicking this:\n  0 \\<le> length (filter P ps)\n  0 \\<le> length (filter P ss)", "show ?thesis"], ["proof (prove)\nusing this:\n  0 \\<le> length (filter P ps)\n  0 \\<le> length (filter P ss)\n\ngoal (1 subgoal):\n 1. length (filter P l') \\<le> length (filter P l)", "using 1"], ["proof (prove)\nusing this:\n  0 \\<le> length (filter P ps)\n  0 \\<le> length (filter P ss)\n  length (filter P l) =\n  length (filter P ps) + length (filter P l') + length (filter P ss)\n\ngoal (1 subgoal):\n 1. length (filter P l') \\<le> length (filter P l)", "by linarith"], ["proof (state)\nthis:\n  length (filter P l') \\<le> length (filter P l)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}