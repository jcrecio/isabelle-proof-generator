{"file_name": "/home/qj213/afp-2021-10-22/thys/Program-Conflict-Analysis/LTS.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Program-Conflict-Analysis", "problem_names": ["lemma trcl_empty_cons: \"(c,[],c')\\<in>trcl t \\<Longrightarrow> (c=c')\"", "lemma trcl_empty_simp[simp]: \"(c,[],c')\\<in>trcl t = (c=c')\"", "lemma trcl_single[simp]: \"((c,[a],c') \\<in> trcl t) = ((c,a,c') \\<in> t)\"", "lemma trcl_uncons: \"(c,a#w,c')\\<in>trcl t \\<Longrightarrow> \\<exists>ch . (c,a,ch)\\<in>t \\<and> (ch,w,c') \\<in> trcl t\"", "lemma trcl_uncons_cases: \"\\<lbrakk>\n    (c,e#w,c')\\<in>trcl S; \n    !!ch. \\<lbrakk> (c,e,ch)\\<in>S; (ch,w,c')\\<in>trcl S \\<rbrakk> \\<Longrightarrow> P \n  \\<rbrakk> \\<Longrightarrow> P\"", "lemma trcl_one_elem: \"(c,e,c')\\<in>t \\<Longrightarrow> (c,[e],c')\\<in>trcl t\"", "lemma trcl_unconsE[cases set, case_names split]: \"\\<lbrakk> \n    (c,e#w,c')\\<in>trcl S; \n    !!ch. \\<lbrakk>(c,e,ch)\\<in>S; (ch,w,c')\\<in>trcl S\\<rbrakk> \\<Longrightarrow> P\n  \\<rbrakk> \\<Longrightarrow> P\"", "lemma trcl_pair_unconsE[cases set, case_names split]: \"\\<lbrakk> \n    ((s,c),e#w,(s',c'))\\<in>trcl S; \n    !!sh ch. \\<lbrakk>((s,c),e,(sh,ch))\\<in>S; ((sh,ch),w,(s',c'))\\<in>trcl S\\<rbrakk> \\<Longrightarrow> P\n  \\<rbrakk> \\<Longrightarrow> P\"", "lemma trcl_concat: \"!! c . \\<lbrakk> (c,w1,c')\\<in>trcl t; (c',w2,c'')\\<in>trcl t \\<rbrakk> \n  \\<Longrightarrow> (c,w1@w2,c'')\\<in>trcl t\"", "lemma trcl_unconcat: \"!! c . (c,w1@w2,c')\\<in>trcl t \n  \\<Longrightarrow> \\<exists>ch . (c,w1,ch)\\<in>trcl t \\<and> (ch,w2,c')\\<in>trcl t\"", "lemma trcl_rev_cons: \"\\<lbrakk> (c,w,ch)\\<in>trcl T; (ch,e,c')\\<in>T \\<rbrakk> \\<Longrightarrow> (c,w@[e],c')\\<in>trcl T\"", "lemma trcl_rev_uncons: \"(c,w@[e],c')\\<in>trcl T \n  \\<Longrightarrow> \\<exists>ch. (c,w,ch)\\<in>trcl T \\<and> (ch,e,c')\\<in>T\"", "lemma trcl_rev_induct[induct set, consumes 1, case_names empty snoc]: \"!! c'. \\<lbrakk> \n    (c,w,c')\\<in>trcl S; \n    !!c. P c [] c; \n    !!c w c' e c''. \\<lbrakk> (c,w,c')\\<in>trcl S; (c',e,c'')\\<in>S; P c w c' \\<rbrakk> \\<Longrightarrow> P c (w@[e]) c'' \n  \\<rbrakk> \\<Longrightarrow> P c w c'\"", "lemma trcl_rev_cases: \"!!c c'. \\<lbrakk> \n    (c,w,c')\\<in>trcl S; \n    \\<lbrakk>w=[]; c=c'\\<rbrakk>\\<Longrightarrow>P; \n    !!ch e wh. \\<lbrakk> w=wh@[e]; (c,wh,ch)\\<in>trcl S; (ch,e,c')\\<in>S \\<rbrakk>\\<Longrightarrow>P \n  \\<rbrakk> \\<Longrightarrow> P\"", "lemma trcl_cons2: \"\\<lbrakk> (c,e,ch)\\<in>T; (ch,f,c')\\<in>T \\<rbrakk> \\<Longrightarrow> (c,[e,f],c')\\<in>trcl T\"", "lemma trcl_mono: \"!!A B. A \\<subseteq> B \\<Longrightarrow> trcl A \\<subseteq> trcl B\"", "lemma trcl_inter_mono: \"x\\<in>trcl (S\\<inter>R) \\<Longrightarrow> x\\<in>trcl S\" \"x\\<in>trcl (S\\<inter>R) \\<Longrightarrow> x\\<in>trcl R\"", "lemmas trcl_pair_induct = trcl.induct[of \"(xc1,xc2)\" \"xb\" \"(xa1,xa2)\", split_format (complete), consumes 1, case_names empty cons]", "lemmas trcl_rev_pair_induct = trcl_rev_induct[of \"(xc1,xc2)\" \"xb\" \"(xa1,xa2)\", split_format (complete), consumes 1, case_names empty snoc]", "lemma trcl_prop_trans[cases set, consumes 1, case_names empty steps]: \"\\<lbrakk>\n    (c,w,c')\\<in>trcl S; \n    \\<lbrakk>c=c'; w=[]\\<rbrakk> \\<Longrightarrow> P;  \n    \\<lbrakk>c\\<in>Domain S; c'\\<in>Range (Range S)\\<rbrakk>\\<Longrightarrow>P \n  \\<rbrakk> \\<Longrightarrow> P\""], "translations": [["", "lemma trcl_empty_cons: \"(c,[],c')\\<in>trcl t \\<Longrightarrow> (c=c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, [], c') \\<in> trcl t \\<Longrightarrow> c = c'", "by (auto elim: trcl.cases)"], ["", "lemma trcl_empty_simp[simp]: \"(c,[],c')\\<in>trcl t = (c=c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((c, [], c') \\<in> trcl t) = (c = c')", "by (auto elim: trcl.cases intro: trcl.intros)"], ["", "lemma trcl_single[simp]: \"((c,[a],c') \\<in> trcl t) = ((c,a,c') \\<in> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((c, [a], c') \\<in> trcl t) = ((c, a, c') \\<in> t)", "by (auto elim: trcl.cases)"], ["", "lemma trcl_uncons: \"(c,a#w,c')\\<in>trcl t \\<Longrightarrow> \\<exists>ch . (c,a,ch)\\<in>t \\<and> (ch,w,c') \\<in> trcl t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, a # w, c') \\<in> trcl t \\<Longrightarrow>\n    \\<exists>ch. (c, a, ch) \\<in> t \\<and> (ch, w, c') \\<in> trcl t", "by (auto elim: trcl.cases)"], ["", "lemma trcl_uncons_cases: \"\\<lbrakk>\n    (c,e#w,c')\\<in>trcl S; \n    !!ch. \\<lbrakk> (c,e,ch)\\<in>S; (ch,w,c')\\<in>trcl S \\<rbrakk> \\<Longrightarrow> P \n  \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c, e # w, c') \\<in> trcl S;\n     \\<And>ch.\n        \\<lbrakk>(c, e, ch) \\<in> S; (ch, w, c') \\<in> trcl S\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (blast dest: trcl_uncons)"], ["", "lemma trcl_one_elem: \"(c,e,c')\\<in>t \\<Longrightarrow> (c,[e],c')\\<in>trcl t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, e, c') \\<in> t \\<Longrightarrow> (c, [e], c') \\<in> trcl t", "by auto"], ["", "lemma trcl_unconsE[cases set, case_names split]: \"\\<lbrakk> \n    (c,e#w,c')\\<in>trcl S; \n    !!ch. \\<lbrakk>(c,e,ch)\\<in>S; (ch,w,c')\\<in>trcl S\\<rbrakk> \\<Longrightarrow> P\n  \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c, e # w, c') \\<in> trcl S;\n     \\<And>ch.\n        \\<lbrakk>(c, e, ch) \\<in> S; (ch, w, c') \\<in> trcl S\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (blast dest: trcl_uncons)"], ["", "lemma trcl_pair_unconsE[cases set, case_names split]: \"\\<lbrakk> \n    ((s,c),e#w,(s',c'))\\<in>trcl S; \n    !!sh ch. \\<lbrakk>((s,c),e,(sh,ch))\\<in>S; ((sh,ch),w,(s',c'))\\<in>trcl S\\<rbrakk> \\<Longrightarrow> P\n  \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>((s, c), e # w, s', c') \\<in> trcl S;\n     \\<And>sh ch.\n        \\<lbrakk>((s, c), e, sh, ch) \\<in> S;\n         ((sh, ch), w, s', c') \\<in> trcl S\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (fast dest: trcl_uncons)"], ["", "lemma trcl_concat: \"!! c . \\<lbrakk> (c,w1,c')\\<in>trcl t; (c',w2,c'')\\<in>trcl t \\<rbrakk> \n  \\<Longrightarrow> (c,w1@w2,c'')\\<in>trcl t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>(c, w1, c') \\<in> trcl t;\n        (c', w2, c'') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> (c, w1 @ w2, c'') \\<in> trcl t", "proof (induct w1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c.\n       \\<lbrakk>(c, [], c') \\<in> trcl t;\n        (c', w2, c'') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> (c, [] @ w2, c'') \\<in> trcl t\n 2. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   \\<lbrakk>(c, w1, c') \\<in> trcl t;\n                    (c', w2, c'') \\<in> trcl t\\<rbrakk>\n                   \\<Longrightarrow> (c, w1 @ w2, c'') \\<in> trcl t;\n        (c, a # w1, c') \\<in> trcl t; (c', w2, c'') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> (c, (a # w1) @ w2, c'') \\<in> trcl t", "case Nil"], ["proof (state)\nthis:\n  (c, [], c') \\<in> trcl t\n  (c', w2, c'') \\<in> trcl t\n\ngoal (2 subgoals):\n 1. \\<And>c.\n       \\<lbrakk>(c, [], c') \\<in> trcl t;\n        (c', w2, c'') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> (c, [] @ w2, c'') \\<in> trcl t\n 2. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   \\<lbrakk>(c, w1, c') \\<in> trcl t;\n                    (c', w2, c'') \\<in> trcl t\\<rbrakk>\n                   \\<Longrightarrow> (c, w1 @ w2, c'') \\<in> trcl t;\n        (c, a # w1, c') \\<in> trcl t; (c', w2, c'') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> (c, (a # w1) @ w2, c'') \\<in> trcl t", "thus ?case"], ["proof (prove)\nusing this:\n  (c, [], c') \\<in> trcl t\n  (c', w2, c'') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. (c, [] @ w2, c'') \\<in> trcl t", "by (subgoal_tac \"c=c'\") auto"], ["proof (state)\nthis:\n  (c, [] @ w2, c'') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   \\<lbrakk>(c, w1, c') \\<in> trcl t;\n                    (c', w2, c'') \\<in> trcl t\\<rbrakk>\n                   \\<Longrightarrow> (c, w1 @ w2, c'') \\<in> trcl t;\n        (c, a # w1, c') \\<in> trcl t; (c', w2, c'') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> (c, (a # w1) @ w2, c'') \\<in> trcl t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   \\<lbrakk>(c, w1, c') \\<in> trcl t;\n                    (c', w2, c'') \\<in> trcl t\\<rbrakk>\n                   \\<Longrightarrow> (c, w1 @ w2, c'') \\<in> trcl t;\n        (c, a # w1, c') \\<in> trcl t; (c', w2, c'') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> (c, (a # w1) @ w2, c'') \\<in> trcl t", "case (Cons a w)"], ["proof (state)\nthis:\n  \\<lbrakk>(?c, w, c') \\<in> trcl t; (c', w2, c'') \\<in> trcl t\\<rbrakk>\n  \\<Longrightarrow> (?c, w @ w2, c'') \\<in> trcl t\n  (c, a # w, c') \\<in> trcl t\n  (c', w2, c'') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   \\<lbrakk>(c, w1, c') \\<in> trcl t;\n                    (c', w2, c'') \\<in> trcl t\\<rbrakk>\n                   \\<Longrightarrow> (c, w1 @ w2, c'') \\<in> trcl t;\n        (c, a # w1, c') \\<in> trcl t; (c', w2, c'') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> (c, (a # w1) @ w2, c'') \\<in> trcl t", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?c, w, c') \\<in> trcl t; (c', w2, c'') \\<in> trcl t\\<rbrakk>\n  \\<Longrightarrow> (?c, w @ w2, c'') \\<in> trcl t\n  (c, a # w, c') \\<in> trcl t\n  (c', w2, c'') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. (c, (a # w) @ w2, c'') \\<in> trcl t", "by (auto dest: trcl_uncons)"], ["proof (state)\nthis:\n  (c, (a # w) @ w2, c'') \\<in> trcl t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma trcl_unconcat: \"!! c . (c,w1@w2,c')\\<in>trcl t \n  \\<Longrightarrow> \\<exists>ch . (c,w1,ch)\\<in>trcl t \\<and> (ch,w2,c')\\<in>trcl t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       (c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n       \\<exists>ch.\n          (c, w1, ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t", "proof (induct w1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c.\n       (c, [] @ w2, c') \\<in> trcl t \\<Longrightarrow>\n       \\<exists>ch.\n          (c, [], ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t\n 2. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   (c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n                   \\<exists>ch.\n                      (c, w1, ch) \\<in> trcl t \\<and>\n                      (ch, w2, c') \\<in> trcl t;\n        (c, (a # w1) @ w2, c') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ch.\n                            (c, a # w1, ch) \\<in> trcl t \\<and>\n                            (ch, w2, c') \\<in> trcl t", "case Nil"], ["proof (state)\nthis:\n  (c, [] @ w2, c') \\<in> trcl t\n\ngoal (2 subgoals):\n 1. \\<And>c.\n       (c, [] @ w2, c') \\<in> trcl t \\<Longrightarrow>\n       \\<exists>ch.\n          (c, [], ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t\n 2. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   (c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n                   \\<exists>ch.\n                      (c, w1, ch) \\<in> trcl t \\<and>\n                      (ch, w2, c') \\<in> trcl t;\n        (c, (a # w1) @ w2, c') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ch.\n                            (c, a # w1, ch) \\<in> trcl t \\<and>\n                            (ch, w2, c') \\<in> trcl t", "hence \"(c,[],c)\\<in>trcl t \\<and> (c,w2,c')\\<in>trcl t\""], ["proof (prove)\nusing this:\n  (c, [] @ w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. (c, [], c) \\<in> trcl t \\<and> (c, w2, c') \\<in> trcl t", "by auto"], ["proof (state)\nthis:\n  (c, [], c) \\<in> trcl t \\<and> (c, w2, c') \\<in> trcl t\n\ngoal (2 subgoals):\n 1. \\<And>c.\n       (c, [] @ w2, c') \\<in> trcl t \\<Longrightarrow>\n       \\<exists>ch.\n          (c, [], ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t\n 2. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   (c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n                   \\<exists>ch.\n                      (c, w1, ch) \\<in> trcl t \\<and>\n                      (ch, w2, c') \\<in> trcl t;\n        (c, (a # w1) @ w2, c') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ch.\n                            (c, a # w1, ch) \\<in> trcl t \\<and>\n                            (ch, w2, c') \\<in> trcl t", "thus ?case"], ["proof (prove)\nusing this:\n  (c, [], c) \\<in> trcl t \\<and> (c, w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. \\<exists>ch. (c, [], ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t", "by fast"], ["proof (state)\nthis:\n  \\<exists>ch. (c, [], ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   (c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n                   \\<exists>ch.\n                      (c, w1, ch) \\<in> trcl t \\<and>\n                      (ch, w2, c') \\<in> trcl t;\n        (c, (a # w1) @ w2, c') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ch.\n                            (c, a # w1, ch) \\<in> trcl t \\<and>\n                            (ch, w2, c') \\<in> trcl t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   (c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n                   \\<exists>ch.\n                      (c, w1, ch) \\<in> trcl t \\<and>\n                      (ch, w2, c') \\<in> trcl t;\n        (c, (a # w1) @ w2, c') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ch.\n                            (c, a # w1, ch) \\<in> trcl t \\<and>\n                            (ch, w2, c') \\<in> trcl t", "case (Cons a w1)"], ["proof (state)\nthis:\n  (?c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n  \\<exists>ch. (?c, w1, ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t\n  (c, (a # w1) @ w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   (c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n                   \\<exists>ch.\n                      (c, w1, ch) \\<in> trcl t \\<and>\n                      (ch, w2, c') \\<in> trcl t;\n        (c, (a # w1) @ w2, c') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ch.\n                            (c, a # w1, ch) \\<in> trcl t \\<and>\n                            (ch, w2, c') \\<in> trcl t", "note IHP = this"], ["proof (state)\nthis:\n  (?c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n  \\<exists>ch. (?c, w1, ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t\n  (c, (a # w1) @ w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   (c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n                   \\<exists>ch.\n                      (c, w1, ch) \\<in> trcl t \\<and>\n                      (ch, w2, c') \\<in> trcl t;\n        (c, (a # w1) @ w2, c') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ch.\n                            (c, a # w1, ch) \\<in> trcl t \\<and>\n                            (ch, w2, c') \\<in> trcl t", "hence \"(c,a#(w1@w2),c')\\<in>trcl t\""], ["proof (prove)\nusing this:\n  (?c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n  \\<exists>ch. (?c, w1, ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t\n  (c, (a # w1) @ w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. (c, a # w1 @ w2, c') \\<in> trcl t", "by simp"], ["proof (state)\nthis:\n  (c, a # w1 @ w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   (c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n                   \\<exists>ch.\n                      (c, w1, ch) \\<in> trcl t \\<and>\n                      (ch, w2, c') \\<in> trcl t;\n        (c, (a # w1) @ w2, c') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ch.\n                            (c, a # w1, ch) \\<in> trcl t \\<and>\n                            (ch, w2, c') \\<in> trcl t", "(* Auto/fast/blast do not get the point _#(_@_) = (_#_)@_ in next step, so making it explicit *)"], ["proof (state)\nthis:\n  (c, a # w1 @ w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   (c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n                   \\<exists>ch.\n                      (c, w1, ch) \\<in> trcl t \\<and>\n                      (ch, w2, c') \\<in> trcl t;\n        (c, (a # w1) @ w2, c') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ch.\n                            (c, a # w1, ch) \\<in> trcl t \\<and>\n                            (ch, w2, c') \\<in> trcl t", "with trcl_uncons"], ["proof (chain)\npicking this:\n  (?c, ?a # ?w, ?c') \\<in> trcl ?t \\<Longrightarrow>\n  \\<exists>ch. (?c, ?a, ch) \\<in> ?t \\<and> (ch, ?w, ?c') \\<in> trcl ?t\n  (c, a # w1 @ w2, c') \\<in> trcl t", "obtain chh where \"(c,a,chh)\\<in>t \\<and> (chh,w1@w2,c')\\<in>trcl t\""], ["proof (prove)\nusing this:\n  (?c, ?a # ?w, ?c') \\<in> trcl ?t \\<Longrightarrow>\n  \\<exists>ch. (?c, ?a, ch) \\<in> ?t \\<and> (ch, ?w, ?c') \\<in> trcl ?t\n  (c, a # w1 @ w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. (\\<And>chh.\n        (c, a, chh) \\<in> t \\<and>\n        (chh, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  (c, a, chh) \\<in> t \\<and> (chh, w1 @ w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   (c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n                   \\<exists>ch.\n                      (c, w1, ch) \\<in> trcl t \\<and>\n                      (ch, w2, c') \\<in> trcl t;\n        (c, (a # w1) @ w2, c') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ch.\n                            (c, a # w1, ch) \\<in> trcl t \\<and>\n                            (ch, w2, c') \\<in> trcl t", "moreover"], ["proof (state)\nthis:\n  (c, a, chh) \\<in> t \\<and> (chh, w1 @ w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   (c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n                   \\<exists>ch.\n                      (c, w1, ch) \\<in> trcl t \\<and>\n                      (ch, w2, c') \\<in> trcl t;\n        (c, (a # w1) @ w2, c') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ch.\n                            (c, a # w1, ch) \\<in> trcl t \\<and>\n                            (ch, w2, c') \\<in> trcl t", "with IHP"], ["proof (chain)\npicking this:\n  (?c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n  \\<exists>ch. (?c, w1, ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t\n  (c, (a # w1) @ w2, c') \\<in> trcl t\n  (c, a, chh) \\<in> t \\<and> (chh, w1 @ w2, c') \\<in> trcl t", "obtain ch where \"(chh,w1,ch)\\<in>trcl t \\<and> (ch,w2,c')\\<in>trcl t\""], ["proof (prove)\nusing this:\n  (?c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n  \\<exists>ch. (?c, w1, ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t\n  (c, (a # w1) @ w2, c') \\<in> trcl t\n  (c, a, chh) \\<in> t \\<and> (chh, w1 @ w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. (\\<And>ch.\n        (chh, w1, ch) \\<in> trcl t \\<and>\n        (ch, w2, c') \\<in> trcl t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  (chh, w1, ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   (c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n                   \\<exists>ch.\n                      (c, w1, ch) \\<in> trcl t \\<and>\n                      (ch, w2, c') \\<in> trcl t;\n        (c, (a # w1) @ w2, c') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ch.\n                            (c, a # w1, ch) \\<in> trcl t \\<and>\n                            (ch, w2, c') \\<in> trcl t", "ultimately"], ["proof (chain)\npicking this:\n  (c, a, chh) \\<in> t \\<and> (chh, w1 @ w2, c') \\<in> trcl t\n  (chh, w1, ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t", "have \"(c,a#w1,ch)\\<in>trcl t \\<and> (ch,w2,c')\\<in>trcl t\""], ["proof (prove)\nusing this:\n  (c, a, chh) \\<in> t \\<and> (chh, w1 @ w2, c') \\<in> trcl t\n  (chh, w1, ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. (c, a # w1, ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t", "by auto"], ["proof (state)\nthis:\n  (c, a # w1, ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. \\<And>a w1 c.\n       \\<lbrakk>\\<And>c.\n                   (c, w1 @ w2, c') \\<in> trcl t \\<Longrightarrow>\n                   \\<exists>ch.\n                      (c, w1, ch) \\<in> trcl t \\<and>\n                      (ch, w2, c') \\<in> trcl t;\n        (c, (a # w1) @ w2, c') \\<in> trcl t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ch.\n                            (c, a # w1, ch) \\<in> trcl t \\<and>\n                            (ch, w2, c') \\<in> trcl t", "thus ?case"], ["proof (prove)\nusing this:\n  (c, a # w1, ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t\n\ngoal (1 subgoal):\n 1. \\<exists>ch.\n       (c, a # w1, ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t", "by fast"], ["proof (state)\nthis:\n  \\<exists>ch. (c, a # w1, ch) \\<in> trcl t \\<and> (ch, w2, c') \\<in> trcl t\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \"Appending of elements to paths\""], ["", "lemma trcl_rev_cons: \"\\<lbrakk> (c,w,ch)\\<in>trcl T; (ch,e,c')\\<in>T \\<rbrakk> \\<Longrightarrow> (c,w@[e],c')\\<in>trcl T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c, w, ch) \\<in> trcl T; (ch, e, c') \\<in> T\\<rbrakk>\n    \\<Longrightarrow> (c, w @ [e], c') \\<in> trcl T", "by (auto dest: trcl_concat iff add: trcl_single)"], ["", "lemma trcl_rev_uncons: \"(c,w@[e],c')\\<in>trcl T \n  \\<Longrightarrow> \\<exists>ch. (c,w,ch)\\<in>trcl T \\<and> (ch,e,c')\\<in>T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, w @ [e], c') \\<in> trcl T \\<Longrightarrow>\n    \\<exists>ch. (c, w, ch) \\<in> trcl T \\<and> (ch, e, c') \\<in> T", "by (force dest: trcl_unconcat)"], ["", "lemma trcl_rev_induct[induct set, consumes 1, case_names empty snoc]: \"!! c'. \\<lbrakk> \n    (c,w,c')\\<in>trcl S; \n    !!c. P c [] c; \n    !!c w c' e c''. \\<lbrakk> (c,w,c')\\<in>trcl S; (c',e,c'')\\<in>S; P c w c' \\<rbrakk> \\<Longrightarrow> P c (w@[e]) c'' \n  \\<rbrakk> \\<Longrightarrow> P c w c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       \\<lbrakk>(c, w, c') \\<in> trcl S; \\<And>c. P c [] c;\n        \\<And>c w c' e c''.\n           \\<lbrakk>(c, w, c') \\<in> trcl S; (c', e, c'') \\<in> S;\n            P c w c'\\<rbrakk>\n           \\<Longrightarrow> P c (w @ [e]) c''\\<rbrakk>\n       \\<Longrightarrow> P c w c'", "by (induct w rule: rev_induct) (auto dest: trcl_rev_uncons)"], ["", "lemma trcl_rev_cases: \"!!c c'. \\<lbrakk> \n    (c,w,c')\\<in>trcl S; \n    \\<lbrakk>w=[]; c=c'\\<rbrakk>\\<Longrightarrow>P; \n    !!ch e wh. \\<lbrakk> w=wh@[e]; (c,wh,ch)\\<in>trcl S; (ch,e,c')\\<in>S \\<rbrakk>\\<Longrightarrow>P \n  \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c'.\n       \\<lbrakk>(c, w, c') \\<in> trcl S;\n        \\<lbrakk>w = []; c = c'\\<rbrakk> \\<Longrightarrow> P;\n        \\<And>ch e wh.\n           \\<lbrakk>w = wh @ [e]; (c, wh, ch) \\<in> trcl S;\n            (ch, e, c') \\<in> S\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P", "by (induct w rule: rev_induct) (auto dest: trcl_rev_uncons)"], ["", "lemma trcl_cons2: \"\\<lbrakk> (c,e,ch)\\<in>T; (ch,f,c')\\<in>T \\<rbrakk> \\<Longrightarrow> (c,[e,f],c')\\<in>trcl T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c, e, ch) \\<in> T; (ch, f, c') \\<in> T\\<rbrakk>\n    \\<Longrightarrow> (c, [e, f], c') \\<in> trcl T", "by auto"], ["", "subsubsection \"Transitivity reasoning setup\""], ["", "declare trcl_cons2[trans]    \\<comment> \\<open>It's important that this is declared before @{thm [source] trcl_concat}, because we want @{thm [source] trcl_concat} to be tried first by the transitivity reasoner\\<close>"], ["", "declare cons[trans]"], ["", "declare trcl_concat[trans]"], ["", "declare trcl_rev_cons[trans]"], ["", "subsubsection \"Monotonicity\""], ["", "lemma trcl_mono: \"!!A B. A \\<subseteq> B \\<Longrightarrow> trcl A \\<subseteq> trcl B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B. A \\<subseteq> B \\<Longrightarrow> trcl A \\<subseteq> trcl B", "(* FIXME: Why can't this be declared as [mono] or [mono_set] ? *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B. A \\<subseteq> B \\<Longrightarrow> trcl A \\<subseteq> trcl B", "apply (clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B a aa b.\n       \\<lbrakk>A \\<subseteq> B; (a, aa, b) \\<in> trcl A\\<rbrakk>\n       \\<Longrightarrow> (a, aa, b) \\<in> trcl B", "apply (erule trcl.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A B a aa b c.\n       A \\<subseteq> B \\<Longrightarrow> (c, [], c) \\<in> trcl B\n 2. \\<And>A B a aa b c ab c' w c''.\n       \\<lbrakk>A \\<subseteq> B; (c, ab, c') \\<in> A;\n        (c', w, c'') \\<in> trcl A; (c', w, c'') \\<in> trcl B\\<rbrakk>\n       \\<Longrightarrow> (c, ab # w, c'') \\<in> trcl B", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma trcl_inter_mono: \"x\\<in>trcl (S\\<inter>R) \\<Longrightarrow> x\\<in>trcl S\" \"x\\<in>trcl (S\\<inter>R) \\<Longrightarrow> x\\<in>trcl R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> trcl (S \\<inter> R) \\<Longrightarrow> x \\<in> trcl S) &&&\n    (x \\<in> trcl (S \\<inter> R) \\<Longrightarrow> x \\<in> trcl R)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> trcl (S \\<inter> R) \\<Longrightarrow> x \\<in> trcl S\n 2. x \\<in> trcl (S \\<inter> R) \\<Longrightarrow> x \\<in> trcl R", "assume \"x\\<in>trcl (S\\<inter>R)\""], ["proof (state)\nthis:\n  x \\<in> trcl (S \\<inter> R)\n\ngoal (2 subgoals):\n 1. x \\<in> trcl (S \\<inter> R) \\<Longrightarrow> x \\<in> trcl S\n 2. x \\<in> trcl (S \\<inter> R) \\<Longrightarrow> x \\<in> trcl R", "with trcl_mono[of \"S\\<inter>R\" S]"], ["proof (chain)\npicking this:\n  S \\<inter> R \\<subseteq> S \\<Longrightarrow>\n  trcl (S \\<inter> R) \\<subseteq> trcl S\n  x \\<in> trcl (S \\<inter> R)", "show \"x\\<in>trcl S\""], ["proof (prove)\nusing this:\n  S \\<inter> R \\<subseteq> S \\<Longrightarrow>\n  trcl (S \\<inter> R) \\<subseteq> trcl S\n  x \\<in> trcl (S \\<inter> R)\n\ngoal (1 subgoal):\n 1. x \\<in> trcl S", "by auto"], ["proof (state)\nthis:\n  x \\<in> trcl S\n\ngoal (1 subgoal):\n 1. x \\<in> trcl (S \\<inter> R) \\<Longrightarrow> x \\<in> trcl R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> trcl (S \\<inter> R) \\<Longrightarrow> x \\<in> trcl R", "assume \"x\\<in>trcl (S\\<inter>R)\""], ["proof (state)\nthis:\n  x \\<in> trcl (S \\<inter> R)\n\ngoal (1 subgoal):\n 1. x \\<in> trcl (S \\<inter> R) \\<Longrightarrow> x \\<in> trcl R", "with trcl_mono[of \"S\\<inter>R\" R]"], ["proof (chain)\npicking this:\n  S \\<inter> R \\<subseteq> R \\<Longrightarrow>\n  trcl (S \\<inter> R) \\<subseteq> trcl R\n  x \\<in> trcl (S \\<inter> R)", "show \"x\\<in>trcl R\""], ["proof (prove)\nusing this:\n  S \\<inter> R \\<subseteq> R \\<Longrightarrow>\n  trcl (S \\<inter> R) \\<subseteq> trcl R\n  x \\<in> trcl (S \\<inter> R)\n\ngoal (1 subgoal):\n 1. x \\<in> trcl R", "by auto"], ["proof (state)\nthis:\n  x \\<in> trcl R\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \"Special lemmas for reasoning about states that are pairs\""], ["", "lemmas trcl_pair_induct = trcl.induct[of \"(xc1,xc2)\" \"xb\" \"(xa1,xa2)\", split_format (complete), consumes 1, case_names empty cons]"], ["", "lemmas trcl_rev_pair_induct = trcl_rev_induct[of \"(xc1,xc2)\" \"xb\" \"(xa1,xa2)\", split_format (complete), consumes 1, case_names empty snoc]"], ["", "(*lemma trcl_pair_induct[induct set]: \n  \"\\<lbrakk>((xc1,xc2), xb, (xa1,xa2)) \\<in> trcl t; \\<And>c1 c2. P c1 c2 [] c1 c2; \\<And>a c1 c2 c1' c2' c1'' c2'' w. \\<lbrakk>((c1,c2), a, (c1',c2')) \\<in> t; ((c1',c2'), w, (c1'',c2'')) \\<in> trcl t; P c1' c2' w c1'' c2''\\<rbrakk> \\<Longrightarrow> P c1 c2 (a # w) c1'' c2''\\<rbrakk> \n  \\<Longrightarrow> P xc1 xc2 xb xa1 xa2\" \n  using trcl.induct[of \"(xc1,xc2)\" xb \"(xa1,xa2)\" t \"\\<lambda>c w c'. let (c1,c2)=c in let (c1',c2')=c' in P c1 c2 w c1' c2'\"] by auto\n*)"], ["", "subsubsection \"Invariants\""], ["", "(* TODO: Do we really need this ? Is this formulation usable ? *)"], ["", "lemma trcl_prop_trans[cases set, consumes 1, case_names empty steps]: \"\\<lbrakk>\n    (c,w,c')\\<in>trcl S; \n    \\<lbrakk>c=c'; w=[]\\<rbrakk> \\<Longrightarrow> P;  \n    \\<lbrakk>c\\<in>Domain S; c'\\<in>Range (Range S)\\<rbrakk>\\<Longrightarrow>P \n  \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(c, w, c') \\<in> trcl S;\n     \\<lbrakk>c = c'; w = []\\<rbrakk> \\<Longrightarrow> P;\n     \\<lbrakk>c \\<in> Domain S; c' \\<in> Range (Range S)\\<rbrakk>\n     \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "apply (erule_tac trcl_rev_cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>c = c'; w = []\\<rbrakk> \\<Longrightarrow> P;\n     \\<lbrakk>c \\<in> Domain S; c' \\<in> Range (Range S)\\<rbrakk>\n     \\<Longrightarrow> P;\n     w = []; c = c'\\<rbrakk>\n    \\<Longrightarrow> P\n 2. \\<And>ch e wh.\n       \\<lbrakk>\\<lbrakk>c = c'; w = []\\<rbrakk> \\<Longrightarrow> P;\n        \\<lbrakk>c \\<in> Domain S; c' \\<in> Range (Range S)\\<rbrakk>\n        \\<Longrightarrow> P;\n        w = wh @ [e]; (c, wh, ch) \\<in> trcl S; (ch, e, c') \\<in> S\\<rbrakk>\n       \\<Longrightarrow> P", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ch e wh.\n       \\<lbrakk>\\<lbrakk>c \\<in> Domain S; c' \\<in> Range (Range S)\\<rbrakk>\n                \\<Longrightarrow> P;\n        w = wh @ [e]; (c, wh, ch) \\<in> trcl S; (ch, e, c') \\<in> S\\<rbrakk>\n       \\<Longrightarrow> P", "apply (erule trcl.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ch e wh ca.\n       \\<lbrakk>\\<lbrakk>c \\<in> Domain S; c' \\<in> Range (Range S)\\<rbrakk>\n                \\<Longrightarrow> P;\n        w = wh @ [e]; (ch, e, c') \\<in> S; c = ca; wh = []; ch = ca\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>ch e wh ca a c'a wa c''.\n       \\<lbrakk>\\<lbrakk>c \\<in> Domain S; c' \\<in> Range (Range S)\\<rbrakk>\n                \\<Longrightarrow> P;\n        w = wh @ [e]; (ch, e, c') \\<in> S; c = ca; wh = a # wa; ch = c'';\n        (ca, a, c'a) \\<in> S; (c'a, wa, c'') \\<in> trcl S\\<rbrakk>\n       \\<Longrightarrow> P", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}