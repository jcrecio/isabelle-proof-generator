{"file_name": "/home/qj213/afp-2021-10-22/thys/Ergodic_Theory/Shift_Operator.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Ergodic_Theory", "problem_names": ["lemma measurable_T [measurable]: \"T \\<in> P \\<rightarrow>\\<^sub>M P\"", "lemma tail_algebra_0 [simp]: \"tail_algebra 0 = P\"", "lemma space_tail_algebra [simp]: \"space (tail_algebra n) = PiE UNIV (\\<lambda>_. space M)\"", "lemma measurable_P_component [measurable]: \"P.random_variable M (\\<lambda>f. f i)\"", "lemma P_component [simp]: \"distr P M (\\<lambda>f. f i) = M\"", "lemma indep_vars: \"P.indep_vars (\\<lambda>_. M) (\\<lambda>i f. f i) UNIV\"", "lemma measurable_T_tail: \"T \\<in> tail_algebra (Suc n) \\<rightarrow>\\<^sub>M tail_algebra n\"", "lemma measurable_funpow_T: \"T ^^ n \\<in> tail_algebra (m + n) \\<rightarrow>\\<^sub>M tail_algebra m\"", "lemma measurable_funpow_T': \"T ^^ n \\<in> tail_algebra n \\<rightarrow>\\<^sub>M P\"", "lemma measure_preserving: \"T \\<in> measure_preserving P P\"", "lemma indep_sets_pullback_algebra:\n  \"P.indep_sets (\\<lambda>i. sets.pullback_algebra M (\\<lambda>f. f i) (space P)) UNIV\"", "lemma tail_algebra_subset:\n  \"sets (tail_algebra n) \\<subseteq>\n     sigma_sets (space P) (\\<Union>i\\<in>{n..}. sets.pullback_algebra M (\\<lambda>f. f i) (space P))\"", "lemma Invariants_subset_tail_algebra:\n  \"sets Invariants \\<subseteq> P.tail_events (\\<lambda>i. sets.pullback_algebra M (\\<lambda>f. f i) (space P))\""], "translations": [["", "lemma measurable_T [measurable]: \"T \\<in> P \\<rightarrow>\\<^sub>M P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.P.random_variable P T", "unfolding P_def T_def o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P.P.random_variable (Pi\\<^sub>M UNIV (\\<lambda>_. M))\n     (\\<lambda>f x. f (Suc x))", "by (rule measurable_abs_UNIV[OF measurable_compose[OF measurable_component_singleton]]) auto"], ["", "text \\<open>\n  The \\<open>n\\<close>-th tail algebra $\\mathcal{T}_n$ is, in some sense, the algebra in which we forget all\n  information about all $x_i$ with \\<open>i < n\\<close>. We simply change the product algebra of \\<open>P\\<close> by replacing\n  the algebra for each \\<open>i < n\\<close> with the trivial algebra that contains only the empty set and the\n  entire space.\n\\<close>"], ["", "definition tail_algebra :: \"nat \\<Rightarrow> (nat \\<Rightarrow> 'a) measure\"\n  where \"tail_algebra n = PiM UNIV (\\<lambda>i. if i < n then trivial_measure (space M) else M)\""], ["", "lemma tail_algebra_0 [simp]: \"tail_algebra 0 = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail_algebra 0 = P", "by (simp add: tail_algebra_def P_def)"], ["", "lemma space_tail_algebra [simp]: \"space (tail_algebra n) = PiE UNIV (\\<lambda>_. space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space (tail_algebra n) = UNIV \\<rightarrow>\\<^sub>E space M", "by (simp add: tail_algebra_def space_PiM PiE_def Pi_def)"], ["", "lemma measurable_P_component [measurable]: \"P.random_variable M (\\<lambda>f. f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.P.random_variable M (\\<lambda>f. f i)", "unfolding P_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P.P.random_variable M (\\<lambda>f. f i)", "by measurable"], ["", "lemma P_component [simp]: \"distr P M (\\<lambda>f. f i) = M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr P M (\\<lambda>f. f i) = M", "unfolding P_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M UNIV (\\<lambda>_. M)) M (\\<lambda>f. f i) = M", "by (subst P.PiM_component) auto"], ["", "lemma indep_vars: \"P.indep_vars (\\<lambda>_. M) (\\<lambda>i f. f i) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.P.indep_vars (\\<lambda>_. M) (\\<lambda>i f. f i) UNIV", "by (subst P.indep_vars_iff_distr_eq_PiM)\n     (simp_all add: restrict_def distr_id2 P.PiM_component P_def)"], ["", "text \\<open>\n  The shift operator takes us from $\\mathcal{T}_n$ to $\\mathcal{T}_{n+1}$ (it forgets the\n  information about one more variable):\n\\<close>"], ["", "lemma measurable_T_tail: \"T \\<in> tail_algebra (Suc n) \\<rightarrow>\\<^sub>M tail_algebra n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<in> tail_algebra (Suc n) \\<rightarrow>\\<^sub>M tail_algebra n", "unfolding T_def tail_algebra_def o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f x. f (Suc x))\n    \\<in> Pi\\<^sub>M UNIV\n           (\\<lambda>i.\n               if i < Suc n then trivial_measure (space M)\n               else M) \\<rightarrow>\\<^sub>M\n          Pi\\<^sub>M UNIV\n           (\\<lambda>i. if i < n then trivial_measure (space M) else M)", "by (rule measurable_abs_UNIV[OF measurable_compose[OF measurable_component_singleton]]) simp_all"], ["", "lemma measurable_funpow_T: \"T ^^ n \\<in> tail_algebra (m + n) \\<rightarrow>\\<^sub>M tail_algebra m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T ^^ n \\<in> tail_algebra (m + n) \\<rightarrow>\\<^sub>M tail_algebra m", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. T ^^ 0 \\<in> tail_algebra (m + 0) \\<rightarrow>\\<^sub>M tail_algebra m\n 2. \\<And>n.\n       T ^^ n\n       \\<in> tail_algebra (m + n) \\<rightarrow>\\<^sub>M\n             tail_algebra m \\<Longrightarrow>\n       T ^^ Suc n\n       \\<in> tail_algebra (m + Suc n) \\<rightarrow>\\<^sub>M tail_algebra m", "case (Suc n)"], ["proof (state)\nthis:\n  T ^^ n \\<in> tail_algebra (m + n) \\<rightarrow>\\<^sub>M tail_algebra m\n\ngoal (2 subgoals):\n 1. T ^^ 0 \\<in> tail_algebra (m + 0) \\<rightarrow>\\<^sub>M tail_algebra m\n 2. \\<And>n.\n       T ^^ n\n       \\<in> tail_algebra (m + n) \\<rightarrow>\\<^sub>M\n             tail_algebra m \\<Longrightarrow>\n       T ^^ Suc n\n       \\<in> tail_algebra (m + Suc n) \\<rightarrow>\\<^sub>M tail_algebra m", "have \"(T ^^ n) \\<circ> T \\<in> tail_algebra (m + Suc n) \\<rightarrow>\\<^sub>M tail_algebra m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T ^^ n \\<circ> T\n    \\<in> tail_algebra (m + Suc n) \\<rightarrow>\\<^sub>M tail_algebra m", "by (rule measurable_comp[OF _ Suc]) (simp_all add: measurable_T_tail)"], ["proof (state)\nthis:\n  T ^^ n \\<circ> T\n  \\<in> tail_algebra (m + Suc n) \\<rightarrow>\\<^sub>M tail_algebra m\n\ngoal (2 subgoals):\n 1. T ^^ 0 \\<in> tail_algebra (m + 0) \\<rightarrow>\\<^sub>M tail_algebra m\n 2. \\<And>n.\n       T ^^ n\n       \\<in> tail_algebra (m + n) \\<rightarrow>\\<^sub>M\n             tail_algebra m \\<Longrightarrow>\n       T ^^ Suc n\n       \\<in> tail_algebra (m + Suc n) \\<rightarrow>\\<^sub>M tail_algebra m", "thus ?case"], ["proof (prove)\nusing this:\n  T ^^ n \\<circ> T\n  \\<in> tail_algebra (m + Suc n) \\<rightarrow>\\<^sub>M tail_algebra m\n\ngoal (1 subgoal):\n 1. T ^^ Suc n\n    \\<in> tail_algebra (m + Suc n) \\<rightarrow>\\<^sub>M tail_algebra m", "by (simp add: o_def funpow_swap1)"], ["proof (state)\nthis:\n  T ^^ Suc n\n  \\<in> tail_algebra (m + Suc n) \\<rightarrow>\\<^sub>M tail_algebra m\n\ngoal (1 subgoal):\n 1. T ^^ 0 \\<in> tail_algebra (m + 0) \\<rightarrow>\\<^sub>M tail_algebra m", "qed auto"], ["", "lemma measurable_funpow_T': \"T ^^ n \\<in> tail_algebra n \\<rightarrow>\\<^sub>M P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T ^^ n \\<in> tail_algebra n \\<rightarrow>\\<^sub>M P", "using measurable_funpow_T[of n 0]"], ["proof (prove)\nusing this:\n  T ^^ n \\<in> tail_algebra (0 + n) \\<rightarrow>\\<^sub>M tail_algebra 0\n\ngoal (1 subgoal):\n 1. T ^^ n \\<in> tail_algebra n \\<rightarrow>\\<^sub>M P", "by simp"], ["", "text \\<open>\n  The shift operator is clearly measure-preserving:\n\\<close>"], ["", "lemma measure_preserving: \"T \\<in> measure_preserving P P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<in> measure_preserving P P", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. local.P.random_variable P T\n 2. \\<And>A.\n       A \\<in> local.P.events \\<Longrightarrow>\n       emeasure P (T -` A \\<inter> space P) = emeasure P A", "fix A :: \"(nat \\<Rightarrow> 'a) set\""], ["proof (state)\ngoal (2 subgoals):\n 1. local.P.random_variable P T\n 2. \\<And>A.\n       A \\<in> local.P.events \\<Longrightarrow>\n       emeasure P (T -` A \\<inter> space P) = emeasure P A", "assume \"A \\<in> P.events\""], ["proof (state)\nthis:\n  A \\<in> local.P.events\n\ngoal (2 subgoals):\n 1. local.P.random_variable P T\n 2. \\<And>A.\n       A \\<in> local.P.events \\<Longrightarrow>\n       emeasure P (T -` A \\<inter> space P) = emeasure P A", "hence \"emeasure P (T -` A \\<inter> space P) = emeasure (distr P P T) A\""], ["proof (prove)\nusing this:\n  A \\<in> local.P.events\n\ngoal (1 subgoal):\n 1. emeasure P (T -` A \\<inter> space P) = emeasure (distr P P T) A", "by (subst emeasure_distr) simp_all"], ["proof (state)\nthis:\n  emeasure P (T -` A \\<inter> space P) = emeasure (distr P P T) A\n\ngoal (2 subgoals):\n 1. local.P.random_variable P T\n 2. \\<And>A.\n       A \\<in> local.P.events \\<Longrightarrow>\n       emeasure P (T -` A \\<inter> space P) = emeasure P A", "also"], ["proof (state)\nthis:\n  emeasure P (T -` A \\<inter> space P) = emeasure (distr P P T) A\n\ngoal (2 subgoals):\n 1. local.P.random_variable P T\n 2. \\<And>A.\n       A \\<in> local.P.events \\<Longrightarrow>\n       emeasure P (T -` A \\<inter> space P) = emeasure P A", "have \"distr P P T = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr P P T = P", "unfolding P_def T_def o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M UNIV (\\<lambda>_. M))\n     (Pi\\<^sub>M UNIV (\\<lambda>_. M)) (\\<lambda>f x. f (Suc x)) =\n    Pi\\<^sub>M UNIV (\\<lambda>_. M)", "using distr_PiM_reindex[of UNIV \"\\<lambda>_. M\" Suc UNIV]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i \\<in> UNIV \\<Longrightarrow> prob_space M; inj Suc;\n   Suc \\<in> UNIV \\<rightarrow> UNIV\\<rbrakk>\n  \\<Longrightarrow> distr (Pi\\<^sub>M UNIV (\\<lambda>_. M))\n                     (Pi\\<^sub>M UNIV (\\<lambda>i. M))\n                     (\\<lambda>\\<omega>.\n                         \\<lambda>n\\<in>UNIV. \\<omega> (Suc n)) =\n                    Pi\\<^sub>M UNIV (\\<lambda>i. M)\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M UNIV (\\<lambda>_. M))\n     (Pi\\<^sub>M UNIV (\\<lambda>_. M)) (\\<lambda>f x. f (Suc x)) =\n    Pi\\<^sub>M UNIV (\\<lambda>_. M)", "by (simp add: prob_space_axioms restrict_def)"], ["proof (state)\nthis:\n  distr P P T = P\n\ngoal (2 subgoals):\n 1. local.P.random_variable P T\n 2. \\<And>A.\n       A \\<in> local.P.events \\<Longrightarrow>\n       emeasure P (T -` A \\<inter> space P) = emeasure P A", "finally"], ["proof (chain)\npicking this:\n  emeasure P (T -` A \\<inter> space P) = emeasure P A", "show \"emeasure P (T -` A \\<inter> space P) = emeasure P A\""], ["proof (prove)\nusing this:\n  emeasure P (T -` A \\<inter> space P) = emeasure P A\n\ngoal (1 subgoal):\n 1. emeasure P (T -` A \\<inter> space P) = emeasure P A", "."], ["proof (state)\nthis:\n  emeasure P (T -` A \\<inter> space P) = emeasure P A\n\ngoal (1 subgoal):\n 1. local.P.random_variable P T", "qed auto"], ["", "sublocale fmpt P T"], ["proof (prove)\ngoal (1 subgoal):\n 1. fmpt P T", "by unfold_locales\n     (use measure_preserving in \\<open>blast intro: measure_preserving_is_quasi_measure_preserving\\<close>)+"], ["", "text \\<open>\n  Related to the tail algebra, we define the algebra induced by the \\<open>i\\<close>-th variable (i.e.\n  the algebra that contains only information about the \\<open>i\\<close>-th variable):\n\\<close>"], ["", "sublocale X: sigma_algebra \"space P\" \"sets.pullback_algebra M (\\<lambda>f. f i) (space P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_algebra (space P)\n     (sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "by (rule sets.sigma_algebra_pullback)"], ["", "lemma indep_sets_pullback_algebra:\n  \"P.indep_sets (\\<lambda>i. sets.pullback_algebra M (\\<lambda>f. f i) (space P)) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.P.indep_sets\n     (\\<lambda>i. sets.pullback_algebra M (\\<lambda>f. f i) (space P)) UNIV", "using indep_vars"], ["proof (prove)\nusing this:\n  local.P.indep_vars (\\<lambda>_. M) (\\<lambda>i f. f i) UNIV\n\ngoal (1 subgoal):\n 1. local.P.indep_sets\n     (\\<lambda>i. sets.pullback_algebra M (\\<lambda>f. f i) (space P)) UNIV", "unfolding P.indep_vars_def sets.pullback_algebra_def"], ["proof (prove)\nusing this:\n  (\\<forall>i\\<in>UNIV. local.P.random_variable M (\\<lambda>f. f i)) \\<and>\n  local.P.indep_sets\n   (\\<lambda>i.\n       sigma_sets (space P)\n        {(\\<lambda>f. f i) -` A \\<inter> space P |A. A \\<in> events})\n   UNIV\n\ngoal (1 subgoal):\n 1. local.P.indep_sets\n     (\\<lambda>i.\n         sigma_sets (space P)\n          {(\\<lambda>f. f i) -` A \\<inter> space P |A. A \\<in> events})\n     UNIV", "by blast"], ["", "text \\<open>\n  We can now show that the tail algebra $\\mathcal{T}_n$ is a subalgebra of the algebra generated by the\n  algebras induced by all the variables \\<open>x\\<^sub>i\\<close> with \\<open>i \\<ge> n\\<close>:\n\\<close>"], ["", "lemma tail_algebra_subset:\n  \"sets (tail_algebra n) \\<subseteq>\n     sigma_sets (space P) (\\<Union>i\\<in>{n..}. sets.pullback_algebra M (\\<lambda>f. f i) (space P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (tail_algebra n)\n    \\<subseteq> sigma_sets (space P)\n                 (\\<Union>i\\<in>{n..}.\n                     sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sets (tail_algebra n)\n    \\<subseteq> sigma_sets (space P)\n                 (\\<Union>i\\<in>{n..}.\n                     sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have \"sets (tail_algebra n) = sigma_sets (space P)\n           (prod_algebra UNIV (\\<lambda>i. if i < n then trivial_measure (space M) else M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (tail_algebra n) =\n    sigma_sets (space P)\n     (prod_algebra UNIV\n       (\\<lambda>i. if i < n then trivial_measure (space M) else M))", "by (simp add: tail_algebra_def sets_PiM PiE_def Pi_def P_def space_PiM)"], ["proof (state)\nthis:\n  sets (tail_algebra n) =\n  sigma_sets (space P)\n   (prod_algebra UNIV\n     (\\<lambda>i. if i < n then trivial_measure (space M) else M))\n\ngoal (1 subgoal):\n 1. sets (tail_algebra n)\n    \\<subseteq> sigma_sets (space P)\n                 (\\<Union>i\\<in>{n..}.\n                     sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "also"], ["proof (state)\nthis:\n  sets (tail_algebra n) =\n  sigma_sets (space P)\n   (prod_algebra UNIV\n     (\\<lambda>i. if i < n then trivial_measure (space M) else M))\n\ngoal (1 subgoal):\n 1. sets (tail_algebra n)\n    \\<subseteq> sigma_sets (space P)\n                 (\\<Union>i\\<in>{n..}.\n                     sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have \"\\<dots> \\<subseteq> sigma_sets (space P) (\\<Union>i\\<in>{n..}. sets.pullback_algebra M (\\<lambda>f. f i) (space P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_sets (space P)\n     (prod_algebra UNIV\n       (\\<lambda>i. if i < n then trivial_measure (space M) else M))\n    \\<subseteq> sigma_sets (space P)\n                 (\\<Union>i\\<in>{n..}.\n                     sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "proof (intro sigma_sets_mono subsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> prod_algebra UNIV\n                (\\<lambda>i.\n                    if i < n then trivial_measure (space M)\n                    else M) \\<Longrightarrow>\n       x \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "fix C"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> prod_algebra UNIV\n                (\\<lambda>i.\n                    if i < n then trivial_measure (space M)\n                    else M) \\<Longrightarrow>\n       x \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "assume \"C \\<in> prod_algebra UNIV (\\<lambda>i. if i < n then trivial_measure (space M) else M)\""], ["proof (state)\nthis:\n  C \\<in> prod_algebra UNIV\n           (\\<lambda>i. if i < n then trivial_measure (space M) else M)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> prod_algebra UNIV\n                (\\<lambda>i.\n                    if i < n then trivial_measure (space M)\n                    else M) \\<Longrightarrow>\n       x \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "then"], ["proof (chain)\npicking this:\n  C \\<in> prod_algebra UNIV\n           (\\<lambda>i. if i < n then trivial_measure (space M) else M)", "obtain C'\n      where C': \"C = Pi\\<^sub>E UNIV C'\"\n                \"C' \\<in> (\\<Pi> i\\<in>UNIV. sets (if i < n then trivial_measure (space M) else M))\""], ["proof (prove)\nusing this:\n  C \\<in> prod_algebra UNIV\n           (\\<lambda>i. if i < n then trivial_measure (space M) else M)\n\ngoal (1 subgoal):\n 1. (\\<And>C'.\n        \\<lbrakk>C = Pi\\<^sub>E UNIV C';\n         C' \\<in> (\\<Pi> i\\<in>UNIV.\n                      sets\n                       (if i < n then trivial_measure (space M)\n                        else M))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (elim prod_algebraE_all)"], ["proof (state)\nthis:\n  C = Pi\\<^sub>E UNIV C'\n  C' \\<in> (\\<Pi> i\\<in>UNIV.\n               sets (if i < n then trivial_measure (space M) else M))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> prod_algebra UNIV\n                (\\<lambda>i.\n                    if i < n then trivial_measure (space M)\n                    else M) \\<Longrightarrow>\n       x \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have C'_1: \"C' i \\<in> {{}, space M}\" if \"i < n\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. C' i \\<in> {{}, space M}", "using C'(2) that"], ["proof (prove)\nusing this:\n  C' \\<in> (\\<Pi> i\\<in>UNIV.\n               sets (if i < n then trivial_measure (space M) else M))\n  i < n\n\ngoal (1 subgoal):\n 1. C' i \\<in> {{}, space M}", "by (auto simp: Pi_def sets_trivial_measure split: if_splits)"], ["proof (state)\nthis:\n  ?i12 < n \\<Longrightarrow> C' ?i12 \\<in> {{}, space M}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> prod_algebra UNIV\n                (\\<lambda>i.\n                    if i < n then trivial_measure (space M)\n                    else M) \\<Longrightarrow>\n       x \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have C'_2: \"C' i \\<in> sets M\" if \"i \\<ge> n\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. C' i \\<in> events", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. C' i \\<in> events", "from that"], ["proof (chain)\npicking this:\n  n \\<le> i", "have \"\\<not>(i < n)\""], ["proof (prove)\nusing this:\n  n \\<le> i\n\ngoal (1 subgoal):\n 1. \\<not> i < n", "by auto"], ["proof (state)\nthis:\n  \\<not> i < n\n\ngoal (1 subgoal):\n 1. C' i \\<in> events", "with C'(2)"], ["proof (chain)\npicking this:\n  C' \\<in> (\\<Pi> i\\<in>UNIV.\n               sets (if i < n then trivial_measure (space M) else M))\n  \\<not> i < n", "show ?thesis"], ["proof (prove)\nusing this:\n  C' \\<in> (\\<Pi> i\\<in>UNIV.\n               sets (if i < n then trivial_measure (space M) else M))\n  \\<not> i < n\n\ngoal (1 subgoal):\n 1. C' i \\<in> events", "by (force simp: Pi_def sets_trivial_measure split: if_splits)"], ["proof (state)\nthis:\n  C' i \\<in> events\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n \\<le> ?i12 \\<Longrightarrow> C' ?i12 \\<in> events\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> prod_algebra UNIV\n                (\\<lambda>i.\n                    if i < n then trivial_measure (space M)\n                    else M) \\<Longrightarrow>\n       x \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have \"C' i \\<in> events\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. C' i \\<in> events", "using C'_1[of i] C'_2[of i]"], ["proof (prove)\nusing this:\n  i < n \\<Longrightarrow> C' i \\<in> {{}, space M}\n  n \\<le> i \\<Longrightarrow> C' i \\<in> events\n\ngoal (1 subgoal):\n 1. C' i \\<in> events", "by (cases \"i \\<ge> n\") auto"], ["proof (state)\nthis:\n  C' ?i12 \\<in> events\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> prod_algebra UNIV\n                (\\<lambda>i.\n                    if i < n then trivial_measure (space M)\n                    else M) \\<Longrightarrow>\n       x \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "hence \"C \\<in> sets P\""], ["proof (prove)\nusing this:\n  C' ?i12 \\<in> events\n\ngoal (1 subgoal):\n 1. C \\<in> local.P.events", "unfolding P_def C'(1)"], ["proof (prove)\nusing this:\n  C' ?i12 \\<in> events\n\ngoal (1 subgoal):\n 1. Pi\\<^sub>E UNIV C' \\<in> P.P.events", "by (intro sets_PiM_I_countable) auto"], ["proof (state)\nthis:\n  C \\<in> local.P.events\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> prod_algebra UNIV\n                (\\<lambda>i.\n                    if i < n then trivial_measure (space M)\n                    else M) \\<Longrightarrow>\n       x \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "hence \"C \\<subseteq> space P\""], ["proof (prove)\nusing this:\n  C \\<in> local.P.events\n\ngoal (1 subgoal):\n 1. C \\<subseteq> space P", "using sets.sets_into_space"], ["proof (prove)\nusing this:\n  C \\<in> local.P.events\n  ?x \\<in> sets ?M \\<Longrightarrow> ?x \\<subseteq> space ?M\n\ngoal (1 subgoal):\n 1. C \\<subseteq> space P", "by blast"], ["proof (state)\nthis:\n  C \\<subseteq> space P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> prod_algebra UNIV\n                (\\<lambda>i.\n                    if i < n then trivial_measure (space M)\n                    else M) \\<Longrightarrow>\n       x \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "show \"C \\<in> sigma_sets (space P) (\\<Union>i\\<in>{n..}. sets.pullback_algebra M (\\<lambda>f. f i) (space P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "proof (cases \"C = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. C = {} \\<Longrightarrow>\n    C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 2. C \\<noteq> {} \\<Longrightarrow>\n    C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "case False"], ["proof (state)\nthis:\n  C \\<noteq> {}\n\ngoal (2 subgoals):\n 1. C = {} \\<Longrightarrow>\n    C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 2. C \\<noteq> {} \\<Longrightarrow>\n    C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have \"C = (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter> space P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C = (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter> space P", "proof (intro equalityI subsetI, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       x \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter>\n               space P\n 2. \\<And>x.\n       x \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter>\n               space P \\<Longrightarrow>\n       x \\<in> C", "case (1 f)"], ["proof (state)\nthis:\n  f \\<in> C\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       x \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter>\n               space P\n 2. \\<And>x.\n       x \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter>\n               space P \\<Longrightarrow>\n       x \\<in> C", "hence \"f \\<in> space P\""], ["proof (prove)\nusing this:\n  f \\<in> C\n\ngoal (1 subgoal):\n 1. f \\<in> space P", "using 1 \\<open>C \\<subseteq> space P\\<close>"], ["proof (prove)\nusing this:\n  f \\<in> C\n  f \\<in> C\n  C \\<subseteq> space P\n\ngoal (1 subgoal):\n 1. f \\<in> space P", "by blast"], ["proof (state)\nthis:\n  f \\<in> space P\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C \\<Longrightarrow>\n       x \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter>\n               space P\n 2. \\<And>x.\n       x \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter>\n               space P \\<Longrightarrow>\n       x \\<in> C", "thus ?case"], ["proof (prove)\nusing this:\n  f \\<in> space P\n\ngoal (1 subgoal):\n 1. f \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter>\n            space P", "using C' 1"], ["proof (prove)\nusing this:\n  f \\<in> space P\n  C = Pi\\<^sub>E UNIV C'\n  C' \\<in> (\\<Pi> i\\<in>UNIV.\n               sets (if i < n then trivial_measure (space M) else M))\n  f \\<in> C\n\ngoal (1 subgoal):\n 1. f \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter>\n            space P", "by (auto simp: Pi_def sets_trivial_measure split: if_splits)"], ["proof (state)\nthis:\n  f \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter> space P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter>\n               space P \\<Longrightarrow>\n       x \\<in> C", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter>\n               space P \\<Longrightarrow>\n       x \\<in> C", "case (2 f)"], ["proof (state)\nthis:\n  f \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter> space P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter>\n               space P \\<Longrightarrow>\n       x \\<in> C", "hence f: \"f i \\<in> C' i\" if \"i \\<ge> n\" for i"], ["proof (prove)\nusing this:\n  f \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter> space P\n\ngoal (1 subgoal):\n 1. f i \\<in> C' i", "using that"], ["proof (prove)\nusing this:\n  f \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter> space P\n  n \\<le> i\n\ngoal (1 subgoal):\n 1. f i \\<in> C' i", "by auto"], ["proof (state)\nthis:\n  n \\<le> ?i12 \\<Longrightarrow> f ?i12 \\<in> C' ?i12\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter>\n               space P \\<Longrightarrow>\n       x \\<in> C", "have \"f i \\<in> C' i\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. f i \\<in> C' i", "proof (cases \"i \\<ge> n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<le> i \\<Longrightarrow> f i \\<in> C' i\n 2. \\<not> n \\<le> i \\<Longrightarrow> f i \\<in> C' i", "case True"], ["proof (state)\nthis:\n  n \\<le> i\n\ngoal (2 subgoals):\n 1. n \\<le> i \\<Longrightarrow> f i \\<in> C' i\n 2. \\<not> n \\<le> i \\<Longrightarrow> f i \\<in> C' i", "thus ?thesis"], ["proof (prove)\nusing this:\n  n \\<le> i\n\ngoal (1 subgoal):\n 1. f i \\<in> C' i", "using C'_2[of i] f[of i]"], ["proof (prove)\nusing this:\n  n \\<le> i\n  n \\<le> i \\<Longrightarrow> C' i \\<in> events\n  n \\<le> i \\<Longrightarrow> f i \\<in> C' i\n\ngoal (1 subgoal):\n 1. f i \\<in> C' i", "by auto"], ["proof (state)\nthis:\n  f i \\<in> C' i\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> i \\<Longrightarrow> f i \\<in> C' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n \\<le> i \\<Longrightarrow> f i \\<in> C' i", "case False"], ["proof (state)\nthis:\n  \\<not> n \\<le> i\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> i \\<Longrightarrow> f i \\<in> C' i", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> n \\<le> i\n\ngoal (1 subgoal):\n 1. f i \\<in> C' i", "using C'_1[of i] C'(1) \\<open>C \\<noteq> {}\\<close> 2"], ["proof (prove)\nusing this:\n  \\<not> n \\<le> i\n  i < n \\<Longrightarrow> C' i \\<in> {{}, space M}\n  C = Pi\\<^sub>E UNIV C'\n  C \\<noteq> {}\n  f \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter> space P\n\ngoal (1 subgoal):\n 1. f i \\<in> C' i", "by (auto simp: P_def space_PiM)"], ["proof (state)\nthis:\n  f i \\<in> C' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f ?i12 \\<in> C' ?i12\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter>\n               space P \\<Longrightarrow>\n       x \\<in> C", "thus \"f \\<in> C\""], ["proof (prove)\nusing this:\n  f ?i12 \\<in> C' ?i12\n\ngoal (1 subgoal):\n 1. f \\<in> C", "using C'"], ["proof (prove)\nusing this:\n  f ?i12 \\<in> C' ?i12\n  C = Pi\\<^sub>E UNIV C'\n  C' \\<in> (\\<Pi> i\\<in>UNIV.\n               sets (if i < n then trivial_measure (space M) else M))\n\ngoal (1 subgoal):\n 1. f \\<in> C", "by auto"], ["proof (state)\nthis:\n  f \\<in> C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C = (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter> space P\n\ngoal (2 subgoals):\n 1. C = {} \\<Longrightarrow>\n    C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 2. C \\<noteq> {} \\<Longrightarrow>\n    C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "also"], ["proof (state)\nthis:\n  C = (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter> space P\n\ngoal (2 subgoals):\n 1. C = {} \\<Longrightarrow>\n    C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 2. C \\<noteq> {} \\<Longrightarrow>\n    C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have \"(\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter> space P =\n                 (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i \\<inter> space P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter> space P =\n    (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i \\<inter> space P)", "by blast"], ["proof (state)\nthis:\n  (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter> space P =\n  (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i \\<inter> space P)\n\ngoal (2 subgoals):\n 1. C = {} \\<Longrightarrow>\n    C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 2. C \\<noteq> {} \\<Longrightarrow>\n    C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "also"], ["proof (state)\nthis:\n  (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i) \\<inter> space P =\n  (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i \\<inter> space P)\n\ngoal (2 subgoals):\n 1. C = {} \\<Longrightarrow>\n    C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 2. C \\<noteq> {} \\<Longrightarrow>\n    C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have \"\\<dots> \\<in> sigma_sets (space P) (\\<Union>i\\<in>{n..}. sets.pullback_algebra M (\\<lambda>f. f i) (space P))\"\n        (is \"_ \\<in> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i \\<inter> space P)\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "proof (intro sigma_sets_INTER, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<Union>i\\<in>{n..}.\n        sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n    \\<subseteq> Pow (space P)\n 2. \\<And>i.\n       i \\<in> {n..} \\<Longrightarrow>\n       (\\<lambda>f. f i) -` C' i \\<inter> space P\n       \\<in> sigma_sets (space P)\n              (\\<Union>i\\<in>{n..}.\n                  sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 3. {n..} \\<noteq> {}", "fix i"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<Union>i\\<in>{n..}.\n        sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n    \\<subseteq> Pow (space P)\n 2. \\<And>i.\n       i \\<in> {n..} \\<Longrightarrow>\n       (\\<lambda>f. f i) -` C' i \\<inter> space P\n       \\<in> sigma_sets (space P)\n              (\\<Union>i\\<in>{n..}.\n                  sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 3. {n..} \\<noteq> {}", "show \"(\\<lambda>f. f i) -` C' i \\<inter> space P \\<in> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "proof (cases \"i \\<ge> n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<le> i \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 2. \\<not> n \\<le> i \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "case False"], ["proof (state)\nthis:\n  \\<not> n \\<le> i\n\ngoal (2 subgoals):\n 1. n \\<le> i \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 2. \\<not> n \\<le> i \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "hence \"C' i = {} \\<or> C' i = space M\""], ["proof (prove)\nusing this:\n  \\<not> n \\<le> i\n\ngoal (1 subgoal):\n 1. C' i = {} \\<or> C' i = space M", "using C'_1[of i]"], ["proof (prove)\nusing this:\n  \\<not> n \\<le> i\n  i < n \\<Longrightarrow> C' i \\<in> {{}, space M}\n\ngoal (1 subgoal):\n 1. C' i = {} \\<or> C' i = space M", "by auto"], ["proof (state)\nthis:\n  C' i = {} \\<or> C' i = space M\n\ngoal (2 subgoals):\n 1. n \\<le> i \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 2. \\<not> n \\<le> i \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "thus ?thesis"], ["proof (prove)\nusing this:\n  C' i = {} \\<or> C' i = space M\n\ngoal (1 subgoal):\n 1. (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. C' i = {} \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 2. C' i = space M \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "assume [simp]: \"C' i = space M\""], ["proof (state)\nthis:\n  C' i = space M\n\ngoal (2 subgoals):\n 1. C' i = {} \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 2. C' i = space M \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have \"space P \\<subseteq> (\\<lambda>f. f i) -` C' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space P \\<subseteq> (\\<lambda>f. f i) -` C' i", "by (auto simp: P_def space_PiM)"], ["proof (state)\nthis:\n  space P \\<subseteq> (\\<lambda>f. f i) -` C' i\n\ngoal (2 subgoals):\n 1. C' i = {} \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 2. C' i = space M \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "hence \"(\\<lambda>f. f i) -` C' i \\<inter> space P = space P\""], ["proof (prove)\nusing this:\n  space P \\<subseteq> (\\<lambda>f. f i) -` C' i\n\ngoal (1 subgoal):\n 1. (\\<lambda>f. f i) -` C' i \\<inter> space P = space P", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>f. f i) -` C' i \\<inter> space P = space P\n\ngoal (2 subgoals):\n 1. C' i = {} \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 2. C' i = space M \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>f. f i) -` C' i \\<inter> space P = space P\n\ngoal (1 subgoal):\n 1. (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "using sigma_sets_top"], ["proof (prove)\nusing this:\n  (\\<lambda>f. f i) -` C' i \\<inter> space P = space P\n  ?sp \\<in> sigma_sets ?sp ?A\n\ngoal (1 subgoal):\n 1. (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "by metis"], ["proof (state)\nthis:\n  (\\<lambda>f. f i) -` C' i \\<inter> space P\n  \\<in> sigma_sets (space P)\n         (\\<Union>i\\<in>{n..}.\n             sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n\ngoal (1 subgoal):\n 1. C' i = {} \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "qed (auto intro: sigma_sets.Empty)"], ["proof (state)\nthis:\n  (\\<lambda>f. f i) -` C' i \\<inter> space P\n  \\<in> sigma_sets (space P)\n         (\\<Union>i\\<in>{n..}.\n             sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n\ngoal (1 subgoal):\n 1. n \\<le> i \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<le> i \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "case i: True"], ["proof (state)\nthis:\n  n \\<le> i\n\ngoal (1 subgoal):\n 1. n \\<le> i \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have \"(\\<lambda>f. f i) -` C' i \\<inter> space P \\<in> sets.pullback_algebra M (\\<lambda>f. f i) (space P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sets.pullback_algebra M (\\<lambda>f. f i) (space P)", "using C'_2[OF i]"], ["proof (prove)\nusing this:\n  C' i \\<in> events\n\ngoal (1 subgoal):\n 1. (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sets.pullback_algebra M (\\<lambda>f. f i) (space P)", "by (intro sets.in_pullback_algebra) auto"], ["proof (state)\nthis:\n  (\\<lambda>f. f i) -` C' i \\<inter> space P\n  \\<in> sets.pullback_algebra M (\\<lambda>f. f i) (space P)\n\ngoal (1 subgoal):\n 1. n \\<le> i \\<Longrightarrow>\n    (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>f. f i) -` C' i \\<inter> space P\n  \\<in> sets.pullback_algebra M (\\<lambda>f. f i) (space P)\n\ngoal (1 subgoal):\n 1. (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "using i"], ["proof (prove)\nusing this:\n  (\\<lambda>f. f i) -` C' i \\<inter> space P\n  \\<in> sets.pullback_algebra M (\\<lambda>f. f i) (space P)\n  n \\<le> i\n\ngoal (1 subgoal):\n 1. (\\<lambda>f. f i) -` C' i \\<inter> space P\n    \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>f. f i) -` C' i \\<inter> space P\n  \\<in> sigma_sets (space P)\n         (\\<Union>i\\<in>{n..}.\n             sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>f. f i) -` C' i \\<inter> space P\n  \\<in> sigma_sets (space P)\n         (\\<Union>i\\<in>{n..}.\n             sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n\ngoal (2 subgoals):\n 1. (\\<Union>i\\<in>{n..}.\n        sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n    \\<subseteq> Pow (space P)\n 2. {n..} \\<noteq> {}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<Union>i\\<in>{n..}.\n        sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n    \\<subseteq> Pow (space P)\n 2. {n..} \\<noteq> {}", "have \"C \\<subseteq> space P\" if \"C \\<in> sets.pullback_algebra M (\\<lambda>f. f i) (space P)\" for i C"], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<subseteq> space P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. C \\<subseteq> space P", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<subseteq> space P", "by (rule sigma_sets_into_sp) (use that X.space_closed[of i] in auto)"], ["proof (state)\nthis:\n  C \\<subseteq> space P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?C12\n  \\<in> sets.pullback_algebra M (\\<lambda>f. f ?i12)\n         (space P) \\<Longrightarrow>\n  ?C12 \\<subseteq> space P\n\ngoal (2 subgoals):\n 1. (\\<Union>i\\<in>{n..}.\n        sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n    \\<subseteq> Pow (space P)\n 2. {n..} \\<noteq> {}", "thus \"(\\<Union>i\\<in>{n..}. sets.pullback_algebra M (\\<lambda>f. f i) (space P))\\<subseteq> Pow (space P)\""], ["proof (prove)\nusing this:\n  ?C12\n  \\<in> sets.pullback_algebra M (\\<lambda>f. f ?i12)\n         (space P) \\<Longrightarrow>\n  ?C12 \\<subseteq> space P\n\ngoal (1 subgoal):\n 1. (\\<Union>i\\<in>{n..}.\n        sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n    \\<subseteq> Pow (space P)", "by auto"], ["proof (state)\nthis:\n  (\\<Union>i\\<in>{n..}. sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n  \\<subseteq> Pow (space P)\n\ngoal (1 subgoal):\n 1. {n..} \\<noteq> {}", "qed auto"], ["proof (state)\nthis:\n  (\\<Inter>i\\<in>{n..}. (\\<lambda>f. f i) -` C' i \\<inter> space P)\n  \\<in> sigma_sets (space P)\n         (\\<Union>i\\<in>{n..}.\n             sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n\ngoal (2 subgoals):\n 1. C = {} \\<Longrightarrow>\n    C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n 2. C \\<noteq> {} \\<Longrightarrow>\n    C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "finally"], ["proof (chain)\npicking this:\n  C \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "show ?thesis"], ["proof (prove)\nusing this:\n  C \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n\ngoal (1 subgoal):\n 1. C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "."], ["proof (state)\nthis:\n  C \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n\ngoal (1 subgoal):\n 1. C = {} \\<Longrightarrow>\n    C \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "qed (auto simp: sigma_sets.Empty)"], ["proof (state)\nthis:\n  C \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sigma_sets (space P)\n   (prod_algebra UNIV\n     (\\<lambda>i. if i < n then trivial_measure (space M) else M))\n  \\<subseteq> sigma_sets (space P)\n               (\\<Union>i\\<in>{n..}.\n                   sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n\ngoal (1 subgoal):\n 1. sets (tail_algebra n)\n    \\<subseteq> sigma_sets (space P)\n                 (\\<Union>i\\<in>{n..}.\n                     sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "finally"], ["proof (chain)\npicking this:\n  sets (tail_algebra n)\n  \\<subseteq> sigma_sets (space P)\n               (\\<Union>i\\<in>{n..}.\n                   sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "show ?thesis"], ["proof (prove)\nusing this:\n  sets (tail_algebra n)\n  \\<subseteq> sigma_sets (space P)\n               (\\<Union>i\\<in>{n..}.\n                   sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n\ngoal (1 subgoal):\n 1. sets (tail_algebra n)\n    \\<subseteq> sigma_sets (space P)\n                 (\\<Union>i\\<in>{n..}.\n                     sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "."], ["proof (state)\nthis:\n  sets (tail_algebra n)\n  \\<subseteq> sigma_sets (space P)\n               (\\<Union>i\\<in>{n..}.\n                   sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  It now follows that the \\<open>T\\<close>-invariant events are a subset of the tail algebra induced\n  by the variables:\n\\<close>"], ["", "lemma Invariants_subset_tail_algebra:\n  \"sets Invariants \\<subseteq> P.tail_events (\\<lambda>i. sets.pullback_algebra M (\\<lambda>f. f i) (space P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets Invariants\n    \\<subseteq> local.P.tail_events\n                 (\\<lambda>i.\n                     sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sets Invariants \\<Longrightarrow>\n       x \\<in> local.P.tail_events\n                (\\<lambda>i.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "fix A"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sets Invariants \\<Longrightarrow>\n       x \\<in> local.P.tail_events\n                (\\<lambda>i.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "assume A: \"A \\<in> sets Invariants\""], ["proof (state)\nthis:\n  A \\<in> sets Invariants\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sets Invariants \\<Longrightarrow>\n       x \\<in> local.P.tail_events\n                (\\<lambda>i.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have A': \"A \\<in> P.events\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> local.P.events", "using A"], ["proof (prove)\nusing this:\n  A \\<in> sets Invariants\n\ngoal (1 subgoal):\n 1. A \\<in> local.P.events", "unfolding Invariants_sets"], ["proof (prove)\nusing this:\n  A \\<in> {A \\<in> local.P.events. T -` A \\<inter> space P = A}\n\ngoal (1 subgoal):\n 1. A \\<in> local.P.events", "by simp_all"], ["proof (state)\nthis:\n  A \\<in> local.P.events\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sets Invariants \\<Longrightarrow>\n       x \\<in> local.P.tail_events\n                (\\<lambda>i.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "show \"A \\<in> P.tail_events (\\<lambda>i. sets.pullback_algebra M (\\<lambda>f. f i) (space P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> local.P.tail_events\n             (\\<lambda>i.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "unfolding P.tail_events_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> (\\<Inter>n.\n                sigma_sets (space P)\n                 (\\<Union>i\\<in>{n..}.\n                     sets.pullback_algebra M (\\<lambda>f. f i) (space P)))", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       A \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       A \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have \"vimage_restr T A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vimage_restr T A = A", "using A"], ["proof (prove)\nusing this:\n  A \\<in> sets Invariants\n\ngoal (1 subgoal):\n 1. vimage_restr T A = A", "by (simp add: Invariants_vrestr)"], ["proof (state)\nthis:\n  vimage_restr T A = A\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       A \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "hence \"A = vimage_restr (T ^^ n) A\""], ["proof (prove)\nusing this:\n  vimage_restr T A = A\n\ngoal (1 subgoal):\n 1. A = vimage_restr (T ^^ n) A", "using A'"], ["proof (prove)\nusing this:\n  vimage_restr T A = A\n  A \\<in> local.P.events\n\ngoal (1 subgoal):\n 1. A = vimage_restr (T ^^ n) A", "by (induction n) (simp_all add: vrestr_comp)"], ["proof (state)\nthis:\n  A = vimage_restr (T ^^ n) A\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       A \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "also"], ["proof (state)\nthis:\n  A = vimage_restr (T ^^ n) A\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       A \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have \"vimage_restr (T ^^ n) A = (T ^^ n) -` (A \\<inter> space P) \\<inter> space P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vimage_restr (T ^^ n) A =\n    (T ^^ n) -` (A \\<inter> space P) \\<inter> space P", "unfolding vimage_restr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (T ^^ n) -` (A \\<inter> space P) \\<inter> space P =\n    (T ^^ n) -` (A \\<inter> space P) \\<inter> space P", ".."], ["proof (state)\nthis:\n  vimage_restr (T ^^ n) A =\n  (T ^^ n) -` (A \\<inter> space P) \\<inter> space P\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       A \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "also"], ["proof (state)\nthis:\n  vimage_restr (T ^^ n) A =\n  (T ^^ n) -` (A \\<inter> space P) \\<inter> space P\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       A \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have \"A \\<inter> space P = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter> space P = A", "using A'"], ["proof (prove)\nusing this:\n  A \\<in> local.P.events\n\ngoal (1 subgoal):\n 1. A \\<inter> space P = A", "by simp"], ["proof (state)\nthis:\n  A \\<inter> space P = A\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       A \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "also"], ["proof (state)\nthis:\n  A \\<inter> space P = A\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       A \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have \"space P = space (tail_algebra n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space P = space (tail_algebra n)", "by (simp add: P_def space_PiM)"], ["proof (state)\nthis:\n  space P = space (tail_algebra n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       A \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "also"], ["proof (state)\nthis:\n  space P = space (tail_algebra n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       A \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have \"(T ^^ n) -` A \\<inter> space (tail_algebra n) \\<in> sets (tail_algebra n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (T ^^ n) -` A \\<inter> space (tail_algebra n)\n    \\<in> sets (tail_algebra n)", "by (rule measurable_sets[OF measurable_funpow_T' A'])"], ["proof (state)\nthis:\n  (T ^^ n) -` A \\<inter> space (tail_algebra n) \\<in> sets (tail_algebra n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       A \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "also"], ["proof (state)\nthis:\n  (T ^^ n) -` A \\<inter> space (tail_algebra n) \\<in> sets (tail_algebra n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       A \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "have \"sets (tail_algebra n) \\<subseteq>\n               sigma_sets (space P) (\\<Union>i\\<in>{n..}. sets.pullback_algebra M (\\<lambda>f. f i) (space P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (tail_algebra n)\n    \\<subseteq> sigma_sets (space P)\n                 (\\<Union>i\\<in>{n..}.\n                     sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "by (rule tail_algebra_subset)"], ["proof (state)\nthis:\n  sets (tail_algebra n)\n  \\<subseteq> sigma_sets (space P)\n               (\\<Union>i\\<in>{n..}.\n                   sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       n \\<in> UNIV \\<Longrightarrow>\n       A \\<in> sigma_sets (space P)\n                (\\<Union>i\\<in>{n..}.\n                    sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "finally"], ["proof (chain)\npicking this:\n  A \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "show \"A \\<in> sigma_sets (space P) (\\<Union>i\\<in>{n..}. sets.pullback_algebra M (\\<lambda>f. f i) (space P))\""], ["proof (prove)\nusing this:\n  A \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n\ngoal (1 subgoal):\n 1. A \\<in> sigma_sets (space P)\n             (\\<Union>i\\<in>{n..}.\n                 sets.pullback_algebra M (\\<lambda>f. f i) (space P))", "."], ["proof (state)\nthis:\n  A \\<in> sigma_sets (space P)\n           (\\<Union>i\\<in>{n..}.\n               sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A \\<in> local.P.tail_events\n           (\\<lambda>i. sets.pullback_algebra M (\\<lambda>f. f i) (space P))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  A simple invocation of Kolmogorov's 0--1 law now proves that \\<open>T\\<close> is indeed ergodic:\n\\<close>"], ["", "sublocale ergodic_fmpt P T"], ["proof (prove)\ngoal (1 subgoal):\n 1. ergodic_fmpt P T", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets Invariants \\<Longrightarrow>\n       A \\<in> null_sets P \\<or> space P - A \\<in> null_sets P", "fix A"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets Invariants \\<Longrightarrow>\n       A \\<in> null_sets P \\<or> space P - A \\<in> null_sets P", "assume A: \"A \\<in> sets Invariants\""], ["proof (state)\nthis:\n  A \\<in> sets Invariants\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets Invariants \\<Longrightarrow>\n       A \\<in> null_sets P \\<or> space P - A \\<in> null_sets P", "have A': \"A \\<in> P.events\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> local.P.events", "using A"], ["proof (prove)\nusing this:\n  A \\<in> sets Invariants\n\ngoal (1 subgoal):\n 1. A \\<in> local.P.events", "unfolding Invariants_sets"], ["proof (prove)\nusing this:\n  A \\<in> {A \\<in> local.P.events. T -` A \\<inter> space P = A}\n\ngoal (1 subgoal):\n 1. A \\<in> local.P.events", "by simp_all"], ["proof (state)\nthis:\n  A \\<in> local.P.events\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets Invariants \\<Longrightarrow>\n       A \\<in> null_sets P \\<or> space P - A \\<in> null_sets P", "have \"P.prob A = 0 \\<or> P.prob A = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.P.prob A = 0 \\<or> local.P.prob A = 1", "using X.sigma_algebra_axioms indep_sets_pullback_algebra"], ["proof (prove)\nusing this:\n  sigma_algebra (space P)\n   (sets.pullback_algebra M (\\<lambda>f. f ?i) (space P))\n  local.P.indep_sets\n   (\\<lambda>i. sets.pullback_algebra M (\\<lambda>f. f i) (space P)) UNIV\n\ngoal (1 subgoal):\n 1. local.P.prob A = 0 \\<or> local.P.prob A = 1", "by (rule P.kolmogorov_0_1_law) (use A Invariants_subset_tail_algebra in blast)"], ["proof (state)\nthis:\n  local.P.prob A = 0 \\<or> local.P.prob A = 1\n\ngoal (1 subgoal):\n 1. \\<And>A.\n       A \\<in> sets Invariants \\<Longrightarrow>\n       A \\<in> null_sets P \\<or> space P - A \\<in> null_sets P", "thus \"A \\<in> null_sets P \\<or> space P - A \\<in> null_sets P\""], ["proof (prove)\nusing this:\n  local.P.prob A = 0 \\<or> local.P.prob A = 1\n\ngoal (1 subgoal):\n 1. A \\<in> null_sets P \\<or> space P - A \\<in> null_sets P", "by (rule disj_forward) (use A'(1) P.prob_compl[of A] in \\<open>auto simp: P.emeasure_eq_measure\\<close>)"], ["proof (state)\nthis:\n  A \\<in> null_sets P \\<or> space P - A \\<in> null_sets P\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}