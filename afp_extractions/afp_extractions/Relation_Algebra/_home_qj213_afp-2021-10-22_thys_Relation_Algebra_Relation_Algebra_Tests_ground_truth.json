{"file_name": "/home/qj213/afp-2021-10-22/thys/Relation_Algebra/Relation_Algebra_Tests.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Relation_Algebra", "problem_names": ["lemma test_conv: \"is_test x \\<Longrightarrow> is_test (x\\<^sup>\\<smile>)\"", "lemma test_conv_var: \"is_test x \\<Longrightarrow> x\\<^sup>\\<smile> \\<le> 1'\"", "lemma test_eq_conv [simp]: \"is_test x \\<Longrightarrow> x\\<^sup>\\<smile> = x\"", "lemma test_sum: \"\\<lbrakk>is_test x; is_test y\\<rbrakk> \\<Longrightarrow> is_test (x + y)\"", "lemma test_prod: \"\\<lbrakk>is_test x; is_test y\\<rbrakk> \\<Longrightarrow> is_test (x \\<cdot> y)\"", "lemma test_comp: \"\\<lbrakk>is_test x; is_test y\\<rbrakk> \\<Longrightarrow> is_test (x ; y)\"", "lemma test_comp_eq_mult:\n  assumes \"is_test x\"\n    and \"is_test y\"\n  shows \"x ; y = x \\<cdot> y\"", "lemma test_1 [simp]: \"is_test x \\<Longrightarrow> x ; 1 \\<cdot> y = x ; y\"", "lemma maddux_32 [simp]: \"is_test x \\<Longrightarrow> -(x ; 1) \\<cdot> 1' = -x \\<cdot> 1'\"", "lemma test_distr_1 :\n  assumes \"is_test x\"\n    and \"is_test y\"\n  shows \"x ; z \\<cdot> y ; z = (x \\<cdot> y) ; z\"", "lemma maddux_35: \"is_test x \\<Longrightarrow> x ; y \\<cdot> -z = x ; y \\<cdot> -(x ; z)\"", "lemma test_compl_1 [simp]: \"is_test x \\<Longrightarrow> x + tc x = 1'\"", "lemma test_compl_2 [simp]: \"is_test x \\<Longrightarrow> x \\<cdot> tc x = 0\"", "lemma test_test_compl: \"is_test x \\<Longrightarrow> is_test (tc x)\"", "lemma test_compl_de_morgan_1: \"tc (x + y) = tc x \\<cdot> tc y\"", "lemma test_compl_de_morgan_2: \"tc (x \\<cdot> y) = tc x + tc y\"", "lemma test_compl_three [simp]: \"tc (tc (tc x)) = tc x\"", "lemma test_compl_double [simp]: \"is_test x \\<Longrightarrow> tc (tc x) = x\""], "translations": [["", "lemma test_conv: \"is_test x \\<Longrightarrow> is_test (x\\<^sup>\\<smile>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> is_test (x\\<^sup>\\<smile>)", "by (metis conv_e conv_iso is_test_def)"], ["", "lemma test_conv_var: \"is_test x \\<Longrightarrow> x\\<^sup>\\<smile> \\<le> 1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> x\\<^sup>\\<smile> \\<le> 1'", "by (metis test_conv is_test_def)"], ["", "lemma test_eq_conv [simp]: \"is_test x \\<Longrightarrow> x\\<^sup>\\<smile> = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> x\\<^sup>\\<smile> = x", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_test x \\<Longrightarrow> x\\<^sup>\\<smile> \\<le> x\n 2. is_test x \\<Longrightarrow> x \\<le> x\\<^sup>\\<smile>", "assume hyp: \"is_test x\""], ["proof (state)\nthis:\n  is_test x\n\ngoal (2 subgoals):\n 1. is_test x \\<Longrightarrow> x\\<^sup>\\<smile> \\<le> x\n 2. is_test x \\<Longrightarrow> x \\<le> x\\<^sup>\\<smile>", "hence \"x \\<le> x ; (1' \\<cdot> x\\<^sup>\\<smile> ; 1')\""], ["proof (prove)\nusing this:\n  is_test x\n\ngoal (1 subgoal):\n 1. x \\<le> x ; (1' \\<cdot> x\\<^sup>\\<smile> ; 1')", "by (metis inf.commute inf_absorb2 inf_le2 modular_1' mult.right_neutral is_test_def)"], ["proof (state)\nthis:\n  x \\<le> x ; (1' \\<cdot> x\\<^sup>\\<smile> ; 1')\n\ngoal (2 subgoals):\n 1. is_test x \\<Longrightarrow> x\\<^sup>\\<smile> \\<le> x\n 2. is_test x \\<Longrightarrow> x \\<le> x\\<^sup>\\<smile>", "thus \"x \\<le> x\\<^sup>\\<smile>\""], ["proof (prove)\nusing this:\n  x \\<le> x ; (1' \\<cdot> x\\<^sup>\\<smile> ; 1')\n\ngoal (1 subgoal):\n 1. x \\<le> x\\<^sup>\\<smile>", "by (metis comp_unitr conv_contrav conv_invol eq_iff hyp inf_absorb2 mult_subdistl test_conv_var)"], ["proof (state)\nthis:\n  x \\<le> x\\<^sup>\\<smile>\n\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> x\\<^sup>\\<smile> \\<le> x", "thus \"x\\<^sup>\\<smile> \\<le> x\""], ["proof (prove)\nusing this:\n  x \\<le> x\\<^sup>\\<smile>\n\ngoal (1 subgoal):\n 1. x\\<^sup>\\<smile> \\<le> x", "by (metis conv_invol conv_times le_iff_inf)"], ["proof (state)\nthis:\n  x\\<^sup>\\<smile> \\<le> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma test_sum: \"\\<lbrakk>is_test x; is_test y\\<rbrakk> \\<Longrightarrow> is_test (x + y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_test x; is_test y\\<rbrakk> \\<Longrightarrow> is_test (x + y)", "by (simp add: is_test_def)"], ["", "lemma test_prod: \"\\<lbrakk>is_test x; is_test y\\<rbrakk> \\<Longrightarrow> is_test (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_test x; is_test y\\<rbrakk>\n    \\<Longrightarrow> is_test (x \\<cdot> y)", "by (metis le_infI2 is_test_def)"], ["", "lemma test_comp: \"\\<lbrakk>is_test x; is_test y\\<rbrakk> \\<Longrightarrow> is_test (x ; y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_test x; is_test y\\<rbrakk> \\<Longrightarrow> is_test (x ; y)", "by (metis mult_isol comp_unitr order_trans is_test_def)"], ["", "lemma test_comp_eq_mult:\n  assumes \"is_test x\"\n    and \"is_test y\"\n  shows \"x ; y = x \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ; y = x \\<cdot> y", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. x ; y \\<le> x \\<cdot> y\n 2. x \\<cdot> y \\<le> x ; y", "show \"x ; y \\<le> x \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ; y \\<le> x \\<cdot> y", "by (metis assms comp_unitr inf_absorb2 le_inf_iff mult_onel mult_subdistl mult_subdistr is_test_def)"], ["proof (state)\nthis:\n  x ; y \\<le> x \\<cdot> y\n\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> x ; y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> x ; y", "have \"x \\<cdot> y \\<le> x ; (1' \\<cdot> x\\<^sup>\\<smile> ; y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> x ; (1' \\<cdot> x\\<^sup>\\<smile> ; y)", "by (metis comp_unitr modular_1_var)"], ["proof (state)\nthis:\n  x \\<cdot> y \\<le> x ; (1' \\<cdot> x\\<^sup>\\<smile> ; y)\n\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> x ; y", "thus \"x \\<cdot> y \\<le> x ; y\""], ["proof (prove)\nusing this:\n  x \\<cdot> y \\<le> x ; (1' \\<cdot> x\\<^sup>\\<smile> ; y)\n\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> x ; y", "by (metis assms(1) inf_absorb2 le_infI2 mult.left_neutral mult_isol mult_subdistr order_trans test_eq_conv is_test_def)"], ["proof (state)\nthis:\n  x \\<cdot> y \\<le> x ; y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma test_1 [simp]: \"is_test x \\<Longrightarrow> x ; 1 \\<cdot> y = x ; y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> x ; 1 \\<cdot> y = x ; y", "by (metis inf.commute inf.idem inf_absorb2 mult.left_neutral one_conv ra_1 test_comp_eq_mult test_eq_conv is_test_def)"], ["", "lemma maddux_32 [simp]: \"is_test x \\<Longrightarrow> -(x ; 1) \\<cdot> 1' = -x \\<cdot> 1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> - (x ; 1) \\<cdot> 1' = - x \\<cdot> 1'", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_test x \\<Longrightarrow> - (x ; 1) \\<cdot> 1' \\<le> - x \\<cdot> 1'\n 2. is_test x \\<Longrightarrow> - x \\<cdot> 1' \\<le> - (x ; 1) \\<cdot> 1'", "assume \"is_test x\""], ["proof (state)\nthis:\n  is_test x\n\ngoal (2 subgoals):\n 1. is_test x \\<Longrightarrow> - (x ; 1) \\<cdot> 1' \\<le> - x \\<cdot> 1'\n 2. is_test x \\<Longrightarrow> - x \\<cdot> 1' \\<le> - (x ; 1) \\<cdot> 1'", "show \"-(x ; 1) \\<cdot> 1' \\<le> -x \\<cdot> 1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (x ; 1) \\<cdot> 1' \\<le> - x \\<cdot> 1'", "by (metis maddux_20 comp_anti inf.commute meet_isor)"], ["proof (state)\nthis:\n  - (x ; 1) \\<cdot> 1' \\<le> - x \\<cdot> 1'\n\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> - x \\<cdot> 1' \\<le> - (x ; 1) \\<cdot> 1'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> - x \\<cdot> 1' \\<le> - (x ; 1) \\<cdot> 1'", "assume \"is_test x\""], ["proof (state)\nthis:\n  is_test x\n\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> - x \\<cdot> 1' \\<le> - (x ; 1) \\<cdot> 1'", "have one: \"x ; 1 \\<cdot> (-x \\<cdot> 1') \\<le> x ; x\\<^sup>\\<smile> ; (-x \\<cdot> 1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ; 1 \\<cdot> (- x \\<cdot> 1')\n    \\<le> x ; x\\<^sup>\\<smile> ; (- x \\<cdot> 1')", "by (metis maddux_16 inf_top_left mult.assoc)"], ["proof (state)\nthis:\n  x ; 1 \\<cdot> (- x \\<cdot> 1')\n  \\<le> x ; x\\<^sup>\\<smile> ; (- x \\<cdot> 1')\n\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> - x \\<cdot> 1' \\<le> - (x ; 1) \\<cdot> 1'", "hence two: \"x ; 1 \\<cdot> (-x \\<cdot> 1') \\<le> -x\""], ["proof (prove)\nusing this:\n  x ; 1 \\<cdot> (- x \\<cdot> 1')\n  \\<le> x ; x\\<^sup>\\<smile> ; (- x \\<cdot> 1')\n\ngoal (1 subgoal):\n 1. x ; 1 \\<cdot> (- x \\<cdot> 1') \\<le> - x", "by (metis inf.commute inf_le1 le_infE)"], ["proof (state)\nthis:\n  x ; 1 \\<cdot> (- x \\<cdot> 1') \\<le> - x\n\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> - x \\<cdot> 1' \\<le> - (x ; 1) \\<cdot> 1'", "hence \"x ; 1 \\<cdot> (-x \\<cdot> 1') \\<le> x\""], ["proof (prove)\nusing this:\n  x ; 1 \\<cdot> (- x \\<cdot> 1') \\<le> - x\n\ngoal (1 subgoal):\n 1. x ; 1 \\<cdot> (- x \\<cdot> 1') \\<le> x", "by (metis one inf.commute le_infE meet_iso one_conv \\<open>is_test x\\<close> eq_iff test_1 test_eq_conv)"], ["proof (state)\nthis:\n  x ; 1 \\<cdot> (- x \\<cdot> 1') \\<le> x\n\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> - x \\<cdot> 1' \\<le> - (x ; 1) \\<cdot> 1'", "hence \"x ; 1 \\<cdot> (-x \\<cdot> 1') = 0\""], ["proof (prove)\nusing this:\n  x ; 1 \\<cdot> (- x \\<cdot> 1') \\<le> x\n\ngoal (1 subgoal):\n 1. x ; 1 \\<cdot> (- x \\<cdot> 1') = 0", "by (metis two galois_aux2 le_iff_inf)"], ["proof (state)\nthis:\n  x ; 1 \\<cdot> (- x \\<cdot> 1') = 0\n\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> - x \\<cdot> 1' \\<le> - (x ; 1) \\<cdot> 1'", "thus \"-x \\<cdot> 1' \\<le> -(x ; 1) \\<cdot> 1'\""], ["proof (prove)\nusing this:\n  x ; 1 \\<cdot> (- x \\<cdot> 1') = 0\n\ngoal (1 subgoal):\n 1. - x \\<cdot> 1' \\<le> - (x ; 1) \\<cdot> 1'", "by (metis double_compl galois_aux2 inf.commute inf_le1 le_inf_iff)"], ["proof (state)\nthis:\n  - x \\<cdot> 1' \\<le> - (x ; 1) \\<cdot> 1'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma test_distr_1 :\n  assumes \"is_test x\"\n    and \"is_test y\"\n  shows \"x ; z \\<cdot> y ; z = (x \\<cdot> y) ; z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ; z \\<cdot> y ; z = (x \\<cdot> y) ; z", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. x ; z \\<cdot> y ; z \\<le> (x \\<cdot> y) ; z\n 2. (x \\<cdot> y) ; z \\<le> x ; z \\<cdot> y ; z", "have \"x ; z \\<cdot> y ; z \\<le> x ; 1 \\<cdot> y ; z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ; z \\<cdot> y ; z \\<le> x ; 1 \\<cdot> y ; z", "by (metis inf_top_left meet_iso mult_subdistl)"], ["proof (state)\nthis:\n  x ; z \\<cdot> y ; z \\<le> x ; 1 \\<cdot> y ; z\n\ngoal (2 subgoals):\n 1. x ; z \\<cdot> y ; z \\<le> (x \\<cdot> y) ; z\n 2. (x \\<cdot> y) ; z \\<le> x ; z \\<cdot> y ; z", "also"], ["proof (state)\nthis:\n  x ; z \\<cdot> y ; z \\<le> x ; 1 \\<cdot> y ; z\n\ngoal (2 subgoals):\n 1. x ; z \\<cdot> y ; z \\<le> (x \\<cdot> y) ; z\n 2. (x \\<cdot> y) ; z \\<le> x ; z \\<cdot> y ; z", "have \"\\<dots> = x ; y ; z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ; 1 \\<cdot> y ; z = x ; y ; z", "by (metis assms(1) mult.assoc test_1)"], ["proof (state)\nthis:\n  x ; 1 \\<cdot> y ; z = x ; y ; z\n\ngoal (2 subgoals):\n 1. x ; z \\<cdot> y ; z \\<le> (x \\<cdot> y) ; z\n 2. (x \\<cdot> y) ; z \\<le> x ; z \\<cdot> y ; z", "finally"], ["proof (chain)\npicking this:\n  x ; z \\<cdot> y ; z \\<le> x ; y ; z", "show \"x ; z \\<cdot> y ; z \\<le> (x \\<cdot> y) ; z\""], ["proof (prove)\nusing this:\n  x ; z \\<cdot> y ; z \\<le> x ; y ; z\n\ngoal (1 subgoal):\n 1. x ; z \\<cdot> y ; z \\<le> (x \\<cdot> y) ; z", "by (metis assms test_comp_eq_mult)"], ["proof (state)\nthis:\n  x ; z \\<cdot> y ; z \\<le> (x \\<cdot> y) ; z\n\ngoal (1 subgoal):\n 1. (x \\<cdot> y) ; z \\<le> x ; z \\<cdot> y ; z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (x \\<cdot> y) ; z \\<le> x ; z \\<cdot> y ; z", "show \"(x \\<cdot> y) ; z \\<le> x ; z \\<cdot> y ; z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<cdot> y) ; z \\<le> x ; z \\<cdot> y ; z", "by (metis mult_subdistr_var)"], ["proof (state)\nthis:\n  (x \\<cdot> y) ; z \\<le> x ; z \\<cdot> y ; z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma maddux_35: \"is_test x \\<Longrightarrow> x ; y \\<cdot> -z = x ; y \\<cdot> -(x ; z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> x ; y \\<cdot> - z = x ; y \\<cdot> - (x ; z)", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_test x \\<Longrightarrow>\n    x ; y \\<cdot> - z \\<le> x ; y \\<cdot> - (x ; z)\n 2. is_test x \\<Longrightarrow>\n    x ; y \\<cdot> - (x ; z) \\<le> x ; y \\<cdot> - z", "assume \"is_test x\""], ["proof (state)\nthis:\n  is_test x\n\ngoal (2 subgoals):\n 1. is_test x \\<Longrightarrow>\n    x ; y \\<cdot> - z \\<le> x ; y \\<cdot> - (x ; z)\n 2. is_test x \\<Longrightarrow>\n    x ; y \\<cdot> - (x ; z) \\<le> x ; y \\<cdot> - z", "show \"x ; y \\<cdot> -z \\<le> x ; y \\<cdot> -(x ; z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ; y \\<cdot> - z \\<le> x ; y \\<cdot> - (x ; z)", "by (metis \\<open>is_test x\\<close> comp_anti mult_isor mult_onel is_test_def inf.commute inf_le2 le_infI le_infI1)"], ["proof (state)\nthis:\n  x ; y \\<cdot> - z \\<le> x ; y \\<cdot> - (x ; z)\n\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow>\n    x ; y \\<cdot> - (x ; z) \\<le> x ; y \\<cdot> - z", "have one: \"x ; y \\<cdot> -(x ; z) \\<le> x ; (y \\<cdot> -z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ; y \\<cdot> - (x ; z) \\<le> x ; (y \\<cdot> - z)", "by (metis eq_iff le_infE maddux_23)"], ["proof (state)\nthis:\n  x ; y \\<cdot> - (x ; z) \\<le> x ; (y \\<cdot> - z)\n\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow>\n    x ; y \\<cdot> - (x ; z) \\<le> x ; y \\<cdot> - z", "hence two: \"x ; y \\<cdot> -(x ; z) \\<le> x ; y\""], ["proof (prove)\nusing this:\n  x ; y \\<cdot> - (x ; z) \\<le> x ; (y \\<cdot> - z)\n\ngoal (1 subgoal):\n 1. x ; y \\<cdot> - (x ; z) \\<le> x ; y", "by (metis inf_le1)"], ["proof (state)\nthis:\n  x ; y \\<cdot> - (x ; z) \\<le> x ; y\n\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow>\n    x ; y \\<cdot> - (x ; z) \\<le> x ; y \\<cdot> - z", "have \"x ; y \\<cdot> -(x ; z) \\<le>  x ; -z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ; y \\<cdot> - (x ; z) \\<le> x ; - z", "using one"], ["proof (prove)\nusing this:\n  x ; y \\<cdot> - (x ; z) \\<le> x ; (y \\<cdot> - z)\n\ngoal (1 subgoal):\n 1. x ; y \\<cdot> - (x ; z) \\<le> x ; - z", "by (metis galois_1 le_iff_sup distrib_left sup_compl_top sup_top_right)"], ["proof (state)\nthis:\n  x ; y \\<cdot> - (x ; z) \\<le> x ; - z\n\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow>\n    x ; y \\<cdot> - (x ; z) \\<le> x ; y \\<cdot> - z", "hence \"x ; y \\<cdot> -(x ; z) \\<le> -z\""], ["proof (prove)\nusing this:\n  x ; y \\<cdot> - (x ; z) \\<le> x ; - z\n\ngoal (1 subgoal):\n 1. x ; y \\<cdot> - (x ; z) \\<le> - z", "by (metis \\<open>is_test x\\<close> mult_isor mult_onel is_test_def order_trans)"], ["proof (state)\nthis:\n  x ; y \\<cdot> - (x ; z) \\<le> - z\n\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow>\n    x ; y \\<cdot> - (x ; z) \\<le> x ; y \\<cdot> - z", "thus \"x ; y \\<cdot> -(x ; z) \\<le> x ; y \\<cdot> -z\""], ["proof (prove)\nusing this:\n  x ; y \\<cdot> - (x ; z) \\<le> - z\n\ngoal (1 subgoal):\n 1. x ; y \\<cdot> - (x ; z) \\<le> x ; y \\<cdot> - z", "using two"], ["proof (prove)\nusing this:\n  x ; y \\<cdot> - (x ; z) \\<le> - z\n  x ; y \\<cdot> - (x ; z) \\<le> x ; y\n\ngoal (1 subgoal):\n 1. x ; y \\<cdot> - (x ; z) \\<le> x ; y \\<cdot> - z", "by (metis le_inf_iff)"], ["proof (state)\nthis:\n  x ; y \\<cdot> - (x ; z) \\<le> x ; y \\<cdot> - z\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Test Complements\\<close>"], ["", "text \\<open>Text complements are complements of elements that are ``pushed below''\nthe multiplicative unit.\\<close>"], ["", "definition tc :: \"'a \\<Rightarrow> 'a\" \n  where \"tc x = 1' \\<cdot> -x\""], ["", "lemma test_compl_1 [simp]: \"is_test x \\<Longrightarrow> x + tc x = 1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> x + tc x = 1'", "by (metis is_test_def local.aux4 local.inf.absorb_iff1 local.inf_commute tc_def)"], ["", "lemma test_compl_2 [simp]: \"is_test x \\<Longrightarrow> x \\<cdot> tc x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> x \\<cdot> tc x = 0", "by (metis galois_aux inf.commute inf_le2 tc_def)"], ["", "lemma test_test_compl: \"is_test x \\<Longrightarrow> is_test (tc x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> is_test (tc x)", "by (simp add: is_test_def tc_def)"], ["", "lemma test_compl_de_morgan_1: \"tc (x + y) = tc x \\<cdot> tc y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tc (x + y) = tc x \\<cdot> tc y", "by (metis compl_sup inf.left_commute inf.left_idem meet_assoc tc_def)"], ["", "lemma test_compl_de_morgan_2: \"tc (x \\<cdot> y) = tc x + tc y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tc (x \\<cdot> y) = tc x + tc y", "by (metis compl_inf inf_sup_distrib1 tc_def)"], ["", "lemma test_compl_three [simp]: \"tc (tc (tc x)) = tc x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tc (tc (tc x)) = tc x", "by (metis aux4 aux6 de_morgan_3 inf.commute inf_sup_absorb tc_def)"], ["", "lemma test_compl_double [simp]: \"is_test x \\<Longrightarrow> tc (tc x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_test x \\<Longrightarrow> tc (tc x) = x", "by (metis aux6_var compl_inf double_compl inf.commute le_iff_inf tc_def is_test_def)"], ["", "end"], ["", "(* relation_algebra *)"], ["", "end"]]}