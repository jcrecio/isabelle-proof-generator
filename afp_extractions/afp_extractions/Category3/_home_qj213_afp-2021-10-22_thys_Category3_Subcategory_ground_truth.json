{"file_name": "/home/qj213/afp-2021-10-22/thys/Category3/Subcategory.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Category3", "problem_names": ["lemma null_char [simp]:\n    shows \"null = C.null\"", "lemma ideI:\n    assumes \"Arr a\" and \"C.ide a\"\n    shows \"ide a\"", "lemma Arr_iff_dom_in_domain:\n    shows \"Arr f \\<longleftrightarrow> C.dom f \\<in> domains f\"", "lemma Arr_iff_cod_in_codomain:\n    shows \"Arr f \\<longleftrightarrow> C.cod f \\<in> codomains f\"", "lemma arr_char:\n    shows \"arr f \\<longleftrightarrow> Arr f\"", "lemma arrI [intro]:\n    assumes \"Arr f\"\n    shows \"arr f\"", "lemma arrE [elim]:\n    assumes \"arr f\"\n    shows \"Arr f\"", "theorem is_category:\n    shows \"category comp\"", "lemma dom_simp:\n    assumes \"arr f\"\n    shows \"dom f = C.dom f\"", "lemma dom_char:\n    shows \"dom f = (if arr f then C.dom f else C.null)\"", "lemma cod_simp:\n    assumes \"arr f\"\n    shows \"cod f = C.cod f\"", "lemma cod_char:\n    shows \"cod f = (if arr f then C.cod f else C.null)\"", "lemma in_hom_char:\n    shows \"\\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> \\<longleftrightarrow> arr a \\<and> arr b \\<and> arr f \\<and> \\<guillemotleft>f : a \\<rightarrow>\\<^sub>C b\\<guillemotright>\"", "lemma ide_char:\n    shows \"ide a \\<longleftrightarrow> arr a \\<and> C.ide a\"", "lemma seq_char:\n    shows \"seq g f \\<longleftrightarrow> arr f \\<and> arr g \\<and> C.seq g f\"", "lemma hom_char:\n    shows \"hom a b = C.hom a b \\<inter> Collect Arr\"", "lemma comp_char:\n    shows \"g \\<cdot> f = (if arr f \\<and> arr g \\<and> C.seq g f then g \\<cdot>\\<^sub>C f else C.null)\"", "lemma comp_simp:\n    assumes \"seq g f\"\n    shows \"g \\<cdot> f = g \\<cdot>\\<^sub>C f\"", "lemma inclusion_preserves_inverse:\n    assumes \"inverse_arrows f g\"\n    shows \"C.inverse_arrows f g\"", "lemma iso_char:\n    shows \"iso f \\<longleftrightarrow> C.iso f \\<and> arr f \\<and> arr (C.inv f)\"", "lemma inv_char:\n    assumes \"iso f\"\n    shows \"inv f = C.inv f\"", "lemma iso_char:\n    shows \"iso f \\<longleftrightarrow> arr f \\<and> C.iso f\"", "lemma is_functor:\n    shows \"functor S.comp C S.map\"", "lemma is_faithful_functor:\n    shows \"faithful_functor S.comp C S.map\"", "lemma is_embedding_functor:\n    shows \"embedding_functor S.comp C S.map\"", "lemma is_full_functor:\n    shows \"full_functor S.comp C S.map\""], "translations": [["", "lemma null_char [simp]:\n    shows \"null = C.null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. null = C.null", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. null = C.null", "have \"\\<forall>f. C.null \\<cdot> f = C.null \\<and> f \\<cdot> C.null = C.null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f. C.null \\<cdot> f = C.null \\<and> f \\<cdot> C.null = C.null", "by (metis C.comp_null(1) C.ex_un_null comp_def)"], ["proof (state)\nthis:\n  \\<forall>f. C.null \\<cdot> f = C.null \\<and> f \\<cdot> C.null = C.null\n\ngoal (1 subgoal):\n 1. null = C.null", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>f. C.null \\<cdot> f = C.null \\<and> f \\<cdot> C.null = C.null\n\ngoal (1 subgoal):\n 1. null = C.null", "using ex_un_null"], ["proof (prove)\nusing this:\n  \\<forall>f. C.null \\<cdot> f = C.null \\<and> f \\<cdot> C.null = C.null\n  \\<exists>!n. \\<forall>f. n \\<cdot> f = n \\<and> f \\<cdot> n = n\n\ngoal (1 subgoal):\n 1. null = C.null", "by (metis comp_null(2))"], ["proof (state)\nthis:\n  null = C.null\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ideI:\n    assumes \"Arr a\" and \"C.ide a\"\n    shows \"ide a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide a", "unfolding ide_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot> a \\<noteq> null \\<and>\n    (\\<forall>f.\n        (f \\<cdot> a \\<noteq> null \\<longrightarrow> f \\<cdot> a = f) \\<and>\n        (a \\<cdot> f \\<noteq> null \\<longrightarrow> a \\<cdot> f = f))", "using assms null_char C.ide_def comp_def"], ["proof (prove)\nusing this:\n  Arr a\n  C.ide a\n  null = C.null\n  C.ide ?a \\<equiv>\n  ?a \\<cdot>\\<^sub>C ?a \\<noteq> C.null \\<and>\n  (\\<forall>f.\n      (f \\<cdot>\\<^sub>C ?a \\<noteq> C.null \\<longrightarrow>\n       f \\<cdot>\\<^sub>C ?a = f) \\<and>\n      (?a \\<cdot>\\<^sub>C f \\<noteq> C.null \\<longrightarrow>\n       ?a \\<cdot>\\<^sub>C f = f))\n  ?g \\<cdot> ?f =\n  (if Arr ?f \\<and> Arr ?g \\<and> C.cod ?f = C.dom ?g\n   then ?g \\<cdot>\\<^sub>C ?f else C.null)\n\ngoal (1 subgoal):\n 1. a \\<cdot> a \\<noteq> null \\<and>\n    (\\<forall>f.\n        (f \\<cdot> a \\<noteq> null \\<longrightarrow> f \\<cdot> a = f) \\<and>\n        (a \\<cdot> f \\<noteq> null \\<longrightarrow> a \\<cdot> f = f))", "by auto"], ["", "lemma Arr_iff_dom_in_domain:\n    shows \"Arr f \\<longleftrightarrow> C.dom f \\<in> domains f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Arr f = (C.dom f \\<in> domains f)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Arr f \\<Longrightarrow> C.dom f \\<in> domains f\n 2. C.dom f \\<in> domains f \\<Longrightarrow> Arr f", "show \"C.dom f \\<in> domains f \\<Longrightarrow> Arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.dom f \\<in> domains f \\<Longrightarrow> Arr f", "using domains_def comp_def ide_def"], ["proof (prove)\nusing this:\n  domains ?f \\<equiv> {a. ide a \\<and> ?f \\<cdot> a \\<noteq> null}\n  ?g \\<cdot> ?f =\n  (if Arr ?f \\<and> Arr ?g \\<and> C.cod ?f = C.dom ?g\n   then ?g \\<cdot>\\<^sub>C ?f else C.null)\n  ide ?a \\<equiv>\n  ?a \\<cdot> ?a \\<noteq> null \\<and>\n  (\\<forall>f.\n      (f \\<cdot> ?a \\<noteq> null \\<longrightarrow> f \\<cdot> ?a = f) \\<and>\n      (?a \\<cdot> f \\<noteq> null \\<longrightarrow> ?a \\<cdot> f = f))\n\ngoal (1 subgoal):\n 1. C.dom f \\<in> domains f \\<Longrightarrow> Arr f", "by fastforce"], ["proof (state)\nthis:\n  C.dom f \\<in> domains f \\<Longrightarrow> Arr f\n\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> C.dom f \\<in> domains f", "show \"Arr f \\<Longrightarrow> C.dom f \\<in> domains f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> C.dom f \\<in> domains f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> C.dom f \\<in> domains f", "assume f: \"Arr f\""], ["proof (state)\nthis:\n  Arr f\n\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> C.dom f \\<in> domains f", "have \"ide (C.dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide (C.dom f)", "using f inclusion C.dom_in_domains C.has_domain_iff_arr C.domains_def\n                dom_closed ideI"], ["proof (prove)\nusing this:\n  Arr f\n  Arr ?f \\<Longrightarrow> C.arr ?f\n  C.domains ?f \\<noteq> {} \\<Longrightarrow> C.dom ?f \\<in> C.domains ?f\n  (C.domains ?f \\<noteq> {}) = C.arr ?f\n  C.domains ?f \\<equiv>\n  {a. C.ide a \\<and> ?f \\<cdot>\\<^sub>C a \\<noteq> C.null}\n  Arr ?f \\<Longrightarrow> Arr (C.dom ?f)\n  \\<lbrakk>Arr ?a; C.ide ?a\\<rbrakk> \\<Longrightarrow> ide ?a\n\ngoal (1 subgoal):\n 1. ide (C.dom f)", "by auto"], ["proof (state)\nthis:\n  ide (C.dom f)\n\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> C.dom f \\<in> domains f", "moreover"], ["proof (state)\nthis:\n  ide (C.dom f)\n\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> C.dom f \\<in> domains f", "have \"f \\<cdot> C.dom f \\<noteq> null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> C.dom f \\<noteq> null", "using f comp_def dom_closed null_char inclusion C.comp_arr_dom"], ["proof (prove)\nusing this:\n  Arr f\n  ?g \\<cdot> ?f =\n  (if Arr ?f \\<and> Arr ?g \\<and> C.cod ?f = C.dom ?g\n   then ?g \\<cdot>\\<^sub>C ?f else C.null)\n  Arr ?f \\<Longrightarrow> Arr (C.dom ?f)\n  null = C.null\n  Arr ?f \\<Longrightarrow> C.arr ?f\n  \\<lbrakk>C.arr ?f; C.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>C ?a = ?f\n\ngoal (1 subgoal):\n 1. f \\<cdot> C.dom f \\<noteq> null", "by force"], ["proof (state)\nthis:\n  f \\<cdot> C.dom f \\<noteq> null\n\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> C.dom f \\<in> domains f", "ultimately"], ["proof (chain)\npicking this:\n  ide (C.dom f)\n  f \\<cdot> C.dom f \\<noteq> null", "show ?thesis"], ["proof (prove)\nusing this:\n  ide (C.dom f)\n  f \\<cdot> C.dom f \\<noteq> null\n\ngoal (1 subgoal):\n 1. C.dom f \\<in> domains f", "using domains_def"], ["proof (prove)\nusing this:\n  ide (C.dom f)\n  f \\<cdot> C.dom f \\<noteq> null\n  domains ?f \\<equiv> {a. ide a \\<and> ?f \\<cdot> a \\<noteq> null}\n\ngoal (1 subgoal):\n 1. C.dom f \\<in> domains f", "by simp"], ["proof (state)\nthis:\n  C.dom f \\<in> domains f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Arr f \\<Longrightarrow> C.dom f \\<in> domains f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Arr_iff_cod_in_codomain:\n    shows \"Arr f \\<longleftrightarrow> C.cod f \\<in> codomains f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Arr f = (C.cod f \\<in> codomains f)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Arr f \\<Longrightarrow> C.cod f \\<in> codomains f\n 2. C.cod f \\<in> codomains f \\<Longrightarrow> Arr f", "show \"C.cod f \\<in> codomains f \\<Longrightarrow> Arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.cod f \\<in> codomains f \\<Longrightarrow> Arr f", "using codomains_def comp_def ide_def"], ["proof (prove)\nusing this:\n  codomains ?f \\<equiv> {b. ide b \\<and> b \\<cdot> ?f \\<noteq> null}\n  ?g \\<cdot> ?f =\n  (if Arr ?f \\<and> Arr ?g \\<and> C.cod ?f = C.dom ?g\n   then ?g \\<cdot>\\<^sub>C ?f else C.null)\n  ide ?a \\<equiv>\n  ?a \\<cdot> ?a \\<noteq> null \\<and>\n  (\\<forall>f.\n      (f \\<cdot> ?a \\<noteq> null \\<longrightarrow> f \\<cdot> ?a = f) \\<and>\n      (?a \\<cdot> f \\<noteq> null \\<longrightarrow> ?a \\<cdot> f = f))\n\ngoal (1 subgoal):\n 1. C.cod f \\<in> codomains f \\<Longrightarrow> Arr f", "by fastforce"], ["proof (state)\nthis:\n  C.cod f \\<in> codomains f \\<Longrightarrow> Arr f\n\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> C.cod f \\<in> codomains f", "show \"Arr f \\<Longrightarrow> C.cod f \\<in> codomains f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> C.cod f \\<in> codomains f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> C.cod f \\<in> codomains f", "assume f: \"Arr f\""], ["proof (state)\nthis:\n  Arr f\n\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> C.cod f \\<in> codomains f", "have \"ide (C.cod f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide (C.cod f)", "using f inclusion C.cod_in_codomains C.has_codomain_iff_arr C.codomains_def\n                cod_closed ideI"], ["proof (prove)\nusing this:\n  Arr f\n  Arr ?f \\<Longrightarrow> C.arr ?f\n  C.codomains ?f \\<noteq> {} \\<Longrightarrow> C.cod ?f \\<in> C.codomains ?f\n  (C.codomains ?f \\<noteq> {}) = C.arr ?f\n  C.codomains ?f \\<equiv>\n  {b. C.ide b \\<and> b \\<cdot>\\<^sub>C ?f \\<noteq> C.null}\n  Arr ?f \\<Longrightarrow> Arr (C.cod ?f)\n  \\<lbrakk>Arr ?a; C.ide ?a\\<rbrakk> \\<Longrightarrow> ide ?a\n\ngoal (1 subgoal):\n 1. ide (C.cod f)", "by auto"], ["proof (state)\nthis:\n  ide (C.cod f)\n\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> C.cod f \\<in> codomains f", "moreover"], ["proof (state)\nthis:\n  ide (C.cod f)\n\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> C.cod f \\<in> codomains f", "have \"C.cod f \\<cdot> f \\<noteq> null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.cod f \\<cdot> f \\<noteq> null", "using f comp_def cod_closed null_char inclusion C.comp_cod_arr"], ["proof (prove)\nusing this:\n  Arr f\n  ?g \\<cdot> ?f =\n  (if Arr ?f \\<and> Arr ?g \\<and> C.cod ?f = C.dom ?g\n   then ?g \\<cdot>\\<^sub>C ?f else C.null)\n  Arr ?f \\<Longrightarrow> Arr (C.cod ?f)\n  null = C.null\n  Arr ?f \\<Longrightarrow> C.arr ?f\n  \\<lbrakk>C.arr ?f; C.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>C ?f = ?f\n\ngoal (1 subgoal):\n 1. C.cod f \\<cdot> f \\<noteq> null", "by force"], ["proof (state)\nthis:\n  C.cod f \\<cdot> f \\<noteq> null\n\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> C.cod f \\<in> codomains f", "ultimately"], ["proof (chain)\npicking this:\n  ide (C.cod f)\n  C.cod f \\<cdot> f \\<noteq> null", "show ?thesis"], ["proof (prove)\nusing this:\n  ide (C.cod f)\n  C.cod f \\<cdot> f \\<noteq> null\n\ngoal (1 subgoal):\n 1. C.cod f \\<in> codomains f", "using codomains_def"], ["proof (prove)\nusing this:\n  ide (C.cod f)\n  C.cod f \\<cdot> f \\<noteq> null\n  codomains ?f \\<equiv> {b. ide b \\<and> b \\<cdot> ?f \\<noteq> null}\n\ngoal (1 subgoal):\n 1. C.cod f \\<in> codomains f", "by simp"], ["proof (state)\nthis:\n  C.cod f \\<in> codomains f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Arr f \\<Longrightarrow> C.cod f \\<in> codomains f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma arr_char:\n    shows \"arr f \\<longleftrightarrow> Arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f = Arr f", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. arr f \\<Longrightarrow> Arr f\n 2. Arr f \\<Longrightarrow> arr f", "show \"Arr f \\<Longrightarrow> arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> arr f", "using arr_def comp_def Arr_iff_dom_in_domain Arr_iff_cod_in_codomain"], ["proof (prove)\nusing this:\n  arr ?f \\<equiv> domains ?f \\<noteq> {} \\<or> codomains ?f \\<noteq> {}\n  ?g \\<cdot> ?f =\n  (if Arr ?f \\<and> Arr ?g \\<and> C.cod ?f = C.dom ?g\n   then ?g \\<cdot>\\<^sub>C ?f else C.null)\n  Arr ?f = (C.dom ?f \\<in> domains ?f)\n  Arr ?f = (C.cod ?f \\<in> codomains ?f)\n\ngoal (1 subgoal):\n 1. Arr f \\<Longrightarrow> arr f", "by auto"], ["proof (state)\nthis:\n  Arr f \\<Longrightarrow> arr f\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow> Arr f", "show \"arr f \\<Longrightarrow> Arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow> Arr f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow> Arr f", "assume f: \"arr f\""], ["proof (state)\nthis:\n  arr f\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow> Arr f", "obtain a where a: \"a \\<in> domains f \\<or> a \\<in> codomains f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a \\<in> domains f \\<or> a \\<in> codomains f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using f arr_def"], ["proof (prove)\nusing this:\n  arr f\n  arr ?f \\<equiv> domains ?f \\<noteq> {} \\<or> codomains ?f \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a \\<in> domains f \\<or> a \\<in> codomains f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a \\<in> domains f \\<or> a \\<in> codomains f\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow> Arr f", "have \"f \\<cdot> a \\<noteq> C.null \\<or> a \\<cdot> f \\<noteq> C.null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> a \\<noteq> C.null \\<or> a \\<cdot> f \\<noteq> C.null", "using a domains_def codomains_def null_char"], ["proof (prove)\nusing this:\n  a \\<in> domains f \\<or> a \\<in> codomains f\n  domains ?f \\<equiv> {a. ide a \\<and> ?f \\<cdot> a \\<noteq> null}\n  codomains ?f \\<equiv> {b. ide b \\<and> b \\<cdot> ?f \\<noteq> null}\n  null = C.null\n\ngoal (1 subgoal):\n 1. f \\<cdot> a \\<noteq> C.null \\<or> a \\<cdot> f \\<noteq> C.null", "by auto"], ["proof (state)\nthis:\n  f \\<cdot> a \\<noteq> C.null \\<or> a \\<cdot> f \\<noteq> C.null\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow> Arr f", "thus \"Arr f\""], ["proof (prove)\nusing this:\n  f \\<cdot> a \\<noteq> C.null \\<or> a \\<cdot> f \\<noteq> C.null\n\ngoal (1 subgoal):\n 1. Arr f", "using comp_def"], ["proof (prove)\nusing this:\n  f \\<cdot> a \\<noteq> C.null \\<or> a \\<cdot> f \\<noteq> C.null\n  ?g \\<cdot> ?f =\n  (if Arr ?f \\<and> Arr ?g \\<and> C.cod ?f = C.dom ?g\n   then ?g \\<cdot>\\<^sub>C ?f else C.null)\n\ngoal (1 subgoal):\n 1. Arr f", "by metis"], ["proof (state)\nthis:\n  Arr f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  arr f \\<Longrightarrow> Arr f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma arrI [intro]:\n    assumes \"Arr f\"\n    shows \"arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f", "using assms arr_char"], ["proof (prove)\nusing this:\n  Arr f\n  arr ?f = Arr ?f\n\ngoal (1 subgoal):\n 1. arr f", "by simp"], ["", "lemma arrE [elim]:\n    assumes \"arr f\"\n    shows \"Arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Arr f", "using assms arr_char"], ["proof (prove)\nusing this:\n  arr f\n  arr ?f = Arr ?f\n\ngoal (1 subgoal):\n 1. Arr f", "by simp"], ["", "interpretation category comp"], ["proof (prove)\ngoal (1 subgoal):\n 1. category (\\<cdot>)", "using comp_def null_char inclusion comp_closed dom_closed cod_closed"], ["proof (prove)\nusing this:\n  ?g \\<cdot> ?f =\n  (if Arr ?f \\<and> Arr ?g \\<and> C.cod ?f = C.dom ?g\n   then ?g \\<cdot>\\<^sub>C ?f else C.null)\n  null = C.null\n  Arr ?f \\<Longrightarrow> C.arr ?f\n  \\<lbrakk>Arr ?f; Arr ?g; C.cod ?f = C.dom ?g\\<rbrakk>\n  \\<Longrightarrow> Arr (?g \\<cdot>\\<^sub>C ?f)\n  Arr ?f \\<Longrightarrow> Arr (C.dom ?f)\n  Arr ?f \\<Longrightarrow> Arr (C.cod ?f)\n\ngoal (1 subgoal):\n 1. category (\\<cdot>)", "apply unfold_locales"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f);\n        g \\<cdot> f \\<noteq> null\\<rbrakk>\n       \\<Longrightarrow> seq g f\n 2. \\<And>f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f)\\<rbrakk>\n       \\<Longrightarrow> (domains f \\<noteq> {}) = (codomains f \\<noteq> {})\n 3. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h g;\n        seq (h \\<cdot> g) f\\<rbrakk>\n       \\<Longrightarrow> seq g f\n 4. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h (g \\<cdot> f);\n        seq g f\\<rbrakk>\n       \\<Longrightarrow> seq h g\n 5. \\<And>g f h.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq g f;\n        seq h g\\<rbrakk>\n       \\<Longrightarrow> seq (h \\<cdot> g) f\n 6. \\<And>g f h.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq g f;\n        seq h g\\<rbrakk>\n       \\<Longrightarrow> (h \\<cdot> g) \\<cdot> f = h \\<cdot> g \\<cdot> f", "apply auto[1]"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f)\\<rbrakk>\n       \\<Longrightarrow> (domains f \\<noteq> {}) = (codomains f \\<noteq> {})\n 2. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h g;\n        seq (h \\<cdot> g) f\\<rbrakk>\n       \\<Longrightarrow> seq g f\n 3. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h (g \\<cdot> f);\n        seq g f\\<rbrakk>\n       \\<Longrightarrow> seq h g\n 4. \\<And>g f h.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq g f;\n        seq h g\\<rbrakk>\n       \\<Longrightarrow> seq (h \\<cdot> g) f\n 5. \\<And>g f h.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq g f;\n        seq h g\\<rbrakk>\n       \\<Longrightarrow> (h \\<cdot> g) \\<cdot> f = h \\<cdot> g \\<cdot> f", "apply (metis Arr_iff_dom_in_domain Arr_iff_cod_in_codomain arr_char arr_def emptyE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h g;\n        seq (h \\<cdot> g) f\\<rbrakk>\n       \\<Longrightarrow> seq g f\n 2. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h (g \\<cdot> f);\n        seq g f\\<rbrakk>\n       \\<Longrightarrow> seq h g\n 3. \\<And>g f h.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq g f;\n        seq h g\\<rbrakk>\n       \\<Longrightarrow> seq (h \\<cdot> g) f\n 4. \\<And>g f h.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq g f;\n        seq h g\\<rbrakk>\n       \\<Longrightarrow> (h \\<cdot> g) \\<cdot> f = h \\<cdot> g \\<cdot> f", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h g;\n        seq (h \\<cdot> g) f\\<rbrakk>\n       \\<Longrightarrow> seq g f\n 2. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h (g \\<cdot> f);\n        seq g f\\<rbrakk>\n       \\<Longrightarrow> seq h g\n 3. \\<And>g f h.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq g f;\n        seq h g\\<rbrakk>\n       \\<Longrightarrow> seq (h \\<cdot> g) f\n 4. \\<And>g f h.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq g f;\n        seq h g\\<rbrakk>\n       \\<Longrightarrow> (h \\<cdot> g) \\<cdot> f = h \\<cdot> g \\<cdot> f", "fix f g h"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h g;\n        seq (h \\<cdot> g) f\\<rbrakk>\n       \\<Longrightarrow> seq g f\n 2. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h (g \\<cdot> f);\n        seq g f\\<rbrakk>\n       \\<Longrightarrow> seq h g\n 3. \\<And>g f h.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq g f;\n        seq h g\\<rbrakk>\n       \\<Longrightarrow> seq (h \\<cdot> g) f\n 4. \\<And>g f h.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq g f;\n        seq h g\\<rbrakk>\n       \\<Longrightarrow> (h \\<cdot> g) \\<cdot> f = h \\<cdot> g \\<cdot> f", "assume gf: \"seq g f\" and hg: \"seq h g\""], ["proof (state)\nthis:\n  seq g f\n  seq h g\n\ngoal (4 subgoals):\n 1. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h g;\n        seq (h \\<cdot> g) f\\<rbrakk>\n       \\<Longrightarrow> seq g f\n 2. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h (g \\<cdot> f);\n        seq g f\\<rbrakk>\n       \\<Longrightarrow> seq h g\n 3. \\<And>g f h.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq g f;\n        seq h g\\<rbrakk>\n       \\<Longrightarrow> seq (h \\<cdot> g) f\n 4. \\<And>g f h.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq g f;\n        seq h g\\<rbrakk>\n       \\<Longrightarrow> (h \\<cdot> g) \\<cdot> f = h \\<cdot> g \\<cdot> f", "show 1: \"seq (h \\<cdot> g) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq (h \\<cdot> g) f", "using gf hg inclusion comp_closed comp_def"], ["proof (prove)\nusing this:\n  seq g f\n  seq h g\n  Arr ?f \\<Longrightarrow> C.arr ?f\n  \\<lbrakk>Arr ?f; Arr ?g; C.cod ?f = C.dom ?g\\<rbrakk>\n  \\<Longrightarrow> Arr (?g \\<cdot>\\<^sub>C ?f)\n  ?g \\<cdot> ?f =\n  (if Arr ?f \\<and> Arr ?g \\<and> C.cod ?f = C.dom ?g\n   then ?g \\<cdot>\\<^sub>C ?f else C.null)\n\ngoal (1 subgoal):\n 1. seq (h \\<cdot> g) f", "by auto"], ["proof (state)\nthis:\n  seq (h \\<cdot> g) f\n\ngoal (3 subgoals):\n 1. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h g;\n        seq (h \\<cdot> g) f\\<rbrakk>\n       \\<Longrightarrow> seq g f\n 2. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h (g \\<cdot> f);\n        seq g f\\<rbrakk>\n       \\<Longrightarrow> seq h g\n 3. \\<And>g f h.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq g f;\n        seq h g\\<rbrakk>\n       \\<Longrightarrow> (h \\<cdot> g) \\<cdot> f = h \\<cdot> g \\<cdot> f", "show \"(h \\<cdot> g) \\<cdot> f = h \\<cdot> g \\<cdot> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (h \\<cdot> g) \\<cdot> f = h \\<cdot> g \\<cdot> f", "using gf hg 1 C.not_arr_null inclusion comp_def arr_char"], ["proof (prove)\nusing this:\n  seq g f\n  seq h g\n  seq (h \\<cdot> g) f\n  \\<not> C.arr C.null\n  Arr ?f \\<Longrightarrow> C.arr ?f\n  ?g \\<cdot> ?f =\n  (if Arr ?f \\<and> Arr ?g \\<and> C.cod ?f = C.dom ?g\n   then ?g \\<cdot>\\<^sub>C ?f else C.null)\n  arr ?f = Arr ?f\n\ngoal (1 subgoal):\n 1. (h \\<cdot> g) \\<cdot> f = h \\<cdot> g \\<cdot> f", "by (metis (full_types) C.cod_comp C.comp_assoc)"], ["proof (state)\nthis:\n  (h \\<cdot> g) \\<cdot> f = h \\<cdot> g \\<cdot> f\n\ngoal (2 subgoals):\n 1. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h g;\n        seq (h \\<cdot> g) f\\<rbrakk>\n       \\<Longrightarrow> seq g f\n 2. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h (g \\<cdot> f);\n        seq g f\\<rbrakk>\n       \\<Longrightarrow> seq h g", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h g;\n        seq (h \\<cdot> g) f\\<rbrakk>\n       \\<Longrightarrow> seq g f\n 2. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h (g \\<cdot> f);\n        seq g f\\<rbrakk>\n       \\<Longrightarrow> seq h g", "fix f g h"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h g;\n        seq (h \\<cdot> g) f\\<rbrakk>\n       \\<Longrightarrow> seq g f\n 2. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h (g \\<cdot> f);\n        seq g f\\<rbrakk>\n       \\<Longrightarrow> seq h g", "assume hg: \"seq h g\" and hgf: \"seq (h \\<cdot> g) f\""], ["proof (state)\nthis:\n  seq h g\n  seq (h \\<cdot> g) f\n\ngoal (2 subgoals):\n 1. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h g;\n        seq (h \\<cdot> g) f\\<rbrakk>\n       \\<Longrightarrow> seq g f\n 2. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h (g \\<cdot> f);\n        seq g f\\<rbrakk>\n       \\<Longrightarrow> seq h g", "show \"seq g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq g f", "using hg hgf comp_def null_char inclusion arr_char comp_closed"], ["proof (prove)\nusing this:\n  seq h g\n  seq (h \\<cdot> g) f\n  ?g \\<cdot> ?f =\n  (if Arr ?f \\<and> Arr ?g \\<and> C.cod ?f = C.dom ?g\n   then ?g \\<cdot>\\<^sub>C ?f else C.null)\n  null = C.null\n  Arr ?f \\<Longrightarrow> C.arr ?f\n  arr ?f = Arr ?f\n  \\<lbrakk>Arr ?f; Arr ?g; C.cod ?f = C.dom ?g\\<rbrakk>\n  \\<Longrightarrow> Arr (?g \\<cdot>\\<^sub>C ?f)\n\ngoal (1 subgoal):\n 1. seq g f", "by (metis (full_types) C.dom_comp)"], ["proof (state)\nthis:\n  seq g f\n\ngoal (1 subgoal):\n 1. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h (g \\<cdot> f);\n        seq g f\\<rbrakk>\n       \\<Longrightarrow> seq h g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h (g \\<cdot> f);\n        seq g f\\<rbrakk>\n       \\<Longrightarrow> seq h g", "fix f g h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h (g \\<cdot> f);\n        seq g f\\<rbrakk>\n       \\<Longrightarrow> seq h g", "assume hgf: \"seq h (g \\<cdot> f)\" and gf: \"seq g f\""], ["proof (state)\nthis:\n  seq h (g \\<cdot> f)\n  seq g f\n\ngoal (1 subgoal):\n 1. \\<And>h g f.\n       \\<lbrakk>\\<And>g f.\n                   g \\<cdot> f =\n                   (if Arr f \\<and> Arr g \\<and> C.cod f = C.dom g\n                    then g \\<cdot>\\<^sub>C f else C.null);\n        null = C.null; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (g \\<cdot>\\<^sub>C f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f); seq h (g \\<cdot> f);\n        seq g f\\<rbrakk>\n       \\<Longrightarrow> seq h g", "show \"seq h g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq h g", "using hgf gf comp_def null_char arr_char comp_closed"], ["proof (prove)\nusing this:\n  seq h (g \\<cdot> f)\n  seq g f\n  ?g \\<cdot> ?f =\n  (if Arr ?f \\<and> Arr ?g \\<and> C.cod ?f = C.dom ?g\n   then ?g \\<cdot>\\<^sub>C ?f else C.null)\n  null = C.null\n  arr ?f = Arr ?f\n  \\<lbrakk>Arr ?f; Arr ?g; C.cod ?f = C.dom ?g\\<rbrakk>\n  \\<Longrightarrow> Arr (?g \\<cdot>\\<^sub>C ?f)\n\ngoal (1 subgoal):\n 1. seq h g", "by (metis C.seqE C.ext C.match_2)"], ["proof (state)\nthis:\n  seq h g\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem is_category:\n    shows \"category comp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. category (\\<cdot>)", ".."], ["", "notation in_hom     (\"\\<guillemotleft>_ : _ \\<rightarrow> _\\<guillemotright>\")"], ["", "lemma dom_simp:\n    assumes \"arr f\"\n    shows \"dom f = C.dom f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.dom f = C.dom f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.dom f = C.dom f", "have \"ide (C.dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide (C.dom f)", "using assms ideI"], ["proof (prove)\nusing this:\n  arr f\n  \\<lbrakk>Arr ?a; C.ide ?a\\<rbrakk> \\<Longrightarrow> ide ?a\n\ngoal (1 subgoal):\n 1. ide (C.dom f)", "by (meson C.ide_dom arr_char dom_closed inclusion)"], ["proof (state)\nthis:\n  ide (C.dom f)\n\ngoal (1 subgoal):\n 1. local.dom f = C.dom f", "moreover"], ["proof (state)\nthis:\n  ide (C.dom f)\n\ngoal (1 subgoal):\n 1. local.dom f = C.dom f", "have \"f \\<cdot> C.dom f \\<noteq> null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> C.dom f \\<noteq> null", "using assms inclusion comp_def null_char dom_closed not_arr_null C.comp_arr_dom arr_char"], ["proof (prove)\nusing this:\n  arr f\n  Arr ?f \\<Longrightarrow> C.arr ?f\n  ?g \\<cdot> ?f =\n  (if Arr ?f \\<and> Arr ?g \\<and> C.cod ?f = C.dom ?g\n   then ?g \\<cdot>\\<^sub>C ?f else C.null)\n  null = C.null\n  Arr ?f \\<Longrightarrow> Arr (C.dom ?f)\n  \\<not> arr null\n  \\<lbrakk>C.arr ?f; C.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>C ?a = ?f\n  arr ?f = Arr ?f\n\ngoal (1 subgoal):\n 1. f \\<cdot> C.dom f \\<noteq> null", "by auto"], ["proof (state)\nthis:\n  f \\<cdot> C.dom f \\<noteq> null\n\ngoal (1 subgoal):\n 1. local.dom f = C.dom f", "ultimately"], ["proof (chain)\npicking this:\n  ide (C.dom f)\n  f \\<cdot> C.dom f \\<noteq> null", "show ?thesis"], ["proof (prove)\nusing this:\n  ide (C.dom f)\n  f \\<cdot> C.dom f \\<noteq> null\n\ngoal (1 subgoal):\n 1. local.dom f = C.dom f", "using dom_eqI ext"], ["proof (prove)\nusing this:\n  ide (C.dom f)\n  f \\<cdot> C.dom f \\<noteq> null\n  \\<lbrakk>ide ?a; seq ?f ?a\\<rbrakk> \\<Longrightarrow> local.dom ?f = ?a\n  ?g \\<cdot> ?f \\<noteq> null \\<Longrightarrow> seq ?g ?f\n\ngoal (1 subgoal):\n 1. local.dom f = C.dom f", "by blast"], ["proof (state)\nthis:\n  local.dom f = C.dom f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dom_char:\n    shows \"dom f = (if arr f then C.dom f else C.null)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.dom f = (if arr f then C.dom f else C.null)", "using dom_simp dom_def arr_def arr_char"], ["proof (prove)\nusing this:\n  arr ?f \\<Longrightarrow> local.dom ?f = C.dom ?f\n  local.dom ?f =\n  (if domains ?f \\<noteq> {} then SOME a. a \\<in> domains ?f else null)\n  arr ?f \\<equiv> domains ?f \\<noteq> {} \\<or> codomains ?f \\<noteq> {}\n  arr ?f = Arr ?f\n\ngoal (1 subgoal):\n 1. local.dom f = (if arr f then C.dom f else C.null)", "by auto"], ["", "lemma cod_simp:\n    assumes \"arr f\"\n    shows \"cod f = C.cod f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod f = C.cod f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cod f = C.cod f", "have \"ide (C.cod f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide (C.cod f)", "using assms ideI"], ["proof (prove)\nusing this:\n  arr f\n  \\<lbrakk>Arr ?a; C.ide ?a\\<rbrakk> \\<Longrightarrow> ide ?a\n\ngoal (1 subgoal):\n 1. ide (C.cod f)", "by (meson C.ide_cod arr_char cod_closed inclusion)"], ["proof (state)\nthis:\n  ide (C.cod f)\n\ngoal (1 subgoal):\n 1. cod f = C.cod f", "moreover"], ["proof (state)\nthis:\n  ide (C.cod f)\n\ngoal (1 subgoal):\n 1. cod f = C.cod f", "have \"C.cod f \\<cdot> f \\<noteq> null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.cod f \\<cdot> f \\<noteq> null", "using assms inclusion comp_def null_char cod_closed not_arr_null C.comp_cod_arr arr_char"], ["proof (prove)\nusing this:\n  arr f\n  Arr ?f \\<Longrightarrow> C.arr ?f\n  ?g \\<cdot> ?f =\n  (if Arr ?f \\<and> Arr ?g \\<and> C.cod ?f = C.dom ?g\n   then ?g \\<cdot>\\<^sub>C ?f else C.null)\n  null = C.null\n  Arr ?f \\<Longrightarrow> Arr (C.cod ?f)\n  \\<not> arr null\n  \\<lbrakk>C.arr ?f; C.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>C ?f = ?f\n  arr ?f = Arr ?f\n\ngoal (1 subgoal):\n 1. C.cod f \\<cdot> f \\<noteq> null", "by auto"], ["proof (state)\nthis:\n  C.cod f \\<cdot> f \\<noteq> null\n\ngoal (1 subgoal):\n 1. cod f = C.cod f", "ultimately"], ["proof (chain)\npicking this:\n  ide (C.cod f)\n  C.cod f \\<cdot> f \\<noteq> null", "show ?thesis"], ["proof (prove)\nusing this:\n  ide (C.cod f)\n  C.cod f \\<cdot> f \\<noteq> null\n\ngoal (1 subgoal):\n 1. cod f = C.cod f", "using cod_eqI ext"], ["proof (prove)\nusing this:\n  ide (C.cod f)\n  C.cod f \\<cdot> f \\<noteq> null\n  \\<lbrakk>ide ?b; seq ?b ?f\\<rbrakk> \\<Longrightarrow> cod ?f = ?b\n  ?g \\<cdot> ?f \\<noteq> null \\<Longrightarrow> seq ?g ?f\n\ngoal (1 subgoal):\n 1. cod f = C.cod f", "by blast"], ["proof (state)\nthis:\n  cod f = C.cod f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cod_char:\n    shows \"cod f = (if arr f then C.cod f else C.null)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod f = (if arr f then C.cod f else C.null)", "using cod_simp cod_def arr_def"], ["proof (prove)\nusing this:\n  arr ?f \\<Longrightarrow> cod ?f = C.cod ?f\n  cod ?f =\n  (if codomains ?f \\<noteq> {} then SOME b. b \\<in> codomains ?f else null)\n  arr ?f \\<equiv> domains ?f \\<noteq> {} \\<or> codomains ?f \\<noteq> {}\n\ngoal (1 subgoal):\n 1. cod f = (if arr f then C.cod f else C.null)", "by auto"], ["", "lemma in_hom_char:\n    shows \"\\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> \\<longleftrightarrow> arr a \\<and> arr b \\<and> arr f \\<and> \\<guillemotleft>f : a \\<rightarrow>\\<^sub>C b\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (arr a \\<and>\n     arr b \\<and>\n     arr f \\<and>\n     \\<guillemotleft>f : a \\<rightarrow>\\<^sub>C b\\<guillemotright>)", "using inclusion arr_char cod_closed dom_closed"], ["proof (prove)\nusing this:\n  Arr ?f \\<Longrightarrow> C.arr ?f\n  arr ?f = Arr ?f\n  Arr ?f \\<Longrightarrow> Arr (C.cod ?f)\n  Arr ?f \\<Longrightarrow> Arr (C.dom ?f)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (arr a \\<and>\n     arr b \\<and>\n     arr f \\<and>\n     \\<guillemotleft>f : a \\<rightarrow>\\<^sub>C b\\<guillemotright>)", "by (metis C.arr_iff_in_hom C.in_homE arr_iff_in_hom cod_simp dom_simp in_homE)"], ["", "lemma ide_char:\n    shows \"ide a \\<longleftrightarrow> arr a \\<and> C.ide a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide a = (arr a \\<and> C.ide a)", "using ide_in_hom C.ide_in_hom in_hom_char"], ["proof (prove)\nusing this:\n  ide ?a = \\<guillemotleft>?a : ?a \\<rightarrow> ?a\\<guillemotright>\n  C.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>C ?a\\<guillemotright>\n  \\<guillemotleft>?f : ?a \\<rightarrow> ?b\\<guillemotright> =\n  (arr ?a \\<and>\n   arr ?b \\<and>\n   arr ?f \\<and>\n   \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>C ?b\\<guillemotright>)\n\ngoal (1 subgoal):\n 1. ide a = (arr a \\<and> C.ide a)", "by simp"], ["", "lemma seq_char:\n    shows \"seq g f \\<longleftrightarrow> arr f \\<and> arr g \\<and> C.seq g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq g f = (arr f \\<and> arr g \\<and> C.seq g f)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. seq g f \\<Longrightarrow> arr f \\<and> arr g \\<and> C.seq g f\n 2. arr f \\<and> arr g \\<and> C.seq g f \\<Longrightarrow> seq g f", "show \"arr f \\<and> arr g \\<and> C.seq g f \\<Longrightarrow> seq g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f \\<and> arr g \\<and> C.seq g f \\<Longrightarrow> seq g f", "using arr_char dom_char cod_char"], ["proof (prove)\nusing this:\n  arr ?f = Arr ?f\n  local.dom ?f = (if arr ?f then C.dom ?f else C.null)\n  cod ?f = (if arr ?f then C.cod ?f else C.null)\n\ngoal (1 subgoal):\n 1. arr f \\<and> arr g \\<and> C.seq g f \\<Longrightarrow> seq g f", "by (intro seqI, auto)"], ["proof (state)\nthis:\n  arr f \\<and> arr g \\<and> C.seq g f \\<Longrightarrow> seq g f\n\ngoal (1 subgoal):\n 1. seq g f \\<Longrightarrow> arr f \\<and> arr g \\<and> C.seq g f", "show \"seq g f \\<Longrightarrow> arr f \\<and> arr g \\<and> C.seq g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq g f \\<Longrightarrow> arr f \\<and> arr g \\<and> C.seq g f", "apply (elim seqE, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>arr f; arr g; local.dom g = cod f\\<rbrakk>\n    \\<Longrightarrow> C.seq g f", "using inclusion arr_char dom_simp cod_simp"], ["proof (prove)\nusing this:\n  Arr ?f \\<Longrightarrow> C.arr ?f\n  arr ?f = Arr ?f\n  arr ?f \\<Longrightarrow> local.dom ?f = C.dom ?f\n  arr ?f \\<Longrightarrow> cod ?f = C.cod ?f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>arr f; arr g; local.dom g = cod f\\<rbrakk>\n    \\<Longrightarrow> C.seq g f", "by auto"], ["proof (state)\nthis:\n  seq g f \\<Longrightarrow> arr f \\<and> arr g \\<and> C.seq g f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hom_char:\n    shows \"hom a b = C.hom a b \\<inter> Collect Arr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom a b = C.hom a b \\<inter> Collect Arr", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. hom a b \\<subseteq> C.hom a b \\<inter> Collect Arr\n 2. C.hom a b \\<inter> Collect Arr \\<subseteq> hom a b", "show \"hom a b \\<subseteq> C.hom a b \\<inter> Collect Arr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom a b \\<subseteq> C.hom a b \\<inter> Collect Arr", "using in_hom_char"], ["proof (prove)\nusing this:\n  \\<guillemotleft>?f : ?a \\<rightarrow> ?b\\<guillemotright> =\n  (arr ?a \\<and>\n   arr ?b \\<and>\n   arr ?f \\<and>\n   \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>C ?b\\<guillemotright>)\n\ngoal (1 subgoal):\n 1. hom a b \\<subseteq> C.hom a b \\<inter> Collect Arr", "by auto"], ["proof (state)\nthis:\n  hom a b \\<subseteq> C.hom a b \\<inter> Collect Arr\n\ngoal (1 subgoal):\n 1. C.hom a b \\<inter> Collect Arr \\<subseteq> hom a b", "show \"C.hom a b \\<inter> Collect Arr \\<subseteq> hom a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.hom a b \\<inter> Collect Arr \\<subseteq> hom a b", "using arr_char dom_char cod_char"], ["proof (prove)\nusing this:\n  arr ?f = Arr ?f\n  local.dom ?f = (if arr ?f then C.dom ?f else C.null)\n  cod ?f = (if arr ?f then C.cod ?f else C.null)\n\ngoal (1 subgoal):\n 1. C.hom a b \\<inter> Collect Arr \\<subseteq> hom a b", "by force"], ["proof (state)\nthis:\n  C.hom a b \\<inter> Collect Arr \\<subseteq> hom a b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma comp_char:\n    shows \"g \\<cdot> f = (if arr f \\<and> arr g \\<and> C.seq g f then g \\<cdot>\\<^sub>C f else C.null)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<cdot> f =\n    (if arr f \\<and> arr g \\<and> C.seq g f then g \\<cdot>\\<^sub>C f\n     else C.null)", "using arr_char comp_def comp_closed C.ext"], ["proof (prove)\nusing this:\n  arr ?f = Arr ?f\n  ?g \\<cdot> ?f =\n  (if Arr ?f \\<and> Arr ?g \\<and> C.cod ?f = C.dom ?g\n   then ?g \\<cdot>\\<^sub>C ?f else C.null)\n  \\<lbrakk>Arr ?f; Arr ?g; C.cod ?f = C.dom ?g\\<rbrakk>\n  \\<Longrightarrow> Arr (?g \\<cdot>\\<^sub>C ?f)\n  ?g \\<cdot>\\<^sub>C ?f \\<noteq> C.null \\<Longrightarrow> C.seq ?g ?f\n\ngoal (1 subgoal):\n 1. g \\<cdot> f =\n    (if arr f \\<and> arr g \\<and> C.seq g f then g \\<cdot>\\<^sub>C f\n     else C.null)", "by force"], ["", "lemma comp_simp:\n    assumes \"seq g f\"\n    shows \"g \\<cdot> f = g \\<cdot>\\<^sub>C f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<cdot> f = g \\<cdot>\\<^sub>C f", "using assms comp_char seq_char"], ["proof (prove)\nusing this:\n  seq g f\n  ?g \\<cdot> ?f =\n  (if arr ?f \\<and> arr ?g \\<and> C.seq ?g ?f then ?g \\<cdot>\\<^sub>C ?f\n   else C.null)\n  seq ?g ?f = (arr ?f \\<and> arr ?g \\<and> C.seq ?g ?f)\n\ngoal (1 subgoal):\n 1. g \\<cdot> f = g \\<cdot>\\<^sub>C f", "by metis"], ["", "lemma inclusion_preserves_inverse:\n    assumes \"inverse_arrows f g\"\n    shows \"C.inverse_arrows f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inverse_arrows f g", "using assms ide_char comp_simp arr_char"], ["proof (prove)\nusing this:\n  inverse_arrows f g\n  ide ?a = (arr ?a \\<and> C.ide ?a)\n  seq ?g ?f \\<Longrightarrow> ?g \\<cdot> ?f = ?g \\<cdot>\\<^sub>C ?f\n  arr ?f = Arr ?f\n\ngoal (1 subgoal):\n 1. C.inverse_arrows f g", "by (intro C.inverse_arrowsI, auto)"], ["", "lemma iso_char:\n    shows \"iso f \\<longleftrightarrow> C.iso f \\<and> arr f \\<and> arr (C.inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso f = (C.iso f \\<and> arr f \\<and> arr (C.inv f))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. local.iso f \\<Longrightarrow> C.iso f \\<and> arr f \\<and> arr (C.inv f)\n 2. C.iso f \\<and> arr f \\<and> arr (C.inv f) \\<Longrightarrow> local.iso f", "assume f: \"iso f\""], ["proof (state)\nthis:\n  local.iso f\n\ngoal (2 subgoals):\n 1. local.iso f \\<Longrightarrow> C.iso f \\<and> arr f \\<and> arr (C.inv f)\n 2. C.iso f \\<and> arr f \\<and> arr (C.inv f) \\<Longrightarrow> local.iso f", "show \"C.iso f \\<and> arr f \\<and> arr (C.inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.iso f \\<and> arr f \\<and> arr (C.inv f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. C.iso f \\<and> arr f \\<and> arr (C.inv f)", "have 1: \"inverse_arrows f (inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_arrows f (local.inv f)", "using f inv_is_inverse"], ["proof (prove)\nusing this:\n  local.iso f\n  local.iso ?f \\<Longrightarrow> inverse_arrows ?f (local.inv ?f)\n\ngoal (1 subgoal):\n 1. inverse_arrows f (local.inv f)", "by auto"], ["proof (state)\nthis:\n  inverse_arrows f (local.inv f)\n\ngoal (1 subgoal):\n 1. C.iso f \\<and> arr f \\<and> arr (C.inv f)", "have 2: \"C.inverse_arrows f (inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inverse_arrows f (local.inv f)", "using 1 inclusion_preserves_inverse"], ["proof (prove)\nusing this:\n  inverse_arrows f (local.inv f)\n  inverse_arrows ?f ?g \\<Longrightarrow> C.inverse_arrows ?f ?g\n\ngoal (1 subgoal):\n 1. C.inverse_arrows f (local.inv f)", "by blast"], ["proof (state)\nthis:\n  C.inverse_arrows f (local.inv f)\n\ngoal (1 subgoal):\n 1. C.iso f \\<and> arr f \\<and> arr (C.inv f)", "moreover"], ["proof (state)\nthis:\n  C.inverse_arrows f (local.inv f)\n\ngoal (1 subgoal):\n 1. C.iso f \\<and> arr f \\<and> arr (C.inv f)", "have \"arr (inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr (local.inv f)", "using 1 iso_is_arr"], ["proof (prove)\nusing this:\n  inverse_arrows f (local.inv f)\n  local.iso ?f \\<Longrightarrow> arr ?f\n\ngoal (1 subgoal):\n 1. arr (local.inv f)", "by blast"], ["proof (state)\nthis:\n  arr (local.inv f)\n\ngoal (1 subgoal):\n 1. C.iso f \\<and> arr f \\<and> arr (C.inv f)", "moreover"], ["proof (state)\nthis:\n  arr (local.inv f)\n\ngoal (1 subgoal):\n 1. C.iso f \\<and> arr f \\<and> arr (C.inv f)", "have \"inv f = C.inv f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv f = C.inv f", "using 1 2 C.inv_is_inverse C.inverse_arrow_unique"], ["proof (prove)\nusing this:\n  inverse_arrows f (local.inv f)\n  C.inverse_arrows f (local.inv f)\n  C.iso ?f \\<Longrightarrow> C.inverse_arrows ?f (C.inv ?f)\n  \\<lbrakk>C.inverse_arrows ?f ?g; C.inverse_arrows ?f ?g'\\<rbrakk>\n  \\<Longrightarrow> ?g = ?g'\n\ngoal (1 subgoal):\n 1. local.inv f = C.inv f", "by blast"], ["proof (state)\nthis:\n  local.inv f = C.inv f\n\ngoal (1 subgoal):\n 1. C.iso f \\<and> arr f \\<and> arr (C.inv f)", "ultimately"], ["proof (chain)\npicking this:\n  C.inverse_arrows f (local.inv f)\n  arr (local.inv f)\n  local.inv f = C.inv f", "show ?thesis"], ["proof (prove)\nusing this:\n  C.inverse_arrows f (local.inv f)\n  arr (local.inv f)\n  local.inv f = C.inv f\n\ngoal (1 subgoal):\n 1. C.iso f \\<and> arr f \\<and> arr (C.inv f)", "using f 2 iso_is_arr"], ["proof (prove)\nusing this:\n  C.inverse_arrows f (local.inv f)\n  arr (local.inv f)\n  local.inv f = C.inv f\n  local.iso f\n  C.inverse_arrows f (local.inv f)\n  local.iso ?f \\<Longrightarrow> arr ?f\n\ngoal (1 subgoal):\n 1. C.iso f \\<and> arr f \\<and> arr (C.inv f)", "by auto"], ["proof (state)\nthis:\n  C.iso f \\<and> arr f \\<and> arr (C.inv f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C.iso f \\<and> arr f \\<and> arr (C.inv f)\n\ngoal (1 subgoal):\n 1. C.iso f \\<and> arr f \\<and> arr (C.inv f) \\<Longrightarrow> local.iso f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. C.iso f \\<and> arr f \\<and> arr (C.inv f) \\<Longrightarrow> local.iso f", "assume f: \"C.iso f \\<and> arr f \\<and> arr (C.inv f)\""], ["proof (state)\nthis:\n  C.iso f \\<and> arr f \\<and> arr (C.inv f)\n\ngoal (1 subgoal):\n 1. C.iso f \\<and> arr f \\<and> arr (C.inv f) \\<Longrightarrow> local.iso f", "show \"iso f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso f", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. inverse_arrows f ?g", "have 1: \"C.inverse_arrows f (C.inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inverse_arrows f (C.inv f)", "using f C.inv_is_inverse"], ["proof (prove)\nusing this:\n  C.iso f \\<and> arr f \\<and> arr (C.inv f)\n  C.iso ?f \\<Longrightarrow> C.inverse_arrows ?f (C.inv ?f)\n\ngoal (1 subgoal):\n 1. C.inverse_arrows f (C.inv f)", "by blast"], ["proof (state)\nthis:\n  C.inverse_arrows f (C.inv f)\n\ngoal (1 subgoal):\n 1. inverse_arrows f ?g", "show \"inverse_arrows f (C.inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_arrows f (C.inv f)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ide (C.inv f \\<cdot> f)\n 2. ide (f \\<cdot> C.inv f)", "have 2: \"C.inv f \\<cdot> f = C.inv f \\<cdot>\\<^sub>C f \\<and> f \\<cdot> C.inv f = f \\<cdot>\\<^sub>C C.inv f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inv f \\<cdot> f = C.inv f \\<cdot>\\<^sub>C f \\<and>\n    f \\<cdot> C.inv f = f \\<cdot>\\<^sub>C C.inv f", "using f 1 comp_char"], ["proof (prove)\nusing this:\n  C.iso f \\<and> arr f \\<and> arr (C.inv f)\n  C.inverse_arrows f (C.inv f)\n  ?g \\<cdot> ?f =\n  (if arr ?f \\<and> arr ?g \\<and> C.seq ?g ?f then ?g \\<cdot>\\<^sub>C ?f\n   else C.null)\n\ngoal (1 subgoal):\n 1. C.inv f \\<cdot> f = C.inv f \\<cdot>\\<^sub>C f \\<and>\n    f \\<cdot> C.inv f = f \\<cdot>\\<^sub>C C.inv f", "by fastforce"], ["proof (state)\nthis:\n  C.inv f \\<cdot> f = C.inv f \\<cdot>\\<^sub>C f \\<and>\n  f \\<cdot> C.inv f = f \\<cdot>\\<^sub>C C.inv f\n\ngoal (2 subgoals):\n 1. ide (C.inv f \\<cdot> f)\n 2. ide (f \\<cdot> C.inv f)", "have 3: \"antipar f (C.inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antipar f (C.inv f)", "using f C.seqE seqI dom_simp cod_simp"], ["proof (prove)\nusing this:\n  C.iso f \\<and> arr f \\<and> arr (C.inv f)\n  \\<lbrakk>C.seq ?g ?f;\n   \\<lbrakk>C.arr ?f; C.arr ?g; C.dom ?g = C.cod ?f\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  \\<lbrakk>arr ?f; arr ?g; local.dom ?g = cod ?f\\<rbrakk>\n  \\<Longrightarrow> seq ?g ?f\n  arr ?f \\<Longrightarrow> local.dom ?f = C.dom ?f\n  arr ?f \\<Longrightarrow> cod ?f = C.cod ?f\n\ngoal (1 subgoal):\n 1. antipar f (C.inv f)", "by simp"], ["proof (state)\nthis:\n  antipar f (C.inv f)\n\ngoal (2 subgoals):\n 1. ide (C.inv f \\<cdot> f)\n 2. ide (f \\<cdot> C.inv f)", "show \"ide (C.inv f \\<cdot> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide (C.inv f \\<cdot> f)", "using 1 2 3 ide_char"], ["proof (prove)\nusing this:\n  C.inverse_arrows f (C.inv f)\n  C.inv f \\<cdot> f = C.inv f \\<cdot>\\<^sub>C f \\<and>\n  f \\<cdot> C.inv f = f \\<cdot>\\<^sub>C C.inv f\n  antipar f (C.inv f)\n  ide ?a = (arr ?a \\<and> C.ide ?a)\n\ngoal (1 subgoal):\n 1. ide (C.inv f \\<cdot> f)", "apply (elim C.inverse_arrowsE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C.inv f \\<cdot> f = C.inv f \\<cdot>\\<^sub>C f \\<and>\n             f \\<cdot> C.inv f = f \\<cdot>\\<^sub>C C.inv f;\n     antipar f (C.inv f); \\<And>a. ide a = (arr a \\<and> C.ide a);\n     C.ide (C.inv f \\<cdot>\\<^sub>C f);\n     C.ide (f \\<cdot>\\<^sub>C C.inv f)\\<rbrakk>\n    \\<Longrightarrow> ide (C.inv f \\<cdot> f)", "by simp"], ["proof (state)\nthis:\n  ide (C.inv f \\<cdot> f)\n\ngoal (1 subgoal):\n 1. ide (f \\<cdot> C.inv f)", "show \"ide (f \\<cdot> C.inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide (f \\<cdot> C.inv f)", "using 1 2 3 ide_char"], ["proof (prove)\nusing this:\n  C.inverse_arrows f (C.inv f)\n  C.inv f \\<cdot> f = C.inv f \\<cdot>\\<^sub>C f \\<and>\n  f \\<cdot> C.inv f = f \\<cdot>\\<^sub>C C.inv f\n  antipar f (C.inv f)\n  ide ?a = (arr ?a \\<and> C.ide ?a)\n\ngoal (1 subgoal):\n 1. ide (f \\<cdot> C.inv f)", "apply (elim C.inverse_arrowsE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C.inv f \\<cdot> f = C.inv f \\<cdot>\\<^sub>C f \\<and>\n             f \\<cdot> C.inv f = f \\<cdot>\\<^sub>C C.inv f;\n     antipar f (C.inv f); \\<And>a. ide a = (arr a \\<and> C.ide a);\n     C.ide (C.inv f \\<cdot>\\<^sub>C f);\n     C.ide (f \\<cdot>\\<^sub>C C.inv f)\\<rbrakk>\n    \\<Longrightarrow> ide (f \\<cdot> C.inv f)", "by simp"], ["proof (state)\nthis:\n  ide (f \\<cdot> C.inv f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inverse_arrows f (C.inv f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.iso f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inv_char:\n    assumes \"iso f\"\n    shows \"inv f = C.inv f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv f = C.inv f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.inv f = C.inv f", "have \"C.inverse_arrows f (inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inverse_arrows f (local.inv f)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. C.ide (local.inv f \\<cdot>\\<^sub>C f)\n 2. C.ide (f \\<cdot>\\<^sub>C local.inv f)", "have 1: \"inverse_arrows f (inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_arrows f (local.inv f)", "using assms iso_char inv_is_inverse"], ["proof (prove)\nusing this:\n  local.iso f\n  local.iso ?f = (C.iso ?f \\<and> arr ?f \\<and> arr (C.inv ?f))\n  local.iso ?f \\<Longrightarrow> inverse_arrows ?f (local.inv ?f)\n\ngoal (1 subgoal):\n 1. inverse_arrows f (local.inv f)", "by blast"], ["proof (state)\nthis:\n  inverse_arrows f (local.inv f)\n\ngoal (2 subgoals):\n 1. C.ide (local.inv f \\<cdot>\\<^sub>C f)\n 2. C.ide (f \\<cdot>\\<^sub>C local.inv f)", "show \"C.ide (inv f \\<cdot>\\<^sub>C f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide (local.inv f \\<cdot>\\<^sub>C f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. C.ide (local.inv f \\<cdot>\\<^sub>C f)", "have \"inv f \\<cdot> f = inv f \\<cdot>\\<^sub>C f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv f \\<cdot> f = local.inv f \\<cdot>\\<^sub>C f", "using assms 1 inv_in_hom iso_char [of f] comp_char [of \"inv f\" f] seq_char"], ["proof (prove)\nusing this:\n  local.iso f\n  inverse_arrows f (local.inv f)\n  \\<lbrakk>local.iso ?f;\n   \\<guillemotleft>?f : ?a \\<rightarrow> ?b\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>local.inv\n                                     ?f : ?b \\<rightarrow> ?a\\<guillemotright>\n  local.iso f = (C.iso f \\<and> arr f \\<and> arr (C.inv f))\n  local.inv f \\<cdot> f =\n  (if arr f \\<and> arr (local.inv f) \\<and> C.seq (local.inv f) f\n   then local.inv f \\<cdot>\\<^sub>C f else C.null)\n  seq ?g ?f = (arr ?f \\<and> arr ?g \\<and> C.seq ?g ?f)\n\ngoal (1 subgoal):\n 1. local.inv f \\<cdot> f = local.inv f \\<cdot>\\<^sub>C f", "by auto"], ["proof (state)\nthis:\n  local.inv f \\<cdot> f = local.inv f \\<cdot>\\<^sub>C f\n\ngoal (1 subgoal):\n 1. C.ide (local.inv f \\<cdot>\\<^sub>C f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  local.inv f \\<cdot> f = local.inv f \\<cdot>\\<^sub>C f\n\ngoal (1 subgoal):\n 1. C.ide (local.inv f \\<cdot>\\<^sub>C f)", "using 1 ide_char arr_char"], ["proof (prove)\nusing this:\n  local.inv f \\<cdot> f = local.inv f \\<cdot>\\<^sub>C f\n  inverse_arrows f (local.inv f)\n  ide ?a = (arr ?a \\<and> C.ide ?a)\n  arr ?f = Arr ?f\n\ngoal (1 subgoal):\n 1. C.ide (local.inv f \\<cdot>\\<^sub>C f)", "by force"], ["proof (state)\nthis:\n  C.ide (local.inv f \\<cdot>\\<^sub>C f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C.ide (local.inv f \\<cdot>\\<^sub>C f)\n\ngoal (1 subgoal):\n 1. C.ide (f \\<cdot>\\<^sub>C local.inv f)", "show \"C.ide (f \\<cdot>\\<^sub>C inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide (f \\<cdot>\\<^sub>C local.inv f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. C.ide (f \\<cdot>\\<^sub>C local.inv f)", "have \"f \\<cdot> inv f = f \\<cdot>\\<^sub>C inv f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> local.inv f = f \\<cdot>\\<^sub>C local.inv f", "using assms 1 inv_in_hom iso_char [of f] comp_char [of f \"inv f\"] seq_char"], ["proof (prove)\nusing this:\n  local.iso f\n  inverse_arrows f (local.inv f)\n  \\<lbrakk>local.iso ?f;\n   \\<guillemotleft>?f : ?a \\<rightarrow> ?b\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>local.inv\n                                     ?f : ?b \\<rightarrow> ?a\\<guillemotright>\n  local.iso f = (C.iso f \\<and> arr f \\<and> arr (C.inv f))\n  f \\<cdot> local.inv f =\n  (if arr (local.inv f) \\<and> arr f \\<and> C.seq f (local.inv f)\n   then f \\<cdot>\\<^sub>C local.inv f else C.null)\n  seq ?g ?f = (arr ?f \\<and> arr ?g \\<and> C.seq ?g ?f)\n\ngoal (1 subgoal):\n 1. f \\<cdot> local.inv f = f \\<cdot>\\<^sub>C local.inv f", "by auto"], ["proof (state)\nthis:\n  f \\<cdot> local.inv f = f \\<cdot>\\<^sub>C local.inv f\n\ngoal (1 subgoal):\n 1. C.ide (f \\<cdot>\\<^sub>C local.inv f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f \\<cdot> local.inv f = f \\<cdot>\\<^sub>C local.inv f\n\ngoal (1 subgoal):\n 1. C.ide (f \\<cdot>\\<^sub>C local.inv f)", "using 1 ide_char arr_char"], ["proof (prove)\nusing this:\n  f \\<cdot> local.inv f = f \\<cdot>\\<^sub>C local.inv f\n  inverse_arrows f (local.inv f)\n  ide ?a = (arr ?a \\<and> C.ide ?a)\n  arr ?f = Arr ?f\n\ngoal (1 subgoal):\n 1. C.ide (f \\<cdot>\\<^sub>C local.inv f)", "by force"], ["proof (state)\nthis:\n  C.ide (f \\<cdot>\\<^sub>C local.inv f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C.ide (f \\<cdot>\\<^sub>C local.inv f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C.inverse_arrows f (local.inv f)\n\ngoal (1 subgoal):\n 1. local.inv f = C.inv f", "thus ?thesis"], ["proof (prove)\nusing this:\n  C.inverse_arrows f (local.inv f)\n\ngoal (1 subgoal):\n 1. local.inv f = C.inv f", "using C.inverse_arrow_unique C.inv_is_inverse"], ["proof (prove)\nusing this:\n  C.inverse_arrows f (local.inv f)\n  \\<lbrakk>C.inverse_arrows ?f ?g; C.inverse_arrows ?f ?g'\\<rbrakk>\n  \\<Longrightarrow> ?g = ?g'\n  C.iso ?f \\<Longrightarrow> C.inverse_arrows ?f (C.inv ?f)\n\ngoal (1 subgoal):\n 1. local.inv f = C.inv f", "by blast"], ["proof (state)\nthis:\n  local.inv f = C.inv f\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "sublocale subcategory \\<subseteq> category comp"], ["proof (prove)\ngoal (1 subgoal):\n 1. category (\\<cdot>)", "using is_category"], ["proof (prove)\nusing this:\n  category (\\<cdot>)\n\ngoal (1 subgoal):\n 1. category (\\<cdot>)", "by auto"], ["", "section \"Full Subcategory\""], ["", "locale full_subcategory =\n    C: category C\n    for C :: \"'a comp\"\n    and Ide :: \"'a \\<Rightarrow> bool\" +\n    assumes inclusion: \"Ide f \\<Longrightarrow> C.ide f\""], ["", "sublocale full_subcategory \\<subseteq> subcategory C \"\\<lambda>f. C.arr f \\<and> Ide (C.dom f) \\<and> Ide (C.cod f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subcategory C\n     (\\<lambda>f. C.arr f \\<and> Ide (C.dom f) \\<and> Ide (C.cod f))", "by (unfold_locales; simp)"], ["", "context full_subcategory\n  begin"], ["", "text \\<open>\n      Isomorphisms in a full subcategory are inherited from the ambient category.\n\\<close>"], ["", "lemma iso_char:\n    shows \"iso f \\<longleftrightarrow> arr f \\<and> C.iso f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso f = (arr f \\<and> C.iso f)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. local.iso f \\<Longrightarrow> arr f \\<and> C.iso f\n 2. arr f \\<and> C.iso f \\<Longrightarrow> local.iso f", "assume f: \"iso f\""], ["proof (state)\nthis:\n  local.iso f\n\ngoal (2 subgoals):\n 1. local.iso f \\<Longrightarrow> arr f \\<and> C.iso f\n 2. arr f \\<and> C.iso f \\<Longrightarrow> local.iso f", "obtain g where g: \"inverse_arrows f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g. inverse_arrows f g \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using f"], ["proof (prove)\nusing this:\n  local.iso f\n\ngoal (1 subgoal):\n 1. (\\<And>g. inverse_arrows f g \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  inverse_arrows f g\n\ngoal (2 subgoals):\n 1. local.iso f \\<Longrightarrow> arr f \\<and> C.iso f\n 2. arr f \\<and> C.iso f \\<Longrightarrow> local.iso f", "show \"arr f \\<and> C.iso f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f \\<and> C.iso f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. arr f \\<and> C.iso f", "have \"C.inverse_arrows f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inverse_arrows f g", "using g"], ["proof (prove)\nusing this:\n  inverse_arrows f g\n\ngoal (1 subgoal):\n 1. C.inverse_arrows f g", "apply (elim inverse_arrowsE, intro C.inverse_arrowsI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ide (local.comp g f); ide (local.comp f g);\n     inverse_arrows f g\\<rbrakk>\n    \\<Longrightarrow> C.ide (C g f)\n 2. \\<lbrakk>ide (local.comp g f); ide (local.comp f g);\n     inverse_arrows f g\\<rbrakk>\n    \\<Longrightarrow> C.ide (C f g)", "using comp_simp ide_char arr_char"], ["proof (prove)\nusing this:\n  seq ?g ?f \\<Longrightarrow> local.comp ?g ?f = C ?g ?f\n  ide ?a = (arr ?a \\<and> C.ide ?a)\n  arr ?f = (C.arr ?f \\<and> Ide (C.dom ?f) \\<and> Ide (C.cod ?f))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ide (local.comp g f); ide (local.comp f g);\n     inverse_arrows f g\\<rbrakk>\n    \\<Longrightarrow> C.ide (C g f)\n 2. \\<lbrakk>ide (local.comp g f); ide (local.comp f g);\n     inverse_arrows f g\\<rbrakk>\n    \\<Longrightarrow> C.ide (C f g)", "by auto"], ["proof (state)\nthis:\n  C.inverse_arrows f g\n\ngoal (1 subgoal):\n 1. arr f \\<and> C.iso f", "thus ?thesis"], ["proof (prove)\nusing this:\n  C.inverse_arrows f g\n\ngoal (1 subgoal):\n 1. arr f \\<and> C.iso f", "using f iso_is_arr"], ["proof (prove)\nusing this:\n  C.inverse_arrows f g\n  local.iso f\n  local.iso ?f \\<Longrightarrow> arr ?f\n\ngoal (1 subgoal):\n 1. arr f \\<and> C.iso f", "by blast"], ["proof (state)\nthis:\n  arr f \\<and> C.iso f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  arr f \\<and> C.iso f\n\ngoal (1 subgoal):\n 1. arr f \\<and> C.iso f \\<Longrightarrow> local.iso f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. arr f \\<and> C.iso f \\<Longrightarrow> local.iso f", "assume f: \"arr f \\<and> C.iso f\""], ["proof (state)\nthis:\n  arr f \\<and> C.iso f\n\ngoal (1 subgoal):\n 1. arr f \\<and> C.iso f \\<Longrightarrow> local.iso f", "obtain g where g: \"C.inverse_arrows f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g.\n        C.inverse_arrows f g \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using f"], ["proof (prove)\nusing this:\n  arr f \\<and> C.iso f\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        C.inverse_arrows f g \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  C.inverse_arrows f g\n\ngoal (1 subgoal):\n 1. arr f \\<and> C.iso f \\<Longrightarrow> local.iso f", "have \"inverse_arrows f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_arrows f g", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ide (local.comp g f)\n 2. ide (local.comp f g)", "show \"ide (comp g f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide (local.comp g f)", "using f g"], ["proof (prove)\nusing this:\n  arr f \\<and> C.iso f\n  C.inverse_arrows f g\n\ngoal (1 subgoal):\n 1. ide (local.comp g f)", "by (metis (no_types, lifting) C.seqE C.ide_compE C.inverse_arrowsE\n              arr_char dom_simp ide_dom comp_def)"], ["proof (state)\nthis:\n  ide (local.comp g f)\n\ngoal (1 subgoal):\n 1. ide (local.comp f g)", "show \"ide (comp f g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide (local.comp f g)", "using f g C.inverse_arrows_sym [of f g]"], ["proof (prove)\nusing this:\n  arr f \\<and> C.iso f\n  C.inverse_arrows f g\n  C.inverse_arrows f g = C.inverse_arrows g f\n\ngoal (1 subgoal):\n 1. ide (local.comp f g)", "by (metis (no_types, lifting) C.seqE C.ide_compE C.inverse_arrowsE\n              arr_char dom_simp ide_dom comp_def)"], ["proof (state)\nthis:\n  ide (local.comp f g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inverse_arrows f g\n\ngoal (1 subgoal):\n 1. arr f \\<and> C.iso f \\<Longrightarrow> local.iso f", "thus \"iso f\""], ["proof (prove)\nusing this:\n  inverse_arrows f g\n\ngoal (1 subgoal):\n 1. local.iso f", "by auto"], ["proof (state)\nthis:\n  local.iso f\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "section \"Inclusion Functor\""], ["", "text \\<open>\n    If \\<open>S\\<close> is a subcategory of \\<open>C\\<close>, then there is an inclusion functor\n    from \\<open>S\\<close> to \\<open>C\\<close>.  Inclusion functors are faithful embeddings.\n\\<close>"], ["", "locale inclusion_functor =\n    C: category C +\n    S: subcategory C Arr\n  for C :: \"'a comp\"\n  and Arr :: \"'a \\<Rightarrow> bool\"\n  begin"], ["", "interpretation \"functor\" S.comp C S.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>) C S.map", "using S.map_def S.arr_char S.inclusion S.dom_char S.cod_char\n            S.dom_closed S.cod_closed S.comp_closed S.arr_char S.comp_char"], ["proof (prove)\nusing this:\n  S.map ?f = (if S.arr ?f then ?f else S.null)\n  S.arr ?f = Arr ?f\n  Arr ?f \\<Longrightarrow> C.arr ?f\n  S.dom ?f = (if S.arr ?f then C.dom ?f else C.null)\n  S.cod ?f = (if S.arr ?f then C.cod ?f else C.null)\n  Arr ?f \\<Longrightarrow> Arr (C.dom ?f)\n  Arr ?f \\<Longrightarrow> Arr (C.cod ?f)\n  \\<lbrakk>Arr ?f; Arr ?g; C.cod ?f = C.dom ?g\\<rbrakk>\n  \\<Longrightarrow> Arr (C ?g ?f)\n  S.arr ?f = Arr ?f\n  ?g \\<cdot> ?f =\n  (if S.arr ?f \\<and> S.arr ?g \\<and> C.seq ?g ?f then C ?g ?f else C.null)\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>) C S.map", "apply unfold_locales"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<And>f. S.map f = (if S.arr f then f else S.null);\n        \\<And>f. S.arr f = Arr f; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f. S.dom f = (if S.arr f then C.dom f else C.null);\n        \\<And>f. S.cod f = (if S.arr f then C.cod f else C.null);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f);\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (C g f);\n        \\<And>f. S.arr f = Arr f;\n        \\<And>g f.\n           g \\<cdot> f =\n           (if S.arr f \\<and> S.arr g \\<and> C.seq g f then C g f\n            else C.null);\n        \\<not> S.arr f\\<rbrakk>\n       \\<Longrightarrow> S.map f = C.null\n 2. \\<And>f.\n       \\<lbrakk>\\<And>f. S.map f = (if S.arr f then f else S.null);\n        \\<And>f. S.arr f = Arr f; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f. S.dom f = (if S.arr f then C.dom f else C.null);\n        \\<And>f. S.cod f = (if S.arr f then C.cod f else C.null);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f);\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (C g f);\n        \\<And>f. S.arr f = Arr f;\n        \\<And>g f.\n           g \\<cdot> f =\n           (if S.arr f \\<and> S.arr g \\<and> C.seq g f then C g f\n            else C.null);\n        S.arr f\\<rbrakk>\n       \\<Longrightarrow> C.arr (S.map f)\n 3. \\<And>f.\n       \\<lbrakk>\\<And>f. S.map f = (if S.arr f then f else S.null);\n        \\<And>f. S.arr f = Arr f; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f. S.dom f = (if S.arr f then C.dom f else C.null);\n        \\<And>f. S.cod f = (if S.arr f then C.cod f else C.null);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f);\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (C g f);\n        \\<And>f. S.arr f = Arr f;\n        \\<And>g f.\n           g \\<cdot> f =\n           (if S.arr f \\<and> S.arr g \\<and> C.seq g f then C g f\n            else C.null);\n        S.arr f\\<rbrakk>\n       \\<Longrightarrow> C.dom (S.map f) = S.map (S.dom f)\n 4. \\<And>f.\n       \\<lbrakk>\\<And>f. S.map f = (if S.arr f then f else S.null);\n        \\<And>f. S.arr f = Arr f; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f. S.dom f = (if S.arr f then C.dom f else C.null);\n        \\<And>f. S.cod f = (if S.arr f then C.cod f else C.null);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f);\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (C g f);\n        \\<And>f. S.arr f = Arr f;\n        \\<And>g f.\n           g \\<cdot> f =\n           (if S.arr f \\<and> S.arr g \\<and> C.seq g f then C g f\n            else C.null);\n        S.arr f\\<rbrakk>\n       \\<Longrightarrow> C.cod (S.map f) = S.map (S.cod f)\n 5. \\<And>g f.\n       \\<lbrakk>\\<And>f. S.map f = (if S.arr f then f else S.null);\n        \\<And>f. S.arr f = Arr f; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f. S.dom f = (if S.arr f then C.dom f else C.null);\n        \\<And>f. S.cod f = (if S.arr f then C.cod f else C.null);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f);\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (C g f);\n        \\<And>f. S.arr f = Arr f;\n        \\<And>g f.\n           g \\<cdot> f =\n           (if S.arr f \\<and> S.arr g \\<and> C.seq g f then C g f\n            else C.null);\n        S.seq g f\\<rbrakk>\n       \\<Longrightarrow> S.map (g \\<cdot> f) = C (S.map g) (S.map f)", "apply auto[4]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>f. S.map f = (if S.arr f then f else S.null);\n        \\<And>f. S.arr f = Arr f; \\<And>f. Arr f \\<Longrightarrow> C.arr f;\n        \\<And>f. S.dom f = (if S.arr f then C.dom f else C.null);\n        \\<And>f. S.cod f = (if S.arr f then C.cod f else C.null);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.dom f);\n        \\<And>f. Arr f \\<Longrightarrow> Arr (C.cod f);\n        \\<And>f g.\n           \\<lbrakk>Arr f; Arr g; C.cod f = C.dom g\\<rbrakk>\n           \\<Longrightarrow> Arr (C g f);\n        \\<And>f. S.arr f = Arr f;\n        \\<And>g f.\n           g \\<cdot> f =\n           (if S.arr f \\<and> S.arr g \\<and> C.seq g f then C g f\n            else C.null);\n        S.seq g f\\<rbrakk>\n       \\<Longrightarrow> S.map (g \\<cdot> f) = C (S.map g) (S.map f)", "by (elim S.seqE, auto)"], ["", "lemma is_functor:\n    shows \"functor S.comp C S.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>) C S.map", ".."], ["", "interpretation faithful_functor S.comp C S.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. faithful_functor (\\<cdot>) C S.map", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       \\<lbrakk>S.par f f'; S.map f = S.map f'\\<rbrakk>\n       \\<Longrightarrow> f = f'", "by simp"], ["", "lemma is_faithful_functor:\n    shows \"faithful_functor S.comp C S.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. faithful_functor (\\<cdot>) C S.map", ".."], ["", "interpretation embedding_functor S.comp C S.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. embedding_functor (\\<cdot>) C S.map", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       \\<lbrakk>S.arr f; S.arr f'; S.map f = S.map f'\\<rbrakk>\n       \\<Longrightarrow> f = f'", "by simp"], ["", "lemma is_embedding_functor:\n    shows \"embedding_functor S.comp C S.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. embedding_functor (\\<cdot>) C S.map", ".."], ["", "end"], ["", "sublocale inclusion_functor \\<subseteq> faithful_functor S.comp C S.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. faithful_functor (\\<cdot>) C S.map", "using is_faithful_functor"], ["proof (prove)\nusing this:\n  faithful_functor (\\<cdot>) C S.map\n\ngoal (1 subgoal):\n 1. faithful_functor (\\<cdot>) C S.map", "by auto"], ["", "sublocale inclusion_functor \\<subseteq> embedding_functor S.comp C S.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. embedding_functor (\\<cdot>) C S.map", "using is_embedding_functor"], ["proof (prove)\nusing this:\n  embedding_functor (\\<cdot>) C S.map\n\ngoal (1 subgoal):\n 1. embedding_functor (\\<cdot>) C S.map", "by auto"], ["", "text \\<open>\n    The inclusion of a full subcategory is a special case.\n    Such functors are fully faithful.\n\\<close>"], ["", "locale full_inclusion_functor =\n    C: category C +\n    S: full_subcategory C Ide\n  for C :: \"'a comp\"\n  and Ide :: \"'a \\<Rightarrow> bool\""], ["", "sublocale full_inclusion_functor \\<subseteq>\n              inclusion_functor C \"\\<lambda>f. C.arr f \\<and> Ide (C.dom f) \\<and> Ide (C.cod f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inclusion_functor C\n     (\\<lambda>f. C.arr f \\<and> Ide (C.dom f) \\<and> Ide (C.cod f))", ".."], ["", "context full_inclusion_functor\n  begin"], ["", "interpretation full_functor S.comp C S.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. full_functor S.comp C S.map", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' g.\n       \\<lbrakk>S.ide a; S.ide a';\n        \\<guillemotleft>g : S.map\n                             a' \\<rightarrow>\\<^sub>C S.map\n                 a\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f. S.in_hom f a' a \\<and> S.map f = g", "using S.ide_in_hom"], ["proof (prove)\nusing this:\n  S.ide ?a = S.in_hom ?a ?a ?a\n\ngoal (1 subgoal):\n 1. \\<And>a a' g.\n       \\<lbrakk>S.ide a; S.ide a';\n        \\<guillemotleft>g : S.map\n                             a' \\<rightarrow>\\<^sub>C S.map\n                 a\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f. S.in_hom f a' a \\<and> S.map f = g", "by (metis (no_types, lifting) C.in_homE S.arr_char S.in_hom_char S.map_simp)"], ["", "lemma is_full_functor:\n    shows \"full_functor S.comp C S.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. full_functor S.comp C S.map", ".."], ["", "end"], ["", "sublocale full_inclusion_functor \\<subseteq> full_functor S.comp C S.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. full_functor S.comp C S.map", "using is_full_functor"], ["proof (prove)\nusing this:\n  full_functor S.comp C S.map\n\ngoal (1 subgoal):\n 1. full_functor S.comp C S.map", "by auto"], ["", "sublocale full_inclusion_functor \\<subseteq> fully_faithful_functor S.comp C S.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. fully_faithful_functor S.comp C S.map", ".."], ["", "end"]]}