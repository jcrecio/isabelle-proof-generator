{"file_name": "/home/qj213/afp-2021-10-22/thys/Category3/EquivalenceOfCategories.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Category3", "problem_names": ["lemma C_arr_expansion:\n    assumes \"C.arr f\"\n    shows \"\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) = f\"\n    and \"C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) = F (G f)\"", "lemma G_is_faithful:\n    shows \"faithful_functor C D G\"", "lemma G_is_essentially_surjective:\n    shows \"essentially_surjective_functor C D G\"", "lemma F_is_faithful:\n    shows \"faithful_functor D C F\"", "lemma F_is_essentially_surjective:\n    shows \"essentially_surjective_functor D C F\"", "lemma G_is_full:\n    shows \"full_functor C D G\"", "lemma F_is_full:\n    shows \"full_functor D C F\"", "lemma isomorphic_to_identity_is_equivalence:\n    assumes \"natural_isomorphism A A F A.map \\<phi>\"\n    shows \"equivalence_functor A A F\"", "lemma triangle_G':\n    assumes \"C.ide a\"\n    shows \"D.inverse_arrows (\\<eta> (G a)) (G (\\<epsilon> a))\"", "lemma triangle_F':\n    assumes \"D.ide b\"\n    shows \"C.inverse_arrows (F (\\<eta> b)) (\\<epsilon> (F b))\"", "lemma dual_equivalence:\n    assumes \"adjoint_equivalence C D F G \\<eta> \\<epsilon>\"\n    shows \"adjoint_equivalence D C G F (inverse_transformation.map C C (C.map) \\<epsilon>)\n                                       (inverse_transformation.map D D (G o F) \\<eta>)\"", "lemma is_left_adjoint_functor:\n    shows \"left_adjoint_functor C D F\"", "lemma extends_to_adjoint_equivalence:\n    shows \"\\<exists>G \\<eta> \\<epsilon>. adjoint_equivalence C D G F \\<eta> \\<epsilon>\"", "lemma is_right_adjoint_functor:\n    shows \"right_adjoint_functor C D F\"", "lemma is_equivalence_functor:\n    shows \"equivalence_functor C D F\"", "lemma F\\<eta>_inverse:\n    assumes \"D.ide b\"\n    shows \"F (\\<eta> (G (F b))) = F (G (F (\\<eta> b)))\"\n    and \"F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b) = \\<epsilon> (F (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> (G (F b)))\"\n    and \"C.inverse_arrows (F (\\<eta> b)) (\\<epsilon>' (F b))\"\n    and \"F (\\<eta> b) = C.inv (\\<epsilon>' (F b))\"\n    and \"C.inv (F (\\<eta> b)) = \\<epsilon>' (F b)\"", "lemma refines_to_adjoint_equivalence:\n    shows \"adjoint_equivalence C D F G \\<eta> \\<epsilon>'.map\""], "translations": [["", "lemma C_arr_expansion:\n    assumes \"C.arr f\"\n    shows \"\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) = f\"\n    and \"C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) = F (G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n    f &&&\n    C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C\n    f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n    F (G f)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n    f\n 2. C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C\n    f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n    F (G f)", "have \\<epsilon>_dom: \"C.inverse_arrows (\\<epsilon> (C.dom f)) (C.inv (\\<epsilon> (C.dom f)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inverse_arrows (\\<epsilon> (C.dom f)) (C.inv (\\<epsilon> (C.dom f)))", "using assms C.inv_is_inverse"], ["proof (prove)\nusing this:\n  C.arr f\n  C.iso ?f \\<Longrightarrow> C.inverse_arrows ?f (C.inv ?f)\n\ngoal (1 subgoal):\n 1. C.inverse_arrows (\\<epsilon> (C.dom f)) (C.inv (\\<epsilon> (C.dom f)))", "by auto"], ["proof (state)\nthis:\n  C.inverse_arrows (\\<epsilon> (C.dom f)) (C.inv (\\<epsilon> (C.dom f)))\n\ngoal (2 subgoals):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n    f\n 2. C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C\n    f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n    F (G f)", "have \\<epsilon>_cod: \"C.inverse_arrows (\\<epsilon> (C.cod f)) (C.inv (\\<epsilon> (C.cod f)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inverse_arrows (\\<epsilon> (C.cod f)) (C.inv (\\<epsilon> (C.cod f)))", "using assms C.inv_is_inverse"], ["proof (prove)\nusing this:\n  C.arr f\n  C.iso ?f \\<Longrightarrow> C.inverse_arrows ?f (C.inv ?f)\n\ngoal (1 subgoal):\n 1. C.inverse_arrows (\\<epsilon> (C.cod f)) (C.inv (\\<epsilon> (C.cod f)))", "by auto"], ["proof (state)\nthis:\n  C.inverse_arrows (\\<epsilon> (C.cod f)) (C.inv (\\<epsilon> (C.cod f)))\n\ngoal (2 subgoals):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n    f\n 2. C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C\n    f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n    F (G f)", "have \"\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n            (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n    (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (C.dom f))", "using C.comp_assoc"], ["proof (prove)\nusing this:\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n    (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (C.dom f))", "by force"], ["proof (state)\nthis:\n  \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n  F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n  (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (C.dom f))\n\ngoal (2 subgoals):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n    f\n 2. C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C\n    f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n    F (G f)", "also"], ["proof (state)\nthis:\n  \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n  F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n  (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (C.dom f))\n\ngoal (2 subgoals):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n    f\n 2. C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C\n    f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n    F (G f)", "have 1: \"... = (f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f)) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (C.dom f)) =\n    (f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f)) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (C.dom f))", "using assms \\<epsilon>.naturality"], ["proof (prove)\nusing this:\n  C.arr f\n  C.arr ?f \\<Longrightarrow>\n  \\<epsilon> (C.cod ?f) \\<cdot>\\<^sub>C (F \\<circ> G) ?f =\n  C.map ?f \\<cdot>\\<^sub>C \\<epsilon> (C.dom ?f)\n\ngoal (1 subgoal):\n 1. (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (C.dom f)) =\n    (f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f)) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (C.dom f))", "by simp"], ["proof (state)\nthis:\n  (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (C.dom f)) =\n  (f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f)) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (C.dom f))\n\ngoal (2 subgoals):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n    f\n 2. C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C\n    f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n    F (G f)", "also"], ["proof (state)\nthis:\n  (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (C.dom f)) =\n  (f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f)) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (C.dom f))\n\ngoal (2 subgoals):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n    f\n 2. C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C\n    f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n    F (G f)", "have 2: \"... = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f)) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (C.dom f)) =\n    f", "using assms \\<epsilon>_dom C.comp_arr_inv C.comp_arr_dom C.comp_assoc"], ["proof (prove)\nusing this:\n  C.arr f\n  C.inverse_arrows (\\<epsilon> (C.dom f)) (C.inv (\\<epsilon> (C.dom f)))\n  C.inverse_arrows ?f ?g \\<Longrightarrow> ?f \\<cdot>\\<^sub>C ?g = C.dom ?g\n  \\<lbrakk>C.arr ?f; C.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>C ?a = ?f\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. (f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f)) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (C.dom f)) =\n    f", "by force"], ["proof (state)\nthis:\n  (f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f)) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (C.dom f)) =\n  f\n\ngoal (2 subgoals):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n    f\n 2. C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C\n    f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n    F (G f)", "finally"], ["proof (chain)\npicking this:\n  \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n  F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n  f", "show \"\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) = f\""], ["proof (prove)\nusing this:\n  \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n  F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n  f\n\ngoal (1 subgoal):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n    f", "by blast"], ["proof (state)\nthis:\n  \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n  F (G f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom f)) =\n  f\n\ngoal (1 subgoal):\n 1. C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C\n    f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n    F (G f)", "show \"C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) = F (G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C\n    f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n    F (G f)", "using assms 1 2 \\<epsilon>_dom \\<epsilon>_cod C.invert_side_of_triangle C.isoI C.iso_inv_iso"], ["proof (prove)\nusing this:\n  C.arr f\n  (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (C.dom f)) =\n  (f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f)) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (C.dom f))\n  (f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f)) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (C.dom f)) =\n  f\n  C.inverse_arrows (\\<epsilon> (C.dom f)) (C.inv (\\<epsilon> (C.dom f)))\n  C.inverse_arrows (\\<epsilon> (C.cod f)) (C.inv (\\<epsilon> (C.cod f)))\n  \\<lbrakk>C.arr ?h; ?f \\<cdot>\\<^sub>C ?g = ?h; C.iso ?f\\<rbrakk>\n  \\<Longrightarrow> C.seq (C.inv ?f) ?h \\<and>\n                    ?g = C.inv ?f \\<cdot>\\<^sub>C ?h\n  \\<lbrakk>C.arr ?h; ?f \\<cdot>\\<^sub>C ?g = ?h; C.iso ?g\\<rbrakk>\n  \\<Longrightarrow> C.seq ?h (C.inv ?g) \\<and>\n                    ?f = ?h \\<cdot>\\<^sub>C C.inv ?g\n  C.inverse_arrows ?f ?g \\<Longrightarrow> C.iso ?f\n  C.iso ?f \\<Longrightarrow> C.iso (C.inv ?f)\n\ngoal (1 subgoal):\n 1. C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C\n    f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n    F (G f)", "by metis"], ["proof (state)\nthis:\n  C.inv (\\<epsilon> (C.cod f)) \\<cdot>\\<^sub>C\n  f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n  F (G f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma G_is_faithful:\n    shows \"faithful_functor C D G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. faithful_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       \\<lbrakk>C.par f f'; G f = G f'\\<rbrakk> \\<Longrightarrow> f = f'", "fix f f'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       \\<lbrakk>C.par f f'; G f = G f'\\<rbrakk> \\<Longrightarrow> f = f'", "assume par: \"C.par f f'\" and eq: \"G f = G f'\""], ["proof (state)\nthis:\n  C.par f f'\n  G f = G f'\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       \\<lbrakk>C.par f f'; G f = G f'\\<rbrakk> \\<Longrightarrow> f = f'", "show \"f = f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = f'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f = f'", "have \"C.inv (\\<epsilon> (C.cod f)) \\<in> C.hom (C.cod f) (F (G (C.cod f))) \\<and>\n              C.iso (C.inv (\\<epsilon> (C.cod f)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inv (\\<epsilon> (C.cod f))\n    \\<in> C.hom (C.cod f) (F (G (C.cod f))) \\<and>\n    C.iso (C.inv (\\<epsilon> (C.cod f)))", "using par"], ["proof (prove)\nusing this:\n  C.par f f'\n\ngoal (1 subgoal):\n 1. C.inv (\\<epsilon> (C.cod f))\n    \\<in> C.hom (C.cod f) (F (G (C.cod f))) \\<and>\n    C.iso (C.inv (\\<epsilon> (C.cod f)))", "by auto"], ["proof (state)\nthis:\n  C.inv (\\<epsilon> (C.cod f))\n  \\<in> C.hom (C.cod f) (F (G (C.cod f))) \\<and>\n  C.iso (C.inv (\\<epsilon> (C.cod f)))\n\ngoal (1 subgoal):\n 1. f = f'", "moreover"], ["proof (state)\nthis:\n  C.inv (\\<epsilon> (C.cod f))\n  \\<in> C.hom (C.cod f) (F (G (C.cod f))) \\<and>\n  C.iso (C.inv (\\<epsilon> (C.cod f)))\n\ngoal (1 subgoal):\n 1. f = f'", "have 1: \"\\<epsilon> (C.dom f) \\<in> C.hom (F (G (C.dom f))) (C.dom f) \\<and>\n                          C.iso (\\<epsilon> (C.dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> (C.dom f) \\<in> C.hom (F (G (C.dom f))) (C.dom f) \\<and>\n    C.iso (\\<epsilon> (C.dom f))", "using par"], ["proof (prove)\nusing this:\n  C.par f f'\n\ngoal (1 subgoal):\n 1. \\<epsilon> (C.dom f) \\<in> C.hom (F (G (C.dom f))) (C.dom f) \\<and>\n    C.iso (\\<epsilon> (C.dom f))", "by auto"], ["proof (state)\nthis:\n  \\<epsilon> (C.dom f) \\<in> C.hom (F (G (C.dom f))) (C.dom f) \\<and>\n  C.iso (\\<epsilon> (C.dom f))\n\ngoal (1 subgoal):\n 1. f = f'", "ultimately"], ["proof (chain)\npicking this:\n  C.inv (\\<epsilon> (C.cod f))\n  \\<in> C.hom (C.cod f) (F (G (C.cod f))) \\<and>\n  C.iso (C.inv (\\<epsilon> (C.cod f)))\n  \\<epsilon> (C.dom f) \\<in> C.hom (F (G (C.dom f))) (C.dom f) \\<and>\n  C.iso (\\<epsilon> (C.dom f))", "have 2: \"f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) = f' \\<cdot>\\<^sub>C \\<epsilon> (C.dom f)\""], ["proof (prove)\nusing this:\n  C.inv (\\<epsilon> (C.cod f))\n  \\<in> C.hom (C.cod f) (F (G (C.cod f))) \\<and>\n  C.iso (C.inv (\\<epsilon> (C.cod f)))\n  \\<epsilon> (C.dom f) \\<in> C.hom (F (G (C.dom f))) (C.dom f) \\<and>\n  C.iso (\\<epsilon> (C.dom f))\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n    f' \\<cdot>\\<^sub>C \\<epsilon> (C.dom f)", "using par C_arr_expansion eq C.iso_is_section C.section_is_mono"], ["proof (prove)\nusing this:\n  C.inv (\\<epsilon> (C.cod f))\n  \\<in> C.hom (C.cod f) (F (G (C.cod f))) \\<and>\n  C.iso (C.inv (\\<epsilon> (C.cod f)))\n  \\<epsilon> (C.dom f) \\<in> C.hom (F (G (C.dom f))) (C.dom f) \\<and>\n  C.iso (\\<epsilon> (C.dom f))\n  C.par f f'\n  C.arr ?f \\<Longrightarrow>\n  \\<epsilon> (C.cod ?f) \\<cdot>\\<^sub>C\n  F (G ?f) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (C.dom ?f)) =\n  ?f\n  C.arr ?f \\<Longrightarrow>\n  C.inv (\\<epsilon> (C.cod ?f)) \\<cdot>\\<^sub>C\n  ?f \\<cdot>\\<^sub>C \\<epsilon> (C.dom ?f) =\n  F (G ?f)\n  G f = G f'\n  C.iso ?f \\<Longrightarrow> C.section ?f\n  C.section ?g \\<Longrightarrow> C.mono ?g\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n    f' \\<cdot>\\<^sub>C \\<epsilon> (C.dom f)", "by (metis C_arr_expansion(1) eq)"], ["proof (state)\nthis:\n  f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n  f' \\<cdot>\\<^sub>C \\<epsilon> (C.dom f)\n\ngoal (1 subgoal):\n 1. f = f'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = f'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f = f'", "have \"C.epi (\\<epsilon> (C.dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.epi (\\<epsilon> (C.dom f))", "using 1 par C.iso_is_retraction C.retraction_is_epi"], ["proof (prove)\nusing this:\n  \\<epsilon> (C.dom f) \\<in> C.hom (F (G (C.dom f))) (C.dom f) \\<and>\n  C.iso (\\<epsilon> (C.dom f))\n  C.par f f'\n  C.iso ?f \\<Longrightarrow> C.retraction ?f\n  C.retraction ?g \\<Longrightarrow> C.epi ?g\n\ngoal (1 subgoal):\n 1. C.epi (\\<epsilon> (C.dom f))", "by blast"], ["proof (state)\nthis:\n  C.epi (\\<epsilon> (C.dom f))\n\ngoal (1 subgoal):\n 1. f = f'", "thus ?thesis"], ["proof (prove)\nusing this:\n  C.epi (\\<epsilon> (C.dom f))\n\ngoal (1 subgoal):\n 1. f = f'", "using 2 par"], ["proof (prove)\nusing this:\n  C.epi (\\<epsilon> (C.dom f))\n  f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) =\n  f' \\<cdot>\\<^sub>C \\<epsilon> (C.dom f)\n  C.par f f'\n\ngoal (1 subgoal):\n 1. f = f'", "by auto"], ["proof (state)\nthis:\n  f = f'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f = f'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f = f'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma G_is_essentially_surjective:\n    shows \"essentially_surjective_functor C D G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. essentially_surjective_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       D.ide b \\<Longrightarrow>\n       \\<exists>a. C.ide a \\<and> D.isomorphic (G a) b", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b.\n       D.ide b \\<Longrightarrow>\n       \\<exists>a. C.ide a \\<and> D.isomorphic (G a) b", "assume b: \"D.ide b\""], ["proof (state)\nthis:\n  D.ide b\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       D.ide b \\<Longrightarrow>\n       \\<exists>a. C.ide a \\<and> D.isomorphic (G a) b", "have \"C.ide (F b) \\<and> D.isomorphic (G (F b)) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide (F b) \\<and> D.isomorphic (G (F b)) b", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. C.ide (F b)\n 2. D.isomorphic (G (F b)) b", "show \"C.ide (F b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide (F b)", "using b"], ["proof (prove)\nusing this:\n  D.ide b\n\ngoal (1 subgoal):\n 1. C.ide (F b)", "by simp"], ["proof (state)\nthis:\n  C.ide (F b)\n\ngoal (1 subgoal):\n 1. D.isomorphic (G (F b)) b", "show \"D.isomorphic (G (F b)) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.isomorphic (G (F b)) b", "proof (unfold D.isomorphic_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<guillemotleft>f : G (F b) \\<rightarrow>\\<^sub>D b\\<guillemotright> \\<and>\n       D.iso f", "have \"\\<guillemotleft>D.inv (\\<eta> b) : G (F b) \\<rightarrow>\\<^sub>D b\\<guillemotright> \\<and> D.iso (D.inv (\\<eta> b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>D.inv\n                     (\\<eta>\n                       b) : G (F b) \\<rightarrow>\\<^sub>D b\\<guillemotright> \\<and>\n    D.iso (D.inv (\\<eta> b))", "using b"], ["proof (prove)\nusing this:\n  D.ide b\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>D.inv\n                     (\\<eta>\n                       b) : G (F b) \\<rightarrow>\\<^sub>D b\\<guillemotright> \\<and>\n    D.iso (D.inv (\\<eta> b))", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>D.inv\n                   (\\<eta>\n                     b) : G (F b) \\<rightarrow>\\<^sub>D b\\<guillemotright> \\<and>\n  D.iso (D.inv (\\<eta> b))\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<guillemotleft>f : G (F b) \\<rightarrow>\\<^sub>D b\\<guillemotright> \\<and>\n       D.iso f", "thus \"\\<exists>f. \\<guillemotleft>f : G (F b) \\<rightarrow>\\<^sub>D b\\<guillemotright> \\<and> D.iso f\""], ["proof (prove)\nusing this:\n  \\<guillemotleft>D.inv\n                   (\\<eta>\n                     b) : G (F b) \\<rightarrow>\\<^sub>D b\\<guillemotright> \\<and>\n  D.iso (D.inv (\\<eta> b))\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<guillemotleft>f : G (F b) \\<rightarrow>\\<^sub>D b\\<guillemotright> \\<and>\n       D.iso f", "by blast"], ["proof (state)\nthis:\n  \\<exists>f.\n     \\<guillemotleft>f : G (F b) \\<rightarrow>\\<^sub>D b\\<guillemotright> \\<and>\n     D.iso f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  D.isomorphic (G (F b)) b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C.ide (F b) \\<and> D.isomorphic (G (F b)) b\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       D.ide b \\<Longrightarrow>\n       \\<exists>a. C.ide a \\<and> D.isomorphic (G a) b", "thus \"\\<exists>a. C.ide a \\<and> D.isomorphic (G a) b\""], ["proof (prove)\nusing this:\n  C.ide (F b) \\<and> D.isomorphic (G (F b)) b\n\ngoal (1 subgoal):\n 1. \\<exists>a. C.ide a \\<and> D.isomorphic (G a) b", "by blast"], ["proof (state)\nthis:\n  \\<exists>a. C.ide a \\<and> D.isomorphic (G a) b\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation \\<epsilon>_inv: inverse_transformation C C \\<open>F o G\\<close> C.map \\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) (F \\<circ> G)\n     C.map \\<epsilon>", ".."], ["", "interpretation \\<eta>_inv: inverse_transformation D D D.map \\<open>G o F\\<close> \\<eta>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n     (G \\<circ> F) \\<eta>", ".."], ["", "interpretation GF: equivalence_of_categories D C G F \\<epsilon>_inv.map \\<eta>_inv.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence_of_categories (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) G F\n     \\<epsilon>_inv.map \\<eta>_inv.map", ".."], ["", "lemma F_is_faithful:\n    shows \"faithful_functor D C F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. faithful_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "using GF.G_is_faithful"], ["proof (prove)\nusing this:\n  faithful_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n\ngoal (1 subgoal):\n 1. faithful_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "by simp"], ["", "lemma F_is_essentially_surjective:\n    shows \"essentially_surjective_functor D C F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. essentially_surjective_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "using GF.G_is_essentially_surjective"], ["proof (prove)\nusing this:\n  essentially_surjective_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n\ngoal (1 subgoal):\n 1. essentially_surjective_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "by simp"], ["", "lemma G_is_full:\n    shows \"full_functor C D G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. full_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' g.\n       \\<lbrakk>C.ide a; C.ide a';\n        \\<guillemotleft>g : G a' \\<rightarrow>\\<^sub>D G\n                  a\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>C a\\<guillemotright> \\<and>\n                            G f = g", "fix a a' g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' g.\n       \\<lbrakk>C.ide a; C.ide a';\n        \\<guillemotleft>g : G a' \\<rightarrow>\\<^sub>D G\n                  a\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>C a\\<guillemotright> \\<and>\n                            G f = g", "assume a: \"C.ide a\" and a': \"C.ide a'\""], ["proof (state)\nthis:\n  C.ide a\n  C.ide a'\n\ngoal (1 subgoal):\n 1. \\<And>a a' g.\n       \\<lbrakk>C.ide a; C.ide a';\n        \\<guillemotleft>g : G a' \\<rightarrow>\\<^sub>D G\n                  a\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>C a\\<guillemotright> \\<and>\n                            G f = g", "assume g: \"\\<guillemotleft>g : G a \\<rightarrow>\\<^sub>D G a'\\<guillemotright>\""], ["proof (state)\nthis:\n  \\<guillemotleft>g : G a \\<rightarrow>\\<^sub>D G a'\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>a a' g.\n       \\<lbrakk>C.ide a; C.ide a';\n        \\<guillemotleft>g : G a' \\<rightarrow>\\<^sub>D G\n                  a\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>C a\\<guillemotright> \\<and>\n                            G f = g", "show \"\\<exists>f. \\<guillemotleft>f : a \\<rightarrow>\\<^sub>C a'\\<guillemotright> \\<and> G f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<guillemotleft>f : a \\<rightarrow>\\<^sub>C a'\\<guillemotright> \\<and>\n       G f = g", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<guillemotleft>?f : a \\<rightarrow>\\<^sub>C a'\\<guillemotright> \\<and>\n    G ?f = g", "have \\<epsilon>a: \"C.inverse_arrows (\\<epsilon> a) (C.inv (\\<epsilon> a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inverse_arrows (\\<epsilon> a) (C.inv (\\<epsilon> a))", "using a C.inv_is_inverse"], ["proof (prove)\nusing this:\n  C.ide a\n  C.iso ?f \\<Longrightarrow> C.inverse_arrows ?f (C.inv ?f)\n\ngoal (1 subgoal):\n 1. C.inverse_arrows (\\<epsilon> a) (C.inv (\\<epsilon> a))", "by auto"], ["proof (state)\nthis:\n  C.inverse_arrows (\\<epsilon> a) (C.inv (\\<epsilon> a))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>?f : a \\<rightarrow>\\<^sub>C a'\\<guillemotright> \\<and>\n    G ?f = g", "have \\<epsilon>a': \"C.inverse_arrows (\\<epsilon> a') (C.inv (\\<epsilon> a'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inverse_arrows (\\<epsilon> a') (C.inv (\\<epsilon> a'))", "using a' C.inv_is_inverse"], ["proof (prove)\nusing this:\n  C.ide a'\n  C.iso ?f \\<Longrightarrow> C.inverse_arrows ?f (C.inv ?f)\n\ngoal (1 subgoal):\n 1. C.inverse_arrows (\\<epsilon> a') (C.inv (\\<epsilon> a'))", "by auto"], ["proof (state)\nthis:\n  C.inverse_arrows (\\<epsilon> a') (C.inv (\\<epsilon> a'))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>?f : a \\<rightarrow>\\<^sub>C a'\\<guillemotright> \\<and>\n    G ?f = g", "let ?f = \"\\<epsilon> a' \\<cdot>\\<^sub>C F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<guillemotleft>?f : a \\<rightarrow>\\<^sub>C a'\\<guillemotright> \\<and>\n    G ?f = g", "have f: \"\\<guillemotleft>?f : a \\<rightarrow>\\<^sub>C a'\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<epsilon> a' \\<cdot>\\<^sub>C\n                    F g \\<cdot>\\<^sub>C\n                    C.inv\n                     (\\<epsilon>\n                       a) : a \\<rightarrow>\\<^sub>C a'\\<guillemotright>", "using a a' g \\<epsilon>a \\<epsilon>a' \\<epsilon>.preserves_hom [of a' a' a'] \\<epsilon>_inv.preserves_hom [of a a a]"], ["proof (prove)\nusing this:\n  C.ide a\n  C.ide a'\n  \\<guillemotleft>g : G a \\<rightarrow>\\<^sub>D G a'\\<guillemotright>\n  C.inverse_arrows (\\<epsilon> a) (C.inv (\\<epsilon> a))\n  C.inverse_arrows (\\<epsilon> a') (C.inv (\\<epsilon> a'))\n  \\<guillemotleft>a' : a' \\<rightarrow>\\<^sub>C a'\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>\\<epsilon>\n                   a' : (F \\<circ> G)\n                         a' \\<rightarrow>\\<^sub>C C.map a'\\<guillemotright>\n  \\<guillemotleft>a : a \\<rightarrow>\\<^sub>C a\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>\\<epsilon>_inv.map\n                   a : C.map\n                        a \\<rightarrow>\\<^sub>C (F \\<circ> G)\n           a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<epsilon> a' \\<cdot>\\<^sub>C\n                    F g \\<cdot>\\<^sub>C\n                    C.inv\n                     (\\<epsilon>\n                       a) : a \\<rightarrow>\\<^sub>C a'\\<guillemotright>", "by fastforce"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<epsilon> a' \\<cdot>\\<^sub>C\n                  F g \\<cdot>\\<^sub>C\n                  C.inv\n                   (\\<epsilon>\n                     a) : a \\<rightarrow>\\<^sub>C a'\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>?f : a \\<rightarrow>\\<^sub>C a'\\<guillemotright> \\<and>\n    G ?f = g", "moreover"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<epsilon> a' \\<cdot>\\<^sub>C\n                  F g \\<cdot>\\<^sub>C\n                  C.inv\n                   (\\<epsilon>\n                     a) : a \\<rightarrow>\\<^sub>C a'\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>?f : a \\<rightarrow>\\<^sub>C a'\\<guillemotright> \\<and>\n    G ?f = g", "have \"G ?f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (\\<epsilon> a' \\<cdot>\\<^sub>C\n       F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) =\n    g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G (\\<epsilon> a' \\<cdot>\\<^sub>C\n       F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) =\n    g", "interpret F: faithful_functor D C F"], ["proof (prove)\ngoal (1 subgoal):\n 1. faithful_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "using F_is_faithful"], ["proof (prove)\nusing this:\n  faithful_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n\ngoal (1 subgoal):\n 1. faithful_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. G (\\<epsilon> a' \\<cdot>\\<^sub>C\n       F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) =\n    g", "have \"F (G ?f) = F g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n          F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n    F g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n          F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n    F g", "have \"F (G ?f) = C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C ?f \\<cdot>\\<^sub>C \\<epsilon> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n          F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n    C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C\n    (\\<epsilon> a' \\<cdot>\\<^sub>C\n     F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) \\<cdot>\\<^sub>C\n    \\<epsilon> a", "using f C_arr_expansion(2) [of \"?f\"]"], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<epsilon> a' \\<cdot>\\<^sub>C\n                  F g \\<cdot>\\<^sub>C\n                  C.inv\n                   (\\<epsilon>\n                     a) : a \\<rightarrow>\\<^sub>C a'\\<guillemotright>\n  C.seq (\\<epsilon> a')\n   (F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) \\<Longrightarrow>\n  C.inv\n   (\\<epsilon>\n     (C.cod\n       (\\<epsilon> a' \\<cdot>\\<^sub>C\n        F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)))) \\<cdot>\\<^sub>C\n  (\\<epsilon> a' \\<cdot>\\<^sub>C\n   F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) \\<cdot>\\<^sub>C\n  \\<epsilon>\n   (C.dom\n     (\\<epsilon> a' \\<cdot>\\<^sub>C\n      F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n  F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n        F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)))\n\ngoal (1 subgoal):\n 1. F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n          F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n    C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C\n    (\\<epsilon> a' \\<cdot>\\<^sub>C\n     F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) \\<cdot>\\<^sub>C\n    \\<epsilon> a", "by auto"], ["proof (state)\nthis:\n  F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n        F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n  C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C\n  (\\<epsilon> a' \\<cdot>\\<^sub>C\n   F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) \\<cdot>\\<^sub>C\n  \\<epsilon> a\n\ngoal (1 subgoal):\n 1. F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n          F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n    F g", "also"], ["proof (state)\nthis:\n  F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n        F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n  C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C\n  (\\<epsilon> a' \\<cdot>\\<^sub>C\n   F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) \\<cdot>\\<^sub>C\n  \\<epsilon> a\n\ngoal (1 subgoal):\n 1. F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n          F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n    F g", "have \"... = (C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C \\<epsilon> a') \\<cdot>\\<^sub>C F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a) \\<cdot>\\<^sub>C \\<epsilon> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C\n    (\\<epsilon> a' \\<cdot>\\<^sub>C\n     F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) \\<cdot>\\<^sub>C\n    \\<epsilon> a =\n    (C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C \\<epsilon> a') \\<cdot>\\<^sub>C\n    F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a) \\<cdot>\\<^sub>C \\<epsilon> a", "using a a' f g C.comp_assoc"], ["proof (prove)\nusing this:\n  C.ide a\n  C.ide a'\n  \\<guillemotleft>\\<epsilon> a' \\<cdot>\\<^sub>C\n                  F g \\<cdot>\\<^sub>C\n                  C.inv\n                   (\\<epsilon>\n                     a) : a \\<rightarrow>\\<^sub>C a'\\<guillemotright>\n  \\<guillemotleft>g : G a \\<rightarrow>\\<^sub>D G a'\\<guillemotright>\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C\n    (\\<epsilon> a' \\<cdot>\\<^sub>C\n     F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) \\<cdot>\\<^sub>C\n    \\<epsilon> a =\n    (C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C \\<epsilon> a') \\<cdot>\\<^sub>C\n    F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a) \\<cdot>\\<^sub>C \\<epsilon> a", "by fastforce"], ["proof (state)\nthis:\n  C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C\n  (\\<epsilon> a' \\<cdot>\\<^sub>C\n   F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) \\<cdot>\\<^sub>C\n  \\<epsilon> a =\n  (C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C \\<epsilon> a') \\<cdot>\\<^sub>C\n  F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a) \\<cdot>\\<^sub>C \\<epsilon> a\n\ngoal (1 subgoal):\n 1. F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n          F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n    F g", "also"], ["proof (state)\nthis:\n  C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C\n  (\\<epsilon> a' \\<cdot>\\<^sub>C\n   F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) \\<cdot>\\<^sub>C\n  \\<epsilon> a =\n  (C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C \\<epsilon> a') \\<cdot>\\<^sub>C\n  F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a) \\<cdot>\\<^sub>C \\<epsilon> a\n\ngoal (1 subgoal):\n 1. F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n          F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n    F g", "have \"... = F g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C \\<epsilon> a') \\<cdot>\\<^sub>C\n    F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a) \\<cdot>\\<^sub>C \\<epsilon> a =\n    F g", "using a a' g \\<epsilon>a \\<epsilon>a' C.comp_inv_arr C.comp_arr_dom C.comp_cod_arr"], ["proof (prove)\nusing this:\n  C.ide a\n  C.ide a'\n  \\<guillemotleft>g : G a \\<rightarrow>\\<^sub>D G a'\\<guillemotright>\n  C.inverse_arrows (\\<epsilon> a) (C.inv (\\<epsilon> a))\n  C.inverse_arrows (\\<epsilon> a') (C.inv (\\<epsilon> a'))\n  C.inverse_arrows ?f ?g \\<Longrightarrow> ?g \\<cdot>\\<^sub>C ?f = C.dom ?f\n  \\<lbrakk>C.arr ?f; C.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>C ?a = ?f\n  \\<lbrakk>C.arr ?f; C.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>C ?f = ?f\n\ngoal (1 subgoal):\n 1. (C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C \\<epsilon> a') \\<cdot>\\<^sub>C\n    F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a) \\<cdot>\\<^sub>C \\<epsilon> a =\n    F g", "by auto"], ["proof (state)\nthis:\n  (C.inv (\\<epsilon> a') \\<cdot>\\<^sub>C \\<epsilon> a') \\<cdot>\\<^sub>C\n  F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a) \\<cdot>\\<^sub>C \\<epsilon> a =\n  F g\n\ngoal (1 subgoal):\n 1. F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n          F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n    F g", "finally"], ["proof (chain)\npicking this:\n  F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n        F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n  F g", "show ?thesis"], ["proof (prove)\nusing this:\n  F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n        F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n  F g\n\ngoal (1 subgoal):\n 1. F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n          F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n    F g", "by blast"], ["proof (state)\nthis:\n  F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n        F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n  F g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n        F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n  F g\n\ngoal (1 subgoal):\n 1. G (\\<epsilon> a' \\<cdot>\\<^sub>C\n       F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) =\n    g", "moreover"], ["proof (state)\nthis:\n  F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n        F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n  F g\n\ngoal (1 subgoal):\n 1. G (\\<epsilon> a' \\<cdot>\\<^sub>C\n       F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) =\n    g", "have \"D.par (G (\\<epsilon> a' \\<cdot>\\<^sub>C F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.par\n     (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n         F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)))\n     g", "using f g"], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<epsilon> a' \\<cdot>\\<^sub>C\n                  F g \\<cdot>\\<^sub>C\n                  C.inv\n                   (\\<epsilon>\n                     a) : a \\<rightarrow>\\<^sub>C a'\\<guillemotright>\n  \\<guillemotleft>g : G a \\<rightarrow>\\<^sub>D G a'\\<guillemotright>\n\ngoal (1 subgoal):\n 1. D.par\n     (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n         F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)))\n     g", "by fastforce"], ["proof (state)\nthis:\n  D.par\n   (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n       F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)))\n   g\n\ngoal (1 subgoal):\n 1. G (\\<epsilon> a' \\<cdot>\\<^sub>C\n       F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) =\n    g", "ultimately"], ["proof (chain)\npicking this:\n  F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n        F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n  F g\n  D.par\n   (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n       F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)))\n   g", "show ?thesis"], ["proof (prove)\nusing this:\n  F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n        F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n  F g\n  D.par\n   (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n       F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)))\n   g\n\ngoal (1 subgoal):\n 1. G (\\<epsilon> a' \\<cdot>\\<^sub>C\n       F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) =\n    g", "using f g F.is_faithful"], ["proof (prove)\nusing this:\n  F (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n        F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a))) =\n  F g\n  D.par\n   (G (\\<epsilon> a' \\<cdot>\\<^sub>C\n       F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)))\n   g\n  \\<guillemotleft>\\<epsilon> a' \\<cdot>\\<^sub>C\n                  F g \\<cdot>\\<^sub>C\n                  C.inv\n                   (\\<epsilon>\n                     a) : a \\<rightarrow>\\<^sub>C a'\\<guillemotright>\n  \\<guillemotleft>g : G a \\<rightarrow>\\<^sub>D G a'\\<guillemotright>\n  \\<lbrakk>D.par ?f ?f'; F ?f = F ?f'\\<rbrakk> \\<Longrightarrow> ?f = ?f'\n\ngoal (1 subgoal):\n 1. G (\\<epsilon> a' \\<cdot>\\<^sub>C\n       F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) =\n    g", "by blast"], ["proof (state)\nthis:\n  G (\\<epsilon> a' \\<cdot>\\<^sub>C\n     F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) =\n  g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G (\\<epsilon> a' \\<cdot>\\<^sub>C\n     F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) =\n  g\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>?f : a \\<rightarrow>\\<^sub>C a'\\<guillemotright> \\<and>\n    G ?f = g", "ultimately"], ["proof (chain)\npicking this:\n  \\<guillemotleft>\\<epsilon> a' \\<cdot>\\<^sub>C\n                  F g \\<cdot>\\<^sub>C\n                  C.inv\n                   (\\<epsilon>\n                     a) : a \\<rightarrow>\\<^sub>C a'\\<guillemotright>\n  G (\\<epsilon> a' \\<cdot>\\<^sub>C\n     F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) =\n  g", "show \"\\<guillemotleft>?f : a \\<rightarrow>\\<^sub>C a'\\<guillemotright> \\<and> G ?f = g\""], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<epsilon> a' \\<cdot>\\<^sub>C\n                  F g \\<cdot>\\<^sub>C\n                  C.inv\n                   (\\<epsilon>\n                     a) : a \\<rightarrow>\\<^sub>C a'\\<guillemotright>\n  G (\\<epsilon> a' \\<cdot>\\<^sub>C\n     F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) =\n  g\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<epsilon> a' \\<cdot>\\<^sub>C\n                    F g \\<cdot>\\<^sub>C\n                    C.inv\n                     (\\<epsilon>\n                       a) : a \\<rightarrow>\\<^sub>C a'\\<guillemotright> \\<and>\n    G (\\<epsilon> a' \\<cdot>\\<^sub>C\n       F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) =\n    g", "by blast"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<epsilon> a' \\<cdot>\\<^sub>C\n                  F g \\<cdot>\\<^sub>C\n                  C.inv\n                   (\\<epsilon>\n                     a) : a \\<rightarrow>\\<^sub>C a'\\<guillemotright> \\<and>\n  G (\\<epsilon> a' \\<cdot>\\<^sub>C\n     F g \\<cdot>\\<^sub>C C.inv (\\<epsilon> a)) =\n  g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>f.\n     \\<guillemotleft>f : a \\<rightarrow>\\<^sub>C a'\\<guillemotright> \\<and>\n     G f = g\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* I'm not sure why I had to close and re-open the context here in order to\n   * get the G_is_full fact in the interpretation GF. *)"], ["", "context equivalence_of_categories\n  begin"], ["", "interpretation \\<epsilon>_inv: inverse_transformation C C \\<open>F o G\\<close> C.map \\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) (F \\<circ> G)\n     C.map \\<epsilon>", ".."], ["", "interpretation \\<eta>_inv: inverse_transformation D D D.map \\<open>G o F\\<close> \\<eta>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n     (G \\<circ> F) \\<eta>", ".."], ["", "interpretation GF: equivalence_of_categories D C G F \\<epsilon>_inv.map \\<eta>_inv.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence_of_categories (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) G F\n     \\<epsilon>_inv.map \\<eta>_inv.map", ".."], ["", "lemma F_is_full:\n    shows \"full_functor D C F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. full_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "using GF.G_is_full"], ["proof (prove)\nusing this:\n  full_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n\ngoal (1 subgoal):\n 1. full_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "by simp"], ["", "end"], ["", "text \\<open>\n    Traditionally the term \"equivalence of categories\" is also used for a functor\n    that is part of an equivalence of categories.  However, it seems best to use\n    that term for a situation in which all of the structure of an equivalence is\n    explicitly given, and to have a different term for one of the functors involved.\n\\<close>"], ["", "locale equivalence_functor =\n    C: category C +\n    D: category D +\n    \"functor\" C D G\n  for C :: \"'c comp\"     (infixr \"\\<cdot>\\<^sub>C\" 55)\n  and D :: \"'d comp\"     (infixr \"\\<cdot>\\<^sub>D\" 55)\n  and G :: \"'c \\<Rightarrow> 'd\" +\n  assumes induces_equivalence: \"\\<exists>F \\<eta> \\<epsilon>. equivalence_of_categories C D F G \\<eta> \\<epsilon>\"\n  begin"], ["", "notation C.in_hom    (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>C _\\<guillemotright>\")"], ["", "notation D.in_hom    (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>D _\\<guillemotright>\")"], ["", "end"], ["", "sublocale equivalence_of_categories \\<subseteq> equivalence_functor C D G"], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "using equivalence_of_categories_axioms"], ["proof (prove)\nusing this:\n  equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. equivalence_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "by (unfold_locales, blast)"], ["", "text \\<open>\n    An equivalence functor is fully faithful and essentially surjective.\n\\<close>"], ["", "sublocale equivalence_functor \\<subseteq> fully_faithful_functor C D G"], ["proof (prove)\ngoal (1 subgoal):\n 1. fully_faithful_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fully_faithful_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "obtain F \\<eta> \\<epsilon> where 1: \"equivalence_of_categories C D F G \\<eta> \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>F \\<eta> \\<epsilon>.\n        equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G\n         \\<eta> \\<epsilon> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using induces_equivalence"], ["proof (prove)\nusing this:\n  \\<exists>F \\<eta> \\<epsilon>.\n     equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G\n      \\<eta> \\<epsilon>\n\ngoal (1 subgoal):\n 1. (\\<And>F \\<eta> \\<epsilon>.\n        equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G\n         \\<eta> \\<epsilon> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. fully_faithful_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "interpret equivalence_of_categories C D F G \\<eta> \\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n     \\<epsilon>", "using 1"], ["proof (prove)\nusing this:\n  equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n     \\<epsilon>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. fully_faithful_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "show \"fully_faithful_functor C D G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fully_faithful_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "using G_is_full G_is_faithful fully_faithful_functor.intro"], ["proof (prove)\nusing this:\n  full_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n  faithful_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n  \\<lbrakk>faithful_functor ?A ?B ?F; full_functor ?A ?B ?F\\<rbrakk>\n  \\<Longrightarrow> fully_faithful_functor ?A ?B ?F\n\ngoal (1 subgoal):\n 1. fully_faithful_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "by auto"], ["proof (state)\nthis:\n  fully_faithful_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale equivalence_functor \\<subseteq> essentially_surjective_functor C D G"], ["proof (prove)\ngoal (1 subgoal):\n 1. essentially_surjective_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. essentially_surjective_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "obtain F \\<eta> \\<epsilon> where 1: \"equivalence_of_categories C D F G \\<eta> \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>F \\<eta> \\<epsilon>.\n        equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G\n         \\<eta> \\<epsilon> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using induces_equivalence"], ["proof (prove)\nusing this:\n  \\<exists>F \\<eta> \\<epsilon>.\n     equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G\n      \\<eta> \\<epsilon>\n\ngoal (1 subgoal):\n 1. (\\<And>F \\<eta> \\<epsilon>.\n        equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G\n         \\<eta> \\<epsilon> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. essentially_surjective_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "interpret equivalence_of_categories C D F G \\<eta> \\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n     \\<epsilon>", "using 1"], ["proof (prove)\nusing this:\n  equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n     \\<epsilon>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. essentially_surjective_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "show \"essentially_surjective_functor C D G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. essentially_surjective_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "using G_is_essentially_surjective"], ["proof (prove)\nusing this:\n  essentially_surjective_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n\ngoal (1 subgoal):\n 1. essentially_surjective_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "by auto"], ["proof (state)\nthis:\n  essentially_surjective_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n    A special case of an equivalence functor is an endofunctor \\<open>F\\<close> equipped with\n    a natural isomorphism from \\<open>F\\<close> to the identity functor.\n\\<close>"], ["", "context endofunctor\n  begin"], ["", "lemma isomorphic_to_identity_is_equivalence:\n    assumes \"natural_isomorphism A A F A.map \\<phi>\"\n    shows \"equivalence_functor A A F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence_functor (\\<cdot>) (\\<cdot>) F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. equivalence_functor (\\<cdot>) (\\<cdot>) F", "interpret \\<phi>: natural_isomorphism A A F A.map \\<phi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>) (\\<cdot>) F A.map \\<phi>", "using assms"], ["proof (prove)\nusing this:\n  natural_isomorphism (\\<cdot>) (\\<cdot>) F A.map \\<phi>\n\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>) (\\<cdot>) F A.map \\<phi>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. equivalence_functor (\\<cdot>) (\\<cdot>) F", "interpret \\<phi>': inverse_transformation A A F A.map \\<phi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation (\\<cdot>) (\\<cdot>) F A.map \\<phi>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. equivalence_functor (\\<cdot>) (\\<cdot>) F", "interpret F\\<phi>': natural_isomorphism A A F \\<open>F o F\\<close> \\<open>F o \\<phi>'.map\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>) (\\<cdot>) F (F \\<circ> F)\n     (F \\<circ> \\<phi>'.map)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>) (\\<cdot>) F (F \\<circ> F)\n     (F \\<circ> \\<phi>'.map)", "interpret F\\<phi>': natural_transformation A A F \\<open>F o F\\<close> \\<open>F o \\<phi>'.map\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>) (\\<cdot>) F (F \\<circ> F)\n     (F \\<circ> \\<phi>'.map)", "using \\<phi>'.natural_transformation_axioms functor_axioms\n                horizontal_composite [of A A A.map F \\<phi>'.map A F F F]"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>) (\\<cdot>) A.map F \\<phi>'.map\n  functor (\\<cdot>) (\\<cdot>) F\n  \\<lbrakk>natural_transformation (\\<cdot>) (\\<cdot>) A.map F \\<phi>'.map;\n   natural_transformation (\\<cdot>) (\\<cdot>) F F F\\<rbrakk>\n  \\<Longrightarrow> natural_transformation (\\<cdot>) (\\<cdot>)\n                     (F \\<circ> A.map) (F \\<circ> F) (F \\<circ> \\<phi>'.map)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>) (\\<cdot>) F (F \\<circ> F)\n     (F \\<circ> \\<phi>'.map)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>) (\\<cdot>) F (F \\<circ> F)\n     (F \\<circ> \\<phi>'.map)", "show \"natural_isomorphism A A F (F o F) (F o \\<phi>'.map)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>) (\\<cdot>) F (F \\<circ> F)\n     (F \\<circ> \\<phi>'.map)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. A.ide a \\<Longrightarrow> A.iso ((F \\<circ> \\<phi>'.map) a)", "using \\<phi>'.components_are_iso"], ["proof (prove)\nusing this:\n  A.ide ?a \\<Longrightarrow> A.iso (\\<phi>'.map ?a)\n\ngoal (1 subgoal):\n 1. \\<And>a. A.ide a \\<Longrightarrow> A.iso ((F \\<circ> \\<phi>'.map) a)", "by fastforce"], ["proof (state)\nthis:\n  natural_isomorphism (\\<cdot>) (\\<cdot>) F (F \\<circ> F)\n   (F \\<circ> \\<phi>'.map)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. equivalence_functor (\\<cdot>) (\\<cdot>) F", "interpret F\\<phi>'o\\<phi>': vertical_composite A A A.map F \\<open>F o F\\<close> \\<phi>'.map \\<open>F o \\<phi>'.map\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>) (\\<cdot>) A.map F (F \\<circ> F) \\<phi>'.map\n     (F \\<circ> \\<phi>'.map)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. equivalence_functor (\\<cdot>) (\\<cdot>) F", "interpret F\\<phi>'o\\<phi>': natural_isomorphism A A A.map \\<open>F o F\\<close> F\\<phi>'o\\<phi>'.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>) (\\<cdot>) A.map (F \\<circ> F)\n     F\\<phi>'o\\<phi>'.map", "using \\<phi>'.natural_isomorphism_axioms F\\<phi>'.natural_isomorphism_axioms\n              natural_isomorphisms_compose"], ["proof (prove)\nusing this:\n  natural_isomorphism (\\<cdot>) (\\<cdot>) A.map F \\<phi>'.map\n  natural_isomorphism (\\<cdot>) (\\<cdot>) F (F \\<circ> F)\n   (F \\<circ> \\<phi>'.map)\n  \\<lbrakk>natural_isomorphism ?A ?B ?F ?G ?\\<sigma>;\n   natural_isomorphism ?A ?B ?G ?H ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_isomorphism ?A ?B ?F ?H\n                     (vertical_composite.map ?A ?B ?\\<sigma> ?\\<tau>)\n\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>) (\\<cdot>) A.map (F \\<circ> F)\n     F\\<phi>'o\\<phi>'.map", "by fast"], ["proof (state)\ngoal (1 subgoal):\n 1. equivalence_functor (\\<cdot>) (\\<cdot>) F", "interpret inv_F\\<phi>'o\\<phi>': inverse_transformation A A A.map \\<open>F o F\\<close> F\\<phi>'o\\<phi>'.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation (\\<cdot>) (\\<cdot>) A.map (F \\<circ> F)\n     F\\<phi>'o\\<phi>'.map", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. equivalence_functor (\\<cdot>) (\\<cdot>) F", "interpret F: equivalence_of_categories A A F F F\\<phi>'o\\<phi>'.map inv_F\\<phi>'o\\<phi>'.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence_of_categories (\\<cdot>) (\\<cdot>) F F F\\<phi>'o\\<phi>'.map\n     inv_F\\<phi>'o\\<phi>'.map", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. equivalence_functor (\\<cdot>) (\\<cdot>) F", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence_functor (\\<cdot>) (\\<cdot>) F", ".."], ["proof (state)\nthis:\n  equivalence_functor (\\<cdot>) (\\<cdot>) F\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>\n    An adjoint equivalence is an equivalence of categories that is also an adjunction.\n\\<close>"], ["", "locale adjoint_equivalence =\n    unit_counit_adjunction C D F G \\<eta> \\<epsilon> +\n    \\<eta>: natural_isomorphism D D D.map \"G o F\" \\<eta> +\n    \\<epsilon>: natural_isomorphism C C \"F o G\" C.map \\<epsilon>\n  for C :: \"'c comp\"     (infixr \"\\<cdot>\\<^sub>C\" 55)\n  and D :: \"'d comp\"     (infixr \"\\<cdot>\\<^sub>D\" 55)\n  and F :: \"'d \\<Rightarrow> 'c\"\n  and G :: \"'c \\<Rightarrow> 'd\"\n  and \\<eta> :: \"'d \\<Rightarrow> 'd\"\n  and \\<epsilon> :: \"'c \\<Rightarrow> 'c\""], ["", "text \\<open>\n    An adjoint equivalence is clearly an equivalence of categories.\n\\<close>"], ["", "sublocale adjoint_equivalence \\<subseteq> equivalence_of_categories"], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n     \\<epsilon>", ".."], ["", "context adjoint_equivalence\n  begin"], ["", "text \\<open>\n      The triangle identities for an adjunction reduce to inverse relations when\n      \\<open>\\<eta>\\<close> and \\<open>\\<epsilon>\\<close> are natural isomorphisms.\n\\<close>"], ["", "lemma triangle_G':\n    assumes \"C.ide a\"\n    shows \"D.inverse_arrows (\\<eta> (G a)) (G (\\<epsilon> a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.inverse_arrows (\\<eta> (G a)) (G (\\<epsilon> a))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. D.ide (G (\\<epsilon> a) \\<cdot>\\<^sub>D \\<eta> (G a))\n 2. D.ide (\\<eta> (G a) \\<cdot>\\<^sub>D G (\\<epsilon> a))", "show \"D.ide (G (\\<epsilon> a) \\<cdot>\\<^sub>D \\<eta> (G a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.ide (G (\\<epsilon> a) \\<cdot>\\<^sub>D \\<eta> (G a))", "using assms triangle_G G\\<epsilon>o\\<eta>G.map_simp_ide"], ["proof (prove)\nusing this:\n  C.ide a\n  G\\<epsilon>o\\<eta>G.map = G\n  C.ide ?a \\<Longrightarrow>\n  G\\<epsilon>o\\<eta>G.map ?a =\n  (G \\<circ> \\<epsilon>) ?a \\<cdot>\\<^sub>D (\\<eta> \\<circ> G) ?a\n\ngoal (1 subgoal):\n 1. D.ide (G (\\<epsilon> a) \\<cdot>\\<^sub>D \\<eta> (G a))", "by fastforce"], ["proof (state)\nthis:\n  D.ide (G (\\<epsilon> a) \\<cdot>\\<^sub>D \\<eta> (G a))\n\ngoal (1 subgoal):\n 1. D.ide (\\<eta> (G a) \\<cdot>\\<^sub>D G (\\<epsilon> a))", "thus \"D.ide (\\<eta> (G a) \\<cdot>\\<^sub>D G (\\<epsilon> a))\""], ["proof (prove)\nusing this:\n  D.ide (G (\\<epsilon> a) \\<cdot>\\<^sub>D \\<eta> (G a))\n\ngoal (1 subgoal):\n 1. D.ide (\\<eta> (G a) \\<cdot>\\<^sub>D G (\\<epsilon> a))", "using assms D.section_retraction_of_iso [of \"G (\\<epsilon> a)\" \"\\<eta> (G a)\"]"], ["proof (prove)\nusing this:\n  D.ide (G (\\<epsilon> a) \\<cdot>\\<^sub>D \\<eta> (G a))\n  C.ide a\n  \\<lbrakk>D.iso (G (\\<epsilon> a));\n   D.ide (\\<eta> (G a) \\<cdot>\\<^sub>D G (\\<epsilon> a))\\<rbrakk>\n  \\<Longrightarrow> D.inverse_arrows (G (\\<epsilon> a)) (\\<eta> (G a))\n  \\<lbrakk>D.iso (G (\\<epsilon> a));\n   D.ide (G (\\<epsilon> a) \\<cdot>\\<^sub>D \\<eta> (G a))\\<rbrakk>\n  \\<Longrightarrow> D.inverse_arrows (G (\\<epsilon> a)) (\\<eta> (G a))\n\ngoal (1 subgoal):\n 1. D.ide (\\<eta> (G a) \\<cdot>\\<^sub>D G (\\<epsilon> a))", "by auto"], ["proof (state)\nthis:\n  D.ide (\\<eta> (G a) \\<cdot>\\<^sub>D G (\\<epsilon> a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma triangle_F':\n    assumes \"D.ide b\"\n    shows \"C.inverse_arrows (F (\\<eta> b)) (\\<epsilon> (F b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inverse_arrows (F (\\<eta> b)) (\\<epsilon> (F b))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. C.ide (\\<epsilon> (F b) \\<cdot>\\<^sub>C F (\\<eta> b))\n 2. C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b))", "show \"C.ide (\\<epsilon> (F b) \\<cdot>\\<^sub>C F (\\<eta> b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide (\\<epsilon> (F b) \\<cdot>\\<^sub>C F (\\<eta> b))", "using assms triangle_F \\<epsilon>FoF\\<eta>.map_simp_ide"], ["proof (prove)\nusing this:\n  D.ide b\n  \\<epsilon>FoF\\<eta>.map = F\n  D.ide ?a \\<Longrightarrow>\n  \\<epsilon>FoF\\<eta>.map ?a =\n  (\\<epsilon> \\<circ> F) ?a \\<cdot>\\<^sub>C (F \\<circ> \\<eta>) ?a\n\ngoal (1 subgoal):\n 1. C.ide (\\<epsilon> (F b) \\<cdot>\\<^sub>C F (\\<eta> b))", "by auto"], ["proof (state)\nthis:\n  C.ide (\\<epsilon> (F b) \\<cdot>\\<^sub>C F (\\<eta> b))\n\ngoal (1 subgoal):\n 1. C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b))", "thus \"C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b))\""], ["proof (prove)\nusing this:\n  C.ide (\\<epsilon> (F b) \\<cdot>\\<^sub>C F (\\<eta> b))\n\ngoal (1 subgoal):\n 1. C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b))", "using assms C.section_retraction_of_iso [of \"\\<epsilon> (F b)\" \"F (\\<eta> b)\"]"], ["proof (prove)\nusing this:\n  C.ide (\\<epsilon> (F b) \\<cdot>\\<^sub>C F (\\<eta> b))\n  D.ide b\n  \\<lbrakk>C.iso (\\<epsilon> (F b));\n   C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b))\\<rbrakk>\n  \\<Longrightarrow> C.inverse_arrows (\\<epsilon> (F b)) (F (\\<eta> b))\n  \\<lbrakk>C.iso (\\<epsilon> (F b));\n   C.ide (\\<epsilon> (F b) \\<cdot>\\<^sub>C F (\\<eta> b))\\<rbrakk>\n  \\<Longrightarrow> C.inverse_arrows (\\<epsilon> (F b)) (F (\\<eta> b))\n\ngoal (1 subgoal):\n 1. C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b))", "by auto"], ["proof (state)\nthis:\n  C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n      An adjoint equivalence can be dualized by interchanging the two functors and inverting\n      the natural isomorphisms.  This is somewhat awkward to prove, but probably useful to have\n      done it once and for all.\n\\<close>"], ["", "lemma dual_equivalence:\n    assumes \"adjoint_equivalence C D F G \\<eta> \\<epsilon>\"\n    shows \"adjoint_equivalence D C G F (inverse_transformation.map C C (C.map) \\<epsilon>)\n                                       (inverse_transformation.map D D (G o F) \\<eta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) G F\n     (inverse_transformation.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n       \\<epsilon>)\n     (inverse_transformation.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) GF.map\n       \\<eta>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) G F\n     (inverse_transformation.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n       \\<epsilon>)\n     (inverse_transformation.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) GF.map\n       \\<eta>)", "interpret adjoint_equivalence C D F G \\<eta> \\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n     \\<epsilon>", "using assms"], ["proof (prove)\nusing this:\n  adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n     \\<epsilon>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) G F\n     (inverse_transformation.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n       \\<epsilon>)\n     (inverse_transformation.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) GF.map\n       \\<eta>)", "interpret \\<epsilon>': inverse_transformation C C \\<open>F o G\\<close> C.map \\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) FG.map C.map\n     \\<epsilon>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) G F\n     \\<epsilon>'.map\n     (inverse_transformation.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) GF.map\n       \\<eta>)", "interpret \\<eta>': inverse_transformation D D D.map \\<open>G o F\\<close> \\<eta>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map GF.map\n     \\<eta>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) G F\n     \\<epsilon>'.map \\<eta>'.map", "interpret G\\<epsilon>': natural_transformation C D G \\<open>G o F o G\\<close> \\<open>G o \\<epsilon>'.map\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G GFG.map\n     (G \\<circ> \\<epsilon>'.map)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G GFG.map\n     (G \\<circ> \\<epsilon>'.map)", "have \"natural_transformation C D G (G o (F o G)) (G o \\<epsilon>'.map)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n     (G \\<circ> FG.map) (G \\<circ> \\<epsilon>'.map)", "using G.natural_transformation_axioms \\<epsilon>'.natural_transformation_axioms\n                horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G G\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map FG.map\n   \\<epsilon>'.map\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n     (G \\<circ> FG.map) (G \\<circ> \\<epsilon>'.map)", "by fastforce"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n   (G \\<circ> FG.map) (G \\<circ> \\<epsilon>'.map)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G GFG.map\n     (G \\<circ> \\<epsilon>'.map)", "thus \"natural_transformation C D G (G o F o G) (G o \\<epsilon>'.map)\""], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n   (G \\<circ> FG.map) (G \\<circ> \\<epsilon>'.map)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G GFG.map\n     (G \\<circ> \\<epsilon>'.map)", "using o_assoc"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n   (G \\<circ> FG.map) (G \\<circ> \\<epsilon>'.map)\n  ?f \\<circ> (?g \\<circ> ?h) = ?f \\<circ> ?g \\<circ> ?h\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G GFG.map\n     (G \\<circ> \\<epsilon>'.map)", "by metis"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G GFG.map\n   (G \\<circ> \\<epsilon>'.map)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) G F\n     \\<epsilon>'.map \\<eta>'.map", "interpret \\<eta>'G: natural_transformation C D \\<open>G o F o G\\<close> G \\<open>\\<eta>'.map o G\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GFG.map G\n     (\\<eta>'.map \\<circ> G)", "using \\<eta>'.natural_transformation_axioms G.natural_transformation_axioms\n              horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) GF.map D.map\n   \\<eta>'.map\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G G\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GFG.map G\n     (\\<eta>'.map \\<circ> G)", "by fastforce"], ["proof (state)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) G F\n     \\<epsilon>'.map \\<eta>'.map", "interpret \\<epsilon>'F: natural_transformation D C F \\<open>F o G o F\\<close> \\<open>\\<epsilon>'.map o F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FGF.map\n     (\\<epsilon>'.map \\<circ> F)", "using \\<epsilon>'.natural_transformation_axioms F.natural_transformation_axioms\n              horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map FG.map\n   \\<epsilon>'.map\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F F\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FGF.map\n     (\\<epsilon>'.map \\<circ> F)", "by fastforce"], ["proof (state)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) G F\n     \\<epsilon>'.map \\<eta>'.map", "interpret F\\<eta>': natural_transformation D C \\<open>F o G o F\\<close> F \\<open>F o \\<eta>'.map\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) FGF.map F\n     (F \\<circ> \\<eta>'.map)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) FGF.map F\n     (F \\<circ> \\<eta>'.map)", "have \"natural_transformation D C (F o (G o F)) F (F o \\<eta>'.map)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C)\n     (F \\<circ> GF.map) F (F \\<circ> \\<eta>'.map)", "using \\<eta>'.natural_transformation_axioms F.natural_transformation_axioms\n                horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) GF.map D.map\n   \\<eta>'.map\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F F\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C)\n     (F \\<circ> GF.map) F (F \\<circ> \\<eta>'.map)", "by fastforce"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C)\n   (F \\<circ> GF.map) F (F \\<circ> \\<eta>'.map)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) FGF.map F\n     (F \\<circ> \\<eta>'.map)", "thus \"natural_transformation D C (F o G o F) F (F o \\<eta>'.map)\""], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C)\n   (F \\<circ> GF.map) F (F \\<circ> \\<eta>'.map)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) FGF.map F\n     (F \\<circ> \\<eta>'.map)", "using o_assoc"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C)\n   (F \\<circ> GF.map) F (F \\<circ> \\<eta>'.map)\n  ?f \\<circ> (?g \\<circ> ?h) = ?f \\<circ> ?g \\<circ> ?h\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) FGF.map F\n     (F \\<circ> \\<eta>'.map)", "by metis"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) FGF.map F\n   (F \\<circ> \\<eta>'.map)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) G F\n     \\<epsilon>'.map \\<eta>'.map", "interpret F\\<eta>'o\\<epsilon>'F: vertical_composite D C F \\<open>(F o G) o F\\<close> F \\<open>\\<epsilon>'.map o F\\<close> \\<open>F o \\<eta>'.map\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FGF.map F\n     (\\<epsilon>'.map \\<circ> F) (F \\<circ> \\<eta>'.map)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) G F\n     \\<epsilon>'.map \\<eta>'.map", "interpret \\<eta>'GoG\\<epsilon>': vertical_composite C D G \\<open>G o F o G\\<close> G \\<open>G o \\<epsilon>'.map\\<close> \\<open>\\<eta>'.map o G\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G GFG.map G\n     (G \\<circ> \\<epsilon>'.map) (\\<eta>'.map \\<circ> G)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) G F\n     \\<epsilon>'.map \\<eta>'.map", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) G F\n     \\<epsilon>'.map \\<eta>'.map", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<eta>'GoG\\<epsilon>'.map = G\n 2. F\\<eta>'o\\<epsilon>'F.map = F", "show \"\\<eta>'GoG\\<epsilon>'.map = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>'GoG\\<epsilon>'.map = G", "proof (intro NaturalTransformation.eqI)"], ["proof (state)\ngoal (3 subgoals):\n 1. natural_transformation ?A ?B ?F ?G \\<eta>'GoG\\<epsilon>'.map\n 2. natural_transformation ?A ?B ?F ?G G\n 3. \\<And>a.\n       partial_magma.ide ?A a \\<Longrightarrow>\n       \\<eta>'GoG\\<epsilon>'.map a = G a", "show \"natural_transformation C D G G G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G G", "using G.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G G\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G G", "by auto"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G G\n\ngoal (2 subgoals):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G\n     \\<eta>'GoG\\<epsilon>'.map\n 2. \\<And>a. C.ide a \\<Longrightarrow> \\<eta>'GoG\\<epsilon>'.map a = G a", "show \"natural_transformation C D G G \\<eta>'GoG\\<epsilon>'.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G\n     \\<eta>'GoG\\<epsilon>'.map", "using \\<eta>'GoG\\<epsilon>'.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G\n   \\<eta>'GoG\\<epsilon>'.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G\n     \\<eta>'GoG\\<epsilon>'.map", "by auto"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G\n   \\<eta>'GoG\\<epsilon>'.map\n\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> \\<eta>'GoG\\<epsilon>'.map a = G a", "show \"\\<And>a. C.ide a \\<Longrightarrow> \\<eta>'GoG\\<epsilon>'.map a = G a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> \\<eta>'GoG\\<epsilon>'.map a = G a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> \\<eta>'GoG\\<epsilon>'.map a = G a", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> \\<eta>'GoG\\<epsilon>'.map a = G a", "assume a: \"C.ide a\""], ["proof (state)\nthis:\n  C.ide a\n\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> \\<eta>'GoG\\<epsilon>'.map a = G a", "show \"\\<eta>'GoG\\<epsilon>'.map a = G a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>'GoG\\<epsilon>'.map a = G a", "using a \\<eta>'GoG\\<epsilon>'.map_simp_ide triangle_G'\n                    \\<eta>.components_are_iso \\<epsilon>.components_are_iso G.preserves_ide\n                    \\<eta>'.inverts_components \\<epsilon>'.inverts_components\n                    D.inverse_unique G.preserves_inverse_arrows G\\<epsilon>o\\<eta>G.map_simp_ide\n                    D.inverse_arrows_sym triangle_G"], ["proof (prove)\nusing this:\n  C.ide a\n  C.ide ?a \\<Longrightarrow>\n  \\<eta>'GoG\\<epsilon>'.map ?a =\n  (\\<eta>'.map \\<circ> G) ?a \\<cdot>\\<^sub>D (G \\<circ> \\<epsilon>'.map) ?a\n  C.ide ?a \\<Longrightarrow>\n  D.inverse_arrows (\\<eta> (G ?a)) (G (\\<epsilon> ?a))\n  D.ide ?a \\<Longrightarrow> D.iso (\\<eta> ?a)\n  C.ide ?a \\<Longrightarrow> C.iso (\\<epsilon> ?a)\n  C.ide ?a \\<Longrightarrow> D.ide (G ?a)\n  D.ide ?a \\<Longrightarrow> D.inverse_arrows (\\<eta> ?a) (\\<eta>'.map ?a)\n  C.ide ?a \\<Longrightarrow>\n  C.inverse_arrows (\\<epsilon> ?a) (\\<epsilon>'.map ?a)\n  D.inverse_arrows ?f ?g \\<Longrightarrow> D.inv ?f = ?g\n  C.inverse_arrows ?f ?g \\<Longrightarrow> D.inverse_arrows (G ?f) (G ?g)\n  C.ide ?a \\<Longrightarrow>\n  G\\<epsilon>o\\<eta>G.map ?a =\n  (G \\<circ> \\<epsilon>) ?a \\<cdot>\\<^sub>D (\\<eta> \\<circ> G) ?a\n  D.inverse_arrows ?f ?g = D.inverse_arrows ?g ?f\n  G\\<epsilon>o\\<eta>G.map = G\n\ngoal (1 subgoal):\n 1. \\<eta>'GoG\\<epsilon>'.map a = G a", "by (metis o_apply)"], ["proof (state)\nthis:\n  \\<eta>'GoG\\<epsilon>'.map a = G a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C.ide ?a \\<Longrightarrow> \\<eta>'GoG\\<epsilon>'.map ?a = G ?a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<eta>'GoG\\<epsilon>'.map = G\n\ngoal (1 subgoal):\n 1. F\\<eta>'o\\<epsilon>'F.map = F", "show \"F\\<eta>'o\\<epsilon>'F.map = F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F\\<eta>'o\\<epsilon>'F.map = F", "proof (intro NaturalTransformation.eqI)"], ["proof (state)\ngoal (3 subgoals):\n 1. natural_transformation ?A ?B ?F ?G F\\<eta>'o\\<epsilon>'F.map\n 2. natural_transformation ?A ?B ?F ?G F\n 3. \\<And>a.\n       partial_magma.ide ?A a \\<Longrightarrow>\n       F\\<eta>'o\\<epsilon>'F.map a = F a", "show \"natural_transformation D C F F F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F F", "using F.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F F\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F F", "by auto"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F F\n\ngoal (2 subgoals):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F\n     F\\<eta>'o\\<epsilon>'F.map\n 2. \\<And>a. D.ide a \\<Longrightarrow> F\\<eta>'o\\<epsilon>'F.map a = F a", "show \"natural_transformation D C F F F\\<eta>'o\\<epsilon>'F.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F\n     F\\<eta>'o\\<epsilon>'F.map", "using F\\<eta>'o\\<epsilon>'F.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F\n   F\\<eta>'o\\<epsilon>'F.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F\n     F\\<eta>'o\\<epsilon>'F.map", "by auto"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F\n   F\\<eta>'o\\<epsilon>'F.map\n\ngoal (1 subgoal):\n 1. \\<And>a. D.ide a \\<Longrightarrow> F\\<eta>'o\\<epsilon>'F.map a = F a", "show \"\\<And>b. D.ide b \\<Longrightarrow> F\\<eta>'o\\<epsilon>'F.map b = F b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b. D.ide b \\<Longrightarrow> F\\<eta>'o\\<epsilon>'F.map b = F b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b. D.ide b \\<Longrightarrow> F\\<eta>'o\\<epsilon>'F.map b = F b", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b. D.ide b \\<Longrightarrow> F\\<eta>'o\\<epsilon>'F.map b = F b", "assume b: \"D.ide b\""], ["proof (state)\nthis:\n  D.ide b\n\ngoal (1 subgoal):\n 1. \\<And>b. D.ide b \\<Longrightarrow> F\\<eta>'o\\<epsilon>'F.map b = F b", "show \"F\\<eta>'o\\<epsilon>'F.map b = F b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F\\<eta>'o\\<epsilon>'F.map b = F b", "using b F\\<eta>'o\\<epsilon>'F.map_simp_ide \\<epsilon>FoF\\<eta>.map_simp_ide triangle_F triangle_F'\n                    \\<eta>.components_are_iso \\<epsilon>.components_are_iso G.preserves_ide\n                    \\<eta>'.inverts_components \\<epsilon>'.inverts_components F.preserves_ide\n                    C.inverse_unique F.preserves_inverse_arrows C.inverse_arrows_sym"], ["proof (prove)\nusing this:\n  D.ide b\n  D.ide ?a \\<Longrightarrow>\n  F\\<eta>'o\\<epsilon>'F.map ?a =\n  (F \\<circ> \\<eta>'.map) ?a \\<cdot>\\<^sub>C (\\<epsilon>'.map \\<circ> F) ?a\n  D.ide ?a \\<Longrightarrow>\n  \\<epsilon>FoF\\<eta>.map ?a =\n  (\\<epsilon> \\<circ> F) ?a \\<cdot>\\<^sub>C (F \\<circ> \\<eta>) ?a\n  \\<epsilon>FoF\\<eta>.map = F\n  D.ide ?b \\<Longrightarrow>\n  C.inverse_arrows (F (\\<eta> ?b)) (\\<epsilon> (F ?b))\n  D.ide ?a \\<Longrightarrow> D.iso (\\<eta> ?a)\n  C.ide ?a \\<Longrightarrow> C.iso (\\<epsilon> ?a)\n  C.ide ?a \\<Longrightarrow> D.ide (G ?a)\n  D.ide ?a \\<Longrightarrow> D.inverse_arrows (\\<eta> ?a) (\\<eta>'.map ?a)\n  C.ide ?a \\<Longrightarrow>\n  C.inverse_arrows (\\<epsilon> ?a) (\\<epsilon>'.map ?a)\n  D.ide ?a \\<Longrightarrow> C.ide (F ?a)\n  C.inverse_arrows ?f ?g \\<Longrightarrow> C.inv ?f = ?g\n  D.inverse_arrows ?f ?g \\<Longrightarrow> C.inverse_arrows (F ?f) (F ?g)\n  C.inverse_arrows ?f ?g = C.inverse_arrows ?g ?f\n\ngoal (1 subgoal):\n 1. F\\<eta>'o\\<epsilon>'F.map b = F b", "by (metis o_apply)"], ["proof (state)\nthis:\n  F\\<eta>'o\\<epsilon>'F.map b = F b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  D.ide ?b \\<Longrightarrow> F\\<eta>'o\\<epsilon>'F.map ?b = F ?b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F\\<eta>'o\\<epsilon>'F.map = F\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) G F\n   \\<epsilon>'.map \\<eta>'.map\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>\n    Every fully faithful and essentially surjective functor underlies an adjoint equivalence.\n    To prove this without repeating things that were already proved in @{theory Category3.Adjunction},\n    we first show that a fully faithful and essentially surjective functor is a left adjoint\n    functor, and then we show that if the left adjoint in a unit-counit adjunction is\n    fully faithful and essentially surjective, then the unit and counit are natural isomorphisms;\n    hence the adjunction is in fact an adjoint equivalence.\n\\<close>"], ["", "locale fully_faithful_and_essentially_surjective_functor =\n    C: category C +\n    D: category D +\n    fully_faithful_functor C D F +\n    essentially_surjective_functor C D F\n    for C :: \"'c comp\"     (infixr \"\\<cdot>\\<^sub>C\" 55)\n    and D :: \"'d comp\"     (infixr \"\\<cdot>\\<^sub>D\" 55)\n    and F :: \"'c \\<Rightarrow> 'd\"\n  begin"], ["", "notation C.in_hom      (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>C _\\<guillemotright>\")"], ["", "notation D.in_hom      (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>D _\\<guillemotright>\")"], ["", "lemma is_left_adjoint_functor:\n    shows \"left_adjoint_functor C D F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       D.ide y \\<Longrightarrow>\n       \\<exists>x e.\n          terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F\n           x y e", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       D.ide y \\<Longrightarrow>\n       \\<exists>x e.\n          terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F\n           x y e", "assume y: \"D.ide y\""], ["proof (state)\nthis:\n  D.ide y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       D.ide y \\<Longrightarrow>\n       \\<exists>x e.\n          terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F\n           x y e", "let ?x = \"SOME x. C.ide x \\<and> (\\<exists>e. D.iso e \\<and> \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       D.ide y \\<Longrightarrow>\n       \\<exists>x e.\n          terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F\n           x y e", "let ?e = \"SOME e. D.iso e \\<and> \\<guillemotleft>e : F ?x \\<rightarrow>\\<^sub>D y\\<guillemotright>\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       D.ide y \\<Longrightarrow>\n       \\<exists>x e.\n          terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F\n           x y e", "have \"\\<exists>x e. D.iso e \\<and> terminal_arrow_from_functor C D F x y e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x e.\n       D.iso e \\<and>\n       terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n        e", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x e.\n       D.iso e \\<and>\n       terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n        e", "have \"\\<exists>x. D.iso ?e \\<and> terminal_arrow_from_functor C D F x y ?e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       D.iso\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n       terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       D.iso\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n       terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)", "have x: \"C.ide ?x \\<and> (\\<exists>e. D.iso e \\<and> \\<guillemotleft>e : F ?x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide\n     (SOME x.\n         C.ide x \\<and>\n         (\\<exists>e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<and>\n    (\\<exists>e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)", "using y essentially_surjective\n                  someI_ex [of \"\\<lambda>x. C.ide x \\<and> (\\<exists>e. D.iso e \\<and> \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\"]"], ["proof (prove)\nusing this:\n  D.ide y\n  D.ide ?b \\<Longrightarrow>\n  \\<exists>a. C.ide a \\<and> D.isomorphic (F a) ?b\n  \\<exists>x.\n     C.ide x \\<and>\n     (\\<exists>e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<Longrightarrow>\n  C.ide\n   (SOME x.\n       C.ide x \\<and>\n       (\\<exists>e.\n           D.iso e \\<and>\n           \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<and>\n  (\\<exists>e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)\n\ngoal (1 subgoal):\n 1. C.ide\n     (SOME x.\n         C.ide x \\<and>\n         (\\<exists>e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<and>\n    (\\<exists>e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)", "by blast"], ["proof (state)\nthis:\n  C.ide\n   (SOME x.\n       C.ide x \\<and>\n       (\\<exists>e.\n           D.iso e \\<and>\n           \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<and>\n  (\\<exists>e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       D.iso\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n       terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)", "hence e: \"D.iso ?e \\<and> \\<guillemotleft>?e : F ?x \\<rightarrow>\\<^sub>D y\\<guillemotright>\""], ["proof (prove)\nusing this:\n  C.ide\n   (SOME x.\n       C.ide x \\<and>\n       (\\<exists>e.\n           D.iso e \\<and>\n           \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<and>\n  (\\<exists>e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)\n\ngoal (1 subgoal):\n 1. D.iso\n     (SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n    \\<guillemotleft>SOME e.\n                       D.iso e \\<and>\n                       \\<guillemotleft>e : F\n      (SOME x.\n          C.ide x \\<and>\n          (\\<exists>e.\n              D.iso e \\<and>\n              \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright> : F\n           (SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>", "using someI_ex [of \"\\<lambda>e. D.iso e \\<and> \\<guillemotleft>e : F ?x \\<rightarrow>\\<^sub>D y\\<guillemotright>\"]"], ["proof (prove)\nusing this:\n  C.ide\n   (SOME x.\n       C.ide x \\<and>\n       (\\<exists>e.\n           D.iso e \\<and>\n           \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<and>\n  (\\<exists>e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)\n  \\<exists>x.\n     D.iso x \\<and>\n     \\<guillemotleft>x : F (SOME x.\n                               C.ide x \\<and>\n                               (\\<exists>e.\n                                   D.iso e \\<and>\n                                   \\<guillemotleft>e : F\n                  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright> \\<Longrightarrow>\n  D.iso\n   (SOME x.\n       D.iso x \\<and>\n       \\<guillemotleft>x : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n  \\<guillemotleft>SOME x.\n                     D.iso x \\<and>\n                     \\<guillemotleft>x : F\n    (SOME x.\n        C.ide x \\<and>\n        (\\<exists>e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright> : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>\n\ngoal (1 subgoal):\n 1. D.iso\n     (SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n    \\<guillemotleft>SOME e.\n                       D.iso e \\<and>\n                       \\<guillemotleft>e : F\n      (SOME x.\n          C.ide x \\<and>\n          (\\<exists>e.\n              D.iso e \\<and>\n              \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright> : F\n           (SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>", "by blast"], ["proof (state)\nthis:\n  D.iso\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n  \\<guillemotleft>SOME e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    (SOME x.\n        C.ide x \\<and>\n        (\\<exists>e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright> : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       D.iso\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n       terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)", "interpret arrow_from_functor C D F ?x y ?e"], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F\n     (SOME x.\n         C.ide x \\<and>\n         (\\<exists>e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>))\n     y (SOME e.\n           D.iso e \\<and>\n           \\<guillemotleft>e : F (SOME x.\n                                     C.ide x \\<and>\n                                     (\\<exists>e.\n   D.iso e \\<and>\n   \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)", "using x e"], ["proof (prove)\nusing this:\n  C.ide\n   (SOME x.\n       C.ide x \\<and>\n       (\\<exists>e.\n           D.iso e \\<and>\n           \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<and>\n  (\\<exists>e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)\n  D.iso\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n  \\<guillemotleft>SOME e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    (SOME x.\n        C.ide x \\<and>\n        (\\<exists>e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright> : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F\n     (SOME x.\n         C.ide x \\<and>\n         (\\<exists>e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>))\n     y (SOME e.\n           D.iso e \\<and>\n           \\<guillemotleft>e : F (SOME x.\n                                     C.ide x \\<and>\n                                     (\\<exists>e.\n   D.iso e \\<and>\n   \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)", "by (unfold_locales, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       D.iso\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n       terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)", "interpret terminal_arrow_from_functor C D F ?x y ?e"], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F\n     (SOME x.\n         C.ide x \\<and>\n         (\\<exists>e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>))\n     y (SOME e.\n           D.iso e \\<and>\n           \\<guillemotleft>e : F (SOME x.\n                                     C.ide x \\<and>\n                                     (\\<exists>e.\n   D.iso e \\<and>\n   \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x' f.\n       arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x' y\n        f \\<Longrightarrow>\n       \\<exists>!g. is_coext x' f g", "fix x' f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x' f.\n       arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x' y\n        f \\<Longrightarrow>\n       \\<exists>!g. is_coext x' f g", "assume 1: \"arrow_from_functor C D F x' y f\""], ["proof (state)\nthis:\n  arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x' y f\n\ngoal (1 subgoal):\n 1. \\<And>x' f.\n       arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x' y\n        f \\<Longrightarrow>\n       \\<exists>!g. is_coext x' f g", "interpret f: arrow_from_functor C D F x' y f"], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x' y f", "using 1"], ["proof (prove)\nusing this:\n  arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x' y f\n\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x' y f", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x' f.\n       arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x' y\n        f \\<Longrightarrow>\n       \\<exists>!g. is_coext x' f g", "have f: \"\\<guillemotleft>f: F x' \\<rightarrow>\\<^sub>D y\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : F x' \\<rightarrow>\\<^sub>D y\\<guillemotright>", "by (meson f.arrow)"], ["proof (state)\nthis:\n  \\<guillemotleft>f : F x' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>x' f.\n       arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x' y\n        f \\<Longrightarrow>\n       \\<exists>!g. is_coext x' f g", "show \"\\<exists>!g. is_coext x' f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!g. is_coext x' f g", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. is_coext x' f ?a\n 2. \\<And>g. is_coext x' f g \\<Longrightarrow> g = ?a", "let ?g = \"SOME g. \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C ?x\\<guillemotright> \\<and> F g = D.inv ?e \\<cdot>\\<^sub>D f\""], ["proof (state)\ngoal (2 subgoals):\n 1. is_coext x' f ?a\n 2. \\<And>g. is_coext x' f g \\<Longrightarrow> g = ?a", "have g: \"\\<guillemotleft>?g : x' \\<rightarrow>\\<^sub>C ?x\\<guillemotright> \\<and> F ?g = D.inv ?e \\<cdot>\\<^sub>D f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>SOME g.\n                       \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                       F g =\n                       D.inv\n                        (SOME e.\n                            D.iso e \\<and>\n                            \\<guillemotleft>e : F\n           (SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                       f : x' \\<rightarrow>\\<^sub>C SOME x.\n                 C.ide x \\<and>\n                 (\\<exists>e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f) =\n    D.inv\n     (SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    f", "using f e x f.arrow is_full D.comp_in_homI D.inv_in_hom\n                      someI_ex [of \"\\<lambda>g. \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C ?x\\<guillemotright> \\<and> F g = D.inv ?e \\<cdot>\\<^sub>D f\"]"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : F x' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  D.iso\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n  \\<guillemotleft>SOME e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    (SOME x.\n        C.ide x \\<and>\n        (\\<exists>e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright> : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  C.ide\n   (SOME x.\n       C.ide x \\<and>\n       (\\<exists>e.\n           D.iso e \\<and>\n           \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<and>\n  (\\<exists>e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)\n  C.ide x' \\<and>\n  \\<guillemotleft>f : F x' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<lbrakk>C.ide ?a; C.ide ?a';\n   \\<guillemotleft>?g : F ?a' \\<rightarrow>\\<^sub>D F\n               ?a\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>f.\n                       \\<guillemotleft>f : ?a' \\<rightarrow>\\<^sub>C ?a\\<guillemotright> \\<and>\n                       F f = ?g\n  \\<lbrakk>\\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>D ?b\\<guillemotright>;\n   \\<guillemotleft>?g : ?b \\<rightarrow>\\<^sub>D ?c\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>?g \\<cdot>\\<^sub>D\n                                    ?f : ?a \\<rightarrow>\\<^sub>D ?c\\<guillemotright>\n  \\<lbrakk>D.iso ?f;\n   \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>D ?b\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>D.inv\n                                     ?f : ?b \\<rightarrow>\\<^sub>D ?a\\<guillemotright>\n  \\<exists>x.\n     \\<guillemotleft>x : x' \\<rightarrow>\\<^sub>C SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n     F x =\n     D.inv\n      (SOME e.\n          D.iso e \\<and>\n          \\<guillemotleft>e : F (SOME x.\n                                    C.ide x \\<and>\n                                    (\\<exists>e.\n  D.iso e \\<and>\n  \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n     f \\<Longrightarrow>\n  \\<guillemotleft>SOME x.\n                     \\<guillemotleft>x : x' \\<rightarrow>\\<^sub>C SOME x.\n                               C.ide x \\<and>\n                               (\\<exists>e.\n                                   D.iso e \\<and>\n                                   \\<guillemotleft>e : F\n                  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                     F x =\n                     D.inv\n                      (SOME e.\n                          D.iso e \\<and>\n                          \\<guillemotleft>e : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                     f : x' \\<rightarrow>\\<^sub>C SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n  F (SOME x.\n        \\<guillemotleft>x : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F x =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  D.inv\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  f\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>SOME g.\n                       \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                       F g =\n                       D.inv\n                        (SOME e.\n                            D.iso e \\<and>\n                            \\<guillemotleft>e : F\n           (SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                       f : x' \\<rightarrow>\\<^sub>C SOME x.\n                 C.ide x \\<and>\n                 (\\<exists>e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f) =\n    D.inv\n     (SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    f", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>SOME g.\n                     \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                               C.ide x \\<and>\n                               (\\<exists>e.\n                                   D.iso e \\<and>\n                                   \\<guillemotleft>e : F\n                  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                     F g =\n                     D.inv\n                      (SOME e.\n                          D.iso e \\<and>\n                          \\<guillemotleft>e : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                     f : x' \\<rightarrow>\\<^sub>C SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  D.inv\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  f\n\ngoal (2 subgoals):\n 1. is_coext x' f ?a\n 2. \\<And>g. is_coext x' f g \\<Longrightarrow> g = ?a", "show 1: \"is_coext x' f ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_coext x' f\n     (SOME g.\n         \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                   C.ide x \\<and>\n                   (\\<exists>e.\n                       D.iso e \\<and>\n                       \\<guillemotleft>e : F\n      x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n         F g =\n         D.inv\n          (SOME e.\n              D.iso e \\<and>\n              \\<guillemotleft>e : F (SOME x.\n  C.ide x \\<and>\n  (\\<exists>e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n         f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_coext x' f\n     (SOME g.\n         \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                   C.ide x \\<and>\n                   (\\<exists>e.\n                       D.iso e \\<and>\n                       \\<guillemotleft>e : F\n      x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n         F g =\n         D.inv\n          (SOME e.\n              D.iso e \\<and>\n              \\<guillemotleft>e : F (SOME x.\n  C.ide x \\<and>\n  (\\<exists>e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n         f)", "have \"\\<guillemotleft>?g : x' \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>SOME g.\n                       \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                       F g =\n                       D.inv\n                        (SOME e.\n                            D.iso e \\<and>\n                            \\<guillemotleft>e : F\n           (SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                       f : x' \\<rightarrow>\\<^sub>C SOME x.\n                 C.ide x \\<and>\n                 (\\<exists>e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright>", "using g"], ["proof (prove)\nusing this:\n  \\<guillemotleft>SOME g.\n                     \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                               C.ide x \\<and>\n                               (\\<exists>e.\n                                   D.iso e \\<and>\n                                   \\<guillemotleft>e : F\n                  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                     F g =\n                     D.inv\n                      (SOME e.\n                          D.iso e \\<and>\n                          \\<guillemotleft>e : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                     f : x' \\<rightarrow>\\<^sub>C SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  D.inv\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  f\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>SOME g.\n                       \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                       F g =\n                       D.inv\n                        (SOME e.\n                            D.iso e \\<and>\n                            \\<guillemotleft>e : F\n           (SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                       f : x' \\<rightarrow>\\<^sub>C SOME x.\n                 C.ide x \\<and>\n                 (\\<exists>e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright>", "by simp"], ["proof (state)\nthis:\n  \\<guillemotleft>SOME g.\n                     \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                               C.ide x \\<and>\n                               (\\<exists>e.\n                                   D.iso e \\<and>\n                                   \\<guillemotleft>e : F\n                  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                     F g =\n                     D.inv\n                      (SOME e.\n                          D.iso e \\<and>\n                          \\<guillemotleft>e : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                     f : x' \\<rightarrow>\\<^sub>C SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. is_coext x' f\n     (SOME g.\n         \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                   C.ide x \\<and>\n                   (\\<exists>e.\n                       D.iso e \\<and>\n                       \\<guillemotleft>e : F\n      x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n         F g =\n         D.inv\n          (SOME e.\n              D.iso e \\<and>\n              \\<guillemotleft>e : F (SOME x.\n  C.ide x \\<and>\n  (\\<exists>e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n         f)", "moreover"], ["proof (state)\nthis:\n  \\<guillemotleft>SOME g.\n                     \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                               C.ide x \\<and>\n                               (\\<exists>e.\n                                   D.iso e \\<and>\n                                   \\<guillemotleft>e : F\n                  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                     F g =\n                     D.inv\n                      (SOME e.\n                          D.iso e \\<and>\n                          \\<guillemotleft>e : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                     f : x' \\<rightarrow>\\<^sub>C SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. is_coext x' f\n     (SOME g.\n         \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                   C.ide x \\<and>\n                   (\\<exists>e.\n                       D.iso e \\<and>\n                       \\<guillemotleft>e : F\n      x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n         F g =\n         D.inv\n          (SOME e.\n              D.iso e \\<and>\n              \\<guillemotleft>e : F (SOME x.\n  C.ide x \\<and>\n  (\\<exists>e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n         f)", "have \"?e \\<cdot>\\<^sub>D F ?g = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f) =\n    f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f) =\n    f", "have \"?e \\<cdot>\\<^sub>D F ?g = ?e \\<cdot>\\<^sub>D D.inv ?e \\<cdot>\\<^sub>D f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f) =\n    (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    D.inv\n     (SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    f", "using g"], ["proof (prove)\nusing this:\n  \\<guillemotleft>SOME g.\n                     \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                               C.ide x \\<and>\n                               (\\<exists>e.\n                                   D.iso e \\<and>\n                                   \\<guillemotleft>e : F\n                  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                     F g =\n                     D.inv\n                      (SOME e.\n                          D.iso e \\<and>\n                          \\<guillemotleft>e : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                     f : x' \\<rightarrow>\\<^sub>C SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  D.inv\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  f\n\ngoal (1 subgoal):\n 1. (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f) =\n    (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    D.inv\n     (SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    f", "by simp"], ["proof (state)\nthis:\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  D.inv\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  f\n\ngoal (1 subgoal):\n 1. (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f) =\n    f", "also"], ["proof (state)\nthis:\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  D.inv\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  f\n\ngoal (1 subgoal):\n 1. (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f) =\n    f", "have \"... = (?e \\<cdot>\\<^sub>D D.inv ?e) \\<cdot>\\<^sub>D f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    D.inv\n     (SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    f =\n    ((SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n     D.inv\n      (SOME e.\n          D.iso e \\<and>\n          \\<guillemotleft>e : F (SOME x.\n                                    C.ide x \\<and>\n                                    (\\<exists>e.\n  D.iso e \\<and>\n  \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<cdot>\\<^sub>D\n    f", "using e f D.inv_in_hom"], ["proof (prove)\nusing this:\n  D.iso\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n  \\<guillemotleft>SOME e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    (SOME x.\n        C.ide x \\<and>\n        (\\<exists>e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright> : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>f : F x' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<lbrakk>D.iso ?f;\n   \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>D ?b\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>D.inv\n                                     ?f : ?b \\<rightarrow>\\<^sub>D ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    D.inv\n     (SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    f =\n    ((SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n     D.inv\n      (SOME e.\n          D.iso e \\<and>\n          \\<guillemotleft>e : F (SOME x.\n                                    C.ide x \\<and>\n                                    (\\<exists>e.\n  D.iso e \\<and>\n  \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<cdot>\\<^sub>D\n    f", "by (metis D.comp_assoc)"], ["proof (state)\nthis:\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  D.inv\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  f =\n  ((SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n   D.inv\n    (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<cdot>\\<^sub>D\n  f\n\ngoal (1 subgoal):\n 1. (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f) =\n    f", "also"], ["proof (state)\nthis:\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  D.inv\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  f =\n  ((SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n   D.inv\n    (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<cdot>\\<^sub>D\n  f\n\ngoal (1 subgoal):\n 1. (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f) =\n    f", "have \"... = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n     D.inv\n      (SOME e.\n          D.iso e \\<and>\n          \\<guillemotleft>e : F (SOME x.\n                                    C.ide x \\<and>\n                                    (\\<exists>e.\n  D.iso e \\<and>\n  \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<cdot>\\<^sub>D\n    f =\n    f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n     D.inv\n      (SOME e.\n          D.iso e \\<and>\n          \\<guillemotleft>e : F (SOME x.\n                                    C.ide x \\<and>\n                                    (\\<exists>e.\n  D.iso e \\<and>\n  \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<cdot>\\<^sub>D\n    f =\n    f", "have \"?e \\<cdot>\\<^sub>D D.inv ?e = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    D.inv\n     (SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) =\n    y", "using e D.comp_arr_inv D.inv_is_inverse"], ["proof (prove)\nusing this:\n  D.iso\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n  \\<guillemotleft>SOME e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    (SOME x.\n        C.ide x \\<and>\n        (\\<exists>e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright> : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  D.inverse_arrows ?f ?g \\<Longrightarrow> ?f \\<cdot>\\<^sub>D ?g = D.dom ?g\n  D.iso ?f \\<Longrightarrow> D.inverse_arrows ?f (D.inv ?f)\n\ngoal (1 subgoal):\n 1. (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    D.inv\n     (SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) =\n    y", "by auto"], ["proof (state)\nthis:\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  D.inv\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) =\n  y\n\ngoal (1 subgoal):\n 1. ((SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n     D.inv\n      (SOME e.\n          D.iso e \\<and>\n          \\<guillemotleft>e : F (SOME x.\n                                    C.ide x \\<and>\n                                    (\\<exists>e.\n  D.iso e \\<and>\n  \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<cdot>\\<^sub>D\n    f =\n    f", "thus ?thesis"], ["proof (prove)\nusing this:\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  D.inv\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) =\n  y\n\ngoal (1 subgoal):\n 1. ((SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n     D.inv\n      (SOME e.\n          D.iso e \\<and>\n          \\<guillemotleft>e : F (SOME x.\n                                    C.ide x \\<and>\n                                    (\\<exists>e.\n  D.iso e \\<and>\n  \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<cdot>\\<^sub>D\n    f =\n    f", "using f D.comp_cod_arr"], ["proof (prove)\nusing this:\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  D.inv\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) =\n  y\n  \\<guillemotleft>f : F x' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<lbrakk>D.arr ?f; D.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>D ?f = ?f\n\ngoal (1 subgoal):\n 1. ((SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n     D.inv\n      (SOME e.\n          D.iso e \\<and>\n          \\<guillemotleft>e : F (SOME x.\n                                    C.ide x \\<and>\n                                    (\\<exists>e.\n  D.iso e \\<and>\n  \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<cdot>\\<^sub>D\n    f =\n    f", "by auto"], ["proof (state)\nthis:\n  ((SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n   D.inv\n    (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<cdot>\\<^sub>D\n  f =\n  f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n   D.inv\n    (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<cdot>\\<^sub>D\n  f =\n  f\n\ngoal (1 subgoal):\n 1. (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f) =\n    f", "finally"], ["proof (chain)\npicking this:\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  f", "show ?thesis"], ["proof (prove)\nusing this:\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  f\n\ngoal (1 subgoal):\n 1. (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f) =\n    f", "by blast"], ["proof (state)\nthis:\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  f\n\ngoal (1 subgoal):\n 1. is_coext x' f\n     (SOME g.\n         \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                   C.ide x \\<and>\n                   (\\<exists>e.\n                       D.iso e \\<and>\n                       \\<guillemotleft>e : F\n      x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n         F g =\n         D.inv\n          (SOME e.\n              D.iso e \\<and>\n              \\<guillemotleft>e : F (SOME x.\n  C.ide x \\<and>\n  (\\<exists>e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n         f)", "ultimately"], ["proof (chain)\npicking this:\n  \\<guillemotleft>SOME g.\n                     \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                               C.ide x \\<and>\n                               (\\<exists>e.\n                                   D.iso e \\<and>\n                                   \\<guillemotleft>e : F\n                  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                     F g =\n                     D.inv\n                      (SOME e.\n                          D.iso e \\<and>\n                          \\<guillemotleft>e : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                     f : x' \\<rightarrow>\\<^sub>C SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright>\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  f", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<guillemotleft>SOME g.\n                     \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                               C.ide x \\<and>\n                               (\\<exists>e.\n                                   D.iso e \\<and>\n                                   \\<guillemotleft>e : F\n                  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                     F g =\n                     D.inv\n                      (SOME e.\n                          D.iso e \\<and>\n                          \\<guillemotleft>e : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                     f : x' \\<rightarrow>\\<^sub>C SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright>\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  f\n\ngoal (1 subgoal):\n 1. is_coext x' f\n     (SOME g.\n         \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                   C.ide x \\<and>\n                   (\\<exists>e.\n                       D.iso e \\<and>\n                       \\<guillemotleft>e : F\n      x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n         F g =\n         D.inv\n          (SOME e.\n              D.iso e \\<and>\n              \\<guillemotleft>e : F (SOME x.\n  C.ide x \\<and>\n  (\\<exists>e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n         f)", "unfolding is_coext_def"], ["proof (prove)\nusing this:\n  \\<guillemotleft>SOME g.\n                     \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                               C.ide x \\<and>\n                               (\\<exists>e.\n                                   D.iso e \\<and>\n                                   \\<guillemotleft>e : F\n                  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                     F g =\n                     D.inv\n                      (SOME e.\n                          D.iso e \\<and>\n                          \\<guillemotleft>e : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                     f : x' \\<rightarrow>\\<^sub>C SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright>\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  f\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>SOME g.\n                       \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                       F g =\n                       D.inv\n                        (SOME e.\n                            D.iso e \\<and>\n                            \\<guillemotleft>e : F\n           (SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                       f : x' \\<rightarrow>\\<^sub>C SOME x.\n                 C.ide x \\<and>\n                 (\\<exists>e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n    f =\n    (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f)", "by simp"], ["proof (state)\nthis:\n  is_coext x' f\n   (SOME g.\n       \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                 C.ide x \\<and>\n                 (\\<exists>e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n       F g =\n       D.inv\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n       f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_coext x' f\n   (SOME g.\n       \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                 C.ide x \\<and>\n                 (\\<exists>e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n       F g =\n       D.inv\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n       f)\n\ngoal (1 subgoal):\n 1. \\<And>g.\n       is_coext x' f g \\<Longrightarrow>\n       g =\n       (SOME g.\n           \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                     C.ide x \\<and>\n                     (\\<exists>e.\n                         D.iso e \\<and>\n                         \\<guillemotleft>e : F\n        x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n           F g =\n           D.inv\n            (SOME e.\n                D.iso e \\<and>\n                \\<guillemotleft>e : F (SOME x.\n    C.ide x \\<and>\n    (\\<exists>e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n           f)", "show \"\\<And>g'. is_coext x' f g' \\<Longrightarrow> g' = ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g'.\n       is_coext x' f g' \\<Longrightarrow>\n       g' =\n       (SOME g.\n           \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                     C.ide x \\<and>\n                     (\\<exists>e.\n                         D.iso e \\<and>\n                         \\<guillemotleft>e : F\n        x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n           F g =\n           D.inv\n            (SOME e.\n                D.iso e \\<and>\n                \\<guillemotleft>e : F (SOME x.\n    C.ide x \\<and>\n    (\\<exists>e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n           f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g'.\n       is_coext x' f g' \\<Longrightarrow>\n       g' =\n       (SOME g.\n           \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                     C.ide x \\<and>\n                     (\\<exists>e.\n                         D.iso e \\<and>\n                         \\<guillemotleft>e : F\n        x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n           F g =\n           D.inv\n            (SOME e.\n                D.iso e \\<and>\n                \\<guillemotleft>e : F (SOME x.\n    C.ide x \\<and>\n    (\\<exists>e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n           f)", "fix g'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g'.\n       is_coext x' f g' \\<Longrightarrow>\n       g' =\n       (SOME g.\n           \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                     C.ide x \\<and>\n                     (\\<exists>e.\n                         D.iso e \\<and>\n                         \\<guillemotleft>e : F\n        x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n           F g =\n           D.inv\n            (SOME e.\n                D.iso e \\<and>\n                \\<guillemotleft>e : F (SOME x.\n    C.ide x \\<and>\n    (\\<exists>e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n           f)", "assume g': \"is_coext x' f g'\""], ["proof (state)\nthis:\n  is_coext x' f g'\n\ngoal (1 subgoal):\n 1. \\<And>g'.\n       is_coext x' f g' \\<Longrightarrow>\n       g' =\n       (SOME g.\n           \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                     C.ide x \\<and>\n                     (\\<exists>e.\n                         D.iso e \\<and>\n                         \\<guillemotleft>e : F\n        x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n           F g =\n           D.inv\n            (SOME e.\n                D.iso e \\<and>\n                \\<guillemotleft>e : F (SOME x.\n    C.ide x \\<and>\n    (\\<exists>e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n           f)", "have 2: \"\\<guillemotleft>g' : x' \\<rightarrow>\\<^sub>C ?x\\<guillemotright> \\<and> ?e \\<cdot>\\<^sub>D F g' = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>g' : x' \\<rightarrow>\\<^sub>C SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n    (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    F g' =\n    f", "using g' is_coext_def"], ["proof (prove)\nusing this:\n  is_coext x' f g'\n  is_coext ?x' ?f ?g \\<equiv>\n  \\<guillemotleft>?g : ?x' \\<rightarrow>\\<^sub>C SOME x.\n              C.ide x \\<and>\n              (\\<exists>e.\n                  D.iso e \\<and>\n                  \\<guillemotleft>e : F\n x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n  ?f =\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F ?g\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>g' : x' \\<rightarrow>\\<^sub>C SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n    (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    F g' =\n    f", "by simp"], ["proof (state)\nthis:\n  \\<guillemotleft>g' : x' \\<rightarrow>\\<^sub>C SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F g' =\n  f\n\ngoal (1 subgoal):\n 1. \\<And>g'.\n       is_coext x' f g' \\<Longrightarrow>\n       g' =\n       (SOME g.\n           \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                     C.ide x \\<and>\n                     (\\<exists>e.\n                         D.iso e \\<and>\n                         \\<guillemotleft>e : F\n        x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n           F g =\n           D.inv\n            (SOME e.\n                D.iso e \\<and>\n                \\<guillemotleft>e : F (SOME x.\n    C.ide x \\<and>\n    (\\<exists>e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n           f)", "have 3: \"\\<guillemotleft>?g : x' \\<rightarrow>\\<^sub>C ?x\\<guillemotright> \\<and> ?e \\<cdot>\\<^sub>D F ?g = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>SOME g.\n                       \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                       F g =\n                       D.inv\n                        (SOME e.\n                            D.iso e \\<and>\n                            \\<guillemotleft>e : F\n           (SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                       f : x' \\<rightarrow>\\<^sub>C SOME x.\n                 C.ide x \\<and>\n                 (\\<exists>e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n    (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f) =\n    f", "using 1 is_coext_def"], ["proof (prove)\nusing this:\n  is_coext x' f\n   (SOME g.\n       \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                 C.ide x \\<and>\n                 (\\<exists>e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n       F g =\n       D.inv\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n       f)\n  is_coext ?x' ?f ?g \\<equiv>\n  \\<guillemotleft>?g : ?x' \\<rightarrow>\\<^sub>C SOME x.\n              C.ide x \\<and>\n              (\\<exists>e.\n                  D.iso e \\<and>\n                  \\<guillemotleft>e : F\n x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n  ?f =\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F ?g\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>SOME g.\n                       \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                       F g =\n                       D.inv\n                        (SOME e.\n                            D.iso e \\<and>\n                            \\<guillemotleft>e : F\n           (SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                       f : x' \\<rightarrow>\\<^sub>C SOME x.\n                 C.ide x \\<and>\n                 (\\<exists>e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n    (SOME e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F (SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f) =\n    f", "by simp"], ["proof (state)\nthis:\n  \\<guillemotleft>SOME g.\n                     \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                               C.ide x \\<and>\n                               (\\<exists>e.\n                                   D.iso e \\<and>\n                                   \\<guillemotleft>e : F\n                  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                     F g =\n                     D.inv\n                      (SOME e.\n                          D.iso e \\<and>\n                          \\<guillemotleft>e : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                     f : x' \\<rightarrow>\\<^sub>C SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  f\n\ngoal (1 subgoal):\n 1. \\<And>g'.\n       is_coext x' f g' \\<Longrightarrow>\n       g' =\n       (SOME g.\n           \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                     C.ide x \\<and>\n                     (\\<exists>e.\n                         D.iso e \\<and>\n                         \\<guillemotleft>e : F\n        x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n           F g =\n           D.inv\n            (SOME e.\n                D.iso e \\<and>\n                \\<guillemotleft>e : F (SOME x.\n    C.ide x \\<and>\n    (\\<exists>e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n           f)", "have \"F g' = F ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F g' =\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f)", "using e 2 3 D.iso_is_section D.section_is_mono D.monoE"], ["proof (prove)\nusing this:\n  D.iso\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n  \\<guillemotleft>SOME e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    (SOME x.\n        C.ide x \\<and>\n        (\\<exists>e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright> : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>g' : x' \\<rightarrow>\\<^sub>C SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F g' =\n  f\n  \\<guillemotleft>SOME g.\n                     \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                               C.ide x \\<and>\n                               (\\<exists>e.\n                                   D.iso e \\<and>\n                                   \\<guillemotleft>e : F\n                  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                     F g =\n                     D.inv\n                      (SOME e.\n                          D.iso e \\<and>\n                          \\<guillemotleft>e : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                     f : x' \\<rightarrow>\\<^sub>C SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  f\n  D.iso ?f \\<Longrightarrow> D.section ?f\n  D.section ?g \\<Longrightarrow> D.mono ?g\n  \\<lbrakk>D.mono ?g; D.seq ?g ?f; D.seq ?g ?f';\n   ?g \\<cdot>\\<^sub>D ?f = ?g \\<cdot>\\<^sub>D ?f'\\<rbrakk>\n  \\<Longrightarrow> ?f' = ?f\n\ngoal (1 subgoal):\n 1. F g' =\n    F (SOME g.\n          \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                    C.ide x \\<and>\n                    (\\<exists>e.\n                        D.iso e \\<and>\n                        \\<guillemotleft>e : F\n       x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n          F g =\n          D.inv\n           (SOME e.\n               D.iso e \\<and>\n               \\<guillemotleft>e : F (SOME x.\n   C.ide x \\<and>\n   (\\<exists>e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n          f)", "by blast"], ["proof (state)\nthis:\n  F g' =\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f)\n\ngoal (1 subgoal):\n 1. \\<And>g'.\n       is_coext x' f g' \\<Longrightarrow>\n       g' =\n       (SOME g.\n           \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                     C.ide x \\<and>\n                     (\\<exists>e.\n                         D.iso e \\<and>\n                         \\<guillemotleft>e : F\n        x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n           F g =\n           D.inv\n            (SOME e.\n                D.iso e \\<and>\n                \\<guillemotleft>e : F (SOME x.\n    C.ide x \\<and>\n    (\\<exists>e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n           f)", "moreover"], ["proof (state)\nthis:\n  F g' =\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f)\n\ngoal (1 subgoal):\n 1. \\<And>g'.\n       is_coext x' f g' \\<Longrightarrow>\n       g' =\n       (SOME g.\n           \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                     C.ide x \\<and>\n                     (\\<exists>e.\n                         D.iso e \\<and>\n                         \\<guillemotleft>e : F\n        x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n           F g =\n           D.inv\n            (SOME e.\n                D.iso e \\<and>\n                \\<guillemotleft>e : F (SOME x.\n    C.ide x \\<and>\n    (\\<exists>e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n           f)", "have \"C.par g' ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.par g'\n     (SOME g.\n         \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                   C.ide x \\<and>\n                   (\\<exists>e.\n                       D.iso e \\<and>\n                       \\<guillemotleft>e : F\n      x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n         F g =\n         D.inv\n          (SOME e.\n              D.iso e \\<and>\n              \\<guillemotleft>e : F (SOME x.\n  C.ide x \\<and>\n  (\\<exists>e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n         f)", "using 2 3"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g' : x' \\<rightarrow>\\<^sub>C SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F g' =\n  f\n  \\<guillemotleft>SOME g.\n                     \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                               C.ide x \\<and>\n                               (\\<exists>e.\n                                   D.iso e \\<and>\n                                   \\<guillemotleft>e : F\n                  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                     F g =\n                     D.inv\n                      (SOME e.\n                          D.iso e \\<and>\n                          \\<guillemotleft>e : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                     f : x' \\<rightarrow>\\<^sub>C SOME x.\n               C.ide x \\<and>\n               (\\<exists>e.\n                   D.iso e \\<and>\n                   \\<guillemotleft>e : F\n  x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n  (SOME e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F (SOME x.\n                                C.ide x \\<and>\n                                (\\<exists>e.\n                                    D.iso e \\<and>\n                                    \\<guillemotleft>e : F\n                   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f) =\n  f\n\ngoal (1 subgoal):\n 1. C.par g'\n     (SOME g.\n         \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                   C.ide x \\<and>\n                   (\\<exists>e.\n                       D.iso e \\<and>\n                       \\<guillemotleft>e : F\n      x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n         F g =\n         D.inv\n          (SOME e.\n              D.iso e \\<and>\n              \\<guillemotleft>e : F (SOME x.\n  C.ide x \\<and>\n  (\\<exists>e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n         f)", "by fastforce"], ["proof (state)\nthis:\n  C.par g'\n   (SOME g.\n       \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                 C.ide x \\<and>\n                 (\\<exists>e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n       F g =\n       D.inv\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n       f)\n\ngoal (1 subgoal):\n 1. \\<And>g'.\n       is_coext x' f g' \\<Longrightarrow>\n       g' =\n       (SOME g.\n           \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                     C.ide x \\<and>\n                     (\\<exists>e.\n                         D.iso e \\<and>\n                         \\<guillemotleft>e : F\n        x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n           F g =\n           D.inv\n            (SOME e.\n                D.iso e \\<and>\n                \\<guillemotleft>e : F (SOME x.\n    C.ide x \\<and>\n    (\\<exists>e.\n        D.iso e \\<and>\n        \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n           f)", "ultimately"], ["proof (chain)\npicking this:\n  F g' =\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f)\n  C.par g'\n   (SOME g.\n       \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                 C.ide x \\<and>\n                 (\\<exists>e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n       F g =\n       D.inv\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n       f)", "show \"g' = ?g\""], ["proof (prove)\nusing this:\n  F g' =\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f)\n  C.par g'\n   (SOME g.\n       \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                 C.ide x \\<and>\n                 (\\<exists>e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n       F g =\n       D.inv\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n       f)\n\ngoal (1 subgoal):\n 1. g' =\n    (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f)", "using is_faithful [of g' ?g]"], ["proof (prove)\nusing this:\n  F g' =\n  F (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f)\n  C.par g'\n   (SOME g.\n       \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                 C.ide x \\<and>\n                 (\\<exists>e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n       F g =\n       D.inv\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n       f)\n  \\<lbrakk>C.par g'\n            (SOME g.\n                \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                          C.ide x \\<and>\n                          (\\<exists>e.\n                              D.iso e \\<and>\n                              \\<guillemotleft>e : F\n             x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                F g =\n                D.inv\n                 (SOME e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    (SOME x.\n        C.ide x \\<and>\n        (\\<exists>e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                f);\n   F g' =\n   F (SOME g.\n         \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                   C.ide x \\<and>\n                   (\\<exists>e.\n                       D.iso e \\<and>\n                       \\<guillemotleft>e : F\n      x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n         F g =\n         D.inv\n          (SOME e.\n              D.iso e \\<and>\n              \\<guillemotleft>e : F (SOME x.\n  C.ide x \\<and>\n  (\\<exists>e.\n      D.iso e \\<and>\n      \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n         f)\\<rbrakk>\n  \\<Longrightarrow> g' =\n                    (SOME g.\n                        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                                  C.ide x \\<and>\n                                  (\\<exists>e.\nD.iso e \\<and>\n\\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n                        F g =\n                        D.inv\n                         (SOME e.\n                             D.iso e \\<and>\n                             \\<guillemotleft>e : F\n            (SOME x.\n                C.ide x \\<and>\n                (\\<exists>e.\n                    D.iso e \\<and>\n                    \\<guillemotleft>e : F\n   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n                        f)\n\ngoal (1 subgoal):\n 1. g' =\n    (SOME g.\n        \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                  C.ide x \\<and>\n                  (\\<exists>e.\n                      D.iso e \\<and>\n                      \\<guillemotleft>e : F\n     x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n        F g =\n        D.inv\n         (SOME e.\n             D.iso e \\<and>\n             \\<guillemotleft>e : F (SOME x.\n C.ide x \\<and>\n (\\<exists>e.\n     D.iso e \\<and>\n     \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n        f)", "by simp"], ["proof (state)\nthis:\n  g' =\n  (SOME g.\n      \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                C.ide x \\<and>\n                (\\<exists>e.\n                    D.iso e \\<and>\n                    \\<guillemotleft>e : F\n   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n      F g =\n      D.inv\n       (SOME e.\n           D.iso e \\<and>\n           \\<guillemotleft>e : F (SOME x.\n                                     C.ide x \\<and>\n                                     (\\<exists>e.\n   D.iso e \\<and>\n   \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n      f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_coext x' f ?g' \\<Longrightarrow>\n  ?g' =\n  (SOME g.\n      \\<guillemotleft>g : x' \\<rightarrow>\\<^sub>C SOME x.\n                C.ide x \\<and>\n                (\\<exists>e.\n                    D.iso e \\<and>\n                    \\<guillemotleft>e : F\n   x \\<rightarrow>\\<^sub>D y\\<guillemotright>)\\<guillemotright> \\<and>\n      F g =\n      D.inv\n       (SOME e.\n           D.iso e \\<and>\n           \\<guillemotleft>e : F (SOME x.\n                                     C.ide x \\<and>\n                                     (\\<exists>e.\n   D.iso e \\<and>\n   \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<cdot>\\<^sub>D\n      f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!g. is_coext x' f g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       D.iso\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n       terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       D.iso\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n       terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)", "using e terminal_arrow_from_functor_axioms"], ["proof (prove)\nusing this:\n  D.iso\n   (SOME e.\n       D.iso e \\<and>\n       \\<guillemotleft>e : F (SOME x.\n                                 C.ide x \\<and>\n                                 (\\<exists>e.\n                                     D.iso e \\<and>\n                                     \\<guillemotleft>e : F\n                    x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n  \\<guillemotleft>SOME e.\n                     D.iso e \\<and>\n                     \\<guillemotleft>e : F\n    (SOME x.\n        C.ide x \\<and>\n        (\\<exists>e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright> : F\n         (SOME x.\n             C.ide x \\<and>\n             (\\<exists>e.\n                 D.iso e \\<and>\n                 \\<guillemotleft>e : F\nx \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F\n   (SOME x.\n       C.ide x \\<and>\n       (\\<exists>e.\n           D.iso e \\<and>\n           \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>))\n   y (SOME e.\n         D.iso e \\<and>\n         \\<guillemotleft>e : F (SOME x.\n                                   C.ide x \\<and>\n                                   (\\<exists>e.\n D.iso e \\<and>\n \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       D.iso\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n       terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n        (SOME e.\n            D.iso e \\<and>\n            \\<guillemotleft>e : F (SOME x.\nC.ide x \\<and>\n(\\<exists>e.\n    D.iso e \\<and>\n    \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>x.\n     D.iso\n      (SOME e.\n          D.iso e \\<and>\n          \\<guillemotleft>e : F (SOME x.\n                                    C.ide x \\<and>\n                                    (\\<exists>e.\n  D.iso e \\<and>\n  \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n      (SOME e.\n          D.iso e \\<and>\n          \\<guillemotleft>e : F (SOME x.\n                                    C.ide x \\<and>\n                                    (\\<exists>e.\n  D.iso e \\<and>\n  \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x.\n     D.iso\n      (SOME e.\n          D.iso e \\<and>\n          \\<guillemotleft>e : F (SOME x.\n                                    C.ide x \\<and>\n                                    (\\<exists>e.\n  D.iso e \\<and>\n  \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n      (SOME e.\n          D.iso e \\<and>\n          \\<guillemotleft>e : F (SOME x.\n                                    C.ide x \\<and>\n                                    (\\<exists>e.\n  D.iso e \\<and>\n  \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)\n\ngoal (1 subgoal):\n 1. \\<exists>x e.\n       D.iso e \\<and>\n       terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n        e", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>x.\n     D.iso\n      (SOME e.\n          D.iso e \\<and>\n          \\<guillemotleft>e : F (SOME x.\n                                    C.ide x \\<and>\n                                    (\\<exists>e.\n  D.iso e \\<and>\n  \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>) \\<and>\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n      (SOME e.\n          D.iso e \\<and>\n          \\<guillemotleft>e : F (SOME x.\n                                    C.ide x \\<and>\n                                    (\\<exists>e.\n  D.iso e \\<and>\n  \\<guillemotleft>e : F x \\<rightarrow>\\<^sub>D y\\<guillemotright>)) \\<rightarrow>\\<^sub>D y\\<guillemotright>)\n\ngoal (1 subgoal):\n 1. \\<exists>x e.\n       D.iso e \\<and>\n       terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n        e", "by auto"], ["proof (state)\nthis:\n  \\<exists>x e.\n     D.iso e \\<and>\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y e\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x e.\n     D.iso e \\<and>\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y e\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       D.ide y \\<Longrightarrow>\n       \\<exists>x e.\n          terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F\n           x y e", "thus \"\\<exists>x e. terminal_arrow_from_functor C D F x y e\""], ["proof (prove)\nusing this:\n  \\<exists>x e.\n     D.iso e \\<and>\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y e\n\ngoal (1 subgoal):\n 1. \\<exists>x e.\n       terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y\n        e", "by blast"], ["proof (state)\nthis:\n  \\<exists>x e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F x y e\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma extends_to_adjoint_equivalence:\n    shows \"\\<exists>G \\<eta> \\<epsilon>. adjoint_equivalence C D G F \\<eta> \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>G \\<eta> \\<epsilon>.\n       adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n        \\<epsilon>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>G \\<eta> \\<epsilon>.\n       adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n        \\<epsilon>", "interpret left_adjoint_functor C D F"], ["proof (prove)\ngoal (1 subgoal):\n 1. left_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F", "using is_left_adjoint_functor"], ["proof (prove)\nusing this:\n  left_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F\n\ngoal (1 subgoal):\n 1. left_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>G \\<eta> \\<epsilon>.\n       adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n        \\<epsilon>", "interpret Adj: meta_adjunction D C F G \\<phi> \\<psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F G \\<phi> \\<psi>", "using induces_meta_adjunction"], ["proof (prove)\nusing this:\n  meta_adjunction (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F G \\<phi> \\<psi>\n\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F G \\<phi> \\<psi>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>G \\<eta> \\<epsilon>.\n       adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n        \\<epsilon>", "interpret Adj: adjunction D C replete_setcat.comp\n                       Adj.\\<phi>C Adj.\\<phi>D F G \\<phi> \\<psi> Adj.\\<eta> Adj.\\<epsilon> Adj.\\<Phi> Adj.\\<Psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) replete_setcat.comp\n     Adj.\\<phi>C Adj.\\<phi>D F G \\<phi> \\<psi> Adj.\\<eta> Adj.\\<epsilon>\n     Adj.\\<Phi> Adj.\\<Psi>", "using induces_adjunction"], ["proof (prove)\nusing this:\n  adjunction (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) replete_setcat.comp\n   Adj.\\<phi>C Adj.\\<phi>D F G \\<phi> \\<psi> Adj.\\<eta> Adj.\\<epsilon>\n   Adj.\\<Phi> Adj.\\<Psi>\n\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) replete_setcat.comp\n     Adj.\\<phi>C Adj.\\<phi>D F G \\<phi> \\<psi> Adj.\\<eta> Adj.\\<epsilon>\n     Adj.\\<Phi> Adj.\\<Psi>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>G \\<eta> \\<epsilon>.\n       adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n        \\<epsilon>", "interpret equivalence_of_categories D C F G Adj.\\<eta> Adj.\\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence_of_categories (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F G\n     Adj.\\<eta> Adj.\\<epsilon>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. C.ide a \\<Longrightarrow> C.iso (Adj.\\<eta> a)\n 2. \\<And>a. D.ide a \\<Longrightarrow> D.iso (Adj.\\<epsilon> a)", "show 1: \"\\<And>a. D.ide a \\<Longrightarrow> D.iso (Adj.\\<epsilon> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. D.ide a \\<Longrightarrow> D.iso (Adj.\\<epsilon> a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. D.ide a \\<Longrightarrow> D.iso (Adj.\\<epsilon> a)", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. D.ide a \\<Longrightarrow> D.iso (Adj.\\<epsilon> a)", "assume a: \"D.ide a\""], ["proof (state)\nthis:\n  D.ide a\n\ngoal (1 subgoal):\n 1. \\<And>a. D.ide a \\<Longrightarrow> D.iso (Adj.\\<epsilon> a)", "interpret \\<epsilon>a: terminal_arrow_from_functor C D F \\<open>G a\\<close> a \\<open>Adj.\\<epsilon> a\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F (G a)\n     a (Adj.\\<epsilon> a)", "using a Adj.has_terminal_arrows_from_functor [of a]"], ["proof (prove)\nusing this:\n  D.ide a\n  D.ide a \\<Longrightarrow>\n  terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F (G a) a\n   (Adj.\\<epsilon> a)\n  \\<lbrakk>D.ide a;\n   arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F ?y' a\n    ?f\\<rbrakk>\n  \\<Longrightarrow> terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>C)\n                     (\\<cdot>\\<^sub>D) F (G a) (Adj.\\<epsilon> a) ?y' ?f =\n                    \\<phi> ?y' ?f\n\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F (G a)\n     a (Adj.\\<epsilon> a)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. D.ide a \\<Longrightarrow> D.iso (Adj.\\<epsilon> a)", "have \"D.retraction (Adj.\\<epsilon> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.retraction (Adj.\\<epsilon> a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. D.retraction (Adj.\\<epsilon> a)", "obtain b \\<phi> where \\<phi>: \"C.ide b \\<and> D.iso \\<phi> \\<and> \\<guillemotleft>\\<phi>: F b \\<rightarrow>\\<^sub>D a\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b \\<phi>.\n        C.ide b \\<and>\n        D.iso \\<phi> \\<and>\n        \\<guillemotleft>\\<phi> : F b \\<rightarrow>\\<^sub>D a\\<guillemotright> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using a essentially_surjective"], ["proof (prove)\nusing this:\n  D.ide a\n  D.ide ?b \\<Longrightarrow>\n  \\<exists>a. C.ide a \\<and> D.isomorphic (F a) ?b\n\ngoal (1 subgoal):\n 1. (\\<And>b \\<phi>.\n        C.ide b \\<and>\n        D.iso \\<phi> \\<and>\n        \\<guillemotleft>\\<phi> : F b \\<rightarrow>\\<^sub>D a\\<guillemotright> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  C.ide b \\<and>\n  D.iso \\<phi> \\<and>\n  \\<guillemotleft>\\<phi> : F b \\<rightarrow>\\<^sub>D a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. D.retraction (Adj.\\<epsilon> a)", "interpret \\<phi>: arrow_from_functor C D F b a \\<phi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F b a \\<phi>", "using \\<phi>"], ["proof (prove)\nusing this:\n  C.ide b \\<and>\n  D.iso \\<phi> \\<and>\n  \\<guillemotleft>\\<phi> : F b \\<rightarrow>\\<^sub>D a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F b a \\<phi>", "by (unfold_locales, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. D.retraction (Adj.\\<epsilon> a)", "let ?g = \"\\<epsilon>a.the_coext b \\<phi>\""], ["proof (state)\ngoal (1 subgoal):\n 1. D.retraction (Adj.\\<epsilon> a)", "have 1: \"\\<guillemotleft>?g : b \\<rightarrow>\\<^sub>C G a\\<guillemotright> \\<and> Adj.\\<epsilon> a \\<cdot>\\<^sub>D F ?g = \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<epsilon>a.the_coext b\n                     \\<phi> : b \\<rightarrow>\\<^sub>C G\n                 a\\<guillemotright> \\<and>\n    Adj.\\<epsilon> a \\<cdot>\\<^sub>D F (\\<epsilon>a.the_coext b \\<phi>) =\n    \\<phi>", "using \\<phi>.arrow_from_functor_axioms \\<epsilon>a.the_coext_prop [of b \\<phi>]"], ["proof (prove)\nusing this:\n  arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F b a \\<phi>\n  arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F b a\n   \\<phi> \\<Longrightarrow>\n  \\<guillemotleft>\\<epsilon>a.the_coext b\n                   \\<phi> : b \\<rightarrow>\\<^sub>C G a\\<guillemotright>\n  arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F b a\n   \\<phi> \\<Longrightarrow>\n  \\<phi> =\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D F (\\<epsilon>a.the_coext b \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<epsilon>a.the_coext b\n                     \\<phi> : b \\<rightarrow>\\<^sub>C G\n                 a\\<guillemotright> \\<and>\n    Adj.\\<epsilon> a \\<cdot>\\<^sub>D F (\\<epsilon>a.the_coext b \\<phi>) =\n    \\<phi>", "by simp"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<epsilon>a.the_coext b\n                   \\<phi> : b \\<rightarrow>\\<^sub>C G\n               a\\<guillemotright> \\<and>\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D F (\\<epsilon>a.the_coext b \\<phi>) =\n  \\<phi>\n\ngoal (1 subgoal):\n 1. D.retraction (Adj.\\<epsilon> a)", "have \"a = (Adj.\\<epsilon> a \\<cdot>\\<^sub>D F ?g) \\<cdot>\\<^sub>D D.inv \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a =\n    (Adj.\\<epsilon> a \\<cdot>\\<^sub>D\n     F (\\<epsilon>a.the_coext b \\<phi>)) \\<cdot>\\<^sub>D\n    D.inv \\<phi>", "using a 1 \\<phi> D.comp_cod_arr Adj.\\<epsilon>.preserves_hom D.invert_side_of_triangle(2)"], ["proof (prove)\nusing this:\n  D.ide a\n  \\<guillemotleft>\\<epsilon>a.the_coext b\n                   \\<phi> : b \\<rightarrow>\\<^sub>C G\n               a\\<guillemotright> \\<and>\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D F (\\<epsilon>a.the_coext b \\<phi>) =\n  \\<phi>\n  C.ide b \\<and>\n  D.iso \\<phi> \\<and>\n  \\<guillemotleft>\\<phi> : F b \\<rightarrow>\\<^sub>D a\\<guillemotright>\n  \\<lbrakk>D.arr ?f; D.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>D ?f = ?f\n  \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>D ?b\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>Adj.\\<epsilon>\n                   ?f : Adj.FG.map\n                         ?a \\<rightarrow>\\<^sub>D D.map ?b\\<guillemotright>\n  \\<lbrakk>D.arr ?h; ?f \\<cdot>\\<^sub>D ?g = ?h; D.iso ?g\\<rbrakk>\n  \\<Longrightarrow> D.seq ?h (D.inv ?g) \\<and>\n                    ?f = ?h \\<cdot>\\<^sub>D D.inv ?g\n\ngoal (1 subgoal):\n 1. a =\n    (Adj.\\<epsilon> a \\<cdot>\\<^sub>D\n     F (\\<epsilon>a.the_coext b \\<phi>)) \\<cdot>\\<^sub>D\n    D.inv \\<phi>", "by auto"], ["proof (state)\nthis:\n  a =\n  (Adj.\\<epsilon> a \\<cdot>\\<^sub>D\n   F (\\<epsilon>a.the_coext b \\<phi>)) \\<cdot>\\<^sub>D\n  D.inv \\<phi>\n\ngoal (1 subgoal):\n 1. D.retraction (Adj.\\<epsilon> a)", "also"], ["proof (state)\nthis:\n  a =\n  (Adj.\\<epsilon> a \\<cdot>\\<^sub>D\n   F (\\<epsilon>a.the_coext b \\<phi>)) \\<cdot>\\<^sub>D\n  D.inv \\<phi>\n\ngoal (1 subgoal):\n 1. D.retraction (Adj.\\<epsilon> a)", "have \"... = Adj.\\<epsilon> a \\<cdot>\\<^sub>D F ?g \\<cdot>\\<^sub>D D.inv \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Adj.\\<epsilon> a \\<cdot>\\<^sub>D\n     F (\\<epsilon>a.the_coext b \\<phi>)) \\<cdot>\\<^sub>D\n    D.inv \\<phi> =\n    Adj.\\<epsilon> a \\<cdot>\\<^sub>D\n    F (\\<epsilon>a.the_coext b \\<phi>) \\<cdot>\\<^sub>D D.inv \\<phi>", "using a 1 \\<phi> D.inv_in_hom Adj.\\<epsilon>.preserves_hom [of a a a] D.comp_assoc"], ["proof (prove)\nusing this:\n  D.ide a\n  \\<guillemotleft>\\<epsilon>a.the_coext b\n                   \\<phi> : b \\<rightarrow>\\<^sub>C G\n               a\\<guillemotright> \\<and>\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D F (\\<epsilon>a.the_coext b \\<phi>) =\n  \\<phi>\n  C.ide b \\<and>\n  D.iso \\<phi> \\<and>\n  \\<guillemotleft>\\<phi> : F b \\<rightarrow>\\<^sub>D a\\<guillemotright>\n  \\<lbrakk>D.iso ?f;\n   \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>D ?b\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>D.inv\n                                     ?f : ?b \\<rightarrow>\\<^sub>D ?a\\<guillemotright>\n  \\<guillemotleft>a : a \\<rightarrow>\\<^sub>D a\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>Adj.\\<epsilon>\n                   a : Adj.FG.map\n                        a \\<rightarrow>\\<^sub>D D.map a\\<guillemotright>\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. (Adj.\\<epsilon> a \\<cdot>\\<^sub>D\n     F (\\<epsilon>a.the_coext b \\<phi>)) \\<cdot>\\<^sub>D\n    D.inv \\<phi> =\n    Adj.\\<epsilon> a \\<cdot>\\<^sub>D\n    F (\\<epsilon>a.the_coext b \\<phi>) \\<cdot>\\<^sub>D D.inv \\<phi>", "by blast"], ["proof (state)\nthis:\n  (Adj.\\<epsilon> a \\<cdot>\\<^sub>D\n   F (\\<epsilon>a.the_coext b \\<phi>)) \\<cdot>\\<^sub>D\n  D.inv \\<phi> =\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D\n  F (\\<epsilon>a.the_coext b \\<phi>) \\<cdot>\\<^sub>D D.inv \\<phi>\n\ngoal (1 subgoal):\n 1. D.retraction (Adj.\\<epsilon> a)", "finally"], ["proof (chain)\npicking this:\n  a =\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D\n  F (\\<epsilon>a.the_coext b \\<phi>) \\<cdot>\\<^sub>D D.inv \\<phi>", "have \"\\<exists>f. D.ide (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f)\""], ["proof (prove)\nusing this:\n  a =\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D\n  F (\\<epsilon>a.the_coext b \\<phi>) \\<cdot>\\<^sub>D D.inv \\<phi>\n\ngoal (1 subgoal):\n 1. \\<exists>f. D.ide (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f)", "using a"], ["proof (prove)\nusing this:\n  a =\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D\n  F (\\<epsilon>a.the_coext b \\<phi>) \\<cdot>\\<^sub>D D.inv \\<phi>\n  D.ide a\n\ngoal (1 subgoal):\n 1. \\<exists>f. D.ide (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f)", "by metis"], ["proof (state)\nthis:\n  \\<exists>f. D.ide (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f)\n\ngoal (1 subgoal):\n 1. D.retraction (Adj.\\<epsilon> a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>f. D.ide (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f)\n\ngoal (1 subgoal):\n 1. D.retraction (Adj.\\<epsilon> a)", "unfolding D.retraction_def"], ["proof (prove)\nusing this:\n  \\<exists>f. D.ide (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f)\n\ngoal (1 subgoal):\n 1. \\<exists>f. D.ide (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f)", "by blast"], ["proof (state)\nthis:\n  D.retraction (Adj.\\<epsilon> a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  D.retraction (Adj.\\<epsilon> a)\n\ngoal (1 subgoal):\n 1. \\<And>a. D.ide a \\<Longrightarrow> D.iso (Adj.\\<epsilon> a)", "moreover"], ["proof (state)\nthis:\n  D.retraction (Adj.\\<epsilon> a)\n\ngoal (1 subgoal):\n 1. \\<And>a. D.ide a \\<Longrightarrow> D.iso (Adj.\\<epsilon> a)", "have \"D.mono (Adj.\\<epsilon> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.mono (Adj.\\<epsilon> a)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. D.arr (Adj.\\<epsilon> a)\n 2. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "show \"D.arr (Adj.\\<epsilon> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.arr (Adj.\\<epsilon> a)", "using a"], ["proof (prove)\nusing this:\n  D.ide a\n\ngoal (1 subgoal):\n 1. D.arr (Adj.\\<epsilon> a)", "by simp"], ["proof (state)\nthis:\n  D.arr (Adj.\\<epsilon> a)\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "show \"\\<And>f f'. D.seq (Adj.\\<epsilon> a) f \\<and> D.seq (Adj.\\<epsilon> a) f' \\<and> Adj.\\<epsilon> a \\<cdot>\\<^sub>D f = Adj.\\<epsilon> a \\<cdot>\\<^sub>D f'\n                            \\<Longrightarrow> f = f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "fix f f'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "assume ff': \"D.seq (Adj.\\<epsilon> a) f \\<and> D.seq (Adj.\\<epsilon> a) f' \\<and> Adj.\\<epsilon> a \\<cdot>\\<^sub>D f = Adj.\\<epsilon> a \\<cdot>\\<^sub>D f'\""], ["proof (state)\nthis:\n  D.seq (Adj.\\<epsilon> a) f \\<and>\n  D.seq (Adj.\\<epsilon> a) f' \\<and>\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D f = Adj.\\<epsilon> a \\<cdot>\\<^sub>D f'\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "have f: \"\\<guillemotleft>f : D.dom f \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : D.dom\n                         f \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>", "using a ff' Adj.\\<epsilon>.preserves_hom [of a a a]"], ["proof (prove)\nusing this:\n  D.ide a\n  D.seq (Adj.\\<epsilon> a) f \\<and>\n  D.seq (Adj.\\<epsilon> a) f' \\<and>\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D f = Adj.\\<epsilon> a \\<cdot>\\<^sub>D f'\n  \\<guillemotleft>a : a \\<rightarrow>\\<^sub>D a\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>Adj.\\<epsilon>\n                   a : Adj.FG.map\n                        a \\<rightarrow>\\<^sub>D D.map a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : D.dom\n                         f \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>", "by fastforce"], ["proof (state)\nthis:\n  \\<guillemotleft>f : D.dom f \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "have f': \"\\<guillemotleft>f' : D.dom f' \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>f' : D.dom\n                          f' \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>", "using a ff' Adj.\\<epsilon>.preserves_hom [of a a a]"], ["proof (prove)\nusing this:\n  D.ide a\n  D.seq (Adj.\\<epsilon> a) f \\<and>\n  D.seq (Adj.\\<epsilon> a) f' \\<and>\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D f = Adj.\\<epsilon> a \\<cdot>\\<^sub>D f'\n  \\<guillemotleft>a : a \\<rightarrow>\\<^sub>D a\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>Adj.\\<epsilon>\n                   a : Adj.FG.map\n                        a \\<rightarrow>\\<^sub>D D.map a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f' : D.dom\n                          f' \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>", "by fastforce"], ["proof (state)\nthis:\n  \\<guillemotleft>f' : D.dom\n                        f' \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "have par: \"D.par f f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.par f f'", "using f f' ff' D.dom_comp [of \"Adj.\\<epsilon> a\" f]"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : D.dom f \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>\n  \\<guillemotleft>f' : D.dom\n                        f' \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>\n  D.seq (Adj.\\<epsilon> a) f \\<and>\n  D.seq (Adj.\\<epsilon> a) f' \\<and>\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D f = Adj.\\<epsilon> a \\<cdot>\\<^sub>D f'\n  D.seq (Adj.\\<epsilon> a) f \\<Longrightarrow>\n  D.dom (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f) = D.dom f\n\ngoal (1 subgoal):\n 1. D.par f f'", "by force"], ["proof (state)\nthis:\n  D.par f f'\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "obtain b' \\<phi> where \\<phi>: \"C.ide b' \\<and> D.iso \\<phi> \\<and> \\<guillemotleft>\\<phi>: F b' \\<rightarrow>\\<^sub>D D.dom f\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b' \\<phi>.\n        C.ide b' \\<and>\n        D.iso \\<phi> \\<and>\n        \\<guillemotleft>\\<phi> : F b' \\<rightarrow>\\<^sub>D D.dom\n                       f\\<guillemotright> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using par essentially_surjective D.ide_dom [of f]"], ["proof (prove)\nusing this:\n  D.par f f'\n  D.ide ?b \\<Longrightarrow>\n  \\<exists>a. C.ide a \\<and> D.isomorphic (F a) ?b\n  D.arr f \\<Longrightarrow> D.ide (D.dom f)\n\ngoal (1 subgoal):\n 1. (\\<And>b' \\<phi>.\n        C.ide b' \\<and>\n        D.iso \\<phi> \\<and>\n        \\<guillemotleft>\\<phi> : F b' \\<rightarrow>\\<^sub>D D.dom\n                       f\\<guillemotright> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  C.ide b' \\<and>\n  D.iso \\<phi> \\<and>\n  \\<guillemotleft>\\<phi> : F b' \\<rightarrow>\\<^sub>D D.dom\n                 f\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "have 1: \"Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi> = Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi> =\n    Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>", "using ff' \\<phi> par D.comp_assoc"], ["proof (prove)\nusing this:\n  D.seq (Adj.\\<epsilon> a) f \\<and>\n  D.seq (Adj.\\<epsilon> a) f' \\<and>\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D f = Adj.\\<epsilon> a \\<cdot>\\<^sub>D f'\n  C.ide b' \\<and>\n  D.iso \\<phi> \\<and>\n  \\<guillemotleft>\\<phi> : F b' \\<rightarrow>\\<^sub>D D.dom\n                 f\\<guillemotright>\n  D.par f f'\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi> =\n    Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>", "by metis"], ["proof (state)\nthis:\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi> =\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "obtain g where g: \"\\<guillemotleft>g : b' \\<rightarrow>\\<^sub>C G a\\<guillemotright> \\<and> F g = f \\<cdot>\\<^sub>D \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<guillemotleft>g : b' \\<rightarrow>\\<^sub>C G\n                a\\<guillemotright> \\<and>\n        F g = f \\<cdot>\\<^sub>D \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using a f \\<phi> is_full [of \"G a\" b' \"f \\<cdot>\\<^sub>D \\<phi>\"]"], ["proof (prove)\nusing this:\n  D.ide a\n  \\<guillemotleft>f : D.dom f \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>\n  C.ide b' \\<and>\n  D.iso \\<phi> \\<and>\n  \\<guillemotleft>\\<phi> : F b' \\<rightarrow>\\<^sub>D D.dom\n                 f\\<guillemotright>\n  \\<lbrakk>C.ide (G a); C.ide b';\n   \\<guillemotleft>f \\<cdot>\\<^sub>D\n                   \\<phi> : F b' \\<rightarrow>\\<^sub>D F\n                  (G a)\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>fa.\n                       \\<guillemotleft>fa : b' \\<rightarrow>\\<^sub>C G\n                                a\\<guillemotright> \\<and>\n                       F fa = f \\<cdot>\\<^sub>D \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<guillemotleft>g : b' \\<rightarrow>\\<^sub>C G\n                a\\<guillemotright> \\<and>\n        F g = f \\<cdot>\\<^sub>D \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>g : b' \\<rightarrow>\\<^sub>C G a\\<guillemotright> \\<and>\n  F g = f \\<cdot>\\<^sub>D \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "obtain g' where g': \"\\<guillemotleft>g' : b' \\<rightarrow>\\<^sub>C G a\\<guillemotright> \\<and> F g' = f' \\<cdot>\\<^sub>D \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        \\<guillemotleft>g' : b' \\<rightarrow>\\<^sub>C G\n                 a\\<guillemotright> \\<and>\n        F g' = f' \\<cdot>\\<^sub>D \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using a f' par \\<phi> is_full [of \"G a\" b' \"f' \\<cdot>\\<^sub>D \\<phi>\"]"], ["proof (prove)\nusing this:\n  D.ide a\n  \\<guillemotleft>f' : D.dom\n                        f' \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>\n  D.par f f'\n  C.ide b' \\<and>\n  D.iso \\<phi> \\<and>\n  \\<guillemotleft>\\<phi> : F b' \\<rightarrow>\\<^sub>D D.dom\n                 f\\<guillemotright>\n  \\<lbrakk>C.ide (G a); C.ide b';\n   \\<guillemotleft>f' \\<cdot>\\<^sub>D\n                   \\<phi> : F b' \\<rightarrow>\\<^sub>D F\n                  (G a)\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>f.\n                       \\<guillemotleft>f : b' \\<rightarrow>\\<^sub>C G\n                               a\\<guillemotright> \\<and>\n                       F f = f' \\<cdot>\\<^sub>D \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        \\<guillemotleft>g' : b' \\<rightarrow>\\<^sub>C G\n                 a\\<guillemotright> \\<and>\n        F g' = f' \\<cdot>\\<^sub>D \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>g' : b' \\<rightarrow>\\<^sub>C G a\\<guillemotright> \\<and>\n  F g' = f' \\<cdot>\\<^sub>D \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "interpret f\\<phi>: arrow_from_functor C D F b' a \\<open>Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F b' a\n     (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi>)", "using a \\<phi> f Adj.\\<epsilon>.preserves_hom"], ["proof (prove)\nusing this:\n  D.ide a\n  C.ide b' \\<and>\n  D.iso \\<phi> \\<and>\n  \\<guillemotleft>\\<phi> : F b' \\<rightarrow>\\<^sub>D D.dom\n                 f\\<guillemotright>\n  \\<guillemotleft>f : D.dom f \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>\n  \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>D ?b\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>Adj.\\<epsilon>\n                   ?f : Adj.FG.map\n                         ?a \\<rightarrow>\\<^sub>D D.map ?b\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F b' a\n     (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi>)", "by (unfold_locales, fastforce)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "interpret f'\\<phi>: arrow_from_functor C D F b' a \\<open>Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F b' a\n     (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>)", "using a \\<phi> f' par Adj.\\<epsilon>.preserves_hom"], ["proof (prove)\nusing this:\n  D.ide a\n  C.ide b' \\<and>\n  D.iso \\<phi> \\<and>\n  \\<guillemotleft>\\<phi> : F b' \\<rightarrow>\\<^sub>D D.dom\n                 f\\<guillemotright>\n  \\<guillemotleft>f' : D.dom\n                        f' \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>\n  D.par f f'\n  \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>D ?b\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>Adj.\\<epsilon>\n                   ?f : Adj.FG.map\n                         ?a \\<rightarrow>\\<^sub>D D.map ?b\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F b' a\n     (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>)", "by (unfold_locales, fastforce)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "have \"\\<epsilon>a.is_coext b' (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi>) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>a.is_coext b'\n     (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi>) g", "unfolding \\<epsilon>a.is_coext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>g : b' \\<rightarrow>\\<^sub>C G a\\<guillemotright> \\<and>\n    Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi> =\n    Adj.\\<epsilon> a \\<cdot>\\<^sub>D F g", "using g 1"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : b' \\<rightarrow>\\<^sub>C G a\\<guillemotright> \\<and>\n  F g = f \\<cdot>\\<^sub>D \\<phi>\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi> =\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>g : b' \\<rightarrow>\\<^sub>C G a\\<guillemotright> \\<and>\n    Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi> =\n    Adj.\\<epsilon> a \\<cdot>\\<^sub>D F g", "by auto"], ["proof (state)\nthis:\n  \\<epsilon>a.is_coext b'\n   (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi>) g\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "moreover"], ["proof (state)\nthis:\n  \\<epsilon>a.is_coext b'\n   (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi>) g\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "have \"\\<epsilon>a.is_coext b' (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>) g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>a.is_coext b'\n     (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>) g'", "unfolding \\<epsilon>a.is_coext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>g' : b' \\<rightarrow>\\<^sub>C G\n             a\\<guillemotright> \\<and>\n    Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi> =\n    Adj.\\<epsilon> a \\<cdot>\\<^sub>D F g'", "using g' 1"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g' : b' \\<rightarrow>\\<^sub>C G a\\<guillemotright> \\<and>\n  F g' = f' \\<cdot>\\<^sub>D \\<phi>\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi> =\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>g' : b' \\<rightarrow>\\<^sub>C G\n             a\\<guillemotright> \\<and>\n    Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi> =\n    Adj.\\<epsilon> a \\<cdot>\\<^sub>D F g'", "by auto"], ["proof (state)\nthis:\n  \\<epsilon>a.is_coext b'\n   (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>) g'\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "ultimately"], ["proof (chain)\npicking this:\n  \\<epsilon>a.is_coext b'\n   (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi>) g\n  \\<epsilon>a.is_coext b'\n   (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>) g'", "have \"g = g'\""], ["proof (prove)\nusing this:\n  \\<epsilon>a.is_coext b'\n   (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi>) g\n  \\<epsilon>a.is_coext b'\n   (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>) g'\n\ngoal (1 subgoal):\n 1. g = g'", "using 1 f\\<phi>.arrow_from_functor_axioms f'\\<phi>.arrow_from_functor_axioms\n                      \\<epsilon>a.the_coext_unique \\<epsilon>a.the_coext_unique [of b' \"Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>\" g']"], ["proof (prove)\nusing this:\n  \\<epsilon>a.is_coext b'\n   (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi>) g\n  \\<epsilon>a.is_coext b'\n   (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>) g'\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi> =\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>\n  arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F b' a\n   (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f \\<cdot>\\<^sub>D \\<phi>)\n  arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F b' a\n   (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>)\n  \\<lbrakk>arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F ?x' a\n            ?f;\n   \\<epsilon>a.is_coext ?x' ?f ?g\\<rbrakk>\n  \\<Longrightarrow> ?g = \\<epsilon>a.the_coext ?x' ?f\n  \\<lbrakk>arrow_from_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F b' a\n            (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>);\n   \\<epsilon>a.is_coext b'\n    (Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<cdot>\\<^sub>D \\<phi>) g'\\<rbrakk>\n  \\<Longrightarrow> g' =\n                    \\<epsilon>a.the_coext b'\n                     (Adj.\\<epsilon> a \\<cdot>\\<^sub>D\n                      f' \\<cdot>\\<^sub>D \\<phi>)\n\ngoal (1 subgoal):\n 1. g = g'", "by auto"], ["proof (state)\nthis:\n  g = g'\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "hence \"f \\<cdot>\\<^sub>D \\<phi> = f' \\<cdot>\\<^sub>D \\<phi>\""], ["proof (prove)\nusing this:\n  g = g'\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>D \\<phi> = f' \\<cdot>\\<^sub>D \\<phi>", "using g g' is_faithful"], ["proof (prove)\nusing this:\n  g = g'\n  \\<guillemotleft>g : b' \\<rightarrow>\\<^sub>C G a\\<guillemotright> \\<and>\n  F g = f \\<cdot>\\<^sub>D \\<phi>\n  \\<guillemotleft>g' : b' \\<rightarrow>\\<^sub>C G a\\<guillemotright> \\<and>\n  F g' = f' \\<cdot>\\<^sub>D \\<phi>\n  \\<lbrakk>C.par ?f ?f'; F ?f = F ?f'\\<rbrakk> \\<Longrightarrow> ?f = ?f'\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>D \\<phi> = f' \\<cdot>\\<^sub>D \\<phi>", "by argo"], ["proof (state)\nthis:\n  f \\<cdot>\\<^sub>D \\<phi> = f' \\<cdot>\\<^sub>D \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       D.seq (Adj.\\<epsilon> a) f \\<and>\n       D.seq (Adj.\\<epsilon> a) f' \\<and>\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f =\n       Adj.\\<epsilon> a \\<cdot>\\<^sub>D f' \\<Longrightarrow>\n       f = f'", "thus \"f = f'\""], ["proof (prove)\nusing this:\n  f \\<cdot>\\<^sub>D \\<phi> = f' \\<cdot>\\<^sub>D \\<phi>\n\ngoal (1 subgoal):\n 1. f = f'", "using \\<phi> f f' par D.iso_is_retraction D.retraction_is_epi D.epiE [of \\<phi> f f']"], ["proof (prove)\nusing this:\n  f \\<cdot>\\<^sub>D \\<phi> = f' \\<cdot>\\<^sub>D \\<phi>\n  C.ide b' \\<and>\n  D.iso \\<phi> \\<and>\n  \\<guillemotleft>\\<phi> : F b' \\<rightarrow>\\<^sub>D D.dom\n                 f\\<guillemotright>\n  \\<guillemotleft>f : D.dom f \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>\n  \\<guillemotleft>f' : D.dom\n                        f' \\<rightarrow>\\<^sub>D F (G a)\\<guillemotright>\n  D.par f f'\n  D.iso ?f \\<Longrightarrow> D.retraction ?f\n  D.retraction ?g \\<Longrightarrow> D.epi ?g\n  \\<lbrakk>D.epi \\<phi>; D.seq f \\<phi>; D.seq f' \\<phi>;\n   f \\<cdot>\\<^sub>D \\<phi> = f' \\<cdot>\\<^sub>D \\<phi>\\<rbrakk>\n  \\<Longrightarrow> f = f'\n\ngoal (1 subgoal):\n 1. f = f'", "by auto"], ["proof (state)\nthis:\n  f = f'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  D.seq (Adj.\\<epsilon> a) ?f1 \\<and>\n  D.seq (Adj.\\<epsilon> a) ?f'1 \\<and>\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D ?f1 =\n  Adj.\\<epsilon> a \\<cdot>\\<^sub>D ?f'1 \\<Longrightarrow>\n  ?f1 = ?f'1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  D.mono (Adj.\\<epsilon> a)\n\ngoal (1 subgoal):\n 1. \\<And>a. D.ide a \\<Longrightarrow> D.iso (Adj.\\<epsilon> a)", "ultimately"], ["proof (chain)\npicking this:\n  D.retraction (Adj.\\<epsilon> a)\n  D.mono (Adj.\\<epsilon> a)", "show \"D.iso (Adj.\\<epsilon> a)\""], ["proof (prove)\nusing this:\n  D.retraction (Adj.\\<epsilon> a)\n  D.mono (Adj.\\<epsilon> a)\n\ngoal (1 subgoal):\n 1. D.iso (Adj.\\<epsilon> a)", "using D.iso_iff_mono_and_retraction"], ["proof (prove)\nusing this:\n  D.retraction (Adj.\\<epsilon> a)\n  D.mono (Adj.\\<epsilon> a)\n  D.iso ?f = (D.mono ?f \\<and> D.retraction ?f)\n\ngoal (1 subgoal):\n 1. D.iso (Adj.\\<epsilon> a)", "by simp"], ["proof (state)\nthis:\n  D.iso (Adj.\\<epsilon> a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  D.ide ?a1 \\<Longrightarrow> D.iso (Adj.\\<epsilon> ?a1)\n\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> C.iso (Adj.\\<eta> a)", "interpret \\<epsilon>: natural_isomorphism D D \\<open>F o G\\<close> D.map Adj.\\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) Adj.FG.map D.map\n     Adj.\\<epsilon>", "using 1"], ["proof (prove)\nusing this:\n  D.ide ?a1 \\<Longrightarrow> D.iso (Adj.\\<epsilon> ?a1)\n\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) Adj.FG.map D.map\n     Adj.\\<epsilon>", "by (unfold_locales, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> C.iso (Adj.\\<eta> a)", "interpret \\<epsilon>F: natural_isomorphism C D \\<open>F o G o F\\<close> F \\<open>Adj.\\<epsilon> o F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) Adj.FGF.map F\n     (Adj.\\<epsilon> \\<circ> F)", "using \\<epsilon>.components_are_iso"], ["proof (prove)\nusing this:\n  D.ide ?a \\<Longrightarrow> D.iso (Adj.\\<epsilon> ?a)\n\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) Adj.FGF.map F\n     (Adj.\\<epsilon> \\<circ> F)", "by (unfold_locales, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> C.iso (Adj.\\<eta> a)", "show \"\\<And>a. C.ide a \\<Longrightarrow> C.iso (Adj.\\<eta> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> C.iso (Adj.\\<eta> a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> C.iso (Adj.\\<eta> a)", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> C.iso (Adj.\\<eta> a)", "assume a: \"C.ide a\""], ["proof (state)\nthis:\n  C.ide a\n\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> C.iso (Adj.\\<eta> a)", "have \"D.inverse_arrows ((Adj.\\<epsilon> o F) a) ((F o Adj.\\<eta>) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.inverse_arrows ((Adj.\\<epsilon> \\<circ> F) a)\n     ((F \\<circ> Adj.\\<eta>) a)", "using a \\<epsilon>.components_are_iso Adj.\\<eta>\\<epsilon>.triangle_F Adj.\\<epsilon>FoF\\<eta>.map_simp_ide\n                  D.section_retraction_of_iso"], ["proof (prove)\nusing this:\n  C.ide a\n  D.ide ?a \\<Longrightarrow> D.iso (Adj.\\<epsilon> ?a)\n  Adj.\\<epsilon>FoF\\<eta>.map = F\n  C.ide ?a \\<Longrightarrow>\n  Adj.\\<epsilon>FoF\\<eta>.map ?a =\n  (Adj.\\<epsilon> \\<circ> F) ?a \\<cdot>\\<^sub>D (F \\<circ> Adj.\\<eta>) ?a\n  \\<lbrakk>D.iso ?f; D.ide (?g \\<cdot>\\<^sub>D ?f)\\<rbrakk>\n  \\<Longrightarrow> D.inverse_arrows ?f ?g\n  \\<lbrakk>D.iso ?f; D.ide (?f \\<cdot>\\<^sub>D ?g)\\<rbrakk>\n  \\<Longrightarrow> D.inverse_arrows ?f ?g\n\ngoal (1 subgoal):\n 1. D.inverse_arrows ((Adj.\\<epsilon> \\<circ> F) a)\n     ((F \\<circ> Adj.\\<eta>) a)", "by simp"], ["proof (state)\nthis:\n  D.inverse_arrows ((Adj.\\<epsilon> \\<circ> F) a) ((F \\<circ> Adj.\\<eta>) a)\n\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> C.iso (Adj.\\<eta> a)", "hence \"D.iso ((F o Adj.\\<eta>) a)\""], ["proof (prove)\nusing this:\n  D.inverse_arrows ((Adj.\\<epsilon> \\<circ> F) a) ((F \\<circ> Adj.\\<eta>) a)\n\ngoal (1 subgoal):\n 1. D.iso ((F \\<circ> Adj.\\<eta>) a)", "by blast"], ["proof (state)\nthis:\n  D.iso ((F \\<circ> Adj.\\<eta>) a)\n\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> C.iso (Adj.\\<eta> a)", "thus \"C.iso (Adj.\\<eta> a)\""], ["proof (prove)\nusing this:\n  D.iso ((F \\<circ> Adj.\\<eta>) a)\n\ngoal (1 subgoal):\n 1. C.iso (Adj.\\<eta> a)", "using a reflects_iso [of \"Adj.\\<eta> a\"]"], ["proof (prove)\nusing this:\n  D.iso ((F \\<circ> Adj.\\<eta>) a)\n  C.ide a\n  \\<lbrakk>\\<guillemotleft>Adj.\\<eta>\n                            a : ?a' \\<rightarrow>\\<^sub>C ?a\\<guillemotright>;\n   D.iso (F (Adj.\\<eta> a))\\<rbrakk>\n  \\<Longrightarrow> C.iso (Adj.\\<eta> a)\n\ngoal (1 subgoal):\n 1. C.iso (Adj.\\<eta> a)", "by fastforce"], ["proof (state)\nthis:\n  C.iso (Adj.\\<eta> a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C.ide ?a1 \\<Longrightarrow> C.iso (Adj.\\<eta> ?a1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>G \\<eta> \\<epsilon>.\n       adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n        \\<epsilon>", "(*\n       * Uggh, I should have started with \"right_adjoint_functor D C G\" so that the\n       * following would come out right.  Instead, another step is needed to dualize.\n       * TODO: Maybe re-work this later.\n       *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>G \\<eta> \\<epsilon>.\n       adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n        \\<epsilon>", "interpret adjoint_equivalence D C F G Adj.\\<eta> Adj.\\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F G Adj.\\<eta>\n     Adj.\\<epsilon>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>G \\<eta> \\<epsilon>.\n       adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n        \\<epsilon>", "interpret \\<epsilon>': inverse_transformation D D \\<open>F o G\\<close> D.map Adj.\\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) Adj.FG.map\n     D.map Adj.\\<epsilon>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>G \\<eta> \\<epsilon>.\n       adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n        \\<epsilon>", "interpret \\<eta>': inverse_transformation C C C.map \\<open>G o F\\<close> Adj.\\<eta>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n     Adj.GF.map Adj.\\<eta>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>G \\<eta> \\<epsilon>.\n       adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n        \\<epsilon>", "interpret E: adjoint_equivalence C D G F \\<epsilon>'.map \\<eta>'.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F\n     \\<epsilon>'.map \\<eta>'.map", "using adjoint_equivalence_axioms dual_equivalence"], ["proof (prove)\nusing this:\n  adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F G Adj.\\<eta>\n   Adj.\\<epsilon>\n  adjoint_equivalence (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F G Adj.\\<eta>\n   Adj.\\<epsilon> \\<Longrightarrow>\n  adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F\n   \\<epsilon>'.map \\<eta>'.map\n\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F\n     \\<epsilon>'.map \\<eta>'.map", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>G \\<eta> \\<epsilon>.\n       adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n        \\<epsilon>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>G \\<eta> \\<epsilon>.\n       adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n        \\<epsilon>", "using E.adjoint_equivalence_axioms"], ["proof (prove)\nusing this:\n  adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F\n   \\<epsilon>'.map \\<eta>'.map\n\ngoal (1 subgoal):\n 1. \\<exists>G \\<eta> \\<epsilon>.\n       adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n        \\<epsilon>", "by auto"], ["proof (state)\nthis:\n  \\<exists>G \\<eta> \\<epsilon>.\n     adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n      \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_right_adjoint_functor:\n    shows \"right_adjoint_functor C D F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F", "obtain G \\<eta> \\<epsilon> where E: \"adjoint_equivalence C D G F \\<eta> \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>G \\<eta> \\<epsilon>.\n        adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n         \\<epsilon> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using extends_to_adjoint_equivalence"], ["proof (prove)\nusing this:\n  \\<exists>G \\<eta> \\<epsilon>.\n     adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n      \\<epsilon>\n\ngoal (1 subgoal):\n 1. (\\<And>G \\<eta> \\<epsilon>.\n        adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n         \\<epsilon> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F", "interpret E: adjoint_equivalence C D G F \\<eta> \\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n     \\<epsilon>", "using E"], ["proof (prove)\nusing this:\n  adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n     \\<epsilon>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F", "interpret Adj: meta_adjunction C D G F E.\\<phi> E.\\<psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F E.\\<phi>\n     E.\\<psi>", "using E.induces_meta_adjunction"], ["proof (prove)\nusing this:\n  meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F E.\\<phi> E.\\<psi>\n\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F E.\\<phi>\n     E.\\<psi>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F", "using Adj.has_right_adjoint_functor"], ["proof (prove)\nusing this:\n  right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F\n\ngoal (1 subgoal):\n 1. right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F", "by simp"], ["proof (state)\nthis:\n  right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_equivalence_functor:\n    shows \"equivalence_functor C D F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>Fa \\<eta> \\<epsilon>.\n       equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) Fa F\n        \\<eta> \\<epsilon>", "obtain G \\<eta> \\<epsilon> where E: \"adjoint_equivalence C D G F \\<eta> \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>G \\<eta> \\<epsilon>.\n        adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n         \\<epsilon> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using extends_to_adjoint_equivalence"], ["proof (prove)\nusing this:\n  \\<exists>G \\<eta> \\<epsilon>.\n     adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n      \\<epsilon>\n\ngoal (1 subgoal):\n 1. (\\<And>G \\<eta> \\<epsilon>.\n        adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n         \\<epsilon> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<exists>Fa \\<eta> \\<epsilon>.\n       equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) Fa F\n        \\<eta> \\<epsilon>", "interpret E: adjoint_equivalence C D G F \\<eta> \\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n     \\<epsilon>", "using E"], ["proof (prove)\nusing this:\n  adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n     \\<epsilon>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>Fa \\<eta> \\<epsilon>.\n       equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) Fa F\n        \\<eta> \\<epsilon>", "have \"equivalence_of_categories C D G F \\<eta> \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n     \\<epsilon>", ".."], ["proof (state)\nthis:\n  equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<exists>Fa \\<eta> \\<epsilon>.\n       equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) Fa F\n        \\<eta> \\<epsilon>", "thus \"\\<exists>G \\<eta> \\<epsilon>. equivalence_of_categories C D G F \\<eta> \\<epsilon>\""], ["proof (prove)\nusing this:\n  equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F \\<eta>\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<exists>G \\<eta> \\<epsilon>.\n       equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F\n        \\<eta> \\<epsilon>", "by blast"], ["proof (state)\nthis:\n  \\<exists>G \\<eta> \\<epsilon>.\n     equivalence_of_categories (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G F\n      \\<eta> \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale equivalence_functor C D F"], ["proof (prove)\ngoal (1 subgoal):\n 1. equivalence_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F", "using is_equivalence_functor"], ["proof (prove)\nusing this:\n  equivalence_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F\n\ngoal (1 subgoal):\n 1. equivalence_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F", "by blast"], ["", "end"], ["", "context equivalence_of_categories\n  begin"], ["", "text \\<open>\n      The following development shows that an equivalence of categories can\n      be refined to an adjoint equivalence by replacing just the counit.\n    \\<close>"], ["", "abbreviation \\<epsilon>'\n    where \"\\<epsilon>' a \\<equiv> \\<epsilon> a \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G a))) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F (G a)))\""], ["", "interpretation \\<epsilon>': transformation_by_components C C \\<open>F \\<circ> G\\<close> C.map \\<epsilon>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. transformation_by_components (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n     (F \\<circ> G) C.map \\<epsilon>'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       C.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<epsilon>'\n                        a : (F \\<circ> G)\n                             a \\<rightarrow>\\<^sub>C C.map\n                a\\<guillemotright>\n 2. \\<And>f.\n       C.arr f \\<Longrightarrow>\n       \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n       C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "show \"\\<And>a. C.ide a \\<Longrightarrow> \\<guillemotleft>\\<epsilon>' a : (F \\<circ> G) a \\<rightarrow>\\<^sub>C C.map a\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       C.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<epsilon>'\n                        a : (F \\<circ> G)\n                             a \\<rightarrow>\\<^sub>C C.map\n                a\\<guillemotright>", "using \\<eta>.components_are_iso \\<epsilon>.components_are_iso"], ["proof (prove)\nusing this:\n  D.ide ?a \\<Longrightarrow> D.iso (\\<eta> ?a)\n  C.ide ?a \\<Longrightarrow> C.iso (\\<epsilon> ?a)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       C.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<epsilon>'\n                        a : (F \\<circ> G)\n                             a \\<rightarrow>\\<^sub>C C.map\n                a\\<guillemotright>", "by simp"], ["proof (state)\nthis:\n  C.ide ?a \\<Longrightarrow>\n  \\<guillemotleft>\\<epsilon>'\n                   ?a : (F \\<circ> G)\n                         ?a \\<rightarrow>\\<^sub>C C.map ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       C.arr f \\<Longrightarrow>\n       \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n       C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       C.arr f \\<Longrightarrow>\n       \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n       C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "assume f: \"C.arr f\""], ["proof (state)\nthis:\n  C.arr f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       C.arr f \\<Longrightarrow>\n       \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n       C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "show \"\\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f = C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "have \"\\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n              \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F (G (C.cod f)))) \\<cdot>\\<^sub>C F (G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n    \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.cod f)))) \\<cdot>\\<^sub>C F (G f)", "using f C.comp_assoc"], ["proof (prove)\nusing this:\n  C.arr f\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n    \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.cod f)))) \\<cdot>\\<^sub>C F (G f)", "by simp"], ["proof (state)\nthis:\n  \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n  \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n  F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F (G (C.cod f)))) \\<cdot>\\<^sub>C F (G f)\n\ngoal (1 subgoal):\n 1. \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "also"], ["proof (state)\nthis:\n  \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n  \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n  F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F (G (C.cod f)))) \\<cdot>\\<^sub>C F (G f)\n\ngoal (1 subgoal):\n 1. \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "have \"... = \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C (F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n                           F (G (F (G f)))) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F (G (C.dom f))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.cod f)))) \\<cdot>\\<^sub>C F (G f) =\n    \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n     F (G (F (G f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.dom f))))", "using f \\<epsilon>.inv_naturality [of \"F (G f)\"] C.comp_assoc"], ["proof (prove)\nusing this:\n  C.arr f\n  C.arr (F (G f)) \\<Longrightarrow>\n  (F \\<circ> G) (F (G f)) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (C.dom (F (G f)))) =\n  C.inv (\\<epsilon> (C.cod (F (G f)))) \\<cdot>\\<^sub>C C.map (F (G f))\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.cod f)))) \\<cdot>\\<^sub>C F (G f) =\n    \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n     F (G (F (G f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.dom f))))", "by simp"], ["proof (state)\nthis:\n  \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n  F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F (G (C.cod f)))) \\<cdot>\\<^sub>C F (G f) =\n  \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n  (F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n   F (G (F (G f)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F (G (C.dom f))))\n\ngoal (1 subgoal):\n 1. \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "also"], ["proof (state)\nthis:\n  \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n  F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F (G (C.cod f)))) \\<cdot>\\<^sub>C F (G f) =\n  \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n  (F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n   F (G (F (G f)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F (G (C.dom f))))\n\ngoal (1 subgoal):\n 1. \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "have \"... = (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f)))) \\<cdot>\\<^sub>C\n                           C.inv (\\<epsilon> (F (G (C.dom f))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n     F (G (F (G f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.dom f)))) =\n    (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n    F (D.inv (\\<eta> (G (C.dom f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.dom f))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n     F (G (F (G f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.dom f)))) =\n    (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n    F (D.inv (\\<eta> (G (C.dom f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.dom f))))", "have \"F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n                F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n    F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n    F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))", "have \"F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n                  F (D.inv (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>D G (F (G f)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n    F (D.inv (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>D G (F (G f)))", "using f"], ["proof (prove)\nusing this:\n  C.arr f\n\ngoal (1 subgoal):\n 1. F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n    F (D.inv (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>D G (F (G f)))", "by simp"], ["proof (state)\nthis:\n  F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n  F (D.inv (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>D G (F (G f)))\n\ngoal (1 subgoal):\n 1. F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n    F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))", "also"], ["proof (state)\nthis:\n  F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n  F (D.inv (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>D G (F (G f)))\n\ngoal (1 subgoal):\n 1. F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n    F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))", "have \"... = F (G f \\<cdot>\\<^sub>D D.inv (\\<eta> (G (C.dom f))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (D.inv (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>D G (F (G f))) =\n    F (G f \\<cdot>\\<^sub>D D.inv (\\<eta> (G (C.dom f))))", "using f \\<eta>.inv_naturality [of \"G f\"]"], ["proof (prove)\nusing this:\n  C.arr f\n  D.arr (G f) \\<Longrightarrow>\n  D.map (G f) \\<cdot>\\<^sub>D D.inv (\\<eta> (D.dom (G f))) =\n  D.inv (\\<eta> (D.cod (G f))) \\<cdot>\\<^sub>D (G \\<circ> F) (G f)\n\ngoal (1 subgoal):\n 1. F (D.inv (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>D G (F (G f))) =\n    F (G f \\<cdot>\\<^sub>D D.inv (\\<eta> (G (C.dom f))))", "by simp"], ["proof (state)\nthis:\n  F (D.inv (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>D G (F (G f))) =\n  F (G f \\<cdot>\\<^sub>D D.inv (\\<eta> (G (C.dom f))))\n\ngoal (1 subgoal):\n 1. F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n    F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))", "also"], ["proof (state)\nthis:\n  F (D.inv (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>D G (F (G f))) =\n  F (G f \\<cdot>\\<^sub>D D.inv (\\<eta> (G (C.dom f))))\n\ngoal (1 subgoal):\n 1. F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n    F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))", "have \"... = F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (G f \\<cdot>\\<^sub>D D.inv (\\<eta> (G (C.dom f)))) =\n    F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))", "using f"], ["proof (prove)\nusing this:\n  C.arr f\n\ngoal (1 subgoal):\n 1. F (G f \\<cdot>\\<^sub>D D.inv (\\<eta> (G (C.dom f)))) =\n    F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))", "by simp"], ["proof (state)\nthis:\n  F (G f \\<cdot>\\<^sub>D D.inv (\\<eta> (G (C.dom f)))) =\n  F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))\n\ngoal (1 subgoal):\n 1. F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n    F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))", "finally"], ["proof (chain)\npicking this:\n  F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n  F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))", "show ?thesis"], ["proof (prove)\nusing this:\n  F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n  F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))\n\ngoal (1 subgoal):\n 1. F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n    F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))", "by blast"], ["proof (state)\nthis:\n  F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n  F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n  F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))\n\ngoal (1 subgoal):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n     F (G (F (G f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.dom f)))) =\n    (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n    F (D.inv (\\<eta> (G (C.dom f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.dom f))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n  F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))\n\ngoal (1 subgoal):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n     F (G (F (G f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.dom f)))) =\n    (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n    F (D.inv (\\<eta> (G (C.dom f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.dom f))))", "using C.comp_assoc"], ["proof (prove)\nusing this:\n  F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C F (G (F (G f))) =\n  F (G f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f))))\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n     F (G (F (G f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.dom f)))) =\n    (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n    F (D.inv (\\<eta> (G (C.dom f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.dom f))))", "by simp"], ["proof (state)\nthis:\n  \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n  (F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n   F (G (F (G f)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F (G (C.dom f)))) =\n  (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n  F (D.inv (\\<eta> (G (C.dom f)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F (G (C.dom f))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n  (F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n   F (G (F (G f)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F (G (C.dom f)))) =\n  (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n  F (D.inv (\\<eta> (G (C.dom f)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F (G (C.dom f))))\n\ngoal (1 subgoal):\n 1. \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "also"], ["proof (state)\nthis:\n  \\<epsilon> (C.cod f) \\<cdot>\\<^sub>C\n  (F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n   F (G (F (G f)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F (G (C.dom f)))) =\n  (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n  F (D.inv (\\<eta> (G (C.dom f)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F (G (C.dom f))))\n\ngoal (1 subgoal):\n 1. \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "have \"... = C.map f \\<cdot>\\<^sub>C \\<epsilon> (C.dom f) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (C.dom f)))) \\<cdot>\\<^sub>C\n                           C.inv (\\<epsilon> (F (G (C.dom f))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n    F (D.inv (\\<eta> (G (C.dom f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.dom f)))) =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "using f \\<epsilon>.naturality C.comp_assoc"], ["proof (prove)\nusing this:\n  C.arr f\n  C.arr ?f \\<Longrightarrow>\n  \\<epsilon> (C.cod ?f) \\<cdot>\\<^sub>C (F \\<circ> G) ?f =\n  C.map ?f \\<cdot>\\<^sub>C \\<epsilon> (C.dom ?f)\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n    F (D.inv (\\<eta> (G (C.dom f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.dom f)))) =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "by simp"], ["proof (state)\nthis:\n  (\\<epsilon> (C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n  F (D.inv (\\<eta> (G (C.dom f)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F (G (C.dom f)))) =\n  C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)\n\ngoal (1 subgoal):\n 1. \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "finally"], ["proof (chain)\npicking this:\n  \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n  C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n  C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)\n\ngoal (1 subgoal):\n 1. \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)", "by blast"], ["proof (state)\nthis:\n  \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n  C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<epsilon>' (C.cod f) \\<cdot>\\<^sub>C (F \\<circ> G) f =\n  C.map f \\<cdot>\\<^sub>C \\<epsilon>' (C.dom f)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation \\<epsilon>': natural_isomorphism C C \\<open>F \\<circ> G\\<close> C.map \\<epsilon>'.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) (F \\<circ> G)\n     C.map \\<epsilon>'.map", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> C.iso (\\<epsilon>'.map a)", "show \"\\<And>a. C.ide a \\<Longrightarrow> C.iso (\\<epsilon>'.map a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> C.iso (\\<epsilon>'.map a)", "unfolding \\<epsilon>'.map_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       C.ide a \\<Longrightarrow>\n       C.iso\n        (if C.arr a\n         then \\<epsilon>' (C.cod a) \\<cdot>\\<^sub>C (F \\<circ> G) a\n         else C.null)", "using \\<eta>.components_are_iso \\<epsilon>.components_are_iso"], ["proof (prove)\nusing this:\n  D.ide ?a \\<Longrightarrow> D.iso (\\<eta> ?a)\n  C.ide ?a \\<Longrightarrow> C.iso (\\<epsilon> ?a)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       C.ide a \\<Longrightarrow>\n       C.iso\n        (if C.arr a\n         then \\<epsilon>' (C.cod a) \\<cdot>\\<^sub>C (F \\<circ> G) a\n         else C.null)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       C.ide a \\<Longrightarrow>\n       C.iso (\\<epsilon>' a \\<cdot>\\<^sub>C F (G a))", "by (intro C.isos_compose) auto"], ["proof (state)\nthis:\n  C.ide ?a \\<Longrightarrow> C.iso (\\<epsilon>'.map ?a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma F\\<eta>_inverse:\n    assumes \"D.ide b\"\n    shows \"F (\\<eta> (G (F b))) = F (G (F (\\<eta> b)))\"\n    and \"F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b) = \\<epsilon> (F (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> (G (F b)))\"\n    and \"C.inverse_arrows (F (\\<eta> b)) (\\<epsilon>' (F b))\"\n    and \"F (\\<eta> b) = C.inv (\\<epsilon>' (F b))\"\n    and \"C.inv (F (\\<eta> b)) = \\<epsilon>' (F b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (F (\\<eta> (G (F b))) = F (G (F (\\<eta> b))) &&&\n     F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b) =\n     \\<epsilon> (F (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> (G (F b)))) &&&\n    C.inverse_arrows (F (\\<eta> b)) (\\<epsilon>' (F b)) &&&\n    F (\\<eta> b) = C.inv (\\<epsilon>' (F b)) &&&\n    C.inv (F (\\<eta> b)) = \\<epsilon>' (F b)", "proof -"], ["proof (state)\ngoal (5 subgoals):\n 1. F (\\<eta> (G (F b))) = F (G (F (\\<eta> b)))\n 2. F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b) =\n    \\<epsilon> (F (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> (G (F b)))\n 3. C.inverse_arrows (F (\\<eta> b)) (\\<epsilon>' (F b))\n 4. F (\\<eta> b) = C.inv (\\<epsilon>' (F b))\n 5. C.inv (F (\\<eta> b)) = \\<epsilon>' (F b)", "let ?\\<epsilon>' = \"\\<lambda>a. \\<epsilon> a \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G a))) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F (G a)))\""], ["proof (state)\ngoal (5 subgoals):\n 1. F (\\<eta> (G (F b))) = F (G (F (\\<eta> b)))\n 2. F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b) =\n    \\<epsilon> (F (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> (G (F b)))\n 3. C.inverse_arrows (F (\\<eta> b)) (\\<epsilon>' (F b))\n 4. F (\\<eta> b) = C.inv (\\<epsilon>' (F b))\n 5. C.inv (F (\\<eta> b)) = \\<epsilon>' (F b)", "show 1: \"F (\\<eta> (G (F b))) = F (G (F (\\<eta> b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b))) = F (G (F (\\<eta> b)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b))) = F (G (F (\\<eta> b)))", "have \"F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) = F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n    F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n    F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)", "have \"F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) = F (\\<eta> (G (F b)) \\<cdot>\\<^sub>D \\<eta> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n    F (\\<eta> (G (F b)) \\<cdot>\\<^sub>D \\<eta> b)", "using assms"], ["proof (prove)\nusing this:\n  D.ide b\n\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n    F (\\<eta> (G (F b)) \\<cdot>\\<^sub>D \\<eta> b)", "by simp"], ["proof (state)\nthis:\n  F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n  F (\\<eta> (G (F b)) \\<cdot>\\<^sub>D \\<eta> b)\n\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n    F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)", "also"], ["proof (state)\nthis:\n  F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n  F (\\<eta> (G (F b)) \\<cdot>\\<^sub>D \\<eta> b)\n\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n    F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)", "have \"... = F (G (F (\\<eta> b)) \\<cdot>\\<^sub>D \\<eta> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b)) \\<cdot>\\<^sub>D \\<eta> b) =\n    F (G (F (\\<eta> b)) \\<cdot>\\<^sub>D \\<eta> b)", "using assms \\<eta>.naturality [of \"\\<eta> b\"]"], ["proof (prove)\nusing this:\n  D.ide b\n  D.arr (\\<eta> b) \\<Longrightarrow>\n  \\<eta> (D.cod (\\<eta> b)) \\<cdot>\\<^sub>D D.map (\\<eta> b) =\n  (G \\<circ> F) (\\<eta> b) \\<cdot>\\<^sub>D \\<eta> (D.dom (\\<eta> b))\n\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b)) \\<cdot>\\<^sub>D \\<eta> b) =\n    F (G (F (\\<eta> b)) \\<cdot>\\<^sub>D \\<eta> b)", "by simp"], ["proof (state)\nthis:\n  F (\\<eta> (G (F b)) \\<cdot>\\<^sub>D \\<eta> b) =\n  F (G (F (\\<eta> b)) \\<cdot>\\<^sub>D \\<eta> b)\n\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n    F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)", "also"], ["proof (state)\nthis:\n  F (\\<eta> (G (F b)) \\<cdot>\\<^sub>D \\<eta> b) =\n  F (G (F (\\<eta> b)) \\<cdot>\\<^sub>D \\<eta> b)\n\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n    F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)", "have \"... = F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (G (F (\\<eta> b)) \\<cdot>\\<^sub>D \\<eta> b) =\n    F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)", "using assms"], ["proof (prove)\nusing this:\n  D.ide b\n\ngoal (1 subgoal):\n 1. F (G (F (\\<eta> b)) \\<cdot>\\<^sub>D \\<eta> b) =\n    F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)", "by simp"], ["proof (state)\nthis:\n  F (G (F (\\<eta> b)) \\<cdot>\\<^sub>D \\<eta> b) =\n  F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n    F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)", "finally"], ["proof (chain)\npicking this:\n  F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n  F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)", "show ?thesis"], ["proof (prove)\nusing this:\n  F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n  F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n    F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)", "by blast"], ["proof (state)\nthis:\n  F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n  F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n  F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b))) = F (G (F (\\<eta> b)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n  F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b))) = F (G (F (\\<eta> b)))", "using assms \\<eta>.components_are_iso C.iso_cancel_right"], ["proof (prove)\nusing this:\n  F (\\<eta> (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> b) =\n  F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C F (\\<eta> b)\n  D.ide b\n  D.ide ?a \\<Longrightarrow> D.iso (\\<eta> ?a)\n  \\<lbrakk>C.iso ?g; ?f \\<cdot>\\<^sub>C ?g = ?f' \\<cdot>\\<^sub>C ?g;\n   C.seq ?f ?g; C.iso ?g\\<rbrakk>\n  \\<Longrightarrow> ?f = ?f'\n\ngoal (1 subgoal):\n 1. F (\\<eta> (G (F b))) = F (G (F (\\<eta> b)))", "by simp"], ["proof (state)\nthis:\n  F (\\<eta> (G (F b))) = F (G (F (\\<eta> b)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F (\\<eta> (G (F b))) = F (G (F (\\<eta> b)))\n\ngoal (4 subgoals):\n 1. F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b) =\n    \\<epsilon> (F (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> (G (F b)))\n 2. C.inverse_arrows (F (\\<eta> b)) (\\<epsilon>' (F b))\n 3. F (\\<eta> b) = C.inv (\\<epsilon>' (F b))\n 4. C.inv (F (\\<eta> b)) = \\<epsilon>' (F b)", "show \"F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b) = \\<epsilon> (F (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> (G (F b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b) =\n    \\<epsilon> (F (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> (G (F b)))", "using assms 1 \\<epsilon>.naturality [of \"F (\\<eta> b)\"]"], ["proof (prove)\nusing this:\n  D.ide b\n  F (\\<eta> (G (F b))) = F (G (F (\\<eta> b)))\n  C.arr (F (\\<eta> b)) \\<Longrightarrow>\n  \\<epsilon> (C.cod (F (\\<eta> b))) \\<cdot>\\<^sub>C\n  (F \\<circ> G) (F (\\<eta> b)) =\n  C.map (F (\\<eta> b)) \\<cdot>\\<^sub>C \\<epsilon> (C.dom (F (\\<eta> b)))\n\ngoal (1 subgoal):\n 1. F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b) =\n    \\<epsilon> (F (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> (G (F b)))", "by simp"], ["proof (state)\nthis:\n  F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b) =\n  \\<epsilon> (F (G (F b))) \\<cdot>\\<^sub>C F (\\<eta> (G (F b)))\n\ngoal (3 subgoals):\n 1. C.inverse_arrows (F (\\<eta> b)) (\\<epsilon>' (F b))\n 2. F (\\<eta> b) = C.inv (\\<epsilon>' (F b))\n 3. C.inv (F (\\<eta> b)) = \\<epsilon>' (F b)", "show 2: \"C.inverse_arrows (F (\\<eta> b)) (?\\<epsilon>' (F b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inverse_arrows (F (\\<eta> b)) (\\<epsilon>' (F b))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))\n 2. C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b))", "show 3: \"C.ide (?\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))", "have \"?\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) =\n                \\<epsilon> (F b) \\<cdot>\\<^sub>C (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F (G (F b))))) \\<cdot>\\<^sub>C F (\\<eta> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) =\n    \\<epsilon> (F b) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n     C.inv (\\<epsilon> (F (G (F b))))) \\<cdot>\\<^sub>C\n    F (\\<eta> b)", "using C.comp_assoc"], ["proof (prove)\nusing this:\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) =\n    \\<epsilon> (F b) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n     C.inv (\\<epsilon> (F (G (F b))))) \\<cdot>\\<^sub>C\n    F (\\<eta> b)", "by simp"], ["proof (state)\nthis:\n  \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) =\n  \\<epsilon> (F b) \\<cdot>\\<^sub>C\n  (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n   C.inv (\\<epsilon> (F (G (F b))))) \\<cdot>\\<^sub>C\n  F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))", "also"], ["proof (state)\nthis:\n  \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) =\n  \\<epsilon> (F b) \\<cdot>\\<^sub>C\n  (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n   C.inv (\\<epsilon> (F (G (F b))))) \\<cdot>\\<^sub>C\n  F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))", "have \"... = \\<epsilon> (F b) \\<cdot>\\<^sub>C (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C F (G (F (\\<eta> b)))) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> (F b) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n     C.inv (\\<epsilon> (F (G (F b))))) \\<cdot>\\<^sub>C\n    F (\\<eta> b) =\n    \\<epsilon> (F b) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n     F (G (F (\\<eta> b)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F b))", "using assms \\<epsilon>.naturality [of \"F (\\<eta> b)\"] \\<epsilon>.components_are_iso C.comp_assoc\n                  C.invert_opposite_sides_of_square\n                    [of \"\\<epsilon> (F (G (F b)))\" \"F (G (F (\\<eta> b)))\" \"F (\\<eta> b)\" \"\\<epsilon> (F b)\"]"], ["proof (prove)\nusing this:\n  D.ide b\n  C.arr (F (\\<eta> b)) \\<Longrightarrow>\n  \\<epsilon> (C.cod (F (\\<eta> b))) \\<cdot>\\<^sub>C\n  (F \\<circ> G) (F (\\<eta> b)) =\n  C.map (F (\\<eta> b)) \\<cdot>\\<^sub>C \\<epsilon> (C.dom (F (\\<eta> b)))\n  C.ide ?a \\<Longrightarrow> C.iso (\\<epsilon> ?a)\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n  \\<lbrakk>C.seq (\\<epsilon> (F (G (F b)))) (F (G (F (\\<eta> b))));\n   \\<epsilon> (F (G (F b))) \\<cdot>\\<^sub>C F (G (F (\\<eta> b))) =\n   F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon> (F b);\n   C.iso (\\<epsilon> (F (G (F b)))); C.iso (\\<epsilon> (F b))\\<rbrakk>\n  \\<Longrightarrow> C.seq (F (G (F (\\<eta> b))))\n                     (C.inv (\\<epsilon> (F b))) \\<and>\n                    C.seq (C.inv (\\<epsilon> (F (G (F b)))))\n                     (F (\\<eta> b)) \\<and>\n                    F (G (F (\\<eta> b))) \\<cdot>\\<^sub>C\n                    C.inv (\\<epsilon> (F b)) =\n                    C.inv (\\<epsilon> (F (G (F b)))) \\<cdot>\\<^sub>C\n                    F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. \\<epsilon> (F b) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n     C.inv (\\<epsilon> (F (G (F b))))) \\<cdot>\\<^sub>C\n    F (\\<eta> b) =\n    \\<epsilon> (F b) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n     F (G (F (\\<eta> b)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F b))", "by simp"], ["proof (state)\nthis:\n  \\<epsilon> (F b) \\<cdot>\\<^sub>C\n  (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n   C.inv (\\<epsilon> (F (G (F b))))) \\<cdot>\\<^sub>C\n  F (\\<eta> b) =\n  \\<epsilon> (F b) \\<cdot>\\<^sub>C\n  (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n   F (G (F (\\<eta> b)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F b))\n\ngoal (1 subgoal):\n 1. C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))", "also"], ["proof (state)\nthis:\n  \\<epsilon> (F b) \\<cdot>\\<^sub>C\n  (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n   C.inv (\\<epsilon> (F (G (F b))))) \\<cdot>\\<^sub>C\n  F (\\<eta> b) =\n  \\<epsilon> (F b) \\<cdot>\\<^sub>C\n  (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n   F (G (F (\\<eta> b)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F b))\n\ngoal (1 subgoal):\n 1. C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))", "have \"... = \\<epsilon> (F b) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> (F b) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n     F (G (F (\\<eta> b)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F b)) =\n    \\<epsilon> (F b) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon> (F b) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n     F (G (F (\\<eta> b)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F b)) =\n    \\<epsilon> (F b) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b))", "have \"F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C F (G (F (\\<eta> b))) = F (G (F b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C F (G (F (\\<eta> b))) =\n    F (G (F b))", "using assms 1 D.comp_inv_arr' \\<eta>.components_are_iso"], ["proof (prove)\nusing this:\n  D.ide b\n  F (\\<eta> (G (F b))) = F (G (F (\\<eta> b)))\n  D.iso ?f \\<Longrightarrow> D.inv ?f \\<cdot>\\<^sub>D ?f = D.dom ?f\n  D.ide ?a \\<Longrightarrow> D.iso (\\<eta> ?a)\n\ngoal (1 subgoal):\n 1. F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C F (G (F (\\<eta> b))) =\n    F (G (F b))", "by (metis D.ideD(1) D.ideD(2) F.preserves_comp\n                  F.preserves_ide G.preserves_ide \\<eta>.preserves_dom D.map_simp)"], ["proof (state)\nthis:\n  F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C F (G (F (\\<eta> b))) =\n  F (G (F b))\n\ngoal (1 subgoal):\n 1. \\<epsilon> (F b) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n     F (G (F (\\<eta> b)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F b)) =\n    \\<epsilon> (F b) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b))", "moreover"], ["proof (state)\nthis:\n  F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C F (G (F (\\<eta> b))) =\n  F (G (F b))\n\ngoal (1 subgoal):\n 1. \\<epsilon> (F b) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n     F (G (F (\\<eta> b)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F b)) =\n    \\<epsilon> (F b) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b))", "have \"F (G (F b)) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b)) = C.inv (\\<epsilon> (F b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (G (F b)) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b)) =\n    C.inv (\\<epsilon> (F b))", "using assms D.comp_cod_arr \\<epsilon>.components_are_iso C.inv_in_hom [of \"\\<epsilon> (F b)\"]"], ["proof (prove)\nusing this:\n  D.ide b\n  \\<lbrakk>D.arr ?f; D.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>D ?f = ?f\n  C.ide ?a \\<Longrightarrow> C.iso (\\<epsilon> ?a)\n  \\<lbrakk>C.iso (\\<epsilon> (F b));\n   \\<guillemotleft>\\<epsilon>\n                    (F b) : ?a \\<rightarrow>\\<^sub>C ?b\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>C.inv\n                                     (\\<epsilon>\n (F b)) : ?b \\<rightarrow>\\<^sub>C ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. F (G (F b)) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b)) =\n    C.inv (\\<epsilon> (F b))", "by (metis C.comp_ide_arr C_arr_expansion(1) D.ide_char F.preserves_arr\n                  F.preserves_dom F.preserves_ide G.preserves_ide C.seqE)"], ["proof (state)\nthis:\n  F (G (F b)) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b)) =\n  C.inv (\\<epsilon> (F b))\n\ngoal (1 subgoal):\n 1. \\<epsilon> (F b) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n     F (G (F (\\<eta> b)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F b)) =\n    \\<epsilon> (F b) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b))", "ultimately"], ["proof (chain)\npicking this:\n  F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C F (G (F (\\<eta> b))) =\n  F (G (F b))\n  F (G (F b)) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b)) =\n  C.inv (\\<epsilon> (F b))", "show ?thesis"], ["proof (prove)\nusing this:\n  F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C F (G (F (\\<eta> b))) =\n  F (G (F b))\n  F (G (F b)) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b)) =\n  C.inv (\\<epsilon> (F b))\n\ngoal (1 subgoal):\n 1. \\<epsilon> (F b) \\<cdot>\\<^sub>C\n    (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n     F (G (F (\\<eta> b)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F b)) =\n    \\<epsilon> (F b) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b))", "by simp"], ["proof (state)\nthis:\n  \\<epsilon> (F b) \\<cdot>\\<^sub>C\n  (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n   F (G (F (\\<eta> b)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F b)) =\n  \\<epsilon> (F b) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<epsilon> (F b) \\<cdot>\\<^sub>C\n  (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n   F (G (F (\\<eta> b)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F b)) =\n  \\<epsilon> (F b) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b))\n\ngoal (1 subgoal):\n 1. C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))", "also"], ["proof (state)\nthis:\n  \\<epsilon> (F b) \\<cdot>\\<^sub>C\n  (F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n   F (G (F (\\<eta> b)))) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon> (F b)) =\n  \\<epsilon> (F b) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b))\n\ngoal (1 subgoal):\n 1. C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))", "have \"... = F b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> (F b) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b)) = F b", "using assms \\<epsilon>.components_are_iso C.comp_arr_inv'"], ["proof (prove)\nusing this:\n  D.ide b\n  C.ide ?a \\<Longrightarrow> C.iso (\\<epsilon> ?a)\n  C.iso ?f \\<Longrightarrow> ?f \\<cdot>\\<^sub>C C.inv ?f = C.cod ?f\n\ngoal (1 subgoal):\n 1. \\<epsilon> (F b) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b)) = F b", "by simp"], ["proof (state)\nthis:\n  \\<epsilon> (F b) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F b)) = F b\n\ngoal (1 subgoal):\n 1. C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))", "finally"], ["proof (chain)\npicking this:\n  \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) = F b", "have \"(\\<epsilon> (F b) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F (G (F b))))) \\<cdot>\\<^sub>C F (\\<eta> b) = F b\""], ["proof (prove)\nusing this:\n  \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) = F b\n\ngoal (1 subgoal):\n 1. \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) = F b", "by blast"], ["proof (state)\nthis:\n  \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) = F b\n\ngoal (1 subgoal):\n 1. C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) = F b\n\ngoal (1 subgoal):\n 1. C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))", "using assms"], ["proof (prove)\nusing this:\n  \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) = F b\n  D.ide b\n\ngoal (1 subgoal):\n 1. C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))", "by simp"], ["proof (state)\nthis:\n  C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))\n\ngoal (1 subgoal):\n 1. C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b))", "show \"C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C ?\\<epsilon>' (F b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b))", "have \"(F (\\<eta> b) \\<cdot>\\<^sub>C ?\\<epsilon>' (F b)) \\<cdot>\\<^sub>C F (\\<eta> b) = F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n    F (\\<eta> b) =\n    F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n    F (\\<eta> b) =\n    F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)", "have \"(F (\\<eta> b) \\<cdot>\\<^sub>C ?\\<epsilon>' (F b)) \\<cdot>\\<^sub>C F (\\<eta> b) =\n                  F (\\<eta> b) \\<cdot>\\<^sub>C (\\<epsilon> (F b) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C C.inv (\\<epsilon> (F (G (F b))))) \\<cdot>\\<^sub>C F (\\<eta> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n    F (\\<eta> b) =\n    F (\\<eta> b) \\<cdot>\\<^sub>C\n    \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b)", "using C.comp_assoc"], ["proof (prove)\nusing this:\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n    F (\\<eta> b) =\n    F (\\<eta> b) \\<cdot>\\<^sub>C\n    \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b)", "by simp"], ["proof (state)\nthis:\n  (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n  F (\\<eta> b) =\n  F (\\<eta> b) \\<cdot>\\<^sub>C\n  \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n    F (\\<eta> b) =\n    F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)", "also"], ["proof (state)\nthis:\n  (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n  F (\\<eta> b) =\n  F (\\<eta> b) \\<cdot>\\<^sub>C\n  \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n    F (\\<eta> b) =\n    F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)", "have \"... = F (\\<eta> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (\\<eta> b) \\<cdot>\\<^sub>C\n    \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) =\n    F (\\<eta> b)", "using assms 3\n                    C.comp_arr_dom\n                      [of \"F (\\<eta> b)\" \"(\\<epsilon> (F b) \\<cdot>\\<^sub>C F (D.inv (\\<eta> (G (F b)))) \\<cdot>\\<^sub>C\n                                       C.inv (\\<epsilon> (F (G (F b))))) \\<cdot>\\<^sub>C F (\\<eta> b)\"]"], ["proof (prove)\nusing this:\n  D.ide b\n  C.ide (\\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b))\n  \\<lbrakk>C.arr (F (\\<eta> b));\n   C.dom (F (\\<eta> b)) =\n   \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b)\\<rbrakk>\n  \\<Longrightarrow> F (\\<eta> b) \\<cdot>\\<^sub>C\n                    \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) =\n                    F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. F (\\<eta> b) \\<cdot>\\<^sub>C\n    \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) =\n    F (\\<eta> b)", "by auto"], ["proof (state)\nthis:\n  F (\\<eta> b) \\<cdot>\\<^sub>C\n  \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) =\n  F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n    F (\\<eta> b) =\n    F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)", "also"], ["proof (state)\nthis:\n  F (\\<eta> b) \\<cdot>\\<^sub>C\n  \\<epsilon>' (F b) \\<cdot>\\<^sub>C F (\\<eta> b) =\n  F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n    F (\\<eta> b) =\n    F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)", "have \"... = F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (\\<eta> b) = F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)", "using assms C.comp_cod_arr"], ["proof (prove)\nusing this:\n  D.ide b\n  \\<lbrakk>C.arr ?f; C.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>C ?f = ?f\n\ngoal (1 subgoal):\n 1. F (\\<eta> b) = F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)", "by simp"], ["proof (state)\nthis:\n  F (\\<eta> b) = F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n    F (\\<eta> b) =\n    F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)", "finally"], ["proof (chain)\npicking this:\n  (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n  F (\\<eta> b) =\n  F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)", "show ?thesis"], ["proof (prove)\nusing this:\n  (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n  F (\\<eta> b) =\n  F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n    F (\\<eta> b) =\n    F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)", "by blast"], ["proof (state)\nthis:\n  (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n  F (\\<eta> b) =\n  F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n  F (\\<eta> b) =\n  F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b))", "hence \"F (\\<eta> b) \\<cdot>\\<^sub>C ?\\<epsilon>' (F b) = F (G (F b))\""], ["proof (prove)\nusing this:\n  (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n  F (\\<eta> b) =\n  F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)\n\ngoal (1 subgoal):\n 1. F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b) = F (G (F b))", "using assms C.iso_cancel_right"], ["proof (prove)\nusing this:\n  (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b)) \\<cdot>\\<^sub>C\n  F (\\<eta> b) =\n  F (G (F b)) \\<cdot>\\<^sub>C F (\\<eta> b)\n  D.ide b\n  \\<lbrakk>C.iso ?g; ?f \\<cdot>\\<^sub>C ?g = ?f' \\<cdot>\\<^sub>C ?g;\n   C.seq ?f ?g; C.iso ?g\\<rbrakk>\n  \\<Longrightarrow> ?f = ?f'\n\ngoal (1 subgoal):\n 1. F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b) = F (G (F b))", "by simp"], ["proof (state)\nthis:\n  F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b) = F (G (F b))\n\ngoal (1 subgoal):\n 1. C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b))", "thus ?thesis"], ["proof (prove)\nusing this:\n  F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b) = F (G (F b))\n\ngoal (1 subgoal):\n 1. C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b))", "using assms"], ["proof (prove)\nusing this:\n  F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b) = F (G (F b))\n  D.ide b\n\ngoal (1 subgoal):\n 1. C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b))", "by simp"], ["proof (state)\nthis:\n  C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C.ide (F (\\<eta> b) \\<cdot>\\<^sub>C \\<epsilon>' (F b))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  C.inverse_arrows (F (\\<eta> b)) (\\<epsilon>' (F b))\n\ngoal (2 subgoals):\n 1. F (\\<eta> b) = C.inv (\\<epsilon>' (F b))\n 2. C.inv (F (\\<eta> b)) = \\<epsilon>' (F b)", "show \"C.inv (F (\\<eta> b)) = ?\\<epsilon>' (F b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inv (F (\\<eta> b)) = \\<epsilon>' (F b)", "using assms 2 C.inverse_unique"], ["proof (prove)\nusing this:\n  D.ide b\n  C.inverse_arrows (F (\\<eta> b)) (\\<epsilon>' (F b))\n  C.inverse_arrows ?f ?g \\<Longrightarrow> C.inv ?f = ?g\n\ngoal (1 subgoal):\n 1. C.inv (F (\\<eta> b)) = \\<epsilon>' (F b)", "by simp"], ["proof (state)\nthis:\n  C.inv (F (\\<eta> b)) = \\<epsilon>' (F b)\n\ngoal (1 subgoal):\n 1. F (\\<eta> b) = C.inv (\\<epsilon>' (F b))", "show \"F (\\<eta> b) = C.inv (?\\<epsilon>' (F b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (\\<eta> b) = C.inv (\\<epsilon>' (F b))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. F (\\<eta> b) = C.inv (\\<epsilon>' (F b))", "have \"C.inverse_arrows (?\\<epsilon>' (F b)) (F (\\<eta> b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.inverse_arrows (\\<epsilon>' (F b)) (F (\\<eta> b))", "using assms 2"], ["proof (prove)\nusing this:\n  D.ide b\n  C.inverse_arrows (F (\\<eta> b)) (\\<epsilon>' (F b))\n\ngoal (1 subgoal):\n 1. C.inverse_arrows (\\<epsilon>' (F b)) (F (\\<eta> b))", "by auto"], ["proof (state)\nthis:\n  C.inverse_arrows (\\<epsilon>' (F b)) (F (\\<eta> b))\n\ngoal (1 subgoal):\n 1. F (\\<eta> b) = C.inv (\\<epsilon>' (F b))", "thus ?thesis"], ["proof (prove)\nusing this:\n  C.inverse_arrows (\\<epsilon>' (F b)) (F (\\<eta> b))\n\ngoal (1 subgoal):\n 1. F (\\<eta> b) = C.inv (\\<epsilon>' (F b))", "using assms C.inverse_unique"], ["proof (prove)\nusing this:\n  C.inverse_arrows (\\<epsilon>' (F b)) (F (\\<eta> b))\n  D.ide b\n  C.inverse_arrows ?f ?g \\<Longrightarrow> C.inv ?f = ?g\n\ngoal (1 subgoal):\n 1. F (\\<eta> b) = C.inv (\\<epsilon>' (F b))", "by simp"], ["proof (state)\nthis:\n  F (\\<eta> b) = C.inv (\\<epsilon>' (F b))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F (\\<eta> b) = C.inv (\\<epsilon>' (F b))\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation FoGoF: composite_functor D C C F \\<open>F o G\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n     F (F \\<circ> G)", ".."], ["", "interpretation GoFoG: composite_functor C D D G \\<open>G o F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D)\n     G (G \\<circ> F)", ".."], ["", "interpretation natural_transformation D C F FoGoF.map \\<open>F \\<circ> \\<eta>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FoGoF.map\n     (F \\<circ> \\<eta>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FoGoF.map\n     (F \\<circ> \\<eta>)", "have \"F \\<circ> D.map = F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<circ> D.map = F", "using hcomp_ide_dom F.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<Longrightarrow>\n  ?\\<tau> \\<circ> identity_functor.map ?A = ?\\<tau>\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F F\n\ngoal (1 subgoal):\n 1. F \\<circ> D.map = F", "by blast"], ["proof (state)\nthis:\n  F \\<circ> D.map = F\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FoGoF.map\n     (F \\<circ> \\<eta>)", "moreover"], ["proof (state)\nthis:\n  F \\<circ> D.map = F\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FoGoF.map\n     (F \\<circ> \\<eta>)", "have \"F o (G o F) = FoGoF.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<circ> (G \\<circ> F) = FoGoF.map", "by auto"], ["proof (state)\nthis:\n  F \\<circ> (G \\<circ> F) = FoGoF.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FoGoF.map\n     (F \\<circ> \\<eta>)", "ultimately"], ["proof (chain)\npicking this:\n  F \\<circ> D.map = F\n  F \\<circ> (G \\<circ> F) = FoGoF.map", "show \"natural_transformation D C F FoGoF.map (F \\<circ> \\<eta>)\""], ["proof (prove)\nusing this:\n  F \\<circ> D.map = F\n  F \\<circ> (G \\<circ> F) = FoGoF.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FoGoF.map\n     (F \\<circ> \\<eta>)", "using \\<eta>.natural_transformation_axioms F.natural_transformation_axioms\n              horizontal_composite [of D D D.map \"G o F\" \\<eta> C F F F]"], ["proof (prove)\nusing this:\n  F \\<circ> D.map = F\n  F \\<circ> (G \\<circ> F) = FoGoF.map\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n   (G \\<circ> F) \\<eta>\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F F\n  \\<lbrakk>natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n            (G \\<circ> F) \\<eta>;\n   natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F F\\<rbrakk>\n  \\<Longrightarrow> natural_transformation (\\<cdot>\\<^sub>D)\n                     (\\<cdot>\\<^sub>C) (F \\<circ> D.map)\n                     (F \\<circ> (G \\<circ> F)) (F \\<circ> \\<eta>)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FoGoF.map\n     (F \\<circ> \\<eta>)", "by simp"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FoGoF.map\n   (F \\<circ> \\<eta>)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation natural_transformation C D G GoFoG.map \\<open>\\<eta> \\<circ> G\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G GoFoG.map\n     (\\<eta> \\<circ> G)", "using \\<eta>.natural_transformation_axioms G.natural_transformation_axioms\n            horizontal_composite [of C D G G G ]"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n   (G \\<circ> F) \\<eta>\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G G\n  \\<lbrakk>natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G G;\n   natural_transformation (\\<cdot>\\<^sub>D) ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation (\\<cdot>\\<^sub>C) ?C\n                     (?H \\<circ> G) (?K \\<circ> G) (?\\<tau> \\<circ> G)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G GoFoG.map\n     (\\<eta> \\<circ> G)", "by fastforce"], ["", "interpretation natural_transformation D C FoGoF.map F \\<open>\\<epsilon>'.map \\<circ> F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) FoGoF.map F\n     (\\<epsilon>'.map \\<circ> F)", "using \\<epsilon>'.natural_transformation_axioms F.natural_transformation_axioms\n            horizontal_composite [of D C F F F]"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) (F \\<circ> G)\n   C.map \\<epsilon>'.map\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F F\n  \\<lbrakk>natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F F;\n   natural_transformation (\\<cdot>\\<^sub>C) ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation (\\<cdot>\\<^sub>D) ?C\n                     (?H \\<circ> F) (?K \\<circ> F) (?\\<tau> \\<circ> F)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) FoGoF.map F\n     (\\<epsilon>'.map \\<circ> F)", "by fastforce"], ["", "interpretation natural_transformation C D GoFoG.map G \\<open>G \\<circ> \\<epsilon>'.map\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GoFoG.map G\n     (G \\<circ> \\<epsilon>'.map)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GoFoG.map G\n     (G \\<circ> \\<epsilon>'.map)", "have \"G o C.map = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<circ> C.map = G", "using hcomp_ide_dom G.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<Longrightarrow>\n  ?\\<tau> \\<circ> identity_functor.map ?A = ?\\<tau>\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G G\n\ngoal (1 subgoal):\n 1. G \\<circ> C.map = G", "by blast"], ["proof (state)\nthis:\n  G \\<circ> C.map = G\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GoFoG.map G\n     (G \\<circ> \\<epsilon>'.map)", "moreover"], ["proof (state)\nthis:\n  G \\<circ> C.map = G\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GoFoG.map G\n     (G \\<circ> \\<epsilon>'.map)", "have \"G o (F o G) = GoFoG.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<circ> (F \\<circ> G) = GoFoG.map", "by auto"], ["proof (state)\nthis:\n  G \\<circ> (F \\<circ> G) = GoFoG.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GoFoG.map G\n     (G \\<circ> \\<epsilon>'.map)", "ultimately"], ["proof (chain)\npicking this:\n  G \\<circ> C.map = G\n  G \\<circ> (F \\<circ> G) = GoFoG.map", "show \"natural_transformation C D GoFoG.map G (G \\<circ> \\<epsilon>'.map)\""], ["proof (prove)\nusing this:\n  G \\<circ> C.map = G\n  G \\<circ> (F \\<circ> G) = GoFoG.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GoFoG.map G\n     (G \\<circ> \\<epsilon>'.map)", "using G.natural_transformation_axioms \\<epsilon>'.natural_transformation_axioms\n              horizontal_composite [of C C \"F o G\" C.map \\<epsilon>'.map D G G G]"], ["proof (prove)\nusing this:\n  G \\<circ> C.map = G\n  G \\<circ> (F \\<circ> G) = GoFoG.map\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G G\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) (F \\<circ> G)\n   C.map \\<epsilon>'.map\n  \\<lbrakk>natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n            (F \\<circ> G) C.map \\<epsilon>'.map;\n   natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G G\\<rbrakk>\n  \\<Longrightarrow> natural_transformation (\\<cdot>\\<^sub>C)\n                     (\\<cdot>\\<^sub>D) (G \\<circ> (F \\<circ> G))\n                     (G \\<circ> C.map) (G \\<circ> \\<epsilon>'.map)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GoFoG.map G\n     (G \\<circ> \\<epsilon>'.map)", "by simp"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GoFoG.map G\n   (G \\<circ> \\<epsilon>'.map)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation \\<epsilon>'F_F\\<eta>: vertical_composite D C F FoGoF.map F \\<open>F \\<circ> \\<eta>\\<close> \\<open>\\<epsilon>'.map \\<circ> F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FoGoF.map F\n     (F \\<circ> \\<eta>) (\\<epsilon>'.map \\<circ> F)", ".."], ["", "interpretation G\\<epsilon>'_\\<eta>G: vertical_composite C D G GoFoG.map G \\<open>\\<eta> o G\\<close> \\<open>G o \\<epsilon>'.map\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G GoFoG.map G\n     (\\<eta> \\<circ> G) (G \\<circ> \\<epsilon>'.map)", ".."], ["", "interpretation \\<eta>\\<epsilon>': unit_counit_adjunction C D F G \\<eta> \\<epsilon>'.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_counit_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n     \\<epsilon>'.map", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<epsilon>'F_F\\<eta>.map = F\n 2. G\\<epsilon>'_\\<eta>G.map = G", "show 1: \"\\<epsilon>'F_F\\<eta>.map = F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>'F_F\\<eta>.map = F", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. \\<epsilon>'F_F\\<eta>.map x = F x", "fix g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. \\<epsilon>'F_F\\<eta>.map x = F x", "show \"\\<epsilon>'F_F\\<eta>.map g = F g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>'F_F\\<eta>.map g = F g", "proof (cases \"D.arr g\")"], ["proof (state)\ngoal (2 subgoals):\n 1. D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g\n 2. \\<not> D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g", "show \"\\<not> D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g", "using \\<epsilon>'F_F\\<eta>.is_extensional F.is_extensional"], ["proof (prove)\nusing this:\n  \\<not> D.arr ?f \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map ?f = C.null\n  \\<not> D.arr ?f \\<Longrightarrow> F ?f = C.null\n\ngoal (1 subgoal):\n 1. \\<not> D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g", "by simp"], ["proof (state)\nthis:\n  \\<not> D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g\n\ngoal (1 subgoal):\n 1. D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g", "assume g: \"D.arr g\""], ["proof (state)\nthis:\n  D.arr g\n\ngoal (1 subgoal):\n 1. D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g", "have \"\\<epsilon>'F_F\\<eta>.map g = \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C F (\\<eta> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>'F_F\\<eta>.map g =\n    \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C F (\\<eta> g)", "using g \\<epsilon>'F_F\\<eta>.map_def"], ["proof (prove)\nusing this:\n  D.arr g\n  \\<epsilon>'F_F\\<eta>.map ?f =\n  (if D.arr ?f\n   then (\\<epsilon>'.map \\<circ> F) (D.cod ?f) \\<cdot>\\<^sub>C\n        (F \\<circ> \\<eta>) ?f\n   else C.null)\n\ngoal (1 subgoal):\n 1. \\<epsilon>'F_F\\<eta>.map g =\n    \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C F (\\<eta> g)", "by simp"], ["proof (state)\nthis:\n  \\<epsilon>'F_F\\<eta>.map g =\n  \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C F (\\<eta> g)\n\ngoal (1 subgoal):\n 1. D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g", "also"], ["proof (state)\nthis:\n  \\<epsilon>'F_F\\<eta>.map g =\n  \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C F (\\<eta> g)\n\ngoal (1 subgoal):\n 1. D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g", "have \"... = \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C F (\\<eta> (D.cod g) \\<cdot>\\<^sub>D g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C F (\\<eta> g) =\n    \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n    F (\\<eta> (D.cod g) \\<cdot>\\<^sub>D g)", "using g \\<eta>.is_natural_2"], ["proof (prove)\nusing this:\n  D.arr g\n  D.arr ?f \\<Longrightarrow>\n  \\<eta> (D.cod ?f) \\<cdot>\\<^sub>D D.map ?f = \\<eta> ?f\n\ngoal (1 subgoal):\n 1. \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C F (\\<eta> g) =\n    \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n    F (\\<eta> (D.cod g) \\<cdot>\\<^sub>D g)", "by simp"], ["proof (state)\nthis:\n  \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C F (\\<eta> g) =\n  \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n  F (\\<eta> (D.cod g) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g", "also"], ["proof (state)\nthis:\n  \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C F (\\<eta> g) =\n  \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n  F (\\<eta> (D.cod g) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g", "have \"... = (\\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C F (\\<eta> (D.cod g))) \\<cdot>\\<^sub>C F g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n    F (\\<eta> (D.cod g) \\<cdot>\\<^sub>D g) =\n    (\\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n     F (\\<eta> (D.cod g))) \\<cdot>\\<^sub>C\n    F g", "using g C.comp_assoc"], ["proof (prove)\nusing this:\n  D.arr g\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n    F (\\<eta> (D.cod g) \\<cdot>\\<^sub>D g) =\n    (\\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n     F (\\<eta> (D.cod g))) \\<cdot>\\<^sub>C\n    F g", "by simp"], ["proof (state)\nthis:\n  \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n  F (\\<eta> (D.cod g) \\<cdot>\\<^sub>D g) =\n  (\\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n   F (\\<eta> (D.cod g))) \\<cdot>\\<^sub>C\n  F g\n\ngoal (1 subgoal):\n 1. D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g", "also"], ["proof (state)\nthis:\n  \\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n  F (\\<eta> (D.cod g) \\<cdot>\\<^sub>D g) =\n  (\\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n   F (\\<eta> (D.cod g))) \\<cdot>\\<^sub>C\n  F g\n\ngoal (1 subgoal):\n 1. D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g", "have \"... = F (D.cod g) \\<cdot>\\<^sub>C F g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n     F (\\<eta> (D.cod g))) \\<cdot>\\<^sub>C\n    F g =\n    F (D.cod g) \\<cdot>\\<^sub>C F g", "using g F\\<eta>_inverse(3) [of \"D.cod g\"]"], ["proof (prove)\nusing this:\n  D.arr g\n  D.ide (D.cod g) \\<Longrightarrow>\n  C.inverse_arrows (F (\\<eta> (D.cod g))) (\\<epsilon>' (F (D.cod g)))\n\ngoal (1 subgoal):\n 1. (\\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n     F (\\<eta> (D.cod g))) \\<cdot>\\<^sub>C\n    F g =\n    F (D.cod g) \\<cdot>\\<^sub>C F g", "by fastforce"], ["proof (state)\nthis:\n  (\\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n   F (\\<eta> (D.cod g))) \\<cdot>\\<^sub>C\n  F g =\n  F (D.cod g) \\<cdot>\\<^sub>C F g\n\ngoal (1 subgoal):\n 1. D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g", "also"], ["proof (state)\nthis:\n  (\\<epsilon>' (F (D.cod g)) \\<cdot>\\<^sub>C\n   F (\\<eta> (D.cod g))) \\<cdot>\\<^sub>C\n  F g =\n  F (D.cod g) \\<cdot>\\<^sub>C F g\n\ngoal (1 subgoal):\n 1. D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g", "have \"... = F g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (D.cod g) \\<cdot>\\<^sub>C F g = F g", "using g C.comp_cod_arr"], ["proof (prove)\nusing this:\n  D.arr g\n  \\<lbrakk>C.arr ?f; C.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>C ?f = ?f\n\ngoal (1 subgoal):\n 1. F (D.cod g) \\<cdot>\\<^sub>C F g = F g", "by simp"], ["proof (state)\nthis:\n  F (D.cod g) \\<cdot>\\<^sub>C F g = F g\n\ngoal (1 subgoal):\n 1. D.arr g \\<Longrightarrow> \\<epsilon>'F_F\\<eta>.map g = F g", "finally"], ["proof (chain)\npicking this:\n  \\<epsilon>'F_F\\<eta>.map g = F g", "show \"\\<epsilon>'F_F\\<eta>.map g = F g\""], ["proof (prove)\nusing this:\n  \\<epsilon>'F_F\\<eta>.map g = F g\n\ngoal (1 subgoal):\n 1. \\<epsilon>'F_F\\<eta>.map g = F g", "by blast"], ["proof (state)\nthis:\n  \\<epsilon>'F_F\\<eta>.map g = F g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<epsilon>'F_F\\<eta>.map g = F g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<epsilon>'F_F\\<eta>.map = F\n\ngoal (1 subgoal):\n 1. G\\<epsilon>'_\\<eta>G.map = G", "show \"G\\<epsilon>'_\\<eta>G.map = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G\\<epsilon>'_\\<eta>G.map = G", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. G\\<epsilon>'_\\<eta>G.map x = G x", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. G\\<epsilon>'_\\<eta>G.map x = G x", "show \"G\\<epsilon>'_\\<eta>G.map f = G f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G\\<epsilon>'_\\<eta>G.map f = G f", "proof (cases \"C.arr f\")"], ["proof (state)\ngoal (2 subgoals):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f\n 2. \\<not> C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "show \"\\<not> C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "using G\\<epsilon>'_\\<eta>G.is_extensional G.is_extensional"], ["proof (prove)\nusing this:\n  \\<not> C.arr ?f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map ?f = D.null\n  \\<not> C.arr ?f \\<Longrightarrow> G ?f = D.null\n\ngoal (1 subgoal):\n 1. \\<not> C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "by simp"], ["proof (state)\nthis:\n  \\<not> C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "assume f: \"C.arr f\""], ["proof (state)\nthis:\n  C.arr f\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "have \"F (G\\<epsilon>'_\\<eta>G.map f) = F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D \\<eta> (G f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (G\\<epsilon>'_\\<eta>G.map f) =\n    F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D \\<eta> (G f))", "using f G\\<epsilon>'_\\<eta>G.map_def D.comp_assoc"], ["proof (prove)\nusing this:\n  C.arr f\n  G\\<epsilon>'_\\<eta>G.map ?f =\n  (if C.arr ?f\n   then (G \\<circ> \\<epsilon>'.map) (C.cod ?f) \\<cdot>\\<^sub>D\n        (\\<eta> \\<circ> G) ?f\n   else D.null)\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. F (G\\<epsilon>'_\\<eta>G.map f) =\n    F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D \\<eta> (G f))", "by simp"], ["proof (state)\nthis:\n  F (G\\<epsilon>'_\\<eta>G.map f) =\n  F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D \\<eta> (G f))\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "also"], ["proof (state)\nthis:\n  F (G\\<epsilon>'_\\<eta>G.map f) =\n  F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D \\<eta> (G f))\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "have \"... = F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D \\<eta> (G (C.cod f)) \\<cdot>\\<^sub>D G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D \\<eta> (G f)) =\n    F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D\n       \\<eta> (G (C.cod f)) \\<cdot>\\<^sub>D G f)", "using f \\<eta>.is_natural_2 [of \"G f\"]"], ["proof (prove)\nusing this:\n  C.arr f\n  D.arr (G f) \\<Longrightarrow>\n  \\<eta> (D.cod (G f)) \\<cdot>\\<^sub>D D.map (G f) = \\<eta> (G f)\n\ngoal (1 subgoal):\n 1. F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D \\<eta> (G f)) =\n    F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D\n       \\<eta> (G (C.cod f)) \\<cdot>\\<^sub>D G f)", "by simp"], ["proof (state)\nthis:\n  F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D \\<eta> (G f)) =\n  F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D\n     \\<eta> (G (C.cod f)) \\<cdot>\\<^sub>D G f)\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "also"], ["proof (state)\nthis:\n  F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D \\<eta> (G f)) =\n  F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D\n     \\<eta> (G (C.cod f)) \\<cdot>\\<^sub>D G f)\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "have \"... = F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C F (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>C F (G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D\n       \\<eta> (G (C.cod f)) \\<cdot>\\<^sub>D G f) =\n    F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n    F (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>C F (G f)", "using f"], ["proof (prove)\nusing this:\n  C.arr f\n\ngoal (1 subgoal):\n 1. F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D\n       \\<eta> (G (C.cod f)) \\<cdot>\\<^sub>D G f) =\n    F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n    F (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>C F (G f)", "by simp"], ["proof (state)\nthis:\n  F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D\n     \\<eta> (G (C.cod f)) \\<cdot>\\<^sub>D G f) =\n  F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n  F (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>C F (G f)\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "also"], ["proof (state)\nthis:\n  F (G (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>D\n     \\<eta> (G (C.cod f)) \\<cdot>\\<^sub>D G f) =\n  F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n  F (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>C F (G f)\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "have \"... = (F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C C.inv (\\<epsilon>' (F (G (C.cod f))))) \\<cdot>\\<^sub>C F (G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n    F (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>C F (G f) =\n    (F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n     C.inv (\\<epsilon>' (F (G (C.cod f))))) \\<cdot>\\<^sub>C\n    F (G f)", "using f F\\<eta>_inverse(4) C.comp_assoc"], ["proof (prove)\nusing this:\n  C.arr f\n  D.ide ?b \\<Longrightarrow> F (\\<eta> ?b) = C.inv (\\<epsilon>' (F ?b))\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n    F (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>C F (G f) =\n    (F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n     C.inv (\\<epsilon>' (F (G (C.cod f))))) \\<cdot>\\<^sub>C\n    F (G f)", "by simp"], ["proof (state)\nthis:\n  F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n  F (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>C F (G f) =\n  (F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n   C.inv (\\<epsilon>' (F (G (C.cod f))))) \\<cdot>\\<^sub>C\n  F (G f)\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "also"], ["proof (state)\nthis:\n  F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n  F (\\<eta> (G (C.cod f))) \\<cdot>\\<^sub>C F (G f) =\n  (F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n   C.inv (\\<epsilon>' (F (G (C.cod f))))) \\<cdot>\\<^sub>C\n  F (G f)\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "have \"... = (C.inv (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C \\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C F (G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n     C.inv (\\<epsilon>' (F (G (C.cod f))))) \\<cdot>\\<^sub>C\n    F (G f) =\n    (C.inv (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n     \\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n    F (G f)", "using f \\<epsilon>'.inv_naturality [of \"\\<epsilon>' (C.cod f)\"]"], ["proof (prove)\nusing this:\n  C.arr f\n  C.seq (\\<epsilon> (C.cod f))\n   (F (D.inv (\\<eta> (G (C.cod f)))) \\<cdot>\\<^sub>C\n    C.inv (\\<epsilon> (F (G (C.cod f))))) \\<Longrightarrow>\n  (F \\<circ> G) (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n  C.inv (\\<epsilon>'.map (C.dom (\\<epsilon>' (C.cod f)))) =\n  C.inv (\\<epsilon>'.map (C.cod (\\<epsilon>' (C.cod f)))) \\<cdot>\\<^sub>C\n  C.map (\\<epsilon>' (C.cod f))\n\ngoal (1 subgoal):\n 1. (F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n     C.inv (\\<epsilon>' (F (G (C.cod f))))) \\<cdot>\\<^sub>C\n    F (G f) =\n    (C.inv (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n     \\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n    F (G f)", "by simp"], ["proof (state)\nthis:\n  (F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n   C.inv (\\<epsilon>' (F (G (C.cod f))))) \\<cdot>\\<^sub>C\n  F (G f) =\n  (C.inv (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n   \\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n  F (G f)\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "also"], ["proof (state)\nthis:\n  (F (G (\\<epsilon>' (C.cod f))) \\<cdot>\\<^sub>C\n   C.inv (\\<epsilon>' (F (G (C.cod f))))) \\<cdot>\\<^sub>C\n  F (G f) =\n  (C.inv (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n   \\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n  F (G f)\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "have \"... = F (G (C.cod f)) \\<cdot>\\<^sub>C F (G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C.inv (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n     \\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n    F (G f) =\n    F (G (C.cod f)) \\<cdot>\\<^sub>C F (G f)", "using f C.comp_inv_arr' [of \"\\<epsilon>' (C.cod f)\"] \\<epsilon>'.components_are_iso"], ["proof (prove)\nusing this:\n  C.arr f\n  C.iso (\\<epsilon>' (C.cod f)) \\<Longrightarrow>\n  C.inv (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C \\<epsilon>' (C.cod f) =\n  C.dom (\\<epsilon>' (C.cod f))\n  C.ide ?a \\<Longrightarrow> C.iso (\\<epsilon>'.map ?a)\n\ngoal (1 subgoal):\n 1. (C.inv (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n     \\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n    F (G f) =\n    F (G (C.cod f)) \\<cdot>\\<^sub>C F (G f)", "by simp"], ["proof (state)\nthis:\n  (C.inv (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n   \\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n  F (G f) =\n  F (G (C.cod f)) \\<cdot>\\<^sub>C F (G f)\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "also"], ["proof (state)\nthis:\n  (C.inv (\\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n   \\<epsilon>' (C.cod f)) \\<cdot>\\<^sub>C\n  F (G f) =\n  F (G (C.cod f)) \\<cdot>\\<^sub>C F (G f)\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "have \"... = F (G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (G (C.cod f)) \\<cdot>\\<^sub>C F (G f) = F (G f)", "using f C.comp_cod_arr"], ["proof (prove)\nusing this:\n  C.arr f\n  \\<lbrakk>C.arr ?f; C.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>C ?f = ?f\n\ngoal (1 subgoal):\n 1. F (G (C.cod f)) \\<cdot>\\<^sub>C F (G f) = F (G f)", "by simp"], ["proof (state)\nthis:\n  F (G (C.cod f)) \\<cdot>\\<^sub>C F (G f) = F (G f)\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "finally"], ["proof (chain)\npicking this:\n  F (G\\<epsilon>'_\\<eta>G.map f) = F (G f)", "have \"F (G\\<epsilon>'_\\<eta>G.map f) = F (G f)\""], ["proof (prove)\nusing this:\n  F (G\\<epsilon>'_\\<eta>G.map f) = F (G f)\n\ngoal (1 subgoal):\n 1. F (G\\<epsilon>'_\\<eta>G.map f) = F (G f)", "by blast"], ["proof (state)\nthis:\n  F (G\\<epsilon>'_\\<eta>G.map f) = F (G f)\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "moreover"], ["proof (state)\nthis:\n  F (G\\<epsilon>'_\\<eta>G.map f) = F (G f)\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "have \"D.par (G\\<epsilon>'_\\<eta>G.map f) (G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.par (G\\<epsilon>'_\\<eta>G.map f) (G f)", "using f"], ["proof (prove)\nusing this:\n  C.arr f\n\ngoal (1 subgoal):\n 1. D.par (G\\<epsilon>'_\\<eta>G.map f) (G f)", "by simp"], ["proof (state)\nthis:\n  D.par (G\\<epsilon>'_\\<eta>G.map f) (G f)\n\ngoal (1 subgoal):\n 1. C.arr f \\<Longrightarrow> G\\<epsilon>'_\\<eta>G.map f = G f", "ultimately"], ["proof (chain)\npicking this:\n  F (G\\<epsilon>'_\\<eta>G.map f) = F (G f)\n  D.par (G\\<epsilon>'_\\<eta>G.map f) (G f)", "show \"G\\<epsilon>'_\\<eta>G.map f = G f\""], ["proof (prove)\nusing this:\n  F (G\\<epsilon>'_\\<eta>G.map f) = F (G f)\n  D.par (G\\<epsilon>'_\\<eta>G.map f) (G f)\n\ngoal (1 subgoal):\n 1. G\\<epsilon>'_\\<eta>G.map f = G f", "using f F_is_faithful"], ["proof (prove)\nusing this:\n  F (G\\<epsilon>'_\\<eta>G.map f) = F (G f)\n  D.par (G\\<epsilon>'_\\<eta>G.map f) (G f)\n  C.arr f\n  faithful_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n\ngoal (1 subgoal):\n 1. G\\<epsilon>'_\\<eta>G.map f = G f", "by (simp add: faithful_functor_axioms_def faithful_functor_def)"], ["proof (state)\nthis:\n  G\\<epsilon>'_\\<eta>G.map f = G f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G\\<epsilon>'_\\<eta>G.map f = G f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G\\<epsilon>'_\\<eta>G.map = G\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation \\<eta>\\<epsilon>': adjoint_equivalence C D F G \\<eta> \\<epsilon>'.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n     \\<epsilon>'.map", ".."], ["", "lemma refines_to_adjoint_equivalence:\n    shows \"adjoint_equivalence C D F G \\<eta> \\<epsilon>'.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint_equivalence (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n     \\<epsilon>'.map", ".."], ["", "end"], ["", "end"]]}