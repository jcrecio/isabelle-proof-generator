{"file_name": "/home/qj213/afp-2021-10-22/thys/Category3/BinaryFunctor.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Category3", "problem_names": ["lemma map_simp [simp]:\n    assumes \"A1xA2.arr f\"\n    shows \"map f = (F1 (fst f), F2 (snd f))\"", "lemma is_functor:\n    shows \"functor A1xA2.comp B1xB2.comp map\"", "lemma map_simp [simp]:\n    assumes \"A1xA2.arr f\"\n    shows \"map f = (snd f, fst f)\"", "lemma is_functor:\n    shows \"functor A1xA2.comp A2xA1.comp map\"", "lemma sym_is_binary_functor:\n    shows \"binary_functor A2 A1 B sym\"", "lemma fixing_ide_gives_functor_1:\n    assumes \"A1.ide a1\"\n    shows \"functor A2 B (\\<lambda>f2. F (a1, f2))\"", "lemma fixing_ide_gives_functor_2:\n    assumes \"A2.ide a2\"\n    shows \"functor A1 B (\\<lambda>f1. F (f1, a2))\"", "lemma fixing_arr_gives_natural_transformation_1:\n    assumes \"A1.arr f1\"\n    shows \"natural_transformation A2 B (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n                                       (\\<lambda>f2. F (f1, f2))\"", "lemma fixing_arr_gives_natural_transformation_2:\n    assumes \"A2.arr f2\"\n    shows \"natural_transformation A1 B (\\<lambda>f1. F (f1, A2.dom f2)) (\\<lambda>f1. F (f1, A2.cod f2))\n                                       (\\<lambda>f1. F (f1, f2))\"", "lemma preserves_comp_1:\n    assumes \"A1.seq f1' f1\"\n    shows \"(\\<lambda>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2)) =\n                 vertical_composite.map A2 B (\\<lambda>f2. F (f1, f2)) (\\<lambda>f2. F (f1', f2))\"", "lemma preserves_comp_2:\n    assumes \"A2.seq f2' f2\"\n    shows \"(\\<lambda>f1. F (f1, f2' \\<cdot>\\<^sub>A\\<^sub>2 f2)) =\n                 vertical_composite.map A1 B (\\<lambda>f1. F (f1, f2)) (\\<lambda>f1. F (f1, f2'))\"", "lemma fixing_ide_gives_natural_transformation_1:\n    assumes \"A1.ide a1\"\n    shows \"natural_transformation A2 B (\\<lambda>f2. F (a1, f2)) (\\<lambda>f2. G (a1, f2)) (\\<lambda>f2. \\<tau> (a1, f2))\"", "lemma fixing_ide_gives_natural_transformation_2:\n    assumes \"A2.ide a2\"\n    shows \"natural_transformation A1 B (\\<lambda>f1. F (f1, a2)) (\\<lambda>f1. G (f1, a2)) (\\<lambda>f1. \\<tau> (f1, a2))\""], "translations": [["", "lemma map_simp [simp]:\n    assumes \"A1xA2.arr f\"\n    shows \"map f = (F1 (fst f), F2 (snd f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.map f = (F1 (fst f), F2 (snd f))", "using assms map_def"], ["proof (prove)\nusing this:\n  A1xA2.arr f\n  local.map ?f =\n  (if A1.arr (fst ?f) \\<and> A2.arr (snd ?f) then (F1 (fst ?f), F2 (snd ?f))\n   else B1xB2.null)\n\ngoal (1 subgoal):\n 1. local.map f = (F1 (fst f), F2 (snd f))", "by simp"], ["", "lemma is_functor:\n    shows \"functor A1xA2.comp B1xB2.comp map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B\\<^sub>1\\<^sub>x\\<^sub>B\\<^sub>2) local.map", "using B1xB2.dom_char B1xB2.cod_char"], ["proof (prove)\nusing this:\n  B1xB2.dom ?f =\n  (if B1.arr (fst ?f) \\<and> B2.arr (snd ?f)\n   then (B1.dom (fst ?f), B2.dom (snd ?f)) else (B1.null, B2.null))\n  B1xB2.cod ?f =\n  (if B1.arr (fst ?f) \\<and> B2.arr (snd ?f)\n   then (B1.cod (fst ?f), B2.cod (snd ?f)) else (B1.null, B2.null))\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B\\<^sub>1\\<^sub>x\\<^sub>B\\<^sub>2) local.map", "apply (unfold_locales)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<And>f.\n                   B1xB2.dom f =\n                   (if B1.arr (fst f) \\<and> B2.arr (snd f)\n                    then (B1.dom (fst f), B2.dom (snd f))\n                    else (B1.null, B2.null));\n        \\<And>f.\n           B1xB2.cod f =\n           (if B1.arr (fst f) \\<and> B2.arr (snd f)\n            then (B1.cod (fst f), B2.cod (snd f)) else (B1.null, B2.null));\n        \\<not> A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> local.map f = B1xB2.null\n 2. \\<And>f.\n       \\<lbrakk>\\<And>f.\n                   B1xB2.dom f =\n                   (if B1.arr (fst f) \\<and> B2.arr (snd f)\n                    then (B1.dom (fst f), B2.dom (snd f))\n                    else (B1.null, B2.null));\n        \\<And>f.\n           B1xB2.cod f =\n           (if B1.arr (fst f) \\<and> B2.arr (snd f)\n            then (B1.cod (fst f), B2.cod (snd f)) else (B1.null, B2.null));\n        A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> B1xB2.arr (local.map f)\n 3. \\<And>f.\n       \\<lbrakk>\\<And>f.\n                   B1xB2.dom f =\n                   (if B1.arr (fst f) \\<and> B2.arr (snd f)\n                    then (B1.dom (fst f), B2.dom (snd f))\n                    else (B1.null, B2.null));\n        \\<And>f.\n           B1xB2.cod f =\n           (if B1.arr (fst f) \\<and> B2.arr (snd f)\n            then (B1.cod (fst f), B2.cod (snd f)) else (B1.null, B2.null));\n        A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> B1xB2.dom (local.map f) = local.map (A1xA2.dom f)\n 4. \\<And>f.\n       \\<lbrakk>\\<And>f.\n                   B1xB2.dom f =\n                   (if B1.arr (fst f) \\<and> B2.arr (snd f)\n                    then (B1.dom (fst f), B2.dom (snd f))\n                    else (B1.null, B2.null));\n        \\<And>f.\n           B1xB2.cod f =\n           (if B1.arr (fst f) \\<and> B2.arr (snd f)\n            then (B1.cod (fst f), B2.cod (snd f)) else (B1.null, B2.null));\n        A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> B1xB2.cod (local.map f) = local.map (A1xA2.cod f)\n 5. \\<And>g f.\n       \\<lbrakk>\\<And>f.\n                   B1xB2.dom f =\n                   (if B1.arr (fst f) \\<and> B2.arr (snd f)\n                    then (B1.dom (fst f), B2.dom (snd f))\n                    else (B1.null, B2.null));\n        \\<And>f.\n           B1xB2.cod f =\n           (if B1.arr (fst f) \\<and> B2.arr (snd f)\n            then (B1.cod (fst f), B2.cod (snd f)) else (B1.null, B2.null));\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> local.map\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         local.map\n                          g \\<cdot>\\<^sub>B\\<^sub>1\\<^sub>x\\<^sub>B\\<^sub>2\n                         local.map f", "using map_def A1.arr_dom_iff_arr A1.arr_cod_iff_arr A2.arr_dom_iff_arr A2.arr_cod_iff_arr"], ["proof (prove)\nusing this:\n  local.map ?f =\n  (if A1.arr (fst ?f) \\<and> A2.arr (snd ?f) then (F1 (fst ?f), F2 (snd ?f))\n   else B1xB2.null)\n  A1.arr (A1.dom ?f) = A1.arr ?f\n  A1.arr (A1.cod ?f) = A1.arr ?f\n  A2.arr (A2.dom ?f) = A2.arr ?f\n  A2.arr (A2.cod ?f) = A2.arr ?f\n\ngoal (5 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<And>f.\n                   B1xB2.dom f =\n                   (if B1.arr (fst f) \\<and> B2.arr (snd f)\n                    then (B1.dom (fst f), B2.dom (snd f))\n                    else (B1.null, B2.null));\n        \\<And>f.\n           B1xB2.cod f =\n           (if B1.arr (fst f) \\<and> B2.arr (snd f)\n            then (B1.cod (fst f), B2.cod (snd f)) else (B1.null, B2.null));\n        \\<not> A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> local.map f = B1xB2.null\n 2. \\<And>f.\n       \\<lbrakk>\\<And>f.\n                   B1xB2.dom f =\n                   (if B1.arr (fst f) \\<and> B2.arr (snd f)\n                    then (B1.dom (fst f), B2.dom (snd f))\n                    else (B1.null, B2.null));\n        \\<And>f.\n           B1xB2.cod f =\n           (if B1.arr (fst f) \\<and> B2.arr (snd f)\n            then (B1.cod (fst f), B2.cod (snd f)) else (B1.null, B2.null));\n        A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> B1xB2.arr (local.map f)\n 3. \\<And>f.\n       \\<lbrakk>\\<And>f.\n                   B1xB2.dom f =\n                   (if B1.arr (fst f) \\<and> B2.arr (snd f)\n                    then (B1.dom (fst f), B2.dom (snd f))\n                    else (B1.null, B2.null));\n        \\<And>f.\n           B1xB2.cod f =\n           (if B1.arr (fst f) \\<and> B2.arr (snd f)\n            then (B1.cod (fst f), B2.cod (snd f)) else (B1.null, B2.null));\n        A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> B1xB2.dom (local.map f) = local.map (A1xA2.dom f)\n 4. \\<And>f.\n       \\<lbrakk>\\<And>f.\n                   B1xB2.dom f =\n                   (if B1.arr (fst f) \\<and> B2.arr (snd f)\n                    then (B1.dom (fst f), B2.dom (snd f))\n                    else (B1.null, B2.null));\n        \\<And>f.\n           B1xB2.cod f =\n           (if B1.arr (fst f) \\<and> B2.arr (snd f)\n            then (B1.cod (fst f), B2.cod (snd f)) else (B1.null, B2.null));\n        A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> B1xB2.cod (local.map f) = local.map (A1xA2.cod f)\n 5. \\<And>g f.\n       \\<lbrakk>\\<And>f.\n                   B1xB2.dom f =\n                   (if B1.arr (fst f) \\<and> B2.arr (snd f)\n                    then (B1.dom (fst f), B2.dom (snd f))\n                    else (B1.null, B2.null));\n        \\<And>f.\n           B1xB2.cod f =\n           (if B1.arr (fst f) \\<and> B2.arr (snd f)\n            then (B1.cod (fst f), B2.cod (snd f)) else (B1.null, B2.null));\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> local.map\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         local.map\n                          g \\<cdot>\\<^sub>B\\<^sub>1\\<^sub>x\\<^sub>B\\<^sub>2\n                         local.map f", "apply auto[4]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>f.\n                   B1xB2.dom f =\n                   (if B1.arr (fst f) \\<and> B2.arr (snd f)\n                    then (B1.dom (fst f), B2.dom (snd f))\n                    else (B1.null, B2.null));\n        \\<And>f.\n           B1xB2.cod f =\n           (if B1.arr (fst f) \\<and> B2.arr (snd f)\n            then (B1.cod (fst f), B2.cod (snd f)) else (B1.null, B2.null));\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> local.map\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         local.map\n                          g \\<cdot>\\<^sub>B\\<^sub>1\\<^sub>x\\<^sub>B\\<^sub>2\n                         local.map f", "using A1xA2.seqE map_simp"], ["proof (prove)\nusing this:\n  \\<lbrakk>A1xA2.seq ?g ?f;\n   \\<lbrakk>A1.seq (fst ?g) (fst ?f); A2.seq (snd ?g) (snd ?f)\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  A1xA2.arr ?f \\<Longrightarrow> local.map ?f = (F1 (fst ?f), F2 (snd ?f))\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>f.\n                   B1xB2.dom f =\n                   (if B1.arr (fst f) \\<and> B2.arr (snd f)\n                    then (B1.dom (fst f), B2.dom (snd f))\n                    else (B1.null, B2.null));\n        \\<And>f.\n           B1xB2.cod f =\n           (if B1.arr (fst f) \\<and> B2.arr (snd f)\n            then (B1.cod (fst f), B2.cod (snd f)) else (B1.null, B2.null));\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> local.map\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         local.map\n                          g \\<cdot>\\<^sub>B\\<^sub>1\\<^sub>x\\<^sub>B\\<^sub>2\n                         local.map f", "by fastforce"], ["", "end"], ["", "sublocale product_functor \\<subseteq> \"functor\" A1xA2.comp B1xB2.comp map"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B\\<^sub>1\\<^sub>x\\<^sub>B\\<^sub>2) local.map", "using is_functor"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B\\<^sub>1\\<^sub>x\\<^sub>B\\<^sub>2) local.map\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B\\<^sub>1\\<^sub>x\\<^sub>B\\<^sub>2) local.map", "by auto"], ["", "sublocale product_functor \\<subseteq> binary_functor A1 A2 B1xB2.comp map"], ["proof (prove)\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B\\<^sub>1\\<^sub>x\\<^sub>B\\<^sub>2) local.map", ".."], ["", "text\\<open>\n    A symmetry functor is a binary functor that exchanges its two arguments.\n\\<close>"], ["", "locale symmetry_functor =\n  A1: category A1 +\n  A2: category A2 +\n  A1xA2: product_category A1 A2 +\n  A2xA1: product_category A2 A1\n  for A1 :: \"'a1 comp\"     (infixr \"\\<cdot>\\<^sub>A\\<^sub>1\" 55)\n  and A2 :: \"'a2 comp\"     (infixr \"\\<cdot>\\<^sub>A\\<^sub>2\" 55)\n  begin"], ["", "notation A1xA2.comp    (infixr \"\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\" 55)"], ["", "notation A2xA1.comp    (infixr \"\\<cdot>\\<^sub>A\\<^sub>2\\<^sub>x\\<^sub>A\\<^sub>1\" 55)"], ["", "notation A1xA2.in_hom  (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 _\\<guillemotright>\")"], ["", "notation A2xA1.in_hom  (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>A\\<^sub>2\\<^sub>x\\<^sub>A\\<^sub>1 _\\<guillemotright>\")"], ["", "definition map :: \"'a1 * 'a2 \\<Rightarrow> 'a2 * 'a1\"\n    where \"map f = (if A1xA2.arr f then (snd f, fst f) else A2xA1.null)\""], ["", "lemma map_simp [simp]:\n    assumes \"A1xA2.arr f\"\n    shows \"map f = (snd f, fst f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.map f = (snd f, fst f)", "using assms map_def"], ["proof (prove)\nusing this:\n  A1xA2.arr f\n  local.map ?f = (if A1xA2.arr ?f then (snd ?f, fst ?f) else A2xA1.null)\n\ngoal (1 subgoal):\n 1. local.map f = (snd f, fst f)", "by meson"], ["", "lemma is_functor:\n    shows \"functor A1xA2.comp A2xA1.comp map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>A\\<^sub>2\\<^sub>x\\<^sub>A\\<^sub>1) local.map", "using map_def A1.arr_dom_iff_arr A1.arr_cod_iff_arr A2.arr_dom_iff_arr A2.arr_cod_iff_arr"], ["proof (prove)\nusing this:\n  local.map ?f = (if A1xA2.arr ?f then (snd ?f, fst ?f) else A2xA1.null)\n  A1.arr (A1.dom ?f) = A1.arr ?f\n  A1.arr (A1.cod ?f) = A1.arr ?f\n  A2.arr (A2.dom ?f) = A2.arr ?f\n  A2.arr (A2.cod ?f) = A2.arr ?f\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>A\\<^sub>2\\<^sub>x\\<^sub>A\\<^sub>1) local.map", "apply (unfold_locales)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<And>f.\n                   local.map f =\n                   (if A1xA2.arr f then (snd f, fst f) else A2xA1.null);\n        \\<And>f. A1.arr (A1.dom f) = A1.arr f;\n        \\<And>f. A1.arr (A1.cod f) = A1.arr f;\n        \\<And>f. A2.arr (A2.dom f) = A2.arr f;\n        \\<And>f. A2.arr (A2.cod f) = A2.arr f; \\<not> A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> local.map f = A2xA1.null\n 2. \\<And>f.\n       \\<lbrakk>\\<And>f.\n                   local.map f =\n                   (if A1xA2.arr f then (snd f, fst f) else A2xA1.null);\n        \\<And>f. A1.arr (A1.dom f) = A1.arr f;\n        \\<And>f. A1.arr (A1.cod f) = A1.arr f;\n        \\<And>f. A2.arr (A2.dom f) = A2.arr f;\n        \\<And>f. A2.arr (A2.cod f) = A2.arr f; A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> A2xA1.arr (local.map f)\n 3. \\<And>f.\n       \\<lbrakk>\\<And>f.\n                   local.map f =\n                   (if A1xA2.arr f then (snd f, fst f) else A2xA1.null);\n        \\<And>f. A1.arr (A1.dom f) = A1.arr f;\n        \\<And>f. A1.arr (A1.cod f) = A1.arr f;\n        \\<And>f. A2.arr (A2.dom f) = A2.arr f;\n        \\<And>f. A2.arr (A2.cod f) = A2.arr f; A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> A2xA1.dom (local.map f) = local.map (A1xA2.dom f)\n 4. \\<And>f.\n       \\<lbrakk>\\<And>f.\n                   local.map f =\n                   (if A1xA2.arr f then (snd f, fst f) else A2xA1.null);\n        \\<And>f. A1.arr (A1.dom f) = A1.arr f;\n        \\<And>f. A1.arr (A1.cod f) = A1.arr f;\n        \\<And>f. A2.arr (A2.dom f) = A2.arr f;\n        \\<And>f. A2.arr (A2.cod f) = A2.arr f; A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> A2xA1.cod (local.map f) = local.map (A1xA2.cod f)\n 5. \\<And>g f.\n       \\<lbrakk>\\<And>f.\n                   local.map f =\n                   (if A1xA2.arr f then (snd f, fst f) else A2xA1.null);\n        \\<And>f. A1.arr (A1.dom f) = A1.arr f;\n        \\<And>f. A1.arr (A1.cod f) = A1.arr f;\n        \\<And>f. A2.arr (A2.dom f) = A2.arr f;\n        \\<And>f. A2.arr (A2.cod f) = A2.arr f; A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> local.map\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         local.map\n                          g \\<cdot>\\<^sub>A\\<^sub>2\\<^sub>x\\<^sub>A\\<^sub>1\n                         local.map f", "apply auto[4]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>f.\n                   local.map f =\n                   (if A1xA2.arr f then (snd f, fst f) else A2xA1.null);\n        \\<And>f. A1.arr (A1.dom f) = A1.arr f;\n        \\<And>f. A1.arr (A1.cod f) = A1.arr f;\n        \\<And>f. A2.arr (A2.dom f) = A2.arr f;\n        \\<And>f. A2.arr (A2.cod f) = A2.arr f; A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> local.map\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         local.map\n                          g \\<cdot>\\<^sub>A\\<^sub>2\\<^sub>x\\<^sub>A\\<^sub>1\n                         local.map f", "by force"], ["", "end"], ["", "sublocale symmetry_functor \\<subseteq> \"functor\" A1xA2.comp A2xA1.comp map"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>A\\<^sub>2\\<^sub>x\\<^sub>A\\<^sub>1) local.map", "using is_functor"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>A\\<^sub>2\\<^sub>x\\<^sub>A\\<^sub>1) local.map\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>A\\<^sub>2\\<^sub>x\\<^sub>A\\<^sub>1) local.map", "by auto"], ["", "sublocale symmetry_functor \\<subseteq> binary_functor A1 A2 A2xA1.comp map"], ["proof (prove)\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>A\\<^sub>2\\<^sub>x\\<^sub>A\\<^sub>1) local.map", ".."], ["", "context binary_functor\n  begin"], ["", "abbreviation sym\n    where \"sym \\<equiv> (\\<lambda>f. F (snd f, fst f))\""], ["", "lemma sym_is_binary_functor:\n    shows \"binary_functor A2 A1 B sym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) local.sym", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) local.sym", "interpret A2xA1: product_category A2 A1"], ["proof (prove)\ngoal (1 subgoal):\n 1. product_category (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) local.sym", "interpret S: symmetry_functor A2 A1"], ["proof (prove)\ngoal (1 subgoal):\n 1. symmetry_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) local.sym", "interpret SF: composite_functor A2xA1.comp A1xA2.comp B S.map F"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor (\\<cdot>\\<^sub>A\\<^sub>2\\<^sub>x\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     S.map F", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) local.sym", "have \"binary_functor A2 A1 B (F o S.map)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) SF.map", ".."], ["proof (state)\nthis:\n  binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>B) SF.map\n\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) local.sym", "moreover"], ["proof (state)\nthis:\n  binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>B) SF.map\n\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) local.sym", "have \"F o S.map = (\\<lambda>f. F (snd f, fst f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SF.map = local.sym", "using is_extensional SF.is_extensional S.map_def"], ["proof (prove)\nusing this:\n  \\<not> A1xA2.arr ?f \\<Longrightarrow> F ?f = B.null\n  \\<not> A2xA1.arr ?f \\<Longrightarrow> SF.map ?f = B.null\n  S.map ?f = (if A2xA1.arr ?f then (snd ?f, fst ?f) else A1xA2.null)\n\ngoal (1 subgoal):\n 1. SF.map = local.sym", "by fastforce"], ["proof (state)\nthis:\n  SF.map = local.sym\n\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) local.sym", "ultimately"], ["proof (chain)\npicking this:\n  binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>B) SF.map\n  SF.map = local.sym", "show ?thesis"], ["proof (prove)\nusing this:\n  binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>B) SF.map\n  SF.map = local.sym\n\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) local.sym", "using sym_def"], ["proof (prove)\nusing this:\n  binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>B) SF.map\n  SF.map = local.sym\n  Relation.sym ?r =\n  (\\<forall>x y. (x, y) \\<in> ?r \\<longrightarrow> (y, x) \\<in> ?r)\n\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) local.sym", "by auto"], ["proof (state)\nthis:\n  binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>B) local.sym\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n      Fixing one or the other argument of a binary functor to be an identity\n      yields a functor of the other argument.\n\\<close>"], ["", "lemma fixing_ide_gives_functor_1:\n    assumes \"A1.ide a1\"\n    shows \"functor A2 B (\\<lambda>f2. F (a1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (a1, f2))", "using assms"], ["proof (prove)\nusing this:\n  A1.ide a1\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (a1, f2))", "apply unfold_locales"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A1.ide a1; \\<not> A2.arr f\\<rbrakk>\n       \\<Longrightarrow> F (a1, f) = B.null\n 2. \\<And>f.\n       \\<lbrakk>A1.ide a1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> B.arr (F (a1, f))\n 3. \\<And>f.\n       \\<lbrakk>A1.ide a1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> B.dom (F (a1, f)) = F (a1, A2.dom f)\n 4. \\<And>f.\n       \\<lbrakk>A1.ide a1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> B.cod (F (a1, f)) = F (a1, A2.cod f)\n 5. \\<And>g f.\n       \\<lbrakk>A1.ide a1; A2.seq g f\\<rbrakk>\n       \\<Longrightarrow> F (a1, g \\<cdot>\\<^sub>A\\<^sub>2 f) =\n                         F (a1, g) \\<cdot>\\<^sub>B F (a1, f)", "using is_extensional"], ["proof (prove)\nusing this:\n  \\<not> A1xA2.arr ?f \\<Longrightarrow> F ?f = B.null\n\ngoal (5 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A1.ide a1; \\<not> A2.arr f\\<rbrakk>\n       \\<Longrightarrow> F (a1, f) = B.null\n 2. \\<And>f.\n       \\<lbrakk>A1.ide a1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> B.arr (F (a1, f))\n 3. \\<And>f.\n       \\<lbrakk>A1.ide a1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> B.dom (F (a1, f)) = F (a1, A2.dom f)\n 4. \\<And>f.\n       \\<lbrakk>A1.ide a1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> B.cod (F (a1, f)) = F (a1, A2.cod f)\n 5. \\<And>g f.\n       \\<lbrakk>A1.ide a1; A2.seq g f\\<rbrakk>\n       \\<Longrightarrow> F (a1, g \\<cdot>\\<^sub>A\\<^sub>2 f) =\n                         F (a1, g) \\<cdot>\\<^sub>B F (a1, f)", "apply auto[4]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>A1.ide a1; A2.seq g f\\<rbrakk>\n       \\<Longrightarrow> F (a1, g \\<cdot>\\<^sub>A\\<^sub>2 f) =\n                         F (a1, g) \\<cdot>\\<^sub>B F (a1, f)", "by (metis A1.ideD(1) A1.comp_ide_self A1xA2.comp_simp A1xA2.seq_char fst_conv\n          preserves_comp_2 snd_conv)"], ["", "lemma fixing_ide_gives_functor_2:\n    assumes \"A2.ide a2\"\n    shows \"functor A1 B (\\<lambda>f1. F (f1, a2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, a2))", "using assms"], ["proof (prove)\nusing this:\n  A2.ide a2\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, a2))", "apply (unfold_locales)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A2.ide a2; \\<not> A1.arr f\\<rbrakk>\n       \\<Longrightarrow> F (f, a2) = B.null\n 2. \\<And>f.\n       \\<lbrakk>A2.ide a2; A1.arr f\\<rbrakk>\n       \\<Longrightarrow> B.arr (F (f, a2))\n 3. \\<And>f.\n       \\<lbrakk>A2.ide a2; A1.arr f\\<rbrakk>\n       \\<Longrightarrow> B.dom (F (f, a2)) = F (A1.dom f, a2)\n 4. \\<And>f.\n       \\<lbrakk>A2.ide a2; A1.arr f\\<rbrakk>\n       \\<Longrightarrow> B.cod (F (f, a2)) = F (A1.cod f, a2)\n 5. \\<And>g f.\n       \\<lbrakk>A2.ide a2; A1.seq g f\\<rbrakk>\n       \\<Longrightarrow> F (g \\<cdot>\\<^sub>A\\<^sub>1 f, a2) =\n                         F (g, a2) \\<cdot>\\<^sub>B F (f, a2)", "using is_extensional"], ["proof (prove)\nusing this:\n  \\<not> A1xA2.arr ?f \\<Longrightarrow> F ?f = B.null\n\ngoal (5 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A2.ide a2; \\<not> A1.arr f\\<rbrakk>\n       \\<Longrightarrow> F (f, a2) = B.null\n 2. \\<And>f.\n       \\<lbrakk>A2.ide a2; A1.arr f\\<rbrakk>\n       \\<Longrightarrow> B.arr (F (f, a2))\n 3. \\<And>f.\n       \\<lbrakk>A2.ide a2; A1.arr f\\<rbrakk>\n       \\<Longrightarrow> B.dom (F (f, a2)) = F (A1.dom f, a2)\n 4. \\<And>f.\n       \\<lbrakk>A2.ide a2; A1.arr f\\<rbrakk>\n       \\<Longrightarrow> B.cod (F (f, a2)) = F (A1.cod f, a2)\n 5. \\<And>g f.\n       \\<lbrakk>A2.ide a2; A1.seq g f\\<rbrakk>\n       \\<Longrightarrow> F (g \\<cdot>\\<^sub>A\\<^sub>1 f, a2) =\n                         F (g, a2) \\<cdot>\\<^sub>B F (f, a2)", "apply auto[4]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>A2.ide a2; A1.seq g f\\<rbrakk>\n       \\<Longrightarrow> F (g \\<cdot>\\<^sub>A\\<^sub>1 f, a2) =\n                         F (g, a2) \\<cdot>\\<^sub>B F (f, a2)", "by (metis A1xA2.comp_simp A1xA2.seq_char A2.ideD(1) A2.comp_ide_self fst_conv\n          preserves_comp_2 snd_conv)"], ["", "text\\<open>\n      Fixing one or the other argument of a binary functor to be an arrow\n      yields a natural transformation.\n\\<close>"], ["", "lemma fixing_arr_gives_natural_transformation_1:\n    assumes \"A1.arr f1\"\n    shows \"natural_transformation A2 B (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n                                       (\\<lambda>f2. F (f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n     (\\<lambda>f2. F (f1, f2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n     (\\<lambda>f2. F (f1, f2))", "let ?Fdom = \"\\<lambda>f2. F (A1.dom f1, f2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n     (\\<lambda>f2. F (f1, f2))", "interpret Fdom: \"functor\" A2 B ?Fdom"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2))", "using assms fixing_ide_gives_functor_1"], ["proof (prove)\nusing this:\n  A1.arr f1\n  A1.ide ?a1.0 \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (?a1.0, f2))\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2))", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n     (\\<lambda>f2. F (f1, f2))", "let ?Fcod = \"\\<lambda>f2. F (A1.cod f1, f2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n     (\\<lambda>f2. F (f1, f2))", "interpret Fcod: \"functor\" A2 B ?Fcod"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.cod f1, f2))", "using assms fixing_ide_gives_functor_1"], ["proof (prove)\nusing this:\n  A1.arr f1\n  A1.ide ?a1.0 \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (?a1.0, f2))\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.cod f1, f2))", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n     (\\<lambda>f2. F (f1, f2))", "let ?\\<tau> = \"\\<lambda>f2. F (f1, f2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n     (\\<lambda>f2. F (f1, f2))", "show \"natural_transformation A2 B ?Fdom ?Fcod ?\\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n     (\\<lambda>f2. F (f1, f2))", "using assms"], ["proof (prove)\nusing this:\n  A1.arr f1\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n     (\\<lambda>f2. F (f1, f2))", "apply unfold_locales"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A1.arr f1; \\<not> A2.arr f\\<rbrakk>\n       \\<Longrightarrow> F (f1, f) = B.null\n 2. \\<And>f.\n       \\<lbrakk>A1.arr f1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> B.dom (F (f1, f)) = F (A1.dom f1, A2.dom f)\n 3. \\<And>f.\n       \\<lbrakk>A1.arr f1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> B.cod (F (f1, f)) = F (A1.cod f1, A2.cod f)\n 4. \\<And>f.\n       \\<lbrakk>A1.arr f1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> F (A1.cod f1, f) \\<cdot>\\<^sub>B F (f1, A2.dom f) =\n                         F (f1, f)\n 5. \\<And>f.\n       \\<lbrakk>A1.arr f1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> F (f1, A2.cod f) \\<cdot>\\<^sub>B F (A1.dom f1, f) =\n                         F (f1, f)", "using is_extensional"], ["proof (prove)\nusing this:\n  \\<not> A1xA2.arr ?f \\<Longrightarrow> F ?f = B.null\n\ngoal (5 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A1.arr f1; \\<not> A2.arr f\\<rbrakk>\n       \\<Longrightarrow> F (f1, f) = B.null\n 2. \\<And>f.\n       \\<lbrakk>A1.arr f1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> B.dom (F (f1, f)) = F (A1.dom f1, A2.dom f)\n 3. \\<And>f.\n       \\<lbrakk>A1.arr f1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> B.cod (F (f1, f)) = F (A1.cod f1, A2.cod f)\n 4. \\<And>f.\n       \\<lbrakk>A1.arr f1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> F (A1.cod f1, f) \\<cdot>\\<^sub>B F (f1, A2.dom f) =\n                         F (f1, f)\n 5. \\<And>f.\n       \\<lbrakk>A1.arr f1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> F (f1, A2.cod f) \\<cdot>\\<^sub>B F (A1.dom f1, f) =\n                         F (f1, f)", "apply auto[3]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A1.arr f1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> F (A1.cod f1, f) \\<cdot>\\<^sub>B F (f1, A2.dom f) =\n                         F (f1, f)\n 2. \\<And>f.\n       \\<lbrakk>A1.arr f1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> F (f1, A2.cod f) \\<cdot>\\<^sub>B F (A1.dom f1, f) =\n                         F (f1, f)", "using A1xA2.arr_char preserves_comp A1.comp_cod_arr A1xA2.comp_char A2.comp_arr_dom"], ["proof (prove)\nusing this:\n  A1xA2.arr ?f = (A1.arr (fst ?f) \\<and> A2.arr (snd ?f))\n  A1xA2.seq ?g ?f \\<Longrightarrow>\n  F (A1xA2.comp ?g ?f) = F ?g \\<cdot>\\<^sub>B F ?f\n  \\<lbrakk>A1.arr ?f; A1.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>A\\<^sub>1 ?f = ?f\n  A1xA2.comp ?g ?f =\n  (if A1.seq (fst ?g) (fst ?f) \\<and> A2.seq (snd ?g) (snd ?f)\n   then (fst ?g \\<cdot>\\<^sub>A\\<^sub>1 fst ?f,\n         snd ?g \\<cdot>\\<^sub>A\\<^sub>2 snd ?f)\n   else (A1.null, A2.null))\n  \\<lbrakk>A2.arr ?f; A2.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>A\\<^sub>2 ?a = ?f\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A1.arr f1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> F (A1.cod f1, f) \\<cdot>\\<^sub>B F (f1, A2.dom f) =\n                         F (f1, f)\n 2. \\<And>f.\n       \\<lbrakk>A1.arr f1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> F (f1, A2.cod f) \\<cdot>\\<^sub>B F (A1.dom f1, f) =\n                         F (f1, f)", "apply (metis fst_conv snd_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>A1.arr f1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> F (f1, A2.cod f) \\<cdot>\\<^sub>B F (A1.dom f1, f) =\n                         F (f1, f)", "using A1xA2.arr_char preserves_comp A2.comp_cod_arr A1xA2.comp_char A1.comp_arr_dom"], ["proof (prove)\nusing this:\n  A1xA2.arr ?f = (A1.arr (fst ?f) \\<and> A2.arr (snd ?f))\n  A1xA2.seq ?g ?f \\<Longrightarrow>\n  F (A1xA2.comp ?g ?f) = F ?g \\<cdot>\\<^sub>B F ?f\n  \\<lbrakk>A2.arr ?f; A2.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>A\\<^sub>2 ?f = ?f\n  A1xA2.comp ?g ?f =\n  (if A1.seq (fst ?g) (fst ?f) \\<and> A2.seq (snd ?g) (snd ?f)\n   then (fst ?g \\<cdot>\\<^sub>A\\<^sub>1 fst ?f,\n         snd ?g \\<cdot>\\<^sub>A\\<^sub>2 snd ?f)\n   else (A1.null, A2.null))\n  \\<lbrakk>A1.arr ?f; A1.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>A\\<^sub>1 ?a = ?f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>A1.arr f1; A2.arr f\\<rbrakk>\n       \\<Longrightarrow> F (f1, A2.cod f) \\<cdot>\\<^sub>B F (A1.dom f1, f) =\n                         F (f1, f)", "by (metis fst_conv snd_conv)"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n   (\\<lambda>f2. F (f1, f2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fixing_arr_gives_natural_transformation_2:\n    assumes \"A2.arr f2\"\n    shows \"natural_transformation A1 B (\\<lambda>f1. F (f1, A2.dom f2)) (\\<lambda>f1. F (f1, A2.cod f2))\n                                       (\\<lambda>f1. F (f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, A2.dom f2)) (\\<lambda>f1. F (f1, A2.cod f2))\n     (\\<lambda>f1. F (f1, f2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, A2.dom f2)) (\\<lambda>f1. F (f1, A2.cod f2))\n     (\\<lambda>f1. F (f1, f2))", "interpret F': binary_functor A2 A1 B sym"], ["proof (prove)\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) local.sym", "using assms(1) sym_is_binary_functor"], ["proof (prove)\nusing this:\n  A2.arr f2\n  binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>B) local.sym\n\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) local.sym", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, A2.dom f2)) (\\<lambda>f1. F (f1, A2.cod f2))\n     (\\<lambda>f1. F (f1, f2))", "have \"natural_transformation A1 B (\\<lambda>f1. sym (A2.dom f2, f1)) (\\<lambda>f1. sym (A2.cod f2, f1))\n                                        (\\<lambda>f1. sym (f2, f1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. local.sym (A2.dom f2, f1))\n     (\\<lambda>f1. local.sym (A2.cod f2, f1))\n     (\\<lambda>f1. local.sym (f2, f1))", "using assms F'.fixing_arr_gives_natural_transformation_1"], ["proof (prove)\nusing this:\n  A2.arr f2\n  A2.arr ?f1.0 \\<Longrightarrow>\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. local.sym (A2.dom ?f1.0, f2))\n   (\\<lambda>f2. local.sym (A2.cod ?f1.0, f2))\n   (\\<lambda>f2. local.sym (?f1.0, f2))\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. local.sym (A2.dom f2, f1))\n     (\\<lambda>f1. local.sym (A2.cod f2, f1))\n     (\\<lambda>f1. local.sym (f2, f1))", "by fast"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f1. local.sym (A2.dom f2, f1))\n   (\\<lambda>f1. local.sym (A2.cod f2, f1))\n   (\\<lambda>f1. local.sym (f2, f1))\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, A2.dom f2)) (\\<lambda>f1. F (f1, A2.cod f2))\n     (\\<lambda>f1. F (f1, f2))", "thus ?thesis"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f1. local.sym (A2.dom f2, f1))\n   (\\<lambda>f1. local.sym (A2.cod f2, f1))\n   (\\<lambda>f1. local.sym (f2, f1))\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, A2.dom f2)) (\\<lambda>f1. F (f1, A2.cod f2))\n     (\\<lambda>f1. F (f1, f2))", "by simp"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f1. F (f1, A2.dom f2)) (\\<lambda>f1. F (f1, A2.cod f2))\n   (\\<lambda>f1. F (f1, f2))\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n      Fixing one or the other argument of a binary functor to be a composite arrow\n      yields a natural transformation that is a vertical composite.\n\\<close>"], ["", "lemma preserves_comp_1:\n    assumes \"A1.seq f1' f1\"\n    shows \"(\\<lambda>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2)) =\n                 vertical_composite.map A2 B (\\<lambda>f2. F (f1, f2)) (\\<lambda>f2. F (f1', f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2)) =\n    vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (f1, f2)) (\\<lambda>f2. F (f1', f2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2)) =\n    vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (f1, f2)) (\\<lambda>f2. F (f1', f2))", "interpret \\<tau>: natural_transformation A2 B\n                     \\<open>\\<lambda>f2. F (A1.dom f1, f2)\\<close> \\<open>\\<lambda>f2. F (A1.cod f1, f2)\\<close> \\<open>\\<lambda>f2. F (f1, f2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n     (\\<lambda>f2. F (f1, f2))", "using assms fixing_arr_gives_natural_transformation_1"], ["proof (prove)\nusing this:\n  A1.seq f1' f1\n  A1.arr ?f1.0 \\<Longrightarrow>\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (A1.dom ?f1.0, f2)) (\\<lambda>f2. F (A1.cod ?f1.0, f2))\n   (\\<lambda>f2. F (?f1.0, f2))\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n     (\\<lambda>f2. F (f1, f2))", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2)) =\n    vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (f1, f2)) (\\<lambda>f2. F (f1', f2))", "interpret \\<tau>': natural_transformation A2 B\n                     \\<open>\\<lambda>f2. F (A1.cod f1, f2)\\<close> \\<open>\\<lambda>f2. F (A1.cod f1', f2)\\<close> \\<open>\\<lambda>f2. F (f1', f2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (A1.cod f1', f2))\n     (\\<lambda>f2. F (f1', f2))", "using assms fixing_arr_gives_natural_transformation_1 A1.seqE"], ["proof (prove)\nusing this:\n  A1.seq f1' f1\n  A1.arr ?f1.0 \\<Longrightarrow>\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (A1.dom ?f1.0, f2)) (\\<lambda>f2. F (A1.cod ?f1.0, f2))\n   (\\<lambda>f2. F (?f1.0, f2))\n  \\<lbrakk>A1.seq ?g ?f;\n   \\<lbrakk>A1.arr ?f; A1.arr ?g; A1.dom ?g = A1.cod ?f\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (A1.cod f1', f2))\n     (\\<lambda>f2. F (f1', f2))", "by metis"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2)) =\n    vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (f1, f2)) (\\<lambda>f2. F (f1', f2))", "interpret \\<tau>'o\\<tau>: vertical_composite A2 B\n                        \\<open>\\<lambda>f2. F (A1.dom f1, f2)\\<close> \\<open>\\<lambda>f2. F (A1.cod f1, f2)\\<close> \\<open>\\<lambda>f2. F (A1.cod f1', f2)\\<close>\n                        \\<open>\\<lambda>f2. F (f1, f2)\\<close> \\<open>\\<lambda>f2. F (f1', f2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n     (\\<lambda>f2. F (A1.cod f1', f2)) (\\<lambda>f2. F (f1, f2))\n     (\\<lambda>f2. F (f1', f2))", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2)) =\n    \\<tau>'o\\<tau>.map", "show \"(\\<lambda>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2)) = \\<tau>'o\\<tau>.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2)) =\n    \\<tau>'o\\<tau>.map", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "fix f2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "have \"\\<not>A2.arr f2 \\<Longrightarrow> F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> A2.arr f2 \\<Longrightarrow>\n    F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "using \\<tau>'o\\<tau>.is_extensional is_extensional"], ["proof (prove)\nusing this:\n  \\<not> A2.arr ?f \\<Longrightarrow> \\<tau>'o\\<tau>.map ?f = B.null\n  \\<not> A1xA2.arr ?f \\<Longrightarrow> F ?f = B.null\n\ngoal (1 subgoal):\n 1. \\<not> A2.arr f2 \\<Longrightarrow>\n    F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "by simp"], ["proof (state)\nthis:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2\n\ngoal (1 subgoal):\n 1. \\<And>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "moreover"], ["proof (state)\nthis:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2\n\ngoal (1 subgoal):\n 1. \\<And>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "have \"A2.arr f2 \\<Longrightarrow> F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2.arr f2 \\<Longrightarrow>\n    F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A2.arr f2 \\<Longrightarrow>\n    F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "assume f2: \"A2.arr f2\""], ["proof (state)\nthis:\n  A2.arr f2\n\ngoal (1 subgoal):\n 1. A2.arr f2 \\<Longrightarrow>\n    F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "have \"F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = B (F (f1', f2)) (F (f1, A2.dom f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) =\n    F (f1', f2) \\<cdot>\\<^sub>B F (f1, A2.dom f2)", "using assms f2 preserves_comp A1xA2.arr_char A1xA2.comp_char A2.comp_arr_dom"], ["proof (prove)\nusing this:\n  A1.seq f1' f1\n  A2.arr f2\n  A1xA2.seq ?g ?f \\<Longrightarrow>\n  F (A1xA2.comp ?g ?f) = F ?g \\<cdot>\\<^sub>B F ?f\n  A1xA2.arr ?f = (A1.arr (fst ?f) \\<and> A2.arr (snd ?f))\n  A1xA2.comp ?g ?f =\n  (if A1.seq (fst ?g) (fst ?f) \\<and> A2.seq (snd ?g) (snd ?f)\n   then (fst ?g \\<cdot>\\<^sub>A\\<^sub>1 fst ?f,\n         snd ?g \\<cdot>\\<^sub>A\\<^sub>2 snd ?f)\n   else (A1.null, A2.null))\n  \\<lbrakk>A2.arr ?f; A2.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>A\\<^sub>2 ?a = ?f\n\ngoal (1 subgoal):\n 1. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) =\n    F (f1', f2) \\<cdot>\\<^sub>B F (f1, A2.dom f2)", "by (metis fst_conv snd_conv)"], ["proof (state)\nthis:\n  F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) =\n  F (f1', f2) \\<cdot>\\<^sub>B F (f1, A2.dom f2)\n\ngoal (1 subgoal):\n 1. A2.arr f2 \\<Longrightarrow>\n    F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "also"], ["proof (state)\nthis:\n  F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) =\n  F (f1', f2) \\<cdot>\\<^sub>B F (f1, A2.dom f2)\n\ngoal (1 subgoal):\n 1. A2.arr f2 \\<Longrightarrow>\n    F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "have \"... = \\<tau>'o\\<tau>.map f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (f1', f2) \\<cdot>\\<^sub>B F (f1, A2.dom f2) = \\<tau>'o\\<tau>.map f2", "using f2 \\<tau>'o\\<tau>.map_simp_2"], ["proof (prove)\nusing this:\n  A2.arr f2\n  A2.arr ?f \\<Longrightarrow>\n  \\<tau>'o\\<tau>.map ?f = F (f1', ?f) \\<cdot>\\<^sub>B F (f1, A2.dom ?f)\n\ngoal (1 subgoal):\n 1. F (f1', f2) \\<cdot>\\<^sub>B F (f1, A2.dom f2) = \\<tau>'o\\<tau>.map f2", "by simp"], ["proof (state)\nthis:\n  F (f1', f2) \\<cdot>\\<^sub>B F (f1, A2.dom f2) = \\<tau>'o\\<tau>.map f2\n\ngoal (1 subgoal):\n 1. A2.arr f2 \\<Longrightarrow>\n    F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "finally"], ["proof (chain)\npicking this:\n  F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "show \"F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2\""], ["proof (prove)\nusing this:\n  F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2\n\ngoal (1 subgoal):\n 1. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "by auto"], ["proof (state)\nthis:\n  F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A2.arr f2 \\<Longrightarrow>\n  F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2\n\ngoal (1 subgoal):\n 1. \\<And>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2\n  A2.arr f2 \\<Longrightarrow>\n  F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "show \"F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2\""], ["proof (prove)\nusing this:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2\n  A2.arr f2 \\<Longrightarrow>\n  F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2\n\ngoal (1 subgoal):\n 1. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2", "by blast"], ["proof (state)\nthis:\n  F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2) = \\<tau>'o\\<tau>.map f2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2)) = \\<tau>'o\\<tau>.map\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma preserves_comp_2:\n    assumes \"A2.seq f2' f2\"\n    shows \"(\\<lambda>f1. F (f1, f2' \\<cdot>\\<^sub>A\\<^sub>2 f2)) =\n                 vertical_composite.map A1 B (\\<lambda>f1. F (f1, f2)) (\\<lambda>f1. F (f1, f2'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f1. F (f1, f2' \\<cdot>\\<^sub>A\\<^sub>2 f2)) =\n    vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, f2)) (\\<lambda>f1. F (f1, f2'))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>f1. F (f1, f2' \\<cdot>\\<^sub>A\\<^sub>2 f2)) =\n    vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, f2)) (\\<lambda>f1. F (f1, f2'))", "interpret F': binary_functor A2 A1 B sym"], ["proof (prove)\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) local.sym", "using assms(1) sym_is_binary_functor"], ["proof (prove)\nusing this:\n  A2.seq f2' f2\n  binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>B) local.sym\n\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) local.sym", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>f1. F (f1, f2' \\<cdot>\\<^sub>A\\<^sub>2 f2)) =\n    vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, f2)) (\\<lambda>f1. F (f1, f2'))", "have \"(\\<lambda>f1. sym (f2' \\<cdot>\\<^sub>A\\<^sub>2 f2, f1)) =\n                 vertical_composite.map A1 B (\\<lambda>f1. sym (f2, f1)) (\\<lambda>f1. sym (f2', f1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f1. local.sym (f2' \\<cdot>\\<^sub>A\\<^sub>2 f2, f1)) =\n    vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. local.sym (f2, f1)) (\\<lambda>f1. local.sym (f2', f1))", "using assms F'.preserves_comp_1"], ["proof (prove)\nusing this:\n  A2.seq f2' f2\n  A2.seq ?f1' ?f1.0 \\<Longrightarrow>\n  (\\<lambda>f2. local.sym (?f1' \\<cdot>\\<^sub>A\\<^sub>2 ?f1.0, f2)) =\n  vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. local.sym (?f1.0, f2)) (\\<lambda>f2. local.sym (?f1', f2))\n\ngoal (1 subgoal):\n 1. (\\<lambda>f1. local.sym (f2' \\<cdot>\\<^sub>A\\<^sub>2 f2, f1)) =\n    vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. local.sym (f2, f1)) (\\<lambda>f1. local.sym (f2', f1))", "by fastforce"], ["proof (state)\nthis:\n  (\\<lambda>f1. local.sym (f2' \\<cdot>\\<^sub>A\\<^sub>2 f2, f1)) =\n  vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f1. local.sym (f2, f1)) (\\<lambda>f1. local.sym (f2', f1))\n\ngoal (1 subgoal):\n 1. (\\<lambda>f1. F (f1, f2' \\<cdot>\\<^sub>A\\<^sub>2 f2)) =\n    vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, f2)) (\\<lambda>f1. F (f1, f2'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>f1. local.sym (f2' \\<cdot>\\<^sub>A\\<^sub>2 f2, f1)) =\n  vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f1. local.sym (f2, f1)) (\\<lambda>f1. local.sym (f2', f1))\n\ngoal (1 subgoal):\n 1. (\\<lambda>f1. F (f1, f2' \\<cdot>\\<^sub>A\\<^sub>2 f2)) =\n    vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, f2)) (\\<lambda>f1. F (f1, f2'))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>f1. F (f1, f2' \\<cdot>\\<^sub>A\\<^sub>2 f2)) =\n  vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f1. F (f1, f2)) (\\<lambda>f1. F (f1, f2'))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text\\<open>\n    A binary functor transformation is a natural transformation between binary functors.\n    We need a certain property of such transformations; namely, that if one or the\n    other argument is fixed to be an identity, the result is a natural transformation.\n\\<close>"], ["", "locale binary_functor_transformation =\n    A1: category A1 +\n    A2: category A2 +\n    B: category B +\n    A1xA2: product_category A1 A2 +\n    F: binary_functor A1 A2 B F +\n    G: binary_functor A1 A2 B G +\n    natural_transformation A1xA2.comp B F G \\<tau>\n  for A1 :: \"'a1 comp\"     (infixr \"\\<cdot>\\<^sub>A\\<^sub>1\" 55)\n  and A2 :: \"'a2 comp\"     (infixr \"\\<cdot>\\<^sub>A\\<^sub>2\" 55)\n  and B :: \"'b comp\"       (infixr \"\\<cdot>\\<^sub>B\" 55)\n  and F :: \"'a1 * 'a2 \\<Rightarrow> 'b\"\n  and G :: \"'a1 * 'a2 \\<Rightarrow> 'b\"\n  and \\<tau> :: \"'a1 * 'a2 \\<Rightarrow> 'b\"\n  begin"], ["", "notation A1xA2.comp    (infixr \"\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\" 55)"], ["", "notation A1xA2.in_hom  (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 _\\<guillemotright>\")"], ["", "lemma fixing_ide_gives_natural_transformation_1:\n    assumes \"A1.ide a1\"\n    shows \"natural_transformation A2 B (\\<lambda>f2. F (a1, f2)) (\\<lambda>f2. G (a1, f2)) (\\<lambda>f2. \\<tau> (a1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (a1, f2)) (\\<lambda>f2. G (a1, f2))\n     (\\<lambda>f2. \\<tau> (a1, f2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (a1, f2)) (\\<lambda>f2. G (a1, f2))\n     (\\<lambda>f2. \\<tau> (a1, f2))", "interpret Fa1: \"functor\" A2 B \\<open>\\<lambda>f2. F (a1, f2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (a1, f2))", "using assms F.fixing_ide_gives_functor_1"], ["proof (prove)\nusing this:\n  A1.ide a1\n  A1.ide ?a1.0 \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (?a1.0, f2))\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (a1, f2))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (a1, f2)) (\\<lambda>f2. G (a1, f2))\n     (\\<lambda>f2. \\<tau> (a1, f2))", "interpret Ga1: \"functor\" A2 B \\<open>\\<lambda>f2. G (a1, f2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. G (a1, f2))", "using assms \"G.fixing_ide_gives_functor_1\""], ["proof (prove)\nusing this:\n  A1.ide a1\n  A1.ide ?a1.0 \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. G (?a1.0, f2))\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. G (a1, f2))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (a1, f2)) (\\<lambda>f2. G (a1, f2))\n     (\\<lambda>f2. \\<tau> (a1, f2))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (a1, f2)) (\\<lambda>f2. G (a1, f2))\n     (\\<lambda>f2. \\<tau> (a1, f2))", "using assms is_extensional is_natural_1 is_natural_2"], ["proof (prove)\nusing this:\n  A1.ide a1\n  \\<not> A1xA2.arr ?f \\<Longrightarrow> \\<tau> ?f = B.null\n  A1xA2.arr ?f \\<Longrightarrow>\n  G ?f \\<cdot>\\<^sub>B \\<tau> (A1xA2.dom ?f) = \\<tau> ?f\n  A1xA2.arr ?f \\<Longrightarrow>\n  \\<tau> (A1xA2.cod ?f) \\<cdot>\\<^sub>B F ?f = \\<tau> ?f\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (a1, f2)) (\\<lambda>f2. G (a1, f2))\n     (\\<lambda>f2. \\<tau> (a1, f2))", "apply (unfold_locales, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<And>a b.\n                   A1.arr a \\<and> A2.arr b \\<Longrightarrow>\n                   G (a, b) \\<cdot>\\<^sub>B \\<tau> (A1.dom a, A2.dom b) =\n                   \\<tau> (a, b);\n        \\<And>a b.\n           A1.arr a \\<and> A2.arr b \\<Longrightarrow>\n           \\<tau> (A1.cod a, A2.cod b) \\<cdot>\\<^sub>B F (a, b) =\n           \\<tau> (a, b);\n        A2.arr f; A1.ide a1;\n        \\<And>a b.\n           A1.arr a \\<longrightarrow> \\<not> A2.arr b \\<Longrightarrow>\n           \\<tau> (a, b) = B.null\\<rbrakk>\n       \\<Longrightarrow> G (a1, f) \\<cdot>\\<^sub>B \\<tau> (a1, A2.dom f) =\n                         \\<tau> (a1, f)\n 2. \\<And>f.\n       \\<lbrakk>\\<And>a b.\n                   A1.arr a \\<and> A2.arr b \\<Longrightarrow>\n                   G (a, b) \\<cdot>\\<^sub>B \\<tau> (A1.dom a, A2.dom b) =\n                   \\<tau> (a, b);\n        \\<And>a b.\n           A1.arr a \\<and> A2.arr b \\<Longrightarrow>\n           \\<tau> (A1.cod a, A2.cod b) \\<cdot>\\<^sub>B F (a, b) =\n           \\<tau> (a, b);\n        A2.arr f; A1.ide a1;\n        \\<And>a b.\n           A1.arr a \\<longrightarrow> \\<not> A2.arr b \\<Longrightarrow>\n           \\<tau> (a, b) = B.null\\<rbrakk>\n       \\<Longrightarrow> \\<tau> (a1, A2.cod f) \\<cdot>\\<^sub>B F (a1, f) =\n                         \\<tau> (a1, f)", "apply (metis A1.ide_char)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>\\<And>a b.\n                   A1.arr a \\<and> A2.arr b \\<Longrightarrow>\n                   G (a, b) \\<cdot>\\<^sub>B \\<tau> (A1.dom a, A2.dom b) =\n                   \\<tau> (a, b);\n        \\<And>a b.\n           A1.arr a \\<and> A2.arr b \\<Longrightarrow>\n           \\<tau> (A1.cod a, A2.cod b) \\<cdot>\\<^sub>B F (a, b) =\n           \\<tau> (a, b);\n        A2.arr f; A1.ide a1;\n        \\<And>a b.\n           A1.arr a \\<longrightarrow> \\<not> A2.arr b \\<Longrightarrow>\n           \\<tau> (a, b) = B.null\\<rbrakk>\n       \\<Longrightarrow> \\<tau> (a1, A2.cod f) \\<cdot>\\<^sub>B F (a1, f) =\n                         \\<tau> (a1, f)", "by (metis A1.ide_char)"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (a1, f2)) (\\<lambda>f2. G (a1, f2))\n   (\\<lambda>f2. \\<tau> (a1, f2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fixing_ide_gives_natural_transformation_2:\n    assumes \"A2.ide a2\"\n    shows \"natural_transformation A1 B (\\<lambda>f1. F (f1, a2)) (\\<lambda>f1. G (f1, a2)) (\\<lambda>f1. \\<tau> (f1, a2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, a2)) (\\<lambda>f1. G (f1, a2))\n     (\\<lambda>f1. \\<tau> (f1, a2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, a2)) (\\<lambda>f1. G (f1, a2))\n     (\\<lambda>f1. \\<tau> (f1, a2))", "interpret Fa2: \"functor\" A1 B \\<open>\\<lambda>f1. F (f1, a2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, a2))", "using assms F.fixing_ide_gives_functor_2"], ["proof (prove)\nusing this:\n  A2.ide a2\n  A2.ide ?a2.0 \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f1. F (f1, ?a2.0))\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, a2))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, a2)) (\\<lambda>f1. G (f1, a2))\n     (\\<lambda>f1. \\<tau> (f1, a2))", "interpret Ga2: \"functor\" A1 B \\<open>\\<lambda>f1. G (f1, a2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. G (f1, a2))", "using assms \"G.fixing_ide_gives_functor_2\""], ["proof (prove)\nusing this:\n  A2.ide a2\n  A2.ide ?a2.0 \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f1. G (f1, ?a2.0))\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. G (f1, a2))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, a2)) (\\<lambda>f1. G (f1, a2))\n     (\\<lambda>f1. \\<tau> (f1, a2))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, a2)) (\\<lambda>f1. G (f1, a2))\n     (\\<lambda>f1. \\<tau> (f1, a2))", "using assms is_extensional is_natural_1 is_natural_2"], ["proof (prove)\nusing this:\n  A2.ide a2\n  \\<not> A1xA2.arr ?f \\<Longrightarrow> \\<tau> ?f = B.null\n  A1xA2.arr ?f \\<Longrightarrow>\n  G ?f \\<cdot>\\<^sub>B \\<tau> (A1xA2.dom ?f) = \\<tau> ?f\n  A1xA2.arr ?f \\<Longrightarrow>\n  \\<tau> (A1xA2.cod ?f) \\<cdot>\\<^sub>B F ?f = \\<tau> ?f\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f1. F (f1, a2)) (\\<lambda>f1. G (f1, a2))\n     (\\<lambda>f1. \\<tau> (f1, a2))", "apply (unfold_locales, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<And>a b.\n                   A1.arr a \\<and> A2.arr b \\<Longrightarrow>\n                   G (a, b) \\<cdot>\\<^sub>B \\<tau> (A1.dom a, A2.dom b) =\n                   \\<tau> (a, b);\n        \\<And>a b.\n           A1.arr a \\<and> A2.arr b \\<Longrightarrow>\n           \\<tau> (A1.cod a, A2.cod b) \\<cdot>\\<^sub>B F (a, b) =\n           \\<tau> (a, b);\n        A1.arr f; A2.ide a2;\n        \\<And>a b.\n           A1.arr a \\<longrightarrow> \\<not> A2.arr b \\<Longrightarrow>\n           \\<tau> (a, b) = B.null\\<rbrakk>\n       \\<Longrightarrow> G (f, a2) \\<cdot>\\<^sub>B \\<tau> (A1.dom f, a2) =\n                         \\<tau> (f, a2)\n 2. \\<And>f.\n       \\<lbrakk>\\<And>a b.\n                   A1.arr a \\<and> A2.arr b \\<Longrightarrow>\n                   G (a, b) \\<cdot>\\<^sub>B \\<tau> (A1.dom a, A2.dom b) =\n                   \\<tau> (a, b);\n        \\<And>a b.\n           A1.arr a \\<and> A2.arr b \\<Longrightarrow>\n           \\<tau> (A1.cod a, A2.cod b) \\<cdot>\\<^sub>B F (a, b) =\n           \\<tau> (a, b);\n        A1.arr f; A2.ide a2;\n        \\<And>a b.\n           A1.arr a \\<longrightarrow> \\<not> A2.arr b \\<Longrightarrow>\n           \\<tau> (a, b) = B.null\\<rbrakk>\n       \\<Longrightarrow> \\<tau> (A1.cod f, a2) \\<cdot>\\<^sub>B F (f, a2) =\n                         \\<tau> (f, a2)", "apply (metis A2.ide_char)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>\\<And>a b.\n                   A1.arr a \\<and> A2.arr b \\<Longrightarrow>\n                   G (a, b) \\<cdot>\\<^sub>B \\<tau> (A1.dom a, A2.dom b) =\n                   \\<tau> (a, b);\n        \\<And>a b.\n           A1.arr a \\<and> A2.arr b \\<Longrightarrow>\n           \\<tau> (A1.cod a, A2.cod b) \\<cdot>\\<^sub>B F (a, b) =\n           \\<tau> (a, b);\n        A1.arr f; A2.ide a2;\n        \\<And>a b.\n           A1.arr a \\<longrightarrow> \\<not> A2.arr b \\<Longrightarrow>\n           \\<tau> (a, b) = B.null\\<rbrakk>\n       \\<Longrightarrow> \\<tau> (A1.cod f, a2) \\<cdot>\\<^sub>B F (f, a2) =\n                         \\<tau> (f, a2)", "by (metis A2.ide_char)"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f1. F (f1, a2)) (\\<lambda>f1. G (f1, a2))\n   (\\<lambda>f1. \\<tau> (f1, a2))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}