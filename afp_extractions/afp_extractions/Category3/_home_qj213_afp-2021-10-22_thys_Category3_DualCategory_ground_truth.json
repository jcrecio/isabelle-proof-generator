{"file_name": "/home/qj213/afp-2021-10-22/thys/Category3/DualCategory.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Category3", "problem_names": ["lemma comp_char [simp]:\n    shows \"g \\<cdot>\\<^sup>o\\<^sup>p f = f \\<cdot> g\"", "lemma null_char [simp]:\n    shows \"null = C.null\"", "lemma ide_char [simp]:\n    shows \"ide a \\<longleftrightarrow> C.ide a\"", "lemma domains_char:\n    shows \"domains f = C.codomains f\"", "lemma codomains_char:\n    shows \"codomains f = C.domains f\"", "lemma is_category:\n    shows \"category comp\"", "lemma dom_char [simp]:\n    shows \"dom f = C.cod f\"", "lemma cod_char [simp]:\n    shows \"cod f = C.dom f\"", "lemma arr_char [simp]:\n    shows \"arr f \\<longleftrightarrow> C.arr f\"", "lemma hom_char [simp]:\n    shows \"in_hom f b a \\<longleftrightarrow> C.in_hom f a b\"", "lemma seq_char [simp]:\n    shows \"seq g f = C.seq f g\""], "translations": [["", "lemma comp_char [simp]:\n    shows \"g \\<cdot>\\<^sup>o\\<^sup>p f = f \\<cdot> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<cdot>\\<^sup>o\\<^sup>p f = f \\<cdot> g", "using comp_def"], ["proof (prove)\nusing this:\n  ?g \\<cdot>\\<^sup>o\\<^sup>p ?f \\<equiv> ?f \\<cdot> ?g\n\ngoal (1 subgoal):\n 1. g \\<cdot>\\<^sup>o\\<^sup>p f = f \\<cdot> g", "by auto"], ["", "interpretation partial_magma comp"], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_magma (\\<cdot>\\<^sup>o\\<^sup>p)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!n.\n       \\<forall>f.\n          n \\<cdot>\\<^sup>o\\<^sup>p f = n \\<and>\n          f \\<cdot>\\<^sup>o\\<^sup>p n = n", "using comp_def C.ex_un_null"], ["proof (prove)\nusing this:\n  ?g \\<cdot>\\<^sup>o\\<^sup>p ?f \\<equiv> ?f \\<cdot> ?g\n  \\<exists>!n. \\<forall>f. n \\<cdot> f = n \\<and> f \\<cdot> n = n\n\ngoal (1 subgoal):\n 1. \\<exists>!n.\n       \\<forall>f.\n          n \\<cdot>\\<^sup>o\\<^sup>p f = n \\<and>\n          f \\<cdot>\\<^sup>o\\<^sup>p n = n", "by metis"], ["", "notation in_hom (\"\\<guillemotleft>_ : _ \\<leftarrow> _\\<guillemotright>\")"], ["", "lemma null_char [simp]:\n    shows \"null = C.null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. null = C.null", "by (metis C.comp_null(2) comp_null(2) comp_def)"], ["", "lemma ide_char [simp]:\n    shows \"ide a \\<longleftrightarrow> C.ide a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide a = C.ide a", "unfolding ide_def C.ide_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<cdot>\\<^sup>o\\<^sup>p a \\<noteq> null \\<and>\n     (\\<forall>f.\n         (f \\<cdot>\\<^sup>o\\<^sup>p a \\<noteq> null \\<longrightarrow>\n          f \\<cdot>\\<^sup>o\\<^sup>p a = f) \\<and>\n         (a \\<cdot>\\<^sup>o\\<^sup>p f \\<noteq> null \\<longrightarrow>\n          a \\<cdot>\\<^sup>o\\<^sup>p f = f))) =\n    (a \\<cdot> a \\<noteq> C.null \\<and>\n     (\\<forall>f.\n         (f \\<cdot> a \\<noteq> C.null \\<longrightarrow>\n          f \\<cdot> a = f) \\<and>\n         (a \\<cdot> f \\<noteq> C.null \\<longrightarrow> a \\<cdot> f = f)))", "by auto"], ["", "lemma domains_char:\n    shows \"domains f = C.codomains f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domains f = C.codomains f", "using C.codomains_def domains_def ide_char"], ["proof (prove)\nusing this:\n  C.codomains ?f \\<equiv> {b. C.ide b \\<and> b \\<cdot> ?f \\<noteq> C.null}\n  domains ?f \\<equiv>\n  {a. ide a \\<and> ?f \\<cdot>\\<^sup>o\\<^sup>p a \\<noteq> null}\n  ide ?a = C.ide ?a\n\ngoal (1 subgoal):\n 1. domains f = C.codomains f", "by auto"], ["", "lemma codomains_char:\n    shows \"codomains f = C.domains f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. codomains f = C.domains f", "using C.domains_def codomains_def ide_char"], ["proof (prove)\nusing this:\n  C.domains ?f \\<equiv> {a. C.ide a \\<and> ?f \\<cdot> a \\<noteq> C.null}\n  codomains ?f \\<equiv>\n  {b. ide b \\<and> b \\<cdot>\\<^sup>o\\<^sup>p ?f \\<noteq> null}\n  ide ?a = C.ide ?a\n\ngoal (1 subgoal):\n 1. codomains f = C.domains f", "by auto"], ["", "interpretation category comp"], ["proof (prove)\ngoal (1 subgoal):\n 1. category (\\<cdot>\\<^sup>o\\<^sup>p)", "using C.has_domain_iff_arr C.has_codomain_iff_arr domains_char codomains_char null_char\n            comp_def C.match_4 C.ext arr_def C.comp_assoc"], ["proof (prove)\nusing this:\n  (C.domains ?f \\<noteq> {}) = C.arr ?f\n  (C.codomains ?f \\<noteq> {}) = C.arr ?f\n  domains ?f = C.codomains ?f\n  codomains ?f = C.domains ?f\n  null = C.null\n  ?g \\<cdot>\\<^sup>o\\<^sup>p ?f \\<equiv> ?f \\<cdot> ?g\n  \\<lbrakk>C.seq ?g ?f; C.seq ?h ?g\\<rbrakk>\n  \\<Longrightarrow> C.seq ?h (?g \\<cdot> ?f)\n  ?g \\<cdot> ?f \\<noteq> C.null \\<Longrightarrow> C.seq ?g ?f\n  arr ?f \\<equiv> domains ?f \\<noteq> {} \\<or> codomains ?f \\<noteq> {}\n  (?h \\<cdot> ?g) \\<cdot> ?f = ?h \\<cdot> ?g \\<cdot> ?f\n\ngoal (1 subgoal):\n 1. category (\\<cdot>\\<^sup>o\\<^sup>p)", "apply (unfold_locales, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h g f.\n       \\<lbrakk>\\<And>g f. f \\<cdot> g \\<equiv> f \\<cdot> g;\n        \\<And>f. C.arr f \\<equiv> C.arr f; C.seq g h; C.seq f (g \\<cdot> h);\n        \\<And>f. (C.domains f \\<noteq> {}) = C.arr f;\n        \\<And>f. (C.codomains f \\<noteq> {}) = C.arr f;\n        \\<And>f. domains f = C.codomains f;\n        \\<And>f. codomains f = C.domains f;\n        \\<And>g f. f \\<cdot> g \\<equiv> f \\<cdot> g;\n        \\<And>g f h.\n           \\<lbrakk>C.seq g f; C.seq h g\\<rbrakk>\n           \\<Longrightarrow> C.seq h (g \\<cdot> f);\n        \\<And>g f. g \\<cdot> f \\<noteq> C.null \\<Longrightarrow> C.seq g f;\n        \\<And>f. arr f \\<equiv> C.arr f;\n        \\<And>h g f.\n           (h \\<cdot> g) \\<cdot> f = h \\<cdot> g \\<cdot> f\\<rbrakk>\n       \\<Longrightarrow> C.seq f g", "using C.match_2"], ["proof (prove)\nusing this:\n  \\<lbrakk>C.seq ?h (?g \\<cdot> ?f); C.seq ?g ?f\\<rbrakk>\n  \\<Longrightarrow> C.seq ?h ?g\n\ngoal (1 subgoal):\n 1. \\<And>h g f.\n       \\<lbrakk>\\<And>g f. f \\<cdot> g \\<equiv> f \\<cdot> g;\n        \\<And>f. C.arr f \\<equiv> C.arr f; C.seq g h; C.seq f (g \\<cdot> h);\n        \\<And>f. (C.domains f \\<noteq> {}) = C.arr f;\n        \\<And>f. (C.codomains f \\<noteq> {}) = C.arr f;\n        \\<And>f. domains f = C.codomains f;\n        \\<And>f. codomains f = C.domains f;\n        \\<And>g f. f \\<cdot> g \\<equiv> f \\<cdot> g;\n        \\<And>g f h.\n           \\<lbrakk>C.seq g f; C.seq h g\\<rbrakk>\n           \\<Longrightarrow> C.seq h (g \\<cdot> f);\n        \\<And>g f. g \\<cdot> f \\<noteq> C.null \\<Longrightarrow> C.seq g f;\n        \\<And>f. arr f \\<equiv> C.arr f;\n        \\<And>h g f.\n           (h \\<cdot> g) \\<cdot> f = h \\<cdot> g \\<cdot> f\\<rbrakk>\n       \\<Longrightarrow> C.seq f g", "by metis"], ["", "lemma is_category:\n    shows \"category comp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. category (\\<cdot>\\<^sup>o\\<^sup>p)", ".."], ["", "end"], ["", "sublocale dual_category \\<subseteq> category comp"], ["proof (prove)\ngoal (1 subgoal):\n 1. category (\\<cdot>\\<^sup>o\\<^sup>p)", "using is_category"], ["proof (prove)\nusing this:\n  category (\\<cdot>\\<^sup>o\\<^sup>p)\n\ngoal (1 subgoal):\n 1. category (\\<cdot>\\<^sup>o\\<^sup>p)", "by auto"], ["", "context dual_category\n  begin"], ["", "lemma dom_char [simp]:\n    shows \"dom f = C.cod f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.dom f = C.cod f", "by (simp add: C.cod_def dom_def domains_char)"], ["", "lemma cod_char [simp]:\n    shows \"cod f = C.dom f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod f = C.dom f", "by (simp add: C.dom_def cod_def codomains_char)"], ["", "lemma arr_char [simp]:\n    shows \"arr f \\<longleftrightarrow> C.arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f = C.arr f", "using C.has_codomain_iff_arr has_domain_iff_arr domains_char"], ["proof (prove)\nusing this:\n  (C.codomains ?f \\<noteq> {}) = C.arr ?f\n  (domains ?f \\<noteq> {}) = arr ?f\n  domains ?f = C.codomains ?f\n\ngoal (1 subgoal):\n 1. arr f = C.arr f", "by auto"], ["", "lemma hom_char [simp]:\n    shows \"in_hom f b a \\<longleftrightarrow> C.in_hom f a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : b \\<leftarrow> a\\<guillemotright> =\n    \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright>", "by force"], ["", "lemma seq_char [simp]:\n    shows \"seq g f = C.seq f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq g f = C.seq f g", "by simp"], ["", "end"], ["", "end"]]}