{"file_name": "/home/qj213/afp-2021-10-22/thys/Category3/NaturalTransformation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Category3", "problem_names": ["lemma naturality:\n    assumes \"A.arr f\"\n    shows \"\\<tau> (A.cod f) \\<cdot>\\<^sub>B F f = G f \\<cdot>\\<^sub>B \\<tau> (A.dom f)\"", "lemma preserves_reflects_arr [iff]:\n    shows \"B.arr (\\<tau> f) \\<longleftrightarrow> A.arr f\"", "lemma preserves_hom [intro]:\n    assumes \"\\<guillemotleft>f : a \\<rightarrow>\\<^sub>A b\\<guillemotright>\"\n    shows \"\\<guillemotleft>\\<tau> f : F a \\<rightarrow>\\<^sub>B G b\\<guillemotright>\"", "lemma preserves_comp_1:\n    assumes \"A.seq f' f\"\n    shows \"\\<tau> (f' \\<cdot>\\<^sub>A f) = G f' \\<cdot>\\<^sub>B \\<tau> f\"", "lemma preserves_comp_2:\n    assumes \"A.seq f' f\"\n    shows \"\\<tau> (f' \\<cdot>\\<^sub>A f) = \\<tau> f' \\<cdot>\\<^sub>B F f\"", "lemma functor_implies_equals_dom:\n    assumes \"functor A B \\<tau>\"\n    shows \"F = \\<tau>\"", "lemma functor_implies_equals_cod:\n    assumes \"functor A B \\<tau>\"\n    shows \"G = \\<tau>\"", "lemma eqI:\n  assumes \"natural_transformation A B F G \\<sigma>\" and \"natural_transformation A B F G \\<sigma>'\"\n  and \"\\<And>a. partial_magma.ide A a \\<Longrightarrow> \\<sigma> a = \\<sigma>' a\"\n  shows \"\\<sigma> = \\<sigma>'\"", "lemma map_simp_ide [simp]:\n    assumes \"A.ide a\"\n    shows \"map a = t a\"", "lemma is_natural_transformation:\n    shows \"natural_transformation A B F G map\"", "lemma transformation_by_components_idem [simp]:\n  assumes \"natural_transformation A B F G \\<tau>\"\n  shows \"transformation_by_components.map A B F \\<tau> = \\<tau>\"", "lemma functor_is_transformation [simp]:\n  assumes \"functor A B F\"\n  shows \"natural_transformation A B F F F\"", "lemma map_simp [simp]:\n    assumes \"A.arr f\"\n    shows \"map f = g\"", "lemma is_natural_transformation:\n    shows \"natural_transformation A B F.map G.map map\"", "lemma is_functor_if_value_is_ide:\n    assumes \"B.ide g\"\n    shows \"functor A B map\"", "lemma equals_dom_if_value_is_ide:\n    assumes \"B.ide g\"\n    shows \"map = F.map\"", "lemma equals_cod_if_value_is_ide:\n    assumes \"B.ide g\"\n    shows \"map = G.map\"", "lemma map_seq:\n    assumes \"A.arr f\"\n    shows \"B.seq (\\<tau> (A.cod f)) (\\<sigma> f)\"", "lemma map_simp_ide:\n    assumes \"A.ide a\"\n    shows \"map a = \\<tau> a \\<cdot>\\<^sub>B \\<sigma> a\"", "lemma map_simp_1:\n    assumes \"A.arr f\"\n    shows \"map f = \\<tau> (A.cod f) \\<cdot>\\<^sub>B \\<sigma> f\"", "lemma map_simp_2:\n    assumes \"A.arr f\"\n    shows \"map f = \\<tau> f \\<cdot>\\<^sub>B \\<sigma> (A.dom f)\"", "lemma is_natural_transformation:\n    shows \"natural_transformation A B F H map\"", "lemma vcomp_ide_dom [simp]:\n  assumes \"natural_transformation A B F G \\<tau>\"\n  shows \"vertical_composite.map A B F \\<tau> = \\<tau>\"", "lemma vcomp_ide_cod [simp]:\n  assumes \"natural_transformation A B F G \\<tau>\"\n  shows \"vertical_composite.map A B \\<tau> G = \\<tau>\"", "lemma vcomp_assoc [simp]:\n  assumes \"natural_transformation A B F G \\<rho>\"\n  and \"natural_transformation A B G H \\<sigma>\"\n  and \"natural_transformation A B H K \\<tau>\"\n  shows \"vertical_composite.map A B (vertical_composite.map A B \\<rho> \\<sigma>) \\<tau>\n            = vertical_composite.map A B \\<rho> (vertical_composite.map A B \\<sigma> \\<tau>)\"", "lemma inv_naturality:\n    assumes \"A.arr f\"\n    shows \"F f \\<cdot>\\<^sub>B B.inv (\\<tau> (A.dom f)) = B.inv (\\<tau> (A.cod f)) \\<cdot>\\<^sub>B G f\"", "lemma preserves_iso:\n    assumes \"A.iso f\"\n    shows \"B.iso (\\<tau> f)\"", "lemma naturally_isomorphic_respects_full_functor:\n  assumes \"naturally_isomorphic A B F G\"\n  and \"full_functor A B F\"\n  shows \"full_functor A B G\"", "lemma naturally_isomorphic_respects_faithful_functor:\n  assumes \"naturally_isomorphic A B F G\"\n  and \"faithful_functor A B F\"\n  shows \"faithful_functor A B G\"", "lemma map_ide_simp [simp]:\n    assumes \"A.ide a\"\n    shows \"map a = B.inv (\\<tau> a)\"", "lemma map_simp:\n    assumes \"A.arr f\"\n    shows \"map f = B.inv (\\<tau> (A.cod f)) \\<cdot>\\<^sub>B G f\"", "lemma is_natural_transformation:\n    shows \"natural_transformation A B G F map\"", "lemma inverts_components:\n    assumes \"A.ide a\"\n    shows \"B.inverse_arrows (\\<tau> a) (map a)\"", "lemma inverse_inverse_transformation [simp]:\n  assumes \"natural_isomorphism A B F G \\<tau>\"\n  shows \"inverse_transformation.map A B F (inverse_transformation.map A B G \\<tau>) = \\<tau>\"", "lemma inverse_transformations_sym:\n  assumes \"inverse_transformations A B F G \\<sigma> \\<sigma>'\"\n  shows \"inverse_transformations A B G F \\<sigma>' \\<sigma>\"", "lemma inverse_transformations_inverse:\n  assumes \"inverse_transformations A B F G \\<sigma> \\<sigma>'\"\n  shows \"vertical_composite.map A B \\<sigma> \\<sigma>' = F\"\n  and \"vertical_composite.map A B \\<sigma>' \\<sigma> = G\"", "lemma inverse_transformations_compose:\n  assumes \"inverse_transformations A B F G \\<sigma> \\<sigma>'\"\n  and \"inverse_transformations A B G H \\<tau> \\<tau>'\"\n  shows \"inverse_transformations A B F H\n           (vertical_composite.map A B \\<sigma> \\<tau>) (vertical_composite.map A B \\<tau>' \\<sigma>')\"", "lemma vertical_composite_iso_inverse [simp]:\n  assumes \"natural_isomorphism A B F G \\<tau>\"\n  shows \"vertical_composite.map A B \\<tau> (inverse_transformation.map A B G \\<tau>) = F\"", "lemma vertical_composite_inverse_iso [simp]:\n  assumes \"natural_isomorphism A B F G \\<tau>\"\n  shows \"vertical_composite.map A B (inverse_transformation.map A B G \\<tau>) \\<tau> = G\"", "lemma natural_isomorphisms_compose:\n  assumes \"natural_isomorphism A B F G \\<sigma>\" and \"natural_isomorphism A B G H \\<tau>\"\n  shows \"natural_isomorphism A B F H (vertical_composite.map A B \\<sigma> \\<tau>)\"", "lemma naturally_isomorphic_reflexive:\n  assumes \"functor A B F\"\n  shows \"naturally_isomorphic A B F F\"", "lemma naturally_isomorphic_symmetric:\n  assumes \"naturally_isomorphic A B F G\"\n  shows \"naturally_isomorphic A B G F\"", "lemma naturally_isomorphic_transitive [trans]:\n  assumes \"naturally_isomorphic A B F G\"\n  and \"naturally_isomorphic A B G H\"\n  shows \"naturally_isomorphic A B F H\"", "lemma horizontal_composite:\n  assumes \"natural_transformation A B F G \\<sigma>\"\n  and \"natural_transformation B C H K \\<tau>\"\n  shows \"natural_transformation A C (H o F) (K o G) (\\<tau> o \\<sigma>)\"", "lemma hcomp_ide_dom [simp]:\n  assumes \"natural_transformation A B F G \\<tau>\"\n  shows \"\\<tau> o (identity_functor.map A) = \\<tau>\"", "lemma hcomp_ide_cod [simp]:\n  assumes \"natural_transformation A B F G \\<tau>\"\n  shows \"(identity_functor.map B) o \\<tau> = \\<tau>\"", "lemma whisker_right:\n  assumes \"functor A B F\"\n  and \"natural_transformation B C H K \\<tau>\" and \"natural_transformation B C K L \\<tau>'\"\n  shows \"(vertical_composite.map B C \\<tau> \\<tau>') o F = vertical_composite.map A C (\\<tau> o F) (\\<tau>' o F)\"", "lemma whisker_left:\n  assumes \"functor B C K\"\n  and \"natural_transformation A B F G \\<tau>\" and \"natural_transformation A B G H \\<tau>'\"\n  shows \"K o (vertical_composite.map A B \\<tau> \\<tau>') = vertical_composite.map A C (K o \\<tau>) (K o \\<tau>')\"", "lemma interchange:\n  assumes \"natural_transformation B C F G \\<tau>\" and \"natural_transformation B C G H \\<nu>\"\n  and \"natural_transformation C D K L \\<sigma>\" and \"natural_transformation C D L M \\<mu>\"\n  shows \"vertical_composite.map C D \\<sigma> \\<mu> \\<circ> vertical_composite.map B C \\<tau> \\<nu> =\n         vertical_composite.map B D (\\<sigma> \\<circ> \\<tau>) (\\<mu> \\<circ> \\<nu>)\"", "lemma interchange_spc:\n  assumes \"natural_transformation B C F G \\<sigma>\"\n  and \"natural_transformation C D H K \\<tau>\"\n  shows \"\\<tau> \\<circ> \\<sigma> = vertical_composite.map B D (H o \\<sigma>) (\\<tau> o G)\"\n  and \"\\<tau> \\<circ> \\<sigma> = vertical_composite.map B D (\\<tau> o F) (K o \\<sigma>)\""], "translations": [["", "lemma naturality:\n    assumes \"A.arr f\"\n    shows \"\\<tau> (A.cod f) \\<cdot>\\<^sub>B F f = G f \\<cdot>\\<^sub>B \\<tau> (A.dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> (A.cod f) \\<cdot>\\<^sub>B F f =\n    G f \\<cdot>\\<^sub>B \\<tau> (A.dom f)", "using assms is_natural_1 is_natural_2"], ["proof (prove)\nusing this:\n  A.arr f\n  A.arr ?f \\<Longrightarrow>\n  G ?f \\<cdot>\\<^sub>B \\<tau> (A.dom ?f) = \\<tau> ?f\n  A.arr ?f \\<Longrightarrow>\n  \\<tau> (A.cod ?f) \\<cdot>\\<^sub>B F ?f = \\<tau> ?f\n\ngoal (1 subgoal):\n 1. \\<tau> (A.cod f) \\<cdot>\\<^sub>B F f =\n    G f \\<cdot>\\<^sub>B \\<tau> (A.dom f)", "by simp"], ["", "text\\<open>\n      The following fact for natural transformations provides us with the same advantages\n      as the corresponding fact for functors.\n\\<close>"], ["", "lemma preserves_reflects_arr [iff]:\n    shows \"B.arr (\\<tau> f) \\<longleftrightarrow> A.arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B.arr (\\<tau> f) = A.arr f", "using is_extensional A.arr_cod_iff_arr B.arr_cod_iff_arr preserves_cod"], ["proof (prove)\nusing this:\n  \\<not> A.arr ?f \\<Longrightarrow> \\<tau> ?f = B.null\n  A.arr (A.cod ?f) = A.arr ?f\n  B.arr (B.cod ?f) = B.arr ?f\n  A.arr ?f \\<Longrightarrow> B.cod (\\<tau> ?f) = G (A.cod ?f)\n\ngoal (1 subgoal):\n 1. B.arr (\\<tau> f) = A.arr f", "by force"], ["", "lemma preserves_hom [intro]:\n    assumes \"\\<guillemotleft>f : a \\<rightarrow>\\<^sub>A b\\<guillemotright>\"\n    shows \"\\<guillemotleft>\\<tau> f : F a \\<rightarrow>\\<^sub>B G b\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<tau>\n                     f : F a \\<rightarrow>\\<^sub>B G b\\<guillemotright>", "using assms"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : a \\<rightarrow>\\<^sub>A b\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<tau>\n                     f : F a \\<rightarrow>\\<^sub>B G b\\<guillemotright>", "by (metis A.in_homE B.arr_cod_iff_arr B.in_homI G.preserves_arr G.preserves_cod\n          preserves_cod preserves_dom)"], ["", "lemma preserves_comp_1:\n    assumes \"A.seq f' f\"\n    shows \"\\<tau> (f' \\<cdot>\\<^sub>A f) = G f' \\<cdot>\\<^sub>B \\<tau> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> (f' \\<cdot>\\<^sub>A f) = G f' \\<cdot>\\<^sub>B \\<tau> f", "using assms"], ["proof (prove)\nusing this:\n  A.seq f' f\n\ngoal (1 subgoal):\n 1. \\<tau> (f' \\<cdot>\\<^sub>A f) = G f' \\<cdot>\\<^sub>B \\<tau> f", "by (metis A.seqE A.dom_comp B.comp_assoc G.preserves_comp is_natural_1)"], ["", "lemma preserves_comp_2:\n    assumes \"A.seq f' f\"\n    shows \"\\<tau> (f' \\<cdot>\\<^sub>A f) = \\<tau> f' \\<cdot>\\<^sub>B F f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> (f' \\<cdot>\\<^sub>A f) = \\<tau> f' \\<cdot>\\<^sub>B F f", "using assms"], ["proof (prove)\nusing this:\n  A.seq f' f\n\ngoal (1 subgoal):\n 1. \\<tau> (f' \\<cdot>\\<^sub>A f) = \\<tau> f' \\<cdot>\\<^sub>B F f", "by (metis A.arr_cod_iff_arr A.cod_comp B.comp_assoc F.preserves_comp is_natural_2)"], ["", "text\\<open>\n      A natural transformation that also happens to be a functor is equal to\n      its own domain and codomain.\n\\<close>"], ["", "lemma functor_implies_equals_dom:\n    assumes \"functor A B \\<tau>\"\n    shows \"F = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F = \\<tau>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. F x = \\<tau> x", "interpret \\<tau>: \"functor\" A B \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) \\<tau>", "using assms"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) \\<tau>\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. F x = \\<tau> x", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. F x = \\<tau> x", "show \"F f = \\<tau> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F f = \\<tau> f", "using assms"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) \\<tau>\n\ngoal (1 subgoal):\n 1. F f = \\<tau> f", "by (metis A.dom_cod B.comp_cod_arr F.is_extensional F.preserves_arr F.preserves_cod\n            \\<tau>.preserves_dom is_extensional is_natural_2 preserves_dom)"], ["proof (state)\nthis:\n  F f = \\<tau> f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma functor_implies_equals_cod:\n    assumes \"functor A B \\<tau>\"\n    shows \"G = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G = \\<tau>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. G x = \\<tau> x", "interpret \\<tau>: \"functor\" A B \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) \\<tau>", "using assms"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) \\<tau>\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. G x = \\<tau> x", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. G x = \\<tau> x", "show \"G f = \\<tau> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G f = \\<tau> f", "using assms"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) \\<tau>\n\ngoal (1 subgoal):\n 1. G f = \\<tau> f", "by (metis A.cod_dom B.comp_arr_dom F.preserves_arr G.is_extensional G.preserves_arr\n            G.preserves_dom B.cod_dom functor_implies_equals_dom is_extensional\n            is_natural_1 preserves_cod preserves_dom)"], ["proof (state)\nthis:\n  G f = \\<tau> f\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "section \"Components of a Natural Transformation\""], ["", "text\\<open>\n    The values taken by a natural transformation on identities are the \\emph{components}\n    of the transformation.  We have the following basic technique for proving two natural\n    transformations equal: show that they have the same components.\n\\<close>"], ["", "lemma eqI:\n  assumes \"natural_transformation A B F G \\<sigma>\" and \"natural_transformation A B F G \\<sigma>'\"\n  and \"\\<And>a. partial_magma.ide A a \\<Longrightarrow> \\<sigma> a = \\<sigma>' a\"\n  shows \"\\<sigma> = \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> = \\<sigma>'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma> = \\<sigma>'", "interpret A: category A"], ["proof (prove)\ngoal (1 subgoal):\n 1. category A", "using assms(1) natural_transformation_def"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<sigma>\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<equiv>\n  (category ?A \\<and> category ?B) \\<and>\n  functor ?A ?B ?F \\<and>\n  functor ?A ?B ?G \\<and> natural_transformation_axioms ?A ?B ?F ?G ?\\<tau>\n\ngoal (1 subgoal):\n 1. category A", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma> = \\<sigma>'", "interpret \\<sigma>: natural_transformation A B F G \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<sigma>", "using assms(1)"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<sigma>\n\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<sigma>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma> = \\<sigma>'", "interpret \\<sigma>': natural_transformation A B F G \\<sigma>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<sigma>'", "using assms(2)"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<sigma>'\n\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<sigma>'", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma> = \\<sigma>'", "have \"\\<And>f. \\<sigma> f = \\<sigma>' f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. \\<sigma> f = \\<sigma>' f", "using assms(3) \\<sigma>.is_natural_2 \\<sigma>'.is_natural_2 \\<sigma>.is_extensional \\<sigma>'.is_extensional A.ide_cod"], ["proof (prove)\nusing this:\n  A.ide ?a \\<Longrightarrow> \\<sigma> ?a = \\<sigma>' ?a\n  A.arr ?f \\<Longrightarrow> B (\\<sigma> (A.cod ?f)) (F ?f) = \\<sigma> ?f\n  A.arr ?f \\<Longrightarrow> B (\\<sigma>' (A.cod ?f)) (F ?f) = \\<sigma>' ?f\n  \\<not> A.arr ?f \\<Longrightarrow> \\<sigma> ?f = \\<sigma>.B.null\n  \\<not> A.arr ?f \\<Longrightarrow> \\<sigma>' ?f = \\<sigma>.B.null\n  A.arr ?f \\<Longrightarrow> A.ide (A.cod ?f)\n\ngoal (1 subgoal):\n 1. \\<And>f. \\<sigma> f = \\<sigma>' f", "by metis"], ["proof (state)\nthis:\n  \\<sigma> ?f = \\<sigma>' ?f\n\ngoal (1 subgoal):\n 1. \\<sigma> = \\<sigma>'", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<sigma> ?f = \\<sigma>' ?f\n\ngoal (1 subgoal):\n 1. \\<sigma> = \\<sigma>'", "by auto"], ["proof (state)\nthis:\n  \\<sigma> = \\<sigma>'\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n    As equality of natural transformations is determined by equality of components,\n    a natural transformation may be uniquely defined by specifying its components.\n    The extension to all arrows is given by @{prop is_natural_1} or equivalently\n    by @{prop is_natural_2}.\n\\<close>"], ["", "locale transformation_by_components =\n    A: category A +\n    B: category B + \n    F: \"functor\" A B F +\n    G: \"functor\" A B G\n  for A :: \"'a comp\"      (infixr \"\\<cdot>\\<^sub>A\" 55)\n  and B :: \"'b comp\"      (infixr \"\\<cdot>\\<^sub>B\" 55)\n  and F :: \"'a \\<Rightarrow> 'b\"\n  and G :: \"'a \\<Rightarrow> 'b\"\n  and t :: \"'a \\<Rightarrow> 'b\" +\n  assumes maps_ide_in_hom [intro]: \"A.ide a \\<Longrightarrow> \\<guillemotleft>t a : F a \\<rightarrow>\\<^sub>B G a\\<guillemotright>\"\n  and is_natural: \"A.arr f \\<Longrightarrow> t (A.cod f) \\<cdot>\\<^sub>B F f = G f \\<cdot>\\<^sub>B t (A.dom f)\"\n  begin"], ["", "definition map\n    where \"map f = (if A.arr f then t (A.cod f) \\<cdot>\\<^sub>B F f else B.null)\""], ["", "lemma map_simp_ide [simp]:\n    assumes \"A.ide a\"\n    shows \"map a = t a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.map a = t a", "using assms map_def B.comp_arr_dom [of \"t a\"] maps_ide_in_hom"], ["proof (prove)\nusing this:\n  A.ide a\n  local.map ?f =\n  (if A.arr ?f then t (A.cod ?f) \\<cdot>\\<^sub>B F ?f else B.null)\n  \\<lbrakk>B.arr (t a); B.dom (t a) = ?a\\<rbrakk>\n  \\<Longrightarrow> t a \\<cdot>\\<^sub>B ?a = t a\n  A.ide ?a \\<Longrightarrow>\n  \\<guillemotleft>t ?a : F ?a \\<rightarrow>\\<^sub>B G ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. local.map a = t a", "by fastforce"], ["", "lemma is_natural_transformation:\n    shows \"natural_transformation A B F G map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F G local.map", "using map_def is_natural"], ["proof (prove)\nusing this:\n  local.map ?f =\n  (if A.arr ?f then t (A.cod ?f) \\<cdot>\\<^sub>B F ?f else B.null)\n  A.arr ?f \\<Longrightarrow>\n  t (A.cod ?f) \\<cdot>\\<^sub>B F ?f = G ?f \\<cdot>\\<^sub>B t (A.dom ?f)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F G local.map", "apply (unfold_locales, simp_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A.arr f;\n        \\<And>f.\n           local.map f =\n           (if A.arr f then t (A.cod f) \\<cdot>\\<^sub>B F f else B.null);\n        \\<And>f.\n           A.arr f \\<Longrightarrow>\n           t (A.cod f) \\<cdot>\\<^sub>B F f =\n           G f \\<cdot>\\<^sub>B t (A.dom f)\\<rbrakk>\n       \\<Longrightarrow> B.dom (G f \\<cdot>\\<^sub>B t (A.dom f)) =\n                         F (A.dom f)\n 2. \\<And>f.\n       \\<lbrakk>A.arr f;\n        \\<And>f.\n           local.map f =\n           (if A.arr f then t (A.cod f) \\<cdot>\\<^sub>B F f else B.null);\n        \\<And>f.\n           A.arr f \\<Longrightarrow>\n           t (A.cod f) \\<cdot>\\<^sub>B F f =\n           G f \\<cdot>\\<^sub>B t (A.dom f)\\<rbrakk>\n       \\<Longrightarrow> B.cod (G f \\<cdot>\\<^sub>B t (A.dom f)) =\n                         G (A.cod f)\n 3. \\<And>f.\n       \\<lbrakk>A.arr f;\n        \\<And>f.\n           local.map f =\n           (if A.arr f then t (A.cod f) \\<cdot>\\<^sub>B F f else B.null);\n        \\<And>f.\n           A.arr f \\<Longrightarrow>\n           t (A.cod f) \\<cdot>\\<^sub>B F f =\n           G f \\<cdot>\\<^sub>B t (A.dom f)\\<rbrakk>\n       \\<Longrightarrow> G f \\<cdot>\\<^sub>B\n                         t (A.dom f) \\<cdot>\\<^sub>B F (A.dom f) =\n                         G f \\<cdot>\\<^sub>B t (A.dom f)\n 4. \\<And>f.\n       \\<lbrakk>A.arr f;\n        \\<And>f.\n           local.map f =\n           (if A.arr f then t (A.cod f) \\<cdot>\\<^sub>B F f else B.null);\n        \\<And>f.\n           A.arr f \\<Longrightarrow>\n           t (A.cod f) \\<cdot>\\<^sub>B F f =\n           G f \\<cdot>\\<^sub>B t (A.dom f)\\<rbrakk>\n       \\<Longrightarrow> (t (A.cod f) \\<cdot>\\<^sub>B\n                          F (A.cod f)) \\<cdot>\\<^sub>B\n                         F f =\n                         G f \\<cdot>\\<^sub>B t (A.dom f)", "apply (metis A.ide_dom B.dom_comp B.seqI\n                      G.preserves_arr G.preserves_dom B.in_homE maps_ide_in_hom)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A.arr f;\n        \\<And>f.\n           local.map f =\n           (if A.arr f then t (A.cod f) \\<cdot>\\<^sub>B F f else B.null);\n        \\<And>f.\n           A.arr f \\<Longrightarrow>\n           t (A.cod f) \\<cdot>\\<^sub>B F f =\n           G f \\<cdot>\\<^sub>B t (A.dom f)\\<rbrakk>\n       \\<Longrightarrow> B.cod (G f \\<cdot>\\<^sub>B t (A.dom f)) =\n                         G (A.cod f)\n 2. \\<And>f.\n       \\<lbrakk>A.arr f;\n        \\<And>f.\n           local.map f =\n           (if A.arr f then t (A.cod f) \\<cdot>\\<^sub>B F f else B.null);\n        \\<And>f.\n           A.arr f \\<Longrightarrow>\n           t (A.cod f) \\<cdot>\\<^sub>B F f =\n           G f \\<cdot>\\<^sub>B t (A.dom f)\\<rbrakk>\n       \\<Longrightarrow> G f \\<cdot>\\<^sub>B\n                         t (A.dom f) \\<cdot>\\<^sub>B F (A.dom f) =\n                         G f \\<cdot>\\<^sub>B t (A.dom f)\n 3. \\<And>f.\n       \\<lbrakk>A.arr f;\n        \\<And>f.\n           local.map f =\n           (if A.arr f then t (A.cod f) \\<cdot>\\<^sub>B F f else B.null);\n        \\<And>f.\n           A.arr f \\<Longrightarrow>\n           t (A.cod f) \\<cdot>\\<^sub>B F f =\n           G f \\<cdot>\\<^sub>B t (A.dom f)\\<rbrakk>\n       \\<Longrightarrow> (t (A.cod f) \\<cdot>\\<^sub>B\n                          F (A.cod f)) \\<cdot>\\<^sub>B\n                         F f =\n                         G f \\<cdot>\\<^sub>B t (A.dom f)", "apply (metis A.ide_dom B.arrI B.cod_comp B.in_homE B.seqI\n                     G.preserves_arr G.preserves_cod G.preserves_dom maps_ide_in_hom)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A.arr f;\n        \\<And>f.\n           local.map f =\n           (if A.arr f then t (A.cod f) \\<cdot>\\<^sub>B F f else B.null);\n        \\<And>f.\n           A.arr f \\<Longrightarrow>\n           t (A.cod f) \\<cdot>\\<^sub>B F f =\n           G f \\<cdot>\\<^sub>B t (A.dom f)\\<rbrakk>\n       \\<Longrightarrow> G f \\<cdot>\\<^sub>B\n                         t (A.dom f) \\<cdot>\\<^sub>B F (A.dom f) =\n                         G f \\<cdot>\\<^sub>B t (A.dom f)\n 2. \\<And>f.\n       \\<lbrakk>A.arr f;\n        \\<And>f.\n           local.map f =\n           (if A.arr f then t (A.cod f) \\<cdot>\\<^sub>B F f else B.null);\n        \\<And>f.\n           A.arr f \\<Longrightarrow>\n           t (A.cod f) \\<cdot>\\<^sub>B F f =\n           G f \\<cdot>\\<^sub>B t (A.dom f)\\<rbrakk>\n       \\<Longrightarrow> (t (A.cod f) \\<cdot>\\<^sub>B\n                          F (A.cod f)) \\<cdot>\\<^sub>B\n                         F f =\n                         G f \\<cdot>\\<^sub>B t (A.dom f)", "apply (metis A.ide_dom B.comp_arr_dom B.in_homE maps_ide_in_hom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>A.arr f;\n        \\<And>f.\n           local.map f =\n           (if A.arr f then t (A.cod f) \\<cdot>\\<^sub>B F f else B.null);\n        \\<And>f.\n           A.arr f \\<Longrightarrow>\n           t (A.cod f) \\<cdot>\\<^sub>B F f =\n           G f \\<cdot>\\<^sub>B t (A.dom f)\\<rbrakk>\n       \\<Longrightarrow> (t (A.cod f) \\<cdot>\\<^sub>B\n                          F (A.cod f)) \\<cdot>\\<^sub>B\n                         F f =\n                         G f \\<cdot>\\<^sub>B t (A.dom f)", "by (metis B.comp_assoc A.comp_cod_arr F.preserves_comp)"], ["", "end"], ["", "sublocale transformation_by_components \\<subseteq> natural_transformation A B F G map"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F G local.map", "using is_natural_transformation"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F G local.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F G local.map", "by auto"], ["", "lemma transformation_by_components_idem [simp]:\n  assumes \"natural_transformation A B F G \\<tau>\"\n  shows \"transformation_by_components.map A B F \\<tau> = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transformation_by_components.map A B F \\<tau> = \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. transformation_by_components.map A B F \\<tau> = \\<tau>", "interpret \\<tau>: natural_transformation A B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<tau>", "using assms"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<tau>\n\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<tau>", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. transformation_by_components.map A B F \\<tau> = \\<tau>", "interpret \\<tau>': transformation_by_components A B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. transformation_by_components A B F G \\<tau>", "by (unfold_locales, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>'.map = \\<tau>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>'.map = \\<tau>", "using assms \\<tau>'.map_simp_ide \\<tau>'.is_natural_transformation eqI"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<tau>\n  \\<tau>.A.ide ?a \\<Longrightarrow> \\<tau>'.map ?a = \\<tau> ?a\n  natural_transformation A B F G \\<tau>'.map\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?A ?B ?F ?G ?\\<sigma>';\n   \\<And>a.\n      partial_magma.ide ?A a \\<Longrightarrow>\n      ?\\<sigma> a = ?\\<sigma>' a\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma> = ?\\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<tau>'.map = \\<tau>", "by blast"], ["proof (state)\nthis:\n  \\<tau>'.map = \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["", "section \"Functors as Natural Transformations\""], ["", "text\\<open>\n    A functor is a special case of a natural transformation, in the sense that the same map\n    that defines the functor also defines an identity natural transformation.\n\\<close>"], ["", "lemma functor_is_transformation [simp]:\n  assumes \"functor A B F\"\n  shows \"natural_transformation A B F F F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A B F F F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation A B F F F", "interpret \"functor\" A B F"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor A B F", "using assms"], ["proof (prove)\nusing this:\n  functor A B F\n\ngoal (1 subgoal):\n 1. functor A B F", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation A B F F F", "show \"natural_transformation A B F F F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A B F F F", "using is_extensional B.comp_arr_dom B.comp_cod_arr"], ["proof (prove)\nusing this:\n  \\<not> A.arr ?f \\<Longrightarrow> F ?f = B.null\n  \\<lbrakk>B.arr ?f; B.dom ?f = ?a\\<rbrakk> \\<Longrightarrow> B ?f ?a = ?f\n  \\<lbrakk>B.arr ?f; B.cod ?f = ?b\\<rbrakk> \\<Longrightarrow> B ?b ?f = ?f\n\ngoal (1 subgoal):\n 1. natural_transformation A B F F F", "by (unfold_locales, simp_all)"], ["proof (state)\nthis:\n  natural_transformation A B F F F\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale \"functor\" \\<subseteq> natural_transformation A B F F F"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F F F", "by (simp add: functor_axioms)"], ["", "section \"Constant Natural Transformations\""], ["", "text\\<open>\n    A constant natural transformation is one whose components are all the same arrow.\n\\<close>"], ["", "locale constant_transformation =\n    A: category A +\n    B: category B +\n    F: constant_functor A B \"B.dom g\" +\n    G: constant_functor A B \"B.cod g\"\n  for A :: \"'a comp\"      (infixr \"\\<cdot>\\<^sub>A\" 55)\n  and B :: \"'b comp\"      (infixr \"\\<cdot>\\<^sub>B\" 55)\n  and g :: 'b +\n  assumes value_is_arr: \"B.arr g\"\n  begin"], ["", "definition map\n    where \"map f \\<equiv> if A.arr f then g else B.null\""], ["", "lemma map_simp [simp]:\n    assumes \"A.arr f\"\n    shows \"map f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.map f = g", "using assms map_def"], ["proof (prove)\nusing this:\n  A.arr f\n  local.map ?f \\<equiv> if A.arr ?f then g else B.null\n\ngoal (1 subgoal):\n 1. local.map f = g", "by auto"], ["", "lemma is_natural_transformation:\n    shows \"natural_transformation A B F.map G.map map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F.map G.map\n     local.map", "apply unfold_locales"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f. \\<not> A.arr f \\<Longrightarrow> local.map f = B.null\n 2. \\<And>f. A.arr f \\<Longrightarrow> B.dom (local.map f) = F.map (A.dom f)\n 3. \\<And>f. A.arr f \\<Longrightarrow> B.cod (local.map f) = G.map (A.cod f)\n 4. \\<And>f.\n       A.arr f \\<Longrightarrow>\n       G.map f \\<cdot>\\<^sub>B local.map (A.dom f) = local.map f\n 5. \\<And>f.\n       A.arr f \\<Longrightarrow>\n       local.map (A.cod f) \\<cdot>\\<^sub>B F.map f = local.map f", "using map_def value_is_arr B.comp_arr_dom B.comp_cod_arr"], ["proof (prove)\nusing this:\n  local.map ?f \\<equiv> if A.arr ?f then g else B.null\n  B.arr g\n  \\<lbrakk>B.arr ?f; B.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>B ?a = ?f\n  \\<lbrakk>B.arr ?f; B.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>B ?f = ?f\n\ngoal (5 subgoals):\n 1. \\<And>f. \\<not> A.arr f \\<Longrightarrow> local.map f = B.null\n 2. \\<And>f. A.arr f \\<Longrightarrow> B.dom (local.map f) = F.map (A.dom f)\n 3. \\<And>f. A.arr f \\<Longrightarrow> B.cod (local.map f) = G.map (A.cod f)\n 4. \\<And>f.\n       A.arr f \\<Longrightarrow>\n       G.map f \\<cdot>\\<^sub>B local.map (A.dom f) = local.map f\n 5. \\<And>f.\n       A.arr f \\<Longrightarrow>\n       local.map (A.cod f) \\<cdot>\\<^sub>B F.map f = local.map f", "by auto"], ["", "lemma is_functor_if_value_is_ide:\n    assumes \"B.ide g\"\n    shows \"functor A B map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) local.map", "apply unfold_locales"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f. \\<not> A.arr f \\<Longrightarrow> local.map f = B.null\n 2. \\<And>f. A.arr f \\<Longrightarrow> B.arr (local.map f)\n 3. \\<And>f.\n       A.arr f \\<Longrightarrow> B.dom (local.map f) = local.map (A.dom f)\n 4. \\<And>f.\n       A.arr f \\<Longrightarrow> B.cod (local.map f) = local.map (A.cod f)\n 5. \\<And>g f.\n       A.seq g f \\<Longrightarrow>\n       local.map (g \\<cdot>\\<^sub>A f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "using assms map_def"], ["proof (prove)\nusing this:\n  B.ide g\n  local.map ?f \\<equiv> if A.arr ?f then g else B.null\n\ngoal (5 subgoals):\n 1. \\<And>f. \\<not> A.arr f \\<Longrightarrow> local.map f = B.null\n 2. \\<And>f. A.arr f \\<Longrightarrow> B.arr (local.map f)\n 3. \\<And>f.\n       A.arr f \\<Longrightarrow> B.dom (local.map f) = local.map (A.dom f)\n 4. \\<And>f.\n       A.arr f \\<Longrightarrow> B.cod (local.map f) = local.map (A.cod f)\n 5. \\<And>g f.\n       A.seq g f \\<Longrightarrow>\n       local.map (g \\<cdot>\\<^sub>A f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "by auto"], ["", "end"], ["", "sublocale constant_transformation \\<subseteq> natural_transformation A B F.map G.map map"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F.map G.map\n     local.map", "using is_natural_transformation"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F.map G.map\n   local.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F.map G.map\n     local.map", "by auto"], ["", "context constant_transformation\n  begin"], ["", "lemma equals_dom_if_value_is_ide:\n    assumes \"B.ide g\"\n    shows \"map = F.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.map = F.map", "using assms functor_implies_equals_dom is_functor_if_value_is_ide"], ["proof (prove)\nusing this:\n  B.ide g\n  functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) local.map \\<Longrightarrow>\n  F.map = local.map\n  B.ide g \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) local.map\n\ngoal (1 subgoal):\n 1. local.map = F.map", "by auto"], ["", "lemma equals_cod_if_value_is_ide:\n    assumes \"B.ide g\"\n    shows \"map = G.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.map = G.map", "using assms functor_implies_equals_dom is_functor_if_value_is_ide"], ["proof (prove)\nusing this:\n  B.ide g\n  functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) local.map \\<Longrightarrow>\n  F.map = local.map\n  B.ide g \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) local.map\n\ngoal (1 subgoal):\n 1. local.map = G.map", "by auto"], ["", "end"], ["", "section \"Vertical Composition\""], ["", "text\\<open>\n    Vertical composition is a way of composing natural transformations \\<open>\\<sigma>: F \\<rightarrow> G\\<close>\n    and \\<open>\\<tau>: G \\<rightarrow> H\\<close>, between parallel functors @{term F}, @{term G}, and @{term H}\n    to obtain a natural transformation from @{term F} to @{term H}.\n    The composite is traditionally denoted by \\<open>\\<tau> o \\<sigma>\\<close>, however in the present\n    setting this notation is misleading because it is horizontal composite, rather than\n    vertical composite, that coincides with composition of natural transformations as\n    functions on arrows.\n\\<close>"], ["", "locale vertical_composite =\n    A: category A +\n    B: category B +\n    F: \"functor\" A B F +\n    G: \"functor\" A B G +\n    H: \"functor\" A B H +\n    \\<sigma>: natural_transformation A B F G \\<sigma> +\n    \\<tau>: natural_transformation A B G H \\<tau>\n  for A :: \"'a comp\"      (infixr \"\\<cdot>\\<^sub>A\" 55)\n  and B :: \"'b comp\"      (infixr \"\\<cdot>\\<^sub>B\" 55)\n  and F :: \"'a \\<Rightarrow> 'b\"\n  and G :: \"'a \\<Rightarrow> 'b\"\n  and H :: \"'a \\<Rightarrow> 'b\"\n  and \\<sigma> :: \"'a \\<Rightarrow> 'b\"\n  and \\<tau> :: \"'a \\<Rightarrow> 'b\"\n  begin"], ["", "text\\<open>\n      Vertical composition takes an arrow @{term \"A.in_hom a b f\"} to an arrow in\n      @{term \"B.hom (F a) (G b)\"}, which we can obtain by forming either of\n      the composites @{term \"B (\\<tau> b) (\\<sigma> f)\"} or @{term \"B (\\<tau> f) (\\<sigma> a)\"}, which are\n      equal to each other.\n\\<close>"], ["", "definition map\n    where \"map f = (if A.arr f then \\<tau> (A.cod f) \\<cdot>\\<^sub>B \\<sigma> f else B.null)\""], ["", "lemma map_seq:\n    assumes \"A.arr f\"\n    shows \"B.seq (\\<tau> (A.cod f)) (\\<sigma> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B.seq (\\<tau> (A.cod f)) (\\<sigma> f)", "using assms"], ["proof (prove)\nusing this:\n  A.arr f\n\ngoal (1 subgoal):\n 1. B.seq (\\<tau> (A.cod f)) (\\<sigma> f)", "by auto"], ["", "lemma map_simp_ide:\n    assumes \"A.ide a\"\n    shows \"map a = \\<tau> a \\<cdot>\\<^sub>B \\<sigma> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.map a = \\<tau> a \\<cdot>\\<^sub>B \\<sigma> a", "using assms map_def"], ["proof (prove)\nusing this:\n  A.ide a\n  local.map ?f =\n  (if A.arr ?f then \\<tau> (A.cod ?f) \\<cdot>\\<^sub>B \\<sigma> ?f\n   else B.null)\n\ngoal (1 subgoal):\n 1. local.map a = \\<tau> a \\<cdot>\\<^sub>B \\<sigma> a", "by auto"], ["", "lemma map_simp_1:\n    assumes \"A.arr f\"\n    shows \"map f = \\<tau> (A.cod f) \\<cdot>\\<^sub>B \\<sigma> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.map f = \\<tau> (A.cod f) \\<cdot>\\<^sub>B \\<sigma> f", "using assms"], ["proof (prove)\nusing this:\n  A.arr f\n\ngoal (1 subgoal):\n 1. local.map f = \\<tau> (A.cod f) \\<cdot>\\<^sub>B \\<sigma> f", "by (simp add: map_def)"], ["", "lemma map_simp_2:\n    assumes \"A.arr f\"\n    shows \"map f = \\<tau> f \\<cdot>\\<^sub>B \\<sigma> (A.dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.map f = \\<tau> f \\<cdot>\\<^sub>B \\<sigma> (A.dom f)", "using assms"], ["proof (prove)\nusing this:\n  A.arr f\n\ngoal (1 subgoal):\n 1. local.map f = \\<tau> f \\<cdot>\\<^sub>B \\<sigma> (A.dom f)", "by (metis B.comp_assoc \\<sigma>.is_natural_2 \\<sigma>.naturality \\<tau>.is_natural_1 \\<tau>.naturality map_simp_1)"], ["", "lemma is_natural_transformation:\n    shows \"natural_transformation A B F H map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F H local.map", "using map_def map_simp_1 map_simp_2 map_seq B.comp_assoc"], ["proof (prove)\nusing this:\n  local.map ?f =\n  (if A.arr ?f then \\<tau> (A.cod ?f) \\<cdot>\\<^sub>B \\<sigma> ?f\n   else B.null)\n  A.arr ?f \\<Longrightarrow>\n  local.map ?f = \\<tau> (A.cod ?f) \\<cdot>\\<^sub>B \\<sigma> ?f\n  A.arr ?f \\<Longrightarrow>\n  local.map ?f = \\<tau> ?f \\<cdot>\\<^sub>B \\<sigma> (A.dom ?f)\n  A.arr ?f \\<Longrightarrow> B.seq (\\<tau> (A.cod ?f)) (\\<sigma> ?f)\n  (?h \\<cdot>\\<^sub>B ?g) \\<cdot>\\<^sub>B ?f =\n  ?h \\<cdot>\\<^sub>B ?g \\<cdot>\\<^sub>B ?f\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F H local.map", "apply (unfold_locales, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>\\<And>f.\n                   A.arr f \\<Longrightarrow>\n                   \\<tau> (A.cod f) \\<cdot>\\<^sub>B \\<sigma> f =\n                   \\<tau> f \\<cdot>\\<^sub>B \\<sigma> (A.dom f);\n        A.arr f;\n        \\<And>f.\n           local.map f =\n           (if A.arr f then \\<tau> (A.cod f) \\<cdot>\\<^sub>B \\<sigma> f\n            else B.null);\n        \\<And>h g f.\n           (h \\<cdot>\\<^sub>B g) \\<cdot>\\<^sub>B f =\n           h \\<cdot>\\<^sub>B g \\<cdot>\\<^sub>B f\\<rbrakk>\n       \\<Longrightarrow> H f \\<cdot>\\<^sub>B\n                         \\<tau> (A.dom f) \\<cdot>\\<^sub>B\n                         \\<sigma> (A.dom f) =\n                         \\<tau> f \\<cdot>\\<^sub>B \\<sigma> (A.dom f)", "by (metis B.comp_assoc \\<tau>.is_natural_1)"], ["", "end"], ["", "sublocale vertical_composite \\<subseteq> natural_transformation A B F H map"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F H local.map", "using is_natural_transformation"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F H local.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F H local.map", "by auto"], ["", "text\\<open>\n    Functors are the identities for vertical composition.\n\\<close>"], ["", "lemma vcomp_ide_dom [simp]:\n  assumes \"natural_transformation A B F G \\<tau>\"\n  shows \"vertical_composite.map A B F \\<tau> = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map A B F \\<tau> = \\<tau>", "using assms"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<tau>\n\ngoal (1 subgoal):\n 1. vertical_composite.map A B F \\<tau> = \\<tau>", "apply (intro eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. natural_transformation A B F G \\<tau> \\<Longrightarrow>\n    natural_transformation ?A1 ?B1 ?F1 ?G1\n     (vertical_composite.map A B F \\<tau>)\n 2. natural_transformation A B F G \\<tau> \\<Longrightarrow>\n    natural_transformation ?A1 ?B1 ?F1 ?G1 \\<tau>\n 3. \\<And>a.\n       \\<lbrakk>natural_transformation A B F G \\<tau>;\n        partial_magma.ide ?A1 a\\<rbrakk>\n       \\<Longrightarrow> vertical_composite.map A B F \\<tau> a = \\<tau> a", "apply auto[2]"], ["proof (prove)\ngoal (2 subgoals):\n 1. natural_transformation A B F G \\<tau> \\<Longrightarrow>\n    natural_transformation A B F G (vertical_composite.map A B F \\<tau>)\n 2. \\<And>a.\n       \\<lbrakk>natural_transformation A B F G \\<tau>;\n        partial_magma.ide A a\\<rbrakk>\n       \\<Longrightarrow> vertical_composite.map A B F \\<tau> a = \\<tau> a", "apply (meson functor_is_transformation natural_transformation_def vertical_composite.intro\n                  vertical_composite.is_natural_transformation)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>natural_transformation A B F G \\<tau>;\n        partial_magma.ide A a\\<rbrakk>\n       \\<Longrightarrow> vertical_composite.map A B F \\<tau> a = \\<tau> a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>natural_transformation A B F G \\<tau>;\n        partial_magma.ide A a\\<rbrakk>\n       \\<Longrightarrow> vertical_composite.map A B F \\<tau> a = \\<tau> a", "fix a :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>natural_transformation A B F G \\<tau>;\n        partial_magma.ide A a\\<rbrakk>\n       \\<Longrightarrow> vertical_composite.map A B F \\<tau> a = \\<tau> a", "have \"vertical_composite A B F F G F \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A B F F G F \\<tau>", "by (meson assms functor_is_transformation natural_transformation.axioms(1-4)\n                vertical_composite.intro)"], ["proof (state)\nthis:\n  vertical_composite A B F F G F \\<tau>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>natural_transformation A B F G \\<tau>;\n        partial_magma.ide A a\\<rbrakk>\n       \\<Longrightarrow> vertical_composite.map A B F \\<tau> a = \\<tau> a", "thus \"vertical_composite.map A B F \\<tau> a = \\<tau> a\""], ["proof (prove)\nusing this:\n  vertical_composite A B F F G F \\<tau>\n\ngoal (1 subgoal):\n 1. vertical_composite.map A B F \\<tau> a = \\<tau> a", "using assms natural_transformation.is_extensional natural_transformation.is_natural_2\n            vertical_composite.map_def"], ["proof (prove)\nusing this:\n  vertical_composite A B F F G F \\<tau>\n  natural_transformation A B F G \\<tau>\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<tau>;\n   \\<not> partial_magma.arr ?A ?f\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> ?f = partial_magma.null ?B\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<tau>;\n   partial_magma.arr ?A ?f\\<rbrakk>\n  \\<Longrightarrow> ?B (?\\<tau> (partial_magma.cod ?A ?f)) (?F ?f) =\n                    ?\\<tau> ?f\n  vertical_composite ?A ?B ?F ?G ?H ?\\<sigma> ?\\<tau> \\<Longrightarrow>\n  vertical_composite.map ?A ?B ?\\<sigma> ?\\<tau> ?f =\n  (if partial_magma.arr ?A ?f\n   then ?B (?\\<tau> (partial_magma.cod ?A ?f)) (?\\<sigma> ?f)\n   else partial_magma.null ?B)\n\ngoal (1 subgoal):\n 1. vertical_composite.map A B F \\<tau> a = \\<tau> a", "by fastforce"], ["proof (state)\nthis:\n  vertical_composite.map A B F \\<tau> a = \\<tau> a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vcomp_ide_cod [simp]:\n  assumes \"natural_transformation A B F G \\<tau>\"\n  shows \"vertical_composite.map A B \\<tau> G = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map A B \\<tau> G = \\<tau>", "using assms"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<tau>\n\ngoal (1 subgoal):\n 1. vertical_composite.map A B \\<tau> G = \\<tau>", "apply (intro eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. natural_transformation A B F G \\<tau> \\<Longrightarrow>\n    natural_transformation ?A1 ?B1 ?F1 ?G1\n     (vertical_composite.map A B \\<tau> G)\n 2. natural_transformation A B F G \\<tau> \\<Longrightarrow>\n    natural_transformation ?A1 ?B1 ?F1 ?G1 \\<tau>\n 3. \\<And>a.\n       \\<lbrakk>natural_transformation A B F G \\<tau>;\n        partial_magma.ide ?A1 a\\<rbrakk>\n       \\<Longrightarrow> vertical_composite.map A B \\<tau> G a = \\<tau> a", "apply auto[2]"], ["proof (prove)\ngoal (2 subgoals):\n 1. natural_transformation A B F G \\<tau> \\<Longrightarrow>\n    natural_transformation A B F G (vertical_composite.map A B \\<tau> G)\n 2. \\<And>a.\n       \\<lbrakk>natural_transformation A B F G \\<tau>;\n        partial_magma.ide A a\\<rbrakk>\n       \\<Longrightarrow> vertical_composite.map A B \\<tau> G a = \\<tau> a", "apply (meson functor_is_transformation natural_transformation_def vertical_composite.intro\n                  vertical_composite.is_natural_transformation)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>natural_transformation A B F G \\<tau>;\n        partial_magma.ide A a\\<rbrakk>\n       \\<Longrightarrow> vertical_composite.map A B \\<tau> G a = \\<tau> a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>natural_transformation A B F G \\<tau>;\n        partial_magma.ide A a\\<rbrakk>\n       \\<Longrightarrow> vertical_composite.map A B \\<tau> G a = \\<tau> a", "fix a :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>natural_transformation A B F G \\<tau>;\n        partial_magma.ide A a\\<rbrakk>\n       \\<Longrightarrow> vertical_composite.map A B \\<tau> G a = \\<tau> a", "assume a: \"partial_magma.ide A a\""], ["proof (state)\nthis:\n  partial_magma.ide A a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>natural_transformation A B F G \\<tau>;\n        partial_magma.ide A a\\<rbrakk>\n       \\<Longrightarrow> vertical_composite.map A B \\<tau> G a = \\<tau> a", "interpret Go\\<tau>: vertical_composite A B F G G \\<tau> G"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A B F G G \\<tau> G", "by (meson assms functor_is_transformation natural_transformation.axioms(1-4)\n                vertical_composite.intro)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>natural_transformation A B F G \\<tau>;\n        Go\\<tau>.A.ide a\\<rbrakk>\n       \\<Longrightarrow> Go\\<tau>.map a = \\<tau> a", "show \"vertical_composite.map A B \\<tau> G a = \\<tau> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Go\\<tau>.map a = \\<tau> a", "using assms a natural_transformation.is_extensional natural_transformation.is_natural_1\n            Go\\<tau>.map_simp_ide Go\\<tau>.B.comp_cod_arr"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<tau>\n  Go\\<tau>.A.ide a\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<tau>;\n   \\<not> partial_magma.arr ?A ?f\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> ?f = partial_magma.null ?B\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<tau>;\n   partial_magma.arr ?A ?f\\<rbrakk>\n  \\<Longrightarrow> ?B (?G ?f) (?\\<tau> (partial_magma.dom ?A ?f)) =\n                    ?\\<tau> ?f\n  Go\\<tau>.A.ide ?a \\<Longrightarrow> Go\\<tau>.map ?a = B (G ?a) (\\<tau> ?a)\n  \\<lbrakk>Go\\<tau>.B.arr ?f; Go\\<tau>.B.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> B ?b ?f = ?f\n\ngoal (1 subgoal):\n 1. Go\\<tau>.map a = \\<tau> a", "by simp"], ["proof (state)\nthis:\n  Go\\<tau>.map a = \\<tau> a\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n    Vertical composition is associative.\n\\<close>"], ["", "lemma vcomp_assoc [simp]:\n  assumes \"natural_transformation A B F G \\<rho>\"\n  and \"natural_transformation A B G H \\<sigma>\"\n  and \"natural_transformation A B H K \\<tau>\"\n  shows \"vertical_composite.map A B (vertical_composite.map A B \\<rho> \\<sigma>) \\<tau>\n            = vertical_composite.map A B \\<rho> (vertical_composite.map A B \\<sigma> \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map A B (vertical_composite.map A B \\<rho> \\<sigma>)\n     \\<tau> =\n    vertical_composite.map A B \\<rho>\n     (vertical_composite.map A B \\<sigma> \\<tau>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B (vertical_composite.map A B \\<rho> \\<sigma>)\n     \\<tau> =\n    vertical_composite.map A B \\<rho>\n     (vertical_composite.map A B \\<sigma> \\<tau>)", "interpret A: category A"], ["proof (prove)\ngoal (1 subgoal):\n 1. category A", "using assms(1) natural_transformation_def functor_def"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<rho>\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<equiv>\n  (category ?A \\<and> category ?B) \\<and>\n  functor ?A ?B ?F \\<and>\n  functor ?A ?B ?G \\<and> natural_transformation_axioms ?A ?B ?F ?G ?\\<tau>\n  functor ?A ?B ?F \\<equiv>\n  category ?A \\<and> category ?B \\<and> functor_axioms ?A ?B ?F\n\ngoal (1 subgoal):\n 1. category A", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B (vertical_composite.map A B \\<rho> \\<sigma>)\n     \\<tau> =\n    vertical_composite.map A B \\<rho>\n     (vertical_composite.map A B \\<sigma> \\<tau>)", "interpret B: category B"], ["proof (prove)\ngoal (1 subgoal):\n 1. category B", "using assms(1) natural_transformation_def functor_def"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<rho>\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<equiv>\n  (category ?A \\<and> category ?B) \\<and>\n  functor ?A ?B ?F \\<and>\n  functor ?A ?B ?G \\<and> natural_transformation_axioms ?A ?B ?F ?G ?\\<tau>\n  functor ?A ?B ?F \\<equiv>\n  category ?A \\<and> category ?B \\<and> functor_axioms ?A ?B ?F\n\ngoal (1 subgoal):\n 1. category B", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B (vertical_composite.map A B \\<rho> \\<sigma>)\n     \\<tau> =\n    vertical_composite.map A B \\<rho>\n     (vertical_composite.map A B \\<sigma> \\<tau>)", "interpret \\<rho>: natural_transformation A B F G \\<rho>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<rho>", "using assms(1)"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<rho>\n\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<rho>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B (vertical_composite.map A B \\<rho> \\<sigma>)\n     \\<tau> =\n    vertical_composite.map A B \\<rho>\n     (vertical_composite.map A B \\<sigma> \\<tau>)", "interpret \\<sigma>: natural_transformation A B G H \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A B G H \\<sigma>", "using assms(2)"], ["proof (prove)\nusing this:\n  natural_transformation A B G H \\<sigma>\n\ngoal (1 subgoal):\n 1. natural_transformation A B G H \\<sigma>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B (vertical_composite.map A B \\<rho> \\<sigma>)\n     \\<tau> =\n    vertical_composite.map A B \\<rho>\n     (vertical_composite.map A B \\<sigma> \\<tau>)", "interpret \\<tau>: natural_transformation A B H K \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A B H K \\<tau>", "using assms(3)"], ["proof (prove)\nusing this:\n  natural_transformation A B H K \\<tau>\n\ngoal (1 subgoal):\n 1. natural_transformation A B H K \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B (vertical_composite.map A B \\<rho> \\<sigma>)\n     \\<tau> =\n    vertical_composite.map A B \\<rho>\n     (vertical_composite.map A B \\<sigma> \\<tau>)", "interpret \\<rho>\\<sigma>: vertical_composite A B F G H \\<rho> \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A B F G H \\<rho> \\<sigma>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B \\<rho>\\<sigma>.map \\<tau> =\n    vertical_composite.map A B \\<rho>\n     (vertical_composite.map A B \\<sigma> \\<tau>)", "interpret \\<sigma>\\<tau>: vertical_composite A B G H K \\<sigma> \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A B G H K \\<sigma> \\<tau>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B \\<rho>\\<sigma>.map \\<tau> =\n    vertical_composite.map A B \\<rho> \\<sigma>\\<tau>.map", "interpret \\<rho>_\\<sigma>\\<tau>: vertical_composite A B F G K \\<rho> \\<sigma>\\<tau>.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A B F G K \\<rho> \\<sigma>\\<tau>.map", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B \\<rho>\\<sigma>.map \\<tau> =\n    \\<rho>_\\<sigma>\\<tau>.map", "interpret \\<rho>\\<sigma>_\\<tau>: vertical_composite A B F H K \\<rho>\\<sigma>.map \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A B F H K \\<rho>\\<sigma>.map \\<tau>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<rho>\\<sigma>_\\<tau>.map = \\<rho>_\\<sigma>\\<tau>.map", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<rho>\\<sigma>_\\<tau>.map = \\<rho>_\\<sigma>\\<tau>.map", "using \\<rho>\\<sigma>_\\<tau>.is_natural_transformation \\<rho>_\\<sigma>\\<tau>.natural_transformation_axioms\n            \\<rho>\\<sigma>.map_simp_ide \\<rho>\\<sigma>_\\<tau>.map_simp_ide \\<rho>_\\<sigma>\\<tau>.map_simp_ide \\<sigma>\\<tau>.map_simp_ide B.comp_assoc"], ["proof (prove)\nusing this:\n  natural_transformation A B F K \\<rho>\\<sigma>_\\<tau>.map\n  natural_transformation A B F K \\<rho>_\\<sigma>\\<tau>.map\n  A.ide ?a \\<Longrightarrow>\n  \\<rho>\\<sigma>.map ?a = B (\\<sigma> ?a) (\\<rho> ?a)\n  A.ide ?a \\<Longrightarrow>\n  \\<rho>\\<sigma>_\\<tau>.map ?a = B (\\<tau> ?a) (\\<rho>\\<sigma>.map ?a)\n  A.ide ?a \\<Longrightarrow>\n  \\<rho>_\\<sigma>\\<tau>.map ?a = B (\\<sigma>\\<tau>.map ?a) (\\<rho> ?a)\n  A.ide ?a \\<Longrightarrow>\n  \\<sigma>\\<tau>.map ?a = B (\\<tau> ?a) (\\<sigma> ?a)\n  B (B ?h ?g) ?f = B ?h (B ?g ?f)\n\ngoal (1 subgoal):\n 1. \\<rho>\\<sigma>_\\<tau>.map = \\<rho>_\\<sigma>\\<tau>.map", "by (intro eqI, auto)"], ["proof (state)\nthis:\n  \\<rho>\\<sigma>_\\<tau>.map = \\<rho>_\\<sigma>\\<tau>.map\n\ngoal:\nNo subgoals!", "qed"], ["", "section \"Natural Isomorphisms\""], ["", "text\\<open>\n    A natural isomorphism is a natural transformation each of whose components\n    is an isomorphism.  Equivalently, a natural isomorphism is a natural transformation\n    that is invertible with respect to vertical composition.\n\\<close>"], ["", "locale natural_isomorphism = natural_transformation A B F G \\<tau>\n  for A :: \"'a comp\"      (infixr \"\\<cdot>\\<^sub>A\" 55)\n  and B :: \"'b comp\"      (infixr \"\\<cdot>\\<^sub>B\" 55)\n  and F :: \"'a \\<Rightarrow> 'b\"\n  and G :: \"'a \\<Rightarrow> 'b\"\n  and \\<tau> :: \"'a \\<Rightarrow> 'b\" +\n  assumes components_are_iso [simp]: \"A.ide a \\<Longrightarrow> B.iso (\\<tau> a)\"\n  begin"], ["", "lemma inv_naturality:\n    assumes \"A.arr f\"\n    shows \"F f \\<cdot>\\<^sub>B B.inv (\\<tau> (A.dom f)) = B.inv (\\<tau> (A.cod f)) \\<cdot>\\<^sub>B G f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F f \\<cdot>\\<^sub>B B.inv (\\<tau> (A.dom f)) =\n    B.inv (\\<tau> (A.cod f)) \\<cdot>\\<^sub>B G f", "using assms is_natural_1 is_natural_2 components_are_iso B.invert_side_of_triangle\n            B.comp_assoc A.ide_cod A.ide_dom preserves_reflects_arr"], ["proof (prove)\nusing this:\n  A.arr f\n  A.arr ?f \\<Longrightarrow>\n  G ?f \\<cdot>\\<^sub>B \\<tau> (A.dom ?f) = \\<tau> ?f\n  A.arr ?f \\<Longrightarrow>\n  \\<tau> (A.cod ?f) \\<cdot>\\<^sub>B F ?f = \\<tau> ?f\n  A.ide ?a \\<Longrightarrow> B.iso (\\<tau> ?a)\n  \\<lbrakk>B.arr ?h; ?f \\<cdot>\\<^sub>B ?g = ?h; B.iso ?f\\<rbrakk>\n  \\<Longrightarrow> B.seq (B.inv ?f) ?h \\<and>\n                    ?g = B.inv ?f \\<cdot>\\<^sub>B ?h\n  \\<lbrakk>B.arr ?h; ?f \\<cdot>\\<^sub>B ?g = ?h; B.iso ?g\\<rbrakk>\n  \\<Longrightarrow> B.seq ?h (B.inv ?g) \\<and>\n                    ?f = ?h \\<cdot>\\<^sub>B B.inv ?g\n  (?h \\<cdot>\\<^sub>B ?g) \\<cdot>\\<^sub>B ?f =\n  ?h \\<cdot>\\<^sub>B ?g \\<cdot>\\<^sub>B ?f\n  A.arr ?f \\<Longrightarrow> A.ide (A.cod ?f)\n  A.arr ?f \\<Longrightarrow> A.ide (A.dom ?f)\n  B.arr (\\<tau> ?f) = A.arr ?f\n\ngoal (1 subgoal):\n 1. F f \\<cdot>\\<^sub>B B.inv (\\<tau> (A.dom f)) =\n    B.inv (\\<tau> (A.cod f)) \\<cdot>\\<^sub>B G f", "by fastforce"], ["", "text \\<open>\n      Natural isomorphisms preserve isomorphisms, in the sense that the sides of\n      of the naturality square determined by an isomorphism are all isomorphisms,\n      so the diagonal is, as well.\n\\<close>"], ["", "lemma preserves_iso:\n    assumes \"A.iso f\"\n    shows \"B.iso (\\<tau> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B.iso (\\<tau> f)", "using assms"], ["proof (prove)\nusing this:\n  A.iso f\n\ngoal (1 subgoal):\n 1. B.iso (\\<tau> f)", "by (metis A.ide_dom A.iso_is_arr B.isos_compose G.preserves_iso components_are_iso\n          is_natural_2 naturality preserves_reflects_arr)"], ["", "end"], ["", "text \\<open>\n    Since the function that represents a functor is formally identical to the function\n    that represents the corresponding identity natural transformation, no additional locale\n    is needed for identity natural transformations.  However, an identity natural transformation\n    is also a natural isomorphism, so it is useful for @{locale functor} to inherit from the\n    @{locale natural_isomorphism} locale.\n\\<close>"], ["", "sublocale \"functor\" \\<subseteq> natural_isomorphism A B F F F"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F F F", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. A.ide a \\<Longrightarrow> B.iso (F a)", "using preserves_ide B.ide_is_iso"], ["proof (prove)\nusing this:\n  A.ide ?a \\<Longrightarrow> B.ide (F ?a)\n  B.ide ?a \\<Longrightarrow> B.iso ?a\n\ngoal (1 subgoal):\n 1. \\<And>a. A.ide a \\<Longrightarrow> B.iso (F a)", "by simp"], ["", "definition naturally_isomorphic\n  where \"naturally_isomorphic A B F G = (\\<exists>\\<tau>. natural_isomorphism A B F G \\<tau>)\""], ["", "lemma naturally_isomorphic_respects_full_functor:\n  assumes \"naturally_isomorphic A B F G\"\n  and \"full_functor A B F\"\n  shows \"full_functor A B G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. full_functor A B G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. full_functor A B G", "obtain \\<phi> where \\<phi>: \"natural_isomorphism A B F G \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        natural_isomorphism A B F G \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms naturally_isomorphic_def"], ["proof (prove)\nusing this:\n  naturally_isomorphic A B F G\n  full_functor A B F\n  naturally_isomorphic ?A ?B ?F ?G =\n  (\\<exists>\\<tau>. natural_isomorphism ?A ?B ?F ?G \\<tau>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        natural_isomorphism A B F G \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  natural_isomorphism A B F G \\<phi>\n\ngoal (1 subgoal):\n 1. full_functor A B G", "interpret \\<phi>: natural_isomorphism A B F G \\<phi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<phi>", "using \\<phi>"], ["proof (prove)\nusing this:\n  natural_isomorphism A B F G \\<phi>\n\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<phi>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. full_functor A B G", "interpret \\<phi>.F: full_functor A B F"], ["proof (prove)\ngoal (1 subgoal):\n 1. full_functor A B F", "using assms"], ["proof (prove)\nusing this:\n  naturally_isomorphic A B F G\n  full_functor A B F\n\ngoal (1 subgoal):\n 1. full_functor A B F", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. full_functor A B G", "write A (infixr \"\\<cdot>\\<^sub>A\" 55)"], ["proof (state)\ngoal (1 subgoal):\n 1. full_functor (\\<cdot>\\<^sub>A) B G", "write B (infixr \"\\<cdot>\\<^sub>B\" 55)"], ["proof (state)\ngoal (1 subgoal):\n 1. full_functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) G", "write \\<phi>.A.in_hom (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>A _\\<guillemotright>\")"], ["proof (state)\ngoal (1 subgoal):\n 1. full_functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) G", "write \\<phi>.B.in_hom (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>B _\\<guillemotright>\")"], ["proof (state)\ngoal (1 subgoal):\n 1. full_functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) G", "show \"full_functor A B G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. full_functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) G", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' g.\n       \\<lbrakk>\\<phi>.A.ide a; \\<phi>.A.ide a';\n        \\<guillemotleft>g : G a' \\<rightarrow>\\<^sub>B G\n                  a\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n                            G f = g", "fix a a' g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' g.\n       \\<lbrakk>\\<phi>.A.ide a; \\<phi>.A.ide a';\n        \\<guillemotleft>g : G a' \\<rightarrow>\\<^sub>B G\n                  a\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n                            G f = g", "assume a': \"\\<phi>.A.ide a'\" and a: \"\\<phi>.A.ide a\"\n      and g: \"\\<guillemotleft>g : G a' \\<rightarrow>\\<^sub>B G a\\<guillemotright>\""], ["proof (state)\nthis:\n  \\<phi>.A.ide a'\n  \\<phi>.A.ide a\n  \\<guillemotleft>g : G a' \\<rightarrow>\\<^sub>B G a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>a a' g.\n       \\<lbrakk>\\<phi>.A.ide a; \\<phi>.A.ide a';\n        \\<guillemotleft>g : G a' \\<rightarrow>\\<^sub>B G\n                  a\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n                            G f = g", "show \"\\<exists>f. \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and> G f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n       G f = g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n       G f = g", "let ?g' = \"\\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B g \\<cdot>\\<^sub>B \\<phi> a'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n       G f = g", "have g': \"\\<guillemotleft>?g' : F a' \\<rightarrow>\\<^sub>B F a\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n                    g \\<cdot>\\<^sub>B\n                    \\<phi>\n                     a' : F a' \\<rightarrow>\\<^sub>B F a\\<guillemotright>", "using a a' g \\<phi>.preserves_hom \\<phi>.components_are_iso \\<phi>.B.inv_in_hom"], ["proof (prove)\nusing this:\n  \\<phi>.A.ide a\n  \\<phi>.A.ide a'\n  \\<guillemotleft>g : G a' \\<rightarrow>\\<^sub>B G a\\<guillemotright>\n  \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>A ?b\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>\\<phi>\n                   ?f : F ?a \\<rightarrow>\\<^sub>B G ?b\\<guillemotright>\n  \\<phi>.A.ide ?a \\<Longrightarrow> \\<phi>.B.iso (\\<phi> ?a)\n  \\<lbrakk>\\<phi>.B.iso ?f;\n   \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>B ?b\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi>.B.inv\n                                     ?f : ?b \\<rightarrow>\\<^sub>B ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n                    g \\<cdot>\\<^sub>B\n                    \\<phi>\n                     a' : F a' \\<rightarrow>\\<^sub>B F a\\<guillemotright>", "by force"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n                  g \\<cdot>\\<^sub>B\n                  \\<phi>\n                   a' : F a' \\<rightarrow>\\<^sub>B F a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n       G f = g", "obtain f' where f': \"\\<guillemotleft>f' : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and> F f' = ?g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        \\<guillemotleft>f' : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n        F f' =\n        \\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n        g \\<cdot>\\<^sub>B \\<phi> a' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using a a' g' \\<phi>.F.is_full [of a a' ?g']"], ["proof (prove)\nusing this:\n  \\<phi>.A.ide a\n  \\<phi>.A.ide a'\n  \\<guillemotleft>\\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n                  g \\<cdot>\\<^sub>B\n                  \\<phi>\n                   a' : F a' \\<rightarrow>\\<^sub>B F a\\<guillemotright>\n  \\<lbrakk>\\<phi>.A.ide a; \\<phi>.A.ide a';\n   \\<guillemotleft>\\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n                   g \\<cdot>\\<^sub>B\n                   \\<phi>\n                    a' : F a' \\<rightarrow>\\<^sub>B F\n               a\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>f.\n                       \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n                       F f =\n                       \\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n                       g \\<cdot>\\<^sub>B \\<phi> a'\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        \\<guillemotleft>f' : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n        F f' =\n        \\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n        g \\<cdot>\\<^sub>B \\<phi> a' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<guillemotleft>f' : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n  F f' = \\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B g \\<cdot>\\<^sub>B \\<phi> a'\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n       G f = g", "moreover"], ["proof (state)\nthis:\n  \\<guillemotleft>f' : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n  F f' = \\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B g \\<cdot>\\<^sub>B \\<phi> a'\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n       G f = g", "have \"G f' = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G f' = g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G f' = g", "have \"G f' = \\<phi> a \\<cdot>\\<^sub>B ?g' \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G f' =\n    \\<phi> a \\<cdot>\\<^sub>B\n    (\\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n     g \\<cdot>\\<^sub>B \\<phi> a') \\<cdot>\\<^sub>B\n    \\<phi>.B.inv (\\<phi> a')", "using a a' f' \\<phi>.naturality [of f'] \\<phi>.components_are_iso \\<phi>.is_natural_2"], ["proof (prove)\nusing this:\n  \\<phi>.A.ide a\n  \\<phi>.A.ide a'\n  \\<guillemotleft>f' : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n  F f' = \\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B g \\<cdot>\\<^sub>B \\<phi> a'\n  \\<phi>.A.arr f' \\<Longrightarrow>\n  \\<phi> (\\<phi>.A.cod f') \\<cdot>\\<^sub>B F f' =\n  G f' \\<cdot>\\<^sub>B \\<phi> (\\<phi>.A.dom f')\n  \\<phi>.A.ide ?a \\<Longrightarrow> \\<phi>.B.iso (\\<phi> ?a)\n  \\<phi>.A.arr ?f \\<Longrightarrow>\n  \\<phi> (\\<phi>.A.cod ?f) \\<cdot>\\<^sub>B F ?f = \\<phi> ?f\n\ngoal (1 subgoal):\n 1. G f' =\n    \\<phi> a \\<cdot>\\<^sub>B\n    (\\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n     g \\<cdot>\\<^sub>B \\<phi> a') \\<cdot>\\<^sub>B\n    \\<phi>.B.inv (\\<phi> a')", "by (metis \\<phi>.A.in_homE \\<phi>.B.comp_assoc \\<phi>.B.invert_side_of_triangle(2)\n                \\<phi>.preserves_reflects_arr)"], ["proof (state)\nthis:\n  G f' =\n  \\<phi> a \\<cdot>\\<^sub>B\n  (\\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n   g \\<cdot>\\<^sub>B \\<phi> a') \\<cdot>\\<^sub>B\n  \\<phi>.B.inv (\\<phi> a')\n\ngoal (1 subgoal):\n 1. G f' = g", "also"], ["proof (state)\nthis:\n  G f' =\n  \\<phi> a \\<cdot>\\<^sub>B\n  (\\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n   g \\<cdot>\\<^sub>B \\<phi> a') \\<cdot>\\<^sub>B\n  \\<phi>.B.inv (\\<phi> a')\n\ngoal (1 subgoal):\n 1. G f' = g", "have \"... = (\\<phi> a \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a)) \\<cdot>\\<^sub>B g \\<cdot>\\<^sub>B \\<phi> a' \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> a \\<cdot>\\<^sub>B\n    (\\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n     g \\<cdot>\\<^sub>B \\<phi> a') \\<cdot>\\<^sub>B\n    \\<phi>.B.inv (\\<phi> a') =\n    (\\<phi> a \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a)) \\<cdot>\\<^sub>B\n    g \\<cdot>\\<^sub>B \\<phi> a' \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a')", "using \\<phi>.B.comp_assoc"], ["proof (prove)\nusing this:\n  (?h \\<cdot>\\<^sub>B ?g) \\<cdot>\\<^sub>B ?f =\n  ?h \\<cdot>\\<^sub>B ?g \\<cdot>\\<^sub>B ?f\n\ngoal (1 subgoal):\n 1. \\<phi> a \\<cdot>\\<^sub>B\n    (\\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n     g \\<cdot>\\<^sub>B \\<phi> a') \\<cdot>\\<^sub>B\n    \\<phi>.B.inv (\\<phi> a') =\n    (\\<phi> a \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a)) \\<cdot>\\<^sub>B\n    g \\<cdot>\\<^sub>B \\<phi> a' \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a')", "by auto"], ["proof (state)\nthis:\n  \\<phi> a \\<cdot>\\<^sub>B\n  (\\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n   g \\<cdot>\\<^sub>B \\<phi> a') \\<cdot>\\<^sub>B\n  \\<phi>.B.inv (\\<phi> a') =\n  (\\<phi> a \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a)) \\<cdot>\\<^sub>B\n  g \\<cdot>\\<^sub>B \\<phi> a' \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a')\n\ngoal (1 subgoal):\n 1. G f' = g", "also"], ["proof (state)\nthis:\n  \\<phi> a \\<cdot>\\<^sub>B\n  (\\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B\n   g \\<cdot>\\<^sub>B \\<phi> a') \\<cdot>\\<^sub>B\n  \\<phi>.B.inv (\\<phi> a') =\n  (\\<phi> a \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a)) \\<cdot>\\<^sub>B\n  g \\<cdot>\\<^sub>B \\<phi> a' \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a')\n\ngoal (1 subgoal):\n 1. G f' = g", "have \"... = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<phi> a \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a)) \\<cdot>\\<^sub>B\n    g \\<cdot>\\<^sub>B \\<phi> a' \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a') =\n    g", "using a a' g \\<phi>.B.comp_arr_dom \\<phi>.B.comp_cod_arr \\<phi>.B.comp_arr_inv\n                  \\<phi>.B.inv_is_inverse"], ["proof (prove)\nusing this:\n  \\<phi>.A.ide a\n  \\<phi>.A.ide a'\n  \\<guillemotleft>g : G a' \\<rightarrow>\\<^sub>B G a\\<guillemotright>\n  \\<lbrakk>\\<phi>.B.arr ?f; \\<phi>.B.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>B ?a = ?f\n  \\<lbrakk>\\<phi>.B.arr ?f; \\<phi>.B.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>B ?f = ?f\n  \\<phi>.B.inverse_arrows ?f ?g \\<Longrightarrow>\n  ?f \\<cdot>\\<^sub>B ?g = \\<phi>.B.dom ?g\n  \\<phi>.B.iso ?f \\<Longrightarrow>\n  \\<phi>.B.inverse_arrows ?f (\\<phi>.B.inv ?f)\n\ngoal (1 subgoal):\n 1. (\\<phi> a \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a)) \\<cdot>\\<^sub>B\n    g \\<cdot>\\<^sub>B \\<phi> a' \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a') =\n    g", "by auto"], ["proof (state)\nthis:\n  (\\<phi> a \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a)) \\<cdot>\\<^sub>B\n  g \\<cdot>\\<^sub>B \\<phi> a' \\<cdot>\\<^sub>B \\<phi>.B.inv (\\<phi> a') =\n  g\n\ngoal (1 subgoal):\n 1. G f' = g", "finally"], ["proof (chain)\npicking this:\n  G f' = g", "show ?thesis"], ["proof (prove)\nusing this:\n  G f' = g\n\ngoal (1 subgoal):\n 1. G f' = g", "by blast"], ["proof (state)\nthis:\n  G f' = g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G f' = g\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n       G f = g", "ultimately"], ["proof (chain)\npicking this:\n  \\<guillemotleft>f' : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n  F f' = \\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B g \\<cdot>\\<^sub>B \\<phi> a'\n  G f' = g", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f' : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n  F f' = \\<phi>.B.inv (\\<phi> a) \\<cdot>\\<^sub>B g \\<cdot>\\<^sub>B \\<phi> a'\n  G f' = g\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n       G f = g", "by auto"], ["proof (state)\nthis:\n  \\<exists>f.\n     \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n     G f = g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>f.\n     \\<guillemotleft>f : a' \\<rightarrow>\\<^sub>A a\\<guillemotright> \\<and>\n     G f = g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  full_functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma naturally_isomorphic_respects_faithful_functor:\n  assumes \"naturally_isomorphic A B F G\"\n  and \"faithful_functor A B F\"\n  shows \"faithful_functor A B G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. faithful_functor A B G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. faithful_functor A B G", "obtain \\<phi> where \\<phi>: \"natural_isomorphism A B F G \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        natural_isomorphism A B F G \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms naturally_isomorphic_def"], ["proof (prove)\nusing this:\n  naturally_isomorphic A B F G\n  faithful_functor A B F\n  naturally_isomorphic ?A ?B ?F ?G =\n  (\\<exists>\\<tau>. natural_isomorphism ?A ?B ?F ?G \\<tau>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        natural_isomorphism A B F G \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  natural_isomorphism A B F G \\<phi>\n\ngoal (1 subgoal):\n 1. faithful_functor A B G", "interpret \\<phi>: natural_isomorphism A B F G \\<phi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<phi>", "using \\<phi>"], ["proof (prove)\nusing this:\n  natural_isomorphism A B F G \\<phi>\n\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<phi>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. faithful_functor A B G", "interpret \\<phi>.F: faithful_functor A B F"], ["proof (prove)\ngoal (1 subgoal):\n 1. faithful_functor A B F", "using assms"], ["proof (prove)\nusing this:\n  naturally_isomorphic A B F G\n  faithful_functor A B F\n\ngoal (1 subgoal):\n 1. faithful_functor A B F", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. faithful_functor A B G", "show \"faithful_functor A B G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. faithful_functor A B G", "using \\<phi>.naturality \\<phi>.components_are_iso \\<phi>.B.iso_is_section \\<phi>.B.section_is_mono\n            \\<phi>.B.monoE \\<phi>.F.is_faithful \\<phi>.is_natural_1 \\<phi>.natural_transformation_axioms\n            \\<phi>.preserves_reflects_arr \\<phi>.A.ide_cod"], ["proof (prove)\nusing this:\n  \\<phi>.A.arr ?f \\<Longrightarrow>\n  B (\\<phi> (\\<phi>.A.cod ?f)) (F ?f) = B (G ?f) (\\<phi> (\\<phi>.A.dom ?f))\n  \\<phi>.A.ide ?a \\<Longrightarrow> \\<phi>.B.iso (\\<phi> ?a)\n  \\<phi>.B.iso ?f \\<Longrightarrow> \\<phi>.B.section ?f\n  \\<phi>.B.section ?g \\<Longrightarrow> \\<phi>.B.mono ?g\n  \\<lbrakk>\\<phi>.B.mono ?g; \\<phi>.B.seq ?g ?f; \\<phi>.B.seq ?g ?f';\n   B ?g ?f = B ?g ?f'\\<rbrakk>\n  \\<Longrightarrow> ?f' = ?f\n  \\<lbrakk>\\<phi>.A.par ?f ?f'; F ?f = F ?f'\\<rbrakk>\n  \\<Longrightarrow> ?f = ?f'\n  \\<phi>.A.arr ?f \\<Longrightarrow>\n  B (G ?f) (\\<phi> (\\<phi>.A.dom ?f)) = \\<phi> ?f\n  natural_transformation A B F G \\<phi>\n  \\<phi>.B.arr (\\<phi> ?f) = \\<phi>.A.arr ?f\n  \\<phi>.A.arr ?f \\<Longrightarrow> \\<phi>.A.ide (\\<phi>.A.cod ?f)\n\ngoal (1 subgoal):\n 1. faithful_functor A B G", "by (unfold_locales, metis)"], ["proof (state)\nthis:\n  faithful_functor A B G\n\ngoal:\nNo subgoals!", "qed"], ["", "locale inverse_transformation =\n    A: category A +\n    B: category B +\n    F: \"functor\" A B F +\n    G: \"functor\" A B G +\n    \\<tau>: natural_isomorphism A B F G \\<tau>\n  for A :: \"'a comp\"      (infixr \"\\<cdot>\\<^sub>A\" 55)\n  and B :: \"'b comp\"      (infixr \"\\<cdot>\\<^sub>B\" 55)\n  and F :: \"'a \\<Rightarrow> 'b\"\n  and G :: \"'a \\<Rightarrow> 'b\"\n  and \\<tau> :: \"'a \\<Rightarrow> 'b\"\n  begin"], ["", "interpretation \\<tau>': transformation_by_components A B G F \\<open>\\<lambda>a. B.inv (\\<tau> a)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. transformation_by_components (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) G F\n     (\\<lambda>a. B.inv (\\<tau> a))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       A.ide a \\<Longrightarrow>\n       \\<guillemotleft>B.inv\n                        (\\<tau>\n                          a) : G a \\<rightarrow>\\<^sub>B F\n                    a\\<guillemotright>\n 2. \\<And>f.\n       A.arr f \\<Longrightarrow>\n       B.inv (\\<tau> (A.cod f)) \\<cdot>\\<^sub>B G f =\n       F f \\<cdot>\\<^sub>B B.inv (\\<tau> (A.dom f))", "fix f :: 'a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       A.ide a \\<Longrightarrow>\n       \\<guillemotleft>B.inv\n                        (\\<tau>\n                          a) : G a \\<rightarrow>\\<^sub>B F\n                    a\\<guillemotright>\n 2. \\<And>f.\n       A.arr f \\<Longrightarrow>\n       B.inv (\\<tau> (A.cod f)) \\<cdot>\\<^sub>B G f =\n       F f \\<cdot>\\<^sub>B B.inv (\\<tau> (A.dom f))", "show \"A.ide f \\<Longrightarrow> \\<guillemotleft>B.inv (\\<tau> f) : G f \\<rightarrow>\\<^sub>B F f\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A.ide f \\<Longrightarrow>\n    \\<guillemotleft>B.inv\n                     (\\<tau>\n                       f) : G f \\<rightarrow>\\<^sub>B F f\\<guillemotright>", "using B.inv_in_hom \\<tau>.components_are_iso A.ide_in_hom"], ["proof (prove)\nusing this:\n  \\<lbrakk>B.iso ?f;\n   \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>B ?b\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>B.inv\n                                     ?f : ?b \\<rightarrow>\\<^sub>B ?a\\<guillemotright>\n  A.ide ?a \\<Longrightarrow> B.iso (\\<tau> ?a)\n  A.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>A ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. A.ide f \\<Longrightarrow>\n    \\<guillemotleft>B.inv\n                     (\\<tau>\n                       f) : G f \\<rightarrow>\\<^sub>B F f\\<guillemotright>", "by blast"], ["proof (state)\nthis:\n  A.ide f \\<Longrightarrow>\n  \\<guillemotleft>B.inv\n                   (\\<tau>\n                     f) : G f \\<rightarrow>\\<^sub>B F f\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       A.arr f \\<Longrightarrow>\n       B.inv (\\<tau> (A.cod f)) \\<cdot>\\<^sub>B G f =\n       F f \\<cdot>\\<^sub>B B.inv (\\<tau> (A.dom f))", "show \"A.arr f \\<Longrightarrow> B.inv (\\<tau> (A.cod f)) \\<cdot>\\<^sub>B G f = F f \\<cdot>\\<^sub>B B.inv (\\<tau> (A.dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A.arr f \\<Longrightarrow>\n    B.inv (\\<tau> (A.cod f)) \\<cdot>\\<^sub>B G f =\n    F f \\<cdot>\\<^sub>B B.inv (\\<tau> (A.dom f))", "by (metis A.ide_cod A.ide_dom B.invert_opposite_sides_of_square \\<tau>.components_are_iso\n            \\<tau>.is_natural_2 \\<tau>.naturality \\<tau>.preserves_reflects_arr)"], ["proof (state)\nthis:\n  A.arr f \\<Longrightarrow>\n  B.inv (\\<tau> (A.cod f)) \\<cdot>\\<^sub>B G f =\n  F f \\<cdot>\\<^sub>B B.inv (\\<tau> (A.dom f))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition map\n    where \"map = \\<tau>'.map\""], ["", "lemma map_ide_simp [simp]:\n    assumes \"A.ide a\"\n    shows \"map a = B.inv (\\<tau> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.map a = B.inv (\\<tau> a)", "using assms map_def"], ["proof (prove)\nusing this:\n  A.ide a\n  local.map = \\<tau>'.map\n\ngoal (1 subgoal):\n 1. local.map a = B.inv (\\<tau> a)", "by fastforce"], ["", "lemma map_simp:\n    assumes \"A.arr f\"\n    shows \"map f = B.inv (\\<tau> (A.cod f)) \\<cdot>\\<^sub>B G f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.map f = B.inv (\\<tau> (A.cod f)) \\<cdot>\\<^sub>B G f", "using assms map_def"], ["proof (prove)\nusing this:\n  A.arr f\n  local.map = \\<tau>'.map\n\ngoal (1 subgoal):\n 1. local.map f = B.inv (\\<tau> (A.cod f)) \\<cdot>\\<^sub>B G f", "by (simp add: \\<tau>'.map_def)"], ["", "lemma is_natural_transformation:\n    shows \"natural_transformation A B G F map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) G F local.map", "by (simp add: \\<tau>'.natural_transformation_axioms map_def)"], ["", "lemma inverts_components:\n    assumes \"A.ide a\"\n    shows \"B.inverse_arrows (\\<tau> a) (map a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B.inverse_arrows (\\<tau> a) (local.map a)", "using assms \\<tau>.components_are_iso B.ide_is_iso B.inv_is_inverse B.inverse_arrows_def map_def"], ["proof (prove)\nusing this:\n  A.ide a\n  A.ide ?a \\<Longrightarrow> B.iso (\\<tau> ?a)\n  B.ide ?a \\<Longrightarrow> B.iso ?a\n  B.iso ?f \\<Longrightarrow> B.inverse_arrows ?f (B.inv ?f)\n  B.inverse_arrows ?f ?g \\<equiv>\n  B.ide (?g \\<cdot>\\<^sub>B ?f) \\<and> B.ide (?f \\<cdot>\\<^sub>B ?g)\n  local.map = \\<tau>'.map\n\ngoal (1 subgoal):\n 1. B.inverse_arrows (\\<tau> a) (local.map a)", "by (metis \\<tau>'.map_simp_ide)"], ["", "end"], ["", "sublocale inverse_transformation \\<subseteq> natural_transformation A B G F map"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) G F local.map", "using is_natural_transformation"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) G F local.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) G F local.map", "by auto"], ["", "sublocale inverse_transformation \\<subseteq> natural_isomorphism A B G F map"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) G F local.map", "by (simp add: natural_isomorphism.intro natural_isomorphism_axioms.intro\n        natural_transformation_axioms)"], ["", "lemma inverse_inverse_transformation [simp]:\n  assumes \"natural_isomorphism A B F G \\<tau>\"\n  shows \"inverse_transformation.map A B F (inverse_transformation.map A B G \\<tau>) = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation.map A B F\n     (inverse_transformation.map A B G \\<tau>) =\n    \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inverse_transformation.map A B F\n     (inverse_transformation.map A B G \\<tau>) =\n    \\<tau>", "interpret \\<tau>: natural_isomorphism A B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<tau>", "using assms"], ["proof (prove)\nusing this:\n  natural_isomorphism A B F G \\<tau>\n\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. inverse_transformation.map A B F\n     (inverse_transformation.map A B G \\<tau>) =\n    \\<tau>", "interpret \\<tau>': inverse_transformation A B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation A B F G \\<tau>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. inverse_transformation.map A B F \\<tau>'.map = \\<tau>", "interpret \\<tau>'': inverse_transformation A B G F \\<tau>'.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation A B G F \\<tau>'.map", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>''.map = \\<tau>", "show \"\\<tau>''.map = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>''.map = \\<tau>", "using \\<tau>.natural_transformation_axioms \\<tau>''.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<tau>\n  natural_transformation A B F G \\<tau>''.map\n\ngoal (1 subgoal):\n 1. \\<tau>''.map = \\<tau>", "by (intro eqI, auto)"], ["proof (state)\nthis:\n  \\<tau>''.map = \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["", "locale inverse_transformations =\n    A: category A +\n    B: category B +\n    F: \"functor\" A B F +\n    G: \"functor\" A B G +\n    \\<tau>: natural_transformation A B F G \\<tau> +\n    \\<tau>': natural_transformation A B G F \\<tau>'\n  for A :: \"'a comp\"      (infixr \"\\<cdot>\\<^sub>A\" 55)\n  and B :: \"'b comp\"      (infixr \"\\<cdot>\\<^sub>B\" 55)\n  and F :: \"'a \\<Rightarrow> 'b\"\n  and G :: \"'a \\<Rightarrow> 'b\"\n  and \\<tau> :: \"'a \\<Rightarrow> 'b\"\n  and \\<tau>' :: \"'a \\<Rightarrow> 'b\" +\n  assumes inv: \"A.ide a \\<Longrightarrow> B.inverse_arrows (\\<tau> a) (\\<tau>' a)\""], ["", "sublocale inverse_transformations \\<subseteq> natural_isomorphism A B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F G \\<tau>", "by (meson B.category_axioms \\<tau>.natural_transformation_axioms B.iso_def inv\n              natural_isomorphism.intro natural_isomorphism_axioms.intro)"], ["", "sublocale inverse_transformations \\<subseteq> natural_isomorphism A B G F \\<tau>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) G F \\<tau>'", "by (meson category.inverse_arrows_sym category.iso_def inverse_transformations_axioms\n              inverse_transformations_axioms_def inverse_transformations_def\n              natural_isomorphism.intro natural_isomorphism_axioms.intro)"], ["", "lemma inverse_transformations_sym:\n  assumes \"inverse_transformations A B F G \\<sigma> \\<sigma>'\"\n  shows \"inverse_transformations A B G F \\<sigma>' \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformations A B G F \\<sigma>' \\<sigma>", "using assms"], ["proof (prove)\nusing this:\n  inverse_transformations A B F G \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. inverse_transformations A B G F \\<sigma>' \\<sigma>", "by (simp add: category.inverse_arrows_sym inverse_transformations_axioms_def\n                  inverse_transformations_def)"], ["", "lemma inverse_transformations_inverse:\n  assumes \"inverse_transformations A B F G \\<sigma> \\<sigma>'\"\n  shows \"vertical_composite.map A B \\<sigma> \\<sigma>' = F\"\n  and \"vertical_composite.map A B \\<sigma>' \\<sigma> = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map A B \\<sigma> \\<sigma>' = F &&&\n    vertical_composite.map A B \\<sigma>' \\<sigma> = G", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. vertical_composite.map A B \\<sigma> \\<sigma>' = F\n 2. vertical_composite.map A B \\<sigma>' \\<sigma> = G", "interpret A: category A"], ["proof (prove)\ngoal (1 subgoal):\n 1. category A", "using assms(1) inverse_transformations_def natural_transformation_def"], ["proof (prove)\nusing this:\n  inverse_transformations A B F G \\<sigma> \\<sigma>'\n  inverse_transformations ?A ?B ?F ?G ?\\<tau> ?\\<tau>' \\<equiv>\n  (category ?A \\<and> category ?B \\<and> functor ?A ?B ?F) \\<and>\n  (functor ?A ?B ?G \\<and>\n   natural_transformation ?A ?B ?F ?G ?\\<tau>) \\<and>\n  natural_transformation ?A ?B ?G ?F ?\\<tau>' \\<and>\n  inverse_transformations_axioms ?A ?B ?\\<tau> ?\\<tau>'\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<equiv>\n  (category ?A \\<and> category ?B) \\<and>\n  functor ?A ?B ?F \\<and>\n  functor ?A ?B ?G \\<and> natural_transformation_axioms ?A ?B ?F ?G ?\\<tau>\n\ngoal (1 subgoal):\n 1. category A", "by blast"], ["proof (state)\ngoal (2 subgoals):\n 1. vertical_composite.map A B \\<sigma> \\<sigma>' = F\n 2. vertical_composite.map A B \\<sigma>' \\<sigma> = G", "interpret inv: inverse_transformations A B F G \\<sigma> \\<sigma>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformations A B F G \\<sigma> \\<sigma>'", "using assms"], ["proof (prove)\nusing this:\n  inverse_transformations A B F G \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. inverse_transformations A B F G \\<sigma> \\<sigma>'", "by auto"], ["proof (state)\ngoal (2 subgoals):\n 1. vertical_composite.map A B \\<sigma> \\<sigma>' = F\n 2. vertical_composite.map A B \\<sigma>' \\<sigma> = G", "interpret \\<sigma>\\<sigma>': vertical_composite A B F G F \\<sigma> \\<sigma>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A B F G F \\<sigma> \\<sigma>'", ".."], ["proof (state)\ngoal (2 subgoals):\n 1. \\<sigma>\\<sigma>'.map = F\n 2. vertical_composite.map A B \\<sigma>' \\<sigma> = G", "show \"vertical_composite.map A B \\<sigma> \\<sigma>' = F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<sigma>'.map = F", "using \\<sigma>\\<sigma>'.is_natural_transformation inv.F.natural_transformation_axioms\n            \\<sigma>\\<sigma>'.map_simp_ide inv.B.comp_inv_arr inv.inv"], ["proof (prove)\nusing this:\n  natural_transformation A B F F \\<sigma>\\<sigma>'.map\n  natural_transformation A B F F F\n  A.ide ?a \\<Longrightarrow>\n  \\<sigma>\\<sigma>'.map ?a = B (\\<sigma>' ?a) (\\<sigma> ?a)\n  inv.B.inverse_arrows ?f ?g \\<Longrightarrow> B ?g ?f = inv.B.dom ?f\n  A.ide ?a \\<Longrightarrow>\n  inv.B.inverse_arrows (\\<sigma> ?a) (\\<sigma>' ?a)\n\ngoal (1 subgoal):\n 1. \\<sigma>\\<sigma>'.map = F", "by (intro eqI, simp_all)"], ["proof (state)\nthis:\n  \\<sigma>\\<sigma>'.map = F\n\ngoal (1 subgoal):\n 1. vertical_composite.map A B \\<sigma>' \\<sigma> = G", "interpret inv': inverse_transformations A B G F \\<sigma>' \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformations A B G F \\<sigma>' \\<sigma>", "using assms inverse_transformations_sym"], ["proof (prove)\nusing this:\n  inverse_transformations A B F G \\<sigma> \\<sigma>'\n  inverse_transformations ?A ?B ?F ?G ?\\<sigma> ?\\<sigma>' \\<Longrightarrow>\n  inverse_transformations ?A ?B ?G ?F ?\\<sigma>' ?\\<sigma>\n\ngoal (1 subgoal):\n 1. inverse_transformations A B G F \\<sigma>' \\<sigma>", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B \\<sigma>' \\<sigma> = G", "interpret \\<sigma>'\\<sigma>: vertical_composite A B G F G \\<sigma>' \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A B G F G \\<sigma>' \\<sigma>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma>'\\<sigma>.map = G", "show \"vertical_composite.map A B \\<sigma>' \\<sigma> = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>'\\<sigma>.map = G", "using \\<sigma>'\\<sigma>.is_natural_transformation inv.G.natural_transformation_axioms\n            \\<sigma>'\\<sigma>.map_simp_ide inv'.inv inv.B.comp_inv_arr"], ["proof (prove)\nusing this:\n  natural_transformation A B G G \\<sigma>'\\<sigma>.map\n  natural_transformation A B G G G\n  A.ide ?a \\<Longrightarrow>\n  \\<sigma>'\\<sigma>.map ?a = B (\\<sigma> ?a) (\\<sigma>' ?a)\n  A.ide ?a \\<Longrightarrow>\n  inv.B.inverse_arrows (\\<sigma>' ?a) (\\<sigma> ?a)\n  inv.B.inverse_arrows ?f ?g \\<Longrightarrow> B ?g ?f = inv.B.dom ?f\n\ngoal (1 subgoal):\n 1. \\<sigma>'\\<sigma>.map = G", "by (intro eqI, simp_all)"], ["proof (state)\nthis:\n  \\<sigma>'\\<sigma>.map = G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inverse_transformations_compose:\n  assumes \"inverse_transformations A B F G \\<sigma> \\<sigma>'\"\n  and \"inverse_transformations A B G H \\<tau> \\<tau>'\"\n  shows \"inverse_transformations A B F H\n           (vertical_composite.map A B \\<sigma> \\<tau>) (vertical_composite.map A B \\<tau>' \\<sigma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformations A B F H\n     (vertical_composite.map A B \\<sigma> \\<tau>)\n     (vertical_composite.map A B \\<tau>' \\<sigma>')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inverse_transformations A B F H\n     (vertical_composite.map A B \\<sigma> \\<tau>)\n     (vertical_composite.map A B \\<tau>' \\<sigma>')", "interpret A: category A"], ["proof (prove)\ngoal (1 subgoal):\n 1. category A", "using assms(1) inverse_transformations_def"], ["proof (prove)\nusing this:\n  inverse_transformations A B F G \\<sigma> \\<sigma>'\n  inverse_transformations ?A ?B ?F ?G ?\\<tau> ?\\<tau>' \\<equiv>\n  (category ?A \\<and> category ?B \\<and> functor ?A ?B ?F) \\<and>\n  (functor ?A ?B ?G \\<and>\n   natural_transformation ?A ?B ?F ?G ?\\<tau>) \\<and>\n  natural_transformation ?A ?B ?G ?F ?\\<tau>' \\<and>\n  inverse_transformations_axioms ?A ?B ?\\<tau> ?\\<tau>'\n\ngoal (1 subgoal):\n 1. category A", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. inverse_transformations A B F H\n     (vertical_composite.map A B \\<sigma> \\<tau>)\n     (vertical_composite.map A B \\<tau>' \\<sigma>')", "interpret B: category B"], ["proof (prove)\ngoal (1 subgoal):\n 1. category B", "using assms(1) inverse_transformations_def"], ["proof (prove)\nusing this:\n  inverse_transformations A B F G \\<sigma> \\<sigma>'\n  inverse_transformations ?A ?B ?F ?G ?\\<tau> ?\\<tau>' \\<equiv>\n  (category ?A \\<and> category ?B \\<and> functor ?A ?B ?F) \\<and>\n  (functor ?A ?B ?G \\<and>\n   natural_transformation ?A ?B ?F ?G ?\\<tau>) \\<and>\n  natural_transformation ?A ?B ?G ?F ?\\<tau>' \\<and>\n  inverse_transformations_axioms ?A ?B ?\\<tau> ?\\<tau>'\n\ngoal (1 subgoal):\n 1. category B", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. inverse_transformations A B F H\n     (vertical_composite.map A B \\<sigma> \\<tau>)\n     (vertical_composite.map A B \\<tau>' \\<sigma>')", "interpret \\<sigma>\\<sigma>': inverse_transformations A B F G \\<sigma> \\<sigma>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformations A B F G \\<sigma> \\<sigma>'", "using assms(1)"], ["proof (prove)\nusing this:\n  inverse_transformations A B F G \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. inverse_transformations A B F G \\<sigma> \\<sigma>'", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. inverse_transformations A B F H\n     (vertical_composite.map A B \\<sigma> \\<tau>)\n     (vertical_composite.map A B \\<tau>' \\<sigma>')", "interpret \\<tau>\\<tau>': inverse_transformations A B G H \\<tau> \\<tau>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformations A B G H \\<tau> \\<tau>'", "using assms(2)"], ["proof (prove)\nusing this:\n  inverse_transformations A B G H \\<tau> \\<tau>'\n\ngoal (1 subgoal):\n 1. inverse_transformations A B G H \\<tau> \\<tau>'", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. inverse_transformations A B F H\n     (vertical_composite.map A B \\<sigma> \\<tau>)\n     (vertical_composite.map A B \\<tau>' \\<sigma>')", "interpret \\<sigma>\\<tau>: vertical_composite A B F G H \\<sigma> \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A B F G H \\<sigma> \\<tau>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. inverse_transformations A B F H \\<sigma>\\<tau>.map\n     (vertical_composite.map A B \\<tau>' \\<sigma>')", "interpret \\<tau>'\\<sigma>': vertical_composite A B H G F \\<tau>' \\<sigma>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A B H G F \\<tau>' \\<sigma>'", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. inverse_transformations A B F H \\<sigma>\\<tau>.map \\<tau>'\\<sigma>'.map", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformations A B F H \\<sigma>\\<tau>.map \\<tau>'\\<sigma>'.map", "using B.inverse_arrows_compose \\<sigma>\\<sigma>'.inv \\<sigma>\\<tau>.map_simp_ide \\<tau>'\\<sigma>'.map_simp_ide \\<tau>\\<tau>'.inv"], ["proof (prove)\nusing this:\n  \\<lbrakk>B.seq ?g ?f; B.inverse_arrows ?f ?f';\n   B.inverse_arrows ?g ?g'\\<rbrakk>\n  \\<Longrightarrow> B.inverse_arrows (B ?g ?f) (B ?f' ?g')\n  A.ide ?a \\<Longrightarrow> B.inverse_arrows (\\<sigma> ?a) (\\<sigma>' ?a)\n  A.ide ?a \\<Longrightarrow>\n  \\<sigma>\\<tau>.map ?a = B (\\<tau> ?a) (\\<sigma> ?a)\n  A.ide ?a \\<Longrightarrow>\n  \\<tau>'\\<sigma>'.map ?a = B (\\<sigma>' ?a) (\\<tau>' ?a)\n  A.ide ?a \\<Longrightarrow> B.inverse_arrows (\\<tau> ?a) (\\<tau>' ?a)\n\ngoal (1 subgoal):\n 1. inverse_transformations A B F H \\<sigma>\\<tau>.map \\<tau>'\\<sigma>'.map", "by (unfold_locales, auto)"], ["proof (state)\nthis:\n  inverse_transformations A B F H \\<sigma>\\<tau>.map \\<tau>'\\<sigma>'.map\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vertical_composite_iso_inverse [simp]:\n  assumes \"natural_isomorphism A B F G \\<tau>\"\n  shows \"vertical_composite.map A B \\<tau> (inverse_transformation.map A B G \\<tau>) = F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map A B \\<tau>\n     (inverse_transformation.map A B G \\<tau>) =\n    F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B \\<tau>\n     (inverse_transformation.map A B G \\<tau>) =\n    F", "interpret \\<tau>: natural_isomorphism A B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<tau>", "using assms"], ["proof (prove)\nusing this:\n  natural_isomorphism A B F G \\<tau>\n\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B \\<tau>\n     (inverse_transformation.map A B G \\<tau>) =\n    F", "interpret \\<tau>': inverse_transformation A B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation A B F G \\<tau>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B \\<tau> \\<tau>'.map = F", "interpret \\<tau>\\<tau>': vertical_composite A B F G F \\<tau> \\<tau>'.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A B F G F \\<tau> \\<tau>'.map", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>\\<tau>'.map = F", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\\<tau>'.map = F", "using \\<tau>\\<tau>'.is_natural_transformation \\<tau>.F.natural_transformation_axioms \\<tau>'.inverts_components\n            \\<tau>.B.comp_inv_arr \\<tau>\\<tau>'.map_simp_ide"], ["proof (prove)\nusing this:\n  natural_transformation A B F F \\<tau>\\<tau>'.map\n  natural_transformation A B F F F\n  \\<tau>.A.ide ?a \\<Longrightarrow>\n  \\<tau>.B.inverse_arrows (\\<tau> ?a) (\\<tau>'.map ?a)\n  \\<tau>.B.inverse_arrows ?f ?g \\<Longrightarrow> B ?g ?f = \\<tau>.B.dom ?f\n  \\<tau>.A.ide ?a \\<Longrightarrow>\n  \\<tau>\\<tau>'.map ?a = B (\\<tau>'.map ?a) (\\<tau> ?a)\n\ngoal (1 subgoal):\n 1. \\<tau>\\<tau>'.map = F", "by (intro eqI, auto)"], ["proof (state)\nthis:\n  \\<tau>\\<tau>'.map = F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vertical_composite_inverse_iso [simp]:\n  assumes \"natural_isomorphism A B F G \\<tau>\"\n  shows \"vertical_composite.map A B (inverse_transformation.map A B G \\<tau>) \\<tau> = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map A B (inverse_transformation.map A B G \\<tau>)\n     \\<tau> =\n    G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B (inverse_transformation.map A B G \\<tau>)\n     \\<tau> =\n    G", "interpret \\<tau>: natural_isomorphism A B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<tau>", "using assms"], ["proof (prove)\nusing this:\n  natural_isomorphism A B F G \\<tau>\n\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B (inverse_transformation.map A B G \\<tau>)\n     \\<tau> =\n    G", "interpret \\<tau>': inverse_transformation A B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation A B F G \\<tau>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map A B \\<tau>'.map \\<tau> = G", "interpret \\<tau>'\\<tau>: vertical_composite A B G F G \\<tau>'.map \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A B G F G \\<tau>'.map \\<tau>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>'\\<tau>.map = G", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>'\\<tau>.map = G", "using \\<tau>'\\<tau>.is_natural_transformation \\<tau>.G.natural_transformation_axioms \\<tau>'.inverts_components\n            \\<tau>'\\<tau>.map_simp_ide \\<tau>.B.comp_arr_inv"], ["proof (prove)\nusing this:\n  natural_transformation A B G G \\<tau>'\\<tau>.map\n  natural_transformation A B G G G\n  \\<tau>.A.ide ?a \\<Longrightarrow>\n  \\<tau>.B.inverse_arrows (\\<tau> ?a) (\\<tau>'.map ?a)\n  \\<tau>.A.ide ?a \\<Longrightarrow>\n  \\<tau>'\\<tau>.map ?a = B (\\<tau> ?a) (\\<tau>'.map ?a)\n  \\<tau>.B.inverse_arrows ?f ?g \\<Longrightarrow> B ?f ?g = \\<tau>.B.dom ?g\n\ngoal (1 subgoal):\n 1. \\<tau>'\\<tau>.map = G", "by (intro eqI, auto)"], ["proof (state)\nthis:\n  \\<tau>'\\<tau>.map = G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma natural_isomorphisms_compose:\n  assumes \"natural_isomorphism A B F G \\<sigma>\" and \"natural_isomorphism A B G H \\<tau>\"\n  shows \"natural_isomorphism A B F H (vertical_composite.map A B \\<sigma> \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F H (vertical_composite.map A B \\<sigma> \\<tau>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F H (vertical_composite.map A B \\<sigma> \\<tau>)", "interpret A: category A"], ["proof (prove)\ngoal (1 subgoal):\n 1. category A", "using assms(1) natural_isomorphism_def natural_transformation_def"], ["proof (prove)\nusing this:\n  natural_isomorphism A B F G \\<sigma>\n  natural_isomorphism ?A ?B ?F ?G ?\\<tau> \\<equiv>\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<and>\n  natural_isomorphism_axioms ?A ?B ?\\<tau>\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<equiv>\n  (category ?A \\<and> category ?B) \\<and>\n  functor ?A ?B ?F \\<and>\n  functor ?A ?B ?G \\<and> natural_transformation_axioms ?A ?B ?F ?G ?\\<tau>\n\ngoal (1 subgoal):\n 1. category A", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F H (vertical_composite.map A B \\<sigma> \\<tau>)", "interpret B: category B"], ["proof (prove)\ngoal (1 subgoal):\n 1. category B", "using assms(1) natural_isomorphism_def natural_transformation_def"], ["proof (prove)\nusing this:\n  natural_isomorphism A B F G \\<sigma>\n  natural_isomorphism ?A ?B ?F ?G ?\\<tau> \\<equiv>\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<and>\n  natural_isomorphism_axioms ?A ?B ?\\<tau>\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<equiv>\n  (category ?A \\<and> category ?B) \\<and>\n  functor ?A ?B ?F \\<and>\n  functor ?A ?B ?G \\<and> natural_transformation_axioms ?A ?B ?F ?G ?\\<tau>\n\ngoal (1 subgoal):\n 1. category B", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F H (vertical_composite.map A B \\<sigma> \\<tau>)", "interpret \\<sigma>: natural_isomorphism A B F G \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<sigma>", "using assms(1)"], ["proof (prove)\nusing this:\n  natural_isomorphism A B F G \\<sigma>\n\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<sigma>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F H (vertical_composite.map A B \\<sigma> \\<tau>)", "interpret \\<tau>: natural_isomorphism A B G H \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B G H \\<tau>", "using assms(2)"], ["proof (prove)\nusing this:\n  natural_isomorphism A B G H \\<tau>\n\ngoal (1 subgoal):\n 1. natural_isomorphism A B G H \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F H (vertical_composite.map A B \\<sigma> \\<tau>)", "interpret \\<sigma>\\<tau>: vertical_composite A B F G H \\<sigma> \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A B F G H \\<sigma> \\<tau>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F H \\<sigma>\\<tau>.map", "interpret natural_isomorphism A B F H \\<sigma>\\<tau>.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F H \\<sigma>\\<tau>.map", "using \\<sigma>\\<tau>.map_simp_ide"], ["proof (prove)\nusing this:\n  A.ide ?a \\<Longrightarrow>\n  \\<sigma>\\<tau>.map ?a = B (\\<tau> ?a) (\\<sigma> ?a)\n\ngoal (1 subgoal):\n 1. natural_isomorphism A B F H \\<sigma>\\<tau>.map", "by (unfold_locales, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F H \\<sigma>\\<tau>.map", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F H \\<sigma>\\<tau>.map", ".."], ["proof (state)\nthis:\n  natural_isomorphism A B F H \\<sigma>\\<tau>.map\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma naturally_isomorphic_reflexive:\n  assumes \"functor A B F\"\n  shows \"naturally_isomorphic A B F F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F F", "interpret F: \"functor\" A B F"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor A B F", "using assms"], ["proof (prove)\nusing this:\n  functor A B F\n\ngoal (1 subgoal):\n 1. functor A B F", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F F", "have \"natural_isomorphism A B F F F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F F F", ".."], ["proof (state)\nthis:\n  natural_isomorphism A B F F F\n\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F F", "thus ?thesis"], ["proof (prove)\nusing this:\n  natural_isomorphism A B F F F\n\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F F", "using naturally_isomorphic_def"], ["proof (prove)\nusing this:\n  natural_isomorphism A B F F F\n  naturally_isomorphic ?A ?B ?F ?G =\n  (\\<exists>\\<tau>. natural_isomorphism ?A ?B ?F ?G \\<tau>)\n\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F F", "by blast"], ["proof (state)\nthis:\n  naturally_isomorphic A B F F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma naturally_isomorphic_symmetric:\n  assumes \"naturally_isomorphic A B F G\"\n  shows \"naturally_isomorphic A B G F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. naturally_isomorphic A B G F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic A B G F", "obtain \\<phi> where \\<phi>: \"natural_isomorphism A B F G \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        natural_isomorphism A B F G \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms naturally_isomorphic_def"], ["proof (prove)\nusing this:\n  naturally_isomorphic A B F G\n  naturally_isomorphic ?A ?B ?F ?G =\n  (\\<exists>\\<tau>. natural_isomorphism ?A ?B ?F ?G \\<tau>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        natural_isomorphism A B F G \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  natural_isomorphism A B F G \\<phi>\n\ngoal (1 subgoal):\n 1. naturally_isomorphic A B G F", "interpret \\<phi>: natural_isomorphism A B F G \\<phi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<phi>", "using \\<phi>"], ["proof (prove)\nusing this:\n  natural_isomorphism A B F G \\<phi>\n\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<phi>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic A B G F", "interpret \\<psi>: inverse_transformation A B F G \\<phi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation A B F G \\<phi>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic A B G F", "have \"natural_isomorphism A B G F \\<psi>.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B G F \\<psi>.map", ".."], ["proof (state)\nthis:\n  natural_isomorphism A B G F \\<psi>.map\n\ngoal (1 subgoal):\n 1. naturally_isomorphic A B G F", "thus ?thesis"], ["proof (prove)\nusing this:\n  natural_isomorphism A B G F \\<psi>.map\n\ngoal (1 subgoal):\n 1. naturally_isomorphic A B G F", "using naturally_isomorphic_def"], ["proof (prove)\nusing this:\n  natural_isomorphism A B G F \\<psi>.map\n  naturally_isomorphic ?A ?B ?F ?G =\n  (\\<exists>\\<tau>. natural_isomorphism ?A ?B ?F ?G \\<tau>)\n\ngoal (1 subgoal):\n 1. naturally_isomorphic A B G F", "by blast"], ["proof (state)\nthis:\n  naturally_isomorphic A B G F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma naturally_isomorphic_transitive [trans]:\n  assumes \"naturally_isomorphic A B F G\"\n  and \"naturally_isomorphic A B G H\"\n  shows \"naturally_isomorphic A B F H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F H", "obtain \\<phi> where \\<phi>: \"natural_isomorphism A B F G \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        natural_isomorphism A B F G \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms naturally_isomorphic_def"], ["proof (prove)\nusing this:\n  naturally_isomorphic A B F G\n  naturally_isomorphic A B G H\n  naturally_isomorphic ?A ?B ?F ?G =\n  (\\<exists>\\<tau>. natural_isomorphism ?A ?B ?F ?G \\<tau>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        natural_isomorphism A B F G \\<phi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  natural_isomorphism A B F G \\<phi>\n\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F H", "interpret \\<phi>: natural_isomorphism A B F G \\<phi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<phi>", "using \\<phi>"], ["proof (prove)\nusing this:\n  natural_isomorphism A B F G \\<phi>\n\ngoal (1 subgoal):\n 1. natural_isomorphism A B F G \\<phi>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F H", "obtain \\<psi> where \\<psi>: \"natural_isomorphism A B G H \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<psi>.\n        natural_isomorphism A B G H \\<psi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms naturally_isomorphic_def"], ["proof (prove)\nusing this:\n  naturally_isomorphic A B F G\n  naturally_isomorphic A B G H\n  naturally_isomorphic ?A ?B ?F ?G =\n  (\\<exists>\\<tau>. natural_isomorphism ?A ?B ?F ?G \\<tau>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<psi>.\n        natural_isomorphism A B G H \\<psi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  natural_isomorphism A B G H \\<psi>\n\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F H", "interpret \\<psi>: natural_isomorphism A B G H \\<psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B G H \\<psi>", "using \\<psi>"], ["proof (prove)\nusing this:\n  natural_isomorphism A B G H \\<psi>\n\ngoal (1 subgoal):\n 1. natural_isomorphism A B G H \\<psi>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F H", "interpret \\<psi>\\<phi>: vertical_composite A B F G H \\<phi> \\<psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A B F G H \\<phi> \\<psi>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F H", "have \"natural_isomorphism A B F H \\<psi>\\<phi>.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism A B F H \\<psi>\\<phi>.map", "using \\<phi> \\<psi> natural_isomorphisms_compose"], ["proof (prove)\nusing this:\n  natural_isomorphism A B F G \\<phi>\n  natural_isomorphism A B G H \\<psi>\n  \\<lbrakk>natural_isomorphism ?A ?B ?F ?G ?\\<sigma>;\n   natural_isomorphism ?A ?B ?G ?H ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_isomorphism ?A ?B ?F ?H\n                     (vertical_composite.map ?A ?B ?\\<sigma> ?\\<tau>)\n\ngoal (1 subgoal):\n 1. natural_isomorphism A B F H \\<psi>\\<phi>.map", "by blast"], ["proof (state)\nthis:\n  natural_isomorphism A B F H \\<psi>\\<phi>.map\n\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F H", "thus ?thesis"], ["proof (prove)\nusing this:\n  natural_isomorphism A B F H \\<psi>\\<phi>.map\n\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F H", "using naturally_isomorphic_def"], ["proof (prove)\nusing this:\n  natural_isomorphism A B F H \\<psi>\\<phi>.map\n  naturally_isomorphic ?A ?B ?F ?G =\n  (\\<exists>\\<tau>. natural_isomorphism ?A ?B ?F ?G \\<tau>)\n\ngoal (1 subgoal):\n 1. naturally_isomorphic A B F H", "by blast"], ["proof (state)\nthis:\n  naturally_isomorphic A B F H\n\ngoal:\nNo subgoals!", "qed"], ["", "section \"Horizontal Composition\""], ["", "text\\<open>\n    Horizontal composition is a way of composing parallel natural transformations\n    @{term \\<sigma>} from @{term F} to @{term G} and @{term \\<tau>} from @{term H} to @{term K},\n    where functors @{term F} and @{term G} map @{term A} to @{term B} and\n    @{term H} and @{term K} map @{term B} to @{term C}, to obtain a natural transformation\n    from @{term \"H o F\"} to @{term \"K o G\"}.\n\n    Since horizontal composition turns out to coincide with ordinary composition of\n    natural transformations as functions, there is little point in defining a cumbersome\n    locale for horizontal composite.\n\\<close>"], ["", "lemma horizontal_composite:\n  assumes \"natural_transformation A B F G \\<sigma>\"\n  and \"natural_transformation B C H K \\<tau>\"\n  shows \"natural_transformation A C (H o F) (K o G) (\\<tau> o \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A C (H \\<circ> F) (K \\<circ> G)\n     (\\<tau> \\<circ> \\<sigma>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation A C (H \\<circ> F) (K \\<circ> G)\n     (\\<tau> \\<circ> \\<sigma>)", "interpret \\<sigma>: natural_transformation A B F G \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<sigma>", "using assms(1)"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<sigma>\n\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<sigma>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation A C (H \\<circ> F) (K \\<circ> G)\n     (\\<tau> \\<circ> \\<sigma>)", "interpret \\<tau>: natural_transformation B C H K \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation B C H K \\<tau>", "using assms(2)"], ["proof (prove)\nusing this:\n  natural_transformation B C H K \\<tau>\n\ngoal (1 subgoal):\n 1. natural_transformation B C H K \\<tau>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation A C (H \\<circ> F) (K \\<circ> G)\n     (\\<tau> \\<circ> \\<sigma>)", "interpret HF: composite_functor A B C F H"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor A B C F H", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation A C HF.map (K \\<circ> G)\n     (\\<tau> \\<circ> \\<sigma>)", "interpret KG: composite_functor A B C G K"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor A B C G K", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation A C HF.map KG.map (\\<tau> \\<circ> \\<sigma>)", "show \"natural_transformation A C (H o F) (K o G) (\\<tau> o \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A C HF.map KG.map (\\<tau> \\<circ> \\<sigma>)", "using \\<sigma>.is_extensional \\<tau>.is_extensional"], ["proof (prove)\nusing this:\n  \\<not> \\<sigma>.A.arr ?f \\<Longrightarrow> \\<sigma> ?f = \\<sigma>.B.null\n  \\<not> \\<sigma>.B.arr ?f \\<Longrightarrow> \\<tau> ?f = \\<tau>.B.null\n\ngoal (1 subgoal):\n 1. natural_transformation A C HF.map KG.map (\\<tau> \\<circ> \\<sigma>)", "apply (unfold_locales, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<sigma>.A.arr f;\n        \\<And>f.\n           \\<not> \\<sigma>.A.arr f \\<Longrightarrow>\n           \\<sigma> f = \\<sigma>.B.null;\n        \\<And>f.\n           \\<not> \\<sigma>.B.arr f \\<Longrightarrow>\n           \\<tau> f = \\<tau>.B.null\\<rbrakk>\n       \\<Longrightarrow> C (K (G f))\n                          (\\<tau> (\\<sigma> (\\<sigma>.A.dom f))) =\n                         \\<tau> (\\<sigma> f)\n 2. \\<And>f.\n       \\<lbrakk>\\<sigma>.A.arr f;\n        \\<And>f.\n           \\<not> \\<sigma>.A.arr f \\<Longrightarrow>\n           \\<sigma> f = \\<sigma>.B.null;\n        \\<And>f.\n           \\<not> \\<sigma>.B.arr f \\<Longrightarrow>\n           \\<tau> f = \\<tau>.B.null\\<rbrakk>\n       \\<Longrightarrow> C (\\<tau> (\\<sigma> (\\<sigma>.A.cod f)))\n                          (H (F f)) =\n                         \\<tau> (\\<sigma> f)", "apply (metis \\<sigma>.is_natural_1 \\<sigma>.preserves_reflects_arr \\<tau>.preserves_comp_1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>\\<sigma>.A.arr f;\n        \\<And>f.\n           \\<not> \\<sigma>.A.arr f \\<Longrightarrow>\n           \\<sigma> f = \\<sigma>.B.null;\n        \\<And>f.\n           \\<not> \\<sigma>.B.arr f \\<Longrightarrow>\n           \\<tau> f = \\<tau>.B.null\\<rbrakk>\n       \\<Longrightarrow> C (\\<tau> (\\<sigma> (\\<sigma>.A.cod f)))\n                          (H (F f)) =\n                         \\<tau> (\\<sigma> f)", "by (metis \\<sigma>.is_natural_2 \\<sigma>.preserves_reflects_arr \\<tau>.preserves_comp_2)"], ["proof (state)\nthis:\n  natural_transformation A C HF.map KG.map (\\<tau> \\<circ> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hcomp_ide_dom [simp]:\n  assumes \"natural_transformation A B F G \\<tau>\"\n  shows \"\\<tau> o (identity_functor.map A) = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> identity_functor.map A = \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> identity_functor.map A = \\<tau>", "interpret \\<tau>: natural_transformation A B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<tau>", "using assms"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<tau>\n\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> \\<tau>.A.map = \\<tau>", "show \"\\<tau> o \\<tau>.A.map = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> \\<tau>.A.map = \\<tau>", "using \\<tau>.A.map_def \\<tau>.is_extensional"], ["proof (prove)\nusing this:\n  \\<tau>.A.map ?f = (if \\<tau>.A.arr ?f then ?f else \\<tau>.A.null)\n  \\<not> \\<tau>.A.arr ?f \\<Longrightarrow> \\<tau> ?f = \\<tau>.B.null\n\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> \\<tau>.A.map = \\<tau>", "by fastforce"], ["proof (state)\nthis:\n  \\<tau> \\<circ> \\<tau>.A.map = \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hcomp_ide_cod [simp]:\n  assumes \"natural_transformation A B F G \\<tau>\"\n  shows \"(identity_functor.map B) o \\<tau> = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. identity_functor.map B \\<circ> \\<tau> = \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. identity_functor.map B \\<circ> \\<tau> = \\<tau>", "interpret \\<tau>: natural_transformation A B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<tau>", "using assms"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<tau>\n\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>.B.map \\<circ> \\<tau> = \\<tau>", "show \"\\<tau>.B.map o \\<tau> = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>.B.map \\<circ> \\<tau> = \\<tau>", "using \\<tau>.B.map_def \\<tau>.is_extensional"], ["proof (prove)\nusing this:\n  \\<tau>.B.map ?f = (if \\<tau>.B.arr ?f then ?f else \\<tau>.B.null)\n  \\<not> \\<tau>.A.arr ?f \\<Longrightarrow> \\<tau> ?f = \\<tau>.B.null\n\ngoal (1 subgoal):\n 1. \\<tau>.B.map \\<circ> \\<tau> = \\<tau>", "by auto"], ["proof (state)\nthis:\n  \\<tau>.B.map \\<circ> \\<tau> = \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n    Horizontal composition of a functor with a vertical composite.\n\\<close>"], ["", "lemma whisker_right:\n  assumes \"functor A B F\"\n  and \"natural_transformation B C H K \\<tau>\" and \"natural_transformation B C K L \\<tau>'\"\n  shows \"(vertical_composite.map B C \\<tau> \\<tau>') o F = vertical_composite.map A C (\\<tau> o F) (\\<tau>' o F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map B C \\<tau> \\<tau>' \\<circ> F =\n    vertical_composite.map A C (\\<tau> \\<circ> F) (\\<tau>' \\<circ> F)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map B C \\<tau> \\<tau>' \\<circ> F =\n    vertical_composite.map A C (\\<tau> \\<circ> F) (\\<tau>' \\<circ> F)", "interpret F: \"functor\" A B F"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor A B F", "using assms(1)"], ["proof (prove)\nusing this:\n  functor A B F\n\ngoal (1 subgoal):\n 1. functor A B F", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map B C \\<tau> \\<tau>' \\<circ> F =\n    vertical_composite.map A C (\\<tau> \\<circ> F) (\\<tau>' \\<circ> F)", "interpret \\<tau>: natural_transformation B C H K \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation B C H K \\<tau>", "using assms(2)"], ["proof (prove)\nusing this:\n  natural_transformation B C H K \\<tau>\n\ngoal (1 subgoal):\n 1. natural_transformation B C H K \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map B C \\<tau> \\<tau>' \\<circ> F =\n    vertical_composite.map A C (\\<tau> \\<circ> F) (\\<tau>' \\<circ> F)", "interpret \\<tau>': natural_transformation B C K L \\<tau>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation B C K L \\<tau>'", "using assms(3)"], ["proof (prove)\nusing this:\n  natural_transformation B C K L \\<tau>'\n\ngoal (1 subgoal):\n 1. natural_transformation B C K L \\<tau>'", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map B C \\<tau> \\<tau>' \\<circ> F =\n    vertical_composite.map A C (\\<tau> \\<circ> F) (\\<tau>' \\<circ> F)", "interpret \\<tau>oF: natural_transformation A C \\<open>H o F\\<close> \\<open>K o F\\<close> \\<open>\\<tau> o F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A C (H \\<circ> F) (K \\<circ> F)\n     (\\<tau> \\<circ> F)", "using \\<tau>.natural_transformation_axioms F.natural_transformation_axioms\n            horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation B C H K \\<tau>\n  natural_transformation A B F F F\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation A C (H \\<circ> F) (K \\<circ> F)\n     (\\<tau> \\<circ> F)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map B C \\<tau> \\<tau>' \\<circ> F =\n    vertical_composite.map A C (\\<tau> \\<circ> F) (\\<tau>' \\<circ> F)", "interpret \\<tau>'oF: natural_transformation A C \\<open>K o F\\<close> \\<open>L o F\\<close> \\<open>\\<tau>' o F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A C (K \\<circ> F) (L \\<circ> F)\n     (\\<tau>' \\<circ> F)", "using \\<tau>'.natural_transformation_axioms F.natural_transformation_axioms\n            horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation B C K L \\<tau>'\n  natural_transformation A B F F F\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation A C (K \\<circ> F) (L \\<circ> F)\n     (\\<tau>' \\<circ> F)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map B C \\<tau> \\<tau>' \\<circ> F =\n    vertical_composite.map A C (\\<tau> \\<circ> F) (\\<tau>' \\<circ> F)", "interpret \\<tau>'\\<tau>: vertical_composite B C H K L \\<tau> \\<tau>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite B C H K L \\<tau> \\<tau>'", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>'\\<tau>.map \\<circ> F =\n    vertical_composite.map A C (\\<tau> \\<circ> F) (\\<tau>' \\<circ> F)", "interpret \\<tau>'\\<tau>oF: natural_transformation A C \\<open>H o F\\<close> \\<open>L o F\\<close> \\<open>\\<tau>'\\<tau>.map o F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A C (H \\<circ> F) (L \\<circ> F)\n     (\\<tau>'\\<tau>.map \\<circ> F)", "using \\<tau>'\\<tau>.natural_transformation_axioms F.natural_transformation_axioms\n            horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation B C H L \\<tau>'\\<tau>.map\n  natural_transformation A B F F F\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation A C (H \\<circ> F) (L \\<circ> F)\n     (\\<tau>'\\<tau>.map \\<circ> F)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>'\\<tau>.map \\<circ> F =\n    vertical_composite.map A C (\\<tau> \\<circ> F) (\\<tau>' \\<circ> F)", "interpret \\<tau>'oF_\\<tau>oF: vertical_composite A C \\<open>H o F\\<close> \\<open>K o F\\<close> \\<open>L o F\\<close> \\<open>\\<tau> o F\\<close> \\<open>\\<tau>' o F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A C (H \\<circ> F) (K \\<circ> F) (L \\<circ> F)\n     (\\<tau> \\<circ> F) (\\<tau>' \\<circ> F)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>'\\<tau>.map \\<circ> F = \\<tau>'oF_\\<tau>oF.map", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>'\\<tau>.map \\<circ> F = \\<tau>'oF_\\<tau>oF.map", "using \\<tau>'oF_\\<tau>oF.map_def \\<tau>'\\<tau>.map_def \\<tau>'\\<tau>oF.is_extensional"], ["proof (prove)\nusing this:\n  \\<tau>'oF_\\<tau>oF.map ?f =\n  (if F.A.arr ?f\n   then C ((\\<tau>' \\<circ> F) (F.A.cod ?f)) ((\\<tau> \\<circ> F) ?f)\n   else \\<tau>.B.null)\n  \\<tau>'\\<tau>.map ?f =\n  (if F.B.arr ?f then C (\\<tau>' (F.B.cod ?f)) (\\<tau> ?f)\n   else \\<tau>.B.null)\n  \\<not> F.A.arr ?f \\<Longrightarrow>\n  (\\<tau>'\\<tau>.map \\<circ> F) ?f = \\<tau>.B.null\n\ngoal (1 subgoal):\n 1. \\<tau>'\\<tau>.map \\<circ> F = \\<tau>'oF_\\<tau>oF.map", "by auto"], ["proof (state)\nthis:\n  \\<tau>'\\<tau>.map \\<circ> F = \\<tau>'oF_\\<tau>oF.map\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n    Horizontal composition of a vertical composite with a functor.\n\\<close>"], ["", "lemma whisker_left:\n  assumes \"functor B C K\"\n  and \"natural_transformation A B F G \\<tau>\" and \"natural_transformation A B G H \\<tau>'\"\n  shows \"K o (vertical_composite.map A B \\<tau> \\<tau>') = vertical_composite.map A C (K o \\<tau>) (K o \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K \\<circ> vertical_composite.map A B \\<tau> \\<tau>' =\n    vertical_composite.map A C (K \\<circ> \\<tau>) (K \\<circ> \\<tau>')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. K \\<circ> vertical_composite.map A B \\<tau> \\<tau>' =\n    vertical_composite.map A C (K \\<circ> \\<tau>) (K \\<circ> \\<tau>')", "interpret K: \"functor\" B C K"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor B C K", "using assms(1)"], ["proof (prove)\nusing this:\n  functor B C K\n\ngoal (1 subgoal):\n 1. functor B C K", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. K \\<circ> vertical_composite.map A B \\<tau> \\<tau>' =\n    vertical_composite.map A C (K \\<circ> \\<tau>) (K \\<circ> \\<tau>')", "interpret \\<tau>: natural_transformation A B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<tau>", "using assms(2)"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<tau>\n\ngoal (1 subgoal):\n 1. natural_transformation A B F G \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. K \\<circ> vertical_composite.map A B \\<tau> \\<tau>' =\n    vertical_composite.map A C (K \\<circ> \\<tau>) (K \\<circ> \\<tau>')", "interpret \\<tau>': natural_transformation A B G H \\<tau>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A B G H \\<tau>'", "using assms(3)"], ["proof (prove)\nusing this:\n  natural_transformation A B G H \\<tau>'\n\ngoal (1 subgoal):\n 1. natural_transformation A B G H \\<tau>'", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. K \\<circ> vertical_composite.map A B \\<tau> \\<tau>' =\n    vertical_composite.map A C (K \\<circ> \\<tau>) (K \\<circ> \\<tau>')", "interpret \\<tau>'\\<tau>: vertical_composite A B F G H \\<tau> \\<tau>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A B F G H \\<tau> \\<tau>'", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. K \\<circ> \\<tau>'\\<tau>.map =\n    vertical_composite.map A C (K \\<circ> \\<tau>) (K \\<circ> \\<tau>')", "interpret Ko\\<tau>: natural_transformation A C \\<open>K o F\\<close> \\<open>K o G\\<close> \\<open>K o \\<tau>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A C (K \\<circ> F) (K \\<circ> G)\n     (K \\<circ> \\<tau>)", "using \\<tau>.natural_transformation_axioms K.natural_transformation_axioms\n            horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation A B F G \\<tau>\n  natural_transformation B C K K K\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation A C (K \\<circ> F) (K \\<circ> G)\n     (K \\<circ> \\<tau>)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. K \\<circ> \\<tau>'\\<tau>.map =\n    vertical_composite.map A C (K \\<circ> \\<tau>) (K \\<circ> \\<tau>')", "interpret Ko\\<tau>': natural_transformation A C \\<open>K o G\\<close> \\<open>K o H\\<close> \\<open>K o \\<tau>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A C (K \\<circ> G) (K \\<circ> H)\n     (K \\<circ> \\<tau>')", "using \\<tau>'.natural_transformation_axioms K.natural_transformation_axioms\n            horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation A B G H \\<tau>'\n  natural_transformation B C K K K\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation A C (K \\<circ> G) (K \\<circ> H)\n     (K \\<circ> \\<tau>')", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. K \\<circ> \\<tau>'\\<tau>.map =\n    vertical_composite.map A C (K \\<circ> \\<tau>) (K \\<circ> \\<tau>')", "interpret Ko\\<tau>'\\<tau>: natural_transformation A C \\<open>K o F\\<close> \\<open>K o H\\<close> \\<open>K o \\<tau>'\\<tau>.map\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation A C (K \\<circ> F) (K \\<circ> H)\n     (K \\<circ> \\<tau>'\\<tau>.map)", "using \\<tau>'\\<tau>.natural_transformation_axioms K.natural_transformation_axioms\n            horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation A B F H \\<tau>'\\<tau>.map\n  natural_transformation B C K K K\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation A C (K \\<circ> F) (K \\<circ> H)\n     (K \\<circ> \\<tau>'\\<tau>.map)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. K \\<circ> \\<tau>'\\<tau>.map =\n    vertical_composite.map A C (K \\<circ> \\<tau>) (K \\<circ> \\<tau>')", "interpret Ko\\<tau>'_Ko\\<tau>: vertical_composite A C \\<open>K o F\\<close> \\<open>K o G\\<close> \\<open>K o H\\<close> \\<open>K o \\<tau>\\<close> \\<open>K o \\<tau>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite A C (K \\<circ> F) (K \\<circ> G) (K \\<circ> H)\n     (K \\<circ> \\<tau>) (K \\<circ> \\<tau>')", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. K \\<circ> \\<tau>'\\<tau>.map = Ko\\<tau>'_Ko\\<tau>.map", "show \"K o \\<tau>'\\<tau>.map = Ko\\<tau>'_Ko\\<tau>.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K \\<circ> \\<tau>'\\<tau>.map = Ko\\<tau>'_Ko\\<tau>.map", "using Ko\\<tau>'_Ko\\<tau>.map_def \\<tau>'\\<tau>.map_def Ko\\<tau>'\\<tau>.is_extensional Ko\\<tau>'_Ko\\<tau>.map_simp_1 \\<tau>'\\<tau>.map_simp_1"], ["proof (prove)\nusing this:\n  Ko\\<tau>'_Ko\\<tau>.map ?f =\n  (if \\<tau>.A.arr ?f\n   then C ((K \\<circ> \\<tau>') (\\<tau>.A.cod ?f)) ((K \\<circ> \\<tau>) ?f)\n   else K.B.null)\n  \\<tau>'\\<tau>.map ?f =\n  (if \\<tau>.A.arr ?f then B (\\<tau>' (\\<tau>.A.cod ?f)) (\\<tau> ?f)\n   else K.A.null)\n  \\<not> \\<tau>.A.arr ?f \\<Longrightarrow>\n  (K \\<circ> \\<tau>'\\<tau>.map) ?f = K.B.null\n  \\<tau>.A.arr ?f \\<Longrightarrow>\n  Ko\\<tau>'_Ko\\<tau>.map ?f =\n  C ((K \\<circ> \\<tau>') (\\<tau>.A.cod ?f)) ((K \\<circ> \\<tau>) ?f)\n  \\<tau>.A.arr ?f \\<Longrightarrow>\n  \\<tau>'\\<tau>.map ?f = B (\\<tau>' (\\<tau>.A.cod ?f)) (\\<tau> ?f)\n\ngoal (1 subgoal):\n 1. K \\<circ> \\<tau>'\\<tau>.map = Ko\\<tau>'_Ko\\<tau>.map", "by auto"], ["proof (state)\nthis:\n  K \\<circ> \\<tau>'\\<tau>.map = Ko\\<tau>'_Ko\\<tau>.map\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n    The interchange law for horizontal and vertical composition.\n\\<close>"], ["", "lemma interchange:\n  assumes \"natural_transformation B C F G \\<tau>\" and \"natural_transformation B C G H \\<nu>\"\n  and \"natural_transformation C D K L \\<sigma>\" and \"natural_transformation C D L M \\<mu>\"\n  shows \"vertical_composite.map C D \\<sigma> \\<mu> \\<circ> vertical_composite.map B C \\<tau> \\<nu> =\n         vertical_composite.map B D (\\<sigma> \\<circ> \\<tau>) (\\<mu> \\<circ> \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map C D \\<sigma> \\<mu> \\<circ>\n    vertical_composite.map B C \\<tau> \\<nu> =\n    vertical_composite.map B D (\\<sigma> \\<circ> \\<tau>)\n     (\\<mu> \\<circ> \\<nu>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map C D \\<sigma> \\<mu> \\<circ>\n    vertical_composite.map B C \\<tau> \\<nu> =\n    vertical_composite.map B D (\\<sigma> \\<circ> \\<tau>)\n     (\\<mu> \\<circ> \\<nu>)", "interpret \\<tau>: natural_transformation B C F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation B C F G \\<tau>", "using assms(1)"], ["proof (prove)\nusing this:\n  natural_transformation B C F G \\<tau>\n\ngoal (1 subgoal):\n 1. natural_transformation B C F G \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map C D \\<sigma> \\<mu> \\<circ>\n    vertical_composite.map B C \\<tau> \\<nu> =\n    vertical_composite.map B D (\\<sigma> \\<circ> \\<tau>)\n     (\\<mu> \\<circ> \\<nu>)", "interpret \\<nu>: natural_transformation B C G H \\<nu>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation B C G H \\<nu>", "using assms(2)"], ["proof (prove)\nusing this:\n  natural_transformation B C G H \\<nu>\n\ngoal (1 subgoal):\n 1. natural_transformation B C G H \\<nu>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map C D \\<sigma> \\<mu> \\<circ>\n    vertical_composite.map B C \\<tau> \\<nu> =\n    vertical_composite.map B D (\\<sigma> \\<circ> \\<tau>)\n     (\\<mu> \\<circ> \\<nu>)", "interpret \\<sigma>: natural_transformation C D K L \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation C D K L \\<sigma>", "using assms(3)"], ["proof (prove)\nusing this:\n  natural_transformation C D K L \\<sigma>\n\ngoal (1 subgoal):\n 1. natural_transformation C D K L \\<sigma>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map C D \\<sigma> \\<mu> \\<circ>\n    vertical_composite.map B C \\<tau> \\<nu> =\n    vertical_composite.map B D (\\<sigma> \\<circ> \\<tau>)\n     (\\<mu> \\<circ> \\<nu>)", "interpret \\<mu>: natural_transformation C D L M \\<mu>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation C D L M \\<mu>", "using assms(4)"], ["proof (prove)\nusing this:\n  natural_transformation C D L M \\<mu>\n\ngoal (1 subgoal):\n 1. natural_transformation C D L M \\<mu>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map C D \\<sigma> \\<mu> \\<circ>\n    vertical_composite.map B C \\<tau> \\<nu> =\n    vertical_composite.map B D (\\<sigma> \\<circ> \\<tau>)\n     (\\<mu> \\<circ> \\<nu>)", "interpret \\<nu>\\<tau>: vertical_composite B C F G H \\<tau> \\<nu>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite B C F G H \\<tau> \\<nu>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map C D \\<sigma> \\<mu> \\<circ> \\<nu>\\<tau>.map =\n    vertical_composite.map B D (\\<sigma> \\<circ> \\<tau>)\n     (\\<mu> \\<circ> \\<nu>)", "interpret \\<mu>\\<sigma>: vertical_composite C D K L M \\<sigma> \\<mu>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite C D K L M \\<sigma> \\<mu>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map =\n    vertical_composite.map B D (\\<sigma> \\<circ> \\<tau>)\n     (\\<mu> \\<circ> \\<nu>)", "interpret \\<sigma>o\\<tau>: natural_transformation B D \\<open>K o F\\<close> \\<open>L o G\\<close> \\<open>\\<sigma> o \\<tau>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation B D (K \\<circ> F) (L \\<circ> G)\n     (\\<sigma> \\<circ> \\<tau>)", "using \\<sigma>.natural_transformation_axioms \\<tau>.natural_transformation_axioms\n            horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation C D K L \\<sigma>\n  natural_transformation B C F G \\<tau>\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation B D (K \\<circ> F) (L \\<circ> G)\n     (\\<sigma> \\<circ> \\<tau>)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map =\n    vertical_composite.map B D (\\<sigma> \\<circ> \\<tau>)\n     (\\<mu> \\<circ> \\<nu>)", "interpret \\<mu>o\\<nu>: natural_transformation B D \\<open>L o G\\<close> \\<open>M o H\\<close> \\<open>\\<mu> o \\<nu>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation B D (L \\<circ> G) (M \\<circ> H)\n     (\\<mu> \\<circ> \\<nu>)", "using \\<mu>.natural_transformation_axioms \\<nu>.natural_transformation_axioms\n            horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation C D L M \\<mu>\n  natural_transformation B C G H \\<nu>\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation B D (L \\<circ> G) (M \\<circ> H)\n     (\\<mu> \\<circ> \\<nu>)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map =\n    vertical_composite.map B D (\\<sigma> \\<circ> \\<tau>)\n     (\\<mu> \\<circ> \\<nu>)", "interpret \\<mu>\\<sigma>o\\<nu>\\<tau>: natural_transformation B D \\<open>K o F\\<close> \\<open>M o H\\<close> \\<open>\\<mu>\\<sigma>.map o \\<nu>\\<tau>.map\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation B D (K \\<circ> F) (M \\<circ> H)\n     (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map)", "using \\<mu>\\<sigma>.natural_transformation_axioms \\<nu>\\<tau>.natural_transformation_axioms\n            horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation C D K M \\<mu>\\<sigma>.map\n  natural_transformation B C F H \\<nu>\\<tau>.map\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation B D (K \\<circ> F) (M \\<circ> H)\n     (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map =\n    vertical_composite.map B D (\\<sigma> \\<circ> \\<tau>)\n     (\\<mu> \\<circ> \\<nu>)", "interpret \\<mu>o\\<nu>_\\<sigma>o\\<tau>: vertical_composite B D \\<open>K o F\\<close> \\<open>L o G\\<close> \\<open>M o H\\<close> \\<open>\\<sigma> o \\<tau>\\<close> \\<open>\\<mu> o \\<nu>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite B D (K \\<circ> F) (L \\<circ> G) (M \\<circ> H)\n     (\\<sigma> \\<circ> \\<tau>) (\\<mu> \\<circ> \\<nu>)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map =\n    \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map", "show \"\\<mu>\\<sigma>.map o \\<nu>\\<tau>.map = \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map =\n    \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map", "proof (intro eqI)"], ["proof (state)\ngoal (3 subgoals):\n 1. natural_transformation ?A ?B ?F ?G\n     (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map)\n 2. natural_transformation ?A ?B ?F ?G \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map\n 3. \\<And>a.\n       partial_magma.ide ?A a \\<Longrightarrow>\n       (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n       \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "show \"natural_transformation B D (K \\<circ> F) (M \\<circ> H) (\\<mu>\\<sigma>.map o \\<nu>\\<tau>.map)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation B D (K \\<circ> F) (M \\<circ> H)\n     (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map)", ".."], ["proof (state)\nthis:\n  natural_transformation B D (K \\<circ> F) (M \\<circ> H)\n   (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map)\n\ngoal (2 subgoals):\n 1. natural_transformation B D (K \\<circ> F) (M \\<circ> H)\n     \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map\n 2. \\<And>a.\n       \\<tau>.A.ide a \\<Longrightarrow>\n       (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n       \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "show \"natural_transformation B D (K \\<circ> F) (M \\<circ> H) \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation B D (K \\<circ> F) (M \\<circ> H)\n     \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map", ".."], ["proof (state)\nthis:\n  natural_transformation B D (K \\<circ> F) (M \\<circ> H)\n   \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<tau>.A.ide a \\<Longrightarrow>\n       (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n       \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "show \"\\<And>a. \\<tau>.A.ide a \\<Longrightarrow> (\\<mu>\\<sigma>.map o \\<nu>\\<tau>.map) a = \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<tau>.A.ide a \\<Longrightarrow>\n       (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n       \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<tau>.A.ide a \\<Longrightarrow>\n       (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n       \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<tau>.A.ide a \\<Longrightarrow>\n       (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n       \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "assume a: \"\\<tau>.A.ide a\""], ["proof (state)\nthis:\n  \\<tau>.A.ide a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<tau>.A.ide a \\<Longrightarrow>\n       (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n       \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "have \"(\\<mu>\\<sigma>.map o \\<nu>\\<tau>.map) a = D (\\<mu> (H a)) (\\<sigma> (C (\\<nu> a) (\\<tau> a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n    D (\\<mu> (H a)) (\\<sigma> (C (\\<nu> a) (\\<tau> a)))", "using a \\<mu>\\<sigma>.map_simp_1 \\<nu>\\<tau>.map_simp_2"], ["proof (prove)\nusing this:\n  \\<tau>.A.ide a\n  \\<tau>.B.arr ?f \\<Longrightarrow>\n  \\<mu>\\<sigma>.map ?f = D (\\<mu> (\\<tau>.B.cod ?f)) (\\<sigma> ?f)\n  \\<tau>.A.arr ?f \\<Longrightarrow>\n  \\<nu>\\<tau>.map ?f = C (\\<nu> ?f) (\\<tau> (\\<tau>.A.dom ?f))\n\ngoal (1 subgoal):\n 1. (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n    D (\\<mu> (H a)) (\\<sigma> (C (\\<nu> a) (\\<tau> a)))", "by simp"], ["proof (state)\nthis:\n  (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n  D (\\<mu> (H a)) (\\<sigma> (C (\\<nu> a) (\\<tau> a)))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<tau>.A.ide a \\<Longrightarrow>\n       (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n       \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "also"], ["proof (state)\nthis:\n  (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n  D (\\<mu> (H a)) (\\<sigma> (C (\\<nu> a) (\\<tau> a)))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<tau>.A.ide a \\<Longrightarrow>\n       (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n       \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "have \"... = D (\\<mu> (\\<nu> a)) (\\<sigma> (\\<tau> a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D (\\<mu> (H a)) (\\<sigma> (C (\\<nu> a) (\\<tau> a))) =\n    D (\\<mu> (\\<nu> a)) (\\<sigma> (\\<tau> a))", "using a"], ["proof (prove)\nusing this:\n  \\<tau>.A.ide a\n\ngoal (1 subgoal):\n 1. D (\\<mu> (H a)) (\\<sigma> (C (\\<nu> a) (\\<tau> a))) =\n    D (\\<mu> (\\<nu> a)) (\\<sigma> (\\<tau> a))", "by (metis (full_types) \\<mu>.is_natural_1 \\<mu>\\<sigma>.map_simp_1 \\<mu>\\<sigma>.preserves_comp_1\n              \\<nu>\\<tau>.map_seq \\<nu>\\<tau>.map_simp_1 \\<nu>\\<tau>.preserves_cod \\<sigma>.B.comp_assoc \\<tau>.A.ide_char \\<tau>.B.seqE)"], ["proof (state)\nthis:\n  D (\\<mu> (H a)) (\\<sigma> (C (\\<nu> a) (\\<tau> a))) =\n  D (\\<mu> (\\<nu> a)) (\\<sigma> (\\<tau> a))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<tau>.A.ide a \\<Longrightarrow>\n       (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n       \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "also"], ["proof (state)\nthis:\n  D (\\<mu> (H a)) (\\<sigma> (C (\\<nu> a) (\\<tau> a))) =\n  D (\\<mu> (\\<nu> a)) (\\<sigma> (\\<tau> a))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<tau>.A.ide a \\<Longrightarrow>\n       (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n       \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "have \"... = \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D (\\<mu> (\\<nu> a)) (\\<sigma> (\\<tau> a)) =\n    \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "using a \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map_simp_ide"], ["proof (prove)\nusing this:\n  \\<tau>.A.ide a\n  \\<tau>.A.ide ?a \\<Longrightarrow>\n  \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map ?a =\n  D ((\\<mu> \\<circ> \\<nu>) ?a) ((\\<sigma> \\<circ> \\<tau>) ?a)\n\ngoal (1 subgoal):\n 1. D (\\<mu> (\\<nu> a)) (\\<sigma> (\\<tau> a)) =\n    \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "by simp"], ["proof (state)\nthis:\n  D (\\<mu> (\\<nu> a)) (\\<sigma> (\\<tau> a)) =\n  \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<tau>.A.ide a \\<Longrightarrow>\n       (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n       \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "finally"], ["proof (chain)\npicking this:\n  (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n  \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "show \"(\\<mu>\\<sigma>.map o \\<nu>\\<tau>.map) a = \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a\""], ["proof (prove)\nusing this:\n  (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n  \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a\n\ngoal (1 subgoal):\n 1. (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n    \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a", "by blast"], ["proof (state)\nthis:\n  (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) a =\n  \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<tau>.A.ide ?a \\<Longrightarrow>\n  (\\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map) ?a =\n  \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map ?a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<mu>\\<sigma>.map \\<circ> \\<nu>\\<tau>.map =\n  \\<mu>o\\<nu>_\\<sigma>o\\<tau>.map\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n    A special-case of the interchange law in which two of the natural transformations\n    are functors.  It comes up reasonably often, and the reasoning is awkward.\n\\<close>"], ["", "lemma interchange_spc:\n  assumes \"natural_transformation B C F G \\<sigma>\"\n  and \"natural_transformation C D H K \\<tau>\"\n  shows \"\\<tau> \\<circ> \\<sigma> = vertical_composite.map B D (H o \\<sigma>) (\\<tau> o G)\"\n  and \"\\<tau> \\<circ> \\<sigma> = vertical_composite.map B D (\\<tau> o F) (K o \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> \\<sigma> =\n    vertical_composite.map B D (H \\<circ> \\<sigma>) (\\<tau> \\<circ> G) &&&\n    \\<tau> \\<circ> \\<sigma> =\n    vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<tau> \\<circ> \\<sigma> =\n    vertical_composite.map B D (H \\<circ> \\<sigma>) (\\<tau> \\<circ> G)\n 2. \\<tau> \\<circ> \\<sigma> =\n    vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)", "show \"\\<tau> \\<circ> \\<sigma> = vertical_composite.map B D (H \\<circ> \\<sigma>) (\\<tau> \\<circ> G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> \\<sigma> =\n    vertical_composite.map B D (H \\<circ> \\<sigma>) (\\<tau> \\<circ> G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> \\<sigma> =\n    vertical_composite.map B D (H \\<circ> \\<sigma>) (\\<tau> \\<circ> G)", "have \"vertical_composite.map C D H \\<tau> \\<circ> vertical_composite.map B C \\<sigma> G =\n            vertical_composite.map B D (H \\<circ> \\<sigma>) (\\<tau> \\<circ> G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map C D H \\<tau> \\<circ>\n    vertical_composite.map B C \\<sigma> G =\n    vertical_composite.map B D (H \\<circ> \\<sigma>) (\\<tau> \\<circ> G)", "by (meson assms functor_is_transformation interchange natural_transformation.axioms(3-4))"], ["proof (state)\nthis:\n  vertical_composite.map C D H \\<tau> \\<circ>\n  vertical_composite.map B C \\<sigma> G =\n  vertical_composite.map B D (H \\<circ> \\<sigma>) (\\<tau> \\<circ> G)\n\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> \\<sigma> =\n    vertical_composite.map B D (H \\<circ> \\<sigma>) (\\<tau> \\<circ> G)", "thus ?thesis"], ["proof (prove)\nusing this:\n  vertical_composite.map C D H \\<tau> \\<circ>\n  vertical_composite.map B C \\<sigma> G =\n  vertical_composite.map B D (H \\<circ> \\<sigma>) (\\<tau> \\<circ> G)\n\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> \\<sigma> =\n    vertical_composite.map B D (H \\<circ> \\<sigma>) (\\<tau> \\<circ> G)", "using assms"], ["proof (prove)\nusing this:\n  vertical_composite.map C D H \\<tau> \\<circ>\n  vertical_composite.map B C \\<sigma> G =\n  vertical_composite.map B D (H \\<circ> \\<sigma>) (\\<tau> \\<circ> G)\n  natural_transformation B C F G \\<sigma>\n  natural_transformation C D H K \\<tau>\n\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> \\<sigma> =\n    vertical_composite.map B D (H \\<circ> \\<sigma>) (\\<tau> \\<circ> G)", "by force"], ["proof (state)\nthis:\n  \\<tau> \\<circ> \\<sigma> =\n  vertical_composite.map B D (H \\<circ> \\<sigma>) (\\<tau> \\<circ> G)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<tau> \\<circ> \\<sigma> =\n  vertical_composite.map B D (H \\<circ> \\<sigma>) (\\<tau> \\<circ> G)\n\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> \\<sigma> =\n    vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)", "show \"\\<tau> \\<circ> \\<sigma> = vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> \\<sigma> =\n    vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> \\<sigma> =\n    vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)", "have \"vertical_composite.map C D \\<tau> K \\<circ> vertical_composite.map B C F \\<sigma> =\n            vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map C D \\<tau> K \\<circ>\n    vertical_composite.map B C F \\<sigma> =\n    vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)", "by (meson assms functor_is_transformation interchange natural_transformation.axioms(3-4))"], ["proof (state)\nthis:\n  vertical_composite.map C D \\<tau> K \\<circ>\n  vertical_composite.map B C F \\<sigma> =\n  vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> \\<sigma> =\n    vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  vertical_composite.map C D \\<tau> K \\<circ>\n  vertical_composite.map B C F \\<sigma> =\n  vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> \\<sigma> =\n    vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)", "using assms"], ["proof (prove)\nusing this:\n  vertical_composite.map C D \\<tau> K \\<circ>\n  vertical_composite.map B C F \\<sigma> =\n  vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)\n  natural_transformation B C F G \\<sigma>\n  natural_transformation C D H K \\<tau>\n\ngoal (1 subgoal):\n 1. \\<tau> \\<circ> \\<sigma> =\n    vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)", "by force"], ["proof (state)\nthis:\n  \\<tau> \\<circ> \\<sigma> =\n  vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<tau> \\<circ> \\<sigma> =\n  vertical_composite.map B D (\\<tau> \\<circ> F) (K \\<circ> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}