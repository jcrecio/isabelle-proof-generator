{"file_name": "/home/qj213/afp-2021-10-22/thys/Category3/FunctorCategory.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Category3", "problem_names": ["lemma arrI [intro]:\n    assumes \"f \\<noteq> null\" and \"natural_transformation A B (Dom f) (Cod f) (Map f)\"\n    shows \"arr f\"", "lemma arrE [elim]:\n    assumes \"arr f\"\n    and \"f \\<noteq> null \\<Longrightarrow> natural_transformation A B (Dom f) (Cod f) (Map f) \\<Longrightarrow> T\"\n    shows T", "lemma arr_MkArr [iff]:\n    shows \"arr (MkArr F G \\<tau>) \\<longleftrightarrow> natural_transformation A B F G \\<tau>\"", "lemma ide_char [iff]:\n    shows \"ide t \\<longleftrightarrow> t \\<noteq> null \\<and> functor A B (Map t) \\<and> Dom t = Map t \\<and> Cod t = Map t\"", "lemma Map_comp [simp]:\n    assumes \"seq t' t\" and \"A.seq a' a\"\n    shows \"Map (t' \\<cdot> t) (a' \\<cdot>\\<^sub>A a) = Map t' a' \\<cdot>\\<^sub>B Map t a\"", "lemma Map_comp':\n    assumes \"seq t' t\"\n    shows \"Map (t' \\<cdot> t) = vertical_composite.map A B (Map t) (Map t')\"", "lemma MkArr_eqI [intro]:\n    assumes \"arr (MkArr F G \\<tau>)\"\n    and \"F = F'\" and \"G = G'\" and \"\\<tau> = \\<tau>'\"\n    shows \"MkArr F G \\<tau> = MkArr F' G' \\<tau>'\"", "lemma MkArr_eqI' [intro]:\n    assumes \"arr (MkArr F G \\<tau>)\" and \"\\<tau> = \\<tau>'\"\n    shows \"MkArr F G \\<tau> = MkArr F G \\<tau>'\"", "lemma iso_char [iff]:\n    shows \"iso t \\<longleftrightarrow> t \\<noteq> null \\<and> natural_isomorphism A B (Dom t) (Cod t) (Map t)\"", "lemma map_simp:\n    assumes \"A_BxA.arr Fg\"\n    shows \"map Fg = A_B.Map(fst Fg) (snd Fg)\"", "lemma is_functor:\n    shows \"functor A_BxA.comp B map\"", "lemma curry_simp:\n    assumes \"A1.arr f1\"\n    shows \"curry F G \\<tau> f1 = A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n                                       (\\<lambda>f2. \\<tau> (f1, f2))\"", "lemma uncurry_simp:\n    assumes \"A1xA2.arr f\"\n    shows \"uncurry \\<tau> f = E.map (\\<tau> (fst f), snd f)\"", "lemma curry_in_hom:\n    assumes f1: \"A1.arr f1\"\n    and \"natural_transformation A1xA2.comp B F G \\<tau>\"\n    shows \"\\<guillemotleft>curry F G \\<tau> f1 : curry F F F (A1.dom f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] curry G G G (A1.cod f1)\\<guillemotright>\"", "lemma curry_preserves_functors:\n    assumes \"functor A1xA2.comp B F\"\n    shows \"functor A1 A2_B.comp (curry F F F)\"", "lemma curry_preserves_transformations:\n    assumes \"natural_transformation A1xA2.comp B F G \\<tau>\"\n    shows \"natural_transformation A1 A2_B.comp (curry F F F) (curry G G G) (curry F G \\<tau>)\"", "lemma uncurry_preserves_functors:\n    assumes \"functor A1 A2_B.comp F\"\n    shows \"functor A1xA2.comp B (uncurry F)\"", "lemma uncurry_preserves_transformations:\n    assumes \"natural_transformation A1 A2_B.comp F G \\<tau>\"\n    shows \"natural_transformation A1xA2.comp B (uncurry F) (uncurry G) (uncurry \\<tau>)\"", "lemma uncurry_curry:\n    assumes \"natural_transformation A1xA2.comp B F G \\<tau>\"\n    shows \"uncurry (curry F G \\<tau>) = \\<tau>\"", "lemma curry_uncurry:\n    assumes \"functor A1 A2_B.comp F\" and \"functor A1 A2_B.comp G\"\n    and \"natural_transformation A1 A2_B.comp F G \\<tau>\"\n    shows \"curry (uncurry F) (uncurry G) (uncurry \\<tau>) = \\<tau>\"", "lemma map_simp [simp]:\n    assumes \"A1.arr f1\"\n    shows \"map f1 =\n           A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2))\"", "lemma is_functor:\n    shows \"functor A1 A2_B.comp map\"", "lemma map_simp [simp]:\n    assumes \"A2.arr f2\"\n    shows \"map f2 =\n           A1_B.MkArr (\\<lambda>f1. F (f1, A2.dom f2)) (\\<lambda>f1. F (f1, A2.cod f2)) (\\<lambda>f1. F (f1, f2))\"", "lemma is_functor:\n    shows \"functor A2 A1_B.comp map\""], "translations": [["", "lemma arrI [intro]:\n    assumes \"f \\<noteq> null\" and \"natural_transformation A B (Dom f) (Cod f) (Map f)\"\n    shows \"arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f", "using assms arr_char null_char"], ["proof (prove)\nusing this:\n  f \\<noteq> null\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom f) (Cod f)\n   (Map f)\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Cod ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Map ?f\n   \\<in> Collect\n          (natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n            (Dom ?f) (Cod ?f)))\n  null = Null\n\ngoal (1 subgoal):\n 1. arr f", "by (simp add: natural_transformation_def)"], ["", "lemma arrE [elim]:\n    assumes \"arr f\"\n    and \"f \\<noteq> null \\<Longrightarrow> natural_transformation A B (Dom f) (Cod f) (Map f) \\<Longrightarrow> T\"\n    shows T"], ["proof (prove)\ngoal (1 subgoal):\n 1. T", "using assms arr_char null_char"], ["proof (prove)\nusing this:\n  arr f\n  \\<lbrakk>f \\<noteq> null;\n   natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom f)\n    (Cod f) (Map f)\\<rbrakk>\n  \\<Longrightarrow> T\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Cod ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Map ?f\n   \\<in> Collect\n          (natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n            (Dom ?f) (Cod ?f)))\n  null = Null\n\ngoal (1 subgoal):\n 1. T", "by simp"], ["", "lemma arr_MkArr [iff]:\n    shows \"arr (MkArr F G \\<tau>) \\<longleftrightarrow> natural_transformation A B F G \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr (MkArr F G \\<tau>) =\n    natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F G \\<tau>", "using arr_char null_char arr_MkArr natural_transformation_def"], ["proof (prove)\nusing this:\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Cod ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Map ?f\n   \\<in> Collect\n          (natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n            (Dom ?f) (Cod ?f)))\n  null = Null\n  \\<lbrakk>?A \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B));\n   ?B \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B));\n   ?f \\<in> Collect\n             (natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) ?A\n               ?B)\\<rbrakk>\n  \\<Longrightarrow> arr (MkArr ?A ?B ?f)\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<equiv>\n  (category ?A \\<and> category ?B) \\<and>\n  functor ?A ?B ?F \\<and>\n  functor ?A ?B ?G \\<and> natural_transformation_axioms ?A ?B ?F ?G ?\\<tau>\n\ngoal (1 subgoal):\n 1. arr (MkArr F G \\<tau>) =\n    natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F G \\<tau>", "by fastforce"], ["", "lemma ide_char [iff]:\n    shows \"ide t \\<longleftrightarrow> t \\<noteq> null \\<and> functor A B (Map t) \\<and> Dom t = Map t \\<and> Cod t = Map t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide t =\n    (t \\<noteq> null \\<and>\n     functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Map t) \\<and>\n     Dom t = Map t \\<and> Cod t = Map t)", "using ide_char null_char"], ["proof (prove)\nusing this:\n  ide ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Cod ?f = Dom ?f \\<and> Map ?f = Dom ?f)\n  null = Null\n\ngoal (1 subgoal):\n 1. ide t =\n    (t \\<noteq> null \\<and>\n     functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Map t) \\<and>\n     Dom t = Map t \\<and> Cod t = Map t)", "by fastforce"], ["", "end"], ["", "section \"Additional Properties\""], ["", "text\\<open>\n    In this section some additional facts are proved, which make it easier to\n    work with the @{term \"functor_category\"} locale.\n\\<close>"], ["", "context functor_category\n  begin"], ["", "lemma Map_comp [simp]:\n    assumes \"seq t' t\" and \"A.seq a' a\"\n    shows \"Map (t' \\<cdot> t) (a' \\<cdot>\\<^sub>A a) = Map t' a' \\<cdot>\\<^sub>B Map t a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) (a' \\<cdot>\\<^sub>A a) =\n    Map t' a' \\<cdot>\\<^sub>B Map t a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) (a' \\<cdot>\\<^sub>A a) =\n    Map t' a' \\<cdot>\\<^sub>B Map t a", "interpret t: natural_transformation A B \\<open>Dom t\\<close> \\<open>Cod t\\<close> \\<open>Map t\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t)\n     (Cod t) (Map t)", "using assms(1) arr_char seq_char"], ["proof (prove)\nusing this:\n  seq t' t\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Cod ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Map ?f\n   \\<in> Collect\n          (natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n            (Dom ?f) (Cod ?f)))\n  seq ?g ?f = (arr ?f \\<and> arr ?g \\<and> Dom ?g = Cod ?f)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t)\n     (Cod t) (Map t)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) (a' \\<cdot>\\<^sub>A a) =\n    Map t' a' \\<cdot>\\<^sub>B Map t a", "interpret t': natural_transformation A B \\<open>Cod t\\<close> \\<open>Cod t'\\<close> \\<open>Map t'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Cod t)\n     (Cod t') (Map t')", "using assms(1) arr_char seq_char"], ["proof (prove)\nusing this:\n  seq t' t\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Cod ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Map ?f\n   \\<in> Collect\n          (natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n            (Dom ?f) (Cod ?f)))\n  seq ?g ?f = (arr ?f \\<and> arr ?g \\<and> Dom ?g = Cod ?f)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Cod t)\n     (Cod t') (Map t')", "by force"], ["proof (state)\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) (a' \\<cdot>\\<^sub>A a) =\n    Map t' a' \\<cdot>\\<^sub>B Map t a", "interpret t'ot: vertical_composite A B \\<open>Dom t\\<close> \\<open>Cod t\\<close> \\<open>Cod t'\\<close> \\<open>Map t\\<close> \\<open>Map t'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Cod t') (Map t) (Map t')", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) (a' \\<cdot>\\<^sub>A a) =\n    Map t' a' \\<cdot>\\<^sub>B Map t a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) (a' \\<cdot>\\<^sub>A a) =\n    Map t' a' \\<cdot>\\<^sub>B Map t a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) (a' \\<cdot>\\<^sub>A a) =\n    Map t' a' \\<cdot>\\<^sub>B Map t a", "have \"Map (t' \\<cdot> t) = t'ot.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) = t'ot.map", "using assms(1) seq_char t'ot.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  seq t' t\n  seq ?g ?f = (arr ?f \\<and> arr ?g \\<and> Dom ?g = Cod ?f)\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t)\n   (Cod t') t'ot.map\n\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) = t'ot.map", "by simp"], ["proof (state)\nthis:\n  Map (t' \\<cdot> t) = t'ot.map\n\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) (a' \\<cdot>\\<^sub>A a) =\n    Map t' a' \\<cdot>\\<^sub>B Map t a", "thus ?thesis"], ["proof (prove)\nusing this:\n  Map (t' \\<cdot> t) = t'ot.map\n\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) (a' \\<cdot>\\<^sub>A a) =\n    Map t' a' \\<cdot>\\<^sub>B Map t a", "using assms(2) t'ot.map_simp_2 t'.preserves_comp_2 B.comp_assoc"], ["proof (prove)\nusing this:\n  Map (t' \\<cdot> t) = t'ot.map\n  A.seq a' a\n  A.arr ?f \\<Longrightarrow>\n  t'ot.map ?f = Map t' ?f \\<cdot>\\<^sub>B Map t (A.dom ?f)\n  A.seq ?f' ?f \\<Longrightarrow>\n  Map t' (?f' \\<cdot>\\<^sub>A ?f) = Map t' ?f' \\<cdot>\\<^sub>B Cod t ?f\n  (?h \\<cdot>\\<^sub>B ?g) \\<cdot>\\<^sub>B ?f =\n  ?h \\<cdot>\\<^sub>B ?g \\<cdot>\\<^sub>B ?f\n\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) (a' \\<cdot>\\<^sub>A a) =\n    Map t' a' \\<cdot>\\<^sub>B Map t a", "by auto"], ["proof (state)\nthis:\n  Map (t' \\<cdot> t) (a' \\<cdot>\\<^sub>A a) =\n  Map t' a' \\<cdot>\\<^sub>B Map t a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Map (t' \\<cdot> t) (a' \\<cdot>\\<^sub>A a) =\n  Map t' a' \\<cdot>\\<^sub>B Map t a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Map_comp':\n    assumes \"seq t' t\"\n    shows \"Map (t' \\<cdot> t) = vertical_composite.map A B (Map t) (Map t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) =\n    vertical_composite.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Map t)\n     (Map t')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) =\n    vertical_composite.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Map t)\n     (Map t')", "interpret t: natural_transformation A B \\<open>Dom t\\<close> \\<open>Cod t\\<close> \\<open>Map t\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t)\n     (Cod t) (Map t)", "using assms(1) arr_char seq_char"], ["proof (prove)\nusing this:\n  seq t' t\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Cod ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Map ?f\n   \\<in> Collect\n          (natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n            (Dom ?f) (Cod ?f)))\n  seq ?g ?f = (arr ?f \\<and> arr ?g \\<and> Dom ?g = Cod ?f)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t)\n     (Cod t) (Map t)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) =\n    vertical_composite.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Map t)\n     (Map t')", "interpret t': natural_transformation A B \\<open>Cod t\\<close> \\<open>Cod t'\\<close> \\<open>Map t'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Cod t)\n     (Cod t') (Map t')", "using assms(1) arr_char seq_char"], ["proof (prove)\nusing this:\n  seq t' t\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Cod ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Map ?f\n   \\<in> Collect\n          (natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n            (Dom ?f) (Cod ?f)))\n  seq ?g ?f = (arr ?f \\<and> arr ?g \\<and> Dom ?g = Cod ?f)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Cod t)\n     (Cod t') (Map t')", "by force"], ["proof (state)\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) =\n    vertical_composite.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Map t)\n     (Map t')", "interpret t'ot: vertical_composite A B \\<open>Dom t\\<close> \\<open>Cod t\\<close> \\<open>Cod t'\\<close> \\<open>Map t\\<close> \\<open>Map t'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Cod t') (Map t) (Map t')", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) = t'ot.map", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) = t'ot.map", "using assms(1) seq_char t'ot.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  seq t' t\n  seq ?g ?f = (arr ?f \\<and> arr ?g \\<and> Dom ?g = Cod ?f)\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t)\n   (Cod t') t'ot.map\n\ngoal (1 subgoal):\n 1. Map (t' \\<cdot> t) = t'ot.map", "by simp"], ["proof (state)\nthis:\n  Map (t' \\<cdot> t) = t'ot.map\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma MkArr_eqI [intro]:\n    assumes \"arr (MkArr F G \\<tau>)\"\n    and \"F = F'\" and \"G = G'\" and \"\\<tau> = \\<tau>'\"\n    shows \"MkArr F G \\<tau> = MkArr F' G' \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MkArr F G \\<tau> = MkArr F' G' \\<tau>'", "using assms arr_eqI"], ["proof (prove)\nusing this:\n  arr (MkArr F G \\<tau>)\n  F = F'\n  G = G'\n  \\<tau> = \\<tau>'\n  \\<lbrakk>arr ?t; arr ?t'; Dom ?t = Dom ?t'; Cod ?t = Cod ?t';\n   Map ?t = Map ?t'\\<rbrakk>\n  \\<Longrightarrow> ?t = ?t'\n\ngoal (1 subgoal):\n 1. MkArr F G \\<tau> = MkArr F' G' \\<tau>'", "by simp"], ["", "lemma MkArr_eqI' [intro]:\n    assumes \"arr (MkArr F G \\<tau>)\" and \"\\<tau> = \\<tau>'\"\n    shows \"MkArr F G \\<tau> = MkArr F G \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MkArr F G \\<tau> = MkArr F G \\<tau>'", "using assms arr_eqI"], ["proof (prove)\nusing this:\n  arr (MkArr F G \\<tau>)\n  \\<tau> = \\<tau>'\n  \\<lbrakk>arr ?t; arr ?t'; Dom ?t = Dom ?t'; Cod ?t = Cod ?t';\n   Map ?t = Map ?t'\\<rbrakk>\n  \\<Longrightarrow> ?t = ?t'\n\ngoal (1 subgoal):\n 1. MkArr F G \\<tau> = MkArr F G \\<tau>'", "by simp"], ["", "lemma iso_char [iff]:\n    shows \"iso t \\<longleftrightarrow> t \\<noteq> null \\<and> natural_isomorphism A B (Dom t) (Cod t) (Map t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso t =\n    (t \\<noteq> null \\<and>\n     natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n      (Map t))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. local.iso t \\<Longrightarrow>\n    t \\<noteq> null \\<and>\n    natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t)\n 2. t \\<noteq> null \\<and>\n    natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t) \\<Longrightarrow>\n    local.iso t", "assume t: \"iso t\""], ["proof (state)\nthis:\n  local.iso t\n\ngoal (2 subgoals):\n 1. local.iso t \\<Longrightarrow>\n    t \\<noteq> null \\<and>\n    natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t)\n 2. t \\<noteq> null \\<and>\n    natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t) \\<Longrightarrow>\n    local.iso t", "show \"t \\<noteq> null \\<and> natural_isomorphism A B (Dom t) (Cod t) (Map t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<noteq> null \\<and>\n    natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. t \\<noteq> null\n 2. natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t)", "show \"t \\<noteq> null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<noteq> null", "using t arr_char iso_is_arr"], ["proof (prove)\nusing this:\n  local.iso t\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Cod ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Map ?f\n   \\<in> Collect\n          (natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n            (Dom ?f) (Cod ?f)))\n  local.iso ?f \\<Longrightarrow> arr ?f\n\ngoal (1 subgoal):\n 1. t \\<noteq> null", "by auto"], ["proof (state)\nthis:\n  t \\<noteq> null\n\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t)", "from t"], ["proof (chain)\npicking this:\n  local.iso t", "obtain t' where t': \"inverse_arrows t t'\""], ["proof (prove)\nusing this:\n  local.iso t\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        inverse_arrows t t' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  inverse_arrows t t'\n\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t)", "interpret \\<tau>: natural_transformation A B \\<open>Dom t\\<close> \\<open>Cod t\\<close> \\<open>Map t\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t)\n     (Cod t) (Map t)", "using t arr_char iso_is_arr"], ["proof (prove)\nusing this:\n  local.iso t\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Cod ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Map ?f\n   \\<in> Collect\n          (natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n            (Dom ?f) (Cod ?f)))\n  local.iso ?f \\<Longrightarrow> arr ?f\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t)\n     (Cod t) (Map t)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t)", "interpret \\<tau>': natural_transformation A B \\<open>Cod t\\<close> \\<open>Dom t\\<close> \\<open>Map t'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Cod t)\n     (Dom t) (Map t')", "using t' arr_char dom_char seq_char"], ["proof (prove)\nusing this:\n  inverse_arrows t t'\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Cod ?f \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   Map ?f\n   \\<in> Collect\n          (natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n            (Dom ?f) (Cod ?f)))\n  local.dom ?f = (if arr ?f then MkIde (Dom ?f) else null)\n  seq ?g ?f = (arr ?f \\<and> arr ?g \\<and> Dom ?g = Cod ?f)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Cod t)\n     (Dom t) (Map t')", "by (metis arrE ide_compE inverse_arrowsE)"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t)", "interpret \\<tau>'o\\<tau>: vertical_composite A B \\<open>Dom t\\<close> \\<open>Cod t\\<close> \\<open>Dom t\\<close> \\<open>Map t\\<close> \\<open>Map t'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Dom t) (Map t) (Map t')", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t)", "interpret \\<tau>o\\<tau>': vertical_composite A B \\<open>Cod t\\<close> \\<open>Dom t\\<close> \\<open>Cod t\\<close> \\<open>Map t'\\<close> \\<open>Map t\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Cod t) (Dom t)\n     (Cod t) (Map t') (Map t)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t)", "show \"natural_isomorphism A B (Dom t) (Cod t) (Map t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. A.ide a \\<Longrightarrow> B.iso (Map t a)", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. A.ide a \\<Longrightarrow> B.iso (Map t a)", "assume a: \"A.ide a\""], ["proof (state)\nthis:\n  A.ide a\n\ngoal (1 subgoal):\n 1. \\<And>a. A.ide a \\<Longrightarrow> B.iso (Map t a)", "show \"B.iso (Map t a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B.iso (Map t a)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. B.inverse_arrows (Map t a) ?g", "have 1: \"\\<tau>'o\\<tau>.map = Dom t \\<and> \\<tau>o\\<tau>'.map = Cod t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>'o\\<tau>.map = Dom t \\<and> \\<tau>o\\<tau>'.map = Cod t", "using t t'"], ["proof (prove)\nusing this:\n  local.iso t\n  inverse_arrows t t'\n\ngoal (1 subgoal):\n 1. \\<tau>'o\\<tau>.map = Dom t \\<and> \\<tau>o\\<tau>'.map = Cod t", "by (metis (no_types, lifting) Map_dom concrete_category.Map_comp\n                  concrete_category_axioms ide_compE inverse_arrowsE seq_char)"], ["proof (state)\nthis:\n  \\<tau>'o\\<tau>.map = Dom t \\<and> \\<tau>o\\<tau>'.map = Cod t\n\ngoal (1 subgoal):\n 1. B.inverse_arrows (Map t a) ?g", "show \"B.inverse_arrows (Map t a) (Map t' a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B.inverse_arrows (Map t a) (Map t' a)", "using a 1 \\<tau>o\\<tau>'.map_simp_ide \\<tau>'o\\<tau>.map_simp_ide \\<tau>.F.preserves_ide \\<tau>.G.preserves_ide"], ["proof (prove)\nusing this:\n  A.ide a\n  \\<tau>'o\\<tau>.map = Dom t \\<and> \\<tau>o\\<tau>'.map = Cod t\n  A.ide ?a \\<Longrightarrow>\n  \\<tau>o\\<tau>'.map ?a = Map t ?a \\<cdot>\\<^sub>B Map t' ?a\n  A.ide ?a \\<Longrightarrow>\n  \\<tau>'o\\<tau>.map ?a = Map t' ?a \\<cdot>\\<^sub>B Map t ?a\n  A.ide ?a \\<Longrightarrow> B.ide (Dom t ?a)\n  A.ide ?a \\<Longrightarrow> B.ide (Cod t ?a)\n\ngoal (1 subgoal):\n 1. B.inverse_arrows (Map t a) (Map t' a)", "by auto"], ["proof (state)\nthis:\n  B.inverse_arrows (Map t a) (Map t' a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  B.iso (Map t a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n   (Map t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t \\<noteq> null \\<and>\n  natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n   (Map t)\n\ngoal (1 subgoal):\n 1. t \\<noteq> null \\<and>\n    natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t) \\<Longrightarrow>\n    local.iso t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<noteq> null \\<and>\n    natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t) \\<Longrightarrow>\n    local.iso t", "assume t: \"t \\<noteq> null \\<and> natural_isomorphism A B (Dom t) (Cod t) (Map t)\""], ["proof (state)\nthis:\n  t \\<noteq> null \\<and>\n  natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n   (Map t)\n\ngoal (1 subgoal):\n 1. t \\<noteq> null \\<and>\n    natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t) \\<Longrightarrow>\n    local.iso t", "show \"iso t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso t", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. inverse_arrows t ?g", "interpret \\<tau>: natural_isomorphism A B \\<open>Dom t\\<close> \\<open>Cod t\\<close> \\<open>Map t\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t)", "using t"], ["proof (prove)\nusing this:\n  t \\<noteq> null \\<and>\n  natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n   (Map t)\n\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n     (Map t)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. inverse_arrows t ?g", "interpret \\<tau>': inverse_transformation A B \\<open>Dom t\\<close> \\<open>Cod t\\<close> \\<open>Map t\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t)\n     (Cod t) (Map t)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. inverse_arrows t ?g", "have 1: \"vertical_composite.map A B (Map t) \\<tau>'.map = Dom t \\<and>\n                 vertical_composite.map A B \\<tau>'.map (Map t) = Cod t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Map t)\n     \\<tau>'.map =\n    Dom t \\<and>\n    vertical_composite.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) \\<tau>'.map\n     (Map t) =\n    Cod t", "using \\<tau>.natural_isomorphism_axioms vertical_composite_inverse_iso\n                vertical_composite_iso_inverse"], ["proof (prove)\nusing this:\n  natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n   (Map t)\n  natural_isomorphism ?A ?B ?F ?G ?\\<tau> \\<Longrightarrow>\n  vertical_composite.map ?A ?B (inverse_transformation.map ?A ?B ?G ?\\<tau>)\n   ?\\<tau> =\n  ?G\n  natural_isomorphism ?A ?B ?F ?G ?\\<tau> \\<Longrightarrow>\n  vertical_composite.map ?A ?B ?\\<tau>\n   (inverse_transformation.map ?A ?B ?G ?\\<tau>) =\n  ?F\n\ngoal (1 subgoal):\n 1. vertical_composite.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Map t)\n     \\<tau>'.map =\n    Dom t \\<and>\n    vertical_composite.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) \\<tau>'.map\n     (Map t) =\n    Cod t", "by blast"], ["proof (state)\nthis:\n  vertical_composite.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Map t)\n   \\<tau>'.map =\n  Dom t \\<and>\n  vertical_composite.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) \\<tau>'.map\n   (Map t) =\n  Cod t\n\ngoal (1 subgoal):\n 1. inverse_arrows t ?g", "show \"inverse_arrows t (MkArr (Cod t) (Dom t) (\\<tau>'.map))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_arrows t (MkArr (Cod t) (Dom t) \\<tau>'.map)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ide (MkArr (Cod t) (Dom t) \\<tau>'.map \\<cdot> t)\n 2. ide (t \\<cdot> MkArr (Cod t) (Dom t) \\<tau>'.map)", "show 2: \"ide (MkArr (Cod t) (Dom t) \\<tau>'.map \\<cdot> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide (MkArr (Cod t) (Dom t) \\<tau>'.map \\<cdot> t)", "using t 1"], ["proof (prove)\nusing this:\n  t \\<noteq> null \\<and>\n  natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n   (Map t)\n  vertical_composite.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Map t)\n   \\<tau>'.map =\n  Dom t \\<and>\n  vertical_composite.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) \\<tau>'.map\n   (Map t) =\n  Cod t\n\ngoal (1 subgoal):\n 1. ide (MkArr (Cod t) (Dom t) \\<tau>'.map \\<cdot> t)", "by (metis (no_types, lifting) MkArr_Map MkIde_Dom \\<tau>'.natural_transformation_axioms\n                \\<tau>.natural_transformation_axioms arrI arr_MkArr comp_MkArr ide_dom)"], ["proof (state)\nthis:\n  ide (MkArr (Cod t) (Dom t) \\<tau>'.map \\<cdot> t)\n\ngoal (1 subgoal):\n 1. ide (t \\<cdot> MkArr (Cod t) (Dom t) \\<tau>'.map)", "show \"ide (t \\<cdot> MkArr (Cod t) (Dom t) \\<tau>'.map)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide (t \\<cdot> MkArr (Cod t) (Dom t) \\<tau>'.map)", "using t 1 2"], ["proof (prove)\nusing this:\n  t \\<noteq> null \\<and>\n  natural_isomorphism (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Dom t) (Cod t)\n   (Map t)\n  vertical_composite.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (Map t)\n   \\<tau>'.map =\n  Dom t \\<and>\n  vertical_composite.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) \\<tau>'.map\n   (Map t) =\n  Cod t\n  ide (MkArr (Cod t) (Dom t) \\<tau>'.map \\<cdot> t)\n\ngoal (1 subgoal):\n 1. ide (t \\<cdot> MkArr (Cod t) (Dom t) \\<tau>'.map)", "by (metis Dom.simps(1) Map.simps(1) \\<tau>.natural_transformation_axioms arrI\n                cod_char cod_comp comp_char ide_char' ide_compE)"], ["proof (state)\nthis:\n  ide (t \\<cdot> MkArr (Cod t) (Dom t) \\<tau>'.map)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inverse_arrows t (MkArr (Cod t) (Dom t) \\<tau>'.map)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.iso t\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "section \"Evaluation Functor\""], ["", "text\\<open>\n    This section defines the evaluation map that applies an arrow of the functor\n    category \\<open>[A, B]\\<close> to an arrow of @{term A} to obtain an arrow of @{term B}\n    and shows that it is functorial.\n\\<close>"], ["", "locale evaluation_functor =\n    A: category A +\n    B: category B +\n    A_B: functor_category A B +\n    A_BxA: product_category A_B.comp A\n  for A :: \"'a comp\"          (infixr \"\\<cdot>\\<^sub>A\" 55)\n  and B :: \"'b comp\"          (infixr \"\\<cdot>\\<^sub>B\" 55)\n  begin"], ["", "notation A_B.comp         (infixr \"\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\" 55)"], ["", "notation A_BxA.comp       (infixr \"\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\" 55)"], ["", "notation A_B.in_hom       (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>] _\\<guillemotright>\")"], ["", "notation A_BxA.in_hom     (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A _\\<guillemotright>\")"], ["", "definition map\n    where \"map Fg \\<equiv> if A_BxA.arr Fg then A_B.Map (fst Fg) (snd Fg) else B.null\""], ["", "lemma map_simp:\n    assumes \"A_BxA.arr Fg\"\n    shows \"map Fg = A_B.Map(fst Fg) (snd Fg)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.map Fg = A_B.Map (fst Fg) (snd Fg)", "using assms map_def"], ["proof (prove)\nusing this:\n  A_BxA.arr Fg\n  local.map ?Fg \\<equiv>\n  if A_BxA.arr ?Fg then A_B.Map (fst ?Fg) (snd ?Fg) else B.null\n\ngoal (1 subgoal):\n 1. local.map Fg = A_B.Map (fst Fg) (snd Fg)", "by auto"], ["", "lemma is_functor:\n    shows \"functor A_BxA.comp B map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. functor\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A)\n     (\\<cdot>\\<^sub>B) local.map", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f. \\<not> A_BxA.arr f \\<Longrightarrow> local.map f = B.null\n 2. \\<And>f. A_BxA.arr f \\<Longrightarrow> B.arr (local.map f)\n 3. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.dom (local.map f) = local.map (A_BxA.dom f)\n 4. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.cod (local.map f) = local.map (A_BxA.cod f)\n 5. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "show \"\\<And>Fg. \\<not> A_BxA.arr Fg \\<Longrightarrow> map Fg = B.null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Fg. \\<not> A_BxA.arr Fg \\<Longrightarrow> local.map Fg = B.null", "using map_def"], ["proof (prove)\nusing this:\n  local.map ?Fg \\<equiv>\n  if A_BxA.arr ?Fg then A_B.Map (fst ?Fg) (snd ?Fg) else B.null\n\ngoal (1 subgoal):\n 1. \\<And>Fg. \\<not> A_BxA.arr Fg \\<Longrightarrow> local.map Fg = B.null", "by auto"], ["proof (state)\nthis:\n  \\<not> A_BxA.arr ?Fg \\<Longrightarrow> local.map ?Fg = B.null\n\ngoal (4 subgoals):\n 1. \\<And>f. A_BxA.arr f \\<Longrightarrow> B.arr (local.map f)\n 2. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.dom (local.map f) = local.map (A_BxA.dom f)\n 3. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.cod (local.map f) = local.map (A_BxA.cod f)\n 4. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "fix Fg"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f. A_BxA.arr f \\<Longrightarrow> B.arr (local.map f)\n 2. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.dom (local.map f) = local.map (A_BxA.dom f)\n 3. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.cod (local.map f) = local.map (A_BxA.cod f)\n 4. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "assume Fg: \"A_BxA.arr Fg\""], ["proof (state)\nthis:\n  A_BxA.arr Fg\n\ngoal (4 subgoals):\n 1. \\<And>f. A_BxA.arr f \\<Longrightarrow> B.arr (local.map f)\n 2. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.dom (local.map f) = local.map (A_BxA.dom f)\n 3. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.cod (local.map f) = local.map (A_BxA.cod f)\n 4. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "let ?F = \"fst Fg\" and ?g = \"snd Fg\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f. A_BxA.arr f \\<Longrightarrow> B.arr (local.map f)\n 2. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.dom (local.map f) = local.map (A_BxA.dom f)\n 3. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.cod (local.map f) = local.map (A_BxA.cod f)\n 4. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "have F: \"A_B.arr ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A_B.arr (fst Fg)", "using Fg"], ["proof (prove)\nusing this:\n  A_BxA.arr Fg\n\ngoal (1 subgoal):\n 1. A_B.arr (fst Fg)", "by auto"], ["proof (state)\nthis:\n  A_B.arr (fst Fg)\n\ngoal (4 subgoals):\n 1. \\<And>f. A_BxA.arr f \\<Longrightarrow> B.arr (local.map f)\n 2. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.dom (local.map f) = local.map (A_BxA.dom f)\n 3. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.cod (local.map f) = local.map (A_BxA.cod f)\n 4. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "have g: \"A.arr ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A.arr (snd Fg)", "using Fg"], ["proof (prove)\nusing this:\n  A_BxA.arr Fg\n\ngoal (1 subgoal):\n 1. A.arr (snd Fg)", "by auto"], ["proof (state)\nthis:\n  A.arr (snd Fg)\n\ngoal (4 subgoals):\n 1. \\<And>f. A_BxA.arr f \\<Longrightarrow> B.arr (local.map f)\n 2. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.dom (local.map f) = local.map (A_BxA.dom f)\n 3. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.cod (local.map f) = local.map (A_BxA.cod f)\n 4. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "have DomF: \"A_B.Dom ?F = A_B.Map (A_B.dom ?F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A_B.Dom (fst Fg) = A_B.Map (A_B.dom (fst Fg))", "using F"], ["proof (prove)\nusing this:\n  A_B.arr (fst Fg)\n\ngoal (1 subgoal):\n 1. A_B.Dom (fst Fg) = A_B.Map (A_B.dom (fst Fg))", "by simp"], ["proof (state)\nthis:\n  A_B.Dom (fst Fg) = A_B.Map (A_B.dom (fst Fg))\n\ngoal (4 subgoals):\n 1. \\<And>f. A_BxA.arr f \\<Longrightarrow> B.arr (local.map f)\n 2. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.dom (local.map f) = local.map (A_BxA.dom f)\n 3. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.cod (local.map f) = local.map (A_BxA.cod f)\n 4. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "have CodF: \"A_B.Cod ?F = A_B.Map (A_B.cod ?F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A_B.Cod (fst Fg) = A_B.Map (A_B.cod (fst Fg))", "using F"], ["proof (prove)\nusing this:\n  A_B.arr (fst Fg)\n\ngoal (1 subgoal):\n 1. A_B.Cod (fst Fg) = A_B.Map (A_B.cod (fst Fg))", "by simp"], ["proof (state)\nthis:\n  A_B.Cod (fst Fg) = A_B.Map (A_B.cod (fst Fg))\n\ngoal (4 subgoals):\n 1. \\<And>f. A_BxA.arr f \\<Longrightarrow> B.arr (local.map f)\n 2. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.dom (local.map f) = local.map (A_BxA.dom f)\n 3. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.cod (local.map f) = local.map (A_BxA.cod f)\n 4. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "interpret F: natural_transformation A B \\<open>A_B.Dom ?F\\<close> \\<open>A_B.Cod ?F\\<close> \\<open>A_B.Map ?F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n     (A_B.Dom (fst Fg)) (A_B.Cod (fst Fg)) (A_B.Map (fst Fg))", "using Fg A_B.arr_char [of ?F]"], ["proof (prove)\nusing this:\n  A_BxA.arr Fg\n  A_B.arr (fst Fg) =\n  (fst Fg \\<noteq> A_B.Null \\<and>\n   A_B.Dom (fst Fg)\n   \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   A_B.Cod (fst Fg)\n   \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   A_B.Map (fst Fg)\n   \\<in> Collect\n          (natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n            (A_B.Dom (fst Fg)) (A_B.Cod (fst Fg))))\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n     (A_B.Dom (fst Fg)) (A_B.Cod (fst Fg)) (A_B.Map (fst Fg))", "by blast"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f. A_BxA.arr f \\<Longrightarrow> B.arr (local.map f)\n 2. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.dom (local.map f) = local.map (A_BxA.dom f)\n 3. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.cod (local.map f) = local.map (A_BxA.cod f)\n 4. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "show \"B.arr (map Fg)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B.arr (local.map Fg)", "using Fg map_def"], ["proof (prove)\nusing this:\n  A_BxA.arr Fg\n  local.map ?Fg \\<equiv>\n  if A_BxA.arr ?Fg then A_B.Map (fst ?Fg) (snd ?Fg) else B.null\n\ngoal (1 subgoal):\n 1. B.arr (local.map Fg)", "by auto"], ["proof (state)\nthis:\n  B.arr (local.map Fg)\n\ngoal (3 subgoals):\n 1. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.dom (local.map f) = local.map (A_BxA.dom f)\n 2. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.cod (local.map f) = local.map (A_BxA.cod f)\n 3. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "show \"B.dom (map Fg) = map (A_BxA.dom Fg)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B.dom (local.map Fg) = local.map (A_BxA.dom Fg)", "using g Fg map_def DomF"], ["proof (prove)\nusing this:\n  A.arr (snd Fg)\n  A_BxA.arr Fg\n  local.map ?Fg \\<equiv>\n  if A_BxA.arr ?Fg then A_B.Map (fst ?Fg) (snd ?Fg) else B.null\n  A_B.Dom (fst Fg) = A_B.Map (A_B.dom (fst Fg))\n\ngoal (1 subgoal):\n 1. B.dom (local.map Fg) = local.map (A_BxA.dom Fg)", "by (metis (no_types, lifting) A_BxA.arr_dom A_BxA.dom_simp F.preserves_dom\n            fst_conv snd_conv)"], ["proof (state)\nthis:\n  B.dom (local.map Fg) = local.map (A_BxA.dom Fg)\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       A_BxA.arr f \\<Longrightarrow>\n       B.cod (local.map f) = local.map (A_BxA.cod f)\n 2. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "show \"B.cod (map Fg) = map (A_BxA.cod Fg)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B.cod (local.map Fg) = local.map (A_BxA.cod Fg)", "using g Fg map_def CodF"], ["proof (prove)\nusing this:\n  A.arr (snd Fg)\n  A_BxA.arr Fg\n  local.map ?Fg \\<equiv>\n  if A_BxA.arr ?Fg then A_B.Map (fst ?Fg) (snd ?Fg) else B.null\n  A_B.Cod (fst Fg) = A_B.Map (A_B.cod (fst Fg))\n\ngoal (1 subgoal):\n 1. B.cod (local.map Fg) = local.map (A_BxA.cod Fg)", "by (metis (no_types, lifting) A_BxA.arr_cod A_BxA.cod_simp F.preserves_cod\n            fst_conv snd_conv)"], ["proof (state)\nthis:\n  B.cod (local.map Fg) = local.map (A_BxA.cod Fg)\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "fix Fg Fg'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "assume 1: \"A_BxA.seq Fg' Fg\""], ["proof (state)\nthis:\n  A_BxA.seq Fg' Fg\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "let ?F = \"fst Fg\" and ?g = \"snd Fg\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "let ?F' = \"fst Fg'\" and ?g' = \"snd Fg'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "have F': \"A_B.arr ?F'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A_B.arr (fst Fg')", "using 1 A_BxA.seqE"], ["proof (prove)\nusing this:\n  A_BxA.seq Fg' Fg\n  \\<lbrakk>A_BxA.seq ?g ?f;\n   \\<lbrakk>A_B.seq (fst ?g) (fst ?f); A.seq (snd ?g) (snd ?f)\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n\ngoal (1 subgoal):\n 1. A_B.arr (fst Fg')", "by blast"], ["proof (state)\nthis:\n  A_B.arr (fst Fg')\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "have CodF: \"A_B.Cod ?F = A_B.Map (A_B.cod ?F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A_B.Cod (fst Fg) = A_B.Map (A_B.cod (fst Fg))", "using 1"], ["proof (prove)\nusing this:\n  A_BxA.seq Fg' Fg\n\ngoal (1 subgoal):\n 1. A_B.Cod (fst Fg) = A_B.Map (A_B.cod (fst Fg))", "by (metis A_B.Map_cod A_B.seqE A_BxA.seqE)"], ["proof (state)\nthis:\n  A_B.Cod (fst Fg) = A_B.Map (A_B.cod (fst Fg))\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "have DomF': \"A_B.Dom ?F' = A_B.Map (A_B.dom ?F')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A_B.Dom (fst Fg') = A_B.Map (A_B.dom (fst Fg'))", "using F'"], ["proof (prove)\nusing this:\n  A_B.arr (fst Fg')\n\ngoal (1 subgoal):\n 1. A_B.Dom (fst Fg') = A_B.Map (A_B.dom (fst Fg'))", "by simp"], ["proof (state)\nthis:\n  A_B.Dom (fst Fg') = A_B.Map (A_B.dom (fst Fg'))\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "have seq_F'F: \"A_B.seq ?F' ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A_B.seq (fst Fg') (fst Fg)", "using 1"], ["proof (prove)\nusing this:\n  A_BxA.seq Fg' Fg\n\ngoal (1 subgoal):\n 1. A_B.seq (fst Fg') (fst Fg)", "by blast"], ["proof (state)\nthis:\n  A_B.seq (fst Fg') (fst Fg)\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "have seq_g'g: \"A.seq ?g' ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A.seq (snd Fg') (snd Fg)", "using 1"], ["proof (prove)\nusing this:\n  A_BxA.seq Fg' Fg\n\ngoal (1 subgoal):\n 1. A.seq (snd Fg') (snd Fg)", "by blast"], ["proof (state)\nthis:\n  A.seq (snd Fg') (snd Fg)\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "interpret F: natural_transformation A B \\<open>A_B.Dom ?F\\<close> \\<open>A_B.Cod ?F\\<close> \\<open>A_B.Map ?F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n     (A_B.Dom (fst Fg)) (A_B.Cod (fst Fg)) (A_B.Map (fst Fg))", "using 1 A_B.arr_char"], ["proof (prove)\nusing this:\n  A_BxA.seq Fg' Fg\n  A_B.arr ?f =\n  (?f \\<noteq> A_B.Null \\<and>\n   A_B.Dom ?f\n   \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   A_B.Cod ?f\n   \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   A_B.Map ?f\n   \\<in> Collect\n          (natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n            (A_B.Dom ?f) (A_B.Cod ?f)))\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n     (A_B.Dom (fst Fg)) (A_B.Cod (fst Fg)) (A_B.Map (fst Fg))", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "interpret F': natural_transformation A B \\<open>A_B.Cod ?F\\<close> \\<open>A_B.Cod ?F'\\<close> \\<open>A_B.Map ?F'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n     (A_B.Cod (fst Fg)) (A_B.Cod (fst Fg')) (A_B.Map (fst Fg'))", "using 1 A_B.arr_char seq_F'F CodF DomF' A_B.seqE"], ["proof (prove)\nusing this:\n  A_BxA.seq Fg' Fg\n  A_B.arr ?f =\n  (?f \\<noteq> A_B.Null \\<and>\n   A_B.Dom ?f\n   \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   A_B.Cod ?f\n   \\<in> Collect (functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)) \\<and>\n   A_B.Map ?f\n   \\<in> Collect\n          (natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n            (A_B.Dom ?f) (A_B.Cod ?f)))\n  A_B.seq (fst Fg') (fst Fg)\n  A_B.Cod (fst Fg) = A_B.Map (A_B.cod (fst Fg))\n  A_B.Dom (fst Fg') = A_B.Map (A_B.dom (fst Fg'))\n  \\<lbrakk>A_B.seq ?g ?f;\n   \\<lbrakk>A_B.arr ?f; A_B.arr ?g; A_B.dom ?g = A_B.cod ?f\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n     (A_B.Cod (fst Fg)) (A_B.Cod (fst Fg')) (A_B.Map (fst Fg'))", "by (metis mem_Collect_eq)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "interpret F'oF: vertical_composite A B \\<open>A_B.Dom ?F\\<close> \\<open>A_B.Cod ?F\\<close> \\<open>A_B.Cod ?F'\\<close>\n                                             \\<open>A_B.Map ?F\\<close> \\<open>A_B.Map ?F'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B)\n     (A_B.Dom (fst Fg)) (A_B.Cod (fst Fg)) (A_B.Cod (fst Fg'))\n     (A_B.Map (fst Fg)) (A_B.Map (fst Fg'))", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       A_BxA.seq g f \\<Longrightarrow>\n       local.map\n        (g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n         f) =\n       local.map g \\<cdot>\\<^sub>B local.map f", "show \"map (Fg' \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A Fg) = map Fg' \\<cdot>\\<^sub>B map Fg\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.map\n     (Fg' \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n      Fg) =\n    local.map Fg' \\<cdot>\\<^sub>B local.map Fg", "unfolding map_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if A_BxA.seq Fg' Fg\n     then A_B.Map\n           (fst (Fg' \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n                 Fg))\n           (snd (Fg' \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n                 Fg))\n     else B.null) =\n    (if A_BxA.arr Fg' then A_B.Map (fst Fg') (snd Fg')\n     else B.null) \\<cdot>\\<^sub>B\n    (if A_BxA.arr Fg then A_B.Map (fst Fg) (snd Fg) else B.null)", "using 1 seq_F'F seq_g'g"], ["proof (prove)\nusing this:\n  A_BxA.seq Fg' Fg\n  A_B.seq (fst Fg') (fst Fg)\n  A.seq (snd Fg') (snd Fg)\n\ngoal (1 subgoal):\n 1. (if A_BxA.seq Fg' Fg\n     then A_B.Map\n           (fst (Fg' \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n                 Fg))\n           (snd (Fg' \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n                 Fg))\n     else B.null) =\n    (if A_BxA.arr Fg' then A_B.Map (fst Fg') (snd Fg')\n     else B.null) \\<cdot>\\<^sub>B\n    (if A_BxA.arr Fg then A_B.Map (fst Fg) (snd Fg) else B.null)", "by auto"], ["proof (state)\nthis:\n  local.map\n   (Fg' \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\n    Fg) =\n  local.map Fg' \\<cdot>\\<^sub>B local.map Fg\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "sublocale evaluation_functor \\<subseteq> \"functor\" A_BxA.comp B map"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A)\n     (\\<cdot>\\<^sub>B) local.map", "using is_functor"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A)\n   (\\<cdot>\\<^sub>B) local.map\n\ngoal (1 subgoal):\n 1. functor\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A)\n     (\\<cdot>\\<^sub>B) local.map", "by auto"], ["", "sublocale evaluation_functor \\<subseteq> binary_functor A_B.comp A B map"], ["proof (prove)\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>,\\<^sub>B\\<^sub>])\n     (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) local.map", ".."], ["", "section \"Currying\""], ["", "text\\<open>\n    This section defines the notion of currying of a natural transformation\n    between binary functors, to obtain a natural transformation between\n    functors into a functor category, along with the inverse operation of uncurrying.\n    We have only proved here what is needed to establish the results\n    in theory \\<open>Limit\\<close> about limits in functor categories and have not\n    attempted to fully develop the functoriality and naturality properties of\n    these notions.\n\\<close>"], ["", "locale currying =\n  A1: category A1 +\n  A2: category A2 +\n  B: category B\n  for A1 :: \"'a1 comp\"           (infixr \"\\<cdot>\\<^sub>A\\<^sub>1\" 55)\n  and A2 :: \"'a2 comp\"           (infixr \"\\<cdot>\\<^sub>A\\<^sub>2\" 55)\n  and B :: \"'b comp\"             (infixr \"\\<cdot>\\<^sub>B\" 55)\n  begin"], ["", "interpretation A1xA2: product_category A1 A2"], ["proof (prove)\ngoal (1 subgoal):\n 1. product_category (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>A\\<^sub>2)", ".."], ["", "interpretation A2_B: functor_category A2 B"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor_category (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)", ".."], ["", "interpretation A2_BxA2: product_category A2_B.comp A2"], ["proof (prove)\ngoal (1 subgoal):\n 1. product_category A2_B.comp (\\<cdot>\\<^sub>A\\<^sub>2)", ".."], ["", "interpretation E: evaluation_functor A2 B"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluation_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)", ".."], ["", "notation A1xA2.comp          (infixr \"\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\" 55)"], ["", "notation A2_B.comp           (infixr \"\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\" 55)"], ["", "notation A2_BxA2.comp        (infixr \"\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\\<^sub>2\" 55)"], ["", "notation A1xA2.in_hom        (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 _\\<guillemotright>\")"], ["", "notation A2_B.in_hom         (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] _\\<guillemotright>\")"], ["", "notation A2_BxA2.in_hom      (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\\<^sub>2 _\\<guillemotright>\")"], ["", "text\\<open>\n      A proper definition for @{term curry} requires that it be parametrized by\n      binary functors @{term F} and @{term G} that are the domain and codomain\n      of the natural transformations to which it is being applied.\n      Similar parameters are not needed in the case of @{term uncurry}.\n\\<close>"], ["", "definition curry :: \"('a1 \\<times> 'a2 \\<Rightarrow> 'b) \\<Rightarrow> ('a1 \\<times> 'a2 \\<Rightarrow> 'b) \\<Rightarrow> ('a1 \\<times> 'a2 \\<Rightarrow> 'b)\n                           \\<Rightarrow> 'a1 \\<Rightarrow> ('a2, 'b) A2_B.arr\"\n    where \"curry F G \\<tau> f1 = (if A1.arr f1 then\n                               A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n                                          (\\<lambda>f2. \\<tau> (f1, f2))\n                             else A2_B.null)\""], ["", "definition uncurry :: \"('a1 \\<Rightarrow> ('a2, 'b) A2_B.arr) \\<Rightarrow> 'a1 \\<times> 'a2 \\<Rightarrow> 'b\"\n    where \"uncurry \\<tau> f \\<equiv> if A1xA2.arr f then E.map (\\<tau> (fst f), snd f) else B.null\""], ["", "lemma curry_simp:\n    assumes \"A1.arr f1\"\n    shows \"curry F G \\<tau> f1 = A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n                                       (\\<lambda>f2. \\<tau> (f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.curry F G \\<tau> f1 =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2))", "using assms curry_def"], ["proof (prove)\nusing this:\n  A1.arr f1\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  (if A1.arr ?f1.0\n   then A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n         (\\<lambda>f2. ?G (A1.cod ?f1.0, f2))\n         (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n   else A2_B.null)\n\ngoal (1 subgoal):\n 1. local.curry F G \\<tau> f1 =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2))", "by auto"], ["", "lemma uncurry_simp:\n    assumes \"A1xA2.arr f\"\n    shows \"uncurry \\<tau> f = E.map (\\<tau> (fst f), snd f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uncurry \\<tau> f = E.map (\\<tau> (fst f), snd f)", "using assms uncurry_def"], ["proof (prove)\nusing this:\n  A1xA2.arr f\n  uncurry ?\\<tau> ?f \\<equiv>\n  if A1xA2.arr ?f then E.map (?\\<tau> (fst ?f), snd ?f) else B.null\n\ngoal (1 subgoal):\n 1. uncurry \\<tau> f = E.map (\\<tau> (fst f), snd f)", "by auto"], ["", "lemma curry_in_hom:\n    assumes f1: \"A1.arr f1\"\n    and \"natural_transformation A1xA2.comp B F G \\<tau>\"\n    shows \"\\<guillemotleft>curry F G \\<tau> f1 : curry F F F (A1.dom f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] curry G G G (A1.cod f1)\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>local.curry F G \\<tau>\n                     f1 : local.curry F F F\n                           (A1.dom\n                             f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                    G G G (A1.cod f1)\\<guillemotright>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<guillemotleft>local.curry F G \\<tau>\n                     f1 : local.curry F F F\n                           (A1.dom\n                             f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                    G G G (A1.cod f1)\\<guillemotright>", "interpret \\<tau>: natural_transformation A1xA2.comp B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) F G \\<tau>", "using assms"], ["proof (prove)\nusing this:\n  A1.arr f1\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) F G \\<tau>\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) F G \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<guillemotleft>local.curry F G \\<tau>\n                     f1 : local.curry F F F\n                           (A1.dom\n                             f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                    G G G (A1.cod f1)\\<guillemotright>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>local.curry F G \\<tau>\n                     f1 : local.curry F F F\n                           (A1.dom\n                             f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                    G G G (A1.cod f1)\\<guillemotright>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<guillemotleft>local.curry F G \\<tau>\n                     f1 : local.curry F F F\n                           (A1.dom\n                             f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                    G G G (A1.cod f1)\\<guillemotright>", "interpret F_dom_f1: \"functor\" A2 B \\<open>\\<lambda>f2. F (A1.dom f1, f2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2))", "using f1 \\<tau>.F.is_extensional"], ["proof (prove)\nusing this:\n  A1.arr f1\n  \\<not> A1xA2.arr ?f \\<Longrightarrow> F ?f = B.null\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2))", "apply (unfold_locales, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>A2.seq g f; A1.arr f1;\n        \\<And>f.\n           A1.arr (fst f) \\<longrightarrow>\n           \\<not> A2.arr (snd f) \\<Longrightarrow>\n           F f = B.null\\<rbrakk>\n       \\<Longrightarrow> F (A1.dom f1, g \\<cdot>\\<^sub>A\\<^sub>2 f) =\n                         F (A1.dom f1, g) \\<cdot>\\<^sub>B F (A1.dom f1, f)", "by (metis A1.arr_dom A1.comp_arr_dom A1.dom_dom A1xA2.comp_simp A1xA2.seqI\n              \\<tau>.F.preserves_comp_2 fst_conv snd_conv)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<guillemotleft>local.curry F G \\<tau>\n                     f1 : local.curry F F F\n                           (A1.dom\n                             f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                    G G G (A1.cod f1)\\<guillemotright>", "interpret G_cod_f1: \"functor\" A2 B \\<open>\\<lambda>f2. G (A1.cod f1, f2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. G (A1.cod f1, f2))", "using f1 \\<tau>.G.is_extensional A1.arr_cod_iff_arr"], ["proof (prove)\nusing this:\n  A1.arr f1\n  \\<not> A1xA2.arr ?f \\<Longrightarrow> G ?f = B.null\n  A1.arr (A1.cod ?f) = A1.arr ?f\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. G (A1.cod f1, f2))", "apply (unfold_locales, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>A2.seq g f; A1.arr f1;\n        \\<And>f.\n           A1.arr (fst f) \\<longrightarrow>\n           \\<not> A2.arr (snd f) \\<Longrightarrow>\n           G f = B.null;\n        \\<And>f. A1.arr (A1.cod f) = A1.arr f\\<rbrakk>\n       \\<Longrightarrow> G (A1.cod f1, g \\<cdot>\\<^sub>A\\<^sub>2 f) =\n                         G (A1.cod f1, g) \\<cdot>\\<^sub>B G (A1.cod f1, f)", "by (metis A1.comp_arr_dom A1.dom_cod A1xA2.comp_simp A1xA2.seqI\n              \\<tau>.G.preserves_comp fst_conv snd_conv)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<guillemotleft>local.curry F G \\<tau>\n                     f1 : local.curry F F F\n                           (A1.dom\n                             f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                    G G G (A1.cod f1)\\<guillemotright>", "have \"natural_transformation A2 B (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n                                          (\\<lambda>f2. \\<tau> (f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n     (\\<lambda>f2. \\<tau> (f1, f2))", "using f1 \\<tau>.is_extensional"], ["proof (prove)\nusing this:\n  A1.arr f1\n  \\<not> A1xA2.arr ?f \\<Longrightarrow> \\<tau> ?f = B.null\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n     (\\<lambda>f2. \\<tau> (f1, f2))", "apply (unfold_locales, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A2.arr f; A1.arr f1;\n        \\<And>f.\n           A1.arr (fst f) \\<longrightarrow>\n           \\<not> A2.arr (snd f) \\<Longrightarrow>\n           \\<tau> f = B.null\\<rbrakk>\n       \\<Longrightarrow> G (A1.cod f1, f) \\<cdot>\\<^sub>B\n                         \\<tau> (f1, A2.dom f) =\n                         \\<tau> (f1, f)\n 2. \\<And>f.\n       \\<lbrakk>A2.arr f; A1.arr f1;\n        \\<And>f.\n           A1.arr (fst f) \\<longrightarrow>\n           \\<not> A2.arr (snd f) \\<Longrightarrow>\n           \\<tau> f = B.null\\<rbrakk>\n       \\<Longrightarrow> \\<tau> (f1, A2.cod f) \\<cdot>\\<^sub>B\n                         F (A1.dom f1, f) =\n                         \\<tau> (f1, f)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A2.arr f; A1.arr f1;\n        \\<And>f.\n           A1.arr (fst f) \\<longrightarrow>\n           \\<not> A2.arr (snd f) \\<Longrightarrow>\n           \\<tau> f = B.null\\<rbrakk>\n       \\<Longrightarrow> G (A1.cod f1, f) \\<cdot>\\<^sub>B\n                         \\<tau> (f1, A2.dom f) =\n                         \\<tau> (f1, f)\n 2. \\<And>f.\n       \\<lbrakk>A2.arr f; A1.arr f1;\n        \\<And>f.\n           A1.arr (fst f) \\<longrightarrow>\n           \\<not> A2.arr (snd f) \\<Longrightarrow>\n           \\<tau> f = B.null\\<rbrakk>\n       \\<Longrightarrow> \\<tau> (f1, A2.cod f) \\<cdot>\\<^sub>B\n                         F (A1.dom f1, f) =\n                         \\<tau> (f1, f)", "fix f2"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A2.arr f; A1.arr f1;\n        \\<And>f.\n           A1.arr (fst f) \\<longrightarrow>\n           \\<not> A2.arr (snd f) \\<Longrightarrow>\n           \\<tau> f = B.null\\<rbrakk>\n       \\<Longrightarrow> G (A1.cod f1, f) \\<cdot>\\<^sub>B\n                         \\<tau> (f1, A2.dom f) =\n                         \\<tau> (f1, f)\n 2. \\<And>f.\n       \\<lbrakk>A2.arr f; A1.arr f1;\n        \\<And>f.\n           A1.arr (fst f) \\<longrightarrow>\n           \\<not> A2.arr (snd f) \\<Longrightarrow>\n           \\<tau> f = B.null\\<rbrakk>\n       \\<Longrightarrow> \\<tau> (f1, A2.cod f) \\<cdot>\\<^sub>B\n                         F (A1.dom f1, f) =\n                         \\<tau> (f1, f)", "assume f2: \"A2.arr f2\""], ["proof (state)\nthis:\n  A2.arr f2\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A2.arr f; A1.arr f1;\n        \\<And>f.\n           A1.arr (fst f) \\<longrightarrow>\n           \\<not> A2.arr (snd f) \\<Longrightarrow>\n           \\<tau> f = B.null\\<rbrakk>\n       \\<Longrightarrow> G (A1.cod f1, f) \\<cdot>\\<^sub>B\n                         \\<tau> (f1, A2.dom f) =\n                         \\<tau> (f1, f)\n 2. \\<And>f.\n       \\<lbrakk>A2.arr f; A1.arr f1;\n        \\<And>f.\n           A1.arr (fst f) \\<longrightarrow>\n           \\<not> A2.arr (snd f) \\<Longrightarrow>\n           \\<tau> f = B.null\\<rbrakk>\n       \\<Longrightarrow> \\<tau> (f1, A2.cod f) \\<cdot>\\<^sub>B\n                         F (A1.dom f1, f) =\n                         \\<tau> (f1, f)", "show \"G (A1.cod f1, f2) \\<cdot>\\<^sub>B \\<tau> (f1, A2.dom f2) = \\<tau> (f1, f2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (A1.cod f1, f2) \\<cdot>\\<^sub>B \\<tau> (f1, A2.dom f2) =\n    \\<tau> (f1, f2)", "using f1 f2 \\<tau>.preserves_comp_1 [of \"(A1.cod f1, f2)\" \"(f1, A2.dom f2)\"]\n                  A1.comp_cod_arr A2.comp_arr_dom"], ["proof (prove)\nusing this:\n  A1.arr f1\n  A2.arr f2\n  A1xA2.seq (A1.cod f1, f2) (f1, A2.dom f2) \\<Longrightarrow>\n  \\<tau>\n   ((A1.cod f1, f2) \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n    (f1, A2.dom f2)) =\n  G (A1.cod f1, f2) \\<cdot>\\<^sub>B \\<tau> (f1, A2.dom f2)\n  \\<lbrakk>A1.arr ?f; A1.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>A\\<^sub>1 ?f = ?f\n  \\<lbrakk>A2.arr ?f; A2.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>A\\<^sub>2 ?a = ?f\n\ngoal (1 subgoal):\n 1. G (A1.cod f1, f2) \\<cdot>\\<^sub>B \\<tau> (f1, A2.dom f2) =\n    \\<tau> (f1, f2)", "by simp"], ["proof (state)\nthis:\n  G (A1.cod f1, f2) \\<cdot>\\<^sub>B \\<tau> (f1, A2.dom f2) = \\<tau> (f1, f2)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>A2.arr f; A1.arr f1;\n        \\<And>f.\n           A1.arr (fst f) \\<longrightarrow>\n           \\<not> A2.arr (snd f) \\<Longrightarrow>\n           \\<tau> f = B.null\\<rbrakk>\n       \\<Longrightarrow> \\<tau> (f1, A2.cod f) \\<cdot>\\<^sub>B\n                         F (A1.dom f1, f) =\n                         \\<tau> (f1, f)", "show \"\\<tau> (f1, A2.cod f2) \\<cdot>\\<^sub>B F (A1.dom f1, f2) = \\<tau> (f1, f2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> (f1, A2.cod f2) \\<cdot>\\<^sub>B F (A1.dom f1, f2) =\n    \\<tau> (f1, f2)", "using f1 f2 \\<tau>.preserves_comp_2 [of \"(f1, A2.cod f2)\" \"(A1.dom f1, f2)\"]\n                  A1.comp_arr_dom A2.comp_cod_arr"], ["proof (prove)\nusing this:\n  A1.arr f1\n  A2.arr f2\n  A1xA2.seq (f1, A2.cod f2) (A1.dom f1, f2) \\<Longrightarrow>\n  \\<tau>\n   ((f1, A2.cod f2) \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n    (A1.dom f1, f2)) =\n  \\<tau> (f1, A2.cod f2) \\<cdot>\\<^sub>B F (A1.dom f1, f2)\n  \\<lbrakk>A1.arr ?f; A1.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>A\\<^sub>1 ?a = ?f\n  \\<lbrakk>A2.arr ?f; A2.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>A\\<^sub>2 ?f = ?f\n\ngoal (1 subgoal):\n 1. \\<tau> (f1, A2.cod f2) \\<cdot>\\<^sub>B F (A1.dom f1, f2) =\n    \\<tau> (f1, f2)", "by simp"], ["proof (state)\nthis:\n  \\<tau> (f1, A2.cod f2) \\<cdot>\\<^sub>B F (A1.dom f1, f2) = \\<tau> (f1, f2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n   (\\<lambda>f2. \\<tau> (f1, f2))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>local.curry F G \\<tau>\n                     f1 : local.curry F F F\n                           (A1.dom\n                             f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                    G G G (A1.cod f1)\\<guillemotright>", "thus ?thesis"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n   (\\<lambda>f2. \\<tau> (f1, f2))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>local.curry F G \\<tau>\n                     f1 : local.curry F F F\n                           (A1.dom\n                             f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                    G G G (A1.cod f1)\\<guillemotright>", "using f1 curry_simp"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n   (\\<lambda>f2. \\<tau> (f1, f2))\n  A1.arr f1\n  A1.arr ?f1.0 \\<Longrightarrow>\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n   (\\<lambda>f2. ?G (A1.cod ?f1.0, f2)) (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>local.curry F G \\<tau>\n                     f1 : local.curry F F F\n                           (A1.dom\n                             f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                    G G G (A1.cod f1)\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>local.curry F G \\<tau>\n                   f1 : local.curry F F F\n                         (A1.dom\n                           f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                  G G G (A1.cod f1)\\<guillemotright>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<guillemotleft>local.curry F G \\<tau>\n                   f1 : local.curry F F F\n                         (A1.dom\n                           f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                  G G G (A1.cod f1)\\<guillemotright>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma curry_preserves_functors:\n    assumes \"functor A1xA2.comp B F\"\n    shows \"functor A1 A2_B.comp (curry F F F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)", "interpret F: \"functor\" A1xA2.comp B F"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) F", "using assms"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) F\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) F", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)", "interpret F: binary_functor A1 A2 B F"], ["proof (prove)\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>1) (\\<cdot>\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) F", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)", "using curry_def F.fixing_arr_gives_natural_transformation_1\n              A2_B.comp_char F.preserves_comp_1 curry_simp A2_B.seq_char"], ["proof (prove)\nusing this:\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  (if A1.arr ?f1.0\n   then A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n         (\\<lambda>f2. ?G (A1.cod ?f1.0, f2))\n         (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n   else A2_B.null)\n  A1.arr ?f1.0 \\<Longrightarrow>\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (A1.dom ?f1.0, f2)) (\\<lambda>f2. F (A1.cod ?f1.0, f2))\n   (\\<lambda>f2. F (?f1.0, f2))\n  ?g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>] ?f =\n  (if A2_B.seq ?g ?f\n   then A2_B.MkArr (A2_B.Dom ?f) (A2_B.Cod ?g)\n         (vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n           (A2_B.Map ?f) (A2_B.Map ?g))\n   else A2_B.null)\n  A1.seq ?f1' ?f1.0 \\<Longrightarrow>\n  (\\<lambda>f2. F (?f1' \\<cdot>\\<^sub>A\\<^sub>1 ?f1.0, f2)) =\n  vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (?f1.0, f2)) (\\<lambda>f2. F (?f1', f2))\n  A1.arr ?f1.0 \\<Longrightarrow>\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n   (\\<lambda>f2. ?G (A1.cod ?f1.0, f2)) (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n  A2_B.seq ?g ?f =\n  (A2_B.arr ?f \\<and> A2_B.arr ?g \\<and> A2_B.Dom ?g = A2_B.Cod ?f)\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)", "apply unfold_locales"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<And>F G \\<tau> f1.\n                   local.curry F G \\<tau> f1 =\n                   (if A1.arr f1\n                    then A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n                          (\\<lambda>f2. G (A1.cod f1, f2))\n                          (\\<lambda>f2. \\<tau> (f1, f2))\n                    else A2_B.null);\n        \\<And>f1.\n           A1.arr f1 \\<Longrightarrow>\n           natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2)\n            (\\<cdot>\\<^sub>B) (\\<lambda>f2. F (A1.dom f1, f2))\n            (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2));\n        \\<And>g f.\n           g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>] f =\n           (if A2_B.seq g f\n            then A2_B.MkArr (A2_B.Dom f) (A2_B.Cod g)\n                  (vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2)\n                    (\\<cdot>\\<^sub>B) (A2_B.Map f) (A2_B.Map g))\n            else A2_B.null);\n        \\<And>f1' f1.\n           A1.seq f1' f1 \\<Longrightarrow>\n           (\\<lambda>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2)) =\n           vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2)\n            (\\<cdot>\\<^sub>B) (\\<lambda>f2. F (f1, f2))\n            (\\<lambda>f2. F (f1', f2));\n        \\<And>f1 F G \\<tau>.\n           A1.arr f1 \\<Longrightarrow>\n           local.curry F G \\<tau> f1 =\n           A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n            (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2));\n        \\<And>g f.\n           A2_B.seq g f =\n           (A2_B.arr f \\<and> A2_B.arr g \\<and> A2_B.Dom g = A2_B.Cod f);\n        \\<not> A1.arr f\\<rbrakk>\n       \\<Longrightarrow> local.curry F F F f = A2_B.null\n 2. \\<And>f.\n       \\<lbrakk>\\<And>F G \\<tau> f1.\n                   local.curry F G \\<tau> f1 =\n                   (if A1.arr f1\n                    then A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n                          (\\<lambda>f2. G (A1.cod f1, f2))\n                          (\\<lambda>f2. \\<tau> (f1, f2))\n                    else A2_B.null);\n        \\<And>f1.\n           A1.arr f1 \\<Longrightarrow>\n           natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2)\n            (\\<cdot>\\<^sub>B) (\\<lambda>f2. F (A1.dom f1, f2))\n            (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2));\n        \\<And>g f.\n           g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>] f =\n           (if A2_B.seq g f\n            then A2_B.MkArr (A2_B.Dom f) (A2_B.Cod g)\n                  (vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2)\n                    (\\<cdot>\\<^sub>B) (A2_B.Map f) (A2_B.Map g))\n            else A2_B.null);\n        \\<And>f1' f1.\n           A1.seq f1' f1 \\<Longrightarrow>\n           (\\<lambda>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2)) =\n           vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2)\n            (\\<cdot>\\<^sub>B) (\\<lambda>f2. F (f1, f2))\n            (\\<lambda>f2. F (f1', f2));\n        \\<And>f1 F G \\<tau>.\n           A1.arr f1 \\<Longrightarrow>\n           local.curry F G \\<tau> f1 =\n           A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n            (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2));\n        \\<And>g f.\n           A2_B.seq g f =\n           (A2_B.arr f \\<and> A2_B.arr g \\<and> A2_B.Dom g = A2_B.Cod f);\n        A1.arr f\\<rbrakk>\n       \\<Longrightarrow> A2_B.arr (local.curry F F F f)\n 3. \\<And>f.\n       \\<lbrakk>\\<And>F G \\<tau> f1.\n                   local.curry F G \\<tau> f1 =\n                   (if A1.arr f1\n                    then A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n                          (\\<lambda>f2. G (A1.cod f1, f2))\n                          (\\<lambda>f2. \\<tau> (f1, f2))\n                    else A2_B.null);\n        \\<And>f1.\n           A1.arr f1 \\<Longrightarrow>\n           natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2)\n            (\\<cdot>\\<^sub>B) (\\<lambda>f2. F (A1.dom f1, f2))\n            (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2));\n        \\<And>g f.\n           g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>] f =\n           (if A2_B.seq g f\n            then A2_B.MkArr (A2_B.Dom f) (A2_B.Cod g)\n                  (vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2)\n                    (\\<cdot>\\<^sub>B) (A2_B.Map f) (A2_B.Map g))\n            else A2_B.null);\n        \\<And>f1' f1.\n           A1.seq f1' f1 \\<Longrightarrow>\n           (\\<lambda>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2)) =\n           vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2)\n            (\\<cdot>\\<^sub>B) (\\<lambda>f2. F (f1, f2))\n            (\\<lambda>f2. F (f1', f2));\n        \\<And>f1 F G \\<tau>.\n           A1.arr f1 \\<Longrightarrow>\n           local.curry F G \\<tau> f1 =\n           A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n            (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2));\n        \\<And>g f.\n           A2_B.seq g f =\n           (A2_B.arr f \\<and> A2_B.arr g \\<and> A2_B.Dom g = A2_B.Cod f);\n        A1.arr f\\<rbrakk>\n       \\<Longrightarrow> A2_B.dom (local.curry F F F f) =\n                         local.curry F F F (A1.dom f)\n 4. \\<And>f.\n       \\<lbrakk>\\<And>F G \\<tau> f1.\n                   local.curry F G \\<tau> f1 =\n                   (if A1.arr f1\n                    then A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n                          (\\<lambda>f2. G (A1.cod f1, f2))\n                          (\\<lambda>f2. \\<tau> (f1, f2))\n                    else A2_B.null);\n        \\<And>f1.\n           A1.arr f1 \\<Longrightarrow>\n           natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2)\n            (\\<cdot>\\<^sub>B) (\\<lambda>f2. F (A1.dom f1, f2))\n            (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2));\n        \\<And>g f.\n           g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>] f =\n           (if A2_B.seq g f\n            then A2_B.MkArr (A2_B.Dom f) (A2_B.Cod g)\n                  (vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2)\n                    (\\<cdot>\\<^sub>B) (A2_B.Map f) (A2_B.Map g))\n            else A2_B.null);\n        \\<And>f1' f1.\n           A1.seq f1' f1 \\<Longrightarrow>\n           (\\<lambda>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2)) =\n           vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2)\n            (\\<cdot>\\<^sub>B) (\\<lambda>f2. F (f1, f2))\n            (\\<lambda>f2. F (f1', f2));\n        \\<And>f1 F G \\<tau>.\n           A1.arr f1 \\<Longrightarrow>\n           local.curry F G \\<tau> f1 =\n           A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n            (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2));\n        \\<And>g f.\n           A2_B.seq g f =\n           (A2_B.arr f \\<and> A2_B.arr g \\<and> A2_B.Dom g = A2_B.Cod f);\n        A1.arr f\\<rbrakk>\n       \\<Longrightarrow> A2_B.cod (local.curry F F F f) =\n                         local.curry F F F (A1.cod f)\n 5. \\<And>g f.\n       \\<lbrakk>\\<And>F G \\<tau> f1.\n                   local.curry F G \\<tau> f1 =\n                   (if A1.arr f1\n                    then A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n                          (\\<lambda>f2. G (A1.cod f1, f2))\n                          (\\<lambda>f2. \\<tau> (f1, f2))\n                    else A2_B.null);\n        \\<And>f1.\n           A1.arr f1 \\<Longrightarrow>\n           natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2)\n            (\\<cdot>\\<^sub>B) (\\<lambda>f2. F (A1.dom f1, f2))\n            (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2));\n        \\<And>g f.\n           g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>] f =\n           (if A2_B.seq g f\n            then A2_B.MkArr (A2_B.Dom f) (A2_B.Cod g)\n                  (vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2)\n                    (\\<cdot>\\<^sub>B) (A2_B.Map f) (A2_B.Map g))\n            else A2_B.null);\n        \\<And>f1' f1.\n           A1.seq f1' f1 \\<Longrightarrow>\n           (\\<lambda>f2. F (f1' \\<cdot>\\<^sub>A\\<^sub>1 f1, f2)) =\n           vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2)\n            (\\<cdot>\\<^sub>B) (\\<lambda>f2. F (f1, f2))\n            (\\<lambda>f2. F (f1', f2));\n        \\<And>f1 F G \\<tau>.\n           A1.arr f1 \\<Longrightarrow>\n           local.curry F G \\<tau> f1 =\n           A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n            (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2));\n        \\<And>g f.\n           A2_B.seq g f =\n           (A2_B.arr f \\<and> A2_B.arr g \\<and> A2_B.Dom g = A2_B.Cod f);\n        A1.seq g f\\<rbrakk>\n       \\<Longrightarrow> local.curry F F F (g \\<cdot>\\<^sub>A\\<^sub>1 f) =\n                         local.curry F F F\n                          g \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n                         local.curry F F F f", "by auto"], ["proof (state)\nthis:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma curry_preserves_transformations:\n    assumes \"natural_transformation A1xA2.comp B F G \\<tau>\"\n    shows \"natural_transformation A1 A2_B.comp (curry F F F) (curry G G G) (curry F G \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)\n     (local.curry G G G) (local.curry F G \\<tau>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)\n     (local.curry G G G) (local.curry F G \\<tau>)", "interpret \\<tau>: natural_transformation A1xA2.comp B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) F G \\<tau>", "using assms"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) F G \\<tau>\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) F G \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)\n     (local.curry G G G) (local.curry F G \\<tau>)", "interpret \\<tau>: binary_functor_transformation A1 A2 B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. binary_functor_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B) F G \\<tau>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)\n     (local.curry G G G) (local.curry F G \\<tau>)", "interpret curry_F: \"functor\" A1 A2_B.comp \\<open>curry F F F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)", "using curry_preserves_functors \\<tau>.F.functor_axioms"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) ?F \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry ?F ?F ?F)\n  functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) F\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)\n     (local.curry G G G) (local.curry F G \\<tau>)", "interpret curry_G: \"functor\" A1 A2_B.comp \\<open>curry G G G\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry G G G)", "using curry_preserves_functors \\<tau>.G.functor_axioms"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) ?F \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry ?F ?F ?F)\n  functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) G\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry G G G)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)\n     (local.curry G G G) (local.curry F G \\<tau>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)\n     (local.curry G G G) (local.curry F G \\<tau>)", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f.\n       \\<not> A1.arr f \\<Longrightarrow>\n       local.curry F G \\<tau> f = A2_B.null\n 2. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       A2_B.dom (local.curry F G \\<tau> f) = local.curry F F F (A1.dom f)\n 3. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       A2_B.cod (local.curry F G \\<tau> f) = local.curry G G G (A1.cod f)\n 4. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       local.curry G G G f \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n       local.curry F G \\<tau> (A1.dom f) =\n       local.curry F G \\<tau> f\n 5. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       local.curry F G \\<tau>\n        (A1.cod f) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n       local.curry F F F f =\n       local.curry F G \\<tau> f", "show \"\\<And>f2. \\<not> A1.arr f2 \\<Longrightarrow> curry F G \\<tau> f2 = A2_B.null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f2.\n       \\<not> A1.arr f2 \\<Longrightarrow>\n       local.curry F G \\<tau> f2 = A2_B.null", "using curry_def"], ["proof (prove)\nusing this:\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  (if A1.arr ?f1.0\n   then A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n         (\\<lambda>f2. ?G (A1.cod ?f1.0, f2))\n         (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n   else A2_B.null)\n\ngoal (1 subgoal):\n 1. \\<And>f2.\n       \\<not> A1.arr f2 \\<Longrightarrow>\n       local.curry F G \\<tau> f2 = A2_B.null", "by simp"], ["proof (state)\nthis:\n  \\<not> A1.arr ?f2.0 \\<Longrightarrow>\n  local.curry F G \\<tau> ?f2.0 = A2_B.null\n\ngoal (4 subgoals):\n 1. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       A2_B.dom (local.curry F G \\<tau> f) = local.curry F F F (A1.dom f)\n 2. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       A2_B.cod (local.curry F G \\<tau> f) = local.curry G G G (A1.cod f)\n 3. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       local.curry G G G f \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n       local.curry F G \\<tau> (A1.dom f) =\n       local.curry F G \\<tau> f\n 4. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       local.curry F G \\<tau>\n        (A1.cod f) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n       local.curry F F F f =\n       local.curry F G \\<tau> f", "fix f1"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       A2_B.dom (local.curry F G \\<tau> f) = local.curry F F F (A1.dom f)\n 2. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       A2_B.cod (local.curry F G \\<tau> f) = local.curry G G G (A1.cod f)\n 3. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       local.curry G G G f \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n       local.curry F G \\<tau> (A1.dom f) =\n       local.curry F G \\<tau> f\n 4. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       local.curry F G \\<tau>\n        (A1.cod f) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n       local.curry F F F f =\n       local.curry F G \\<tau> f", "assume f1: \"A1.arr f1\""], ["proof (state)\nthis:\n  A1.arr f1\n\ngoal (4 subgoals):\n 1. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       A2_B.dom (local.curry F G \\<tau> f) = local.curry F F F (A1.dom f)\n 2. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       A2_B.cod (local.curry F G \\<tau> f) = local.curry G G G (A1.cod f)\n 3. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       local.curry G G G f \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n       local.curry F G \\<tau> (A1.dom f) =\n       local.curry F G \\<tau> f\n 4. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       local.curry F G \\<tau>\n        (A1.cod f) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n       local.curry F F F f =\n       local.curry F G \\<tau> f", "show \"A2_B.dom (curry F G \\<tau> f1) = curry F F F (A1.dom f1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.dom (local.curry F G \\<tau> f1) = local.curry F F F (A1.dom f1)", "using assms f1 curry_in_hom"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) F G \\<tau>\n  A1.arr f1\n  \\<lbrakk>A1.arr ?f1.0;\n   natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n    (\\<cdot>\\<^sub>B) ?F ?G ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>local.curry ?F ?G ?\\<tau>\n                                     ?f1.0 : local.curry ?F ?F ?F\n        (A1.dom\n          ?f1.0) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n    ?G ?G ?G (A1.cod ?f1.0)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. A2_B.dom (local.curry F G \\<tau> f1) = local.curry F F F (A1.dom f1)", "by blast"], ["proof (state)\nthis:\n  A2_B.dom (local.curry F G \\<tau> f1) = local.curry F F F (A1.dom f1)\n\ngoal (3 subgoals):\n 1. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       A2_B.cod (local.curry F G \\<tau> f) = local.curry G G G (A1.cod f)\n 2. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       local.curry G G G f \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n       local.curry F G \\<tau> (A1.dom f) =\n       local.curry F G \\<tau> f\n 3. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       local.curry F G \\<tau>\n        (A1.cod f) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n       local.curry F F F f =\n       local.curry F G \\<tau> f", "show \"A2_B.cod (curry F G \\<tau> f1) = curry G G G (A1.cod f1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.cod (local.curry F G \\<tau> f1) = local.curry G G G (A1.cod f1)", "using assms f1 curry_in_hom"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) F G \\<tau>\n  A1.arr f1\n  \\<lbrakk>A1.arr ?f1.0;\n   natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n    (\\<cdot>\\<^sub>B) ?F ?G ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>local.curry ?F ?G ?\\<tau>\n                                     ?f1.0 : local.curry ?F ?F ?F\n        (A1.dom\n          ?f1.0) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n    ?G ?G ?G (A1.cod ?f1.0)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. A2_B.cod (local.curry F G \\<tau> f1) = local.curry G G G (A1.cod f1)", "by blast"], ["proof (state)\nthis:\n  A2_B.cod (local.curry F G \\<tau> f1) = local.curry G G G (A1.cod f1)\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       local.curry G G G f \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n       local.curry F G \\<tau> (A1.dom f) =\n       local.curry F G \\<tau> f\n 2. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       local.curry F G \\<tau>\n        (A1.cod f) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n       local.curry F F F f =\n       local.curry F G \\<tau> f", "show \"curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>] curry F G \\<tau> (A1.dom f1) = curry F G \\<tau> f1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    local.curry F G \\<tau> f1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    local.curry F G \\<tau> f1", "interpret \\<tau>_dom_f1: natural_transformation A2 B \\<open>\\<lambda>f2. F (A1.dom f1, f2)\\<close>\n                                \\<open>\\<lambda>f2. G (A1.dom f1, f2)\\<close> \\<open>\\<lambda>f2. \\<tau> (A1.dom f1, f2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.dom f1, f2))\n     (\\<lambda>f2. \\<tau> (A1.dom f1, f2))", "using assms f1 curry_in_hom A1.ide_dom \\<tau>.fixing_ide_gives_natural_transformation_1"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) F G \\<tau>\n  A1.arr f1\n  \\<lbrakk>A1.arr ?f1.0;\n   natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n    (\\<cdot>\\<^sub>B) ?F ?G ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>local.curry ?F ?G ?\\<tau>\n                                     ?f1.0 : local.curry ?F ?F ?F\n        (A1.dom\n          ?f1.0) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n    ?G ?G ?G (A1.cod ?f1.0)\\<guillemotright>\n  A1.arr ?f \\<Longrightarrow> A1.ide (A1.dom ?f)\n  A1.ide ?a1.0 \\<Longrightarrow>\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (?a1.0, f2)) (\\<lambda>f2. G (?a1.0, f2))\n   (\\<lambda>f2. \\<tau> (?a1.0, f2))\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.dom f1, f2))\n     (\\<lambda>f2. \\<tau> (A1.dom f1, f2))", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    local.curry F G \\<tau> f1", "interpret G_f1: natural_transformation A2 B\n                                \\<open>\\<lambda>f2. G (A1.dom f1, f2)\\<close> \\<open>\\<lambda>f2. G (A1.cod f1, f2)\\<close> \\<open>\\<lambda>f2. G (f1, f2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. G (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n     (\\<lambda>f2. G (f1, f2))", "using f1 \\<tau>.G.fixing_arr_gives_natural_transformation_1"], ["proof (prove)\nusing this:\n  A1.arr f1\n  A1.arr ?f1.0 \\<Longrightarrow>\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. G (A1.dom ?f1.0, f2)) (\\<lambda>f2. G (A1.cod ?f1.0, f2))\n   (\\<lambda>f2. G (?f1.0, f2))\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. G (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n     (\\<lambda>f2. G (f1, f2))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    local.curry F G \\<tau> f1", "interpret G_f1o\\<tau>_dom_f1: vertical_composite A2 B\n                                     \\<open>\\<lambda>f2. F (A1.dom f1, f2)\\<close> \\<open>\\<lambda>f2. G (A1.dom f1, f2)\\<close>\n                                     \\<open>\\<lambda>f2. G (A1.cod f1, f2)\\<close>\n                                     \\<open>\\<lambda>f2. \\<tau> (A1.dom f1, f2)\\<close> \\<open>\\<lambda>f2. G (f1, f2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (A1.dom f1, f2))\n     (\\<lambda>f2. G (f1, f2))", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    local.curry F G \\<tau> f1", "have \"curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>] curry F G \\<tau> (A1.dom f1)\n                  = A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map", "have \"A2_B.seq (curry G G G f1) (curry F G \\<tau> (A1.dom f1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.seq (local.curry G G G f1) (local.curry F G \\<tau> (A1.dom f1))", "using f1 curry_in_hom [of \"A1.dom f1\"] \\<tau>.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  A1.arr f1\n  \\<lbrakk>A1.arr (A1.dom f1);\n   natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n    (\\<cdot>\\<^sub>B) ?F ?G ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>local.curry ?F ?G ?\\<tau>\n                                     (A1.dom\n f1) : local.curry ?F ?F ?F\n        (A1.dom\n          (A1.dom\n            f1)) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n    ?G ?G ?G (A1.cod (A1.dom f1))\\<guillemotright>\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) F G \\<tau>\n\ngoal (1 subgoal):\n 1. A2_B.seq (local.curry G G G f1) (local.curry F G \\<tau> (A1.dom f1))", "by force"], ["proof (state)\nthis:\n  A2_B.seq (local.curry G G G f1) (local.curry F G \\<tau> (A1.dom f1))\n\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map", "thus ?thesis"], ["proof (prove)\nusing this:\n  A2_B.seq (local.curry G G G f1) (local.curry F G \\<tau> (A1.dom f1))\n\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map", "using f1 curry_simp A2_B.comp_char [of \"curry G G G f1\" \"curry F G \\<tau> (A1.dom f1)\"]"], ["proof (prove)\nusing this:\n  A2_B.seq (local.curry G G G f1) (local.curry F G \\<tau> (A1.dom f1))\n  A1.arr f1\n  A1.arr ?f1.0 \\<Longrightarrow>\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n   (\\<lambda>f2. ?G (A1.cod ?f1.0, f2)) (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n  local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n  local.curry F G \\<tau> (A1.dom f1) =\n  (if A2_B.seq (local.curry G G G f1) (local.curry F G \\<tau> (A1.dom f1))\n   then A2_B.MkArr (A2_B.Dom (local.curry F G \\<tau> (A1.dom f1)))\n         (A2_B.Cod (local.curry G G G f1))\n         (vertical_composite.map (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n           (A2_B.Map (local.curry F G \\<tau> (A1.dom f1)))\n           (A2_B.Map (local.curry G G G f1)))\n   else A2_B.null)\n\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map", "by simp"], ["proof (state)\nthis:\n  local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n  local.curry F G \\<tau> (A1.dom f1) =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n  local.curry F G \\<tau> (A1.dom f1) =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map\n\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    local.curry F G \\<tau> f1", "also"], ["proof (state)\nthis:\n  local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n  local.curry F G \\<tau> (A1.dom f1) =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map\n\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    local.curry F G \\<tau> f1", "have \"... = A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n                                      (\\<lambda>f2. \\<tau> (f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2))", "proof (intro A2_B.MkArr_eqI)"], ["proof (state)\ngoal (4 subgoals):\n 1. A2_B.arr\n     (A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n       (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map)\n 2. (\\<lambda>f2. F (A1.dom f1, f2)) = (\\<lambda>f2. F (A1.dom f1, f2))\n 3. (\\<lambda>f2. G (A1.cod f1, f2)) = (\\<lambda>f2. G (A1.cod f1, f2))\n 4. G_f1o\\<tau>_dom_f1.map = (\\<lambda>f2. \\<tau> (f1, f2))", "show \"(\\<lambda>f2. F (A1.dom f1, f2)) = (\\<lambda>f2. F (A1.dom f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f2. F (A1.dom f1, f2)) = (\\<lambda>f2. F (A1.dom f1, f2))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>f2. F (A1.dom f1, f2)) = (\\<lambda>f2. F (A1.dom f1, f2))\n\ngoal (3 subgoals):\n 1. A2_B.arr\n     (A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n       (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map)\n 2. (\\<lambda>f2. G (A1.cod f1, f2)) = (\\<lambda>f2. G (A1.cod f1, f2))\n 3. G_f1o\\<tau>_dom_f1.map = (\\<lambda>f2. \\<tau> (f1, f2))", "show \"(\\<lambda>f2. G (A1.cod f1, f2)) = (\\<lambda>f2. G (A1.cod f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f2. G (A1.cod f1, f2)) = (\\<lambda>f2. G (A1.cod f1, f2))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>f2. G (A1.cod f1, f2)) = (\\<lambda>f2. G (A1.cod f1, f2))\n\ngoal (2 subgoals):\n 1. A2_B.arr\n     (A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n       (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map)\n 2. G_f1o\\<tau>_dom_f1.map = (\\<lambda>f2. \\<tau> (f1, f2))", "show \"A2_B.arr (A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n                                       G_f1o\\<tau>_dom_f1.map)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.arr\n     (A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n       (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map)", "using G_f1o\\<tau>_dom_f1.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n   G_f1o\\<tau>_dom_f1.map\n\ngoal (1 subgoal):\n 1. A2_B.arr\n     (A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n       (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map)", "by blast"], ["proof (state)\nthis:\n  A2_B.arr\n   (A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map)\n\ngoal (1 subgoal):\n 1. G_f1o\\<tau>_dom_f1.map = (\\<lambda>f2. \\<tau> (f1, f2))", "show \"G_f1o\\<tau>_dom_f1.map = (\\<lambda>f2. \\<tau> (f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G_f1o\\<tau>_dom_f1.map = (\\<lambda>f2. \\<tau> (f1, f2))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f2. G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)", "fix f2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f2. G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)", "have \"\\<not>A2.arr f2 \\<Longrightarrow> G_f1o\\<tau>_dom_f1.map f2 = (\\<lambda>f2. \\<tau> (f1, f2)) f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> A2.arr f2 \\<Longrightarrow>\n    G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)", "using f1 G_f1o\\<tau>_dom_f1.is_extensional \\<tau>.is_extensional"], ["proof (prove)\nusing this:\n  A1.arr f1\n  \\<not> A2.arr ?f \\<Longrightarrow> G_f1o\\<tau>_dom_f1.map ?f = B.null\n  \\<not> A1xA2.arr ?f \\<Longrightarrow> \\<tau> ?f = B.null\n\ngoal (1 subgoal):\n 1. \\<not> A2.arr f2 \\<Longrightarrow>\n    G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)", "by simp"], ["proof (state)\nthis:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)\n\ngoal (1 subgoal):\n 1. \\<And>f2. G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)", "moreover"], ["proof (state)\nthis:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)\n\ngoal (1 subgoal):\n 1. \\<And>f2. G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)", "have \"A2.arr f2 \\<Longrightarrow> G_f1o\\<tau>_dom_f1.map f2 = (\\<lambda>f2. \\<tau> (f1, f2)) f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2.arr f2 \\<Longrightarrow> G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A2.arr f2 \\<Longrightarrow> G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)", "interpret \\<tau>_f1: natural_transformation A2 B \\<open>\\<lambda>f2. F (A1.dom f1, f2)\\<close>\n                                  \\<open>\\<lambda>f2. G (A1.cod f1, f2)\\<close> \\<open>\\<lambda>f2. \\<tau> (f1, f2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n     (\\<lambda>f2. \\<tau> (f1, f2))", "using assms f1 curry_in_hom [of f1] curry_simp"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) F G \\<tau>\n  A1.arr f1\n  \\<lbrakk>A1.arr f1;\n   natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n    (\\<cdot>\\<^sub>B) ?F ?G ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>local.curry ?F ?G ?\\<tau>\n                                     f1 : local.curry ?F ?F ?F\n     (A1.dom\n       f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                                    ?G ?G ?G (A1.cod f1)\\<guillemotright>\n  A1.arr ?f1.0 \\<Longrightarrow>\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n   (\\<lambda>f2. ?G (A1.cod ?f1.0, f2)) (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n     (\\<lambda>f2. \\<tau> (f1, f2))", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. A2.arr f2 \\<Longrightarrow> G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)", "fix f2"], ["proof (state)\ngoal (1 subgoal):\n 1. A2.arr f2__ \\<Longrightarrow>\n    G_f1o\\<tau>_dom_f1.map f2__ = \\<tau> (f1, f2__)", "assume f2: \"A2.arr f2\""], ["proof (state)\nthis:\n  A2.arr f2\n\ngoal (1 subgoal):\n 1. A2.arr f2__ \\<Longrightarrow>\n    G_f1o\\<tau>_dom_f1.map f2__ = \\<tau> (f1, f2__)", "show \"G_f1o\\<tau>_dom_f1.map f2 = (\\<lambda>f2. \\<tau> (f1, f2)) f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)", "using f1 f2 G_f1o\\<tau>_dom_f1.map_simp_2 B.comp_assoc \\<tau>.is_natural_1"], ["proof (prove)\nusing this:\n  A1.arr f1\n  A2.arr f2\n  A2.arr ?f \\<Longrightarrow>\n  G_f1o\\<tau>_dom_f1.map ?f =\n  G (f1, ?f) \\<cdot>\\<^sub>B \\<tau> (A1.dom f1, A2.dom ?f)\n  (?h \\<cdot>\\<^sub>B ?g) \\<cdot>\\<^sub>B ?f =\n  ?h \\<cdot>\\<^sub>B ?g \\<cdot>\\<^sub>B ?f\n  A1xA2.arr ?f \\<Longrightarrow>\n  G ?f \\<cdot>\\<^sub>B \\<tau> (A1xA2.dom ?f) = \\<tau> ?f\n\ngoal (1 subgoal):\n 1. G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)", "by fastforce"], ["proof (state)\nthis:\n  G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A2.arr f2 \\<Longrightarrow> G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)\n\ngoal (1 subgoal):\n 1. \\<And>f2. G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)\n  A2.arr f2 \\<Longrightarrow> G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)", "show \"G_f1o\\<tau>_dom_f1.map f2 = (\\<lambda>f2. \\<tau> (f1, f2)) f2\""], ["proof (prove)\nusing this:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)\n  A2.arr f2 \\<Longrightarrow> G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)\n\ngoal (1 subgoal):\n 1. G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)", "by blast"], ["proof (state)\nthis:\n  G_f1o\\<tau>_dom_f1.map f2 = \\<tau> (f1, f2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G_f1o\\<tau>_dom_f1.map = (\\<lambda>f2. \\<tau> (f1, f2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2))\n\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    local.curry F G \\<tau> f1", "also"], ["proof (state)\nthis:\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) G_f1o\\<tau>_dom_f1.map =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2))\n\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    local.curry F G \\<tau> f1", "have \"... = curry F G \\<tau> f1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2)) =\n    local.curry F G \\<tau> f1", "using f1 curry_def"], ["proof (prove)\nusing this:\n  A1.arr f1\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  (if A1.arr ?f1.0\n   then A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n         (\\<lambda>f2. ?G (A1.cod ?f1.0, f2))\n         (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n   else A2_B.null)\n\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2)) =\n    local.curry F G \\<tau> f1", "by simp"], ["proof (state)\nthis:\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2)) =\n  local.curry F G \\<tau> f1\n\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    local.curry F G \\<tau> f1", "finally"], ["proof (chain)\npicking this:\n  local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n  local.curry F G \\<tau> (A1.dom f1) =\n  local.curry F G \\<tau> f1", "show ?thesis"], ["proof (prove)\nusing this:\n  local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n  local.curry F G \\<tau> (A1.dom f1) =\n  local.curry F G \\<tau> f1\n\ngoal (1 subgoal):\n 1. local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F G \\<tau> (A1.dom f1) =\n    local.curry F G \\<tau> f1", "by blast"], ["proof (state)\nthis:\n  local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n  local.curry F G \\<tau> (A1.dom f1) =\n  local.curry F G \\<tau> f1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.curry G G G f1 \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n  local.curry F G \\<tau> (A1.dom f1) =\n  local.curry F G \\<tau> f1\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       A1.arr f \\<Longrightarrow>\n       local.curry F G \\<tau>\n        (A1.cod f) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n       local.curry F F F f =\n       local.curry F G \\<tau> f", "show \"curry F G \\<tau> (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>] curry F F F f1 = curry F G \\<tau> f1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    local.curry F G \\<tau> f1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    local.curry F G \\<tau> f1", "interpret \\<tau>_cod_f1: natural_transformation A2 B \\<open>\\<lambda>f2. F (A1.cod f1, f2)\\<close>\n                                \\<open>\\<lambda>f2. G (A1.cod f1, f2)\\<close> \\<open>\\<lambda>f2. \\<tau> (A1.cod f1, f2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n     (\\<lambda>f2. \\<tau> (A1.cod f1, f2))", "using assms f1 curry_in_hom A1.ide_cod \\<tau>.fixing_ide_gives_natural_transformation_1"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) F G \\<tau>\n  A1.arr f1\n  \\<lbrakk>A1.arr ?f1.0;\n   natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n    (\\<cdot>\\<^sub>B) ?F ?G ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>local.curry ?F ?G ?\\<tau>\n                                     ?f1.0 : local.curry ?F ?F ?F\n        (A1.dom\n          ?f1.0) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n    ?G ?G ?G (A1.cod ?f1.0)\\<guillemotright>\n  A1.arr ?f \\<Longrightarrow> A1.ide (A1.cod ?f)\n  A1.ide ?a1.0 \\<Longrightarrow>\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (?a1.0, f2)) (\\<lambda>f2. G (?a1.0, f2))\n   (\\<lambda>f2. \\<tau> (?a1.0, f2))\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n     (\\<lambda>f2. \\<tau> (A1.cod f1, f2))", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    local.curry F G \\<tau> f1", "interpret F_f1: natural_transformation A2 B\n                                \\<open>\\<lambda>f2. F (A1.dom f1, f2)\\<close> \\<open>\\<lambda>f2. F (A1.cod f1, f2)\\<close> \\<open>\\<lambda>f2. F (f1, f2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n     (\\<lambda>f2. F (f1, f2))", "using f1 \\<tau>.F.fixing_arr_gives_natural_transformation_1"], ["proof (prove)\nusing this:\n  A1.arr f1\n  A1.arr ?f1.0 \\<Longrightarrow>\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (A1.dom ?f1.0, f2)) (\\<lambda>f2. F (A1.cod ?f1.0, f2))\n   (\\<lambda>f2. F (?f1.0, f2))\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n     (\\<lambda>f2. F (f1, f2))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    local.curry F G \\<tau> f1", "interpret \\<tau>_cod_f1oF_f1: vertical_composite A2 B\n                                     \\<open>\\<lambda>f2. F (A1.dom f1, f2)\\<close> \\<open>\\<lambda>f2. F (A1.cod f1, f2)\\<close>\n                                     \\<open>\\<lambda>f2. G (A1.cod f1, f2)\\<close>\n                                     \\<open>\\<lambda>f2. F (f1, f2)\\<close> \\<open>\\<lambda>f2. \\<tau> (A1.cod f1, f2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2))\n     (\\<lambda>f2. \\<tau> (A1.cod f1, f2))", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    local.curry F G \\<tau> f1", "have \"curry F G \\<tau> (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>] curry F F F f1\n                  = A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map", "have\n                 \"curry F F F f1 =\n                    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2))\n                               (\\<lambda>f2. F (f1, f2)) \\<and>\n                  \\<guillemotleft>curry F F F f1 : curry F F F (A1.dom f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] curry F F F (A1.cod f1)\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.curry F F F f1 =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2)) \\<and>\n    \\<guillemotleft>local.curry F F F\n                     f1 : local.curry F F F\n                           (A1.dom\n                             f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                    F F F (A1.cod f1)\\<guillemotright>", "using f1 curry_F.preserves_hom curry_simp"], ["proof (prove)\nusing this:\n  A1.arr f1\n  \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>A\\<^sub>1 ?b\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>local.curry F F F\n                   ?f : local.curry F F F\n                         ?a \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n               F F F ?b\\<guillemotright>\n  A1.arr ?f1.0 \\<Longrightarrow>\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n   (\\<lambda>f2. ?G (A1.cod ?f1.0, f2)) (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n\ngoal (1 subgoal):\n 1. local.curry F F F f1 =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2)) \\<and>\n    \\<guillemotleft>local.curry F F F\n                     f1 : local.curry F F F\n                           (A1.dom\n                             f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                    F F F (A1.cod f1)\\<guillemotright>", "by blast"], ["proof (state)\nthis:\n  local.curry F F F f1 =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2)) \\<and>\n  \\<guillemotleft>local.curry F F F\n                   f1 : local.curry F F F\n                         (A1.dom\n                           f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                  F F F (A1.cod f1)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map", "moreover"], ["proof (state)\nthis:\n  local.curry F F F f1 =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2)) \\<and>\n  \\<guillemotleft>local.curry F F F\n                   f1 : local.curry F F F\n                         (A1.dom\n                           f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                  F F F (A1.cod f1)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map", "have\n                 \"curry F G \\<tau> (A1.dom f1) =\n                    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.dom f1, f2))\n                               (\\<lambda>f2. \\<tau> (A1.dom f1, f2)) \\<and>\n                    \\<guillemotleft>curry F G \\<tau> (A1.cod f1) :\n                       curry F F F (A1.cod f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] curry G G G (A1.cod f1)\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.curry F G \\<tau> (A1.dom f1) =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.dom f1, f2))\n     (\\<lambda>f2. \\<tau> (A1.dom f1, f2)) \\<and>\n    \\<guillemotleft>local.curry F G \\<tau>\n                     (A1.cod\n                       f1) : local.curry F F F\n                              (A1.cod\n                                f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                       G G G (A1.cod f1)\\<guillemotright>", "using assms f1 curry_in_hom [of \"A1.cod f1\"] curry_def A1.arr_cod_iff_arr"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) F G \\<tau>\n  A1.arr f1\n  \\<lbrakk>A1.arr (A1.cod f1);\n   natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n    (\\<cdot>\\<^sub>B) ?F ?G ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>local.curry ?F ?G ?\\<tau>\n                                     (A1.cod\n f1) : local.curry ?F ?F ?F\n        (A1.dom\n          (A1.cod\n            f1)) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n    ?G ?G ?G (A1.cod (A1.cod f1))\\<guillemotright>\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  (if A1.arr ?f1.0\n   then A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n         (\\<lambda>f2. ?G (A1.cod ?f1.0, f2))\n         (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n   else A2_B.null)\n  A1.arr (A1.cod ?f) = A1.arr ?f\n\ngoal (1 subgoal):\n 1. local.curry F G \\<tau> (A1.dom f1) =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.dom f1, f2))\n     (\\<lambda>f2. \\<tau> (A1.dom f1, f2)) \\<and>\n    \\<guillemotleft>local.curry F G \\<tau>\n                     (A1.cod\n                       f1) : local.curry F F F\n                              (A1.cod\n                                f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                       G G G (A1.cod f1)\\<guillemotright>", "by simp"], ["proof (state)\nthis:\n  local.curry F G \\<tau> (A1.dom f1) =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.dom f1, f2))\n   (\\<lambda>f2. \\<tau> (A1.dom f1, f2)) \\<and>\n  \\<guillemotleft>local.curry F G \\<tau>\n                   (A1.cod\n                     f1) : local.curry F F F\n                            (A1.cod\n                              f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                     G G G (A1.cod f1)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map", "ultimately"], ["proof (chain)\npicking this:\n  local.curry F F F f1 =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2)) \\<and>\n  \\<guillemotleft>local.curry F F F\n                   f1 : local.curry F F F\n                         (A1.dom\n                           f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                  F F F (A1.cod f1)\\<guillemotright>\n  local.curry F G \\<tau> (A1.dom f1) =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.dom f1, f2))\n   (\\<lambda>f2. \\<tau> (A1.dom f1, f2)) \\<and>\n  \\<guillemotleft>local.curry F G \\<tau>\n                   (A1.cod\n                     f1) : local.curry F F F\n                            (A1.cod\n                              f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                     G G G (A1.cod f1)\\<guillemotright>", "show ?thesis"], ["proof (prove)\nusing this:\n  local.curry F F F f1 =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2)) \\<and>\n  \\<guillemotleft>local.curry F F F\n                   f1 : local.curry F F F\n                         (A1.dom\n                           f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                  F F F (A1.cod f1)\\<guillemotright>\n  local.curry F G \\<tau> (A1.dom f1) =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.dom f1, f2))\n   (\\<lambda>f2. \\<tau> (A1.dom f1, f2)) \\<and>\n  \\<guillemotleft>local.curry F G \\<tau>\n                   (A1.cod\n                     f1) : local.curry F F F\n                            (A1.cod\n                              f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                     G G G (A1.cod f1)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map", "using f1 curry_def"], ["proof (prove)\nusing this:\n  local.curry F F F f1 =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2)) \\<and>\n  \\<guillemotleft>local.curry F F F\n                   f1 : local.curry F F F\n                         (A1.dom\n                           f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                  F F F (A1.cod f1)\\<guillemotright>\n  local.curry F G \\<tau> (A1.dom f1) =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.dom f1, f2))\n   (\\<lambda>f2. \\<tau> (A1.dom f1, f2)) \\<and>\n  \\<guillemotleft>local.curry F G \\<tau>\n                   (A1.cod\n                     f1) : local.curry F F F\n                            (A1.cod\n                              f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                     G G G (A1.cod f1)\\<guillemotright>\n  A1.arr f1\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  (if A1.arr ?f1.0\n   then A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n         (\\<lambda>f2. ?G (A1.cod ?f1.0, f2))\n         (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n   else A2_B.null)\n\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map", "by fastforce"], ["proof (state)\nthis:\n  local.curry F G \\<tau>\n   (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n  local.curry F F F f1 =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.curry F G \\<tau>\n   (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n  local.curry F F F f1 =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map\n\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    local.curry F G \\<tau> f1", "also"], ["proof (state)\nthis:\n  local.curry F G \\<tau>\n   (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n  local.curry F F F f1 =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map\n\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    local.curry F G \\<tau> f1", "have \"... = A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n                                      (\\<lambda>f2. \\<tau> (f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2))", "proof (intro A2_B.MkArr_eqI)"], ["proof (state)\ngoal (4 subgoals):\n 1. A2_B.arr\n     (A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n       (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map)\n 2. (\\<lambda>f2. F (A1.dom f1, f2)) = (\\<lambda>f2. F (A1.dom f1, f2))\n 3. (\\<lambda>f2. G (A1.cod f1, f2)) = (\\<lambda>f2. G (A1.cod f1, f2))\n 4. \\<tau>_cod_f1oF_f1.map = (\\<lambda>f2. \\<tau> (f1, f2))", "show \"(\\<lambda>f2. F (A1.dom f1, f2)) = (\\<lambda>f2. F (A1.dom f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f2. F (A1.dom f1, f2)) = (\\<lambda>f2. F (A1.dom f1, f2))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>f2. F (A1.dom f1, f2)) = (\\<lambda>f2. F (A1.dom f1, f2))\n\ngoal (3 subgoals):\n 1. A2_B.arr\n     (A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n       (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map)\n 2. (\\<lambda>f2. G (A1.cod f1, f2)) = (\\<lambda>f2. G (A1.cod f1, f2))\n 3. \\<tau>_cod_f1oF_f1.map = (\\<lambda>f2. \\<tau> (f1, f2))", "show \"(\\<lambda>f2. G (A1.cod f1, f2)) = (\\<lambda>f2. G (A1.cod f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f2. G (A1.cod f1, f2)) = (\\<lambda>f2. G (A1.cod f1, f2))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>f2. G (A1.cod f1, f2)) = (\\<lambda>f2. G (A1.cod f1, f2))\n\ngoal (2 subgoals):\n 1. A2_B.arr\n     (A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n       (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map)\n 2. \\<tau>_cod_f1oF_f1.map = (\\<lambda>f2. \\<tau> (f1, f2))", "show \"A2_B.arr (A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n                                       \\<tau>_cod_f1oF_f1.map)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.arr\n     (A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n       (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map)", "using \\<tau>_cod_f1oF_f1.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n   (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n   \\<tau>_cod_f1oF_f1.map\n\ngoal (1 subgoal):\n 1. A2_B.arr\n     (A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n       (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map)", "by blast"], ["proof (state)\nthis:\n  A2_B.arr\n   (A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map)\n\ngoal (1 subgoal):\n 1. \\<tau>_cod_f1oF_f1.map = (\\<lambda>f2. \\<tau> (f1, f2))", "show \"\\<tau>_cod_f1oF_f1.map = (\\<lambda>f2. \\<tau> (f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>_cod_f1oF_f1.map = (\\<lambda>f2. \\<tau> (f1, f2))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f2. \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)", "fix f2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f2. \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)", "have \"\\<not>A2.arr f2 \\<Longrightarrow> \\<tau>_cod_f1oF_f1.map f2 = (\\<lambda>f2. \\<tau> (f1, f2)) f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> A2.arr f2 \\<Longrightarrow>\n    \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)", "using f1"], ["proof (prove)\nusing this:\n  A1.arr f1\n\ngoal (1 subgoal):\n 1. \\<not> A2.arr f2 \\<Longrightarrow>\n    \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)", "by (simp add: \\<tau>.is_extensional \\<tau>_cod_f1oF_f1.is_extensional)"], ["proof (state)\nthis:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)\n\ngoal (1 subgoal):\n 1. \\<And>f2. \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)", "moreover"], ["proof (state)\nthis:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)\n\ngoal (1 subgoal):\n 1. \\<And>f2. \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)", "have \"A2.arr f2 \\<Longrightarrow> \\<tau>_cod_f1oF_f1.map f2 = (\\<lambda>f2. \\<tau> (f1, f2)) f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2.arr f2 \\<Longrightarrow> \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A2.arr f2 \\<Longrightarrow> \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)", "interpret \\<tau>_f1: natural_transformation A2 B \\<open>\\<lambda>f2. F (A1.dom f1, f2)\\<close>\n                                  \\<open>\\<lambda>f2. G (A1.cod f1, f2)\\<close> \\<open>\\<lambda>f2. \\<tau> (f1, f2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n     (\\<lambda>f2. \\<tau> (f1, f2))", "using assms f1 curry_in_hom [of f1] curry_simp"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) F G \\<tau>\n  A1.arr f1\n  \\<lbrakk>A1.arr f1;\n   natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n    (\\<cdot>\\<^sub>B) ?F ?G ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>local.curry ?F ?G ?\\<tau>\n                                     f1 : local.curry ?F ?F ?F\n     (A1.dom\n       f1) \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] local.curry\n                                    ?G ?G ?G (A1.cod f1)\\<guillemotright>\n  A1.arr ?f1.0 \\<Longrightarrow>\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n   (\\<lambda>f2. ?G (A1.cod ?f1.0, f2)) (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. G (A1.cod f1, f2))\n     (\\<lambda>f2. \\<tau> (f1, f2))", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. A2.arr f2 \\<Longrightarrow> \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)", "fix f2"], ["proof (state)\ngoal (1 subgoal):\n 1. A2.arr f2__ \\<Longrightarrow>\n    \\<tau>_cod_f1oF_f1.map f2__ = \\<tau> (f1, f2__)", "assume f2: \"A2.arr f2\""], ["proof (state)\nthis:\n  A2.arr f2\n\ngoal (1 subgoal):\n 1. A2.arr f2__ \\<Longrightarrow>\n    \\<tau>_cod_f1oF_f1.map f2__ = \\<tau> (f1, f2__)", "show \"\\<tau>_cod_f1oF_f1.map f2 = (\\<lambda>f2. \\<tau> (f1, f2)) f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)", "using f1 f2 \\<tau>_cod_f1oF_f1.map_simp_1 B.comp_assoc \\<tau>.is_natural_2"], ["proof (prove)\nusing this:\n  A1.arr f1\n  A2.arr f2\n  A2.arr ?f \\<Longrightarrow>\n  \\<tau>_cod_f1oF_f1.map ?f =\n  \\<tau> (A1.cod f1, A2.cod ?f) \\<cdot>\\<^sub>B F (f1, ?f)\n  (?h \\<cdot>\\<^sub>B ?g) \\<cdot>\\<^sub>B ?f =\n  ?h \\<cdot>\\<^sub>B ?g \\<cdot>\\<^sub>B ?f\n  A1xA2.arr ?f \\<Longrightarrow>\n  \\<tau> (A1xA2.cod ?f) \\<cdot>\\<^sub>B F ?f = \\<tau> ?f\n\ngoal (1 subgoal):\n 1. \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)", "by fastforce"], ["proof (state)\nthis:\n  \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A2.arr f2 \\<Longrightarrow> \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)\n\ngoal (1 subgoal):\n 1. \\<And>f2. \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)\n  A2.arr f2 \\<Longrightarrow> \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)", "show \"\\<tau>_cod_f1oF_f1.map f2 = (\\<lambda>f2. \\<tau> (f1, f2)) f2\""], ["proof (prove)\nusing this:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)\n  A2.arr f2 \\<Longrightarrow> \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)\n\ngoal (1 subgoal):\n 1. \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)", "by blast"], ["proof (state)\nthis:\n  \\<tau>_cod_f1oF_f1.map f2 = \\<tau> (f1, f2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<tau>_cod_f1oF_f1.map = (\\<lambda>f2. \\<tau> (f1, f2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2))\n\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    local.curry F G \\<tau> f1", "also"], ["proof (state)\nthis:\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) \\<tau>_cod_f1oF_f1.map =\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2))\n\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    local.curry F G \\<tau> f1", "have \"... = curry F G \\<tau> f1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2)) =\n    local.curry F G \\<tau> f1", "using f1 curry_def"], ["proof (prove)\nusing this:\n  A1.arr f1\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  (if A1.arr ?f1.0\n   then A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n         (\\<lambda>f2. ?G (A1.cod ?f1.0, f2))\n         (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n   else A2_B.null)\n\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2)) =\n    local.curry F G \\<tau> f1", "by simp"], ["proof (state)\nthis:\n  A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n   (\\<lambda>f2. G (A1.cod f1, f2)) (\\<lambda>f2. \\<tau> (f1, f2)) =\n  local.curry F G \\<tau> f1\n\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    local.curry F G \\<tau> f1", "finally"], ["proof (chain)\npicking this:\n  local.curry F G \\<tau>\n   (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n  local.curry F F F f1 =\n  local.curry F G \\<tau> f1", "show ?thesis"], ["proof (prove)\nusing this:\n  local.curry F G \\<tau>\n   (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n  local.curry F F F f1 =\n  local.curry F G \\<tau> f1\n\ngoal (1 subgoal):\n 1. local.curry F G \\<tau>\n     (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n    local.curry F F F f1 =\n    local.curry F G \\<tau> f1", "by blast"], ["proof (state)\nthis:\n  local.curry F G \\<tau>\n   (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n  local.curry F F F f1 =\n  local.curry F G \\<tau> f1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.curry F G \\<tau>\n   (A1.cod f1) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\n  local.curry F F F f1 =\n  local.curry F G \\<tau> f1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)\n   (local.curry G G G) (local.curry F G \\<tau>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma uncurry_preserves_functors:\n    assumes \"functor A1 A2_B.comp F\"\n    shows \"functor A1xA2.comp B (uncurry F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F)", "interpret F: \"functor\" A1 A2_B.comp F"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F", "using assms"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F)", "using uncurry_def"], ["proof (prove)\nusing this:\n  uncurry ?\\<tau> ?f \\<equiv>\n  if A1xA2.arr ?f then E.map (?\\<tau> (fst ?f), snd ?f) else B.null\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F)", "apply (unfold_locales)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        \\<not> A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> uncurry F f = B.null\n 2. \\<And>f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> B.arr (uncurry F f)\n 3. \\<And>f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> B.dom (uncurry F f) = uncurry F (A1xA2.dom f)\n 4. \\<And>f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.arr f\\<rbrakk>\n       \\<Longrightarrow> B.cod (uncurry F f) = uncurry F (A1xA2.cod f)\n 5. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "apply auto[4]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "fix f g :: \"'a1 * 'a2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "let ?f1 = \"fst f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "let ?f2 = \"snd f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "let ?g1 = \"fst g\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "let ?g2 = \"snd g\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "assume fg: \"A1xA2.seq g f\""], ["proof (state)\nthis:\n  A1xA2.seq g f\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "have f: \"A1xA2.arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A1xA2.arr f", "using fg A1xA2.seqE"], ["proof (prove)\nusing this:\n  A1xA2.seq g f\n  \\<lbrakk>A1xA2.seq ?g ?f;\n   \\<lbrakk>A1.seq (fst ?g) (fst ?f); A2.seq (snd ?g) (snd ?f)\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n\ngoal (1 subgoal):\n 1. A1xA2.arr f", "by blast"], ["proof (state)\nthis:\n  A1xA2.arr f\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "have f1: \"A1.arr ?f1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A1.arr (fst f)", "using f"], ["proof (prove)\nusing this:\n  A1xA2.arr f\n\ngoal (1 subgoal):\n 1. A1.arr (fst f)", "by auto"], ["proof (state)\nthis:\n  A1.arr (fst f)\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "have f2: \"A2.arr ?f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2.arr (snd f)", "using f"], ["proof (prove)\nusing this:\n  A1xA2.arr f\n\ngoal (1 subgoal):\n 1. A2.arr (snd f)", "by auto"], ["proof (state)\nthis:\n  A2.arr (snd f)\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "have g: \"\\<guillemotleft>g : A1xA2.cod f \\<rightarrow>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 A1xA2.cod g\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>g : A1xA2.cod\n                         f \\<rightarrow>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 A1xA2.cod\n      g\\<guillemotright>", "using fg A1xA2.dom_char A1xA2.cod_char"], ["proof (prove)\nusing this:\n  A1xA2.seq g f\n  A1xA2.dom ?f =\n  (if A1.arr (fst ?f) \\<and> A2.arr (snd ?f)\n   then (A1.dom (fst ?f), A2.dom (snd ?f)) else (A1.null, A2.null))\n  A1xA2.cod ?f =\n  (if A1.arr (fst ?f) \\<and> A2.arr (snd ?f)\n   then (A1.cod (fst ?f), A2.cod (snd ?f)) else (A1.null, A2.null))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>g : A1xA2.cod\n                         f \\<rightarrow>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 A1xA2.cod\n      g\\<guillemotright>", "by (elim A1xA2.seqE, intro A1xA2.in_homI, auto)"], ["proof (state)\nthis:\n  \\<guillemotleft>g : A1xA2.cod\n                       f \\<rightarrow>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 A1xA2.cod\n    g\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "let ?g1 = \"fst g\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "let ?g2 = \"snd g\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "have g1: \"\\<guillemotleft>?g1 : A1.cod ?f1 \\<rightarrow>\\<^sub>A\\<^sub>1 A1.cod ?g1\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>fst g : A1.cod\n                             (fst f) \\<rightarrow>\\<^sub>A\\<^sub>1 A1.cod\n                              (fst g)\\<guillemotright>", "using f g"], ["proof (prove)\nusing this:\n  A1xA2.arr f\n  \\<guillemotleft>g : A1xA2.cod\n                       f \\<rightarrow>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 A1xA2.cod\n    g\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>fst g : A1.cod\n                             (fst f) \\<rightarrow>\\<^sub>A\\<^sub>1 A1.cod\n                              (fst g)\\<guillemotright>", "by (intro A1.in_homI, auto)"], ["proof (state)\nthis:\n  \\<guillemotleft>fst g : A1.cod\n                           (fst f) \\<rightarrow>\\<^sub>A\\<^sub>1 A1.cod\n                            (fst g)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "have g2: \"\\<guillemotleft>?g2 : A2.cod ?f2 \\<rightarrow>\\<^sub>A\\<^sub>2 A2.cod ?g2\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>snd g : A2.cod\n                             (snd f) \\<rightarrow>\\<^sub>A\\<^sub>2 A2.cod\n                              (snd g)\\<guillemotright>", "using f g"], ["proof (prove)\nusing this:\n  A1xA2.arr f\n  \\<guillemotleft>g : A1xA2.cod\n                       f \\<rightarrow>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 A1xA2.cod\n    g\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>snd g : A2.cod\n                             (snd f) \\<rightarrow>\\<^sub>A\\<^sub>2 A2.cod\n                              (snd g)\\<guillemotright>", "by (intro A2.in_homI, auto)"], ["proof (state)\nthis:\n  \\<guillemotleft>snd g : A2.cod\n                           (snd f) \\<rightarrow>\\<^sub>A\\<^sub>2 A2.cod\n                            (snd g)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "interpret Ff1: natural_transformation A2 B \\<open>A2_B.Dom (F ?f1)\\<close> \\<open>A2_B.Cod (F ?f1)\\<close>\n                                                   \\<open>A2_B.Map (F ?f1)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (A2_B.Dom (F (fst f))) (A2_B.Cod (F (fst f))) (A2_B.Map (F (fst f)))", "using f A2_B.arr_char [of \"F ?f1\"]"], ["proof (prove)\nusing this:\n  A1xA2.arr f\n  A2_B.arr (F (fst f)) =\n  (F (fst f) \\<noteq> A2_B.Null \\<and>\n   A2_B.Dom (F (fst f))\n   \\<in> Collect\n          (functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)) \\<and>\n   A2_B.Cod (F (fst f))\n   \\<in> Collect\n          (functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)) \\<and>\n   A2_B.Map (F (fst f))\n   \\<in> Collect\n          (natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2)\n            (\\<cdot>\\<^sub>B) (A2_B.Dom (F (fst f)))\n            (A2_B.Cod (F (fst f)))))\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (A2_B.Dom (F (fst f))) (A2_B.Cod (F (fst f))) (A2_B.Map (F (fst f)))", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "interpret Fg1: natural_transformation A2 B \\<open>A2_B.Cod (F ?f1)\\<close> \\<open>A2_B.Cod (F ?g1)\\<close>\n                                                   \\<open>A2_B.Map (F ?g1)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (A2_B.Cod (F (fst f))) (A2_B.Cod (F (fst g))) (A2_B.Map (F (fst g)))", "using f1 g1 A2_B.arr_char F.preserves_arr\n                A2_B.Map_dom [of \"F ?g1\"] A2_B.Map_cod [of \"F ?f1\"]"], ["proof (prove)\nusing this:\n  A1.arr (fst f)\n  \\<guillemotleft>fst g : A1.cod\n                           (fst f) \\<rightarrow>\\<^sub>A\\<^sub>1 A1.cod\n                            (fst g)\\<guillemotright>\n  A2_B.arr ?f =\n  (?f \\<noteq> A2_B.Null \\<and>\n   A2_B.Dom ?f\n   \\<in> Collect\n          (functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)) \\<and>\n   A2_B.Cod ?f\n   \\<in> Collect\n          (functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)) \\<and>\n   A2_B.Map ?f\n   \\<in> Collect\n          (natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2)\n            (\\<cdot>\\<^sub>B) (A2_B.Dom ?f) (A2_B.Cod ?f)))\n  A1.arr ?f \\<Longrightarrow> A2_B.arr (F ?f)\n  A2_B.arr (F (fst g)) \\<Longrightarrow>\n  A2_B.Map (A2_B.dom (F (fst g))) = A2_B.Dom (F (fst g))\n  A2_B.arr (F (fst f)) \\<Longrightarrow>\n  A2_B.Map (A2_B.cod (F (fst f))) = A2_B.Cod (F (fst f))\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (A2_B.Cod (F (fst f))) (A2_B.Cod (F (fst g))) (A2_B.Map (F (fst g)))", "by fastforce"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "interpret Fg1oFf1: vertical_composite A2 B\n                              \\<open>A2_B.Dom (F ?f1)\\<close> \\<open>A2_B.Cod (F ?f1)\\<close> \\<open>A2_B.Cod (F ?g1)\\<close>\n                              \\<open>A2_B.Map (F ?f1)\\<close> \\<open>A2_B.Map (F ?g1)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (A2_B.Dom (F (fst f))) (A2_B.Cod (F (fst f))) (A2_B.Cod (F (fst g)))\n     (A2_B.Map (F (fst f))) (A2_B.Map (F (fst g)))", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       \\<lbrakk>\\<And>\\<tau> f.\n                   uncurry \\<tau> f \\<equiv>\n                   if A1xA2.arr f then E.map (\\<tau> (fst f), snd f)\n                   else B.null;\n        A1xA2.seq g f\\<rbrakk>\n       \\<Longrightarrow> uncurry F\n                          (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\n                           f) =\n                         uncurry F g \\<cdot>\\<^sub>B uncurry F f", "show \"uncurry F (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 f) = uncurry F g \\<cdot>\\<^sub>B uncurry F f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uncurry F (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 f) =\n    uncurry F g \\<cdot>\\<^sub>B uncurry F f", "using f1 g1 g2 g2 f g fg E.map_simp uncurry_def"], ["proof (prove)\nusing this:\n  A1.arr (fst f)\n  \\<guillemotleft>fst g : A1.cod\n                           (fst f) \\<rightarrow>\\<^sub>A\\<^sub>1 A1.cod\n                            (fst g)\\<guillemotright>\n  \\<guillemotleft>snd g : A2.cod\n                           (snd f) \\<rightarrow>\\<^sub>A\\<^sub>2 A2.cod\n                            (snd g)\\<guillemotright>\n  \\<guillemotleft>snd g : A2.cod\n                           (snd f) \\<rightarrow>\\<^sub>A\\<^sub>2 A2.cod\n                            (snd g)\\<guillemotright>\n  A1xA2.arr f\n  \\<guillemotleft>g : A1xA2.cod\n                       f \\<rightarrow>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 A1xA2.cod\n    g\\<guillemotright>\n  A1xA2.seq g f\n  A2_BxA2.arr ?Fg \\<Longrightarrow> E.map ?Fg = A2_B.Map (fst ?Fg) (snd ?Fg)\n  uncurry ?\\<tau> ?f \\<equiv>\n  if A1xA2.arr ?f then E.map (?\\<tau> (fst ?f), snd ?f) else B.null\n\ngoal (1 subgoal):\n 1. uncurry F (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 f) =\n    uncurry F g \\<cdot>\\<^sub>B uncurry F f", "by auto"], ["proof (state)\nthis:\n  uncurry F (g \\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 f) =\n  uncurry F g \\<cdot>\\<^sub>B uncurry F f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) (uncurry F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma uncurry_preserves_transformations:\n    assumes \"natural_transformation A1 A2_B.comp F G \\<tau>\"\n    shows \"natural_transformation A1xA2.comp B (uncurry F) (uncurry G) (uncurry \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F) (uncurry G) (uncurry \\<tau>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F) (uncurry G) (uncurry \\<tau>)", "interpret \\<tau>: natural_transformation A1 A2_B.comp F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F G \\<tau>", "using assms"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F G \\<tau>\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F G \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F) (uncurry G) (uncurry \\<tau>)", "interpret \"functor\" A1xA2.comp B \\<open>uncurry F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F)", "using \\<tau>.F.functor_axioms uncurry_preserves_functors"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) ?F \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) (uncurry ?F)\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F) (uncurry G) (uncurry \\<tau>)", "interpret \"functor\" A1xA2.comp B \\<open>uncurry G\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry G)", "using \\<tau>.G.functor_axioms uncurry_preserves_functors"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) G\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) ?F \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) (uncurry ?F)\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry G)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F) (uncurry G) (uncurry \\<tau>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F) (uncurry G) (uncurry \\<tau>)", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f. \\<not> A1xA2.arr f \\<Longrightarrow> uncurry \\<tau> f = B.null\n 2. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       B.dom (uncurry \\<tau> f) = uncurry F (A1xA2.dom f)\n 3. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       B.cod (uncurry \\<tau> f) = uncurry G (A1xA2.cod f)\n 4. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry G f \\<cdot>\\<^sub>B uncurry \\<tau> (A1xA2.dom f) =\n       uncurry \\<tau> f\n 5. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n       uncurry \\<tau> f", "fix f"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f. \\<not> A1xA2.arr f \\<Longrightarrow> uncurry \\<tau> f = B.null\n 2. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       B.dom (uncurry \\<tau> f) = uncurry F (A1xA2.dom f)\n 3. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       B.cod (uncurry \\<tau> f) = uncurry G (A1xA2.cod f)\n 4. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry G f \\<cdot>\\<^sub>B uncurry \\<tau> (A1xA2.dom f) =\n       uncurry \\<tau> f\n 5. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n       uncurry \\<tau> f", "show \"\\<not> A1xA2.arr f \\<Longrightarrow> uncurry \\<tau> f = B.null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> A1xA2.arr f \\<Longrightarrow> uncurry \\<tau> f = B.null", "using uncurry_def"], ["proof (prove)\nusing this:\n  uncurry ?\\<tau> ?f \\<equiv>\n  if A1xA2.arr ?f then E.map (?\\<tau> (fst ?f), snd ?f) else B.null\n\ngoal (1 subgoal):\n 1. \\<not> A1xA2.arr f \\<Longrightarrow> uncurry \\<tau> f = B.null", "by auto"], ["proof (state)\nthis:\n  \\<not> A1xA2.arr f \\<Longrightarrow> uncurry \\<tau> f = B.null\n\ngoal (4 subgoals):\n 1. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       B.dom (uncurry \\<tau> f) = uncurry F (A1xA2.dom f)\n 2. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       B.cod (uncurry \\<tau> f) = uncurry G (A1xA2.cod f)\n 3. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry G f \\<cdot>\\<^sub>B uncurry \\<tau> (A1xA2.dom f) =\n       uncurry \\<tau> f\n 4. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n       uncurry \\<tau> f", "assume f: \"A1xA2.arr f\""], ["proof (state)\nthis:\n  A1xA2.arr f\n\ngoal (4 subgoals):\n 1. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       B.dom (uncurry \\<tau> f) = uncurry F (A1xA2.dom f)\n 2. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       B.cod (uncurry \\<tau> f) = uncurry G (A1xA2.cod f)\n 3. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry G f \\<cdot>\\<^sub>B uncurry \\<tau> (A1xA2.dom f) =\n       uncurry \\<tau> f\n 4. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n       uncurry \\<tau> f", "let ?f1 = \"fst f\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       B.dom (uncurry \\<tau> f) = uncurry F (A1xA2.dom f)\n 2. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       B.cod (uncurry \\<tau> f) = uncurry G (A1xA2.cod f)\n 3. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry G f \\<cdot>\\<^sub>B uncurry \\<tau> (A1xA2.dom f) =\n       uncurry \\<tau> f\n 4. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n       uncurry \\<tau> f", "let ?f2 = \"snd f\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       B.dom (uncurry \\<tau> f) = uncurry F (A1xA2.dom f)\n 2. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       B.cod (uncurry \\<tau> f) = uncurry G (A1xA2.cod f)\n 3. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry G f \\<cdot>\\<^sub>B uncurry \\<tau> (A1xA2.dom f) =\n       uncurry \\<tau> f\n 4. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n       uncurry \\<tau> f", "show \"B.dom (uncurry \\<tau> f) = uncurry F (A1xA2.dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B.dom (uncurry \\<tau> f) = uncurry F (A1xA2.dom f)", "using f uncurry_def"], ["proof (prove)\nusing this:\n  A1xA2.arr f\n  uncurry ?\\<tau> ?f \\<equiv>\n  if A1xA2.arr ?f then E.map (?\\<tau> (fst ?f), snd ?f) else B.null\n\ngoal (1 subgoal):\n 1. B.dom (uncurry \\<tau> f) = uncurry F (A1xA2.dom f)", "by simp"], ["proof (state)\nthis:\n  B.dom (uncurry \\<tau> f) = uncurry F (A1xA2.dom f)\n\ngoal (3 subgoals):\n 1. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       B.cod (uncurry \\<tau> f) = uncurry G (A1xA2.cod f)\n 2. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry G f \\<cdot>\\<^sub>B uncurry \\<tau> (A1xA2.dom f) =\n       uncurry \\<tau> f\n 3. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n       uncurry \\<tau> f", "show \"B.cod (uncurry \\<tau> f) = uncurry G (A1xA2.cod f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B.cod (uncurry \\<tau> f) = uncurry G (A1xA2.cod f)", "using f uncurry_def"], ["proof (prove)\nusing this:\n  A1xA2.arr f\n  uncurry ?\\<tau> ?f \\<equiv>\n  if A1xA2.arr ?f then E.map (?\\<tau> (fst ?f), snd ?f) else B.null\n\ngoal (1 subgoal):\n 1. B.cod (uncurry \\<tau> f) = uncurry G (A1xA2.cod f)", "by simp"], ["proof (state)\nthis:\n  B.cod (uncurry \\<tau> f) = uncurry G (A1xA2.cod f)\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry G f \\<cdot>\\<^sub>B uncurry \\<tau> (A1xA2.dom f) =\n       uncurry \\<tau> f\n 2. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n       uncurry \\<tau> f", "show \"uncurry G f \\<cdot>\\<^sub>B uncurry \\<tau> (A1xA2.dom f) = uncurry \\<tau> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uncurry G f \\<cdot>\\<^sub>B uncurry \\<tau> (A1xA2.dom f) =\n    uncurry \\<tau> f", "using f uncurry_def \\<tau>.is_natural_1 A2_BxA2.seq_char A2.comp_arr_dom\n                E.preserves_comp [of \"(G (fst f), snd f)\" \"(\\<tau> (A1.dom (fst f)), A2.dom (snd f))\"]"], ["proof (prove)\nusing this:\n  A1xA2.arr f\n  uncurry ?\\<tau> ?f \\<equiv>\n  if A1xA2.arr ?f then E.map (?\\<tau> (fst ?f), snd ?f) else B.null\n  A1.arr ?f \\<Longrightarrow>\n  G ?f \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>] \\<tau> (A1.dom ?f) =\n  \\<tau> ?f\n  A2_BxA2.seq ?g ?f =\n  (A2_B.seq (fst ?g) (fst ?f) \\<and> A2.seq (snd ?g) (snd ?f))\n  \\<lbrakk>A2.arr ?f; A2.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>A\\<^sub>2 ?a = ?f\n  A2_BxA2.seq (G (fst f), snd f)\n   (\\<tau> (A1.dom (fst f)), A2.dom (snd f)) \\<Longrightarrow>\n  E.map\n   ((G (fst f),\n     snd f) \\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>]\\<^sub>x\\<^sub>A\\<^sub>2\n    (\\<tau> (A1.dom (fst f)), A2.dom (snd f))) =\n  E.map (G (fst f), snd f) \\<cdot>\\<^sub>B\n  E.map (\\<tau> (A1.dom (fst f)), A2.dom (snd f))\n\ngoal (1 subgoal):\n 1. uncurry G f \\<cdot>\\<^sub>B uncurry \\<tau> (A1xA2.dom f) =\n    uncurry \\<tau> f", "by auto"], ["proof (state)\nthis:\n  uncurry G f \\<cdot>\\<^sub>B uncurry \\<tau> (A1xA2.dom f) =\n  uncurry \\<tau> f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       A1xA2.arr f \\<Longrightarrow>\n       uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n       uncurry \\<tau> f", "show \"uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f = uncurry \\<tau> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n    uncurry \\<tau> f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n    uncurry \\<tau> f", "have 1: \"A1.arr ?f1 \\<and> A1.arr (fst (A1.cod ?f1, A2.cod ?f2)) \\<and>\n                   A1.cod ?f1 = A1.dom (fst (A1.cod ?f1, A2.cod ?f2)) \\<and>\n                   A2.seq (snd (A1.cod ?f1, A2.cod ?f2)) ?f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A1.arr (fst f) \\<and>\n    A1.arr (fst (A1.cod (fst f), A2.cod (snd f))) \\<and>\n    A1.cod (fst f) = A1.dom (fst (A1.cod (fst f), A2.cod (snd f))) \\<and>\n    A2.seq (snd (A1.cod (fst f), A2.cod (snd f))) (snd f)", "using f A1.arr_cod_iff_arr A2.arr_cod_iff_arr"], ["proof (prove)\nusing this:\n  A1xA2.arr f\n  A1.arr (A1.cod ?f) = A1.arr ?f\n  A2.arr (A2.cod ?f) = A2.arr ?f\n\ngoal (1 subgoal):\n 1. A1.arr (fst f) \\<and>\n    A1.arr (fst (A1.cod (fst f), A2.cod (snd f))) \\<and>\n    A1.cod (fst f) = A1.dom (fst (A1.cod (fst f), A2.cod (snd f))) \\<and>\n    A2.seq (snd (A1.cod (fst f), A2.cod (snd f))) (snd f)", "by auto"], ["proof (state)\nthis:\n  A1.arr (fst f) \\<and>\n  A1.arr (fst (A1.cod (fst f), A2.cod (snd f))) \\<and>\n  A1.cod (fst f) = A1.dom (fst (A1.cod (fst f), A2.cod (snd f))) \\<and>\n  A2.seq (snd (A1.cod (fst f), A2.cod (snd f))) (snd f)\n\ngoal (1 subgoal):\n 1. uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n    uncurry \\<tau> f", "hence 2:\n              \"?f2 = A2 (snd (\\<tau> (fst (A1xA2.cod f)), snd (A1xA2.cod f))) (snd (F ?f1, ?f2))\""], ["proof (prove)\nusing this:\n  A1.arr (fst f) \\<and>\n  A1.arr (fst (A1.cod (fst f), A2.cod (snd f))) \\<and>\n  A1.cod (fst f) = A1.dom (fst (A1.cod (fst f), A2.cod (snd f))) \\<and>\n  A2.seq (snd (A1.cod (fst f), A2.cod (snd f))) (snd f)\n\ngoal (1 subgoal):\n 1. snd f =\n    snd (\\<tau> (fst (A1xA2.cod f)),\n         snd (A1xA2.cod f)) \\<cdot>\\<^sub>A\\<^sub>2\n    snd (F (fst f), snd f)", "using f A2.comp_cod_arr"], ["proof (prove)\nusing this:\n  A1.arr (fst f) \\<and>\n  A1.arr (fst (A1.cod (fst f), A2.cod (snd f))) \\<and>\n  A1.cod (fst f) = A1.dom (fst (A1.cod (fst f), A2.cod (snd f))) \\<and>\n  A2.seq (snd (A1.cod (fst f), A2.cod (snd f))) (snd f)\n  A1xA2.arr f\n  \\<lbrakk>A2.arr ?f; A2.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>A\\<^sub>2 ?f = ?f\n\ngoal (1 subgoal):\n 1. snd f =\n    snd (\\<tau> (fst (A1xA2.cod f)),\n         snd (A1xA2.cod f)) \\<cdot>\\<^sub>A\\<^sub>2\n    snd (F (fst f), snd f)", "by simp"], ["proof (state)\nthis:\n  snd f =\n  snd (\\<tau> (fst (A1xA2.cod f)),\n       snd (A1xA2.cod f)) \\<cdot>\\<^sub>A\\<^sub>2\n  snd (F (fst f), snd f)\n\ngoal (1 subgoal):\n 1. uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n    uncurry \\<tau> f", "have \"A2_B.arr (\\<tau> ?f1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.arr (\\<tau> (fst f))", "using 1"], ["proof (prove)\nusing this:\n  A1.arr (fst f) \\<and>\n  A1.arr (fst (A1.cod (fst f), A2.cod (snd f))) \\<and>\n  A1.cod (fst f) = A1.dom (fst (A1.cod (fst f), A2.cod (snd f))) \\<and>\n  A2.seq (snd (A1.cod (fst f), A2.cod (snd f))) (snd f)\n\ngoal (1 subgoal):\n 1. A2_B.arr (\\<tau> (fst f))", "by force"], ["proof (state)\nthis:\n  A2_B.arr (\\<tau> (fst f))\n\ngoal (1 subgoal):\n 1. uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n    uncurry \\<tau> f", "thus ?thesis"], ["proof (prove)\nusing this:\n  A2_B.arr (\\<tau> (fst f))\n\ngoal (1 subgoal):\n 1. uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n    uncurry \\<tau> f", "unfolding uncurry_def E.map_def"], ["proof (prove)\nusing this:\n  A2_B.arr (\\<tau> (fst f))\n\ngoal (1 subgoal):\n 1. (if A1xA2.arr (A1xA2.cod f)\n     then if A2_BxA2.arr (\\<tau> (fst (A1xA2.cod f)), snd (A1xA2.cod f))\n          then A2_B.Map\n                (fst (\\<tau> (fst (A1xA2.cod f)), snd (A1xA2.cod f)))\n                (snd (\\<tau> (fst (A1xA2.cod f)), snd (A1xA2.cod f)))\n          else B.null\n     else B.null) \\<cdot>\\<^sub>B\n    (if A1xA2.arr f\n     then if A2_BxA2.arr (F (fst f), snd f)\n          then A2_B.Map (fst (F (fst f), snd f)) (snd (F (fst f), snd f))\n          else B.null\n     else B.null) =\n    (if A1xA2.arr f\n     then if A2_BxA2.arr (\\<tau> (fst f), snd f)\n          then A2_B.Map (fst (\\<tau> (fst f), snd f))\n                (snd (\\<tau> (fst f), snd f))\n          else B.null\n     else B.null)", "using f 1 2"], ["proof (prove)\nusing this:\n  A2_B.arr (\\<tau> (fst f))\n  A1xA2.arr f\n  A1.arr (fst f) \\<and>\n  A1.arr (fst (A1.cod (fst f), A2.cod (snd f))) \\<and>\n  A1.cod (fst f) = A1.dom (fst (A1.cod (fst f), A2.cod (snd f))) \\<and>\n  A2.seq (snd (A1.cod (fst f), A2.cod (snd f))) (snd f)\n  snd f =\n  snd (\\<tau> (fst (A1xA2.cod f)),\n       snd (A1xA2.cod f)) \\<cdot>\\<^sub>A\\<^sub>2\n  snd (F (fst f), snd f)\n\ngoal (1 subgoal):\n 1. (if A1xA2.arr (A1xA2.cod f)\n     then if A2_BxA2.arr (\\<tau> (fst (A1xA2.cod f)), snd (A1xA2.cod f))\n          then A2_B.Map\n                (fst (\\<tau> (fst (A1xA2.cod f)), snd (A1xA2.cod f)))\n                (snd (\\<tau> (fst (A1xA2.cod f)), snd (A1xA2.cod f)))\n          else B.null\n     else B.null) \\<cdot>\\<^sub>B\n    (if A1xA2.arr f\n     then if A2_BxA2.arr (F (fst f), snd f)\n          then A2_B.Map (fst (F (fst f), snd f)) (snd (F (fst f), snd f))\n          else B.null\n     else B.null) =\n    (if A1xA2.arr f\n     then if A2_BxA2.arr (\\<tau> (fst f), snd f)\n          then A2_B.Map (fst (\\<tau> (fst f), snd f))\n                (snd (\\<tau> (fst f), snd f))\n          else B.null\n     else B.null)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A2.arr (snd f);\n     A1.arr (fst f) \\<and>\n     A1.arr (A1.cod (fst f)) \\<and>\n     A1.cod (fst f) = A1.dom (A1.cod (fst f));\n     snd f = A2.cod (snd f) \\<cdot>\\<^sub>A\\<^sub>2 snd f\\<rbrakk>\n    \\<Longrightarrow> A2_B.Map (\\<tau> (A1.cod (fst f)))\n                       (A2.cod (snd f)) \\<cdot>\\<^sub>B\n                      A2_B.Map (F (fst f)) (snd f) =\n                      A2_B.Map (\\<tau> (fst f)) (snd f)", "by (metis (no_types, lifting) A2_B.Map_comp \\<open>A2_B.arr (\\<tau> (fst f))\\<close> \\<tau>.is_natural_2)"], ["proof (state)\nthis:\n  uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n  uncurry \\<tau> f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  uncurry \\<tau> (A1xA2.cod f) \\<cdot>\\<^sub>B uncurry F f =\n  uncurry \\<tau> f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) (uncurry F) (uncurry G) (uncurry \\<tau>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma uncurry_curry:\n    assumes \"natural_transformation A1xA2.comp B F G \\<tau>\"\n    shows \"uncurry (curry F G \\<tau>) = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uncurry (local.curry F G \\<tau>) = \\<tau>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. uncurry (local.curry F G \\<tau>) x = \\<tau> x", "interpret \\<tau>: natural_transformation A1xA2.comp B F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) F G \\<tau>", "using assms"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) F G \\<tau>\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) F G \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. uncurry (local.curry F G \\<tau>) x = \\<tau> x", "interpret curry_\\<tau>: natural_transformation A1 A2_B.comp \\<open>curry F F F\\<close> \\<open>curry G G G\\<close>\n                                                             \\<open>curry F G \\<tau>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)\n     (local.curry G G G) (local.curry F G \\<tau>)", "using assms curry_preserves_transformations"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) F G \\<tau>\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) ?F ?G ?\\<tau> \\<Longrightarrow>\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry ?F ?F ?F)\n   (local.curry ?G ?G ?G) (local.curry ?F ?G ?\\<tau>)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry F F F)\n     (local.curry G G G) (local.curry F G \\<tau>)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. uncurry (local.curry F G \\<tau>) x = \\<tau> x", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. uncurry (local.curry F G \\<tau>) x = \\<tau> x", "have \"\\<not>A1xA2.arr f \\<Longrightarrow> uncurry (curry F G \\<tau>) f = \\<tau> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> A1xA2.arr f \\<Longrightarrow>\n    uncurry (local.curry F G \\<tau>) f = \\<tau> f", "using curry_def uncurry_def \\<tau>.is_extensional"], ["proof (prove)\nusing this:\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  (if A1.arr ?f1.0\n   then A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n         (\\<lambda>f2. ?G (A1.cod ?f1.0, f2))\n         (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n   else A2_B.null)\n  uncurry ?\\<tau> ?f \\<equiv>\n  if A1xA2.arr ?f then E.map (?\\<tau> (fst ?f), snd ?f) else B.null\n  \\<not> A1xA2.arr ?f \\<Longrightarrow> \\<tau> ?f = B.null\n\ngoal (1 subgoal):\n 1. \\<not> A1xA2.arr f \\<Longrightarrow>\n    uncurry (local.curry F G \\<tau>) f = \\<tau> f", "by auto"], ["proof (state)\nthis:\n  \\<not> A1xA2.arr f \\<Longrightarrow>\n  uncurry (local.curry F G \\<tau>) f = \\<tau> f\n\ngoal (1 subgoal):\n 1. \\<And>x. uncurry (local.curry F G \\<tau>) x = \\<tau> x", "moreover"], ["proof (state)\nthis:\n  \\<not> A1xA2.arr f \\<Longrightarrow>\n  uncurry (local.curry F G \\<tau>) f = \\<tau> f\n\ngoal (1 subgoal):\n 1. \\<And>x. uncurry (local.curry F G \\<tau>) x = \\<tau> x", "have \"A1xA2.arr f \\<Longrightarrow> uncurry (curry F G \\<tau>) f = \\<tau> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A1xA2.arr f \\<Longrightarrow>\n    uncurry (local.curry F G \\<tau>) f = \\<tau> f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A1xA2.arr f \\<Longrightarrow>\n    uncurry (local.curry F G \\<tau>) f = \\<tau> f", "assume f: \"A1xA2.arr f\""], ["proof (state)\nthis:\n  A1xA2.arr f\n\ngoal (1 subgoal):\n 1. A1xA2.arr f \\<Longrightarrow>\n    uncurry (local.curry F G \\<tau>) f = \\<tau> f", "have 1: \"A2_B.Map (curry F G \\<tau> (fst f)) (snd f) = \\<tau> (fst f, snd f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.Map (local.curry F G \\<tau> (fst f)) (snd f) =\n    \\<tau> (fst f, snd f)", "using f A1xA2.arr_char curry_def"], ["proof (prove)\nusing this:\n  A1xA2.arr f\n  A1xA2.arr ?f = (A1.arr (fst ?f) \\<and> A2.arr (snd ?f))\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  (if A1.arr ?f1.0\n   then A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n         (\\<lambda>f2. ?G (A1.cod ?f1.0, f2))\n         (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n   else A2_B.null)\n\ngoal (1 subgoal):\n 1. A2_B.Map (local.curry F G \\<tau> (fst f)) (snd f) =\n    \\<tau> (fst f, snd f)", "by simp"], ["proof (state)\nthis:\n  A2_B.Map (local.curry F G \\<tau> (fst f)) (snd f) = \\<tau> (fst f, snd f)\n\ngoal (1 subgoal):\n 1. A1xA2.arr f \\<Longrightarrow>\n    uncurry (local.curry F G \\<tau>) f = \\<tau> f", "thus \"uncurry (curry F G \\<tau>) f = \\<tau> f\""], ["proof (prove)\nusing this:\n  A2_B.Map (local.curry F G \\<tau> (fst f)) (snd f) = \\<tau> (fst f, snd f)\n\ngoal (1 subgoal):\n 1. uncurry (local.curry F G \\<tau>) f = \\<tau> f", "unfolding uncurry_def E.map_def"], ["proof (prove)\nusing this:\n  A2_B.Map (local.curry F G \\<tau> (fst f)) (snd f) = \\<tau> (fst f, snd f)\n\ngoal (1 subgoal):\n 1. (if A1xA2.arr f\n     then if A2_BxA2.arr (local.curry F G \\<tau> (fst f), snd f)\n          then A2_B.Map (fst (local.curry F G \\<tau> (fst f), snd f))\n                (snd (local.curry F G \\<tau> (fst f), snd f))\n          else B.null\n     else B.null) =\n    \\<tau> f", "using f 1 A1xA2.arr_char [of f]"], ["proof (prove)\nusing this:\n  A2_B.Map (local.curry F G \\<tau> (fst f)) (snd f) = \\<tau> (fst f, snd f)\n  A1xA2.arr f\n  A2_B.Map (local.curry F G \\<tau> (fst f)) (snd f) = \\<tau> (fst f, snd f)\n  A1xA2.arr f = (A1.arr (fst f) \\<and> A2.arr (snd f))\n\ngoal (1 subgoal):\n 1. (if A1xA2.arr f\n     then if A2_BxA2.arr (local.curry F G \\<tau> (fst f), snd f)\n          then A2_B.Map (fst (local.curry F G \\<tau> (fst f), snd f))\n                (snd (local.curry F G \\<tau> (fst f), snd f))\n          else B.null\n     else B.null) =\n    \\<tau> f", "by simp"], ["proof (state)\nthis:\n  uncurry (local.curry F G \\<tau>) f = \\<tau> f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A1xA2.arr f \\<Longrightarrow>\n  uncurry (local.curry F G \\<tau>) f = \\<tau> f\n\ngoal (1 subgoal):\n 1. \\<And>x. uncurry (local.curry F G \\<tau>) x = \\<tau> x", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> A1xA2.arr f \\<Longrightarrow>\n  uncurry (local.curry F G \\<tau>) f = \\<tau> f\n  A1xA2.arr f \\<Longrightarrow>\n  uncurry (local.curry F G \\<tau>) f = \\<tau> f", "show \"uncurry (curry F G \\<tau>) f = \\<tau> f\""], ["proof (prove)\nusing this:\n  \\<not> A1xA2.arr f \\<Longrightarrow>\n  uncurry (local.curry F G \\<tau>) f = \\<tau> f\n  A1xA2.arr f \\<Longrightarrow>\n  uncurry (local.curry F G \\<tau>) f = \\<tau> f\n\ngoal (1 subgoal):\n 1. uncurry (local.curry F G \\<tau>) f = \\<tau> f", "by blast"], ["proof (state)\nthis:\n  uncurry (local.curry F G \\<tau>) f = \\<tau> f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma curry_uncurry:\n    assumes \"functor A1 A2_B.comp F\" and \"functor A1 A2_B.comp G\"\n    and \"natural_transformation A1 A2_B.comp F G \\<tau>\"\n    shows \"curry (uncurry F) (uncurry G) (uncurry \\<tau>) = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) = \\<tau>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) x = \\<tau> x", "interpret F: \"functor\" A1 A2_B.comp F"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F", "using assms(1)"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) x = \\<tau> x", "interpret G: \"functor\" A1 A2_B.comp G"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) G", "using assms(2)"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) G\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) G", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) x = \\<tau> x", "interpret \\<tau>: natural_transformation A1 A2_B.comp F G \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F G \\<tau>", "using assms(3)"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F G \\<tau>\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F G \\<tau>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) x = \\<tau> x", "interpret uncurry_F: \"functor\" A1xA2.comp B \\<open>uncurry F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F)", "using F.functor_axioms uncurry_preserves_functors"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) ?F \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) (uncurry ?F)\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) x = \\<tau> x", "interpret uncurry_G: \"functor\" A1xA2.comp B \\<open>uncurry G\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry G)", "using G.functor_axioms uncurry_preserves_functors"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) G\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) ?F \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) (uncurry ?F)\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry G)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) x = \\<tau> x", "fix f1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) x = \\<tau> x", "have \"\\<not>A1.arr f1 \\<Longrightarrow> curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> A1.arr f1 \\<Longrightarrow>\n    local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1", "using curry_def uncurry_def \\<tau>.is_extensional"], ["proof (prove)\nusing this:\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  (if A1.arr ?f1.0\n   then A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n         (\\<lambda>f2. ?G (A1.cod ?f1.0, f2))\n         (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n   else A2_B.null)\n  uncurry ?\\<tau> ?f \\<equiv>\n  if A1xA2.arr ?f then E.map (?\\<tau> (fst ?f), snd ?f) else B.null\n  \\<not> A1.arr ?f \\<Longrightarrow> \\<tau> ?f = A2_B.null\n\ngoal (1 subgoal):\n 1. \\<not> A1.arr f1 \\<Longrightarrow>\n    local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1", "by simp"], ["proof (state)\nthis:\n  \\<not> A1.arr f1 \\<Longrightarrow>\n  local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) x = \\<tau> x", "moreover"], ["proof (state)\nthis:\n  \\<not> A1.arr f1 \\<Longrightarrow>\n  local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) x = \\<tau> x", "have \"A1.arr f1 \\<Longrightarrow> curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A1.arr f1 \\<Longrightarrow>\n    local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A1.arr f1 \\<Longrightarrow>\n    local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1", "assume f1: \"A1.arr f1\""], ["proof (state)\nthis:\n  A1.arr f1\n\ngoal (1 subgoal):\n 1. A1.arr f1 \\<Longrightarrow>\n    local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1", "interpret uncurry_\\<tau>:\n            natural_transformation A1xA2.comp B \\<open>uncurry F\\<close> \\<open>uncurry G\\<close> \\<open>uncurry \\<tau>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F) (uncurry G) (uncurry \\<tau>)", "using \\<tau>.natural_transformation_axioms uncurry_preserves_transformations [of F G \\<tau>]"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F G \\<tau>\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) F G\n   \\<tau> \\<Longrightarrow>\n  natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) (uncurry F) (uncurry G) (uncurry \\<tau>)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>B) (uncurry F) (uncurry G) (uncurry \\<tau>)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. A1.arr f1 \\<Longrightarrow>\n    local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1", "have \"curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 =\n                A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2)) (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n                           (\\<lambda>f2. uncurry \\<tau> (f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 =\n    A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. uncurry \\<tau> (f1, f2))", "using f1 curry_def"], ["proof (prove)\nusing this:\n  A1.arr f1\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  (if A1.arr ?f1.0\n   then A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n         (\\<lambda>f2. ?G (A1.cod ?f1.0, f2))\n         (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n   else A2_B.null)\n\ngoal (1 subgoal):\n 1. local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 =\n    A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. uncurry \\<tau> (f1, f2))", "by simp"], ["proof (state)\nthis:\n  local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 =\n  A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n   (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n   (\\<lambda>f2. uncurry \\<tau> (f1, f2))\n\ngoal (1 subgoal):\n 1. A1.arr f1 \\<Longrightarrow>\n    local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1", "also"], ["proof (state)\nthis:\n  local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 =\n  A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n   (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n   (\\<lambda>f2. uncurry \\<tau> (f1, f2))\n\ngoal (1 subgoal):\n 1. A1.arr f1 \\<Longrightarrow>\n    local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1", "have \"... = A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n                                    (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n                                    (\\<lambda>f2. E.map (\\<tau> f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. uncurry \\<tau> (f1, f2)) =\n    A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. E.map (\\<tau> f1, f2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. uncurry \\<tau> (f1, f2)) =\n    A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. E.map (\\<tau> f1, f2))", "have \"(\\<lambda>f2. uncurry \\<tau> (f1, f2)) = (\\<lambda>f2. E.map (\\<tau> f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f2. uncurry \\<tau> (f1, f2)) =\n    (\\<lambda>f2. E.map (\\<tau> f1, f2))", "using f1 uncurry_def E.is_extensional"], ["proof (prove)\nusing this:\n  A1.arr f1\n  uncurry ?\\<tau> ?f \\<equiv>\n  if A1xA2.arr ?f then E.map (?\\<tau> (fst ?f), snd ?f) else B.null\n  \\<not> A2_BxA2.arr ?f \\<Longrightarrow> E.map ?f = B.null\n\ngoal (1 subgoal):\n 1. (\\<lambda>f2. uncurry \\<tau> (f1, f2)) =\n    (\\<lambda>f2. E.map (\\<tau> f1, f2))", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>f2. uncurry \\<tau> (f1, f2)) =\n  (\\<lambda>f2. E.map (\\<tau> f1, f2))\n\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. uncurry \\<tau> (f1, f2)) =\n    A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. E.map (\\<tau> f1, f2))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>f2. uncurry \\<tau> (f1, f2)) =\n  (\\<lambda>f2. E.map (\\<tau> f1, f2))\n\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. uncurry \\<tau> (f1, f2)) =\n    A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. E.map (\\<tau> f1, f2))", "by simp"], ["proof (state)\nthis:\n  A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n   (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n   (\\<lambda>f2. uncurry \\<tau> (f1, f2)) =\n  A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n   (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n   (\\<lambda>f2. E.map (\\<tau> f1, f2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n   (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n   (\\<lambda>f2. uncurry \\<tau> (f1, f2)) =\n  A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n   (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n   (\\<lambda>f2. E.map (\\<tau> f1, f2))\n\ngoal (1 subgoal):\n 1. A1.arr f1 \\<Longrightarrow>\n    local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1", "also"], ["proof (state)\nthis:\n  A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n   (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n   (\\<lambda>f2. uncurry \\<tau> (f1, f2)) =\n  A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n   (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n   (\\<lambda>f2. E.map (\\<tau> f1, f2))\n\ngoal (1 subgoal):\n 1. A1.arr f1 \\<Longrightarrow>\n    local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1", "have \"... = \\<tau> f1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. E.map (\\<tau> f1, f2)) =\n    \\<tau> f1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. E.map (\\<tau> f1, f2)) =\n    \\<tau> f1", "have \"A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))", "have \"A2_B.Dom (\\<tau> f1) = A2_B.Map (A2_B.dom (\\<tau> f1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.Dom (\\<tau> f1) = A2_B.Map (A2_B.dom (\\<tau> f1))", "using f1 A2_B.ide_char A2_B.Map_dom A2_B.dom_char"], ["proof (prove)\nusing this:\n  A1.arr f1\n  A2_B.ide ?t =\n  (?t \\<noteq> A2_B.null \\<and>\n   functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B) (A2_B.Map ?t) \\<and>\n   A2_B.Dom ?t = A2_B.Map ?t \\<and> A2_B.Cod ?t = A2_B.Map ?t)\n  A2_B.arr ?f \\<Longrightarrow> A2_B.Map (A2_B.dom ?f) = A2_B.Dom ?f\n  A2_B.dom ?f =\n  (if A2_B.arr ?f then A2_B.MkIde (A2_B.Dom ?f) else A2_B.null)\n\ngoal (1 subgoal):\n 1. A2_B.Dom (\\<tau> f1) = A2_B.Map (A2_B.dom (\\<tau> f1))", "by auto"], ["proof (state)\nthis:\n  A2_B.Dom (\\<tau> f1) = A2_B.Map (A2_B.dom (\\<tau> f1))\n\ngoal (1 subgoal):\n 1. A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))", "also"], ["proof (state)\nthis:\n  A2_B.Dom (\\<tau> f1) = A2_B.Map (A2_B.dom (\\<tau> f1))\n\ngoal (1 subgoal):\n 1. A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))", "have \"... = A2_B.Map (F (A1.dom f1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.Map (A2_B.dom (\\<tau> f1)) = A2_B.Map (F (A1.dom f1))", "using f1"], ["proof (prove)\nusing this:\n  A1.arr f1\n\ngoal (1 subgoal):\n 1. A2_B.Map (A2_B.dom (\\<tau> f1)) = A2_B.Map (F (A1.dom f1))", "by simp"], ["proof (state)\nthis:\n  A2_B.Map (A2_B.dom (\\<tau> f1)) = A2_B.Map (F (A1.dom f1))\n\ngoal (1 subgoal):\n 1. A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))", "also"], ["proof (state)\nthis:\n  A2_B.Map (A2_B.dom (\\<tau> f1)) = A2_B.Map (F (A1.dom f1))\n\ngoal (1 subgoal):\n 1. A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))", "have \"... = (\\<lambda>f2. uncurry F (A1.dom f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.Map (F (A1.dom f1)) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f2. A2_B.Map (F (A1.dom f1)) f2 = uncurry F (A1.dom f1, f2)", "fix f2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f2. A2_B.Map (F (A1.dom f1)) f2 = uncurry F (A1.dom f1, f2)", "interpret F_dom_f1: \"functor\" A2 B \\<open>A2_B.Map (F (A1.dom f1))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (A2_B.Map (F (A1.dom f1)))", "using f1 A2_B.ide_char F.preserves_ide"], ["proof (prove)\nusing this:\n  A1.arr f1\n  A2_B.ide ?t =\n  (?t \\<noteq> A2_B.null \\<and>\n   functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B) (A2_B.Map ?t) \\<and>\n   A2_B.Dom ?t = A2_B.Map ?t \\<and> A2_B.Cod ?t = A2_B.Map ?t)\n  A1.ide ?a \\<Longrightarrow> A2_B.ide (F ?a)\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (A2_B.Map (F (A1.dom f1)))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f2. A2_B.Map (F (A1.dom f1)) f2 = uncurry F (A1.dom f1, f2)", "show \"A2_B.Map (F (A1.dom f1)) f2 = uncurry F (A1.dom f1, f2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.Map (F (A1.dom f1)) f2 = uncurry F (A1.dom f1, f2)", "using f1 uncurry_def E.map_simp F_dom_f1.is_extensional"], ["proof (prove)\nusing this:\n  A1.arr f1\n  uncurry ?\\<tau> ?f \\<equiv>\n  if A1xA2.arr ?f then E.map (?\\<tau> (fst ?f), snd ?f) else B.null\n  A2_BxA2.arr ?Fg \\<Longrightarrow> E.map ?Fg = A2_B.Map (fst ?Fg) (snd ?Fg)\n  \\<not> A2.arr ?f \\<Longrightarrow> A2_B.Map (F (A1.dom f1)) ?f = B.null\n\ngoal (1 subgoal):\n 1. A2_B.Map (F (A1.dom f1)) f2 = uncurry F (A1.dom f1, f2)", "by auto"], ["proof (state)\nthis:\n  A2_B.Map (F (A1.dom f1)) f2 = uncurry F (A1.dom f1, f2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A2_B.Map (F (A1.dom f1)) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n\ngoal (1 subgoal):\n 1. A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))", "finally"], ["proof (chain)\npicking this:\n  A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))", "show ?thesis"], ["proof (prove)\nusing this:\n  A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n\ngoal (1 subgoal):\n 1. A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))", "by auto"], ["proof (state)\nthis:\n  A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. E.map (\\<tau> f1, f2)) =\n    \\<tau> f1", "moreover"], ["proof (state)\nthis:\n  A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. E.map (\\<tau> f1, f2)) =\n    \\<tau> f1", "have \"A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))", "have \"A2_B.Cod (\\<tau> f1) = A2_B.Map (A2_B.cod (\\<tau> f1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.Cod (\\<tau> f1) = A2_B.Map (A2_B.cod (\\<tau> f1))", "using f1 A2_B.ide_char A2_B.Map_cod A2_B.cod_char"], ["proof (prove)\nusing this:\n  A1.arr f1\n  A2_B.ide ?t =\n  (?t \\<noteq> A2_B.null \\<and>\n   functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B) (A2_B.Map ?t) \\<and>\n   A2_B.Dom ?t = A2_B.Map ?t \\<and> A2_B.Cod ?t = A2_B.Map ?t)\n  A2_B.arr ?f \\<Longrightarrow> A2_B.Map (A2_B.cod ?f) = A2_B.Cod ?f\n  A2_B.cod ?f =\n  (if A2_B.arr ?f then A2_B.MkIde (A2_B.Cod ?f) else A2_B.null)\n\ngoal (1 subgoal):\n 1. A2_B.Cod (\\<tau> f1) = A2_B.Map (A2_B.cod (\\<tau> f1))", "by auto"], ["proof (state)\nthis:\n  A2_B.Cod (\\<tau> f1) = A2_B.Map (A2_B.cod (\\<tau> f1))\n\ngoal (1 subgoal):\n 1. A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))", "also"], ["proof (state)\nthis:\n  A2_B.Cod (\\<tau> f1) = A2_B.Map (A2_B.cod (\\<tau> f1))\n\ngoal (1 subgoal):\n 1. A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))", "have \"... = A2_B.Map (G (A1.cod f1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.Map (A2_B.cod (\\<tau> f1)) = A2_B.Map (G (A1.cod f1))", "using f1"], ["proof (prove)\nusing this:\n  A1.arr f1\n\ngoal (1 subgoal):\n 1. A2_B.Map (A2_B.cod (\\<tau> f1)) = A2_B.Map (G (A1.cod f1))", "by simp"], ["proof (state)\nthis:\n  A2_B.Map (A2_B.cod (\\<tau> f1)) = A2_B.Map (G (A1.cod f1))\n\ngoal (1 subgoal):\n 1. A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))", "also"], ["proof (state)\nthis:\n  A2_B.Map (A2_B.cod (\\<tau> f1)) = A2_B.Map (G (A1.cod f1))\n\ngoal (1 subgoal):\n 1. A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))", "have \"... = (\\<lambda>f2. uncurry G (A1.cod f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.Map (G (A1.cod f1)) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f2. A2_B.Map (G (A1.cod f1)) f2 = uncurry G (A1.cod f1, f2)", "fix f2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f2. A2_B.Map (G (A1.cod f1)) f2 = uncurry G (A1.cod f1, f2)", "interpret G_cod_f1: \"functor\" A2 B \\<open>A2_B.Map (G (A1.cod f1))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (A2_B.Map (G (A1.cod f1)))", "using f1 A2_B.ide_char G.preserves_ide"], ["proof (prove)\nusing this:\n  A1.arr f1\n  A2_B.ide ?t =\n  (?t \\<noteq> A2_B.null \\<and>\n   functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B) (A2_B.Map ?t) \\<and>\n   A2_B.Dom ?t = A2_B.Map ?t \\<and> A2_B.Cod ?t = A2_B.Map ?t)\n  A1.ide ?a \\<Longrightarrow> A2_B.ide (G ?a)\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (A2_B.Map (G (A1.cod f1)))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f2. A2_B.Map (G (A1.cod f1)) f2 = uncurry G (A1.cod f1, f2)", "show \"A2_B.Map (G (A1.cod f1)) f2 = uncurry G (A1.cod f1, f2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.Map (G (A1.cod f1)) f2 = uncurry G (A1.cod f1, f2)", "using f1 uncurry_def E.map_simp G_cod_f1.is_extensional"], ["proof (prove)\nusing this:\n  A1.arr f1\n  uncurry ?\\<tau> ?f \\<equiv>\n  if A1xA2.arr ?f then E.map (?\\<tau> (fst ?f), snd ?f) else B.null\n  A2_BxA2.arr ?Fg \\<Longrightarrow> E.map ?Fg = A2_B.Map (fst ?Fg) (snd ?Fg)\n  \\<not> A2.arr ?f \\<Longrightarrow> A2_B.Map (G (A1.cod f1)) ?f = B.null\n\ngoal (1 subgoal):\n 1. A2_B.Map (G (A1.cod f1)) f2 = uncurry G (A1.cod f1, f2)", "by auto"], ["proof (state)\nthis:\n  A2_B.Map (G (A1.cod f1)) f2 = uncurry G (A1.cod f1, f2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A2_B.Map (G (A1.cod f1)) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n\ngoal (1 subgoal):\n 1. A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))", "finally"], ["proof (chain)\npicking this:\n  A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))", "show ?thesis"], ["proof (prove)\nusing this:\n  A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n\ngoal (1 subgoal):\n 1. A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))", "by auto"], ["proof (state)\nthis:\n  A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. E.map (\\<tau> f1, f2)) =\n    \\<tau> f1", "moreover"], ["proof (state)\nthis:\n  A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. E.map (\\<tau> f1, f2)) =\n    \\<tau> f1", "have \"A2_B.Map (\\<tau> f1) = (\\<lambda>f2. E.map (\\<tau> f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2_B.Map (\\<tau> f1) = (\\<lambda>f2. E.map (\\<tau> f1, f2))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f2. A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)", "fix f2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f2. A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)", "have \"\\<not>A2.arr f2 \\<Longrightarrow> A2_B.Map (\\<tau> f1) f2 = (\\<lambda>f2. E.map (\\<tau> f1, f2)) f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> A2.arr f2 \\<Longrightarrow>\n    A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)", "using f1 A2_B.arrE \\<tau>.preserves_reflects_arr natural_transformation.is_extensional"], ["proof (prove)\nusing this:\n  A1.arr f1\n  \\<lbrakk>A2_B.arr ?f;\n   \\<lbrakk>?f \\<noteq> A2_B.null;\n    natural_transformation (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>B)\n     (A2_B.Dom ?f) (A2_B.Cod ?f) (A2_B.Map ?f)\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  A2_B.arr (\\<tau> ?f) = A1.arr ?f\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<tau>;\n   \\<not> partial_magma.arr ?A ?f\\<rbrakk>\n  \\<Longrightarrow> ?\\<tau> ?f = partial_magma.null ?B\n\ngoal (1 subgoal):\n 1. \\<not> A2.arr f2 \\<Longrightarrow>\n    A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)", "by (metis (no_types, lifting) E.fixing_arr_gives_natural_transformation_1)"], ["proof (state)\nthis:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)\n\ngoal (1 subgoal):\n 1. \\<And>f2. A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)", "moreover"], ["proof (state)\nthis:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)\n\ngoal (1 subgoal):\n 1. \\<And>f2. A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)", "have \"A2.arr f2 \\<Longrightarrow> A2_B.Map (\\<tau> f1) f2 = (\\<lambda>f2. E.map (\\<tau> f1, f2)) f2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2.arr f2 \\<Longrightarrow>\n    A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)", "using f1 E.map_simp"], ["proof (prove)\nusing this:\n  A1.arr f1\n  A2_BxA2.arr ?Fg \\<Longrightarrow> E.map ?Fg = A2_B.Map (fst ?Fg) (snd ?Fg)\n\ngoal (1 subgoal):\n 1. A2.arr f2 \\<Longrightarrow>\n    A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)", "by fastforce"], ["proof (state)\nthis:\n  A2.arr f2 \\<Longrightarrow>\n  A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)\n\ngoal (1 subgoal):\n 1. \\<And>f2. A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)\n  A2.arr f2 \\<Longrightarrow>\n  A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)", "show \"A2_B.Map (\\<tau> f1) f2 = (\\<lambda>f2. E.map (\\<tau> f1, f2)) f2\""], ["proof (prove)\nusing this:\n  \\<not> A2.arr f2 \\<Longrightarrow>\n  A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)\n  A2.arr f2 \\<Longrightarrow>\n  A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)\n\ngoal (1 subgoal):\n 1. A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)", "by blast"], ["proof (state)\nthis:\n  A2_B.Map (\\<tau> f1) f2 = E.map (\\<tau> f1, f2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A2_B.Map (\\<tau> f1) = (\\<lambda>f2. E.map (\\<tau> f1, f2))\n\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. E.map (\\<tau> f1, f2)) =\n    \\<tau> f1", "ultimately"], ["proof (chain)\npicking this:\n  A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n  A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n  A2_B.Map (\\<tau> f1) = (\\<lambda>f2. E.map (\\<tau> f1, f2))", "show ?thesis"], ["proof (prove)\nusing this:\n  A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n  A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n  A2_B.Map (\\<tau> f1) = (\\<lambda>f2. E.map (\\<tau> f1, f2))\n\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. E.map (\\<tau> f1, f2)) =\n    \\<tau> f1", "using f1 A2_B.MkArr_Map \\<tau>.preserves_reflects_arr"], ["proof (prove)\nusing this:\n  A2_B.Dom (\\<tau> f1) = (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n  A2_B.Cod (\\<tau> f1) = (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n  A2_B.Map (\\<tau> f1) = (\\<lambda>f2. E.map (\\<tau> f1, f2))\n  A1.arr f1\n  A2_B.arr ?f \\<Longrightarrow>\n  A2_B.MkArr (A2_B.Dom ?f) (A2_B.Cod ?f) (A2_B.Map ?f) = ?f\n  A2_B.arr (\\<tau> ?f) = A1.arr ?f\n\ngoal (1 subgoal):\n 1. A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n     (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n     (\\<lambda>f2. E.map (\\<tau> f1, f2)) =\n    \\<tau> f1", "by metis"], ["proof (state)\nthis:\n  A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n   (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n   (\\<lambda>f2. E.map (\\<tau> f1, f2)) =\n  \\<tau> f1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A2_B.MkArr (\\<lambda>f2. uncurry F (A1.dom f1, f2))\n   (\\<lambda>f2. uncurry G (A1.cod f1, f2))\n   (\\<lambda>f2. E.map (\\<tau> f1, f2)) =\n  \\<tau> f1\n\ngoal (1 subgoal):\n 1. A1.arr f1 \\<Longrightarrow>\n    local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1", "finally"], ["proof (chain)\npicking this:\n  local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1", "show ?thesis"], ["proof (prove)\nusing this:\n  local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1\n\ngoal (1 subgoal):\n 1. local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1", "by auto"], ["proof (state)\nthis:\n  local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A1.arr f1 \\<Longrightarrow>\n  local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) x = \\<tau> x", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> A1.arr f1 \\<Longrightarrow>\n  local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1\n  A1.arr f1 \\<Longrightarrow>\n  local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1", "show \"curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1\""], ["proof (prove)\nusing this:\n  \\<not> A1.arr f1 \\<Longrightarrow>\n  local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1\n  A1.arr f1 \\<Longrightarrow>\n  local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1\n\ngoal (1 subgoal):\n 1. local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1", "by blast"], ["proof (state)\nthis:\n  local.curry (uncurry F) (uncurry G) (uncurry \\<tau>) f1 = \\<tau> f1\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale curried_functor =\n     currying A1 A2 B +\n     A1xA2: product_category A1 A2 +\n     A2_B: functor_category A2 B +\n     F: binary_functor A1 A2 B F\n  for A1 :: \"'a1 comp\"         (infixr \"\\<cdot>\\<^sub>A\\<^sub>1\" 55)\n  and A2 :: \"'a2 comp\"         (infixr \"\\<cdot>\\<^sub>A\\<^sub>2\" 55)\n  and B :: \"'b comp\"           (infixr \"\\<cdot>\\<^sub>B\" 55)\n  and F :: \"'a1 * 'a2 \\<Rightarrow> 'b\"\n  begin"], ["", "notation A1xA2.comp        (infixr \"\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\" 55)"], ["", "notation A2_B.comp         (infixr \"\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]\" 55)"], ["", "notation A1xA2.in_hom      (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 _\\<guillemotright>\")"], ["", "notation A2_B.in_hom       (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>2\\<^sub>,\\<^sub>B\\<^sub>] _\\<guillemotright>\")"], ["", "definition map\n    where \"map \\<equiv> curry F F F\""], ["", "lemma map_simp [simp]:\n    assumes \"A1.arr f1\"\n    shows \"map f1 =\n           A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2)) (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.map f1 =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2))", "using assms map_def curry_simp"], ["proof (prove)\nusing this:\n  A1.arr f1\n  local.map \\<equiv> local.curry F F F\n  A1.arr ?f1.0 \\<Longrightarrow>\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  A2_B.MkArr (\\<lambda>f2. ?F (A1.dom ?f1.0, f2))\n   (\\<lambda>f2. ?G (A1.cod ?f1.0, f2)) (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n\ngoal (1 subgoal):\n 1. local.map f1 =\n    A2_B.MkArr (\\<lambda>f2. F (A1.dom f1, f2))\n     (\\<lambda>f2. F (A1.cod f1, f2)) (\\<lambda>f2. F (f1, f2))", "by auto"], ["", "lemma is_functor:\n    shows \"functor A1 A2_B.comp map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) local.map", "using F.functor_axioms map_def curry_preserves_functors"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) F\n  local.map \\<equiv> local.curry F F F\n  functor (\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>B) ?F \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) (local.curry ?F ?F ?F)\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) local.map", "by simp"], ["", "end"], ["", "sublocale curried_functor \\<subseteq> \"functor\" A1 A2_B.comp map"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) local.map", "using is_functor"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) local.map\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>2,\\<^sub>B\\<^sub>]) local.map", "by auto"], ["", "locale curried_functor' =\n     A1: category A1 +\n     A2: category A2 +\n     A1xA2: product_category A1 A2 +\n     currying A2 A1 B +\n     F: binary_functor A1 A2 B F +\n     A1_B: functor_category A1 B\n  for A1 :: \"'a1 comp\"         (infixr \"\\<cdot>\\<^sub>A\\<^sub>1\" 55)\n  and A2 :: \"'a2 comp\"         (infixr \"\\<cdot>\\<^sub>A\\<^sub>2\" 55)\n  and B :: \"'b comp\"           (infixr \"\\<cdot>\\<^sub>B\" 55)\n  and F :: \"'a1 * 'a2 \\<Rightarrow> 'b\"\n  begin"], ["", "notation A1xA2.comp        (infixr \"\\<cdot>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2\" 55)"], ["", "notation A1_B.comp         (infixr \"\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>1,\\<^sub>B\\<^sub>]\" 55)"], ["", "notation A1xA2.in_hom      (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>A\\<^sub>1\\<^sub>x\\<^sub>A\\<^sub>2 _\\<guillemotright>\")"], ["", "notation A1_B.in_hom       (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>[\\<^sub>A\\<^sub>1\\<^sub>,\\<^sub>B\\<^sub>] _\\<guillemotright>\")"], ["", "definition map\n    where \"map \\<equiv> curry F.sym F.sym F.sym\""], ["", "lemma map_simp [simp]:\n    assumes \"A2.arr f2\"\n    shows \"map f2 =\n           A1_B.MkArr (\\<lambda>f1. F (f1, A2.dom f2)) (\\<lambda>f1. F (f1, A2.cod f2)) (\\<lambda>f1. F (f1, f2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.map f2 =\n    A1_B.MkArr (\\<lambda>f1. F (f1, A2.dom f2))\n     (\\<lambda>f1. F (f1, A2.cod f2)) (\\<lambda>f1. F (f1, f2))", "using assms map_def curry_simp"], ["proof (prove)\nusing this:\n  A2.arr f2\n  local.map \\<equiv> local.curry F.sym F.sym F.sym\n  A2.arr ?f1.0 \\<Longrightarrow>\n  local.curry ?F ?G ?\\<tau> ?f1.0 =\n  A1_B.MkArr (\\<lambda>f2. ?F (A2.dom ?f1.0, f2))\n   (\\<lambda>f2. ?G (A2.cod ?f1.0, f2)) (\\<lambda>f2. ?\\<tau> (?f1.0, f2))\n\ngoal (1 subgoal):\n 1. local.map f2 =\n    A1_B.MkArr (\\<lambda>f1. F (f1, A2.dom f2))\n     (\\<lambda>f1. F (f1, A2.cod f2)) (\\<lambda>f1. F (f1, f2))", "by simp"], ["", "lemma is_functor:\n    shows \"functor A2 A1_B.comp map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>1,\\<^sub>B\\<^sub>]) local.map", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>1,\\<^sub>B\\<^sub>]) local.map", "interpret A2xA1: product_category A2 A1"], ["proof (prove)\ngoal (1 subgoal):\n 1. product_category (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>1,\\<^sub>B\\<^sub>]) local.map", "interpret F': binary_functor A2 A1 B F.sym"], ["proof (prove)\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) F.sym", "using F.sym_is_binary_functor"], ["proof (prove)\nusing this:\n  binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n   (\\<cdot>\\<^sub>B) F.sym\n\ngoal (1 subgoal):\n 1. binary_functor (\\<cdot>\\<^sub>A\\<^sub>2) (\\<cdot>\\<^sub>A\\<^sub>1)\n     (\\<cdot>\\<^sub>B) F.sym", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>1,\\<^sub>B\\<^sub>]) local.map", "have \"functor A2xA1.comp B F.sym\""], ["proof (prove)\ngoal (1 subgoal):\n 1. functor A2xA1.comp (\\<cdot>\\<^sub>B) F.sym", ".."], ["proof (state)\nthis:\n  functor A2xA1.comp (\\<cdot>\\<^sub>B) F.sym\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>1,\\<^sub>B\\<^sub>]) local.map", "thus ?thesis"], ["proof (prove)\nusing this:\n  functor A2xA1.comp (\\<cdot>\\<^sub>B) F.sym\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>1,\\<^sub>B\\<^sub>]) local.map", "using map_def curry_preserves_functors"], ["proof (prove)\nusing this:\n  functor A2xA1.comp (\\<cdot>\\<^sub>B) F.sym\n  local.map \\<equiv> local.curry F.sym F.sym F.sym\n  functor A2xA1.comp (\\<cdot>\\<^sub>B) ?F \\<Longrightarrow>\n  functor (\\<cdot>\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>1,\\<^sub>B\\<^sub>]) (local.curry ?F ?F ?F)\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>1,\\<^sub>B\\<^sub>]) local.map", "by simp"], ["proof (state)\nthis:\n  functor (\\<cdot>\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>1,\\<^sub>B\\<^sub>]) local.map\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "sublocale curried_functor' \\<subseteq> \"functor\" A2 A1_B.comp map"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>1,\\<^sub>B\\<^sub>]) local.map", "using is_functor"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>A\\<^sub>2)\n   (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>1,\\<^sub>B\\<^sub>]) local.map\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>A\\<^sub>2)\n     (\\<cdot>\\<^sub>[\\<^sub>A\\<^sub>1,\\<^sub>B\\<^sub>]) local.map", "by auto"], ["", "end"]]}