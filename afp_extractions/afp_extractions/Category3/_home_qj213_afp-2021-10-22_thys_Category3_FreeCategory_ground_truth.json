{"file_name": "/home/qj213/afp-2021-10-22/thys/Category3/FreeCategory.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Category3", "problem_names": ["lemma path_Obj:\n    assumes \"x \\<in> Obj\"\n    shows \"path x x []\"", "lemma path_single_Arr:\n    assumes \"x \\<in> Arr\"\n    shows \"path (Dom x) (Cod x) [x]\"", "lemma path_concat:\n    assumes \"path x y p\" and \"path y z q\"\n    shows \"path x z (p @ q)\"", "lemma arr_single [simp]:\n    assumes \"x \\<in> Arr\"\n    shows \"arr (MkArr (D x) (C x) [x])\"", "lemma is_discrete:\n    shows \"arr f \\<longleftrightarrow> ide f\"", "lemma arr_char:\n    shows \"arr f \\<longleftrightarrow> Dom f \\<in> Obj \\<and> f = MkIde (Dom f)\"", "lemma arr_char':\n    shows \"arr f \\<longleftrightarrow> f \\<in> MkIde ` Obj\"", "lemma dom_char:\n    shows \"dom f = (if arr f then f else null)\"", "lemma cod_char:\n    shows \"cod f = (if arr f then f else null)\"", "lemma in_hom_char:\n    shows \"\\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> \\<longleftrightarrow> arr f \\<and> f = a \\<and> f = b\"", "lemma seq_char:\n    shows \"seq g f \\<longleftrightarrow> arr f \\<and> f = g\"", "lemma comp_char:\n    shows \"g \\<cdot> f = (if seq g f then f else null)\"", "lemma is_empty:\n    shows \"\\<not>arr f\"", "lemma ide_char:\n    shows \"ide f \\<longleftrightarrow> f = Zero \\<or> f = One\"", "lemma arr_char':\n    shows \"arr f \\<longleftrightarrow> f =\n           MkIde False \\<or> f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr\"", "lemma arr_char:\n    shows \"arr f \\<longleftrightarrow> f = Zero \\<or> f = One \\<or> f \\<in> fromArr ` Arr\"", "lemma dom_char:\n    shows \"dom f = (if arr f then\n                      if f = One then One else Zero\n                    else null)\"", "lemma cod_char:\n    shows \"cod f = (if arr f then\n                      if f = Zero then Zero else One\n                    else null)\"", "lemma seq_char:\n    shows \"seq g f \\<longleftrightarrow> arr g \\<and> arr f \\<and> ((f = Zero \\<and> g \\<noteq> One) \\<or> (f \\<noteq> Zero \\<and> g = One))\"", "lemma not_ide_fromArr:\n    shows \"\\<not> ide (fromArr x)\"", "lemma in_hom_char:\n    shows \"\\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> \\<longleftrightarrow> (a = Zero \\<and> b = Zero \\<and> f = Zero) \\<or>\n                            (a = One \\<and> b = One \\<and> f = One) \\<or>\n                            (a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\"", "lemma Zero_not_eq_One [simp]:\n    shows \"Zero \\<noteq> One\"", "lemma Zero_not_eq_fromArr [simp]:\n    shows \"Zero \\<notin> fromArr ` Arr\"", "lemma One_not_eq_fromArr [simp]:\n    shows \"One \\<notin> fromArr ` Arr\"", "lemma comp_char:\n    shows \"g \\<cdot> f = (if seq g f then\n                      if f = Zero then g else if g = One then f else null\n                    else null)\"", "lemma comp_simp [simp]:\n    assumes \"seq g f\"\n    shows \"f = Zero \\<Longrightarrow> g \\<cdot> f = g\"\n    and \"g = One \\<Longrightarrow> g \\<cdot> f = f\"", "lemma arr_fromArr:\n    assumes \"x \\<in> Arr\"\n    shows \"arr (fromArr x)\"", "lemma toArr_in_Arr:\n    assumes \"arr f\" and \"\\<not>ide f\"\n    shows \"toArr f \\<in> Arr\"", "lemma toArr_fromArr [simp]:\n    assumes \"x \\<in> Arr\"\n    shows \"toArr (fromArr x) = x\"", "lemma fromArr_toArr [simp]:\n    assumes \"arr f\" and \"\\<not>ide f\"\n    shows \"fromArr (toArr f) = f\"", "lemma arr_char:\n    shows \"arr f \\<longleftrightarrow> f = Zero \\<or> f = One \\<or> f = j0 \\<or> f = j1\"", "lemma dom_char:\n    shows \"dom f = (if f = j0 \\<or> f = j1 then Zero else if arr f then f else null)\"", "lemma cod_char:\n    shows \"cod f = (if f = j0 \\<or> f = j1 then One else if arr f then f else null)\"", "lemma j0_not_eq_j1 [simp]:\n    shows \"j0 \\<noteq> j1\"", "lemma Zero_not_eq_j0 [simp]:\n    shows \"Zero \\<noteq> j0\"", "lemma Zero_not_eq_j1 [simp]:\n    shows \"Zero \\<noteq> j1\"", "lemma One_not_eq_j0 [simp]:\n    shows \"One \\<noteq> j0\"", "lemma One_not_eq_j1 [simp]:\n    shows \"One \\<noteq> j1\"", "lemma dom_simp [simp]:\n    shows \"dom Zero = Zero\"\n    and \"dom One = One\"\n    and \"dom j0 = Zero\"\n    and \"dom j1 = Zero\"", "lemma cod_simp [simp]:\n    shows \"cod Zero = Zero\"\n    and \"cod One = One\"\n    and \"cod j0 = One\"\n    and \"cod j1 = One\""], "translations": [["", "lemma path_Obj:\n    assumes \"x \\<in> Obj\"\n    shows \"path x x []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path x x []", "using assms path_def"], ["proof (prove)\nusing this:\n  x \\<in> Obj\n  path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> Obj \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = Dom (hd ?p) \\<and>\n  ?y = Cod (last ?p) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow>\n      Cod (?p ! n) = Dom (?p ! (n + 1)))\n\ngoal (1 subgoal):\n 1. path x x []", "by simp"], ["", "lemma path_single_Arr:\n    assumes \"x \\<in> Arr\"\n    shows \"path (Dom x) (Cod x) [x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path (Dom x) (Cod x) [x]", "using assms path_def"], ["proof (prove)\nusing this:\n  x \\<in> Arr\n  path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> Obj \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = Dom (hd ?p) \\<and>\n  ?y = Cod (last ?p) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow>\n      Cod (?p ! n) = Dom (?p ! (n + 1)))\n\ngoal (1 subgoal):\n 1. path (Dom x) (Cod x) [x]", "by simp"], ["", "lemma path_concat:\n    assumes \"path x y p\" and \"path y z q\"\n    shows \"path x z (p @ q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path x z (p @ q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. path x z (p @ q)", "have \"p = [] \\<or> q = [] \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = [] \\<or> q = [] \\<Longrightarrow> path x z (p @ q)", "using assms path_def"], ["proof (prove)\nusing this:\n  path x y p\n  path y z q\n  path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> Obj \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = Dom (hd ?p) \\<and>\n  ?y = Cod (last ?p) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow>\n      Cod (?p ! n) = Dom (?p ! (n + 1)))\n\ngoal (1 subgoal):\n 1. p = [] \\<or> q = [] \\<Longrightarrow> path x z (p @ q)", "by auto"], ["proof (state)\nthis:\n  p = [] \\<or> q = [] \\<Longrightarrow> path x z (p @ q)\n\ngoal (1 subgoal):\n 1. path x z (p @ q)", "moreover"], ["proof (state)\nthis:\n  p = [] \\<or> q = [] \\<Longrightarrow> path x z (p @ q)\n\ngoal (1 subgoal):\n 1. path x z (p @ q)", "have \"p \\<noteq> [] \\<and> q \\<noteq> [] \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<and> q \\<noteq> [] \\<Longrightarrow> path x z (p @ q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<and> q \\<noteq> [] \\<Longrightarrow> path x z (p @ q)", "assume pq: \"p \\<noteq> [] \\<and> q \\<noteq> []\""], ["proof (state)\nthis:\n  p \\<noteq> [] \\<and> q \\<noteq> []\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<and> q \\<noteq> [] \\<Longrightarrow> path x z (p @ q)", "have Cod_last: \"Cod (last p) = Cod (nth (p @ q) ((length p)-1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cod (last p) = Cod ((p @ q) ! (length p - 1))", "using assms pq"], ["proof (prove)\nusing this:\n  path x y p\n  path y z q\n  p \\<noteq> [] \\<and> q \\<noteq> []\n\ngoal (1 subgoal):\n 1. Cod (last p) = Cod ((p @ q) ! (length p - 1))", "by (simp add: last_conv_nth nth_append)"], ["proof (state)\nthis:\n  Cod (last p) = Cod ((p @ q) ! (length p - 1))\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<and> q \\<noteq> [] \\<Longrightarrow> path x z (p @ q)", "moreover"], ["proof (state)\nthis:\n  Cod (last p) = Cod ((p @ q) ! (length p - 1))\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<and> q \\<noteq> [] \\<Longrightarrow> path x z (p @ q)", "have Dom_hd: \"Dom (hd q) = Dom (nth (p @ q) (length p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dom (hd q) = Dom ((p @ q) ! length p)", "using assms pq"], ["proof (prove)\nusing this:\n  path x y p\n  path y z q\n  p \\<noteq> [] \\<and> q \\<noteq> []\n\ngoal (1 subgoal):\n 1. Dom (hd q) = Dom ((p @ q) ! length p)", "by (simp add: hd_conv_nth less_not_refl2 nth_append)"], ["proof (state)\nthis:\n  Dom (hd q) = Dom ((p @ q) ! length p)\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<and> q \\<noteq> [] \\<Longrightarrow> path x z (p @ q)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. path x z (p @ q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. path x z (p @ q)", "have 1: \"\\<And>n. n \\<ge> 0 \\<and> n < length (p @ q) \\<Longrightarrow> nth (p @ q) n \\<in> Arr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 \\<le> n \\<and> n < length (p @ q) \\<Longrightarrow>\n       (p @ q) ! n \\<in> Arr", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 \\<le> n \\<and> n < length (p @ q) \\<Longrightarrow>\n       (p @ q) ! n \\<in> Arr", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 \\<le> n \\<and> n < length (p @ q) \\<Longrightarrow>\n       (p @ q) ! n \\<in> Arr", "assume n: \"n \\<ge> 0 \\<and> n < length (p @ q)\""], ["proof (state)\nthis:\n  0 \\<le> n \\<and> n < length (p @ q)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 \\<le> n \\<and> n < length (p @ q) \\<Longrightarrow>\n       (p @ q) ! n \\<in> Arr", "have \"(n \\<ge> 0 \\<and> n < length p) \\<or> (n \\<ge> length p \\<and> n < length (p @ q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<and> n < length p \\<or>\n    length p \\<le> n \\<and> n < length (p @ q)", "using n"], ["proof (prove)\nusing this:\n  0 \\<le> n \\<and> n < length (p @ q)\n\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<and> n < length p \\<or>\n    length p \\<le> n \\<and> n < length (p @ q)", "by auto"], ["proof (state)\nthis:\n  0 \\<le> n \\<and> n < length p \\<or>\n  length p \\<le> n \\<and> n < length (p @ q)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 \\<le> n \\<and> n < length (p @ q) \\<Longrightarrow>\n       (p @ q) ! n \\<in> Arr", "thus \"nth (p @ q) n \\<in> Arr\""], ["proof (prove)\nusing this:\n  0 \\<le> n \\<and> n < length p \\<or>\n  length p \\<le> n \\<and> n < length (p @ q)\n\ngoal (1 subgoal):\n 1. (p @ q) ! n \\<in> Arr", "using assms pq nth_append path_def le_add_diff_inverse length_append\n                    less_eq_nat.simps(1) nat_add_left_cancel_less"], ["proof (prove)\nusing this:\n  0 \\<le> n \\<and> n < length p \\<or>\n  length p \\<le> n \\<and> n < length (p @ q)\n  path x y p\n  path y z q\n  p \\<noteq> [] \\<and> q \\<noteq> []\n  (?xs @ ?ys) ! ?n =\n  (if ?n < length ?xs then ?xs ! ?n else ?ys ! (?n - length ?xs))\n  path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> Obj \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = Dom (hd ?p) \\<and>\n  ?y = Cod (last ?p) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow>\n      Cod (?p ! n) = Dom (?p ! (n + 1)))\n  ?b \\<le> ?a \\<Longrightarrow> ?b + (?a - ?b) = ?a\n  length (?xs @ ?ys) = length ?xs + length ?ys\n  (0 \\<le> ?n) = True\n  (?k + ?m < ?k + ?n) = (?m < ?n)\n\ngoal (1 subgoal):\n 1. (p @ q) ! n \\<in> Arr", "by metis"], ["proof (state)\nthis:\n  (p @ q) ! n \\<in> Arr\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 \\<le> ?n \\<and> ?n < length (p @ q) \\<Longrightarrow>\n  (p @ q) ! ?n \\<in> Arr\n\ngoal (1 subgoal):\n 1. path x z (p @ q)", "have 2: \"\\<And>n. n \\<ge> 0 \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n                                    Cod (nth (p @ q) n) = Dom (nth (p @ q) (n+1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n       Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n       Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n       Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "assume n: \"n \\<ge> 0 \\<and> n < length (p @ q) - 1\""], ["proof (state)\nthis:\n  0 \\<le> n \\<and> n < length (p @ q) - 1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n       Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "have 1: \"(n \\<ge> 0 \\<and> n < (length p) - 1) \\<or> (n \\<ge> length p \\<and> n < length (p @ q) - 1)\n                       \\<or> n = (length p) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<and> n < length p - 1 \\<or>\n    length p \\<le> n \\<and> n < length (p @ q) - 1 \\<or> n = length p - 1", "using n"], ["proof (prove)\nusing this:\n  0 \\<le> n \\<and> n < length (p @ q) - 1\n\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<and> n < length p - 1 \\<or>\n    length p \\<le> n \\<and> n < length (p @ q) - 1 \\<or> n = length p - 1", "by auto"], ["proof (state)\nthis:\n  0 \\<le> n \\<and> n < length p - 1 \\<or>\n  length p \\<le> n \\<and> n < length (p @ q) - 1 \\<or> n = length p - 1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n       Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "thus \"Cod (nth (p @ q) n) = Dom (nth (p @ q) (n+1))\""], ["proof (prove)\nusing this:\n  0 \\<le> n \\<and> n < length p - 1 \\<or>\n  length p \\<le> n \\<and> n < length (p @ q) - 1 \\<or> n = length p - 1\n\ngoal (1 subgoal):\n 1. Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<and> n < length p - 1 \\<or>\n    length p \\<le> n \\<and> n < length (p @ q) - 1 \\<or>\n    n = length p - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "have \"n \\<ge> 0 \\<and> n < (length p) - 1 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<and> n < length p - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "using assms pq nth_append path_def"], ["proof (prove)\nusing this:\n  path x y p\n  path y z q\n  p \\<noteq> [] \\<and> q \\<noteq> []\n  (?xs @ ?ys) ! ?n =\n  (if ?n < length ?xs then ?xs ! ?n else ?ys ! (?n - length ?xs))\n  path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> Obj \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = Dom (hd ?p) \\<and>\n  ?y = Cod (last ?p) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow>\n      Cod (?p ! n) = Dom (?p ! (n + 1)))\n\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<and> n < length p - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "by (metis add_lessD1 less_diff_conv)"], ["proof (state)\nthis:\n  0 \\<le> n \\<and> n < length p - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<and> n < length p - 1 \\<or>\n    length p \\<le> n \\<and> n < length (p @ q) - 1 \\<or>\n    n = length p - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "moreover"], ["proof (state)\nthis:\n  0 \\<le> n \\<and> n < length p - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<and> n < length p - 1 \\<or>\n    length p \\<le> n \\<and> n < length (p @ q) - 1 \\<or>\n    n = length p - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "have \"n = (length p) - 1 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = length p - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "using assms pq nth_append path_def Dom_hd Cod_last"], ["proof (prove)\nusing this:\n  path x y p\n  path y z q\n  p \\<noteq> [] \\<and> q \\<noteq> []\n  (?xs @ ?ys) ! ?n =\n  (if ?n < length ?xs then ?xs ! ?n else ?ys ! (?n - length ?xs))\n  path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> Obj \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = Dom (hd ?p) \\<and>\n  ?y = Cod (last ?p) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow>\n      Cod (?p ! n) = Dom (?p ! (n + 1)))\n  Dom (hd q) = Dom ((p @ q) ! length p)\n  Cod (last p) = Cod ((p @ q) ! (length p - 1))\n\ngoal (1 subgoal):\n 1. n = length p - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "by simp"], ["proof (state)\nthis:\n  n = length p - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<and> n < length p - 1 \\<or>\n    length p \\<le> n \\<and> n < length (p @ q) - 1 \\<or>\n    n = length p - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "moreover"], ["proof (state)\nthis:\n  n = length p - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<and> n < length p - 1 \\<or>\n    length p \\<le> n \\<and> n < length (p @ q) - 1 \\<or>\n    n = length p - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "have \"n \\<ge> length p \\<and> n < length (p @ q) - 1 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length p \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length p \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "assume 1: \"n \\<ge> length p \\<and> n < length (p @ q) - 1\""], ["proof (state)\nthis:\n  length p \\<le> n \\<and> n < length (p @ q) - 1\n\ngoal (1 subgoal):\n 1. length p \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "have \"Cod (nth (p @ q) n) = Cod (nth q (n - length p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cod ((p @ q) ! n) = Cod (q ! (n - length p))", "using 1 nth_append leD"], ["proof (prove)\nusing this:\n  length p \\<le> n \\<and> n < length (p @ q) - 1\n  (?xs @ ?ys) ! ?n =\n  (if ?n < length ?xs then ?xs ! ?n else ?ys ! (?n - length ?xs))\n  ?y \\<le> ?x \\<Longrightarrow> \\<not> ?x < ?y\n\ngoal (1 subgoal):\n 1. Cod ((p @ q) ! n) = Cod (q ! (n - length p))", "by metis"], ["proof (state)\nthis:\n  Cod ((p @ q) ! n) = Cod (q ! (n - length p))\n\ngoal (1 subgoal):\n 1. length p \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "also"], ["proof (state)\nthis:\n  Cod ((p @ q) ! n) = Cod (q ! (n - length p))\n\ngoal (1 subgoal):\n 1. length p \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "have \"... = Dom (nth q (n - length p + 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cod (q ! (n - length p)) = Dom (q ! (n - length p + 1))", "using 1 assms(2) path_def"], ["proof (prove)\nusing this:\n  length p \\<le> n \\<and> n < length (p @ q) - 1\n  path y z q\n  path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> Obj \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = Dom (hd ?p) \\<and>\n  ?y = Cod (last ?p) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow>\n      Cod (?p ! n) = Dom (?p ! (n + 1)))\n\ngoal (1 subgoal):\n 1. Cod (q ! (n - length p)) = Dom (q ! (n - length p + 1))", "by auto"], ["proof (state)\nthis:\n  Cod (q ! (n - length p)) = Dom (q ! (n - length p + 1))\n\ngoal (1 subgoal):\n 1. length p \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "also"], ["proof (state)\nthis:\n  Cod (q ! (n - length p)) = Dom (q ! (n - length p + 1))\n\ngoal (1 subgoal):\n 1. length p \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "have \"... = Dom (nth (p @ q) (n + 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dom (q ! (n - length p + 1)) = Dom ((p @ q) ! (n + 1))", "using 1 nth_append"], ["proof (prove)\nusing this:\n  length p \\<le> n \\<and> n < length (p @ q) - 1\n  (?xs @ ?ys) ! ?n =\n  (if ?n < length ?xs then ?xs ! ?n else ?ys ! (?n - length ?xs))\n\ngoal (1 subgoal):\n 1. Dom (q ! (n - length p + 1)) = Dom ((p @ q) ! (n + 1))", "by (metis Nat.add_diff_assoc2 ex_least_nat_le le_0_eq le_add1 le_neq_implies_less\n                            le_refl le_trans length_0_conv pq)"], ["proof (state)\nthis:\n  Dom (q ! (n - length p + 1)) = Dom ((p @ q) ! (n + 1))\n\ngoal (1 subgoal):\n 1. length p \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "finally"], ["proof (chain)\npicking this:\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "show \"Cod (nth (p @ q) n) = Dom (nth (p @ q) (n + 1))\""], ["proof (prove)\nusing this:\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n\ngoal (1 subgoal):\n 1. Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "by auto"], ["proof (state)\nthis:\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length p \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<and> n < length p - 1 \\<or>\n    length p \\<le> n \\<and> n < length (p @ q) - 1 \\<or>\n    n = length p - 1 \\<Longrightarrow>\n    Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "ultimately"], ["proof (chain)\npicking this:\n  0 \\<le> n \\<and> n < length p - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n  n = length p - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n  length p \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "show ?thesis"], ["proof (prove)\nusing this:\n  0 \\<le> n \\<and> n < length p - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n  n = length p - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n  length p \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n\ngoal (1 subgoal):\n 1. Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "using 1"], ["proof (prove)\nusing this:\n  0 \\<le> n \\<and> n < length p - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n  n = length p - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n  length p \\<le> n \\<and> n < length (p @ q) - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n  0 \\<le> n \\<and> n < length p - 1 \\<or>\n  length p \\<le> n \\<and> n < length (p @ q) - 1 \\<or> n = length p - 1\n\ngoal (1 subgoal):\n 1. Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))", "by auto"], ["proof (state)\nthis:\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 \\<le> ?n \\<and> ?n < length (p @ q) - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! ?n) = Dom ((p @ q) ! (?n + 1))\n\ngoal (1 subgoal):\n 1. path x z (p @ q)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. path x z (p @ q)", "unfolding path_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ q = [] \\<and> x = z \\<and> x \\<in> Obj \\<or>\n    p @ q \\<noteq> [] \\<and>\n    x = Dom (hd (p @ q)) \\<and>\n    z = Cod (last (p @ q)) \\<and>\n    (\\<forall>n.\n        0 \\<le> n \\<and> n < length (p @ q) \\<longrightarrow>\n        (p @ q) ! n \\<in> Arr) \\<and>\n    (\\<forall>n.\n        0 \\<le> n \\<and> n < length (p @ q) - 1 \\<longrightarrow>\n        Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1)))", "using assms pq path_def hd_append2 Cod_last Dom_hd 1 2"], ["proof (prove)\nusing this:\n  path x y p\n  path y z q\n  p \\<noteq> [] \\<and> q \\<noteq> []\n  path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> Obj \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = Dom (hd ?p) \\<and>\n  ?y = Cod (last ?p) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow>\n      Cod (?p ! n) = Dom (?p ! (n + 1)))\n  ?xs \\<noteq> [] \\<Longrightarrow> hd (?xs @ ?ys) = hd ?xs\n  Cod (last p) = Cod ((p @ q) ! (length p - 1))\n  Dom (hd q) = Dom ((p @ q) ! length p)\n  0 \\<le> ?n \\<and> ?n < length (p @ q) \\<Longrightarrow>\n  (p @ q) ! ?n \\<in> Arr\n  0 \\<le> ?n \\<and> ?n < length (p @ q) - 1 \\<Longrightarrow>\n  Cod ((p @ q) ! ?n) = Dom ((p @ q) ! (?n + 1))\n\ngoal (1 subgoal):\n 1. p @ q = [] \\<and> x = z \\<and> x \\<in> Obj \\<or>\n    p @ q \\<noteq> [] \\<and>\n    x = Dom (hd (p @ q)) \\<and>\n    z = Cod (last (p @ q)) \\<and>\n    (\\<forall>n.\n        0 \\<le> n \\<and> n < length (p @ q) \\<longrightarrow>\n        (p @ q) ! n \\<in> Arr) \\<and>\n    (\\<forall>n.\n        0 \\<le> n \\<and> n < length (p @ q) - 1 \\<longrightarrow>\n        Cod ((p @ q) ! n) = Dom ((p @ q) ! (n + 1)))", "by simp"], ["proof (state)\nthis:\n  path x z (p @ q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  path x z (p @ q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<noteq> [] \\<and> q \\<noteq> [] \\<Longrightarrow> path x z (p @ q)\n\ngoal (1 subgoal):\n 1. path x z (p @ q)", "ultimately"], ["proof (chain)\npicking this:\n  p = [] \\<or> q = [] \\<Longrightarrow> path x z (p @ q)\n  p \\<noteq> [] \\<and> q \\<noteq> [] \\<Longrightarrow> path x z (p @ q)", "show ?thesis"], ["proof (prove)\nusing this:\n  p = [] \\<or> q = [] \\<Longrightarrow> path x z (p @ q)\n  p \\<noteq> [] \\<and> q \\<noteq> [] \\<Longrightarrow> path x z (p @ q)\n\ngoal (1 subgoal):\n 1. path x z (p @ q)", "by auto"], ["proof (state)\nthis:\n  path x z (p @ q)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "section \"Free Categories\""], ["", "text\\<open>\n    The free category generated by a graph has as its arrows all triples @{term \"MkArr x y p\"},\n    where @{term x} and @{term y} are objects and @{term p} is a path from @{term x} to @{term y}.\n    We construct it here an instance of the general construction given by the\n    @{locale concrete_category} locale.\n\\<close>"], ["", "locale free_category =\n    G: graph Obj Arr D C\n  for Obj :: \"'obj set\"\n  and Arr :: \"'arr set\"\n  and D :: \"'arr \\<Rightarrow> 'obj\"\n  and C :: \"'arr \\<Rightarrow> 'obj\"\n  begin"], ["", "type_synonym ('o, 'a) arr = \"('o, 'a list) concrete_category.arr\""], ["", "sublocale concrete_category \\<open>Obj :: 'obj set\\<close> \\<open>\\<lambda>x y. Collect (G.path x y)\\<close>\n      \\<open>\\<lambda>_. []\\<close> \\<open>\\<lambda>_ _ _ g f. f @ g\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. concrete_category Obj (\\<lambda>x y. Collect (G.path x y))\n     (\\<lambda>_. []) (\\<lambda>_ _ _ g f. f @ g)", "using G.path_Obj G.path_concat"], ["proof (prove)\nusing this:\n  ?x \\<in> Obj \\<Longrightarrow> G.path ?x ?x []\n  \\<lbrakk>G.path ?x ?y ?p; G.path ?y ?z ?q\\<rbrakk>\n  \\<Longrightarrow> G.path ?x ?z (?p @ ?q)\n\ngoal (1 subgoal):\n 1. concrete_category Obj (\\<lambda>x y. Collect (G.path x y))\n     (\\<lambda>_. []) (\\<lambda>_ _ _ g f. f @ g)", "by (unfold_locales, simp_all)"], ["", "abbreviation comp      (infixr \"\\<cdot>\" 55)\n    where \"comp \\<equiv> COMP\""], ["", "notation in_hom     (\"\\<guillemotleft>_ : _ \\<rightarrow> _\\<guillemotright>\")"], ["", "abbreviation Path\n    where \"Path \\<equiv> Map\""], ["", "lemma arr_single [simp]:\n    assumes \"x \\<in> Arr\"\n    shows \"arr (MkArr (D x) (C x) [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr (MkArr (D x) (C x) [x])", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> Arr\n\ngoal (1 subgoal):\n 1. arr (MkArr (D x) (C x) [x])", "by (simp add: G.cod_is_obj G.dom_is_obj G.path_single_Arr)"], ["", "end"], ["", "section \"Discrete Categories\""], ["", "text\\<open>\n    A discrete category is a category in which every arrow is an identity.\n    We could construct it as the free category generated by a graph with no\n    arrows, but it is simpler just to apply the @{locale concrete_category}\n    construction directly.\n\\<close>"], ["", "locale discrete_category =\n  fixes Obj :: \"'obj set\"\n  begin"], ["", "type_synonym 'o arr = \"('o, unit) concrete_category.arr\""], ["", "sublocale concrete_category \\<open>Obj :: 'obj set\\<close> \\<open>\\<lambda>x y. if x = y then {x} else {}\\<close>\n      \\<open>\\<lambda>x. x\\<close> \\<open>\\<lambda>_ _ x _ _. x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. concrete_category Obj (\\<lambda>x y. if x = y then {x} else {})\n     (\\<lambda>x. x) (\\<lambda>_ _ x _ _. x)", "apply unfold_locales"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>A.\n       A \\<in> Obj \\<Longrightarrow> A \\<in> (if A = A then {A} else {})\n 2. \\<And>A B C f g.\n       \\<lbrakk>A \\<in> Obj; B \\<in> Obj; C \\<in> Obj;\n        f \\<in> (if A = B then {A} else {});\n        g \\<in> (if B = C then {B} else {})\\<rbrakk>\n       \\<Longrightarrow> A \\<in> (if A = C then {A} else {})\n 3. \\<And>A f B.\n       \\<lbrakk>A \\<in> Obj; f \\<in> (if A = B then {A} else {})\\<rbrakk>\n       \\<Longrightarrow> A = f\n 4. \\<And>B f A.\n       \\<lbrakk>B \\<in> Obj; f \\<in> (if A = B then {A} else {})\\<rbrakk>\n       \\<Longrightarrow> A = f\n 5. \\<And>A B C D f g h.\n       \\<lbrakk>A \\<in> Obj; B \\<in> Obj; C \\<in> Obj; D \\<in> Obj;\n        f \\<in> (if A = B then {A} else {});\n        g \\<in> (if B = C then {B} else {});\n        h \\<in> (if C = D then {C} else {})\\<rbrakk>\n       \\<Longrightarrow> A = A", "apply simp_all"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A B C f g.\n       \\<lbrakk>A \\<in> Obj; B \\<in> Obj; C \\<in> Obj;\n        f \\<in> (if A = B then {A} else {});\n        g \\<in> (if B = C then {B} else {})\\<rbrakk>\n       \\<Longrightarrow> A = C\n 2. \\<And>A f B.\n       \\<lbrakk>A \\<in> Obj; f \\<in> (if A = B then {A} else {})\\<rbrakk>\n       \\<Longrightarrow> A = f\n 3. \\<And>B f A.\n       \\<lbrakk>B \\<in> Obj; f \\<in> (if A = B then {A} else {})\\<rbrakk>\n       \\<Longrightarrow> A = f", "apply (metis empty_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A f B.\n       \\<lbrakk>A \\<in> Obj; f \\<in> (if A = B then {A} else {})\\<rbrakk>\n       \\<Longrightarrow> A = f\n 2. \\<And>B f A.\n       \\<lbrakk>B \\<in> Obj; f \\<in> (if A = B then {A} else {})\\<rbrakk>\n       \\<Longrightarrow> A = f", "apply (metis empty_iff singletonD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>B f A.\n       \\<lbrakk>B \\<in> Obj; f \\<in> (if A = B then {A} else {})\\<rbrakk>\n       \\<Longrightarrow> A = f", "by (metis empty_iff singletonD)"], ["", "abbreviation comp      (infixr \"\\<cdot>\" 55)\n    where \"comp \\<equiv> COMP\""], ["", "notation in_hom        (\"\\<guillemotleft>_ : _ \\<rightarrow> _\\<guillemotright>\")"], ["", "lemma is_discrete:\n    shows \"arr f \\<longleftrightarrow> ide f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f = ide f", "using ide_char arr_char"], ["proof (prove)\nusing this:\n  ide ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> Obj \\<and> Cod ?f = Dom ?f \\<and> Map ?f = Dom ?f)\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> Obj \\<and>\n   Cod ?f \\<in> Obj \\<and>\n   Map ?f \\<in> (if Dom ?f = Cod ?f then {Dom ?f} else {}))\n\ngoal (1 subgoal):\n 1. arr f = ide f", "by simp"], ["", "lemma arr_char:\n    shows \"arr f \\<longleftrightarrow> Dom f \\<in> Obj \\<and> f = MkIde (Dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f = (Dom f \\<in> Obj \\<and> f = MkIde (Dom f))", "using is_discrete"], ["proof (prove)\nusing this:\n  arr ?f = ide ?f\n\ngoal (1 subgoal):\n 1. arr f = (Dom f \\<in> Obj \\<and> f = MkIde (Dom f))", "by (metis (no_types, lifting) cod_char dom_char ide_MkIde ide_char ide_char')"], ["", "lemma arr_char':\n    shows \"arr f \\<longleftrightarrow> f \\<in> MkIde ` Obj\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f = (f \\<in> MkIde ` Obj)", "using arr_char image_iff"], ["proof (prove)\nusing this:\n  arr ?f = (Dom ?f \\<in> Obj \\<and> ?f = MkIde (Dom ?f))\n  (?z \\<in> ?f ` ?A) = (\\<exists>x\\<in>?A. ?z = ?f x)\n\ngoal (1 subgoal):\n 1. arr f = (f \\<in> MkIde ` Obj)", "by auto"], ["", "lemma dom_char:\n    shows \"dom f = (if arr f then f else null)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.dom f = (if arr f then f else null)", "using dom_char is_discrete"], ["proof (prove)\nusing this:\n  local.dom ?f = (if arr ?f then MkIde (Dom ?f) else null)\n  arr ?f = ide ?f\n\ngoal (1 subgoal):\n 1. local.dom f = (if arr f then f else null)", "by simp"], ["", "lemma cod_char:\n    shows \"cod f = (if arr f then f else null)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod f = (if arr f then f else null)", "using cod_char is_discrete"], ["proof (prove)\nusing this:\n  cod ?f = (if arr ?f then MkIde (Cod ?f) else null)\n  arr ?f = ide ?f\n\ngoal (1 subgoal):\n 1. cod f = (if arr f then f else null)", "by simp"], ["", "lemma in_hom_char:\n    shows \"\\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> \\<longleftrightarrow> arr f \\<and> f = a \\<and> f = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (arr f \\<and> f = a \\<and> f = b)", "using is_discrete"], ["proof (prove)\nusing this:\n  arr ?f = ide ?f\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (arr f \\<and> f = a \\<and> f = b)", "by auto"], ["", "lemma seq_char:\n    shows \"seq g f \\<longleftrightarrow> arr f \\<and> f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq g f = (arr f \\<and> f = g)", "using is_discrete"], ["proof (prove)\nusing this:\n  arr ?f = ide ?f\n\ngoal (1 subgoal):\n 1. seq g f = (arr f \\<and> f = g)", "by (metis (no_types, lifting) comp_arr_dom seqE dom_char)"], ["", "lemma comp_char:\n    shows \"g \\<cdot> f = (if seq g f then f else null)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<cdot> f = (if seq g f then f else null)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<cdot> f = (if seq g f then f else null)", "have \"\\<not> seq g f \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> seq g f \\<Longrightarrow>\n    g \\<cdot> f = (if seq g f then f else null)", "using comp_char"], ["proof (prove)\nusing this:\n  ?g \\<cdot> ?f =\n  (if seq ?g ?f then MkArr (Dom ?f) (Cod ?g) (Dom ?f) else null)\n\ngoal (1 subgoal):\n 1. \\<not> seq g f \\<Longrightarrow>\n    g \\<cdot> f = (if seq g f then f else null)", "by presburger"], ["proof (state)\nthis:\n  \\<not> seq g f \\<Longrightarrow>\n  g \\<cdot> f = (if seq g f then f else null)\n\ngoal (1 subgoal):\n 1. g \\<cdot> f = (if seq g f then f else null)", "moreover"], ["proof (state)\nthis:\n  \\<not> seq g f \\<Longrightarrow>\n  g \\<cdot> f = (if seq g f then f else null)\n\ngoal (1 subgoal):\n 1. g \\<cdot> f = (if seq g f then f else null)", "have \"seq g f \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq g f \\<Longrightarrow> g \\<cdot> f = (if seq g f then f else null)", "using seq_char comp_char comp_arr_ide is_discrete"], ["proof (prove)\nusing this:\n  seq ?g ?f = (arr ?f \\<and> ?f = ?g)\n  ?g \\<cdot> ?f =\n  (if seq ?g ?f then MkArr (Dom ?f) (Cod ?g) (Dom ?f) else null)\n  \\<lbrakk>ide ?a; seq ?f ?a\\<rbrakk> \\<Longrightarrow> ?f \\<cdot> ?a = ?f\n  arr ?f = ide ?f\n\ngoal (1 subgoal):\n 1. seq g f \\<Longrightarrow> g \\<cdot> f = (if seq g f then f else null)", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  seq g f \\<Longrightarrow> g \\<cdot> f = (if seq g f then f else null)\n\ngoal (1 subgoal):\n 1. g \\<cdot> f = (if seq g f then f else null)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> seq g f \\<Longrightarrow>\n  g \\<cdot> f = (if seq g f then f else null)\n  seq g f \\<Longrightarrow> g \\<cdot> f = (if seq g f then f else null)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> seq g f \\<Longrightarrow>\n  g \\<cdot> f = (if seq g f then f else null)\n  seq g f \\<Longrightarrow> g \\<cdot> f = (if seq g f then f else null)\n\ngoal (1 subgoal):\n 1. g \\<cdot> f = (if seq g f then f else null)", "by blast"], ["proof (state)\nthis:\n  g \\<cdot> f = (if seq g f then f else null)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text\\<open>\n    The empty category is the discrete category generated by an empty set of objects.\n\\<close>"], ["", "locale empty_category =\n    discrete_category \"{} :: unit set\"\n  begin"], ["", "lemma is_empty:\n    shows \"\\<not>arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> arr f", "using arr_char"], ["proof (prove)\nusing this:\n  arr ?f = (Dom ?f \\<in> {} \\<and> ?f = MkIde (Dom ?f))\n\ngoal (1 subgoal):\n 1. \\<not> arr f", "by simp"], ["", "end"], ["", "section \"Quivers\""], ["", "text\\<open>\n    A quiver is a two-object category whose non-identity arrows all point in the\n    same direction.  A quiver is specified by giving the set of these non-identity arrows.\n\\<close>"], ["", "locale quiver =\n  fixes Arr :: \"'arr set\"\n  begin"], ["", "type_synonym 'a arr = \"(unit, 'a) concrete_category.arr\""], ["", "sublocale free_category \"{False, True}\" Arr \"\\<lambda>_. False\" \"\\<lambda>_. True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_category {False, True} Arr (\\<lambda>_. False) (\\<lambda>_. True)", "by (unfold_locales, simp_all)"], ["", "notation comp                  (infixr \"\\<cdot>\" 55)"], ["", "notation in_hom                (\"\\<guillemotleft>_ : _ \\<rightarrow> _\\<guillemotright>\")"], ["", "definition Zero\n    where \"Zero \\<equiv> MkIde False\""], ["", "definition One\n    where \"One \\<equiv> MkIde True\""], ["", "definition fromArr\n    where \"fromArr x \\<equiv> if x \\<in> Arr then MkArr False True [x] else null\""], ["", "definition toArr\n    where \"toArr f \\<equiv> hd (Path f)\""], ["", "lemma ide_char:\n    shows \"ide f \\<longleftrightarrow> f = Zero \\<or> f = One\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide f = (f = Zero \\<or> f = One)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ide f = (f = Zero \\<or> f = One)", "have \"ide f \\<longleftrightarrow> f = MkIde False \\<or> f = MkIde True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide f = (f = MkIde False \\<or> f = MkIde True)", "using ide_char concrete_category.MkIde_Dom' concrete_category_axioms"], ["proof (prove)\nusing this:\n  ide ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> {False, True} \\<and> Cod ?f = Dom ?f \\<and> Map ?f = [])\n  \\<lbrakk>concrete_category ?Obj ?Hom ?Id ?Comp;\n   partial_magma.ide (concrete_category.COMP ?Obj ?Hom ?Comp) ?a\\<rbrakk>\n  \\<Longrightarrow> MkArr (concrete_category.Dom ?a)\n                     (concrete_category.Dom ?a)\n                     (?Id (concrete_category.Dom ?a)) =\n                    ?a\n  concrete_category {False, True} (\\<lambda>x y. Collect (G.path x y))\n   (\\<lambda>_. []) (\\<lambda>_ _ _ g f. f @ g)\n\ngoal (1 subgoal):\n 1. ide f = (f = MkIde False \\<or> f = MkIde True)", "by fastforce"], ["proof (state)\nthis:\n  ide f = (f = MkIde False \\<or> f = MkIde True)\n\ngoal (1 subgoal):\n 1. ide f = (f = Zero \\<or> f = One)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ide f = (f = MkIde False \\<or> f = MkIde True)\n\ngoal (1 subgoal):\n 1. ide f = (f = Zero \\<or> f = One)", "using comp_def Zero_def One_def"], ["proof (prove)\nusing this:\n  ide f = (f = MkIde False \\<or> f = MkIde True)\n  ?f \\<circ> ?g = (\\<lambda>x. ?f (?g x))\n  Zero \\<equiv> MkIde False\n  One \\<equiv> MkIde True\n\ngoal (1 subgoal):\n 1. ide f = (f = Zero \\<or> f = One)", "by simp"], ["proof (state)\nthis:\n  ide f = (f = Zero \\<or> f = One)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma arr_char':\n    shows \"arr f \\<longleftrightarrow> f =\n           MkIde False \\<or> f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f =\n    (f = MkIde False \\<or>\n     f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. arr f \\<Longrightarrow>\n    f = MkIde False \\<or>\n    f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr\n 2. f = MkIde False \\<or>\n    f = MkIde True \\<or>\n    f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr \\<Longrightarrow>\n    arr f", "assume f: \"f = MkIde False \\<or> f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr\""], ["proof (state)\nthis:\n  f = MkIde False \\<or>\n  f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr\n\ngoal (2 subgoals):\n 1. arr f \\<Longrightarrow>\n    f = MkIde False \\<or>\n    f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr\n 2. f = MkIde False \\<or>\n    f = MkIde True \\<or>\n    f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr \\<Longrightarrow>\n    arr f", "show \"arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f", "using f"], ["proof (prove)\nusing this:\n  f = MkIde False \\<or>\n  f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr\n\ngoal (1 subgoal):\n 1. arr f", "by auto"], ["proof (state)\nthis:\n  arr f\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    f = MkIde False \\<or>\n    f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    f = MkIde False \\<or>\n    f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "assume f: \"arr f\""], ["proof (state)\nthis:\n  arr f\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    f = MkIde False \\<or>\n    f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "have \"\\<not>(f = MkIde False \\<or> f = MkIde True) \\<Longrightarrow> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (f = MkIde False \\<or> f = MkIde True) \\<Longrightarrow>\n    f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (f = MkIde False \\<or> f = MkIde True) \\<Longrightarrow>\n    f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "assume f': \"\\<not>(f = MkIde False \\<or> f = MkIde True)\""], ["proof (state)\nthis:\n  \\<not> (f = MkIde False \\<or> f = MkIde True)\n\ngoal (1 subgoal):\n 1. \\<not> (f = MkIde False \\<or> f = MkIde True) \\<Longrightarrow>\n    f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "have 0: \"Dom f = False \\<and> Cod f = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dom f = False \\<and> Cod f = True", "using f f' arr_char G.path_def MkArr_Map"], ["proof (prove)\nusing this:\n  arr f\n  \\<not> (f = MkIde False \\<or> f = MkIde True)\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> {False, True} \\<and>\n   Cod ?f \\<in> {False, True} \\<and>\n   Map ?f \\<in> Collect (G.path (Dom ?f) (Cod ?f)))\n  G.path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> {False, True} \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = False \\<and>\n  ?y = True \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow> True = False)\n  arr ?f \\<Longrightarrow> MkArr (Dom ?f) (Cod ?f) (Map ?f) = ?f\n\ngoal (1 subgoal):\n 1. Dom f = False \\<and> Cod f = True", "by fastforce"], ["proof (state)\nthis:\n  Dom f = False \\<and> Cod f = True\n\ngoal (1 subgoal):\n 1. \\<not> (f = MkIde False \\<or> f = MkIde True) \\<Longrightarrow>\n    f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "have 1: \"f = MkArr False True (Path f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = MkArr False True (Map f)", "using f 0 arr_char MkArr_Map"], ["proof (prove)\nusing this:\n  arr f\n  Dom f = False \\<and> Cod f = True\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> {False, True} \\<and>\n   Cod ?f \\<in> {False, True} \\<and>\n   Map ?f \\<in> Collect (G.path (Dom ?f) (Cod ?f)))\n  arr ?f \\<Longrightarrow> MkArr (Dom ?f) (Cod ?f) (Map ?f) = ?f\n\ngoal (1 subgoal):\n 1. f = MkArr False True (Map f)", "by force"], ["proof (state)\nthis:\n  f = MkArr False True (Map f)\n\ngoal (1 subgoal):\n 1. \\<not> (f = MkIde False \\<or> f = MkIde True) \\<Longrightarrow>\n    f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "moreover"], ["proof (state)\nthis:\n  f = MkArr False True (Map f)\n\ngoal (1 subgoal):\n 1. \\<not> (f = MkIde False \\<or> f = MkIde True) \\<Longrightarrow>\n    f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "have \"length (Path f) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (Map f) = 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length (Map f) = 1", "have \"length (Path f) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (Map f) \\<noteq> 0", "using f f' 0 arr_char G.path_def"], ["proof (prove)\nusing this:\n  arr f\n  \\<not> (f = MkIde False \\<or> f = MkIde True)\n  Dom f = False \\<and> Cod f = True\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> {False, True} \\<and>\n   Cod ?f \\<in> {False, True} \\<and>\n   Map ?f \\<in> Collect (G.path (Dom ?f) (Cod ?f)))\n  G.path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> {False, True} \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = False \\<and>\n  ?y = True \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow> True = False)\n\ngoal (1 subgoal):\n 1. length (Map f) \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  length (Map f) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. length (Map f) = 1", "moreover"], ["proof (state)\nthis:\n  length (Map f) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. length (Map f) = 1", "have \"\\<And>x y p. length p > 1 \\<Longrightarrow> \\<not> G.path x y p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y p. 1 < length p \\<Longrightarrow> \\<not> G.path x y p", "using G.path_def less_diff_conv"], ["proof (prove)\nusing this:\n  G.path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> {False, True} \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = False \\<and>\n  ?y = True \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow> True = False)\n  (?i < ?j - ?k) = (?i + ?k < ?j)\n\ngoal (1 subgoal):\n 1. \\<And>x y p. 1 < length p \\<Longrightarrow> \\<not> G.path x y p", "by fastforce"], ["proof (state)\nthis:\n  1 < length ?p \\<Longrightarrow> \\<not> G.path ?x ?y ?p\n\ngoal (1 subgoal):\n 1. length (Map f) = 1", "ultimately"], ["proof (chain)\npicking this:\n  length (Map f) \\<noteq> 0\n  1 < length ?p \\<Longrightarrow> \\<not> G.path ?x ?y ?p", "show ?thesis"], ["proof (prove)\nusing this:\n  length (Map f) \\<noteq> 0\n  1 < length ?p \\<Longrightarrow> \\<not> G.path ?x ?y ?p\n\ngoal (1 subgoal):\n 1. length (Map f) = 1", "using f arr_char"], ["proof (prove)\nusing this:\n  length (Map f) \\<noteq> 0\n  1 < length ?p \\<Longrightarrow> \\<not> G.path ?x ?y ?p\n  arr f\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> {False, True} \\<and>\n   Cod ?f \\<in> {False, True} \\<and>\n   Map ?f \\<in> Collect (G.path (Dom ?f) (Cod ?f)))\n\ngoal (1 subgoal):\n 1. length (Map f) = 1", "by (metis less_one linorder_neqE_nat mem_Collect_eq)"], ["proof (state)\nthis:\n  length (Map f) = 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (Map f) = 1\n\ngoal (1 subgoal):\n 1. \\<not> (f = MkIde False \\<or> f = MkIde True) \\<Longrightarrow>\n    f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "moreover"], ["proof (state)\nthis:\n  length (Map f) = 1\n\ngoal (1 subgoal):\n 1. \\<not> (f = MkIde False \\<or> f = MkIde True) \\<Longrightarrow>\n    f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "have \"\\<And>p. length p = 1 \\<longleftrightarrow> (\\<exists>x. p = [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p. (length p = 1) = (\\<exists>x. p = [x])", "by (auto simp: length_Suc_conv)"], ["proof (state)\nthis:\n  (length ?p = 1) = (\\<exists>x. ?p = [x])\n\ngoal (1 subgoal):\n 1. \\<not> (f = MkIde False \\<or> f = MkIde True) \\<Longrightarrow>\n    f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "ultimately"], ["proof (chain)\npicking this:\n  f = MkArr False True (Map f)\n  length (Map f) = 1\n  (length ?p = 1) = (\\<exists>x. ?p = [x])", "have \"\\<exists>x. x \\<in> Arr \\<and> Path f = [x]\""], ["proof (prove)\nusing this:\n  f = MkArr False True (Map f)\n  length (Map f) = 1\n  (length ?p = 1) = (\\<exists>x. ?p = [x])\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> Arr \\<and> Map f = [x]", "using f G.path_def arr_char"], ["proof (prove)\nusing this:\n  f = MkArr False True (Map f)\n  length (Map f) = 1\n  (length ?p = 1) = (\\<exists>x. ?p = [x])\n  arr f\n  G.path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> {False, True} \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = False \\<and>\n  ?y = True \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow> True = False)\n  arr ?f =\n  (?f \\<noteq> Null \\<and>\n   Dom ?f \\<in> {False, True} \\<and>\n   Cod ?f \\<in> {False, True} \\<and>\n   Map ?f \\<in> Collect (G.path (Dom ?f) (Cod ?f)))\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> Arr \\<and> Map f = [x]", "by (metis (no_types, lifting) Cod.simps(1) Dom.simps(1) le_eq_less_or_eq\n              less_numeral_extra(1) mem_Collect_eq nth_Cons_0)"], ["proof (state)\nthis:\n  \\<exists>x. x \\<in> Arr \\<and> Map f = [x]\n\ngoal (1 subgoal):\n 1. \\<not> (f = MkIde False \\<or> f = MkIde True) \\<Longrightarrow>\n    f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "thus \"f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr\""], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<in> Arr \\<and> Map f = [x]\n\ngoal (1 subgoal):\n 1. f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "using 1"], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<in> Arr \\<and> Map f = [x]\n  f = MkArr False True (Map f)\n\ngoal (1 subgoal):\n 1. f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "by auto"], ["proof (state)\nthis:\n  f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> (f = MkIde False \\<or> f = MkIde True) \\<Longrightarrow>\n  f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    f = MkIde False \\<or>\n    f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "thus \"f = MkIde False \\<or> f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr\""], ["proof (prove)\nusing this:\n  \\<not> (f = MkIde False \\<or> f = MkIde True) \\<Longrightarrow>\n  f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr\n\ngoal (1 subgoal):\n 1. f = MkIde False \\<or>\n    f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr", "by auto"], ["proof (state)\nthis:\n  f = MkIde False \\<or>\n  f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma arr_char:\n    shows \"arr f \\<longleftrightarrow> f = Zero \\<or> f = One \\<or> f \\<in> fromArr ` Arr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f = (f = Zero \\<or> f = One \\<or> f \\<in> fromArr ` Arr)", "using arr_char' Zero_def One_def fromArr_def"], ["proof (prove)\nusing this:\n  arr ?f =\n  (?f = MkIde False \\<or>\n   ?f = MkIde True \\<or> ?f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr)\n  Zero \\<equiv> MkIde False\n  One \\<equiv> MkIde True\n  fromArr ?x \\<equiv> if ?x \\<in> Arr then MkArr False True [?x] else null\n\ngoal (1 subgoal):\n 1. arr f = (f = Zero \\<or> f = One \\<or> f \\<in> fromArr ` Arr)", "by simp"], ["", "lemma dom_char:\n    shows \"dom f = (if arr f then\n                      if f = One then One else Zero\n                    else null)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.dom f = (if arr f then if f = One then One else Zero else null)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.dom f = (if arr f then if f = One then One else Zero else null)", "have \"\\<not> arr f \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> arr f \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "using dom_char"], ["proof (prove)\nusing this:\n  local.dom ?f = (if arr ?f then MkIde (Dom ?f) else null)\n\ngoal (1 subgoal):\n 1. \\<not> arr f \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "by simp"], ["proof (state)\nthis:\n  \\<not> arr f \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n\ngoal (1 subgoal):\n 1. local.dom f = (if arr f then if f = One then One else Zero else null)", "moreover"], ["proof (state)\nthis:\n  \\<not> arr f \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n\ngoal (1 subgoal):\n 1. local.dom f = (if arr f then if f = One then One else Zero else null)", "have \"arr f \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "assume f: \"arr f\""], ["proof (state)\nthis:\n  arr f\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "have 1: \"dom f = MkIde (Dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.dom f = MkIde (Dom f)", "using f dom_char"], ["proof (prove)\nusing this:\n  arr f\n  local.dom ?f = (if arr ?f then MkIde (Dom ?f) else null)\n\ngoal (1 subgoal):\n 1. local.dom f = MkIde (Dom f)", "by simp"], ["proof (state)\nthis:\n  local.dom f = MkIde (Dom f)\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "have \"f = One \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = One \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "using f 1 One_def"], ["proof (prove)\nusing this:\n  arr f\n  local.dom f = MkIde (Dom f)\n  One \\<equiv> MkIde True\n\ngoal (1 subgoal):\n 1. f = One \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "by (metis (full_types) Dom.simps(1))"], ["proof (state)\nthis:\n  f = One \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "moreover"], ["proof (state)\nthis:\n  f = One \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "have \"f = Zero \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = Zero \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "using f 1 Zero_def"], ["proof (prove)\nusing this:\n  arr f\n  local.dom f = MkIde (Dom f)\n  Zero \\<equiv> MkIde False\n\ngoal (1 subgoal):\n 1. f = Zero \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "by (metis (full_types) Dom.simps(1))"], ["proof (state)\nthis:\n  f = Zero \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "moreover"], ["proof (state)\nthis:\n  f = Zero \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "have \"f \\<in> fromArr ` Arr \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> fromArr ` Arr \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "using f fromArr_def G.path_def Zero_def calculation(1)"], ["proof (prove)\nusing this:\n  arr f\n  fromArr ?x \\<equiv> if ?x \\<in> Arr then MkArr False True [?x] else null\n  G.path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> {False, True} \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = False \\<and>\n  ?y = True \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow> True = False)\n  Zero \\<equiv> MkIde False\n  f = One \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n\ngoal (1 subgoal):\n 1. f \\<in> fromArr ` Arr \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "by auto"], ["proof (state)\nthis:\n  f \\<in> fromArr ` Arr \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    local.dom f = (if arr f then if f = One then One else Zero else null)", "ultimately"], ["proof (chain)\npicking this:\n  f = One \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n  f = Zero \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n  f \\<in> fromArr ` Arr \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)", "show ?thesis"], ["proof (prove)\nusing this:\n  f = One \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n  f = Zero \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n  f \\<in> fromArr ` Arr \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n\ngoal (1 subgoal):\n 1. local.dom f = (if arr f then if f = One then One else Zero else null)", "using f arr_char"], ["proof (prove)\nusing this:\n  f = One \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n  f = Zero \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n  f \\<in> fromArr ` Arr \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n  arr f\n  arr ?f = (?f = Zero \\<or> ?f = One \\<or> ?f \\<in> fromArr ` Arr)\n\ngoal (1 subgoal):\n 1. local.dom f = (if arr f then if f = One then One else Zero else null)", "by blast"], ["proof (state)\nthis:\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  arr f \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n\ngoal (1 subgoal):\n 1. local.dom f = (if arr f then if f = One then One else Zero else null)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> arr f \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n  arr f \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> arr f \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n  arr f \\<Longrightarrow>\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n\ngoal (1 subgoal):\n 1. local.dom f = (if arr f then if f = One then One else Zero else null)", "by blast"], ["proof (state)\nthis:\n  local.dom f = (if arr f then if f = One then One else Zero else null)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cod_char:\n    shows \"cod f = (if arr f then\n                      if f = Zero then Zero else One\n                    else null)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod f = (if arr f then if f = Zero then Zero else One else null)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cod f = (if arr f then if f = Zero then Zero else One else null)", "have \"\\<not> arr f \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> arr f \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "using cod_char"], ["proof (prove)\nusing this:\n  cod ?f = (if arr ?f then MkIde (Cod ?f) else null)\n\ngoal (1 subgoal):\n 1. \\<not> arr f \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "by simp"], ["proof (state)\nthis:\n  \\<not> arr f \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n\ngoal (1 subgoal):\n 1. cod f = (if arr f then if f = Zero then Zero else One else null)", "moreover"], ["proof (state)\nthis:\n  \\<not> arr f \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n\ngoal (1 subgoal):\n 1. cod f = (if arr f then if f = Zero then Zero else One else null)", "have \"arr f \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "assume f: \"arr f\""], ["proof (state)\nthis:\n  arr f\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "have 1: \"cod f = MkIde (Cod f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod f = MkIde (Cod f)", "using f cod_char"], ["proof (prove)\nusing this:\n  arr f\n  cod ?f = (if arr ?f then MkIde (Cod ?f) else null)\n\ngoal (1 subgoal):\n 1. cod f = MkIde (Cod f)", "by simp"], ["proof (state)\nthis:\n  cod f = MkIde (Cod f)\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "have \"f = One \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = One \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "using f 1 One_def"], ["proof (prove)\nusing this:\n  arr f\n  cod f = MkIde (Cod f)\n  One \\<equiv> MkIde True\n\ngoal (1 subgoal):\n 1. f = One \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "by (metis (full_types) Cod.simps(1) f)"], ["proof (state)\nthis:\n  f = One \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "moreover"], ["proof (state)\nthis:\n  f = One \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "have \"f = Zero \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = Zero \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "using f 1 Zero_def"], ["proof (prove)\nusing this:\n  arr f\n  cod f = MkIde (Cod f)\n  Zero \\<equiv> MkIde False\n\ngoal (1 subgoal):\n 1. f = Zero \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "by (metis (full_types) Cod.simps(1) f)"], ["proof (state)\nthis:\n  f = Zero \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "moreover"], ["proof (state)\nthis:\n  f = Zero \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "have \"f \\<in> fromArr ` Arr \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> fromArr ` Arr \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "using f fromArr_def G.path_def One_def calculation(2)"], ["proof (prove)\nusing this:\n  arr f\n  fromArr ?x \\<equiv> if ?x \\<in> Arr then MkArr False True [?x] else null\n  G.path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> {False, True} \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = False \\<and>\n  ?y = True \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow> True = False)\n  One \\<equiv> MkIde True\n  f = Zero \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n\ngoal (1 subgoal):\n 1. f \\<in> fromArr ` Arr \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "by auto"], ["proof (state)\nthis:\n  f \\<in> fromArr ` Arr \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n\ngoal (1 subgoal):\n 1. arr f \\<Longrightarrow>\n    cod f = (if arr f then if f = Zero then Zero else One else null)", "ultimately"], ["proof (chain)\npicking this:\n  f = One \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n  f = Zero \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n  f \\<in> fromArr ` Arr \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)", "show ?thesis"], ["proof (prove)\nusing this:\n  f = One \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n  f = Zero \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n  f \\<in> fromArr ` Arr \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n\ngoal (1 subgoal):\n 1. cod f = (if arr f then if f = Zero then Zero else One else null)", "using f arr_char"], ["proof (prove)\nusing this:\n  f = One \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n  f = Zero \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n  f \\<in> fromArr ` Arr \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n  arr f\n  arr ?f = (?f = Zero \\<or> ?f = One \\<or> ?f \\<in> fromArr ` Arr)\n\ngoal (1 subgoal):\n 1. cod f = (if arr f then if f = Zero then Zero else One else null)", "by blast"], ["proof (state)\nthis:\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  arr f \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n\ngoal (1 subgoal):\n 1. cod f = (if arr f then if f = Zero then Zero else One else null)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> arr f \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n  arr f \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> arr f \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n  arr f \\<Longrightarrow>\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n\ngoal (1 subgoal):\n 1. cod f = (if arr f then if f = Zero then Zero else One else null)", "by blast"], ["proof (state)\nthis:\n  cod f = (if arr f then if f = Zero then Zero else One else null)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_char:\n    shows \"seq g f \\<longleftrightarrow> arr g \\<and> arr f \\<and> ((f = Zero \\<and> g \\<noteq> One) \\<or> (f \\<noteq> Zero \\<and> g = One))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq g f =\n    (arr g \\<and>\n     arr f \\<and>\n     (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. seq g f \\<Longrightarrow>\n    arr g \\<and>\n    arr f \\<and>\n    (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)\n 2. arr g \\<and>\n    arr f \\<and>\n    (f = Zero \\<and> g \\<noteq> One \\<or>\n     f \\<noteq> Zero \\<and> g = One) \\<Longrightarrow>\n    seq g f", "assume gf: \"arr g \\<and> arr f \\<and> ((f = Zero \\<and> g \\<noteq> One) \\<or> (f \\<noteq> Zero \\<and> g = One))\""], ["proof (state)\nthis:\n  arr g \\<and>\n  arr f \\<and>\n  (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)\n\ngoal (2 subgoals):\n 1. seq g f \\<Longrightarrow>\n    arr g \\<and>\n    arr f \\<and>\n    (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)\n 2. arr g \\<and>\n    arr f \\<and>\n    (f = Zero \\<and> g \\<noteq> One \\<or>\n     f \\<noteq> Zero \\<and> g = One) \\<Longrightarrow>\n    seq g f", "show \"seq g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq g f", "using gf dom_char cod_char"], ["proof (prove)\nusing this:\n  arr g \\<and>\n  arr f \\<and>\n  (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)\n  local.dom ?f = (if arr ?f then if ?f = One then One else Zero else null)\n  cod ?f = (if arr ?f then if ?f = Zero then Zero else One else null)\n\ngoal (1 subgoal):\n 1. seq g f", "by auto"], ["proof (state)\nthis:\n  seq g f\n\ngoal (1 subgoal):\n 1. seq g f \\<Longrightarrow>\n    arr g \\<and>\n    arr f \\<and>\n    (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. seq g f \\<Longrightarrow>\n    arr g \\<and>\n    arr f \\<and>\n    (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)", "assume gf: \"seq g f\""], ["proof (state)\nthis:\n  seq g f\n\ngoal (1 subgoal):\n 1. seq g f \\<Longrightarrow>\n    arr g \\<and>\n    arr f \\<and>\n    (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)", "hence 1: \"arr f \\<and> arr g \\<and> dom g = cod f\""], ["proof (prove)\nusing this:\n  seq g f\n\ngoal (1 subgoal):\n 1. arr f \\<and> arr g \\<and> local.dom g = cod f", "by auto"], ["proof (state)\nthis:\n  arr f \\<and> arr g \\<and> local.dom g = cod f\n\ngoal (1 subgoal):\n 1. seq g f \\<Longrightarrow>\n    arr g \\<and>\n    arr f \\<and>\n    (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)", "have \"Cod f = False \\<Longrightarrow> f = Zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cod f = False \\<Longrightarrow> f = Zero", "using gf 1 arr_char [of f] G.path_def Zero_def One_def cod_char Dom_cod"], ["proof (prove)\nusing this:\n  seq g f\n  arr f \\<and> arr g \\<and> local.dom g = cod f\n  arr f = (f = Zero \\<or> f = One \\<or> f \\<in> fromArr ` Arr)\n  G.path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> {False, True} \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = False \\<and>\n  ?y = True \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow> True = False)\n  Zero \\<equiv> MkIde False\n  One \\<equiv> MkIde True\n  cod ?f = (if arr ?f then if ?f = Zero then Zero else One else null)\n  arr ?f \\<Longrightarrow> Dom (cod ?f) = Cod ?f\n\ngoal (1 subgoal):\n 1. Cod f = False \\<Longrightarrow> f = Zero", "by (metis (no_types, lifting) Dom.simps(1))"], ["proof (state)\nthis:\n  Cod f = False \\<Longrightarrow> f = Zero\n\ngoal (1 subgoal):\n 1. seq g f \\<Longrightarrow>\n    arr g \\<and>\n    arr f \\<and>\n    (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)", "moreover"], ["proof (state)\nthis:\n  Cod f = False \\<Longrightarrow> f = Zero\n\ngoal (1 subgoal):\n 1. seq g f \\<Longrightarrow>\n    arr g \\<and>\n    arr f \\<and>\n    (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)", "have \"Cod f = True \\<Longrightarrow> g = One\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cod f = True \\<Longrightarrow> g = One", "using gf 1 arr_char [of f] G.path_def Zero_def One_def dom_char Dom_cod"], ["proof (prove)\nusing this:\n  seq g f\n  arr f \\<and> arr g \\<and> local.dom g = cod f\n  arr f = (f = Zero \\<or> f = One \\<or> f \\<in> fromArr ` Arr)\n  G.path ?x ?y ?p \\<equiv>\n  ?p = [] \\<and> ?x = ?y \\<and> ?x \\<in> {False, True} \\<or>\n  ?p \\<noteq> [] \\<and>\n  ?x = False \\<and>\n  ?y = True \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p \\<longrightarrow>\n      ?p ! n \\<in> Arr) \\<and>\n  (\\<forall>n.\n      0 \\<le> n \\<and> n < length ?p - 1 \\<longrightarrow> True = False)\n  Zero \\<equiv> MkIde False\n  One \\<equiv> MkIde True\n  local.dom ?f = (if arr ?f then if ?f = One then One else Zero else null)\n  arr ?f \\<Longrightarrow> Dom (cod ?f) = Cod ?f\n\ngoal (1 subgoal):\n 1. Cod f = True \\<Longrightarrow> g = One", "by (metis (no_types, lifting) Dom.simps(1))"], ["proof (state)\nthis:\n  Cod f = True \\<Longrightarrow> g = One\n\ngoal (1 subgoal):\n 1. seq g f \\<Longrightarrow>\n    arr g \\<and>\n    arr f \\<and>\n    (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)", "moreover"], ["proof (state)\nthis:\n  Cod f = True \\<Longrightarrow> g = One\n\ngoal (1 subgoal):\n 1. seq g f \\<Longrightarrow>\n    arr g \\<and>\n    arr f \\<and>\n    (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)", "have \"\\<not>(f = MkIde False \\<and> g = MkIde True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (f = MkIde False \\<and> g = MkIde True)", "using 1"], ["proof (prove)\nusing this:\n  arr f \\<and> arr g \\<and> local.dom g = cod f\n\ngoal (1 subgoal):\n 1. \\<not> (f = MkIde False \\<and> g = MkIde True)", "by auto"], ["proof (state)\nthis:\n  \\<not> (f = MkIde False \\<and> g = MkIde True)\n\ngoal (1 subgoal):\n 1. seq g f \\<Longrightarrow>\n    arr g \\<and>\n    arr f \\<and>\n    (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)", "ultimately"], ["proof (chain)\npicking this:\n  Cod f = False \\<Longrightarrow> f = Zero\n  Cod f = True \\<Longrightarrow> g = One\n  \\<not> (f = MkIde False \\<and> g = MkIde True)", "show \"arr g \\<and> arr f \\<and> ((f = Zero \\<and> g \\<noteq> One) \\<or> (f \\<noteq> Zero \\<and> g = One))\""], ["proof (prove)\nusing this:\n  Cod f = False \\<Longrightarrow> f = Zero\n  Cod f = True \\<Longrightarrow> g = One\n  \\<not> (f = MkIde False \\<and> g = MkIde True)\n\ngoal (1 subgoal):\n 1. arr g \\<and>\n    arr f \\<and>\n    (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)", "using gf arr_char One_def Zero_def"], ["proof (prove)\nusing this:\n  Cod f = False \\<Longrightarrow> f = Zero\n  Cod f = True \\<Longrightarrow> g = One\n  \\<not> (f = MkIde False \\<and> g = MkIde True)\n  seq g f\n  arr ?f = (?f = Zero \\<or> ?f = One \\<or> ?f \\<in> fromArr ` Arr)\n  One \\<equiv> MkIde True\n  Zero \\<equiv> MkIde False\n\ngoal (1 subgoal):\n 1. arr g \\<and>\n    arr f \\<and>\n    (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)", "by blast"], ["proof (state)\nthis:\n  arr g \\<and>\n  arr f \\<and>\n  (f = Zero \\<and> g \\<noteq> One \\<or> f \\<noteq> Zero \\<and> g = One)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_ide_fromArr:\n    shows \"\\<not> ide (fromArr x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ide (fromArr x)", "using fromArr_def ide_char ide_def Zero_def One_def"], ["proof (prove)\nusing this:\n  fromArr ?x \\<equiv> if ?x \\<in> Arr then MkArr False True [?x] else null\n  ide ?f = (?f = Zero \\<or> ?f = One)\n  ide ?a \\<equiv>\n  ?a \\<cdot> ?a \\<noteq> null \\<and>\n  (\\<forall>f.\n      (f \\<cdot> ?a \\<noteq> null \\<longrightarrow> f \\<cdot> ?a = f) \\<and>\n      (?a \\<cdot> f \\<noteq> null \\<longrightarrow> ?a \\<cdot> f = f))\n  Zero \\<equiv> MkIde False\n  One \\<equiv> MkIde True\n\ngoal (1 subgoal):\n 1. \\<not> ide (fromArr x)", "by (metis Cod.simps(1) Dom.simps(1))"], ["", "lemma in_hom_char:\n    shows \"\\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> \\<longleftrightarrow> (a = Zero \\<and> b = Zero \\<and> f = Zero) \\<or>\n                            (a = One \\<and> b = One \\<and> f = One) \\<or>\n                            (a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "have \"f = Zero \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = Zero \\<Longrightarrow>\n    \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "using arr_char' [of f] ide_char'"], ["proof (prove)\nusing this:\n  arr f =\n  (f = MkIde False \\<or>\n   f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr)\n  ide ?a = (arr ?a \\<and> (local.dom ?a = ?a \\<or> cod ?a = ?a))\n\ngoal (1 subgoal):\n 1. f = Zero \\<Longrightarrow>\n    \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "by (metis (no_types, lifting) Zero_def category.in_homE category.in_homI\n            cod_MkArr dom_MkArr imageE is_category not_ide_fromArr)"], ["proof (state)\nthis:\n  f = Zero \\<Longrightarrow>\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "moreover"], ["proof (state)\nthis:\n  f = Zero \\<Longrightarrow>\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "have \"f = One \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = One \\<Longrightarrow>\n    \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "using arr_char' [of f] ide_char'"], ["proof (prove)\nusing this:\n  arr f =\n  (f = MkIde False \\<or>\n   f = MkIde True \\<or> f \\<in> (\\<lambda>x. MkArr False True [x]) ` Arr)\n  ide ?a = (arr ?a \\<and> (local.dom ?a = ?a \\<or> cod ?a = ?a))\n\ngoal (1 subgoal):\n 1. f = One \\<Longrightarrow>\n    \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "by (metis (no_types, lifting) One_def category.in_homE category.in_homI\n            cod_MkArr dom_MkArr image_iff is_category not_ide_fromArr)"], ["proof (state)\nthis:\n  f = One \\<Longrightarrow>\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "moreover"], ["proof (state)\nthis:\n  f = One \\<Longrightarrow>\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "have \"f \\<in> fromArr ` Arr \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> fromArr ` Arr \\<Longrightarrow>\n    \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<in> fromArr ` Arr \\<Longrightarrow>\n    \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "assume f: \"f \\<in> fromArr ` Arr\""], ["proof (state)\nthis:\n  f \\<in> fromArr ` Arr\n\ngoal (1 subgoal):\n 1. f \\<in> fromArr ` Arr \\<Longrightarrow>\n    \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "have 1: \"arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f", "using f arr_char"], ["proof (prove)\nusing this:\n  f \\<in> fromArr ` Arr\n  arr ?f = (?f = Zero \\<or> ?f = One \\<or> ?f \\<in> fromArr ` Arr)\n\ngoal (1 subgoal):\n 1. arr f", "by simp"], ["proof (state)\nthis:\n  arr f\n\ngoal (1 subgoal):\n 1. f \\<in> fromArr ` Arr \\<Longrightarrow>\n    \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "moreover"], ["proof (state)\nthis:\n  arr f\n\ngoal (1 subgoal):\n 1. f \\<in> fromArr ` Arr \\<Longrightarrow>\n    \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "have \"dom f = Zero \\<and> cod f = One\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.dom f = Zero \\<and> cod f = One", "using f 1 arr_char dom_char cod_char fromArr_def"], ["proof (prove)\nusing this:\n  f \\<in> fromArr ` Arr\n  arr f\n  arr ?f = (?f = Zero \\<or> ?f = One \\<or> ?f \\<in> fromArr ` Arr)\n  local.dom ?f = (if arr ?f then if ?f = One then One else Zero else null)\n  cod ?f = (if arr ?f then if ?f = Zero then Zero else One else null)\n  fromArr ?x \\<equiv> if ?x \\<in> Arr then MkArr False True [?x] else null\n\ngoal (1 subgoal):\n 1. local.dom f = Zero \\<and> cod f = One", "by (metis (no_types, lifting) ide_char imageE not_ide_fromArr)"], ["proof (state)\nthis:\n  local.dom f = Zero \\<and> cod f = One\n\ngoal (1 subgoal):\n 1. f \\<in> fromArr ` Arr \\<Longrightarrow>\n    \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "ultimately"], ["proof (chain)\npicking this:\n  arr f\n  local.dom f = Zero \\<and> cod f = One", "have \"in_hom f Zero One\""], ["proof (prove)\nusing this:\n  arr f\n  local.dom f = Zero \\<and> cod f = One\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : Zero \\<rightarrow> One\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>f : Zero \\<rightarrow> One\\<guillemotright>\n\ngoal (1 subgoal):\n 1. f \\<in> fromArr ` Arr \\<Longrightarrow>\n    \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "thus \"in_hom f a b \\<longleftrightarrow> (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n                                           a = One \\<and> b = One \\<and> f = One \\<or>\n                                           a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\""], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : Zero \\<rightarrow> One\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "using f ide_char"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : Zero \\<rightarrow> One\\<guillemotright>\n  f \\<in> fromArr ` Arr\n  ide ?f = (?f = Zero \\<or> ?f = One)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f \\<in> fromArr ` Arr \\<Longrightarrow>\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "ultimately"], ["proof (chain)\npicking this:\n  f = Zero \\<Longrightarrow>\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\n  f = One \\<Longrightarrow>\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\n  f \\<in> fromArr ` Arr \\<Longrightarrow>\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "show ?thesis"], ["proof (prove)\nusing this:\n  f = Zero \\<Longrightarrow>\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\n  f = One \\<Longrightarrow>\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\n  f \\<in> fromArr ` Arr \\<Longrightarrow>\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "using arr_char [of f]"], ["proof (prove)\nusing this:\n  f = Zero \\<Longrightarrow>\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\n  f = One \\<Longrightarrow>\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\n  f \\<in> fromArr ` Arr \\<Longrightarrow>\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\n  arr f = (f = Zero \\<or> f = One \\<or> f \\<in> fromArr ` Arr)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n    (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n     a = One \\<and> b = One \\<and> f = One \\<or>\n     a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)", "by fast"], ["proof (state)\nthis:\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> =\n  (a = Zero \\<and> b = Zero \\<and> f = Zero \\<or>\n   a = One \\<and> b = One \\<and> f = One \\<or>\n   a = Zero \\<and> b = One \\<and> f \\<in> fromArr ` Arr)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Zero_not_eq_One [simp]:\n    shows \"Zero \\<noteq> One\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zero \\<noteq> One", "by (simp add: One_def Zero_def)"], ["", "lemma Zero_not_eq_fromArr [simp]:\n    shows \"Zero \\<notin> fromArr ` Arr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zero \\<notin> fromArr ` Arr", "using ide_char not_ide_fromArr"], ["proof (prove)\nusing this:\n  ide ?f = (?f = Zero \\<or> ?f = One)\n  \\<not> ide (fromArr ?x)\n\ngoal (1 subgoal):\n 1. Zero \\<notin> fromArr ` Arr", "by (metis (no_types, lifting) image_iff)"], ["", "lemma One_not_eq_fromArr [simp]:\n    shows \"One \\<notin> fromArr ` Arr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. One \\<notin> fromArr ` Arr", "using ide_char not_ide_fromArr"], ["proof (prove)\nusing this:\n  ide ?f = (?f = Zero \\<or> ?f = One)\n  \\<not> ide (fromArr ?x)\n\ngoal (1 subgoal):\n 1. One \\<notin> fromArr ` Arr", "by (metis (no_types, lifting) image_iff)"], ["", "lemma comp_char:\n    shows \"g \\<cdot> f = (if seq g f then\n                      if f = Zero then g else if g = One then f else null\n                    else null)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<cdot> f =\n    (if seq g f then if f = Zero then g else if g = One then f else null\n     else null)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<cdot> f =\n    (if seq g f then if f = Zero then g else if g = One then f else null\n     else null)", "have \"seq g f \\<Longrightarrow> f = Zero \\<Longrightarrow> g \\<cdot> f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>seq g f; f = Zero\\<rbrakk> \\<Longrightarrow> g \\<cdot> f = g", "using seq_char comp_char [of g f] Zero_def dom_char cod_char comp_arr_dom"], ["proof (prove)\nusing this:\n  seq ?g ?f =\n  (arr ?g \\<and>\n   arr ?f \\<and>\n   (?f = Zero \\<and> ?g \\<noteq> One \\<or>\n    ?f \\<noteq> Zero \\<and> ?g = One))\n  g \\<cdot> f =\n  (if seq g f then MkArr (Dom f) (Cod g) (Map f @ Map g) else null)\n  Zero \\<equiv> MkIde False\n  local.dom ?f = (if arr ?f then if ?f = One then One else Zero else null)\n  cod ?f = (if arr ?f then if ?f = Zero then Zero else One else null)\n  \\<lbrakk>arr ?f; local.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot> ?a = ?f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>seq g f; f = Zero\\<rbrakk> \\<Longrightarrow> g \\<cdot> f = g", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>seq g f; f = Zero\\<rbrakk> \\<Longrightarrow> g \\<cdot> f = g\n\ngoal (1 subgoal):\n 1. g \\<cdot> f =\n    (if seq g f then if f = Zero then g else if g = One then f else null\n     else null)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>seq g f; f = Zero\\<rbrakk> \\<Longrightarrow> g \\<cdot> f = g\n\ngoal (1 subgoal):\n 1. g \\<cdot> f =\n    (if seq g f then if f = Zero then g else if g = One then f else null\n     else null)", "have \"seq g f \\<Longrightarrow> g = One \\<Longrightarrow> g \\<cdot> f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>seq g f; g = One\\<rbrakk> \\<Longrightarrow> g \\<cdot> f = f", "using seq_char comp_char [of g f] One_def dom_char cod_char comp_cod_arr"], ["proof (prove)\nusing this:\n  seq ?g ?f =\n  (arr ?g \\<and>\n   arr ?f \\<and>\n   (?f = Zero \\<and> ?g \\<noteq> One \\<or>\n    ?f \\<noteq> Zero \\<and> ?g = One))\n  g \\<cdot> f =\n  (if seq g f then MkArr (Dom f) (Cod g) (Map f @ Map g) else null)\n  One \\<equiv> MkIde True\n  local.dom ?f = (if arr ?f then if ?f = One then One else Zero else null)\n  cod ?f = (if arr ?f then if ?f = Zero then Zero else One else null)\n  \\<lbrakk>arr ?f; cod ?f = ?b\\<rbrakk> \\<Longrightarrow> ?b \\<cdot> ?f = ?f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>seq g f; g = One\\<rbrakk> \\<Longrightarrow> g \\<cdot> f = f", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>seq g f; g = One\\<rbrakk> \\<Longrightarrow> g \\<cdot> f = f\n\ngoal (1 subgoal):\n 1. g \\<cdot> f =\n    (if seq g f then if f = Zero then g else if g = One then f else null\n     else null)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>seq g f; g = One\\<rbrakk> \\<Longrightarrow> g \\<cdot> f = f\n\ngoal (1 subgoal):\n 1. g \\<cdot> f =\n    (if seq g f then if f = Zero then g else if g = One then f else null\n     else null)", "have \"seq g f \\<Longrightarrow> f \\<noteq> Zero \\<Longrightarrow> g \\<noteq> One \\<Longrightarrow> g \\<cdot> f = null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>seq g f; f \\<noteq> Zero; g \\<noteq> One\\<rbrakk>\n    \\<Longrightarrow> g \\<cdot> f = null", "using seq_char Zero_def One_def"], ["proof (prove)\nusing this:\n  seq ?g ?f =\n  (arr ?g \\<and>\n   arr ?f \\<and>\n   (?f = Zero \\<and> ?g \\<noteq> One \\<or>\n    ?f \\<noteq> Zero \\<and> ?g = One))\n  Zero \\<equiv> MkIde False\n  One \\<equiv> MkIde True\n\ngoal (1 subgoal):\n 1. \\<lbrakk>seq g f; f \\<noteq> Zero; g \\<noteq> One\\<rbrakk>\n    \\<Longrightarrow> g \\<cdot> f = null", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>seq g f; f \\<noteq> Zero; g \\<noteq> One\\<rbrakk>\n  \\<Longrightarrow> g \\<cdot> f = null\n\ngoal (1 subgoal):\n 1. g \\<cdot> f =\n    (if seq g f then if f = Zero then g else if g = One then f else null\n     else null)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>seq g f; f \\<noteq> Zero; g \\<noteq> One\\<rbrakk>\n  \\<Longrightarrow> g \\<cdot> f = null\n\ngoal (1 subgoal):\n 1. g \\<cdot> f =\n    (if seq g f then if f = Zero then g else if g = One then f else null\n     else null)", "have \"\\<not>seq g f \\<Longrightarrow> g \\<cdot> f = null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> seq g f \\<Longrightarrow> g \\<cdot> f = null", "using comp_char ext"], ["proof (prove)\nusing this:\n  ?g \\<cdot> ?f =\n  (if seq ?g ?f then MkArr (Dom ?f) (Cod ?g) (Map ?f @ Map ?g) else null)\n  ?g \\<cdot> ?f \\<noteq> null \\<Longrightarrow> seq ?g ?f\n\ngoal (1 subgoal):\n 1. \\<not> seq g f \\<Longrightarrow> g \\<cdot> f = null", "by fastforce"], ["proof (state)\nthis:\n  \\<not> seq g f \\<Longrightarrow> g \\<cdot> f = null\n\ngoal (1 subgoal):\n 1. g \\<cdot> f =\n    (if seq g f then if f = Zero then g else if g = One then f else null\n     else null)", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>seq g f; f = Zero\\<rbrakk> \\<Longrightarrow> g \\<cdot> f = g\n  \\<lbrakk>seq g f; g = One\\<rbrakk> \\<Longrightarrow> g \\<cdot> f = f\n  \\<lbrakk>seq g f; f \\<noteq> Zero; g \\<noteq> One\\<rbrakk>\n  \\<Longrightarrow> g \\<cdot> f = null\n  \\<not> seq g f \\<Longrightarrow> g \\<cdot> f = null", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>seq g f; f = Zero\\<rbrakk> \\<Longrightarrow> g \\<cdot> f = g\n  \\<lbrakk>seq g f; g = One\\<rbrakk> \\<Longrightarrow> g \\<cdot> f = f\n  \\<lbrakk>seq g f; f \\<noteq> Zero; g \\<noteq> One\\<rbrakk>\n  \\<Longrightarrow> g \\<cdot> f = null\n  \\<not> seq g f \\<Longrightarrow> g \\<cdot> f = null\n\ngoal (1 subgoal):\n 1. g \\<cdot> f =\n    (if seq g f then if f = Zero then g else if g = One then f else null\n     else null)", "by argo"], ["proof (state)\nthis:\n  g \\<cdot> f =\n  (if seq g f then if f = Zero then g else if g = One then f else null\n   else null)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma comp_simp [simp]:\n    assumes \"seq g f\"\n    shows \"f = Zero \\<Longrightarrow> g \\<cdot> f = g\"\n    and \"g = One \\<Longrightarrow> g \\<cdot> f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f = Zero \\<Longrightarrow> g \\<cdot> f = g) &&&\n    (g = One \\<Longrightarrow> g \\<cdot> f = f)", "using assms seq_char comp_char"], ["proof (prove)\nusing this:\n  seq g f\n  seq ?g ?f =\n  (arr ?g \\<and>\n   arr ?f \\<and>\n   (?f = Zero \\<and> ?g \\<noteq> One \\<or>\n    ?f \\<noteq> Zero \\<and> ?g = One))\n  ?g \\<cdot> ?f =\n  (if seq ?g ?f then if ?f = Zero then ?g else if ?g = One then ?f else null\n   else null)\n\ngoal (1 subgoal):\n 1. (f = Zero \\<Longrightarrow> g \\<cdot> f = g) &&&\n    (g = One \\<Longrightarrow> g \\<cdot> f = f)", "by metis+"], ["", "lemma arr_fromArr:\n    assumes \"x \\<in> Arr\"\n    shows \"arr (fromArr x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr (fromArr x)", "using assms fromArr_def arr_char image_eqI"], ["proof (prove)\nusing this:\n  x \\<in> Arr\n  fromArr ?x \\<equiv> if ?x \\<in> Arr then MkArr False True [?x] else null\n  arr ?f = (?f = Zero \\<or> ?f = One \\<or> ?f \\<in> fromArr ` Arr)\n  \\<lbrakk>?b = ?f ?x; ?x \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?b \\<in> ?f ` ?A\n\ngoal (1 subgoal):\n 1. arr (fromArr x)", "by simp"], ["", "lemma toArr_in_Arr:\n    assumes \"arr f\" and \"\\<not>ide f\"\n    shows \"toArr f \\<in> Arr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toArr f \\<in> Arr", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. toArr f \\<in> Arr", "have \"\\<And>a. a \\<in> Arr \\<Longrightarrow> Path (fromArr a) = [a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> Arr \\<Longrightarrow> Map (fromArr a) = [a]", "using fromArr_def arr_char"], ["proof (prove)\nusing this:\n  fromArr ?x \\<equiv> if ?x \\<in> Arr then MkArr False True [?x] else null\n  arr ?f = (?f = Zero \\<or> ?f = One \\<or> ?f \\<in> fromArr ` Arr)\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> Arr \\<Longrightarrow> Map (fromArr a) = [a]", "by simp"], ["proof (state)\nthis:\n  ?a \\<in> Arr \\<Longrightarrow> Map (fromArr ?a) = [?a]\n\ngoal (1 subgoal):\n 1. toArr f \\<in> Arr", "hence \"hd (Path f) \\<in> Arr\""], ["proof (prove)\nusing this:\n  ?a \\<in> Arr \\<Longrightarrow> Map (fromArr ?a) = [?a]\n\ngoal (1 subgoal):\n 1. hd (Map f) \\<in> Arr", "using assms arr_char ide_char"], ["proof (prove)\nusing this:\n  ?a \\<in> Arr \\<Longrightarrow> Map (fromArr ?a) = [?a]\n  arr f\n  \\<not> ide f\n  arr ?f = (?f = Zero \\<or> ?f = One \\<or> ?f \\<in> fromArr ` Arr)\n  ide ?f = (?f = Zero \\<or> ?f = One)\n\ngoal (1 subgoal):\n 1. hd (Map f) \\<in> Arr", "by auto"], ["proof (state)\nthis:\n  hd (Map f) \\<in> Arr\n\ngoal (1 subgoal):\n 1. toArr f \\<in> Arr", "thus ?thesis"], ["proof (prove)\nusing this:\n  hd (Map f) \\<in> Arr\n\ngoal (1 subgoal):\n 1. toArr f \\<in> Arr", "by (simp add: toArr_def)"], ["proof (state)\nthis:\n  toArr f \\<in> Arr\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma toArr_fromArr [simp]:\n    assumes \"x \\<in> Arr\"\n    shows \"toArr (fromArr x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. toArr (fromArr x) = x", "using assms fromArr_def toArr_def"], ["proof (prove)\nusing this:\n  x \\<in> Arr\n  fromArr ?x \\<equiv> if ?x \\<in> Arr then MkArr False True [?x] else null\n  toArr ?f \\<equiv> hd (Map ?f)\n\ngoal (1 subgoal):\n 1. toArr (fromArr x) = x", "by (simp add: toArr_def)"], ["", "lemma fromArr_toArr [simp]:\n    assumes \"arr f\" and \"\\<not>ide f\"\n    shows \"fromArr (toArr f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fromArr (toArr f) = f", "using assms fromArr_def toArr_def arr_char ide_char toArr_fromArr"], ["proof (prove)\nusing this:\n  arr f\n  \\<not> ide f\n  fromArr ?x \\<equiv> if ?x \\<in> Arr then MkArr False True [?x] else null\n  toArr ?f \\<equiv> hd (Map ?f)\n  arr ?f = (?f = Zero \\<or> ?f = One \\<or> ?f \\<in> fromArr ` Arr)\n  ide ?f = (?f = Zero \\<or> ?f = One)\n  ?x \\<in> Arr \\<Longrightarrow> toArr (fromArr ?x) = ?x\n\ngoal (1 subgoal):\n 1. fromArr (toArr f) = f", "by auto"], ["", "end"], ["", "section \"Parallel Pairs\""], ["", "text\\<open>\n    A parallel pair is a quiver with two non-identity arrows.\n    It is important in the definition of equalizers.\n\\<close>"], ["", "locale parallel_pair =\n    quiver \"{False, True} :: bool set\"\n  begin"], ["", "typedef arr = \"UNIV :: bool quiver.arr set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> UNIV", ".."], ["", "definition j0\n    where \"j0 \\<equiv> fromArr False\""], ["", "definition j1\n    where \"j1 \\<equiv> fromArr True\""], ["", "lemma arr_char:\n    shows \"arr f \\<longleftrightarrow> f = Zero \\<or> f = One \\<or> f = j0 \\<or> f = j1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f = (f = Zero \\<or> f = One \\<or> f = j0 \\<or> f = j1)", "using arr_char j0_def j1_def"], ["proof (prove)\nusing this:\n  arr ?f = (?f = Zero \\<or> ?f = One \\<or> ?f \\<in> fromArr ` {False, True})\n  j0 \\<equiv> fromArr False\n  j1 \\<equiv> fromArr True\n\ngoal (1 subgoal):\n 1. arr f = (f = Zero \\<or> f = One \\<or> f = j0 \\<or> f = j1)", "by simp"], ["", "lemma dom_char:\n    shows \"dom f = (if f = j0 \\<or> f = j1 then Zero else if arr f then f else null)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.dom f =\n    (if f = j0 \\<or> f = j1 then Zero else if arr f then f else null)", "using arr_char dom_char j0_def j1_def"], ["proof (prove)\nusing this:\n  arr ?f = (?f = Zero \\<or> ?f = One \\<or> ?f = j0 \\<or> ?f = j1)\n  local.dom ?f = (if arr ?f then if ?f = One then One else Zero else null)\n  j0 \\<equiv> fromArr False\n  j1 \\<equiv> fromArr True\n\ngoal (1 subgoal):\n 1. local.dom f =\n    (if f = j0 \\<or> f = j1 then Zero else if arr f then f else null)", "by (metis ide_char not_ide_fromArr)"], ["", "lemma cod_char:\n    shows \"cod f = (if f = j0 \\<or> f = j1 then One else if arr f then f else null)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod f = (if f = j0 \\<or> f = j1 then One else if arr f then f else null)", "using arr_char cod_char j0_def j1_def"], ["proof (prove)\nusing this:\n  arr ?f = (?f = Zero \\<or> ?f = One \\<or> ?f = j0 \\<or> ?f = j1)\n  cod ?f = (if arr ?f then if ?f = Zero then Zero else One else null)\n  j0 \\<equiv> fromArr False\n  j1 \\<equiv> fromArr True\n\ngoal (1 subgoal):\n 1. cod f = (if f = j0 \\<or> f = j1 then One else if arr f then f else null)", "by (metis ide_char not_ide_fromArr)"], ["", "lemma j0_not_eq_j1 [simp]:\n    shows \"j0 \\<noteq> j1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j0 \\<noteq> j1", "using j0_def j1_def"], ["proof (prove)\nusing this:\n  j0 \\<equiv> fromArr False\n  j1 \\<equiv> fromArr True\n\ngoal (1 subgoal):\n 1. j0 \\<noteq> j1", "by (metis insert_iff toArr_fromArr)"], ["", "lemma Zero_not_eq_j0 [simp]:\n    shows \"Zero \\<noteq> j0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zero \\<noteq> j0", "using Zero_def j0_def Zero_not_eq_fromArr"], ["proof (prove)\nusing this:\n  Zero \\<equiv> MkIde False\n  j0 \\<equiv> fromArr False\n  Zero \\<notin> fromArr ` {False, True}\n\ngoal (1 subgoal):\n 1. Zero \\<noteq> j0", "by auto"], ["", "lemma Zero_not_eq_j1 [simp]:\n    shows \"Zero \\<noteq> j1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zero \\<noteq> j1", "using Zero_def j1_def Zero_not_eq_fromArr"], ["proof (prove)\nusing this:\n  Zero \\<equiv> MkIde False\n  j1 \\<equiv> fromArr True\n  Zero \\<notin> fromArr ` {False, True}\n\ngoal (1 subgoal):\n 1. Zero \\<noteq> j1", "by auto"], ["", "lemma One_not_eq_j0 [simp]:\n    shows \"One \\<noteq> j0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. One \\<noteq> j0", "using One_def j0_def One_not_eq_fromArr"], ["proof (prove)\nusing this:\n  One \\<equiv> MkIde True\n  j0 \\<equiv> fromArr False\n  One \\<notin> fromArr ` {False, True}\n\ngoal (1 subgoal):\n 1. One \\<noteq> j0", "by auto"], ["", "lemma One_not_eq_j1 [simp]:\n    shows \"One \\<noteq> j1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. One \\<noteq> j1", "using One_def j1_def One_not_eq_fromArr"], ["proof (prove)\nusing this:\n  One \\<equiv> MkIde True\n  j1 \\<equiv> fromArr True\n  One \\<notin> fromArr ` {False, True}\n\ngoal (1 subgoal):\n 1. One \\<noteq> j1", "by auto"], ["", "lemma dom_simp [simp]:\n    shows \"dom Zero = Zero\"\n    and \"dom One = One\"\n    and \"dom j0 = Zero\"\n    and \"dom j1 = Zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (local.dom Zero = Zero &&& local.dom One = One) &&&\n    local.dom j0 = Zero &&& local.dom j1 = Zero", "using dom_char arr_char"], ["proof (prove)\nusing this:\n  local.dom ?f =\n  (if ?f = j0 \\<or> ?f = j1 then Zero else if arr ?f then ?f else null)\n  arr ?f = (?f = Zero \\<or> ?f = One \\<or> ?f = j0 \\<or> ?f = j1)\n\ngoal (1 subgoal):\n 1. (local.dom Zero = Zero &&& local.dom One = One) &&&\n    local.dom j0 = Zero &&& local.dom j1 = Zero", "by auto"], ["", "lemma cod_simp [simp]:\n    shows \"cod Zero = Zero\"\n    and \"cod One = One\"\n    and \"cod j0 = One\"\n    and \"cod j1 = One\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cod Zero = Zero &&& cod One = One) &&& cod j0 = One &&& cod j1 = One", "using cod_char arr_char"], ["proof (prove)\nusing this:\n  cod ?f =\n  (if ?f = j0 \\<or> ?f = j1 then One else if arr ?f then ?f else null)\n  arr ?f = (?f = Zero \\<or> ?f = One \\<or> ?f = j0 \\<or> ?f = j1)\n\ngoal (1 subgoal):\n 1. (cod Zero = Zero &&& cod One = One) &&& cod j0 = One &&& cod j1 = One", "by auto"], ["", "end"], ["", "end"]]}