{"file_name": "/home/qj213/afp-2021-10-22/thys/Category3/Adjunction.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Category3", "problem_names": ["lemma the_coext_prop:\n    assumes \"arrow_from_functor D C F x' y f\"\n    shows \"\\<guillemotleft>the_coext x' f : x' \\<rightarrow>\\<^sub>D x\\<guillemotright>\" and \"f = e \\<cdot>\\<^sub>C F (the_coext x' f)\"", "lemma the_coext_unique:\n    assumes \"arrow_from_functor D C F x' y f\" and \"is_coext x' f g\"\n    shows \"g = the_coext x' f\"", "lemma the_ext_prop:\n    assumes \"arrow_to_functor C D G x y' g\"\n    shows \"\\<guillemotleft>the_ext y' g : y \\<rightarrow>\\<^sub>C y'\\<guillemotright>\" and \"g = G (the_ext y' g) \\<cdot>\\<^sub>D e\"", "lemma the_ext_unique:\n    assumes \"arrow_to_functor C D G x y' g\" and \"is_ext y' g f\"\n    shows \"f = the_ext y' g\"", "lemma \\<psi>_naturality:\n    assumes f: \"\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\" and g: \"\\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\" and h: \"\\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g = \\<psi> x' (G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g)\"", "lemma respects_natural_isomorphism:\n    assumes \"natural_isomorphism D C F' F \\<tau>\" and \"natural_isomorphism C D G G' \\<mu>\"\n    shows \"meta_adjunction C D F' G'\n             (\\<lambda>y f. \\<mu> (C.cod f) \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C inverse_transformation.map D C F \\<tau> y))\n             (\\<lambda>x g. \\<psi> x ((inverse_transformation.map C D G' \\<mu> x) \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C \\<tau> (D.dom g))\"", "lemma unit_determines_counit:\n  assumes \"unit_counit_adjunction C D F G \\<eta> \\<epsilon>\"\n  and \"unit_counit_adjunction C D F G \\<eta> \\<epsilon>'\"\n  shows \"\\<epsilon> = \\<epsilon>'\"", "lemma counit_determines_unit:\n  assumes \"unit_counit_adjunction C D F G \\<eta> \\<epsilon>\"\n  and \"unit_counit_adjunction C D F G \\<eta>' \\<epsilon>\"\n  shows \"\\<eta> = \\<eta>'\"", "lemma \\<eta>o_in_hom:\n    assumes \"D.ide y\"\n    shows \"\\<guillemotleft>\\<eta>o y : y \\<rightarrow>\\<^sub>D G (F y)\\<guillemotright>\"", "lemma \\<phi>_in_terms_of_\\<eta>o:\n    assumes \"D.ide y\" and \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<phi> y f = G f \\<cdot>\\<^sub>D \\<eta>o y\"", "lemma \\<phi>_F_char:\n    assumes \"\\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\"\n    shows \"\\<phi> y' (F g) = \\<eta>o y \\<cdot>\\<^sub>D g\"", "lemma \\<eta>_map_simp:\n    assumes \"D.ide y\"\n    shows \"\\<eta>.map y = \\<phi> y (F y)\"", "lemma \\<epsilon>o_in_hom:\n    assumes \"C.ide x\"\n    shows \"\\<guillemotleft>\\<epsilon>o x : F (G x) \\<rightarrow>\\<^sub>C x\\<guillemotright>\"", "lemma \\<psi>_in_terms_of_\\<epsilon>o:\n    assumes \"C.ide x\" and \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<psi> x g = \\<epsilon>o x \\<cdot>\\<^sub>C F g\"", "lemma \\<psi>_G_char:\n    assumes \"\\<guillemotleft>f: x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\"\n    shows \"\\<psi> x' (G f) = f \\<cdot>\\<^sub>C \\<epsilon>o x\"", "lemma \\<epsilon>_map_simp:\n    assumes \"C.ide x\"\n    shows \"\\<epsilon>.map x = \\<psi> x (G x)\"", "lemma unit_counit_F:\n    assumes \"D.ide y\"\n    shows \"F y = \\<epsilon>o (F y) \\<cdot>\\<^sub>C F (\\<eta>o y)\"", "lemma unit_counit_G:\n    assumes \"C.ide x\"\n    shows \"G x = G (\\<epsilon>o x) \\<cdot>\\<^sub>D \\<eta>o (G x)\"", "lemma induces_unit_counit_adjunction':\n    shows \"unit_counit_adjunction C D F G \\<eta>.map \\<epsilon>.map\"", "theorem induces_unit_counit_adjunction:\n    shows \"unit_counit_adjunction C D F G \\<eta> \\<epsilon>\"", "lemma \\<eta>_is_natural_transformation:\n    shows \"natural_transformation D D D.map GF.map \\<eta>\"", "lemma \\<epsilon>_is_natural_transformation:\n    shows \"natural_transformation C C FG.map C.map \\<epsilon>\"", "lemma \\<phi>_in_terms_of_\\<eta>:\n    assumes \"D.ide y\" and \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<phi> y f = G f \\<cdot>\\<^sub>D \\<eta> y\"", "lemma \\<psi>_in_terms_of_\\<epsilon>:\n    assumes \"C.ide x\" and \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<psi> x g = \\<epsilon> x \\<cdot>\\<^sub>C F g\"", "lemma has_terminal_arrows_from_functor:\n    assumes x: \"C.ide x\"\n    shows \"terminal_arrow_from_functor D C F (G x) x (\\<epsilon> x)\"\n    and \"\\<And>y' f. arrow_from_functor D C F y' x f\n                   \\<Longrightarrow> terminal_arrow_from_functor.the_coext D C F (G x) (\\<epsilon> x) y' f = \\<phi> y' f\"", "lemma has_left_adjoint_functor:\n    shows \"left_adjoint_functor D C F\"", "lemma has_initial_arrows_to_functor:\n    assumes y: \"D.ide y\"\n    shows \"initial_arrow_to_functor C D G y (F y) (\\<eta> y)\"\n    and \"\\<And>x' g. arrow_to_functor C D G y x' g \\<Longrightarrow>\n                  initial_arrow_to_functor.the_ext C D G (F y) (\\<eta> y) x' g = \\<psi> x' g\"", "lemma has_right_adjoint_functor:\n    shows \"right_adjoint_functor C D G\"", "theorem induces_meta_adjunction:\n    shows \"meta_adjunction C D F G \\<phi> \\<psi>\"", "lemma \\<eta>_in_terms_of_\\<phi>:\n    assumes \"D.ide y\"\n    shows \"\\<eta> y = \\<phi> y (F y)\"", "lemma \\<epsilon>_in_terms_of_\\<psi>:\n    assumes \"C.ide x\"\n    shows \"\\<epsilon> x = \\<psi> x (G x)\"", "lemma Go_\\<epsilon>o_terminal:\n    assumes \"\\<exists>b e. terminal_arrow_from_functor D C F b a e\"\n    shows \"terminal_arrow_from_functor D C F (Go a) a (\\<epsilon>o a)\"", "lemma G_ide:\n    assumes \"C.ide x\"\n    shows \"G x = Go x\"", "lemma G_is_functor:\n    shows \"functor C D G\"", "lemma G_simp:\n    assumes \"C.arr f\"\n    shows \"G f = terminal_arrow_from_functor.the_coext D C F (Go (C.cod f)) (\\<epsilon>o (C.cod f))\n                                                             (Go (C.dom f)) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\"", "lemma \\<psi>_in_hom:\n    assumes \"C.ide x\" and \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<guillemotleft>\\<psi> x g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"", "lemma \\<psi>_natural:\n    assumes f: \"\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\" and g: \"\\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\" and h: \"\\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g = \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)\"", "lemma \\<psi>_inverts_coext:\n    assumes x: \"C.ide x\" and g: \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"arrow_from_functor.is_coext D C F (G x) (\\<epsilon>.map x) y (\\<psi> x g) g\"", "lemma \\<psi>_invertible:\n    assumes y: \"D.ide y\" and f: \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<exists>!g. \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and> \\<psi> x g = f\"", "lemma \\<phi>_in_hom:\n    assumes \"D.ide y\" and \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<guillemotleft>\\<phi> y f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"", "lemma \\<phi>_\\<psi>:\n    assumes \"C.ide x\" and \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<phi> y (\\<psi> x g) = g\"", "lemma \\<psi>_\\<phi>:\n    assumes \"D.ide y\" and \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<psi> x (\\<phi> y f) = f\"", "lemma \\<phi>_natural:\n    assumes \"\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\" and \"\\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\" and \"\\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) = (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g\"", "theorem induces_meta_adjunction:\n    shows \"meta_adjunction C D F G \\<phi> \\<psi>\"", "lemma Fo_\\<eta>o_initial:\n    assumes \"\\<exists>x u. initial_arrow_to_functor C D G y x u\"\n    shows \"initial_arrow_to_functor C D G y (Fo y) (\\<eta>o y)\"", "lemma F_ide:\n    assumes \"D.ide y\"\n    shows \"F y = Fo y\"", "lemma F_is_functor:\n    shows \"functor D C F\"", "lemma F_simp:\n    assumes \"D.arr g\"\n    shows \"F g = initial_arrow_to_functor.the_ext C D G (Fo (D.dom g)) (\\<eta>o (D.dom g))\n                                                        (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\"", "lemma \\<phi>_in_hom:\n    assumes y: \"D.ide y\" and f: \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<guillemotleft>\\<phi> y f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"", "lemma \\<phi>_natural:\n    assumes f: \"\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\" and g: \"\\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\" and h: \"\\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) = (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g\"", "lemma \\<phi>_inverts_ext:\n    assumes y: \"D.ide y\" and f: \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"arrow_to_functor.is_ext C D G (F y) (\\<eta>.map y) x (\\<phi> y f) f\"", "lemma \\<phi>_invertible:\n    assumes x: \"C.ide x\" and g: \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<exists>!f. \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and> \\<phi> y f = g\"", "lemma \\<psi>_in_hom:\n    assumes \"C.ide x\" and \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"C.in_hom (\\<psi> x g) (F y) x\"", "lemma \\<psi>_\\<phi>:\n    assumes \"D.ide y\" and \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<psi> x (\\<phi> y f) = f\"", "lemma \\<phi>_\\<psi>:\n    assumes \"C.ide x\" and \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<phi> y (\\<psi> x g) = g\"", "theorem induces_meta_adjunction:\n    shows \"meta_adjunction C D F G \\<phi> \\<psi>\"", "lemma inC_\\<psi> [simp]:\n    assumes \"C.ide b\" and \"C.ide a\" and \"x \\<in> inC ` C.hom b a\"\n    shows \"inC (HomC.\\<psi> (b, a) x) = x\"", "lemma \\<psi>_inC [simp]:\n    assumes \"C.arr f\"\n    shows \"HomC.\\<psi> (C.dom f, C.cod f) (inC f) = f\"", "lemma inD_\\<psi> [simp]:\n    assumes \"D.ide b\" and \"D.ide a\" and \"x \\<in> inD ` D.hom b a\"\n    shows \"inD (HomD.\\<psi> (b, a) x) = x\"", "lemma \\<psi>_inD [simp]:\n    assumes \"D.arr f\"\n    shows \"HomD.\\<psi> (D.dom f, D.cod f) (inD f) = f\"", "lemma Hom_FopxC_simp:\n    assumes \"DopxC.arr gf\"\n    shows \"Hom_FopxC.map gf =\n              S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n                      (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n                      (inC \\<circ> (\\<lambda>h. snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf))\n                           \\<circ> HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))\"", "lemma Hom_DopxG_simp:\n    assumes \"DopxC.arr gf\"\n    shows \"Hom_DopxG.map gf =\n              S.mkArr (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n                      (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n                      (inD \\<circ> (\\<lambda>h. G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf)\n                           \\<circ> HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))))\"", "lemma \\<Phi>o_in_hom:\n    assumes yx: \"DopxC.ide yx\"\n    shows \"\\<guillemotleft>\\<Phi>o yx : Hom_FopxC.map yx \\<rightarrow>\\<^sub>S Hom_DopxG.map yx\\<guillemotright>\"", "lemma \\<Phi>_simp:\n    assumes YX: \"DopxC.ide yx\"\n    shows \"\\<Phi>.map yx =\n           S.mkArr (HomC.set (F (fst yx), snd yx)) (HomD.set (fst yx, G (snd yx)))\n                   (inD o \\<phi> (fst yx) o HomC.\\<psi> (F (fst yx), snd yx))\"", "lemma \\<Psi>o_in_hom:\n    assumes yx: \"DopxC.ide yx\"\n    shows \"\\<guillemotleft>\\<Psi>o yx : Hom_DopxG.map yx \\<rightarrow>\\<^sub>S Hom_FopxC.map yx\\<guillemotright>\"", "lemma \\<Phi>_inv:\n    assumes yx: \"DopxC.ide yx\"\n    shows \"S.inverse_arrows (\\<Phi>.map yx) (\\<Psi>o yx)\"", "theorem induces_hom_adjunction: \"hom_adjunction C D S.comp \\<phi>C \\<phi>D F G \\<Phi> \\<Psi>\"", "lemma \\<Psi>_simp:\n    assumes yx: \"DopxC.ide yx\"\n    shows \"\\<Psi> yx = S.mkArr (HomD.set (fst yx, G (snd yx))) (HomC.set (F (fst yx), snd yx))\n                          (inC o \\<psi> (snd yx) o HomD.\\<psi> (fst yx, G (snd yx)))\"", "lemma \\<phi>_in_terms_of_\\<Phi>':\n    assumes y: \"D.ide y\" and f: \"\\<guillemotleft>f: F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<phi> y f = (HomD.\\<psi> (y, G x) o \\<Phi>.FUN (y, x) o inC) f\"", "lemma \\<psi>_in_terms_of_\\<Psi>':\n    assumes x: \"C.ide x\" and g: \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<psi> x g = (HomC.\\<psi> (F y, x) o \\<Psi>.FUN (y, x) o inD) g\"", "lemma Hom_FopxC_map_simp:\n    assumes \"DopxC.arr gf\"\n    shows \"Hom_FopxC.map gf =\n              S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n                      (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))            \n                      (\\<phi>C (F (D.dom (fst gf)), C.cod (snd gf))\n                           o (\\<lambda>h. snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf))\n                           o HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))\"", "lemma Hom_DopxG_map_simp:\n    assumes \"DopxC.arr gf\"\n    shows \"Hom_DopxG.map gf =\n              S.mkArr (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n                      (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))           \n                      (\\<phi>D (D.dom (fst gf), G (C.cod (snd gf)))\n                           o (\\<lambda>h. G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf)\n                           o HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))))\"", "lemma \\<Phi>_Fun_mapsto:\n    assumes \"D.ide y\" and \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<Phi>.FUN (y, x) \\<in> HomC.set (F y, x) \\<rightarrow> HomD.set (y, G x)\"", "lemma \\<phi>_mapsto:\n    assumes y: \"D.ide y\"\n    shows \"\\<phi> y \\<in> C.hom (F y) x \\<rightarrow> D.hom y (G x)\"", "lemma \\<Phi>_simp:\n    assumes \"D.ide y\" and \"C.ide x\"\n    shows \"S.arr (\\<Phi> (y, x))\"\n    and \"\\<Phi> (y, x) = S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                            (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))\"", "lemma \\<Psi>_Fun_mapsto:\n    assumes \"C.ide x\" and \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<Psi>.FUN (y, x) \\<in> HomD.set (y, G x) \\<rightarrow> HomC.set (F y, x)\"", "lemma \\<psi>_mapsto:\n    assumes x: \"C.ide x\"\n    shows \"\\<psi> x \\<in> D.hom y (G x) \\<rightarrow> C.hom (F y) x\"", "lemma \\<Psi>_simp:\n    assumes \"D.ide y\" and \"C.ide x\"\n    shows \"S.arr (\\<Psi> (y, x))\"\n    and \"\\<Psi> (y, x) = S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                            (\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x))\"", "theorem induces_meta_adjunction:\n    shows \"meta_adjunction C D F G \\<phi> \\<psi>\"", "theorem induces_adjunction:\n    shows \"adjunction C D replete_setcat.comp \\<phi>C \\<phi>D F G \\<phi> \\<psi> \\<eta> \\<epsilon> \\<Phi> \\<Psi>\"", "theorem induces_adjunction:\n    shows \"adjunction C D replete_setcat.comp \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi> \\<psi> \\<eta> \\<epsilon> \\<phi>\\<psi>.\\<Phi> \\<phi>\\<psi>.\\<Psi>\"", "theorem induces_adjunction:\n    shows \"adjunction C D S \\<phi>C \\<phi>D F G \\<phi> \\<psi> \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon> \\<Phi> \\<Psi>\"", "theorem induces_adjunction:\n    shows \"adjunction C D replete_setcat.comp \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi> \\<psi> \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon> \\<phi>\\<psi>.\\<Phi> \\<phi>\\<psi>.\\<Psi>\"", "theorem induces_adjunction:\n    shows \"adjunction C D replete_setcat.comp \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi> \\<psi> \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon> \\<phi>\\<psi>.\\<Phi> \\<phi>\\<psi>.\\<Psi>\"", "lemma adjoint_functors_respects_naturally_isomorphic:\n  assumes \"adjoint_functors C D F G\"\n  and \"naturally_isomorphic D C F' F\" and \"naturally_isomorphic C D G G'\"\n  shows \"adjoint_functors C D F' G'\"", "lemma left_adjoint_functor_respects_naturally_isomorphic:\n  assumes \"left_adjoint_functor D C F\"\n  and \"naturally_isomorphic D C F F'\"\n  shows \"left_adjoint_functor D C F'\"", "lemma right_adjoint_functor_respects_naturally_isomorphic:\n  assumes \"right_adjoint_functor C D G\"\n  and \"naturally_isomorphic C D G G'\"\n  shows \"right_adjoint_functor C D G'\"", "lemma inverse_functors_induce_meta_adjunction:\n  assumes \"inverse_functors C D F G\"\n  shows \"meta_adjunction C D F G (\\<lambda>x. G) (\\<lambda>y. F)\"", "lemma inverse_functors_are_adjoints:\n  assumes \"inverse_functors A B F G\"\n  shows \"adjoint_functors A B F G\"", "lemma \\<eta>_char:\n    shows \"meta_adjunction.\\<eta> B F (\\<lambda>x. G) = identity_functor.map B\"", "lemma \\<epsilon>_char:\n    shows \"meta_adjunction.\\<epsilon> A F G (\\<lambda>y. F) = identity_functor.map A\"", "lemma is_meta_adjunction:\n    shows \"meta_adjunction A C (F o F') (G' o G) (\\<lambda>z. \\<phi>' z o \\<phi> (F' z)) (\\<lambda>x. \\<psi> x o \\<psi>' (G x))\"", "lemma \\<eta>_char:\n    shows \"\\<eta> = G'\\<eta>F'o\\<eta>'.map\"", "lemma \\<epsilon>_char:\n    shows \"\\<epsilon> = \\<epsilon>oF\\<epsilon>'G.map\"", "theorem two_right_adjoints_naturally_isomorphic:\n  assumes \"adjoint_functors C D F G\" and \"adjoint_functors C D F G'\"\n  shows \"naturally_isomorphic C D G G'\""], "translations": [["", "lemma the_coext_prop:\n    assumes \"arrow_from_functor D C F x' y f\"\n    shows \"\\<guillemotleft>the_coext x' f : x' \\<rightarrow>\\<^sub>D x\\<guillemotright>\" and \"f = e \\<cdot>\\<^sub>C F (the_coext x' f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>the_coext x'\n                     f : x' \\<rightarrow>\\<^sub>D x\\<guillemotright> &&&\n    f = e \\<cdot>\\<^sub>C F (the_coext x' f)", "using assms is_terminal the_coext_def is_coext_def theI2 [of \"\\<lambda>g. is_coext x' f g\"]"], ["proof (prove)\nusing this:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x' y f\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' y\n   ?f \\<Longrightarrow>\n  \\<exists>!g. is_coext ?x' ?f g\n  the_coext ?x' ?f = (THE g. is_coext ?x' ?f g)\n  is_coext ?x' ?f ?g \\<equiv>\n  \\<guillemotleft>?g : ?x' \\<rightarrow>\\<^sub>D x\\<guillemotright> \\<and>\n  ?f = e \\<cdot>\\<^sub>C F ?g\n  \\<lbrakk>is_coext x' f ?a;\n   \\<And>x. is_coext x' f x \\<Longrightarrow> x = ?a;\n   \\<And>x. is_coext x' f x \\<Longrightarrow> ?Q x\\<rbrakk>\n  \\<Longrightarrow> ?Q (THE x. is_coext x' f x)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>the_coext x'\n                     f : x' \\<rightarrow>\\<^sub>D x\\<guillemotright> &&&\n    f = e \\<cdot>\\<^sub>C F (the_coext x' f)", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f = e \\<cdot>\\<^sub>C F (the_coext x' f)", "using assms is_terminal the_coext_def is_coext_def theI2 [of \"\\<lambda>g. is_coext x' f g\"]"], ["proof (prove)\nusing this:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x' y f\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' y\n   ?f \\<Longrightarrow>\n  \\<exists>!g. is_coext ?x' ?f g\n  the_coext ?x' ?f = (THE g. is_coext ?x' ?f g)\n  is_coext ?x' ?f ?g \\<equiv>\n  \\<guillemotleft>?g : ?x' \\<rightarrow>\\<^sub>D x\\<guillemotright> \\<and>\n  ?f = e \\<cdot>\\<^sub>C F ?g\n  \\<lbrakk>is_coext x' f ?a;\n   \\<And>x. is_coext x' f x \\<Longrightarrow> x = ?a;\n   \\<And>x. is_coext x' f x \\<Longrightarrow> ?Q x\\<rbrakk>\n  \\<Longrightarrow> ?Q (THE x. is_coext x' f x)\n\ngoal (1 subgoal):\n 1. f = e \\<cdot>\\<^sub>C F (the_coext x' f)", "by metis"], ["", "lemma the_coext_unique:\n    assumes \"arrow_from_functor D C F x' y f\" and \"is_coext x' f g\"\n    shows \"g = the_coext x' f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = the_coext x' f", "using assms is_terminal the_coext_def the_equality"], ["proof (prove)\nusing this:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x' y f\n  is_coext x' f g\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' y\n   ?f \\<Longrightarrow>\n  \\<exists>!g. is_coext ?x' ?f g\n  the_coext ?x' ?f = (THE g. is_coext ?x' ?f g)\n  \\<lbrakk>?P ?a; \\<And>x. ?P x \\<Longrightarrow> x = ?a\\<rbrakk>\n  \\<Longrightarrow> (THE x. ?P x) = ?a\n\ngoal (1 subgoal):\n 1. g = the_coext x' f", "by metis"], ["", "end"], ["", "text\\<open>\n    A left adjoint functor is a functor \\<open>F: D \\<rightarrow> C\\<close>\n    that enjoys the following universal coextension property: for each object\n    @{term y} of @{term C} there exists an object @{term x} of @{term D} and an\n    arrow \\<open>e \\<in> C.hom (F x) y\\<close> such that for any arrow\n    \\<open>f \\<in> C.hom (F x') y\\<close> there exists a unique \\<open>g \\<in> D.hom x' x\\<close>\n    such that @{term \"f = C e (F g)\"}.\n\\<close>"], ["", "locale left_adjoint_functor =\n    C: category C +\n    D: category D +\n    \"functor\" D C F\n    for D :: \"'d comp\"     (infixr \"\\<cdot>\\<^sub>D\" 55)\n    and C :: \"'c comp\"     (infixr \"\\<cdot>\\<^sub>C\" 55)\n    and F :: \"'d \\<Rightarrow> 'c\" +\n    assumes ex_terminal_arrow: \"C.ide y \\<Longrightarrow> (\\<exists>x e. terminal_arrow_from_functor D C F x y e)\"\n  begin"], ["", "notation C.in_hom      (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>C _\\<guillemotright>\")"], ["", "notation D.in_hom      (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>D _\\<guillemotright>\")"], ["", "end"], ["", "section \"Right Adjoint Functor\""], ["", "text\\<open>\n    ``@{term e} is an arrow from @{term x} to @{term \"G y\"}.''\n\\<close>"], ["", "locale arrow_to_functor =\n    C: category C +\n    D: category D +\n    G: \"functor\" C D G\n    for C :: \"'c comp\"     (infixr \"\\<cdot>\\<^sub>C\" 55)\n    and D :: \"'d comp\"     (infixr \"\\<cdot>\\<^sub>D\" 55)\n    and G :: \"'c \\<Rightarrow> 'd\"\n    and x :: 'd\n    and y :: 'c\n    and e :: 'd +\n    assumes arrow: \"C.ide y \\<and> D.in_hom e x (G y)\"\n  begin"], ["", "notation C.in_hom      (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>C _\\<guillemotright>\")"], ["", "notation D.in_hom      (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>D _\\<guillemotright>\")"], ["", "text\\<open>\n      ``@{term f} is a @{term[source=true] C}-extension of @{term g} along @{term e}.''\n\\<close>"], ["", "definition is_ext :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'c \\<Rightarrow> bool\"\n    where \"is_ext y' g f \\<equiv> \\<guillemotleft>f : y \\<rightarrow>\\<^sub>C y'\\<guillemotright> \\<and> g = G f \\<cdot>\\<^sub>D e\""], ["", "end"], ["", "text\\<open>\n    ``@{term e} is an initial arrow from @{term x} to @{term \"G y\"}.''\n\\<close>"], ["", "locale initial_arrow_to_functor =\n    arrow_to_functor C D G x y e\n    for C :: \"'c comp\"     (infixr \"\\<cdot>\\<^sub>C\" 55)\n    and D :: \"'d comp\"     (infixr \"\\<cdot>\\<^sub>D\" 55)\n    and G :: \"'c \\<Rightarrow> 'd\"\n    and x :: 'd\n    and y :: 'c\n    and e :: 'd +\n    assumes is_initial: \"arrow_to_functor C D G x y' g \\<Longrightarrow> (\\<exists>!f. is_ext y' g f)\"\n  begin"], ["", "definition the_ext :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'c\"\n    where \"the_ext y' g = (THE f. is_ext y' g f)\""], ["", "lemma the_ext_prop:\n    assumes \"arrow_to_functor C D G x y' g\"\n    shows \"\\<guillemotleft>the_ext y' g : y \\<rightarrow>\\<^sub>C y'\\<guillemotright>\" and \"g = G (the_ext y' g) \\<cdot>\\<^sub>D e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>the_ext y'\n                     g : y \\<rightarrow>\\<^sub>C y'\\<guillemotright> &&&\n    g = G (the_ext y' g) \\<cdot>\\<^sub>D e", "using assms is_initial the_ext_def is_ext_def theI2 [of \"\\<lambda>f. is_ext y' g f\"]"], ["proof (prove)\nusing this:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G x y' g\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G x ?y'\n   ?g \\<Longrightarrow>\n  \\<exists>!f. is_ext ?y' ?g f\n  the_ext ?y' ?g = (THE f. is_ext ?y' ?g f)\n  is_ext ?y' ?g ?f \\<equiv>\n  \\<guillemotleft>?f : y \\<rightarrow>\\<^sub>C ?y'\\<guillemotright> \\<and>\n  ?g = G ?f \\<cdot>\\<^sub>D e\n  \\<lbrakk>is_ext y' g ?a; \\<And>x. is_ext y' g x \\<Longrightarrow> x = ?a;\n   \\<And>x. is_ext y' g x \\<Longrightarrow> ?Q x\\<rbrakk>\n  \\<Longrightarrow> ?Q (THE x. is_ext y' g x)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>the_ext y'\n                     g : y \\<rightarrow>\\<^sub>C y'\\<guillemotright> &&&\n    g = G (the_ext y' g) \\<cdot>\\<^sub>D e", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. g = G (the_ext y' g) \\<cdot>\\<^sub>D e", "using assms is_initial the_ext_def is_ext_def theI2 [of \"\\<lambda>f. is_ext y' g f\"]"], ["proof (prove)\nusing this:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G x y' g\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G x ?y'\n   ?g \\<Longrightarrow>\n  \\<exists>!f. is_ext ?y' ?g f\n  the_ext ?y' ?g = (THE f. is_ext ?y' ?g f)\n  is_ext ?y' ?g ?f \\<equiv>\n  \\<guillemotleft>?f : y \\<rightarrow>\\<^sub>C ?y'\\<guillemotright> \\<and>\n  ?g = G ?f \\<cdot>\\<^sub>D e\n  \\<lbrakk>is_ext y' g ?a; \\<And>x. is_ext y' g x \\<Longrightarrow> x = ?a;\n   \\<And>x. is_ext y' g x \\<Longrightarrow> ?Q x\\<rbrakk>\n  \\<Longrightarrow> ?Q (THE x. is_ext y' g x)\n\ngoal (1 subgoal):\n 1. g = G (the_ext y' g) \\<cdot>\\<^sub>D e", "by metis"], ["", "lemma the_ext_unique:\n    assumes \"arrow_to_functor C D G x y' g\" and \"is_ext y' g f\"\n    shows \"f = the_ext y' g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = the_ext y' g", "using assms is_initial the_ext_def the_equality"], ["proof (prove)\nusing this:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G x y' g\n  is_ext y' g f\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G x ?y'\n   ?g \\<Longrightarrow>\n  \\<exists>!f. is_ext ?y' ?g f\n  the_ext ?y' ?g = (THE f. is_ext ?y' ?g f)\n  \\<lbrakk>?P ?a; \\<And>x. ?P x \\<Longrightarrow> x = ?a\\<rbrakk>\n  \\<Longrightarrow> (THE x. ?P x) = ?a\n\ngoal (1 subgoal):\n 1. f = the_ext y' g", "by metis"], ["", "end"], ["", "text\\<open>\n    A right adjoint functor is a functor \\<open>G: C \\<rightarrow> D\\<close>\n    that enjoys the following universal extension property:\n    for each object @{term x} of @{term D} there exists an object @{term y} of @{term C}\n    and an arrow \\<open>e \\<in> D.hom x (G y)\\<close> such that for any arrow\n    \\<open>g \\<in> D.hom x (G y')\\<close> there exists a unique \\<open>f \\<in> C.hom y y'\\<close>\n    such that @{term \"h = D e (G f)\"}.\n\\<close>"], ["", "locale right_adjoint_functor =\n    C: category C +\n    D: category D +\n    \"functor\" C D G\n    for C :: \"'c comp\"     (infixr \"\\<cdot>\\<^sub>C\" 55)\n    and D :: \"'d comp\"     (infixr \"\\<cdot>\\<^sub>D\" 55)\n    and G :: \"'c \\<Rightarrow> 'd\" +\n    assumes initial_arrows_exist: \"D.ide x \\<Longrightarrow> (\\<exists>y e. initial_arrow_to_functor C D G x y e)\"\n  begin"], ["", "notation C.in_hom      (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>C _\\<guillemotright>\")"], ["", "notation D.in_hom      (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>D _\\<guillemotright>\")"], ["", "end"], ["", "section \"Various Definitions of Adjunction\""], ["", "subsection \"Meta-Adjunction\""], ["", "text\\<open>\n    A ``meta-adjunction'' consists of a functor \\<open>F: D \\<rightarrow> C\\<close>,\n    a functor \\<open>G: C \\<rightarrow> D\\<close>, and for each object @{term x}\n    of @{term C} and @{term y} of @{term D} a bijection between\n    \\<open>C.hom (F y) x\\<close> to \\<open>D.hom y (G x)\\<close> which is natural in @{term x}\n    and @{term y}.  The naturality is easy to express at the meta-level without having\n    to resort to the formal baggage of ``set category,'' ``hom-functor,''\n    and ``natural isomorphism,'' hence the name.\n\\<close>"], ["", "locale meta_adjunction =\n    C: category C +\n    D: category D +\n    F: \"functor\" D C F +\n    G: \"functor\" C D G\n    for C :: \"'c comp\"     (infixr \"\\<cdot>\\<^sub>C\" 55)\n    and D :: \"'d comp\"     (infixr \"\\<cdot>\\<^sub>D\" 55)\n    and F :: \"'d \\<Rightarrow> 'c\"\n    and G :: \"'c \\<Rightarrow> 'd\"\n    and \\<phi> :: \"'d \\<Rightarrow> 'c \\<Rightarrow> 'd\"\n    and \\<psi> :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'c\" +\n    assumes \\<phi>_in_hom: \"\\<lbrakk> D.ide y; C.in_hom f (F y) x \\<rbrakk> \\<Longrightarrow> D.in_hom (\\<phi> y f) y (G x)\"\n    and \\<psi>_in_hom: \"\\<lbrakk> C.ide x; D.in_hom g y (G x) \\<rbrakk> \\<Longrightarrow> C.in_hom (\\<psi> x g) (F y) x\"\n    and \\<psi>_\\<phi>: \"\\<lbrakk> D.ide y; C.in_hom f (F y) x \\<rbrakk> \\<Longrightarrow> \\<psi> x (\\<phi> y f) = f\"\n    and \\<phi>_\\<psi>: \"\\<lbrakk> C.ide x; D.in_hom g y (G x) \\<rbrakk> \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\"\n    and \\<phi>_naturality: \"\\<lbrakk> C.in_hom f x x'; D.in_hom g y' y; C.in_hom h (F y) x \\<rbrakk> \\<Longrightarrow>\n                         \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) = G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g\"\n  begin"], ["", "notation C.in_hom (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>C _\\<guillemotright>\")"], ["", "notation D.in_hom (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>D _\\<guillemotright>\")"], ["", "text\\<open>\n      The naturality of @{term \\<psi>} is a consequence of the naturality of @{term \\<phi>}\n      and the other assumptions.\n\\<close>"], ["", "lemma \\<psi>_naturality:\n    assumes f: \"\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\" and g: \"\\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\" and h: \"\\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g = \\<psi> x' (G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' (G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' (G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g)", "have \"\\<guillemotleft>f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g : F y' \\<rightarrow>\\<^sub>C x'\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>f \\<cdot>\\<^sub>C\n                    \\<psi> x h \\<cdot>\\<^sub>C\n                    F g : F y' \\<rightarrow>\\<^sub>C x'\\<guillemotright>", "using f g h \\<psi>_in_hom [of x h]"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>C.ide x;\n   \\<guillemotleft>h : ?y \\<rightarrow>\\<^sub>D G\n           x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n                                     h : F\n    ?y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f \\<cdot>\\<^sub>C\n                    \\<psi> x h \\<cdot>\\<^sub>C\n                    F g : F y' \\<rightarrow>\\<^sub>C x'\\<guillemotright>", "by fastforce"], ["proof (state)\nthis:\n  \\<guillemotleft>f \\<cdot>\\<^sub>C\n                  \\<psi> x h \\<cdot>\\<^sub>C\n                  F g : F y' \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' (G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g)", "moreover"], ["proof (state)\nthis:\n  \\<guillemotleft>f \\<cdot>\\<^sub>C\n                  \\<psi> x h \\<cdot>\\<^sub>C\n                  F g : F y' \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' (G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g)", "have \"\\<guillemotleft>(G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>(G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D\n                    g : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>", "using f g h \\<phi>_in_hom"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>(G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D\n                    g : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>(G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D\n                  g : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' (G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g)", "moreover"], ["proof (state)\nthis:\n  \\<guillemotleft>(G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D\n                  g : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' (G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g)", "have \"\\<psi> x' (\\<phi> y' (f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g)) = \\<psi> x' (G f \\<cdot>\\<^sub>D \\<phi> y (\\<psi> x h) \\<cdot>\\<^sub>D g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x'\n     (\\<phi> y' (f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g)) =\n    \\<psi> x' (G f \\<cdot>\\<^sub>D \\<phi> y (\\<psi> x h) \\<cdot>\\<^sub>D g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> x'\n     (\\<phi> y' (f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g)) =\n    \\<psi> x' (G f \\<cdot>\\<^sub>D \\<phi> y (\\<psi> x h) \\<cdot>\\<^sub>D g)", "have \"\\<guillemotleft>\\<psi> x h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "using f h \\<psi>_in_hom"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> ?x\n                                     ?g : F\n     ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<psi> x h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<psi> x'\n     (\\<phi> y' (f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g)) =\n    \\<psi> x' (G f \\<cdot>\\<^sub>D \\<phi> y (\\<psi> x h) \\<cdot>\\<^sub>D g)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<psi> x h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<psi> x'\n     (\\<phi> y' (f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g)) =\n    \\<psi> x' (G f \\<cdot>\\<^sub>D \\<phi> y (\\<psi> x h) \\<cdot>\\<^sub>D g)", "using f g \\<phi>_naturality"], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<psi> x h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<lbrakk>\\<guillemotleft>?f : ?x \\<rightarrow>\\<^sub>C ?x'\\<guillemotright>;\n   \\<guillemotleft>?g : ?y' \\<rightarrow>\\<^sub>D ?y\\<guillemotright>;\n   \\<guillemotleft>?h : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y'\n                     (?f \\<cdot>\\<^sub>C ?h \\<cdot>\\<^sub>C F ?g) =\n                    G ?f \\<cdot>\\<^sub>D \\<phi> ?y ?h \\<cdot>\\<^sub>D ?g\n\ngoal (1 subgoal):\n 1. \\<psi> x'\n     (\\<phi> y' (f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g)) =\n    \\<psi> x' (G f \\<cdot>\\<^sub>D \\<phi> y (\\<psi> x h) \\<cdot>\\<^sub>D g)", "by force"], ["proof (state)\nthis:\n  \\<psi> x' (\\<phi> y' (f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g)) =\n  \\<psi> x' (G f \\<cdot>\\<^sub>D \\<phi> y (\\<psi> x h) \\<cdot>\\<^sub>D g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<psi> x' (\\<phi> y' (f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g)) =\n  \\<psi> x' (G f \\<cdot>\\<^sub>D \\<phi> y (\\<psi> x h) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' (G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g)", "ultimately"], ["proof (chain)\npicking this:\n  \\<guillemotleft>f \\<cdot>\\<^sub>C\n                  \\<psi> x h \\<cdot>\\<^sub>C\n                  F g : F y' \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>(G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D\n                  g : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>\n  \\<psi> x' (\\<phi> y' (f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g)) =\n  \\<psi> x' (G f \\<cdot>\\<^sub>D \\<phi> y (\\<psi> x h) \\<cdot>\\<^sub>D g)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f \\<cdot>\\<^sub>C\n                  \\<psi> x h \\<cdot>\\<^sub>C\n                  F g : F y' \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>(G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D\n                  g : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>\n  \\<psi> x' (\\<phi> y' (f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g)) =\n  \\<psi> x' (G f \\<cdot>\\<^sub>D \\<phi> y (\\<psi> x h) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' (G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g)", "using f h \\<psi>_\\<phi> \\<phi>_\\<psi>"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f \\<cdot>\\<^sub>C\n                  \\<psi> x h \\<cdot>\\<^sub>C\n                  F g : F y' \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>(G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D\n                  g : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>\n  \\<psi> x' (\\<phi> y' (f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g)) =\n  \\<psi> x' (G f \\<cdot>\\<^sub>D \\<phi> y (\\<psi> x h) \\<cdot>\\<^sub>D g)\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x (\\<phi> ?y ?f) = ?f\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y (\\<psi> ?x ?g) = ?g\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' (G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g)", "by (metis C.arrI C.ide_dom C.in_homE D.arrI D.ide_dom D.in_homE)"], ["proof (state)\nthis:\n  f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n  \\<psi> x' (G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma respects_natural_isomorphism:\n    assumes \"natural_isomorphism D C F' F \\<tau>\" and \"natural_isomorphism C D G G' \\<mu>\"\n    shows \"meta_adjunction C D F' G'\n             (\\<lambda>y f. \\<mu> (C.cod f) \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C inverse_transformation.map D C F \\<tau> y))\n             (\\<lambda>x g. \\<psi> x ((inverse_transformation.map C D G' \\<mu> x) \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C \\<tau> (D.dom g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F' G'\n     (\\<lambda>y f.\n         \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n         \\<phi> y\n          (f \\<cdot>\\<^sub>C\n           inverse_transformation.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n            \\<tau> y))\n     (\\<lambda>x g.\n         \\<psi> x\n          (inverse_transformation.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G'\n            \\<mu> x \\<cdot>\\<^sub>D\n           g) \\<cdot>\\<^sub>C\n         \\<tau> (D.dom g))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F' G'\n     (\\<lambda>y f.\n         \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n         \\<phi> y\n          (f \\<cdot>\\<^sub>C\n           inverse_transformation.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n            \\<tau> y))\n     (\\<lambda>x g.\n         \\<psi> x\n          (inverse_transformation.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G'\n            \\<mu> x \\<cdot>\\<^sub>D\n           g) \\<cdot>\\<^sub>C\n         \\<tau> (D.dom g))", "interpret \\<tau>: natural_isomorphism D C F' F \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F' F \\<tau>", "using assms(1)"], ["proof (prove)\nusing this:\n  natural_isomorphism (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F' F \\<tau>\n\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F' F \\<tau>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F' G'\n     (\\<lambda>y f.\n         \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n         \\<phi> y\n          (f \\<cdot>\\<^sub>C\n           inverse_transformation.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n            \\<tau> y))\n     (\\<lambda>x g.\n         \\<psi> x\n          (inverse_transformation.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G'\n            \\<mu> x \\<cdot>\\<^sub>D\n           g) \\<cdot>\\<^sub>C\n         \\<tau> (D.dom g))", "interpret \\<tau>': inverse_transformation D C F' F \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F' F \\<tau>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F' G'\n     (\\<lambda>y f.\n         \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n         \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))\n     (\\<lambda>x g.\n         \\<psi> x\n          (inverse_transformation.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G'\n            \\<mu> x \\<cdot>\\<^sub>D\n           g) \\<cdot>\\<^sub>C\n         \\<tau> (D.dom g))", "interpret \\<mu>: natural_isomorphism C D G G' \\<mu>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G' \\<mu>", "using assms(2)"], ["proof (prove)\nusing this:\n  natural_isomorphism (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G' \\<mu>\n\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G' \\<mu>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F' G'\n     (\\<lambda>y f.\n         \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n         \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))\n     (\\<lambda>x g.\n         \\<psi> x\n          (inverse_transformation.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G'\n            \\<mu> x \\<cdot>\\<^sub>D\n           g) \\<cdot>\\<^sub>C\n         \\<tau> (D.dom g))", "interpret \\<mu>': inverse_transformation C D G G' \\<mu>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G' \\<mu>", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F' G'\n     (\\<lambda>y f.\n         \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n         \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))\n     (\\<lambda>x g.\n         \\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n         \\<tau> (D.dom g))", "let ?\\<phi>' = \"\\<lambda>y f. \\<mu> (C.cod f) \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)\""], ["proof (state)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F' G'\n     (\\<lambda>y f.\n         \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n         \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))\n     (\\<lambda>x g.\n         \\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n         \\<tau> (D.dom g))", "let ?\\<psi>' = \"\\<lambda>x g. \\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C \\<tau> (D.dom g)\""], ["proof (state)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F' G'\n     (\\<lambda>y f.\n         \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n         \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))\n     (\\<lambda>x g.\n         \\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n         \\<tau> (D.dom g))", "show \"meta_adjunction C D F' G' ?\\<phi>' ?\\<psi>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F' G'\n     (\\<lambda>y f.\n         \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n         \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))\n     (\\<lambda>x g.\n         \\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n         \\<tau> (D.dom g))", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n   \\<phi> y\n    (f \\<cdot>\\<^sub>C\n     \\<tau>'.map y) : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G'\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n   \\<tau> (D.dom g) : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 3. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x\n                          (\\<mu>'.map x \\<cdot>\\<^sub>D\n                           \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                           \\<phi> y\n                            (f \\<cdot>\\<^sub>C\n                             \\<tau>'.map y)) \\<cdot>\\<^sub>C\n                         \\<tau>\n                          (D.dom\n                            (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                             \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n                         f\n 4. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G'\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (\\<psi> x\n                              (\\<mu>'.map x \\<cdot>\\<^sub>D\n                               g) \\<cdot>\\<^sub>C\n                             \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n                         \\<phi> y\n                          ((\\<psi> x\n                             (\\<mu>'.map x \\<cdot>\\<^sub>D\n                              g) \\<cdot>\\<^sub>C\n                            \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y) =\n                         g\n 5. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (f \\<cdot>\\<^sub>C\n                             h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n                         \\<phi> y'\n                          ((f \\<cdot>\\<^sub>C\n                            h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y') =\n                         G' f \\<cdot>\\<^sub>D\n                         (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n                          \\<phi> y\n                           (h \\<cdot>\\<^sub>C\n                            \\<tau>'.map y)) \\<cdot>\\<^sub>D\n                         g", "show \"\\<And>y f x. \\<lbrakk>D.ide y; \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n                         \\<Longrightarrow> \\<guillemotleft>\\<mu> (C.cod f) \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y) : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n   \\<phi> y\n    (f \\<cdot>\\<^sub>C\n     \\<tau>'.map y) : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n   \\<phi> y\n    (f \\<cdot>\\<^sub>C\n     \\<tau>'.map y) : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>", "fix x y f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n   \\<phi> y\n    (f \\<cdot>\\<^sub>C\n     \\<tau>'.map y) : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>", "assume y: \"D.ide y\" and f: \"\\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (state)\nthis:\n  D.ide y\n  \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n   \\<phi> y\n    (f \\<cdot>\\<^sub>C\n     \\<tau>'.map y) : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>", "show \"\\<guillemotleft>\\<mu> (C.cod f) \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y) : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                    \\<phi> y\n                     (f \\<cdot>\\<^sub>C\n                      \\<tau>'.map\n                       y) : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>", "proof (intro D.comp_in_homI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<guillemotleft>\\<phi> y\n                     (f \\<cdot>\\<^sub>C\n                      \\<tau>'.map\n                       y) : y \\<rightarrow>\\<^sub>D ?b\\<guillemotright>\n 2. \\<guillemotleft>\\<mu>\n                     (C.cod\n                       f) : ?b \\<rightarrow>\\<^sub>D G' x\\<guillemotright>", "show \"\\<guillemotleft>\\<mu> (C.cod f) : G x \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<mu>\n                     (C.cod\n                       f) : G x \\<rightarrow>\\<^sub>D G' x\\<guillemotright>", "using f"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<mu>\n                     (C.cod\n                       f) : G x \\<rightarrow>\\<^sub>D G' x\\<guillemotright>", "by fastforce"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<mu>\n                   (C.cod\n                     f) : G x \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     (f \\<cdot>\\<^sub>C\n                      \\<tau>'.map\n                       y) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "show \"\\<guillemotleft>\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     (f \\<cdot>\\<^sub>C\n                      \\<tau>'.map\n                       y) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "using f y \\<phi>_in_hom"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  D.ide y\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     (f \\<cdot>\\<^sub>C\n                      \\<tau>'.map\n                       y) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<phi> y\n                   (f \\<cdot>\\<^sub>C\n                    \\<tau>'.map\n                     y) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                  \\<phi> y\n                   (f \\<cdot>\\<^sub>C\n                    \\<tau>'.map\n                     y) : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F' ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<mu> (C.cod ?f) \\<cdot>\\<^sub>D\n                                    \\<phi> ?y\n                                     (?f \\<cdot>\\<^sub>C\n\\<tau>'.map ?y) : ?y \\<rightarrow>\\<^sub>D G' ?x\\<guillemotright>\n\ngoal (4 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G'\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n   \\<tau> (D.dom g) : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 2. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x\n                          (\\<mu>'.map x \\<cdot>\\<^sub>D\n                           \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                           \\<phi> y\n                            (f \\<cdot>\\<^sub>C\n                             \\<tau>'.map y)) \\<cdot>\\<^sub>C\n                         \\<tau>\n                          (D.dom\n                            (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                             \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n                         f\n 3. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G'\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (\\<psi> x\n                              (\\<mu>'.map x \\<cdot>\\<^sub>D\n                               g) \\<cdot>\\<^sub>C\n                             \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n                         \\<phi> y\n                          ((\\<psi> x\n                             (\\<mu>'.map x \\<cdot>\\<^sub>D\n                              g) \\<cdot>\\<^sub>C\n                            \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y) =\n                         g\n 4. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (f \\<cdot>\\<^sub>C\n                             h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n                         \\<phi> y'\n                          ((f \\<cdot>\\<^sub>C\n                            h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y') =\n                         G' f \\<cdot>\\<^sub>D\n                         (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n                          \\<phi> y\n                           (h \\<cdot>\\<^sub>C\n                            \\<tau>'.map y)) \\<cdot>\\<^sub>D\n                         g", "show \"\\<And>x g y. \\<lbrakk>C.ide x; \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\\<rbrakk>\n                         \\<Longrightarrow> \\<guillemotleft>\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C \\<tau> (D.dom g) : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G'\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n   \\<tau> (D.dom g) : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G'\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n   \\<tau> (D.dom g) : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "fix x y g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G'\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n   \\<tau> (D.dom g) : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "assume x: \"C.ide x\" and g: \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\""], ["proof (state)\nthis:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G'\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n   \\<tau> (D.dom g) : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "show \"\\<guillemotleft>\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C \\<tau> (D.dom g) : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n                    \\<tau>\n                     (D.dom\n                       g) : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "proof (intro C.comp_in_homI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<guillemotleft>\\<tau>\n                     (D.dom\n                       g) : F' y \\<rightarrow>\\<^sub>C ?b\\<guillemotright>\n 2. \\<guillemotleft>\\<psi> x\n                     (\\<mu>'.map x \\<cdot>\\<^sub>D\n                      g) : ?b \\<rightarrow>\\<^sub>C x\\<guillemotright>", "show \"\\<guillemotleft>\\<tau> (D.dom g) : F' y \\<rightarrow>\\<^sub>C F y\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<tau>\n                     (D.dom\n                       g) : F' y \\<rightarrow>\\<^sub>C F y\\<guillemotright>", "using g"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<tau>\n                     (D.dom\n                       g) : F' y \\<rightarrow>\\<^sub>C F y\\<guillemotright>", "by fastforce"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<tau>\n                   (D.dom\n                     g) : F' y \\<rightarrow>\\<^sub>C F y\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     (\\<mu>'.map x \\<cdot>\\<^sub>D\n                      g) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "show \"\\<guillemotleft>\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     (\\<mu>'.map x \\<cdot>\\<^sub>D\n                      g) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "using x g \\<psi>_in_hom"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> ?x\n                                     ?g : F\n     ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     (\\<mu>'.map x \\<cdot>\\<^sub>D\n                      g) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<psi> x\n                   (\\<mu>'.map x \\<cdot>\\<^sub>D\n                    g) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n                  \\<tau>\n                   (D.dom g) : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G'\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> ?x\n                                     (\\<mu>'.map ?x \\<cdot>\\<^sub>D\n?g) \\<cdot>\\<^sub>C\n                                    \\<tau>\n                                     (D.dom\n ?g) : F' ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\n\ngoal (3 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x\n                          (\\<mu>'.map x \\<cdot>\\<^sub>D\n                           \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                           \\<phi> y\n                            (f \\<cdot>\\<^sub>C\n                             \\<tau>'.map y)) \\<cdot>\\<^sub>C\n                         \\<tau>\n                          (D.dom\n                            (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                             \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n                         f\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G'\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (\\<psi> x\n                              (\\<mu>'.map x \\<cdot>\\<^sub>D\n                               g) \\<cdot>\\<^sub>C\n                             \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n                         \\<phi> y\n                          ((\\<psi> x\n                             (\\<mu>'.map x \\<cdot>\\<^sub>D\n                              g) \\<cdot>\\<^sub>C\n                            \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y) =\n                         g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (f \\<cdot>\\<^sub>C\n                             h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n                         \\<phi> y'\n                          ((f \\<cdot>\\<^sub>C\n                            h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y') =\n                         G' f \\<cdot>\\<^sub>D\n                         (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n                          \\<phi> y\n                           (h \\<cdot>\\<^sub>C\n                            \\<tau>'.map y)) \\<cdot>\\<^sub>D\n                         g", "show \"\\<And>y f x. \\<lbrakk>D.ide y; \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n                          \\<Longrightarrow> \\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f) \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n                                \\<tau> (D.dom (\\<mu> (C.cod f) \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n                              f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x\n                          (\\<mu>'.map x \\<cdot>\\<^sub>D\n                           \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                           \\<phi> y\n                            (f \\<cdot>\\<^sub>C\n                             \\<tau>'.map y)) \\<cdot>\\<^sub>C\n                         \\<tau>\n                          (D.dom\n                            (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                             \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n                         f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x\n                          (\\<mu>'.map x \\<cdot>\\<^sub>D\n                           \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                           \\<phi> y\n                            (f \\<cdot>\\<^sub>C\n                             \\<tau>'.map y)) \\<cdot>\\<^sub>C\n                         \\<tau>\n                          (D.dom\n                            (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                             \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n                         f", "fix x y f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x\n                          (\\<mu>'.map x \\<cdot>\\<^sub>D\n                           \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                           \\<phi> y\n                            (f \\<cdot>\\<^sub>C\n                             \\<tau>'.map y)) \\<cdot>\\<^sub>C\n                         \\<tau>\n                          (D.dom\n                            (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                             \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n                         f", "assume y: \"D.ide y\" and f: \"\\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (state)\nthis:\n  D.ide y\n  \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x\n                          (\\<mu>'.map x \\<cdot>\\<^sub>D\n                           \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                           \\<phi> y\n                            (f \\<cdot>\\<^sub>C\n                             \\<tau>'.map y)) \\<cdot>\\<^sub>C\n                         \\<tau>\n                          (D.dom\n                            (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                             \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n                         f", "have 1: \"\\<guillemotleft>\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     (f \\<cdot>\\<^sub>C\n                      \\<tau>'.map\n                       y) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "using f y \\<phi>_in_hom"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  D.ide y\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     (f \\<cdot>\\<^sub>C\n                      \\<tau>'.map\n                       y) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<phi> y\n                   (f \\<cdot>\\<^sub>C\n                    \\<tau>'.map\n                     y) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x\n                          (\\<mu>'.map x \\<cdot>\\<^sub>D\n                           \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                           \\<phi> y\n                            (f \\<cdot>\\<^sub>C\n                             \\<tau>'.map y)) \\<cdot>\\<^sub>C\n                         \\<tau>\n                          (D.dom\n                            (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n                             \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n                         f", "show \"\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f) \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n                  \\<tau> (D.dom (\\<mu> (C.cod f) \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n                f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x\n     (\\<mu>'.map x \\<cdot>\\<^sub>D\n      \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> x\n     (\\<mu>'.map x \\<cdot>\\<^sub>D\n      \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    f", "have \"\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f) \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n                    \\<tau> (D.dom (\\<mu> (C.cod f) \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n                  \\<psi> x ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n                    \\<tau> (D.dom (\\<mu> (C.cod f) \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x\n     (\\<mu>'.map x \\<cdot>\\<^sub>D\n      \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    \\<psi> x\n     ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)))", "using D.comp_assoc"], ["proof (prove)\nusing this:\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. \\<psi> x\n     (\\<mu>'.map x \\<cdot>\\<^sub>D\n      \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    \\<psi> x\n     ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)))", "by simp"], ["proof (state)\nthis:\n  \\<psi> x\n   (\\<mu>'.map x \\<cdot>\\<^sub>D\n    \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n    \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n  \\<tau>\n   (D.dom\n     (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n  \\<psi> x\n   ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n    \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n  \\<tau>\n   (D.dom\n     (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)))\n\ngoal (1 subgoal):\n 1. \\<psi> x\n     (\\<mu>'.map x \\<cdot>\\<^sub>D\n      \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    f", "also"], ["proof (state)\nthis:\n  \\<psi> x\n   (\\<mu>'.map x \\<cdot>\\<^sub>D\n    \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n    \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n  \\<tau>\n   (D.dom\n     (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n  \\<psi> x\n   ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n    \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n  \\<tau>\n   (D.dom\n     (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)))\n\ngoal (1 subgoal):\n 1. \\<psi> x\n     (\\<mu>'.map x \\<cdot>\\<^sub>D\n      \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    f", "have \"... = \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C \\<tau> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x\n     ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau> y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> x\n     ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau> y", "have \"C.cod f = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.cod f = x", "using f"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. C.cod f = x", "by auto"], ["proof (state)\nthis:\n  C.cod f = x\n\ngoal (1 subgoal):\n 1. \\<psi> x\n     ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau> y", "moreover"], ["proof (state)\nthis:\n  C.cod f = x\n\ngoal (1 subgoal):\n 1. \\<psi> x\n     ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau> y", "have \"\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> x = G x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> x = G x", "using f \\<mu>'.inverts_components [of x]"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  C.ide x \\<Longrightarrow> D.inverse_arrows (\\<mu> x) (\\<mu>'.map x)\n\ngoal (1 subgoal):\n 1. \\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> x = G x", "by force"], ["proof (state)\nthis:\n  \\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> x = G x\n\ngoal (1 subgoal):\n 1. \\<psi> x\n     ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau> y", "moreover"], ["proof (state)\nthis:\n  \\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> x = G x\n\ngoal (1 subgoal):\n 1. \\<psi> x\n     ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau> y", "have \"D.dom (\\<mu> x \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.dom\n     (\\<mu> x \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) =\n    y", "using f y 1"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  D.ide y\n  \\<guillemotleft>\\<phi> y\n                   (f \\<cdot>\\<^sub>C\n                    \\<tau>'.map\n                     y) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. D.dom\n     (\\<mu> x \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) =\n    y", "by fastforce"], ["proof (state)\nthis:\n  D.dom\n   (\\<mu> x \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) =\n  y\n\ngoal (1 subgoal):\n 1. \\<psi> x\n     ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau> y", "ultimately"], ["proof (chain)\npicking this:\n  C.cod f = x\n  \\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> x = G x\n  D.dom\n   (\\<mu> x \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) =\n  y", "show ?thesis"], ["proof (prove)\nusing this:\n  C.cod f = x\n  \\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> x = G x\n  D.dom\n   (\\<mu> x \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) =\n  y\n\ngoal (1 subgoal):\n 1. \\<psi> x\n     ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau> y", "using f y 1 D.comp_cod_arr"], ["proof (prove)\nusing this:\n  C.cod f = x\n  \\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> x = G x\n  D.dom\n   (\\<mu> x \\<cdot>\\<^sub>D \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) =\n  y\n  \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  D.ide y\n  \\<guillemotleft>\\<phi> y\n                   (f \\<cdot>\\<^sub>C\n                    \\<tau>'.map\n                     y) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>D.arr ?f; D.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>D ?f = ?f\n\ngoal (1 subgoal):\n 1. \\<psi> x\n     ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau> y", "by auto"], ["proof (state)\nthis:\n  \\<psi> x\n   ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n    \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n  \\<tau>\n   (D.dom\n     (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n  \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n  \\<tau> y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<psi> x\n   ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n    \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n  \\<tau>\n   (D.dom\n     (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n  \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n  \\<tau> y\n\ngoal (1 subgoal):\n 1. \\<psi> x\n     (\\<mu>'.map x \\<cdot>\\<^sub>D\n      \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    f", "also"], ["proof (state)\nthis:\n  \\<psi> x\n   ((\\<mu>'.map x \\<cdot>\\<^sub>D \\<mu> (C.cod f)) \\<cdot>\\<^sub>D\n    \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n  \\<tau>\n   (D.dom\n     (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n  \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n  \\<tau> y\n\ngoal (1 subgoal):\n 1. \\<psi> x\n     (\\<mu>'.map x \\<cdot>\\<^sub>D\n      \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    f", "have \"... = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau> y =\n    f", "using f y \\<psi>_\\<phi> C.comp_assoc \\<tau>'.inverts_components [of y] C.comp_arr_dom"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  D.ide y\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x (\\<phi> ?y ?f) = ?f\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n  D.ide y \\<Longrightarrow> C.inverse_arrows (\\<tau> y) (\\<tau>'.map y)\n  \\<lbrakk>C.arr ?f; C.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>C ?a = ?f\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau> y =\n    f", "by fastforce"], ["proof (state)\nthis:\n  \\<psi> x (\\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n  \\<tau> y =\n  f\n\ngoal (1 subgoal):\n 1. \\<psi> x\n     (\\<mu>'.map x \\<cdot>\\<^sub>D\n      \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    f", "finally"], ["proof (chain)\npicking this:\n  \\<psi> x\n   (\\<mu>'.map x \\<cdot>\\<^sub>D\n    \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n    \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n  \\<tau>\n   (D.dom\n     (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n  f", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<psi> x\n   (\\<mu>'.map x \\<cdot>\\<^sub>D\n    \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n    \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n  \\<tau>\n   (D.dom\n     (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n  f\n\ngoal (1 subgoal):\n 1. \\<psi> x\n     (\\<mu>'.map x \\<cdot>\\<^sub>D\n      \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n    \\<tau>\n     (D.dom\n       (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n        \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n    f", "by blast"], ["proof (state)\nthis:\n  \\<psi> x\n   (\\<mu>'.map x \\<cdot>\\<^sub>D\n    \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n    \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n  \\<tau>\n   (D.dom\n     (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n  f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<psi> x\n   (\\<mu>'.map x \\<cdot>\\<^sub>D\n    \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n    \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>C\n  \\<tau>\n   (D.dom\n     (\\<mu> (C.cod f) \\<cdot>\\<^sub>D\n      \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))) =\n  f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F' ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x\n                     (\\<mu>'.map ?x \\<cdot>\\<^sub>D\n                      \\<mu> (C.cod ?f) \\<cdot>\\<^sub>D\n                      \\<phi> ?y\n                       (?f \\<cdot>\\<^sub>C \\<tau>'.map ?y)) \\<cdot>\\<^sub>C\n                    \\<tau>\n                     (D.dom\n                       (\\<mu> (C.cod ?f) \\<cdot>\\<^sub>D\n                        \\<phi> ?y (?f \\<cdot>\\<^sub>C \\<tau>'.map ?y))) =\n                    ?f\n\ngoal (2 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G'\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (\\<psi> x\n                              (\\<mu>'.map x \\<cdot>\\<^sub>D\n                               g) \\<cdot>\\<^sub>C\n                             \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n                         \\<phi> y\n                          ((\\<psi> x\n                             (\\<mu>'.map x \\<cdot>\\<^sub>D\n                              g) \\<cdot>\\<^sub>C\n                            \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y) =\n                         g\n 2. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (f \\<cdot>\\<^sub>C\n                             h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n                         \\<phi> y'\n                          ((f \\<cdot>\\<^sub>C\n                            h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y') =\n                         G' f \\<cdot>\\<^sub>D\n                         (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n                          \\<phi> y\n                           (h \\<cdot>\\<^sub>C\n                            \\<tau>'.map y)) \\<cdot>\\<^sub>D\n                         g", "show \"\\<And>x g y. \\<lbrakk>C.ide x; \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\\<rbrakk>\n                         \\<Longrightarrow> \\<mu> (C.cod (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n                               \\<phi> y ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C \\<tau> (D.dom g)) \\<cdot>\\<^sub>C \\<tau>'.map y) =\n                             g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G'\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (\\<psi> x\n                              (\\<mu>'.map x \\<cdot>\\<^sub>D\n                               g) \\<cdot>\\<^sub>C\n                             \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n                         \\<phi> y\n                          ((\\<psi> x\n                             (\\<mu>'.map x \\<cdot>\\<^sub>D\n                              g) \\<cdot>\\<^sub>C\n                            \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y) =\n                         g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G'\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (\\<psi> x\n                              (\\<mu>'.map x \\<cdot>\\<^sub>D\n                               g) \\<cdot>\\<^sub>C\n                             \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n                         \\<phi> y\n                          ((\\<psi> x\n                             (\\<mu>'.map x \\<cdot>\\<^sub>D\n                              g) \\<cdot>\\<^sub>C\n                            \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y) =\n                         g", "fix x y g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G'\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (\\<psi> x\n                              (\\<mu>'.map x \\<cdot>\\<^sub>D\n                               g) \\<cdot>\\<^sub>C\n                             \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n                         \\<phi> y\n                          ((\\<psi> x\n                             (\\<mu>'.map x \\<cdot>\\<^sub>D\n                              g) \\<cdot>\\<^sub>C\n                            \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y) =\n                         g", "assume x: \"C.ide x\" and g: \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\""], ["proof (state)\nthis:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G'\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (\\<psi> x\n                              (\\<mu>'.map x \\<cdot>\\<^sub>D\n                               g) \\<cdot>\\<^sub>C\n                             \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n                         \\<phi> y\n                          ((\\<psi> x\n                             (\\<mu>'.map x \\<cdot>\\<^sub>D\n                              g) \\<cdot>\\<^sub>C\n                            \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y) =\n                         g", "have 1: \"\\<guillemotleft>\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     (\\<mu>'.map x \\<cdot>\\<^sub>D\n                      g) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "using x g \\<psi>_in_hom"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> ?x\n                                     ?g : F\n     ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     (\\<mu>'.map x \\<cdot>\\<^sub>D\n                      g) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<psi> x\n                   (\\<mu>'.map x \\<cdot>\\<^sub>D\n                    g) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G'\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (\\<psi> x\n                              (\\<mu>'.map x \\<cdot>\\<^sub>D\n                               g) \\<cdot>\\<^sub>C\n                             \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n                         \\<phi> y\n                          ((\\<psi> x\n                             (\\<mu>'.map x \\<cdot>\\<^sub>D\n                              g) \\<cdot>\\<^sub>C\n                            \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y) =\n                         g", "show \"\\<mu> (C.cod (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n                  \\<phi> y ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C \\<tau> (D.dom g)) \\<cdot>\\<^sub>C \\<tau>'.map y) =\n                g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n       \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n      \\<tau>'.map y) =\n    g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n       \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n      \\<tau>'.map y) =\n    g", "have \"\\<mu> (C.cod (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n                    \\<phi> y ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C \\<tau> (D.dom g)) \\<cdot>\\<^sub>C \\<tau>'.map y) =\n                  \\<mu> (C.cod (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n                    \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n       \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n      \\<tau>'.map y) =\n    \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y)", "using C.comp_assoc"], ["proof (prove)\nusing this:\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n       \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n      \\<tau>'.map y) =\n    \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y)", "by simp"], ["proof (state)\nthis:\n  \\<mu>\n   (C.cod\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n  \\<phi> y\n   ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n     \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n    \\<tau>'.map y) =\n  \\<mu>\n   (C.cod\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n  \\<phi> y\n   (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n    \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y)\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n       \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n      \\<tau>'.map y) =\n    g", "also"], ["proof (state)\nthis:\n  \\<mu>\n   (C.cod\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n  \\<phi> y\n   ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n     \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n    \\<tau>'.map y) =\n  \\<mu>\n   (C.cod\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n  \\<phi> y\n   (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n    \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y)\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n       \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n      \\<tau>'.map y) =\n    g", "have \"... = \\<mu> x \\<cdot>\\<^sub>D \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y) =\n    \\<mu> x \\<cdot>\\<^sub>D\n    \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y) =\n    \\<mu> x \\<cdot>\\<^sub>D\n    \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g))", "have \"D.dom g = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.dom g = y", "using g"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. D.dom g = y", "by auto"], ["proof (state)\nthis:\n  D.dom g = y\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y) =\n    \\<mu> x \\<cdot>\\<^sub>D\n    \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g))", "moreover"], ["proof (state)\nthis:\n  D.dom g = y\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y) =\n    \\<mu> x \\<cdot>\\<^sub>D\n    \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g))", "have \"\\<tau> y \\<cdot>\\<^sub>C \\<tau>'.map y = F y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> y \\<cdot>\\<^sub>C \\<tau>'.map y = F y", "using g \\<tau>'.inverts_components [of y]"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\n  D.ide y \\<Longrightarrow> C.inverse_arrows (\\<tau> y) (\\<tau>'.map y)\n\ngoal (1 subgoal):\n 1. \\<tau> y \\<cdot>\\<^sub>C \\<tau>'.map y = F y", "by fastforce"], ["proof (state)\nthis:\n  \\<tau> y \\<cdot>\\<^sub>C \\<tau>'.map y = F y\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y) =\n    \\<mu> x \\<cdot>\\<^sub>D\n    \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g))", "moreover"], ["proof (state)\nthis:\n  \\<tau> y \\<cdot>\\<^sub>C \\<tau>'.map y = F y\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y) =\n    \\<mu> x \\<cdot>\\<^sub>D\n    \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g))", "have \"C.cod (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C \\<tau> (D.dom g)) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.cod\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g)) =\n    x", "using g 1"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\n  \\<guillemotleft>\\<psi> x\n                   (\\<mu>'.map x \\<cdot>\\<^sub>D\n                    g) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. C.cod\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g)) =\n    x", "by fastforce"], ["proof (state)\nthis:\n  C.cod\n   (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n    \\<tau> (D.dom g)) =\n  x\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y) =\n    \\<mu> x \\<cdot>\\<^sub>D\n    \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g))", "ultimately"], ["proof (chain)\npicking this:\n  D.dom g = y\n  \\<tau> y \\<cdot>\\<^sub>C \\<tau>'.map y = F y\n  C.cod\n   (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n    \\<tau> (D.dom g)) =\n  x", "show ?thesis"], ["proof (prove)\nusing this:\n  D.dom g = y\n  \\<tau> y \\<cdot>\\<^sub>C \\<tau>'.map y = F y\n  C.cod\n   (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n    \\<tau> (D.dom g)) =\n  x\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y) =\n    \\<mu> x \\<cdot>\\<^sub>D\n    \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g))", "using x g 1 C.comp_arr_dom"], ["proof (prove)\nusing this:\n  D.dom g = y\n  \\<tau> y \\<cdot>\\<^sub>C \\<tau>'.map y = F y\n  C.cod\n   (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n    \\<tau> (D.dom g)) =\n  x\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\n  \\<guillemotleft>\\<psi> x\n                   (\\<mu>'.map x \\<cdot>\\<^sub>D\n                    g) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>C.arr ?f; C.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>C ?a = ?f\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y) =\n    \\<mu> x \\<cdot>\\<^sub>D\n    \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g))", "by auto"], ["proof (state)\nthis:\n  \\<mu>\n   (C.cod\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n  \\<phi> y\n   (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n    \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y) =\n  \\<mu> x \\<cdot>\\<^sub>D\n  \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<mu>\n   (C.cod\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n  \\<phi> y\n   (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n    \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y) =\n  \\<mu> x \\<cdot>\\<^sub>D\n  \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g))\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n       \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n      \\<tau>'.map y) =\n    g", "also"], ["proof (state)\nthis:\n  \\<mu>\n   (C.cod\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n  \\<phi> y\n   (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n    \\<tau> (D.dom g) \\<cdot>\\<^sub>C \\<tau>'.map y) =\n  \\<mu> x \\<cdot>\\<^sub>D\n  \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g))\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n       \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n      \\<tau>'.map y) =\n    g", "have \"... = \\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<mu> x \\<cdot>\\<^sub>D\n    \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g)) =\n    \\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x \\<cdot>\\<^sub>D g", "using x g \\<phi>_\\<psi>"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y (\\<psi> ?x ?g) = ?g\n\ngoal (1 subgoal):\n 1. \\<mu> x \\<cdot>\\<^sub>D\n    \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g)) =\n    \\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x \\<cdot>\\<^sub>D g", "by auto"], ["proof (state)\nthis:\n  \\<mu> x \\<cdot>\\<^sub>D\n  \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g)) =\n  \\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n       \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n      \\<tau>'.map y) =\n    g", "also"], ["proof (state)\nthis:\n  \\<mu> x \\<cdot>\\<^sub>D\n  \\<phi> y (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g)) =\n  \\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n       \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n      \\<tau>'.map y) =\n    g", "have \"... = (\\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x) \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x \\<cdot>\\<^sub>D g =\n    (\\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x) \\<cdot>\\<^sub>D g", "using D.comp_assoc"], ["proof (prove)\nusing this:\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. \\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x \\<cdot>\\<^sub>D g =\n    (\\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x) \\<cdot>\\<^sub>D g", "by simp"], ["proof (state)\nthis:\n  \\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x \\<cdot>\\<^sub>D g =\n  (\\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x) \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n       \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n      \\<tau>'.map y) =\n    g", "also"], ["proof (state)\nthis:\n  \\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x \\<cdot>\\<^sub>D g =\n  (\\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x) \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n       \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n      \\<tau>'.map y) =\n    g", "have \"... = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x) \\<cdot>\\<^sub>D g = g", "using x g \\<mu>'.inverts_components [of x] D.comp_cod_arr"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G' x\\<guillemotright>\n  C.ide x \\<Longrightarrow> D.inverse_arrows (\\<mu> x) (\\<mu>'.map x)\n  \\<lbrakk>D.arr ?f; D.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>D ?f = ?f\n\ngoal (1 subgoal):\n 1. (\\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x) \\<cdot>\\<^sub>D g = g", "by fastforce"], ["proof (state)\nthis:\n  (\\<mu> x \\<cdot>\\<^sub>D \\<mu>'.map x) \\<cdot>\\<^sub>D g = g\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n       \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n      \\<tau>'.map y) =\n    g", "finally"], ["proof (chain)\npicking this:\n  \\<mu>\n   (C.cod\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n  \\<phi> y\n   ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n     \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n    \\<tau>'.map y) =\n  g", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<mu>\n   (C.cod\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n  \\<phi> y\n   ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n     \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n    \\<tau>'.map y) =\n  g\n\ngoal (1 subgoal):\n 1. \\<mu>\n     (C.cod\n       (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n        \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n    \\<phi> y\n     ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n       \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n      \\<tau>'.map y) =\n    g", "by blast"], ["proof (state)\nthis:\n  \\<mu>\n   (C.cod\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n  \\<phi> y\n   ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n     \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n    \\<tau>'.map y) =\n  g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<mu>\n   (C.cod\n     (\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n      \\<tau> (D.dom g))) \\<cdot>\\<^sub>D\n  \\<phi> y\n   ((\\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n     \\<tau> (D.dom g)) \\<cdot>\\<^sub>C\n    \\<tau>'.map y) =\n  g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G'\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<mu>\n                     (C.cod\n                       (\\<psi> ?x\n                         (\\<mu>'.map ?x \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>C\n                        \\<tau> (D.dom ?g))) \\<cdot>\\<^sub>D\n                    \\<phi> ?y\n                     ((\\<psi> ?x\n                        (\\<mu>'.map ?x \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>C\n                       \\<tau> (D.dom ?g)) \\<cdot>\\<^sub>C\n                      \\<tau>'.map ?y) =\n                    ?g\n\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (f \\<cdot>\\<^sub>C\n                             h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n                         \\<phi> y'\n                          ((f \\<cdot>\\<^sub>C\n                            h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y') =\n                         G' f \\<cdot>\\<^sub>D\n                         (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n                          \\<phi> y\n                           (h \\<cdot>\\<^sub>C\n                            \\<tau>'.map y)) \\<cdot>\\<^sub>D\n                         g", "show \"\\<And>f x x' g y' y h. \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>; \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>; \\<guillemotleft>h : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n                  \\<Longrightarrow> \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D \\<phi> y' ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C \\<tau>'.map y') =\n                      G' f \\<cdot>\\<^sub>D (\\<mu> (C.cod h) \\<cdot>\\<^sub>D \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (f \\<cdot>\\<^sub>C\n                             h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n                         \\<phi> y'\n                          ((f \\<cdot>\\<^sub>C\n                            h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y') =\n                         G' f \\<cdot>\\<^sub>D\n                         (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n                          \\<phi> y\n                           (h \\<cdot>\\<^sub>C\n                            \\<tau>'.map y)) \\<cdot>\\<^sub>D\n                         g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (f \\<cdot>\\<^sub>C\n                             h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n                         \\<phi> y'\n                          ((f \\<cdot>\\<^sub>C\n                            h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y') =\n                         G' f \\<cdot>\\<^sub>D\n                         (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n                          \\<phi> y\n                           (h \\<cdot>\\<^sub>C\n                            \\<tau>'.map y)) \\<cdot>\\<^sub>D\n                         g", "fix x y x' y' f g h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (f \\<cdot>\\<^sub>C\n                             h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n                         \\<phi> y'\n                          ((f \\<cdot>\\<^sub>C\n                            h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y') =\n                         G' f \\<cdot>\\<^sub>D\n                         (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n                          \\<phi> y\n                           (h \\<cdot>\\<^sub>C\n                            \\<tau>'.map y)) \\<cdot>\\<^sub>D\n                         g", "assume f: \"\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\" and g: \"\\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\" and h: \"\\<guillemotleft>h : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (state)\nthis:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<mu>\n                          (C.cod\n                            (f \\<cdot>\\<^sub>C\n                             h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n                         \\<phi> y'\n                          ((f \\<cdot>\\<^sub>C\n                            h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n                           \\<tau>'.map y') =\n                         G' f \\<cdot>\\<^sub>D\n                         (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n                          \\<phi> y\n                           (h \\<cdot>\\<^sub>C\n                            \\<tau>'.map y)) \\<cdot>\\<^sub>D\n                         g", "show \"\\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D \\<phi> y' ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C \\<tau>'.map y') =\n                G' f \\<cdot>\\<^sub>D (\\<mu> (C.cod h) \\<cdot>\\<^sub>D \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    G' f \\<cdot>\\<^sub>D\n    (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n     \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n    g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    G' f \\<cdot>\\<^sub>D\n    (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n     \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n    g", "have \"\\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D \\<phi> y' ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C \\<tau>'.map y') =\n                  \\<mu> x' \\<cdot>\\<^sub>D \\<phi> y' ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C \\<tau>'.map y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    \\<mu> x' \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y')", "using f g h"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    \\<mu> x' \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y')", "by fastforce"], ["proof (state)\nthis:\n  \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n  \\<phi> y'\n   ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n    \\<tau>'.map y') =\n  \\<mu> x' \\<cdot>\\<^sub>D\n  \\<phi> y'\n   ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n    \\<tau>'.map y')\n\ngoal (1 subgoal):\n 1. \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    G' f \\<cdot>\\<^sub>D\n    (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n     \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n    g", "also"], ["proof (state)\nthis:\n  \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n  \\<phi> y'\n   ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n    \\<tau>'.map y') =\n  \\<mu> x' \\<cdot>\\<^sub>D\n  \\<phi> y'\n   ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n    \\<tau>'.map y')\n\ngoal (1 subgoal):\n 1. \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    G' f \\<cdot>\\<^sub>D\n    (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n     \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n    g", "have \"... = \\<mu> x' \\<cdot>\\<^sub>D \\<phi> y' (f \\<cdot>\\<^sub>C (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>C F g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<mu> x' \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    \\<mu> x' \\<cdot>\\<^sub>D\n    \\<phi> y'\n     (f \\<cdot>\\<^sub>C\n      (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>C F g)", "using g \\<tau>'.naturality C.comp_assoc"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  D.arr ?f \\<Longrightarrow>\n  \\<tau>'.map (D.cod ?f) \\<cdot>\\<^sub>C F ?f =\n  F' ?f \\<cdot>\\<^sub>C \\<tau>'.map (D.dom ?f)\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. \\<mu> x' \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    \\<mu> x' \\<cdot>\\<^sub>D\n    \\<phi> y'\n     (f \\<cdot>\\<^sub>C\n      (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>C F g)", "by auto"], ["proof (state)\nthis:\n  \\<mu> x' \\<cdot>\\<^sub>D\n  \\<phi> y'\n   ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n    \\<tau>'.map y') =\n  \\<mu> x' \\<cdot>\\<^sub>D\n  \\<phi> y'\n   (f \\<cdot>\\<^sub>C (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>C F g)\n\ngoal (1 subgoal):\n 1. \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    G' f \\<cdot>\\<^sub>D\n    (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n     \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n    g", "also"], ["proof (state)\nthis:\n  \\<mu> x' \\<cdot>\\<^sub>D\n  \\<phi> y'\n   ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n    \\<tau>'.map y') =\n  \\<mu> x' \\<cdot>\\<^sub>D\n  \\<phi> y'\n   (f \\<cdot>\\<^sub>C (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>C F g)\n\ngoal (1 subgoal):\n 1. \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    G' f \\<cdot>\\<^sub>D\n    (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n     \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n    g", "have \"... = (\\<mu> x' \\<cdot>\\<^sub>D G f) \\<cdot>\\<^sub>D \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<mu> x' \\<cdot>\\<^sub>D\n    \\<phi> y'\n     (f \\<cdot>\\<^sub>C\n      (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>C F g) =\n    (\\<mu> x' \\<cdot>\\<^sub>D G f) \\<cdot>\\<^sub>D\n    \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g", "using f g h \\<phi>_naturality [of f x x' g y' y \"h \\<cdot>\\<^sub>C \\<tau>'.map y\"] D.comp_assoc"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n   \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n   \\<guillemotleft>h \\<cdot>\\<^sub>C\n                   \\<tau>'.map\n                    y : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> y'\n                     (f \\<cdot>\\<^sub>C\n                      (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>C\n                      F g) =\n                    G f \\<cdot>\\<^sub>D\n                    \\<phi> y\n                     (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D\n                    g\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. \\<mu> x' \\<cdot>\\<^sub>D\n    \\<phi> y'\n     (f \\<cdot>\\<^sub>C\n      (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>C F g) =\n    (\\<mu> x' \\<cdot>\\<^sub>D G f) \\<cdot>\\<^sub>D\n    \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g", "by fastforce"], ["proof (state)\nthis:\n  \\<mu> x' \\<cdot>\\<^sub>D\n  \\<phi> y'\n   (f \\<cdot>\\<^sub>C\n    (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>C F g) =\n  (\\<mu> x' \\<cdot>\\<^sub>D G f) \\<cdot>\\<^sub>D\n  \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    G' f \\<cdot>\\<^sub>D\n    (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n     \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n    g", "also"], ["proof (state)\nthis:\n  \\<mu> x' \\<cdot>\\<^sub>D\n  \\<phi> y'\n   (f \\<cdot>\\<^sub>C\n    (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>C F g) =\n  (\\<mu> x' \\<cdot>\\<^sub>D G f) \\<cdot>\\<^sub>D\n  \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    G' f \\<cdot>\\<^sub>D\n    (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n     \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n    g", "have \"... = (G' f \\<cdot>\\<^sub>D \\<mu> x) \\<cdot>\\<^sub>D \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<mu> x' \\<cdot>\\<^sub>D G f) \\<cdot>\\<^sub>D\n    \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g =\n    (G' f \\<cdot>\\<^sub>D \\<mu> x) \\<cdot>\\<^sub>D\n    \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g", "using f \\<mu>.naturality"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  C.arr ?f \\<Longrightarrow>\n  \\<mu> (C.cod ?f) \\<cdot>\\<^sub>D G ?f =\n  G' ?f \\<cdot>\\<^sub>D \\<mu> (C.dom ?f)\n\ngoal (1 subgoal):\n 1. (\\<mu> x' \\<cdot>\\<^sub>D G f) \\<cdot>\\<^sub>D\n    \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g =\n    (G' f \\<cdot>\\<^sub>D \\<mu> x) \\<cdot>\\<^sub>D\n    \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g", "by auto"], ["proof (state)\nthis:\n  (\\<mu> x' \\<cdot>\\<^sub>D G f) \\<cdot>\\<^sub>D\n  \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g =\n  (G' f \\<cdot>\\<^sub>D \\<mu> x) \\<cdot>\\<^sub>D\n  \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    G' f \\<cdot>\\<^sub>D\n    (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n     \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n    g", "also"], ["proof (state)\nthis:\n  (\\<mu> x' \\<cdot>\\<^sub>D G f) \\<cdot>\\<^sub>D\n  \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g =\n  (G' f \\<cdot>\\<^sub>D \\<mu> x) \\<cdot>\\<^sub>D\n  \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    G' f \\<cdot>\\<^sub>D\n    (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n     \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n    g", "have \"... = G' f \\<cdot>\\<^sub>D (\\<mu> (C.cod h) \\<cdot>\\<^sub>D \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G' f \\<cdot>\\<^sub>D \\<mu> x) \\<cdot>\\<^sub>D\n    \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g =\n    G' f \\<cdot>\\<^sub>D\n    (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n     \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n    g", "using h D.comp_assoc"], ["proof (prove)\nusing this:\n  \\<guillemotleft>h : F' y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. (G' f \\<cdot>\\<^sub>D \\<mu> x) \\<cdot>\\<^sub>D\n    \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g =\n    G' f \\<cdot>\\<^sub>D\n    (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n     \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n    g", "by auto"], ["proof (state)\nthis:\n  (G' f \\<cdot>\\<^sub>D \\<mu> x) \\<cdot>\\<^sub>D\n  \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y) \\<cdot>\\<^sub>D g =\n  G' f \\<cdot>\\<^sub>D\n  (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n   \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n  g\n\ngoal (1 subgoal):\n 1. \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    G' f \\<cdot>\\<^sub>D\n    (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n     \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n    g", "finally"], ["proof (chain)\npicking this:\n  \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n  \\<phi> y'\n   ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n    \\<tau>'.map y') =\n  G' f \\<cdot>\\<^sub>D\n  (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n   \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n  g", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n  \\<phi> y'\n   ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n    \\<tau>'.map y') =\n  G' f \\<cdot>\\<^sub>D\n  (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n   \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n  g\n\ngoal (1 subgoal):\n 1. \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n    \\<phi> y'\n     ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n      \\<tau>'.map y') =\n    G' f \\<cdot>\\<^sub>D\n    (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n     \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n    g", "by blast"], ["proof (state)\nthis:\n  \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n  \\<phi> y'\n   ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n    \\<tau>'.map y') =\n  G' f \\<cdot>\\<^sub>D\n  (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n   \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n  g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<mu> (C.cod (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g)) \\<cdot>\\<^sub>D\n  \\<phi> y'\n   ((f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F' g) \\<cdot>\\<^sub>C\n    \\<tau>'.map y') =\n  G' f \\<cdot>\\<^sub>D\n  (\\<mu> (C.cod h) \\<cdot>\\<^sub>D\n   \\<phi> y (h \\<cdot>\\<^sub>C \\<tau>'.map y)) \\<cdot>\\<^sub>D\n  g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>\\<guillemotleft>?f : ?x \\<rightarrow>\\<^sub>C ?x'\\<guillemotright>;\n   \\<guillemotleft>?g : ?y' \\<rightarrow>\\<^sub>D ?y\\<guillemotright>;\n   \\<guillemotleft>?h : F' ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<mu>\n                     (C.cod\n                       (?f \\<cdot>\\<^sub>C\n                        ?h \\<cdot>\\<^sub>C F' ?g)) \\<cdot>\\<^sub>D\n                    \\<phi> ?y'\n                     ((?f \\<cdot>\\<^sub>C\n                       ?h \\<cdot>\\<^sub>C F' ?g) \\<cdot>\\<^sub>C\n                      \\<tau>'.map ?y') =\n                    G' ?f \\<cdot>\\<^sub>D\n                    (\\<mu> (C.cod ?h) \\<cdot>\\<^sub>D\n                     \\<phi> ?y\n                      (?h \\<cdot>\\<^sub>C \\<tau>'.map ?y)) \\<cdot>\\<^sub>D\n                    ?g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F' G'\n   (\\<lambda>y f.\n       \\<mu> (C.cod f) \\<cdot>\\<^sub>D\n       \\<phi> y (f \\<cdot>\\<^sub>C \\<tau>'.map y))\n   (\\<lambda>x g.\n       \\<psi> x (\\<mu>'.map x \\<cdot>\\<^sub>D g) \\<cdot>\\<^sub>C\n       \\<tau> (D.dom g))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \"Hom-Adjunction\""], ["", "text\\<open>\n    The bijection between hom-sets that defines an adjunction can be represented\n    formally as a natural isomorphism of hom-functors.  However, stating the definition\n    this way is more complex than was the case for \\<open>meta_adjunction\\<close>.\n    One reason is that we need to have a ``set category'' that is suitable as\n    a target category for the hom-functors, and since the arrows of the categories\n    @{term C} and @{term D} will in general have distinct types, we need a set category\n    that simultaneously embeds both.  Another reason is that we simply have to formally\n    construct the various categories and functors required to express the definition.\n\n    This is a good place to point out that I have often included more sublocales\n    in a locale than are strictly required.  The main reason for this is the fact that\n    the locale system in Isabelle only gives one name to each entity introduced by\n    a locale: the name that it has in the first locale in which it occurs.\n    This means that entities that make their first appearance deeply nested in sublocales\n    will have to be referred to by long qualified names that can be difficult to\n    understand, or even to discover.  To counteract this, I have typically introduced\n    sublocales before the superlocales that contain them to ensure that the entities\n    in the sublocales can be referred to by short meaningful (and predictable) names.\n    In my opinion, though, it would be better if the locale system would make entities\n    that occur in multiple locales accessible by \\emph{all} possible qualified names,\n    so that the most perspicuous name could be used in any particular context.\n\\<close>"], ["", "locale hom_adjunction =\n    C: category C +\n    D: category D +\n    S: replete_set_category S +\n    Cop: dual_category C +\n    Dop: dual_category D +\n    CopxC: product_category Cop.comp C +\n    DopxD: product_category Dop.comp D +\n    DopxC: product_category Dop.comp C +\n    F: \"functor\" D C F +\n    G: \"functor\" C D G +\n    HomC: hom_functor C S \\<phi>C +\n    HomD: hom_functor D S \\<phi>D +\n    Fop: dual_functor Dop.comp Cop.comp F +\n    FopxC: product_functor Dop.comp C Cop.comp C Fop.map C.map +\n    DopxG: product_functor Dop.comp C Dop.comp D Dop.map G +\n    Hom_FopxC: composite_functor DopxC.comp CopxC.comp S FopxC.map HomC.map +\n    Hom_DopxG: composite_functor DopxC.comp DopxD.comp S DopxG.map HomD.map +\n    Hom_FopxC: set_valued_functor DopxC.comp S Hom_FopxC.map +\n    Hom_DopxG: set_valued_functor DopxC.comp S Hom_DopxG.map +\n    \\<Phi>: set_valued_transformation DopxC.comp S Hom_FopxC.map Hom_DopxG.map \\<Phi> +\n    \\<Psi>: set_valued_transformation DopxC.comp S Hom_DopxG.map Hom_FopxC.map \\<Psi> +\n    \\<Phi>\\<Psi>: inverse_transformations DopxC.comp S Hom_FopxC.map Hom_DopxG.map \\<Phi> \\<Psi>\n    for C :: \"'c comp\"     (infixr \"\\<cdot>\\<^sub>C\" 55)\n    and D :: \"'d comp\"     (infixr \"\\<cdot>\\<^sub>D\" 55)\n    and S :: \"'s comp\"     (infixr \"\\<cdot>\\<^sub>S\" 55)\n    and \\<phi>C :: \"'c * 'c \\<Rightarrow> 'c \\<Rightarrow> 's\"\n    and \\<phi>D :: \"'d * 'd \\<Rightarrow> 'd \\<Rightarrow> 's\"\n    and F :: \"'d \\<Rightarrow> 'c\"\n    and G :: \"'c \\<Rightarrow> 'd\"\n    and \\<Phi> :: \"'d * 'c \\<Rightarrow> 's\"\n    and \\<Psi> :: \"'d * 'c \\<Rightarrow> 's\"\n  begin"], ["", "notation C.in_hom      (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>C _\\<guillemotright>\")"], ["", "notation D.in_hom      (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>D _\\<guillemotright>\")"], ["", "abbreviation \\<psi>C :: \"'c * 'c \\<Rightarrow> 's \\<Rightarrow> 'c\"\n    where \"\\<psi>C \\<equiv> HomC.\\<psi>\""], ["", "abbreviation \\<psi>D :: \"'d * 'd \\<Rightarrow> 's \\<Rightarrow> 'd\"\n    where \"\\<psi>D \\<equiv> HomD.\\<psi>\""], ["", "end"], ["", "subsection \"Unit/Counit Adjunction\""], ["", "text\\<open>\n    Expressed in unit/counit terms, an adjunction consists of functors\n    \\<open>F: D \\<rightarrow> C\\<close> and \\<open>G: C \\<rightarrow> D\\<close>, equipped with natural transformations\n    \\<open>\\<eta>: 1 \\<rightarrow> GF\\<close> and \\<open>\\<epsilon>: FG \\<rightarrow> 1\\<close> satisfying certain ``triangle identities''.\n\\<close>"], ["", "locale unit_counit_adjunction =\n    C: category C +\n    D: category D +\n    F: \"functor\" D C F +\n    G: \"functor\" C D G +\n    GF: composite_functor D C D F G +\n    FG: composite_functor C D C G F +\n    FGF: composite_functor D C C F \\<open>F o G\\<close> +\n    GFG: composite_functor C D D G \\<open>G o F\\<close> +\n    \\<eta>: natural_transformation D D D.map \\<open>G o F\\<close> \\<eta> +\n    \\<epsilon>: natural_transformation C C \\<open>F o G\\<close> C.map \\<epsilon> +\n    F\\<eta>: natural_transformation D C F \\<open>F o G o F\\<close> \\<open>F o \\<eta>\\<close> +\n    \\<eta>G: natural_transformation C D G \\<open>G o F o G\\<close> \\<open>\\<eta> o G\\<close> +\n    \\<epsilon>F: natural_transformation D C \\<open>F o G o F\\<close> F \\<open>\\<epsilon> o F\\<close> +\n    G\\<epsilon>: natural_transformation C D \\<open>G o F o G\\<close> G \\<open>G o \\<epsilon>\\<close> +\n    \\<epsilon>FoF\\<eta>: vertical_composite D C F \\<open>F o G o F\\<close> F \\<open>F o \\<eta>\\<close> \\<open>\\<epsilon> o F\\<close> +\n    G\\<epsilon>o\\<eta>G: vertical_composite C D G \\<open>G o F o G\\<close> G \\<open>\\<eta> o G\\<close> \\<open>G o \\<epsilon>\\<close>\n    for C :: \"'c comp\"     (infixr \"\\<cdot>\\<^sub>C\" 55)\n    and D :: \"'d comp\"     (infixr \"\\<cdot>\\<^sub>D\" 55)\n    and F :: \"'d \\<Rightarrow> 'c\"\n    and G :: \"'c \\<Rightarrow> 'd\"\n    and \\<eta> :: \"'d \\<Rightarrow> 'd\"\n    and \\<epsilon> :: \"'c \\<Rightarrow> 'c\" +\n    assumes triangle_F: \"\\<epsilon>FoF\\<eta>.map = F\"\n    and triangle_G: \"G\\<epsilon>o\\<eta>G.map = G\"\n  begin"], ["", "notation C.in_hom      (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>C _\\<guillemotright>\")"], ["", "notation D.in_hom      (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>D _\\<guillemotright>\")"], ["", "end"], ["", "lemma unit_determines_counit:\n  assumes \"unit_counit_adjunction C D F G \\<eta> \\<epsilon>\"\n  and \"unit_counit_adjunction C D F G \\<eta> \\<epsilon>'\"\n  shows \"\\<epsilon> = \\<epsilon>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "(* IDEA:  \\<epsilon>' = \\<epsilon>'FG o (FG\\<epsilon> o F\\<eta>G) = \\<epsilon>'\\<epsilon> o F\\<eta>G = \\<epsilon>FG o (\\<epsilon>'FG o F\\<eta>G) = \\<epsilon> *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "interpret Adj: unit_counit_adjunction C D F G \\<eta> \\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_counit_adjunction C D F G \\<eta> \\<epsilon>", "using assms(1)"], ["proof (prove)\nusing this:\n  unit_counit_adjunction C D F G \\<eta> \\<epsilon>\n\ngoal (1 subgoal):\n 1. unit_counit_adjunction C D F G \\<eta> \\<epsilon>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "interpret Adj': unit_counit_adjunction C D F G \\<eta> \\<epsilon>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_counit_adjunction C D F G \\<eta> \\<epsilon>'", "using assms(2)"], ["proof (prove)\nusing this:\n  unit_counit_adjunction C D F G \\<eta> \\<epsilon>'\n\ngoal (1 subgoal):\n 1. unit_counit_adjunction C D F G \\<eta> \\<epsilon>'", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "interpret FGFG: composite_functor C D C G \\<open>F o G o F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor C D C G Adj.FGF.map", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "interpret FG\\<epsilon>: natural_transformation C C \\<open>(F o G) o (F o G)\\<close> \\<open>F o G\\<close> \\<open>(F o G) o \\<epsilon>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation C C (Adj.FG.map \\<circ> Adj.FG.map) Adj.FG.map\n     (Adj.FG.map \\<circ> \\<epsilon>)", "using Adj.\\<epsilon>.natural_transformation_axioms Adj.FG.natural_transformation_axioms\n            horizontal_composite Adj.FG.functor_axioms"], ["proof (prove)\nusing this:\n  natural_transformation C C Adj.FG.map Adj.C.map \\<epsilon>\n  natural_transformation C C Adj.FG.map Adj.FG.map Adj.FG.map\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n  functor C C Adj.FG.map\n\ngoal (1 subgoal):\n 1. natural_transformation C C (Adj.FG.map \\<circ> Adj.FG.map) Adj.FG.map\n     (Adj.FG.map \\<circ> \\<epsilon>)", "by fastforce"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "interpret F\\<eta>G: natural_transformation C C \\<open>F o G\\<close> \\<open>F o G o F o G\\<close> \\<open>F o \\<eta> o G\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation C C Adj.FG.map FGFG.map\n     (F \\<circ> \\<eta> \\<circ> G)", "using Adj.\\<eta>.natural_transformation_axioms Adj.F\\<eta>.natural_transformation_axioms\n            Adj.G.natural_transformation_axioms horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation D D Adj.D.map Adj.GF.map \\<eta>\n  natural_transformation D C F Adj.FGF.map (F \\<circ> \\<eta>)\n  natural_transformation C D G G G\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation C C Adj.FG.map FGFG.map\n     (F \\<circ> \\<eta> \\<circ> G)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "interpret \\<epsilon>'\\<epsilon>: natural_transformation C C \\<open>F o G o F o G\\<close> Adj.C.map \\<open>\\<epsilon>' o \\<epsilon>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation C C FGFG.map Adj.C.map\n     (\\<epsilon>' \\<circ> \\<epsilon>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation C C FGFG.map Adj.C.map\n     (\\<epsilon>' \\<circ> \\<epsilon>)", "have \"natural_transformation C C ((F o G) o (F o G)) Adj.C.map (\\<epsilon>' o \\<epsilon>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation C C (Adj.FG.map \\<circ> Adj.FG.map) Adj.C.map\n     (\\<epsilon>' \\<circ> \\<epsilon>)", "using Adj.\\<epsilon>.natural_transformation_axioms Adj'.\\<epsilon>.natural_transformation_axioms\n              horizontal_composite Adj.C.is_functor comp_functor_identity"], ["proof (prove)\nusing this:\n  natural_transformation C C Adj.FG.map Adj.C.map \\<epsilon>\n  natural_transformation C C Adj.FG.map Adj.C.map \\<epsilon>'\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n  functor C C Adj.C.map\n  functor ?A ?B ?F \\<Longrightarrow> ?F \\<circ> identity_functor.map ?A = ?F\n\ngoal (1 subgoal):\n 1. natural_transformation C C (Adj.FG.map \\<circ> Adj.FG.map) Adj.C.map\n     (\\<epsilon>' \\<circ> \\<epsilon>)", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  natural_transformation C C (Adj.FG.map \\<circ> Adj.FG.map) Adj.C.map\n   (\\<epsilon>' \\<circ> \\<epsilon>)\n\ngoal (1 subgoal):\n 1. natural_transformation C C FGFG.map Adj.C.map\n     (\\<epsilon>' \\<circ> \\<epsilon>)", "thus \"natural_transformation C C (F o G o F o G) Adj.C.map (\\<epsilon>' o \\<epsilon>)\""], ["proof (prove)\nusing this:\n  natural_transformation C C (Adj.FG.map \\<circ> Adj.FG.map) Adj.C.map\n   (\\<epsilon>' \\<circ> \\<epsilon>)\n\ngoal (1 subgoal):\n 1. natural_transformation C C FGFG.map Adj.C.map\n     (\\<epsilon>' \\<circ> \\<epsilon>)", "using o_assoc"], ["proof (prove)\nusing this:\n  natural_transformation C C (Adj.FG.map \\<circ> Adj.FG.map) Adj.C.map\n   (\\<epsilon>' \\<circ> \\<epsilon>)\n  ?f \\<circ> (?g \\<circ> ?h) = ?f \\<circ> ?g \\<circ> ?h\n\ngoal (1 subgoal):\n 1. natural_transformation C C FGFG.map Adj.C.map\n     (\\<epsilon>' \\<circ> \\<epsilon>)", "by metis"], ["proof (state)\nthis:\n  natural_transformation C C FGFG.map Adj.C.map\n   (\\<epsilon>' \\<circ> \\<epsilon>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "interpret \\<epsilon>'\\<epsilon>oF\\<eta>G: vertical_composite\n                         C C \\<open>F o G\\<close> \\<open>F o G o F o G\\<close> Adj.C.map \\<open>F o \\<eta> o G\\<close> \\<open>\\<epsilon>' o \\<epsilon>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite C C Adj.FG.map FGFG.map Adj.C.map\n     (F \\<circ> \\<eta> \\<circ> G) (\\<epsilon>' \\<circ> \\<epsilon>)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "have \"\\<epsilon>' = vertical_composite.map C C (F o Adj.G\\<epsilon>o\\<eta>G.map) \\<epsilon>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>' =\n    vertical_composite.map C C (F \\<circ> Adj.G\\<epsilon>o\\<eta>G.map)\n     \\<epsilon>'", "using vcomp_ide_dom [of C C \"F o G\" Adj.C.map \\<epsilon>'] Adj.triangle_G"], ["proof (prove)\nusing this:\n  natural_transformation C C Adj.FG.map Adj.C.map\n   \\<epsilon>' \\<Longrightarrow>\n  vertical_composite.map C C Adj.FG.map \\<epsilon>' = \\<epsilon>'\n  Adj.G\\<epsilon>o\\<eta>G.map = G\n\ngoal (1 subgoal):\n 1. \\<epsilon>' =\n    vertical_composite.map C C (F \\<circ> Adj.G\\<epsilon>o\\<eta>G.map)\n     \\<epsilon>'", "by (simp add: Adj'.\\<epsilon>.natural_transformation_axioms)"], ["proof (state)\nthis:\n  \\<epsilon>' =\n  vertical_composite.map C C (F \\<circ> Adj.G\\<epsilon>o\\<eta>G.map)\n   \\<epsilon>'\n\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "also"], ["proof (state)\nthis:\n  \\<epsilon>' =\n  vertical_composite.map C C (F \\<circ> Adj.G\\<epsilon>o\\<eta>G.map)\n   \\<epsilon>'\n\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "have \"... = vertical_composite.map C C\n                       (vertical_composite.map C C (F o \\<eta> o G) (F o G o \\<epsilon>)) \\<epsilon>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map C C (F \\<circ> Adj.G\\<epsilon>o\\<eta>G.map)\n     \\<epsilon>' =\n    vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (Adj.FG.map \\<circ> \\<epsilon>))\n     \\<epsilon>'", "using whisker_left Adj.F.functor_axioms Adj.G\\<epsilon>.natural_transformation_axioms\n            Adj.\\<eta>G.natural_transformation_axioms o_assoc"], ["proof (prove)\nusing this:\n  \\<lbrakk>functor ?B ?C ?K; natural_transformation ?A ?B ?F ?G ?\\<tau>;\n   natural_transformation ?A ?B ?G ?H ?\\<tau>'\\<rbrakk>\n  \\<Longrightarrow> ?K \\<circ>\n                    vertical_composite.map ?A ?B ?\\<tau> ?\\<tau>' =\n                    vertical_composite.map ?A ?C (?K \\<circ> ?\\<tau>)\n                     (?K \\<circ> ?\\<tau>')\n  functor D C F\n  natural_transformation C D Adj.GFG.map G (G \\<circ> \\<epsilon>)\n  natural_transformation C D G Adj.GFG.map (\\<eta> \\<circ> G)\n  ?f \\<circ> (?g \\<circ> ?h) = ?f \\<circ> ?g \\<circ> ?h\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C (F \\<circ> Adj.G\\<epsilon>o\\<eta>G.map)\n     \\<epsilon>' =\n    vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (Adj.FG.map \\<circ> \\<epsilon>))\n     \\<epsilon>'", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  vertical_composite.map C C (F \\<circ> Adj.G\\<epsilon>o\\<eta>G.map)\n   \\<epsilon>' =\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (Adj.FG.map \\<circ> \\<epsilon>))\n   \\<epsilon>'\n\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "also"], ["proof (state)\nthis:\n  vertical_composite.map C C (F \\<circ> Adj.G\\<epsilon>o\\<eta>G.map)\n   \\<epsilon>' =\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (Adj.FG.map \\<circ> \\<epsilon>))\n   \\<epsilon>'\n\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "have \"... = vertical_composite.map C C\n                       (vertical_composite.map C C (F o \\<eta> o G) (\\<epsilon>' o F o G)) \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (Adj.FG.map \\<circ> \\<epsilon>))\n     \\<epsilon>' =\n    vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (\\<epsilon>' \\<circ> F \\<circ> G))\n     \\<epsilon>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (Adj.FG.map \\<circ> \\<epsilon>))\n     \\<epsilon>' =\n    vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (\\<epsilon>' \\<circ> F \\<circ> G))\n     \\<epsilon>", "have \"vertical_composite.map C C\n              (vertical_composite.map C C (F o \\<eta> o G) (F o G o \\<epsilon>)) \\<epsilon>'\n              = vertical_composite.map C C (F o \\<eta> o G)\n                  (vertical_composite.map C C (F o G o \\<epsilon>) \\<epsilon>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (Adj.FG.map \\<circ> \\<epsilon>))\n     \\<epsilon>' =\n    vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>)\n       \\<epsilon>')", "using vcomp_assoc"], ["proof (prove)\nusing this:\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<rho>;\n   natural_transformation ?A ?B ?G ?H ?\\<sigma>;\n   natural_transformation ?A ?B ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> vertical_composite.map ?A ?B\n                     (vertical_composite.map ?A ?B ?\\<rho> ?\\<sigma>)\n                     ?\\<tau> =\n                    vertical_composite.map ?A ?B ?\\<rho>\n                     (vertical_composite.map ?A ?B ?\\<sigma> ?\\<tau>)\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (Adj.FG.map \\<circ> \\<epsilon>))\n     \\<epsilon>' =\n    vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>)\n       \\<epsilon>')", "by (metis (no_types, lifting) Adj'.\\<epsilon>.natural_transformation_axioms\n            FG\\<epsilon>.natural_transformation_axioms F\\<eta>G.natural_transformation_axioms o_assoc)"], ["proof (state)\nthis:\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (Adj.FG.map \\<circ> \\<epsilon>))\n   \\<epsilon>' =\n  vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n   (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>) \\<epsilon>')\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (Adj.FG.map \\<circ> \\<epsilon>))\n     \\<epsilon>' =\n    vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (\\<epsilon>' \\<circ> F \\<circ> G))\n     \\<epsilon>", "also"], ["proof (state)\nthis:\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (Adj.FG.map \\<circ> \\<epsilon>))\n   \\<epsilon>' =\n  vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n   (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>) \\<epsilon>')\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (Adj.FG.map \\<circ> \\<epsilon>))\n     \\<epsilon>' =\n    vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (\\<epsilon>' \\<circ> F \\<circ> G))\n     \\<epsilon>", "have \"... = vertical_composite.map C C (F o \\<eta> o G)\n                         (vertical_composite.map C C (\\<epsilon>' o F o G) \\<epsilon>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>)\n       \\<epsilon>') =\n    vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (\\<epsilon>' \\<circ> F \\<circ> G)\n       \\<epsilon>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>)\n       \\<epsilon>') =\n    vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (\\<epsilon>' \\<circ> F \\<circ> G)\n       \\<epsilon>)", "have \"\\<epsilon>' \\<circ> Adj.C.map = \\<epsilon>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>' \\<circ> Adj.C.map = \\<epsilon>'", "using Adj'.\\<epsilon>.natural_transformation_axioms hcomp_ide_dom"], ["proof (prove)\nusing this:\n  natural_transformation C C Adj.FG.map Adj.C.map \\<epsilon>'\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<Longrightarrow>\n  ?\\<tau> \\<circ> identity_functor.map ?A = ?\\<tau>\n\ngoal (1 subgoal):\n 1. \\<epsilon>' \\<circ> Adj.C.map = \\<epsilon>'", "by simp"], ["proof (state)\nthis:\n  \\<epsilon>' \\<circ> Adj.C.map = \\<epsilon>'\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>)\n       \\<epsilon>') =\n    vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (\\<epsilon>' \\<circ> F \\<circ> G)\n       \\<epsilon>)", "moreover"], ["proof (state)\nthis:\n  \\<epsilon>' \\<circ> Adj.C.map = \\<epsilon>'\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>)\n       \\<epsilon>') =\n    vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (\\<epsilon>' \\<circ> F \\<circ> G)\n       \\<epsilon>)", "have \"Adj.C.map \\<circ> \\<epsilon> = \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Adj.C.map \\<circ> \\<epsilon> = \\<epsilon>", "using Adj.\\<epsilon>.natural_transformation_axioms hcomp_ide_cod"], ["proof (prove)\nusing this:\n  natural_transformation C C Adj.FG.map Adj.C.map \\<epsilon>\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<Longrightarrow>\n  identity_functor.map ?B \\<circ> ?\\<tau> = ?\\<tau>\n\ngoal (1 subgoal):\n 1. Adj.C.map \\<circ> \\<epsilon> = \\<epsilon>", "by simp"], ["proof (state)\nthis:\n  Adj.C.map \\<circ> \\<epsilon> = \\<epsilon>\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>)\n       \\<epsilon>') =\n    vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (\\<epsilon>' \\<circ> F \\<circ> G)\n       \\<epsilon>)", "moreover"], ["proof (state)\nthis:\n  Adj.C.map \\<circ> \\<epsilon> = \\<epsilon>\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>)\n       \\<epsilon>') =\n    vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (\\<epsilon>' \\<circ> F \\<circ> G)\n       \\<epsilon>)", "have \"\\<epsilon>' \\<circ> (F o G) = \\<epsilon>' o F \\<circ> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>' \\<circ> Adj.FG.map = \\<epsilon>' \\<circ> F \\<circ> G", "by auto"], ["proof (state)\nthis:\n  \\<epsilon>' \\<circ> Adj.FG.map = \\<epsilon>' \\<circ> F \\<circ> G\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>)\n       \\<epsilon>') =\n    vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (\\<epsilon>' \\<circ> F \\<circ> G)\n       \\<epsilon>)", "ultimately"], ["proof (chain)\npicking this:\n  \\<epsilon>' \\<circ> Adj.C.map = \\<epsilon>'\n  Adj.C.map \\<circ> \\<epsilon> = \\<epsilon>\n  \\<epsilon>' \\<circ> Adj.FG.map = \\<epsilon>' \\<circ> F \\<circ> G", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<epsilon>' \\<circ> Adj.C.map = \\<epsilon>'\n  Adj.C.map \\<circ> \\<epsilon> = \\<epsilon>\n  \\<epsilon>' \\<circ> Adj.FG.map = \\<epsilon>' \\<circ> F \\<circ> G\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>)\n       \\<epsilon>') =\n    vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (\\<epsilon>' \\<circ> F \\<circ> G)\n       \\<epsilon>)", "using Adj'.\\<epsilon>.natural_transformation_axioms Adj.\\<epsilon>.natural_transformation_axioms\n                interchange_spc [of C C \"F o G\" Adj.C.map \\<epsilon> C \"F o G\" Adj.C.map \\<epsilon>']"], ["proof (prove)\nusing this:\n  \\<epsilon>' \\<circ> Adj.C.map = \\<epsilon>'\n  Adj.C.map \\<circ> \\<epsilon> = \\<epsilon>\n  \\<epsilon>' \\<circ> Adj.FG.map = \\<epsilon>' \\<circ> F \\<circ> G\n  natural_transformation C C Adj.FG.map Adj.C.map \\<epsilon>'\n  natural_transformation C C Adj.FG.map Adj.C.map \\<epsilon>\n  \\<lbrakk>natural_transformation C C Adj.FG.map Adj.C.map \\<epsilon>;\n   natural_transformation C C Adj.FG.map Adj.C.map \\<epsilon>'\\<rbrakk>\n  \\<Longrightarrow> \\<epsilon>' \\<circ> \\<epsilon> =\n                    vertical_composite.map C C\n                     (Adj.FG.map \\<circ> \\<epsilon>)\n                     (\\<epsilon>' \\<circ> Adj.C.map)\n  \\<lbrakk>natural_transformation C C Adj.FG.map Adj.C.map \\<epsilon>;\n   natural_transformation C C Adj.FG.map Adj.C.map \\<epsilon>'\\<rbrakk>\n  \\<Longrightarrow> \\<epsilon>' \\<circ> \\<epsilon> =\n                    vertical_composite.map C C\n                     (\\<epsilon>' \\<circ> Adj.FG.map)\n                     (Adj.C.map \\<circ> \\<epsilon>)\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>)\n       \\<epsilon>') =\n    vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (\\<epsilon>' \\<circ> F \\<circ> G)\n       \\<epsilon>)", "by simp"], ["proof (state)\nthis:\n  vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n   (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>)\n     \\<epsilon>') =\n  vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n   (vertical_composite.map C C (\\<epsilon>' \\<circ> F \\<circ> G) \\<epsilon>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n   (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>)\n     \\<epsilon>') =\n  vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n   (vertical_composite.map C C (\\<epsilon>' \\<circ> F \\<circ> G) \\<epsilon>)\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (Adj.FG.map \\<circ> \\<epsilon>))\n     \\<epsilon>' =\n    vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (\\<epsilon>' \\<circ> F \\<circ> G))\n     \\<epsilon>", "also"], ["proof (state)\nthis:\n  vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n   (vertical_composite.map C C (Adj.FG.map \\<circ> \\<epsilon>)\n     \\<epsilon>') =\n  vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n   (vertical_composite.map C C (\\<epsilon>' \\<circ> F \\<circ> G) \\<epsilon>)\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (Adj.FG.map \\<circ> \\<epsilon>))\n     \\<epsilon>' =\n    vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (\\<epsilon>' \\<circ> F \\<circ> G))\n     \\<epsilon>", "have \"... = vertical_composite.map C C\n                         (vertical_composite.map C C (F o \\<eta> o G) (\\<epsilon>' o F o G)) \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (\\<epsilon>' \\<circ> F \\<circ> G)\n       \\<epsilon>) =\n    vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (\\<epsilon>' \\<circ> F \\<circ> G))\n     \\<epsilon>", "using vcomp_assoc"], ["proof (prove)\nusing this:\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<rho>;\n   natural_transformation ?A ?B ?G ?H ?\\<sigma>;\n   natural_transformation ?A ?B ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> vertical_composite.map ?A ?B\n                     (vertical_composite.map ?A ?B ?\\<rho> ?\\<sigma>)\n                     ?\\<tau> =\n                    vertical_composite.map ?A ?B ?\\<rho>\n                     (vertical_composite.map ?A ?B ?\\<sigma> ?\\<tau>)\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (vertical_composite.map C C (\\<epsilon>' \\<circ> F \\<circ> G)\n       \\<epsilon>) =\n    vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (\\<epsilon>' \\<circ> F \\<circ> G))\n     \\<epsilon>", "by (metis Adj'.\\<epsilon>F.natural_transformation_axioms Adj.G.natural_transformation_axioms\n            Adj.\\<epsilon>.natural_transformation_axioms F\\<eta>G.natural_transformation_axioms\n            horizontal_composite)"], ["proof (state)\nthis:\n  vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n   (vertical_composite.map C C (\\<epsilon>' \\<circ> F \\<circ> G)\n     \\<epsilon>) =\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (\\<epsilon>' \\<circ> F \\<circ> G))\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (Adj.FG.map \\<circ> \\<epsilon>))\n     \\<epsilon>' =\n    vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (\\<epsilon>' \\<circ> F \\<circ> G))\n     \\<epsilon>", "finally"], ["proof (chain)\npicking this:\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (Adj.FG.map \\<circ> \\<epsilon>))\n   \\<epsilon>' =\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (\\<epsilon>' \\<circ> F \\<circ> G))\n   \\<epsilon>", "show ?thesis"], ["proof (prove)\nusing this:\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (Adj.FG.map \\<circ> \\<epsilon>))\n   \\<epsilon>' =\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (\\<epsilon>' \\<circ> F \\<circ> G))\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (Adj.FG.map \\<circ> \\<epsilon>))\n     \\<epsilon>' =\n    vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (\\<epsilon>' \\<circ> F \\<circ> G))\n     \\<epsilon>", "by simp"], ["proof (state)\nthis:\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (Adj.FG.map \\<circ> \\<epsilon>))\n   \\<epsilon>' =\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (\\<epsilon>' \\<circ> F \\<circ> G))\n   \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (Adj.FG.map \\<circ> \\<epsilon>))\n   \\<epsilon>' =\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (\\<epsilon>' \\<circ> F \\<circ> G))\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "also"], ["proof (state)\nthis:\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (Adj.FG.map \\<circ> \\<epsilon>))\n   \\<epsilon>' =\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (\\<epsilon>' \\<circ> F \\<circ> G))\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "have \"... = vertical_composite.map C C\n                       (vertical_composite.map D C (F o \\<eta>) (\\<epsilon>' o F) o G) \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (\\<epsilon>' \\<circ> F \\<circ> G))\n     \\<epsilon> =\n    vertical_composite.map C C (Adj'.\\<epsilon>FoF\\<eta>.map \\<circ> G)\n     \\<epsilon>", "using whisker_right Adj'.\\<epsilon>F.natural_transformation_axioms\n            Adj.F\\<eta>.natural_transformation_axioms Adj.G.functor_axioms"], ["proof (prove)\nusing this:\n  \\<lbrakk>functor ?A ?B ?F; natural_transformation ?B ?C ?H ?K ?\\<tau>;\n   natural_transformation ?B ?C ?K ?L ?\\<tau>'\\<rbrakk>\n  \\<Longrightarrow> vertical_composite.map ?B ?C ?\\<tau> ?\\<tau>' \\<circ>\n                    ?F =\n                    vertical_composite.map ?A ?C (?\\<tau> \\<circ> ?F)\n                     (?\\<tau>' \\<circ> ?F)\n  natural_transformation D C Adj.FGF.map F (\\<epsilon>' \\<circ> F)\n  natural_transformation D C F Adj.FGF.map (F \\<circ> \\<eta>)\n  functor C D G\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C\n     (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n       (\\<epsilon>' \\<circ> F \\<circ> G))\n     \\<epsilon> =\n    vertical_composite.map C C (Adj'.\\<epsilon>FoF\\<eta>.map \\<circ> G)\n     \\<epsilon>", "by metis"], ["proof (state)\nthis:\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (\\<epsilon>' \\<circ> F \\<circ> G))\n   \\<epsilon> =\n  vertical_composite.map C C (Adj'.\\<epsilon>FoF\\<eta>.map \\<circ> G)\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "also"], ["proof (state)\nthis:\n  vertical_composite.map C C\n   (vertical_composite.map C C (F \\<circ> \\<eta> \\<circ> G)\n     (\\<epsilon>' \\<circ> F \\<circ> G))\n   \\<epsilon> =\n  vertical_composite.map C C (Adj'.\\<epsilon>FoF\\<eta>.map \\<circ> G)\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "have \"... = vertical_composite.map C C (F o G) \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map C C (Adj'.\\<epsilon>FoF\\<eta>.map \\<circ> G)\n     \\<epsilon> =\n    vertical_composite.map C C Adj.FG.map \\<epsilon>", "using Adj'.triangle_F"], ["proof (prove)\nusing this:\n  Adj'.\\<epsilon>FoF\\<eta>.map = F\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C (Adj'.\\<epsilon>FoF\\<eta>.map \\<circ> G)\n     \\<epsilon> =\n    vertical_composite.map C C Adj.FG.map \\<epsilon>", "by simp"], ["proof (state)\nthis:\n  vertical_composite.map C C (Adj'.\\<epsilon>FoF\\<eta>.map \\<circ> G)\n   \\<epsilon> =\n  vertical_composite.map C C Adj.FG.map \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "also"], ["proof (state)\nthis:\n  vertical_composite.map C C (Adj'.\\<epsilon>FoF\\<eta>.map \\<circ> G)\n   \\<epsilon> =\n  vertical_composite.map C C Adj.FG.map \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "have \"... = \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map C C Adj.FG.map \\<epsilon> = \\<epsilon>", "using vcomp_ide_cod Adj.\\<epsilon>.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<Longrightarrow>\n  vertical_composite.map ?A ?B ?\\<tau> ?G = ?\\<tau>\n  natural_transformation C C Adj.FG.map Adj.C.map \\<epsilon>\n\ngoal (1 subgoal):\n 1. vertical_composite.map C C Adj.FG.map \\<epsilon> = \\<epsilon>", "by simp"], ["proof (state)\nthis:\n  vertical_composite.map C C Adj.FG.map \\<epsilon> = \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "finally"], ["proof (chain)\npicking this:\n  \\<epsilon>' = \\<epsilon>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<epsilon>' = \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>'", "by simp"], ["proof (state)\nthis:\n  \\<epsilon> = \\<epsilon>'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma counit_determines_unit:\n  assumes \"unit_counit_adjunction C D F G \\<eta> \\<epsilon>\"\n  and \"unit_counit_adjunction C D F G \\<eta>' \\<epsilon>\"\n  shows \"\\<eta> = \\<eta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "interpret Adj: unit_counit_adjunction C D F G \\<eta> \\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_counit_adjunction C D F G \\<eta> \\<epsilon>", "using assms(1)"], ["proof (prove)\nusing this:\n  unit_counit_adjunction C D F G \\<eta> \\<epsilon>\n\ngoal (1 subgoal):\n 1. unit_counit_adjunction C D F G \\<eta> \\<epsilon>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "interpret Adj': unit_counit_adjunction C D F G \\<eta>' \\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_counit_adjunction C D F G \\<eta>' \\<epsilon>", "using assms(2)"], ["proof (prove)\nusing this:\n  unit_counit_adjunction C D F G \\<eta>' \\<epsilon>\n\ngoal (1 subgoal):\n 1. unit_counit_adjunction C D F G \\<eta>' \\<epsilon>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "interpret GFGF: composite_functor D C D F \\<open>G o F o G\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor D C D F Adj.GFG.map", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "interpret GF\\<eta>: natural_transformation D D \\<open>G o F\\<close> \\<open>(G o F) o (G o F)\\<close> \\<open>(G o F) o \\<eta>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation D D Adj.GF.map (Adj.GF.map \\<circ> Adj.GF.map)\n     (Adj.GF.map \\<circ> \\<eta>)", "using Adj.\\<eta>.natural_transformation_axioms Adj.GF.functor_axioms\n            Adj.GF.natural_transformation_axioms comp_functor_identity horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation D D Adj.D.map Adj.GF.map \\<eta>\n  functor D D Adj.GF.map\n  natural_transformation D D Adj.GF.map Adj.GF.map Adj.GF.map\n  functor ?A ?B ?F \\<Longrightarrow> ?F \\<circ> identity_functor.map ?A = ?F\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation D D Adj.GF.map (Adj.GF.map \\<circ> Adj.GF.map)\n     (Adj.GF.map \\<circ> \\<eta>)", "by (metis (no_types, lifting))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "interpret \\<eta>'GF: natural_transformation D D \\<open>G o F\\<close> \\<open>(G o F) o (G o F)\\<close> \\<open>\\<eta>' o (G o F)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation D D Adj.GF.map (Adj.GF.map \\<circ> Adj.GF.map)\n     (\\<eta>' \\<circ> Adj.GF.map)", "using Adj'.\\<eta>.natural_transformation_axioms Adj.GF.functor_axioms\n            Adj.GF.natural_transformation_axioms comp_identity_functor horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation D D Adj.D.map Adj.GF.map \\<eta>'\n  functor D D Adj.GF.map\n  natural_transformation D D Adj.GF.map Adj.GF.map Adj.GF.map\n  functor ?A ?B ?F \\<Longrightarrow> identity_functor.map ?B \\<circ> ?F = ?F\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation D D Adj.GF.map (Adj.GF.map \\<circ> Adj.GF.map)\n     (\\<eta>' \\<circ> Adj.GF.map)", "by (metis (no_types, lifting))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "interpret G\\<epsilon>F: natural_transformation D D \\<open>G o F o G o F\\<close> \\<open>G o F\\<close> \\<open>G o \\<epsilon> o F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation D D GFGF.map Adj.GF.map\n     (G \\<circ> \\<epsilon> \\<circ> F)", "using Adj.\\<epsilon>.natural_transformation_axioms Adj.F.natural_transformation_axioms\n            Adj.G\\<epsilon>.natural_transformation_axioms horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation C C Adj.FG.map Adj.C.map \\<epsilon>\n  natural_transformation D C F F F\n  natural_transformation C D Adj.GFG.map G (G \\<circ> \\<epsilon>)\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation D D GFGF.map Adj.GF.map\n     (G \\<circ> \\<epsilon> \\<circ> F)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "interpret \\<eta>'\\<eta>: natural_transformation D D Adj.D.map \\<open>G o F o G o F\\<close> \\<open>\\<eta>' o \\<eta>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation D D Adj.D.map GFGF.map (\\<eta>' \\<circ> \\<eta>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation D D Adj.D.map GFGF.map (\\<eta>' \\<circ> \\<eta>)", "have \"natural_transformation D D Adj.D.map ((G o F) o (G o F)) (\\<eta>' o \\<eta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation D D Adj.D.map (Adj.GF.map \\<circ> Adj.GF.map)\n     (\\<eta>' \\<circ> \\<eta>)", "using Adj.\\<eta>.natural_transformation_axioms Adj'.\\<eta>.natural_transformation_axioms\n              horizontal_composite Adj.D.natural_transformation_axioms hcomp_ide_cod"], ["proof (prove)\nusing this:\n  natural_transformation D D Adj.D.map Adj.GF.map \\<eta>\n  natural_transformation D D Adj.D.map Adj.GF.map \\<eta>'\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n  natural_transformation D D Adj.D.map Adj.D.map Adj.D.map\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<Longrightarrow>\n  identity_functor.map ?B \\<circ> ?\\<tau> = ?\\<tau>\n\ngoal (1 subgoal):\n 1. natural_transformation D D Adj.D.map (Adj.GF.map \\<circ> Adj.GF.map)\n     (\\<eta>' \\<circ> \\<eta>)", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  natural_transformation D D Adj.D.map (Adj.GF.map \\<circ> Adj.GF.map)\n   (\\<eta>' \\<circ> \\<eta>)\n\ngoal (1 subgoal):\n 1. natural_transformation D D Adj.D.map GFGF.map (\\<eta>' \\<circ> \\<eta>)", "thus \"natural_transformation D D Adj.D.map (G o F o G o F) (\\<eta>' o \\<eta>)\""], ["proof (prove)\nusing this:\n  natural_transformation D D Adj.D.map (Adj.GF.map \\<circ> Adj.GF.map)\n   (\\<eta>' \\<circ> \\<eta>)\n\ngoal (1 subgoal):\n 1. natural_transformation D D Adj.D.map GFGF.map (\\<eta>' \\<circ> \\<eta>)", "using o_assoc"], ["proof (prove)\nusing this:\n  natural_transformation D D Adj.D.map (Adj.GF.map \\<circ> Adj.GF.map)\n   (\\<eta>' \\<circ> \\<eta>)\n  ?f \\<circ> (?g \\<circ> ?h) = ?f \\<circ> ?g \\<circ> ?h\n\ngoal (1 subgoal):\n 1. natural_transformation D D Adj.D.map GFGF.map (\\<eta>' \\<circ> \\<eta>)", "by metis"], ["proof (state)\nthis:\n  natural_transformation D D Adj.D.map GFGF.map (\\<eta>' \\<circ> \\<eta>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "interpret G\\<epsilon>Fo\\<eta>'\\<eta>: vertical_composite\n                         D D Adj.D.map \\<open>G o F o G o F\\<close> \\<open>G o F\\<close> \\<open>\\<eta>' o \\<eta>\\<close> \\<open>G o \\<epsilon> o F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite D D Adj.D.map GFGF.map Adj.GF.map\n     (\\<eta>' \\<circ> \\<eta>) (G \\<circ> \\<epsilon> \\<circ> F)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "have \"\\<eta>' = vertical_composite.map D D \\<eta>' (G o Adj.\\<epsilon>FoF\\<eta>.map)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>' =\n    vertical_composite.map D D \\<eta>'\n     (G \\<circ> Adj.\\<epsilon>FoF\\<eta>.map)", "using vcomp_ide_cod [of D D  Adj.D.map \"G o F\" \\<eta>'] Adj.triangle_F"], ["proof (prove)\nusing this:\n  natural_transformation D D Adj.D.map Adj.GF.map \\<eta>' \\<Longrightarrow>\n  vertical_composite.map D D \\<eta>' Adj.GF.map = \\<eta>'\n  Adj.\\<epsilon>FoF\\<eta>.map = F\n\ngoal (1 subgoal):\n 1. \\<eta>' =\n    vertical_composite.map D D \\<eta>'\n     (G \\<circ> Adj.\\<epsilon>FoF\\<eta>.map)", "by (simp add: Adj'.\\<eta>.natural_transformation_axioms)"], ["proof (state)\nthis:\n  \\<eta>' =\n  vertical_composite.map D D \\<eta>' (G \\<circ> Adj.\\<epsilon>FoF\\<eta>.map)\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "also"], ["proof (state)\nthis:\n  \\<eta>' =\n  vertical_composite.map D D \\<eta>' (G \\<circ> Adj.\\<epsilon>FoF\\<eta>.map)\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "have \"... = vertical_composite.map D D \\<eta>'\n                       (vertical_composite.map D D (G o (F o \\<eta>)) (G o (\\<epsilon> o F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map D D \\<eta>'\n     (G \\<circ> Adj.\\<epsilon>FoF\\<eta>.map) =\n    vertical_composite.map D D \\<eta>'\n     (vertical_composite.map D D (G \\<circ> (F \\<circ> \\<eta>))\n       (G \\<circ> (\\<epsilon> \\<circ> F)))", "using whisker_left Adj.F\\<eta>.natural_transformation_axioms Adj.G.functor_axioms\n            Adj.\\<epsilon>F.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  \\<lbrakk>functor ?B ?C ?K; natural_transformation ?A ?B ?F ?G ?\\<tau>;\n   natural_transformation ?A ?B ?G ?H ?\\<tau>'\\<rbrakk>\n  \\<Longrightarrow> ?K \\<circ>\n                    vertical_composite.map ?A ?B ?\\<tau> ?\\<tau>' =\n                    vertical_composite.map ?A ?C (?K \\<circ> ?\\<tau>)\n                     (?K \\<circ> ?\\<tau>')\n  natural_transformation D C F Adj.FGF.map (F \\<circ> \\<eta>)\n  functor C D G\n  natural_transformation D C Adj.FGF.map F (\\<epsilon> \\<circ> F)\n\ngoal (1 subgoal):\n 1. vertical_composite.map D D \\<eta>'\n     (G \\<circ> Adj.\\<epsilon>FoF\\<eta>.map) =\n    vertical_composite.map D D \\<eta>'\n     (vertical_composite.map D D (G \\<circ> (F \\<circ> \\<eta>))\n       (G \\<circ> (\\<epsilon> \\<circ> F)))", "by fastforce"], ["proof (state)\nthis:\n  vertical_composite.map D D \\<eta>'\n   (G \\<circ> Adj.\\<epsilon>FoF\\<eta>.map) =\n  vertical_composite.map D D \\<eta>'\n   (vertical_composite.map D D (G \\<circ> (F \\<circ> \\<eta>))\n     (G \\<circ> (\\<epsilon> \\<circ> F)))\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "also"], ["proof (state)\nthis:\n  vertical_composite.map D D \\<eta>'\n   (G \\<circ> Adj.\\<epsilon>FoF\\<eta>.map) =\n  vertical_composite.map D D \\<eta>'\n   (vertical_composite.map D D (G \\<circ> (F \\<circ> \\<eta>))\n     (G \\<circ> (\\<epsilon> \\<circ> F)))\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "have \"... = vertical_composite.map D D\n                       (vertical_composite.map D D \\<eta>' (G o (F o \\<eta>))) (G o \\<epsilon> o F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map D D \\<eta>'\n     (vertical_composite.map D D (G \\<circ> (F \\<circ> \\<eta>))\n       (G \\<circ> (\\<epsilon> \\<circ> F))) =\n    vertical_composite.map D D\n     (vertical_composite.map D D \\<eta>' (G \\<circ> (F \\<circ> \\<eta>)))\n     (G \\<circ> \\<epsilon> \\<circ> F)", "using vcomp_assoc Adj'.\\<eta>.natural_transformation_axioms\n            GF\\<eta>.natural_transformation_axioms G\\<epsilon>F.natural_transformation_axioms o_assoc"], ["proof (prove)\nusing this:\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<rho>;\n   natural_transformation ?A ?B ?G ?H ?\\<sigma>;\n   natural_transformation ?A ?B ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> vertical_composite.map ?A ?B\n                     (vertical_composite.map ?A ?B ?\\<rho> ?\\<sigma>)\n                     ?\\<tau> =\n                    vertical_composite.map ?A ?B ?\\<rho>\n                     (vertical_composite.map ?A ?B ?\\<sigma> ?\\<tau>)\n  natural_transformation D D Adj.D.map Adj.GF.map \\<eta>'\n  natural_transformation D D Adj.GF.map (Adj.GF.map \\<circ> Adj.GF.map)\n   (Adj.GF.map \\<circ> \\<eta>)\n  natural_transformation D D GFGF.map Adj.GF.map\n   (G \\<circ> \\<epsilon> \\<circ> F)\n  ?f \\<circ> (?g \\<circ> ?h) = ?f \\<circ> ?g \\<circ> ?h\n\ngoal (1 subgoal):\n 1. vertical_composite.map D D \\<eta>'\n     (vertical_composite.map D D (G \\<circ> (F \\<circ> \\<eta>))\n       (G \\<circ> (\\<epsilon> \\<circ> F))) =\n    vertical_composite.map D D\n     (vertical_composite.map D D \\<eta>' (G \\<circ> (F \\<circ> \\<eta>)))\n     (G \\<circ> \\<epsilon> \\<circ> F)", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  vertical_composite.map D D \\<eta>'\n   (vertical_composite.map D D (G \\<circ> (F \\<circ> \\<eta>))\n     (G \\<circ> (\\<epsilon> \\<circ> F))) =\n  vertical_composite.map D D\n   (vertical_composite.map D D \\<eta>' (G \\<circ> (F \\<circ> \\<eta>)))\n   (G \\<circ> \\<epsilon> \\<circ> F)\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "also"], ["proof (state)\nthis:\n  vertical_composite.map D D \\<eta>'\n   (vertical_composite.map D D (G \\<circ> (F \\<circ> \\<eta>))\n     (G \\<circ> (\\<epsilon> \\<circ> F))) =\n  vertical_composite.map D D\n   (vertical_composite.map D D \\<eta>' (G \\<circ> (F \\<circ> \\<eta>)))\n   (G \\<circ> \\<epsilon> \\<circ> F)\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "have \"... = vertical_composite.map D D\n                       (vertical_composite.map D D \\<eta> (\\<eta>' o G o F)) (G o \\<epsilon> o F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map D D\n     (vertical_composite.map D D \\<eta>' (G \\<circ> (F \\<circ> \\<eta>)))\n     (G \\<circ> \\<epsilon> \\<circ> F) =\n    vertical_composite.map D D\n     (vertical_composite.map D D \\<eta> (\\<eta>' \\<circ> G \\<circ> F))\n     (G \\<circ> \\<epsilon> \\<circ> F)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vertical_composite.map D D\n     (vertical_composite.map D D \\<eta>' (G \\<circ> (F \\<circ> \\<eta>)))\n     (G \\<circ> \\<epsilon> \\<circ> F) =\n    vertical_composite.map D D\n     (vertical_composite.map D D \\<eta> (\\<eta>' \\<circ> G \\<circ> F))\n     (G \\<circ> \\<epsilon> \\<circ> F)", "have \"\\<eta>' \\<circ> Adj.D.map = \\<eta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>' \\<circ> Adj.D.map = \\<eta>'", "using Adj'.\\<eta>.natural_transformation_axioms hcomp_ide_dom"], ["proof (prove)\nusing this:\n  natural_transformation D D Adj.D.map Adj.GF.map \\<eta>'\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<Longrightarrow>\n  ?\\<tau> \\<circ> identity_functor.map ?A = ?\\<tau>\n\ngoal (1 subgoal):\n 1. \\<eta>' \\<circ> Adj.D.map = \\<eta>'", "by simp"], ["proof (state)\nthis:\n  \\<eta>' \\<circ> Adj.D.map = \\<eta>'\n\ngoal (1 subgoal):\n 1. vertical_composite.map D D\n     (vertical_composite.map D D \\<eta>' (G \\<circ> (F \\<circ> \\<eta>)))\n     (G \\<circ> \\<epsilon> \\<circ> F) =\n    vertical_composite.map D D\n     (vertical_composite.map D D \\<eta> (\\<eta>' \\<circ> G \\<circ> F))\n     (G \\<circ> \\<epsilon> \\<circ> F)", "moreover"], ["proof (state)\nthis:\n  \\<eta>' \\<circ> Adj.D.map = \\<eta>'\n\ngoal (1 subgoal):\n 1. vertical_composite.map D D\n     (vertical_composite.map D D \\<eta>' (G \\<circ> (F \\<circ> \\<eta>)))\n     (G \\<circ> \\<epsilon> \\<circ> F) =\n    vertical_composite.map D D\n     (vertical_composite.map D D \\<eta> (\\<eta>' \\<circ> G \\<circ> F))\n     (G \\<circ> \\<epsilon> \\<circ> F)", "have \"\\<eta>' o (G o F) = \\<eta>' o G o F \\<and> G o (F o \\<eta>) = G o F o \\<eta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>' \\<circ> Adj.GF.map = \\<eta>' \\<circ> G \\<circ> F \\<and>\n    G \\<circ> (F \\<circ> \\<eta>) = Adj.GF.map \\<circ> \\<eta>", "by auto"], ["proof (state)\nthis:\n  \\<eta>' \\<circ> Adj.GF.map = \\<eta>' \\<circ> G \\<circ> F \\<and>\n  G \\<circ> (F \\<circ> \\<eta>) = Adj.GF.map \\<circ> \\<eta>\n\ngoal (1 subgoal):\n 1. vertical_composite.map D D\n     (vertical_composite.map D D \\<eta>' (G \\<circ> (F \\<circ> \\<eta>)))\n     (G \\<circ> \\<epsilon> \\<circ> F) =\n    vertical_composite.map D D\n     (vertical_composite.map D D \\<eta> (\\<eta>' \\<circ> G \\<circ> F))\n     (G \\<circ> \\<epsilon> \\<circ> F)", "ultimately"], ["proof (chain)\npicking this:\n  \\<eta>' \\<circ> Adj.D.map = \\<eta>'\n  \\<eta>' \\<circ> Adj.GF.map = \\<eta>' \\<circ> G \\<circ> F \\<and>\n  G \\<circ> (F \\<circ> \\<eta>) = Adj.GF.map \\<circ> \\<eta>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<eta>' \\<circ> Adj.D.map = \\<eta>'\n  \\<eta>' \\<circ> Adj.GF.map = \\<eta>' \\<circ> G \\<circ> F \\<and>\n  G \\<circ> (F \\<circ> \\<eta>) = Adj.GF.map \\<circ> \\<eta>\n\ngoal (1 subgoal):\n 1. vertical_composite.map D D\n     (vertical_composite.map D D \\<eta>' (G \\<circ> (F \\<circ> \\<eta>)))\n     (G \\<circ> \\<epsilon> \\<circ> F) =\n    vertical_composite.map D D\n     (vertical_composite.map D D \\<eta> (\\<eta>' \\<circ> G \\<circ> F))\n     (G \\<circ> \\<epsilon> \\<circ> F)", "using interchange_spc [of D D Adj.D.map \"G o F\" \\<eta> D Adj.D.map \"G o F\" \\<eta>']\n              Adj.\\<eta>.natural_transformation_axioms Adj'.\\<eta>.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  \\<eta>' \\<circ> Adj.D.map = \\<eta>'\n  \\<eta>' \\<circ> Adj.GF.map = \\<eta>' \\<circ> G \\<circ> F \\<and>\n  G \\<circ> (F \\<circ> \\<eta>) = Adj.GF.map \\<circ> \\<eta>\n  \\<lbrakk>natural_transformation D D Adj.D.map Adj.GF.map \\<eta>;\n   natural_transformation D D Adj.D.map Adj.GF.map \\<eta>'\\<rbrakk>\n  \\<Longrightarrow> \\<eta>' \\<circ> \\<eta> =\n                    vertical_composite.map D D (Adj.D.map \\<circ> \\<eta>)\n                     (\\<eta>' \\<circ> Adj.GF.map)\n  \\<lbrakk>natural_transformation D D Adj.D.map Adj.GF.map \\<eta>;\n   natural_transformation D D Adj.D.map Adj.GF.map \\<eta>'\\<rbrakk>\n  \\<Longrightarrow> \\<eta>' \\<circ> \\<eta> =\n                    vertical_composite.map D D (\\<eta>' \\<circ> Adj.D.map)\n                     (Adj.GF.map \\<circ> \\<eta>)\n  natural_transformation D D Adj.D.map Adj.GF.map \\<eta>\n  natural_transformation D D Adj.D.map Adj.GF.map \\<eta>'\n\ngoal (1 subgoal):\n 1. vertical_composite.map D D\n     (vertical_composite.map D D \\<eta>' (G \\<circ> (F \\<circ> \\<eta>)))\n     (G \\<circ> \\<epsilon> \\<circ> F) =\n    vertical_composite.map D D\n     (vertical_composite.map D D \\<eta> (\\<eta>' \\<circ> G \\<circ> F))\n     (G \\<circ> \\<epsilon> \\<circ> F)", "by simp"], ["proof (state)\nthis:\n  vertical_composite.map D D\n   (vertical_composite.map D D \\<eta>' (G \\<circ> (F \\<circ> \\<eta>)))\n   (G \\<circ> \\<epsilon> \\<circ> F) =\n  vertical_composite.map D D\n   (vertical_composite.map D D \\<eta> (\\<eta>' \\<circ> G \\<circ> F))\n   (G \\<circ> \\<epsilon> \\<circ> F)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vertical_composite.map D D\n   (vertical_composite.map D D \\<eta>' (G \\<circ> (F \\<circ> \\<eta>)))\n   (G \\<circ> \\<epsilon> \\<circ> F) =\n  vertical_composite.map D D\n   (vertical_composite.map D D \\<eta> (\\<eta>' \\<circ> G \\<circ> F))\n   (G \\<circ> \\<epsilon> \\<circ> F)\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "also"], ["proof (state)\nthis:\n  vertical_composite.map D D\n   (vertical_composite.map D D \\<eta>' (G \\<circ> (F \\<circ> \\<eta>)))\n   (G \\<circ> \\<epsilon> \\<circ> F) =\n  vertical_composite.map D D\n   (vertical_composite.map D D \\<eta> (\\<eta>' \\<circ> G \\<circ> F))\n   (G \\<circ> \\<epsilon> \\<circ> F)\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "have \"... = vertical_composite.map D D \\<eta>\n                       (vertical_composite.map D D (\\<eta>' o G o F) (G o \\<epsilon> o F))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map D D\n     (vertical_composite.map D D \\<eta> (\\<eta>' \\<circ> G \\<circ> F))\n     (G \\<circ> \\<epsilon> \\<circ> F) =\n    vertical_composite.map D D \\<eta>\n     (vertical_composite.map D D (\\<eta>' \\<circ> G \\<circ> F)\n       (G \\<circ> \\<epsilon> \\<circ> F))", "using vcomp_assoc"], ["proof (prove)\nusing this:\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<rho>;\n   natural_transformation ?A ?B ?G ?H ?\\<sigma>;\n   natural_transformation ?A ?B ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> vertical_composite.map ?A ?B\n                     (vertical_composite.map ?A ?B ?\\<rho> ?\\<sigma>)\n                     ?\\<tau> =\n                    vertical_composite.map ?A ?B ?\\<rho>\n                     (vertical_composite.map ?A ?B ?\\<sigma> ?\\<tau>)\n\ngoal (1 subgoal):\n 1. vertical_composite.map D D\n     (vertical_composite.map D D \\<eta> (\\<eta>' \\<circ> G \\<circ> F))\n     (G \\<circ> \\<epsilon> \\<circ> F) =\n    vertical_composite.map D D \\<eta>\n     (vertical_composite.map D D (\\<eta>' \\<circ> G \\<circ> F)\n       (G \\<circ> \\<epsilon> \\<circ> F))", "by (metis (no_types, lifting) Adj.\\<eta>.natural_transformation_axioms\n          G\\<epsilon>F.natural_transformation_axioms \\<eta>'GF.natural_transformation_axioms o_assoc)"], ["proof (state)\nthis:\n  vertical_composite.map D D\n   (vertical_composite.map D D \\<eta> (\\<eta>' \\<circ> G \\<circ> F))\n   (G \\<circ> \\<epsilon> \\<circ> F) =\n  vertical_composite.map D D \\<eta>\n   (vertical_composite.map D D (\\<eta>' \\<circ> G \\<circ> F)\n     (G \\<circ> \\<epsilon> \\<circ> F))\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "also"], ["proof (state)\nthis:\n  vertical_composite.map D D\n   (vertical_composite.map D D \\<eta> (\\<eta>' \\<circ> G \\<circ> F))\n   (G \\<circ> \\<epsilon> \\<circ> F) =\n  vertical_composite.map D D \\<eta>\n   (vertical_composite.map D D (\\<eta>' \\<circ> G \\<circ> F)\n     (G \\<circ> \\<epsilon> \\<circ> F))\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "have \"... = vertical_composite.map D D \\<eta>\n                       (vertical_composite.map C D (\\<eta>' o G) (G o \\<epsilon>) o F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map D D \\<eta>\n     (vertical_composite.map D D (\\<eta>' \\<circ> G \\<circ> F)\n       (G \\<circ> \\<epsilon> \\<circ> F)) =\n    vertical_composite.map D D \\<eta>\n     (Adj'.G\\<epsilon>o\\<eta>G.map \\<circ> F)", "using whisker_right Adj'.\\<eta>G.natural_transformation_axioms Adj.F.functor_axioms\n            Adj.G\\<epsilon>.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  \\<lbrakk>functor ?A ?B ?F; natural_transformation ?B ?C ?H ?K ?\\<tau>;\n   natural_transformation ?B ?C ?K ?L ?\\<tau>'\\<rbrakk>\n  \\<Longrightarrow> vertical_composite.map ?B ?C ?\\<tau> ?\\<tau>' \\<circ>\n                    ?F =\n                    vertical_composite.map ?A ?C (?\\<tau> \\<circ> ?F)\n                     (?\\<tau>' \\<circ> ?F)\n  natural_transformation C D G Adj.GFG.map (\\<eta>' \\<circ> G)\n  functor D C F\n  natural_transformation C D Adj.GFG.map G (G \\<circ> \\<epsilon>)\n\ngoal (1 subgoal):\n 1. vertical_composite.map D D \\<eta>\n     (vertical_composite.map D D (\\<eta>' \\<circ> G \\<circ> F)\n       (G \\<circ> \\<epsilon> \\<circ> F)) =\n    vertical_composite.map D D \\<eta>\n     (Adj'.G\\<epsilon>o\\<eta>G.map \\<circ> F)", "by fastforce"], ["proof (state)\nthis:\n  vertical_composite.map D D \\<eta>\n   (vertical_composite.map D D (\\<eta>' \\<circ> G \\<circ> F)\n     (G \\<circ> \\<epsilon> \\<circ> F)) =\n  vertical_composite.map D D \\<eta> (Adj'.G\\<epsilon>o\\<eta>G.map \\<circ> F)\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "also"], ["proof (state)\nthis:\n  vertical_composite.map D D \\<eta>\n   (vertical_composite.map D D (\\<eta>' \\<circ> G \\<circ> F)\n     (G \\<circ> \\<epsilon> \\<circ> F)) =\n  vertical_composite.map D D \\<eta> (Adj'.G\\<epsilon>o\\<eta>G.map \\<circ> F)\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "have \"... = vertical_composite.map D D \\<eta> (G o F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map D D \\<eta>\n     (Adj'.G\\<epsilon>o\\<eta>G.map \\<circ> F) =\n    vertical_composite.map D D \\<eta> Adj.GF.map", "using Adj'.triangle_G"], ["proof (prove)\nusing this:\n  Adj'.G\\<epsilon>o\\<eta>G.map = G\n\ngoal (1 subgoal):\n 1. vertical_composite.map D D \\<eta>\n     (Adj'.G\\<epsilon>o\\<eta>G.map \\<circ> F) =\n    vertical_composite.map D D \\<eta> Adj.GF.map", "by simp"], ["proof (state)\nthis:\n  vertical_composite.map D D \\<eta>\n   (Adj'.G\\<epsilon>o\\<eta>G.map \\<circ> F) =\n  vertical_composite.map D D \\<eta> Adj.GF.map\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "also"], ["proof (state)\nthis:\n  vertical_composite.map D D \\<eta>\n   (Adj'.G\\<epsilon>o\\<eta>G.map \\<circ> F) =\n  vertical_composite.map D D \\<eta> Adj.GF.map\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "have \"... = \\<eta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite.map D D \\<eta> Adj.GF.map = \\<eta>", "using vcomp_ide_dom Adj.GF.functor_axioms Adj.\\<eta>.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  natural_transformation ?A ?B ?F ?G ?\\<tau> \\<Longrightarrow>\n  vertical_composite.map ?A ?B ?F ?\\<tau> = ?\\<tau>\n  functor D D Adj.GF.map\n  natural_transformation D D Adj.D.map Adj.GF.map \\<eta>\n\ngoal (1 subgoal):\n 1. vertical_composite.map D D \\<eta> Adj.GF.map = \\<eta>", "by simp"], ["proof (state)\nthis:\n  vertical_composite.map D D \\<eta> Adj.GF.map = \\<eta>\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "finally"], ["proof (chain)\npicking this:\n  \\<eta>' = \\<eta>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<eta>' = \\<eta>\n\ngoal (1 subgoal):\n 1. \\<eta> = \\<eta>'", "by simp"], ["proof (state)\nthis:\n  \\<eta> = \\<eta>'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Adjunction\""], ["", "text\\<open>\n    The grand unification of everything to do with an adjunction.\n\\<close>"], ["", "locale adjunction =\n    C: category C +\n    D: category D +\n    S: replete_set_category S +\n    Cop: dual_category C +\n    Dop: dual_category D +\n    CopxC: product_category Cop.comp C +\n    DopxD: product_category Dop.comp D +\n    DopxC: product_category Dop.comp C +\n    idDop: identity_functor Dop.comp +\n    HomC: hom_functor C S \\<phi>C +\n    HomD: hom_functor D S \\<phi>D +\n    F: left_adjoint_functor D C F +\n    G: right_adjoint_functor C D G +\n    GF: composite_functor D C D F G +\n    FG: composite_functor C D C G F +\n    FGF: composite_functor D C C F FG.map +\n    GFG: composite_functor C D D G GF.map +\n    Fop: dual_functor Dop.comp Cop.comp F +\n    FopxC: product_functor Dop.comp C Cop.comp C Fop.map C.map +\n    DopxG: product_functor Dop.comp C Dop.comp D Dop.map G +\n    Hom_FopxC: composite_functor DopxC.comp CopxC.comp S FopxC.map HomC.map +\n    Hom_DopxG: composite_functor DopxC.comp DopxD.comp S DopxG.map HomD.map +\n    Hom_FopxC: set_valued_functor DopxC.comp S Hom_FopxC.map +\n    Hom_DopxG: set_valued_functor DopxC.comp S Hom_DopxG.map +\n    \\<eta>: natural_transformation D D D.map GF.map \\<eta> +\n    \\<epsilon>: natural_transformation C C FG.map C.map \\<epsilon> +\n    F\\<eta>: natural_transformation D C F \\<open>F o G o F\\<close> \\<open>F o \\<eta>\\<close> +\n    \\<eta>G: natural_transformation C D G \\<open>G o F o G\\<close> \\<open>\\<eta> o G\\<close> +\n    \\<epsilon>F: natural_transformation D C \\<open>F o G o F\\<close> F \\<open>\\<epsilon> o F\\<close> +\n    G\\<epsilon>: natural_transformation C D \\<open>G o F o G\\<close> G \\<open>G o \\<epsilon>\\<close> +\n    \\<epsilon>FoF\\<eta>: vertical_composite D C F FGF.map F \\<open>F o \\<eta>\\<close> \\<open>\\<epsilon> o F\\<close> +\n    G\\<epsilon>o\\<eta>G: vertical_composite C D G GFG.map G \\<open>\\<eta> o G\\<close> \\<open>G o \\<epsilon>\\<close> +\n    \\<phi>\\<psi>: meta_adjunction C D F G \\<phi> \\<psi> +\n    \\<eta>\\<epsilon>: unit_counit_adjunction C D F G \\<eta> \\<epsilon> +\n    \\<Phi>\\<Psi>: hom_adjunction C D S \\<phi>C \\<phi>D F G \\<Phi> \\<Psi>\n    for C :: \"'c comp\"     (infixr \"\\<cdot>\\<^sub>C\" 55)\n    and D :: \"'d comp\"     (infixr \"\\<cdot>\\<^sub>D\" 55)\n    and S :: \"'s comp\"     (infixr \"\\<cdot>\\<^sub>S\" 55)\n    and \\<phi>C :: \"'c * 'c \\<Rightarrow> 'c \\<Rightarrow> 's\"\n    and \\<phi>D :: \"'d * 'd \\<Rightarrow> 'd \\<Rightarrow> 's\"\n    and F :: \"'d \\<Rightarrow> 'c\"\n    and G :: \"'c \\<Rightarrow> 'd\"\n    and \\<phi> :: \"'d \\<Rightarrow> 'c \\<Rightarrow> 'd\"\n    and \\<psi> :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'c\"\n    and \\<eta> :: \"'d \\<Rightarrow> 'd\"\n    and \\<epsilon> :: \"'c \\<Rightarrow> 'c\"\n    and \\<Phi> :: \"'d * 'c \\<Rightarrow> 's\"\n    and \\<Psi> :: \"'d * 'c \\<Rightarrow> 's\" +\n    assumes \\<phi>_in_terms_of_\\<eta>: \"\\<lbrakk> D.ide y; \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<rbrakk> \\<Longrightarrow> \\<phi> y f = G f \\<cdot>\\<^sub>D \\<eta> y\"\n    and \\<psi>_in_terms_of_\\<epsilon>: \"\\<lbrakk> C.ide x; \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<rbrakk> \\<Longrightarrow> \\<psi> x g = \\<epsilon> x \\<cdot>\\<^sub>C F g\"\n    and \\<eta>_in_terms_of_\\<phi>: \"D.ide y \\<Longrightarrow> \\<eta> y = \\<phi> y (F y)\"\n    and \\<epsilon>_in_terms_of_\\<psi>: \"C.ide x \\<Longrightarrow> \\<epsilon> x = \\<psi> x (G x)\"\n    and \\<phi>_in_terms_of_\\<Phi>: \"\\<lbrakk> D.ide y; \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<rbrakk> \\<Longrightarrow>\n                              \\<phi> y f = (\\<Phi>\\<Psi>.\\<psi>D (y, G x) o S.Fun (\\<Phi> (y, x)) o \\<phi>C (F y, x)) f\"\n    and \\<psi>_in_terms_of_\\<Psi>: \"\\<lbrakk> C.ide x; \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<rbrakk> \\<Longrightarrow>\n                              \\<psi> x g = (\\<Phi>\\<Psi>.\\<psi>C (F y, x) o S.Fun (\\<Psi> (y, x)) o \\<phi>D (y, G x)) g\"\n    and \\<Phi>_in_terms_of_\\<phi>:\n           \"\\<lbrakk> C.ide x; D.ide y \\<rbrakk> \\<Longrightarrow>\n                \\<Phi> (y, x) = S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                                    (\\<phi>D (y, G x) o \\<phi> y o \\<Phi>\\<Psi>.\\<psi>C (F y, x))\"\n    and \\<Psi>_in_terms_of_\\<psi>:\n           \"\\<lbrakk> C.ide x; D.ide y \\<rbrakk> \\<Longrightarrow>\n                \\<Psi> (y, x) = S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                                    (\\<phi>C (F y, x) o \\<psi> x o \\<Phi>\\<Psi>.\\<psi>D (y, G x))\""], ["", "section \"Meta-Adjunctions Induce Unit/Counit Adjunctions\""], ["", "context meta_adjunction\n  begin"], ["", "interpretation GF: composite_functor D C D F G"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n     F G", ".."], ["", "interpretation FG: composite_functor C D C G F"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C)\n     G F", ".."], ["", "interpretation FGF: composite_functor D C C F FG.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n     F FG.map", ".."], ["", "interpretation GFG: composite_functor C D D G GF.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D)\n     G GF.map", ".."], ["", "definition \\<eta>o :: \"'d \\<Rightarrow> 'd\"\n    where \"\\<eta>o y = \\<phi> y (F y)\""], ["", "lemma \\<eta>o_in_hom:\n    assumes \"D.ide y\"\n    shows \"\\<guillemotleft>\\<eta>o y : y \\<rightarrow>\\<^sub>D G (F y)\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<eta>o\n                     y : y \\<rightarrow>\\<^sub>D G (F y)\\<guillemotright>", "using assms D.ide_in_hom \\<eta>o_def \\<phi>_in_hom"], ["proof (prove)\nusing this:\n  D.ide y\n  D.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>D ?a\\<guillemotright>\n  \\<eta>o ?y = \\<phi> ?y (F ?y)\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<eta>o\n                     y : y \\<rightarrow>\\<^sub>D G (F y)\\<guillemotright>", "by force"], ["", "lemma \\<phi>_in_terms_of_\\<eta>o:\n    assumes \"D.ide y\" and \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<phi> y f = G f \\<cdot>\\<^sub>D \\<eta>o y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y f = G f \\<cdot>\\<^sub>D \\<eta>o y", "proof (unfold \\<eta>o_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> y f = G f \\<cdot>\\<^sub>D \\<phi> y (F y)", "have 1: \"\\<guillemotleft>F y : F y \\<rightarrow>\\<^sub>C F y\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>F y : F y \\<rightarrow>\\<^sub>C F y\\<guillemotright>", "using assms(1) D.ide_in_hom"], ["proof (prove)\nusing this:\n  D.ide y\n  D.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>D ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>F y : F y \\<rightarrow>\\<^sub>C F y\\<guillemotright>", "by blast"], ["proof (state)\nthis:\n  \\<guillemotleft>F y : F y \\<rightarrow>\\<^sub>C F y\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<phi> y f = G f \\<cdot>\\<^sub>D \\<phi> y (F y)", "hence \"\\<phi> y (F y) = \\<phi> y (F y) \\<cdot>\\<^sub>D y\""], ["proof (prove)\nusing this:\n  \\<guillemotleft>F y : F y \\<rightarrow>\\<^sub>C F y\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<phi> y (F y) = \\<phi> y (F y) \\<cdot>\\<^sub>D y", "by (metis assms(1) D.in_homE \\<phi>_in_hom D.comp_arr_dom)"], ["proof (state)\nthis:\n  \\<phi> y (F y) = \\<phi> y (F y) \\<cdot>\\<^sub>D y\n\ngoal (1 subgoal):\n 1. \\<phi> y f = G f \\<cdot>\\<^sub>D \\<phi> y (F y)", "thus \"\\<phi> y f = G f \\<cdot>\\<^sub>D \\<phi> y (F y)\""], ["proof (prove)\nusing this:\n  \\<phi> y (F y) = \\<phi> y (F y) \\<cdot>\\<^sub>D y\n\ngoal (1 subgoal):\n 1. \\<phi> y f = G f \\<cdot>\\<^sub>D \\<phi> y (F y)", "using assms 1 D.ide_in_hom"], ["proof (prove)\nusing this:\n  \\<phi> y (F y) = \\<phi> y (F y) \\<cdot>\\<^sub>D y\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<guillemotleft>F y : F y \\<rightarrow>\\<^sub>C F y\\<guillemotright>\n  D.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>D ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<phi> y f = G f \\<cdot>\\<^sub>D \\<phi> y (F y)", "by (metis C.comp_arr_dom C.in_homE \\<phi>_naturality)"], ["proof (state)\nthis:\n  \\<phi> y f = G f \\<cdot>\\<^sub>D \\<phi> y (F y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<phi>_F_char:\n    assumes \"\\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\"\n    shows \"\\<phi> y' (F g) = \\<eta>o y \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y' (F g) = \\<eta>o y \\<cdot>\\<^sub>D g", "using assms \\<eta>o_def \\<phi>_in_hom [of y \"F y\" \"F y\"]\n            D.comp_cod_arr [of \"D (\\<phi> y (F y)) g\" \"G (F y)\"]\n            \\<phi>_naturality [of \"F y\" \"F y\" \"F y\" g y' y \"F y\"]"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<eta>o ?y = \\<phi> ?y (F ?y)\n  \\<lbrakk>D.ide y;\n   \\<guillemotleft>F y : F y \\<rightarrow>\\<^sub>C F\n              y\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> y\n                                     (F\n y) : y \\<rightarrow>\\<^sub>D G (F y)\\<guillemotright>\n  \\<lbrakk>D.seq (\\<phi> y (F y)) g;\n   D.cod (\\<phi> y (F y) \\<cdot>\\<^sub>D g) = G (F y)\\<rbrakk>\n  \\<Longrightarrow> G (F y) \\<cdot>\\<^sub>D\n                    \\<phi> y (F y) \\<cdot>\\<^sub>D g =\n                    \\<phi> y (F y) \\<cdot>\\<^sub>D g\n  \\<lbrakk>\\<guillemotleft>F y : F y \\<rightarrow>\\<^sub>C F\n                      y\\<guillemotright>;\n   \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n   \\<guillemotleft>F y : F y \\<rightarrow>\\<^sub>C F\n              y\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> y'\n                     (F y \\<cdot>\\<^sub>C F y \\<cdot>\\<^sub>C F g) =\n                    G (F y) \\<cdot>\\<^sub>D \\<phi> y (F y) \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<phi> y' (F g) = \\<eta>o y \\<cdot>\\<^sub>D g", "by (metis D.arr_cod D.cod_cod D.comp_in_homI' D.ide_char' D.ide_in_hom D.in_homE\n          F.is_natural_2 F.preserves_hom)"], ["", "interpretation \\<eta>: transformation_by_components D D D.map GF.map \\<eta>o"], ["proof (prove)\ngoal (1 subgoal):\n 1. transformation_by_components (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n     GF.map \\<eta>o", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       D.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<eta>o\n                        a : D.map\n                             a \\<rightarrow>\\<^sub>D GF.map\n                a\\<guillemotright>\n 2. \\<And>f.\n       D.arr f \\<Longrightarrow>\n       \\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f =\n       GF.map f \\<cdot>\\<^sub>D \\<eta>o (D.dom f)", "show \"\\<And>a. D.ide a \\<Longrightarrow> \\<guillemotleft>\\<eta>o a : D.map a \\<rightarrow>\\<^sub>D GF.map a\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       D.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<eta>o\n                        a : D.map\n                             a \\<rightarrow>\\<^sub>D GF.map\n                a\\<guillemotright>", "using \\<eta>o_def \\<phi>_in_hom D.ide_in_hom"], ["proof (prove)\nusing this:\n  \\<eta>o ?y = \\<phi> ?y (F ?y)\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n  D.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>D ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       D.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<eta>o\n                        a : D.map\n                             a \\<rightarrow>\\<^sub>D GF.map\n                a\\<guillemotright>", "by force"], ["proof (state)\nthis:\n  D.ide ?a \\<Longrightarrow>\n  \\<guillemotleft>\\<eta>o\n                   ?a : D.map\n                         ?a \\<rightarrow>\\<^sub>D GF.map ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       D.arr f \\<Longrightarrow>\n       \\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f =\n       GF.map f \\<cdot>\\<^sub>D \\<eta>o (D.dom f)", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       D.arr f \\<Longrightarrow>\n       \\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f =\n       GF.map f \\<cdot>\\<^sub>D \\<eta>o (D.dom f)", "assume f: \"D.arr f\""], ["proof (state)\nthis:\n  D.arr f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       D.arr f \\<Longrightarrow>\n       \\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f =\n       GF.map f \\<cdot>\\<^sub>D \\<eta>o (D.dom f)", "show \"\\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f = GF.map f \\<cdot>\\<^sub>D \\<eta>o (D.dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f =\n    GF.map f \\<cdot>\\<^sub>D \\<eta>o (D.dom f)", "using f \\<phi>_F_char [of \"D.map f\" \"D.dom f\" \"D.cod f\"]\n              \\<phi>_in_terms_of_\\<eta>o [of \"D.dom f\" \"F f\" \"F (D.cod f)\"]"], ["proof (prove)\nusing this:\n  D.arr f\n  \\<guillemotleft>D.map\n                   f : D.dom\n                        f \\<rightarrow>\\<^sub>D D.cod\n           f\\<guillemotright> \\<Longrightarrow>\n  \\<phi> (D.dom f) (F (D.map f)) = \\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f\n  \\<lbrakk>D.ide (D.dom f);\n   \\<guillemotleft>F f : F (D.dom\n                             f) \\<rightarrow>\\<^sub>C F\n                 (D.cod f)\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> (D.dom f) (F f) =\n                    G (F f) \\<cdot>\\<^sub>D \\<eta>o (D.dom f)\n\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f =\n    GF.map f \\<cdot>\\<^sub>D \\<eta>o (D.dom f)", "by force"], ["proof (state)\nthis:\n  \\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f =\n  GF.map f \\<cdot>\\<^sub>D \\<eta>o (D.dom f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<eta>_map_simp:\n    assumes \"D.ide y\"\n    shows \"\\<eta>.map y = \\<phi> y (F y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>.map y = \\<phi> y (F y)", "using assms \\<eta>.map_simp_ide \\<eta>o_def"], ["proof (prove)\nusing this:\n  D.ide y\n  D.ide ?a \\<Longrightarrow> \\<eta>.map ?a = \\<eta>o ?a\n  \\<eta>o ?y = \\<phi> ?y (F ?y)\n\ngoal (1 subgoal):\n 1. \\<eta>.map y = \\<phi> y (F y)", "by simp"], ["", "definition \\<epsilon>o :: \"'c \\<Rightarrow> 'c\"\n    where \"\\<epsilon>o x = \\<psi> x (G x)\""], ["", "lemma \\<epsilon>o_in_hom:\n    assumes \"C.ide x\"\n    shows \"\\<guillemotleft>\\<epsilon>o x : F (G x) \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<epsilon>o\n                     x : F (G x) \\<rightarrow>\\<^sub>C x\\<guillemotright>", "using assms C.ide_in_hom \\<epsilon>o_def \\<psi>_in_hom"], ["proof (prove)\nusing this:\n  C.ide x\n  C.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>C ?a\\<guillemotright>\n  \\<epsilon>o ?x = \\<psi> ?x (G ?x)\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> ?x\n                                     ?g : F\n     ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<epsilon>o\n                     x : F (G x) \\<rightarrow>\\<^sub>C x\\<guillemotright>", "by force"], ["", "lemma \\<psi>_in_terms_of_\\<epsilon>o:\n    assumes \"C.ide x\" and \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<psi> x g = \\<epsilon>o x \\<cdot>\\<^sub>C F g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x g = \\<epsilon>o x \\<cdot>\\<^sub>C F g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> x g = \\<epsilon>o x \\<cdot>\\<^sub>C F g", "have \"\\<epsilon>o x \\<cdot>\\<^sub>C F g = x \\<cdot>\\<^sub>C \\<psi> x (G x) \\<cdot>\\<^sub>C F g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>o x \\<cdot>\\<^sub>C F g =\n    x \\<cdot>\\<^sub>C \\<psi> x (G x) \\<cdot>\\<^sub>C F g", "using assms \\<epsilon>o_def \\<psi>_in_hom [of x \"G x\" \"G x\"]\n              C.comp_cod_arr [of \"\\<psi> x (G x) \\<cdot>\\<^sub>C F g\" x]"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<epsilon>o ?x = \\<psi> ?x (G ?x)\n  \\<lbrakk>C.ide x;\n   \\<guillemotleft>G x : G x \\<rightarrow>\\<^sub>D G\n              x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n                                     (G\n x) : F (G x) \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>C.seq (\\<psi> x (G x)) (F g);\n   C.cod (\\<psi> x (G x) \\<cdot>\\<^sub>C F g) = x\\<rbrakk>\n  \\<Longrightarrow> x \\<cdot>\\<^sub>C \\<psi> x (G x) \\<cdot>\\<^sub>C F g =\n                    \\<psi> x (G x) \\<cdot>\\<^sub>C F g\n\ngoal (1 subgoal):\n 1. \\<epsilon>o x \\<cdot>\\<^sub>C F g =\n    x \\<cdot>\\<^sub>C \\<psi> x (G x) \\<cdot>\\<^sub>C F g", "by fastforce"], ["proof (state)\nthis:\n  \\<epsilon>o x \\<cdot>\\<^sub>C F g =\n  x \\<cdot>\\<^sub>C \\<psi> x (G x) \\<cdot>\\<^sub>C F g\n\ngoal (1 subgoal):\n 1. \\<psi> x g = \\<epsilon>o x \\<cdot>\\<^sub>C F g", "also"], ["proof (state)\nthis:\n  \\<epsilon>o x \\<cdot>\\<^sub>C F g =\n  x \\<cdot>\\<^sub>C \\<psi> x (G x) \\<cdot>\\<^sub>C F g\n\ngoal (1 subgoal):\n 1. \\<psi> x g = \\<epsilon>o x \\<cdot>\\<^sub>C F g", "have \"... = \\<psi> x (G x \\<cdot>\\<^sub>D G x \\<cdot>\\<^sub>D g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot>\\<^sub>C \\<psi> x (G x) \\<cdot>\\<^sub>C F g =\n    \\<psi> x (G x \\<cdot>\\<^sub>D G x \\<cdot>\\<^sub>D g)", "using assms \\<psi>_naturality [of x x x g y \"G x\" \"G x\"]"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>\\<guillemotleft>x : x \\<rightarrow>\\<^sub>C x\\<guillemotright>;\n   \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>;\n   \\<guillemotleft>G x : G x \\<rightarrow>\\<^sub>D G\n              x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> x \\<cdot>\\<^sub>C \\<psi> x (G x) \\<cdot>\\<^sub>C F g =\n                    \\<psi> x (G x \\<cdot>\\<^sub>D G x \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. x \\<cdot>\\<^sub>C \\<psi> x (G x) \\<cdot>\\<^sub>C F g =\n    \\<psi> x (G x \\<cdot>\\<^sub>D G x \\<cdot>\\<^sub>D g)", "by force"], ["proof (state)\nthis:\n  x \\<cdot>\\<^sub>C \\<psi> x (G x) \\<cdot>\\<^sub>C F g =\n  \\<psi> x (G x \\<cdot>\\<^sub>D G x \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. \\<psi> x g = \\<epsilon>o x \\<cdot>\\<^sub>C F g", "also"], ["proof (state)\nthis:\n  x \\<cdot>\\<^sub>C \\<psi> x (G x) \\<cdot>\\<^sub>C F g =\n  \\<psi> x (G x \\<cdot>\\<^sub>D G x \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. \\<psi> x g = \\<epsilon>o x \\<cdot>\\<^sub>C F g", "have \"... = \\<psi> x g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x (G x \\<cdot>\\<^sub>D G x \\<cdot>\\<^sub>D g) = \\<psi> x g", "using assms D.comp_cod_arr"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>D.arr ?f; D.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>D ?f = ?f\n\ngoal (1 subgoal):\n 1. \\<psi> x (G x \\<cdot>\\<^sub>D G x \\<cdot>\\<^sub>D g) = \\<psi> x g", "by fastforce"], ["proof (state)\nthis:\n  \\<psi> x (G x \\<cdot>\\<^sub>D G x \\<cdot>\\<^sub>D g) = \\<psi> x g\n\ngoal (1 subgoal):\n 1. \\<psi> x g = \\<epsilon>o x \\<cdot>\\<^sub>C F g", "finally"], ["proof (chain)\npicking this:\n  \\<epsilon>o x \\<cdot>\\<^sub>C F g = \\<psi> x g", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<epsilon>o x \\<cdot>\\<^sub>C F g = \\<psi> x g\n\ngoal (1 subgoal):\n 1. \\<psi> x g = \\<epsilon>o x \\<cdot>\\<^sub>C F g", "by simp"], ["proof (state)\nthis:\n  \\<psi> x g = \\<epsilon>o x \\<cdot>\\<^sub>C F g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<psi>_G_char:\n    assumes \"\\<guillemotleft>f: x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\"\n    shows \"\\<psi> x' (G f) = f \\<cdot>\\<^sub>C \\<epsilon>o x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x' (G f) = f \\<cdot>\\<^sub>C \\<epsilon>o x", "proof (unfold \\<epsilon>o_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> x' (G f) = f \\<cdot>\\<^sub>C \\<psi> x (G x)", "have 0: \"C.ide x \\<and> C.ide x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide x \\<and> C.ide x'", "using assms"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n\ngoal (1 subgoal):\n 1. C.ide x \\<and> C.ide x'", "by auto"], ["proof (state)\nthis:\n  C.ide x \\<and> C.ide x'\n\ngoal (1 subgoal):\n 1. \\<psi> x' (G f) = f \\<cdot>\\<^sub>C \\<psi> x (G x)", "thus \"\\<psi> x' (G f) = f \\<cdot>\\<^sub>C \\<psi> x (G x)\""], ["proof (prove)\nusing this:\n  C.ide x \\<and> C.ide x'\n\ngoal (1 subgoal):\n 1. \\<psi> x' (G f) = f \\<cdot>\\<^sub>C \\<psi> x (G x)", "using 0 assms \\<psi>_naturality \\<psi>_in_hom [of x \"G x\" \"G x\"] G.preserves_hom \\<epsilon>o_def\n              \\<psi>_in_terms_of_\\<epsilon>o G.is_natural_1 C.ide_in_hom"], ["proof (prove)\nusing this:\n  C.ide x \\<and> C.ide x'\n  C.ide x \\<and> C.ide x'\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<lbrakk>\\<guillemotleft>?f : ?x \\<rightarrow>\\<^sub>C ?x'\\<guillemotright>;\n   \\<guillemotleft>?g : ?y' \\<rightarrow>\\<^sub>D ?y\\<guillemotright>;\n   \\<guillemotleft>?h : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>C \\<psi> ?x ?h \\<cdot>\\<^sub>C F ?g =\n                    \\<psi> ?x' (G ?f \\<cdot>\\<^sub>D ?h \\<cdot>\\<^sub>D ?g)\n  \\<lbrakk>C.ide x;\n   \\<guillemotleft>G x : G x \\<rightarrow>\\<^sub>D G\n              x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n                                     (G\n x) : F (G x) \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>C ?b\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>G ?f : G ?a \\<rightarrow>\\<^sub>D G ?b\\<guillemotright>\n  \\<epsilon>o ?x = \\<psi> ?x (G ?x)\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x ?g = \\<epsilon>o ?x \\<cdot>\\<^sub>C F ?g\n  C.arr ?f \\<Longrightarrow> G ?f \\<cdot>\\<^sub>D G (C.dom ?f) = G ?f\n  C.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>C ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<psi> x' (G f) = f \\<cdot>\\<^sub>C \\<psi> x (G x)", "by (metis C.arrI C.in_homE)"], ["proof (state)\nthis:\n  \\<psi> x' (G f) = f \\<cdot>\\<^sub>C \\<psi> x (G x)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation \\<epsilon>: transformation_by_components C C FG.map C.map \\<epsilon>o"], ["proof (prove)\ngoal (1 subgoal):\n 1. transformation_by_components (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) FG.map\n     C.map \\<epsilon>o", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       C.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<epsilon>o\n                        a : FG.map\n                             a \\<rightarrow>\\<^sub>C C.map\n                a\\<guillemotright>\n 2. \\<And>f.\n       C.arr f \\<Longrightarrow>\n       \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C FG.map f =\n       C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "using \\<epsilon>o_in_hom"], ["proof (prove)\nusing this:\n  C.ide ?x \\<Longrightarrow>\n  \\<guillemotleft>\\<epsilon>o\n                   ?x : F (G ?x) \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       C.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<epsilon>o\n                        a : FG.map\n                             a \\<rightarrow>\\<^sub>C C.map\n                a\\<guillemotright>\n 2. \\<And>f.\n       C.arr f \\<Longrightarrow>\n       \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C FG.map f =\n       C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       C.arr f \\<Longrightarrow>\n       \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C FG.map f =\n       C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "using \\<psi>_G_char \\<psi>_in_terms_of_\\<epsilon>o"], ["proof (prove)\nusing this:\n  \\<guillemotleft>?f : ?x \\<rightarrow>\\<^sub>C ?x'\\<guillemotright> \\<Longrightarrow>\n  \\<psi> ?x' (G ?f) = ?f \\<cdot>\\<^sub>C \\<epsilon>o ?x\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x ?g = \\<epsilon>o ?x \\<cdot>\\<^sub>C F ?g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       C.arr f \\<Longrightarrow>\n       \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C FG.map f =\n       C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "by (metis C.arr_iff_in_hom C.ide_cod C.map_simp G.preserves_hom comp_apply)"], ["", "lemma \\<epsilon>_map_simp:\n    assumes \"C.ide x\"\n    shows \"\\<epsilon>.map x = \\<psi> x (G x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>.map x = \\<psi> x (G x)", "using assms \\<epsilon>o_def"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<epsilon>o ?x = \\<psi> ?x (G ?x)\n\ngoal (1 subgoal):\n 1. \\<epsilon>.map x = \\<psi> x (G x)", "by simp"], ["", "interpretation FD: composite_functor D D C D.map F"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C)\n     D.map F", ".."], ["", "interpretation CF: composite_functor D C C F C.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n     F C.map", ".."], ["", "interpretation GC: composite_functor C C D C.map G"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n     C.map G", ".."], ["", "interpretation DG: composite_functor C D D G D.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D)\n     G D.map", ".."], ["", "interpretation F\\<eta>: natural_transformation D C F \\<open>F o G o F\\<close> \\<open>F o \\<eta>.map\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FGF.map\n     (F \\<circ> \\<eta>.map)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FGF.map\n     (F \\<circ> \\<eta>.map)", "have \"natural_transformation D C F (F o (G o F)) (F o \\<eta>.map)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (F \\<circ> GF.map) (F \\<circ> \\<eta>.map)", "using \\<eta>.natural_transformation_axioms F.natural_transformation_axioms\n              horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map GF.map\n   \\<eta>.map\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F F\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (F \\<circ> GF.map) (F \\<circ> \\<eta>.map)", "by fastforce"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n   (F \\<circ> GF.map) (F \\<circ> \\<eta>.map)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FGF.map\n     (F \\<circ> \\<eta>.map)", "thus \"natural_transformation D C F (F o G o F) (F o \\<eta>.map)\""], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n   (F \\<circ> GF.map) (F \\<circ> \\<eta>.map)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FGF.map\n     (F \\<circ> \\<eta>.map)", "using o_assoc"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n   (F \\<circ> GF.map) (F \\<circ> \\<eta>.map)\n  ?f \\<circ> (?g \\<circ> ?h) = ?f \\<circ> ?g \\<circ> ?h\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FGF.map\n     (F \\<circ> \\<eta>.map)", "by metis"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FGF.map\n   (F \\<circ> \\<eta>.map)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation \\<epsilon>F: natural_transformation D C \\<open>F o G o F\\<close> F \\<open>\\<epsilon>.map o F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) FGF.map F\n     (\\<epsilon>.map \\<circ> F)", "using \\<epsilon>.natural_transformation_axioms F.natural_transformation_axioms\n            horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) FG.map C.map\n   \\<epsilon>.map\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F F\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) FGF.map F\n     (\\<epsilon>.map \\<circ> F)", "by fastforce"], ["", "interpretation \\<eta>G: natural_transformation C D G \\<open>G o F o G\\<close> \\<open>\\<eta>.map o G\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G GFG.map\n     (\\<eta>.map \\<circ> G)", "using \\<eta>.natural_transformation_axioms G.natural_transformation_axioms\n            horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map GF.map\n   \\<eta>.map\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G G\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G GFG.map\n     (\\<eta>.map \\<circ> G)", "by fastforce"], ["", "interpretation G\\<epsilon>: natural_transformation C D \\<open>G o F o G\\<close> G \\<open>G o \\<epsilon>.map\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GFG.map G\n     (G \\<circ> \\<epsilon>.map)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GFG.map G\n     (G \\<circ> \\<epsilon>.map)", "have \"natural_transformation C D (G o (F o G)) G (G o \\<epsilon>.map)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n     (G \\<circ> FG.map) G (G \\<circ> \\<epsilon>.map)", "using \\<epsilon>.natural_transformation_axioms G.natural_transformation_axioms\n            horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) FG.map C.map\n   \\<epsilon>.map\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G G\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n     (G \\<circ> FG.map) G (G \\<circ> \\<epsilon>.map)", "by fastforce"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n   (G \\<circ> FG.map) G (G \\<circ> \\<epsilon>.map)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GFG.map G\n     (G \\<circ> \\<epsilon>.map)", "thus \"natural_transformation C D (G o F o G) G (G o \\<epsilon>.map)\""], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n   (G \\<circ> FG.map) G (G \\<circ> \\<epsilon>.map)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GFG.map G\n     (G \\<circ> \\<epsilon>.map)", "using o_assoc"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n   (G \\<circ> FG.map) G (G \\<circ> \\<epsilon>.map)\n  ?f \\<circ> (?g \\<circ> ?h) = ?f \\<circ> ?g \\<circ> ?h\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GFG.map G\n     (G \\<circ> \\<epsilon>.map)", "by metis"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) GFG.map G\n   (G \\<circ> \\<epsilon>.map)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation \\<epsilon>FoF\\<eta>: vertical_composite D C F \\<open>F o G o F\\<close> F \\<open>F o \\<eta>.map\\<close> \\<open>\\<epsilon>.map o F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F FGF.map F\n     (F \\<circ> \\<eta>.map) (\\<epsilon>.map \\<circ> F)", ".."], ["", "interpretation G\\<epsilon>o\\<eta>G: vertical_composite C D G \\<open>G o F o G\\<close> G \\<open>\\<eta>.map o G\\<close> \\<open>G o \\<epsilon>.map\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G GFG.map G\n     (\\<eta>.map \\<circ> G) (G \\<circ> \\<epsilon>.map)", ".."], ["", "lemma unit_counit_F:\n    assumes \"D.ide y\"\n    shows \"F y = \\<epsilon>o (F y) \\<cdot>\\<^sub>C F (\\<eta>o y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F y = \\<epsilon>o (F y) \\<cdot>\\<^sub>C F (\\<eta>o y)", "using assms \\<psi>_in_terms_of_\\<epsilon>o \\<eta>o_def \\<psi>_\\<phi> \\<eta>o_in_hom F.preserves_ide C.ide_in_hom"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x ?g = \\<epsilon>o ?x \\<cdot>\\<^sub>C F ?g\n  \\<eta>o ?y = \\<phi> ?y (F ?y)\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x (\\<phi> ?y ?f) = ?f\n  D.ide ?y \\<Longrightarrow>\n  \\<guillemotleft>\\<eta>o\n                   ?y : ?y \\<rightarrow>\\<^sub>D G (F ?y)\\<guillemotright>\n  D.ide ?a \\<Longrightarrow> C.ide (F ?a)\n  C.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>C ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. F y = \\<epsilon>o (F y) \\<cdot>\\<^sub>C F (\\<eta>o y)", "by metis"], ["", "lemma unit_counit_G:\n    assumes \"C.ide x\"\n    shows \"G x = G (\\<epsilon>o x) \\<cdot>\\<^sub>D \\<eta>o (G x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G x = G (\\<epsilon>o x) \\<cdot>\\<^sub>D \\<eta>o (G x)", "using assms \\<phi>_in_terms_of_\\<eta>o \\<epsilon>o_def \\<phi>_\\<psi> \\<epsilon>o_in_hom G.preserves_ide D.ide_in_hom"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y ?f = G ?f \\<cdot>\\<^sub>D \\<eta>o ?y\n  \\<epsilon>o ?x = \\<psi> ?x (G ?x)\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y (\\<psi> ?x ?g) = ?g\n  C.ide ?x \\<Longrightarrow>\n  \\<guillemotleft>\\<epsilon>o\n                   ?x : F (G ?x) \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\n  C.ide ?a \\<Longrightarrow> D.ide (G ?a)\n  D.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>D ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. G x = G (\\<epsilon>o x) \\<cdot>\\<^sub>D \\<eta>o (G x)", "by metis"], ["", "lemma induces_unit_counit_adjunction':\n    shows \"unit_counit_adjunction C D F G \\<eta>.map \\<epsilon>.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_counit_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G\n     \\<eta>.map \\<epsilon>.map", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<epsilon>FoF\\<eta>.map = F\n 2. G\\<epsilon>o\\<eta>G.map = G", "show \"\\<epsilon>FoF\\<eta>.map = F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>FoF\\<eta>.map = F", "using \\<epsilon>FoF\\<eta>.is_natural_transformation \\<epsilon>FoF\\<eta>.map_simp_ide unit_counit_F\n              F.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F\n   \\<epsilon>FoF\\<eta>.map\n  D.ide ?a \\<Longrightarrow>\n  \\<epsilon>FoF\\<eta>.map ?a =\n  (\\<epsilon>.map \\<circ> F) ?a \\<cdot>\\<^sub>C (F \\<circ> \\<eta>.map) ?a\n  D.ide ?y \\<Longrightarrow>\n  F ?y = \\<epsilon>o (F ?y) \\<cdot>\\<^sub>C F (\\<eta>o ?y)\n  natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F F F\n\ngoal (1 subgoal):\n 1. \\<epsilon>FoF\\<eta>.map = F", "by (intro NaturalTransformation.eqI, auto)"], ["proof (state)\nthis:\n  \\<epsilon>FoF\\<eta>.map = F\n\ngoal (1 subgoal):\n 1. G\\<epsilon>o\\<eta>G.map = G", "show \"G\\<epsilon>o\\<eta>G.map = G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G\\<epsilon>o\\<eta>G.map = G", "using G\\<epsilon>o\\<eta>G.is_natural_transformation G\\<epsilon>o\\<eta>G.map_simp_ide unit_counit_G\n              G.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G\n   G\\<epsilon>o\\<eta>G.map\n  C.ide ?a \\<Longrightarrow>\n  G\\<epsilon>o\\<eta>G.map ?a =\n  (G \\<circ> \\<epsilon>.map) ?a \\<cdot>\\<^sub>D (\\<eta>.map \\<circ> G) ?a\n  C.ide ?x \\<Longrightarrow>\n  G ?x = G (\\<epsilon>o ?x) \\<cdot>\\<^sub>D \\<eta>o (G ?x)\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G G\n\ngoal (1 subgoal):\n 1. G\\<epsilon>o\\<eta>G.map = G", "by (intro NaturalTransformation.eqI, auto)"], ["proof (state)\nthis:\n  G\\<epsilon>o\\<eta>G.map = G\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \\<eta> :: \"'d \\<Rightarrow> 'd\" where \"\\<eta> \\<equiv> \\<eta>.map\""], ["", "definition \\<epsilon> :: \"'c \\<Rightarrow> 'c\" where \"\\<epsilon> \\<equiv> \\<epsilon>.map\""], ["", "theorem induces_unit_counit_adjunction:\n    shows \"unit_counit_adjunction C D F G \\<eta> \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_counit_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n     \\<epsilon>", "unfolding \\<eta>_def \\<epsilon>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_counit_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G\n     \\<eta>.map \\<epsilon>.map", "using induces_unit_counit_adjunction'"], ["proof (prove)\nusing this:\n  unit_counit_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>.map\n   \\<epsilon>.map\n\ngoal (1 subgoal):\n 1. unit_counit_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G\n     \\<eta>.map \\<epsilon>.map", "by simp"], ["", "lemma \\<eta>_is_natural_transformation:\n    shows \"natural_transformation D D D.map GF.map \\<eta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map GF.map\n     \\<eta>", "unfolding \\<eta>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map GF.map\n     \\<eta>.map", ".."], ["", "lemma \\<epsilon>_is_natural_transformation:\n    shows \"natural_transformation C C FG.map C.map \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) FG.map C.map\n     \\<epsilon>", "unfolding \\<epsilon>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) FG.map C.map\n     \\<epsilon>.map", ".."], ["", "text\\<open>\n      From the defined @{term \\<eta>} and @{term \\<epsilon>} we can recover the original @{term \\<phi>} and @{term \\<psi>}.\n\\<close>"], ["", "lemma \\<phi>_in_terms_of_\\<eta>:\n    assumes \"D.ide y\" and \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<phi> y f = G f \\<cdot>\\<^sub>D \\<eta> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y f = G f \\<cdot>\\<^sub>D \\<eta> y", "using assms \\<eta>_def"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<eta> \\<equiv> \\<eta>.map\n\ngoal (1 subgoal):\n 1. \\<phi> y f = G f \\<cdot>\\<^sub>D \\<eta> y", "by (simp add: \\<phi>_in_terms_of_\\<eta>o)"], ["", "lemma \\<psi>_in_terms_of_\\<epsilon>:\n    assumes \"C.ide x\" and \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<psi> x g = \\<epsilon> x \\<cdot>\\<^sub>C F g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x g = \\<epsilon> x \\<cdot>\\<^sub>C F g", "using assms \\<epsilon>_def"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<epsilon> \\<equiv> \\<epsilon>.map\n\ngoal (1 subgoal):\n 1. \\<psi> x g = \\<epsilon> x \\<cdot>\\<^sub>C F g", "by (simp add: \\<psi>_in_terms_of_\\<epsilon>o)"], ["", "end"], ["", "section \"Meta-Adjunctions Induce Left and Right Adjoint Functors\""], ["", "context meta_adjunction\n  begin"], ["", "interpretation unit_counit_adjunction C D F G \\<eta> \\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_counit_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n     \\<epsilon>", "using induces_unit_counit_adjunction \\<eta>_def \\<epsilon>_def"], ["proof (prove)\nusing this:\n  unit_counit_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n   \\<epsilon>\n  \\<eta> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n   \\<eta>o\n  \\<epsilon> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n   (F \\<circ> G) \\<epsilon>o\n\ngoal (1 subgoal):\n 1. unit_counit_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n     \\<epsilon>", "by auto"], ["", "lemma has_terminal_arrows_from_functor:\n    assumes x: \"C.ide x\"\n    shows \"terminal_arrow_from_functor D C F (G x) x (\\<epsilon> x)\"\n    and \"\\<And>y' f. arrow_from_functor D C F y' x f\n                   \\<Longrightarrow> terminal_arrow_from_functor.the_coext D C F (G x) (\\<epsilon> x) y' f = \\<phi> y' f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (G x)\n     x (\\<epsilon> x) &&&\n    (\\<And>y' f.\n        arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n         f \\<Longrightarrow>\n        terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>D)\n         (\\<cdot>\\<^sub>C) F (G x) (\\<epsilon> x) y' f =\n        \\<phi> y' f)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (G x)\n     x (\\<epsilon> x)\n 2. \\<And>y' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n        f \\<Longrightarrow>\n       terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>D)\n        (\\<cdot>\\<^sub>C) F (G x) (\\<epsilon> x) y' f =\n       \\<phi> y' f", "interpret \\<epsilon>x: arrow_from_functor D C F \\<open>G x\\<close> x \\<open>\\<epsilon> x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (G x) x\n     (\\<epsilon> x)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. D.ide (G x) \\<and>\n    \\<guillemotleft>\\<epsilon>\n                     x : F (G x) \\<rightarrow>\\<^sub>C x\\<guillemotright>", "using x \\<epsilon>.preserves_hom G.preserves_ide"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>C ?b\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>\\<epsilon>\n                   ?f : FG.map\n                         ?a \\<rightarrow>\\<^sub>C C.map ?b\\<guillemotright>\n  C.ide ?a \\<Longrightarrow> D.ide (G ?a)\n\ngoal (1 subgoal):\n 1. D.ide (G x) \\<and>\n    \\<guillemotleft>\\<epsilon>\n                     x : F (G x) \\<rightarrow>\\<^sub>C x\\<guillemotright>", "by auto"], ["proof (state)\ngoal (2 subgoals):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (G x)\n     x (\\<epsilon> x)\n 2. \\<And>y' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n        f \\<Longrightarrow>\n       terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>D)\n        (\\<cdot>\\<^sub>C) F (G x) (\\<epsilon> x) y' f =\n       \\<phi> y' f", "have 1: \"\\<And>y' f. arrow_from_functor D C F y' x f \\<Longrightarrow>\n                      \\<epsilon>x.is_coext y' f (\\<phi> y' f) \\<and> (\\<forall>g'. \\<epsilon>x.is_coext y' f g' \\<longrightarrow> g' = \\<phi> y' f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n        f \\<Longrightarrow>\n       \\<epsilon>x.is_coext y' f (\\<phi> y' f) \\<and>\n       (\\<forall>g'.\n           \\<epsilon>x.is_coext y' f g' \\<longrightarrow> g' = \\<phi> y' f)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n        f \\<Longrightarrow>\n       \\<epsilon>x.is_coext y' f (\\<phi> y' f)\n 2. \\<And>y' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n        f \\<Longrightarrow>\n       \\<forall>g'.\n          \\<epsilon>x.is_coext y' f g' \\<longrightarrow> g' = \\<phi> y' f", "fix y' :: 'd and f :: 'c"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n        f \\<Longrightarrow>\n       \\<epsilon>x.is_coext y' f (\\<phi> y' f)\n 2. \\<And>y' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n        f \\<Longrightarrow>\n       \\<forall>g'.\n          \\<epsilon>x.is_coext y' f g' \\<longrightarrow> g' = \\<phi> y' f", "assume f: \"arrow_from_functor D C F y' x f\""], ["proof (state)\nthis:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x f\n\ngoal (2 subgoals):\n 1. \\<And>y' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n        f \\<Longrightarrow>\n       \\<epsilon>x.is_coext y' f (\\<phi> y' f)\n 2. \\<And>y' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n        f \\<Longrightarrow>\n       \\<forall>g'.\n          \\<epsilon>x.is_coext y' f g' \\<longrightarrow> g' = \\<phi> y' f", "show \"\\<epsilon>x.is_coext y' f (\\<phi> y' f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>x.is_coext y' f (\\<phi> y' f)", "using f x \\<epsilon>_def \\<phi>_in_hom \\<psi>_\\<phi> \\<psi>_in_terms_of_\\<epsilon> \\<epsilon>x.is_coext_def arrow_from_functor.arrow"], ["proof (prove)\nusing this:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x f\n  C.ide x\n  \\<epsilon> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n   FG.map \\<epsilon>o\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x (\\<phi> ?y ?f) = ?f\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x ?g = \\<epsilon> ?x \\<cdot>\\<^sub>C F ?g\n  \\<epsilon>x.is_coext ?x' ?f ?g \\<equiv>\n  \\<guillemotleft>?g : ?x' \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n  ?f = \\<epsilon> x \\<cdot>\\<^sub>C F ?g\n  arrow_from_functor ?D ?C ?F ?x ?y ?e \\<Longrightarrow>\n  partial_magma.ide ?D ?x \\<and> partial_magma.in_hom ?C ?e (?F ?x) ?y\n\ngoal (1 subgoal):\n 1. \\<epsilon>x.is_coext y' f (\\<phi> y' f)", "by metis"], ["proof (state)\nthis:\n  \\<epsilon>x.is_coext y' f (\\<phi> y' f)\n\ngoal (1 subgoal):\n 1. \\<And>y' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n        f \\<Longrightarrow>\n       \\<forall>g'.\n          \\<epsilon>x.is_coext y' f g' \\<longrightarrow> g' = \\<phi> y' f", "show \"\\<forall>g'. \\<epsilon>x.is_coext y' f g' \\<longrightarrow> g' = \\<phi> y' f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>g'.\n       \\<epsilon>x.is_coext y' f g' \\<longrightarrow> g' = \\<phi> y' f", "using \\<epsilon>o_def \\<psi>_in_terms_of_\\<epsilon>o x \\<epsilon>_map_simp \\<phi>_\\<psi> \\<epsilon>x.is_coext_def \\<epsilon>_def"], ["proof (prove)\nusing this:\n  \\<epsilon>o ?x = \\<psi> ?x (G ?x)\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x ?g = \\<epsilon>o ?x \\<cdot>\\<^sub>C F ?g\n  C.ide x\n  C.ide ?x \\<Longrightarrow>\n  transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n   FG.map \\<epsilon>o ?x =\n  \\<psi> ?x (G ?x)\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y (\\<psi> ?x ?g) = ?g\n  \\<epsilon>x.is_coext ?x' ?f ?g \\<equiv>\n  \\<guillemotleft>?g : ?x' \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n  ?f = \\<epsilon> x \\<cdot>\\<^sub>C F ?g\n  \\<epsilon> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n   FG.map \\<epsilon>o\n\ngoal (1 subgoal):\n 1. \\<forall>g'.\n       \\<epsilon>x.is_coext y' f g' \\<longrightarrow> g' = \\<phi> y' f", "by simp"], ["proof (state)\nthis:\n  \\<forall>g'.\n     \\<epsilon>x.is_coext y' f g' \\<longrightarrow> g' = \\<phi> y' f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?y' x\n   ?f \\<Longrightarrow>\n  \\<epsilon>x.is_coext ?y' ?f (\\<phi> ?y' ?f) \\<and>\n  (\\<forall>g'.\n      \\<epsilon>x.is_coext ?y' ?f g' \\<longrightarrow> g' = \\<phi> ?y' ?f)\n\ngoal (2 subgoals):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (G x)\n     x (\\<epsilon> x)\n 2. \\<And>y' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n        f \\<Longrightarrow>\n       terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>D)\n        (\\<cdot>\\<^sub>C) F (G x) (\\<epsilon> x) y' f =\n       \\<phi> y' f", "interpret \\<epsilon>x: terminal_arrow_from_functor D C F \\<open>G x\\<close> x \\<open>\\<epsilon> x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (G x)\n     x (\\<epsilon> x)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x' x\n        f \\<Longrightarrow>\n       \\<exists>!g. \\<epsilon>x.is_coext x' f g", "using 1"], ["proof (prove)\nusing this:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?y' x\n   ?f \\<Longrightarrow>\n  \\<epsilon>x.is_coext ?y' ?f (\\<phi> ?y' ?f) \\<and>\n  (\\<forall>g'.\n      \\<epsilon>x.is_coext ?y' ?f g' \\<longrightarrow> g' = \\<phi> ?y' ?f)\n\ngoal (1 subgoal):\n 1. \\<And>x' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x' x\n        f \\<Longrightarrow>\n       \\<exists>!g. \\<epsilon>x.is_coext x' f g", "by blast"], ["proof (state)\ngoal (2 subgoals):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (G x)\n     x (\\<epsilon> x)\n 2. \\<And>y' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n        f \\<Longrightarrow>\n       \\<epsilon>x.the_coext y' f = \\<phi> y' f", "show \"terminal_arrow_from_functor D C F (G x) x (\\<epsilon> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (G x)\n     x (\\<epsilon> x)", ".."], ["proof (state)\nthis:\n  terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (G x) x\n   (\\<epsilon> x)\n\ngoal (1 subgoal):\n 1. \\<And>y' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n        f \\<Longrightarrow>\n       \\<epsilon>x.the_coext y' f = \\<phi> y' f", "show \"\\<And>y' f. arrow_from_functor D C F y' x f \\<Longrightarrow> \\<epsilon>x.the_coext y' f = \\<phi> y' f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n        f \\<Longrightarrow>\n       \\<epsilon>x.the_coext y' f = \\<phi> y' f", "using 1 \\<epsilon>x.the_coext_def"], ["proof (prove)\nusing this:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?y' x\n   ?f \\<Longrightarrow>\n  \\<epsilon>x.is_coext ?y' ?f (\\<phi> ?y' ?f) \\<and>\n  (\\<forall>g'.\n      \\<epsilon>x.is_coext ?y' ?f g' \\<longrightarrow> g' = \\<phi> ?y' ?f)\n  \\<epsilon>x.the_coext ?x' ?f = (THE g. \\<epsilon>x.is_coext ?x' ?f g)\n\ngoal (1 subgoal):\n 1. \\<And>y' f.\n       arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y' x\n        f \\<Longrightarrow>\n       \\<epsilon>x.the_coext y' f = \\<phi> y' f", "by auto"], ["proof (state)\nthis:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?y' x\n   ?f \\<Longrightarrow>\n  \\<epsilon>x.the_coext ?y' ?f = \\<phi> ?y' ?f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma has_left_adjoint_functor:\n    shows \"left_adjoint_functor D C F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_adjoint_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       C.ide y \\<Longrightarrow>\n       \\<exists>x e.\n          terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n           x y e", "using has_terminal_arrows_from_functor"], ["proof (prove)\nusing this:\n  C.ide ?x \\<Longrightarrow>\n  terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (G ?x)\n   ?x (\\<epsilon> ?x)\n  \\<lbrakk>C.ide ?x;\n   arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?y' ?x\n    ?f\\<rbrakk>\n  \\<Longrightarrow> terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>D)\n                     (\\<cdot>\\<^sub>C) F (G ?x) (\\<epsilon> ?x) ?y' ?f =\n                    \\<phi> ?y' ?f\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       C.ide y \\<Longrightarrow>\n       \\<exists>x e.\n          terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n           x y e", "by auto"], ["", "lemma has_initial_arrows_to_functor:\n    assumes y: \"D.ide y\"\n    shows \"initial_arrow_to_functor C D G y (F y) (\\<eta> y)\"\n    and \"\\<And>x' g. arrow_to_functor C D G y x' g \\<Longrightarrow>\n                  initial_arrow_to_functor.the_ext C D G (F y) (\\<eta> y) x' g = \\<psi> x' g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (F y)\n     (\\<eta> y) &&&\n    (\\<And>x' g.\n        arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n         g \\<Longrightarrow>\n        initial_arrow_to_functor.the_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n         G (F y) (\\<eta> y) x' g =\n        \\<psi> x' g)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (F y)\n     (\\<eta> y)\n 2. \\<And>x' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n        g \\<Longrightarrow>\n       initial_arrow_to_functor.the_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n        G (F y) (\\<eta> y) x' g =\n       \\<psi> x' g", "interpret \\<eta>y: arrow_to_functor C D G y \\<open>F y\\<close> \\<open>\\<eta> y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (F y)\n     (\\<eta> y)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide (F y) \\<and>\n    \\<guillemotleft>\\<eta>\n                     y : y \\<rightarrow>\\<^sub>D G (F y)\\<guillemotright>", "using y"], ["proof (prove)\nusing this:\n  D.ide y\n\ngoal (1 subgoal):\n 1. C.ide (F y) \\<and>\n    \\<guillemotleft>\\<eta>\n                     y : y \\<rightarrow>\\<^sub>D G (F y)\\<guillemotright>", "by auto"], ["proof (state)\ngoal (2 subgoals):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (F y)\n     (\\<eta> y)\n 2. \\<And>x' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n        g \\<Longrightarrow>\n       initial_arrow_to_functor.the_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n        G (F y) (\\<eta> y) x' g =\n       \\<psi> x' g", "have 1: \"\\<And>x' g. arrow_to_functor C D G y x' g \\<Longrightarrow>\n                         \\<eta>y.is_ext x' g (\\<psi> x' g) \\<and> (\\<forall>f'. \\<eta>y.is_ext x' g f' \\<longrightarrow> f' = \\<psi> x' g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n        g \\<Longrightarrow>\n       \\<eta>y.is_ext x' g (\\<psi> x' g) \\<and>\n       (\\<forall>f'.\n           \\<eta>y.is_ext x' g f' \\<longrightarrow> f' = \\<psi> x' g)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n        g \\<Longrightarrow>\n       \\<eta>y.is_ext x' g (\\<psi> x' g)\n 2. \\<And>x' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n        g \\<Longrightarrow>\n       \\<forall>f'.\n          \\<eta>y.is_ext x' g f' \\<longrightarrow> f' = \\<psi> x' g", "fix x' :: 'c and g :: 'd"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n        g \\<Longrightarrow>\n       \\<eta>y.is_ext x' g (\\<psi> x' g)\n 2. \\<And>x' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n        g \\<Longrightarrow>\n       \\<forall>f'.\n          \\<eta>y.is_ext x' g f' \\<longrightarrow> f' = \\<psi> x' g", "assume g: \"arrow_to_functor C D G y x' g\""], ["proof (state)\nthis:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x' g\n\ngoal (2 subgoals):\n 1. \\<And>x' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n        g \\<Longrightarrow>\n       \\<eta>y.is_ext x' g (\\<psi> x' g)\n 2. \\<And>x' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n        g \\<Longrightarrow>\n       \\<forall>f'.\n          \\<eta>y.is_ext x' g f' \\<longrightarrow> f' = \\<psi> x' g", "show \"\\<eta>y.is_ext x' g (\\<psi> x' g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>y.is_ext x' g (\\<psi> x' g)", "using g y \\<psi>_in_hom \\<phi>_\\<psi> \\<phi>_in_terms_of_\\<eta> \\<eta>y.is_ext_def arrow_to_functor.arrow \\<eta>_def"], ["proof (prove)\nusing this:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x' g\n  D.ide y\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> ?x\n                                     ?g : F\n     ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y (\\<psi> ?x ?g) = ?g\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y ?f = G ?f \\<cdot>\\<^sub>D \\<eta> ?y\n  \\<eta>y.is_ext ?y' ?g ?f \\<equiv>\n  \\<guillemotleft>?f : F y \\<rightarrow>\\<^sub>C ?y'\\<guillemotright> \\<and>\n  ?g = G ?f \\<cdot>\\<^sub>D \\<eta> y\n  arrow_to_functor ?C ?D ?G ?x ?y ?e \\<Longrightarrow>\n  partial_magma.ide ?C ?y \\<and> partial_magma.in_hom ?D ?e ?x (?G ?y)\n  \\<eta> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n   \\<eta>o\n\ngoal (1 subgoal):\n 1. \\<eta>y.is_ext x' g (\\<psi> x' g)", "by metis"], ["proof (state)\nthis:\n  \\<eta>y.is_ext x' g (\\<psi> x' g)\n\ngoal (1 subgoal):\n 1. \\<And>x' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n        g \\<Longrightarrow>\n       \\<forall>f'.\n          \\<eta>y.is_ext x' g f' \\<longrightarrow> f' = \\<psi> x' g", "show \"\\<forall>f'. \\<eta>y.is_ext x' g f' \\<longrightarrow> f' = \\<psi> x' g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f'. \\<eta>y.is_ext x' g f' \\<longrightarrow> f' = \\<psi> x' g", "using y \\<eta>o_def \\<phi>_in_terms_of_\\<eta>o \\<eta>_map_simp \\<psi>_\\<phi> \\<eta>y.is_ext_def \\<eta>_def"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<eta>o ?y = \\<phi> ?y (F ?y)\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y ?f = G ?f \\<cdot>\\<^sub>D \\<eta>o ?y\n  D.ide ?y \\<Longrightarrow>\n  transformation_by_components.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n   \\<eta>o ?y =\n  \\<phi> ?y (F ?y)\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x (\\<phi> ?y ?f) = ?f\n  \\<eta>y.is_ext ?y' ?g ?f \\<equiv>\n  \\<guillemotleft>?f : F y \\<rightarrow>\\<^sub>C ?y'\\<guillemotright> \\<and>\n  ?g = G ?f \\<cdot>\\<^sub>D \\<eta> y\n  \\<eta> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n   \\<eta>o\n\ngoal (1 subgoal):\n 1. \\<forall>f'. \\<eta>y.is_ext x' g f' \\<longrightarrow> f' = \\<psi> x' g", "by simp"], ["proof (state)\nthis:\n  \\<forall>f'. \\<eta>y.is_ext x' g f' \\<longrightarrow> f' = \\<psi> x' g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y ?x'\n   ?g \\<Longrightarrow>\n  \\<eta>y.is_ext ?x' ?g (\\<psi> ?x' ?g) \\<and>\n  (\\<forall>f'.\n      \\<eta>y.is_ext ?x' ?g f' \\<longrightarrow> f' = \\<psi> ?x' ?g)\n\ngoal (2 subgoals):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (F y)\n     (\\<eta> y)\n 2. \\<And>x' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n        g \\<Longrightarrow>\n       initial_arrow_to_functor.the_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n        G (F y) (\\<eta> y) x' g =\n       \\<psi> x' g", "interpret \\<eta>y: initial_arrow_to_functor C D G y \\<open>F y\\<close> \\<open>\\<eta> y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (F y)\n     (\\<eta> y)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y y'\n        g \\<Longrightarrow>\n       \\<exists>!f. \\<eta>y.is_ext y' g f", "using 1"], ["proof (prove)\nusing this:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y ?x'\n   ?g \\<Longrightarrow>\n  \\<eta>y.is_ext ?x' ?g (\\<psi> ?x' ?g) \\<and>\n  (\\<forall>f'.\n      \\<eta>y.is_ext ?x' ?g f' \\<longrightarrow> f' = \\<psi> ?x' ?g)\n\ngoal (1 subgoal):\n 1. \\<And>y' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y y'\n        g \\<Longrightarrow>\n       \\<exists>!f. \\<eta>y.is_ext y' g f", "by blast"], ["proof (state)\ngoal (2 subgoals):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (F y)\n     (\\<eta> y)\n 2. \\<And>x' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n        g \\<Longrightarrow>\n       \\<eta>y.the_ext x' g = \\<psi> x' g", "show \"initial_arrow_to_functor C D G y (F y) (\\<eta> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (F y)\n     (\\<eta> y)", ".."], ["proof (state)\nthis:\n  initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (F y)\n   (\\<eta> y)\n\ngoal (1 subgoal):\n 1. \\<And>x' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n        g \\<Longrightarrow>\n       \\<eta>y.the_ext x' g = \\<psi> x' g", "show \"\\<And>x' g. arrow_to_functor C D G y x' g \\<Longrightarrow> \\<eta>y.the_ext x' g = \\<psi> x' g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n        g \\<Longrightarrow>\n       \\<eta>y.the_ext x' g = \\<psi> x' g", "using 1 \\<eta>y.the_ext_def"], ["proof (prove)\nusing this:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y ?x'\n   ?g \\<Longrightarrow>\n  \\<eta>y.is_ext ?x' ?g (\\<psi> ?x' ?g) \\<and>\n  (\\<forall>f'.\n      \\<eta>y.is_ext ?x' ?g f' \\<longrightarrow> f' = \\<psi> ?x' ?g)\n  \\<eta>y.the_ext ?y' ?g = (THE f. \\<eta>y.is_ext ?y' ?g f)\n\ngoal (1 subgoal):\n 1. \\<And>x' g.\n       arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x'\n        g \\<Longrightarrow>\n       \\<eta>y.the_ext x' g = \\<psi> x' g", "by auto"], ["proof (state)\nthis:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y ?x'\n   ?g \\<Longrightarrow>\n  \\<eta>y.the_ext ?x' ?g = \\<psi> ?x' ?g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma has_right_adjoint_functor:\n    shows \"right_adjoint_functor C D G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       D.ide x \\<Longrightarrow>\n       \\<exists>y e.\n          initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G x y\n           e", "using has_initial_arrows_to_functor"], ["proof (prove)\nusing this:\n  D.ide ?y \\<Longrightarrow>\n  initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y (F ?y)\n   (\\<eta> ?y)\n  \\<lbrakk>D.ide ?y;\n   arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y ?x' ?g\\<rbrakk>\n  \\<Longrightarrow> initial_arrow_to_functor.the_ext (\\<cdot>\\<^sub>C)\n                     (\\<cdot>\\<^sub>D) G (F ?y) (\\<eta> ?y) ?x' ?g =\n                    \\<psi> ?x' ?g\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       D.ide x \\<Longrightarrow>\n       \\<exists>y e.\n          initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G x y\n           e", "by auto"], ["", "end"], ["", "section \"Unit/Counit Adjunctions Induce Meta-Adjunctions\""], ["", "context unit_counit_adjunction\n  begin"], ["", "definition \\<phi> :: \"'d \\<Rightarrow> 'c \\<Rightarrow> 'd\"\n    where \"\\<phi> y h = G h \\<cdot>\\<^sub>D \\<eta> y\""], ["", "definition \\<psi> :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'c\"\n    where \"\\<psi> x h = \\<epsilon> x \\<cdot>\\<^sub>C F h\""], ["", "interpretation meta_adjunction C D F G \\<phi> \\<psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<phi> y\n    f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 3. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x (\\<phi> y f) = f\n 4. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 5. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "fix x :: 'c and y :: 'd and f :: 'c"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<phi> y\n    f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 3. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x (\\<phi> y f) = f\n 4. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 5. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "assume y: \"D.ide y\" and f: \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (state)\nthis:\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (5 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<phi> y\n    f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 3. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x (\\<phi> y f) = f\n 4. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 5. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "show 0: \"\\<guillemotleft>\\<phi> y f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "using f y G.preserves_hom \\<eta>.preserves_hom \\<phi>_def D.ide_in_hom"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  D.ide y\n  \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>C ?b\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>G ?f : G ?a \\<rightarrow>\\<^sub>D G ?b\\<guillemotright>\n  \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>D ?b\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>\\<eta>\n                   ?f : D.map\n                         ?a \\<rightarrow>\\<^sub>D GF.map ?b\\<guillemotright>\n  \\<phi> ?y ?h = G ?h \\<cdot>\\<^sub>D \\<eta> ?y\n  D.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>D ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<phi> y f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (4 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 2. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x (\\<phi> y f) = f\n 3. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 4. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "show \"\\<psi> x (\\<phi> y f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "have \"\\<psi> x (\\<phi> y f) = (\\<epsilon> x \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C F (\\<eta> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) =\n    (\\<epsilon> x \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C F (\\<eta> y)", "using y f \\<phi>_def \\<psi>_def C.comp_assoc"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<phi> ?y ?h = G ?h \\<cdot>\\<^sub>D \\<eta> ?y\n  \\<psi> ?x ?h = \\<epsilon> ?x \\<cdot>\\<^sub>C F ?h\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) =\n    (\\<epsilon> x \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C F (\\<eta> y)", "by auto"], ["proof (state)\nthis:\n  \\<psi> x (\\<phi> y f) =\n  (\\<epsilon> x \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C F (\\<eta> y)\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "also"], ["proof (state)\nthis:\n  \\<psi> x (\\<phi> y f) =\n  (\\<epsilon> x \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C F (\\<eta> y)\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "have \"... = (f \\<cdot>\\<^sub>C \\<epsilon> (F y)) \\<cdot>\\<^sub>C F (\\<eta> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<epsilon> x \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C F (\\<eta> y) =\n    (f \\<cdot>\\<^sub>C \\<epsilon> (F y)) \\<cdot>\\<^sub>C F (\\<eta> y)", "using y f \\<epsilon>.naturality"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  C.arr ?f \\<Longrightarrow>\n  \\<epsilon> (C.cod ?f) \\<cdot>\\<^sub>C FG.map ?f =\n  C.map ?f \\<cdot>\\<^sub>C \\<epsilon> (C.dom ?f)\n\ngoal (1 subgoal):\n 1. (\\<epsilon> x \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C F (\\<eta> y) =\n    (f \\<cdot>\\<^sub>C \\<epsilon> (F y)) \\<cdot>\\<^sub>C F (\\<eta> y)", "by auto"], ["proof (state)\nthis:\n  (\\<epsilon> x \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C F (\\<eta> y) =\n  (f \\<cdot>\\<^sub>C \\<epsilon> (F y)) \\<cdot>\\<^sub>C F (\\<eta> y)\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "also"], ["proof (state)\nthis:\n  (\\<epsilon> x \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C F (\\<eta> y) =\n  (f \\<cdot>\\<^sub>C \\<epsilon> (F y)) \\<cdot>\\<^sub>C F (\\<eta> y)\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "have \"... = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<cdot>\\<^sub>C \\<epsilon> (F y)) \\<cdot>\\<^sub>C F (\\<eta> y) = f", "using y f \\<epsilon>FoF\\<eta>.map_simp_2 triangle_F C.comp_arr_dom D.ide_in_hom C.comp_assoc"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  D.arr ?f \\<Longrightarrow>\n  \\<epsilon>FoF\\<eta>.map ?f =\n  (\\<epsilon> \\<circ> F) ?f \\<cdot>\\<^sub>C (F \\<circ> \\<eta>) (D.dom ?f)\n  \\<epsilon>FoF\\<eta>.map = F\n  \\<lbrakk>C.arr ?f; C.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>C ?a = ?f\n  D.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>D ?a\\<guillemotright>\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. (f \\<cdot>\\<^sub>C \\<epsilon> (F y)) \\<cdot>\\<^sub>C F (\\<eta> y) = f", "by fastforce"], ["proof (state)\nthis:\n  (f \\<cdot>\\<^sub>C \\<epsilon> (F y)) \\<cdot>\\<^sub>C F (\\<eta> y) = f\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "finally"], ["proof (chain)\npicking this:\n  \\<psi> x (\\<phi> y f) = f", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<psi> x (\\<phi> y f) = f\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "by auto"], ["proof (state)\nthis:\n  \\<psi> x (\\<phi> y f) = f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<psi> x (\\<phi> y f) = f\n\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "fix x :: 'c and y :: 'd and g :: 'd"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "assume x: \"C.ide x\" and g: \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\""], ["proof (state)\nthis:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "show \"\\<guillemotleft>\\<psi> x g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "using g x \\<psi>_def"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  C.ide x\n  \\<psi> ?x ?h = \\<epsilon> ?x \\<cdot>\\<^sub>C F ?h\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "by fastforce"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<psi> x g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (2 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 2. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "show \"\\<phi> y (\\<psi> x g) = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "have \"\\<phi> y (\\<psi> x g) = (G (\\<epsilon> x) \\<cdot>\\<^sub>D \\<eta> (G x)) \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) =\n    (G (\\<epsilon> x) \\<cdot>\\<^sub>D \\<eta> (G x)) \\<cdot>\\<^sub>D g", "using g x \\<phi>_def \\<psi>_def \\<eta>.naturality [of g] D.comp_assoc"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  C.ide x\n  \\<phi> ?y ?h = G ?h \\<cdot>\\<^sub>D \\<eta> ?y\n  \\<psi> ?x ?h = \\<epsilon> ?x \\<cdot>\\<^sub>C F ?h\n  D.arr g \\<Longrightarrow>\n  \\<eta> (D.cod g) \\<cdot>\\<^sub>D D.map g =\n  GF.map g \\<cdot>\\<^sub>D \\<eta> (D.dom g)\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) =\n    (G (\\<epsilon> x) \\<cdot>\\<^sub>D \\<eta> (G x)) \\<cdot>\\<^sub>D g", "by auto"], ["proof (state)\nthis:\n  \\<phi> y (\\<psi> x g) =\n  (G (\\<epsilon> x) \\<cdot>\\<^sub>D \\<eta> (G x)) \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "also"], ["proof (state)\nthis:\n  \\<phi> y (\\<psi> x g) =\n  (G (\\<epsilon> x) \\<cdot>\\<^sub>D \\<eta> (G x)) \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "have \"... = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G (\\<epsilon> x) \\<cdot>\\<^sub>D \\<eta> (G x)) \\<cdot>\\<^sub>D g = g", "using x g triangle_G D.comp_ide_arr G\\<epsilon>o\\<eta>G.map_simp_ide"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  G\\<epsilon>o\\<eta>G.map = G\n  \\<lbrakk>D.ide ?b; D.seq ?b ?f\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>D ?f = ?f\n  C.ide ?a \\<Longrightarrow>\n  G\\<epsilon>o\\<eta>G.map ?a =\n  (G \\<circ> \\<epsilon>) ?a \\<cdot>\\<^sub>D (\\<eta> \\<circ> G) ?a\n\ngoal (1 subgoal):\n 1. (G (\\<epsilon> x) \\<cdot>\\<^sub>D \\<eta> (G x)) \\<cdot>\\<^sub>D g = g", "by auto"], ["proof (state)\nthis:\n  (G (\\<epsilon> x) \\<cdot>\\<^sub>D \\<eta> (G x)) \\<cdot>\\<^sub>D g = g\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "finally"], ["proof (chain)\npicking this:\n  \\<phi> y (\\<psi> x g) = g", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> y (\\<psi> x g) = g\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "by auto"], ["proof (state)\nthis:\n  \\<phi> y (\\<psi> x g) = g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<phi> y (\\<psi> x g) = g\n\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "fix f :: 'c and g :: 'd and h :: 'c and x :: 'c and x' :: 'c and y :: 'd and y' :: 'd"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "assume f: \"\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\" and g: \"\\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\" and h: \"\\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (state)\nthis:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "show \"\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) = G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "using \\<phi>_def f g h \\<eta>.naturality D.comp_assoc"], ["proof (prove)\nusing this:\n  \\<phi> ?y ?h = G ?h \\<cdot>\\<^sub>D \\<eta> ?y\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  D.arr ?f \\<Longrightarrow>\n  \\<eta> (D.cod ?f) \\<cdot>\\<^sub>D D.map ?f =\n  GF.map ?f \\<cdot>\\<^sub>D \\<eta> (D.dom ?f)\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "by fastforce"], ["proof (state)\nthis:\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n  G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem induces_meta_adjunction:\n    shows \"meta_adjunction C D F G \\<phi> \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", ".."], ["", "text\\<open>\n      From the defined @{term \\<phi>} and @{term \\<psi>} we can recover the original @{term \\<eta>} and @{term \\<epsilon>}.\n\\<close>"], ["", "lemma \\<eta>_in_terms_of_\\<phi>:\n    assumes \"D.ide y\"\n    shows \"\\<eta> y = \\<phi> y (F y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta> y = \\<phi> y (F y)", "using assms \\<phi>_def D.comp_cod_arr"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<phi> ?y ?h = G ?h \\<cdot>\\<^sub>D \\<eta> ?y\n  \\<lbrakk>D.arr ?f; D.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>D ?f = ?f\n\ngoal (1 subgoal):\n 1. \\<eta> y = \\<phi> y (F y)", "by auto"], ["", "lemma \\<epsilon>_in_terms_of_\\<psi>:\n    assumes \"C.ide x\"\n    shows \"\\<epsilon> x = \\<psi> x (G x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> x = \\<psi> x (G x)", "using assms \\<psi>_def C.comp_arr_dom"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<psi> ?x ?h = \\<epsilon> ?x \\<cdot>\\<^sub>C F ?h\n  \\<lbrakk>C.arr ?f; C.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>C ?a = ?f\n\ngoal (1 subgoal):\n 1. \\<epsilon> x = \\<psi> x (G x)", "by auto"], ["", "end"], ["", "section \"Left and Right Adjoint Functors Induce Meta-Adjunctions\""], ["", "text\\<open>\n    A left adjoint functor induces a meta-adjunction, modulo the choice of a\n    right adjoint and counit.\n\\<close>"], ["", "context left_adjoint_functor\n  begin"], ["", "definition Go :: \"'c \\<Rightarrow> 'd\"\n    where \"Go a = (SOME b. \\<exists>e. terminal_arrow_from_functor D C F b a e)\""], ["", "definition \\<epsilon>o :: \"'c \\<Rightarrow> 'c\"\n    where \"\\<epsilon>o a = (SOME e. terminal_arrow_from_functor D C F (Go a) a e)\""], ["", "lemma Go_\\<epsilon>o_terminal:\n    assumes \"\\<exists>b e. terminal_arrow_from_functor D C F b a e\"\n    shows \"terminal_arrow_from_functor D C F (Go a) a (\\<epsilon>o a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go a)\n     a (\\<epsilon>o a)", "using assms Go_def \\<epsilon>o_def\n            someI_ex [of \"\\<lambda>b. \\<exists>e. terminal_arrow_from_functor D C F b a e\"]\n            someI_ex [of \"\\<lambda>e. terminal_arrow_from_functor D C F (Go a) a e\"]"], ["proof (prove)\nusing this:\n  \\<exists>b e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F b a e\n  Go ?a =\n  (SOME b.\n      \\<exists>e.\n         terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F b\n          ?a e)\n  \\<epsilon>o ?a =\n  (SOME e.\n      terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n       (Go ?a) ?a e)\n  \\<exists>x e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x a\n      e \\<Longrightarrow>\n  \\<exists>e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n      (SOME x.\n          \\<exists>e.\n             terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C)\n              F x a e)\n      a e\n  \\<exists>x.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n      (Go a) a x \\<Longrightarrow>\n  terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go a) a\n   (SOME x.\n       terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n        (Go a) a x)\n\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go a)\n     a (\\<epsilon>o a)", "by simp"], ["", "text\\<open>\n      The right adjoint @{term G} to @{term F} takes each arrow @{term f} of\n      @{term[source=true] C} to the unique @{term[source=true] D}-coextension of\n      @{term \"C f (\\<epsilon>o (C.dom f))\"} along @{term \"\\<epsilon>o (C.cod f)\"}.\n\\<close>"], ["", "definition G :: \"'c \\<Rightarrow> 'd\"\n    where \"G f = (if C.arr f then\n                     terminal_arrow_from_functor.the_coext D C F (Go (C.cod f)) (\\<epsilon>o (C.cod f))\n                                  (Go (C.dom f)) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n                  else D.null)\""], ["", "lemma G_ide:\n    assumes \"C.ide x\"\n    shows \"G x = Go x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G x = Go x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G x = Go x", "interpret terminal_arrow_from_functor D C F \\<open>Go x\\<close> x \\<open>\\<epsilon>o x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go x)\n     x (\\<epsilon>o x)", "using assms ex_terminal_arrow Go_\\<epsilon>o_terminal"], ["proof (prove)\nusing this:\n  C.ide x\n  C.ide ?y \\<Longrightarrow>\n  \\<exists>x e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x ?y\n      e\n  \\<exists>b e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F b ?a\n      e \\<Longrightarrow>\n  terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go ?a)\n   ?a (\\<epsilon>o ?a)\n\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go x)\n     x (\\<epsilon>o x)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. G x = Go x", "have 1: \"arrow_from_functor D C F (Go x) x (\\<epsilon>o x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go x) x\n     (\\<epsilon>o x)", ".."], ["proof (state)\nthis:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go x) x\n   (\\<epsilon>o x)\n\ngoal (1 subgoal):\n 1. G x = Go x", "have \"is_coext (Go x) (\\<epsilon>o x) (Go x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_coext (Go x) (\\<epsilon>o x) (Go x)", "using arrow is_coext_def C.in_homE C.comp_arr_dom"], ["proof (prove)\nusing this:\n  D.ide (Go x) \\<and>\n  \\<guillemotleft>\\<epsilon>o\n                   x : F (Go x) \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  is_coext ?x' ?f ?g \\<equiv>\n  \\<guillemotleft>?g : ?x' \\<rightarrow>\\<^sub>D Go\n            x\\<guillemotright> \\<and>\n  ?f = \\<epsilon>o x \\<cdot>\\<^sub>C F ?g\n  \\<lbrakk>\\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>C ?b\\<guillemotright>;\n   \\<lbrakk>C.arr ?f; C.dom ?f = ?a; C.cod ?f = ?b\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  \\<lbrakk>C.arr ?f; C.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>C ?a = ?f\n\ngoal (1 subgoal):\n 1. is_coext (Go x) (\\<epsilon>o x) (Go x)", "by auto"], ["proof (state)\nthis:\n  is_coext (Go x) (\\<epsilon>o x) (Go x)\n\ngoal (1 subgoal):\n 1. G x = Go x", "hence \"Go x = the_coext (Go x) (\\<epsilon>o x)\""], ["proof (prove)\nusing this:\n  is_coext (Go x) (\\<epsilon>o x) (Go x)\n\ngoal (1 subgoal):\n 1. Go x = the_coext (Go x) (\\<epsilon>o x)", "using 1 the_coext_unique"], ["proof (prove)\nusing this:\n  is_coext (Go x) (\\<epsilon>o x) (Go x)\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go x) x\n   (\\<epsilon>o x)\n  \\<lbrakk>arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' x\n            ?f;\n   is_coext ?x' ?f ?g\\<rbrakk>\n  \\<Longrightarrow> ?g = the_coext ?x' ?f\n\ngoal (1 subgoal):\n 1. Go x = the_coext (Go x) (\\<epsilon>o x)", "by blast"], ["proof (state)\nthis:\n  Go x = the_coext (Go x) (\\<epsilon>o x)\n\ngoal (1 subgoal):\n 1. G x = Go x", "moreover"], ["proof (state)\nthis:\n  Go x = the_coext (Go x) (\\<epsilon>o x)\n\ngoal (1 subgoal):\n 1. G x = Go x", "have \"\\<epsilon>o x = C x (\\<epsilon>o (C.dom x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>o x = x \\<cdot>\\<^sub>C \\<epsilon>o (C.dom x)", "using assms arrow C.comp_ide_arr C.seqI' C.ide_in_hom C.in_homE"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide (Go x) \\<and>\n  \\<guillemotleft>\\<epsilon>o\n                   x : F (Go x) \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>C.ide ?b; C.seq ?b ?f\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>C ?f = ?f\n  \\<lbrakk>\\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>C ?b\\<guillemotright>;\n   \\<guillemotleft>?g : ?b \\<rightarrow>\\<^sub>C ?c\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> C.seq ?g ?f\n  C.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>C ?a\\<guillemotright>\n  \\<lbrakk>\\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>C ?b\\<guillemotright>;\n   \\<lbrakk>C.arr ?f; C.dom ?f = ?a; C.cod ?f = ?b\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n\ngoal (1 subgoal):\n 1. \\<epsilon>o x = x \\<cdot>\\<^sub>C \\<epsilon>o (C.dom x)", "by metis"], ["proof (state)\nthis:\n  \\<epsilon>o x = x \\<cdot>\\<^sub>C \\<epsilon>o (C.dom x)\n\ngoal (1 subgoal):\n 1. G x = Go x", "ultimately"], ["proof (chain)\npicking this:\n  Go x = the_coext (Go x) (\\<epsilon>o x)\n  \\<epsilon>o x = x \\<cdot>\\<^sub>C \\<epsilon>o (C.dom x)", "show ?thesis"], ["proof (prove)\nusing this:\n  Go x = the_coext (Go x) (\\<epsilon>o x)\n  \\<epsilon>o x = x \\<cdot>\\<^sub>C \\<epsilon>o (C.dom x)\n\ngoal (1 subgoal):\n 1. G x = Go x", "using assms G_def C.cod_dom C.ide_in_hom C.in_homE"], ["proof (prove)\nusing this:\n  Go x = the_coext (Go x) (\\<epsilon>o x)\n  \\<epsilon>o x = x \\<cdot>\\<^sub>C \\<epsilon>o (C.dom x)\n  C.ide x\n  G ?f =\n  (if C.arr ?f\n   then terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>D)\n         (\\<cdot>\\<^sub>C) F (Go (C.cod ?f)) (\\<epsilon>o (C.cod ?f))\n         (Go (C.dom ?f)) (?f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom ?f))\n   else D.null)\n  C.arr ?f \\<Longrightarrow> C.cod (C.dom ?f) = C.dom ?f\n  C.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>C ?a\\<guillemotright>\n  \\<lbrakk>\\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>C ?b\\<guillemotright>;\n   \\<lbrakk>C.arr ?f; C.dom ?f = ?a; C.cod ?f = ?b\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n\ngoal (1 subgoal):\n 1. G x = Go x", "by metis"], ["proof (state)\nthis:\n  G x = Go x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma G_is_functor:\n    shows \"functor C D G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f. \\<not> C.arr f \\<Longrightarrow> G f = D.null\n 2. \\<And>f. C.arr f \\<Longrightarrow> D.arr (G f)\n 3. \\<And>f. C.arr f \\<Longrightarrow> D.dom (G f) = G (C.dom f)\n 4. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 5. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "fix f :: 'c"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f. \\<not> C.arr f \\<Longrightarrow> G f = D.null\n 2. \\<And>f. C.arr f \\<Longrightarrow> D.arr (G f)\n 3. \\<And>f. C.arr f \\<Longrightarrow> D.dom (G f) = G (C.dom f)\n 4. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 5. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "assume \"\\<not>C.arr f\""], ["proof (state)\nthis:\n  \\<not> C.arr f\n\ngoal (5 subgoals):\n 1. \\<And>f. \\<not> C.arr f \\<Longrightarrow> G f = D.null\n 2. \\<And>f. C.arr f \\<Longrightarrow> D.arr (G f)\n 3. \\<And>f. C.arr f \\<Longrightarrow> D.dom (G f) = G (C.dom f)\n 4. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 5. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "thus \"G f = D.null\""], ["proof (prove)\nusing this:\n  \\<not> C.arr f\n\ngoal (1 subgoal):\n 1. G f = D.null", "using G_def"], ["proof (prove)\nusing this:\n  \\<not> C.arr f\n  G ?f =\n  (if C.arr ?f\n   then terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>D)\n         (\\<cdot>\\<^sub>C) F (Go (C.cod ?f)) (\\<epsilon>o (C.cod ?f))\n         (Go (C.dom ?f)) (?f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom ?f))\n   else D.null)\n\ngoal (1 subgoal):\n 1. G f = D.null", "by auto"], ["proof (state)\nthis:\n  G f = D.null\n\ngoal (4 subgoals):\n 1. \\<And>f. C.arr f \\<Longrightarrow> D.arr (G f)\n 2. \\<And>f. C.arr f \\<Longrightarrow> D.dom (G f) = G (C.dom f)\n 3. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 4. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f. C.arr f \\<Longrightarrow> D.arr (G f)\n 2. \\<And>f. C.arr f \\<Longrightarrow> D.dom (G f) = G (C.dom f)\n 3. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 4. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "fix f :: 'c"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f. C.arr f \\<Longrightarrow> D.arr (G f)\n 2. \\<And>f. C.arr f \\<Longrightarrow> D.dom (G f) = G (C.dom f)\n 3. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 4. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "assume f: \"C.arr f\""], ["proof (state)\nthis:\n  C.arr f\n\ngoal (4 subgoals):\n 1. \\<And>f. C.arr f \\<Longrightarrow> D.arr (G f)\n 2. \\<And>f. C.arr f \\<Longrightarrow> D.dom (G f) = G (C.dom f)\n 3. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 4. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "let ?x = \"C.dom f\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f. C.arr f \\<Longrightarrow> D.arr (G f)\n 2. \\<And>f. C.arr f \\<Longrightarrow> D.dom (G f) = G (C.dom f)\n 3. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 4. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "let ?x' = \"C.cod f\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f. C.arr f \\<Longrightarrow> D.arr (G f)\n 2. \\<And>f. C.arr f \\<Longrightarrow> D.dom (G f) = G (C.dom f)\n 3. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 4. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "interpret x\\<epsilon>: terminal_arrow_from_functor D C F \\<open>Go ?x\\<close> \\<open>?x\\<close> \\<open>\\<epsilon>o ?x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (Go (C.dom f)) (C.dom f) (\\<epsilon>o (C.dom f))", "using f ex_terminal_arrow Go_\\<epsilon>o_terminal"], ["proof (prove)\nusing this:\n  C.arr f\n  C.ide ?y \\<Longrightarrow>\n  \\<exists>x e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x ?y\n      e\n  \\<exists>b e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F b ?a\n      e \\<Longrightarrow>\n  terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go ?a)\n   ?a (\\<epsilon>o ?a)\n\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (Go (C.dom f)) (C.dom f) (\\<epsilon>o (C.dom f))", "by simp"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f. C.arr f \\<Longrightarrow> D.arr (G f)\n 2. \\<And>f. C.arr f \\<Longrightarrow> D.dom (G f) = G (C.dom f)\n 3. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 4. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "interpret x'\\<epsilon>: terminal_arrow_from_functor D C F \\<open>Go ?x'\\<close> \\<open>?x'\\<close> \\<open>\\<epsilon>o ?x'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (Go (C.cod f)) (C.cod f) (\\<epsilon>o (C.cod f))", "using f ex_terminal_arrow Go_\\<epsilon>o_terminal"], ["proof (prove)\nusing this:\n  C.arr f\n  C.ide ?y \\<Longrightarrow>\n  \\<exists>x e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x ?y\n      e\n  \\<exists>b e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F b ?a\n      e \\<Longrightarrow>\n  terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go ?a)\n   ?a (\\<epsilon>o ?a)\n\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (Go (C.cod f)) (C.cod f) (\\<epsilon>o (C.cod f))", "by simp"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f. C.arr f \\<Longrightarrow> D.arr (G f)\n 2. \\<And>f. C.arr f \\<Longrightarrow> D.dom (G f) = G (C.dom f)\n 3. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 4. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "have 1: \"arrow_from_functor D C F (Go ?x) ?x' (C f (\\<epsilon>o ?x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n     (C.cod f) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "using f x\\<epsilon>.arrow"], ["proof (prove)\nusing this:\n  C.arr f\n  D.ide (Go (C.dom f)) \\<and>\n  \\<guillemotleft>\\<epsilon>o\n                   (C.dom\n                     f) : F (Go (C.dom\n                                  f)) \\<rightarrow>\\<^sub>C C.dom\n                       f\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n     (C.cod f) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "by (unfold_locales, auto)"], ["proof (state)\nthis:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n   (C.cod f) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n\ngoal (4 subgoals):\n 1. \\<And>f. C.arr f \\<Longrightarrow> D.arr (G f)\n 2. \\<And>f. C.arr f \\<Longrightarrow> D.dom (G f) = G (C.dom f)\n 3. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 4. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "have \"G f = x'\\<epsilon>.the_coext (Go ?x) (C f (\\<epsilon>o ?x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G f =\n    x'\\<epsilon>.the_coext (Go (C.dom f))\n     (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "using f G_def"], ["proof (prove)\nusing this:\n  C.arr f\n  G ?f =\n  (if C.arr ?f\n   then terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>D)\n         (\\<cdot>\\<^sub>C) F (Go (C.cod ?f)) (\\<epsilon>o (C.cod ?f))\n         (Go (C.dom ?f)) (?f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom ?f))\n   else D.null)\n\ngoal (1 subgoal):\n 1. G f =\n    x'\\<epsilon>.the_coext (Go (C.dom f))\n     (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "by simp"], ["proof (state)\nthis:\n  G f =\n  x'\\<epsilon>.the_coext (Go (C.dom f))\n   (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n\ngoal (4 subgoals):\n 1. \\<And>f. C.arr f \\<Longrightarrow> D.arr (G f)\n 2. \\<And>f. C.arr f \\<Longrightarrow> D.dom (G f) = G (C.dom f)\n 3. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 4. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "hence Gf: \"\\<guillemotleft>G f : Go ?x \\<rightarrow>\\<^sub>D Go ?x'\\<guillemotright> \\<and> f \\<cdot>\\<^sub>C \\<epsilon>o ?x = \\<epsilon>o ?x' \\<cdot>\\<^sub>C F (G f)\""], ["proof (prove)\nusing this:\n  G f =\n  x'\\<epsilon>.the_coext (Go (C.dom f))\n   (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>G f : Go (C.dom\n                               f) \\<rightarrow>\\<^sub>D Go\n                   (C.cod f)\\<guillemotright> \\<and>\n    f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F (G f)", "using 1 x'\\<epsilon>.the_coext_prop"], ["proof (prove)\nusing this:\n  G f =\n  x'\\<epsilon>.the_coext (Go (C.dom f))\n   (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n   (C.cod f) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' (C.cod f)\n   ?f \\<Longrightarrow>\n  \\<guillemotleft>x'\\<epsilon>.the_coext ?x'\n                   ?f : ?x' \\<rightarrow>\\<^sub>D Go\n             (C.cod f)\\<guillemotright>\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' (C.cod f)\n   ?f \\<Longrightarrow>\n  ?f =\n  \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F (x'\\<epsilon>.the_coext ?x' ?f)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>G f : Go (C.dom\n                               f) \\<rightarrow>\\<^sub>D Go\n                   (C.cod f)\\<guillemotright> \\<and>\n    f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F (G f)", "by simp"], ["proof (state)\nthis:\n  \\<guillemotleft>G f : Go (C.dom\n                             f) \\<rightarrow>\\<^sub>D Go\n                 (C.cod f)\\<guillemotright> \\<and>\n  f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F (G f)\n\ngoal (4 subgoals):\n 1. \\<And>f. C.arr f \\<Longrightarrow> D.arr (G f)\n 2. \\<And>f. C.arr f \\<Longrightarrow> D.dom (G f) = G (C.dom f)\n 3. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 4. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "show \"D.arr (G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.arr (G f)", "using Gf"], ["proof (prove)\nusing this:\n  \\<guillemotleft>G f : Go (C.dom\n                             f) \\<rightarrow>\\<^sub>D Go\n                 (C.cod f)\\<guillemotright> \\<and>\n  f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F (G f)\n\ngoal (1 subgoal):\n 1. D.arr (G f)", "by auto"], ["proof (state)\nthis:\n  D.arr (G f)\n\ngoal (3 subgoals):\n 1. \\<And>f. C.arr f \\<Longrightarrow> D.dom (G f) = G (C.dom f)\n 2. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 3. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "show \"D.dom (G f) = G ?x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.dom (G f) = G (C.dom f)", "using f Gf G_ide"], ["proof (prove)\nusing this:\n  C.arr f\n  \\<guillemotleft>G f : Go (C.dom\n                             f) \\<rightarrow>\\<^sub>D Go\n                 (C.cod f)\\<guillemotright> \\<and>\n  f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F (G f)\n  C.ide ?x \\<Longrightarrow> G ?x = Go ?x\n\ngoal (1 subgoal):\n 1. D.dom (G f) = G (C.dom f)", "by auto"], ["proof (state)\nthis:\n  D.dom (G f) = G (C.dom f)\n\ngoal (2 subgoals):\n 1. \\<And>f. C.arr f \\<Longrightarrow> D.cod (G f) = G (C.cod f)\n 2. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "show \"D.cod (G f) = G ?x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.cod (G f) = G (C.cod f)", "using f Gf G_ide"], ["proof (prove)\nusing this:\n  C.arr f\n  \\<guillemotleft>G f : Go (C.dom\n                             f) \\<rightarrow>\\<^sub>D Go\n                 (C.cod f)\\<guillemotright> \\<and>\n  f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F (G f)\n  C.ide ?x \\<Longrightarrow> G ?x = Go ?x\n\ngoal (1 subgoal):\n 1. D.cod (G f) = G (C.cod f)", "by auto"], ["proof (state)\nthis:\n  D.cod (G f) = G (C.cod f)\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "fix f f' :: 'c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "assume ff': \"C.arr (C f' f)\""], ["proof (state)\nthis:\n  C.seq f' f\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "have f: \"C.arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.arr f", "using ff'"], ["proof (prove)\nusing this:\n  C.seq f' f\n\ngoal (1 subgoal):\n 1. C.arr f", "by auto"], ["proof (state)\nthis:\n  C.arr f\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "let ?x = \"C.dom f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "let ?x' = \"C.cod f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "let ?x'' = \"C.cod f'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "interpret x\\<epsilon>: terminal_arrow_from_functor D C F \\<open>Go ?x\\<close> \\<open>?x\\<close> \\<open>\\<epsilon>o ?x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (Go (C.dom f)) (C.dom f) (\\<epsilon>o (C.dom f))", "using f ex_terminal_arrow Go_\\<epsilon>o_terminal"], ["proof (prove)\nusing this:\n  C.arr f\n  C.ide ?y \\<Longrightarrow>\n  \\<exists>x e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x ?y\n      e\n  \\<exists>b e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F b ?a\n      e \\<Longrightarrow>\n  terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go ?a)\n   ?a (\\<epsilon>o ?a)\n\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (Go (C.dom f)) (C.dom f) (\\<epsilon>o (C.dom f))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "interpret x'\\<epsilon>: terminal_arrow_from_functor D C F \\<open>Go ?x'\\<close> \\<open>?x'\\<close> \\<open>\\<epsilon>o ?x'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (Go (C.cod f)) (C.cod f) (\\<epsilon>o (C.cod f))", "using f ex_terminal_arrow Go_\\<epsilon>o_terminal"], ["proof (prove)\nusing this:\n  C.arr f\n  C.ide ?y \\<Longrightarrow>\n  \\<exists>x e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x ?y\n      e\n  \\<exists>b e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F b ?a\n      e \\<Longrightarrow>\n  terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go ?a)\n   ?a (\\<epsilon>o ?a)\n\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (Go (C.cod f)) (C.cod f) (\\<epsilon>o (C.cod f))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "interpret x''\\<epsilon>: terminal_arrow_from_functor D C F \\<open>Go ?x''\\<close> \\<open>?x''\\<close> \\<open>\\<epsilon>o ?x''\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (Go (C.cod f')) (C.cod f') (\\<epsilon>o (C.cod f'))", "using ff' ex_terminal_arrow Go_\\<epsilon>o_terminal"], ["proof (prove)\nusing this:\n  C.seq f' f\n  C.ide ?y \\<Longrightarrow>\n  \\<exists>x e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x ?y\n      e\n  \\<exists>b e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F b ?a\n      e \\<Longrightarrow>\n  terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go ?a)\n   ?a (\\<epsilon>o ?a)\n\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (Go (C.cod f')) (C.cod f') (\\<epsilon>o (C.cod f'))", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "have 1: \"arrow_from_functor D C F (Go ?x) ?x' (f \\<cdot>\\<^sub>C \\<epsilon>o ?x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n     (C.cod f) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "using f x\\<epsilon>.arrow"], ["proof (prove)\nusing this:\n  C.arr f\n  D.ide (Go (C.dom f)) \\<and>\n  \\<guillemotleft>\\<epsilon>o\n                   (C.dom\n                     f) : F (Go (C.dom\n                                  f)) \\<rightarrow>\\<^sub>C C.dom\n                       f\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n     (C.cod f) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "by (unfold_locales, auto)"], ["proof (state)\nthis:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n   (C.cod f) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "have 2: \"arrow_from_functor D C F (Go ?x') ?x'' (f' \\<cdot>\\<^sub>C \\<epsilon>o ?x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.cod f))\n     (C.cod f') (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f))", "using ff' x'\\<epsilon>.arrow"], ["proof (prove)\nusing this:\n  C.seq f' f\n  D.ide (Go (C.cod f)) \\<and>\n  \\<guillemotleft>\\<epsilon>o\n                   (C.cod\n                     f) : F (Go (C.cod\n                                  f)) \\<rightarrow>\\<^sub>C C.cod\n                       f\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.cod f))\n     (C.cod f') (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f))", "by (unfold_locales, auto)"], ["proof (state)\nthis:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.cod f))\n   (C.cod f') (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f))\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "have \"G f = x'\\<epsilon>.the_coext (Go ?x) (C f (\\<epsilon>o ?x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G f =\n    x'\\<epsilon>.the_coext (Go (C.dom f))\n     (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "using f G_def"], ["proof (prove)\nusing this:\n  C.arr f\n  G ?f =\n  (if C.arr ?f\n   then terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>D)\n         (\\<cdot>\\<^sub>C) F (Go (C.cod ?f)) (\\<epsilon>o (C.cod ?f))\n         (Go (C.dom ?f)) (?f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom ?f))\n   else D.null)\n\ngoal (1 subgoal):\n 1. G f =\n    x'\\<epsilon>.the_coext (Go (C.dom f))\n     (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "by simp"], ["proof (state)\nthis:\n  G f =\n  x'\\<epsilon>.the_coext (Go (C.dom f))\n   (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "hence Gf: \"D.in_hom (G f) (Go ?x) (Go ?x') \\<and> f \\<cdot>\\<^sub>C \\<epsilon>o ?x = \\<epsilon>o ?x' \\<cdot>\\<^sub>C F (G f)\""], ["proof (prove)\nusing this:\n  G f =\n  x'\\<epsilon>.the_coext (Go (C.dom f))\n   (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>G f : Go (C.dom\n                               f) \\<rightarrow>\\<^sub>D Go\n                   (C.cod f)\\<guillemotright> \\<and>\n    f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F (G f)", "using 1 x'\\<epsilon>.the_coext_prop"], ["proof (prove)\nusing this:\n  G f =\n  x'\\<epsilon>.the_coext (Go (C.dom f))\n   (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n   (C.cod f) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' (C.cod f)\n   ?f \\<Longrightarrow>\n  \\<guillemotleft>x'\\<epsilon>.the_coext ?x'\n                   ?f : ?x' \\<rightarrow>\\<^sub>D Go\n             (C.cod f)\\<guillemotright>\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' (C.cod f)\n   ?f \\<Longrightarrow>\n  ?f =\n  \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F (x'\\<epsilon>.the_coext ?x' ?f)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>G f : Go (C.dom\n                               f) \\<rightarrow>\\<^sub>D Go\n                   (C.cod f)\\<guillemotright> \\<and>\n    f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F (G f)", "by simp"], ["proof (state)\nthis:\n  \\<guillemotleft>G f : Go (C.dom\n                             f) \\<rightarrow>\\<^sub>D Go\n                 (C.cod f)\\<guillemotright> \\<and>\n  f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F (G f)\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "have \"G f' = x''\\<epsilon>.the_coext (Go ?x') (f' \\<cdot>\\<^sub>C \\<epsilon>o ?x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G f' =\n    x''\\<epsilon>.the_coext (Go (C.cod f))\n     (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f))", "using ff' G_def"], ["proof (prove)\nusing this:\n  C.seq f' f\n  G ?f =\n  (if C.arr ?f\n   then terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>D)\n         (\\<cdot>\\<^sub>C) F (Go (C.cod ?f)) (\\<epsilon>o (C.cod ?f))\n         (Go (C.dom ?f)) (?f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom ?f))\n   else D.null)\n\ngoal (1 subgoal):\n 1. G f' =\n    x''\\<epsilon>.the_coext (Go (C.cod f))\n     (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f))", "by auto"], ["proof (state)\nthis:\n  G f' =\n  x''\\<epsilon>.the_coext (Go (C.cod f))\n   (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f))\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "hence Gf': \"\\<guillemotleft>G f' : Go (C.cod f) \\<rightarrow>\\<^sub>D Go (C.cod f')\\<guillemotright> \\<and> f' \\<cdot>\\<^sub>C \\<epsilon>o ?x' = \\<epsilon>o ?x'' \\<cdot>\\<^sub>C F (G f')\""], ["proof (prove)\nusing this:\n  G f' =\n  x''\\<epsilon>.the_coext (Go (C.cod f))\n   (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>G f' : Go (C.cod\n                                f) \\<rightarrow>\\<^sub>D Go\n                    (C.cod f')\\<guillemotright> \\<and>\n    f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f) =\n    \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f')", "using 2 x''\\<epsilon>.the_coext_prop"], ["proof (prove)\nusing this:\n  G f' =\n  x''\\<epsilon>.the_coext (Go (C.cod f))\n   (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f))\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.cod f))\n   (C.cod f') (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f))\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' (C.cod f')\n   ?f \\<Longrightarrow>\n  \\<guillemotleft>x''\\<epsilon>.the_coext ?x'\n                   ?f : ?x' \\<rightarrow>\\<^sub>D Go\n             (C.cod f')\\<guillemotright>\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' (C.cod f')\n   ?f \\<Longrightarrow>\n  ?f =\n  \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (x''\\<epsilon>.the_coext ?x' ?f)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>G f' : Go (C.cod\n                                f) \\<rightarrow>\\<^sub>D Go\n                    (C.cod f')\\<guillemotright> \\<and>\n    f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f) =\n    \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f')", "by simp"], ["proof (state)\nthis:\n  \\<guillemotleft>G f' : Go (C.cod\n                              f) \\<rightarrow>\\<^sub>D Go\n                  (C.cod f')\\<guillemotright> \\<and>\n  f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f) =\n  \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f')\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       C.seq g f \\<Longrightarrow>\n       G (g \\<cdot>\\<^sub>C f) = G g \\<cdot>\\<^sub>D G f", "show \"G (f' \\<cdot>\\<^sub>C f) = G f' \\<cdot>\\<^sub>D G f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (f' \\<cdot>\\<^sub>C f) = G f' \\<cdot>\\<^sub>D G f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G (f' \\<cdot>\\<^sub>C f) = G f' \\<cdot>\\<^sub>D G f", "have \"x''\\<epsilon>.is_coext (Go ?x) ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o ?x) (G f' \\<cdot>\\<^sub>D G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x''\\<epsilon>.is_coext (Go (C.dom f))\n     ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n     (G f' \\<cdot>\\<^sub>D G f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x''\\<epsilon>.is_coext (Go (C.dom f))\n     ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n     (G f' \\<cdot>\\<^sub>D G f)", "have \"\\<guillemotleft>G f' \\<cdot>\\<^sub>D G f : Go (C.dom f) \\<rightarrow>\\<^sub>D Go (C.cod f')\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>G f' \\<cdot>\\<^sub>D\n                    G f : Go (C.dom\n                               f) \\<rightarrow>\\<^sub>D Go\n                   (C.cod f')\\<guillemotright>", "using 1 2 Gf Gf'"], ["proof (prove)\nusing this:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n   (C.cod f) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.cod f))\n   (C.cod f') (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f))\n  \\<guillemotleft>G f : Go (C.dom\n                             f) \\<rightarrow>\\<^sub>D Go\n                 (C.cod f)\\<guillemotright> \\<and>\n  f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F (G f)\n  \\<guillemotleft>G f' : Go (C.cod\n                              f) \\<rightarrow>\\<^sub>D Go\n                  (C.cod f')\\<guillemotright> \\<and>\n  f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f) =\n  \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f')\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>G f' \\<cdot>\\<^sub>D\n                    G f : Go (C.dom\n                               f) \\<rightarrow>\\<^sub>D Go\n                   (C.cod f')\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>G f' \\<cdot>\\<^sub>D\n                  G f : Go (C.dom\n                             f) \\<rightarrow>\\<^sub>D Go\n                 (C.cod f')\\<guillemotright>\n\ngoal (1 subgoal):\n 1. x''\\<epsilon>.is_coext (Go (C.dom f))\n     ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n     (G f' \\<cdot>\\<^sub>D G f)", "moreover"], ["proof (state)\nthis:\n  \\<guillemotleft>G f' \\<cdot>\\<^sub>D\n                  G f : Go (C.dom\n                             f) \\<rightarrow>\\<^sub>D Go\n                 (C.cod f')\\<guillemotright>\n\ngoal (1 subgoal):\n 1. x''\\<epsilon>.is_coext (Go (C.dom f))\n     ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n     (G f' \\<cdot>\\<^sub>D G f)", "have \"(f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o ?x = \\<epsilon>o ?x'' \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)", "have \"(f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o ?x = f' \\<cdot>\\<^sub>C f \\<cdot>\\<^sub>C \\<epsilon>o ?x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    f' \\<cdot>\\<^sub>C f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "using C.comp_assoc"], ["proof (prove)\nusing this:\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    f' \\<cdot>\\<^sub>C f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "by force"], ["proof (state)\nthis:\n  (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  f' \\<cdot>\\<^sub>C f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)\n\ngoal (1 subgoal):\n 1. (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)", "also"], ["proof (state)\nthis:\n  (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  f' \\<cdot>\\<^sub>C f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)\n\ngoal (1 subgoal):\n 1. (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)", "have \"... = (f' \\<cdot>\\<^sub>C \\<epsilon>o ?x') \\<cdot>\\<^sub>C F (G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<cdot>\\<^sub>C f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f)) \\<cdot>\\<^sub>C F (G f)", "using Gf C.comp_assoc"], ["proof (prove)\nusing this:\n  \\<guillemotleft>G f : Go (C.dom\n                             f) \\<rightarrow>\\<^sub>D Go\n                 (C.cod f)\\<guillemotright> \\<and>\n  f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F (G f)\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. f' \\<cdot>\\<^sub>C f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f)) \\<cdot>\\<^sub>C F (G f)", "by fastforce"], ["proof (state)\nthis:\n  f' \\<cdot>\\<^sub>C f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f)) \\<cdot>\\<^sub>C F (G f)\n\ngoal (1 subgoal):\n 1. (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)", "also"], ["proof (state)\nthis:\n  f' \\<cdot>\\<^sub>C f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f)) \\<cdot>\\<^sub>C F (G f)\n\ngoal (1 subgoal):\n 1. (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)", "have \"... = \\<epsilon>o ?x'' \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f)) \\<cdot>\\<^sub>C F (G f) =\n    \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)", "using Gf Gf' C.comp_assoc"], ["proof (prove)\nusing this:\n  \\<guillemotleft>G f : Go (C.dom\n                             f) \\<rightarrow>\\<^sub>D Go\n                 (C.cod f)\\<guillemotright> \\<and>\n  f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F (G f)\n  \\<guillemotleft>G f' : Go (C.cod\n                              f) \\<rightarrow>\\<^sub>D Go\n                  (C.cod f')\\<guillemotright> \\<and>\n  f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f) =\n  \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f')\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f)) \\<cdot>\\<^sub>C F (G f) =\n    \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)", "by fastforce"], ["proof (state)\nthis:\n  (f' \\<cdot>\\<^sub>C \\<epsilon>o (C.cod f)) \\<cdot>\\<^sub>C F (G f) =\n  \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)\n\ngoal (1 subgoal):\n 1. (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)", "finally"], ["proof (chain)\npicking this:\n  (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)", "show ?thesis"], ["proof (prove)\nusing this:\n  (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)\n\ngoal (1 subgoal):\n 1. (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n    \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)", "by auto"], ["proof (state)\nthis:\n  (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)\n\ngoal (1 subgoal):\n 1. x''\\<epsilon>.is_coext (Go (C.dom f))\n     ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n     (G f' \\<cdot>\\<^sub>D G f)", "ultimately"], ["proof (chain)\npicking this:\n  \\<guillemotleft>G f' \\<cdot>\\<^sub>D\n                  G f : Go (C.dom\n                             f) \\<rightarrow>\\<^sub>D Go\n                 (C.cod f')\\<guillemotright>\n  (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<guillemotleft>G f' \\<cdot>\\<^sub>D\n                  G f : Go (C.dom\n                             f) \\<rightarrow>\\<^sub>D Go\n                 (C.cod f')\\<guillemotright>\n  (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)\n\ngoal (1 subgoal):\n 1. x''\\<epsilon>.is_coext (Go (C.dom f))\n     ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n     (G f' \\<cdot>\\<^sub>D G f)", "using x''\\<epsilon>.is_coext_def"], ["proof (prove)\nusing this:\n  \\<guillemotleft>G f' \\<cdot>\\<^sub>D\n                  G f : Go (C.dom\n                             f) \\<rightarrow>\\<^sub>D Go\n                 (C.cod f')\\<guillemotright>\n  (f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f) =\n  \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F (G f' \\<cdot>\\<^sub>D G f)\n  x''\\<epsilon>.is_coext ?x' ?f ?g \\<equiv>\n  \\<guillemotleft>?g : ?x' \\<rightarrow>\\<^sub>D Go\n            (C.cod f')\\<guillemotright> \\<and>\n  ?f = \\<epsilon>o (C.cod f') \\<cdot>\\<^sub>C F ?g\n\ngoal (1 subgoal):\n 1. x''\\<epsilon>.is_coext (Go (C.dom f))\n     ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n     (G f' \\<cdot>\\<^sub>D G f)", "by auto"], ["proof (state)\nthis:\n  x''\\<epsilon>.is_coext (Go (C.dom f))\n   ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n   (G f' \\<cdot>\\<^sub>D G f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x''\\<epsilon>.is_coext (Go (C.dom f))\n   ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n   (G f' \\<cdot>\\<^sub>D G f)\n\ngoal (1 subgoal):\n 1. G (f' \\<cdot>\\<^sub>C f) = G f' \\<cdot>\\<^sub>D G f", "moreover"], ["proof (state)\nthis:\n  x''\\<epsilon>.is_coext (Go (C.dom f))\n   ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n   (G f' \\<cdot>\\<^sub>D G f)\n\ngoal (1 subgoal):\n 1. G (f' \\<cdot>\\<^sub>C f) = G f' \\<cdot>\\<^sub>D G f", "have \"arrow_from_functor D C F (Go ?x) ?x'' ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o ?x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n     (C.cod f')\n     ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "using ff' x\\<epsilon>.arrow"], ["proof (prove)\nusing this:\n  C.seq f' f\n  D.ide (Go (C.dom f)) \\<and>\n  \\<guillemotleft>\\<epsilon>o\n                   (C.dom\n                     f) : F (Go (C.dom\n                                  f)) \\<rightarrow>\\<^sub>C C.dom\n                       f\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n     (C.cod f')\n     ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "by (unfold_locales, blast)"], ["proof (state)\nthis:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n   (C.cod f') ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n\ngoal (1 subgoal):\n 1. G (f' \\<cdot>\\<^sub>C f) = G f' \\<cdot>\\<^sub>D G f", "ultimately"], ["proof (chain)\npicking this:\n  x''\\<epsilon>.is_coext (Go (C.dom f))\n   ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n   (G f' \\<cdot>\\<^sub>D G f)\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n   (C.cod f') ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "show ?thesis"], ["proof (prove)\nusing this:\n  x''\\<epsilon>.is_coext (Go (C.dom f))\n   ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n   (G f' \\<cdot>\\<^sub>D G f)\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n   (C.cod f') ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n\ngoal (1 subgoal):\n 1. G (f' \\<cdot>\\<^sub>C f) = G f' \\<cdot>\\<^sub>D G f", "using ff' G_def x''\\<epsilon>.the_coext_unique C.seqE C.cod_comp C.dom_comp"], ["proof (prove)\nusing this:\n  x''\\<epsilon>.is_coext (Go (C.dom f))\n   ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n   (G f' \\<cdot>\\<^sub>D G f)\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n   (C.cod f') ((f' \\<cdot>\\<^sub>C f) \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n  C.seq f' f\n  G ?f =\n  (if C.arr ?f\n   then terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>D)\n         (\\<cdot>\\<^sub>C) F (Go (C.cod ?f)) (\\<epsilon>o (C.cod ?f))\n         (Go (C.dom ?f)) (?f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom ?f))\n   else D.null)\n  \\<lbrakk>arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x'\n            (C.cod f') ?f;\n   x''\\<epsilon>.is_coext ?x' ?f ?g\\<rbrakk>\n  \\<Longrightarrow> ?g = x''\\<epsilon>.the_coext ?x' ?f\n  \\<lbrakk>C.seq ?g ?f;\n   \\<lbrakk>C.arr ?f; C.arr ?g; C.dom ?g = C.cod ?f\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  C.seq ?g ?f \\<Longrightarrow> C.cod (?g \\<cdot>\\<^sub>C ?f) = C.cod ?g\n  C.seq ?g ?f \\<Longrightarrow> C.dom (?g \\<cdot>\\<^sub>C ?f) = C.dom ?f\n\ngoal (1 subgoal):\n 1. G (f' \\<cdot>\\<^sub>C f) = G f' \\<cdot>\\<^sub>D G f", "by auto"], ["proof (state)\nthis:\n  G (f' \\<cdot>\\<^sub>C f) = G f' \\<cdot>\\<^sub>D G f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G (f' \\<cdot>\\<^sub>C f) = G f' \\<cdot>\\<^sub>D G f\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation G: \"functor\" C D G"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "using G_is_functor"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "by auto"], ["", "lemma G_simp:\n    assumes \"C.arr f\"\n    shows \"G f = terminal_arrow_from_functor.the_coext D C F (Go (C.cod f)) (\\<epsilon>o (C.cod f))\n                                                             (Go (C.dom f)) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G f =\n    terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>D)\n     (\\<cdot>\\<^sub>C) F (Go (C.cod f)) (\\<epsilon>o (C.cod f))\n     (Go (C.dom f)) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "using assms G_def"], ["proof (prove)\nusing this:\n  C.arr f\n  G ?f =\n  (if C.arr ?f\n   then terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>D)\n         (\\<cdot>\\<^sub>C) F (Go (C.cod ?f)) (\\<epsilon>o (C.cod ?f))\n         (Go (C.dom ?f)) (?f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom ?f))\n   else D.null)\n\ngoal (1 subgoal):\n 1. G f =\n    terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>D)\n     (\\<cdot>\\<^sub>C) F (Go (C.cod f)) (\\<epsilon>o (C.cod f))\n     (Go (C.dom f)) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "by simp"], ["", "interpretation idC: identity_functor C"], ["proof (prove)\ngoal (1 subgoal):\n 1. identity_functor (\\<cdot>\\<^sub>C)", ".."], ["", "interpretation GF: composite_functor C D C G F"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C)\n     G F", ".."], ["", "interpretation \\<epsilon>: transformation_by_components C C GF.map C.map \\<epsilon>o"], ["proof (prove)\ngoal (1 subgoal):\n 1. transformation_by_components (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) GF.map\n     C.map \\<epsilon>o", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       C.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<epsilon>o\n                        a : GF.map\n                             a \\<rightarrow>\\<^sub>C C.map\n                a\\<guillemotright>\n 2. \\<And>f.\n       C.arr f \\<Longrightarrow>\n       \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n       C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "fix x :: 'c"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       C.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<epsilon>o\n                        a : GF.map\n                             a \\<rightarrow>\\<^sub>C C.map\n                a\\<guillemotright>\n 2. \\<And>f.\n       C.arr f \\<Longrightarrow>\n       \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n       C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "assume x: \"C.ide x\""], ["proof (state)\nthis:\n  C.ide x\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       C.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<epsilon>o\n                        a : GF.map\n                             a \\<rightarrow>\\<^sub>C C.map\n                a\\<guillemotright>\n 2. \\<And>f.\n       C.arr f \\<Longrightarrow>\n       \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n       C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "show \"\\<guillemotleft>\\<epsilon>o x : GF.map x \\<rightarrow>\\<^sub>C C.map x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<epsilon>o\n                     x : GF.map\n                          x \\<rightarrow>\\<^sub>C C.map x\\<guillemotright>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<epsilon>o\n                     x : GF.map\n                          x \\<rightarrow>\\<^sub>C C.map x\\<guillemotright>", "interpret terminal_arrow_from_functor D C F \\<open>Go x\\<close> x \\<open>\\<epsilon>o x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go x)\n     x (\\<epsilon>o x)", "using x Go_\\<epsilon>o_terminal ex_terminal_arrow"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<exists>b e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F b ?a\n      e \\<Longrightarrow>\n  terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go ?a)\n   ?a (\\<epsilon>o ?a)\n  C.ide ?y \\<Longrightarrow>\n  \\<exists>x e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x ?y\n      e\n\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go x)\n     x (\\<epsilon>o x)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<epsilon>o\n                     x : GF.map\n                          x \\<rightarrow>\\<^sub>C C.map x\\<guillemotright>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<epsilon>o\n                     x : GF.map\n                          x \\<rightarrow>\\<^sub>C C.map x\\<guillemotright>", "using x G_ide arrow"], ["proof (prove)\nusing this:\n  C.ide x\n  C.ide ?x \\<Longrightarrow> G ?x = Go ?x\n  D.ide (Go x) \\<and>\n  \\<guillemotleft>\\<epsilon>o\n                   x : F (Go x) \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<epsilon>o\n                     x : GF.map\n                          x \\<rightarrow>\\<^sub>C C.map x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<epsilon>o\n                   x : GF.map\n                        x \\<rightarrow>\\<^sub>C C.map x\\<guillemotright>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<epsilon>o\n                   x : GF.map\n                        x \\<rightarrow>\\<^sub>C C.map x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       C.arr f \\<Longrightarrow>\n       \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n       C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       C.arr f \\<Longrightarrow>\n       \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n       C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "fix f :: 'c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       C.arr f \\<Longrightarrow>\n       \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n       C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "assume f: \"C.arr f\""], ["proof (state)\nthis:\n  C.arr f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       C.arr f \\<Longrightarrow>\n       \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n       C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "show \"\\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f = C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "let ?x = \"C.dom f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "let ?x' = \"C.cod f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "interpret x\\<epsilon>: terminal_arrow_from_functor D C F \\<open>Go ?x\\<close> ?x \\<open>\\<epsilon>o ?x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (Go (C.dom f)) (C.dom f) (\\<epsilon>o (C.dom f))", "using f Go_\\<epsilon>o_terminal ex_terminal_arrow"], ["proof (prove)\nusing this:\n  C.arr f\n  \\<exists>b e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F b ?a\n      e \\<Longrightarrow>\n  terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go ?a)\n   ?a (\\<epsilon>o ?a)\n  C.ide ?y \\<Longrightarrow>\n  \\<exists>x e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x ?y\n      e\n\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (Go (C.dom f)) (C.dom f) (\\<epsilon>o (C.dom f))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "interpret x'\\<epsilon>: terminal_arrow_from_functor D C F \\<open>Go ?x'\\<close> ?x' \\<open>\\<epsilon>o ?x'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (Go (C.cod f)) (C.cod f) (\\<epsilon>o (C.cod f))", "using f Go_\\<epsilon>o_terminal ex_terminal_arrow"], ["proof (prove)\nusing this:\n  C.arr f\n  \\<exists>b e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F b ?a\n      e \\<Longrightarrow>\n  terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go ?a)\n   ?a (\\<epsilon>o ?a)\n  C.ide ?y \\<Longrightarrow>\n  \\<exists>x e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x ?y\n      e\n\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n     (Go (C.cod f)) (C.cod f) (\\<epsilon>o (C.cod f))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "have 1: \"arrow_from_functor D C F (Go ?x) ?x' (C f (\\<epsilon>o ?x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n     (C.cod f) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "using f x\\<epsilon>.arrow"], ["proof (prove)\nusing this:\n  C.arr f\n  D.ide (Go (C.dom f)) \\<and>\n  \\<guillemotleft>\\<epsilon>o\n                   (C.dom\n                     f) : F (Go (C.dom\n                                  f)) \\<rightarrow>\\<^sub>C C.dom\n                       f\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n     (C.cod f) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "by (unfold_locales, auto)"], ["proof (state)\nthis:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n   (C.cod f) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n\ngoal (1 subgoal):\n 1. \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "have \"G f = x'\\<epsilon>.the_coext (Go ?x) (f \\<cdot>\\<^sub>C \\<epsilon>o ?x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G f =\n    x'\\<epsilon>.the_coext (Go (C.dom f))\n     (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "using f G_simp"], ["proof (prove)\nusing this:\n  C.arr f\n  C.arr ?f \\<Longrightarrow>\n  G ?f =\n  terminal_arrow_from_functor.the_coext (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C)\n   F (Go (C.cod ?f)) (\\<epsilon>o (C.cod ?f)) (Go (C.dom ?f))\n   (?f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom ?f))\n\ngoal (1 subgoal):\n 1. G f =\n    x'\\<epsilon>.the_coext (Go (C.dom f))\n     (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))", "by blast"], ["proof (state)\nthis:\n  G f =\n  x'\\<epsilon>.the_coext (Go (C.dom f))\n   (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n\ngoal (1 subgoal):\n 1. \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "hence \"x'\\<epsilon>.is_coext (Go ?x) (f \\<cdot>\\<^sub>C \\<epsilon>o ?x) (G f)\""], ["proof (prove)\nusing this:\n  G f =\n  x'\\<epsilon>.the_coext (Go (C.dom f))\n   (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n\ngoal (1 subgoal):\n 1. x'\\<epsilon>.is_coext (Go (C.dom f))\n     (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)) (G f)", "using 1 x'\\<epsilon>.the_coext_prop x'\\<epsilon>.is_coext_def"], ["proof (prove)\nusing this:\n  G f =\n  x'\\<epsilon>.the_coext (Go (C.dom f))\n   (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go (C.dom f))\n   (C.cod f) (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f))\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' (C.cod f)\n   ?f \\<Longrightarrow>\n  \\<guillemotleft>x'\\<epsilon>.the_coext ?x'\n                   ?f : ?x' \\<rightarrow>\\<^sub>D Go\n             (C.cod f)\\<guillemotright>\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' (C.cod f)\n   ?f \\<Longrightarrow>\n  ?f =\n  \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F (x'\\<epsilon>.the_coext ?x' ?f)\n  x'\\<epsilon>.is_coext ?x' ?f ?g \\<equiv>\n  \\<guillemotleft>?g : ?x' \\<rightarrow>\\<^sub>D Go\n            (C.cod f)\\<guillemotright> \\<and>\n  ?f = \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F ?g\n\ngoal (1 subgoal):\n 1. x'\\<epsilon>.is_coext (Go (C.dom f))\n     (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)) (G f)", "by auto"], ["proof (state)\nthis:\n  x'\\<epsilon>.is_coext (Go (C.dom f))\n   (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)) (G f)\n\ngoal (1 subgoal):\n 1. \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x'\\<epsilon>.is_coext (Go (C.dom f))\n   (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)) (G f)\n\ngoal (1 subgoal):\n 1. \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "using f x'\\<epsilon>.is_coext_def"], ["proof (prove)\nusing this:\n  x'\\<epsilon>.is_coext (Go (C.dom f))\n   (f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)) (G f)\n  C.arr f\n  x'\\<epsilon>.is_coext ?x' ?f ?g \\<equiv>\n  \\<guillemotleft>?g : ?x' \\<rightarrow>\\<^sub>D Go\n            (C.cod f)\\<guillemotright> \\<and>\n  ?f = \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C F ?g\n\ngoal (1 subgoal):\n 1. \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n    C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)", "by simp"], ["proof (state)\nthis:\n  \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n  C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<epsilon>o (C.cod f) \\<cdot>\\<^sub>C GF.map f =\n  C.map f \\<cdot>\\<^sub>C \\<epsilon>o (C.dom f)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \\<psi>\n    where \"\\<psi> x h = C (\\<epsilon>.map x) (F h)\""], ["", "lemma \\<psi>_in_hom:\n    assumes \"C.ide x\" and \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<guillemotleft>\\<psi> x g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "unfolding \\<psi>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<epsilon>.map x \\<cdot>\\<^sub>C\n                    F g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "using assms \\<epsilon>.maps_ide_in_hom"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  C.ide ?a \\<Longrightarrow>\n  \\<guillemotleft>\\<epsilon>o\n                   ?a : GF.map\n                         ?a \\<rightarrow>\\<^sub>C C.map ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<epsilon>.map x \\<cdot>\\<^sub>C\n                    F g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "by auto"], ["", "lemma \\<psi>_natural:\n    assumes f: \"\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\" and g: \"\\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\" and h: \"\\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g = \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "have \"f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g = f \\<cdot>\\<^sub>C (\\<epsilon>.map x \\<cdot>\\<^sub>C F h) \\<cdot>\\<^sub>C F g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    f \\<cdot>\\<^sub>C\n    (\\<epsilon>.map x \\<cdot>\\<^sub>C F h) \\<cdot>\\<^sub>C F g", "unfolding \\<psi>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C\n    (\\<epsilon>.map x \\<cdot>\\<^sub>C F h) \\<cdot>\\<^sub>C F g =\n    f \\<cdot>\\<^sub>C\n    (\\<epsilon>.map x \\<cdot>\\<^sub>C F h) \\<cdot>\\<^sub>C F g", "by auto"], ["proof (state)\nthis:\n  f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n  f \\<cdot>\\<^sub>C\n  (\\<epsilon>.map x \\<cdot>\\<^sub>C F h) \\<cdot>\\<^sub>C F g\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "also"], ["proof (state)\nthis:\n  f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n  f \\<cdot>\\<^sub>C\n  (\\<epsilon>.map x \\<cdot>\\<^sub>C F h) \\<cdot>\\<^sub>C F g\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "have \"... = (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C F h \\<cdot>\\<^sub>C F g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C\n    (\\<epsilon>.map x \\<cdot>\\<^sub>C F h) \\<cdot>\\<^sub>C F g =\n    (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n    F h \\<cdot>\\<^sub>C F g", "using C.comp_assoc"], ["proof (prove)\nusing this:\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C\n    (\\<epsilon>.map x \\<cdot>\\<^sub>C F h) \\<cdot>\\<^sub>C F g =\n    (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n    F h \\<cdot>\\<^sub>C F g", "by fastforce"], ["proof (state)\nthis:\n  f \\<cdot>\\<^sub>C\n  (\\<epsilon>.map x \\<cdot>\\<^sub>C F h) \\<cdot>\\<^sub>C F g =\n  (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n  F h \\<cdot>\\<^sub>C F g\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "also"], ["proof (state)\nthis:\n  f \\<cdot>\\<^sub>C\n  (\\<epsilon>.map x \\<cdot>\\<^sub>C F h) \\<cdot>\\<^sub>C F g =\n  (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n  F h \\<cdot>\\<^sub>C F g\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "have \"... = (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C F (h \\<cdot>\\<^sub>D g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n    F h \\<cdot>\\<^sub>C F g =\n    (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n    F (h \\<cdot>\\<^sub>D g)", "using g h"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n    F h \\<cdot>\\<^sub>C F g =\n    (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n    F (h \\<cdot>\\<^sub>D g)", "by fastforce"], ["proof (state)\nthis:\n  (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n  F h \\<cdot>\\<^sub>C F g =\n  (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n  F (h \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "also"], ["proof (state)\nthis:\n  (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n  F h \\<cdot>\\<^sub>C F g =\n  (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n  F (h \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "have \"... = (\\<epsilon>.map x' \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C F (h \\<cdot>\\<^sub>D g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n    F (h \\<cdot>\\<^sub>D g) =\n    (\\<epsilon>.map x' \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n    F (h \\<cdot>\\<^sub>D g)", "using f \\<epsilon>.naturality"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  C.arr ?f \\<Longrightarrow>\n  \\<epsilon>.map (C.cod ?f) \\<cdot>\\<^sub>C GF.map ?f =\n  C.map ?f \\<cdot>\\<^sub>C \\<epsilon>.map (C.dom ?f)\n\ngoal (1 subgoal):\n 1. (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n    F (h \\<cdot>\\<^sub>D g) =\n    (\\<epsilon>.map x' \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n    F (h \\<cdot>\\<^sub>D g)", "by auto"], ["proof (state)\nthis:\n  (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n  F (h \\<cdot>\\<^sub>D g) =\n  (\\<epsilon>.map x' \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n  F (h \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "also"], ["proof (state)\nthis:\n  (f \\<cdot>\\<^sub>C \\<epsilon>.map x) \\<cdot>\\<^sub>C\n  F (h \\<cdot>\\<^sub>D g) =\n  (\\<epsilon>.map x' \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n  F (h \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "have \"... = \\<epsilon>.map x' \\<cdot>\\<^sub>C F ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<epsilon>.map x' \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n    F (h \\<cdot>\\<^sub>D g) =\n    \\<epsilon>.map x' \\<cdot>\\<^sub>C\n    F ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "using f g h C.comp_assoc"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  (?h \\<cdot>\\<^sub>C ?g) \\<cdot>\\<^sub>C ?f =\n  ?h \\<cdot>\\<^sub>C ?g \\<cdot>\\<^sub>C ?f\n\ngoal (1 subgoal):\n 1. (\\<epsilon>.map x' \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n    F (h \\<cdot>\\<^sub>D g) =\n    \\<epsilon>.map x' \\<cdot>\\<^sub>C\n    F ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "by fastforce"], ["proof (state)\nthis:\n  (\\<epsilon>.map x' \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n  F (h \\<cdot>\\<^sub>D g) =\n  \\<epsilon>.map x' \\<cdot>\\<^sub>C\n  F ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "also"], ["proof (state)\nthis:\n  (\\<epsilon>.map x' \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>C\n  F (h \\<cdot>\\<^sub>D g) =\n  \\<epsilon>.map x' \\<cdot>\\<^sub>C\n  F ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "have \"... = \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>.map x' \\<cdot>\\<^sub>C\n    F ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g) =\n    \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "unfolding \\<psi>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>.map x' \\<cdot>\\<^sub>C\n    F ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g) =\n    \\<epsilon>.map x' \\<cdot>\\<^sub>C\n    F ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "by auto"], ["proof (state)\nthis:\n  \\<epsilon>.map x' \\<cdot>\\<^sub>C\n  F ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g) =\n  \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "finally"], ["proof (chain)\npicking this:\n  f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n  \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n  \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n    \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)", "by auto"], ["proof (state)\nthis:\n  f \\<cdot>\\<^sub>C \\<psi> x h \\<cdot>\\<^sub>C F g =\n  \\<psi> x' ((G f \\<cdot>\\<^sub>D h) \\<cdot>\\<^sub>D g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<psi>_inverts_coext:\n    assumes x: \"C.ide x\" and g: \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"arrow_from_functor.is_coext D C F (G x) (\\<epsilon>.map x) y (\\<psi> x g) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_from_functor.is_coext (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (G x)\n     (\\<epsilon>.map x) y (\\<psi> x g) g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. arrow_from_functor.is_coext (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (G x)\n     (\\<epsilon>.map x) y (\\<psi> x g) g", "interpret x\\<epsilon>: arrow_from_functor D C F \\<open>G x\\<close> x \\<open>\\<epsilon>.map x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (G x) x\n     (\\<epsilon>.map x)", "using x \\<epsilon>.maps_ide_in_hom"], ["proof (prove)\nusing this:\n  C.ide x\n  C.ide ?a \\<Longrightarrow>\n  \\<guillemotleft>\\<epsilon>o\n                   ?a : GF.map\n                         ?a \\<rightarrow>\\<^sub>C C.map ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (G x) x\n     (\\<epsilon>.map x)", "by (unfold_locales, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. x\\<epsilon>.is_coext y (\\<psi> x g) g", "show \"x\\<epsilon>.is_coext y (\\<psi> x g) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<epsilon>.is_coext y (\\<psi> x g) g", "using x g \\<psi>_def x\\<epsilon>.is_coext_def G_ide"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<psi> ?x ?h = \\<epsilon>.map ?x \\<cdot>\\<^sub>C F ?h\n  x\\<epsilon>.is_coext ?x' ?f ?g \\<equiv>\n  \\<guillemotleft>?g : ?x' \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n  ?f = \\<epsilon>.map x \\<cdot>\\<^sub>C F ?g\n  C.ide ?x \\<Longrightarrow> G ?x = Go ?x\n\ngoal (1 subgoal):\n 1. x\\<epsilon>.is_coext y (\\<psi> x g) g", "by blast"], ["proof (state)\nthis:\n  x\\<epsilon>.is_coext y (\\<psi> x g) g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<psi>_invertible:\n    assumes y: \"D.ide y\" and f: \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<exists>!g. \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and> \\<psi> x g = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!g.\n       \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n              x\\<guillemotright> \\<and>\n       \\<psi> x g = f", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<guillemotleft>?a : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n    \\<psi> x ?a = f\n 2. \\<And>g.\n       \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n              x\\<guillemotright> \\<and>\n       \\<psi> x g = f \\<Longrightarrow>\n       g = ?a", "have x: \"C.ide x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide x", "using f"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. C.ide x", "by auto"], ["proof (state)\nthis:\n  C.ide x\n\ngoal (2 subgoals):\n 1. \\<guillemotleft>?a : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n    \\<psi> x ?a = f\n 2. \\<And>g.\n       \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n              x\\<guillemotright> \\<and>\n       \\<psi> x g = f \\<Longrightarrow>\n       g = ?a", "interpret x\\<epsilon>: terminal_arrow_from_functor D C F \\<open>Go x\\<close> x \\<open>\\<epsilon>o x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go x)\n     x (\\<epsilon>o x)", "using x ex_terminal_arrow Go_\\<epsilon>o_terminal"], ["proof (prove)\nusing this:\n  C.ide x\n  C.ide ?y \\<Longrightarrow>\n  \\<exists>x e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F x ?y\n      e\n  \\<exists>b e.\n     terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F b ?a\n      e \\<Longrightarrow>\n  terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go ?a)\n   ?a (\\<epsilon>o ?a)\n\ngoal (1 subgoal):\n 1. terminal_arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F (Go x)\n     x (\\<epsilon>o x)", "by auto"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<guillemotleft>?a : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n    \\<psi> x ?a = f\n 2. \\<And>g.\n       \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n              x\\<guillemotright> \\<and>\n       \\<psi> x g = f \\<Longrightarrow>\n       g = ?a", "have 1: \"arrow_from_functor D C F y x f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y x f", "using y f"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y x f", "by (unfold_locales, auto)"], ["proof (state)\nthis:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y x f\n\ngoal (2 subgoals):\n 1. \\<guillemotleft>?a : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n    \\<psi> x ?a = f\n 2. \\<And>g.\n       \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n              x\\<guillemotright> \\<and>\n       \\<psi> x g = f \\<Longrightarrow>\n       g = ?a", "let ?g = \"x\\<epsilon>.the_coext y f\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<guillemotleft>?a : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n    \\<psi> x ?a = f\n 2. \\<And>g.\n       \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n              x\\<guillemotright> \\<and>\n       \\<psi> x g = f \\<Longrightarrow>\n       g = ?a", "have \"\\<psi> x ?g = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x (x\\<epsilon>.the_coext y f) = f", "using 1 x y \\<psi>_def x\\<epsilon>.the_coext_prop G_ide \\<psi>_inverts_coext x\\<epsilon>.is_coext_def"], ["proof (prove)\nusing this:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y x f\n  C.ide x\n  D.ide y\n  \\<psi> ?x ?h = \\<epsilon>.map ?x \\<cdot>\\<^sub>C F ?h\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' x\n   ?f \\<Longrightarrow>\n  \\<guillemotleft>x\\<epsilon>.the_coext ?x'\n                   ?f : ?x' \\<rightarrow>\\<^sub>D Go x\\<guillemotright>\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' x\n   ?f \\<Longrightarrow>\n  ?f = \\<epsilon>o x \\<cdot>\\<^sub>C F (x\\<epsilon>.the_coext ?x' ?f)\n  C.ide ?x \\<Longrightarrow> G ?x = Go ?x\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> arrow_from_functor.is_coext (\\<cdot>\\<^sub>D)\n                     (\\<cdot>\\<^sub>C) F (G ?x) (\\<epsilon>.map ?x) ?y\n                     (\\<psi> ?x ?g) ?g\n  x\\<epsilon>.is_coext ?x' ?f ?g \\<equiv>\n  \\<guillemotleft>?g : ?x' \\<rightarrow>\\<^sub>D Go\n            x\\<guillemotright> \\<and>\n  ?f = \\<epsilon>o x \\<cdot>\\<^sub>C F ?g\n\ngoal (1 subgoal):\n 1. \\<psi> x (x\\<epsilon>.the_coext y f) = f", "by simp"], ["proof (state)\nthis:\n  \\<psi> x (x\\<epsilon>.the_coext y f) = f\n\ngoal (2 subgoals):\n 1. \\<guillemotleft>?a : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n    \\<psi> x ?a = f\n 2. \\<And>g.\n       \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n              x\\<guillemotright> \\<and>\n       \\<psi> x g = f \\<Longrightarrow>\n       g = ?a", "thus \"\\<guillemotleft>?g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and> \\<psi> x ?g = f\""], ["proof (prove)\nusing this:\n  \\<psi> x (x\\<epsilon>.the_coext y f) = f\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>x\\<epsilon>.the_coext y\n                     f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n    \\<psi> x (x\\<epsilon>.the_coext y f) = f", "using 1 x x\\<epsilon>.the_coext_prop G_ide"], ["proof (prove)\nusing this:\n  \\<psi> x (x\\<epsilon>.the_coext y f) = f\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y x f\n  C.ide x\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' x\n   ?f \\<Longrightarrow>\n  \\<guillemotleft>x\\<epsilon>.the_coext ?x'\n                   ?f : ?x' \\<rightarrow>\\<^sub>D Go x\\<guillemotright>\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' x\n   ?f \\<Longrightarrow>\n  ?f = \\<epsilon>o x \\<cdot>\\<^sub>C F (x\\<epsilon>.the_coext ?x' ?f)\n  C.ide ?x \\<Longrightarrow> G ?x = Go ?x\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>x\\<epsilon>.the_coext y\n                     f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n    \\<psi> x (x\\<epsilon>.the_coext y f) = f", "by simp"], ["proof (state)\nthis:\n  \\<guillemotleft>x\\<epsilon>.the_coext y\n                   f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n  \\<psi> x (x\\<epsilon>.the_coext y f) = f\n\ngoal (1 subgoal):\n 1. \\<And>g.\n       \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n              x\\<guillemotright> \\<and>\n       \\<psi> x g = f \\<Longrightarrow>\n       g = x\\<epsilon>.the_coext y f", "show \"\\<And>g'. \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and> \\<psi> x g' = f \\<Longrightarrow> g' = ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g'.\n       \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright> \\<and>\n       \\<psi> x g' = f \\<Longrightarrow>\n       g' = x\\<epsilon>.the_coext y f", "using 1 x y \\<psi>_inverts_coext G_ide x\\<epsilon>.the_coext_unique"], ["proof (prove)\nusing this:\n  arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F y x f\n  C.ide x\n  D.ide y\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> arrow_from_functor.is_coext (\\<cdot>\\<^sub>D)\n                     (\\<cdot>\\<^sub>C) F (G ?x) (\\<epsilon>.map ?x) ?y\n                     (\\<psi> ?x ?g) ?g\n  C.ide ?x \\<Longrightarrow> G ?x = Go ?x\n  \\<lbrakk>arrow_from_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F ?x' x\n            ?f;\n   x\\<epsilon>.is_coext ?x' ?f ?g\\<rbrakk>\n  \\<Longrightarrow> ?g = x\\<epsilon>.the_coext ?x' ?f\n\ngoal (1 subgoal):\n 1. \\<And>g'.\n       \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright> \\<and>\n       \\<psi> x g' = f \\<Longrightarrow>\n       g' = x\\<epsilon>.the_coext y f", "by force"], ["proof (state)\nthis:\n  \\<guillemotleft>?g' : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n  \\<psi> x ?g' = f \\<Longrightarrow>\n  ?g' = x\\<epsilon>.the_coext y f\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \\<phi>\n    where \"\\<phi> y f = (THE g. \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G (C.cod f)\\<guillemotright> \\<and> \\<psi> (C.cod f) g = f)\""], ["", "lemma \\<phi>_in_hom:\n    assumes \"D.ide y\" and \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<guillemotleft>\\<phi> y f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "using assms \\<psi>_invertible \\<phi>_def theI' [of \"\\<lambda>g. \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and> \\<psi> x g = f\"]"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>!g.\n                       \\<guillemotleft>g : ?y \\<rightarrow>\\<^sub>D G\n                               ?x\\<guillemotright> \\<and>\n                       \\<psi> ?x g = ?f\n  \\<phi> ?y ?f =\n  (THE g.\n      \\<guillemotleft>g : ?y \\<rightarrow>\\<^sub>D G\n              (C.cod ?f)\\<guillemotright> \\<and>\n      \\<psi> (C.cod ?f) g = ?f)\n  \\<exists>!xa.\n     \\<guillemotleft>xa : y \\<rightarrow>\\<^sub>D G\n             x\\<guillemotright> \\<and>\n     \\<psi> x xa = f \\<Longrightarrow>\n  \\<guillemotleft>THE xa.\n                     \\<guillemotleft>xa : y \\<rightarrow>\\<^sub>D G\n                             x\\<guillemotright> \\<and>\n                     \\<psi> x xa =\n                     f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n  \\<psi> x\n   (THE xa.\n       \\<guillemotleft>xa : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright> \\<and>\n       \\<psi> x xa = f) =\n  f\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "by auto"], ["", "lemma \\<phi>_\\<psi>:\n    assumes \"C.ide x\" and \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<phi> y (\\<psi> x g) = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "have \"C.cod (\\<psi> x g) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.cod (\\<psi> x g) = x", "using assms \\<psi>_in_hom"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> ?x\n                                     ?g : F\n     ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. C.cod (\\<psi> x g) = x", "by auto"], ["proof (state)\nthis:\n  C.cod (\\<psi> x g) = x\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "hence \"\\<phi> y (\\<psi> x g) = (THE g'. \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and> \\<psi> x g' = \\<psi> x g)\""], ["proof (prove)\nusing this:\n  C.cod (\\<psi> x g) = x\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) =\n    (THE g'.\n        \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G\n                x\\<guillemotright> \\<and>\n        \\<psi> x g' = \\<psi> x g)", "using \\<phi>_def"], ["proof (prove)\nusing this:\n  C.cod (\\<psi> x g) = x\n  \\<phi> ?y ?f =\n  (THE g.\n      \\<guillemotleft>g : ?y \\<rightarrow>\\<^sub>D G\n              (C.cod ?f)\\<guillemotright> \\<and>\n      \\<psi> (C.cod ?f) g = ?f)\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) =\n    (THE g'.\n        \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G\n                x\\<guillemotright> \\<and>\n        \\<psi> x g' = \\<psi> x g)", "by auto"], ["proof (state)\nthis:\n  \\<phi> y (\\<psi> x g) =\n  (THE g'.\n      \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G\n              x\\<guillemotright> \\<and>\n      \\<psi> x g' = \\<psi> x g)\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "moreover"], ["proof (state)\nthis:\n  \\<phi> y (\\<psi> x g) =\n  (THE g'.\n      \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G\n              x\\<guillemotright> \\<and>\n      \\<psi> x g' = \\<psi> x g)\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "have \"\\<exists>!g'. \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and> \\<psi> x g' = \\<psi> x g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!g'.\n       \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright> \\<and>\n       \\<psi> x g' = \\<psi> x g", "using assms \\<psi>_in_hom \\<psi>_invertible D.ide_dom"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> ?x\n                                     ?g : F\n     ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>!g.\n                       \\<guillemotleft>g : ?y \\<rightarrow>\\<^sub>D G\n                               ?x\\<guillemotright> \\<and>\n                       \\<psi> ?x g = ?f\n  D.arr ?f \\<Longrightarrow> D.ide (D.dom ?f)\n\ngoal (1 subgoal):\n 1. \\<exists>!g'.\n       \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright> \\<and>\n       \\<psi> x g' = \\<psi> x g", "by blast"], ["proof (state)\nthis:\n  \\<exists>!g'.\n     \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G\n             x\\<guillemotright> \\<and>\n     \\<psi> x g' = \\<psi> x g\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "moreover"], ["proof (state)\nthis:\n  \\<exists>!g'.\n     \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G\n             x\\<guillemotright> \\<and>\n     \\<psi> x g' = \\<psi> x g\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "have \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and> \\<psi> x g = \\<psi> x g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n    \\<psi> x g = \\<psi> x g", "using assms(2)"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n    \\<psi> x g = \\<psi> x g", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n  \\<psi> x g = \\<psi> x g\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "ultimately"], ["proof (chain)\npicking this:\n  \\<phi> y (\\<psi> x g) =\n  (THE g'.\n      \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G\n              x\\<guillemotright> \\<and>\n      \\<psi> x g' = \\<psi> x g)\n  \\<exists>!g'.\n     \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G\n             x\\<guillemotright> \\<and>\n     \\<psi> x g' = \\<psi> x g\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n  \\<psi> x g = \\<psi> x g", "show \"\\<phi> y (\\<psi> x g) = g\""], ["proof (prove)\nusing this:\n  \\<phi> y (\\<psi> x g) =\n  (THE g'.\n      \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G\n              x\\<guillemotright> \\<and>\n      \\<psi> x g' = \\<psi> x g)\n  \\<exists>!g'.\n     \\<guillemotleft>g' : y \\<rightarrow>\\<^sub>D G\n             x\\<guillemotright> \\<and>\n     \\<psi> x g' = \\<psi> x g\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n  \\<psi> x g = \\<psi> x g\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "by auto"], ["proof (state)\nthis:\n  \\<phi> y (\\<psi> x g) = g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<psi>_\\<phi>:\n    assumes \"D.ide y\" and \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<psi> x (\\<phi> y f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "using assms \\<psi>_invertible \\<phi>_def theI' [of \"\\<lambda>g. \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and> \\<psi> x g = f\"]"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>!g.\n                       \\<guillemotleft>g : ?y \\<rightarrow>\\<^sub>D G\n                               ?x\\<guillemotright> \\<and>\n                       \\<psi> ?x g = ?f\n  \\<phi> ?y ?f =\n  (THE g.\n      \\<guillemotleft>g : ?y \\<rightarrow>\\<^sub>D G\n              (C.cod ?f)\\<guillemotright> \\<and>\n      \\<psi> (C.cod ?f) g = ?f)\n  \\<exists>!xa.\n     \\<guillemotleft>xa : y \\<rightarrow>\\<^sub>D G\n             x\\<guillemotright> \\<and>\n     \\<psi> x xa = f \\<Longrightarrow>\n  \\<guillemotleft>THE xa.\n                     \\<guillemotleft>xa : y \\<rightarrow>\\<^sub>D G\n                             x\\<guillemotright> \\<and>\n                     \\<psi> x xa =\n                     f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright> \\<and>\n  \\<psi> x\n   (THE xa.\n       \\<guillemotleft>xa : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright> \\<and>\n       \\<psi> x xa = f) =\n  f\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "by auto"], ["", "lemma \\<phi>_natural:\n    assumes \"\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\" and \"\\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\" and \"\\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) = (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "have \"C.ide x' \\<and> D.ide y \\<and> D.in_hom (\\<phi> y h) y (G x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide x' \\<and>\n    D.ide y \\<and>\n    \\<guillemotleft>\\<phi> y\n                     h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "using assms \\<phi>_in_hom"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. C.ide x' \\<and>\n    D.ide y \\<and>\n    \\<guillemotleft>\\<phi> y\n                     h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  C.ide x' \\<and>\n  D.ide y \\<and>\n  \\<guillemotleft>\\<phi> y h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "thus ?thesis"], ["proof (prove)\nusing this:\n  C.ide x' \\<and>\n  D.ide y \\<and>\n  \\<guillemotleft>\\<phi> y h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "using assms D.comp_in_homI G.preserves_hom \\<psi>_natural [of f x x' g y' y \"\\<phi> y h\"] \\<phi>_\\<psi> \\<psi>_\\<phi>"], ["proof (prove)\nusing this:\n  C.ide x' \\<and>\n  D.ide y \\<and>\n  \\<guillemotleft>\\<phi> y h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>\\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>D ?b\\<guillemotright>;\n   \\<guillemotleft>?g : ?b \\<rightarrow>\\<^sub>D ?c\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>?g \\<cdot>\\<^sub>D\n                                    ?f : ?a \\<rightarrow>\\<^sub>D ?c\\<guillemotright>\n  \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>C ?b\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>G ?f : G ?a \\<rightarrow>\\<^sub>D G ?b\\<guillemotright>\n  \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n   \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n   \\<guillemotleft>\\<phi> y\n                    h : y \\<rightarrow>\\<^sub>D G\n           x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> f \\<cdot>\\<^sub>C\n                    \\<psi> x (\\<phi> y h) \\<cdot>\\<^sub>C F g =\n                    \\<psi> x'\n                     ((G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g)\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y (\\<psi> ?x ?g) = ?g\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x (\\<phi> ?y ?f) = ?f\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "by auto"], ["proof (state)\nthis:\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n  (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem induces_meta_adjunction:\n    shows \"meta_adjunction C D F G \\<phi> \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", "using \\<phi>_in_hom \\<psi>_in_hom \\<phi>_\\<psi> \\<psi>_\\<phi> \\<phi>_natural D.comp_assoc"], ["proof (prove)\nusing this:\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> ?x\n                                     ?g : F\n     ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y (\\<psi> ?x ?g) = ?g\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x (\\<phi> ?y ?f) = ?f\n  \\<lbrakk>\\<guillemotleft>?f : ?x \\<rightarrow>\\<^sub>C ?x'\\<guillemotright>;\n   \\<guillemotleft>?g : ?y' \\<rightarrow>\\<^sub>D ?y\\<guillemotright>;\n   \\<guillemotleft>?h : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y'\n                     (?f \\<cdot>\\<^sub>C ?h \\<cdot>\\<^sub>C F ?g) =\n                    (G ?f \\<cdot>\\<^sub>D \\<phi> ?y ?h) \\<cdot>\\<^sub>D ?g\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", "by (unfold_locales, simp_all)"], ["", "end"], ["", "text\\<open>\n    A right adjoint functor induces a meta-adjunction, modulo the choice of a\n    left adjoint and unit.\n\\<close>"], ["", "context right_adjoint_functor\n  begin"], ["", "definition Fo :: \"'d \\<Rightarrow> 'c\"\n    where \"Fo y = (SOME x. \\<exists>u. initial_arrow_to_functor C D G y x u)\""], ["", "definition \\<eta>o :: \"'d \\<Rightarrow> 'd\"\n    where \"\\<eta>o y = (SOME u. initial_arrow_to_functor C D G y (Fo y) u)\""], ["", "lemma Fo_\\<eta>o_initial:\n    assumes \"\\<exists>x u. initial_arrow_to_functor C D G y x u\"\n    shows \"initial_arrow_to_functor C D G y (Fo y) (\\<eta>o y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (Fo y)\n     (\\<eta>o y)", "using assms Fo_def \\<eta>o_def\n            someI_ex [of \"\\<lambda>x. \\<exists>u. initial_arrow_to_functor C D G y x u\"]\n            someI_ex [of \"\\<lambda>u. initial_arrow_to_functor C D G y (Fo y) u\"]"], ["proof (prove)\nusing this:\n  \\<exists>x u.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x u\n  Fo ?y =\n  (SOME x.\n      \\<exists>u.\n         initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y x\n          u)\n  \\<eta>o ?y =\n  (SOME u.\n      initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y\n       (Fo ?y) u)\n  \\<exists>x u.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x\n      u \\<Longrightarrow>\n  \\<exists>u.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y\n      (SOME x.\n          \\<exists>u.\n             initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n              y x u)\n      u\n  \\<exists>x.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (Fo y)\n      x \\<Longrightarrow>\n  initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (Fo y)\n   (SOME x.\n       initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y\n        (Fo y) x)\n\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (Fo y)\n     (\\<eta>o y)", "by simp"], ["", "text\\<open>\n      The left adjoint @{term F} to @{term g} takes each arrow @{term g} of\n      @{term[source=true] D} to the unique @{term[source=true] C}-extension of\n      @{term \"D (\\<eta>o (D.cod g)) g\"} along @{term \"\\<eta>o (D.dom g)\"}.\n\\<close>"], ["", "definition F :: \"'d \\<Rightarrow> 'c\"\n    where \"F g = (if D.arr g then\n                     initial_arrow_to_functor.the_ext C D G (Fo (D.dom g)) (\\<eta>o (D.dom g))\n                                  (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n                  else C.null)\""], ["", "lemma F_ide:\n    assumes \"D.ide y\"\n    shows \"F y = Fo y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F y = Fo y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. F y = Fo y", "interpret initial_arrow_to_functor C D G y \\<open>Fo y\\<close> \\<open>\\<eta>o y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (Fo y)\n     (\\<eta>o y)", "using assms initial_arrows_exist Fo_\\<eta>o_initial"], ["proof (prove)\nusing this:\n  D.ide y\n  D.ide ?x \\<Longrightarrow>\n  \\<exists>y e.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?x y e\n  \\<exists>x u.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y x\n      u \\<Longrightarrow>\n  initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y (Fo ?y)\n   (\\<eta>o ?y)\n\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (Fo y)\n     (\\<eta>o y)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. F y = Fo y", "have 1: \"arrow_to_functor C D G y (Fo y) (\\<eta>o y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (Fo y)\n     (\\<eta>o y)", ".."], ["proof (state)\nthis:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (Fo y)\n   (\\<eta>o y)\n\ngoal (1 subgoal):\n 1. F y = Fo y", "have \"is_ext (Fo y) (\\<eta>o y) (Fo y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ext (Fo y) (\\<eta>o y) (Fo y)", "unfolding is_ext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>Fo y : Fo y \\<rightarrow>\\<^sub>C Fo\n                 y\\<guillemotright> \\<and>\n    \\<eta>o y = G (Fo y) \\<cdot>\\<^sub>D \\<eta>o y", "using arrow D.comp_ide_arr [of \"G (Fo y)\" \"\\<eta>o y\"]"], ["proof (prove)\nusing this:\n  C.ide (Fo y) \\<and>\n  \\<guillemotleft>\\<eta>o\n                   y : y \\<rightarrow>\\<^sub>D G (Fo y)\\<guillemotright>\n  \\<lbrakk>D.ide (G (Fo y)); D.seq (G (Fo y)) (\\<eta>o y)\\<rbrakk>\n  \\<Longrightarrow> G (Fo y) \\<cdot>\\<^sub>D \\<eta>o y = \\<eta>o y\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>Fo y : Fo y \\<rightarrow>\\<^sub>C Fo\n                 y\\<guillemotright> \\<and>\n    \\<eta>o y = G (Fo y) \\<cdot>\\<^sub>D \\<eta>o y", "by force"], ["proof (state)\nthis:\n  is_ext (Fo y) (\\<eta>o y) (Fo y)\n\ngoal (1 subgoal):\n 1. F y = Fo y", "hence \"Fo y = the_ext (Fo y) (\\<eta>o y)\""], ["proof (prove)\nusing this:\n  is_ext (Fo y) (\\<eta>o y) (Fo y)\n\ngoal (1 subgoal):\n 1. Fo y = the_ext (Fo y) (\\<eta>o y)", "using 1 the_ext_unique"], ["proof (prove)\nusing this:\n  is_ext (Fo y) (\\<eta>o y) (Fo y)\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (Fo y)\n   (\\<eta>o y)\n  \\<lbrakk>arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y ?y' ?g;\n   is_ext ?y' ?g ?f\\<rbrakk>\n  \\<Longrightarrow> ?f = the_ext ?y' ?g\n\ngoal (1 subgoal):\n 1. Fo y = the_ext (Fo y) (\\<eta>o y)", "by blast"], ["proof (state)\nthis:\n  Fo y = the_ext (Fo y) (\\<eta>o y)\n\ngoal (1 subgoal):\n 1. F y = Fo y", "moreover"], ["proof (state)\nthis:\n  Fo y = the_ext (Fo y) (\\<eta>o y)\n\ngoal (1 subgoal):\n 1. F y = Fo y", "have \"\\<eta>o y = D (\\<eta>o (D.cod y)) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>o y = \\<eta>o (D.cod y) \\<cdot>\\<^sub>D y", "using assms arrow D.comp_arr_ide D.comp_arr_dom"], ["proof (prove)\nusing this:\n  D.ide y\n  C.ide (Fo y) \\<and>\n  \\<guillemotleft>\\<eta>o\n                   y : y \\<rightarrow>\\<^sub>D G (Fo y)\\<guillemotright>\n  \\<lbrakk>D.ide ?a; D.seq ?f ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>D ?a = ?f\n  \\<lbrakk>D.arr ?f; D.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>D ?a = ?f\n\ngoal (1 subgoal):\n 1. \\<eta>o y = \\<eta>o (D.cod y) \\<cdot>\\<^sub>D y", "by auto"], ["proof (state)\nthis:\n  \\<eta>o y = \\<eta>o (D.cod y) \\<cdot>\\<^sub>D y\n\ngoal (1 subgoal):\n 1. F y = Fo y", "ultimately"], ["proof (chain)\npicking this:\n  Fo y = the_ext (Fo y) (\\<eta>o y)\n  \\<eta>o y = \\<eta>o (D.cod y) \\<cdot>\\<^sub>D y", "show ?thesis"], ["proof (prove)\nusing this:\n  Fo y = the_ext (Fo y) (\\<eta>o y)\n  \\<eta>o y = \\<eta>o (D.cod y) \\<cdot>\\<^sub>D y\n\ngoal (1 subgoal):\n 1. F y = Fo y", "using assms F_def D.dom_cod D.in_homE D.ide_in_hom"], ["proof (prove)\nusing this:\n  Fo y = the_ext (Fo y) (\\<eta>o y)\n  \\<eta>o y = \\<eta>o (D.cod y) \\<cdot>\\<^sub>D y\n  D.ide y\n  F ?g =\n  (if D.arr ?g\n   then initial_arrow_to_functor.the_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n         G (Fo (D.dom ?g)) (\\<eta>o (D.dom ?g)) (Fo (D.cod ?g))\n         (\\<eta>o (D.cod ?g) \\<cdot>\\<^sub>D ?g)\n   else C.null)\n  D.arr ?f \\<Longrightarrow> D.dom (D.cod ?f) = D.cod ?f\n  \\<lbrakk>\\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>D ?b\\<guillemotright>;\n   \\<lbrakk>D.arr ?f; D.dom ?f = ?a; D.cod ?f = ?b\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  D.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>D ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. F y = Fo y", "by metis"], ["proof (state)\nthis:\n  F y = Fo y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma F_is_functor:\n    shows \"functor D C F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f. \\<not> D.arr f \\<Longrightarrow> F f = C.null\n 2. \\<And>f. D.arr f \\<Longrightarrow> C.arr (F f)\n 3. \\<And>f. D.arr f \\<Longrightarrow> C.dom (F f) = F (D.dom f)\n 4. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 5. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "fix g :: 'd"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f. \\<not> D.arr f \\<Longrightarrow> F f = C.null\n 2. \\<And>f. D.arr f \\<Longrightarrow> C.arr (F f)\n 3. \\<And>f. D.arr f \\<Longrightarrow> C.dom (F f) = F (D.dom f)\n 4. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 5. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "assume \"\\<not>D.arr g\""], ["proof (state)\nthis:\n  \\<not> D.arr g\n\ngoal (5 subgoals):\n 1. \\<And>f. \\<not> D.arr f \\<Longrightarrow> F f = C.null\n 2. \\<And>f. D.arr f \\<Longrightarrow> C.arr (F f)\n 3. \\<And>f. D.arr f \\<Longrightarrow> C.dom (F f) = F (D.dom f)\n 4. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 5. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "thus \"F g = C.null\""], ["proof (prove)\nusing this:\n  \\<not> D.arr g\n\ngoal (1 subgoal):\n 1. F g = C.null", "using F_def"], ["proof (prove)\nusing this:\n  \\<not> D.arr g\n  F ?g =\n  (if D.arr ?g\n   then initial_arrow_to_functor.the_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n         G (Fo (D.dom ?g)) (\\<eta>o (D.dom ?g)) (Fo (D.cod ?g))\n         (\\<eta>o (D.cod ?g) \\<cdot>\\<^sub>D ?g)\n   else C.null)\n\ngoal (1 subgoal):\n 1. F g = C.null", "by auto"], ["proof (state)\nthis:\n  F g = C.null\n\ngoal (4 subgoals):\n 1. \\<And>f. D.arr f \\<Longrightarrow> C.arr (F f)\n 2. \\<And>f. D.arr f \\<Longrightarrow> C.dom (F f) = F (D.dom f)\n 3. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 4. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f. D.arr f \\<Longrightarrow> C.arr (F f)\n 2. \\<And>f. D.arr f \\<Longrightarrow> C.dom (F f) = F (D.dom f)\n 3. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 4. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "fix g :: 'd"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f. D.arr f \\<Longrightarrow> C.arr (F f)\n 2. \\<And>f. D.arr f \\<Longrightarrow> C.dom (F f) = F (D.dom f)\n 3. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 4. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "assume g: \"D.arr g\""], ["proof (state)\nthis:\n  D.arr g\n\ngoal (4 subgoals):\n 1. \\<And>f. D.arr f \\<Longrightarrow> C.arr (F f)\n 2. \\<And>f. D.arr f \\<Longrightarrow> C.dom (F f) = F (D.dom f)\n 3. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 4. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "let ?y = \"D.dom g\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f. D.arr f \\<Longrightarrow> C.arr (F f)\n 2. \\<And>f. D.arr f \\<Longrightarrow> C.dom (F f) = F (D.dom f)\n 3. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 4. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "let ?y' = \"D.cod g\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f. D.arr f \\<Longrightarrow> C.arr (F f)\n 2. \\<And>f. D.arr f \\<Longrightarrow> C.dom (F f) = F (D.dom f)\n 3. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 4. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "interpret y\\<eta>: initial_arrow_to_functor C D G ?y \\<open>Fo ?y\\<close> \\<open>\\<eta>o ?y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n     (Fo (D.dom g)) (\\<eta>o (D.dom g))", "using g initial_arrows_exist Fo_\\<eta>o_initial"], ["proof (prove)\nusing this:\n  D.arr g\n  D.ide ?x \\<Longrightarrow>\n  \\<exists>y e.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?x y e\n  \\<exists>x u.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y x\n      u \\<Longrightarrow>\n  initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y (Fo ?y)\n   (\\<eta>o ?y)\n\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n     (Fo (D.dom g)) (\\<eta>o (D.dom g))", "by simp"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f. D.arr f \\<Longrightarrow> C.arr (F f)\n 2. \\<And>f. D.arr f \\<Longrightarrow> C.dom (F f) = F (D.dom f)\n 3. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 4. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "interpret y'\\<eta>: initial_arrow_to_functor C D G ?y' \\<open>Fo ?y'\\<close> \\<open>\\<eta>o ?y'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.cod g)\n     (Fo (D.cod g)) (\\<eta>o (D.cod g))", "using g initial_arrows_exist Fo_\\<eta>o_initial"], ["proof (prove)\nusing this:\n  D.arr g\n  D.ide ?x \\<Longrightarrow>\n  \\<exists>y e.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?x y e\n  \\<exists>x u.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y x\n      u \\<Longrightarrow>\n  initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y (Fo ?y)\n   (\\<eta>o ?y)\n\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.cod g)\n     (Fo (D.cod g)) (\\<eta>o (D.cod g))", "by simp"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f. D.arr f \\<Longrightarrow> C.arr (F f)\n 2. \\<And>f. D.arr f \\<Longrightarrow> C.dom (F f) = F (D.dom f)\n 3. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 4. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "have 1: \"arrow_to_functor C D G ?y (Fo ?y') (D (\\<eta>o ?y') g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n     (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)", "using g y'\\<eta>.arrow"], ["proof (prove)\nusing this:\n  D.arr g\n  C.ide (Fo (D.cod g)) \\<and>\n  \\<guillemotleft>\\<eta>o\n                   (D.cod\n                     g) : D.cod\n                           g \\<rightarrow>\\<^sub>D G\n              (Fo (D.cod g))\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n     (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)", "by (unfold_locales, auto)"], ["proof (state)\nthis:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n   (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n\ngoal (4 subgoals):\n 1. \\<And>f. D.arr f \\<Longrightarrow> C.arr (F f)\n 2. \\<And>f. D.arr f \\<Longrightarrow> C.dom (F f) = F (D.dom f)\n 3. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 4. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "have \"F g = y\\<eta>.the_ext (Fo ?y') (D (\\<eta>o ?y') g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F g =\n    y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)", "using g F_def"], ["proof (prove)\nusing this:\n  D.arr g\n  F ?g =\n  (if D.arr ?g\n   then initial_arrow_to_functor.the_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n         G (Fo (D.dom ?g)) (\\<eta>o (D.dom ?g)) (Fo (D.cod ?g))\n         (\\<eta>o (D.cod ?g) \\<cdot>\\<^sub>D ?g)\n   else C.null)\n\ngoal (1 subgoal):\n 1. F g =\n    y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)", "by simp"], ["proof (state)\nthis:\n  F g = y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n\ngoal (4 subgoals):\n 1. \\<And>f. D.arr f \\<Longrightarrow> C.arr (F f)\n 2. \\<And>f. D.arr f \\<Longrightarrow> C.dom (F f) = F (D.dom f)\n 3. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 4. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "hence Fg: \"\\<guillemotleft>F g : Fo ?y \\<rightarrow>\\<^sub>C Fo ?y'\\<guillemotright> \\<and> \\<eta>o ?y' \\<cdot>\\<^sub>D g = G (F g) \\<cdot>\\<^sub>D \\<eta>o ?y\""], ["proof (prove)\nusing this:\n  F g = y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>F g : Fo (D.dom\n                               g) \\<rightarrow>\\<^sub>C Fo\n                   (D.cod g)\\<guillemotright> \\<and>\n    \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g =\n    G (F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "using 1 y\\<eta>.the_ext_prop"], ["proof (prove)\nusing this:\n  F g = y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n   (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g) ?y'\n   ?g \\<Longrightarrow>\n  \\<guillemotleft>y\\<eta>.the_ext ?y'\n                   ?g : Fo (D.dom\n                             g) \\<rightarrow>\\<^sub>C ?y'\\<guillemotright>\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g) ?y'\n   ?g \\<Longrightarrow>\n  ?g = G (y\\<eta>.the_ext ?y' ?g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>F g : Fo (D.dom\n                               g) \\<rightarrow>\\<^sub>C Fo\n                   (D.cod g)\\<guillemotright> \\<and>\n    \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g =\n    G (F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "by simp"], ["proof (state)\nthis:\n  \\<guillemotleft>F g : Fo (D.dom\n                             g) \\<rightarrow>\\<^sub>C Fo\n                 (D.cod g)\\<guillemotright> \\<and>\n  \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g =\n  G (F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n\ngoal (4 subgoals):\n 1. \\<And>f. D.arr f \\<Longrightarrow> C.arr (F f)\n 2. \\<And>f. D.arr f \\<Longrightarrow> C.dom (F f) = F (D.dom f)\n 3. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 4. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "show \"C.arr (F g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.arr (F g)", "using Fg"], ["proof (prove)\nusing this:\n  \\<guillemotleft>F g : Fo (D.dom\n                             g) \\<rightarrow>\\<^sub>C Fo\n                 (D.cod g)\\<guillemotright> \\<and>\n  \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g =\n  G (F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n\ngoal (1 subgoal):\n 1. C.arr (F g)", "by auto"], ["proof (state)\nthis:\n  C.arr (F g)\n\ngoal (3 subgoals):\n 1. \\<And>f. D.arr f \\<Longrightarrow> C.dom (F f) = F (D.dom f)\n 2. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 3. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "show \"C.dom (F g) = F ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.dom (F g) = F (D.dom g)", "using Fg g F_ide"], ["proof (prove)\nusing this:\n  \\<guillemotleft>F g : Fo (D.dom\n                             g) \\<rightarrow>\\<^sub>C Fo\n                 (D.cod g)\\<guillemotright> \\<and>\n  \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g =\n  G (F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n  D.arr g\n  D.ide ?y \\<Longrightarrow> F ?y = Fo ?y\n\ngoal (1 subgoal):\n 1. C.dom (F g) = F (D.dom g)", "by auto"], ["proof (state)\nthis:\n  C.dom (F g) = F (D.dom g)\n\ngoal (2 subgoals):\n 1. \\<And>f. D.arr f \\<Longrightarrow> C.cod (F f) = F (D.cod f)\n 2. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "show \"C.cod (F g) = F ?y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.cod (F g) = F (D.cod g)", "using Fg g F_ide"], ["proof (prove)\nusing this:\n  \\<guillemotleft>F g : Fo (D.dom\n                             g) \\<rightarrow>\\<^sub>C Fo\n                 (D.cod g)\\<guillemotright> \\<and>\n  \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g =\n  G (F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n  D.arr g\n  D.ide ?y \\<Longrightarrow> F ?y = Fo ?y\n\ngoal (1 subgoal):\n 1. C.cod (F g) = F (D.cod g)", "by auto"], ["proof (state)\nthis:\n  C.cod (F g) = F (D.cod g)\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "fix g :: 'd"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "fix g' :: 'd"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "assume g': \"D.arr (D g' g)\""], ["proof (state)\nthis:\n  D.seq g' g\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "have g: \"D.arr g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.arr g", "using g'"], ["proof (prove)\nusing this:\n  D.seq g' g\n\ngoal (1 subgoal):\n 1. D.arr g", "by auto"], ["proof (state)\nthis:\n  D.arr g\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "let ?y = \"D.dom g\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "let ?y' = \"D.cod g\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "let ?y'' = \"D.cod g'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "interpret y\\<eta>: initial_arrow_to_functor C D G ?y \\<open>Fo ?y\\<close> \\<open>\\<eta>o ?y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n     (Fo (D.dom g)) (\\<eta>o (D.dom g))", "using g initial_arrows_exist Fo_\\<eta>o_initial"], ["proof (prove)\nusing this:\n  D.arr g\n  D.ide ?x \\<Longrightarrow>\n  \\<exists>y e.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?x y e\n  \\<exists>x u.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y x\n      u \\<Longrightarrow>\n  initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y (Fo ?y)\n   (\\<eta>o ?y)\n\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n     (Fo (D.dom g)) (\\<eta>o (D.dom g))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "interpret y'\\<eta>: initial_arrow_to_functor C D G ?y' \\<open>Fo ?y'\\<close> \\<open>\\<eta>o ?y'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.cod g)\n     (Fo (D.cod g)) (\\<eta>o (D.cod g))", "using g initial_arrows_exist Fo_\\<eta>o_initial"], ["proof (prove)\nusing this:\n  D.arr g\n  D.ide ?x \\<Longrightarrow>\n  \\<exists>y e.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?x y e\n  \\<exists>x u.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y x\n      u \\<Longrightarrow>\n  initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y (Fo ?y)\n   (\\<eta>o ?y)\n\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.cod g)\n     (Fo (D.cod g)) (\\<eta>o (D.cod g))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "interpret y''\\<eta>: initial_arrow_to_functor C D G ?y'' \\<open>Fo ?y''\\<close> \\<open>\\<eta>o ?y''\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n     (D.cod g') (Fo (D.cod g')) (\\<eta>o (D.cod g'))", "using g' initial_arrows_exist Fo_\\<eta>o_initial"], ["proof (prove)\nusing this:\n  D.seq g' g\n  D.ide ?x \\<Longrightarrow>\n  \\<exists>y e.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?x y e\n  \\<exists>x u.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y x\n      u \\<Longrightarrow>\n  initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y (Fo ?y)\n   (\\<eta>o ?y)\n\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n     (D.cod g') (Fo (D.cod g')) (\\<eta>o (D.cod g'))", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "have 1: \"arrow_to_functor C D G ?y (Fo ?y') (\\<eta>o ?y' \\<cdot>\\<^sub>D g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n     (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)", "using g y'\\<eta>.arrow"], ["proof (prove)\nusing this:\n  D.arr g\n  C.ide (Fo (D.cod g)) \\<and>\n  \\<guillemotleft>\\<eta>o\n                   (D.cod\n                     g) : D.cod\n                           g \\<rightarrow>\\<^sub>D G\n              (Fo (D.cod g))\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n     (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)", "by (unfold_locales, auto)"], ["proof (state)\nthis:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n   (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "have \"F g = y\\<eta>.the_ext (Fo ?y') (\\<eta>o ?y' \\<cdot>\\<^sub>D g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F g =\n    y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)", "using g F_def"], ["proof (prove)\nusing this:\n  D.arr g\n  F ?g =\n  (if D.arr ?g\n   then initial_arrow_to_functor.the_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n         G (Fo (D.dom ?g)) (\\<eta>o (D.dom ?g)) (Fo (D.cod ?g))\n         (\\<eta>o (D.cod ?g) \\<cdot>\\<^sub>D ?g)\n   else C.null)\n\ngoal (1 subgoal):\n 1. F g =\n    y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)", "by simp"], ["proof (state)\nthis:\n  F g = y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "hence Fg: \"\\<guillemotleft>F g : Fo ?y \\<rightarrow>\\<^sub>C Fo ?y'\\<guillemotright> \\<and> \\<eta>o ?y' \\<cdot>\\<^sub>D g = G (F g) \\<cdot>\\<^sub>D \\<eta>o ?y\""], ["proof (prove)\nusing this:\n  F g = y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>F g : Fo (D.dom\n                               g) \\<rightarrow>\\<^sub>C Fo\n                   (D.cod g)\\<guillemotright> \\<and>\n    \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g =\n    G (F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "using 1 y\\<eta>.the_ext_prop"], ["proof (prove)\nusing this:\n  F g = y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n   (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g) ?y'\n   ?g \\<Longrightarrow>\n  \\<guillemotleft>y\\<eta>.the_ext ?y'\n                   ?g : Fo (D.dom\n                             g) \\<rightarrow>\\<^sub>C ?y'\\<guillemotright>\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g) ?y'\n   ?g \\<Longrightarrow>\n  ?g = G (y\\<eta>.the_ext ?y' ?g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>F g : Fo (D.dom\n                               g) \\<rightarrow>\\<^sub>C Fo\n                   (D.cod g)\\<guillemotright> \\<and>\n    \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g =\n    G (F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "by simp"], ["proof (state)\nthis:\n  \\<guillemotleft>F g : Fo (D.dom\n                             g) \\<rightarrow>\\<^sub>C Fo\n                 (D.cod g)\\<guillemotright> \\<and>\n  \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g =\n  G (F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "have 2: \"arrow_to_functor C D G ?y' (Fo ?y'') (\\<eta>o ?y'' \\<cdot>\\<^sub>D g')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.cod g)\n     (Fo (D.cod g')) (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g')", "using g' y''\\<eta>.arrow"], ["proof (prove)\nusing this:\n  D.seq g' g\n  C.ide (Fo (D.cod g')) \\<and>\n  \\<guillemotleft>\\<eta>o\n                   (D.cod\n                     g') : D.cod\n                            g' \\<rightarrow>\\<^sub>D G\n                (Fo (D.cod g'))\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.cod g)\n     (Fo (D.cod g')) (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g')", "by (unfold_locales, auto)"], ["proof (state)\nthis:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.cod g)\n   (Fo (D.cod g')) (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g')\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "have \"F g' = y'\\<eta>.the_ext (Fo ?y'') (\\<eta>o ?y'' \\<cdot>\\<^sub>D g')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F g' =\n    y'\\<eta>.the_ext (Fo (D.cod g')) (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g')", "using g' F_def"], ["proof (prove)\nusing this:\n  D.seq g' g\n  F ?g =\n  (if D.arr ?g\n   then initial_arrow_to_functor.the_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n         G (Fo (D.dom ?g)) (\\<eta>o (D.dom ?g)) (Fo (D.cod ?g))\n         (\\<eta>o (D.cod ?g) \\<cdot>\\<^sub>D ?g)\n   else C.null)\n\ngoal (1 subgoal):\n 1. F g' =\n    y'\\<eta>.the_ext (Fo (D.cod g')) (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g')", "by auto"], ["proof (state)\nthis:\n  F g' =\n  y'\\<eta>.the_ext (Fo (D.cod g')) (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g')\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "hence Fg': \"\\<guillemotleft>F g' : Fo ?y' \\<rightarrow>\\<^sub>C Fo ?y''\\<guillemotright> \\<and> \\<eta>o ?y'' \\<cdot>\\<^sub>D g' = G (F g') \\<cdot>\\<^sub>D \\<eta>o ?y'\""], ["proof (prove)\nusing this:\n  F g' =\n  y'\\<eta>.the_ext (Fo (D.cod g')) (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g')\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>F g' : Fo (D.cod\n                                g) \\<rightarrow>\\<^sub>C Fo\n                    (D.cod g')\\<guillemotright> \\<and>\n    \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' =\n    G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g)", "using 2 y'\\<eta>.the_ext_prop"], ["proof (prove)\nusing this:\n  F g' =\n  y'\\<eta>.the_ext (Fo (D.cod g')) (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g')\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.cod g)\n   (Fo (D.cod g')) (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g')\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.cod g) ?y'\n   ?g \\<Longrightarrow>\n  \\<guillemotleft>y'\\<eta>.the_ext ?y'\n                   ?g : Fo (D.cod\n                             g) \\<rightarrow>\\<^sub>C ?y'\\<guillemotright>\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.cod g) ?y'\n   ?g \\<Longrightarrow>\n  ?g = G (y'\\<eta>.the_ext ?y' ?g) \\<cdot>\\<^sub>D \\<eta>o (D.cod g)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>F g' : Fo (D.cod\n                                g) \\<rightarrow>\\<^sub>C Fo\n                    (D.cod g')\\<guillemotright> \\<and>\n    \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' =\n    G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g)", "by simp"], ["proof (state)\nthis:\n  \\<guillemotleft>F g' : Fo (D.cod\n                              g) \\<rightarrow>\\<^sub>C Fo\n                  (D.cod g')\\<guillemotright> \\<and>\n  \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' =\n  G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g)\n\ngoal (1 subgoal):\n 1. \\<And>g f.\n       D.seq g f \\<Longrightarrow>\n       F (g \\<cdot>\\<^sub>D f) = F g \\<cdot>\\<^sub>C F f", "show \"F (g' \\<cdot>\\<^sub>D g) = F g' \\<cdot>\\<^sub>C F g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (g' \\<cdot>\\<^sub>D g) = F g' \\<cdot>\\<^sub>C F g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. F (g' \\<cdot>\\<^sub>D g) = F g' \\<cdot>\\<^sub>C F g", "have \"y\\<eta>.is_ext (Fo ?y'') (\\<eta>o ?y'' \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g) (F g' \\<cdot>\\<^sub>C F g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y\\<eta>.is_ext (Fo (D.cod g'))\n     (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n     (F g' \\<cdot>\\<^sub>C F g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. y\\<eta>.is_ext (Fo (D.cod g'))\n     (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n     (F g' \\<cdot>\\<^sub>C F g)", "have \"\\<guillemotleft>F g' \\<cdot>\\<^sub>C F g : Fo ?y \\<rightarrow>\\<^sub>C Fo ?y''\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>F g' \\<cdot>\\<^sub>C\n                    F g : Fo (D.dom\n                               g) \\<rightarrow>\\<^sub>C Fo\n                   (D.cod g')\\<guillemotright>", "using 1 2 Fg Fg'"], ["proof (prove)\nusing this:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n   (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.cod g)\n   (Fo (D.cod g')) (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g')\n  \\<guillemotleft>F g : Fo (D.dom\n                             g) \\<rightarrow>\\<^sub>C Fo\n                 (D.cod g)\\<guillemotright> \\<and>\n  \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g =\n  G (F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n  \\<guillemotleft>F g' : Fo (D.cod\n                              g) \\<rightarrow>\\<^sub>C Fo\n                  (D.cod g')\\<guillemotright> \\<and>\n  \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' =\n  G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>F g' \\<cdot>\\<^sub>C\n                    F g : Fo (D.dom\n                               g) \\<rightarrow>\\<^sub>C Fo\n                   (D.cod g')\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>F g' \\<cdot>\\<^sub>C\n                  F g : Fo (D.dom\n                             g) \\<rightarrow>\\<^sub>C Fo\n                 (D.cod g')\\<guillemotright>\n\ngoal (1 subgoal):\n 1. y\\<eta>.is_ext (Fo (D.cod g'))\n     (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n     (F g' \\<cdot>\\<^sub>C F g)", "moreover"], ["proof (state)\nthis:\n  \\<guillemotleft>F g' \\<cdot>\\<^sub>C\n                  F g : Fo (D.dom\n                             g) \\<rightarrow>\\<^sub>C Fo\n                 (D.cod g')\\<guillemotright>\n\ngoal (1 subgoal):\n 1. y\\<eta>.is_ext (Fo (D.cod g'))\n     (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n     (F g' \\<cdot>\\<^sub>C F g)", "have \"\\<eta>o ?y'' \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g = G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n    G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n    G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "have \"\\<eta>o ?y'' \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g = (G (F g') \\<cdot>\\<^sub>D \\<eta>o ?y') \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n    (G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g)) \\<cdot>\\<^sub>D g", "using Fg' g g' y''\\<eta>.arrow"], ["proof (prove)\nusing this:\n  \\<guillemotleft>F g' : Fo (D.cod\n                              g) \\<rightarrow>\\<^sub>C Fo\n                  (D.cod g')\\<guillemotright> \\<and>\n  \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' =\n  G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g)\n  D.arr g\n  D.seq g' g\n  C.ide (Fo (D.cod g')) \\<and>\n  \\<guillemotleft>\\<eta>o\n                   (D.cod\n                     g') : D.cod\n                            g' \\<rightarrow>\\<^sub>D G\n                (Fo (D.cod g'))\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n    (G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g)) \\<cdot>\\<^sub>D g", "by (metis D.comp_assoc)"], ["proof (state)\nthis:\n  \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n  (G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g)) \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n    G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "also"], ["proof (state)\nthis:\n  \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n  (G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g)) \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n    G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "have \"... =  G (F g') \\<cdot>\\<^sub>D \\<eta>o ?y' \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g)) \\<cdot>\\<^sub>D g =\n    G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g", "using D.comp_assoc"], ["proof (prove)\nusing this:\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. (G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g)) \\<cdot>\\<^sub>D g =\n    G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g", "by fastforce"], ["proof (state)\nthis:\n  (G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g)) \\<cdot>\\<^sub>D g =\n  G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n    G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "also"], ["proof (state)\nthis:\n  (G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g)) \\<cdot>\\<^sub>D g =\n  G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n    G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "have \"... = G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g =\n    G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "using Fg Fg' D.comp_assoc"], ["proof (prove)\nusing this:\n  \\<guillemotleft>F g : Fo (D.dom\n                             g) \\<rightarrow>\\<^sub>C Fo\n                 (D.cod g)\\<guillemotright> \\<and>\n  \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g =\n  G (F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n  \\<guillemotleft>F g' : Fo (D.cod\n                              g) \\<rightarrow>\\<^sub>C Fo\n                  (D.cod g')\\<guillemotright> \\<and>\n  \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' =\n  G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g)\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g =\n    G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "by fastforce"], ["proof (state)\nthis:\n  G (F g') \\<cdot>\\<^sub>D \\<eta>o (D.cod g) \\<cdot>\\<^sub>D g =\n  G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n    G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "finally"], ["proof (chain)\npicking this:\n  \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n  G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n  G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n    G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "by auto"], ["proof (state)\nthis:\n  \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n  G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n  G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n\ngoal (1 subgoal):\n 1. y\\<eta>.is_ext (Fo (D.cod g'))\n     (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n     (F g' \\<cdot>\\<^sub>C F g)", "ultimately"], ["proof (chain)\npicking this:\n  \\<guillemotleft>F g' \\<cdot>\\<^sub>C\n                  F g : Fo (D.dom\n                             g) \\<rightarrow>\\<^sub>C Fo\n                 (D.cod g')\\<guillemotright>\n  \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n  G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<guillemotleft>F g' \\<cdot>\\<^sub>C\n                  F g : Fo (D.dom\n                             g) \\<rightarrow>\\<^sub>C Fo\n                 (D.cod g')\\<guillemotright>\n  \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n  G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n\ngoal (1 subgoal):\n 1. y\\<eta>.is_ext (Fo (D.cod g'))\n     (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n     (F g' \\<cdot>\\<^sub>C F g)", "using y\\<eta>.is_ext_def"], ["proof (prove)\nusing this:\n  \\<guillemotleft>F g' \\<cdot>\\<^sub>C\n                  F g : Fo (D.dom\n                             g) \\<rightarrow>\\<^sub>C Fo\n                 (D.cod g')\\<guillemotright>\n  \\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g =\n  G (F g' \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n  y\\<eta>.is_ext ?y' ?g ?f \\<equiv>\n  \\<guillemotleft>?f : Fo (D.dom\n                            g) \\<rightarrow>\\<^sub>C ?y'\\<guillemotright> \\<and>\n  ?g = G ?f \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n\ngoal (1 subgoal):\n 1. y\\<eta>.is_ext (Fo (D.cod g'))\n     (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n     (F g' \\<cdot>\\<^sub>C F g)", "by auto"], ["proof (state)\nthis:\n  y\\<eta>.is_ext (Fo (D.cod g'))\n   (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n   (F g' \\<cdot>\\<^sub>C F g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y\\<eta>.is_ext (Fo (D.cod g'))\n   (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n   (F g' \\<cdot>\\<^sub>C F g)\n\ngoal (1 subgoal):\n 1. F (g' \\<cdot>\\<^sub>D g) = F g' \\<cdot>\\<^sub>C F g", "moreover"], ["proof (state)\nthis:\n  y\\<eta>.is_ext (Fo (D.cod g'))\n   (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n   (F g' \\<cdot>\\<^sub>C F g)\n\ngoal (1 subgoal):\n 1. F (g' \\<cdot>\\<^sub>D g) = F g' \\<cdot>\\<^sub>C F g", "have \"arrow_to_functor C D G ?y (Fo ?y'') (\\<eta>o ?y'' \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n     (Fo (D.cod g'))\n     (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)", "using g g' y''\\<eta>.arrow"], ["proof (prove)\nusing this:\n  D.arr g\n  D.seq g' g\n  C.ide (Fo (D.cod g')) \\<and>\n  \\<guillemotleft>\\<eta>o\n                   (D.cod\n                     g') : D.cod\n                            g' \\<rightarrow>\\<^sub>D G\n                (Fo (D.cod g'))\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n     (Fo (D.cod g'))\n     (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)", "by (unfold_locales, auto)"], ["proof (state)\nthis:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n   (Fo (D.cod g')) (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. F (g' \\<cdot>\\<^sub>D g) = F g' \\<cdot>\\<^sub>C F g", "ultimately"], ["proof (chain)\npicking this:\n  y\\<eta>.is_ext (Fo (D.cod g'))\n   (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n   (F g' \\<cdot>\\<^sub>C F g)\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n   (Fo (D.cod g')) (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)", "show ?thesis"], ["proof (prove)\nusing this:\n  y\\<eta>.is_ext (Fo (D.cod g'))\n   (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n   (F g' \\<cdot>\\<^sub>C F g)\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n   (Fo (D.cod g')) (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. F (g' \\<cdot>\\<^sub>D g) = F g' \\<cdot>\\<^sub>C F g", "using g g' F_def y\\<eta>.the_ext_unique D.dom_comp D.cod_comp"], ["proof (prove)\nusing this:\n  y\\<eta>.is_ext (Fo (D.cod g'))\n   (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n   (F g' \\<cdot>\\<^sub>C F g)\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n   (Fo (D.cod g')) (\\<eta>o (D.cod g') \\<cdot>\\<^sub>D g' \\<cdot>\\<^sub>D g)\n  D.arr g\n  D.seq g' g\n  F ?g =\n  (if D.arr ?g\n   then initial_arrow_to_functor.the_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n         G (Fo (D.dom ?g)) (\\<eta>o (D.dom ?g)) (Fo (D.cod ?g))\n         (\\<eta>o (D.cod ?g) \\<cdot>\\<^sub>D ?g)\n   else C.null)\n  \\<lbrakk>arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n            ?y' ?g;\n   y\\<eta>.is_ext ?y' ?g ?f\\<rbrakk>\n  \\<Longrightarrow> ?f = y\\<eta>.the_ext ?y' ?g\n  D.seq ?g ?f \\<Longrightarrow> D.dom (?g \\<cdot>\\<^sub>D ?f) = D.dom ?f\n  D.seq ?g ?f \\<Longrightarrow> D.cod (?g \\<cdot>\\<^sub>D ?f) = D.cod ?g\n\ngoal (1 subgoal):\n 1. F (g' \\<cdot>\\<^sub>D g) = F g' \\<cdot>\\<^sub>C F g", "by auto"], ["proof (state)\nthis:\n  F (g' \\<cdot>\\<^sub>D g) = F g' \\<cdot>\\<^sub>C F g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F (g' \\<cdot>\\<^sub>D g) = F g' \\<cdot>\\<^sub>C F g\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation F: \"functor\" D C F"], ["proof (prove)\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "using F_is_functor"], ["proof (prove)\nusing this:\n  functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n\ngoal (1 subgoal):\n 1. functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "by auto"], ["", "lemma F_simp:\n    assumes \"D.arr g\"\n    shows \"F g = initial_arrow_to_functor.the_ext C D G (Fo (D.dom g)) (\\<eta>o (D.dom g))\n                                                        (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F g =\n    initial_arrow_to_functor.the_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n     (Fo (D.dom g)) (\\<eta>o (D.dom g)) (Fo (D.cod g))\n     (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)", "using assms F_def"], ["proof (prove)\nusing this:\n  D.arr g\n  F ?g =\n  (if D.arr ?g\n   then initial_arrow_to_functor.the_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n         G (Fo (D.dom ?g)) (\\<eta>o (D.dom ?g)) (Fo (D.cod ?g))\n         (\\<eta>o (D.cod ?g) \\<cdot>\\<^sub>D ?g)\n   else C.null)\n\ngoal (1 subgoal):\n 1. F g =\n    initial_arrow_to_functor.the_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n     (Fo (D.dom g)) (\\<eta>o (D.dom g)) (Fo (D.cod g))\n     (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)", "by simp"], ["", "interpretation FG: composite_functor D C D F G"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D)\n     F G", ".."], ["", "interpretation \\<eta>: transformation_by_components D D D.map FG.map \\<eta>o"], ["proof (prove)\ngoal (1 subgoal):\n 1. transformation_by_components (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n     FG.map \\<eta>o", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       D.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<eta>o\n                        a : D.map\n                             a \\<rightarrow>\\<^sub>D FG.map\n                a\\<guillemotright>\n 2. \\<And>f.\n       D.arr f \\<Longrightarrow>\n       \\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f =\n       FG.map f \\<cdot>\\<^sub>D \\<eta>o (D.dom f)", "fix y :: 'd"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       D.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<eta>o\n                        a : D.map\n                             a \\<rightarrow>\\<^sub>D FG.map\n                a\\<guillemotright>\n 2. \\<And>f.\n       D.arr f \\<Longrightarrow>\n       \\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f =\n       FG.map f \\<cdot>\\<^sub>D \\<eta>o (D.dom f)", "assume y: \"D.ide y\""], ["proof (state)\nthis:\n  D.ide y\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       D.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<eta>o\n                        a : D.map\n                             a \\<rightarrow>\\<^sub>D FG.map\n                a\\<guillemotright>\n 2. \\<And>f.\n       D.arr f \\<Longrightarrow>\n       \\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f =\n       FG.map f \\<cdot>\\<^sub>D \\<eta>o (D.dom f)", "show \"\\<guillemotleft>\\<eta>o y : D.map y \\<rightarrow>\\<^sub>D FG.map y\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<eta>o\n                     y : D.map\n                          y \\<rightarrow>\\<^sub>D FG.map y\\<guillemotright>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<eta>o\n                     y : D.map\n                          y \\<rightarrow>\\<^sub>D FG.map y\\<guillemotright>", "interpret initial_arrow_to_functor C D G y \\<open>Fo y\\<close> \\<open>\\<eta>o y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (Fo y)\n     (\\<eta>o y)", "using y Fo_\\<eta>o_initial initial_arrows_exist"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<exists>x u.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y x\n      u \\<Longrightarrow>\n  initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y (Fo ?y)\n   (\\<eta>o ?y)\n  D.ide ?x \\<Longrightarrow>\n  \\<exists>y e.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?x y e\n\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (Fo y)\n     (\\<eta>o y)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<eta>o\n                     y : D.map\n                          y \\<rightarrow>\\<^sub>D FG.map y\\<guillemotright>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<eta>o\n                     y : D.map\n                          y \\<rightarrow>\\<^sub>D FG.map y\\<guillemotright>", "using y F_ide arrow"], ["proof (prove)\nusing this:\n  D.ide y\n  D.ide ?y \\<Longrightarrow> F ?y = Fo ?y\n  C.ide (Fo y) \\<and>\n  \\<guillemotleft>\\<eta>o\n                   y : y \\<rightarrow>\\<^sub>D G (Fo y)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<eta>o\n                     y : D.map\n                          y \\<rightarrow>\\<^sub>D FG.map y\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<eta>o\n                   y : D.map\n                        y \\<rightarrow>\\<^sub>D FG.map y\\<guillemotright>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<eta>o\n                   y : D.map\n                        y \\<rightarrow>\\<^sub>D FG.map y\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       D.arr f \\<Longrightarrow>\n       \\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f =\n       FG.map f \\<cdot>\\<^sub>D \\<eta>o (D.dom f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       D.arr f \\<Longrightarrow>\n       \\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f =\n       FG.map f \\<cdot>\\<^sub>D \\<eta>o (D.dom f)", "fix g :: 'd"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       D.arr f \\<Longrightarrow>\n       \\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f =\n       FG.map f \\<cdot>\\<^sub>D \\<eta>o (D.dom f)", "assume g: \"D.arr g\""], ["proof (state)\nthis:\n  D.arr g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       D.arr f \\<Longrightarrow>\n       \\<eta>o (D.cod f) \\<cdot>\\<^sub>D D.map f =\n       FG.map f \\<cdot>\\<^sub>D \\<eta>o (D.dom f)", "show \"\\<eta>o (D.cod g) \\<cdot>\\<^sub>D D.map g = FG.map g \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g) \\<cdot>\\<^sub>D D.map g =\n    FG.map g \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g) \\<cdot>\\<^sub>D D.map g =\n    FG.map g \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "let ?y = \"D.dom g\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g) \\<cdot>\\<^sub>D D.map g =\n    FG.map g \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "let ?y' = \"D.cod g\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g) \\<cdot>\\<^sub>D D.map g =\n    FG.map g \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "interpret y\\<eta>: initial_arrow_to_functor C D G ?y \\<open>Fo ?y\\<close> \\<open>\\<eta>o ?y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n     (Fo (D.dom g)) (\\<eta>o (D.dom g))", "using g Fo_\\<eta>o_initial initial_arrows_exist"], ["proof (prove)\nusing this:\n  D.arr g\n  \\<exists>x u.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y x\n      u \\<Longrightarrow>\n  initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y (Fo ?y)\n   (\\<eta>o ?y)\n  D.ide ?x \\<Longrightarrow>\n  \\<exists>y e.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?x y e\n\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n     (Fo (D.dom g)) (\\<eta>o (D.dom g))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g) \\<cdot>\\<^sub>D D.map g =\n    FG.map g \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "interpret y'\\<eta>: initial_arrow_to_functor C D G ?y' \\<open>Fo ?y'\\<close> \\<open>\\<eta>o ?y'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.cod g)\n     (Fo (D.cod g)) (\\<eta>o (D.cod g))", "using g Fo_\\<eta>o_initial initial_arrows_exist"], ["proof (prove)\nusing this:\n  D.arr g\n  \\<exists>x u.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y x\n      u \\<Longrightarrow>\n  initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y (Fo ?y)\n   (\\<eta>o ?y)\n  D.ide ?x \\<Longrightarrow>\n  \\<exists>y e.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?x y e\n\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.cod g)\n     (Fo (D.cod g)) (\\<eta>o (D.cod g))", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g) \\<cdot>\\<^sub>D D.map g =\n    FG.map g \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "have \"arrow_to_functor C D G ?y (Fo ?y') (\\<eta>o ?y' \\<cdot>\\<^sub>D g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n     (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)", "using g y'\\<eta>.arrow"], ["proof (prove)\nusing this:\n  D.arr g\n  C.ide (Fo (D.cod g)) \\<and>\n  \\<guillemotleft>\\<eta>o\n                   (D.cod\n                     g) : D.cod\n                           g \\<rightarrow>\\<^sub>D G\n              (Fo (D.cod g))\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n     (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)", "by (unfold_locales, auto)"], ["proof (state)\nthis:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n   (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g) \\<cdot>\\<^sub>D D.map g =\n    FG.map g \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "moreover"], ["proof (state)\nthis:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n   (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g) \\<cdot>\\<^sub>D D.map g =\n    FG.map g \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "have \"F g = y\\<eta>.the_ext (Fo ?y') (\\<eta>o ?y' \\<cdot>\\<^sub>D g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F g =\n    y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)", "using g F_simp"], ["proof (prove)\nusing this:\n  D.arr g\n  D.arr ?g \\<Longrightarrow>\n  F ?g =\n  initial_arrow_to_functor.the_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n   (Fo (D.dom ?g)) (\\<eta>o (D.dom ?g)) (Fo (D.cod ?g))\n   (\\<eta>o (D.cod ?g) \\<cdot>\\<^sub>D ?g)\n\ngoal (1 subgoal):\n 1. F g =\n    y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)", "by blast"], ["proof (state)\nthis:\n  F g = y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g) \\<cdot>\\<^sub>D D.map g =\n    FG.map g \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "ultimately"], ["proof (chain)\npicking this:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n   (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n  F g = y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)", "have \"y\\<eta>.is_ext (Fo ?y') (\\<eta>o ?y' \\<cdot>\\<^sub>D g) (F g)\""], ["proof (prove)\nusing this:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n   (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n  F g = y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n\ngoal (1 subgoal):\n 1. y\\<eta>.is_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n     (F g)", "using y\\<eta>.the_ext_prop y\\<eta>.is_ext_def"], ["proof (prove)\nusing this:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g)\n   (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n  F g = y\\<eta>.the_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g) ?y'\n   ?g \\<Longrightarrow>\n  \\<guillemotleft>y\\<eta>.the_ext ?y'\n                   ?g : Fo (D.dom\n                             g) \\<rightarrow>\\<^sub>C ?y'\\<guillemotright>\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (D.dom g) ?y'\n   ?g \\<Longrightarrow>\n  ?g = G (y\\<eta>.the_ext ?y' ?g) \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n  y\\<eta>.is_ext ?y' ?g ?f \\<equiv>\n  \\<guillemotleft>?f : Fo (D.dom\n                            g) \\<rightarrow>\\<^sub>C ?y'\\<guillemotright> \\<and>\n  ?g = G ?f \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n\ngoal (1 subgoal):\n 1. y\\<eta>.is_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g)\n     (F g)", "by auto"], ["proof (state)\nthis:\n  y\\<eta>.is_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g) (F g)\n\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g) \\<cdot>\\<^sub>D D.map g =\n    FG.map g \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "thus ?thesis"], ["proof (prove)\nusing this:\n  y\\<eta>.is_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g) (F g)\n\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g) \\<cdot>\\<^sub>D D.map g =\n    FG.map g \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "using g y\\<eta>.is_ext_def"], ["proof (prove)\nusing this:\n  y\\<eta>.is_ext (Fo (D.cod g)) (\\<eta>o (D.cod g) \\<cdot>\\<^sub>D g) (F g)\n  D.arr g\n  y\\<eta>.is_ext ?y' ?g ?f \\<equiv>\n  \\<guillemotleft>?f : Fo (D.dom\n                            g) \\<rightarrow>\\<^sub>C ?y'\\<guillemotright> \\<and>\n  ?g = G ?f \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n\ngoal (1 subgoal):\n 1. \\<eta>o (D.cod g) \\<cdot>\\<^sub>D D.map g =\n    FG.map g \\<cdot>\\<^sub>D \\<eta>o (D.dom g)", "by simp"], ["proof (state)\nthis:\n  \\<eta>o (D.cod g) \\<cdot>\\<^sub>D D.map g =\n  FG.map g \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<eta>o (D.cod g) \\<cdot>\\<^sub>D D.map g =\n  FG.map g \\<cdot>\\<^sub>D \\<eta>o (D.dom g)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \\<phi>\n    where \"\\<phi> y h = D (G h) (\\<eta>.map y)\""], ["", "lemma \\<phi>_in_hom:\n    assumes y: \"D.ide y\" and f: \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<guillemotleft>\\<phi> y f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "unfolding \\<phi>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>G f \\<cdot>\\<^sub>D\n                    \\<eta>.map\n                     y : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "using assms \\<eta>.maps_ide_in_hom"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  D.ide ?a \\<Longrightarrow>\n  \\<guillemotleft>\\<eta>o\n                   ?a : D.map\n                         ?a \\<rightarrow>\\<^sub>D FG.map ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>G f \\<cdot>\\<^sub>D\n                    \\<eta>.map\n                     y : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "by auto"], ["", "lemma \\<phi>_natural:\n    assumes f: \"\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\" and g: \"\\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\" and h: \"\\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) = (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "have \"(G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g = (G f \\<cdot>\\<^sub>D G h \\<cdot>\\<^sub>D \\<eta>.map y) \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g =\n    (G f \\<cdot>\\<^sub>D G h \\<cdot>\\<^sub>D \\<eta>.map y) \\<cdot>\\<^sub>D g", "unfolding \\<phi>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (G f \\<cdot>\\<^sub>D G h \\<cdot>\\<^sub>D \\<eta>.map y) \\<cdot>\\<^sub>D\n    g =\n    (G f \\<cdot>\\<^sub>D G h \\<cdot>\\<^sub>D \\<eta>.map y) \\<cdot>\\<^sub>D g", "by auto"], ["proof (state)\nthis:\n  (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g =\n  (G f \\<cdot>\\<^sub>D G h \\<cdot>\\<^sub>D \\<eta>.map y) \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "also"], ["proof (state)\nthis:\n  (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g =\n  (G f \\<cdot>\\<^sub>D G h \\<cdot>\\<^sub>D \\<eta>.map y) \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "have \"... = (G f \\<cdot>\\<^sub>D G h) \\<cdot>\\<^sub>D \\<eta>.map y \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G f \\<cdot>\\<^sub>D G h \\<cdot>\\<^sub>D \\<eta>.map y) \\<cdot>\\<^sub>D\n    g =\n    (G f \\<cdot>\\<^sub>D G h) \\<cdot>\\<^sub>D \\<eta>.map y \\<cdot>\\<^sub>D g", "using D.comp_assoc"], ["proof (prove)\nusing this:\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. (G f \\<cdot>\\<^sub>D G h \\<cdot>\\<^sub>D \\<eta>.map y) \\<cdot>\\<^sub>D\n    g =\n    (G f \\<cdot>\\<^sub>D G h) \\<cdot>\\<^sub>D \\<eta>.map y \\<cdot>\\<^sub>D g", "by fastforce"], ["proof (state)\nthis:\n  (G f \\<cdot>\\<^sub>D G h \\<cdot>\\<^sub>D \\<eta>.map y) \\<cdot>\\<^sub>D g =\n  (G f \\<cdot>\\<^sub>D G h) \\<cdot>\\<^sub>D \\<eta>.map y \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "also"], ["proof (state)\nthis:\n  (G f \\<cdot>\\<^sub>D G h \\<cdot>\\<^sub>D \\<eta>.map y) \\<cdot>\\<^sub>D g =\n  (G f \\<cdot>\\<^sub>D G h) \\<cdot>\\<^sub>D \\<eta>.map y \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "have \"... = G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D G (F g) \\<cdot>\\<^sub>D \\<eta>.map y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G f \\<cdot>\\<^sub>D G h) \\<cdot>\\<^sub>D\n    \\<eta>.map y \\<cdot>\\<^sub>D g =\n    G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D\n    G (F g) \\<cdot>\\<^sub>D \\<eta>.map y'", "using f g h \\<eta>.naturality"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  D.arr ?f \\<Longrightarrow>\n  \\<eta>.map (D.cod ?f) \\<cdot>\\<^sub>D D.map ?f =\n  FG.map ?f \\<cdot>\\<^sub>D \\<eta>.map (D.dom ?f)\n\ngoal (1 subgoal):\n 1. (G f \\<cdot>\\<^sub>D G h) \\<cdot>\\<^sub>D\n    \\<eta>.map y \\<cdot>\\<^sub>D g =\n    G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D\n    G (F g) \\<cdot>\\<^sub>D \\<eta>.map y'", "by fastforce"], ["proof (state)\nthis:\n  (G f \\<cdot>\\<^sub>D G h) \\<cdot>\\<^sub>D \\<eta>.map y \\<cdot>\\<^sub>D g =\n  G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D\n  G (F g) \\<cdot>\\<^sub>D \\<eta>.map y'\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "also"], ["proof (state)\nthis:\n  (G f \\<cdot>\\<^sub>D G h) \\<cdot>\\<^sub>D \\<eta>.map y \\<cdot>\\<^sub>D g =\n  G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D\n  G (F g) \\<cdot>\\<^sub>D \\<eta>.map y'\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "have \"... = (G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D G (F g)) \\<cdot>\\<^sub>D \\<eta>.map y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D\n    G (F g) \\<cdot>\\<^sub>D \\<eta>.map y' =\n    (G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D G (F g)) \\<cdot>\\<^sub>D\n    \\<eta>.map y'", "using D.comp_assoc"], ["proof (prove)\nusing this:\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D\n    G (F g) \\<cdot>\\<^sub>D \\<eta>.map y' =\n    (G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D G (F g)) \\<cdot>\\<^sub>D\n    \\<eta>.map y'", "by fastforce"], ["proof (state)\nthis:\n  G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D\n  G (F g) \\<cdot>\\<^sub>D \\<eta>.map y' =\n  (G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D G (F g)) \\<cdot>\\<^sub>D\n  \\<eta>.map y'\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "also"], ["proof (state)\nthis:\n  G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D\n  G (F g) \\<cdot>\\<^sub>D \\<eta>.map y' =\n  (G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D G (F g)) \\<cdot>\\<^sub>D\n  \\<eta>.map y'\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "have \"... = G (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>.map y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D G (F g)) \\<cdot>\\<^sub>D\n    \\<eta>.map y' =\n    G (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D\n    \\<eta>.map y'", "using f g h D.comp_assoc"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. (G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D G (F g)) \\<cdot>\\<^sub>D\n    \\<eta>.map y' =\n    G (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D\n    \\<eta>.map y'", "by fastforce"], ["proof (state)\nthis:\n  (G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D G (F g)) \\<cdot>\\<^sub>D\n  \\<eta>.map y' =\n  G (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>.map y'\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "also"], ["proof (state)\nthis:\n  (G (f \\<cdot>\\<^sub>C h) \\<cdot>\\<^sub>D G (F g)) \\<cdot>\\<^sub>D\n  \\<eta>.map y' =\n  G (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D \\<eta>.map y'\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "have \"... = \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D\n    \\<eta>.map y' =\n    \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)", "unfolding \\<phi>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. G (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D\n    \\<eta>.map y' =\n    G (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D\n    \\<eta>.map y'", "by auto"], ["proof (state)\nthis:\n  G (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<cdot>\\<^sub>D\n  \\<eta>.map y' =\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "finally"], ["proof (chain)\npicking this:\n  (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g =\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)", "show ?thesis"], ["proof (prove)\nusing this:\n  (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g =\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g", "by auto"], ["proof (state)\nthis:\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n  (G f \\<cdot>\\<^sub>D \\<phi> y h) \\<cdot>\\<^sub>D g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<phi>_inverts_ext:\n    assumes y: \"D.ide y\" and f: \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"arrow_to_functor.is_ext C D G (F y) (\\<eta>.map y) x (\\<phi> y f) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_to_functor.is_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (F y)\n     (\\<eta>.map y) x (\\<phi> y f) f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. arrow_to_functor.is_ext (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G (F y)\n     (\\<eta>.map y) x (\\<phi> y f) f", "interpret y\\<eta>: arrow_to_functor C D G y \\<open>F y\\<close> \\<open>\\<eta>.map y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (F y)\n     (\\<eta>.map y)", "using y \\<eta>.maps_ide_in_hom"], ["proof (prove)\nusing this:\n  D.ide y\n  D.ide ?a \\<Longrightarrow>\n  \\<guillemotleft>\\<eta>o\n                   ?a : D.map\n                         ?a \\<rightarrow>\\<^sub>D FG.map ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (F y)\n     (\\<eta>.map y)", "by (unfold_locales, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. y\\<eta>.is_ext x (\\<phi> y f) f", "show \"y\\<eta>.is_ext x (\\<phi> y f) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y\\<eta>.is_ext x (\\<phi> y f) f", "using f y \\<phi>_def y\\<eta>.is_ext_def F_ide"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  D.ide y\n  \\<phi> ?y ?h = G ?h \\<cdot>\\<^sub>D \\<eta>.map ?y\n  y\\<eta>.is_ext ?y' ?g ?f \\<equiv>\n  \\<guillemotleft>?f : F y \\<rightarrow>\\<^sub>C ?y'\\<guillemotright> \\<and>\n  ?g = G ?f \\<cdot>\\<^sub>D \\<eta>.map y\n  D.ide ?y \\<Longrightarrow> F ?y = Fo ?y\n\ngoal (1 subgoal):\n 1. y\\<eta>.is_ext x (\\<phi> y f) f", "by (unfold_locales, auto)"], ["proof (state)\nthis:\n  y\\<eta>.is_ext x (\\<phi> y f) f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<phi>_invertible:\n    assumes x: \"C.ide x\" and g: \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<exists>!f. \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and> \\<phi> y f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!f.\n       \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y f = g", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<guillemotleft>?a : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n    \\<phi> y ?a = g\n 2. \\<And>f.\n       \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y f = g \\<Longrightarrow>\n       f = ?a", "have y: \"D.ide y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.ide y", "using g"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. D.ide y", "by auto"], ["proof (state)\nthis:\n  D.ide y\n\ngoal (2 subgoals):\n 1. \\<guillemotleft>?a : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n    \\<phi> y ?a = g\n 2. \\<And>f.\n       \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y f = g \\<Longrightarrow>\n       f = ?a", "interpret y\\<eta>: initial_arrow_to_functor C D G y \\<open>Fo y\\<close> \\<open>\\<eta>o y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (Fo y)\n     (\\<eta>o y)", "using y initial_arrows_exist Fo_\\<eta>o_initial"], ["proof (prove)\nusing this:\n  D.ide y\n  D.ide ?x \\<Longrightarrow>\n  \\<exists>y e.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?x y e\n  \\<exists>x u.\n     initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y x\n      u \\<Longrightarrow>\n  initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G ?y (Fo ?y)\n   (\\<eta>o ?y)\n\ngoal (1 subgoal):\n 1. initial_arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y (Fo y)\n     (\\<eta>o y)", "by auto"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<guillemotleft>?a : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n    \\<phi> y ?a = g\n 2. \\<And>f.\n       \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y f = g \\<Longrightarrow>\n       f = ?a", "have 1: \"arrow_to_functor C D G y x g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x g", "using x g"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x g", "by (unfold_locales, auto)"], ["proof (state)\nthis:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x g\n\ngoal (2 subgoals):\n 1. \\<guillemotleft>?a : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n    \\<phi> y ?a = g\n 2. \\<And>f.\n       \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y f = g \\<Longrightarrow>\n       f = ?a", "let ?f = \"y\\<eta>.the_ext x g\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<guillemotleft>?a : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n    \\<phi> y ?a = g\n 2. \\<And>f.\n       \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y f = g \\<Longrightarrow>\n       f = ?a", "have \"\\<phi> y ?f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y (y\\<eta>.the_ext x g) = g", "using \\<phi>_def y\\<eta>.the_ext_prop 1 F_ide x y \\<phi>_inverts_ext y\\<eta>.is_ext_def"], ["proof (prove)\nusing this:\n  \\<phi> ?y ?h = G ?h \\<cdot>\\<^sub>D \\<eta>.map ?y\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y ?y'\n   ?g \\<Longrightarrow>\n  \\<guillemotleft>y\\<eta>.the_ext ?y'\n                   ?g : Fo y \\<rightarrow>\\<^sub>C ?y'\\<guillemotright>\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y ?y'\n   ?g \\<Longrightarrow>\n  ?g = G (y\\<eta>.the_ext ?y' ?g) \\<cdot>\\<^sub>D \\<eta>o y\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x g\n  D.ide ?y \\<Longrightarrow> F ?y = Fo ?y\n  C.ide x\n  D.ide y\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> arrow_to_functor.is_ext (\\<cdot>\\<^sub>C)\n                     (\\<cdot>\\<^sub>D) G (F ?y) (\\<eta>.map ?y) ?x\n                     (\\<phi> ?y ?f) ?f\n  y\\<eta>.is_ext ?y' ?g ?f \\<equiv>\n  \\<guillemotleft>?f : Fo y \\<rightarrow>\\<^sub>C ?y'\\<guillemotright> \\<and>\n  ?g = G ?f \\<cdot>\\<^sub>D \\<eta>o y\n\ngoal (1 subgoal):\n 1. \\<phi> y (y\\<eta>.the_ext x g) = g", "by fastforce"], ["proof (state)\nthis:\n  \\<phi> y (y\\<eta>.the_ext x g) = g\n\ngoal (2 subgoals):\n 1. \\<guillemotleft>?a : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n    \\<phi> y ?a = g\n 2. \\<And>f.\n       \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y f = g \\<Longrightarrow>\n       f = ?a", "moreover"], ["proof (state)\nthis:\n  \\<phi> y (y\\<eta>.the_ext x g) = g\n\ngoal (2 subgoals):\n 1. \\<guillemotleft>?a : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n    \\<phi> y ?a = g\n 2. \\<And>f.\n       \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y f = g \\<Longrightarrow>\n       f = ?a", "have \"\\<guillemotleft>?f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>y\\<eta>.the_ext x\n                     g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "using 1 y y\\<eta>.the_ext_prop F_ide"], ["proof (prove)\nusing this:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x g\n  D.ide y\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y ?y'\n   ?g \\<Longrightarrow>\n  \\<guillemotleft>y\\<eta>.the_ext ?y'\n                   ?g : Fo y \\<rightarrow>\\<^sub>C ?y'\\<guillemotright>\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y ?y'\n   ?g \\<Longrightarrow>\n  ?g = G (y\\<eta>.the_ext ?y' ?g) \\<cdot>\\<^sub>D \\<eta>o y\n  D.ide ?y \\<Longrightarrow> F ?y = Fo ?y\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>y\\<eta>.the_ext x\n                     g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "by simp"], ["proof (state)\nthis:\n  \\<guillemotleft>y\\<eta>.the_ext x\n                   g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (2 subgoals):\n 1. \\<guillemotleft>?a : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n    \\<phi> y ?a = g\n 2. \\<And>f.\n       \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y f = g \\<Longrightarrow>\n       f = ?a", "ultimately"], ["proof (chain)\npicking this:\n  \\<phi> y (y\\<eta>.the_ext x g) = g\n  \\<guillemotleft>y\\<eta>.the_ext x\n                   g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "show \"\\<guillemotleft>?f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and> \\<phi> y ?f = g\""], ["proof (prove)\nusing this:\n  \\<phi> y (y\\<eta>.the_ext x g) = g\n  \\<guillemotleft>y\\<eta>.the_ext x\n                   g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>y\\<eta>.the_ext x\n                     g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n    \\<phi> y (y\\<eta>.the_ext x g) = g", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>y\\<eta>.the_ext x\n                   g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n  \\<phi> y (y\\<eta>.the_ext x g) = g\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y f = g \\<Longrightarrow>\n       f = y\\<eta>.the_ext x g", "show \"\\<And>f'. \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and> \\<phi> y f' = g \\<Longrightarrow> f' = ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f'.\n       \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y f' = g \\<Longrightarrow>\n       f' = y\\<eta>.the_ext x g", "using 1 y \\<phi>_inverts_ext y\\<eta>.the_ext_unique F_ide"], ["proof (prove)\nusing this:\n  arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y x g\n  D.ide y\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> arrow_to_functor.is_ext (\\<cdot>\\<^sub>C)\n                     (\\<cdot>\\<^sub>D) G (F ?y) (\\<eta>.map ?y) ?x\n                     (\\<phi> ?y ?f) ?f\n  \\<lbrakk>arrow_to_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G y ?y' ?g;\n   y\\<eta>.is_ext ?y' ?g ?f\\<rbrakk>\n  \\<Longrightarrow> ?f = y\\<eta>.the_ext ?y' ?g\n  D.ide ?y \\<Longrightarrow> F ?y = Fo ?y\n\ngoal (1 subgoal):\n 1. \\<And>f'.\n       \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y f' = g \\<Longrightarrow>\n       f' = y\\<eta>.the_ext x g", "by force"], ["proof (state)\nthis:\n  \\<guillemotleft>?f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n  \\<phi> y ?f' = g \\<Longrightarrow>\n  ?f' = y\\<eta>.the_ext x g\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \\<psi>\n    where \"\\<psi> x g = (THE f. \\<guillemotleft>f : F (D.dom g) \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and> \\<phi> (D.dom g) f = g)\""], ["", "lemma \\<psi>_in_hom:\n    assumes \"C.ide x\" and \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"C.in_hom (\\<psi> x g) (F y) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "using assms \\<phi>_invertible \\<psi>_def theI' [of \"\\<lambda>f. \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and> \\<phi> y f = g\"]"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>!f.\n                       \\<guillemotleft>f : F\n      ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright> \\<and>\n                       \\<phi> ?y f = ?g\n  \\<psi> ?x ?g =\n  (THE f.\n      \\<guillemotleft>f : F (D.dom\n                              ?g) \\<rightarrow>\\<^sub>C ?x\\<guillemotright> \\<and>\n      \\<phi> (D.dom ?g) f = ?g)\n  \\<exists>!xa.\n     \\<guillemotleft>xa : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n     \\<phi> y xa = g \\<Longrightarrow>\n  \\<guillemotleft>THE xa.\n                     \\<guillemotleft>xa : F\n     y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n                     \\<phi> y xa =\n                     g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n  \\<phi> y\n   (THE xa.\n       \\<guillemotleft>xa : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y xa = g) =\n  g\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "by auto"], ["", "lemma \\<psi>_\\<phi>:\n    assumes \"D.ide y\" and \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<psi> x (\\<phi> y f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "have \"D.dom (\\<phi> y f) = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.dom (\\<phi> y f) = y", "using assms \\<phi>_in_hom"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. D.dom (\\<phi> y f) = y", "by blast"], ["proof (state)\nthis:\n  D.dom (\\<phi> y f) = y\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "hence \"\\<psi> x (\\<phi> y f) = (THE f'. \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and> \\<phi> y f' = \\<phi> y f)\""], ["proof (prove)\nusing this:\n  D.dom (\\<phi> y f) = y\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) =\n    (THE f'.\n        \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n        \\<phi> y f' = \\<phi> y f)", "using \\<psi>_def"], ["proof (prove)\nusing this:\n  D.dom (\\<phi> y f) = y\n  \\<psi> ?x ?g =\n  (THE f.\n      \\<guillemotleft>f : F (D.dom\n                              ?g) \\<rightarrow>\\<^sub>C ?x\\<guillemotright> \\<and>\n      \\<phi> (D.dom ?g) f = ?g)\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) =\n    (THE f'.\n        \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n        \\<phi> y f' = \\<phi> y f)", "by auto"], ["proof (state)\nthis:\n  \\<psi> x (\\<phi> y f) =\n  (THE f'.\n      \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n      \\<phi> y f' = \\<phi> y f)\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "moreover"], ["proof (state)\nthis:\n  \\<psi> x (\\<phi> y f) =\n  (THE f'.\n      \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n      \\<phi> y f' = \\<phi> y f)\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "have \"\\<exists>!f'. \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and> \\<phi> y f' = \\<phi> y f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!f'.\n       \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y f' = \\<phi> y f", "using assms \\<phi>_in_hom \\<phi>_invertible C.ide_cod"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>!f.\n                       \\<guillemotleft>f : F\n      ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright> \\<and>\n                       \\<phi> ?y f = ?g\n  C.arr ?f \\<Longrightarrow> C.ide (C.cod ?f)\n\ngoal (1 subgoal):\n 1. \\<exists>!f'.\n       \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y f' = \\<phi> y f", "by blast"], ["proof (state)\nthis:\n  \\<exists>!f'.\n     \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n     \\<phi> y f' = \\<phi> y f\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "ultimately"], ["proof (chain)\npicking this:\n  \\<psi> x (\\<phi> y f) =\n  (THE f'.\n      \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n      \\<phi> y f' = \\<phi> y f)\n  \\<exists>!f'.\n     \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n     \\<phi> y f' = \\<phi> y f", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<psi> x (\\<phi> y f) =\n  (THE f'.\n      \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n      \\<phi> y f' = \\<phi> y f)\n  \\<exists>!f'.\n     \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n     \\<phi> y f' = \\<phi> y f\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "using assms(2)"], ["proof (prove)\nusing this:\n  \\<psi> x (\\<phi> y f) =\n  (THE f'.\n      \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n      \\<phi> y f' = \\<phi> y f)\n  \\<exists>!f'.\n     \\<guillemotleft>f' : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n     \\<phi> y f' = \\<phi> y f\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y f) = f", "by auto"], ["proof (state)\nthis:\n  \\<psi> x (\\<phi> y f) = f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<phi>_\\<psi>:\n    assumes \"C.ide x\" and \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<phi> y (\\<psi> x g) = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "using assms \\<phi>_invertible \\<psi>_def theI' [of \"\\<lambda>f. \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and> \\<phi> y f = g\"]"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>!f.\n                       \\<guillemotleft>f : F\n      ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright> \\<and>\n                       \\<phi> ?y f = ?g\n  \\<psi> ?x ?g =\n  (THE f.\n      \\<guillemotleft>f : F (D.dom\n                              ?g) \\<rightarrow>\\<^sub>C ?x\\<guillemotright> \\<and>\n      \\<phi> (D.dom ?g) f = ?g)\n  \\<exists>!xa.\n     \\<guillemotleft>xa : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n     \\<phi> y xa = g \\<Longrightarrow>\n  \\<guillemotleft>THE xa.\n                     \\<guillemotleft>xa : F\n     y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n                     \\<phi> y xa =\n                     g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n  \\<phi> y\n   (THE xa.\n       \\<guillemotleft>xa : F y \\<rightarrow>\\<^sub>C x\\<guillemotright> \\<and>\n       \\<phi> y xa = g) =\n  g\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x g) = g", "by auto"], ["", "theorem induces_meta_adjunction:\n    shows \"meta_adjunction C D F G \\<phi> \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", "using \\<phi>_in_hom \\<psi>_in_hom \\<phi>_\\<psi> \\<psi>_\\<phi> \\<phi>_natural D.comp_assoc"], ["proof (prove)\nusing this:\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> ?x\n                                     ?g : F\n     ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y (\\<psi> ?x ?g) = ?g\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x (\\<phi> ?y ?f) = ?f\n  \\<lbrakk>\\<guillemotleft>?f : ?x \\<rightarrow>\\<^sub>C ?x'\\<guillemotright>;\n   \\<guillemotleft>?g : ?y' \\<rightarrow>\\<^sub>D ?y\\<guillemotright>;\n   \\<guillemotleft>?h : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y'\n                     (?f \\<cdot>\\<^sub>C ?h \\<cdot>\\<^sub>C F ?g) =\n                    (G ?f \\<cdot>\\<^sub>D \\<phi> ?y ?h) \\<cdot>\\<^sub>D ?g\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", "by (unfold_locales, auto)"], ["", "end"], ["", "section \"Meta-Adjunctions Induce Hom-Adjunctions\""], ["", "text\\<open>\n    To obtain a hom-adjunction from a meta-adjunction, we need to exhibit hom-functors\n    from @{term C} and @{term D} to a common set category @{term S}, so it is necessary\n    to apply an actual concrete construction of such a category.\n    We use the replete set category generated by the disjoint sum\n    @{typ \"('c+'d)\"} of the arrow types of @{term C} and @{term D}.\n\\<close>"], ["", "context meta_adjunction\n  begin"], ["", "interpretation S: replete_setcat \\<open>undefined :: 'c+'d\\<close>"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "definition inC :: \"'c \\<Rightarrow> ('c+'d) setcat.arr\"\n    where \"inC \\<equiv> S.UP o Inl\""], ["", "definition inD :: \"'d \\<Rightarrow> ('c+'d) setcat.arr\"\n    where \"inD \\<equiv> S.UP o Inr\""], ["", "interpretation Cop: dual_category C"], ["proof (prove)\ngoal (1 subgoal):\n 1. dual_category (\\<cdot>\\<^sub>C)", ".."], ["", "interpretation Dop: dual_category D"], ["proof (prove)\ngoal (1 subgoal):\n 1. dual_category (\\<cdot>\\<^sub>D)", ".."], ["", "interpretation CopxC: product_category Cop.comp C"], ["proof (prove)\ngoal (1 subgoal):\n 1. product_category (\\<cdot>\\<^sup>o\\<^sup>p) (\\<cdot>\\<^sub>C)", ".."], ["", "interpretation DopxD: product_category Dop.comp D"], ["proof (prove)\ngoal (1 subgoal):\n 1. product_category Dop.comp (\\<cdot>\\<^sub>D)", ".."], ["", "interpretation DopxC: product_category Dop.comp C"], ["proof (prove)\ngoal (1 subgoal):\n 1. product_category Dop.comp (\\<cdot>\\<^sub>C)", ".."], ["", "interpretation HomC: hom_functor C S.comp \\<open>\\<lambda>_. inC\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_functor (\\<cdot>\\<^sub>C) S.comp (\\<lambda>_. inC)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f. C.arr f \\<Longrightarrow> inC f \\<in> S.Univ\n 2. \\<And>b a.\n       \\<lbrakk>C.ide b; C.ide a\\<rbrakk>\n       \\<Longrightarrow> inj_on inC (C.hom b a)", "show \"\\<And>f. C.arr f \\<Longrightarrow> inC f \\<in> S.Univ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. C.arr f \\<Longrightarrow> inC f \\<in> S.Univ", "unfolding inC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. C.arr f \\<Longrightarrow> (S.UP \\<circ> Inl) f \\<in> S.Univ", "using S.UP_mapsto"], ["proof (prove)\nusing this:\n  S.UP \\<in> UNIV \\<rightarrow> S.Univ\n\ngoal (1 subgoal):\n 1. \\<And>f. C.arr f \\<Longrightarrow> (S.UP \\<circ> Inl) f \\<in> S.Univ", "by auto"], ["proof (state)\nthis:\n  C.arr ?f \\<Longrightarrow> inC ?f \\<in> S.Univ\n\ngoal (1 subgoal):\n 1. \\<And>b a.\n       \\<lbrakk>C.ide b; C.ide a\\<rbrakk>\n       \\<Longrightarrow> inj_on inC (C.hom b a)", "show \"\\<And>b a. \\<lbrakk>C.ide b; C.ide a\\<rbrakk> \\<Longrightarrow> inj_on inC (C.hom b a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a.\n       \\<lbrakk>C.ide b; C.ide a\\<rbrakk>\n       \\<Longrightarrow> inj_on inC (C.hom b a)", "unfolding inC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a.\n       \\<lbrakk>C.ide b; C.ide a\\<rbrakk>\n       \\<Longrightarrow> inj_on (S.UP \\<circ> Inl) (C.hom b a)", "using S.inj_UP"], ["proof (prove)\nusing this:\n  inj S.UP\n\ngoal (1 subgoal):\n 1. \\<And>b a.\n       \\<lbrakk>C.ide b; C.ide a\\<rbrakk>\n       \\<Longrightarrow> inj_on (S.UP \\<circ> Inl) (C.hom b a)", "by (metis injD inj_Inl inj_compose inj_on_def)"], ["proof (state)\nthis:\n  \\<lbrakk>C.ide ?b; C.ide ?a\\<rbrakk>\n  \\<Longrightarrow> inj_on inC (C.hom ?b ?a)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation HomD: hom_functor D S.comp \\<open>\\<lambda>_. inD\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_functor (\\<cdot>\\<^sub>D) S.comp (\\<lambda>_. inD)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f. D.arr f \\<Longrightarrow> inD f \\<in> S.Univ\n 2. \\<And>b a.\n       \\<lbrakk>D.ide b; D.ide a\\<rbrakk>\n       \\<Longrightarrow> inj_on inD (D.hom b a)", "show \"\\<And>f. D.arr f \\<Longrightarrow> inD f \\<in> S.Univ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. D.arr f \\<Longrightarrow> inD f \\<in> S.Univ", "unfolding inD_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. D.arr f \\<Longrightarrow> (S.UP \\<circ> Inr) f \\<in> S.Univ", "using S.UP_mapsto"], ["proof (prove)\nusing this:\n  S.UP \\<in> UNIV \\<rightarrow> S.Univ\n\ngoal (1 subgoal):\n 1. \\<And>f. D.arr f \\<Longrightarrow> (S.UP \\<circ> Inr) f \\<in> S.Univ", "by auto"], ["proof (state)\nthis:\n  D.arr ?f \\<Longrightarrow> inD ?f \\<in> S.Univ\n\ngoal (1 subgoal):\n 1. \\<And>b a.\n       \\<lbrakk>D.ide b; D.ide a\\<rbrakk>\n       \\<Longrightarrow> inj_on inD (D.hom b a)", "show \"\\<And>b a. \\<lbrakk>D.ide b; D.ide a\\<rbrakk> \\<Longrightarrow> inj_on inD (D.hom b a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a.\n       \\<lbrakk>D.ide b; D.ide a\\<rbrakk>\n       \\<Longrightarrow> inj_on inD (D.hom b a)", "unfolding inD_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a.\n       \\<lbrakk>D.ide b; D.ide a\\<rbrakk>\n       \\<Longrightarrow> inj_on (S.UP \\<circ> Inr) (D.hom b a)", "using S.inj_UP"], ["proof (prove)\nusing this:\n  inj S.UP\n\ngoal (1 subgoal):\n 1. \\<And>b a.\n       \\<lbrakk>D.ide b; D.ide a\\<rbrakk>\n       \\<Longrightarrow> inj_on (S.UP \\<circ> Inr) (D.hom b a)", "by (metis injD inj_Inr inj_compose inj_on_def)"], ["proof (state)\nthis:\n  \\<lbrakk>D.ide ?b; D.ide ?a\\<rbrakk>\n  \\<Longrightarrow> inj_on inD (D.hom ?b ?a)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation Fop: dual_functor D C F"], ["proof (prove)\ngoal (1 subgoal):\n 1. dual_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", ".."], ["", "interpretation FopxC: product_functor Dop.comp C Cop.comp C Fop.map C.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. product_functor Dop.comp (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sup>o\\<^sup>p)\n     (\\<cdot>\\<^sub>C) Fop.map C.map", ".."], ["", "interpretation DopxG: product_functor Dop.comp C Dop.comp D Dop.map G"], ["proof (prove)\ngoal (1 subgoal):\n 1. product_functor Dop.comp (\\<cdot>\\<^sub>C) Dop.comp (\\<cdot>\\<^sub>D)\n     Dop.map G", ".."], ["", "interpretation Hom_FopxC: composite_functor DopxC.comp CopxC.comp S.comp\n                                                FopxC.map HomC.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor DopxC.comp (\\<odot>) S.comp FopxC.map HomC.map", ".."], ["", "interpretation Hom_DopxG: composite_functor DopxC.comp DopxD.comp S.comp\n                                                DopxG.map HomD.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor DopxC.comp DopxD.comp S.comp DopxG.map HomD.map", ".."], ["", "lemma inC_\\<psi> [simp]:\n    assumes \"C.ide b\" and \"C.ide a\" and \"x \\<in> inC ` C.hom b a\"\n    shows \"inC (HomC.\\<psi> (b, a) x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inC (HomC.\\<psi> (b, a) x) = x", "using assms"], ["proof (prove)\nusing this:\n  C.ide b\n  C.ide a\n  x \\<in> inC ` C.hom b a\n\ngoal (1 subgoal):\n 1. inC (HomC.\\<psi> (b, a) x) = x", "by auto"], ["", "lemma \\<psi>_inC [simp]:\n    assumes \"C.arr f\"\n    shows \"HomC.\\<psi> (C.dom f, C.cod f) (inC f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HomC.\\<psi> (C.dom f, C.cod f) (inC f) = f", "using assms HomC.\\<psi>_\\<phi>"], ["proof (prove)\nusing this:\n  C.arr f\n  \\<guillemotleft>?f : ?b \\<rightarrow>\\<^sub>C ?a\\<guillemotright> \\<Longrightarrow>\n  HomC.\\<psi> (?b, ?a) (inC ?f) = ?f\n\ngoal (1 subgoal):\n 1. HomC.\\<psi> (C.dom f, C.cod f) (inC f) = f", "by blast"], ["", "lemma inD_\\<psi> [simp]:\n    assumes \"D.ide b\" and \"D.ide a\" and \"x \\<in> inD ` D.hom b a\"\n    shows \"inD (HomD.\\<psi> (b, a) x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inD (HomD.\\<psi> (b, a) x) = x", "using assms"], ["proof (prove)\nusing this:\n  D.ide b\n  D.ide a\n  x \\<in> inD ` D.hom b a\n\ngoal (1 subgoal):\n 1. inD (HomD.\\<psi> (b, a) x) = x", "by auto"], ["", "lemma \\<psi>_inD [simp]:\n    assumes \"D.arr f\"\n    shows \"HomD.\\<psi> (D.dom f, D.cod f) (inD f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HomD.\\<psi> (D.dom f, D.cod f) (inD f) = f", "using assms HomD.\\<psi>_\\<phi>"], ["proof (prove)\nusing this:\n  D.arr f\n  \\<guillemotleft>?f : ?b \\<rightarrow>\\<^sub>D ?a\\<guillemotright> \\<Longrightarrow>\n  HomD.\\<psi> (?b, ?a) (inD ?f) = ?f\n\ngoal (1 subgoal):\n 1. HomD.\\<psi> (D.dom f, D.cod f) (inD f) = f", "by blast"], ["", "lemma Hom_FopxC_simp:\n    assumes \"DopxC.arr gf\"\n    shows \"Hom_FopxC.map gf =\n              S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n                      (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n                      (inC \\<circ> (\\<lambda>h. snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf))\n                           \\<circ> HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hom_FopxC.map gf =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))", "using assms HomC.map_def"], ["proof (prove)\nusing this:\n  DopxC.arr gf\n  HomC.map ?gf =\n  (if CopxC.arr ?gf\n   then S.mkArr (HomC.set (CopxC.dom ?gf)) (HomC.set (CopxC.cod ?gf))\n         (inC \\<circ>\n          (\\<lambda>h.\n              snd ?gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C fst ?gf) \\<circ>\n          HomC.\\<psi> (CopxC.dom ?gf))\n   else S.null)\n\ngoal (1 subgoal):\n 1. Hom_FopxC.map gf =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))", "by simp"], ["", "lemma Hom_DopxG_simp:\n    assumes \"DopxC.arr gf\"\n    shows \"Hom_DopxG.map gf =\n              S.mkArr (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n                      (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n                      (inD \\<circ> (\\<lambda>h. G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf)\n                           \\<circ> HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hom_DopxG.map gf =\n    S.mkArr (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ>\n      (\\<lambda>h.\n          G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n      HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))))", "using assms HomD.map_def"], ["proof (prove)\nusing this:\n  DopxC.arr gf\n  HomD.map ?gf =\n  (if DopxD.arr ?gf\n   then S.mkArr (HomD.set (DopxD.dom ?gf)) (HomD.set (DopxD.cod ?gf))\n         (inD \\<circ>\n          (\\<lambda>h.\n              snd ?gf \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst ?gf) \\<circ>\n          HomD.\\<psi> (DopxD.dom ?gf))\n   else S.null)\n\ngoal (1 subgoal):\n 1. Hom_DopxG.map gf =\n    S.mkArr (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ>\n      (\\<lambda>h.\n          G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n      HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))))", "by simp"], ["", "definition \\<Phi>o\n    where \"\\<Phi>o yx = S.mkArr (HomC.set (F (fst yx), snd yx))\n                           (HomD.set (fst yx, G (snd yx)))\n                           (inD o \\<phi> (fst yx) o HomC.\\<psi> (F (fst yx), snd yx))\""], ["", "lemma \\<Phi>o_in_hom:\n    assumes yx: \"DopxC.ide yx\"\n    shows \"\\<guillemotleft>\\<Phi>o yx : Hom_FopxC.map yx \\<rightarrow>\\<^sub>S Hom_DopxG.map yx\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Phi>o\n                     yx : Hom_FopxC.map\n                           yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n               yx\\<guillemotright>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Phi>o\n                     yx : Hom_FopxC.map\n                           yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n               yx\\<guillemotright>", "have \"Hom_FopxC.map yx = S.mkIde (HomC.set (F (fst yx), snd yx))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hom_FopxC.map yx = S.mkIde (HomC.set (F (fst yx), snd yx))", "using yx HomC.map_ide"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  \\<lbrakk>C.ide ?b; C.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomC.map (?b, ?a) = S.mkIde (HomC.set (?b, ?a))\n\ngoal (1 subgoal):\n 1. Hom_FopxC.map yx = S.mkIde (HomC.set (F (fst yx), snd yx))", "by auto"], ["proof (state)\nthis:\n  Hom_FopxC.map yx = S.mkIde (HomC.set (F (fst yx), snd yx))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Phi>o\n                     yx : Hom_FopxC.map\n                           yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n               yx\\<guillemotright>", "moreover"], ["proof (state)\nthis:\n  Hom_FopxC.map yx = S.mkIde (HomC.set (F (fst yx), snd yx))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Phi>o\n                     yx : Hom_FopxC.map\n                           yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n               yx\\<guillemotright>", "have \"Hom_DopxG.map yx = S.mkIde (HomD.set (fst yx, G (snd yx)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hom_DopxG.map yx = S.mkIde (HomD.set (fst yx, G (snd yx)))", "using yx HomD.map_ide"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  \\<lbrakk>D.ide ?b; D.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomD.map (?b, ?a) = S.mkIde (HomD.set (?b, ?a))\n\ngoal (1 subgoal):\n 1. Hom_DopxG.map yx = S.mkIde (HomD.set (fst yx, G (snd yx)))", "by auto"], ["proof (state)\nthis:\n  Hom_DopxG.map yx = S.mkIde (HomD.set (fst yx, G (snd yx)))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Phi>o\n                     yx : Hom_FopxC.map\n                           yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n               yx\\<guillemotright>", "moreover"], ["proof (state)\nthis:\n  Hom_DopxG.map yx = S.mkIde (HomD.set (fst yx, G (snd yx)))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Phi>o\n                     yx : Hom_FopxC.map\n                           yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n               yx\\<guillemotright>", "have\n          \"\\<guillemotleft>S.mkArr (HomC.set (F (fst yx), snd yx)) (HomD.set (fst yx, G (snd yx)))\n                    (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)) :\n              S.mkIde (HomC.set (F (fst yx), snd yx))\n                 \\<rightarrow>\\<^sub>S S.mkIde (HomD.set (fst yx, G (snd yx)))\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>S.mkArr (HomC.set (F (fst yx), snd yx))\n                     (HomD.set (fst yx, G (snd yx)))\n                     (inD \\<circ> \\<phi> (fst yx) \\<circ>\n                      HomC.\\<psi>\n                       (F (fst yx),\n                        snd yx)) : S.mkIde\n                                    (HomC.set\n(F (fst yx),\n snd yx)) \\<rightarrow>\\<^sub>S S.mkIde\n                                 (HomD.set\n                                   (fst yx, G (snd yx)))\\<guillemotright>", "proof (intro S.mkArr_in_hom)"], ["proof (state)\ngoal (3 subgoals):\n 1. HomC.set (F (fst yx), snd yx) \\<subseteq> S.Univ\n 2. HomD.set (fst yx, G (snd yx)) \\<subseteq> S.Univ\n 3. inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)\n    \\<in> HomC.set (F (fst yx), snd yx) \\<rightarrow>\n          HomD.set (fst yx, G (snd yx))", "show \"HomC.set (F (fst yx), snd yx) \\<subseteq> S.Univ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HomC.set (F (fst yx), snd yx) \\<subseteq> S.Univ", "using yx HomC.set_subset_Univ"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  \\<lbrakk>C.ide ?b; C.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomC.set (?b, ?a) \\<subseteq> S.Univ\n\ngoal (1 subgoal):\n 1. HomC.set (F (fst yx), snd yx) \\<subseteq> S.Univ", "by simp"], ["proof (state)\nthis:\n  HomC.set (F (fst yx), snd yx) \\<subseteq> S.Univ\n\ngoal (2 subgoals):\n 1. HomD.set (fst yx, G (snd yx)) \\<subseteq> S.Univ\n 2. inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)\n    \\<in> HomC.set (F (fst yx), snd yx) \\<rightarrow>\n          HomD.set (fst yx, G (snd yx))", "show \"HomD.set (fst yx, G (snd yx)) \\<subseteq> S.Univ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HomD.set (fst yx, G (snd yx)) \\<subseteq> S.Univ", "using yx HomD.set_subset_Univ"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  \\<lbrakk>D.ide ?b; D.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomD.set (?b, ?a) \\<subseteq> S.Univ\n\ngoal (1 subgoal):\n 1. HomD.set (fst yx, G (snd yx)) \\<subseteq> S.Univ", "by simp"], ["proof (state)\nthis:\n  HomD.set (fst yx, G (snd yx)) \\<subseteq> S.Univ\n\ngoal (1 subgoal):\n 1. inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)\n    \\<in> HomC.set (F (fst yx), snd yx) \\<rightarrow>\n          HomD.set (fst yx, G (snd yx))", "show \"inD o \\<phi> (fst yx) o HomC.\\<psi> (F (fst yx), snd yx)\n                 \\<in> HomC.set (F (fst yx), snd yx) \\<rightarrow> HomD.set (fst yx, G (snd yx))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)\n    \\<in> HomC.set (F (fst yx), snd yx) \\<rightarrow>\n          HomD.set (fst yx, G (snd yx))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx))\n        x\n       \\<in> HomD.set (fst yx, G (snd yx))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx))\n        x\n       \\<in> HomD.set (fst yx, G (snd yx))", "assume x: \"x \\<in> HomC.set (F (fst yx), snd yx)\""], ["proof (state)\nthis:\n  x \\<in> HomC.set (F (fst yx), snd yx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx))\n        x\n       \\<in> HomD.set (fst yx, G (snd yx))", "show \"(inD o \\<phi> (fst yx) o HomC.\\<psi> (F (fst yx), snd yx)) x\n                  \\<in> HomD.set (fst yx, G (snd yx))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)) x\n    \\<in> HomD.set (fst yx, G (snd yx))", "using x yx HomC.\\<psi>_mapsto [of \"F (fst yx)\" \"snd yx\"]\n                  \\<phi>_in_hom [of \"fst yx\"] HomD.\\<phi>_mapsto [of \"fst yx\" \"G (snd yx)\"]"], ["proof (prove)\nusing this:\n  x \\<in> HomC.set (F (fst yx), snd yx)\n  DopxC.ide yx\n  \\<lbrakk>C.ide (F (fst yx)); C.ide (snd yx)\\<rbrakk>\n  \\<Longrightarrow> HomC.\\<psi> (F (fst yx), snd yx)\n                    \\<in> HomC.set (F (fst yx), snd yx) \\<rightarrow>\n                          C.hom (F (fst yx)) (snd yx)\n  \\<lbrakk>D.ide (fst yx);\n   \\<guillemotleft>?f : F (fst yx) \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> (fst yx)\n                                     ?f : fst\n     yx \\<rightarrow>\\<^sub>D G ?x\\<guillemotright>\n  \\<lbrakk>D.ide (fst yx); D.ide (G (snd yx))\\<rbrakk>\n  \\<Longrightarrow> inD\n                    \\<in> D.hom (fst yx) (G (snd yx)) \\<rightarrow>\n                          HomD.set (fst yx, G (snd yx))\n\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)) x\n    \\<in> HomD.set (fst yx, G (snd yx))", "by auto"], ["proof (state)\nthis:\n  (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)) x\n  \\<in> HomD.set (fst yx, G (snd yx))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)\n  \\<in> HomC.set (F (fst yx), snd yx) \\<rightarrow>\n        HomD.set (fst yx, G (snd yx))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<guillemotleft>S.mkArr (HomC.set (F (fst yx), snd yx))\n                   (HomD.set (fst yx, G (snd yx)))\n                   (inD \\<circ> \\<phi> (fst yx) \\<circ>\n                    HomC.\\<psi>\n                     (F (fst yx),\n                      snd yx)) : S.mkIde\n                                  (HomC.set\n                                    (F (fst yx),\n                                     snd\nyx)) \\<rightarrow>\\<^sub>S S.mkIde\n                            (HomD.set (fst yx, G (snd yx)))\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Phi>o\n                     yx : Hom_FopxC.map\n                           yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n               yx\\<guillemotright>", "ultimately"], ["proof (chain)\npicking this:\n  Hom_FopxC.map yx = S.mkIde (HomC.set (F (fst yx), snd yx))\n  Hom_DopxG.map yx = S.mkIde (HomD.set (fst yx, G (snd yx)))\n  \\<guillemotleft>S.mkArr (HomC.set (F (fst yx), snd yx))\n                   (HomD.set (fst yx, G (snd yx)))\n                   (inD \\<circ> \\<phi> (fst yx) \\<circ>\n                    HomC.\\<psi>\n                     (F (fst yx),\n                      snd yx)) : S.mkIde\n                                  (HomC.set\n                                    (F (fst yx),\n                                     snd\nyx)) \\<rightarrow>\\<^sub>S S.mkIde\n                            (HomD.set (fst yx, G (snd yx)))\\<guillemotright>", "show ?thesis"], ["proof (prove)\nusing this:\n  Hom_FopxC.map yx = S.mkIde (HomC.set (F (fst yx), snd yx))\n  Hom_DopxG.map yx = S.mkIde (HomD.set (fst yx, G (snd yx)))\n  \\<guillemotleft>S.mkArr (HomC.set (F (fst yx), snd yx))\n                   (HomD.set (fst yx, G (snd yx)))\n                   (inD \\<circ> \\<phi> (fst yx) \\<circ>\n                    HomC.\\<psi>\n                     (F (fst yx),\n                      snd yx)) : S.mkIde\n                                  (HomC.set\n                                    (F (fst yx),\n                                     snd\nyx)) \\<rightarrow>\\<^sub>S S.mkIde\n                            (HomD.set (fst yx, G (snd yx)))\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Phi>o\n                     yx : Hom_FopxC.map\n                           yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n               yx\\<guillemotright>", "using \\<Phi>o_def"], ["proof (prove)\nusing this:\n  Hom_FopxC.map yx = S.mkIde (HomC.set (F (fst yx), snd yx))\n  Hom_DopxG.map yx = S.mkIde (HomD.set (fst yx, G (snd yx)))\n  \\<guillemotleft>S.mkArr (HomC.set (F (fst yx), snd yx))\n                   (HomD.set (fst yx, G (snd yx)))\n                   (inD \\<circ> \\<phi> (fst yx) \\<circ>\n                    HomC.\\<psi>\n                     (F (fst yx),\n                      snd yx)) : S.mkIde\n                                  (HomC.set\n                                    (F (fst yx),\n                                     snd\nyx)) \\<rightarrow>\\<^sub>S S.mkIde\n                            (HomD.set (fst yx, G (snd yx)))\\<guillemotright>\n  \\<Phi>o ?yx =\n  S.mkArr (HomC.set (F (fst ?yx), snd ?yx))\n   (HomD.set (fst ?yx, G (snd ?yx)))\n   (inD \\<circ> \\<phi> (fst ?yx) \\<circ> HomC.\\<psi> (F (fst ?yx), snd ?yx))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Phi>o\n                     yx : Hom_FopxC.map\n                           yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n               yx\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<Phi>o\n                   yx : Hom_FopxC.map\n                         yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n             yx\\<guillemotright>\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation \\<Phi>: transformation_by_components DopxC.comp S.comp\n                                                   Hom_FopxC.map Hom_DopxG.map \\<Phi>o"], ["proof (prove)\ngoal (1 subgoal):\n 1. transformation_by_components DopxC.comp S.comp Hom_FopxC.map\n     Hom_DopxG.map \\<Phi>o", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       DopxC.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<Phi>o\n                        a : Hom_FopxC.map\n                             a \\<rightarrow>\\<^sub>S Hom_DopxG.map\n                a\\<guillemotright>\n 2. \\<And>f.\n       DopxC.arr f \\<Longrightarrow>\n       S.comp (\\<Phi>o (DopxC.cod f)) (Hom_FopxC.map f) =\n       S.comp (Hom_DopxG.map f) (\\<Phi>o (DopxC.dom f))", "fix yx"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       DopxC.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<Phi>o\n                        a : Hom_FopxC.map\n                             a \\<rightarrow>\\<^sub>S Hom_DopxG.map\n                a\\<guillemotright>\n 2. \\<And>f.\n       DopxC.arr f \\<Longrightarrow>\n       S.comp (\\<Phi>o (DopxC.cod f)) (Hom_FopxC.map f) =\n       S.comp (Hom_DopxG.map f) (\\<Phi>o (DopxC.dom f))", "assume yx: \"DopxC.ide yx\""], ["proof (state)\nthis:\n  DopxC.ide yx\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       DopxC.ide a \\<Longrightarrow>\n       \\<guillemotleft>\\<Phi>o\n                        a : Hom_FopxC.map\n                             a \\<rightarrow>\\<^sub>S Hom_DopxG.map\n                a\\<guillemotright>\n 2. \\<And>f.\n       DopxC.arr f \\<Longrightarrow>\n       S.comp (\\<Phi>o (DopxC.cod f)) (Hom_FopxC.map f) =\n       S.comp (Hom_DopxG.map f) (\\<Phi>o (DopxC.dom f))", "show \"\\<guillemotleft>\\<Phi>o yx : Hom_FopxC.map yx \\<rightarrow>\\<^sub>S Hom_DopxG.map yx\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Phi>o\n                     yx : Hom_FopxC.map\n                           yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n               yx\\<guillemotright>", "using yx \\<Phi>o_in_hom"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  DopxC.ide ?yx \\<Longrightarrow>\n  \\<guillemotleft>\\<Phi>o\n                   ?yx : Hom_FopxC.map\n                          ?yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n               ?yx\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Phi>o\n                     yx : Hom_FopxC.map\n                           yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n               yx\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<Phi>o\n                   yx : Hom_FopxC.map\n                         yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n             yx\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       DopxC.arr f \\<Longrightarrow>\n       S.comp (\\<Phi>o (DopxC.cod f)) (Hom_FopxC.map f) =\n       S.comp (Hom_DopxG.map f) (\\<Phi>o (DopxC.dom f))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       DopxC.arr f \\<Longrightarrow>\n       S.comp (\\<Phi>o (DopxC.cod f)) (Hom_FopxC.map f) =\n       S.comp (Hom_DopxG.map f) (\\<Phi>o (DopxC.dom f))", "fix gf"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       DopxC.arr f \\<Longrightarrow>\n       S.comp (\\<Phi>o (DopxC.cod f)) (Hom_FopxC.map f) =\n       S.comp (Hom_DopxG.map f) (\\<Phi>o (DopxC.dom f))", "assume gf: \"DopxC.arr gf\""], ["proof (state)\nthis:\n  DopxC.arr gf\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       DopxC.arr f \\<Longrightarrow>\n       S.comp (\\<Phi>o (DopxC.cod f)) (Hom_FopxC.map f) =\n       S.comp (Hom_DopxG.map f) (\\<Phi>o (DopxC.dom f))", "show \"S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf)\n                = S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "let ?g = \"fst gf\""], ["proof (state)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "let ?f = \"snd gf\""], ["proof (state)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "let ?x = \"C.dom ?f\""], ["proof (state)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "let ?x' = \"C.cod ?f\""], ["proof (state)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "let ?y = \"D.cod ?g\""], ["proof (state)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "let ?y' = \"D.dom ?g\""], ["proof (state)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "let ?Fy = \"F ?y\""], ["proof (state)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "let ?Fy' = \"F ?y'\""], ["proof (state)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "let ?Fg = \"F ?g\""], ["proof (state)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "let ?Gx = \"G ?x\""], ["proof (state)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "let ?Gx' = \"G ?x'\""], ["proof (state)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "let ?Gf = \"G ?f\""], ["proof (state)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "have 1: \"S.arr (Hom_FopxC.map gf) \\<and>\n                 Hom_FopxC.map gf = S.mkArr (HomC.set (?Fy, ?x)) (HomC.set (?Fy', ?x'))\n                                            (inC o (\\<lambda>h. ?f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C ?Fg) o HomC.\\<psi> (?Fy, ?x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (Hom_FopxC.map gf) \\<and>\n    Hom_FopxC.map gf =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))", "using gf Hom_FopxC.preserves_arr Hom_FopxC_simp"], ["proof (prove)\nusing this:\n  DopxC.arr gf\n  DopxC.arr ?f \\<Longrightarrow> S.arr (Hom_FopxC.map ?f)\n  DopxC.arr ?gf \\<Longrightarrow>\n  Hom_FopxC.map ?gf =\n  S.mkArr (HomC.set (F (D.cod (fst ?gf)), C.dom (snd ?gf)))\n   (HomC.set (F (D.dom (fst ?gf)), C.cod (snd ?gf)))\n   (inC \\<circ>\n    (\\<lambda>h.\n        snd ?gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst ?gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst ?gf)), C.dom (snd ?gf)))\n\ngoal (1 subgoal):\n 1. S.arr (Hom_FopxC.map gf) \\<and>\n    Hom_FopxC.map gf =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))", "by blast"], ["proof (state)\nthis:\n  S.arr (Hom_FopxC.map gf) \\<and>\n  Hom_FopxC.map gf =\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n   (inC \\<circ>\n    (\\<lambda>h.\n        snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))\n\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "have 2: \"S.arr (\\<Phi>o (DopxC.cod gf)) \\<and>\n                 \\<Phi>o (DopxC.cod gf) = S.mkArr (HomC.set (?Fy', ?x')) (HomD.set (?y', ?Gx'))\n                                             (inD o \\<phi> ?y' o HomC.\\<psi> (?Fy', ?x'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (\\<Phi>o (DopxC.cod gf)) \\<and>\n    \\<Phi>o (DopxC.cod gf) =\n    S.mkArr (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)))", "using gf \\<Phi>o_in_hom [of \"DopxC.cod gf\"] \\<Phi>o_def [of \"DopxC.cod gf\"] \\<phi>_in_hom\n                S.card_of_leq"], ["proof (prove)\nusing this:\n  DopxC.arr gf\n  DopxC.ide (DopxC.cod gf) \\<Longrightarrow>\n  \\<guillemotleft>\\<Phi>o\n                   (DopxC.cod\n                     gf) : Hom_FopxC.map\n                            (DopxC.cod\n                              gf) \\<rightarrow>\\<^sub>S Hom_DopxG.map\n                   (DopxC.cod gf)\\<guillemotright>\n  \\<Phi>o (DopxC.cod gf) =\n  S.mkArr (HomC.set (F (fst (DopxC.cod gf)), snd (DopxC.cod gf)))\n   (HomD.set (fst (DopxC.cod gf), G (snd (DopxC.cod gf))))\n   (inD \\<circ> \\<phi> (fst (DopxC.cod gf)) \\<circ>\n    HomC.\\<psi> (F (fst (DopxC.cod gf)), snd (DopxC.cod gf)))\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n  ?A \\<subseteq> S.Univ \\<Longrightarrow>\n  |?A| <o cardSuc (cmax |UNIV| natLeq)\n\ngoal (1 subgoal):\n 1. S.arr (\\<Phi>o (DopxC.cod gf)) \\<and>\n    \\<Phi>o (DopxC.cod gf) =\n    S.mkArr (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)))", "by auto"], ["proof (state)\nthis:\n  S.arr (\\<Phi>o (DopxC.cod gf)) \\<and>\n  \\<Phi>o (DopxC.cod gf) =\n  S.mkArr (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)))\n\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "have 3: \"S.arr (\\<Phi>o (DopxC.dom gf)) \\<and>\n                 \\<Phi>o (DopxC.dom gf) = S.mkArr (HomC.set (?Fy, ?x)) (HomD.set (?y, ?Gx))\n                                             (inD o \\<phi> ?y o HomC.\\<psi> (?Fy, ?x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (\\<Phi>o (DopxC.dom gf)) \\<and>\n    \\<Phi>o (DopxC.dom gf) =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n     (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))", "using gf \\<Phi>o_in_hom [of \"DopxC.dom gf\"] \\<Phi>o_def [of \"DopxC.dom gf\"] \\<phi>_in_hom\n                S.card_of_leq"], ["proof (prove)\nusing this:\n  DopxC.arr gf\n  DopxC.ide (DopxC.dom gf) \\<Longrightarrow>\n  \\<guillemotleft>\\<Phi>o\n                   (DopxC.dom\n                     gf) : Hom_FopxC.map\n                            (DopxC.dom\n                              gf) \\<rightarrow>\\<^sub>S Hom_DopxG.map\n                   (DopxC.dom gf)\\<guillemotright>\n  \\<Phi>o (DopxC.dom gf) =\n  S.mkArr (HomC.set (F (fst (DopxC.dom gf)), snd (DopxC.dom gf)))\n   (HomD.set (fst (DopxC.dom gf), G (snd (DopxC.dom gf))))\n   (inD \\<circ> \\<phi> (fst (DopxC.dom gf)) \\<circ>\n    HomC.\\<psi> (F (fst (DopxC.dom gf)), snd (DopxC.dom gf)))\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n  ?A \\<subseteq> S.Univ \\<Longrightarrow>\n  |?A| <o cardSuc (cmax |UNIV| natLeq)\n\ngoal (1 subgoal):\n 1. S.arr (\\<Phi>o (DopxC.dom gf)) \\<and>\n    \\<Phi>o (DopxC.dom gf) =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n     (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))", "by auto"], ["proof (state)\nthis:\n  S.arr (\\<Phi>o (DopxC.dom gf)) \\<and>\n  \\<Phi>o (DopxC.dom gf) =\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n   (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))\n\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "have 4: \"S.arr (Hom_DopxG.map gf) \\<and>\n                 Hom_DopxG.map gf = S.mkArr (HomD.set (?y, ?Gx)) (HomD.set (?y', ?Gx'))\n                                            (inD o (\\<lambda>h. ?Gf \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D ?g) o HomD.\\<psi> (?y, ?Gx))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (Hom_DopxG.map gf) \\<and>\n    Hom_DopxG.map gf =\n    S.mkArr (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ>\n      (\\<lambda>h.\n          G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n      HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))))", "using gf Hom_DopxG.preserves_arr Hom_DopxG_simp"], ["proof (prove)\nusing this:\n  DopxC.arr gf\n  DopxC.arr ?f \\<Longrightarrow> S.arr (Hom_DopxG.map ?f)\n  DopxC.arr ?gf \\<Longrightarrow>\n  Hom_DopxG.map ?gf =\n  S.mkArr (HomD.set (D.cod (fst ?gf), G (C.dom (snd ?gf))))\n   (HomD.set (D.dom (fst ?gf), G (C.cod (snd ?gf))))\n   (inD \\<circ>\n    (\\<lambda>h.\n        G (snd ?gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst ?gf) \\<circ>\n    HomD.\\<psi> (D.cod (fst ?gf), G (C.dom (snd ?gf))))\n\ngoal (1 subgoal):\n 1. S.arr (Hom_DopxG.map gf) \\<and>\n    Hom_DopxG.map gf =\n    S.mkArr (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ>\n      (\\<lambda>h.\n          G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n      HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))))", "by blast"], ["proof (state)\nthis:\n  S.arr (Hom_DopxG.map gf) \\<and>\n  Hom_DopxG.map gf =\n  S.mkArr (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ>\n    (\\<lambda>h.\n        G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n    HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))))\n\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "have 5: \"S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) \\<and>\n                 S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf)\n                     = S.mkArr (HomC.set (?Fy, ?x)) (HomD.set (?y', ?Gx'))\n                               ((inD o \\<phi> ?y' o HomC.\\<psi> (?Fy', ?x'))\n                                 o (inC o (\\<lambda>h. ?f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C ?Fg) o HomC.\\<psi> (?Fy, ?x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) \\<and>\n    S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n      (inC \\<circ>\n       (\\<lambda>h.\n           snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n       HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) \\<and>\n    S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n      (inC \\<circ>\n       (\\<lambda>h.\n           snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n       HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))", "have \"S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf)", "using gf 1 2 \\<Phi>o_in_hom Hom_FopxC.preserves_hom"], ["proof (prove)\nusing this:\n  DopxC.arr gf\n  S.arr (Hom_FopxC.map gf) \\<and>\n  Hom_FopxC.map gf =\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n   (inC \\<circ>\n    (\\<lambda>h.\n        snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))\n  S.arr (\\<Phi>o (DopxC.cod gf)) \\<and>\n  \\<Phi>o (DopxC.cod gf) =\n  S.mkArr (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)))\n  DopxC.ide ?yx \\<Longrightarrow>\n  \\<guillemotleft>\\<Phi>o\n                   ?yx : Hom_FopxC.map\n                          ?yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n               ?yx\\<guillemotright>\n  DopxC.in_hom ?f ?a ?b \\<Longrightarrow>\n  \\<guillemotleft>Hom_FopxC.map\n                   ?f : Hom_FopxC.map\n                         ?a \\<rightarrow>\\<^sub>S Hom_FopxC.map\n             ?b\\<guillemotright>\n\ngoal (1 subgoal):\n 1. S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf)", "by (intro S.seqI', auto)"], ["proof (state)\nthis:\n  S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf)\n\ngoal (1 subgoal):\n 1. S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) \\<and>\n    S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n      (inC \\<circ>\n       (\\<lambda>h.\n           snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n       HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf)\n\ngoal (1 subgoal):\n 1. S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) \\<and>\n    S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n      (inC \\<circ>\n       (\\<lambda>h.\n           snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n       HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))", "using S.comp_mkArr 1 2"], ["proof (prove)\nusing this:\n  S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf)\n  \\<lbrakk>S.arr (S.mkArr ?A ?B ?F); S.arr (S.mkArr ?B ?C ?G)\\<rbrakk>\n  \\<Longrightarrow> S.comp (S.mkArr ?B ?C ?G) (S.mkArr ?A ?B ?F) =\n                    S.mkArr ?A ?C (?G \\<circ> ?F)\n  S.arr (Hom_FopxC.map gf) \\<and>\n  Hom_FopxC.map gf =\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n   (inC \\<circ>\n    (\\<lambda>h.\n        snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))\n  S.arr (\\<Phi>o (DopxC.cod gf)) \\<and>\n  \\<Phi>o (DopxC.cod gf) =\n  S.mkArr (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)))\n\ngoal (1 subgoal):\n 1. S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) \\<and>\n    S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n      (inC \\<circ>\n       (\\<lambda>h.\n           snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n       HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))", "by metis"], ["proof (state)\nthis:\n  S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) \\<and>\n  S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n    (inC \\<circ>\n     (\\<lambda>h.\n         snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) \\<and>\n  S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n    (inC \\<circ>\n     (\\<lambda>h.\n         snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "have 6: \"S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))\n                  = S.mkArr (HomC.set (?Fy, ?x)) (HomD.set (?y', ?Gx'))\n                            ((inD o (\\<lambda>h. ?Gf \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D ?g) o HomD.\\<psi> (?y, ?Gx))\n                              o (inD o \\<phi> ?y o HomC.\\<psi> (?Fy, ?x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf)) =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ>\n      (\\<lambda>h.\n          G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n      HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n      (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n       HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf)) =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ>\n      (\\<lambda>h.\n          G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n      HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n      (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n       HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))", "have \"S.seq (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.seq (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "using gf 3 4 S.arr_mkArr S.cod_mkArr S.dom_mkArr"], ["proof (prove)\nusing this:\n  DopxC.arr gf\n  S.arr (\\<Phi>o (DopxC.dom gf)) \\<and>\n  \\<Phi>o (DopxC.dom gf) =\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n   (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))\n  S.arr (Hom_DopxG.map gf) \\<and>\n  Hom_DopxG.map gf =\n  S.mkArr (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ>\n    (\\<lambda>h.\n        G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n    HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))))\n  S.arr (S.mkArr ?A ?B ?F) =\n  (?A \\<subseteq> S.Univ \\<and>\n   ?B \\<subseteq> S.Univ \\<and> ?F \\<in> ?A \\<rightarrow> ?B)\n  S.arr (S.mkArr ?A ?B ?F) \\<Longrightarrow>\n  S.cod (S.mkArr ?A ?B ?F) = S.mkIde ?B\n  S.arr (S.mkArr ?A ?B ?F) \\<Longrightarrow>\n  S.dom (S.mkArr ?A ?B ?F) = S.mkIde ?A\n\ngoal (1 subgoal):\n 1. S.seq (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "by (intro S.seqI', auto)"], ["proof (state)\nthis:\n  S.seq (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))\n\ngoal (1 subgoal):\n 1. S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf)) =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ>\n      (\\<lambda>h.\n          G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n      HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n      (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n       HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  S.seq (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))\n\ngoal (1 subgoal):\n 1. S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf)) =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ>\n      (\\<lambda>h.\n          G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n      HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n      (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n       HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))", "using 3 4 S.comp_mkArr"], ["proof (prove)\nusing this:\n  S.seq (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))\n  S.arr (\\<Phi>o (DopxC.dom gf)) \\<and>\n  \\<Phi>o (DopxC.dom gf) =\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n   (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))\n  S.arr (Hom_DopxG.map gf) \\<and>\n  Hom_DopxG.map gf =\n  S.mkArr (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ>\n    (\\<lambda>h.\n        G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n    HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))))\n  \\<lbrakk>S.arr (S.mkArr ?A ?B ?F); S.arr (S.mkArr ?B ?C ?G)\\<rbrakk>\n  \\<Longrightarrow> S.comp (S.mkArr ?B ?C ?G) (S.mkArr ?A ?B ?F) =\n                    S.mkArr ?A ?C (?G \\<circ> ?F)\n\ngoal (1 subgoal):\n 1. S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf)) =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ>\n      (\\<lambda>h.\n          G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n      HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n      (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n       HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))", "by metis"], ["proof (state)\nthis:\n  S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf)) =\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ>\n    (\\<lambda>h.\n        G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n    HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n    (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf)) =\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ>\n    (\\<lambda>h.\n        G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n    HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n    (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "have 7:\n          \"restrict ((inD o \\<phi> ?y' o HomC.\\<psi> (?Fy', ?x'))\n                      o (inC o (\\<lambda>h. ?f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C ?Fg) o HomC.\\<psi> (?Fy, ?x))) (HomC.set (?Fy, ?x))\n             = restrict ((inD o (\\<lambda>h. ?Gf \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D ?g) o HomD.\\<psi> (?y, ?Gx))\n                          o (inD o \\<phi> ?y o HomC.\\<psi> (?Fy, ?x))) (HomC.set (?Fy, ?x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict\n     (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n      (inC \\<circ>\n       (\\<lambda>h.\n           snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n       HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     (HomC.set (F (D.cod (fst gf)), C.dom (snd gf))) =\n    restrict\n     (inD \\<circ>\n      (\\<lambda>h.\n          G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n      HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n      (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n       HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))", "proof (intro restrict_ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set\n                (F (D.cod (fst gf)), C.dom (snd gf)) \\<Longrightarrow>\n       (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n        HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n        (inC \\<circ>\n         (\\<lambda>h.\n             snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        x =\n       (inD \\<circ>\n        (\\<lambda>h.\n            G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n        HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n        (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        x", "show \"\\<And>h. h \\<in> HomC.set (?Fy, ?x) \\<Longrightarrow>\n                     ((inD o \\<phi> ?y' o HomC.\\<psi> (?Fy', ?x'))\n                       o (inC o (\\<lambda>h. ?f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C ?Fg) o HomC.\\<psi> (?Fy, ?x))) h\n                       = ((inD o (\\<lambda>h. ?Gf \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D ?g) o HomD.\\<psi> (?y, ?Gx))\n                           o (inD o \\<phi> ?y o HomC.\\<psi> (?Fy, ?x))) h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set\n                (F (D.cod (fst gf)), C.dom (snd gf)) \\<Longrightarrow>\n       (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n        HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n        (inC \\<circ>\n         (\\<lambda>h.\n             snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        h =\n       (inD \\<circ>\n        (\\<lambda>h.\n            G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n        HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n        (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        h", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set\n                (F (D.cod (fst gf)), C.dom (snd gf)) \\<Longrightarrow>\n       (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n        HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n        (inC \\<circ>\n         (\\<lambda>h.\n             snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        h =\n       (inD \\<circ>\n        (\\<lambda>h.\n            G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n        HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n        (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        h", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set\n                (F (D.cod (fst gf)), C.dom (snd gf)) \\<Longrightarrow>\n       (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n        HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n        (inC \\<circ>\n         (\\<lambda>h.\n             snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        h =\n       (inD \\<circ>\n        (\\<lambda>h.\n            G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n        HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n        (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        h", "assume h: \"h \\<in> HomC.set (?Fy, ?x)\""], ["proof (state)\nthis:\n  h \\<in> HomC.set (F (D.cod (fst gf)), C.dom (snd gf))\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set\n                (F (D.cod (fst gf)), C.dom (snd gf)) \\<Longrightarrow>\n       (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n        HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n        (inC \\<circ>\n         (\\<lambda>h.\n             snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        h =\n       (inD \\<circ>\n        (\\<lambda>h.\n            G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n        HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n        (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        h", "have \\<psi>h: \"\\<guillemotleft>HomC.\\<psi> (?Fy, ?x) h : ?Fy \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                     h : F (D.cod\n                             (fst gf)) \\<rightarrow>\\<^sub>C C.dom\n                        (snd gf)\\<guillemotright>", "using gf h HomC.\\<psi>_mapsto [of ?Fy ?x] CopxC.ide_char"], ["proof (prove)\nusing this:\n  DopxC.arr gf\n  h \\<in> HomC.set (F (D.cod (fst gf)), C.dom (snd gf))\n  \\<lbrakk>C.ide (F (D.cod (fst gf))); C.ide (C.dom (snd gf))\\<rbrakk>\n  \\<Longrightarrow> HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                    \\<in> HomC.set\n                           (F (D.cod (fst gf)),\n                            C.dom (snd gf)) \\<rightarrow>\n                          C.hom (F (D.cod (fst gf))) (C.dom (snd gf))\n  CopxC.ide ?f = (Cop.ide (fst ?f) \\<and> C.ide (snd ?f))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                     h : F (D.cod\n                             (fst gf)) \\<rightarrow>\\<^sub>C C.dom\n                        (snd gf)\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                   h : F (D.cod\n                           (fst gf)) \\<rightarrow>\\<^sub>C C.dom\n                      (snd gf)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set\n                (F (D.cod (fst gf)), C.dom (snd gf)) \\<Longrightarrow>\n       (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n        HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n        (inC \\<circ>\n         (\\<lambda>h.\n             snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        h =\n       (inD \\<circ>\n        (\\<lambda>h.\n            G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n        HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n        (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        h", "show \"((inD o \\<phi> ?y' o HomC.\\<psi> (?Fy', ?x'))\n                       o (inC o (\\<lambda>h. ?f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C ?Fg) o HomC.\\<psi> (?Fy, ?x))) h\n                       = ((inD o (\\<lambda>h. ?Gf \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D ?g) o HomD.\\<psi> (?y, ?Gx))\n                           o (inD o \\<phi> ?y o HomC.\\<psi> (?Fy, ?x))) h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h =\n    (inD \\<circ>\n     (\\<lambda>h.\n         G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n     HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n     (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h =\n    (inD \\<circ>\n     (\\<lambda>h.\n         G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n     HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n     (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h", "have\n                \"((inD o \\<phi> ?y' o HomC.\\<psi> (?Fy', ?x'))\n                   o (inC o (\\<lambda>h. ?f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C ?Fg) o HomC.\\<psi> (?Fy, ?x))) h\n                   = inD (\\<phi> ?y' (HomC.\\<psi> (?Fy', ?x') (inC (?f \\<cdot>\\<^sub>C HomC.\\<psi> (?Fy, ?x) h \\<cdot>\\<^sub>C ?Fg))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h =\n    inD (\\<phi> (D.dom (fst gf))\n          (HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf))\n            (inC (snd gf \\<cdot>\\<^sub>C\n                  HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                   h \\<cdot>\\<^sub>C\n                  F (fst gf)))))", "by simp"], ["proof (state)\nthis:\n  (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n   HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n   (inC \\<circ>\n    (\\<lambda>h.\n        snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   h =\n  inD (\\<phi> (D.dom (fst gf))\n        (HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf))\n          (inC (snd gf \\<cdot>\\<^sub>C\n                HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                 h \\<cdot>\\<^sub>C\n                F (fst gf)))))\n\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h =\n    (inD \\<circ>\n     (\\<lambda>h.\n         G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n     HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n     (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h", "also"], ["proof (state)\nthis:\n  (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n   HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n   (inC \\<circ>\n    (\\<lambda>h.\n        snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   h =\n  inD (\\<phi> (D.dom (fst gf))\n        (HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf))\n          (inC (snd gf \\<cdot>\\<^sub>C\n                HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                 h \\<cdot>\\<^sub>C\n                F (fst gf)))))\n\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h =\n    (inD \\<circ>\n     (\\<lambda>h.\n         G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n     HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n     (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h", "have \"... = inD (\\<phi> ?y' (?f \\<cdot>\\<^sub>C HomC.\\<psi> (?Fy, ?x) h \\<cdot>\\<^sub>C ?Fg))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inD (\\<phi> (D.dom (fst gf))\n          (HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf))\n            (inC (snd gf \\<cdot>\\<^sub>C\n                  HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                   h \\<cdot>\\<^sub>C\n                  F (fst gf))))) =\n    inD (\\<phi> (D.dom (fst gf))\n          (snd gf \\<cdot>\\<^sub>C\n           HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h \\<cdot>\\<^sub>C\n           F (fst gf)))", "using gf \\<psi>h HomC.\\<phi>_mapsto HomC.\\<psi>_mapsto \\<phi>_in_hom\n                      \\<psi>_inC [of \"?f \\<cdot>\\<^sub>C HomC.\\<psi> (?Fy, ?x) h \\<cdot>\\<^sub>C ?Fg\"]"], ["proof (prove)\nusing this:\n  DopxC.arr gf\n  \\<guillemotleft>HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                   h : F (D.cod\n                           (fst gf)) \\<rightarrow>\\<^sub>C C.dom\n                      (snd gf)\\<guillemotright>\n  \\<lbrakk>C.ide ?b; C.ide ?a\\<rbrakk>\n  \\<Longrightarrow> inC \\<in> C.hom ?b ?a \\<rightarrow> HomC.set (?b, ?a)\n  \\<lbrakk>C.ide ?b; C.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomC.\\<psi> (?b, ?a)\n                    \\<in> HomC.set (?b, ?a) \\<rightarrow> C.hom ?b ?a\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n  C.seq (snd gf)\n   (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)) h \\<cdot>\\<^sub>C\n    F (fst gf)) \\<Longrightarrow>\n  HomC.\\<psi>\n   (C.dom\n     (snd gf \\<cdot>\\<^sub>C\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)) h \\<cdot>\\<^sub>C\n      F (fst gf)),\n    C.cod\n     (snd gf \\<cdot>\\<^sub>C\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)) h \\<cdot>\\<^sub>C\n      F (fst gf)))\n   (inC (snd gf \\<cdot>\\<^sub>C\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)) h \\<cdot>\\<^sub>C\n         F (fst gf))) =\n  snd gf \\<cdot>\\<^sub>C\n  HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)) h \\<cdot>\\<^sub>C\n  F (fst gf)\n\ngoal (1 subgoal):\n 1. inD (\\<phi> (D.dom (fst gf))\n          (HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf))\n            (inC (snd gf \\<cdot>\\<^sub>C\n                  HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                   h \\<cdot>\\<^sub>C\n                  F (fst gf))))) =\n    inD (\\<phi> (D.dom (fst gf))\n          (snd gf \\<cdot>\\<^sub>C\n           HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h \\<cdot>\\<^sub>C\n           F (fst gf)))", "by auto"], ["proof (state)\nthis:\n  inD (\\<phi> (D.dom (fst gf))\n        (HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf))\n          (inC (snd gf \\<cdot>\\<^sub>C\n                HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                 h \\<cdot>\\<^sub>C\n                F (fst gf))))) =\n  inD (\\<phi> (D.dom (fst gf))\n        (snd gf \\<cdot>\\<^sub>C\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)) h \\<cdot>\\<^sub>C\n         F (fst gf)))\n\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h =\n    (inD \\<circ>\n     (\\<lambda>h.\n         G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n     HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n     (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h", "also"], ["proof (state)\nthis:\n  inD (\\<phi> (D.dom (fst gf))\n        (HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf))\n          (inC (snd gf \\<cdot>\\<^sub>C\n                HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                 h \\<cdot>\\<^sub>C\n                F (fst gf))))) =\n  inD (\\<phi> (D.dom (fst gf))\n        (snd gf \\<cdot>\\<^sub>C\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)) h \\<cdot>\\<^sub>C\n         F (fst gf)))\n\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h =\n    (inD \\<circ>\n     (\\<lambda>h.\n         G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n     HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n     (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h", "have \"... = inD (D ?Gf (D (\\<phi> ?y (HomC.\\<psi> (?Fy, ?x) h)) ?g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inD (\\<phi> (D.dom (fst gf))\n          (snd gf \\<cdot>\\<^sub>C\n           HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h \\<cdot>\\<^sub>C\n           F (fst gf))) =\n    inD (G (snd gf) \\<cdot>\\<^sub>D\n         \\<phi> (D.cod (fst gf))\n          (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h) \\<cdot>\\<^sub>D\n         fst gf)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inD (\\<phi> (D.dom (fst gf))\n          (snd gf \\<cdot>\\<^sub>C\n           HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h \\<cdot>\\<^sub>C\n           F (fst gf))) =\n    inD (G (snd gf) \\<cdot>\\<^sub>D\n         \\<phi> (D.cod (fst gf))\n          (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h) \\<cdot>\\<^sub>D\n         fst gf)", "have \"\\<guillemotleft>?f : C.dom ?f \\<rightarrow> C.cod ?f\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>snd gf : C.dom\n                              (snd gf) \\<rightarrow>\\<^sub>C C.cod\n                        (snd gf)\\<guillemotright>", "using gf"], ["proof (prove)\nusing this:\n  DopxC.arr gf\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>snd gf : C.dom\n                              (snd gf) \\<rightarrow>\\<^sub>C C.cod\n                        (snd gf)\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>snd gf : C.dom\n                            (snd gf) \\<rightarrow>\\<^sub>C C.cod\n                      (snd gf)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. inD (\\<phi> (D.dom (fst gf))\n          (snd gf \\<cdot>\\<^sub>C\n           HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h \\<cdot>\\<^sub>C\n           F (fst gf))) =\n    inD (G (snd gf) \\<cdot>\\<^sub>D\n         \\<phi> (D.cod (fst gf))\n          (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h) \\<cdot>\\<^sub>D\n         fst gf)", "moreover"], ["proof (state)\nthis:\n  \\<guillemotleft>snd gf : C.dom\n                            (snd gf) \\<rightarrow>\\<^sub>C C.cod\n                      (snd gf)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. inD (\\<phi> (D.dom (fst gf))\n          (snd gf \\<cdot>\\<^sub>C\n           HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h \\<cdot>\\<^sub>C\n           F (fst gf))) =\n    inD (G (snd gf) \\<cdot>\\<^sub>D\n         \\<phi> (D.cod (fst gf))\n          (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h) \\<cdot>\\<^sub>D\n         fst gf)", "have \"\\<guillemotleft>?g : D.dom ?g \\<rightarrow>\\<^sub>D D.cod ?g\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>fst gf : D.dom\n                              (fst gf) \\<rightarrow>\\<^sub>D D.cod\n                        (fst gf)\\<guillemotright>", "using gf"], ["proof (prove)\nusing this:\n  DopxC.arr gf\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>fst gf : D.dom\n                              (fst gf) \\<rightarrow>\\<^sub>D D.cod\n                        (fst gf)\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>fst gf : D.dom\n                            (fst gf) \\<rightarrow>\\<^sub>D D.cod\n                      (fst gf)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. inD (\\<phi> (D.dom (fst gf))\n          (snd gf \\<cdot>\\<^sub>C\n           HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h \\<cdot>\\<^sub>C\n           F (fst gf))) =\n    inD (G (snd gf) \\<cdot>\\<^sub>D\n         \\<phi> (D.cod (fst gf))\n          (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h) \\<cdot>\\<^sub>D\n         fst gf)", "ultimately"], ["proof (chain)\npicking this:\n  \\<guillemotleft>snd gf : C.dom\n                            (snd gf) \\<rightarrow>\\<^sub>C C.cod\n                      (snd gf)\\<guillemotright>\n  \\<guillemotleft>fst gf : D.dom\n                            (fst gf) \\<rightarrow>\\<^sub>D D.cod\n                      (fst gf)\\<guillemotright>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<guillemotleft>snd gf : C.dom\n                            (snd gf) \\<rightarrow>\\<^sub>C C.cod\n                      (snd gf)\\<guillemotright>\n  \\<guillemotleft>fst gf : D.dom\n                            (fst gf) \\<rightarrow>\\<^sub>D D.cod\n                      (fst gf)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. inD (\\<phi> (D.dom (fst gf))\n          (snd gf \\<cdot>\\<^sub>C\n           HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h \\<cdot>\\<^sub>C\n           F (fst gf))) =\n    inD (G (snd gf) \\<cdot>\\<^sub>D\n         \\<phi> (D.cod (fst gf))\n          (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h) \\<cdot>\\<^sub>D\n         fst gf)", "using gf \\<psi>h \\<phi>_in_hom G.preserves_hom C.in_homE D.in_homE\n                        \\<phi>_naturality [of ?f ?x ?x' ?g ?y' ?y \"HomC.\\<psi> (?Fy, ?x) h\"]"], ["proof (prove)\nusing this:\n  \\<guillemotleft>snd gf : C.dom\n                            (snd gf) \\<rightarrow>\\<^sub>C C.cod\n                      (snd gf)\\<guillemotright>\n  \\<guillemotleft>fst gf : D.dom\n                            (fst gf) \\<rightarrow>\\<^sub>D D.cod\n                      (fst gf)\\<guillemotright>\n  DopxC.arr gf\n  \\<guillemotleft>HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                   h : F (D.cod\n                           (fst gf)) \\<rightarrow>\\<^sub>C C.dom\n                      (snd gf)\\<guillemotright>\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n  \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>C ?b\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>G ?f : G ?a \\<rightarrow>\\<^sub>D G ?b\\<guillemotright>\n  \\<lbrakk>\\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>C ?b\\<guillemotright>;\n   \\<lbrakk>C.arr ?f; C.dom ?f = ?a; C.cod ?f = ?b\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  \\<lbrakk>\\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>D ?b\\<guillemotright>;\n   \\<lbrakk>D.arr ?f; D.dom ?f = ?a; D.cod ?f = ?b\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  \\<lbrakk>\\<guillemotleft>snd gf : C.dom\n                                     (snd\n gf) \\<rightarrow>\\<^sub>C C.cod (snd gf)\\<guillemotright>;\n   \\<guillemotleft>fst gf : D.dom\n                             (fst gf) \\<rightarrow>\\<^sub>D D.cod\n                       (fst gf)\\<guillemotright>;\n   \\<guillemotleft>HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                    h : F (D.cod\n                            (fst gf)) \\<rightarrow>\\<^sub>C C.dom\n                       (snd gf)\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> (D.dom (fst gf))\n                     (snd gf \\<cdot>\\<^sub>C\n                      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                       h \\<cdot>\\<^sub>C\n                      F (fst gf)) =\n                    G (snd gf) \\<cdot>\\<^sub>D\n                    \\<phi> (D.cod (fst gf))\n                     (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                       h) \\<cdot>\\<^sub>D\n                    fst gf\n\ngoal (1 subgoal):\n 1. inD (\\<phi> (D.dom (fst gf))\n          (snd gf \\<cdot>\\<^sub>C\n           HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h \\<cdot>\\<^sub>C\n           F (fst gf))) =\n    inD (G (snd gf) \\<cdot>\\<^sub>D\n         \\<phi> (D.cod (fst gf))\n          (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h) \\<cdot>\\<^sub>D\n         fst gf)", "by simp"], ["proof (state)\nthis:\n  inD (\\<phi> (D.dom (fst gf))\n        (snd gf \\<cdot>\\<^sub>C\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)) h \\<cdot>\\<^sub>C\n         F (fst gf))) =\n  inD (G (snd gf) \\<cdot>\\<^sub>D\n       \\<phi> (D.cod (fst gf))\n        (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)) h) \\<cdot>\\<^sub>D\n       fst gf)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inD (\\<phi> (D.dom (fst gf))\n        (snd gf \\<cdot>\\<^sub>C\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)) h \\<cdot>\\<^sub>C\n         F (fst gf))) =\n  inD (G (snd gf) \\<cdot>\\<^sub>D\n       \\<phi> (D.cod (fst gf))\n        (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)) h) \\<cdot>\\<^sub>D\n       fst gf)\n\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h =\n    (inD \\<circ>\n     (\\<lambda>h.\n         G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n     HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n     (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h", "also"], ["proof (state)\nthis:\n  inD (\\<phi> (D.dom (fst gf))\n        (snd gf \\<cdot>\\<^sub>C\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)) h \\<cdot>\\<^sub>C\n         F (fst gf))) =\n  inD (G (snd gf) \\<cdot>\\<^sub>D\n       \\<phi> (D.cod (fst gf))\n        (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)) h) \\<cdot>\\<^sub>D\n       fst gf)\n\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h =\n    (inD \\<circ>\n     (\\<lambda>h.\n         G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n     HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n     (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h", "have \"... =\n                  inD (D ?Gf (D (HomD.\\<psi> (?y, ?Gx) (inD (\\<phi> ?y (HomC.\\<psi> (?Fy, ?x) h)))) ?g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inD (G (snd gf) \\<cdot>\\<^sub>D\n         \\<phi> (D.cod (fst gf))\n          (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h) \\<cdot>\\<^sub>D\n         fst gf) =\n    inD (G (snd gf) \\<cdot>\\<^sub>D\n         HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf)))\n          (inD (\\<phi> (D.cod (fst gf))\n                 (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                   h))) \\<cdot>\\<^sub>D\n         fst gf)", "using gf \\<psi>h \\<phi>_in_hom"], ["proof (prove)\nusing this:\n  DopxC.arr gf\n  \\<guillemotleft>HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                   h : F (D.cod\n                           (fst gf)) \\<rightarrow>\\<^sub>C C.dom\n                      (snd gf)\\<guillemotright>\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. inD (G (snd gf) \\<cdot>\\<^sub>D\n         \\<phi> (D.cod (fst gf))\n          (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n            h) \\<cdot>\\<^sub>D\n         fst gf) =\n    inD (G (snd gf) \\<cdot>\\<^sub>D\n         HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf)))\n          (inD (\\<phi> (D.cod (fst gf))\n                 (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                   h))) \\<cdot>\\<^sub>D\n         fst gf)", "by simp"], ["proof (state)\nthis:\n  inD (G (snd gf) \\<cdot>\\<^sub>D\n       \\<phi> (D.cod (fst gf))\n        (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)) h) \\<cdot>\\<^sub>D\n       fst gf) =\n  inD (G (snd gf) \\<cdot>\\<^sub>D\n       HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf)))\n        (inD (\\<phi> (D.cod (fst gf))\n               (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                 h))) \\<cdot>\\<^sub>D\n       fst gf)\n\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h =\n    (inD \\<circ>\n     (\\<lambda>h.\n         G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n     HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n     (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h", "also"], ["proof (state)\nthis:\n  inD (G (snd gf) \\<cdot>\\<^sub>D\n       \\<phi> (D.cod (fst gf))\n        (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)) h) \\<cdot>\\<^sub>D\n       fst gf) =\n  inD (G (snd gf) \\<cdot>\\<^sub>D\n       HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf)))\n        (inD (\\<phi> (D.cod (fst gf))\n               (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                 h))) \\<cdot>\\<^sub>D\n       fst gf)\n\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h =\n    (inD \\<circ>\n     (\\<lambda>h.\n         G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n     HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n     (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h", "have \"... = ((inD o (\\<lambda>h. ?Gf \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D ?g) o HomD.\\<psi> (?y, ?Gx))\n                                o (inD o \\<phi> ?y o HomC.\\<psi> (?Fy, ?x))) h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inD (G (snd gf) \\<cdot>\\<^sub>D\n         HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf)))\n          (inD (\\<phi> (D.cod (fst gf))\n                 (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                   h))) \\<cdot>\\<^sub>D\n         fst gf) =\n    (inD \\<circ>\n     (\\<lambda>h.\n         G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n     HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n     (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h", "by simp"], ["proof (state)\nthis:\n  inD (G (snd gf) \\<cdot>\\<^sub>D\n       HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf)))\n        (inD (\\<phi> (D.cod (fst gf))\n               (HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))\n                 h))) \\<cdot>\\<^sub>D\n       fst gf) =\n  (inD \\<circ>\n   (\\<lambda>h. G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n   HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n   (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   h\n\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h =\n    (inD \\<circ>\n     (\\<lambda>h.\n         G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n     HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n     (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h", "finally"], ["proof (chain)\npicking this:\n  (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n   HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n   (inC \\<circ>\n    (\\<lambda>h.\n        snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   h =\n  (inD \\<circ>\n   (\\<lambda>h. G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n   HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n   (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   h", "show ?thesis"], ["proof (prove)\nusing this:\n  (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n   HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n   (inC \\<circ>\n    (\\<lambda>h.\n        snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   h =\n  (inD \\<circ>\n   (\\<lambda>h. G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n   HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n   (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   h\n\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n     (inC \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h =\n    (inD \\<circ>\n     (\\<lambda>h.\n         G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n     HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n     (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n     h", "by auto"], ["proof (state)\nthis:\n  (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n   HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n   (inC \\<circ>\n    (\\<lambda>h.\n        snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   h =\n  (inD \\<circ>\n   (\\<lambda>h. G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n   HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n   (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n   HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n   (inC \\<circ>\n    (\\<lambda>h.\n        snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   h =\n  (inD \\<circ>\n   (\\<lambda>h. G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n   HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n   (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?h \\<in> HomC.set (F (D.cod (fst gf)), C.dom (snd gf)) \\<Longrightarrow>\n  (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n   HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n   (inC \\<circ>\n    (\\<lambda>h.\n        snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   ?h =\n  (inD \\<circ>\n   (\\<lambda>h. G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n   HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n   (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   ?h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  restrict\n   (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n    (inC \\<circ>\n     (\\<lambda>h.\n         snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   (HomC.set (F (D.cod (fst gf)), C.dom (snd gf))) =\n  restrict\n   (inD \\<circ>\n    (\\<lambda>h.\n        G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n    HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n    (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "have 8: \"S.mkArr (HomC.set (?Fy, ?x)) (HomD.set (?y', ?Gx'))\n                         ((inD o \\<phi> ?y' o HomC.\\<psi> (?Fy', ?x'))\n                           o (inC o (\\<lambda>h. ?f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C ?Fg) o HomC.\\<psi> (?Fy, ?x)))\n                    = S.mkArr (HomC.set (?Fy, ?x)) (HomD.set (?y', ?Gx'))\n                              ((inD o (\\<lambda>h. ?Gf \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D ?g) o HomD.\\<psi> (?y, ?Gx))\n                                o (inD o \\<phi> ?y o HomC.\\<psi> (?Fy, ?x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n      (inC \\<circ>\n       (\\<lambda>h.\n           snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n       HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))) =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ>\n      (\\<lambda>h.\n          G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n      HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n      (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n       HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))", "proof (intro S.mkArr_eqI')"], ["proof (state)\ngoal (2 subgoals):\n 1. S.arr\n     (S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n       (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n       (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n        HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n        (inC \\<circ>\n         (\\<lambda>h.\n             snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))))\n 2. \\<And>x.\n       x \\<in> HomC.set\n                (F (D.cod (fst gf)), C.dom (snd gf)) \\<Longrightarrow>\n       (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n        HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n        (inC \\<circ>\n         (\\<lambda>h.\n             snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        x =\n       (inD \\<circ>\n        (\\<lambda>h.\n            G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n        HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n        (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        x", "show \"S.arr (S.mkArr (HomC.set (?Fy, ?x)) (HomD.set (?y', ?Gx'))\n                               ((inD o \\<phi> ?y' o HomC.\\<psi> (?Fy', ?x'))\n                                o (inC o (\\<lambda>h. ?f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C ?Fg) o HomC.\\<psi> (?Fy, ?x))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n       (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n       (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n        HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n        (inC \\<circ>\n         (\\<lambda>h.\n             snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))))", "using 5"], ["proof (prove)\nusing this:\n  S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) \\<and>\n  S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n    (inC \\<circ>\n     (\\<lambda>h.\n         snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n       (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n       (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n        HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n        (inC \\<circ>\n         (\\<lambda>h.\n             snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))))", "by metis"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n      HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n      (inC \\<circ>\n       (\\<lambda>h.\n           snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n       HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set\n                (F (D.cod (fst gf)), C.dom (snd gf)) \\<Longrightarrow>\n       (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n        HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n        (inC \\<circ>\n         (\\<lambda>h.\n             snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        x =\n       (inD \\<circ>\n        (\\<lambda>h.\n            G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n        HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n        (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        x", "show \"\\<And>t. t \\<in> HomC.set (?Fy, ?x) \\<Longrightarrow>\n                      ((inD o \\<phi> ?y' o HomC.\\<psi> (?Fy', ?x'))\n                             o (inC o (\\<lambda>h. ?f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C ?Fg) o HomC.\\<psi> (?Fy, ?x))) t\n                      = ((inD o (\\<lambda>h. ?Gf \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D ?g) o HomD.\\<psi> (?y, ?Gx))\n                              o (inD o \\<phi> ?y o HomC.\\<psi> (?Fy, ?x))) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> HomC.set\n                (F (D.cod (fst gf)), C.dom (snd gf)) \\<Longrightarrow>\n       (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n        HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n        (inC \\<circ>\n         (\\<lambda>h.\n             snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        t =\n       (inD \\<circ>\n        (\\<lambda>h.\n            G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n        HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n        (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        t", "using 7 restrict_apply"], ["proof (prove)\nusing this:\n  restrict\n   (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n    (inC \\<circ>\n     (\\<lambda>h.\n         snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   (HomC.set (F (D.cod (fst gf)), C.dom (snd gf))) =\n  restrict\n   (inD \\<circ>\n    (\\<lambda>h.\n        G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n    HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n    (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n  restrict ?f ?A ?x = (if ?x \\<in> ?A then ?f ?x else undefined)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> HomC.set\n                (F (D.cod (fst gf)), C.dom (snd gf)) \\<Longrightarrow>\n       (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n        HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n        (inC \\<circ>\n         (\\<lambda>h.\n             snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        t =\n       (inD \\<circ>\n        (\\<lambda>h.\n            G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n        HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n        (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n         HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n        t", "by fast"], ["proof (state)\nthis:\n  ?t \\<in> HomC.set (F (D.cod (fst gf)), C.dom (snd gf)) \\<Longrightarrow>\n  (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n   HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n   (inC \\<circ>\n    (\\<lambda>h.\n        snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   ?t =\n  (inD \\<circ>\n   (\\<lambda>h. G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n   HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n   (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n   ?t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n    (inC \\<circ>\n     (\\<lambda>h.\n         snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))) =\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ>\n    (\\<lambda>h.\n        G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n    HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n    (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "using 5 6 8"], ["proof (prove)\nusing this:\n  S.seq (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) \\<and>\n  S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n    (inC \\<circ>\n     (\\<lambda>h.\n         snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n  S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf)) =\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ>\n    (\\<lambda>h.\n        G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n    HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n    (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ> \\<phi> (D.dom (fst gf)) \\<circ>\n    HomC.\\<psi> (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n    (inC \\<circ>\n     (\\<lambda>h.\n         snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))) =\n  S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n   (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n   (inD \\<circ>\n    (\\<lambda>h.\n        G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n    HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))) \\<circ>\n    (inD \\<circ> \\<phi> (D.cod (fst gf)) \\<circ>\n     HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf))))\n\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n    S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))", "by auto"], ["proof (state)\nthis:\n  S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n  S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.comp (\\<Phi>o (DopxC.cod gf)) (Hom_FopxC.map gf) =\n  S.comp (Hom_DopxG.map gf) (\\<Phi>o (DopxC.dom gf))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<Phi>_simp:\n    assumes YX: \"DopxC.ide yx\"\n    shows \"\\<Phi>.map yx =\n           S.mkArr (HomC.set (F (fst yx), snd yx)) (HomD.set (fst yx, G (snd yx)))\n                   (inD o \\<phi> (fst yx) o HomC.\\<psi> (F (fst yx), snd yx))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Phi>.map yx =\n    S.mkArr (HomC.set (F (fst yx), snd yx)) (HomD.set (fst yx, G (snd yx)))\n     (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx))", "using YX \\<Phi>o_def"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  \\<Phi>o ?yx =\n  S.mkArr (HomC.set (F (fst ?yx), snd ?yx))\n   (HomD.set (fst ?yx, G (snd ?yx)))\n   (inD \\<circ> \\<phi> (fst ?yx) \\<circ> HomC.\\<psi> (F (fst ?yx), snd ?yx))\n\ngoal (1 subgoal):\n 1. \\<Phi>.map yx =\n    S.mkArr (HomC.set (F (fst yx), snd yx)) (HomD.set (fst yx, G (snd yx)))\n     (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx))", "by simp"], ["", "abbreviation \\<Psi>o\n    where \"\\<Psi>o yx \\<equiv> S.mkArr (HomD.set (fst yx, G (snd yx))) (HomC.set (F (fst yx), snd yx))\n                            (inC o \\<psi> (snd yx) o HomD.\\<psi> (fst yx, G (snd yx)))\""], ["", "lemma \\<Psi>o_in_hom:\n    assumes yx: \"DopxC.ide yx\"\n    shows \"\\<guillemotleft>\\<Psi>o yx : Hom_DopxG.map yx \\<rightarrow>\\<^sub>S Hom_FopxC.map yx\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Psi>o\n                     yx : Hom_DopxG.map\n                           yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n               yx\\<guillemotright>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Psi>o\n                     yx : Hom_DopxG.map\n                           yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n               yx\\<guillemotright>", "have \"Hom_FopxC.map yx = S.mkIde (HomC.set (F (fst yx), snd yx))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hom_FopxC.map yx = S.mkIde (HomC.set (F (fst yx), snd yx))", "using yx HomC.map_ide"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  \\<lbrakk>C.ide ?b; C.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomC.map (?b, ?a) = S.mkIde (HomC.set (?b, ?a))\n\ngoal (1 subgoal):\n 1. Hom_FopxC.map yx = S.mkIde (HomC.set (F (fst yx), snd yx))", "by auto"], ["proof (state)\nthis:\n  Hom_FopxC.map yx = S.mkIde (HomC.set (F (fst yx), snd yx))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Psi>o\n                     yx : Hom_DopxG.map\n                           yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n               yx\\<guillemotright>", "moreover"], ["proof (state)\nthis:\n  Hom_FopxC.map yx = S.mkIde (HomC.set (F (fst yx), snd yx))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Psi>o\n                     yx : Hom_DopxG.map\n                           yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n               yx\\<guillemotright>", "have \"Hom_DopxG.map yx = S.mkIde (HomD.set (fst yx, G (snd yx)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hom_DopxG.map yx = S.mkIde (HomD.set (fst yx, G (snd yx)))", "using yx HomD.map_ide"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  \\<lbrakk>D.ide ?b; D.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomD.map (?b, ?a) = S.mkIde (HomD.set (?b, ?a))\n\ngoal (1 subgoal):\n 1. Hom_DopxG.map yx = S.mkIde (HomD.set (fst yx, G (snd yx)))", "by auto"], ["proof (state)\nthis:\n  Hom_DopxG.map yx = S.mkIde (HomD.set (fst yx, G (snd yx)))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Psi>o\n                     yx : Hom_DopxG.map\n                           yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n               yx\\<guillemotright>", "moreover"], ["proof (state)\nthis:\n  Hom_DopxG.map yx = S.mkIde (HomD.set (fst yx, G (snd yx)))\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Psi>o\n                     yx : Hom_DopxG.map\n                           yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n               yx\\<guillemotright>", "have \"\\<guillemotleft>\\<Psi>o yx : S.mkIde (HomD.set (fst yx, G (snd yx)))\n                                 \\<rightarrow>\\<^sub>S S.mkIde (HomC.set (F (fst yx), snd yx))\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Psi>o\n                     yx : S.mkIde\n                           (HomD.set\n                             (fst yx,\n                              G (snd yx))) \\<rightarrow>\\<^sub>S S.mkIde\n                            (HomC.set (F (fst yx), snd yx))\\<guillemotright>", "proof (intro S.mkArr_in_hom)"], ["proof (state)\ngoal (3 subgoals):\n 1. HomD.set (fst yx, G (snd yx)) \\<subseteq> S.Univ\n 2. HomC.set (F (fst yx), snd yx) \\<subseteq> S.Univ\n 3. inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))\n    \\<in> HomD.set (fst yx, G (snd yx)) \\<rightarrow>\n          HomC.set (F (fst yx), snd yx)", "show \"HomC.set (F (fst yx), snd yx) \\<subseteq> S.Univ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HomC.set (F (fst yx), snd yx) \\<subseteq> S.Univ", "using yx HomC.set_subset_Univ"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  \\<lbrakk>C.ide ?b; C.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomC.set (?b, ?a) \\<subseteq> S.Univ\n\ngoal (1 subgoal):\n 1. HomC.set (F (fst yx), snd yx) \\<subseteq> S.Univ", "by simp"], ["proof (state)\nthis:\n  HomC.set (F (fst yx), snd yx) \\<subseteq> S.Univ\n\ngoal (2 subgoals):\n 1. HomD.set (fst yx, G (snd yx)) \\<subseteq> S.Univ\n 2. inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))\n    \\<in> HomD.set (fst yx, G (snd yx)) \\<rightarrow>\n          HomC.set (F (fst yx), snd yx)", "show \"HomD.set (fst yx, G (snd yx)) \\<subseteq> S.Univ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HomD.set (fst yx, G (snd yx)) \\<subseteq> S.Univ", "using yx HomD.set_subset_Univ"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  \\<lbrakk>D.ide ?b; D.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomD.set (?b, ?a) \\<subseteq> S.Univ\n\ngoal (1 subgoal):\n 1. HomD.set (fst yx, G (snd yx)) \\<subseteq> S.Univ", "by simp"], ["proof (state)\nthis:\n  HomD.set (fst yx, G (snd yx)) \\<subseteq> S.Univ\n\ngoal (1 subgoal):\n 1. inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))\n    \\<in> HomD.set (fst yx, G (snd yx)) \\<rightarrow>\n          HomC.set (F (fst yx), snd yx)", "show \"inC o \\<psi> (snd yx) o HomD.\\<psi> (fst yx, G (snd yx))\n                 \\<in> HomD.set (fst yx, G (snd yx)) \\<rightarrow> HomC.set (F (fst yx), snd yx)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))\n    \\<in> HomD.set (fst yx, G (snd yx)) \\<rightarrow>\n          HomC.set (F (fst yx), snd yx)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)))\n        x\n       \\<in> HomC.set (F (fst yx), snd yx)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)))\n        x\n       \\<in> HomC.set (F (fst yx), snd yx)", "assume x: \"x \\<in> HomD.set (fst yx, G (snd yx))\""], ["proof (state)\nthis:\n  x \\<in> HomD.set (fst yx, G (snd yx))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)))\n        x\n       \\<in> HomC.set (F (fst yx), snd yx)", "show \"(inC o \\<psi> (snd yx) o HomD.\\<psi> (fst yx, G (snd yx))) x\n                  \\<in> HomC.set (F (fst yx), snd yx)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))) x\n    \\<in> HomC.set (F (fst yx), snd yx)", "using x yx HomD.\\<psi>_mapsto [of \"fst yx\" \"G (snd yx)\"] \\<psi>_in_hom [of \"snd yx\"]\n                  HomC.\\<phi>_mapsto [of \"F (fst yx)\" \"snd yx\"]"], ["proof (prove)\nusing this:\n  x \\<in> HomD.set (fst yx, G (snd yx))\n  DopxC.ide yx\n  \\<lbrakk>D.ide (fst yx); D.ide (G (snd yx))\\<rbrakk>\n  \\<Longrightarrow> HomD.\\<psi> (fst yx, G (snd yx))\n                    \\<in> HomD.set (fst yx, G (snd yx)) \\<rightarrow>\n                          D.hom (fst yx) (G (snd yx))\n  \\<lbrakk>C.ide (snd yx);\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            (snd yx)\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> (snd yx)\n                                     ?g : F\n     ?y \\<rightarrow>\\<^sub>C snd yx\\<guillemotright>\n  \\<lbrakk>C.ide (F (fst yx)); C.ide (snd yx)\\<rbrakk>\n  \\<Longrightarrow> inC\n                    \\<in> C.hom (F (fst yx)) (snd yx) \\<rightarrow>\n                          HomC.set (F (fst yx), snd yx)\n\ngoal (1 subgoal):\n 1. (inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))) x\n    \\<in> HomC.set (F (fst yx), snd yx)", "by auto"], ["proof (state)\nthis:\n  (inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))) x\n  \\<in> HomC.set (F (fst yx), snd yx)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))\n  \\<in> HomD.set (fst yx, G (snd yx)) \\<rightarrow>\n        HomC.set (F (fst yx), snd yx)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<Psi>o\n                   yx : S.mkIde\n                         (HomD.set\n                           (fst yx,\n                            G (snd yx))) \\<rightarrow>\\<^sub>S S.mkIde\n                          (HomC.set (F (fst yx), snd yx))\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Psi>o\n                     yx : Hom_DopxG.map\n                           yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n               yx\\<guillemotright>", "ultimately"], ["proof (chain)\npicking this:\n  Hom_FopxC.map yx = S.mkIde (HomC.set (F (fst yx), snd yx))\n  Hom_DopxG.map yx = S.mkIde (HomD.set (fst yx, G (snd yx)))\n  \\<guillemotleft>\\<Psi>o\n                   yx : S.mkIde\n                         (HomD.set\n                           (fst yx,\n                            G (snd yx))) \\<rightarrow>\\<^sub>S S.mkIde\n                          (HomC.set (F (fst yx), snd yx))\\<guillemotright>", "show ?thesis"], ["proof (prove)\nusing this:\n  Hom_FopxC.map yx = S.mkIde (HomC.set (F (fst yx), snd yx))\n  Hom_DopxG.map yx = S.mkIde (HomD.set (fst yx, G (snd yx)))\n  \\<guillemotleft>\\<Psi>o\n                   yx : S.mkIde\n                         (HomD.set\n                           (fst yx,\n                            G (snd yx))) \\<rightarrow>\\<^sub>S S.mkIde\n                          (HomC.set (F (fst yx), snd yx))\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Psi>o\n                     yx : Hom_DopxG.map\n                           yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n               yx\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<Psi>o\n                   yx : Hom_DopxG.map\n                         yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n             yx\\<guillemotright>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<Phi>_inv:\n    assumes yx: \"DopxC.ide yx\"\n    shows \"S.inverse_arrows (\\<Phi>.map yx) (\\<Psi>o yx)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.inverse_arrows (\\<Phi>.map yx) (\\<Psi>o yx)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S.inverse_arrows (\\<Phi>.map yx) (\\<Psi>o yx)", "have 1: \"\\<guillemotleft>\\<Phi>.map yx : Hom_FopxC.map yx \\<rightarrow>\\<^sub>S Hom_DopxG.map yx\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Phi>.map\n                     yx : Hom_FopxC.map\n                           yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n               yx\\<guillemotright>", "using yx \\<Phi>.preserves_hom [of yx yx yx] DopxC.ide_in_hom"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  DopxC.in_hom yx yx yx \\<Longrightarrow>\n  \\<guillemotleft>\\<Phi>.map\n                   yx : Hom_FopxC.map\n                         yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n             yx\\<guillemotright>\n  DopxC.ide ?a = DopxC.in_hom ?a ?a ?a\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Phi>.map\n                     yx : Hom_FopxC.map\n                           yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n               yx\\<guillemotright>", "by blast"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<Phi>.map\n                   yx : Hom_FopxC.map\n                         yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n             yx\\<guillemotright>\n\ngoal (1 subgoal):\n 1. S.inverse_arrows (\\<Phi>.map yx) (\\<Psi>o yx)", "have 2: \"\\<guillemotleft>\\<Psi>o yx : Hom_DopxG.map yx \\<rightarrow>\\<^sub>S Hom_FopxC.map yx\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Psi>o\n                     yx : Hom_DopxG.map\n                           yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n               yx\\<guillemotright>", "using yx \\<Psi>o_in_hom"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  DopxC.ide ?yx \\<Longrightarrow>\n  \\<guillemotleft>\\<Psi>o\n                   ?yx : Hom_DopxG.map\n                          ?yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n               ?yx\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<Psi>o\n                     yx : Hom_DopxG.map\n                           yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n               yx\\<guillemotright>", "by simp"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<Psi>o\n                   yx : Hom_DopxG.map\n                         yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n             yx\\<guillemotright>\n\ngoal (1 subgoal):\n 1. S.inverse_arrows (\\<Phi>.map yx) (\\<Psi>o yx)", "have 3: \"\\<Phi>.map yx = S.mkArr (HomC.set (F (fst yx), snd yx))\n                                   (HomD.set (fst yx, G (snd yx)))\n                                   (inD o \\<phi> (fst yx) o HomC.\\<psi> (F (fst yx), snd yx))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Phi>.map yx =\n    S.mkArr (HomC.set (F (fst yx), snd yx)) (HomD.set (fst yx, G (snd yx)))\n     (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx))", "using yx \\<Phi>_simp"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  DopxC.ide ?yx \\<Longrightarrow>\n  \\<Phi>.map ?yx =\n  S.mkArr (HomC.set (F (fst ?yx), snd ?yx))\n   (HomD.set (fst ?yx, G (snd ?yx)))\n   (inD \\<circ> \\<phi> (fst ?yx) \\<circ> HomC.\\<psi> (F (fst ?yx), snd ?yx))\n\ngoal (1 subgoal):\n 1. \\<Phi>.map yx =\n    S.mkArr (HomC.set (F (fst yx), snd yx)) (HomD.set (fst yx, G (snd yx)))\n     (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx))", "by blast"], ["proof (state)\nthis:\n  \\<Phi>.map yx =\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomD.set (fst yx, G (snd yx)))\n   (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx))\n\ngoal (1 subgoal):\n 1. S.inverse_arrows (\\<Phi>.map yx) (\\<Psi>o yx)", "have antipar: \"S.antipar (\\<Phi>.map yx) (\\<Psi>o yx)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.antipar (\\<Phi>.map yx) (\\<Psi>o yx)", "using 1 2"], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<Phi>.map\n                   yx : Hom_FopxC.map\n                         yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n             yx\\<guillemotright>\n  \\<guillemotleft>\\<Psi>o\n                   yx : Hom_DopxG.map\n                         yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n             yx\\<guillemotright>\n\ngoal (1 subgoal):\n 1. S.antipar (\\<Phi>.map yx) (\\<Psi>o yx)", "by blast"], ["proof (state)\nthis:\n  S.antipar (\\<Phi>.map yx) (\\<Psi>o yx)\n\ngoal (1 subgoal):\n 1. S.inverse_arrows (\\<Phi>.map yx) (\\<Psi>o yx)", "moreover"], ["proof (state)\nthis:\n  S.antipar (\\<Phi>.map yx) (\\<Psi>o yx)\n\ngoal (1 subgoal):\n 1. S.inverse_arrows (\\<Phi>.map yx) (\\<Psi>o yx)", "have \"S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))", "have \"S.comp (\\<Psi>o yx) (\\<Phi>.map yx) =\n                  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n                          ((inC o \\<psi> (snd yx) o HomD.\\<psi> (fst yx, G (snd yx)))\n                            o (inD o \\<phi> (fst yx) o HomC.\\<psi> (F (fst yx), snd yx)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.comp (\\<Psi>o yx) (\\<Phi>.map yx) =\n    S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n     (inC \\<circ> \\<psi> (snd yx) \\<circ>\n      HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n      (inD \\<circ> \\<phi> (fst yx) \\<circ>\n       HomC.\\<psi> (F (fst yx), snd yx)))", "using 1 2 3 antipar S.comp_mkArr"], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<Phi>.map\n                   yx : Hom_FopxC.map\n                         yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n             yx\\<guillemotright>\n  \\<guillemotleft>\\<Psi>o\n                   yx : Hom_DopxG.map\n                         yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n             yx\\<guillemotright>\n  \\<Phi>.map yx =\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomD.set (fst yx, G (snd yx)))\n   (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx))\n  S.antipar (\\<Phi>.map yx) (\\<Psi>o yx)\n  \\<lbrakk>S.arr (S.mkArr ?A ?B ?F); S.arr (S.mkArr ?B ?C ?G)\\<rbrakk>\n  \\<Longrightarrow> S.comp (S.mkArr ?B ?C ?G) (S.mkArr ?A ?B ?F) =\n                    S.mkArr ?A ?C (?G \\<circ> ?F)\n\ngoal (1 subgoal):\n 1. S.comp (\\<Psi>o yx) (\\<Phi>.map yx) =\n    S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n     (inC \\<circ> \\<psi> (snd yx) \\<circ>\n      HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n      (inD \\<circ> \\<phi> (fst yx) \\<circ>\n       HomC.\\<psi> (F (fst yx), snd yx)))", "by auto"], ["proof (state)\nthis:\n  S.comp (\\<Psi>o yx) (\\<Phi>.map yx) =\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n   (inC \\<circ> \\<psi> (snd yx) \\<circ>\n    HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n    (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)))\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))", "also"], ["proof (state)\nthis:\n  S.comp (\\<Psi>o yx) (\\<Phi>.map yx) =\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n   (inC \\<circ> \\<psi> (snd yx) \\<circ>\n    HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n    (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)))\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))", "have\n          \"... = S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n                         (\\<lambda>x. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n     (inC \\<circ> \\<psi> (snd yx) \\<circ>\n      HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n      (inD \\<circ> \\<phi> (fst yx) \\<circ>\n       HomC.\\<psi> (F (fst yx), snd yx))) =\n    S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n     (\\<lambda>x. x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n     (inC \\<circ> \\<psi> (snd yx) \\<circ>\n      HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n      (inD \\<circ> \\<phi> (fst yx) \\<circ>\n       HomC.\\<psi> (F (fst yx), snd yx))) =\n    S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n     (\\<lambda>x. x)", "have\n            \"S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx)) (\\<lambda>x. x)\n               = ...\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n     (\\<lambda>x. x) =\n    S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n     (inC \\<circ> \\<psi> (snd yx) \\<circ>\n      HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n      (inD \\<circ> \\<phi> (fst yx) \\<circ>\n       HomC.\\<psi> (F (fst yx), snd yx)))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. S.arr\n     (S.mkArr (HomC.set (F (fst yx), snd yx))\n       (HomC.set (F (fst yx), snd yx)) (\\<lambda>x. x))\n 2. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       x =\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n        (inD \\<circ> \\<phi> (fst yx) \\<circ>\n         HomC.\\<psi> (F (fst yx), snd yx)))\n        x", "show\n              \"S.arr (S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n                     (\\<lambda>x. x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F (fst yx), snd yx))\n       (HomC.set (F (fst yx), snd yx)) (\\<lambda>x. x))", "using yx HomC.set_subset_Univ S.arr_mkArr"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  \\<lbrakk>C.ide ?b; C.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomC.set (?b, ?a) \\<subseteq> S.Univ\n  S.arr (S.mkArr ?A ?B ?F) =\n  (?A \\<subseteq> S.Univ \\<and>\n   ?B \\<subseteq> S.Univ \\<and> ?F \\<in> ?A \\<rightarrow> ?B)\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F (fst yx), snd yx))\n       (HomC.set (F (fst yx), snd yx)) (\\<lambda>x. x))", "by simp"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n     (\\<lambda>x. x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       x =\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n        (inD \\<circ> \\<phi> (fst yx) \\<circ>\n         HomC.\\<psi> (F (fst yx), snd yx)))\n        x", "show \"\\<And>x. x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n                        x = ((inC o \\<psi> (snd yx) o HomD.\\<psi> (fst yx, G (snd yx)))\n                             o (inD o \\<phi> (fst yx) o HomC.\\<psi> (F (fst yx), snd yx))) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       x =\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n        (inD \\<circ> \\<phi> (fst yx) \\<circ>\n         HomC.\\<psi> (F (fst yx), snd yx)))\n        x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       x =\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n        (inD \\<circ> \\<phi> (fst yx) \\<circ>\n         HomC.\\<psi> (F (fst yx), snd yx)))\n        x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       x =\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n        (inD \\<circ> \\<phi> (fst yx) \\<circ>\n         HomC.\\<psi> (F (fst yx), snd yx)))\n        x", "assume x: \"x \\<in> HomC.set (F (fst yx), snd yx)\""], ["proof (state)\nthis:\n  x \\<in> HomC.set (F (fst yx), snd yx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       x =\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n        (inD \\<circ> \\<phi> (fst yx) \\<circ>\n         HomC.\\<psi> (F (fst yx), snd yx)))\n        x", "have \"((inC o \\<psi> (snd yx) o HomD.\\<psi> (fst yx, G (snd yx)))\n                             o (inD o \\<phi> (fst yx) o HomC.\\<psi> (F (fst yx), snd yx))) x\n                      = inC (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx))\n                              (inD (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inC \\<circ> \\<psi> (snd yx) \\<circ>\n     HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n     (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)))\n     x =\n    inC (\\<psi> (snd yx)\n          (HomD.\\<psi> (fst yx, G (snd yx))\n            (inD (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x)))))", "by simp"], ["proof (state)\nthis:\n  (inC \\<circ> \\<psi> (snd yx) \\<circ>\n   HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n   (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)))\n   x =\n  inC (\\<psi> (snd yx)\n        (HomD.\\<psi> (fst yx, G (snd yx))\n          (inD (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x)))))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       x =\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n        (inD \\<circ> \\<phi> (fst yx) \\<circ>\n         HomC.\\<psi> (F (fst yx), snd yx)))\n        x", "also"], ["proof (state)\nthis:\n  (inC \\<circ> \\<psi> (snd yx) \\<circ>\n   HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n   (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)))\n   x =\n  inC (\\<psi> (snd yx)\n        (HomD.\\<psi> (fst yx, G (snd yx))\n          (inD (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x)))))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       x =\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n        (inD \\<circ> \\<phi> (fst yx) \\<circ>\n         HomC.\\<psi> (F (fst yx), snd yx)))\n        x", "have \"... = inC (\\<psi> (snd yx) (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inC (\\<psi> (snd yx)\n          (HomD.\\<psi> (fst yx, G (snd yx))\n            (inD (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x))))) =\n    inC (\\<psi> (snd yx)\n          (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x)))", "using x yx HomC.\\<psi>_mapsto [of \"F (fst yx)\" \"snd yx\"] \\<phi>_in_hom"], ["proof (prove)\nusing this:\n  x \\<in> HomC.set (F (fst yx), snd yx)\n  DopxC.ide yx\n  \\<lbrakk>C.ide (F (fst yx)); C.ide (snd yx)\\<rbrakk>\n  \\<Longrightarrow> HomC.\\<psi> (F (fst yx), snd yx)\n                    \\<in> HomC.set (F (fst yx), snd yx) \\<rightarrow>\n                          C.hom (F (fst yx)) (snd yx)\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. inC (\\<psi> (snd yx)\n          (HomD.\\<psi> (fst yx, G (snd yx))\n            (inD (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x))))) =\n    inC (\\<psi> (snd yx)\n          (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x)))", "by force"], ["proof (state)\nthis:\n  inC (\\<psi> (snd yx)\n        (HomD.\\<psi> (fst yx, G (snd yx))\n          (inD (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x))))) =\n  inC (\\<psi> (snd yx)\n        (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       x =\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n        (inD \\<circ> \\<phi> (fst yx) \\<circ>\n         HomC.\\<psi> (F (fst yx), snd yx)))\n        x", "also"], ["proof (state)\nthis:\n  inC (\\<psi> (snd yx)\n        (HomD.\\<psi> (fst yx, G (snd yx))\n          (inD (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x))))) =\n  inC (\\<psi> (snd yx)\n        (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       x =\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n        (inD \\<circ> \\<phi> (fst yx) \\<circ>\n         HomC.\\<psi> (F (fst yx), snd yx)))\n        x", "have \"... = inC (HomC.\\<psi> (F (fst yx), snd yx) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inC (\\<psi> (snd yx)\n          (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x))) =\n    inC (HomC.\\<psi> (F (fst yx), snd yx) x)", "using x yx HomC.\\<psi>_mapsto [of \"F (fst yx)\" \"snd yx\"] \\<psi>_\\<phi>"], ["proof (prove)\nusing this:\n  x \\<in> HomC.set (F (fst yx), snd yx)\n  DopxC.ide yx\n  \\<lbrakk>C.ide (F (fst yx)); C.ide (snd yx)\\<rbrakk>\n  \\<Longrightarrow> HomC.\\<psi> (F (fst yx), snd yx)\n                    \\<in> HomC.set (F (fst yx), snd yx) \\<rightarrow>\n                          C.hom (F (fst yx)) (snd yx)\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x (\\<phi> ?y ?f) = ?f\n\ngoal (1 subgoal):\n 1. inC (\\<psi> (snd yx)\n          (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x))) =\n    inC (HomC.\\<psi> (F (fst yx), snd yx) x)", "by force"], ["proof (state)\nthis:\n  inC (\\<psi> (snd yx)\n        (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x))) =\n  inC (HomC.\\<psi> (F (fst yx), snd yx) x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       x =\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n        (inD \\<circ> \\<phi> (fst yx) \\<circ>\n         HomC.\\<psi> (F (fst yx), snd yx)))\n        x", "also"], ["proof (state)\nthis:\n  inC (\\<psi> (snd yx)\n        (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx) x))) =\n  inC (HomC.\\<psi> (F (fst yx), snd yx) x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       x =\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n        (inD \\<circ> \\<phi> (fst yx) \\<circ>\n         HomC.\\<psi> (F (fst yx), snd yx)))\n        x", "have \"... = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inC (HomC.\\<psi> (F (fst yx), snd yx) x) = x", "using x yx inC_\\<psi>"], ["proof (prove)\nusing this:\n  x \\<in> HomC.set (F (fst yx), snd yx)\n  DopxC.ide yx\n  \\<lbrakk>C.ide ?b; C.ide ?a; ?x \\<in> inC ` C.hom ?b ?a\\<rbrakk>\n  \\<Longrightarrow> inC (HomC.\\<psi> (?b, ?a) ?x) = ?x\n\ngoal (1 subgoal):\n 1. inC (HomC.\\<psi> (F (fst yx), snd yx) x) = x", "by simp"], ["proof (state)\nthis:\n  inC (HomC.\\<psi> (F (fst yx), snd yx) x) = x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n       x =\n       (inC \\<circ> \\<psi> (snd yx) \\<circ>\n        HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n        (inD \\<circ> \\<phi> (fst yx) \\<circ>\n         HomC.\\<psi> (F (fst yx), snd yx)))\n        x", "finally"], ["proof (chain)\npicking this:\n  (inC \\<circ> \\<psi> (snd yx) \\<circ>\n   HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n   (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)))\n   x =\n  x", "show \"x = ((inC o \\<psi> (snd yx) o HomD.\\<psi> (fst yx, G (snd yx)))\n                                   o (inD o \\<phi> (fst yx) o HomC.\\<psi> (F (fst yx), snd yx))) x\""], ["proof (prove)\nusing this:\n  (inC \\<circ> \\<psi> (snd yx) \\<circ>\n   HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n   (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)))\n   x =\n  x\n\ngoal (1 subgoal):\n 1. x =\n    (inC \\<circ> \\<psi> (snd yx) \\<circ>\n     HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n     (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)))\n     x", "by auto"], ["proof (state)\nthis:\n  x =\n  (inC \\<circ> \\<psi> (snd yx) \\<circ>\n   HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n   (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)))\n   x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> HomC.set (F (fst yx), snd yx) \\<Longrightarrow>\n  ?x =\n  (inC \\<circ> \\<psi> (snd yx) \\<circ>\n   HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n   (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)))\n   ?x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n   (\\<lambda>x. x) =\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n   (inC \\<circ> \\<psi> (snd yx) \\<circ>\n    HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n    (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)))\n\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n     (inC \\<circ> \\<psi> (snd yx) \\<circ>\n      HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n      (inD \\<circ> \\<phi> (fst yx) \\<circ>\n       HomC.\\<psi> (F (fst yx), snd yx))) =\n    S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n     (\\<lambda>x. x)", "thus ?thesis"], ["proof (prove)\nusing this:\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n   (\\<lambda>x. x) =\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n   (inC \\<circ> \\<psi> (snd yx) \\<circ>\n    HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n    (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx)))\n\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n     (inC \\<circ> \\<psi> (snd yx) \\<circ>\n      HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n      (inD \\<circ> \\<phi> (fst yx) \\<circ>\n       HomC.\\<psi> (F (fst yx), snd yx))) =\n    S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n     (\\<lambda>x. x)", "by auto"], ["proof (state)\nthis:\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n   (inC \\<circ> \\<psi> (snd yx) \\<circ>\n    HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n    (inD \\<circ> \\<phi> (fst yx) \\<circ>\n     HomC.\\<psi> (F (fst yx), snd yx))) =\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n   (\\<lambda>x. x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n   (inC \\<circ> \\<psi> (snd yx) \\<circ>\n    HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n    (inD \\<circ> \\<phi> (fst yx) \\<circ>\n     HomC.\\<psi> (F (fst yx), snd yx))) =\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n   (\\<lambda>x. x)\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))", "also"], ["proof (state)\nthis:\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n   (inC \\<circ> \\<psi> (snd yx) \\<circ>\n    HomD.\\<psi> (fst yx, G (snd yx)) \\<circ>\n    (inD \\<circ> \\<phi> (fst yx) \\<circ>\n     HomC.\\<psi> (F (fst yx), snd yx))) =\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n   (\\<lambda>x. x)\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))", "have \"... = S.mkIde (HomC.set (F (fst yx), snd yx))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n     (\\<lambda>x. x) =\n    S.mkIde (HomC.set (F (fst yx), snd yx))", "using yx S.mkIde_as_mkArr HomC.set_subset_Univ"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  ?A \\<subseteq> S.Univ \\<Longrightarrow>\n  S.mkArr ?A ?A (\\<lambda>x. x) = S.mkIde ?A\n  \\<lbrakk>C.ide ?b; C.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomC.set (?b, ?a) \\<subseteq> S.Univ\n\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n     (\\<lambda>x. x) =\n    S.mkIde (HomC.set (F (fst yx), snd yx))", "by force"], ["proof (state)\nthis:\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomC.set (F (fst yx), snd yx))\n   (\\<lambda>x. x) =\n  S.mkIde (HomC.set (F (fst yx), snd yx))\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))", "finally"], ["proof (chain)\npicking this:\n  S.comp (\\<Psi>o yx) (\\<Phi>.map yx) =\n  S.mkIde (HomC.set (F (fst yx), snd yx))", "have\n            \"S.comp (\\<Psi>o yx) (\\<Phi>.map yx) = S.mkIde (HomC.set (F (fst yx), snd yx))\""], ["proof (prove)\nusing this:\n  S.comp (\\<Psi>o yx) (\\<Phi>.map yx) =\n  S.mkIde (HomC.set (F (fst yx), snd yx))\n\ngoal (1 subgoal):\n 1. S.comp (\\<Psi>o yx) (\\<Phi>.map yx) =\n    S.mkIde (HomC.set (F (fst yx), snd yx))", "by auto"], ["proof (state)\nthis:\n  S.comp (\\<Psi>o yx) (\\<Phi>.map yx) =\n  S.mkIde (HomC.set (F (fst yx), snd yx))\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))", "thus ?thesis"], ["proof (prove)\nusing this:\n  S.comp (\\<Psi>o yx) (\\<Phi>.map yx) =\n  S.mkIde (HomC.set (F (fst yx), snd yx))\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))", "using yx HomC.set_subset_Univ S.ide_mkIde"], ["proof (prove)\nusing this:\n  S.comp (\\<Psi>o yx) (\\<Phi>.map yx) =\n  S.mkIde (HomC.set (F (fst yx), snd yx))\n  DopxC.ide yx\n  \\<lbrakk>C.ide ?b; C.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomC.set (?b, ?a) \\<subseteq> S.Univ\n  ?A \\<subseteq> S.Univ \\<Longrightarrow> S.ide (S.mkIde ?A)\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))", "by simp"], ["proof (state)\nthis:\n  S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))\n\ngoal (1 subgoal):\n 1. S.inverse_arrows (\\<Phi>.map yx) (\\<Psi>o yx)", "moreover"], ["proof (state)\nthis:\n  S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))\n\ngoal (1 subgoal):\n 1. S.inverse_arrows (\\<Phi>.map yx) (\\<Psi>o yx)", "have \"S.ide (S.comp (\\<Phi>.map yx) (\\<Psi>o yx))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Phi>.map yx) (\\<Psi>o yx))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Phi>.map yx) (\\<Psi>o yx))", "have \"S.comp (\\<Phi>.map yx) (\\<Psi>o yx) =\n                  S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n                          ((inD o \\<phi> (fst yx) o HomC.\\<psi> (F (fst yx), snd yx))\n                            o (inC o \\<psi> (snd yx) o HomD.\\<psi> (fst yx, G (snd yx))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>.map yx) (\\<Psi>o yx) =\n    S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n     (inD \\<circ> \\<phi> (fst yx) \\<circ>\n      HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n      (inC \\<circ> \\<psi> (snd yx) \\<circ>\n       HomD.\\<psi> (fst yx, G (snd yx))))", "using 1 2 3 S.comp_mkArr antipar"], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<Phi>.map\n                   yx : Hom_FopxC.map\n                         yx \\<rightarrow>\\<^sub>S Hom_DopxG.map\n             yx\\<guillemotright>\n  \\<guillemotleft>\\<Psi>o\n                   yx : Hom_DopxG.map\n                         yx \\<rightarrow>\\<^sub>S Hom_FopxC.map\n             yx\\<guillemotright>\n  \\<Phi>.map yx =\n  S.mkArr (HomC.set (F (fst yx), snd yx)) (HomD.set (fst yx, G (snd yx)))\n   (inD \\<circ> \\<phi> (fst yx) \\<circ> HomC.\\<psi> (F (fst yx), snd yx))\n  \\<lbrakk>S.arr (S.mkArr ?A ?B ?F); S.arr (S.mkArr ?B ?C ?G)\\<rbrakk>\n  \\<Longrightarrow> S.comp (S.mkArr ?B ?C ?G) (S.mkArr ?A ?B ?F) =\n                    S.mkArr ?A ?C (?G \\<circ> ?F)\n  S.antipar (\\<Phi>.map yx) (\\<Psi>o yx)\n\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>.map yx) (\\<Psi>o yx) =\n    S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n     (inD \\<circ> \\<phi> (fst yx) \\<circ>\n      HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n      (inC \\<circ> \\<psi> (snd yx) \\<circ>\n       HomD.\\<psi> (fst yx, G (snd yx))))", "by fastforce"], ["proof (state)\nthis:\n  S.comp (\\<Phi>.map yx) (\\<Psi>o yx) =\n  S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n   (inD \\<circ> \\<phi> (fst yx) \\<circ>\n    HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n    (inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))))\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Phi>.map yx) (\\<Psi>o yx))", "also"], ["proof (state)\nthis:\n  S.comp (\\<Phi>.map yx) (\\<Psi>o yx) =\n  S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n   (inD \\<circ> \\<phi> (fst yx) \\<circ>\n    HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n    (inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))))\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Phi>.map yx) (\\<Psi>o yx))", "have \"... = S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n                              (\\<lambda>x. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n     (inD \\<circ> \\<phi> (fst yx) \\<circ>\n      HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n      (inC \\<circ> \\<psi> (snd yx) \\<circ>\n       HomD.\\<psi> (fst yx, G (snd yx)))) =\n    S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n     (\\<lambda>x. x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n     (inD \\<circ> \\<phi> (fst yx) \\<circ>\n      HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n      (inC \\<circ> \\<psi> (snd yx) \\<circ>\n       HomD.\\<psi> (fst yx, G (snd yx)))) =\n    S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n     (\\<lambda>x. x)", "have\n            \"S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx))) (\\<lambda>x. x)\n                = ...\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n     (\\<lambda>x. x) =\n    S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n     (inD \\<circ> \\<phi> (fst yx) \\<circ>\n      HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n      (inC \\<circ> \\<psi> (snd yx) \\<circ>\n       HomD.\\<psi> (fst yx, G (snd yx))))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. S.arr\n     (S.mkArr (HomD.set (fst yx, G (snd yx)))\n       (HomD.set (fst yx, G (snd yx))) (\\<lambda>x. x))\n 2. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       x =\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n        (inC \\<circ> \\<psi> (snd yx) \\<circ>\n         HomD.\\<psi> (fst yx, G (snd yx))))\n        x", "show\n              \"S.arr (S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n                     (\\<lambda>x. x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomD.set (fst yx, G (snd yx)))\n       (HomD.set (fst yx, G (snd yx))) (\\<lambda>x. x))", "using yx HomD.set_subset_Univ S.arr_mkArr"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  \\<lbrakk>D.ide ?b; D.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomD.set (?b, ?a) \\<subseteq> S.Univ\n  S.arr (S.mkArr ?A ?B ?F) =\n  (?A \\<subseteq> S.Univ \\<and>\n   ?B \\<subseteq> S.Univ \\<and> ?F \\<in> ?A \\<rightarrow> ?B)\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomD.set (fst yx, G (snd yx)))\n       (HomD.set (fst yx, G (snd yx))) (\\<lambda>x. x))", "by simp"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n     (\\<lambda>x. x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       x =\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n        (inC \\<circ> \\<psi> (snd yx) \\<circ>\n         HomD.\\<psi> (fst yx, G (snd yx))))\n        x", "show \"\\<And>x. x \\<in> (HomD.set (fst yx, G (snd yx))) \\<Longrightarrow>\n                        x = ((inD o \\<phi> (fst yx) o HomC.\\<psi> (F (fst yx), snd yx))\n                            o (inC o \\<psi> (snd yx) o HomD.\\<psi> (fst yx, G (snd yx)))) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       x =\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n        (inC \\<circ> \\<psi> (snd yx) \\<circ>\n         HomD.\\<psi> (fst yx, G (snd yx))))\n        x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       x =\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n        (inC \\<circ> \\<psi> (snd yx) \\<circ>\n         HomD.\\<psi> (fst yx, G (snd yx))))\n        x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       x =\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n        (inC \\<circ> \\<psi> (snd yx) \\<circ>\n         HomD.\\<psi> (fst yx, G (snd yx))))\n        x", "assume x: \"x \\<in> HomD.set (fst yx, G (snd yx))\""], ["proof (state)\nthis:\n  x \\<in> HomD.set (fst yx, G (snd yx))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       x =\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n        (inC \\<circ> \\<psi> (snd yx) \\<circ>\n         HomD.\\<psi> (fst yx, G (snd yx))))\n        x", "have \"((inD o \\<phi> (fst yx) o HomC.\\<psi> (F (fst yx), snd yx))\n                          o (inC o \\<psi> (snd yx) o HomD.\\<psi> (fst yx, G (snd yx)))) x\n                       = inD (\\<phi> (fst yx) (HomC.\\<psi> (F (fst yx), snd yx)\n                            (inC (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inD \\<circ> \\<phi> (fst yx) \\<circ>\n     HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n     (inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))))\n     x =\n    inD (\\<phi> (fst yx)\n          (HomC.\\<psi> (F (fst yx), snd yx)\n            (inC (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x)))))", "by simp"], ["proof (state)\nthis:\n  (inD \\<circ> \\<phi> (fst yx) \\<circ>\n   HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n   (inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))))\n   x =\n  inD (\\<phi> (fst yx)\n        (HomC.\\<psi> (F (fst yx), snd yx)\n          (inC (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x)))))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       x =\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n        (inC \\<circ> \\<psi> (snd yx) \\<circ>\n         HomD.\\<psi> (fst yx, G (snd yx))))\n        x", "also"], ["proof (state)\nthis:\n  (inD \\<circ> \\<phi> (fst yx) \\<circ>\n   HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n   (inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))))\n   x =\n  inD (\\<phi> (fst yx)\n        (HomC.\\<psi> (F (fst yx), snd yx)\n          (inC (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x)))))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       x =\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n        (inC \\<circ> \\<psi> (snd yx) \\<circ>\n         HomD.\\<psi> (fst yx, G (snd yx))))\n        x", "have \"... = inD (\\<phi> (fst yx) (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inD (\\<phi> (fst yx)\n          (HomC.\\<psi> (F (fst yx), snd yx)\n            (inC (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x))))) =\n    inD (\\<phi> (fst yx)\n          (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inD (\\<phi> (fst yx)\n          (HomC.\\<psi> (F (fst yx), snd yx)\n            (inC (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x))))) =\n    inD (\\<phi> (fst yx)\n          (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x)))", "have \"\\<guillemotleft>\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x) : F (fst yx) \\<rightarrow> snd yx\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> (snd yx)\n                     (HomD.\\<psi> (fst yx, G (snd yx))\n                       x) : F (fst yx) \\<rightarrow>\\<^sub>C snd\n                        yx\\<guillemotright>", "using x yx HomD.\\<psi>_mapsto [of \"fst yx\" \"G (snd yx)\"] \\<psi>_in_hom"], ["proof (prove)\nusing this:\n  x \\<in> HomD.set (fst yx, G (snd yx))\n  DopxC.ide yx\n  \\<lbrakk>D.ide (fst yx); D.ide (G (snd yx))\\<rbrakk>\n  \\<Longrightarrow> HomD.\\<psi> (fst yx, G (snd yx))\n                    \\<in> HomD.set (fst yx, G (snd yx)) \\<rightarrow>\n                          D.hom (fst yx) (G (snd yx))\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> ?x\n                                     ?g : F\n     ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> (snd yx)\n                     (HomD.\\<psi> (fst yx, G (snd yx))\n                       x) : F (fst yx) \\<rightarrow>\\<^sub>C snd\n                        yx\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<psi> (snd yx)\n                   (HomD.\\<psi> (fst yx, G (snd yx))\n                     x) : F (fst yx) \\<rightarrow>\\<^sub>C snd\n                      yx\\<guillemotright>\n\ngoal (1 subgoal):\n 1. inD (\\<phi> (fst yx)\n          (HomC.\\<psi> (F (fst yx), snd yx)\n            (inC (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x))))) =\n    inD (\\<phi> (fst yx)\n          (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<psi> (snd yx)\n                   (HomD.\\<psi> (fst yx, G (snd yx))\n                     x) : F (fst yx) \\<rightarrow>\\<^sub>C snd\n                      yx\\<guillemotright>\n\ngoal (1 subgoal):\n 1. inD (\\<phi> (fst yx)\n          (HomC.\\<psi> (F (fst yx), snd yx)\n            (inC (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x))))) =\n    inD (\\<phi> (fst yx)\n          (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x)))", "by simp"], ["proof (state)\nthis:\n  inD (\\<phi> (fst yx)\n        (HomC.\\<psi> (F (fst yx), snd yx)\n          (inC (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x))))) =\n  inD (\\<phi> (fst yx)\n        (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inD (\\<phi> (fst yx)\n        (HomC.\\<psi> (F (fst yx), snd yx)\n          (inC (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x))))) =\n  inD (\\<phi> (fst yx)\n        (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       x =\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n        (inC \\<circ> \\<psi> (snd yx) \\<circ>\n         HomD.\\<psi> (fst yx, G (snd yx))))\n        x", "also"], ["proof (state)\nthis:\n  inD (\\<phi> (fst yx)\n        (HomC.\\<psi> (F (fst yx), snd yx)\n          (inC (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x))))) =\n  inD (\\<phi> (fst yx)\n        (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       x =\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n        (inC \\<circ> \\<psi> (snd yx) \\<circ>\n         HomD.\\<psi> (fst yx, G (snd yx))))\n        x", "have \"... = inD (HomD.\\<psi> (fst yx, G (snd yx)) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inD (\\<phi> (fst yx)\n          (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x))) =\n    inD (HomD.\\<psi> (fst yx, G (snd yx)) x)", "using x yx HomD.\\<psi>_mapsto [of \"fst yx\" \"G (snd yx)\"] \\<phi>_\\<psi>"], ["proof (prove)\nusing this:\n  x \\<in> HomD.set (fst yx, G (snd yx))\n  DopxC.ide yx\n  \\<lbrakk>D.ide (fst yx); D.ide (G (snd yx))\\<rbrakk>\n  \\<Longrightarrow> HomD.\\<psi> (fst yx, G (snd yx))\n                    \\<in> HomD.set (fst yx, G (snd yx)) \\<rightarrow>\n                          D.hom (fst yx) (G (snd yx))\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y (\\<psi> ?x ?g) = ?g\n\ngoal (1 subgoal):\n 1. inD (\\<phi> (fst yx)\n          (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x))) =\n    inD (HomD.\\<psi> (fst yx, G (snd yx)) x)", "by force"], ["proof (state)\nthis:\n  inD (\\<phi> (fst yx)\n        (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x))) =\n  inD (HomD.\\<psi> (fst yx, G (snd yx)) x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       x =\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n        (inC \\<circ> \\<psi> (snd yx) \\<circ>\n         HomD.\\<psi> (fst yx, G (snd yx))))\n        x", "also"], ["proof (state)\nthis:\n  inD (\\<phi> (fst yx)\n        (\\<psi> (snd yx) (HomD.\\<psi> (fst yx, G (snd yx)) x))) =\n  inD (HomD.\\<psi> (fst yx, G (snd yx)) x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       x =\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n        (inC \\<circ> \\<psi> (snd yx) \\<circ>\n         HomD.\\<psi> (fst yx, G (snd yx))))\n        x", "have \"... = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inD (HomD.\\<psi> (fst yx, G (snd yx)) x) = x", "using x yx inD_\\<psi>"], ["proof (prove)\nusing this:\n  x \\<in> HomD.set (fst yx, G (snd yx))\n  DopxC.ide yx\n  \\<lbrakk>D.ide ?b; D.ide ?a; ?x \\<in> inD ` D.hom ?b ?a\\<rbrakk>\n  \\<Longrightarrow> inD (HomD.\\<psi> (?b, ?a) ?x) = ?x\n\ngoal (1 subgoal):\n 1. inD (HomD.\\<psi> (fst yx, G (snd yx)) x) = x", "by simp"], ["proof (state)\nthis:\n  inD (HomD.\\<psi> (fst yx, G (snd yx)) x) = x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n       x =\n       (inD \\<circ> \\<phi> (fst yx) \\<circ>\n        HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n        (inC \\<circ> \\<psi> (snd yx) \\<circ>\n         HomD.\\<psi> (fst yx, G (snd yx))))\n        x", "finally"], ["proof (chain)\npicking this:\n  (inD \\<circ> \\<phi> (fst yx) \\<circ>\n   HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n   (inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))))\n   x =\n  x", "show \"x = ((inD o \\<phi> (fst yx) o HomC.\\<psi> (F (fst yx), snd yx))\n                                   o (inC o \\<psi> (snd yx) o HomD.\\<psi> (fst yx, G (snd yx)))) x\""], ["proof (prove)\nusing this:\n  (inD \\<circ> \\<phi> (fst yx) \\<circ>\n   HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n   (inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))))\n   x =\n  x\n\ngoal (1 subgoal):\n 1. x =\n    (inD \\<circ> \\<phi> (fst yx) \\<circ>\n     HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n     (inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))))\n     x", "by auto"], ["proof (state)\nthis:\n  x =\n  (inD \\<circ> \\<phi> (fst yx) \\<circ>\n   HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n   (inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))))\n   x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> HomD.set (fst yx, G (snd yx)) \\<Longrightarrow>\n  ?x =\n  (inD \\<circ> \\<phi> (fst yx) \\<circ>\n   HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n   (inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))))\n   ?x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n   (\\<lambda>x. x) =\n  S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n   (inD \\<circ> \\<phi> (fst yx) \\<circ>\n    HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n    (inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))))\n\ngoal (1 subgoal):\n 1. S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n     (inD \\<circ> \\<phi> (fst yx) \\<circ>\n      HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n      (inC \\<circ> \\<psi> (snd yx) \\<circ>\n       HomD.\\<psi> (fst yx, G (snd yx)))) =\n    S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n     (\\<lambda>x. x)", "thus ?thesis"], ["proof (prove)\nusing this:\n  S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n   (\\<lambda>x. x) =\n  S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n   (inD \\<circ> \\<phi> (fst yx) \\<circ>\n    HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n    (inC \\<circ> \\<psi> (snd yx) \\<circ> HomD.\\<psi> (fst yx, G (snd yx))))\n\ngoal (1 subgoal):\n 1. S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n     (inD \\<circ> \\<phi> (fst yx) \\<circ>\n      HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n      (inC \\<circ> \\<psi> (snd yx) \\<circ>\n       HomD.\\<psi> (fst yx, G (snd yx)))) =\n    S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n     (\\<lambda>x. x)", "by auto"], ["proof (state)\nthis:\n  S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n   (inD \\<circ> \\<phi> (fst yx) \\<circ>\n    HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n    (inC \\<circ> \\<psi> (snd yx) \\<circ>\n     HomD.\\<psi> (fst yx, G (snd yx)))) =\n  S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n   (\\<lambda>x. x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n   (inD \\<circ> \\<phi> (fst yx) \\<circ>\n    HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n    (inC \\<circ> \\<psi> (snd yx) \\<circ>\n     HomD.\\<psi> (fst yx, G (snd yx)))) =\n  S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n   (\\<lambda>x. x)\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Phi>.map yx) (\\<Psi>o yx))", "also"], ["proof (state)\nthis:\n  S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n   (inD \\<circ> \\<phi> (fst yx) \\<circ>\n    HomC.\\<psi> (F (fst yx), snd yx) \\<circ>\n    (inC \\<circ> \\<psi> (snd yx) \\<circ>\n     HomD.\\<psi> (fst yx, G (snd yx)))) =\n  S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n   (\\<lambda>x. x)\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Phi>.map yx) (\\<Psi>o yx))", "have \"... = S.mkIde (HomD.set (fst yx, G (snd yx)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n     (\\<lambda>x. x) =\n    S.mkIde (HomD.set (fst yx, G (snd yx)))", "using yx S.mkIde_as_mkArr HomD.set_subset_Univ"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  ?A \\<subseteq> S.Univ \\<Longrightarrow>\n  S.mkArr ?A ?A (\\<lambda>x. x) = S.mkIde ?A\n  \\<lbrakk>D.ide ?b; D.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomD.set (?b, ?a) \\<subseteq> S.Univ\n\ngoal (1 subgoal):\n 1. S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n     (\\<lambda>x. x) =\n    S.mkIde (HomD.set (fst yx, G (snd yx)))", "by force"], ["proof (state)\nthis:\n  S.mkArr (HomD.set (fst yx, G (snd yx))) (HomD.set (fst yx, G (snd yx)))\n   (\\<lambda>x. x) =\n  S.mkIde (HomD.set (fst yx, G (snd yx)))\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Phi>.map yx) (\\<Psi>o yx))", "finally"], ["proof (chain)\npicking this:\n  S.comp (\\<Phi>.map yx) (\\<Psi>o yx) =\n  S.mkIde (HomD.set (fst yx, G (snd yx)))", "have\n            \"S.comp (\\<Phi>.map yx) (\\<Psi>o yx) = S.mkIde (HomD.set (fst yx, G (snd yx)))\""], ["proof (prove)\nusing this:\n  S.comp (\\<Phi>.map yx) (\\<Psi>o yx) =\n  S.mkIde (HomD.set (fst yx, G (snd yx)))\n\ngoal (1 subgoal):\n 1. S.comp (\\<Phi>.map yx) (\\<Psi>o yx) =\n    S.mkIde (HomD.set (fst yx, G (snd yx)))", "by auto"], ["proof (state)\nthis:\n  S.comp (\\<Phi>.map yx) (\\<Psi>o yx) =\n  S.mkIde (HomD.set (fst yx, G (snd yx)))\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Phi>.map yx) (\\<Psi>o yx))", "thus ?thesis"], ["proof (prove)\nusing this:\n  S.comp (\\<Phi>.map yx) (\\<Psi>o yx) =\n  S.mkIde (HomD.set (fst yx, G (snd yx)))\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Phi>.map yx) (\\<Psi>o yx))", "using yx HomD.set_subset_Univ S.ide_mkIde"], ["proof (prove)\nusing this:\n  S.comp (\\<Phi>.map yx) (\\<Psi>o yx) =\n  S.mkIde (HomD.set (fst yx, G (snd yx)))\n  DopxC.ide yx\n  \\<lbrakk>D.ide ?b; D.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomD.set (?b, ?a) \\<subseteq> S.Univ\n  ?A \\<subseteq> S.Univ \\<Longrightarrow> S.ide (S.mkIde ?A)\n\ngoal (1 subgoal):\n 1. S.ide (S.comp (\\<Phi>.map yx) (\\<Psi>o yx))", "by simp"], ["proof (state)\nthis:\n  S.ide (S.comp (\\<Phi>.map yx) (\\<Psi>o yx))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.ide (S.comp (\\<Phi>.map yx) (\\<Psi>o yx))\n\ngoal (1 subgoal):\n 1. S.inverse_arrows (\\<Phi>.map yx) (\\<Psi>o yx)", "ultimately"], ["proof (chain)\npicking this:\n  S.antipar (\\<Phi>.map yx) (\\<Psi>o yx)\n  S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))\n  S.ide (S.comp (\\<Phi>.map yx) (\\<Psi>o yx))", "show ?thesis"], ["proof (prove)\nusing this:\n  S.antipar (\\<Phi>.map yx) (\\<Psi>o yx)\n  S.ide (S.comp (\\<Psi>o yx) (\\<Phi>.map yx))\n  S.ide (S.comp (\\<Phi>.map yx) (\\<Psi>o yx))\n\ngoal (1 subgoal):\n 1. S.inverse_arrows (\\<Phi>.map yx) (\\<Psi>o yx)", "by auto"], ["proof (state)\nthis:\n  S.inverse_arrows (\\<Phi>.map yx) (\\<Psi>o yx)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation \\<Phi>: natural_isomorphism DopxC.comp S.comp\n                                          Hom_FopxC.map Hom_DopxG.map \\<Phi>.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism DopxC.comp S.comp Hom_FopxC.map Hom_DopxG.map\n     \\<Phi>.map", "apply (unfold_locales)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. DopxC.ide a \\<Longrightarrow> S.iso (\\<Phi>.map a)", "using \\<Phi>_inv"], ["proof (prove)\nusing this:\n  DopxC.ide ?yx \\<Longrightarrow>\n  S.inverse_arrows (\\<Phi>.map ?yx) (\\<Psi>o ?yx)\n\ngoal (1 subgoal):\n 1. \\<And>a. DopxC.ide a \\<Longrightarrow> S.iso (\\<Phi>.map a)", "by blast"], ["", "interpretation \\<Psi>: inverse_transformation DopxC.comp S.comp\n                           Hom_FopxC.map Hom_DopxG.map \\<Phi>.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformation DopxC.comp S.comp Hom_FopxC.map Hom_DopxG.map\n     \\<Phi>.map", ".."], ["", "interpretation \\<Phi>\\<Psi>: inverse_transformations DopxC.comp S.comp\n                           Hom_FopxC.map Hom_DopxG.map \\<Phi>.map \\<Psi>.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_transformations DopxC.comp S.comp Hom_FopxC.map Hom_DopxG.map\n     \\<Phi>.map \\<Psi>.map", "using \\<Psi>.inverts_components"], ["proof (prove)\nusing this:\n  DopxC.ide ?a \\<Longrightarrow>\n  S.inverse_arrows (\\<Phi>.map ?a) (\\<Psi>.map ?a)\n\ngoal (1 subgoal):\n 1. inverse_transformations DopxC.comp S.comp Hom_FopxC.map Hom_DopxG.map\n     \\<Phi>.map \\<Psi>.map", "by (unfold_locales, simp)"], ["", "abbreviation \\<Phi> where \"\\<Phi> \\<equiv> \\<Phi>.map\""], ["", "abbreviation \\<Psi> where \"\\<Psi> \\<equiv> \\<Psi>.map\""], ["", "abbreviation HomC where \"HomC \\<equiv> HomC.map\""], ["", "abbreviation \\<phi>C where \"\\<phi>C \\<equiv> \\<lambda>_. inC\""], ["", "abbreviation HomD where \"HomD \\<equiv> HomD.map\""], ["", "abbreviation \\<phi>D where \"\\<phi>D \\<equiv> \\<lambda>_. inD\""], ["", "theorem induces_hom_adjunction: \"hom_adjunction C D S.comp \\<phi>C \\<phi>D F G \\<Phi> \\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) S.comp \\<phi>C\n     \\<phi>D F G \\<Phi> \\<Psi>", "using F.is_extensional"], ["proof (prove)\nusing this:\n  \\<not> D.arr ?f \\<Longrightarrow> F ?f = C.null\n\ngoal (1 subgoal):\n 1. hom_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) S.comp \\<phi>C\n     \\<phi>D F G \\<Phi> \\<Psi>", "by (unfold_locales, auto)"], ["", "lemma \\<Psi>_simp:\n    assumes yx: \"DopxC.ide yx\"\n    shows \"\\<Psi> yx = S.mkArr (HomD.set (fst yx, G (snd yx))) (HomC.set (F (fst yx), snd yx))\n                          (inC o \\<psi> (snd yx) o HomD.\\<psi> (fst yx, G (snd yx)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> yx = \\<Psi>o yx", "using assms \\<Phi>o_def \\<Phi>_inv S.inverse_unique"], ["proof (prove)\nusing this:\n  DopxC.ide yx\n  \\<Phi>o ?yx =\n  S.mkArr (HomC.set (F (fst ?yx), snd ?yx))\n   (HomD.set (fst ?yx, G (snd ?yx)))\n   (inD \\<circ> \\<phi> (fst ?yx) \\<circ> HomC.\\<psi> (F (fst ?yx), snd ?yx))\n  DopxC.ide ?yx \\<Longrightarrow>\n  S.inverse_arrows (\\<Phi> ?yx) (\\<Psi>o ?yx)\n  S.inverse_arrows ?f ?g \\<Longrightarrow> S.inv ?f = ?g\n\ngoal (1 subgoal):\n 1. \\<Psi> yx = \\<Psi>o yx", "by simp"], ["", "text\\<open>\n      The original @{term \\<phi>} and @{term \\<psi>} can be recovered from @{term \\<Phi>} and @{term \\<Psi>}.\n\\<close>"], ["", "interpretation \\<Phi>: set_valued_transformation DopxC.comp S.comp\n                                                Hom_FopxC.map Hom_DopxG.map \\<Phi>.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_valued_transformation DopxC.comp S.comp Hom_FopxC.map Hom_DopxG.map\n     \\<Phi>", ".."], ["", "interpretation \\<Psi>: set_valued_transformation DopxC.comp S.comp\n                                                Hom_DopxG.map Hom_FopxC.map \\<Psi>.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_valued_transformation DopxC.comp S.comp Hom_DopxG.map Hom_FopxC.map\n     \\<Psi>", ".."], ["", "lemma \\<phi>_in_terms_of_\\<Phi>':\n    assumes y: \"D.ide y\" and f: \"\\<guillemotleft>f: F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<phi> y f = (HomD.\\<psi> (y, G x) o \\<Phi>.FUN (y, x) o inC) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y f =\n    (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> y f =\n    (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f", "have x: \"C.ide x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide x", "using f"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. C.ide x", "by auto"], ["proof (state)\nthis:\n  C.ide x\n\ngoal (1 subgoal):\n 1. \\<phi> y f =\n    (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f", "have 1: \"S.arr (\\<Phi> (y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (\\<Phi> (y, x))", "using x y"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n\ngoal (1 subgoal):\n 1. S.arr (\\<Phi> (y, x))", "by fastforce"], ["proof (state)\nthis:\n  S.arr (\\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<phi> y f =\n    (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f", "have 2: \"\\<Phi> (y, x) = S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                                  (inD o \\<phi> y o HomC.\\<psi> (F y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (inD \\<circ> \\<phi> y \\<circ> HomC.\\<psi> (F y, x))", "using x y \\<Phi>o_def"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<Phi>o ?yx =\n  S.mkArr (HomC.set (F (fst ?yx), snd ?yx))\n   (HomD.set (fst ?yx, G (snd ?yx)))\n   (inD \\<circ> \\<phi> (fst ?yx) \\<circ> HomC.\\<psi> (F (fst ?yx), snd ?yx))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (inD \\<circ> \\<phi> y \\<circ> HomC.\\<psi> (F y, x))", "by auto"], ["proof (state)\nthis:\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (inD \\<circ> \\<phi> y \\<circ> HomC.\\<psi> (F y, x))\n\ngoal (1 subgoal):\n 1. \\<phi> y f =\n    (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f", "have \"(HomD.\\<psi> (y, G x) o \\<Phi>.FUN (y, x) o inC) f =\n              HomD.\\<psi> (y, G x)\n                     (restrict (inD o \\<phi> y o HomC.\\<psi> (F y, x)) (HomC.set (F y, x)) (inC f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f =\n    HomD.\\<psi> (y, G x)\n     (restrict (inD \\<circ> \\<phi> y \\<circ> HomC.\\<psi> (F y, x))\n       (HomC.set (F y, x)) (inC f))", "using 1 2"], ["proof (prove)\nusing this:\n  S.arr (\\<Phi> (y, x))\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (inD \\<circ> \\<phi> y \\<circ> HomC.\\<psi> (F y, x))\n\ngoal (1 subgoal):\n 1. (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f =\n    HomD.\\<psi> (y, G x)\n     (restrict (inD \\<circ> \\<phi> y \\<circ> HomC.\\<psi> (F y, x))\n       (HomC.set (F y, x)) (inC f))", "by simp"], ["proof (state)\nthis:\n  (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f =\n  HomD.\\<psi> (y, G x)\n   (restrict (inD \\<circ> \\<phi> y \\<circ> HomC.\\<psi> (F y, x))\n     (HomC.set (F y, x)) (inC f))\n\ngoal (1 subgoal):\n 1. \\<phi> y f =\n    (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f", "also"], ["proof (state)\nthis:\n  (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f =\n  HomD.\\<psi> (y, G x)\n   (restrict (inD \\<circ> \\<phi> y \\<circ> HomC.\\<psi> (F y, x))\n     (HomC.set (F y, x)) (inC f))\n\ngoal (1 subgoal):\n 1. \\<phi> y f =\n    (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f", "have \"... = \\<phi> y f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HomD.\\<psi> (y, G x)\n     (restrict (inD \\<circ> \\<phi> y \\<circ> HomC.\\<psi> (F y, x))\n       (HomC.set (F y, x)) (inC f)) =\n    \\<phi> y f", "using x y f HomC.\\<phi>_mapsto \\<phi>_in_hom HomC.\\<psi>_mapsto C.ide_in_hom D.ide_in_hom"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>C.ide ?b; C.ide ?a\\<rbrakk>\n  \\<Longrightarrow> inC \\<in> C.hom ?b ?a \\<rightarrow> HomC.set (?b, ?a)\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>D G\n                              ?x\\<guillemotright>\n  \\<lbrakk>C.ide ?b; C.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomC.\\<psi> (?b, ?a)\n                    \\<in> HomC.set (?b, ?a) \\<rightarrow> C.hom ?b ?a\n  C.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>C ?a\\<guillemotright>\n  D.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>D ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. HomD.\\<psi> (y, G x)\n     (restrict (inD \\<circ> \\<phi> y \\<circ> HomC.\\<psi> (F y, x))\n       (HomC.set (F y, x)) (inC f)) =\n    \\<phi> y f", "by auto"], ["proof (state)\nthis:\n  HomD.\\<psi> (y, G x)\n   (restrict (inD \\<circ> \\<phi> y \\<circ> HomC.\\<psi> (F y, x))\n     (HomC.set (F y, x)) (inC f)) =\n  \\<phi> y f\n\ngoal (1 subgoal):\n 1. \\<phi> y f =\n    (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f", "finally"], ["proof (chain)\npicking this:\n  (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f =\n  \\<phi> y f", "show ?thesis"], ["proof (prove)\nusing this:\n  (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f =\n  \\<phi> y f\n\ngoal (1 subgoal):\n 1. \\<phi> y f =\n    (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f", "by auto"], ["proof (state)\nthis:\n  \\<phi> y f =\n  (HomD.\\<psi> (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> inC) f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<psi>_in_terms_of_\\<Psi>':\n    assumes x: \"C.ide x\" and g: \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<psi> x g = (HomC.\\<psi> (F y, x) o \\<Psi>.FUN (y, x) o inD) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x g =\n    (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> x g =\n    (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g", "have y: \"D.ide y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.ide y", "using g"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. D.ide y", "by auto"], ["proof (state)\nthis:\n  D.ide y\n\ngoal (1 subgoal):\n 1. \\<psi> x g =\n    (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g", "have 1: \"S.arr (\\<Psi> (y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (\\<Psi> (y, x))", "using x y \\<Psi>.preserves_reflects_arr [of \"(y, x)\"]"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  S.arr (\\<Psi> (y, x)) = DopxC.arr (y, x)\n\ngoal (1 subgoal):\n 1. S.arr (\\<Psi> (y, x))", "by simp"], ["proof (state)\nthis:\n  S.arr (\\<Psi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<psi> x g =\n    (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g", "have 2: \"\\<Psi> (y, x) = S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                                   (inC o \\<psi> x o HomD.\\<psi> (y, G x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (inC \\<circ> \\<psi> x \\<circ> HomD.\\<psi> (y, G x))", "using x y \\<Psi>_simp"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  DopxC.ide ?yx \\<Longrightarrow> \\<Psi> ?yx = \\<Psi>o ?yx\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (inC \\<circ> \\<psi> x \\<circ> HomD.\\<psi> (y, G x))", "by force"], ["proof (state)\nthis:\n  \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n   (inC \\<circ> \\<psi> x \\<circ> HomD.\\<psi> (y, G x))\n\ngoal (1 subgoal):\n 1. \\<psi> x g =\n    (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g", "have \"(HomC.\\<psi> (F y, x) o \\<Psi>.FUN (y, x) o inD) g =\n              HomC.\\<psi> (F y, x)\n                     (restrict (inC o \\<psi> x o HomD.\\<psi> (y, G x)) (HomD.set (y, G x)) (inD g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g =\n    HomC.\\<psi> (F y, x)\n     (restrict (inC \\<circ> \\<psi> x \\<circ> HomD.\\<psi> (y, G x))\n       (HomD.set (y, G x)) (inD g))", "using 1 2"], ["proof (prove)\nusing this:\n  S.arr (\\<Psi> (y, x))\n  \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n   (inC \\<circ> \\<psi> x \\<circ> HomD.\\<psi> (y, G x))\n\ngoal (1 subgoal):\n 1. (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g =\n    HomC.\\<psi> (F y, x)\n     (restrict (inC \\<circ> \\<psi> x \\<circ> HomD.\\<psi> (y, G x))\n       (HomD.set (y, G x)) (inD g))", "by simp"], ["proof (state)\nthis:\n  (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g =\n  HomC.\\<psi> (F y, x)\n   (restrict (inC \\<circ> \\<psi> x \\<circ> HomD.\\<psi> (y, G x))\n     (HomD.set (y, G x)) (inD g))\n\ngoal (1 subgoal):\n 1. \\<psi> x g =\n    (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g", "also"], ["proof (state)\nthis:\n  (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g =\n  HomC.\\<psi> (F y, x)\n   (restrict (inC \\<circ> \\<psi> x \\<circ> HomD.\\<psi> (y, G x))\n     (HomD.set (y, G x)) (inD g))\n\ngoal (1 subgoal):\n 1. \\<psi> x g =\n    (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g", "have \"... = \\<psi> x g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HomC.\\<psi> (F y, x)\n     (restrict (inC \\<circ> \\<psi> x \\<circ> HomD.\\<psi> (y, G x))\n       (HomD.set (y, G x)) (inD g)) =\n    \\<psi> x g", "using x y g HomD.\\<phi>_mapsto \\<psi>_in_hom HomD.\\<psi>_mapsto C.ide_in_hom D.ide_in_hom"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>D.ide ?b; D.ide ?a\\<rbrakk>\n  \\<Longrightarrow> inD \\<in> D.hom ?b ?a \\<rightarrow> HomD.set (?b, ?a)\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> ?x\n                                     ?g : F\n     ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\n  \\<lbrakk>D.ide ?b; D.ide ?a\\<rbrakk>\n  \\<Longrightarrow> HomD.\\<psi> (?b, ?a)\n                    \\<in> HomD.set (?b, ?a) \\<rightarrow> D.hom ?b ?a\n  C.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>C ?a\\<guillemotright>\n  D.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>D ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. HomC.\\<psi> (F y, x)\n     (restrict (inC \\<circ> \\<psi> x \\<circ> HomD.\\<psi> (y, G x))\n       (HomD.set (y, G x)) (inD g)) =\n    \\<psi> x g", "by auto"], ["proof (state)\nthis:\n  HomC.\\<psi> (F y, x)\n   (restrict (inC \\<circ> \\<psi> x \\<circ> HomD.\\<psi> (y, G x))\n     (HomD.set (y, G x)) (inD g)) =\n  \\<psi> x g\n\ngoal (1 subgoal):\n 1. \\<psi> x g =\n    (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g", "finally"], ["proof (chain)\npicking this:\n  (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g =\n  \\<psi> x g", "show ?thesis"], ["proof (prove)\nusing this:\n  (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g =\n  \\<psi> x g\n\ngoal (1 subgoal):\n 1. \\<psi> x g =\n    (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g", "by auto"], ["proof (state)\nthis:\n  \\<psi> x g =\n  (HomC.\\<psi> (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> inD) g\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "section \"Hom-Adjunctions Induce Meta-Adjunctions\""], ["", "context hom_adjunction\n  begin"], ["", "definition \\<phi> :: \"'d \\<Rightarrow> 'c \\<Rightarrow> 'd\"\n    where\n      \"\\<phi> y h = (HomD.\\<psi> (y, G (C.cod h)) o \\<Phi>.FUN (y, C.cod h) o \\<phi>C (F y, C.cod h)) h\""], ["", "definition \\<psi> :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'c\"\n    where\n      \"\\<psi> x h = (HomC.\\<psi> (F (D.dom h), x) o \\<Psi>.FUN (D.dom h, x) o \\<phi>D (D.dom h, G x)) h\""], ["", "lemma Hom_FopxC_map_simp:\n    assumes \"DopxC.arr gf\"\n    shows \"Hom_FopxC.map gf =\n              S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n                      (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))            \n                      (\\<phi>C (F (D.dom (fst gf)), C.cod (snd gf))\n                           o (\\<lambda>h. snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf))\n                           o HomC.\\<psi> (F (D.cod (fst gf)), C.dom (snd gf)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hom_FopxC.map gf =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n     (\\<phi>C (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      \\<psi>C (F (D.cod (fst gf)), C.dom (snd gf)))", "using assms HomC.map_def"], ["proof (prove)\nusing this:\n  DopxC.arr gf\n  HomC.map ?gf =\n  (if CopxC.arr ?gf\n   then S.mkArr (HomC.set (CopxC.dom ?gf)) (HomC.set (CopxC.cod ?gf))\n         (\\<phi>C (CopxC.cod ?gf) \\<circ>\n          (\\<lambda>h.\n              snd ?gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C fst ?gf) \\<circ>\n          \\<psi>C (CopxC.dom ?gf))\n   else S.null)\n\ngoal (1 subgoal):\n 1. Hom_FopxC.map gf =\n    S.mkArr (HomC.set (F (D.cod (fst gf)), C.dom (snd gf)))\n     (HomC.set (F (D.dom (fst gf)), C.cod (snd gf)))\n     (\\<phi>C (F (D.dom (fst gf)), C.cod (snd gf)) \\<circ>\n      (\\<lambda>h.\n          snd gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst gf)) \\<circ>\n      \\<psi>C (F (D.cod (fst gf)), C.dom (snd gf)))", "by simp"], ["", "lemma Hom_DopxG_map_simp:\n    assumes \"DopxC.arr gf\"\n    shows \"Hom_DopxG.map gf =\n              S.mkArr (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n                      (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))           \n                      (\\<phi>D (D.dom (fst gf), G (C.cod (snd gf)))\n                           o (\\<lambda>h. G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf)\n                           o HomD.\\<psi> (D.cod (fst gf), G (C.dom (snd gf))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hom_DopxG.map gf =\n    S.mkArr (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (\\<phi>D (D.dom (fst gf), G (C.cod (snd gf))) \\<circ>\n      (\\<lambda>h.\n          G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n      \\<psi>D (D.cod (fst gf), G (C.dom (snd gf))))", "using assms HomD.map_def"], ["proof (prove)\nusing this:\n  DopxC.arr gf\n  HomD.map ?gf =\n  (if DopxD.arr ?gf\n   then S.mkArr (HomD.set (DopxD.dom ?gf)) (HomD.set (DopxD.cod ?gf))\n         (\\<phi>D (DopxD.cod ?gf) \\<circ>\n          (\\<lambda>h.\n              snd ?gf \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst ?gf) \\<circ>\n          \\<psi>D (DopxD.dom ?gf))\n   else S.null)\n\ngoal (1 subgoal):\n 1. Hom_DopxG.map gf =\n    S.mkArr (HomD.set (D.cod (fst gf), G (C.dom (snd gf))))\n     (HomD.set (D.dom (fst gf), G (C.cod (snd gf))))\n     (\\<phi>D (D.dom (fst gf), G (C.cod (snd gf))) \\<circ>\n      (\\<lambda>h.\n          G (snd gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst gf) \\<circ>\n      \\<psi>D (D.cod (fst gf), G (C.dom (snd gf))))", "by simp"], ["", "lemma \\<Phi>_Fun_mapsto:\n    assumes \"D.ide y\" and \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\"\n    shows \"\\<Phi>.FUN (y, x) \\<in> HomC.set (F y, x) \\<rightarrow> HomD.set (y, G x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Phi>.FUN (y, x)\n    \\<in> HomC.set (F y, x) \\<rightarrow> HomD.set (y, G x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Phi>.FUN (y, x)\n    \\<in> HomC.set (F y, x) \\<rightarrow> HomD.set (y, G x)", "have \"S.arr (\\<Phi> (y, x)) \\<and> \\<Phi>.DOM (y, x) = HomC.set (F y, x) \\<and>\n                                \\<Phi>.COD (y, x) = HomD.set (y, G x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (\\<Phi> (y, x)) \\<and>\n    \\<Phi>.DOM (y, x) = HomC.set (F y, x) \\<and>\n    \\<Phi>.COD (y, x) = HomD.set (y, G x)", "using assms HomC.set_map HomD.set_map"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>C.ide ?a; C.ide ?b\\<rbrakk>\n  \\<Longrightarrow> S.set (HomC.map (?b, ?a)) = HomC.set (?b, ?a)\n  \\<lbrakk>D.ide ?a; D.ide ?b\\<rbrakk>\n  \\<Longrightarrow> S.set (HomD.map (?b, ?a)) = HomD.set (?b, ?a)\n\ngoal (1 subgoal):\n 1. S.arr (\\<Phi> (y, x)) \\<and>\n    \\<Phi>.DOM (y, x) = HomC.set (F y, x) \\<and>\n    \\<Phi>.COD (y, x) = HomD.set (y, G x)", "by auto"], ["proof (state)\nthis:\n  S.arr (\\<Phi> (y, x)) \\<and>\n  \\<Phi>.DOM (y, x) = HomC.set (F y, x) \\<and>\n  \\<Phi>.COD (y, x) = HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<Phi>.FUN (y, x)\n    \\<in> HomC.set (F y, x) \\<rightarrow> HomD.set (y, G x)", "thus ?thesis"], ["proof (prove)\nusing this:\n  S.arr (\\<Phi> (y, x)) \\<and>\n  \\<Phi>.DOM (y, x) = HomC.set (F y, x) \\<and>\n  \\<Phi>.COD (y, x) = HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<Phi>.FUN (y, x)\n    \\<in> HomC.set (F y, x) \\<rightarrow> HomD.set (y, G x)", "using S.Fun_mapsto"], ["proof (prove)\nusing this:\n  S.arr (\\<Phi> (y, x)) \\<and>\n  \\<Phi>.DOM (y, x) = HomC.set (F y, x) \\<and>\n  \\<Phi>.COD (y, x) = HomD.set (y, G x)\n  S.arr ?f \\<Longrightarrow>\n  S.Fun ?f\n  \\<in> extensional (S.Dom ?f) \\<inter> (S.Dom ?f \\<rightarrow> S.Cod ?f)\n\ngoal (1 subgoal):\n 1. \\<Phi>.FUN (y, x)\n    \\<in> HomC.set (F y, x) \\<rightarrow> HomD.set (y, G x)", "by blast"], ["proof (state)\nthis:\n  \\<Phi>.FUN (y, x) \\<in> HomC.set (F y, x) \\<rightarrow> HomD.set (y, G x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<phi>_mapsto:\n    assumes y: \"D.ide y\"\n    shows \"\\<phi> y \\<in> C.hom (F y) x \\<rightarrow> D.hom y (G x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y \\<in> C.hom (F y) x \\<rightarrow> D.hom y (G x)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> C.hom (F y) x \\<Longrightarrow>\n       \\<phi> y xa \\<in> D.hom y (G x)", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> C.hom (F y) x \\<Longrightarrow>\n       \\<phi> y xa \\<in> D.hom y (G x)", "assume h: \"h \\<in> C.hom (F y) x\""], ["proof (state)\nthis:\n  h \\<in> C.hom (F y) x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> C.hom (F y) x \\<Longrightarrow>\n       \\<phi> y xa \\<in> D.hom y (G x)", "hence 1: \" \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (prove)\nusing this:\n  h \\<in> C.hom (F y) x\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "by simp"], ["proof (state)\nthis:\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> C.hom (F y) x \\<Longrightarrow>\n       \\<phi> y xa \\<in> D.hom y (G x)", "show \"\\<phi> y h \\<in> D.hom y (G x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y h \\<in> D.hom y (G x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> y h \\<in> D.hom y (G x)", "have \"\\<phi>C (F y, x) h \\<in> HomC.set (F y, x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)", "using y h 1 HomC.\\<phi>_mapsto [of \"F y\" x]"], ["proof (prove)\nusing this:\n  D.ide y\n  h \\<in> C.hom (F y) x\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>C.ide (F y); C.ide x\\<rbrakk>\n  \\<Longrightarrow> \\<phi>C (F y, x)\n                    \\<in> C.hom (F y) x \\<rightarrow> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)", "by fastforce"], ["proof (state)\nthis:\n  \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. \\<phi> y h \\<in> D.hom y (G x)", "hence \"\\<Phi>.FUN (y, x) (\\<phi>C (F y, x) h) \\<in> HomD.set (y, G x)\""], ["proof (prove)\nusing this:\n  \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. \\<Phi>.FUN (y, x) (\\<phi>C (F y, x) h) \\<in> HomD.set (y, G x)", "using h y \\<Phi>_Fun_mapsto"], ["proof (prove)\nusing this:\n  \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)\n  h \\<in> C.hom (F y) x\n  D.ide y\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<Phi>.FUN (?y, ?x)\n                    \\<in> HomC.set (F ?y, ?x) \\<rightarrow>\n                          HomD.set (?y, G ?x)\n\ngoal (1 subgoal):\n 1. \\<Phi>.FUN (y, x) (\\<phi>C (F y, x) h) \\<in> HomD.set (y, G x)", "by auto"], ["proof (state)\nthis:\n  \\<Phi>.FUN (y, x) (\\<phi>C (F y, x) h) \\<in> HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<phi> y h \\<in> D.hom y (G x)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Phi>.FUN (y, x) (\\<phi>C (F y, x) h) \\<in> HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<phi> y h \\<in> D.hom y (G x)", "using y h 1 \\<phi>_def HomC.\\<phi>_mapsto HomD.\\<psi>_mapsto [of y \"G x\"]"], ["proof (prove)\nusing this:\n  \\<Phi>.FUN (y, x) (\\<phi>C (F y, x) h) \\<in> HomD.set (y, G x)\n  D.ide y\n  h \\<in> C.hom (F y) x\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<phi> ?y ?h =\n  (\\<psi>D (?y, G (C.cod ?h)) \\<circ> \\<Phi>.FUN (?y, C.cod ?h) \\<circ>\n   \\<phi>C (F ?y, C.cod ?h))\n   ?h\n  \\<lbrakk>C.ide ?b; C.ide ?a\\<rbrakk>\n  \\<Longrightarrow> \\<phi>C (?b, ?a)\n                    \\<in> C.hom ?b ?a \\<rightarrow> HomC.set (?b, ?a)\n  \\<lbrakk>D.ide y; D.ide (G x)\\<rbrakk>\n  \\<Longrightarrow> \\<psi>D (y, G x)\n                    \\<in> HomD.set (y, G x) \\<rightarrow> D.hom y (G x)\n\ngoal (1 subgoal):\n 1. \\<phi> y h \\<in> D.hom y (G x)", "by fastforce"], ["proof (state)\nthis:\n  \\<phi> y h \\<in> D.hom y (G x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<phi> y h \\<in> D.hom y (G x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<Phi>_simp:\n    assumes \"D.ide y\" and \"C.ide x\"\n    shows \"S.arr (\\<Phi> (y, x))\"\n    and \"\\<Phi> (y, x) = S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                            (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (\\<Phi> (y, x)) &&&\n    \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. S.arr (\\<Phi> (y, x))\n 2. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "show 1: \"S.arr (\\<Phi> (y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (\\<Phi> (y, x))", "using assms"], ["proof (prove)\nusing this:\n  D.ide y\n  C.ide x\n\ngoal (1 subgoal):\n 1. S.arr (\\<Phi> (y, x))", "by auto"], ["proof (state)\nthis:\n  S.arr (\\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "hence \"\\<Phi> (y, x) = S.mkArr (\\<Phi>.DOM (y, x)) (\\<Phi>.COD (y, x)) (\\<Phi>.FUN (y, x))\""], ["proof (prove)\nusing this:\n  S.arr (\\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (\\<Phi>.DOM (y, x)) (\\<Phi>.COD (y, x)) (\\<Phi>.FUN (y, x))", "using S.mkArr_Fun"], ["proof (prove)\nusing this:\n  S.arr (\\<Phi> (y, x))\n  S.arr ?f \\<Longrightarrow> S.mkArr (S.Dom ?f) (S.Cod ?f) (S.Fun ?f) = ?f\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (\\<Phi>.DOM (y, x)) (\\<Phi>.COD (y, x)) (\\<Phi>.FUN (y, x))", "by metis"], ["proof (state)\nthis:\n  \\<Phi> (y, x) =\n  S.mkArr (\\<Phi>.DOM (y, x)) (\\<Phi>.COD (y, x)) (\\<Phi>.FUN (y, x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "also"], ["proof (state)\nthis:\n  \\<Phi> (y, x) =\n  S.mkArr (\\<Phi>.DOM (y, x)) (\\<Phi>.COD (y, x)) (\\<Phi>.FUN (y, x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "have \"... = S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x)) (\\<Phi>.FUN (y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (\\<Phi>.DOM (y, x)) (\\<Phi>.COD (y, x)) (\\<Phi>.FUN (y, x)) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x)) (\\<Phi>.FUN (y, x))", "using assms HomC.set_map HomD.set_map"], ["proof (prove)\nusing this:\n  D.ide y\n  C.ide x\n  \\<lbrakk>C.ide ?a; C.ide ?b\\<rbrakk>\n  \\<Longrightarrow> S.set (HomC.map (?b, ?a)) = HomC.set (?b, ?a)\n  \\<lbrakk>D.ide ?a; D.ide ?b\\<rbrakk>\n  \\<Longrightarrow> S.set (HomD.map (?b, ?a)) = HomD.set (?b, ?a)\n\ngoal (1 subgoal):\n 1. S.mkArr (\\<Phi>.DOM (y, x)) (\\<Phi>.COD (y, x)) (\\<Phi>.FUN (y, x)) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x)) (\\<Phi>.FUN (y, x))", "by fastforce"], ["proof (state)\nthis:\n  S.mkArr (\\<Phi>.DOM (y, x)) (\\<Phi>.COD (y, x)) (\\<Phi>.FUN (y, x)) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x)) (\\<Phi>.FUN (y, x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "also"], ["proof (state)\nthis:\n  S.mkArr (\\<Phi>.DOM (y, x)) (\\<Phi>.COD (y, x)) (\\<Phi>.FUN (y, x)) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x)) (\\<Phi>.FUN (y, x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "have \"... = S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                               (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x)) (\\<Phi>.FUN (y, x)) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "proof (intro S.mkArr_eqI')"], ["proof (state)\ngoal (2 subgoals):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x)) (\\<Phi>.FUN (y, x)))\n 2. \\<And>xa.\n       xa \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       \\<Phi>.FUN (y, x) xa =\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) xa", "show 2: \"S.arr (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x)) (\\<Phi>.FUN (y, x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x)) (\\<Phi>.FUN (y, x)))", "using 1 calculation"], ["proof (prove)\nusing this:\n  S.arr (\\<Phi> (y, x))\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x)) (\\<Phi>.FUN (y, x))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x)) (\\<Phi>.FUN (y, x)))", "by argo"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x)) (\\<Phi>.FUN (y, x)))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       \\<Phi>.FUN (y, x) xa =\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) xa", "show \"\\<And>h. h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n                    \\<Phi>.FUN (y, x) h = (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x)) h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       \\<Phi>.FUN (y, x) h =\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       \\<Phi>.FUN (y, x) h =\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       \\<Phi>.FUN (y, x) h =\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h", "assume h: \"h \\<in> HomC.set (F y, x)\""], ["proof (state)\nthis:\n  h \\<in> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       \\<Phi>.FUN (y, x) h =\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h", "hence \"\\<guillemotleft>\\<psi>C (F y, x) h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (prove)\nusing this:\n  h \\<in> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi>C (F y, x)\n                     h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "using assms HomC.\\<psi>_mapsto [of \"F y\" x]"], ["proof (prove)\nusing this:\n  h \\<in> HomC.set (F y, x)\n  D.ide y\n  C.ide x\n  \\<lbrakk>C.ide (F y); C.ide x\\<rbrakk>\n  \\<Longrightarrow> \\<psi>C (F y, x)\n                    \\<in> HomC.set (F y, x) \\<rightarrow> C.hom (F y) x\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi>C (F y, x)\n                     h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<psi>C (F y, x)\n                   h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       \\<Phi>.FUN (y, x) h =\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h", "hence \"(\\<phi>D (y, G x) o \\<phi> y o HomC.\\<psi> (F y, x)) h =\n                   \\<phi>D (y, G x) (\\<psi>D (y, G x) (\\<Phi>.FUN (y, x) (\\<phi>C (F y, x) (\\<psi>C (F y, x) h))))\""], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<psi>C (F y, x)\n                   h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h =\n    \\<phi>D (y, G x)\n     (\\<psi>D (y, G x)\n       (\\<Phi>.FUN (y, x) (\\<phi>C (F y, x) (\\<psi>C (F y, x) h))))", "using h \\<phi>_def"], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<psi>C (F y, x)\n                   h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  h \\<in> HomC.set (F y, x)\n  \\<phi> ?y ?h =\n  (\\<psi>D (?y, G (C.cod ?h)) \\<circ> \\<Phi>.FUN (?y, C.cod ?h) \\<circ>\n   \\<phi>C (F ?y, C.cod ?h))\n   ?h\n\ngoal (1 subgoal):\n 1. (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h =\n    \\<phi>D (y, G x)\n     (\\<psi>D (y, G x)\n       (\\<Phi>.FUN (y, x) (\\<phi>C (F y, x) (\\<psi>C (F y, x) h))))", "by auto"], ["proof (state)\nthis:\n  (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h =\n  \\<phi>D (y, G x)\n   (\\<psi>D (y, G x)\n     (\\<Phi>.FUN (y, x) (\\<phi>C (F y, x) (\\<psi>C (F y, x) h))))\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       \\<Phi>.FUN (y, x) h =\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h", "also"], ["proof (state)\nthis:\n  (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h =\n  \\<phi>D (y, G x)\n   (\\<psi>D (y, G x)\n     (\\<Phi>.FUN (y, x) (\\<phi>C (F y, x) (\\<psi>C (F y, x) h))))\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       \\<Phi>.FUN (y, x) h =\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h", "have \"... = \\<phi>D (y, G x) (\\<psi>D (y, G x) (\\<Phi>.FUN (y, x) h))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>D (y, G x)\n     (\\<psi>D (y, G x)\n       (\\<Phi>.FUN (y, x) (\\<phi>C (F y, x) (\\<psi>C (F y, x) h)))) =\n    \\<phi>D (y, G x) (\\<psi>D (y, G x) (\\<Phi>.FUN (y, x) h))", "using assms h HomC.\\<phi>_\\<psi> \\<Phi>_Fun_mapsto"], ["proof (prove)\nusing this:\n  D.ide y\n  C.ide x\n  h \\<in> HomC.set (F y, x)\n  \\<lbrakk>C.ide ?b; C.ide ?a; ?x \\<in> HomC.set (?b, ?a)\\<rbrakk>\n  \\<Longrightarrow> \\<phi>C (?b, ?a) (\\<psi>C (?b, ?a) ?x) = ?x\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<Phi>.FUN (?y, ?x)\n                    \\<in> HomC.set (F ?y, ?x) \\<rightarrow>\n                          HomD.set (?y, G ?x)\n\ngoal (1 subgoal):\n 1. \\<phi>D (y, G x)\n     (\\<psi>D (y, G x)\n       (\\<Phi>.FUN (y, x) (\\<phi>C (F y, x) (\\<psi>C (F y, x) h)))) =\n    \\<phi>D (y, G x) (\\<psi>D (y, G x) (\\<Phi>.FUN (y, x) h))", "by simp"], ["proof (state)\nthis:\n  \\<phi>D (y, G x)\n   (\\<psi>D (y, G x)\n     (\\<Phi>.FUN (y, x) (\\<phi>C (F y, x) (\\<psi>C (F y, x) h)))) =\n  \\<phi>D (y, G x) (\\<psi>D (y, G x) (\\<Phi>.FUN (y, x) h))\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       \\<Phi>.FUN (y, x) h =\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h", "also"], ["proof (state)\nthis:\n  \\<phi>D (y, G x)\n   (\\<psi>D (y, G x)\n     (\\<Phi>.FUN (y, x) (\\<phi>C (F y, x) (\\<psi>C (F y, x) h)))) =\n  \\<phi>D (y, G x) (\\<psi>D (y, G x) (\\<Phi>.FUN (y, x) h))\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       \\<Phi>.FUN (y, x) h =\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h", "have \"... = \\<Phi>.FUN (y, x) h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>D (y, G x) (\\<psi>D (y, G x) (\\<Phi>.FUN (y, x) h)) =\n    \\<Phi>.FUN (y, x) h", "using assms h \\<Phi>_Fun_mapsto [of y \"\\<psi>C (F y, x) h\"] HomC.\\<psi>_mapsto\n                  HomD.\\<phi>_\\<psi> [of y \"G x\"] C.ide_in_hom D.ide_in_hom"], ["proof (prove)\nusing this:\n  D.ide y\n  C.ide x\n  h \\<in> HomC.set (F y, x)\n  \\<lbrakk>D.ide y;\n   \\<guillemotleft>\\<psi>C (F y, x)\n                    h : F y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<Phi>.FUN (y, ?x)\n                    \\<in> HomC.set (F y, ?x) \\<rightarrow>\n                          HomD.set (y, G ?x)\n  \\<lbrakk>C.ide ?b; C.ide ?a\\<rbrakk>\n  \\<Longrightarrow> \\<psi>C (?b, ?a)\n                    \\<in> HomC.set (?b, ?a) \\<rightarrow> C.hom ?b ?a\n  \\<lbrakk>D.ide y; D.ide (G x); ?x \\<in> HomD.set (y, G x)\\<rbrakk>\n  \\<Longrightarrow> \\<phi>D (y, G x) (\\<psi>D (y, G x) ?x) = ?x\n  C.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>C ?a\\<guillemotright>\n  D.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>D ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<phi>D (y, G x) (\\<psi>D (y, G x) (\\<Phi>.FUN (y, x) h)) =\n    \\<Phi>.FUN (y, x) h", "by (meson 2 G.preserves_ide S.arr_mkArr funcset_mem)"], ["proof (state)\nthis:\n  \\<phi>D (y, G x) (\\<psi>D (y, G x) (\\<Phi>.FUN (y, x) h)) =\n  \\<Phi>.FUN (y, x) h\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       \\<Phi>.FUN (y, x) h =\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h", "finally"], ["proof (chain)\npicking this:\n  (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h =\n  \\<Phi>.FUN (y, x) h", "show \"\\<Phi>.FUN (y, x) h = (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x)) h\""], ["proof (prove)\nusing this:\n  (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h =\n  \\<Phi>.FUN (y, x) h\n\ngoal (1 subgoal):\n 1. \\<Phi>.FUN (y, x) h =\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h", "by auto"], ["proof (state)\nthis:\n  \\<Phi>.FUN (y, x) h =\n  (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n  \\<Phi>.FUN (y, x) ?h =\n  (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) ?h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x)) (\\<Phi>.FUN (y, x)) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "finally"], ["proof (chain)\npicking this:\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "show \"\\<Phi> (y, x) = S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                                       (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))\""], ["proof (prove)\nusing this:\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "by force"], ["proof (state)\nthis:\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<Psi>_Fun_mapsto:\n    assumes \"C.ide x\" and \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\"\n    shows \"\\<Psi>.FUN (y, x) \\<in> HomD.set (y, G x) \\<rightarrow> HomC.set (F y, x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi>.FUN (y, x)\n    \\<in> HomD.set (y, G x) \\<rightarrow> HomC.set (F y, x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi>.FUN (y, x)\n    \\<in> HomD.set (y, G x) \\<rightarrow> HomC.set (F y, x)", "have \"S.arr (\\<Psi> (y, x)) \\<and> \\<Psi>.COD (y, x) = HomC.set (F y, x) \\<and>\n                                \\<Psi>.DOM (y, x) = HomD.set (y, G x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (\\<Psi> (y, x)) \\<and>\n    \\<Psi>.COD (y, x) = HomC.set (F y, x) \\<and>\n    \\<Psi>.DOM (y, x) = HomD.set (y, G x)", "using assms HomC.set_map HomD.set_map"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>C.ide ?a; C.ide ?b\\<rbrakk>\n  \\<Longrightarrow> S.set (HomC.map (?b, ?a)) = HomC.set (?b, ?a)\n  \\<lbrakk>D.ide ?a; D.ide ?b\\<rbrakk>\n  \\<Longrightarrow> S.set (HomD.map (?b, ?a)) = HomD.set (?b, ?a)\n\ngoal (1 subgoal):\n 1. S.arr (\\<Psi> (y, x)) \\<and>\n    \\<Psi>.COD (y, x) = HomC.set (F y, x) \\<and>\n    \\<Psi>.DOM (y, x) = HomD.set (y, G x)", "by auto"], ["proof (state)\nthis:\n  S.arr (\\<Psi> (y, x)) \\<and>\n  \\<Psi>.COD (y, x) = HomC.set (F y, x) \\<and>\n  \\<Psi>.DOM (y, x) = HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<Psi>.FUN (y, x)\n    \\<in> HomD.set (y, G x) \\<rightarrow> HomC.set (F y, x)", "thus ?thesis"], ["proof (prove)\nusing this:\n  S.arr (\\<Psi> (y, x)) \\<and>\n  \\<Psi>.COD (y, x) = HomC.set (F y, x) \\<and>\n  \\<Psi>.DOM (y, x) = HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<Psi>.FUN (y, x)\n    \\<in> HomD.set (y, G x) \\<rightarrow> HomC.set (F y, x)", "using S.Fun_mapsto"], ["proof (prove)\nusing this:\n  S.arr (\\<Psi> (y, x)) \\<and>\n  \\<Psi>.COD (y, x) = HomC.set (F y, x) \\<and>\n  \\<Psi>.DOM (y, x) = HomD.set (y, G x)\n  S.arr ?f \\<Longrightarrow>\n  S.Fun ?f\n  \\<in> extensional (S.Dom ?f) \\<inter> (S.Dom ?f \\<rightarrow> S.Cod ?f)\n\ngoal (1 subgoal):\n 1. \\<Psi>.FUN (y, x)\n    \\<in> HomD.set (y, G x) \\<rightarrow> HomC.set (F y, x)", "by fast"], ["proof (state)\nthis:\n  \\<Psi>.FUN (y, x) \\<in> HomD.set (y, G x) \\<rightarrow> HomC.set (F y, x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<psi>_mapsto:\n    assumes x: \"C.ide x\"\n    shows \"\\<psi> x \\<in> D.hom y (G x) \\<rightarrow> C.hom (F y) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x \\<in> D.hom y (G x) \\<rightarrow> C.hom (F y) x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> D.hom y (G x) \\<Longrightarrow>\n       \\<psi> x xa \\<in> C.hom (F y) x", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> D.hom y (G x) \\<Longrightarrow>\n       \\<psi> x xa \\<in> C.hom (F y) x", "assume h: \"h \\<in> D.hom y (G x)\""], ["proof (state)\nthis:\n  h \\<in> D.hom y (G x)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> D.hom y (G x) \\<Longrightarrow>\n       \\<psi> x xa \\<in> C.hom (F y) x", "hence 1: \"\\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\""], ["proof (prove)\nusing this:\n  h \\<in> D.hom y (G x)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> D.hom y (G x) \\<Longrightarrow>\n       \\<psi> x xa \\<in> C.hom (F y) x", "show \"\\<psi> x h \\<in> C.hom (F y) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x h \\<in> C.hom (F y) x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> x h \\<in> C.hom (F y) x", "have \"\\<phi>D (y, G x) h \\<in> HomD.set (y, G x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>D (y, G x) h \\<in> HomD.set (y, G x)", "using x h 1 HomD.\\<phi>_mapsto [of y \"G x\"]"], ["proof (prove)\nusing this:\n  C.ide x\n  h \\<in> D.hom y (G x)\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>D.ide y; D.ide (G x)\\<rbrakk>\n  \\<Longrightarrow> \\<phi>D (y, G x)\n                    \\<in> D.hom y (G x) \\<rightarrow> HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<phi>D (y, G x) h \\<in> HomD.set (y, G x)", "by fastforce"], ["proof (state)\nthis:\n  \\<phi>D (y, G x) h \\<in> HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<psi> x h \\<in> C.hom (F y) x", "hence \"\\<Psi>.FUN (y, x) (\\<phi>D (y, G x) h) \\<in> HomC.set (F y, x)\""], ["proof (prove)\nusing this:\n  \\<phi>D (y, G x) h \\<in> HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<Psi>.FUN (y, x) (\\<phi>D (y, G x) h) \\<in> HomC.set (F y, x)", "using h x \\<Psi>_Fun_mapsto"], ["proof (prove)\nusing this:\n  \\<phi>D (y, G x) h \\<in> HomD.set (y, G x)\n  h \\<in> D.hom y (G x)\n  C.ide x\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<Psi>.FUN (?y, ?x)\n                    \\<in> HomD.set (?y, G ?x) \\<rightarrow>\n                          HomC.set (F ?y, ?x)\n\ngoal (1 subgoal):\n 1. \\<Psi>.FUN (y, x) (\\<phi>D (y, G x) h) \\<in> HomC.set (F y, x)", "by auto"], ["proof (state)\nthis:\n  \\<Psi>.FUN (y, x) (\\<phi>D (y, G x) h) \\<in> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. \\<psi> x h \\<in> C.hom (F y) x", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi>.FUN (y, x) (\\<phi>D (y, G x) h) \\<in> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. \\<psi> x h \\<in> C.hom (F y) x", "using x h 1 \\<psi>_def HomD.\\<phi>_mapsto HomC.\\<psi>_mapsto [of \"F y\" x]"], ["proof (prove)\nusing this:\n  \\<Psi>.FUN (y, x) (\\<phi>D (y, G x) h) \\<in> HomC.set (F y, x)\n  C.ide x\n  h \\<in> D.hom y (G x)\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<psi> ?x ?h =\n  (\\<psi>C (F (D.dom ?h), ?x) \\<circ> \\<Psi>.FUN (D.dom ?h, ?x) \\<circ>\n   \\<phi>D (D.dom ?h, G ?x))\n   ?h\n  \\<lbrakk>D.ide ?b; D.ide ?a\\<rbrakk>\n  \\<Longrightarrow> \\<phi>D (?b, ?a)\n                    \\<in> D.hom ?b ?a \\<rightarrow> HomD.set (?b, ?a)\n  \\<lbrakk>C.ide (F y); C.ide x\\<rbrakk>\n  \\<Longrightarrow> \\<psi>C (F y, x)\n                    \\<in> HomC.set (F y, x) \\<rightarrow> C.hom (F y) x\n\ngoal (1 subgoal):\n 1. \\<psi> x h \\<in> C.hom (F y) x", "by fastforce"], ["proof (state)\nthis:\n  \\<psi> x h \\<in> C.hom (F y) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<psi> x h \\<in> C.hom (F y) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<Psi>_simp:\n    assumes \"D.ide y\" and \"C.ide x\"\n    shows \"S.arr (\\<Psi> (y, x))\"\n    and \"\\<Psi> (y, x) = S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                            (\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (\\<Psi> (y, x)) &&&\n    \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. S.arr (\\<Psi> (y, x))\n 2. \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "show 1: \"S.arr (\\<Psi> (y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (\\<Psi> (y, x))", "using assms"], ["proof (prove)\nusing this:\n  D.ide y\n  C.ide x\n\ngoal (1 subgoal):\n 1. S.arr (\\<Psi> (y, x))", "by auto"], ["proof (state)\nthis:\n  S.arr (\\<Psi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "hence \"\\<Psi> (y, x) = S.mkArr (\\<Psi>.DOM (y, x)) (\\<Psi>.COD (y, x)) (\\<Psi>.FUN (y, x))\""], ["proof (prove)\nusing this:\n  S.arr (\\<Psi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) =\n    S.mkArr (\\<Psi>.DOM (y, x)) (\\<Psi>.COD (y, x)) (\\<Psi>.FUN (y, x))", "using S.mkArr_Fun"], ["proof (prove)\nusing this:\n  S.arr (\\<Psi> (y, x))\n  S.arr ?f \\<Longrightarrow> S.mkArr (S.Dom ?f) (S.Cod ?f) (S.Fun ?f) = ?f\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) =\n    S.mkArr (\\<Psi>.DOM (y, x)) (\\<Psi>.COD (y, x)) (\\<Psi>.FUN (y, x))", "by metis"], ["proof (state)\nthis:\n  \\<Psi> (y, x) =\n  S.mkArr (\\<Psi>.DOM (y, x)) (\\<Psi>.COD (y, x)) (\\<Psi>.FUN (y, x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "also"], ["proof (state)\nthis:\n  \\<Psi> (y, x) =\n  S.mkArr (\\<Psi>.DOM (y, x)) (\\<Psi>.COD (y, x)) (\\<Psi>.FUN (y, x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "have \"... = S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x)) (\\<Psi>.FUN (y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (\\<Psi>.DOM (y, x)) (\\<Psi>.COD (y, x)) (\\<Psi>.FUN (y, x)) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x)) (\\<Psi>.FUN (y, x))", "using assms HomC.set_map HomD.set_map"], ["proof (prove)\nusing this:\n  D.ide y\n  C.ide x\n  \\<lbrakk>C.ide ?a; C.ide ?b\\<rbrakk>\n  \\<Longrightarrow> S.set (HomC.map (?b, ?a)) = HomC.set (?b, ?a)\n  \\<lbrakk>D.ide ?a; D.ide ?b\\<rbrakk>\n  \\<Longrightarrow> S.set (HomD.map (?b, ?a)) = HomD.set (?b, ?a)\n\ngoal (1 subgoal):\n 1. S.mkArr (\\<Psi>.DOM (y, x)) (\\<Psi>.COD (y, x)) (\\<Psi>.FUN (y, x)) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x)) (\\<Psi>.FUN (y, x))", "by auto"], ["proof (state)\nthis:\n  S.mkArr (\\<Psi>.DOM (y, x)) (\\<Psi>.COD (y, x)) (\\<Psi>.FUN (y, x)) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x)) (\\<Psi>.FUN (y, x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "also"], ["proof (state)\nthis:\n  S.mkArr (\\<Psi>.DOM (y, x)) (\\<Psi>.COD (y, x)) (\\<Psi>.FUN (y, x)) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x)) (\\<Psi>.FUN (y, x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "have \"... = S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                               (\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x)) (\\<Psi>.FUN (y, x)) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "proof (intro S.mkArr_eqI')"], ["proof (state)\ngoal (2 subgoals):\n 1. S.arr\n     (S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x)) (\\<Psi>.FUN (y, x)))\n 2. \\<And>xa.\n       xa \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       \\<Psi>.FUN (y, x) xa =\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) xa", "show \"S.arr (S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x)) (\\<Psi>.FUN (y, x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x)) (\\<Psi>.FUN (y, x)))", "using 1 calculation"], ["proof (prove)\nusing this:\n  S.arr (\\<Psi> (y, x))\n  \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x)) (\\<Psi>.FUN (y, x))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x)) (\\<Psi>.FUN (y, x)))", "by argo"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x)) (\\<Psi>.FUN (y, x)))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       \\<Psi>.FUN (y, x) xa =\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) xa", "show \"\\<And>h. h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n                    \\<Psi>.FUN (y, x) h = (\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x)) h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       \\<Psi>.FUN (y, x) h =\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       \\<Psi>.FUN (y, x) h =\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       \\<Psi>.FUN (y, x) h =\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h", "assume h: \"h \\<in> HomD.set (y, G x)\""], ["proof (state)\nthis:\n  h \\<in> HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       \\<Psi>.FUN (y, x) h =\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h", "hence \"\\<guillemotleft>\\<psi>D (y, G x) h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\""], ["proof (prove)\nusing this:\n  h \\<in> HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi>D (y, G x)\n                     h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "using assms HomD.\\<psi>_mapsto [of y \"G x\"]"], ["proof (prove)\nusing this:\n  h \\<in> HomD.set (y, G x)\n  D.ide y\n  C.ide x\n  \\<lbrakk>D.ide y; D.ide (G x)\\<rbrakk>\n  \\<Longrightarrow> \\<psi>D (y, G x)\n                    \\<in> HomD.set (y, G x) \\<rightarrow> D.hom y (G x)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi>D (y, G x)\n                     h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<psi>D (y, G x)\n                   h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       \\<Psi>.FUN (y, x) h =\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h", "hence \"(\\<phi>C (F y, x) o \\<psi> x o HomD.\\<psi> (y, G x)) h =\n                   \\<phi>C (F y, x) (\\<psi>C (F y, x) (\\<Psi>.FUN (y, x) (\\<phi>D (y, G x) (\\<psi>D (y, G x) h))))\""], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<psi>D (y, G x)\n                   h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h =\n    \\<phi>C (F y, x)\n     (\\<psi>C (F y, x)\n       (\\<Psi>.FUN (y, x) (\\<phi>D (y, G x) (\\<psi>D (y, G x) h))))", "using h \\<psi>_def"], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<psi>D (y, G x)\n                   h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  h \\<in> HomD.set (y, G x)\n  \\<psi> ?x ?h =\n  (\\<psi>C (F (D.dom ?h), ?x) \\<circ> \\<Psi>.FUN (D.dom ?h, ?x) \\<circ>\n   \\<phi>D (D.dom ?h, G ?x))\n   ?h\n\ngoal (1 subgoal):\n 1. (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h =\n    \\<phi>C (F y, x)\n     (\\<psi>C (F y, x)\n       (\\<Psi>.FUN (y, x) (\\<phi>D (y, G x) (\\<psi>D (y, G x) h))))", "by auto"], ["proof (state)\nthis:\n  (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h =\n  \\<phi>C (F y, x)\n   (\\<psi>C (F y, x)\n     (\\<Psi>.FUN (y, x) (\\<phi>D (y, G x) (\\<psi>D (y, G x) h))))\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       \\<Psi>.FUN (y, x) h =\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h", "also"], ["proof (state)\nthis:\n  (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h =\n  \\<phi>C (F y, x)\n   (\\<psi>C (F y, x)\n     (\\<Psi>.FUN (y, x) (\\<phi>D (y, G x) (\\<psi>D (y, G x) h))))\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       \\<Psi>.FUN (y, x) h =\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h", "have \"... = \\<phi>C (F y, x) (\\<psi>C (F y, x) (\\<Psi>.FUN (y, x) h))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>C (F y, x)\n     (\\<psi>C (F y, x)\n       (\\<Psi>.FUN (y, x) (\\<phi>D (y, G x) (\\<psi>D (y, G x) h)))) =\n    \\<phi>C (F y, x) (\\<psi>C (F y, x) (\\<Psi>.FUN (y, x) h))", "using assms h HomD.\\<phi>_\\<psi> \\<Psi>_Fun_mapsto"], ["proof (prove)\nusing this:\n  D.ide y\n  C.ide x\n  h \\<in> HomD.set (y, G x)\n  \\<lbrakk>D.ide ?b; D.ide ?a; ?x \\<in> HomD.set (?b, ?a)\\<rbrakk>\n  \\<Longrightarrow> \\<phi>D (?b, ?a) (\\<psi>D (?b, ?a) ?x) = ?x\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<Psi>.FUN (?y, ?x)\n                    \\<in> HomD.set (?y, G ?x) \\<rightarrow>\n                          HomC.set (F ?y, ?x)\n\ngoal (1 subgoal):\n 1. \\<phi>C (F y, x)\n     (\\<psi>C (F y, x)\n       (\\<Psi>.FUN (y, x) (\\<phi>D (y, G x) (\\<psi>D (y, G x) h)))) =\n    \\<phi>C (F y, x) (\\<psi>C (F y, x) (\\<Psi>.FUN (y, x) h))", "by simp"], ["proof (state)\nthis:\n  \\<phi>C (F y, x)\n   (\\<psi>C (F y, x)\n     (\\<Psi>.FUN (y, x) (\\<phi>D (y, G x) (\\<psi>D (y, G x) h)))) =\n  \\<phi>C (F y, x) (\\<psi>C (F y, x) (\\<Psi>.FUN (y, x) h))\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       \\<Psi>.FUN (y, x) h =\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h", "also"], ["proof (state)\nthis:\n  \\<phi>C (F y, x)\n   (\\<psi>C (F y, x)\n     (\\<Psi>.FUN (y, x) (\\<phi>D (y, G x) (\\<psi>D (y, G x) h)))) =\n  \\<phi>C (F y, x) (\\<psi>C (F y, x) (\\<Psi>.FUN (y, x) h))\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       \\<Psi>.FUN (y, x) h =\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h", "have \"... = \\<Psi>.FUN (y, x) h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>C (F y, x) (\\<psi>C (F y, x) (\\<Psi>.FUN (y, x) h)) =\n    \\<Psi>.FUN (y, x) h", "using assms h \\<Psi>_Fun_mapsto HomD.\\<psi>_mapsto [of y \"G x\"] HomC.\\<phi>_\\<psi> [of \"F y\" x]\n                  C.ide_in_hom D.ide_in_hom"], ["proof (prove)\nusing this:\n  D.ide y\n  C.ide x\n  h \\<in> HomD.set (y, G x)\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<Psi>.FUN (?y, ?x)\n                    \\<in> HomD.set (?y, G ?x) \\<rightarrow>\n                          HomC.set (F ?y, ?x)\n  \\<lbrakk>D.ide y; D.ide (G x)\\<rbrakk>\n  \\<Longrightarrow> \\<psi>D (y, G x)\n                    \\<in> HomD.set (y, G x) \\<rightarrow> D.hom y (G x)\n  \\<lbrakk>C.ide (F y); C.ide x; ?x \\<in> HomC.set (F y, x)\\<rbrakk>\n  \\<Longrightarrow> \\<phi>C (F y, x) (\\<psi>C (F y, x) ?x) = ?x\n  C.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>C ?a\\<guillemotright>\n  D.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>D ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<phi>C (F y, x) (\\<psi>C (F y, x) (\\<Psi>.FUN (y, x) h)) =\n    \\<Psi>.FUN (y, x) h", "by blast"], ["proof (state)\nthis:\n  \\<phi>C (F y, x) (\\<psi>C (F y, x) (\\<Psi>.FUN (y, x) h)) =\n  \\<Psi>.FUN (y, x) h\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       \\<Psi>.FUN (y, x) h =\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h", "finally"], ["proof (chain)\npicking this:\n  (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h =\n  \\<Psi>.FUN (y, x) h", "show \"\\<Psi>.FUN (y, x) h = (\\<phi>C (F y, x) o \\<psi> x o HomD.\\<psi> (y, G x)) h\""], ["proof (prove)\nusing this:\n  (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h =\n  \\<Psi>.FUN (y, x) h\n\ngoal (1 subgoal):\n 1. \\<Psi>.FUN (y, x) h =\n    (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h", "by auto"], ["proof (state)\nthis:\n  \\<Psi>.FUN (y, x) h =\n  (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n  \\<Psi>.FUN (y, x) ?h =\n  (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)) ?h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x)) (\\<Psi>.FUN (y, x)) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "finally"], ["proof (chain)\npicking this:\n  \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "show \"\\<Psi> (y, x) = S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                                       (\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x))\""], ["proof (prove)\nusing this:\n  \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "by force"], ["proof (state)\nthis:\n  \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n      The length of the next proof stems from having to use properties of composition\n      of arrows in @{term[source=true] S} to infer properties of the composition of the\n      corresponding functions.\n\\<close>"], ["", "interpretation \\<phi>\\<psi>: meta_adjunction C D F G \\<phi> \\<psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<phi> y\n    f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 3. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x (\\<phi> y f) = f\n 4. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 5. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "fix y :: 'd and x :: 'c and h :: 'c"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<phi> y\n    f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 3. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x (\\<phi> y f) = f\n 4. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 5. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "assume y: \"D.ide y\" and h: \"\\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (state)\nthis:\n  D.ide y\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (5 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<phi> y\n    f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 3. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x (\\<phi> y f) = f\n 4. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 5. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "have x: \"C.ide x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide x", "using h"], ["proof (prove)\nusing this:\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. C.ide x", "by auto"], ["proof (state)\nthis:\n  C.ide x\n\ngoal (5 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<phi> y\n    f : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 3. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x (\\<phi> y f) = f\n 4. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 5. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "show \"\\<guillemotleft>\\<phi> y h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "have \"\\<Phi>.FUN (y, x) \\<in> HomC.set (F y, x) \\<rightarrow> HomD.set (y, G x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Phi>.FUN (y, x)\n    \\<in> HomC.set (F y, x) \\<rightarrow> HomD.set (y, G x)", "using y h \\<Phi>_Fun_mapsto"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<Phi>.FUN (?y, ?x)\n                    \\<in> HomC.set (F ?y, ?x) \\<rightarrow>\n                          HomD.set (?y, G ?x)\n\ngoal (1 subgoal):\n 1. \\<Phi>.FUN (y, x)\n    \\<in> HomC.set (F y, x) \\<rightarrow> HomD.set (y, G x)", "by blast"], ["proof (state)\nthis:\n  \\<Phi>.FUN (y, x) \\<in> HomC.set (F y, x) \\<rightarrow> HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Phi>.FUN (y, x) \\<in> HomC.set (F y, x) \\<rightarrow> HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "using x y h \\<phi>_def HomD.\\<psi>_mapsto [of y \"G x\"] HomC.\\<phi>_mapsto [of \"F y\" x]"], ["proof (prove)\nusing this:\n  \\<Phi>.FUN (y, x) \\<in> HomC.set (F y, x) \\<rightarrow> HomD.set (y, G x)\n  C.ide x\n  D.ide y\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<phi> ?y ?h =\n  (\\<psi>D (?y, G (C.cod ?h)) \\<circ> \\<Phi>.FUN (?y, C.cod ?h) \\<circ>\n   \\<phi>C (F ?y, C.cod ?h))\n   ?h\n  \\<lbrakk>D.ide y; D.ide (G x)\\<rbrakk>\n  \\<Longrightarrow> \\<psi>D (y, G x)\n                    \\<in> HomD.set (y, G x) \\<rightarrow> D.hom y (G x)\n  \\<lbrakk>C.ide (F y); C.ide x\\<rbrakk>\n  \\<Longrightarrow> \\<phi>C (F y, x)\n                    \\<in> C.hom (F y) x \\<rightarrow> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<phi> y h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<phi> y h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (4 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 2. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x (\\<phi> y f) = f\n 3. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 4. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "show \"\\<psi> x (\\<phi> y h) = h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y h) = h", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y h) = h", "have 0: \"restrict (\\<lambda>h. h) (HomC.set (F y, x))\n                   = restrict (\\<phi>C (F y, x) o (\\<psi> x o \\<phi> y) o \\<psi>C (F y, x)) (HomC.set (F y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n    restrict\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n    restrict\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "have 1: \"S.ide (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.ide (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x))", "using x y \\<Phi>\\<Psi>.inv [of \"(y, x)\"]"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  DopxC.ide (y, x) \\<Longrightarrow>\n  S.inverse_arrows (\\<Phi> (y, x)) (\\<Psi> (y, x))\n\ngoal (1 subgoal):\n 1. S.ide (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x))", "by auto"], ["proof (state)\nthis:\n  S.ide (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n    restrict\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "hence 6: \"S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))\""], ["proof (prove)\nusing this:\n  S.ide (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))", "by auto"], ["proof (state)\nthis:\n  S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n    restrict\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "have 2: \"\\<Phi> (y, x) = S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                                      (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x)) \\<and>\n                   \\<Psi> (y, x) = S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                                      (\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) \\<and>\n    \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "using x y \\<Phi>_simp \\<Psi>_simp"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<lbrakk>D.ide ?y; C.ide ?x\\<rbrakk>\n  \\<Longrightarrow> S.arr (\\<Phi> (?y, ?x))\n  \\<lbrakk>D.ide ?y; C.ide ?x\\<rbrakk>\n  \\<Longrightarrow> \\<Phi> (?y, ?x) =\n                    S.mkArr (HomC.set (F ?y, ?x)) (HomD.set (?y, G ?x))\n                     (\\<phi>D (?y, G ?x) \\<circ> \\<phi> ?y \\<circ>\n                      \\<psi>C (F ?y, ?x))\n  \\<lbrakk>D.ide ?y; C.ide ?x\\<rbrakk>\n  \\<Longrightarrow> S.arr (\\<Psi> (?y, ?x))\n  \\<lbrakk>D.ide ?y; C.ide ?x\\<rbrakk>\n  \\<Longrightarrow> \\<Psi> (?y, ?x) =\n                    S.mkArr (HomD.set (?y, G ?x)) (HomC.set (F ?y, ?x))\n                     (\\<phi>C (F ?y, ?x) \\<circ> \\<psi> ?x \\<circ>\n                      \\<psi>D (?y, G ?x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) \\<and>\n    \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "by force"], ["proof (state)\nthis:\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) \\<and>\n  \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n    restrict\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "have 3: \"S (\\<Psi> (y, x)) (\\<Phi> (y, x))\n                    = S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n                              (\\<phi>C (F y, x) o (\\<psi> x o \\<phi> y) o \\<psi>C (F y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))", "have 4: \"S.arr (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))", "using 1"], ["proof (prove)\nusing this:\n  S.ide (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))", "by auto"], ["proof (state)\nthis:\n  S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))", "hence \"S (\\<Psi> (y, x)) (\\<Phi> (y, x))\n                     = S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n                               ((\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x))\n                                  o (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x)))\""], ["proof (prove)\nusing this:\n  S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))", "using 1 2 S.ide_in_hom S.comp_mkArr"], ["proof (prove)\nusing this:\n  S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))\n  S.ide (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x))\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) \\<and>\n  \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))\n  S.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>S ?a\\<guillemotright>\n  \\<lbrakk>S.arr (S.mkArr ?A ?B ?F); S.arr (S.mkArr ?B ?C ?G)\\<rbrakk>\n  \\<Longrightarrow> S.mkArr ?B ?C ?G \\<cdot>\\<^sub>S S.mkArr ?A ?B ?F =\n                    S.mkArr ?A ?C (?G \\<circ> ?F)\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))", "by fastforce"], ["proof (state)\nthis:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))", "also"], ["proof (state)\nthis:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))", "have \"... = S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n                                     (\\<phi>C (F y, x) o (\\<psi> x o \\<phi> y) o \\<psi>C (F y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))", "proof (intro S.mkArr_eqI')"], ["proof (state)\ngoal (2 subgoals):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))))\n 2. \\<And>xa.\n       xa \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n        xa =\n       (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n        \\<psi>C (F y, x))\n        xa", "show \"S.arr (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n                                   ((\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x))\n                                     o (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))))", "using 4 calculation"], ["proof (prove)\nusing this:\n  S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))))", "by simp"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n        xa =\n       (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n        \\<psi>C (F y, x))\n        xa", "show \"\\<And>h. h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n                          ((\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x))\n                            o (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))) h =\n                          (\\<phi>C (F y, x) o (\\<psi> x o \\<phi> y) o \\<psi>C (F y, x)) h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n        h =\n       (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n        \\<psi>C (F y, x))\n        h", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n        h =\n       (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n        \\<psi>C (F y, x))\n        h", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n        h =\n       (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n        \\<psi>C (F y, x))\n        h", "assume h: \"h \\<in> HomC.set (F y, x)\""], ["proof (state)\nthis:\n  h \\<in> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n        h =\n       (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n        \\<psi>C (F y, x))\n        h", "hence 1: \"\\<guillemotleft>\\<phi> y (\\<psi>C (F y, x) h) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\""], ["proof (prove)\nusing this:\n  h \\<in> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     (\\<psi>C (F y, x)\n                       h) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "using x y h HomC.\\<psi>_mapsto [of \"F y\" x] \\<phi>_mapsto"], ["proof (prove)\nusing this:\n  h \\<in> HomC.set (F y, x)\n  C.ide x\n  D.ide y\n  h \\<in> HomC.set (F y, x)\n  \\<lbrakk>C.ide (F y); C.ide x\\<rbrakk>\n  \\<Longrightarrow> \\<psi>C (F y, x)\n                    \\<in> HomC.set (F y, x) \\<rightarrow> C.hom (F y) x\n  D.ide ?y \\<Longrightarrow>\n  \\<phi> ?y \\<in> C.hom (F ?y) ?x \\<rightarrow> D.hom ?y (G ?x)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     (\\<psi>C (F y, x)\n                       h) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<phi> y\n                   (\\<psi>C (F y, x)\n                     h) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n       (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n        h =\n       (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n        \\<psi>C (F y, x))\n        h", "show \"((\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x))\n                            o (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))) h =\n                      (\\<phi>C (F y, x) o (\\<psi> x o \\<phi> y) o \\<psi>C (F y, x)) h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     h =\n    (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n     \\<psi>C (F y, x))\n     h", "using x y 1 \\<phi>_mapsto HomD.\\<psi>_\\<phi>"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<guillemotleft>\\<phi> y\n                   (\\<psi>C (F y, x)\n                     h) : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  D.ide ?y \\<Longrightarrow>\n  \\<phi> ?y \\<in> C.hom (F ?y) ?x \\<rightarrow> D.hom ?y (G ?x)\n  \\<guillemotleft>?f : ?b \\<rightarrow>\\<^sub>D ?a\\<guillemotright> \\<Longrightarrow>\n  \\<psi>D (?b, ?a) (\\<phi>D (?b, ?a) ?f) = ?f\n\ngoal (1 subgoal):\n 1. (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     h =\n    (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n     \\<psi>C (F y, x))\n     h", "by simp"], ["proof (state)\nthis:\n  (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n   h =\n  (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n   \\<psi>C (F y, x))\n   h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?h \\<in> HomC.set (F y, x) \\<Longrightarrow>\n  (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n   ?h =\n  (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n   \\<psi>C (F y, x))\n   ?h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))", "finally"], ["proof (chain)\npicking this:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))", "by simp"], ["proof (state)\nthis:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n    restrict\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "moreover"], ["proof (state)\nthis:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n    restrict\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "have \"\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x)\n                             = S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)", "have \"\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) = S.dom (S (\\<Psi> (y, x)) (\\<Phi> (y, x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.dom (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x))", "using 1"], ["proof (prove)\nusing this:\n  S.ide (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.dom (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x))", "by auto"], ["proof (state)\nthis:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.dom (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)", "also"], ["proof (state)\nthis:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.dom (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)", "have \"... = S.dom (\\<Phi> (y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.dom (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x)) =\n    S.dom (\\<Phi> (y, x))", "using 1 S.dom_comp"], ["proof (prove)\nusing this:\n  S.ide (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x))\n  S.seq ?g ?f \\<Longrightarrow> S.dom (?g \\<cdot>\\<^sub>S ?f) = S.dom ?f\n\ngoal (1 subgoal):\n 1. S.dom (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x)) =\n    S.dom (\\<Phi> (y, x))", "by blast"], ["proof (state)\nthis:\n  S.dom (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x)) =\n  S.dom (\\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)", "finally"], ["proof (chain)\npicking this:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) = S.dom (\\<Phi> (y, x))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) = S.dom (\\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)", "using 2 6 S.mkIde_as_mkArr S.arr_mkArr"], ["proof (prove)\nusing this:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) = S.dom (\\<Phi> (y, x))\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) \\<and>\n  \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))\n  S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))\n  ?A \\<subseteq> S.Univ \\<Longrightarrow>\n  S.mkArr ?A ?A (\\<lambda>x. x) = S.mkIde ?A\n  S.arr (S.mkArr ?A ?B ?F) =\n  (?A \\<subseteq> S.Univ \\<and>\n   ?B \\<subseteq> S.Univ \\<and> ?F \\<in> ?A \\<rightarrow> ?B)\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)", "by (elim S.seqE, auto)"], ["proof (state)\nthis:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n    restrict\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "ultimately"], ["proof (chain)\npicking this:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)", "have 4: \"S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n                                      (\\<phi>C (F y, x) o (\\<psi> x o \\<phi> y) o \\<psi>C (F y, x))\n                                = S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)\""], ["proof (prove)\nusing this:\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)\n\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x)) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)", "by auto"], ["proof (state)\nthis:\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x)) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n    restrict\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "have 5: \"S.arr (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n                                  (\\<phi>C (F y, x) o (\\<psi> x o \\<phi> y) o \\<psi>C (F y, x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n       (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n        \\<psi>C (F y, x)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n       (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n        \\<psi>C (F y, x)))", "have \"S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))", "using 1"], ["proof (prove)\nusing this:\n  S.ide (\\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))", "by fast"], ["proof (state)\nthis:\n  S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n       (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n        \\<psi>C (F y, x)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n       (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n        \\<psi>C (F y, x)))", "using 3"], ["proof (prove)\nusing this:\n  S.seq (\\<Psi> (y, x)) (\\<Phi> (y, x))\n  \\<Psi> (y, x) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n       (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n        \\<psi>C (F y, x)))", "by metis"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n    restrict\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "hence \"restrict (\\<phi>C (F y, x) o (\\<psi> x o \\<phi> y) o \\<psi>C (F y, x)) (HomC.set (F y, x))\n                  = S.Fun (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n                         (\\<phi>C (F y, x) o (\\<psi> x o \\<phi> y) o \\<psi>C (F y, x)))\""], ["proof (prove)\nusing this:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x)) =\n    S.Fun\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n       (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n        \\<psi>C (F y, x)))", "by auto"], ["proof (state)\nthis:\n  restrict\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n   (HomC.set (F y, x)) =\n  S.Fun\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n    restrict\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "also"], ["proof (state)\nthis:\n  restrict\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n   (HomC.set (F y, x)) =\n  S.Fun\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n    restrict\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "have \"... = restrict (\\<lambda>h. h) (HomC.set (F y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.Fun\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n       (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n        \\<psi>C (F y, x))) =\n    (\\<lambda>h\\<in>HomC.set (F y, x). h)", "using 4 5"], ["proof (prove)\nusing this:\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x)) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x)) (\\<lambda>h. h)\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. S.Fun\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n       (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n        \\<psi>C (F y, x))) =\n    (\\<lambda>h\\<in>HomC.set (F y, x). h)", "by auto"], ["proof (state)\nthis:\n  S.Fun\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))) =\n  (\\<lambda>h\\<in>HomC.set (F y, x). h)\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n    restrict\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "finally"], ["proof (chain)\npicking this:\n  restrict\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n   (HomC.set (F y, x)) =\n  (\\<lambda>h\\<in>HomC.set (F y, x). h)", "show ?thesis"], ["proof (prove)\nusing this:\n  restrict\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n   (HomC.set (F y, x)) =\n  (\\<lambda>h\\<in>HomC.set (F y, x). h)\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n    restrict\n     (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n  restrict\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n   (HomC.set (F y, x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n  restrict\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n   (HomC.set (F y, x))\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y h) = h", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n  restrict\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n   (HomC.set (F y, x))\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y h) = h", "have \"\\<phi>C (F y, x) h \\<in> HomC.set (F y, x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)", "using x y h HomC.\\<phi>_mapsto [of \"F y\" x]"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>C.ide (F y); C.ide x\\<rbrakk>\n  \\<Longrightarrow> \\<phi>C (F y, x)\n                    \\<in> C.hom (F y) x \\<rightarrow> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)", "by auto"], ["proof (state)\nthis:\n  \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y h) = h", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n  restrict\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n   (HomC.set (F y, x))\n  \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)", "have\n            \"\\<phi>C (F y, x) h = (\\<phi>C (F y, x) o (\\<psi> x o \\<phi> y) o \\<psi>C (F y, x)) (\\<phi>C (F y, x) h)\""], ["proof (prove)\nusing this:\n  (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n  restrict\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n   (HomC.set (F y, x))\n  \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. \\<phi>C (F y, x) h =\n    (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n     \\<psi>C (F y, x))\n     (\\<phi>C (F y, x) h)", "using x y h HomC.\\<phi>_mapsto [of \"F y\" x]"], ["proof (prove)\nusing this:\n  (\\<lambda>h\\<in>HomC.set (F y, x). h) =\n  restrict\n   (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n    \\<psi>C (F y, x))\n   (HomC.set (F y, x))\n  \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)\n  C.ide x\n  D.ide y\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>C.ide (F y); C.ide x\\<rbrakk>\n  \\<Longrightarrow> \\<phi>C (F y, x)\n                    \\<in> C.hom (F y) x \\<rightarrow> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. \\<phi>C (F y, x) h =\n    (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n     \\<psi>C (F y, x))\n     (\\<phi>C (F y, x) h)", "by fast"], ["proof (state)\nthis:\n  \\<phi>C (F y, x) h =\n  (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n   \\<psi>C (F y, x))\n   (\\<phi>C (F y, x) h)\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y h) = h", "hence \"\\<psi>C (F y, x) (\\<phi>C (F y, x) h) =\n                 \\<psi>C (F y, x) ((\\<phi>C (F y, x) o (\\<psi> x o \\<phi> y) o \\<psi>C (F y, x)) (\\<phi>C (F y, x) h))\""], ["proof (prove)\nusing this:\n  \\<phi>C (F y, x) h =\n  (\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n   \\<psi>C (F y, x))\n   (\\<phi>C (F y, x) h)\n\ngoal (1 subgoal):\n 1. \\<psi>C (F y, x) (\\<phi>C (F y, x) h) =\n    \\<psi>C (F y, x)\n     ((\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n       \\<psi>C (F y, x))\n       (\\<phi>C (F y, x) h))", "by simp"], ["proof (state)\nthis:\n  \\<psi>C (F y, x) (\\<phi>C (F y, x) h) =\n  \\<psi>C (F y, x)\n   ((\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n     \\<psi>C (F y, x))\n     (\\<phi>C (F y, x) h))\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y h) = h", "hence \"h = \\<psi>C (F y, x) (\\<phi>C (F y, x) (\\<psi> x (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))))\""], ["proof (prove)\nusing this:\n  \\<psi>C (F y, x) (\\<phi>C (F y, x) h) =\n  \\<psi>C (F y, x)\n   ((\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n     \\<psi>C (F y, x))\n     (\\<phi>C (F y, x) h))\n\ngoal (1 subgoal):\n 1. h =\n    \\<psi>C (F y, x)\n     (\\<phi>C (F y, x)\n       (\\<psi> x (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))))", "using x y h HomC.\\<psi>_\\<phi> [of \"F y\" x]"], ["proof (prove)\nusing this:\n  \\<psi>C (F y, x) (\\<phi>C (F y, x) h) =\n  \\<psi>C (F y, x)\n   ((\\<phi>C (F y, x) \\<circ> (\\<psi> x \\<circ> \\<phi> y) \\<circ>\n     \\<psi>C (F y, x))\n     (\\<phi>C (F y, x) h))\n  C.ide x\n  D.ide y\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<guillemotleft>F y : x \\<rightarrow>\\<^sub>C ?a\\<guillemotright> \\<Longrightarrow>\n  \\<psi>C (x, ?a) (\\<phi>C (x, ?a) (F y)) = F y\n\ngoal (1 subgoal):\n 1. h =\n    \\<psi>C (F y, x)\n     (\\<phi>C (F y, x)\n       (\\<psi> x (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))))", "by simp"], ["proof (state)\nthis:\n  h =\n  \\<psi>C (F y, x)\n   (\\<phi>C (F y, x)\n     (\\<psi> x (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))))\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y h) = h", "also"], ["proof (state)\nthis:\n  h =\n  \\<psi>C (F y, x)\n   (\\<phi>C (F y, x)\n     (\\<psi> x (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))))\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y h) = h", "have \"... = \\<psi> x (\\<phi> y h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi>C (F y, x)\n     (\\<phi>C (F y, x)\n       (\\<psi> x (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h))))) =\n    \\<psi> x (\\<phi> y h)", "using x y h HomC.\\<psi>_\\<phi> HomC.\\<psi>_\\<phi> \\<phi>_mapsto \\<psi>_mapsto"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<guillemotleft>?f : ?b \\<rightarrow>\\<^sub>C ?a\\<guillemotright> \\<Longrightarrow>\n  \\<psi>C (?b, ?a) (\\<phi>C (?b, ?a) ?f) = ?f\n  \\<guillemotleft>?f : ?b \\<rightarrow>\\<^sub>C ?a\\<guillemotright> \\<Longrightarrow>\n  \\<psi>C (?b, ?a) (\\<phi>C (?b, ?a) ?f) = ?f\n  D.ide ?y \\<Longrightarrow>\n  \\<phi> ?y \\<in> C.hom (F ?y) ?x \\<rightarrow> D.hom ?y (G ?x)\n  C.ide ?x \\<Longrightarrow>\n  \\<psi> ?x \\<in> D.hom ?y (G ?x) \\<rightarrow> C.hom (F ?y) ?x\n\ngoal (1 subgoal):\n 1. \\<psi>C (F y, x)\n     (\\<phi>C (F y, x)\n       (\\<psi> x (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h))))) =\n    \\<psi> x (\\<phi> y h)", "by (metis PiE mem_Collect_eq)"], ["proof (state)\nthis:\n  \\<psi>C (F y, x)\n   (\\<phi>C (F y, x)\n     (\\<psi> x (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h))))) =\n  \\<psi> x (\\<phi> y h)\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y h) = h", "finally"], ["proof (chain)\npicking this:\n  h = \\<psi> x (\\<phi> y h)", "show ?thesis"], ["proof (prove)\nusing this:\n  h = \\<psi> x (\\<phi> y h)\n\ngoal (1 subgoal):\n 1. \\<psi> x (\\<phi> y h) = h", "by auto"], ["proof (state)\nthis:\n  \\<psi> x (\\<phi> y h) = h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<psi> x (\\<phi> y h) = h\n\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "fix x :: 'c and h :: 'd and y :: 'd"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "assume x: \"C.ide x\" and h: \"\\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\""], ["proof (state)\nthis:\n  C.ide x\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "have y: \"D.ide y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.ide y", "using h"], ["proof (prove)\nusing this:\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. D.ide y", "by auto"], ["proof (state)\nthis:\n  D.ide y\n\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>\\<psi> x\n    g : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "show \"\\<guillemotleft>\\<psi> x h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "using x y h \\<psi>_mapsto [of x y]"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  C.ide x \\<Longrightarrow>\n  \\<psi> x \\<in> D.hom y (G x) \\<rightarrow> C.hom (F y) x\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<psi> x h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (2 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y (\\<psi> x g) = g\n 2. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "show \"\\<phi> y (\\<psi> x h) = h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x h) = h", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x h) = h", "have 0: \"restrict (\\<lambda>h. h) (HomD.set (y, G x))\n                   = restrict (\\<phi>D (y, G x) o (\\<phi> y o \\<psi> x) o \\<psi>D (y, G x)) (HomD.set (y, G x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n    restrict\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))\n     (HomD.set (y, G x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n    restrict\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))\n     (HomD.set (y, G x))", "have 1: \"S.ide (S (\\<Phi> (y, x)) (\\<Psi> (y, x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.ide (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x))", "using x y \\<Phi>\\<Psi>.inv"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  DopxC.ide ?a \\<Longrightarrow> S.inverse_arrows (\\<Phi> ?a) (\\<Psi> ?a)\n\ngoal (1 subgoal):\n 1. S.ide (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x))", "by force"], ["proof (state)\nthis:\n  S.ide (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n    restrict\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))\n     (HomD.set (y, G x))", "hence 6: \"S.seq (\\<Phi> (y, x)) (\\<Psi> (y, x))\""], ["proof (prove)\nusing this:\n  S.ide (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x))\n\ngoal (1 subgoal):\n 1. S.seq (\\<Phi> (y, x)) (\\<Psi> (y, x))", "by auto"], ["proof (state)\nthis:\n  S.seq (\\<Phi> (y, x)) (\\<Psi> (y, x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n    restrict\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))\n     (HomD.set (y, G x))", "have 2: \"\\<Phi> (y, x) = S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                                      (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x)) \\<and>\n                   \\<Psi> (y, x) = S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                                       (\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) \\<and>\n    \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "using x h \\<Phi>_simp \\<Psi>_simp"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>D.ide ?y; C.ide ?x\\<rbrakk>\n  \\<Longrightarrow> S.arr (\\<Phi> (?y, ?x))\n  \\<lbrakk>D.ide ?y; C.ide ?x\\<rbrakk>\n  \\<Longrightarrow> \\<Phi> (?y, ?x) =\n                    S.mkArr (HomC.set (F ?y, ?x)) (HomD.set (?y, G ?x))\n                     (\\<phi>D (?y, G ?x) \\<circ> \\<phi> ?y \\<circ>\n                      \\<psi>C (F ?y, ?x))\n  \\<lbrakk>D.ide ?y; C.ide ?x\\<rbrakk>\n  \\<Longrightarrow> S.arr (\\<Psi> (?y, ?x))\n  \\<lbrakk>D.ide ?y; C.ide ?x\\<rbrakk>\n  \\<Longrightarrow> \\<Psi> (?y, ?x) =\n                    S.mkArr (HomD.set (?y, G ?x)) (HomC.set (F ?y, ?x))\n                     (\\<phi>C (F ?y, ?x) \\<circ> \\<psi> ?x \\<circ>\n                      \\<psi>D (?y, G ?x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) \\<and>\n    \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "by auto"], ["proof (state)\nthis:\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) \\<and>\n  \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n    restrict\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))\n     (HomD.set (y, G x))", "have 3: \"S (\\<Phi> (y, x)) (\\<Psi> (y, x))\n                     = S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n                               (\\<phi>D (y, G x) o (\\<phi> y o \\<psi> x) o \\<psi>D (y, G x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))", "have 4: \"S.seq (\\<Phi> (y, x)) (\\<Psi> (y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.seq (\\<Phi> (y, x)) (\\<Psi> (y, x))", "using 1"], ["proof (prove)\nusing this:\n  S.ide (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x))\n\ngoal (1 subgoal):\n 1. S.seq (\\<Phi> (y, x)) (\\<Psi> (y, x))", "by auto"], ["proof (state)\nthis:\n  S.seq (\\<Phi> (y, x)) (\\<Psi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))", "hence \"S (\\<Phi> (y, x)) (\\<Psi> (y, x))\n                     = S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n                               ((\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))\n                                 o (\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x)))\""], ["proof (prove)\nusing this:\n  S.seq (\\<Phi> (y, x)) (\\<Psi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n      (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))", "using 1 2 6 S.ide_in_hom S.comp_mkArr"], ["proof (prove)\nusing this:\n  S.seq (\\<Phi> (y, x)) (\\<Psi> (y, x))\n  S.ide (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x))\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) \\<and>\n  \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))\n  S.seq (\\<Phi> (y, x)) (\\<Psi> (y, x))\n  S.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>S ?a\\<guillemotright>\n  \\<lbrakk>S.arr (S.mkArr ?A ?B ?F); S.arr (S.mkArr ?B ?C ?G)\\<rbrakk>\n  \\<Longrightarrow> S.mkArr ?B ?C ?G \\<cdot>\\<^sub>S S.mkArr ?A ?B ?F =\n                    S.mkArr ?A ?C (?G \\<circ> ?F)\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n      (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))", "by fastforce"], ["proof (state)\nthis:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n    (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))", "also"], ["proof (state)\nthis:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n    (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))", "have \"... = S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n                                     (\\<phi>D (y, G x) o (\\<phi> y o \\<psi> x) o \\<psi>D (y, G x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n      (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. S.arr\n     (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n        (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))))\n 2. \\<And>xa.\n       xa \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n        (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))\n        xa =\n       (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n        \\<psi>D (y, G x))\n        xa", "show \"S.arr (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n                                   ((\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))\n                                     o (\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n        (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))))", "using 4 calculation"], ["proof (prove)\nusing this:\n  S.seq (\\<Phi> (y, x)) (\\<Psi> (y, x))\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n    (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n        (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))))", "by simp"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n      (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n        (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))\n        xa =\n       (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n        \\<psi>D (y, G x))\n        xa", "show \"\\<And>h. h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n                          ((\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))\n                            o (\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x))) h =\n                          (\\<phi>D (y, G x) o (\\<phi> y o \\<psi> x) o \\<psi>D (y, G x)) h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n        (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))\n        h =\n       (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n        \\<psi>D (y, G x))\n        h", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n        (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))\n        h =\n       (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n        \\<psi>D (y, G x))\n        h", "fix h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n        (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))\n        h =\n       (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n        \\<psi>D (y, G x))\n        h", "assume h: \"h \\<in> HomD.set (y, G x)\""], ["proof (state)\nthis:\n  h \\<in> HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n        (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))\n        h =\n       (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n        \\<psi>D (y, G x))\n        h", "hence \"\\<guillemotleft>\\<psi> x (\\<psi>D (y, G x) h) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (prove)\nusing this:\n  h \\<in> HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     (\\<psi>D (y, G x)\n                       h) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "using x y HomD.\\<psi>_mapsto [of y \"G x\"] \\<psi>_mapsto"], ["proof (prove)\nusing this:\n  h \\<in> HomD.set (y, G x)\n  C.ide x\n  D.ide y\n  \\<lbrakk>D.ide y; D.ide (G x)\\<rbrakk>\n  \\<Longrightarrow> \\<psi>D (y, G x)\n                    \\<in> HomD.set (y, G x) \\<rightarrow> D.hom y (G x)\n  C.ide ?x \\<Longrightarrow>\n  \\<psi> ?x \\<in> D.hom ?y (G ?x) \\<rightarrow> C.hom (F ?y) ?x\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<psi> x\n                     (\\<psi>D (y, G x)\n                       h) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<psi> x\n                   (\\<psi>D (y, G x)\n                     h) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>h.\n       h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n        (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))\n        h =\n       (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n        \\<psi>D (y, G x))\n        h", "thus \"((\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))\n                            o (\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x))) h =\n                      (\\<phi>D (y, G x) o (\\<phi> y o \\<psi> x) o \\<psi>D (y, G x)) h\""], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<psi> x\n                   (\\<psi>D (y, G x)\n                     h) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))\n     h =\n    (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n     \\<psi>D (y, G x))\n     h", "using x y HomC.\\<psi>_\\<phi>"], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<psi> x\n                   (\\<psi>D (y, G x)\n                     h) : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  C.ide x\n  D.ide y\n  \\<guillemotleft>?f : ?b \\<rightarrow>\\<^sub>C ?a\\<guillemotright> \\<Longrightarrow>\n  \\<psi>C (?b, ?a) (\\<phi>C (?b, ?a) ?f) = ?f\n\ngoal (1 subgoal):\n 1. (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))\n     h =\n    (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n     \\<psi>D (y, G x))\n     h", "by simp"], ["proof (state)\nthis:\n  (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))\n   h =\n  (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n   \\<psi>D (y, G x))\n   h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?h \\<in> HomD.set (y, G x) \\<Longrightarrow>\n  (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x)))\n   ?h =\n  (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n   \\<psi>D (y, G x))\n   ?h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x) \\<circ>\n    (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))", "finally"], ["proof (chain)\npicking this:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))", "by auto"], ["proof (state)\nthis:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n    restrict\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))\n     (HomD.set (y, G x))", "moreover"], ["proof (state)\nthis:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n    restrict\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))\n     (HomD.set (y, G x))", "have \"\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n                           S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)", "have \"\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) = S.dom (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.dom (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x))", "using 1"], ["proof (prove)\nusing this:\n  S.ide (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.dom (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x))", "by auto"], ["proof (state)\nthis:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.dom (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)", "also"], ["proof (state)\nthis:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.dom (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)", "have \"... = S.dom (\\<Psi> (y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.dom (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x)) =\n    S.dom (\\<Psi> (y, x))", "using 1 S.dom_comp"], ["proof (prove)\nusing this:\n  S.ide (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x))\n  S.seq ?g ?f \\<Longrightarrow> S.dom (?g \\<cdot>\\<^sub>S ?f) = S.dom ?f\n\ngoal (1 subgoal):\n 1. S.dom (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x)) =\n    S.dom (\\<Psi> (y, x))", "by blast"], ["proof (state)\nthis:\n  S.dom (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x)) =\n  S.dom (\\<Psi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)", "finally"], ["proof (chain)\npicking this:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) = S.dom (\\<Psi> (y, x))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) = S.dom (\\<Psi> (y, x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)", "using 2 6 S.mkIde_as_mkArr S.arr_mkArr"], ["proof (prove)\nusing this:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) = S.dom (\\<Psi> (y, x))\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)) \\<and>\n  \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))\n  S.seq (\\<Phi> (y, x)) (\\<Psi> (y, x))\n  ?A \\<subseteq> S.Univ \\<Longrightarrow>\n  S.mkArr ?A ?A (\\<lambda>x. x) = S.mkIde ?A\n  S.arr (S.mkArr ?A ?B ?F) =\n  (?A \\<subseteq> S.Univ \\<and>\n   ?B \\<subseteq> S.Univ \\<and> ?F \\<in> ?A \\<rightarrow> ?B)\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)", "by (elim S.seqE, auto)"], ["proof (state)\nthis:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n    restrict\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))\n     (HomD.set (y, G x))", "ultimately"], ["proof (chain)\npicking this:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)", "have 4: \"S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n                                      (\\<phi>D (y, G x) o (\\<phi> y o \\<psi> x) o \\<psi>D (y, G x))\n                                = S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)\""], ["proof (prove)\nusing this:\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)\n\ngoal (1 subgoal):\n 1. S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x)) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)", "by auto"], ["proof (state)\nthis:\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x)) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n    restrict\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))\n     (HomD.set (y, G x))", "have 5: \"S.arr (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n                                  (\\<phi>D (y, G x) o (\\<phi> y o \\<psi> x) o \\<psi>D (y, G x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n       (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n        \\<psi>D (y, G x)))", "using 1 3"], ["proof (prove)\nusing this:\n  S.ide (\\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x))\n  \\<Phi> (y, x) \\<cdot>\\<^sub>S \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n       (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n        \\<psi>D (y, G x)))", "by fastforce"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n    restrict\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))\n     (HomD.set (y, G x))", "hence \"restrict (\\<phi>D (y, G x) o (\\<phi> y o \\<psi> x) o \\<psi>D (y, G x)) (HomD.set (y, G x))\n                  = S.Fun (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n                         (\\<phi>D (y, G x) o (\\<phi> y o \\<psi> x) o \\<psi>D (y, G x)))\""], ["proof (prove)\nusing this:\n  S.arr\n   (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x)))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))\n     (HomD.set (y, G x)) =\n    S.Fun\n     (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n       (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n        \\<psi>D (y, G x)))", "by auto"], ["proof (state)\nthis:\n  restrict\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n   (HomD.set (y, G x)) =\n  S.Fun\n   (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n    restrict\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))\n     (HomD.set (y, G x))", "also"], ["proof (state)\nthis:\n  restrict\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n   (HomD.set (y, G x)) =\n  S.Fun\n   (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n    restrict\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))\n     (HomD.set (y, G x))", "have \"... = restrict (\\<lambda>h. h) (HomD.set (y, G x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.Fun\n     (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n       (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n        \\<psi>D (y, G x))) =\n    (\\<lambda>h\\<in>HomD.set (y, G x). h)", "using 4 5"], ["proof (prove)\nusing this:\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x)) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x)) (\\<lambda>h. h)\n  S.arr\n   (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x)))\n\ngoal (1 subgoal):\n 1. S.Fun\n     (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n       (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n        \\<psi>D (y, G x))) =\n    (\\<lambda>h\\<in>HomD.set (y, G x). h)", "by auto"], ["proof (state)\nthis:\n  S.Fun\n   (S.mkArr (HomD.set (y, G x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))) =\n  (\\<lambda>h\\<in>HomD.set (y, G x). h)\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n    restrict\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))\n     (HomD.set (y, G x))", "finally"], ["proof (chain)\npicking this:\n  restrict\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n   (HomD.set (y, G x)) =\n  (\\<lambda>h\\<in>HomD.set (y, G x). h)", "show ?thesis"], ["proof (prove)\nusing this:\n  restrict\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n   (HomD.set (y, G x)) =\n  (\\<lambda>h\\<in>HomD.set (y, G x). h)\n\ngoal (1 subgoal):\n 1. (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n    restrict\n     (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n      \\<psi>D (y, G x))\n     (HomD.set (y, G x))", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n  restrict\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n   (HomD.set (y, G x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n  restrict\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n   (HomD.set (y, G x))\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x h) = h", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n  restrict\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n   (HomD.set (y, G x))\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x h) = h", "have \"\\<phi>D (y, G x) h \\<in> HomD.set (y, G x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>D (y, G x) h \\<in> HomD.set (y, G x)", "using x y h HomD.\\<phi>_mapsto [of y \"G x\"]"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>D.ide y; D.ide (G x)\\<rbrakk>\n  \\<Longrightarrow> \\<phi>D (y, G x)\n                    \\<in> D.hom y (G x) \\<rightarrow> HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<phi>D (y, G x) h \\<in> HomD.set (y, G x)", "by auto"], ["proof (state)\nthis:\n  \\<phi>D (y, G x) h \\<in> HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x h) = h", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n  restrict\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n   (HomD.set (y, G x))\n  \\<phi>D (y, G x) h \\<in> HomD.set (y, G x)", "have\n            \"\\<phi>D (y, G x) h = (\\<phi>D (y, G x) o (\\<phi> y o \\<psi> x) o \\<psi>D (y, G x)) (\\<phi>D (y, G x) h)\""], ["proof (prove)\nusing this:\n  (\\<lambda>h\\<in>HomD.set (y, G x). h) =\n  restrict\n   (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n    \\<psi>D (y, G x))\n   (HomD.set (y, G x))\n  \\<phi>D (y, G x) h \\<in> HomD.set (y, G x)\n\ngoal (1 subgoal):\n 1. \\<phi>D (y, G x) h =\n    (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n     \\<psi>D (y, G x))\n     (\\<phi>D (y, G x) h)", "by fast"], ["proof (state)\nthis:\n  \\<phi>D (y, G x) h =\n  (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n   \\<psi>D (y, G x))\n   (\\<phi>D (y, G x) h)\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x h) = h", "hence \"\\<psi>D (y, G x) (\\<phi>D (y, G x) h) =\n                \\<psi>D (y, G x) ((\\<phi>D (y, G x) o (\\<phi> y o \\<psi> x) o \\<psi>D (y, G x)) (\\<phi>D (y, G x) h))\""], ["proof (prove)\nusing this:\n  \\<phi>D (y, G x) h =\n  (\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n   \\<psi>D (y, G x))\n   (\\<phi>D (y, G x) h)\n\ngoal (1 subgoal):\n 1. \\<psi>D (y, G x) (\\<phi>D (y, G x) h) =\n    \\<psi>D (y, G x)\n     ((\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n       \\<psi>D (y, G x))\n       (\\<phi>D (y, G x) h))", "by simp"], ["proof (state)\nthis:\n  \\<psi>D (y, G x) (\\<phi>D (y, G x) h) =\n  \\<psi>D (y, G x)\n   ((\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n     \\<psi>D (y, G x))\n     (\\<phi>D (y, G x) h))\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x h) = h", "hence \"h = \\<psi>D (y, G x) (\\<phi>D (y, G x) (\\<phi> y (\\<psi> x (\\<psi>D (y, G x) (\\<phi>D (y, G x) h)))))\""], ["proof (prove)\nusing this:\n  \\<psi>D (y, G x) (\\<phi>D (y, G x) h) =\n  \\<psi>D (y, G x)\n   ((\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n     \\<psi>D (y, G x))\n     (\\<phi>D (y, G x) h))\n\ngoal (1 subgoal):\n 1. h =\n    \\<psi>D (y, G x)\n     (\\<phi>D (y, G x)\n       (\\<phi> y (\\<psi> x (\\<psi>D (y, G x) (\\<phi>D (y, G x) h)))))", "using x y h HomD.\\<psi>_\\<phi>"], ["proof (prove)\nusing this:\n  \\<psi>D (y, G x) (\\<phi>D (y, G x) h) =\n  \\<psi>D (y, G x)\n   ((\\<phi>D (y, G x) \\<circ> (\\<phi> y \\<circ> \\<psi> x) \\<circ>\n     \\<psi>D (y, G x))\n     (\\<phi>D (y, G x) h))\n  C.ide x\n  D.ide y\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<guillemotleft>?f : ?b \\<rightarrow>\\<^sub>D ?a\\<guillemotright> \\<Longrightarrow>\n  \\<psi>D (?b, ?a) (\\<phi>D (?b, ?a) ?f) = ?f\n\ngoal (1 subgoal):\n 1. h =\n    \\<psi>D (y, G x)\n     (\\<phi>D (y, G x)\n       (\\<phi> y (\\<psi> x (\\<psi>D (y, G x) (\\<phi>D (y, G x) h)))))", "by simp"], ["proof (state)\nthis:\n  h =\n  \\<psi>D (y, G x)\n   (\\<phi>D (y, G x)\n     (\\<phi> y (\\<psi> x (\\<psi>D (y, G x) (\\<phi>D (y, G x) h)))))\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x h) = h", "also"], ["proof (state)\nthis:\n  h =\n  \\<psi>D (y, G x)\n   (\\<phi>D (y, G x)\n     (\\<phi> y (\\<psi> x (\\<psi>D (y, G x) (\\<phi>D (y, G x) h)))))\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x h) = h", "have \"... = \\<phi> y (\\<psi> x h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi>D (y, G x)\n     (\\<phi>D (y, G x)\n       (\\<phi> y (\\<psi> x (\\<psi>D (y, G x) (\\<phi>D (y, G x) h))))) =\n    \\<phi> y (\\<psi> x h)", "using x y h HomD.\\<psi>_\\<phi> HomD.\\<psi>_\\<phi> [of \"\\<phi> y (\\<psi> x h)\" y \"G x\"] \\<phi>_mapsto \\<psi>_mapsto"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<guillemotleft>h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<guillemotleft>?f : ?b \\<rightarrow>\\<^sub>D ?a\\<guillemotright> \\<Longrightarrow>\n  \\<psi>D (?b, ?a) (\\<phi>D (?b, ?a) ?f) = ?f\n  \\<guillemotleft>\\<phi> y\n                   (\\<psi> x\n                     h) : y \\<rightarrow>\\<^sub>D G\n             x\\<guillemotright> \\<Longrightarrow>\n  \\<psi>D (y, G x) (\\<phi>D (y, G x) (\\<phi> y (\\<psi> x h))) =\n  \\<phi> y (\\<psi> x h)\n  D.ide ?y \\<Longrightarrow>\n  \\<phi> ?y \\<in> C.hom (F ?y) ?x \\<rightarrow> D.hom ?y (G ?x)\n  C.ide ?x \\<Longrightarrow>\n  \\<psi> ?x \\<in> D.hom ?y (G ?x) \\<rightarrow> C.hom (F ?y) ?x\n\ngoal (1 subgoal):\n 1. \\<psi>D (y, G x)\n     (\\<phi>D (y, G x)\n       (\\<phi> y (\\<psi> x (\\<psi>D (y, G x) (\\<phi>D (y, G x) h))))) =\n    \\<phi> y (\\<psi> x h)", "by fastforce"], ["proof (state)\nthis:\n  \\<psi>D (y, G x)\n   (\\<phi>D (y, G x)\n     (\\<phi> y (\\<psi> x (\\<psi>D (y, G x) (\\<phi>D (y, G x) h))))) =\n  \\<phi> y (\\<psi> x h)\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x h) = h", "finally"], ["proof (chain)\npicking this:\n  h = \\<phi> y (\\<psi> x h)", "show ?thesis"], ["proof (prove)\nusing this:\n  h = \\<phi> y (\\<psi> x h)\n\ngoal (1 subgoal):\n 1. \\<phi> y (\\<psi> x h) = h", "by auto"], ["proof (state)\nthis:\n  \\<phi> y (\\<psi> x h) = h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<phi> y (\\<psi> x h) = h\n\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "fix x :: 'c and x' :: 'c and y :: 'd and y' :: 'd\n      and f :: 'c and g :: 'd and h :: 'c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "assume f: \"\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\" and g: \"\\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\" and h: \"\\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (state)\nthis:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "have x: \"C.ide x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide x", "using f"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n\ngoal (1 subgoal):\n 1. C.ide x", "by auto"], ["proof (state)\nthis:\n  C.ide x\n\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "have y: \"D.ide y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.ide y", "using g"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n\ngoal (1 subgoal):\n 1. D.ide y", "by auto"], ["proof (state)\nthis:\n  D.ide y\n\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "have x': \"C.ide x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C.ide x'", "using f"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n\ngoal (1 subgoal):\n 1. C.ide x'", "by auto"], ["proof (state)\nthis:\n  C.ide x'\n\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "have y': \"D.ide y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D.ide y'", "using g"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n\ngoal (1 subgoal):\n 1. D.ide y'", "by auto"], ["proof (state)\nthis:\n  D.ide y'\n\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y'\n                          (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n                         G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "show \"\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) = G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "have 0: \"restrict ((\\<phi>D (y', G x') o (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) o \\<psi>D (y, G x))\n                           o (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x)))\n                       (HomC.set (F y, x))\n                = restrict ((\\<phi>D (y', G x') o \\<phi> y' o \\<psi>C (F y', x'))\n                             o (\\<phi>C (F y', x') o (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) o \\<psi>C (F y, x))\n                           (HomC.set (F y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "have 1: \"S.arr (\\<Phi> (y, x)) \\<and>\n                   \\<Phi> (y, x) = S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                                      (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (\\<Phi> (y, x)) \\<and>\n    \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "using x y \\<Phi>_simp [of y x]"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<lbrakk>D.ide y; C.ide x\\<rbrakk> \\<Longrightarrow> S.arr (\\<Phi> (y, x))\n  \\<lbrakk>D.ide y; C.ide x\\<rbrakk>\n  \\<Longrightarrow> \\<Phi> (y, x) =\n                    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                      \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. S.arr (\\<Phi> (y, x)) \\<and>\n    \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "by auto"], ["proof (state)\nthis:\n  S.arr (\\<Phi> (y, x)) \\<and>\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "have 2: \"S.arr (\\<Phi> (y', x')) \\<and>\n                   \\<Phi> (y', x') = S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n                                        (\\<phi>D (y', G x') o \\<phi> y' o \\<psi>C (F y', x'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (\\<Phi> (y', x')) \\<and>\n    \\<Phi> (y', x') =\n    S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x'))", "using x' y' \\<Phi>_simp [of y' x']"], ["proof (prove)\nusing this:\n  C.ide x'\n  D.ide y'\n  \\<lbrakk>D.ide y'; C.ide x'\\<rbrakk>\n  \\<Longrightarrow> S.arr (\\<Phi> (y', x'))\n  \\<lbrakk>D.ide y'; C.ide x'\\<rbrakk>\n  \\<Longrightarrow> \\<Phi> (y', x') =\n                    S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n                     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n                      \\<psi>C (F y', x'))\n\ngoal (1 subgoal):\n 1. S.arr (\\<Phi> (y', x')) \\<and>\n    \\<Phi> (y', x') =\n    S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x'))", "by auto"], ["proof (state)\nthis:\n  S.arr (\\<Phi> (y', x')) \\<and>\n  \\<Phi> (y', x') =\n  S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x'))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "have 3: \"S.arr (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n                                  ((\\<phi>D (y', G x') o (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) o \\<psi>D (y, G x))\n                                    o (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))))\n                   \\<and> S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n                             ((\\<phi>D (y', G x') o (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) o \\<psi>D (y, G x))\n                               o (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x)))\n                     = S (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n                                  (\\<phi>D (y', G x') o (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) o \\<psi>D (y, G x)))\n                         (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                                  (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n         \\<psi>C (F y, x)))) \\<and>\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n         \\<psi>C (F y, x)))) \\<and>\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "have 1: \"S.seq (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n                                  (\\<phi>D (y', G x') o (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) o \\<psi>D (y, G x)))\n                           (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                                  (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.seq\n     (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x)))\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S.seq\n     (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x)))\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))", "have \"S.arr (Hom_DopxG.map (g, f)) \\<and>\n                    Hom_DopxG.map (g, f)\n                        = S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n                                  (\\<phi>D (y', G x') o (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) o \\<psi>D (y, G x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (Hom_DopxG.map (g, f)) \\<and>\n    Hom_DopxG.map (g, f) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x))", "using f g Hom_DopxG.preserves_arr Hom_DopxG_map_simp"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  DopxC.arr ?f \\<Longrightarrow> S.arr (Hom_DopxG.map ?f)\n  DopxC.arr ?gf \\<Longrightarrow>\n  Hom_DopxG.map ?gf =\n  S.mkArr (HomD.set (D.cod (fst ?gf), G (C.dom (snd ?gf))))\n   (HomD.set (D.dom (fst ?gf), G (C.cod (snd ?gf))))\n   (\\<phi>D (D.dom (fst ?gf), G (C.cod (snd ?gf))) \\<circ>\n    (\\<lambda>h.\n        G (snd ?gf) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst ?gf) \\<circ>\n    \\<psi>D (D.cod (fst ?gf), G (C.dom (snd ?gf))))\n\ngoal (1 subgoal):\n 1. S.arr (Hom_DopxG.map (g, f)) \\<and>\n    Hom_DopxG.map (g, f) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x))", "by fastforce"], ["proof (state)\nthis:\n  S.arr (Hom_DopxG.map (g, f)) \\<and>\n  Hom_DopxG.map (g, f) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x))\n\ngoal (1 subgoal):\n 1. S.seq\n     (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x)))\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  S.arr (Hom_DopxG.map (g, f)) \\<and>\n  Hom_DopxG.map (g, f) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x))\n\ngoal (1 subgoal):\n 1. S.seq\n     (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x)))\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))", "using 1 S.cod_mkArr S.dom_mkArr S.seqI"], ["proof (prove)\nusing this:\n  S.arr (Hom_DopxG.map (g, f)) \\<and>\n  Hom_DopxG.map (g, f) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x))\n  S.arr (\\<Phi> (y, x)) \\<and>\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\n  S.arr (S.mkArr ?A ?B ?F) \\<Longrightarrow>\n  S.cod (S.mkArr ?A ?B ?F) = S.mkIde ?B\n  S.arr (S.mkArr ?A ?B ?F) \\<Longrightarrow>\n  S.dom (S.mkArr ?A ?B ?F) = S.mkIde ?A\n  \\<lbrakk>S.arr ?f; S.arr ?g; S.dom ?g = S.cod ?f\\<rbrakk>\n  \\<Longrightarrow> S.seq ?g ?f\n\ngoal (1 subgoal):\n 1. S.seq\n     (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x)))\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))", "by metis"], ["proof (state)\nthis:\n  S.seq\n   (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)))\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.seq\n   (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)))\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n         \\<psi>C (F y, x)))) \\<and>\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "have \"S.seq (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n                                 (\\<phi>D (y', G x') o (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) o \\<psi>D (y, G x)))\n                        (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                                 (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.seq\n     (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x)))\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))", "using 1"], ["proof (prove)\nusing this:\n  S.seq\n   (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)))\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. S.seq\n     (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x)))\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n       (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))", "by (intro S.seqI', auto)"], ["proof (state)\nthis:\n  S.seq\n   (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)))\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n         \\<psi>C (F y, x)))) \\<and>\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "moreover"], ["proof (state)\nthis:\n  S.seq\n   (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)))\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n         \\<psi>C (F y, x)))) \\<and>\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "have \"S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n                             ((\\<phi>D (y', G x') o (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) o \\<psi>D (y, G x))\n                               o (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x)))\n                             = S (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n                                          (\\<phi>D (y', G x') o (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) o \\<psi>D (y, G x)))\n                                 (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                                          (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "using 1 S.comp_mkArr"], ["proof (prove)\nusing this:\n  S.seq\n   (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)))\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n  \\<lbrakk>S.arr (S.mkArr ?A ?B ?F); S.arr (S.mkArr ?B ?C ?G)\\<rbrakk>\n  \\<Longrightarrow> S.mkArr ?B ?C ?G \\<cdot>\\<^sub>S S.mkArr ?A ?B ?F =\n                    S.mkArr ?A ?C (?G \\<circ> ?F)\n\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "by fastforce"], ["proof (state)\nthis:\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n         \\<psi>C (F y, x)))) \\<and>\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "ultimately"], ["proof (chain)\npicking this:\n  S.seq\n   (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)))\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "show ?thesis"], ["proof (prove)\nusing this:\n  S.seq\n   (S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)))\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n         \\<psi>C (F y, x)))) \\<and>\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "by auto"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))) \\<and>\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))) \\<and>\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "moreover"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))) \\<and>\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "have\n             4: \"S.arr (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n                                ((\\<phi>D (y', G x') o \\<phi> y' o \\<psi>C (F y', x'))\n                                  o (\\<phi>C (F y', x') o (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) o \\<psi>C (F y, x))))\n                 \\<and> S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n                           ((\\<phi>D (y', G x') o \\<phi> y' o \\<psi>C (F y', x'))\n                             o (\\<phi>C (F y', x') o (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) o \\<psi>C (F y, x)))\n                     = S (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x')) \n                                  (\\<phi>D (y', G x') o \\<phi> y' o \\<psi>C (F y', x')))\n                         (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n                                  (\\<phi>C (F y', x') o (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) o \\<psi>C (F y, x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n        \\<psi>C (F y', x') \\<circ>\n        (\\<phi>C (F y', x') \\<circ>\n         (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n         \\<psi>C (F y, x)))) \\<and>\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n        \\<psi>C (F y', x') \\<circ>\n        (\\<phi>C (F y', x') \\<circ>\n         (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n         \\<psi>C (F y, x)))) \\<and>\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x))", "have 5: \"S.seq (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n                                    (\\<phi>D (y', G x') o \\<phi> y' o \\<psi>C (F y', x')))\n                           (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n                                    (\\<phi>C (F y', x') o (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) o \\<psi>C (F y, x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.seq\n     (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')))\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n       (\\<phi>C (F y', x') \\<circ>\n        (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n        \\<psi>C (F y, x)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S.seq\n     (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')))\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n       (\\<phi>C (F y', x') \\<circ>\n        (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n        \\<psi>C (F y, x)))", "have \"S.arr (Hom_FopxC.map (g, f)) \\<and>\n                    Hom_FopxC.map (g, f)\n                          = S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n                                    (\\<phi>C (F y', x') o (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) o \\<psi>C (F y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.arr (Hom_FopxC.map (g, f)) \\<and>\n    Hom_FopxC.map (g, f) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x))", "using f g Hom_FopxC.preserves_arr Hom_FopxC_map_simp"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  DopxC.arr ?f \\<Longrightarrow> S.arr (Hom_FopxC.map ?f)\n  DopxC.arr ?gf \\<Longrightarrow>\n  Hom_FopxC.map ?gf =\n  S.mkArr (HomC.set (F (D.cod (fst ?gf)), C.dom (snd ?gf)))\n   (HomC.set (F (D.dom (fst ?gf)), C.cod (snd ?gf)))\n   (\\<phi>C (F (D.dom (fst ?gf)), C.cod (snd ?gf)) \\<circ>\n    (\\<lambda>h.\n        snd ?gf \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst ?gf)) \\<circ>\n    \\<psi>C (F (D.cod (fst ?gf)), C.dom (snd ?gf)))\n\ngoal (1 subgoal):\n 1. S.arr (Hom_FopxC.map (g, f)) \\<and>\n    Hom_FopxC.map (g, f) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x))", "by fastforce"], ["proof (state)\nthis:\n  S.arr (Hom_FopxC.map (g, f)) \\<and>\n  Hom_FopxC.map (g, f) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. S.seq\n     (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')))\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n       (\\<phi>C (F y', x') \\<circ>\n        (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n        \\<psi>C (F y, x)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  S.arr (Hom_FopxC.map (g, f)) \\<and>\n  Hom_FopxC.map (g, f) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. S.seq\n     (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')))\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n       (\\<phi>C (F y', x') \\<circ>\n        (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n        \\<psi>C (F y, x)))", "using 2 S.cod_mkArr S.dom_mkArr S.seqI"], ["proof (prove)\nusing this:\n  S.arr (Hom_FopxC.map (g, f)) \\<and>\n  Hom_FopxC.map (g, f) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))\n  S.arr (\\<Phi> (y', x')) \\<and>\n  \\<Phi> (y', x') =\n  S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x'))\n  S.arr (S.mkArr ?A ?B ?F) \\<Longrightarrow>\n  S.cod (S.mkArr ?A ?B ?F) = S.mkIde ?B\n  S.arr (S.mkArr ?A ?B ?F) \\<Longrightarrow>\n  S.dom (S.mkArr ?A ?B ?F) = S.mkIde ?A\n  \\<lbrakk>S.arr ?f; S.arr ?g; S.dom ?g = S.cod ?f\\<rbrakk>\n  \\<Longrightarrow> S.seq ?g ?f\n\ngoal (1 subgoal):\n 1. S.seq\n     (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')))\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n       (\\<phi>C (F y', x') \\<circ>\n        (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n        \\<psi>C (F y, x)))", "by metis"], ["proof (state)\nthis:\n  S.seq\n   (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')))\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.seq\n   (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')))\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n        \\<psi>C (F y', x') \\<circ>\n        (\\<phi>C (F y', x') \\<circ>\n         (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n         \\<psi>C (F y, x)))) \\<and>\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x))", "have \"S.seq (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n                                 (\\<phi>D (y', G x') o \\<phi> y' o \\<psi>C (F y', x')))\n                        (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n                                 (\\<phi>C (F y', x') o (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) o \\<psi>C (F y, x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.seq\n     (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')))\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n       (\\<phi>C (F y', x') \\<circ>\n        (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n        \\<psi>C (F y, x)))", "using 5"], ["proof (prove)\nusing this:\n  S.seq\n   (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')))\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. S.seq\n     (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')))\n     (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n       (\\<phi>C (F y', x') \\<circ>\n        (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n        \\<psi>C (F y, x)))", "by (intro S.seqI', auto)"], ["proof (state)\nthis:\n  S.seq\n   (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')))\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n        \\<psi>C (F y', x') \\<circ>\n        (\\<phi>C (F y', x') \\<circ>\n         (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n         \\<psi>C (F y, x)))) \\<and>\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x))", "moreover"], ["proof (state)\nthis:\n  S.seq\n   (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')))\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n        \\<psi>C (F y', x') \\<circ>\n        (\\<phi>C (F y', x') \\<circ>\n         (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n         \\<psi>C (F y, x)))) \\<and>\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x))", "have \"S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n                                   ((\\<phi>D (y', G x') o \\<phi> y' o \\<psi>C (F y', x'))\n                                     o (\\<phi>C (F y', x') o (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) o \\<psi>C (F y, x)))\n                             = S (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n                                          (\\<phi>D (y', G x') o \\<phi> y' o \\<psi>C (F y', x')))\n                                 (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n                                          (\\<phi>C (F y', x') o (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) o \\<psi>C (F y, x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x))", "using 5 S.comp_mkArr"], ["proof (prove)\nusing this:\n  S.seq\n   (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')))\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x)))\n  \\<lbrakk>S.arr (S.mkArr ?A ?B ?F); S.arr (S.mkArr ?B ?C ?G)\\<rbrakk>\n  \\<Longrightarrow> S.mkArr ?B ?C ?G \\<cdot>\\<^sub>S S.mkArr ?A ?B ?F =\n                    S.mkArr ?A ?C (?G \\<circ> ?F)\n\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x))", "by fastforce"], ["proof (state)\nthis:\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n    \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n        \\<psi>C (F y', x') \\<circ>\n        (\\<phi>C (F y', x') \\<circ>\n         (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n         \\<psi>C (F y, x)))) \\<and>\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x))", "ultimately"], ["proof (chain)\npicking this:\n  S.seq\n   (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')))\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x)))\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n    \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))", "show ?thesis"], ["proof (prove)\nusing this:\n  S.seq\n   (S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')))\n   (S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x)))\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n    \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n        \\<psi>C (F y', x') \\<circ>\n        (\\<phi>C (F y', x') \\<circ>\n         (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n         \\<psi>C (F y, x)))) \\<and>\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x))", "by argo"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))) \\<and>\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n    \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))) \\<and>\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n    \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "moreover"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))) \\<and>\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n    \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "have 2:\n              \"S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n                       ((\\<phi>D (y', G x') o (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) o \\<psi>D (y, G x))\n                         o (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x)))\n                  = S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n                            ((\\<phi>D (y', G x') o \\<phi> y' o \\<psi>C (F y', x'))\n                              o (\\<phi>C (F y', x') o (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) o \\<psi>C (F y, x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))", "have\n              \"S (Hom_DopxG.map (g, f)) (\\<Phi> (y, x)) = S (\\<Phi> (y', x')) (Hom_FopxC.map (g, f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hom_DopxG.map (g, f) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    \\<Phi> (y', x') \\<cdot>\\<^sub>S Hom_FopxC.map (g, f)", "using f g \\<Phi>.is_natural_1 \\<Phi>.is_natural_2"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  DopxC.arr ?f \\<Longrightarrow>\n  Hom_DopxG.map ?f \\<cdot>\\<^sub>S \\<Phi> (DopxC.dom ?f) = \\<Phi> ?f\n  DopxC.arr ?f \\<Longrightarrow>\n  \\<Phi> (DopxC.cod ?f) \\<cdot>\\<^sub>S Hom_FopxC.map ?f = \\<Phi> ?f\n\ngoal (1 subgoal):\n 1. Hom_DopxG.map (g, f) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n    \\<Phi> (y', x') \\<cdot>\\<^sub>S Hom_FopxC.map (g, f)", "by fastforce"], ["proof (state)\nthis:\n  Hom_DopxG.map (g, f) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  \\<Phi> (y', x') \\<cdot>\\<^sub>S Hom_FopxC.map (g, f)\n\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))", "moreover"], ["proof (state)\nthis:\n  Hom_DopxG.map (g, f) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  \\<Phi> (y', x') \\<cdot>\\<^sub>S Hom_FopxC.map (g, f)\n\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))", "have \"Hom_DopxG.map (g, f)\n                             = S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n                                       (\\<phi>D (y', G x') o (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) o \\<psi>D (y, G x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hom_DopxG.map (g, f) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x))", "using f g Hom_DopxG_map_simp [of \"(g, f)\"]"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  DopxC.arr (g, f) \\<Longrightarrow>\n  Hom_DopxG.map (g, f) =\n  S.mkArr (HomD.set (D.cod (fst (g, f)), G (C.dom (snd (g, f)))))\n   (HomD.set (D.dom (fst (g, f)), G (C.cod (snd (g, f)))))\n   (\\<phi>D (D.dom (fst (g, f)), G (C.cod (snd (g, f)))) \\<circ>\n    (\\<lambda>h.\n        G (snd (g, f)) \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D fst (g, f)) \\<circ>\n    \\<psi>D (D.cod (fst (g, f)), G (C.dom (snd (g, f)))))\n\ngoal (1 subgoal):\n 1. Hom_DopxG.map (g, f) =\n    S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x))", "by fastforce"], ["proof (state)\nthis:\n  Hom_DopxG.map (g, f) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x))\n\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))", "moreover"], ["proof (state)\nthis:\n  Hom_DopxG.map (g, f) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x))\n\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))", "have \"Hom_FopxC.map (g, f)\n                             = S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n                                       (\\<phi>C (F y', x') o (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) o \\<psi>C (F y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hom_FopxC.map (g, f) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x))", "using f g Hom_FopxC_map_simp [of \"(g, f)\"]"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  DopxC.arr (g, f) \\<Longrightarrow>\n  Hom_FopxC.map (g, f) =\n  S.mkArr (HomC.set (F (D.cod (fst (g, f))), C.dom (snd (g, f))))\n   (HomC.set (F (D.dom (fst (g, f))), C.cod (snd (g, f))))\n   (\\<phi>C (F (D.dom (fst (g, f))), C.cod (snd (g, f))) \\<circ>\n    (\\<lambda>h.\n        snd (g, f) \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F (fst (g, f))) \\<circ>\n    \\<psi>C (F (D.cod (fst (g, f))), C.dom (snd (g, f))))\n\ngoal (1 subgoal):\n 1. Hom_FopxC.map (g, f) =\n    S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n      \\<psi>C (F y, x))", "by fastforce"], ["proof (state)\nthis:\n  Hom_FopxC.map (g, f) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))", "ultimately"], ["proof (chain)\npicking this:\n  Hom_DopxG.map (g, f) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  \\<Phi> (y', x') \\<cdot>\\<^sub>S Hom_FopxC.map (g, f)\n  Hom_DopxG.map (g, f) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x))\n  Hom_FopxC.map (g, f) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))", "show ?thesis"], ["proof (prove)\nusing this:\n  Hom_DopxG.map (g, f) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  \\<Phi> (y', x') \\<cdot>\\<^sub>S Hom_FopxC.map (g, f)\n  Hom_DopxG.map (g, f) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x))\n  Hom_FopxC.map (g, f) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))", "using 1 2 3 4"], ["proof (prove)\nusing this:\n  Hom_DopxG.map (g, f) \\<cdot>\\<^sub>S \\<Phi> (y, x) =\n  \\<Phi> (y', x') \\<cdot>\\<^sub>S Hom_FopxC.map (g, f)\n  Hom_DopxG.map (g, f) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x))\n  Hom_FopxC.map (g, f) =\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))\n  S.arr (\\<Phi> (y, x)) \\<and>\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\n  S.arr (\\<Phi> (y', x')) \\<and>\n  \\<Phi> (y', x') =\n  S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x'))\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))) \\<and>\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))) \\<and>\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n    \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))", "by simp"], ["proof (state)\nthis:\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "ultimately"], ["proof (chain)\npicking this:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))) \\<and>\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))) \\<and>\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n    \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x)))", "have 6: \"S.arr (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n                                             ((\\<phi>D (y', G x') o (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) o \\<psi>D (y, G x))\n                                               o (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))))\""], ["proof (prove)\nusing this:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))) \\<and>\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n  S.mkArr (HomD.set (y, G x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x)) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))) \\<and>\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n    \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. S.arr\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))))", "by fast"], ["proof (state)\nthis:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "hence \"restrict ((\\<phi>D (y', G x') o (\\<lambda>h. D (G f) (D h g)) o \\<psi>D (y, G x))\n                            o (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x)))\n                          (HomC.set (F y, x))\n                  = S.Fun (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n                                  ((\\<phi>D (y', G x') o (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) o \\<psi>D (y, G x))\n                                    o (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))))\""], ["proof (prove)\nusing this:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    S.Fun\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))))", "by simp"], ["proof (state)\nthis:\n  restrict\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n   (HomC.set (F y, x)) =\n  S.Fun\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "also"], ["proof (state)\nthis:\n  restrict\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n   (HomC.set (F y, x)) =\n  S.Fun\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "have \"... = S.Fun (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n                                       ((\\<phi>D (y', G x') o \\<phi> y' o \\<psi>C (F y', x'))\n                                         o (\\<phi>C (F y', x') o (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) o \\<psi>C (F y, x))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.Fun\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))) =\n    S.Fun\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n        \\<psi>C (F y', x') \\<circ>\n        (\\<phi>C (F y', x') \\<circ>\n         (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n         \\<psi>C (F y, x))))", "using 2"], ["proof (prove)\nusing this:\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x)))\n\ngoal (1 subgoal):\n 1. S.Fun\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ>\n        (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n        \\<psi>D (y, G x) \\<circ>\n        (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))) =\n    S.Fun\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n        \\<psi>C (F y', x') \\<circ>\n        (\\<phi>C (F y', x') \\<circ>\n         (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n         \\<psi>C (F y, x))))", "by argo"], ["proof (state)\nthis:\n  S.Fun\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))) =\n  S.Fun\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x))))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "also"], ["proof (state)\nthis:\n  S.Fun\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))) =\n  S.Fun\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x))))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "have \"... = restrict ((\\<phi>D (y', G x') o \\<phi> y' o \\<psi>C (F y', x'))\n                                      o (\\<phi>C (F y', x') o (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) o \\<psi>C (F y, x)))\n                                    (HomC.set (F y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.Fun\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n        \\<psi>C (F y', x') \\<circ>\n        (\\<phi>C (F y', x') \\<circ>\n         (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n         \\<psi>C (F y, x)))) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))\n     (HomC.set (F y, x))", "using 4 S.Fun_mkArr"], ["proof (prove)\nusing this:\n  S.arr\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))) \\<and>\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x))) =\n  S.mkArr (HomC.set (F y', x')) (HomD.set (y', G x'))\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n    \\<psi>C (F y', x')) \\<cdot>\\<^sub>S\n  S.mkArr (HomC.set (F y, x)) (HomC.set (F y', x'))\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n    \\<psi>C (F y, x))\n  S.arr (S.mkArr ?A ?B ?F) \\<Longrightarrow>\n  S.Fun (S.mkArr ?A ?B ?F) = restrict ?F ?A\n\ngoal (1 subgoal):\n 1. S.Fun\n     (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n       (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n        \\<psi>C (F y', x') \\<circ>\n        (\\<phi>C (F y', x') \\<circ>\n         (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n         \\<psi>C (F y, x)))) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))\n     (HomC.set (F y, x))", "by meson"], ["proof (state)\nthis:\n  S.Fun\n   (S.mkArr (HomC.set (F y, x)) (HomD.set (y', G x'))\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n       \\<psi>C (F y, x)))) =\n  restrict\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x)))\n   (HomC.set (F y, x))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "finally"], ["proof (chain)\npicking this:\n  restrict\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n   (HomC.set (F y, x)) =\n  restrict\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x)))\n   (HomC.set (F y, x))", "show ?thesis"], ["proof (prove)\nusing this:\n  restrict\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n   (HomC.set (F y, x)) =\n  restrict\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n     \\<psi>C (F y, x)))\n   (HomC.set (F y, x))\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x))", "by auto"], ["proof (state)\nthis:\n  restrict\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n   (HomC.set (F y, x)) =\n  restrict\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n    \\<psi>C (F y, x))\n   (HomC.set (F y, x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  restrict\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n   (HomC.set (F y, x)) =\n  restrict\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n    \\<psi>C (F y, x))\n   (HomC.set (F y, x))\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "hence 5: \"((\\<phi>D (y', G x') \\<circ> (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ> \\<psi>D (y, G x))\n                    \\<circ> (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))) (\\<phi>C (F y, x) h) =\n                   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x')\n                     \\<circ> (\\<phi>C (F y', x') \\<circ> (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ> \\<psi>C (F y, x)) (\\<phi>C (F y, x) h)\""], ["proof (prove)\nusing this:\n  restrict\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n   (HomC.set (F y, x)) =\n  restrict\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n    \\<psi>C (F y, x))\n   (HomC.set (F y, x))\n\ngoal (1 subgoal):\n 1. (\\<phi>D (y', G x') \\<circ>\n     (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n     \\<psi>D (y, G x) \\<circ>\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (\\<phi>C (F y, x) h) =\n    (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n     \\<psi>C (F y, x))\n     (\\<phi>C (F y, x) h)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x)) \\<Longrightarrow>\n    (\\<phi>D (y', G x') \\<circ>\n     (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n     \\<psi>D (y, G x) \\<circ>\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (\\<phi>C (F y, x) h) =\n    (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n     \\<psi>C (F y, x))\n     (\\<phi>C (F y, x) h)", "have \"\\<phi>C (F y, x) h \\<in> HomC.set (F y, x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)", "using x y h HomC.\\<phi>_mapsto [of \"F y\" x]"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>C.ide (F y); C.ide x\\<rbrakk>\n  \\<Longrightarrow> \\<phi>C (F y, x)\n                    \\<in> C.hom (F y) x \\<rightarrow> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)", "by auto"], ["proof (state)\nthis:\n  \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. restrict\n     (\\<phi>D (y', G x') \\<circ>\n      (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n      \\<psi>D (y, G x) \\<circ>\n      (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (HomC.set (F y, x)) =\n    restrict\n     (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n      \\<psi>C (F y', x') \\<circ>\n      (\\<phi>C (F y', x') \\<circ>\n       (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n      \\<psi>C (F y, x))\n     (HomC.set (F y, x)) \\<Longrightarrow>\n    (\\<phi>D (y', G x') \\<circ>\n     (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n     \\<psi>D (y, G x) \\<circ>\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (\\<phi>C (F y, x) h) =\n    (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n     \\<psi>C (F y, x))\n     (\\<phi>C (F y, x) h)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)\n\ngoal (1 subgoal):\n 1. (\\<phi>D (y', G x') \\<circ>\n     (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n     \\<psi>D (y, G x) \\<circ>\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (\\<phi>C (F y, x) h) =\n    (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n     \\<psi>C (F y, x))\n     (\\<phi>C (F y, x) h)", "using 0 h restr_eqE [of \"(\\<phi>D (y', G x') \\<circ> (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ> \\<psi>D (y, G x))\n                                      \\<circ> (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\"\n                                    \"HomC.set (F y, x)\"\n                                    \"(\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x'))\n                                       \\<circ> (\\<phi>C (F y', x') \\<circ> (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) o \\<psi>C (F y, x))\"]"], ["proof (prove)\nusing this:\n  \\<phi>C (F y, x) h \\<in> HomC.set (F y, x)\n  restrict\n   (\\<phi>D (y', G x') \\<circ>\n    (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n    \\<psi>D (y, G x) \\<circ>\n    (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n   (HomC.set (F y, x)) =\n  restrict\n   (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n    (\\<phi>C (F y', x') \\<circ>\n     (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n    \\<psi>C (F y, x))\n   (HomC.set (F y, x))\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>restrict\n            (\\<phi>D (y', G x') \\<circ>\n             (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n             \\<psi>D (y, G x) \\<circ>\n             (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n            (HomC.set (F y, x)) =\n           restrict\n            (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n             \\<psi>C (F y', x') \\<circ>\n             (\\<phi>C (F y', x') \\<circ>\n              (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n              \\<psi>C (F y, x)))\n            (HomC.set (F y, x));\n   ?x \\<in> HomC.set (F y, x)\\<rbrakk>\n  \\<Longrightarrow> (\\<phi>D (y', G x') \\<circ>\n                     (\\<lambda>h.\n                         G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n                     \\<psi>D (y, G x) \\<circ>\n                     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                      \\<psi>C (F y, x)))\n                     ?x =\n                    (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ>\n                     \\<psi>C (F y', x') \\<circ>\n                     (\\<phi>C (F y', x') \\<circ>\n                      (\\<lambda>h.\n                          f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) \\<circ>\n                      \\<psi>C (F y, x)))\n                     ?x\n\ngoal (1 subgoal):\n 1. (\\<phi>D (y', G x') \\<circ>\n     (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n     \\<psi>D (y, G x) \\<circ>\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n     (\\<phi>C (F y, x) h) =\n    (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n     (\\<phi>C (F y', x') \\<circ>\n      (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n     \\<psi>C (F y, x))\n     (\\<phi>C (F y, x) h)", "by fast"], ["proof (state)\nthis:\n  (\\<phi>D (y', G x') \\<circ>\n   (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n   \\<psi>D (y, G x) \\<circ>\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n   (\\<phi>C (F y, x) h) =\n  (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n   \\<psi>C (F y, x))\n   (\\<phi>C (F y, x) h)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<phi>D (y', G x') \\<circ>\n   (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n   \\<psi>D (y, G x) \\<circ>\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n   (\\<phi>C (F y, x) h) =\n  (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n   \\<psi>C (F y, x))\n   (\\<phi>C (F y, x) h)\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "have \"\\<phi> y' (C f (C h (F g))) =\n                  \\<psi>D (y', G x') (\\<phi>D (y', G x') (\\<phi> y' (\\<psi>C (F y', x') (\\<phi>C (F y', x')\n                     (C f (C (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)) (F g)))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x')\n             (f \\<cdot>\\<^sub>C\n              \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g)))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x')\n             (f \\<cdot>\\<^sub>C\n              \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g)))))", "have \"\\<psi>D (y', G x') (\\<phi>D (y', G x') (\\<phi> y' (\\<psi>C (F y', x') (\\<phi>C (F y', x')\n                     (C f (C (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)) (F g)))))))\n                    = \\<psi>D (y', G x') (\\<phi>D (y', G x') (\\<phi> y' (\\<psi>C (F y', x') (\\<phi>C (F y', x')\n                         (C f (C h (F g)))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x')\n             (f \\<cdot>\\<^sub>C\n              \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C\n              F g))))) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x') (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)))))", "using x y h HomC.\\<psi>_\\<phi>"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<guillemotleft>?f : ?b \\<rightarrow>\\<^sub>C ?a\\<guillemotright> \\<Longrightarrow>\n  \\<psi>C (?b, ?a) (\\<phi>C (?b, ?a) ?f) = ?f\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x')\n             (f \\<cdot>\\<^sub>C\n              \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C\n              F g))))) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x') (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)))))", "by simp"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y'\n       (\\<psi>C (F y', x')\n         (\\<phi>C (F y', x')\n           (f \\<cdot>\\<^sub>C\n            \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g))))) =\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y'\n       (\\<psi>C (F y', x')\n         (\\<phi>C (F y', x') (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)))))\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x')\n             (f \\<cdot>\\<^sub>C\n              \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g)))))", "also"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y'\n       (\\<psi>C (F y', x')\n         (\\<phi>C (F y', x')\n           (f \\<cdot>\\<^sub>C\n            \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g))))) =\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y'\n       (\\<psi>C (F y', x')\n         (\\<phi>C (F y', x') (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)))))\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x')\n             (f \\<cdot>\\<^sub>C\n              \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g)))))", "have \"... = \\<psi>D (y', G x') (\\<phi>D (y', G x') (\\<phi> y' (C f (C h (F g)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x')\n             (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g))))) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)))", "using f g h HomC.\\<psi>_\\<phi> [of \"C f (C h (F g))\"]"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<guillemotleft>f \\<cdot>\\<^sub>C\n                  h \\<cdot>\\<^sub>C\n                  F g : ?b \\<rightarrow>\\<^sub>C ?a\\<guillemotright> \\<Longrightarrow>\n  \\<psi>C (?b, ?a)\n   (\\<phi>C (?b, ?a) (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) =\n  f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x')\n             (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g))))) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)))", "by fastforce"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y'\n       (\\<psi>C (F y', x')\n         (\\<phi>C (F y', x') (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g))))) =\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)))\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x')\n             (f \\<cdot>\\<^sub>C\n              \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g)))))", "also"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y'\n       (\\<psi>C (F y', x')\n         (\\<phi>C (F y', x') (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g))))) =\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)))\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x')\n             (f \\<cdot>\\<^sub>C\n              \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g)))))", "have \"... = \\<phi> y' (C f (C h (F g)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g))) =\n    \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g))) =\n    \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)", "have \"\\<guillemotleft>\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y'\n                     (f \\<cdot>\\<^sub>C\n                      h \\<cdot>\\<^sub>C\n                      F g) : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>", "using f g h y' x' \\<phi>_mapsto [of y' x']"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  D.ide y'\n  C.ide x'\n  D.ide y' \\<Longrightarrow>\n  \\<phi> y' \\<in> C.hom (F y') x' \\<rightarrow> D.hom y' (G x')\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y'\n                     (f \\<cdot>\\<^sub>C\n                      h \\<cdot>\\<^sub>C\n                      F g) : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<phi> y'\n                   (f \\<cdot>\\<^sub>C\n                    h \\<cdot>\\<^sub>C\n                    F g) : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g))) =\n    \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<phi> y'\n                   (f \\<cdot>\\<^sub>C\n                    h \\<cdot>\\<^sub>C\n                    F g) : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g))) =\n    \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)", "by simp"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g))) =\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g))) =\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x')\n             (f \\<cdot>\\<^sub>C\n              \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g)))))", "finally"], ["proof (chain)\npicking this:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y'\n       (\\<psi>C (F y', x')\n         (\\<phi>C (F y', x')\n           (f \\<cdot>\\<^sub>C\n            \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g))))) =\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y'\n       (\\<psi>C (F y', x')\n         (\\<phi>C (F y', x')\n           (f \\<cdot>\\<^sub>C\n            \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g))))) =\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x')\n             (f \\<cdot>\\<^sub>C\n              \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g)))))", "by auto"], ["proof (state)\nthis:\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y'\n       (\\<psi>C (F y', x')\n         (\\<phi>C (F y', x')\n           (f \\<cdot>\\<^sub>C\n            \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g)))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y'\n       (\\<psi>C (F y', x')\n         (\\<phi>C (F y', x')\n           (f \\<cdot>\\<^sub>C\n            \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g)))))\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "also"], ["proof (state)\nthis:\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y'\n       (\\<psi>C (F y', x')\n         (\\<phi>C (F y', x')\n           (f \\<cdot>\\<^sub>C\n            \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g)))))\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "have\n             \"... = \\<psi>D (y', G x')\n                       (\\<phi>D (y', G x')\n                           (G f \\<cdot>\\<^sub>D \\<psi>D (y, G x) (\\<phi>D (y, G x) (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h))))\n                                \\<cdot>\\<^sub>D g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x')\n             (f \\<cdot>\\<^sub>C\n              \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C\n              F g))))) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x)\n         (\\<phi>D (y, G x)\n           (\\<phi> y\n             (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n        g))", "using 5"], ["proof (prove)\nusing this:\n  (\\<phi>D (y', G x') \\<circ>\n   (\\<lambda>h. G f \\<cdot>\\<^sub>D h \\<cdot>\\<^sub>D g) \\<circ>\n   \\<psi>D (y, G x) \\<circ>\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x)))\n   (\\<phi>C (F y, x) h) =\n  (\\<phi>D (y', G x') \\<circ> \\<phi> y' \\<circ> \\<psi>C (F y', x') \\<circ>\n   (\\<phi>C (F y', x') \\<circ>\n    (\\<lambda>h. f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g)) \\<circ>\n   \\<psi>C (F y, x))\n   (\\<phi>C (F y, x) h)\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (\\<phi> y'\n         (\\<psi>C (F y', x')\n           (\\<phi>C (F y', x')\n             (f \\<cdot>\\<^sub>C\n              \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C\n              F g))))) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x)\n         (\\<phi>D (y, G x)\n           (\\<phi> y\n             (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n        g))", "by force"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y'\n       (\\<psi>C (F y', x')\n         (\\<phi>C (F y', x')\n           (f \\<cdot>\\<^sub>C\n            \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g))))) =\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (G f \\<cdot>\\<^sub>D\n      \\<psi>D (y, G x)\n       (\\<phi>D (y, G x)\n         (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n      g))\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "also"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (\\<phi> y'\n       (\\<psi>C (F y', x')\n         (\\<phi>C (F y', x')\n           (f \\<cdot>\\<^sub>C\n            \\<psi>C (F y, x) (\\<phi>C (F y, x) h) \\<cdot>\\<^sub>C F g))))) =\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (G f \\<cdot>\\<^sub>D\n      \\<psi>D (y, G x)\n       (\\<phi>D (y, G x)\n         (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n      g))\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "have \"... = D (G f) (D (\\<phi> y h) g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x)\n         (\\<phi>D (y, G x)\n           (\\<phi> y\n             (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n        g)) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x)\n         (\\<phi>D (y, G x)\n           (\\<phi> y\n             (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n        g)) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "have \\<phi>yh: \"\\<guillemotleft>\\<phi> y h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "using x y h \\<phi>_mapsto"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  D.ide ?y \\<Longrightarrow>\n  \\<phi> ?y \\<in> C.hom (F ?y) ?x \\<rightarrow> D.hom ?y (G ?x)\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>\\<phi> y\n                     h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>\\<phi> y h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x)\n         (\\<phi>D (y, G x)\n           (\\<phi> y\n             (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n        g)) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "have \"\\<psi>D (y', G x')\n                     (\\<phi>D (y', G x')\n                         (G f \\<cdot>\\<^sub>D \\<psi>D (y, G x) (\\<phi>D (y, G x) (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h))))\n                              \\<cdot>\\<^sub>D g)) =\n                  \\<psi>D (y', G x') (\\<phi>D (y', G x') (G f \\<cdot>\\<^sub>D \\<psi>D (y, G x) (\\<phi>D (y, G x) (\\<phi> y h)) \\<cdot>\\<^sub>D g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x)\n         (\\<phi>D (y, G x)\n           (\\<phi> y\n             (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n        g)) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x) (\\<phi>D (y, G x) (\\<phi> y h)) \\<cdot>\\<^sub>D g))", "using x y f g h"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x)\n         (\\<phi>D (y, G x)\n           (\\<phi> y\n             (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n        g)) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x) (\\<phi>D (y, G x) (\\<phi> y h)) \\<cdot>\\<^sub>D g))", "by auto"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (G f \\<cdot>\\<^sub>D\n      \\<psi>D (y, G x)\n       (\\<phi>D (y, G x)\n         (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n      g)) =\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (G f \\<cdot>\\<^sub>D\n      \\<psi>D (y, G x) (\\<phi>D (y, G x) (\\<phi> y h)) \\<cdot>\\<^sub>D g))\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x)\n         (\\<phi>D (y, G x)\n           (\\<phi> y\n             (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n        g)) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "also"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (G f \\<cdot>\\<^sub>D\n      \\<psi>D (y, G x)\n       (\\<phi>D (y, G x)\n         (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n      g)) =\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (G f \\<cdot>\\<^sub>D\n      \\<psi>D (y, G x) (\\<phi>D (y, G x) (\\<phi> y h)) \\<cdot>\\<^sub>D g))\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x)\n         (\\<phi>D (y, G x)\n           (\\<phi> y\n             (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n        g)) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "have \"... = \\<psi>D (y', G x') (\\<phi>D (y', G x') (G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x) (\\<phi>D (y, G x) (\\<phi> y h)) \\<cdot>\\<^sub>D\n        g)) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x') (G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g))", "using \\<phi>yh x' y' f g"], ["proof (prove)\nusing this:\n  \\<guillemotleft>\\<phi> y h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  C.ide x'\n  D.ide y'\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x) (\\<phi>D (y, G x) (\\<phi> y h)) \\<cdot>\\<^sub>D\n        g)) =\n    \\<psi>D (y', G x')\n     (\\<phi>D (y', G x') (G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g))", "by simp"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (G f \\<cdot>\\<^sub>D\n      \\<psi>D (y, G x) (\\<phi>D (y, G x) (\\<phi> y h)) \\<cdot>\\<^sub>D g)) =\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x') (G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g))\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x)\n         (\\<phi>D (y, G x)\n           (\\<phi> y\n             (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n        g)) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "also"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (G f \\<cdot>\\<^sub>D\n      \\<psi>D (y, G x) (\\<phi>D (y, G x) (\\<phi> y h)) \\<cdot>\\<^sub>D g)) =\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x') (G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g))\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x)\n         (\\<phi>D (y, G x)\n           (\\<phi> y\n             (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n        g)) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "have \"... = G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g)) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g)) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "have \"\\<guillemotleft>G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>G f \\<cdot>\\<^sub>D\n                    \\<phi> y h \\<cdot>\\<^sub>D\n                    g : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>", "using x x' y' f g h \\<phi>_mapsto \\<phi>yh"], ["proof (prove)\nusing this:\n  C.ide x\n  C.ide x'\n  D.ide y'\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  D.ide ?y \\<Longrightarrow>\n  \\<phi> ?y \\<in> C.hom (F ?y) ?x \\<rightarrow> D.hom ?y (G ?x)\n  \\<guillemotleft>\\<phi> y h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>G f \\<cdot>\\<^sub>D\n                    \\<phi> y h \\<cdot>\\<^sub>D\n                    g : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>", "by blast"], ["proof (state)\nthis:\n  \\<guillemotleft>G f \\<cdot>\\<^sub>D\n                  \\<phi> y h \\<cdot>\\<^sub>D\n                  g : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g)) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<guillemotleft>G f \\<cdot>\\<^sub>D\n                  \\<phi> y h \\<cdot>\\<^sub>D\n                  g : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g)) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "using x y f g h \\<phi>yh HomD.\\<psi>_\\<phi>"], ["proof (prove)\nusing this:\n  \\<guillemotleft>G f \\<cdot>\\<^sub>D\n                  \\<phi> y h \\<cdot>\\<^sub>D\n                  g : y' \\<rightarrow>\\<^sub>D G x'\\<guillemotright>\n  C.ide x\n  D.ide y\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>C x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>D y\\<guillemotright>\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<guillemotleft>\\<phi> y h : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<guillemotleft>?f : ?b \\<rightarrow>\\<^sub>D ?a\\<guillemotright> \\<Longrightarrow>\n  \\<psi>D (?b, ?a) (\\<phi>D (?b, ?a) ?f) = ?f\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g)) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "by auto"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x') (G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g)) =\n  G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x') (G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g)) =\n  G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x)\n         (\\<phi>D (y, G x)\n           (\\<phi> y\n             (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n        g)) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "finally"], ["proof (chain)\npicking this:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (G f \\<cdot>\\<^sub>D\n      \\<psi>D (y, G x)\n       (\\<phi>D (y, G x)\n         (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n      g)) =\n  G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (G f \\<cdot>\\<^sub>D\n      \\<psi>D (y, G x)\n       (\\<phi>D (y, G x)\n         (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n      g)) =\n  G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<psi>D (y', G x')\n     (\\<phi>D (y', G x')\n       (G f \\<cdot>\\<^sub>D\n        \\<psi>D (y, G x)\n         (\\<phi>D (y, G x)\n           (\\<phi> y\n             (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n        g)) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "by auto"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (G f \\<cdot>\\<^sub>D\n      \\<psi>D (y, G x)\n       (\\<phi>D (y, G x)\n         (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n      g)) =\n  G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<psi>D (y', G x')\n   (\\<phi>D (y', G x')\n     (G f \\<cdot>\\<^sub>D\n      \\<psi>D (y, G x)\n       (\\<phi>D (y, G x)\n         (\\<phi> y (\\<psi>C (F y, x) (\\<phi>C (F y, x) h)))) \\<cdot>\\<^sub>D\n      g)) =\n  G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "finally"], ["proof (chain)\npicking this:\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n  G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n  G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g\n\ngoal (1 subgoal):\n 1. \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n    G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g", "by auto"], ["proof (state)\nthis:\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n  G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n  G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<phi> y' (f \\<cdot>\\<^sub>C h \\<cdot>\\<^sub>C F g) =\n  G f \\<cdot>\\<^sub>D \\<phi> y h \\<cdot>\\<^sub>D g\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem induces_meta_adjunction:\n    shows \"meta_adjunction C D F G \\<phi> \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", ".."], ["", "end"], ["", "section \"Putting it All Together\""], ["", "text\\<open>\n    Combining the above results, an interpretation of any one of the locales:\n    \\<open>left_adjoint_functor\\<close>, \\<open>right_adjoint_functor\\<close>, \\<open>meta_adjunction\\<close>,\n    \\<open>hom_adjunction\\<close>, and \\<open>unit_counit_adjunction\\<close> extends to an interpretation\n    of \\<open>adjunction\\<close>.\n\\<close>"], ["", "context meta_adjunction\n  begin"], ["", "interpretation F: left_adjoint_functor D C F"], ["proof (prove)\ngoal (1 subgoal):\n 1. left_adjoint_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "using has_left_adjoint_functor"], ["proof (prove)\nusing this:\n  left_adjoint_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n\ngoal (1 subgoal):\n 1. left_adjoint_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "by auto"], ["", "interpretation G: right_adjoint_functor C D G"], ["proof (prove)\ngoal (1 subgoal):\n 1. right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "using has_right_adjoint_functor"], ["proof (prove)\nusing this:\n  right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n\ngoal (1 subgoal):\n 1. right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "by auto"], ["", "interpretation \\<eta>\\<epsilon>: unit_counit_adjunction C D F G \\<eta> \\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_counit_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n     \\<epsilon>", "using induces_unit_counit_adjunction \\<eta>_def \\<epsilon>_def"], ["proof (prove)\nusing this:\n  unit_counit_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n   \\<epsilon>\n  \\<eta> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n   \\<eta>o\n  \\<epsilon> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n   (F \\<circ> G) \\<epsilon>o\n\ngoal (1 subgoal):\n 1. unit_counit_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<eta>\n     \\<epsilon>", "by auto"], ["", "interpretation \\<Phi>\\<Psi>: hom_adjunction C D replete_setcat.comp \\<phi>C \\<phi>D F G \\<Phi> \\<Psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) replete_setcat.comp\n     \\<phi>C \\<phi>D F G \\<Phi> \\<Psi>", "using induces_hom_adjunction"], ["proof (prove)\nusing this:\n  hom_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) replete_setcat.comp\n   \\<phi>C \\<phi>D F G \\<Phi> \\<Psi>\n\ngoal (1 subgoal):\n 1. hom_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) replete_setcat.comp\n     \\<phi>C \\<phi>D F G \\<Phi> \\<Psi>", "by auto"], ["", "theorem induces_adjunction:\n    shows \"adjunction C D replete_setcat.comp \\<phi>C \\<phi>D F G \\<phi> \\<psi> \\<eta> \\<epsilon> \\<Phi> \\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) replete_setcat.comp\n     \\<phi>C \\<phi>D F G \\<phi> \\<psi> \\<eta> \\<epsilon> \\<Phi> \\<Psi>", "apply (unfold_locales)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f = G f \\<cdot>\\<^sub>D \\<eta> y\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g = \\<epsilon> x \\<cdot>\\<^sub>C F g\n 3. \\<And>y. D.ide y \\<Longrightarrow> \\<eta> y = \\<phi> y (F y)\n 4. \\<And>x. C.ide x \\<Longrightarrow> \\<epsilon> x = \\<psi> x (G x)\n 5. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         (\\<Phi>\\<Psi>.\\<psi>D (y, G x) \\<circ>\n                          \\<Phi>\\<Psi>.\\<Phi>.FUN (y, x) \\<circ>\n                          inC)\n                          f\n 6. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<Phi>\\<Psi>.\\<psi>C (F y, x) \\<circ>\n                          \\<Phi>\\<Psi>.\\<Psi>.FUN (y, x) \\<circ>\n                          inD)\n                          g\n 7. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         \\<Phi>\\<Psi>.S.mkArr\n                          (\\<Phi>\\<Psi>.HomC.set (F y, x))\n                          (\\<Phi>\\<Psi>.HomD.set (y, G x))\n                          (inD \\<circ> \\<phi> y \\<circ>\n                           \\<Phi>\\<Psi>.\\<psi>C (F y, x))\n 8. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         \\<Phi>\\<Psi>.S.mkArr\n                          (\\<Phi>\\<Psi>.HomD.set (y, G x))\n                          (\\<Phi>\\<Psi>.HomC.set (F y, x))\n                          (inC \\<circ> \\<psi> x \\<circ>\n                           \\<Phi>\\<Psi>.\\<psi>D (y, G x))", "using \\<epsilon>_map_simp \\<eta>_map_simp \\<phi>_in_terms_of_\\<eta> \\<phi>_in_terms_of_\\<Phi>' \\<psi>_in_terms_of_\\<epsilon>\n            \\<psi>_in_terms_of_\\<Psi>' \\<Phi>_simp \\<Psi>_simp \\<eta>_def \\<epsilon>_def"], ["proof (prove)\nusing this:\n  C.ide ?x \\<Longrightarrow>\n  transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n   \\<eta>\\<epsilon>.FG.map \\<epsilon>o ?x =\n  \\<psi> ?x (G ?x)\n  D.ide ?y \\<Longrightarrow>\n  transformation_by_components.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n   \\<eta>o ?y =\n  \\<phi> ?y (F ?y)\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y ?f = G ?f \\<cdot>\\<^sub>D \\<eta> ?y\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y ?f =\n                    (\\<Phi>\\<Psi>.\\<psi>D (?y, G ?x) \\<circ>\n                     \\<Phi>\\<Psi>.\\<Phi>.FUN (?y, ?x) \\<circ>\n                     inC)\n                     ?f\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x ?g = \\<epsilon> ?x \\<cdot>\\<^sub>C F ?g\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x ?g =\n                    (\\<Phi>\\<Psi>.\\<psi>C (F ?y, ?x) \\<circ>\n                     \\<Phi>\\<Psi>.\\<Psi>.FUN (?y, ?x) \\<circ>\n                     inD)\n                     ?g\n  \\<Phi>\\<Psi>.DopxC.ide ?yx \\<Longrightarrow>\n  \\<Phi> ?yx =\n  \\<Phi>\\<Psi>.S.mkArr (\\<Phi>\\<Psi>.HomC.set (F (fst ?yx), snd ?yx))\n   (\\<Phi>\\<Psi>.HomD.set (fst ?yx, G (snd ?yx)))\n   (inD \\<circ> \\<phi> (fst ?yx) \\<circ>\n    \\<Phi>\\<Psi>.\\<psi>C (F (fst ?yx), snd ?yx))\n  \\<Phi>\\<Psi>.DopxC.ide ?yx \\<Longrightarrow> \\<Psi> ?yx = \\<Psi>o ?yx\n  \\<eta> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n   \\<eta>o\n  \\<epsilon> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n   \\<eta>\\<epsilon>.FG.map \\<epsilon>o\n\ngoal (8 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f = G f \\<cdot>\\<^sub>D \\<eta> y\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g = \\<epsilon> x \\<cdot>\\<^sub>C F g\n 3. \\<And>y. D.ide y \\<Longrightarrow> \\<eta> y = \\<phi> y (F y)\n 4. \\<And>x. C.ide x \\<Longrightarrow> \\<epsilon> x = \\<psi> x (G x)\n 5. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         (\\<Phi>\\<Psi>.\\<psi>D (y, G x) \\<circ>\n                          \\<Phi>\\<Psi>.\\<Phi>.FUN (y, x) \\<circ>\n                          inC)\n                          f\n 6. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<Phi>\\<Psi>.\\<psi>C (F y, x) \\<circ>\n                          \\<Phi>\\<Psi>.\\<Psi>.FUN (y, x) \\<circ>\n                          inD)\n                          g\n 7. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         \\<Phi>\\<Psi>.S.mkArr\n                          (\\<Phi>\\<Psi>.HomC.set (F y, x))\n                          (\\<Phi>\\<Psi>.HomD.set (y, G x))\n                          (inD \\<circ> \\<phi> y \\<circ>\n                           \\<Phi>\\<Psi>.\\<psi>C (F y, x))\n 8. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         \\<Phi>\\<Psi>.S.mkArr\n                          (\\<Phi>\\<Psi>.HomD.set (y, G x))\n                          (\\<Phi>\\<Psi>.HomC.set (F y, x))\n                          (inC \\<circ> \\<psi> x \\<circ>\n                           \\<Phi>\\<Psi>.\\<psi>D (y, G x))", "by auto"], ["", "end"], ["", "context unit_counit_adjunction\n  begin"], ["", "interpretation \\<phi>\\<psi>: meta_adjunction C D F G \\<phi> \\<psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", "using induces_meta_adjunction"], ["proof (prove)\nusing this:\n  meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>\n\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", "by auto"], ["", "interpretation F: left_adjoint_functor D C F"], ["proof (prove)\ngoal (1 subgoal):\n 1. left_adjoint_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "using \\<phi>\\<psi>.has_left_adjoint_functor"], ["proof (prove)\nusing this:\n  left_adjoint_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n\ngoal (1 subgoal):\n 1. left_adjoint_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "by auto"], ["", "interpretation G: right_adjoint_functor C D G"], ["proof (prove)\ngoal (1 subgoal):\n 1. right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "using \\<phi>\\<psi>.has_right_adjoint_functor"], ["proof (prove)\nusing this:\n  right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n\ngoal (1 subgoal):\n 1. right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "by auto"], ["", "interpretation \\<Phi>\\<Psi>: hom_adjunction C D replete_setcat.comp\n                          \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi>\\<psi>.\\<Phi> \\<phi>\\<psi>.\\<Psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) replete_setcat.comp\n     \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi>\\<psi>.\\<Phi>\n     \\<phi>\\<psi>.\\<Psi>", "using \\<phi>\\<psi>.induces_hom_adjunction"], ["proof (prove)\nusing this:\n  hom_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) replete_setcat.comp\n   \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi>\\<psi>.\\<Phi>\n   \\<phi>\\<psi>.\\<Psi>\n\ngoal (1 subgoal):\n 1. hom_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) replete_setcat.comp\n     \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi>\\<psi>.\\<Phi>\n     \\<phi>\\<psi>.\\<Psi>", "by auto"], ["", "theorem induces_adjunction:\n    shows \"adjunction C D replete_setcat.comp \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi> \\<psi> \\<eta> \\<epsilon> \\<phi>\\<psi>.\\<Phi> \\<phi>\\<psi>.\\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) replete_setcat.comp\n     \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi> \\<psi> \\<eta>\n     \\<epsilon> \\<phi>\\<psi>.\\<Phi> \\<phi>\\<psi>.\\<Psi>", "using \\<epsilon>_in_terms_of_\\<psi> \\<eta>_in_terms_of_\\<phi> \\<phi>\\<psi>.\\<phi>_in_terms_of_\\<Phi>' \\<psi>_def \\<phi>\\<psi>.\\<psi>_in_terms_of_\\<Psi>'\n            \\<phi>\\<psi>.\\<Phi>_simp \\<phi>\\<psi>.\\<Psi>_simp \\<phi>_def"], ["proof (prove)\nusing this:\n  C.ide ?x \\<Longrightarrow> \\<epsilon> ?x = \\<psi> ?x (G ?x)\n  D.ide ?y \\<Longrightarrow> \\<eta> ?y = \\<phi> ?y (F ?y)\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y ?f =\n                    (\\<Phi>\\<Psi>.\\<psi>D (?y, G ?x) \\<circ>\n                     \\<Phi>\\<Psi>.\\<Phi>.FUN (?y, ?x) \\<circ>\n                     \\<phi>\\<psi>.inC)\n                     ?f\n  \\<psi> ?x ?h = \\<epsilon> ?x \\<cdot>\\<^sub>C F ?h\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x ?g =\n                    (\\<Phi>\\<Psi>.\\<psi>C (F ?y, ?x) \\<circ>\n                     \\<Phi>\\<Psi>.\\<Psi>.FUN (?y, ?x) \\<circ>\n                     \\<phi>\\<psi>.inD)\n                     ?g\n  \\<Phi>\\<Psi>.DopxC.ide ?yx \\<Longrightarrow>\n  \\<phi>\\<psi>.\\<Phi> ?yx =\n  \\<Phi>\\<Psi>.S.mkArr (\\<Phi>\\<Psi>.HomC.set (F (fst ?yx), snd ?yx))\n   (\\<Phi>\\<Psi>.HomD.set (fst ?yx, G (snd ?yx)))\n   (\\<phi>\\<psi>.inD \\<circ> \\<phi> (fst ?yx) \\<circ>\n    \\<Phi>\\<Psi>.\\<psi>C (F (fst ?yx), snd ?yx))\n  \\<Phi>\\<Psi>.DopxC.ide ?yx \\<Longrightarrow>\n  \\<phi>\\<psi>.\\<Psi> ?yx = \\<phi>\\<psi>.\\<Psi>o ?yx\n  \\<phi> ?y ?h = G ?h \\<cdot>\\<^sub>D \\<eta> ?y\n\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) replete_setcat.comp\n     \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi> \\<psi> \\<eta>\n     \\<epsilon> \\<phi>\\<psi>.\\<Phi> \\<phi>\\<psi>.\\<Psi>", "apply (unfold_locales)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>\\<And>x.\n                   C.ide x \\<Longrightarrow> \\<epsilon> x = \\<psi> x (G x);\n        \\<And>y. D.ide y \\<Longrightarrow> \\<eta> y = \\<phi> y (F y);\n        \\<And>y f x.\n           \\<lbrakk>D.ide y;\n            \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<phi> y f =\n                             (\\<Phi>\\<Psi>.\\<psi>D (y, G x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Phi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inC)\n                              f;\n        \\<And>x h. \\<psi> x h = \\<epsilon> x \\<cdot>\\<^sub>C F h;\n        \\<And>x g y.\n           \\<lbrakk>C.ide x;\n            \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n                   x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<psi> x g =\n                             (\\<Phi>\\<Psi>.\\<psi>C (F y, x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Psi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inD)\n                              g;\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Phi> yx =\n           \\<Phi>\\<Psi>.S.mkArr (\\<Phi>\\<Psi>.HomC.set (F (fst yx), snd yx))\n            (\\<Phi>\\<Psi>.HomD.set (fst yx, G (snd yx)))\n            (\\<phi>\\<psi>.inD \\<circ> \\<phi> (fst yx) \\<circ>\n             \\<Phi>\\<Psi>.\\<psi>C (F (fst yx), snd yx));\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Psi> yx = \\<phi>\\<psi>.\\<Psi>o yx;\n        \\<And>y h. \\<phi> y h = G h \\<cdot>\\<^sub>D \\<eta> y; D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f = G f \\<cdot>\\<^sub>D \\<eta> y\n 2. \\<And>x g y.\n       \\<lbrakk>\\<And>x.\n                   C.ide x \\<Longrightarrow> \\<epsilon> x = \\<psi> x (G x);\n        \\<And>y. D.ide y \\<Longrightarrow> \\<eta> y = \\<phi> y (F y);\n        \\<And>y f x.\n           \\<lbrakk>D.ide y;\n            \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<phi> y f =\n                             (\\<Phi>\\<Psi>.\\<psi>D (y, G x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Phi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inC)\n                              f;\n        \\<And>x h. \\<psi> x h = \\<epsilon> x \\<cdot>\\<^sub>C F h;\n        \\<And>x g y.\n           \\<lbrakk>C.ide x;\n            \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n                   x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<psi> x g =\n                             (\\<Phi>\\<Psi>.\\<psi>C (F y, x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Psi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inD)\n                              g;\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Phi> yx =\n           \\<Phi>\\<Psi>.S.mkArr (\\<Phi>\\<Psi>.HomC.set (F (fst yx), snd yx))\n            (\\<Phi>\\<Psi>.HomD.set (fst yx, G (snd yx)))\n            (\\<phi>\\<psi>.inD \\<circ> \\<phi> (fst yx) \\<circ>\n             \\<Phi>\\<Psi>.\\<psi>C (F (fst yx), snd yx));\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Psi> yx = \\<phi>\\<psi>.\\<Psi>o yx;\n        \\<And>y h. \\<phi> y h = G h \\<cdot>\\<^sub>D \\<eta> y; C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g = \\<epsilon> x \\<cdot>\\<^sub>C F g\n 3. \\<And>y.\n       \\<lbrakk>\\<And>x.\n                   C.ide x \\<Longrightarrow> \\<epsilon> x = \\<psi> x (G x);\n        \\<And>y. D.ide y \\<Longrightarrow> \\<eta> y = \\<phi> y (F y);\n        \\<And>y f x.\n           \\<lbrakk>D.ide y;\n            \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<phi> y f =\n                             (\\<Phi>\\<Psi>.\\<psi>D (y, G x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Phi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inC)\n                              f;\n        \\<And>x h. \\<psi> x h = \\<epsilon> x \\<cdot>\\<^sub>C F h;\n        \\<And>x g y.\n           \\<lbrakk>C.ide x;\n            \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n                   x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<psi> x g =\n                             (\\<Phi>\\<Psi>.\\<psi>C (F y, x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Psi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inD)\n                              g;\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Phi> yx =\n           \\<Phi>\\<Psi>.S.mkArr (\\<Phi>\\<Psi>.HomC.set (F (fst yx), snd yx))\n            (\\<Phi>\\<Psi>.HomD.set (fst yx, G (snd yx)))\n            (\\<phi>\\<psi>.inD \\<circ> \\<phi> (fst yx) \\<circ>\n             \\<Phi>\\<Psi>.\\<psi>C (F (fst yx), snd yx));\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Psi> yx = \\<phi>\\<psi>.\\<Psi>o yx;\n        \\<And>y h. \\<phi> y h = G h \\<cdot>\\<^sub>D \\<eta> y;\n        D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<eta> y = \\<phi> y (F y)\n 4. \\<And>x.\n       \\<lbrakk>\\<And>x.\n                   C.ide x \\<Longrightarrow> \\<epsilon> x = \\<psi> x (G x);\n        \\<And>y. D.ide y \\<Longrightarrow> \\<eta> y = \\<phi> y (F y);\n        \\<And>y f x.\n           \\<lbrakk>D.ide y;\n            \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<phi> y f =\n                             (\\<Phi>\\<Psi>.\\<psi>D (y, G x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Phi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inC)\n                              f;\n        \\<And>x h. \\<psi> x h = \\<epsilon> x \\<cdot>\\<^sub>C F h;\n        \\<And>x g y.\n           \\<lbrakk>C.ide x;\n            \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n                   x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<psi> x g =\n                             (\\<Phi>\\<Psi>.\\<psi>C (F y, x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Psi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inD)\n                              g;\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Phi> yx =\n           \\<Phi>\\<Psi>.S.mkArr (\\<Phi>\\<Psi>.HomC.set (F (fst yx), snd yx))\n            (\\<Phi>\\<Psi>.HomD.set (fst yx, G (snd yx)))\n            (\\<phi>\\<psi>.inD \\<circ> \\<phi> (fst yx) \\<circ>\n             \\<Phi>\\<Psi>.\\<psi>C (F (fst yx), snd yx));\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Psi> yx = \\<phi>\\<psi>.\\<Psi>o yx;\n        \\<And>y h. \\<phi> y h = G h \\<cdot>\\<^sub>D \\<eta> y;\n        C.ide x\\<rbrakk>\n       \\<Longrightarrow> \\<epsilon> x = \\<psi> x (G x)\n 5. \\<And>y f x.\n       \\<lbrakk>\\<And>x.\n                   C.ide x \\<Longrightarrow> \\<epsilon> x = \\<psi> x (G x);\n        \\<And>y. D.ide y \\<Longrightarrow> \\<eta> y = \\<phi> y (F y);\n        \\<And>y f x.\n           \\<lbrakk>D.ide y;\n            \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<phi> y f =\n                             (\\<Phi>\\<Psi>.\\<psi>D (y, G x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Phi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inC)\n                              f;\n        \\<And>x h. \\<psi> x h = \\<epsilon> x \\<cdot>\\<^sub>C F h;\n        \\<And>x g y.\n           \\<lbrakk>C.ide x;\n            \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n                   x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<psi> x g =\n                             (\\<Phi>\\<Psi>.\\<psi>C (F y, x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Psi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inD)\n                              g;\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Phi> yx =\n           \\<Phi>\\<Psi>.S.mkArr (\\<Phi>\\<Psi>.HomC.set (F (fst yx), snd yx))\n            (\\<Phi>\\<Psi>.HomD.set (fst yx, G (snd yx)))\n            (\\<phi>\\<psi>.inD \\<circ> \\<phi> (fst yx) \\<circ>\n             \\<Phi>\\<Psi>.\\<psi>C (F (fst yx), snd yx));\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Psi> yx = \\<phi>\\<psi>.\\<Psi>o yx;\n        \\<And>y h. \\<phi> y h = G h \\<cdot>\\<^sub>D \\<eta> y; D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         (\\<Phi>\\<Psi>.\\<psi>D (y, G x) \\<circ>\n                          \\<Phi>\\<Psi>.\\<Phi>.FUN (y, x) \\<circ>\n                          \\<phi>\\<psi>.inC)\n                          f\n 6. \\<And>x g y.\n       \\<lbrakk>\\<And>x.\n                   C.ide x \\<Longrightarrow> \\<epsilon> x = \\<psi> x (G x);\n        \\<And>y. D.ide y \\<Longrightarrow> \\<eta> y = \\<phi> y (F y);\n        \\<And>y f x.\n           \\<lbrakk>D.ide y;\n            \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<phi> y f =\n                             (\\<Phi>\\<Psi>.\\<psi>D (y, G x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Phi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inC)\n                              f;\n        \\<And>x h. \\<psi> x h = \\<epsilon> x \\<cdot>\\<^sub>C F h;\n        \\<And>x g y.\n           \\<lbrakk>C.ide x;\n            \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n                   x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<psi> x g =\n                             (\\<Phi>\\<Psi>.\\<psi>C (F y, x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Psi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inD)\n                              g;\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Phi> yx =\n           \\<Phi>\\<Psi>.S.mkArr (\\<Phi>\\<Psi>.HomC.set (F (fst yx), snd yx))\n            (\\<Phi>\\<Psi>.HomD.set (fst yx, G (snd yx)))\n            (\\<phi>\\<psi>.inD \\<circ> \\<phi> (fst yx) \\<circ>\n             \\<Phi>\\<Psi>.\\<psi>C (F (fst yx), snd yx));\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Psi> yx = \\<phi>\\<psi>.\\<Psi>o yx;\n        \\<And>y h. \\<phi> y h = G h \\<cdot>\\<^sub>D \\<eta> y; C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<Phi>\\<Psi>.\\<psi>C (F y, x) \\<circ>\n                          \\<Phi>\\<Psi>.\\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>\\<psi>.inD)\n                          g\n 7. \\<And>x y.\n       \\<lbrakk>\\<And>x.\n                   C.ide x \\<Longrightarrow> \\<epsilon> x = \\<psi> x (G x);\n        \\<And>y. D.ide y \\<Longrightarrow> \\<eta> y = \\<phi> y (F y);\n        \\<And>y f x.\n           \\<lbrakk>D.ide y;\n            \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<phi> y f =\n                             (\\<Phi>\\<Psi>.\\<psi>D (y, G x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Phi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inC)\n                              f;\n        \\<And>x h. \\<psi> x h = \\<epsilon> x \\<cdot>\\<^sub>C F h;\n        \\<And>x g y.\n           \\<lbrakk>C.ide x;\n            \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n                   x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<psi> x g =\n                             (\\<Phi>\\<Psi>.\\<psi>C (F y, x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Psi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inD)\n                              g;\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Phi> yx =\n           \\<Phi>\\<Psi>.S.mkArr (\\<Phi>\\<Psi>.HomC.set (F (fst yx), snd yx))\n            (\\<Phi>\\<Psi>.HomD.set (fst yx, G (snd yx)))\n            (\\<phi>\\<psi>.inD \\<circ> \\<phi> (fst yx) \\<circ>\n             \\<Phi>\\<Psi>.\\<psi>C (F (fst yx), snd yx));\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Psi> yx = \\<phi>\\<psi>.\\<Psi>o yx;\n        \\<And>y h. \\<phi> y h = G h \\<cdot>\\<^sub>D \\<eta> y; C.ide x;\n        D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<phi>\\<psi>.\\<Phi> (y, x) =\n                         \\<Phi>\\<Psi>.S.mkArr\n                          (\\<Phi>\\<Psi>.HomC.set (F y, x))\n                          (\\<Phi>\\<Psi>.HomD.set (y, G x))\n                          (\\<phi>\\<psi>.inD \\<circ> \\<phi> y \\<circ>\n                           \\<Phi>\\<Psi>.\\<psi>C (F y, x))\n 8. \\<And>x y.\n       \\<lbrakk>\\<And>x.\n                   C.ide x \\<Longrightarrow> \\<epsilon> x = \\<psi> x (G x);\n        \\<And>y. D.ide y \\<Longrightarrow> \\<eta> y = \\<phi> y (F y);\n        \\<And>y f x.\n           \\<lbrakk>D.ide y;\n            \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<phi> y f =\n                             (\\<Phi>\\<Psi>.\\<psi>D (y, G x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Phi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inC)\n                              f;\n        \\<And>x h. \\<psi> x h = \\<epsilon> x \\<cdot>\\<^sub>C F h;\n        \\<And>x g y.\n           \\<lbrakk>C.ide x;\n            \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n                   x\\<guillemotright>\\<rbrakk>\n           \\<Longrightarrow> \\<psi> x g =\n                             (\\<Phi>\\<Psi>.\\<psi>C (F y, x) \\<circ>\n                              \\<Phi>\\<Psi>.\\<Psi>.FUN (y, x) \\<circ>\n                              \\<phi>\\<psi>.inD)\n                              g;\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Phi> yx =\n           \\<Phi>\\<Psi>.S.mkArr (\\<Phi>\\<Psi>.HomC.set (F (fst yx), snd yx))\n            (\\<Phi>\\<Psi>.HomD.set (fst yx, G (snd yx)))\n            (\\<phi>\\<psi>.inD \\<circ> \\<phi> (fst yx) \\<circ>\n             \\<Phi>\\<Psi>.\\<psi>C (F (fst yx), snd yx));\n        \\<And>yx.\n           \\<Phi>\\<Psi>.DopxC.ide yx \\<Longrightarrow>\n           \\<phi>\\<psi>.\\<Psi> yx = \\<phi>\\<psi>.\\<Psi>o yx;\n        \\<And>y h. \\<phi> y h = G h \\<cdot>\\<^sub>D \\<eta> y; C.ide x;\n        D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<phi>\\<psi>.\\<Psi> (y, x) =\n                         \\<Phi>\\<Psi>.S.mkArr\n                          (\\<Phi>\\<Psi>.HomD.set (y, G x))\n                          (\\<Phi>\\<Psi>.HomC.set (F y, x))\n                          (\\<phi>\\<psi>.inC \\<circ> \\<psi> x \\<circ>\n                           \\<Phi>\\<Psi>.\\<psi>D (y, G x))", "by auto"], ["", "end"], ["", "context hom_adjunction\n  begin"], ["", "interpretation \\<phi>\\<psi>: meta_adjunction C D F G \\<phi> \\<psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", "using induces_meta_adjunction"], ["proof (prove)\nusing this:\n  meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>\n\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", "by auto"], ["", "interpretation F: left_adjoint_functor D C F"], ["proof (prove)\ngoal (1 subgoal):\n 1. left_adjoint_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "using \\<phi>\\<psi>.has_left_adjoint_functor"], ["proof (prove)\nusing this:\n  left_adjoint_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F\n\ngoal (1 subgoal):\n 1. left_adjoint_functor (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>C) F", "by auto"], ["", "interpretation G: right_adjoint_functor C D G"], ["proof (prove)\ngoal (1 subgoal):\n 1. right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "using \\<phi>\\<psi>.has_right_adjoint_functor"], ["proof (prove)\nusing this:\n  right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G\n\ngoal (1 subgoal):\n 1. right_adjoint_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G", "by auto"], ["", "interpretation \\<eta>\\<epsilon>: unit_counit_adjunction C D F G \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_counit_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G\n     \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon>", "using \\<phi>\\<psi>.induces_unit_counit_adjunction \\<phi>\\<psi>.\\<eta>_def \\<phi>\\<psi>.\\<epsilon>_def"], ["proof (prove)\nusing this:\n  unit_counit_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G\n   \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon>\n  \\<phi>\\<psi>.\\<eta> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n   \\<phi>\\<psi>.\\<eta>o\n  \\<phi>\\<psi>.\\<epsilon> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n   (F \\<circ> G) \\<phi>\\<psi>.\\<epsilon>o\n\ngoal (1 subgoal):\n 1. unit_counit_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G\n     \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon>", "by auto"], ["", "theorem induces_adjunction:\n    shows \"adjunction C D S \\<phi>C \\<phi>D F G \\<phi> \\<psi> \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon> \\<Phi> \\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>S) \\<phi>C\n     \\<phi>D F G \\<phi> \\<psi> \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon>\n     \\<Phi> \\<Psi>", "proof"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         G f \\<cdot>\\<^sub>D \\<phi>\\<psi>.\\<eta> y\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n 3. \\<And>y.\n       D.ide y \\<Longrightarrow> \\<phi>\\<psi>.\\<eta> y = \\<phi> y (F y)\n 4. \\<And>x.\n       C.ide x \\<Longrightarrow> \\<phi>\\<psi>.\\<epsilon> x = \\<psi> x (G x)\n 5. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         (\\<psi>D (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ>\n                          \\<phi>C (F y, x))\n                          f\n 6. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 7. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 8. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "fix x"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         G f \\<cdot>\\<^sub>D \\<phi>\\<psi>.\\<eta> y\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n 3. \\<And>y.\n       D.ide y \\<Longrightarrow> \\<phi>\\<psi>.\\<eta> y = \\<phi> y (F y)\n 4. \\<And>x.\n       C.ide x \\<Longrightarrow> \\<phi>\\<psi>.\\<epsilon> x = \\<psi> x (G x)\n 5. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         (\\<psi>D (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ>\n                          \\<phi>C (F y, x))\n                          f\n 6. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 7. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 8. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "assume \"C.ide x\""], ["proof (state)\nthis:\n  C.ide x\n\ngoal (8 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         G f \\<cdot>\\<^sub>D \\<phi>\\<psi>.\\<eta> y\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n 3. \\<And>y.\n       D.ide y \\<Longrightarrow> \\<phi>\\<psi>.\\<eta> y = \\<phi> y (F y)\n 4. \\<And>x.\n       C.ide x \\<Longrightarrow> \\<phi>\\<psi>.\\<epsilon> x = \\<psi> x (G x)\n 5. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         (\\<psi>D (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ>\n                          \\<phi>C (F y, x))\n                          f\n 6. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 7. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 8. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "thus \"\\<phi>\\<psi>.\\<epsilon> x = \\<psi> x (G x)\""], ["proof (prove)\nusing this:\n  C.ide x\n\ngoal (1 subgoal):\n 1. \\<phi>\\<psi>.\\<epsilon> x = \\<psi> x (G x)", "using \\<phi>\\<psi>.\\<epsilon>_map_simp \\<phi>\\<psi>.\\<epsilon>_def"], ["proof (prove)\nusing this:\n  C.ide x\n  C.ide ?x \\<Longrightarrow>\n  transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n   \\<eta>\\<epsilon>.FG.map \\<phi>\\<psi>.\\<epsilon>o ?x =\n  \\<psi> ?x (G ?x)\n  \\<phi>\\<psi>.\\<epsilon> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n   \\<eta>\\<epsilon>.FG.map \\<phi>\\<psi>.\\<epsilon>o\n\ngoal (1 subgoal):\n 1. \\<phi>\\<psi>.\\<epsilon> x = \\<psi> x (G x)", "by simp"], ["proof (state)\nthis:\n  \\<phi>\\<psi>.\\<epsilon> x = \\<psi> x (G x)\n\ngoal (7 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         G f \\<cdot>\\<^sub>D \\<phi>\\<psi>.\\<eta> y\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n 3. \\<And>y.\n       D.ide y \\<Longrightarrow> \\<phi>\\<psi>.\\<eta> y = \\<phi> y (F y)\n 4. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         (\\<psi>D (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ>\n                          \\<phi>C (F y, x))\n                          f\n 5. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 6. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 7. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         G f \\<cdot>\\<^sub>D \\<phi>\\<psi>.\\<eta> y\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n 3. \\<And>y.\n       D.ide y \\<Longrightarrow> \\<phi>\\<psi>.\\<eta> y = \\<phi> y (F y)\n 4. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         (\\<psi>D (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ>\n                          \\<phi>C (F y, x))\n                          f\n 5. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 6. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 7. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "fix y"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         G f \\<cdot>\\<^sub>D \\<phi>\\<psi>.\\<eta> y\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n 3. \\<And>y.\n       D.ide y \\<Longrightarrow> \\<phi>\\<psi>.\\<eta> y = \\<phi> y (F y)\n 4. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         (\\<psi>D (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ>\n                          \\<phi>C (F y, x))\n                          f\n 5. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 6. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 7. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "assume \"D.ide y\""], ["proof (state)\nthis:\n  D.ide y\n\ngoal (7 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         G f \\<cdot>\\<^sub>D \\<phi>\\<psi>.\\<eta> y\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n 3. \\<And>y.\n       D.ide y \\<Longrightarrow> \\<phi>\\<psi>.\\<eta> y = \\<phi> y (F y)\n 4. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         (\\<psi>D (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ>\n                          \\<phi>C (F y, x))\n                          f\n 5. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 6. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 7. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "thus \"\\<phi>\\<psi>.\\<eta> y = \\<phi> y (F y)\""], ["proof (prove)\nusing this:\n  D.ide y\n\ngoal (1 subgoal):\n 1. \\<phi>\\<psi>.\\<eta> y = \\<phi> y (F y)", "using \\<phi>\\<psi>.\\<eta>_map_simp \\<phi>\\<psi>.\\<eta>_def"], ["proof (prove)\nusing this:\n  D.ide y\n  D.ide ?y \\<Longrightarrow>\n  transformation_by_components.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n   \\<phi>\\<psi>.\\<eta>o ?y =\n  \\<phi> ?y (F ?y)\n  \\<phi>\\<psi>.\\<eta> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n   \\<phi>\\<psi>.\\<eta>o\n\ngoal (1 subgoal):\n 1. \\<phi>\\<psi>.\\<eta> y = \\<phi> y (F y)", "by simp"], ["proof (state)\nthis:\n  \\<phi>\\<psi>.\\<eta> y = \\<phi> y (F y)\n\ngoal (6 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         G f \\<cdot>\\<^sub>D \\<phi>\\<psi>.\\<eta> y\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n 3. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         (\\<psi>D (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ>\n                          \\<phi>C (F y, x))\n                          f\n 4. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 5. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 6. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "fix x y f"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         G f \\<cdot>\\<^sub>D \\<phi>\\<psi>.\\<eta> y\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n 3. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         (\\<psi>D (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ>\n                          \\<phi>C (F y, x))\n                          f\n 4. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 5. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 6. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "assume y: \"D.ide y\" and f: \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\""], ["proof (state)\nthis:\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n\ngoal (6 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         G f \\<cdot>\\<^sub>D \\<phi>\\<psi>.\\<eta> y\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n 3. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         (\\<psi>D (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ>\n                          \\<phi>C (F y, x))\n                          f\n 4. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 5. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 6. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "show \"\\<phi> y f = G f \\<cdot>\\<^sub>D \\<phi>\\<psi>.\\<eta> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y f = G f \\<cdot>\\<^sub>D \\<phi>\\<psi>.\\<eta> y", "using y f \\<phi>\\<psi>.\\<phi>_in_terms_of_\\<eta> \\<phi>\\<psi>.\\<eta>_def"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<lbrakk>D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y ?f =\n                    G ?f \\<cdot>\\<^sub>D \\<phi>\\<psi>.\\<eta> ?y\n  \\<phi>\\<psi>.\\<eta> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D) D.map\n   \\<phi>\\<psi>.\\<eta>o\n\ngoal (1 subgoal):\n 1. \\<phi> y f = G f \\<cdot>\\<^sub>D \\<phi>\\<psi>.\\<eta> y", "by simp"], ["proof (state)\nthis:\n  \\<phi> y f = G f \\<cdot>\\<^sub>D \\<phi>\\<psi>.\\<eta> y\n\ngoal (5 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n 2. \\<And>y f x.\n       \\<lbrakk>D.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<phi> y f =\n                         (\\<psi>D (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ>\n                          \\<phi>C (F y, x))\n                          f\n 3. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 4. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 5. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "show \"\\<phi> y f = (\\<psi>D (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> \\<phi>C (F y, x)) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> y f =\n    (\\<psi>D (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> \\<phi>C (F y, x)) f", "using y f \\<phi>_def"], ["proof (prove)\nusing this:\n  D.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>C x\\<guillemotright>\n  \\<phi> ?y ?h =\n  (\\<psi>D (?y, G (C.cod ?h)) \\<circ> \\<Phi>.FUN (?y, C.cod ?h) \\<circ>\n   \\<phi>C (F ?y, C.cod ?h))\n   ?h\n\ngoal (1 subgoal):\n 1. \\<phi> y f =\n    (\\<psi>D (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> \\<phi>C (F y, x)) f", "by auto"], ["proof (state)\nthis:\n  \\<phi> y f =\n  (\\<psi>D (y, G x) \\<circ> \\<Phi>.FUN (y, x) \\<circ> \\<phi>C (F y, x)) f\n\ngoal (4 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 3. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 4. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 3. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 4. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "fix x y g"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 3. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 4. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "assume x: \"C.ide x\" and g: \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\""], ["proof (state)\nthis:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n\ngoal (4 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n 2. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 3. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 4. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "show \"\\<psi> x g = \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x g = \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g", "using x g \\<phi>\\<psi>.\\<psi>_in_terms_of_\\<epsilon> \\<phi>\\<psi>.\\<epsilon>_def"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<lbrakk>C.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>D G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x ?g =\n                    \\<phi>\\<psi>.\\<epsilon> ?x \\<cdot>\\<^sub>C F ?g\n  \\<phi>\\<psi>.\\<epsilon> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n   \\<eta>\\<epsilon>.FG.map \\<phi>\\<psi>.\\<epsilon>o\n\ngoal (1 subgoal):\n 1. \\<psi> x g = \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g", "by simp"], ["proof (state)\nthis:\n  \\<psi> x g = \\<phi>\\<psi>.\\<epsilon> x \\<cdot>\\<^sub>C F g\n\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>C.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<psi> x g =\n                         (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ>\n                          \\<phi>D (y, G x))\n                          g\n 2. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 3. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "show \"\\<psi> x g = (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> \\<phi>D (y, G x)) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> x g =\n    (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> \\<phi>D (y, G x)) g", "using x g \\<psi>_def"], ["proof (prove)\nusing this:\n  C.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>D G x\\<guillemotright>\n  \\<psi> ?x ?h =\n  (\\<psi>C (F (D.dom ?h), ?x) \\<circ> \\<Psi>.FUN (D.dom ?h, ?x) \\<circ>\n   \\<phi>D (D.dom ?h, G ?x))\n   ?h\n\ngoal (1 subgoal):\n 1. \\<psi> x g =\n    (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> \\<phi>D (y, G x)) g", "by fast"], ["proof (state)\nthis:\n  \\<psi> x g =\n  (\\<psi>C (F y, x) \\<circ> \\<Psi>.FUN (y, x) \\<circ> \\<phi>D (y, G x)) g\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 2. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 2. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "fix x y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 2. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "assume x: \"C.ide x\" and y: \"D.ide y\""], ["proof (state)\nthis:\n  C.ide x\n  D.ide y\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Phi> (y, x) =\n                         S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                          (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ>\n                           \\<psi>C (F y, x))\n 2. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "show \"\\<Phi> (y, x) = S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n                               (\\<phi>D (y, G x) o \\<phi> y o \\<psi>C (F y, x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "using x y \\<Phi>_simp"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<lbrakk>D.ide ?y; C.ide ?x\\<rbrakk>\n  \\<Longrightarrow> S.arr (\\<Phi> (?y, ?x))\n  \\<lbrakk>D.ide ?y; C.ide ?x\\<rbrakk>\n  \\<Longrightarrow> \\<Phi> (?y, ?x) =\n                    S.mkArr (HomC.set (F ?y, ?x)) (HomD.set (?y, G ?x))\n                     (\\<phi>D (?y, G ?x) \\<circ> \\<phi> ?y \\<circ>\n                      \\<psi>C (F ?y, ?x))\n\ngoal (1 subgoal):\n 1. \\<Phi> (y, x) =\n    S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n     (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))", "by simp"], ["proof (state)\nthis:\n  \\<Phi> (y, x) =\n  S.mkArr (HomC.set (F y, x)) (HomD.set (y, G x))\n   (\\<phi>D (y, G x) \\<circ> \\<phi> y \\<circ> \\<psi>C (F y, x))\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>C.ide x; D.ide y\\<rbrakk>\n       \\<Longrightarrow> \\<Psi> (y, x) =\n                         S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                          (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ>\n                           \\<psi>D (y, G x))", "show \"\\<Psi> (y, x) = S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n                                (\\<phi>C (F y, x) o \\<psi> x o \\<psi>D (y, G x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "using x y \\<Psi>_simp"], ["proof (prove)\nusing this:\n  C.ide x\n  D.ide y\n  \\<lbrakk>D.ide ?y; C.ide ?x\\<rbrakk>\n  \\<Longrightarrow> S.arr (\\<Psi> (?y, ?x))\n  \\<lbrakk>D.ide ?y; C.ide ?x\\<rbrakk>\n  \\<Longrightarrow> \\<Psi> (?y, ?x) =\n                    S.mkArr (HomD.set (?y, G ?x)) (HomC.set (F ?y, ?x))\n                     (\\<phi>C (F ?y, ?x) \\<circ> \\<psi> ?x \\<circ>\n                      \\<psi>D (?y, G ?x))\n\ngoal (1 subgoal):\n 1. \\<Psi> (y, x) =\n    S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n     (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))", "by simp"], ["proof (state)\nthis:\n  \\<Psi> (y, x) =\n  S.mkArr (HomD.set (y, G x)) (HomC.set (F y, x))\n   (\\<phi>C (F y, x) \\<circ> \\<psi> x \\<circ> \\<psi>D (y, G x))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context left_adjoint_functor\n  begin"], ["", "interpretation \\<phi>\\<psi>: meta_adjunction C D F G \\<phi> \\<psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", "using induces_meta_adjunction"], ["proof (prove)\nusing this:\n  meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>\n\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", "by auto"], ["", "theorem induces_adjunction:\n    shows \"adjunction C D replete_setcat.comp \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi> \\<psi> \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon> \\<phi>\\<psi>.\\<Phi> \\<phi>\\<psi>.\\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) replete_setcat.comp\n     \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi> \\<psi>\n     \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon> \\<phi>\\<psi>.\\<Phi>\n     \\<phi>\\<psi>.\\<Psi>", "using \\<phi>\\<psi>.induces_adjunction"], ["proof (prove)\nusing this:\n  adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) replete_setcat.comp\n   \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi> \\<psi>\n   \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon> \\<phi>\\<psi>.\\<Phi>\n   \\<phi>\\<psi>.\\<Psi>\n\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) replete_setcat.comp\n     \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi> \\<psi>\n     \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon> \\<phi>\\<psi>.\\<Phi>\n     \\<phi>\\<psi>.\\<Psi>", "by auto"], ["", "end"], ["", "context right_adjoint_functor\n  begin"], ["", "interpretation \\<phi>\\<psi>: meta_adjunction C D F G \\<phi> \\<psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", "using induces_meta_adjunction"], ["proof (prove)\nusing this:\n  meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>\n\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) F G \\<phi> \\<psi>", "by auto"], ["", "theorem induces_adjunction:\n    shows \"adjunction C D replete_setcat.comp \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi> \\<psi> \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon> \\<phi>\\<psi>.\\<Phi> \\<phi>\\<psi>.\\<Psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) replete_setcat.comp\n     \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi> \\<psi>\n     \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon> \\<phi>\\<psi>.\\<Phi>\n     \\<phi>\\<psi>.\\<Psi>", "using \\<phi>\\<psi>.induces_adjunction"], ["proof (prove)\nusing this:\n  adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) replete_setcat.comp\n   \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi> \\<psi>\n   \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon> \\<phi>\\<psi>.\\<Phi>\n   \\<phi>\\<psi>.\\<Psi>\n\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) replete_setcat.comp\n     \\<phi>\\<psi>.\\<phi>C \\<phi>\\<psi>.\\<phi>D F G \\<phi> \\<psi>\n     \\<phi>\\<psi>.\\<eta> \\<phi>\\<psi>.\\<epsilon> \\<phi>\\<psi>.\\<Phi>\n     \\<phi>\\<psi>.\\<Psi>", "by auto"], ["", "end"], ["", "definition adjoint_functors\n  where \"adjoint_functors C D F G = (\\<exists>\\<phi> \\<psi>. meta_adjunction C D F G \\<phi> \\<psi>)\""], ["", "lemma adjoint_functors_respects_naturally_isomorphic:\n  assumes \"adjoint_functors C D F G\"\n  and \"naturally_isomorphic D C F' F\" and \"naturally_isomorphic C D G G'\"\n  shows \"adjoint_functors C D F' G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint_functors C D F' G'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. adjoint_functors C D F' G'", "obtain \\<phi> \\<psi> where \\<phi>\\<psi>: \"meta_adjunction C D F G \\<phi> \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<phi> \\<psi>.\n        meta_adjunction C D F G \\<phi> \\<psi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(1) adjoint_functors_def"], ["proof (prove)\nusing this:\n  adjoint_functors C D F G\n  adjoint_functors ?C ?D ?F ?G =\n  (\\<exists>\\<phi> \\<psi>. meta_adjunction ?C ?D ?F ?G \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi> \\<psi>.\n        meta_adjunction C D F G \\<phi> \\<psi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  meta_adjunction C D F G \\<phi> \\<psi>\n\ngoal (1 subgoal):\n 1. adjoint_functors C D F' G'", "interpret \\<phi>\\<psi>: meta_adjunction C D F G \\<phi> \\<psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction C D F G \\<phi> \\<psi>", "using \\<phi>\\<psi>"], ["proof (prove)\nusing this:\n  meta_adjunction C D F G \\<phi> \\<psi>\n\ngoal (1 subgoal):\n 1. meta_adjunction C D F G \\<phi> \\<psi>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. adjoint_functors C D F' G'", "obtain \\<tau> where \\<tau>: \"natural_isomorphism D C F' F \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        natural_isomorphism D C F' F \\<tau> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(2) naturally_isomorphic_def"], ["proof (prove)\nusing this:\n  naturally_isomorphic D C F' F\n  naturally_isomorphic ?A ?B ?F ?G =\n  (\\<exists>\\<tau>. natural_isomorphism ?A ?B ?F ?G \\<tau>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        natural_isomorphism D C F' F \\<tau> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  natural_isomorphism D C F' F \\<tau>\n\ngoal (1 subgoal):\n 1. adjoint_functors C D F' G'", "obtain \\<mu> where \\<mu>: \"natural_isomorphism C D G G' \\<mu>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<mu>.\n        natural_isomorphism C D G G' \\<mu> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(3) naturally_isomorphic_def"], ["proof (prove)\nusing this:\n  naturally_isomorphic C D G G'\n  naturally_isomorphic ?A ?B ?F ?G =\n  (\\<exists>\\<tau>. natural_isomorphism ?A ?B ?F ?G \\<tau>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<mu>.\n        natural_isomorphism C D G G' \\<mu> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  natural_isomorphism C D G G' \\<mu>\n\ngoal (1 subgoal):\n 1. adjoint_functors C D F' G'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint_functors C D F' G'", "using adjoint_functors_def \\<tau> \\<mu> \\<phi>\\<psi>.respects_natural_isomorphism"], ["proof (prove)\nusing this:\n  adjoint_functors ?C ?D ?F ?G =\n  (\\<exists>\\<phi> \\<psi>. meta_adjunction ?C ?D ?F ?G \\<phi> \\<psi>)\n  natural_isomorphism D C F' F \\<tau>\n  natural_isomorphism C D G G' \\<mu>\n  \\<lbrakk>natural_isomorphism D C ?F' F ?\\<tau>;\n   natural_isomorphism C D G ?G' ?\\<mu>\\<rbrakk>\n  \\<Longrightarrow> meta_adjunction C D ?F' ?G'\n                     (\\<lambda>y f.\n                         D (?\\<mu> (\\<phi>\\<psi>.C.cod f))\n                          (\\<phi> y\n                            (C f (inverse_transformation.map D C F ?\\<tau>\n                                   y))))\n                     (\\<lambda>x g.\n                         C (\\<psi> x\n                             (D (inverse_transformation.map C D ?G' ?\\<mu>\n                                  x)\n                               g))\n                          (?\\<tau> (\\<phi>\\<psi>.D.dom g)))\n\ngoal (1 subgoal):\n 1. adjoint_functors C D F' G'", "by blast"], ["proof (state)\nthis:\n  adjoint_functors C D F' G'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma left_adjoint_functor_respects_naturally_isomorphic:\n  assumes \"left_adjoint_functor D C F\"\n  and \"naturally_isomorphic D C F F'\"\n  shows \"left_adjoint_functor D C F'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_adjoint_functor D C F'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. left_adjoint_functor D C F'", "interpret F: left_adjoint_functor D C F"], ["proof (prove)\ngoal (1 subgoal):\n 1. left_adjoint_functor D C F", "using assms(1)"], ["proof (prove)\nusing this:\n  left_adjoint_functor D C F\n\ngoal (1 subgoal):\n 1. left_adjoint_functor D C F", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. left_adjoint_functor D C F'", "have 1: \"meta_adjunction C D F F.G F.\\<phi> F.\\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction C D F F.G F.\\<phi> F.\\<psi>", "using F.induces_meta_adjunction"], ["proof (prove)\nusing this:\n  meta_adjunction C D F F.G F.\\<phi> F.\\<psi>\n\ngoal (1 subgoal):\n 1. meta_adjunction C D F F.G F.\\<phi> F.\\<psi>", "by simp"], ["proof (state)\nthis:\n  meta_adjunction C D F F.G F.\\<phi> F.\\<psi>\n\ngoal (1 subgoal):\n 1. left_adjoint_functor D C F'", "interpret \\<phi>\\<psi>: meta_adjunction C D F F.G F.\\<phi> F.\\<psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction C D F F.G F.\\<phi> F.\\<psi>", "using 1"], ["proof (prove)\nusing this:\n  meta_adjunction C D F F.G F.\\<phi> F.\\<psi>\n\ngoal (1 subgoal):\n 1. meta_adjunction C D F F.G F.\\<phi> F.\\<psi>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. left_adjoint_functor D C F'", "have \"adjoint_functors C D F F.G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint_functors C D F F.G", "using 1 adjoint_functors_def"], ["proof (prove)\nusing this:\n  meta_adjunction C D F F.G F.\\<phi> F.\\<psi>\n  adjoint_functors ?C ?D ?F ?G =\n  (\\<exists>\\<phi> \\<psi>. meta_adjunction ?C ?D ?F ?G \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. adjoint_functors C D F F.G", "by blast"], ["proof (state)\nthis:\n  adjoint_functors C D F F.G\n\ngoal (1 subgoal):\n 1. left_adjoint_functor D C F'", "hence 2: \"adjoint_functors C D F' F.G\""], ["proof (prove)\nusing this:\n  adjoint_functors C D F F.G\n\ngoal (1 subgoal):\n 1. adjoint_functors C D F' F.G", "using assms(2) adjoint_functors_respects_naturally_isomorphic [of C D F F.G F' F.G]\n            naturally_isomorphic_reflexive naturally_isomorphic_symmetric\n            \\<phi>\\<psi>.G.functor_axioms"], ["proof (prove)\nusing this:\n  adjoint_functors C D F F.G\n  naturally_isomorphic D C F F'\n  \\<lbrakk>adjoint_functors C D F F.G; naturally_isomorphic D C F' F;\n   naturally_isomorphic C D F.G F.G\\<rbrakk>\n  \\<Longrightarrow> adjoint_functors C D F' F.G\n  functor ?A ?B ?F \\<Longrightarrow> naturally_isomorphic ?A ?B ?F ?F\n  naturally_isomorphic ?A ?B ?F ?G \\<Longrightarrow>\n  naturally_isomorphic ?A ?B ?G ?F\n  functor C D F.G\n\ngoal (1 subgoal):\n 1. adjoint_functors C D F' F.G", "by blast"], ["proof (state)\nthis:\n  adjoint_functors C D F' F.G\n\ngoal (1 subgoal):\n 1. left_adjoint_functor D C F'", "obtain \\<phi>' \\<psi>' where \\<phi>'\\<psi>': \"meta_adjunction C D F' F.G \\<phi>' \\<psi>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>' \\<psi>'.\n        meta_adjunction C D F' F.G \\<phi>' \\<psi>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 2 adjoint_functors_def"], ["proof (prove)\nusing this:\n  adjoint_functors C D F' F.G\n  adjoint_functors ?C ?D ?F ?G =\n  (\\<exists>\\<phi> \\<psi>. meta_adjunction ?C ?D ?F ?G \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>' \\<psi>'.\n        meta_adjunction C D F' F.G \\<phi>' \\<psi>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  meta_adjunction C D F' F.G \\<phi>' \\<psi>'\n\ngoal (1 subgoal):\n 1. left_adjoint_functor D C F'", "interpret \\<phi>'\\<psi>': meta_adjunction C D F' F.G \\<phi>' \\<psi>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction C D F' F.G \\<phi>' \\<psi>'", "using \\<phi>'\\<psi>'"], ["proof (prove)\nusing this:\n  meta_adjunction C D F' F.G \\<phi>' \\<psi>'\n\ngoal (1 subgoal):\n 1. meta_adjunction C D F' F.G \\<phi>' \\<psi>'", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. left_adjoint_functor D C F'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. left_adjoint_functor D C F'", "using \\<phi>'\\<psi>'.has_left_adjoint_functor"], ["proof (prove)\nusing this:\n  left_adjoint_functor D C F'\n\ngoal (1 subgoal):\n 1. left_adjoint_functor D C F'", "by simp"], ["proof (state)\nthis:\n  left_adjoint_functor D C F'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma right_adjoint_functor_respects_naturally_isomorphic:\n  assumes \"right_adjoint_functor C D G\"\n  and \"naturally_isomorphic C D G G'\"\n  shows \"right_adjoint_functor C D G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right_adjoint_functor C D G'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. right_adjoint_functor C D G'", "interpret G: right_adjoint_functor C D G"], ["proof (prove)\ngoal (1 subgoal):\n 1. right_adjoint_functor C D G", "using assms(1)"], ["proof (prove)\nusing this:\n  right_adjoint_functor C D G\n\ngoal (1 subgoal):\n 1. right_adjoint_functor C D G", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. right_adjoint_functor C D G'", "have 1: \"meta_adjunction C D G.F G G.\\<phi> G.\\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction C D G.F G G.\\<phi> G.\\<psi>", "using G.induces_meta_adjunction"], ["proof (prove)\nusing this:\n  meta_adjunction C D G.F G G.\\<phi> G.\\<psi>\n\ngoal (1 subgoal):\n 1. meta_adjunction C D G.F G G.\\<phi> G.\\<psi>", "by simp"], ["proof (state)\nthis:\n  meta_adjunction C D G.F G G.\\<phi> G.\\<psi>\n\ngoal (1 subgoal):\n 1. right_adjoint_functor C D G'", "interpret \\<phi>\\<psi>: meta_adjunction C D G.F G G.\\<phi> G.\\<psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction C D G.F G G.\\<phi> G.\\<psi>", "using 1"], ["proof (prove)\nusing this:\n  meta_adjunction C D G.F G G.\\<phi> G.\\<psi>\n\ngoal (1 subgoal):\n 1. meta_adjunction C D G.F G G.\\<phi> G.\\<psi>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. right_adjoint_functor C D G'", "have \"adjoint_functors C D G.F G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint_functors C D G.F G", "using 1 adjoint_functors_def"], ["proof (prove)\nusing this:\n  meta_adjunction C D G.F G G.\\<phi> G.\\<psi>\n  adjoint_functors ?C ?D ?F ?G =\n  (\\<exists>\\<phi> \\<psi>. meta_adjunction ?C ?D ?F ?G \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. adjoint_functors C D G.F G", "by blast"], ["proof (state)\nthis:\n  adjoint_functors C D G.F G\n\ngoal (1 subgoal):\n 1. right_adjoint_functor C D G'", "hence 2: \"adjoint_functors C D G.F G'\""], ["proof (prove)\nusing this:\n  adjoint_functors C D G.F G\n\ngoal (1 subgoal):\n 1. adjoint_functors C D G.F G'", "using assms(2) adjoint_functors_respects_naturally_isomorphic\n            naturally_isomorphic_reflexive naturally_isomorphic_symmetric\n            \\<phi>\\<psi>.F.functor_axioms"], ["proof (prove)\nusing this:\n  adjoint_functors C D G.F G\n  naturally_isomorphic C D G G'\n  \\<lbrakk>adjoint_functors ?C ?D ?F ?G; naturally_isomorphic ?D ?C ?F' ?F;\n   naturally_isomorphic ?C ?D ?G ?G'\\<rbrakk>\n  \\<Longrightarrow> adjoint_functors ?C ?D ?F' ?G'\n  functor ?A ?B ?F \\<Longrightarrow> naturally_isomorphic ?A ?B ?F ?F\n  naturally_isomorphic ?A ?B ?F ?G \\<Longrightarrow>\n  naturally_isomorphic ?A ?B ?G ?F\n  functor D C G.F\n\ngoal (1 subgoal):\n 1. adjoint_functors C D G.F G'", "by blast"], ["proof (state)\nthis:\n  adjoint_functors C D G.F G'\n\ngoal (1 subgoal):\n 1. right_adjoint_functor C D G'", "obtain \\<phi>' \\<psi>' where \\<phi>'\\<psi>': \"meta_adjunction C D G.F G' \\<phi>' \\<psi>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>' \\<psi>'.\n        meta_adjunction C D G.F G' \\<phi>' \\<psi>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 2 adjoint_functors_def"], ["proof (prove)\nusing this:\n  adjoint_functors C D G.F G'\n  adjoint_functors ?C ?D ?F ?G =\n  (\\<exists>\\<phi> \\<psi>. meta_adjunction ?C ?D ?F ?G \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>' \\<psi>'.\n        meta_adjunction C D G.F G' \\<phi>' \\<psi>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  meta_adjunction C D G.F G' \\<phi>' \\<psi>'\n\ngoal (1 subgoal):\n 1. right_adjoint_functor C D G'", "interpret \\<phi>'\\<psi>': meta_adjunction C D G.F G' \\<phi>' \\<psi>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction C D G.F G' \\<phi>' \\<psi>'", "using \\<phi>'\\<psi>'"], ["proof (prove)\nusing this:\n  meta_adjunction C D G.F G' \\<phi>' \\<psi>'\n\ngoal (1 subgoal):\n 1. meta_adjunction C D G.F G' \\<phi>' \\<psi>'", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. right_adjoint_functor C D G'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. right_adjoint_functor C D G'", "using \\<phi>'\\<psi>'.has_right_adjoint_functor"], ["proof (prove)\nusing this:\n  right_adjoint_functor C D G'\n\ngoal (1 subgoal):\n 1. right_adjoint_functor C D G'", "by simp"], ["proof (state)\nthis:\n  right_adjoint_functor C D G'\n\ngoal:\nNo subgoals!", "qed"], ["", "section \"Inverse Functors are Adjoints\""], ["", "(* TODO: This really should show that inverse functors induce an adjoint equivalence. *)"], ["", "lemma inverse_functors_induce_meta_adjunction:\n  assumes \"inverse_functors C D F G\"\n  shows \"meta_adjunction C D F G (\\<lambda>x. G) (\\<lambda>y. F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction C D F G (\\<lambda>x. G) (\\<lambda>y. F)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. meta_adjunction C D F G (\\<lambda>x. G) (\\<lambda>y. F)", "interpret inverse_functors C D F G"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_functors C D F G", "using assms"], ["proof (prove)\nusing this:\n  inverse_functors C D F G\n\ngoal (1 subgoal):\n 1. inverse_functors C D F G", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. meta_adjunction C D F G (\\<lambda>x. G) (\\<lambda>y. F)", "interpret meta_adjunction C D F G \\<open>\\<lambda>x. G\\<close> \\<open>\\<lambda>y. F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction C D F G (\\<lambda>x. G) (\\<lambda>y. F)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. meta_adjunction C D F G (\\<lambda>x. G) (\\<lambda>y. F)", "have 1: \"\\<And>y. B.arr y \\<Longrightarrow> G (F y) = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y. B.arr y \\<Longrightarrow> G (F y) = y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. B.arr y \\<Longrightarrow> G (F y) = y", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. B.arr y \\<Longrightarrow> G (F y) = y", "assume y: \"B.arr y\""], ["proof (state)\nthis:\n  B.arr y\n\ngoal (1 subgoal):\n 1. \\<And>y. B.arr y \\<Longrightarrow> G (F y) = y", "have \"G (F y) = (G o F) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (F y) = (G \\<circ> F) y", "by simp"], ["proof (state)\nthis:\n  G (F y) = (G \\<circ> F) y\n\ngoal (1 subgoal):\n 1. \\<And>y. B.arr y \\<Longrightarrow> G (F y) = y", "thus \"G (F y) = y\""], ["proof (prove)\nusing this:\n  G (F y) = (G \\<circ> F) y\n\ngoal (1 subgoal):\n 1. G (F y) = y", "using y inv B.map_def"], ["proof (prove)\nusing this:\n  G (F y) = (G \\<circ> F) y\n  B.arr y\n  G \\<circ> F = B.map\n  B.map ?f = (if B.arr ?f then ?f else B.null)\n\ngoal (1 subgoal):\n 1. G (F y) = y", "by simp"], ["proof (state)\nthis:\n  G (F y) = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  B.arr ?y \\<Longrightarrow> G (F ?y) = ?y\n\ngoal (1 subgoal):\n 1. meta_adjunction C D F G (\\<lambda>x. G) (\\<lambda>y. F)", "have 2: \"\\<And>x. A.arr x \\<Longrightarrow> F (G x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. A.arr x \\<Longrightarrow> F (G x) = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. A.arr x \\<Longrightarrow> F (G x) = x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. A.arr x \\<Longrightarrow> F (G x) = x", "assume x: \"A.arr x\""], ["proof (state)\nthis:\n  A.arr x\n\ngoal (1 subgoal):\n 1. \\<And>x. A.arr x \\<Longrightarrow> F (G x) = x", "have \"F (G x) = (F o G) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (G x) = (F \\<circ> G) x", "by simp"], ["proof (state)\nthis:\n  F (G x) = (F \\<circ> G) x\n\ngoal (1 subgoal):\n 1. \\<And>x. A.arr x \\<Longrightarrow> F (G x) = x", "thus \"F (G x) = x\""], ["proof (prove)\nusing this:\n  F (G x) = (F \\<circ> G) x\n\ngoal (1 subgoal):\n 1. F (G x) = x", "using x inv' A.map_def"], ["proof (prove)\nusing this:\n  F (G x) = (F \\<circ> G) x\n  A.arr x\n  F \\<circ> G = A.map\n  A.map ?f = (if A.arr ?f then ?f else A.null)\n\ngoal (1 subgoal):\n 1. F (G x) = x", "by simp"], ["proof (state)\nthis:\n  F (G x) = x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A.arr ?x \\<Longrightarrow> F (G ?x) = ?x\n\ngoal (1 subgoal):\n 1. meta_adjunction C D F G (\\<lambda>x. G) (\\<lambda>y. F)", "show \"meta_adjunction C D F G (\\<lambda>x. G) (\\<lambda>y. F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction C D F G (\\<lambda>x. G) (\\<lambda>y. F)", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>B.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>G\n    f : y \\<rightarrow>\\<^sub>B G x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>F\n    g : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 3. \\<And>y f x.\n       \\<lbrakk>B.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> F (G f) = f\n 4. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (F g) = g\n 5. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (C f (C h (F g))) = D (G f) (D (G h) g)", "fix y f x"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>B.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>G\n    f : y \\<rightarrow>\\<^sub>B G x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>F\n    g : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 3. \\<And>y f x.\n       \\<lbrakk>B.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> F (G f) = f\n 4. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (F g) = g\n 5. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (C f (C h (F g))) = D (G f) (D (G h) g)", "assume y: \"B.ide y\" and f: \"\\<guillemotleft>f : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\""], ["proof (state)\nthis:\n  B.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n\ngoal (5 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>B.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>G\n    f : y \\<rightarrow>\\<^sub>B G x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>F\n    g : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 3. \\<And>y f x.\n       \\<lbrakk>B.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> F (G f) = f\n 4. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (F g) = g\n 5. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (C f (C h (F g))) = D (G f) (D (G h) g)", "show \"\\<guillemotleft>G f : y \\<rightarrow>\\<^sub>B G x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>G f : y \\<rightarrow>\\<^sub>B G x\\<guillemotright>", "using y f 1 G.preserves_hom"], ["proof (prove)\nusing this:\n  B.ide y\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n  B.arr ?y \\<Longrightarrow> G (F ?y) = ?y\n  \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>A ?b\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>G ?f : G ?a \\<rightarrow>\\<^sub>B G ?b\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>G f : y \\<rightarrow>\\<^sub>B G x\\<guillemotright>", "by (elim A.in_homE, auto)"], ["proof (state)\nthis:\n  \\<guillemotleft>G f : y \\<rightarrow>\\<^sub>B G x\\<guillemotright>\n\ngoal (4 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>F\n    g : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 2. \\<And>y f x.\n       \\<lbrakk>B.ide y;\n        \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> F (G f) = f\n 3. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (F g) = g\n 4. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (C f (C h (F g))) = D (G f) (D (G h) g)", "show \"F (G f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (G f) = f", "using f 2"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n  A.arr ?x \\<Longrightarrow> F (G ?x) = ?x\n\ngoal (1 subgoal):\n 1. F (G f) = f", "by auto"], ["proof (state)\nthis:\n  F (G f) = f\n\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>F\n    g : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (F g) = g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (C f (C h (F g))) = D (G f) (D (G h) g)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>F\n    g : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (F g) = g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (C f (C h (F g))) = D (G f) (D (G h) g)", "fix x g y"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>F\n    g : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (F g) = g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (C f (C h (F g))) = D (G f) (D (G h) g)", "assume x: \"A.ide x\" and g: \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G x\\<guillemotright>\""], ["proof (state)\nthis:\n  A.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G x\\<guillemotright>\n\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>F\n    g : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (F g) = g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (C f (C h (F g))) = D (G f) (D (G h) g)", "show \"\\<guillemotleft>F g : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>F g : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>", "using x g 2 F.preserves_hom"], ["proof (prove)\nusing this:\n  A.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G x\\<guillemotright>\n  A.arr ?x \\<Longrightarrow> F (G ?x) = ?x\n  \\<guillemotleft>?f : ?a \\<rightarrow>\\<^sub>B ?b\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>F ?f : F ?a \\<rightarrow>\\<^sub>A F ?b\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>F g : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>", "by (elim B.in_homE, auto)"], ["proof (state)\nthis:\n  \\<guillemotleft>F g : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n\ngoal (2 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (F g) = g\n 2. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (C f (C h (F g))) = D (G f) (D (G h) g)", "show \"G (F g) = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (F g) = g", "using g 1 A.map_def"], ["proof (prove)\nusing this:\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>B G x\\<guillemotright>\n  B.arr ?y \\<Longrightarrow> G (F ?y) = ?y\n  A.map ?f = (if A.arr ?f then ?f else A.null)\n\ngoal (1 subgoal):\n 1. G (F g) = g", "by blast"], ["proof (state)\nthis:\n  G (F g) = g\n\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (C f (C h (F g))) = D (G f) (D (G h) g)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (C f (C h (F g))) = D (G f) (D (G h) g)", "fix f x x' g y' y h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (C f (C h (F g))) = D (G f) (D (G h) g)", "assume f: \"\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>\" and g: \"\\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>\" and h: \"\\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\""], ["proof (state)\nthis:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>;\n        \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> G (C f (C h (F g))) = D (G f) (D (G h) g)", "show \"G (C f (C h (F g))) = D (G f) (D (G h) g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (C f (C h (F g))) = D (G f) (D (G h) g)", "using f g h 1 2 inv inv' A.map_def B.map_def"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>B y\\<guillemotright>\n  \\<guillemotleft>h : F y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n  B.arr ?y \\<Longrightarrow> G (F ?y) = ?y\n  A.arr ?x \\<Longrightarrow> F (G ?x) = ?x\n  G \\<circ> F = B.map\n  F \\<circ> G = A.map\n  A.map ?f = (if A.arr ?f then ?f else A.null)\n  B.map ?f = (if B.arr ?f then ?f else B.null)\n\ngoal (1 subgoal):\n 1. G (C f (C h (F g))) = D (G f) (D (G h) g)", "by (elim A.in_homE B.in_homE, auto)"], ["proof (state)\nthis:\n  G (C f (C h (F g))) = D (G f) (D (G h) g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  meta_adjunction C D F G (\\<lambda>x. G) (\\<lambda>y. F)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. meta_adjunction C D F G (\\<lambda>x. G) (\\<lambda>y. F)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction C D F G (\\<lambda>x. G) (\\<lambda>y. F)", ".."], ["proof (state)\nthis:\n  meta_adjunction C D F G (\\<lambda>x. G) (\\<lambda>y. F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inverse_functors_are_adjoints:\n  assumes \"inverse_functors A B F G\"\n  shows \"adjoint_functors A B F G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjoint_functors A B F G", "using assms inverse_functors_induce_meta_adjunction adjoint_functors_def"], ["proof (prove)\nusing this:\n  inverse_functors A B F G\n  inverse_functors ?C ?D ?F ?G \\<Longrightarrow>\n  meta_adjunction ?C ?D ?F ?G (\\<lambda>x. ?G) (\\<lambda>y. ?F)\n  adjoint_functors ?C ?D ?F ?G =\n  (\\<exists>\\<phi> \\<psi>. meta_adjunction ?C ?D ?F ?G \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. adjoint_functors A B F G", "by fast"], ["", "context inverse_functors\n  begin"], ["", "lemma \\<eta>_char:\n    shows \"meta_adjunction.\\<eta> B F (\\<lambda>x. G) = identity_functor.map B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction.\\<eta> (\\<cdot>\\<^sub>B) F (\\<lambda>x. G) = B.map", "proof (intro eqI)"], ["proof (state)\ngoal (3 subgoals):\n 1. natural_transformation ?A ?B ?F ?G\n     (meta_adjunction.\\<eta> (\\<cdot>\\<^sub>B) F (\\<lambda>x. G))\n 2. natural_transformation ?A ?B ?F ?G B.map\n 3. \\<And>a.\n       partial_magma.ide ?A a \\<Longrightarrow>\n       meta_adjunction.\\<eta> (\\<cdot>\\<^sub>B) F (\\<lambda>x. G) a =\n       B.map a", "interpret meta_adjunction A B F G \\<open>\\<lambda>y. G\\<close> \\<open>\\<lambda>x. F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F G (\\<lambda>y. G)\n     (\\<lambda>x. F)", "using inverse_functors_induce_meta_adjunction inverse_functors_axioms"], ["proof (prove)\nusing this:\n  inverse_functors ?C ?D ?F ?G \\<Longrightarrow>\n  meta_adjunction ?C ?D ?F ?G (\\<lambda>x. ?G) (\\<lambda>y. ?F)\n  inverse_functors (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F G\n\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F G (\\<lambda>y. G)\n     (\\<lambda>x. F)", "by auto"], ["proof (state)\ngoal (3 subgoals):\n 1. natural_transformation ?A ?B ?F ?G \\<eta>\n 2. natural_transformation ?A ?B ?F ?G B.map\n 3. \\<And>a. partial_magma.ide ?A a \\<Longrightarrow> \\<eta> a = B.map a", "interpret adjunction A B replete_setcat.comp \\<phi>C \\<phi>D F G \\<open>\\<lambda>y. G\\<close> \\<open>\\<lambda>x. F\\<close> \\<eta> \\<epsilon> \\<Phi> \\<Psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) replete_setcat.comp\n     \\<phi>C \\<phi>D F G (\\<lambda>y. G) (\\<lambda>x. F) \\<eta> \\<epsilon>\n     \\<Phi> \\<Psi>", "using induces_adjunction"], ["proof (prove)\nusing this:\n  adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) replete_setcat.comp \\<phi>C\n   \\<phi>D F G (\\<lambda>y. G) (\\<lambda>x. F) \\<eta> \\<epsilon> \\<Phi>\n   \\<Psi>\n\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) replete_setcat.comp\n     \\<phi>C \\<phi>D F G (\\<lambda>y. G) (\\<lambda>x. F) \\<eta> \\<epsilon>\n     \\<Phi> \\<Psi>", "by simp"], ["proof (state)\ngoal (3 subgoals):\n 1. natural_transformation ?A ?B ?F ?G \\<eta>\n 2. natural_transformation ?A ?B ?F ?G B.map\n 3. \\<And>a. partial_magma.ide ?A a \\<Longrightarrow> \\<eta> a = B.map a", "show \"natural_transformation B B B.map GF.map \\<eta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map GF.map\n     \\<eta>", "using \\<eta>.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map GF.map\n   \\<eta>\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map GF.map\n     \\<eta>", "by auto"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map GF.map\n   \\<eta>\n\ngoal (2 subgoals):\n 1. natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map GF.map\n     B.map\n 2. \\<And>a. B.ide a \\<Longrightarrow> \\<eta> a = B.map a", "show \"natural_transformation B B B.map GF.map B.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map GF.map\n     B.map", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map GF.map\n     B.map", "have \"natural_transformation B B B.map B.map B.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map B.map\n     B.map", ".."], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map B.map\n   B.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map GF.map\n     B.map", "moreover"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map B.map\n   B.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map GF.map\n     B.map", "have \"GF.map = B.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. GF.map = B.map", "using inv"], ["proof (prove)\nusing this:\n  GF.map = B.map\n\ngoal (1 subgoal):\n 1. GF.map = B.map", "by auto"], ["proof (state)\nthis:\n  GF.map = B.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map GF.map\n     B.map", "ultimately"], ["proof (chain)\npicking this:\n  natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map B.map\n   B.map\n  GF.map = B.map", "show ?thesis"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map B.map\n   B.map\n  GF.map = B.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map GF.map\n     B.map", "by auto"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map GF.map\n   B.map\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map GF.map\n   B.map\n\ngoal (1 subgoal):\n 1. \\<And>a. B.ide a \\<Longrightarrow> \\<eta> a = B.map a", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. B.ide a \\<Longrightarrow> \\<eta> a = B.map a", "show \"B.ide b \\<Longrightarrow> \\<eta> b = B.map b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B.ide b \\<Longrightarrow> \\<eta> b = B.map b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. B.ide b \\<Longrightarrow> \\<eta> b = B.map b", "assume b: \"B.ide b\""], ["proof (state)\nthis:\n  B.ide b\n\ngoal (1 subgoal):\n 1. B.ide b \\<Longrightarrow> \\<eta> b = B.map b", "have \"\\<eta> b = GF.map b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta> b = GF.map b", "using b \\<eta>_map_simp \\<eta>_def"], ["proof (prove)\nusing this:\n  B.ide b\n  B.ide ?y \\<Longrightarrow>\n  transformation_by_components.map (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map\n   \\<eta>o ?y =\n  G (F ?y)\n  \\<eta> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map\n   \\<eta>o\n\ngoal (1 subgoal):\n 1. \\<eta> b = GF.map b", "by simp"], ["proof (state)\nthis:\n  \\<eta> b = GF.map b\n\ngoal (1 subgoal):\n 1. B.ide b \\<Longrightarrow> \\<eta> b = B.map b", "also"], ["proof (state)\nthis:\n  \\<eta> b = GF.map b\n\ngoal (1 subgoal):\n 1. B.ide b \\<Longrightarrow> \\<eta> b = B.map b", "have \"... = B.map b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. GF.map b = B.map b", "using b inv B.map_def"], ["proof (prove)\nusing this:\n  B.ide b\n  GF.map = B.map\n  B.map ?f = (if B.arr ?f then ?f else B.null)\n\ngoal (1 subgoal):\n 1. GF.map b = B.map b", "by simp"], ["proof (state)\nthis:\n  GF.map b = B.map b\n\ngoal (1 subgoal):\n 1. B.ide b \\<Longrightarrow> \\<eta> b = B.map b", "finally"], ["proof (chain)\npicking this:\n  \\<eta> b = B.map b", "show \"\\<eta> b = B.map b\""], ["proof (prove)\nusing this:\n  \\<eta> b = B.map b\n\ngoal (1 subgoal):\n 1. \\<eta> b = B.map b", "by auto"], ["proof (state)\nthis:\n  \\<eta> b = B.map b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  B.ide b \\<Longrightarrow> \\<eta> b = B.map b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<epsilon>_char:\n    shows \"meta_adjunction.\\<epsilon> A F G (\\<lambda>y. F) = identity_functor.map A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction.\\<epsilon> (\\<cdot>\\<^sub>A) F G (\\<lambda>y. F) = A.map", "proof (intro eqI)"], ["proof (state)\ngoal (3 subgoals):\n 1. natural_transformation ?A ?B ?F ?G\n     (meta_adjunction.\\<epsilon> (\\<cdot>\\<^sub>A) F G (\\<lambda>y. F))\n 2. natural_transformation ?A ?B ?F ?G A.map\n 3. \\<And>a.\n       partial_magma.ide ?A a \\<Longrightarrow>\n       meta_adjunction.\\<epsilon> (\\<cdot>\\<^sub>A) F G (\\<lambda>y. F) a =\n       A.map a", "interpret meta_adjunction A B F G \\<open>\\<lambda>y. G\\<close> \\<open>\\<lambda>x. F\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F G (\\<lambda>y. G)\n     (\\<lambda>x. F)", "using inverse_functors_induce_meta_adjunction inverse_functors_axioms"], ["proof (prove)\nusing this:\n  inverse_functors ?C ?D ?F ?G \\<Longrightarrow>\n  meta_adjunction ?C ?D ?F ?G (\\<lambda>x. ?G) (\\<lambda>y. ?F)\n  inverse_functors (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F G\n\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) F G (\\<lambda>y. G)\n     (\\<lambda>x. F)", "by auto"], ["proof (state)\ngoal (3 subgoals):\n 1. natural_transformation ?A ?B ?F ?G \\<epsilon>\n 2. natural_transformation ?A ?B ?F ?G A.map\n 3. \\<And>a. partial_magma.ide ?A a \\<Longrightarrow> \\<epsilon> a = A.map a", "interpret adjunction A B replete_setcat.comp \\<phi>C \\<phi>D F G \\<open>\\<lambda>y. G\\<close> \\<open>\\<lambda>x. F\\<close> \\<eta> \\<epsilon> \\<Phi> \\<Psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) replete_setcat.comp\n     \\<phi>C \\<phi>D F G (\\<lambda>y. G) (\\<lambda>x. F) \\<eta> \\<epsilon>\n     \\<Phi> \\<Psi>", "using induces_adjunction"], ["proof (prove)\nusing this:\n  adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) replete_setcat.comp \\<phi>C\n   \\<phi>D F G (\\<lambda>y. G) (\\<lambda>x. F) \\<eta> \\<epsilon> \\<Phi>\n   \\<Psi>\n\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) replete_setcat.comp\n     \\<phi>C \\<phi>D F G (\\<lambda>y. G) (\\<lambda>x. F) \\<eta> \\<epsilon>\n     \\<Phi> \\<Psi>", "by simp"], ["proof (state)\ngoal (3 subgoals):\n 1. natural_transformation ?A ?B ?F ?G \\<epsilon>\n 2. natural_transformation ?A ?B ?F ?G A.map\n 3. \\<And>a. partial_magma.ide ?A a \\<Longrightarrow> \\<epsilon> a = A.map a", "show \"natural_transformation A A FG.map A.map \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n     \\<epsilon>", "using \\<epsilon>.natural_transformation_axioms"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n     \\<epsilon>", "by auto"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n   \\<epsilon>\n\ngoal (2 subgoals):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n     A.map\n 2. \\<And>a. A.ide a \\<Longrightarrow> \\<epsilon> a = A.map a", "show \"natural_transformation A A FG.map A.map A.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n     A.map", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n     A.map", "have \"natural_transformation A A A.map A.map A.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) A.map A.map\n     A.map", ".."], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) A.map A.map\n   A.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n     A.map", "moreover"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) A.map A.map\n   A.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n     A.map", "have \"FG.map = A.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FG.map = A.map", "using inv'"], ["proof (prove)\nusing this:\n  FG.map = A.map\n\ngoal (1 subgoal):\n 1. FG.map = A.map", "by auto"], ["proof (state)\nthis:\n  FG.map = A.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n     A.map", "ultimately"], ["proof (chain)\npicking this:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) A.map A.map\n   A.map\n  FG.map = A.map", "show ?thesis"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) A.map A.map\n   A.map\n  FG.map = A.map\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n     A.map", "by auto"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n   A.map\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n   A.map\n\ngoal (1 subgoal):\n 1. \\<And>a. A.ide a \\<Longrightarrow> \\<epsilon> a = A.map a", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. A.ide a \\<Longrightarrow> \\<epsilon> a = A.map a", "show \"A.ide a \\<Longrightarrow> \\<epsilon> a = A.map a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A.ide a \\<Longrightarrow> \\<epsilon> a = A.map a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A.ide a \\<Longrightarrow> \\<epsilon> a = A.map a", "assume a: \"A.ide a\""], ["proof (state)\nthis:\n  A.ide a\n\ngoal (1 subgoal):\n 1. A.ide a \\<Longrightarrow> \\<epsilon> a = A.map a", "have \"\\<epsilon> a = FG.map a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> a = FG.map a", "using a \\<epsilon>_map_simp \\<epsilon>_def"], ["proof (prove)\nusing this:\n  A.ide a\n  A.ide ?x \\<Longrightarrow>\n  transformation_by_components.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n   FG.map \\<epsilon>o ?x =\n  F (G ?x)\n  \\<epsilon> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n   FG.map \\<epsilon>o\n\ngoal (1 subgoal):\n 1. \\<epsilon> a = FG.map a", "by simp"], ["proof (state)\nthis:\n  \\<epsilon> a = FG.map a\n\ngoal (1 subgoal):\n 1. A.ide a \\<Longrightarrow> \\<epsilon> a = A.map a", "also"], ["proof (state)\nthis:\n  \\<epsilon> a = FG.map a\n\ngoal (1 subgoal):\n 1. A.ide a \\<Longrightarrow> \\<epsilon> a = A.map a", "have \"... = A.map a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FG.map a = A.map a", "using a inv' A.map_def"], ["proof (prove)\nusing this:\n  A.ide a\n  FG.map = A.map\n  A.map ?f = (if A.arr ?f then ?f else A.null)\n\ngoal (1 subgoal):\n 1. FG.map a = A.map a", "by simp"], ["proof (state)\nthis:\n  FG.map a = A.map a\n\ngoal (1 subgoal):\n 1. A.ide a \\<Longrightarrow> \\<epsilon> a = A.map a", "finally"], ["proof (chain)\npicking this:\n  \\<epsilon> a = A.map a", "show \"\\<epsilon> a = A.map a\""], ["proof (prove)\nusing this:\n  \\<epsilon> a = A.map a\n\ngoal (1 subgoal):\n 1. \\<epsilon> a = A.map a", "by auto"], ["proof (state)\nthis:\n  \\<epsilon> a = A.map a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A.ide a \\<Longrightarrow> \\<epsilon> a = A.map a\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "section \"Composition of Adjunctions\""], ["", "locale composite_adjunction =\n    A: category A +\n    B: category B +\n    C: category C +\n    F: \"functor\" B A F +\n    G: \"functor\" A B G +\n    F': \"functor\" C B F' +\n    G': \"functor\" B C G' +\n    FG: meta_adjunction A B F G \\<phi> \\<psi> +\n    F'G': meta_adjunction B C F' G' \\<phi>' \\<psi>'\n  for A :: \"'a comp\"     (infixr \"\\<cdot>\\<^sub>A\" 55)\n  and B :: \"'b comp\"     (infixr \"\\<cdot>\\<^sub>B\" 55)\n  and C :: \"'c comp\"     (infixr \"\\<cdot>\\<^sub>C\" 55)\n  and F :: \"'b \\<Rightarrow> 'a\"\n  and G :: \"'a \\<Rightarrow> 'b\"\n  and F' :: \"'c \\<Rightarrow> 'b\"\n  and G' :: \"'b \\<Rightarrow> 'c\"\n  and \\<phi> :: \"'b \\<Rightarrow> 'a \\<Rightarrow> 'b\"\n  and \\<psi> :: \"'a \\<Rightarrow> 'b \\<Rightarrow> 'a\"\n  and \\<phi>' :: \"'c \\<Rightarrow> 'b \\<Rightarrow> 'c\"\n  and \\<psi>' :: \"'b \\<Rightarrow> 'c \\<Rightarrow> 'b\"\n  begin"], ["", "interpretation FG: adjunction A B replete_setcat.comp\n                           FG.\\<phi>C FG.\\<phi>D F G \\<phi> \\<psi> FG.\\<eta> FG.\\<epsilon> FG.\\<Phi> FG.\\<Psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) replete_setcat.comp\n     FG.\\<phi>C FG.\\<phi>D F G \\<phi> \\<psi> FG.\\<eta> FG.\\<epsilon>\n     FG.\\<Phi> FG.\\<Psi>", "using FG.induces_adjunction"], ["proof (prove)\nusing this:\n  adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) replete_setcat.comp\n   FG.\\<phi>C FG.\\<phi>D F G \\<phi> \\<psi> FG.\\<eta> FG.\\<epsilon> FG.\\<Phi>\n   FG.\\<Psi>\n\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) replete_setcat.comp\n     FG.\\<phi>C FG.\\<phi>D F G \\<phi> \\<psi> FG.\\<eta> FG.\\<epsilon>\n     FG.\\<Phi> FG.\\<Psi>", "by simp"], ["", "interpretation F'G': adjunction B C replete_setcat.comp F'G'.\\<phi>C F'G'.\\<phi>D F' G' \\<phi>' \\<psi>'\n                           F'G'.\\<eta> F'G'.\\<epsilon> F'G'.\\<Phi> F'G'.\\<Psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>C) replete_setcat.comp\n     F'G'.\\<phi>C F'G'.\\<phi>D F' G' \\<phi>' \\<psi>' F'G'.\\<eta>\n     F'G'.\\<epsilon> F'G'.\\<Phi> F'G'.\\<Psi>", "using F'G'.induces_adjunction"], ["proof (prove)\nusing this:\n  adjunction (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>C) replete_setcat.comp\n   F'G'.\\<phi>C F'G'.\\<phi>D F' G' \\<phi>' \\<psi>' F'G'.\\<eta>\n   F'G'.\\<epsilon> F'G'.\\<Phi> F'G'.\\<Psi>\n\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>C) replete_setcat.comp\n     F'G'.\\<phi>C F'G'.\\<phi>D F' G' \\<phi>' \\<psi>' F'G'.\\<eta>\n     F'G'.\\<epsilon> F'G'.\\<Phi> F'G'.\\<Psi>", "by simp"], ["", "(* Notation for C.in_hom is inherited here somehow, but I don't know from where. *)"], ["", "lemma is_meta_adjunction:\n    shows \"meta_adjunction A C (F o F') (G' o G) (\\<lambda>z. \\<phi>' z o \\<phi> (F' z)) (\\<lambda>x. \\<psi> x o \\<psi>' (G x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>C) (F \\<circ> F')\n     (G' \\<circ> G) (\\<lambda>z. \\<phi>' z \\<circ> \\<phi> (F' z))\n     (\\<lambda>x. \\<psi> x \\<circ> \\<psi>' (G x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>C) (F \\<circ> F')\n     (G' \\<circ> G) (\\<lambda>z. \\<phi>' z \\<circ> \\<phi> (F' z))\n     (\\<lambda>x. \\<psi> x \\<circ> \\<psi>' (G x))", "interpret G'oG: composite_functor A B C G G'"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>C)\n     G G'", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>C) (F \\<circ> F')\n     G'oG.map (\\<lambda>z. \\<phi>' z \\<circ> \\<phi> (F' z))\n     (\\<lambda>x. \\<psi> x \\<circ> \\<psi>' (G x))", "interpret FoF': composite_functor C B A F' F"], ["proof (prove)\ngoal (1 subgoal):\n 1. composite_functor (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>A)\n     F' F", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>C) FoF'.map G'oG.map\n     (\\<lambda>z. \\<phi>' z \\<circ> \\<phi> (F' z))\n     (\\<lambda>x. \\<psi> x \\<circ> \\<psi>' (G x))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>C) FoF'.map G'oG.map\n     (\\<lambda>z. \\<phi>' z \\<circ> \\<phi> (F' z))\n     (\\<lambda>x. \\<psi> x \\<circ> \\<psi>' (G x))", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>C.ide y;\n        \\<guillemotleft>f : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>(\\<phi>' y \\<circ> \\<phi> (F' y))\n    f : y \\<rightarrow>\\<^sub>C G'oG.map x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>(\\<psi> x \\<circ> \\<psi>' (G x))\n    g : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 3. \\<And>y f x.\n       \\<lbrakk>C.ide y;\n        \\<guillemotleft>f : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<psi> x \\<circ> \\<psi>' (G x))\n                          ((\\<phi>' y \\<circ> \\<phi> (F' y)) f) =\n                         f\n 4. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y \\<circ> \\<phi> (F' y))\n                          ((\\<psi> x \\<circ> \\<psi>' (G x)) g) =\n                         g\n 5. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>;\n        \\<guillemotleft>h : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n                          (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n                         G'oG.map f \\<cdot>\\<^sub>C\n                         (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C\n                         g", "fix y f x"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>C.ide y;\n        \\<guillemotleft>f : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>(\\<phi>' y \\<circ> \\<phi> (F' y))\n    f : y \\<rightarrow>\\<^sub>C G'oG.map x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>(\\<psi> x \\<circ> \\<psi>' (G x))\n    g : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 3. \\<And>y f x.\n       \\<lbrakk>C.ide y;\n        \\<guillemotleft>f : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<psi> x \\<circ> \\<psi>' (G x))\n                          ((\\<phi>' y \\<circ> \\<phi> (F' y)) f) =\n                         f\n 4. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y \\<circ> \\<phi> (F' y))\n                          ((\\<psi> x \\<circ> \\<psi>' (G x)) g) =\n                         g\n 5. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>;\n        \\<guillemotleft>h : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n                          (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n                         G'oG.map f \\<cdot>\\<^sub>C\n                         (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C\n                         g", "assume y: \"C.ide y\" and f: \"\\<guillemotleft>f : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\""], ["proof (state)\nthis:\n  C.ide y\n  \\<guillemotleft>f : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n\ngoal (5 subgoals):\n 1. \\<And>y f x.\n       \\<lbrakk>C.ide y;\n        \\<guillemotleft>f : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>(\\<phi>' y \\<circ> \\<phi> (F' y))\n    f : y \\<rightarrow>\\<^sub>C G'oG.map x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>(\\<psi> x \\<circ> \\<psi>' (G x))\n    g : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 3. \\<And>y f x.\n       \\<lbrakk>C.ide y;\n        \\<guillemotleft>f : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<psi> x \\<circ> \\<psi>' (G x))\n                          ((\\<phi>' y \\<circ> \\<phi> (F' y)) f) =\n                         f\n 4. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y \\<circ> \\<phi> (F' y))\n                          ((\\<psi> x \\<circ> \\<psi>' (G x)) g) =\n                         g\n 5. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>;\n        \\<guillemotleft>h : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n                          (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n                         G'oG.map f \\<cdot>\\<^sub>C\n                         (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C\n                         g", "show \"\\<guillemotleft>(\\<phi>' y \\<circ> \\<phi> (F' y)) f : y \\<rightarrow>\\<^sub>C G'oG.map x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>(\\<phi>' y \\<circ> \\<phi> (F' y))\n                     f : y \\<rightarrow>\\<^sub>C G'oG.map x\\<guillemotright>", "using y f FG.\\<phi>_in_hom F'G'.\\<phi>_in_hom"], ["proof (prove)\nusing this:\n  C.ide y\n  \\<guillemotleft>f : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n  \\<lbrakk>B.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>A ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>B G\n                              ?x\\<guillemotright>\n  \\<lbrakk>C.ide ?y;\n   \\<guillemotleft>?f : F' ?y \\<rightarrow>\\<^sub>B ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi>' ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>C G'\n                              ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>(\\<phi>' y \\<circ> \\<phi> (F' y))\n                     f : y \\<rightarrow>\\<^sub>C G'oG.map x\\<guillemotright>", "by simp"], ["proof (state)\nthis:\n  \\<guillemotleft>(\\<phi>' y \\<circ> \\<phi> (F' y))\n                   f : y \\<rightarrow>\\<^sub>C G'oG.map x\\<guillemotright>\n\ngoal (4 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>(\\<psi> x \\<circ> \\<psi>' (G x))\n    g : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 2. \\<And>y f x.\n       \\<lbrakk>C.ide y;\n        \\<guillemotleft>f : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<psi> x \\<circ> \\<psi>' (G x))\n                          ((\\<phi>' y \\<circ> \\<phi> (F' y)) f) =\n                         f\n 3. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y \\<circ> \\<phi> (F' y))\n                          ((\\<psi> x \\<circ> \\<psi>' (G x)) g) =\n                         g\n 4. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>;\n        \\<guillemotleft>h : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n                          (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n                         G'oG.map f \\<cdot>\\<^sub>C\n                         (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C\n                         g", "show \"(\\<psi> x \\<circ> \\<psi>' (G x)) ((\\<phi>' y \\<circ> \\<phi> (F' y)) f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<psi> x \\<circ> \\<psi>' (G x)) ((\\<phi>' y \\<circ> \\<phi> (F' y)) f) =\n    f", "using y f FG.\\<phi>_in_hom F'G'.\\<phi>_in_hom FG.\\<psi>_\\<phi> F'G'.\\<psi>_\\<phi>"], ["proof (prove)\nusing this:\n  C.ide y\n  \\<guillemotleft>f : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n  \\<lbrakk>B.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>A ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>B G\n                              ?x\\<guillemotright>\n  \\<lbrakk>C.ide ?y;\n   \\<guillemotleft>?f : F' ?y \\<rightarrow>\\<^sub>B ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi>' ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>C G'\n                              ?x\\<guillemotright>\n  \\<lbrakk>B.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>A ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> ?x (\\<phi> ?y ?f) = ?f\n  \\<lbrakk>C.ide ?y;\n   \\<guillemotleft>?f : F' ?y \\<rightarrow>\\<^sub>B ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi>' ?x (\\<phi>' ?y ?f) = ?f\n\ngoal (1 subgoal):\n 1. (\\<psi> x \\<circ> \\<psi>' (G x)) ((\\<phi>' y \\<circ> \\<phi> (F' y)) f) =\n    f", "by simp"], ["proof (state)\nthis:\n  (\\<psi> x \\<circ> \\<psi>' (G x)) ((\\<phi>' y \\<circ> \\<phi> (F' y)) f) = f\n\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>(\\<psi> x \\<circ> \\<psi>' (G x))\n    g : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y \\<circ> \\<phi> (F' y))\n                          ((\\<psi> x \\<circ> \\<psi>' (G x)) g) =\n                         g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>;\n        \\<guillemotleft>h : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n                          (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n                         G'oG.map f \\<cdot>\\<^sub>C\n                         (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C\n                         g", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>(\\<psi> x \\<circ> \\<psi>' (G x))\n    g : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y \\<circ> \\<phi> (F' y))\n                          ((\\<psi> x \\<circ> \\<psi>' (G x)) g) =\n                         g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>;\n        \\<guillemotleft>h : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n                          (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n                         G'oG.map f \\<cdot>\\<^sub>C\n                         (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C\n                         g", "fix x g y"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>(\\<psi> x \\<circ> \\<psi>' (G x))\n    g : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y \\<circ> \\<phi> (F' y))\n                          ((\\<psi> x \\<circ> \\<psi>' (G x)) g) =\n                         g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>;\n        \\<guillemotleft>h : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n                          (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n                         G'oG.map f \\<cdot>\\<^sub>C\n                         (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C\n                         g", "assume x: \"A.ide x\" and g: \"\\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map x\\<guillemotright>\""], ["proof (state)\nthis:\n  A.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map x\\<guillemotright>\n\ngoal (3 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> \\<guillemotleft>(\\<psi> x \\<circ> \\<psi>' (G x))\n    g : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n 2. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y \\<circ> \\<phi> (F' y))\n                          ((\\<psi> x \\<circ> \\<psi>' (G x)) g) =\n                         g\n 3. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>;\n        \\<guillemotleft>h : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n                          (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n                         G'oG.map f \\<cdot>\\<^sub>C\n                         (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C\n                         g", "show \"\\<guillemotleft>(\\<psi> x \\<circ> \\<psi>' (G x)) g : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>(\\<psi> x \\<circ> \\<psi>' (G x))\n                     g : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>", "using x g FG.\\<psi>_in_hom F'G'.\\<psi>_in_hom"], ["proof (prove)\nusing this:\n  A.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map x\\<guillemotright>\n  \\<lbrakk>A.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>B G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> ?x\n                                     ?g : F\n     ?y \\<rightarrow>\\<^sub>A ?x\\<guillemotright>\n  \\<lbrakk>B.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>C G'\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi>' ?x\n                                     ?g : F'\n     ?y \\<rightarrow>\\<^sub>B ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>(\\<psi> x \\<circ> \\<psi>' (G x))\n                     g : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>", "by auto"], ["proof (state)\nthis:\n  \\<guillemotleft>(\\<psi> x \\<circ> \\<psi>' (G x))\n                   g : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n\ngoal (2 subgoals):\n 1. \\<And>x g y.\n       \\<lbrakk>A.ide x;\n        \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map\n               x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y \\<circ> \\<phi> (F' y))\n                          ((\\<psi> x \\<circ> \\<psi>' (G x)) g) =\n                         g\n 2. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>;\n        \\<guillemotleft>h : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n                          (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n                         G'oG.map f \\<cdot>\\<^sub>C\n                         (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C\n                         g", "show \"(\\<phi>' y \\<circ> \\<phi> (F' y)) ((\\<psi> x \\<circ> \\<psi>' (G x)) g) = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<phi>' y \\<circ> \\<phi> (F' y)) ((\\<psi> x \\<circ> \\<psi>' (G x)) g) =\n    g", "using x g FG.\\<psi>_in_hom F'G'.\\<psi>_in_hom FG.\\<phi>_\\<psi> F'G'.\\<phi>_\\<psi>"], ["proof (prove)\nusing this:\n  A.ide x\n  \\<guillemotleft>g : y \\<rightarrow>\\<^sub>C G'oG.map x\\<guillemotright>\n  \\<lbrakk>A.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>B G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi> ?x\n                                     ?g : F\n     ?y \\<rightarrow>\\<^sub>A ?x\\<guillemotright>\n  \\<lbrakk>B.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>C G'\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<psi>' ?x\n                                     ?g : F'\n     ?y \\<rightarrow>\\<^sub>B ?x\\<guillemotright>\n  \\<lbrakk>A.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>B G\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y (\\<psi> ?x ?g) = ?g\n  \\<lbrakk>B.ide ?x;\n   \\<guillemotleft>?g : ?y \\<rightarrow>\\<^sub>C G'\n            ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi>' ?y (\\<psi>' ?x ?g) = ?g\n\ngoal (1 subgoal):\n 1. (\\<phi>' y \\<circ> \\<phi> (F' y)) ((\\<psi> x \\<circ> \\<psi>' (G x)) g) =\n    g", "by simp"], ["proof (state)\nthis:\n  (\\<phi>' y \\<circ> \\<phi> (F' y)) ((\\<psi> x \\<circ> \\<psi>' (G x)) g) = g\n\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>;\n        \\<guillemotleft>h : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n                          (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n                         G'oG.map f \\<cdot>\\<^sub>C\n                         (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C\n                         g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>;\n        \\<guillemotleft>h : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n                          (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n                         G'oG.map f \\<cdot>\\<^sub>C\n                         (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C\n                         g", "fix f x x' g y' y h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>;\n        \\<guillemotleft>h : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n                          (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n                         G'oG.map f \\<cdot>\\<^sub>C\n                         (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C\n                         g", "assume f: \"\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>\" and g: \"\\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>\" and h: \"\\<guillemotleft>h : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\""], ["proof (state)\nthis:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>\n  \\<guillemotleft>h : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>f x x' g y' y h.\n       \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n        \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>;\n        \\<guillemotleft>h : FoF'.map\n                             y \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n       \\<Longrightarrow> (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n                          (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n                         G'oG.map f \\<cdot>\\<^sub>C\n                         (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C\n                         g", "show \"(\\<phi>' y' \\<circ> \\<phi> (F' y')) (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n              G'oG.map f \\<cdot>\\<^sub>C (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n     (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n    G'oG.map f \\<cdot>\\<^sub>C\n    (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C g", "using f g h FG.\\<phi>_naturality [of f x x' \"F' g\" \"F' y'\" \"F' y\" h]\n                F'G'.\\<phi>_naturality [of \"G f\" \"G x\" \"G x'\" g y' y \"\\<phi> (F' y) h\"]\n                FG.\\<phi>_in_hom"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>\n  \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>\n  \\<guillemotleft>h : FoF'.map y \\<rightarrow>\\<^sub>A x\\<guillemotright>\n  \\<lbrakk>\\<guillemotleft>f : x \\<rightarrow>\\<^sub>A x'\\<guillemotright>;\n   \\<guillemotleft>F' g : F' y' \\<rightarrow>\\<^sub>B F' y\\<guillemotright>;\n   \\<guillemotleft>h : F (F' y) \\<rightarrow>\\<^sub>A x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> (F' y')\n                     (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A F (F' g)) =\n                    G f \\<cdot>\\<^sub>B \\<phi> (F' y) h \\<cdot>\\<^sub>B F' g\n  \\<lbrakk>\\<guillemotleft>G f : G x \\<rightarrow>\\<^sub>B G\n                      x'\\<guillemotright>;\n   \\<guillemotleft>g : y' \\<rightarrow>\\<^sub>C y\\<guillemotright>;\n   \\<guillemotleft>\\<phi> (F' y)\n                    h : F' y \\<rightarrow>\\<^sub>B G\n              x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi>' y'\n                     (G f \\<cdot>\\<^sub>B\n                      \\<phi> (F' y) h \\<cdot>\\<^sub>B F' g) =\n                    G' (G f) \\<cdot>\\<^sub>C\n                    \\<phi>' y (\\<phi> (F' y) h) \\<cdot>\\<^sub>C g\n  \\<lbrakk>B.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>A ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>\\<phi> ?y\n                                     ?f : ?y \\<rightarrow>\\<^sub>B G\n                              ?x\\<guillemotright>\n\ngoal (1 subgoal):\n 1. (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n     (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n    G'oG.map f \\<cdot>\\<^sub>C\n    (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C g", "by fastforce"], ["proof (state)\nthis:\n  (\\<phi>' y' \\<circ> \\<phi> (F' y'))\n   (f \\<cdot>\\<^sub>A h \\<cdot>\\<^sub>A FoF'.map g) =\n  G'oG.map f \\<cdot>\\<^sub>C\n  (\\<phi>' y \\<circ> \\<phi> (F' y)) h \\<cdot>\\<^sub>C g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  meta_adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>C) FoF'.map G'oG.map\n   (\\<lambda>z. \\<phi>' z \\<circ> \\<phi> (F' z))\n   (\\<lambda>x. \\<psi> x \\<circ> \\<psi>' (G x))\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation K\\<eta>H: natural_transformation C C \\<open>G' o F'\\<close> \\<open>G' o G o F o F'\\<close>\n                          \\<open>G' o FG.\\<eta> o F'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) F'G'.GF.map\n     (G' \\<circ> G \\<circ> F \\<circ> F') (G' \\<circ> FG.\\<eta> \\<circ> F')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) F'G'.GF.map\n     (G' \\<circ> G \\<circ> F \\<circ> F') (G' \\<circ> FG.\\<eta> \\<circ> F')", "interpret \\<eta>F': natural_transformation C B F' \\<open>(G o F) o F'\\<close> \\<open>FG.\\<eta> o F'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>B) F'\n     (FG.GF.map \\<circ> F') (FG.\\<eta> \\<circ> F')", "using FG.\\<eta>_is_natural_transformation F'.natural_transformation_axioms\n              horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map FG.GF.map\n   FG.\\<eta>\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>B) F' F' F'\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>B) F'\n     (FG.GF.map \\<circ> F') (FG.\\<eta> \\<circ> F')", "by fastforce"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) F'G'.GF.map\n     (G' \\<circ> G \\<circ> F \\<circ> F') (G' \\<circ> FG.\\<eta> \\<circ> F')", "interpret G'\\<eta>F': natural_transformation C C \\<open>G' o F'\\<close> \\<open>G' o (G o F o F')\\<close>\n                         \\<open>G' o (FG.\\<eta> o F')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) F'G'.GF.map\n     (G' \\<circ> (FG.GF.map \\<circ> F')) (G' \\<circ> (FG.\\<eta> \\<circ> F'))", "using \\<eta>F'.natural_transformation_axioms G'.natural_transformation_axioms\n              horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>B) F'\n   (FG.GF.map \\<circ> F') (FG.\\<eta> \\<circ> F')\n  natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>C) G' G' G'\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) F'G'.GF.map\n     (G' \\<circ> (FG.GF.map \\<circ> F')) (G' \\<circ> (FG.\\<eta> \\<circ> F'))", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) F'G'.GF.map\n     (G' \\<circ> G \\<circ> F \\<circ> F') (G' \\<circ> FG.\\<eta> \\<circ> F')", "show \"natural_transformation C C (G' o F') (G' o G o F o F') (G' o FG.\\<eta> o F')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) F'G'.GF.map\n     (G' \\<circ> G \\<circ> F \\<circ> F') (G' \\<circ> FG.\\<eta> \\<circ> F')", "using G'\\<eta>F'.natural_transformation_axioms o_assoc"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) F'G'.GF.map\n   (G' \\<circ> (FG.GF.map \\<circ> F')) (G' \\<circ> (FG.\\<eta> \\<circ> F'))\n  ?f \\<circ> (?g \\<circ> ?h) = ?f \\<circ> ?g \\<circ> ?h\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) F'G'.GF.map\n     (G' \\<circ> G \\<circ> F \\<circ> F') (G' \\<circ> FG.\\<eta> \\<circ> F')", "by metis"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) F'G'.GF.map\n   (G' \\<circ> G \\<circ> F \\<circ> F') (G' \\<circ> FG.\\<eta> \\<circ> F')\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation G'\\<eta>F'o\\<eta>': vertical_composite C C C.map \\<open>G' o F'\\<close> \\<open>G' o G o F o F'\\<close>\n                             F'G'.\\<eta> \\<open>G' o FG.\\<eta> o F'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map F'G'.GF.map\n     (G' \\<circ> G \\<circ> F \\<circ> F') F'G'.\\<eta>\n     (G' \\<circ> FG.\\<eta> \\<circ> F')", ".."], ["", "interpretation F\\<epsilon>G: natural_transformation A A \\<open>F o F' o G' o G\\<close> \\<open>F o G\\<close>\n                          \\<open>F o F'G'.\\<epsilon> o G\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F' \\<circ> G' \\<circ> G) FG.FG.map\n     (F \\<circ> F'G'.\\<epsilon> \\<circ> G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F' \\<circ> G' \\<circ> G) FG.FG.map\n     (F \\<circ> F'G'.\\<epsilon> \\<circ> G)", "interpret F\\<epsilon>': natural_transformation B A \\<open>F o (F' o G')\\<close> F \\<open>F o F'G'.\\<epsilon>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F'G'.FG.map) F (F \\<circ> F'G'.\\<epsilon>)", "using F'G'.\\<epsilon>.natural_transformation_axioms F.natural_transformation_axioms\n              horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) F'G'.FG.map\n   B.map F'G'.\\<epsilon>\n  natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>A) F F F\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F'G'.FG.map) F (F \\<circ> F'G'.\\<epsilon>)", "by fastforce"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F' \\<circ> G' \\<circ> G) FG.FG.map\n     (F \\<circ> F'G'.\\<epsilon> \\<circ> G)", "interpret F\\<epsilon>'G: natural_transformation A A \\<open>F o (F' o G') o G\\<close> \\<open>F o G\\<close> \\<open>F o F'G'.\\<epsilon> o G\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F'G'.FG.map \\<circ> G) FG.FG.map\n     (F \\<circ> F'G'.\\<epsilon> \\<circ> G)", "using F\\<epsilon>'.natural_transformation_axioms G.natural_transformation_axioms\n              horizontal_composite"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>A)\n   (F \\<circ> F'G'.FG.map) F (F \\<circ> F'G'.\\<epsilon>)\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>B) G G G\n  \\<lbrakk>natural_transformation ?A ?B ?F ?G ?\\<sigma>;\n   natural_transformation ?B ?C ?H ?K ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> natural_transformation ?A ?C (?H \\<circ> ?F)\n                     (?K \\<circ> ?G) (?\\<tau> \\<circ> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F'G'.FG.map \\<circ> G) FG.FG.map\n     (F \\<circ> F'G'.\\<epsilon> \\<circ> G)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F' \\<circ> G' \\<circ> G) FG.FG.map\n     (F \\<circ> F'G'.\\<epsilon> \\<circ> G)", "show \"natural_transformation A A (F o F' o G' o G) (F o G) (F o F'G'.\\<epsilon> o G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F' \\<circ> G' \\<circ> G) FG.FG.map\n     (F \\<circ> F'G'.\\<epsilon> \\<circ> G)", "using F\\<epsilon>'G.natural_transformation_axioms o_assoc"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n   (F \\<circ> F'G'.FG.map \\<circ> G) FG.FG.map\n   (F \\<circ> F'G'.\\<epsilon> \\<circ> G)\n  ?f \\<circ> (?g \\<circ> ?h) = ?f \\<circ> ?g \\<circ> ?h\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F' \\<circ> G' \\<circ> G) FG.FG.map\n     (F \\<circ> F'G'.\\<epsilon> \\<circ> G)", "by metis"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n   (F \\<circ> F' \\<circ> G' \\<circ> G) FG.FG.map\n   (F \\<circ> F'G'.\\<epsilon> \\<circ> G)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation \\<epsilon>oF\\<epsilon>'G: vertical_composite A A \\<open>F \\<circ> F' \\<circ> G' \\<circ> G\\<close> \\<open>F o G\\<close> A.map\n                             \\<open>F o F'G'.\\<epsilon> o G\\<close> FG.\\<epsilon>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vertical_composite (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F' \\<circ> G' \\<circ> G) FG.FG.map A.map\n     (F \\<circ> F'G'.\\<epsilon> \\<circ> G) FG.\\<epsilon>", ".."], ["", "interpretation meta_adjunction A C \\<open>F o F'\\<close> \\<open>G' o G\\<close>\n                                   \\<open>\\<lambda>z. \\<phi>' z o \\<phi> (F' z)\\<close> \\<open>\\<lambda>x. \\<psi> x o \\<psi>' (G x)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>C) (F \\<circ> F')\n     (G' \\<circ> G) (\\<lambda>z. \\<phi>' z \\<circ> \\<phi> (F' z))\n     (\\<lambda>x. \\<psi> x \\<circ> \\<psi>' (G x))", "using is_meta_adjunction"], ["proof (prove)\nusing this:\n  meta_adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>C) (F \\<circ> F')\n   (G' \\<circ> G) (\\<lambda>z. \\<phi>' z \\<circ> \\<phi> (F' z))\n   (\\<lambda>x. \\<psi> x \\<circ> \\<psi>' (G x))\n\ngoal (1 subgoal):\n 1. meta_adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>C) (F \\<circ> F')\n     (G' \\<circ> G) (\\<lambda>z. \\<phi>' z \\<circ> \\<phi> (F' z))\n     (\\<lambda>x. \\<psi> x \\<circ> \\<psi>' (G x))", "by auto"], ["", "interpretation adjunction A C replete_setcat.comp \\<phi>C \\<phi>D \\<open>F \\<circ> F'\\<close> \\<open>G' \\<circ> G\\<close>\n                     \\<open>\\<lambda>z. \\<phi>' z \\<circ> \\<phi> (F' z)\\<close> \\<open>\\<lambda>x. \\<psi> x \\<circ> \\<psi>' (G x)\\<close> \\<eta> \\<epsilon> \\<Phi> \\<Psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>C) replete_setcat.comp\n     \\<phi>C \\<phi>D (F \\<circ> F') (G' \\<circ> G)\n     (\\<lambda>z. \\<phi>' z \\<circ> \\<phi> (F' z))\n     (\\<lambda>x. \\<psi> x \\<circ> \\<psi>' (G x)) \\<eta> \\<epsilon> \\<Phi>\n     \\<Psi>", "using induces_adjunction"], ["proof (prove)\nusing this:\n  adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>C) replete_setcat.comp \\<phi>C\n   \\<phi>D (F \\<circ> F') (G' \\<circ> G)\n   (\\<lambda>z. \\<phi>' z \\<circ> \\<phi> (F' z))\n   (\\<lambda>x. \\<psi> x \\<circ> \\<psi>' (G x)) \\<eta> \\<epsilon> \\<Phi>\n   \\<Psi>\n\ngoal (1 subgoal):\n 1. adjunction (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>C) replete_setcat.comp\n     \\<phi>C \\<phi>D (F \\<circ> F') (G' \\<circ> G)\n     (\\<lambda>z. \\<phi>' z \\<circ> \\<phi> (F' z))\n     (\\<lambda>x. \\<psi> x \\<circ> \\<psi>' (G x)) \\<eta> \\<epsilon> \\<Phi>\n     \\<Psi>", "by simp"], ["", "lemma \\<eta>_char:\n    shows \"\\<eta> = G'\\<eta>F'o\\<eta>'.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta> = G'\\<eta>F'o\\<eta>'.map", "proof (intro NaturalTransformation.eqI)"], ["proof (state)\ngoal (3 subgoals):\n 1. natural_transformation ?A ?B ?F ?G \\<eta>\n 2. natural_transformation ?A ?B ?F ?G G'\\<eta>F'o\\<eta>'.map\n 3. \\<And>a.\n       partial_magma.ide ?A a \\<Longrightarrow>\n       \\<eta> a = G'\\<eta>F'o\\<eta>'.map a", "show \"natural_transformation C C C.map (G' o G o F o F') G'\\<eta>F'o\\<eta>'.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n     (G' \\<circ> G \\<circ> F \\<circ> F') G'\\<eta>F'o\\<eta>'.map", ".."], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n   (G' \\<circ> G \\<circ> F \\<circ> F') G'\\<eta>F'o\\<eta>'.map\n\ngoal (2 subgoals):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n     (G' \\<circ> G \\<circ> F \\<circ> F') \\<eta>\n 2. \\<And>a. C.ide a \\<Longrightarrow> \\<eta> a = G'\\<eta>F'o\\<eta>'.map a", "show \"natural_transformation C C C.map (G' o G o F o F') \\<eta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n     (G' \\<circ> G \\<circ> F \\<circ> F') \\<eta>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n     (G' \\<circ> G \\<circ> F \\<circ> F') \\<eta>", "have \"natural_transformation C C C.map ((G' \\<circ> G) \\<circ> (F \\<circ> F')) \\<eta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map GF.map\n     \\<eta>", ".."], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map GF.map\n   \\<eta>\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n     (G' \\<circ> G \\<circ> F \\<circ> F') \\<eta>", "moreover"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map GF.map\n   \\<eta>\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n     (G' \\<circ> G \\<circ> F \\<circ> F') \\<eta>", "have \"(G' o G) o (F o F') = G' o G o F o F'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. GF.map = G' \\<circ> G \\<circ> F \\<circ> F'", "by auto"], ["proof (state)\nthis:\n  GF.map = G' \\<circ> G \\<circ> F \\<circ> F'\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n     (G' \\<circ> G \\<circ> F \\<circ> F') \\<eta>", "ultimately"], ["proof (chain)\npicking this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map GF.map\n   \\<eta>\n  GF.map = G' \\<circ> G \\<circ> F \\<circ> F'", "show ?thesis"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map GF.map\n   \\<eta>\n  GF.map = G' \\<circ> G \\<circ> F \\<circ> F'\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n     (G' \\<circ> G \\<circ> F \\<circ> F') \\<eta>", "by metis"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n   (G' \\<circ> G \\<circ> F \\<circ> F') \\<eta>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n   (G' \\<circ> G \\<circ> F \\<circ> F') \\<eta>\n\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> \\<eta> a = G'\\<eta>F'o\\<eta>'.map a", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> \\<eta> a = G'\\<eta>F'o\\<eta>'.map a", "assume a: \"C.ide a\""], ["proof (state)\nthis:\n  C.ide a\n\ngoal (1 subgoal):\n 1. \\<And>a. C.ide a \\<Longrightarrow> \\<eta> a = G'\\<eta>F'o\\<eta>'.map a", "show \"\\<eta> a = G'\\<eta>F'o\\<eta>'.map a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta> a = G'\\<eta>F'o\\<eta>'.map a", "unfolding \\<eta>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n     C.map \\<eta>o a =\n    G'\\<eta>F'o\\<eta>'.map a", "using a G'\\<eta>F'o\\<eta>'.map_def FG.\\<eta>.preserves_hom [of \"F' a\" \"F' a\" \"F' a\"]\n              F'G'.\\<phi>_in_terms_of_\\<eta> FG.\\<eta>_map_simp \\<eta>_map_simp [of a] C.ide_in_hom\n              F'G'.\\<eta>_def FG.\\<eta>_def"], ["proof (prove)\nusing this:\n  C.ide a\n  G'\\<eta>F'o\\<eta>'.map ?f =\n  (if C.arr ?f\n   then (G' \\<circ> FG.\\<eta> \\<circ> F') (C.cod ?f) \\<cdot>\\<^sub>C\n        F'G'.\\<eta> ?f\n   else C.null)\n  \\<guillemotleft>F' a : F' a \\<rightarrow>\\<^sub>B F'\n               a\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>FG.\\<eta>\n                   (F' a) : B.map\n                             (F' a) \\<rightarrow>\\<^sub>B FG.GF.map\n                     (F' a)\\<guillemotright>\n  \\<lbrakk>C.ide ?y;\n   \\<guillemotleft>?f : F' ?y \\<rightarrow>\\<^sub>B ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi>' ?y ?f = G' ?f \\<cdot>\\<^sub>C F'G'.\\<eta> ?y\n  B.ide ?y \\<Longrightarrow>\n  transformation_by_components.map (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map\n   FG.\\<eta>o ?y =\n  \\<phi> ?y (F ?y)\n  C.ide a \\<Longrightarrow>\n  transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n   \\<eta>o a =\n  (\\<phi>' a \\<circ> \\<phi> (F' a)) ((F \\<circ> F') a)\n  C.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>C ?a\\<guillemotright>\n  F'G'.\\<eta> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C) C.map\n   F'G'.\\<eta>o\n  FG.\\<eta> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B) B.map\n   FG.\\<eta>o\n\ngoal (1 subgoal):\n 1. transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n     C.map \\<eta>o a =\n    G'\\<eta>F'o\\<eta>'.map a", "by auto"], ["proof (state)\nthis:\n  \\<eta> a = G'\\<eta>F'o\\<eta>'.map a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<epsilon>_char:\n    shows \"\\<epsilon> = \\<epsilon>oF\\<epsilon>'G.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>oF\\<epsilon>'G.map", "proof (intro NaturalTransformation.eqI)"], ["proof (state)\ngoal (3 subgoals):\n 1. natural_transformation ?A ?B ?F ?G \\<epsilon>\n 2. natural_transformation ?A ?B ?F ?G \\<epsilon>oF\\<epsilon>'G.map\n 3. \\<And>a.\n       partial_magma.ide ?A a \\<Longrightarrow>\n       \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a", "show \"natural_transformation A A (F o F' o G' o G) A.map \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F' \\<circ> G' \\<circ> G) A.map \\<epsilon>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F' \\<circ> G' \\<circ> G) A.map \\<epsilon>", "have \"natural_transformation A A ((F \\<circ> F') \\<circ> (G' \\<circ> G)) A.map \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n     \\<epsilon>", ".."], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F' \\<circ> G' \\<circ> G) A.map \\<epsilon>", "moreover"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n   \\<epsilon>\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F' \\<circ> G' \\<circ> G) A.map \\<epsilon>", "have \"(F o F') o (G' o G) = F o F' o G' o G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FG.map = F \\<circ> F' \\<circ> G' \\<circ> G", "by auto"], ["proof (state)\nthis:\n  FG.map = F \\<circ> F' \\<circ> G' \\<circ> G\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F' \\<circ> G' \\<circ> G) A.map \\<epsilon>", "ultimately"], ["proof (chain)\npicking this:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n   \\<epsilon>\n  FG.map = F \\<circ> F' \\<circ> G' \\<circ> G", "show ?thesis"], ["proof (prove)\nusing this:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A) FG.map A.map\n   \\<epsilon>\n  FG.map = F \\<circ> F' \\<circ> G' \\<circ> G\n\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F' \\<circ> G' \\<circ> G) A.map \\<epsilon>", "by metis"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n   (F \\<circ> F' \\<circ> G' \\<circ> G) A.map \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n   (F \\<circ> F' \\<circ> G' \\<circ> G) A.map \\<epsilon>\n\ngoal (2 subgoals):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F' \\<circ> G' \\<circ> G) A.map \\<epsilon>oF\\<epsilon>'G.map\n 2. \\<And>a.\n       A.ide a \\<Longrightarrow>\n       \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a", "show \"natural_transformation A A (F \\<circ> F' \\<circ> G' \\<circ> G) A.map \\<epsilon>oF\\<epsilon>'G.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n     (F \\<circ> F' \\<circ> G' \\<circ> G) A.map \\<epsilon>oF\\<epsilon>'G.map", ".."], ["proof (state)\nthis:\n  natural_transformation (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n   (F \\<circ> F' \\<circ> G' \\<circ> G) A.map \\<epsilon>oF\\<epsilon>'G.map\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       A.ide a \\<Longrightarrow>\n       \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       A.ide a \\<Longrightarrow>\n       \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a", "assume a: \"A.ide a\""], ["proof (state)\nthis:\n  A.ide a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       A.ide a \\<Longrightarrow>\n       \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a", "show \"\\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a", "have \"\\<epsilon> a = \\<psi> a (\\<psi>' (G a) (G' (G a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> a = \\<psi> a (\\<psi>' (G a) (G' (G a)))", "using a \\<epsilon>_in_terms_of_\\<psi>"], ["proof (prove)\nusing this:\n  A.ide a\n  A.ide ?x \\<Longrightarrow>\n  \\<epsilon> ?x = (\\<psi> ?x \\<circ> \\<psi>' (G ?x)) ((G' \\<circ> G) ?x)\n\ngoal (1 subgoal):\n 1. \\<epsilon> a = \\<psi> a (\\<psi>' (G a) (G' (G a)))", "by simp"], ["proof (state)\nthis:\n  \\<epsilon> a = \\<psi> a (\\<psi>' (G a) (G' (G a)))\n\ngoal (1 subgoal):\n 1. \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a", "also"], ["proof (state)\nthis:\n  \\<epsilon> a = \\<psi> a (\\<psi>' (G a) (G' (G a)))\n\ngoal (1 subgoal):\n 1. \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a", "have \"... = FG.\\<epsilon> a \\<cdot>\\<^sub>A F (F'G'.\\<epsilon> (G a) \\<cdot>\\<^sub>B F' (G' (G a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> a (\\<psi>' (G a) (G' (G a))) =\n    FG.\\<epsilon> a \\<cdot>\\<^sub>A\n    F (F'G'.\\<epsilon> (G a) \\<cdot>\\<^sub>B F' (G' (G a)))", "unfolding \\<epsilon>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<psi> a (\\<psi>' (G a) (G' (G a))) =\n    FG.\\<epsilon> a \\<cdot>\\<^sub>A\n    F (F'G'.\\<epsilon> (G a) \\<cdot>\\<^sub>B F' (G' (G a)))", "using a F'G'.\\<psi>_in_terms_of_\\<epsilon> [of \"G a\" \"G' (G a)\" \"G' (G a)\"]\n                F'G'.\\<epsilon>.preserves_hom [of \"G a\" \"G a\" \"G a\"]\n                FG.\\<psi>_in_terms_of_\\<epsilon> [of a \"F'G'.\\<epsilon> (G a) \\<cdot>\\<^sub>B F' (G' (G a))\" \"(F'G'.FG.map (G a))\"]\n                F'G'.\\<epsilon>_def FG.\\<epsilon>_def"], ["proof (prove)\nusing this:\n  A.ide a\n  \\<lbrakk>B.ide (G a);\n   \\<guillemotleft>G' (G a) : G' (G a) \\<rightarrow>\\<^sub>C G'\n                        (G a)\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi>' (G a) (G' (G a)) =\n                    F'G'.\\<epsilon> (G a) \\<cdot>\\<^sub>B F' (G' (G a))\n  \\<guillemotleft>G a : G a \\<rightarrow>\\<^sub>B G\n             a\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>F'G'.\\<epsilon>\n                   (G a) : F'G'.FG.map\n                            (G a) \\<rightarrow>\\<^sub>B B.map\n                   (G a)\\<guillemotright>\n  \\<lbrakk>A.ide a;\n   \\<guillemotleft>F'G'.\\<epsilon> (G a) \\<cdot>\\<^sub>B\n                   F' (G' (G a)) : F'G'.FG.map\n                                    (G\na) \\<rightarrow>\\<^sub>B G a\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<psi> a\n                     (F'G'.\\<epsilon> (G a) \\<cdot>\\<^sub>B F' (G' (G a))) =\n                    FG.\\<epsilon> a \\<cdot>\\<^sub>A\n                    F (F'G'.\\<epsilon> (G a) \\<cdot>\\<^sub>B F' (G' (G a)))\n  F'G'.\\<epsilon> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>B) (\\<cdot>\\<^sub>B)\n   F'G'.FG.map F'G'.\\<epsilon>o\n  FG.\\<epsilon> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>A) (\\<cdot>\\<^sub>A)\n   FG.FG.map FG.\\<epsilon>o\n\ngoal (1 subgoal):\n 1. \\<psi> a (\\<psi>' (G a) (G' (G a))) =\n    FG.\\<epsilon> a \\<cdot>\\<^sub>A\n    F (F'G'.\\<epsilon> (G a) \\<cdot>\\<^sub>B F' (G' (G a)))", "by fastforce"], ["proof (state)\nthis:\n  \\<psi> a (\\<psi>' (G a) (G' (G a))) =\n  FG.\\<epsilon> a \\<cdot>\\<^sub>A\n  F (F'G'.\\<epsilon> (G a) \\<cdot>\\<^sub>B F' (G' (G a)))\n\ngoal (1 subgoal):\n 1. \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a", "also"], ["proof (state)\nthis:\n  \\<psi> a (\\<psi>' (G a) (G' (G a))) =\n  FG.\\<epsilon> a \\<cdot>\\<^sub>A\n  F (F'G'.\\<epsilon> (G a) \\<cdot>\\<^sub>B F' (G' (G a)))\n\ngoal (1 subgoal):\n 1. \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a", "have \"... = \\<epsilon>oF\\<epsilon>'G.map a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FG.\\<epsilon> a \\<cdot>\\<^sub>A\n    F (F'G'.\\<epsilon> (G a) \\<cdot>\\<^sub>B F' (G' (G a))) =\n    \\<epsilon>oF\\<epsilon>'G.map a", "using a B.comp_arr_dom \\<epsilon>oF\\<epsilon>'G.map_def"], ["proof (prove)\nusing this:\n  A.ide a\n  \\<lbrakk>B.arr ?f; B.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot>\\<^sub>B ?a = ?f\n  \\<epsilon>oF\\<epsilon>'G.map ?f =\n  (if A.arr ?f\n   then FG.\\<epsilon> (A.cod ?f) \\<cdot>\\<^sub>A\n        (F \\<circ> F'G'.\\<epsilon> \\<circ> G) ?f\n   else A.null)\n\ngoal (1 subgoal):\n 1. FG.\\<epsilon> a \\<cdot>\\<^sub>A\n    F (F'G'.\\<epsilon> (G a) \\<cdot>\\<^sub>B F' (G' (G a))) =\n    \\<epsilon>oF\\<epsilon>'G.map a", "by simp"], ["proof (state)\nthis:\n  FG.\\<epsilon> a \\<cdot>\\<^sub>A\n  F (F'G'.\\<epsilon> (G a) \\<cdot>\\<^sub>B F' (G' (G a))) =\n  \\<epsilon>oF\\<epsilon>'G.map a\n\ngoal (1 subgoal):\n 1. \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a", "finally"], ["proof (chain)\npicking this:\n  \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a\n\ngoal (1 subgoal):\n 1. \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a", "by blast"], ["proof (state)\nthis:\n  \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<epsilon> a = \\<epsilon>oF\\<epsilon>'G.map a\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "section \"Right Adjoints are Unique up to Natural Isomorphism\""], ["", "text\\<open>\n    As an example of the use of the of the foregoing development, we show that two right adjoints\n    to the same functor are naturally isomorphic.\n\\<close>"], ["", "theorem two_right_adjoints_naturally_isomorphic:\n  assumes \"adjoint_functors C D F G\" and \"adjoint_functors C D F G'\"\n  shows \"naturally_isomorphic C D G G'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. naturally_isomorphic C D G G'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic C D G G'", "text\\<open>\n      For any object @{term x} of @{term C}, we have that \\<open>\\<epsilon> x \\<in> C.hom (F (G x)) x\\<close>\n      is a terminal arrow from @{term F} to @{term x}, and similarly for \\<open>\\<epsilon>' x\\<close>.\n      We may therefore obtain the unique coextension \\<open>\\<tau> x \\<in> D.hom (G x) (G' x)\\<close>\n      of \\<open>\\<epsilon> x\\<close> along \\<open>\\<epsilon>' x\\<close>.\n      An explicit formula for \\<open>\\<tau> x\\<close> is \\<open>D (G' (\\<epsilon> x)) (\\<eta>' (G x))\\<close>.\n      Similarly, we obtain \\<open>\\<tau>' x = D (G (\\<epsilon>' x)) (\\<eta> (G' x)) \\<in> D.hom (G' x) (G x)\\<close>.\n      We show these are the components of inverse natural transformations between\n      @{term G} and @{term G'}.\n\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic C D G G'", "obtain \\<phi> \\<psi> where \\<phi>\\<psi>: \"meta_adjunction C D F G \\<phi> \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<phi> \\<psi>.\n        meta_adjunction C D F G \\<phi> \\<psi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms adjoint_functors_def"], ["proof (prove)\nusing this:\n  adjoint_functors C D F G\n  adjoint_functors C D F G'\n  adjoint_functors ?C ?D ?F ?G =\n  (\\<exists>\\<phi> \\<psi>. meta_adjunction ?C ?D ?F ?G \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi> \\<psi>.\n        meta_adjunction C D F G \\<phi> \\<psi> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  meta_adjunction C D F G \\<phi> \\<psi>\n\ngoal (1 subgoal):\n 1. naturally_isomorphic C D G G'", "obtain \\<phi>' \\<psi>' where \\<phi>'\\<psi>': \"meta_adjunction C D F G' \\<phi>' \\<psi>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>' \\<psi>'.\n        meta_adjunction C D F G' \\<phi>' \\<psi>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms adjoint_functors_def"], ["proof (prove)\nusing this:\n  adjoint_functors C D F G\n  adjoint_functors C D F G'\n  adjoint_functors ?C ?D ?F ?G =\n  (\\<exists>\\<phi> \\<psi>. meta_adjunction ?C ?D ?F ?G \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>' \\<psi>'.\n        meta_adjunction C D F G' \\<phi>' \\<psi>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  meta_adjunction C D F G' \\<phi>' \\<psi>'\n\ngoal (1 subgoal):\n 1. naturally_isomorphic C D G G'", "interpret Adj: meta_adjunction C D F G \\<phi> \\<psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction C D F G \\<phi> \\<psi>", "using \\<phi>\\<psi>"], ["proof (prove)\nusing this:\n  meta_adjunction C D F G \\<phi> \\<psi>\n\ngoal (1 subgoal):\n 1. meta_adjunction C D F G \\<phi> \\<psi>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic C D G G'", "interpret Adj: adjunction C D replete_setcat.comp Adj.\\<phi>C Adj.\\<phi>D\n                              F G \\<phi> \\<psi> Adj.\\<eta> Adj.\\<epsilon> Adj.\\<Phi> Adj.\\<Psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjunction C D replete_setcat.comp Adj.\\<phi>C Adj.\\<phi>D F G \\<phi>\n     \\<psi> Adj.\\<eta> Adj.\\<epsilon> Adj.\\<Phi> Adj.\\<Psi>", "using Adj.induces_adjunction"], ["proof (prove)\nusing this:\n  adjunction C D replete_setcat.comp Adj.\\<phi>C Adj.\\<phi>D F G \\<phi>\n   \\<psi> Adj.\\<eta> Adj.\\<epsilon> Adj.\\<Phi> Adj.\\<Psi>\n\ngoal (1 subgoal):\n 1. adjunction C D replete_setcat.comp Adj.\\<phi>C Adj.\\<phi>D F G \\<phi>\n     \\<psi> Adj.\\<eta> Adj.\\<epsilon> Adj.\\<Phi> Adj.\\<Psi>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic C D G G'", "interpret Adj': meta_adjunction C D F G' \\<phi>' \\<psi>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. meta_adjunction C D F G' \\<phi>' \\<psi>'", "using \\<phi>'\\<psi>'"], ["proof (prove)\nusing this:\n  meta_adjunction C D F G' \\<phi>' \\<psi>'\n\ngoal (1 subgoal):\n 1. meta_adjunction C D F G' \\<phi>' \\<psi>'", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic C D G G'", "interpret Adj': adjunction C D replete_setcat.comp Adj'.\\<phi>C Adj'.\\<phi>D\n                               F G' \\<phi>' \\<psi>' Adj'.\\<eta> Adj'.\\<epsilon> Adj'.\\<Phi> Adj'.\\<Psi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjunction C D replete_setcat.comp Adj'.\\<phi>C Adj'.\\<phi>D F G'\n     \\<phi>' \\<psi>' Adj'.\\<eta> Adj'.\\<epsilon> Adj'.\\<Phi> Adj'.\\<Psi>", "using Adj'.induces_adjunction"], ["proof (prove)\nusing this:\n  adjunction C D replete_setcat.comp Adj'.\\<phi>C Adj'.\\<phi>D F G' \\<phi>'\n   \\<psi>' Adj'.\\<eta> Adj'.\\<epsilon> Adj'.\\<Phi> Adj'.\\<Psi>\n\ngoal (1 subgoal):\n 1. adjunction C D replete_setcat.comp Adj'.\\<phi>C Adj'.\\<phi>D F G'\n     \\<phi>' \\<psi>' Adj'.\\<eta> Adj'.\\<epsilon> Adj'.\\<Phi> Adj'.\\<Psi>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic C D G G'", "write C (infixr \"\\<cdot>\\<^sub>C\" 55)"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic (\\<cdot>\\<^sub>C) D G G'", "write D (infixr \"\\<cdot>\\<^sub>D\" 55)"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G'", "write Adj.C.in_hom (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>C _\\<guillemotright>\")"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G'", "write Adj.D.in_hom (\"\\<guillemotleft>_ : _ \\<rightarrow>\\<^sub>D _\\<guillemotright>\")"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G'", "let ?\\<tau>o = \"\\<lambda>a. G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G a)\""], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G'", "interpret \\<tau>: transformation_by_components C D G G' ?\\<tau>o"], ["proof (prove)\ngoal (1 subgoal):\n 1. transformation_by_components (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G'\n     (\\<lambda>a. G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G a))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       Adj.C.ide a \\<Longrightarrow>\n       \\<guillemotleft>G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n                       Adj'.\\<eta>\n                        (G a) : G a \\<rightarrow>\\<^sub>D G'\n                     a\\<guillemotright>\n 2. \\<And>f.\n       Adj.C.arr f \\<Longrightarrow>\n       (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n        Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n       G f =\n       G' f \\<cdot>\\<^sub>D\n       G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n       Adj'.\\<eta> (G (Adj.C.dom f))", "show \"\\<And>a. Adj.C.ide a \\<Longrightarrow> \\<guillemotleft>G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G a) : G a \\<rightarrow>\\<^sub>D G' a\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       Adj.C.ide a \\<Longrightarrow>\n       \\<guillemotleft>G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n                       Adj'.\\<eta>\n                        (G a) : G a \\<rightarrow>\\<^sub>D G'\n                     a\\<guillemotright>", "by fastforce"], ["proof (state)\nthis:\n  Adj.C.ide ?a1 \\<Longrightarrow>\n  \\<guillemotleft>G' (Adj.\\<epsilon> ?a1) \\<cdot>\\<^sub>D\n                  Adj'.\\<eta>\n                   (G ?a1) : G ?a1 \\<rightarrow>\\<^sub>D G'\n                    ?a1\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       Adj.C.arr f \\<Longrightarrow>\n       (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n        Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n       G f =\n       G' f \\<cdot>\\<^sub>D\n       G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n       Adj'.\\<eta> (G (Adj.C.dom f))", "show \"\\<And>f. Adj.C.arr f \\<Longrightarrow>\n                   (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D G f =\n                   G' f \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D Adj'.\\<eta> (G (Adj.C.dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       Adj.C.arr f \\<Longrightarrow>\n       (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n        Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n       G f =\n       G' f \\<cdot>\\<^sub>D\n       G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n       Adj'.\\<eta> (G (Adj.C.dom f))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       Adj.C.arr f \\<Longrightarrow>\n       (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n        Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n       G f =\n       G' f \\<cdot>\\<^sub>D\n       G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n       Adj'.\\<eta> (G (Adj.C.dom f))", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       Adj.C.arr f \\<Longrightarrow>\n       (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n        Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n       G f =\n       G' f \\<cdot>\\<^sub>D\n       G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n       Adj'.\\<eta> (G (Adj.C.dom f))", "assume f: \"Adj.C.arr f\""], ["proof (state)\nthis:\n  Adj.C.arr f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       Adj.C.arr f \\<Longrightarrow>\n       (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n        Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n       G f =\n       G' f \\<cdot>\\<^sub>D\n       G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n       Adj'.\\<eta> (G (Adj.C.dom f))", "let ?x = \"Adj.C.dom f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       Adj.C.arr f \\<Longrightarrow>\n       (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n        Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n       G f =\n       G' f \\<cdot>\\<^sub>D\n       G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n       Adj'.\\<eta> (G (Adj.C.dom f))", "let ?x' = \"Adj.C.cod f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       Adj.C.arr f \\<Longrightarrow>\n       (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n        Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n       G f =\n       G' f \\<cdot>\\<^sub>D\n       G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n       Adj'.\\<eta> (G (Adj.C.dom f))", "have \"(G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D G f =\n              G' (Adj.\\<epsilon> (Adj.C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>D Adj'.\\<eta> (G (Adj.C.dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n     Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n    G f =\n    G' (Adj.\\<epsilon> (Adj.C.cod f) \\<cdot>\\<^sub>C\n        F (G f)) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G (Adj.C.dom f))", "using f Adj'.\\<eta>.naturality [of \"G f\"] Adj.D.comp_assoc"], ["proof (prove)\nusing this:\n  Adj.C.arr f\n  Adj.D.arr (G f) \\<Longrightarrow>\n  Adj'.\\<eta> (Adj.D.cod (G f)) \\<cdot>\\<^sub>D Adj.D.map (G f) =\n  Adj'.GF.map (G f) \\<cdot>\\<^sub>D Adj'.\\<eta> (Adj.D.dom (G f))\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n     Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n    G f =\n    G' (Adj.\\<epsilon> (Adj.C.cod f) \\<cdot>\\<^sub>C\n        F (G f)) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G (Adj.C.dom f))", "by simp"], ["proof (state)\nthis:\n  (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n   Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n  G f =\n  G' (Adj.\\<epsilon> (Adj.C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G (Adj.C.dom f))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       Adj.C.arr f \\<Longrightarrow>\n       (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n        Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n       G f =\n       G' f \\<cdot>\\<^sub>D\n       G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n       Adj'.\\<eta> (G (Adj.C.dom f))", "also"], ["proof (state)\nthis:\n  (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n   Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n  G f =\n  G' (Adj.\\<epsilon> (Adj.C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G (Adj.C.dom f))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       Adj.C.arr f \\<Longrightarrow>\n       (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n        Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n       G f =\n       G' f \\<cdot>\\<^sub>D\n       G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n       Adj'.\\<eta> (G (Adj.C.dom f))", "have \"... = G' (f \\<cdot>\\<^sub>C Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D Adj'.\\<eta> (G (Adj.C.dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> (Adj.C.cod f) \\<cdot>\\<^sub>C\n        F (G f)) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G (Adj.C.dom f)) =\n    G' (f \\<cdot>\\<^sub>C Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G (Adj.C.dom f))", "using f Adj.\\<epsilon>.naturality"], ["proof (prove)\nusing this:\n  Adj.C.arr f\n  Adj.C.arr ?f \\<Longrightarrow>\n  Adj.\\<epsilon> (Adj.C.cod ?f) \\<cdot>\\<^sub>C Adj.FG.map ?f =\n  Adj.C.map ?f \\<cdot>\\<^sub>C Adj.\\<epsilon> (Adj.C.dom ?f)\n\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> (Adj.C.cod f) \\<cdot>\\<^sub>C\n        F (G f)) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G (Adj.C.dom f)) =\n    G' (f \\<cdot>\\<^sub>C Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G (Adj.C.dom f))", "by simp"], ["proof (state)\nthis:\n  G' (Adj.\\<epsilon> (Adj.C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G (Adj.C.dom f)) =\n  G' (f \\<cdot>\\<^sub>C Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G (Adj.C.dom f))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       Adj.C.arr f \\<Longrightarrow>\n       (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n        Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n       G f =\n       G' f \\<cdot>\\<^sub>D\n       G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n       Adj'.\\<eta> (G (Adj.C.dom f))", "also"], ["proof (state)\nthis:\n  G' (Adj.\\<epsilon> (Adj.C.cod f) \\<cdot>\\<^sub>C F (G f)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G (Adj.C.dom f)) =\n  G' (f \\<cdot>\\<^sub>C Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G (Adj.C.dom f))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       Adj.C.arr f \\<Longrightarrow>\n       (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n        Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n       G f =\n       G' f \\<cdot>\\<^sub>D\n       G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n       Adj'.\\<eta> (G (Adj.C.dom f))", "have \"... = G' f \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D Adj'.\\<eta> (G (Adj.C.dom f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G' (f \\<cdot>\\<^sub>C Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G (Adj.C.dom f)) =\n    G' f \\<cdot>\\<^sub>D\n    G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G (Adj.C.dom f))", "using f Adj.D.comp_assoc"], ["proof (prove)\nusing this:\n  Adj.C.arr f\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. G' (f \\<cdot>\\<^sub>C Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G (Adj.C.dom f)) =\n    G' f \\<cdot>\\<^sub>D\n    G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G (Adj.C.dom f))", "by simp"], ["proof (state)\nthis:\n  G' (f \\<cdot>\\<^sub>C Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G (Adj.C.dom f)) =\n  G' f \\<cdot>\\<^sub>D\n  G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G (Adj.C.dom f))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       Adj.C.arr f \\<Longrightarrow>\n       (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n        Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n       G f =\n       G' f \\<cdot>\\<^sub>D\n       G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n       Adj'.\\<eta> (G (Adj.C.dom f))", "finally"], ["proof (chain)\npicking this:\n  (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n   Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n  G f =\n  G' f \\<cdot>\\<^sub>D\n  G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G (Adj.C.dom f))", "show \"(G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D G f =\n                      G' f \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D Adj'.\\<eta> (G (Adj.C.dom f))\""], ["proof (prove)\nusing this:\n  (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n   Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n  G f =\n  G' f \\<cdot>\\<^sub>D\n  G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G (Adj.C.dom f))\n\ngoal (1 subgoal):\n 1. (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n     Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n    G f =\n    G' f \\<cdot>\\<^sub>D\n    G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G (Adj.C.dom f))", "by auto"], ["proof (state)\nthis:\n  (G' (Adj.\\<epsilon> (Adj.C.cod f)) \\<cdot>\\<^sub>D\n   Adj'.\\<eta> (G (Adj.C.cod f))) \\<cdot>\\<^sub>D\n  G f =\n  G' f \\<cdot>\\<^sub>D\n  G' (Adj.\\<epsilon> (Adj.C.dom f)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G (Adj.C.dom f))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Adj.C.arr ?f1 \\<Longrightarrow>\n  (G' (Adj.\\<epsilon> (Adj.C.cod ?f1)) \\<cdot>\\<^sub>D\n   Adj'.\\<eta> (G (Adj.C.cod ?f1))) \\<cdot>\\<^sub>D\n  G ?f1 =\n  G' ?f1 \\<cdot>\\<^sub>D\n  G' (Adj.\\<epsilon> (Adj.C.dom ?f1)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G (Adj.C.dom ?f1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G'", "interpret natural_isomorphism C D G G' \\<tau>.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G' \\<tau>.map", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. Adj.C.ide a \\<Longrightarrow> Adj.D.iso (\\<tau>.map a)", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. Adj.C.ide a \\<Longrightarrow> Adj.D.iso (\\<tau>.map a)", "assume a: \"Adj.C.ide a\""], ["proof (state)\nthis:\n  Adj.C.ide a\n\ngoal (1 subgoal):\n 1. \\<And>a. Adj.C.ide a \\<Longrightarrow> Adj.D.iso (\\<tau>.map a)", "show \"Adj.D.iso (\\<tau>.map a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Adj.D.iso (\\<tau>.map a)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. Adj.D.inverse_arrows (\\<tau>.map a) ?g", "show \"Adj.D.inverse_arrows (\\<tau>.map a) (\\<phi> (G' a) (Adj'.\\<epsilon> a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Adj.D.inverse_arrows (\\<tau>.map a) (\\<phi> (G' a) (Adj'.\\<epsilon> a))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Adj.D.ide\n     (\\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a)\n 2. Adj.D.ide\n     (\\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a))", "text\\<open>\n            The proof that the two composites are identities is a modest diagram chase.\n            This is a good example of the inference rules for the \\<open>category\\<close>,\n            \\<open>functor\\<close>, and \\<open>natural_transformation\\<close> locales in action.\n            Isabelle is able to use the single hypothesis that \\<open>a\\<close> is an identity to\n            implicitly fill in all the details that the various quantities are in fact arrows\n            and that the indicated composites are all well-defined, as well as to apply\n            associativity of composition.  In most cases, this is done by auto or simp without\n            even mentioning any of the rules that are used.\n$$\\xymatrix{\n        {G' a} \\ar[dd]_{\\eta'(G'a)} \\ar[rr]^{\\tau' a} \\ar[dr]_{\\eta(G'a)}\n           && {G a} \\ar[rr]^{\\tau a} \\ar[dr]_{\\eta'(Ga)} && {G' a}                     \\\\\n        & {GFG'a} \\rrtwocell\\omit{\\omit(2)} \\ar[ur]_{G(\\epsilon' a)} \\ar[dr]_{\\eta'(GFG'a)}\n           && {G'FGa} \\drtwocell\\omit{\\omit(3)} \\ar[ur]_{G'(\\epsilon a)} &            \\\\\n        {G'FG'a} \\urtwocell\\omit{\\omit(1)} \\ar[rr]_{G'F\\eta(G'a)} \\ar@/_8ex/[rrrr]_{G'FG'a}\n           && {G'FGFG'a} \\dtwocell\\omit{\\omit(4)} \\ar[ru]_{G'FG(\\epsilon' a)} \\ar[rr]_{G'(\\epsilon(FG'a))}\n           && {G'FG'a} \\ar[uu]_{G'(\\epsilon' a)}                                       \\\\\n           &&&&\n}$$\n\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. Adj.D.ide\n     (\\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a)\n 2. Adj.D.ide\n     (\\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a))", "show \"Adj.D.ide (\\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Adj.D.ide\n     (\\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Adj.D.ide\n     (\\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a))", "have \"\\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a", "have \"\\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) =\n                    G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D (Adj'.\\<eta> (G a) \\<cdot>\\<^sub>D G (Adj'.\\<epsilon> a)) \\<cdot>\\<^sub>D Adj.\\<eta> (G' a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) =\n    G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (Adj'.\\<eta> (G a) \\<cdot>\\<^sub>D\n     G (Adj'.\\<epsilon> a)) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G' a)", "using a \\<tau>.map_simp_ide Adj.\\<phi>_in_terms_of_\\<eta> Adj'.\\<phi>_in_terms_of_\\<eta>\n                      Adj'.\\<epsilon>.preserves_hom [of a a a] Adj.C.ide_in_hom Adj.D.comp_assoc\n                      Adj.\\<epsilon>_def Adj.\\<eta>_def"], ["proof (prove)\nusing this:\n  Adj.C.ide a\n  Adj.C.ide ?a \\<Longrightarrow>\n  \\<tau>.map ?a = G' (Adj.\\<epsilon> ?a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G ?a)\n  \\<lbrakk>Adj.D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y ?f = G ?f \\<cdot>\\<^sub>D Adj.\\<eta> ?y\n  \\<lbrakk>Adj.D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi>' ?y ?f = G' ?f \\<cdot>\\<^sub>D Adj'.\\<eta> ?y\n  \\<guillemotleft>a : a \\<rightarrow>\\<^sub>C a\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>Adj'.\\<epsilon>\n                   a : Adj'.FG.map\n                        a \\<rightarrow>\\<^sub>C Adj.C.map a\\<guillemotright>\n  Adj.C.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>C ?a\\<guillemotright>\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n  Adj.\\<epsilon> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>C)\n   Adj.FG.map Adj.\\<epsilon>o\n  Adj.\\<eta> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D)\n   Adj.D.map Adj.\\<eta>o\n\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) =\n    G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (Adj'.\\<eta> (G a) \\<cdot>\\<^sub>D\n     G (Adj'.\\<epsilon> a)) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G' a)", "by simp"], ["proof (state)\nthis:\n  \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) =\n  G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (Adj'.\\<eta> (G a) \\<cdot>\\<^sub>D G (Adj'.\\<epsilon> a)) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (G' a)\n\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a", "also"], ["proof (state)\nthis:\n  \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) =\n  G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (Adj'.\\<eta> (G a) \\<cdot>\\<^sub>D G (Adj'.\\<epsilon> a)) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (G' a)\n\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a", "have \"... = G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D (G' (F (G (Adj'.\\<epsilon> a))) \\<cdot>\\<^sub>D Adj'.\\<eta> (G (F (G' a)))) \\<cdot>\\<^sub>D\n                               Adj.\\<eta> (G' a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (Adj'.\\<eta> (G a) \\<cdot>\\<^sub>D\n     G (Adj'.\\<epsilon> a)) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G' a) =\n    G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G' (F (G (Adj'.\\<epsilon> a))) \\<cdot>\\<^sub>D\n     Adj'.\\<eta> (G (F (G' a)))) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G' a)", "using a Adj'.\\<eta>.naturality [of \"G (Adj'.\\<epsilon> a)\"]"], ["proof (prove)\nusing this:\n  Adj.C.ide a\n  Adj.D.arr (G (Adj'.\\<epsilon> a)) \\<Longrightarrow>\n  Adj'.\\<eta> (Adj.D.cod (G (Adj'.\\<epsilon> a))) \\<cdot>\\<^sub>D\n  Adj.D.map (G (Adj'.\\<epsilon> a)) =\n  Adj'.GF.map (G (Adj'.\\<epsilon> a)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (Adj.D.dom (G (Adj'.\\<epsilon> a)))\n\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (Adj'.\\<eta> (G a) \\<cdot>\\<^sub>D\n     G (Adj'.\\<epsilon> a)) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G' a) =\n    G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G' (F (G (Adj'.\\<epsilon> a))) \\<cdot>\\<^sub>D\n     Adj'.\\<eta> (G (F (G' a)))) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G' a)", "by auto"], ["proof (state)\nthis:\n  G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (Adj'.\\<eta> (G a) \\<cdot>\\<^sub>D G (Adj'.\\<epsilon> a)) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (G' a) =\n  G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G' (F (G (Adj'.\\<epsilon> a))) \\<cdot>\\<^sub>D\n   Adj'.\\<eta> (G (F (G' a)))) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (G' a)\n\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a", "also"], ["proof (state)\nthis:\n  G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (Adj'.\\<eta> (G a) \\<cdot>\\<^sub>D G (Adj'.\\<epsilon> a)) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (G' a) =\n  G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G' (F (G (Adj'.\\<epsilon> a))) \\<cdot>\\<^sub>D\n   Adj'.\\<eta> (G (F (G' a)))) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (G' a)\n\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a", "have \"... = (G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G' (F (G (Adj'.\\<epsilon> a)))) \\<cdot>\\<^sub>D G' (F (Adj.\\<eta> (G' a))) \\<cdot>\\<^sub>D\n                               Adj'.\\<eta> (G' a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G' (F (G (Adj'.\\<epsilon> a))) \\<cdot>\\<^sub>D\n     Adj'.\\<eta> (G (F (G' a)))) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G' a) =\n    (G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n     G' (F (G (Adj'.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n    G' (F (Adj.\\<eta> (G' a))) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a)", "using a Adj'.\\<eta>.naturality [of \"Adj.\\<eta> (G' a)\"] Adj.D.comp_assoc"], ["proof (prove)\nusing this:\n  Adj.C.ide a\n  Adj.D.arr (Adj.\\<eta> (G' a)) \\<Longrightarrow>\n  Adj'.\\<eta> (Adj.D.cod (Adj.\\<eta> (G' a))) \\<cdot>\\<^sub>D\n  Adj.D.map (Adj.\\<eta> (G' a)) =\n  Adj'.GF.map (Adj.\\<eta> (G' a)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (Adj.D.dom (Adj.\\<eta> (G' a)))\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G' (F (G (Adj'.\\<epsilon> a))) \\<cdot>\\<^sub>D\n     Adj'.\\<eta> (G (F (G' a)))) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G' a) =\n    (G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n     G' (F (G (Adj'.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n    G' (F (Adj.\\<eta> (G' a))) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a)", "by auto"], ["proof (state)\nthis:\n  G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G' (F (G (Adj'.\\<epsilon> a))) \\<cdot>\\<^sub>D\n   Adj'.\\<eta> (G (F (G' a)))) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (G' a) =\n  (G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n   G' (F (G (Adj'.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n  G' (F (Adj.\\<eta> (G' a))) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a)\n\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a", "also"], ["proof (state)\nthis:\n  G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G' (F (G (Adj'.\\<epsilon> a))) \\<cdot>\\<^sub>D\n   Adj'.\\<eta> (G (F (G' a)))) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (G' a) =\n  (G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n   G' (F (G (Adj'.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n  G' (F (Adj.\\<eta> (G' a))) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a)\n\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a", "have\n                  \"... = G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n                         Adj'.\\<eta> (G' a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n     G' (F (G (Adj'.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n    G' (F (Adj.\\<eta> (G' a))) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a) =\n    G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n     G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G' a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n     G' (F (G (Adj'.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n    G' (F (Adj.\\<eta> (G' a))) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a) =\n    G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n     G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G' a)", "have\n                   \"G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G' (F (G (Adj'.\\<epsilon> a))) = G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> (F (G' a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G' (F (G (Adj'.\\<epsilon> a))) =\n    G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> (F (G' a)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G' (F (G (Adj'.\\<epsilon> a))) =\n    G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> (F (G' a)))", "have \"G' (Adj.\\<epsilon> a \\<cdot>\\<^sub>C F (G (Adj'.\\<epsilon> a))) = G' (Adj'.\\<epsilon> a \\<cdot>\\<^sub>C Adj.\\<epsilon> (F (G' a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> a \\<cdot>\\<^sub>C F (G (Adj'.\\<epsilon> a))) =\n    G' (Adj'.\\<epsilon> a \\<cdot>\\<^sub>C Adj.\\<epsilon> (F (G' a)))", "using a Adj.\\<epsilon>.naturality [of \"Adj'.\\<epsilon> a\"]"], ["proof (prove)\nusing this:\n  Adj.C.ide a\n  Adj.C.arr (Adj'.\\<epsilon> a) \\<Longrightarrow>\n  Adj.\\<epsilon> (Adj.C.cod (Adj'.\\<epsilon> a)) \\<cdot>\\<^sub>C\n  Adj.FG.map (Adj'.\\<epsilon> a) =\n  Adj.C.map (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>C\n  Adj.\\<epsilon> (Adj.C.dom (Adj'.\\<epsilon> a))\n\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> a \\<cdot>\\<^sub>C F (G (Adj'.\\<epsilon> a))) =\n    G' (Adj'.\\<epsilon> a \\<cdot>\\<^sub>C Adj.\\<epsilon> (F (G' a)))", "by auto"], ["proof (state)\nthis:\n  G' (Adj.\\<epsilon> a \\<cdot>\\<^sub>C F (G (Adj'.\\<epsilon> a))) =\n  G' (Adj'.\\<epsilon> a \\<cdot>\\<^sub>C Adj.\\<epsilon> (F (G' a)))\n\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G' (F (G (Adj'.\\<epsilon> a))) =\n    G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> (F (G' a)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  G' (Adj.\\<epsilon> a \\<cdot>\\<^sub>C F (G (Adj'.\\<epsilon> a))) =\n  G' (Adj'.\\<epsilon> a \\<cdot>\\<^sub>C Adj.\\<epsilon> (F (G' a)))\n\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G' (F (G (Adj'.\\<epsilon> a))) =\n    G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> (F (G' a)))", "using a"], ["proof (prove)\nusing this:\n  G' (Adj.\\<epsilon> a \\<cdot>\\<^sub>C F (G (Adj'.\\<epsilon> a))) =\n  G' (Adj'.\\<epsilon> a \\<cdot>\\<^sub>C Adj.\\<epsilon> (F (G' a)))\n  Adj.C.ide a\n\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G' (F (G (Adj'.\\<epsilon> a))) =\n    G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> (F (G' a)))", "by force"], ["proof (state)\nthis:\n  G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G' (F (G (Adj'.\\<epsilon> a))) =\n  G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> (F (G' a)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G' (F (G (Adj'.\\<epsilon> a))) =\n  G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> (F (G' a)))\n\ngoal (1 subgoal):\n 1. (G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n     G' (F (G (Adj'.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n    G' (F (Adj.\\<eta> (G' a))) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a) =\n    G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n     G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G' a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G' (F (G (Adj'.\\<epsilon> a))) =\n  G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> (F (G' a)))\n\ngoal (1 subgoal):\n 1. (G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n     G' (F (G (Adj'.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n    G' (F (Adj.\\<eta> (G' a))) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a) =\n    G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n     G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G' a)", "using Adj.D.comp_assoc"], ["proof (prove)\nusing this:\n  G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G' (F (G (Adj'.\\<epsilon> a))) =\n  G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> (F (G' a)))\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. (G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n     G' (F (G (Adj'.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n    G' (F (Adj.\\<eta> (G' a))) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a) =\n    G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n     G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G' a)", "by auto"], ["proof (state)\nthis:\n  (G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n   G' (F (G (Adj'.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n  G' (F (Adj.\\<eta> (G' a))) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a) =\n  G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n   G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G' a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n   G' (F (G (Adj'.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n  G' (F (Adj.\\<eta> (G' a))) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a) =\n  G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n   G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G' a)\n\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a", "also"], ["proof (state)\nthis:\n  (G' (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n   G' (F (G (Adj'.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n  G' (F (Adj.\\<eta> (G' a))) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a) =\n  G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n   G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G' a)\n\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a", "have \"... = G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n     G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G' a) =\n    G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n     G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G' a) =\n    G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a)", "have \"G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D G' (F (Adj.\\<eta> (G' a))) = G' (F (G' a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n    G' (F (Adj.\\<eta> (G' a))) =\n    G' (F (G' a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n    G' (F (Adj.\\<eta> (G' a))) =\n    G' (F (G' a))", "have\n                      \"G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D G' (F (Adj.\\<eta> (G' a))) = G' (Adj.\\<epsilon>FoF\\<eta>.map (G' a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n    G' (F (Adj.\\<eta> (G' a))) =\n    G' (Adj.\\<epsilon>FoF\\<eta>.map (G' a))", "using a Adj.\\<epsilon>FoF\\<eta>.map_simp_1"], ["proof (prove)\nusing this:\n  Adj.C.ide a\n  Adj.D.arr ?f \\<Longrightarrow>\n  Adj.\\<epsilon>FoF\\<eta>.map ?f =\n  (Adj.\\<epsilon> \\<circ> F) (Adj.D.cod ?f) \\<cdot>\\<^sub>C\n  (F \\<circ> Adj.\\<eta>) ?f\n\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n    G' (F (Adj.\\<eta> (G' a))) =\n    G' (Adj.\\<epsilon>FoF\\<eta>.map (G' a))", "by auto"], ["proof (state)\nthis:\n  G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n  G' (F (Adj.\\<eta> (G' a))) =\n  G' (Adj.\\<epsilon>FoF\\<eta>.map (G' a))\n\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n    G' (F (Adj.\\<eta> (G' a))) =\n    G' (F (G' a))", "moreover"], ["proof (state)\nthis:\n  G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n  G' (F (Adj.\\<eta> (G' a))) =\n  G' (Adj.\\<epsilon>FoF\\<eta>.map (G' a))\n\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n    G' (F (Adj.\\<eta> (G' a))) =\n    G' (F (G' a))", "have \"Adj.\\<epsilon>FoF\\<eta>.map (G' a) = F (G' a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Adj.\\<epsilon>FoF\\<eta>.map (G' a) = F (G' a)", "using a"], ["proof (prove)\nusing this:\n  Adj.C.ide a\n\ngoal (1 subgoal):\n 1. Adj.\\<epsilon>FoF\\<eta>.map (G' a) = F (G' a)", "by (simp add: Adj.\\<eta>\\<epsilon>.triangle_F)"], ["proof (state)\nthis:\n  Adj.\\<epsilon>FoF\\<eta>.map (G' a) = F (G' a)\n\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n    G' (F (Adj.\\<eta> (G' a))) =\n    G' (F (G' a))", "ultimately"], ["proof (chain)\npicking this:\n  G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n  G' (F (Adj.\\<eta> (G' a))) =\n  G' (Adj.\\<epsilon>FoF\\<eta>.map (G' a))\n  Adj.\\<epsilon>FoF\\<eta>.map (G' a) = F (G' a)", "show ?thesis"], ["proof (prove)\nusing this:\n  G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n  G' (F (Adj.\\<eta> (G' a))) =\n  G' (Adj.\\<epsilon>FoF\\<eta>.map (G' a))\n  Adj.\\<epsilon>FoF\\<eta>.map (G' a) = F (G' a)\n\ngoal (1 subgoal):\n 1. G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n    G' (F (Adj.\\<eta> (G' a))) =\n    G' (F (G' a))", "by auto"], ["proof (state)\nthis:\n  G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n  G' (F (Adj.\\<eta> (G' a))) =\n  G' (F (G' a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n  G' (F (Adj.\\<eta> (G' a))) =\n  G' (F (G' a))\n\ngoal (1 subgoal):\n 1. G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n     G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G' a) =\n    G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n  G' (F (Adj.\\<eta> (G' a))) =\n  G' (F (G' a))\n\ngoal (1 subgoal):\n 1. G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n     G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G' a) =\n    G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a)", "using a Adj.D.comp_cod_arr [of \"Adj'.\\<eta> (G' a)\"]"], ["proof (prove)\nusing this:\n  G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n  G' (F (Adj.\\<eta> (G' a))) =\n  G' (F (G' a))\n  Adj.C.ide a\n  \\<lbrakk>Adj.D.arr (Adj'.\\<eta> (G' a));\n   Adj.D.cod (Adj'.\\<eta> (G' a)) = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a) =\n                    Adj'.\\<eta> (G' a)\n\ngoal (1 subgoal):\n 1. G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n     G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G' a) =\n    G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a)", "by auto"], ["proof (state)\nthis:\n  G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n   G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G' a) =\n  G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n   G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G' a) =\n  G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a)\n\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a", "also"], ["proof (state)\nthis:\n  G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G' (Adj.\\<epsilon> (F (G' a))) \\<cdot>\\<^sub>D\n   G' (F (Adj.\\<eta> (G' a)))) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G' a) =\n  G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a)\n\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a", "have \"... = G' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a) = G' a", "using a Adj'.\\<eta>\\<epsilon>.triangle_G Adj'.G\\<epsilon>o\\<eta>G.map_simp_1 [of a]"], ["proof (prove)\nusing this:\n  Adj.C.ide a\n  Adj'.G\\<epsilon>o\\<eta>G.map = G'\n  Adj.C.arr a \\<Longrightarrow>\n  Adj'.G\\<epsilon>o\\<eta>G.map a =\n  (G' \\<circ> Adj'.\\<epsilon>) (Adj.C.cod a) \\<cdot>\\<^sub>D\n  (Adj'.\\<eta> \\<circ> G') a\n\ngoal (1 subgoal):\n 1. G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a) = G' a", "by auto"], ["proof (state)\nthis:\n  G' (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G' a) = G' a\n\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a", "finally"], ["proof (chain)\npicking this:\n  \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a\n\ngoal (1 subgoal):\n 1. \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a", "by auto"], ["proof (state)\nthis:\n  \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a\n\ngoal (1 subgoal):\n 1. Adj.D.ide\n     (\\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a\n\ngoal (1 subgoal):\n 1. Adj.D.ide\n     (\\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a))", "using a"], ["proof (prove)\nusing this:\n  \\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a) = G' a\n  Adj.C.ide a\n\ngoal (1 subgoal):\n 1. Adj.D.ide\n     (\\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a))", "by simp"], ["proof (state)\nthis:\n  Adj.D.ide (\\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Adj.D.ide (\\<tau>.map a \\<cdot>\\<^sub>D \\<phi> (G' a) (Adj'.\\<epsilon> a))\n\ngoal (1 subgoal):\n 1. Adj.D.ide\n     (\\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a)", "show \"Adj.D.ide (\\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Adj.D.ide\n     (\\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Adj.D.ide\n     (\\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a)", "have \"\\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a", "have \"\\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a =\n                    G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D (Adj.\\<eta> (G' a) \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> a)) \\<cdot>\\<^sub>D Adj'.\\<eta> (G a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a =\n    G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (Adj.\\<eta> (G' a) \\<cdot>\\<^sub>D\n     G' (Adj.\\<epsilon> a)) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G a)", "using a \\<tau>.map_simp_ide Adj.\\<phi>_in_terms_of_\\<eta> Adj'.\\<epsilon>.preserves_hom [of a a a]\n                      Adj.C.ide_in_hom Adj.D.comp_assoc Adj.\\<eta>_def"], ["proof (prove)\nusing this:\n  Adj.C.ide a\n  Adj.C.ide ?a \\<Longrightarrow>\n  \\<tau>.map ?a = G' (Adj.\\<epsilon> ?a) \\<cdot>\\<^sub>D Adj'.\\<eta> (G ?a)\n  \\<lbrakk>Adj.D.ide ?y;\n   \\<guillemotleft>?f : F ?y \\<rightarrow>\\<^sub>C ?x\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<phi> ?y ?f = G ?f \\<cdot>\\<^sub>D Adj.\\<eta> ?y\n  \\<guillemotleft>a : a \\<rightarrow>\\<^sub>C a\\<guillemotright> \\<Longrightarrow>\n  \\<guillemotleft>Adj'.\\<epsilon>\n                   a : Adj'.FG.map\n                        a \\<rightarrow>\\<^sub>C Adj.C.map a\\<guillemotright>\n  Adj.C.ide ?a =\n  \\<guillemotleft>?a : ?a \\<rightarrow>\\<^sub>C ?a\\<guillemotright>\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n  Adj.\\<eta> \\<equiv>\n  transformation_by_components.map (\\<cdot>\\<^sub>D) (\\<cdot>\\<^sub>D)\n   Adj.D.map Adj.\\<eta>o\n\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a =\n    G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (Adj.\\<eta> (G' a) \\<cdot>\\<^sub>D\n     G' (Adj.\\<epsilon> a)) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G a)", "by auto"], ["proof (state)\nthis:\n  \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a =\n  G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (Adj.\\<eta> (G' a) \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> a)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G a)\n\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a", "also"], ["proof (state)\nthis:\n  \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a =\n  G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (Adj.\\<eta> (G' a) \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> a)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G a)\n\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a", "have\n                \"... = G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D (G (F (G' (Adj.\\<epsilon> a))) \\<cdot>\\<^sub>D Adj.\\<eta> (G' (F (G a)))) \\<cdot>\\<^sub>D\n                       Adj'.\\<eta> (G a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (Adj.\\<eta> (G' a) \\<cdot>\\<^sub>D\n     G' (Adj.\\<epsilon> a)) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G a) =\n    G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G (F (G' (Adj.\\<epsilon> a))) \\<cdot>\\<^sub>D\n     Adj.\\<eta> (G' (F (G a)))) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G a)", "using a Adj.\\<eta>.naturality [of \"G' (Adj.\\<epsilon> a)\"]"], ["proof (prove)\nusing this:\n  Adj.C.ide a\n  Adj.D.arr (G' (Adj.\\<epsilon> a)) \\<Longrightarrow>\n  Adj.\\<eta> (Adj.D.cod (G' (Adj.\\<epsilon> a))) \\<cdot>\\<^sub>D\n  Adj.D.map (G' (Adj.\\<epsilon> a)) =\n  Adj.GF.map (G' (Adj.\\<epsilon> a)) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (Adj.D.dom (G' (Adj.\\<epsilon> a)))\n\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (Adj.\\<eta> (G' a) \\<cdot>\\<^sub>D\n     G' (Adj.\\<epsilon> a)) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G a) =\n    G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G (F (G' (Adj.\\<epsilon> a))) \\<cdot>\\<^sub>D\n     Adj.\\<eta> (G' (F (G a)))) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G a)", "by auto"], ["proof (state)\nthis:\n  G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (Adj.\\<eta> (G' a) \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> a)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G a) =\n  G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G (F (G' (Adj.\\<epsilon> a))) \\<cdot>\\<^sub>D\n   Adj.\\<eta> (G' (F (G a)))) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G a)\n\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a", "also"], ["proof (state)\nthis:\n  G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (Adj.\\<eta> (G' a) \\<cdot>\\<^sub>D G' (Adj.\\<epsilon> a)) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G a) =\n  G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G (F (G' (Adj.\\<epsilon> a))) \\<cdot>\\<^sub>D\n   Adj.\\<eta> (G' (F (G a)))) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G a)\n\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a", "have\n                \"... = (G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G (F (G' (Adj.\\<epsilon> a)))) \\<cdot>\\<^sub>D G (F (Adj'.\\<eta> (G a))) \\<cdot>\\<^sub>D\n                       Adj.\\<eta> (G a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G (F (G' (Adj.\\<epsilon> a))) \\<cdot>\\<^sub>D\n     Adj.\\<eta> (G' (F (G a)))) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G a) =\n    (G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n     G (F (G' (Adj.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n    G (F (Adj'.\\<eta> (G a))) \\<cdot>\\<^sub>D Adj.\\<eta> (G a)", "using a Adj.\\<eta>.naturality [of \"Adj'.\\<eta> (G a)\"] Adj.D.comp_assoc"], ["proof (prove)\nusing this:\n  Adj.C.ide a\n  Adj.D.arr (Adj'.\\<eta> (G a)) \\<Longrightarrow>\n  Adj.\\<eta> (Adj.D.cod (Adj'.\\<eta> (G a))) \\<cdot>\\<^sub>D\n  Adj.D.map (Adj'.\\<eta> (G a)) =\n  Adj.GF.map (Adj'.\\<eta> (G a)) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (Adj.D.dom (Adj'.\\<eta> (G a)))\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G (F (G' (Adj.\\<epsilon> a))) \\<cdot>\\<^sub>D\n     Adj.\\<eta> (G' (F (G a)))) \\<cdot>\\<^sub>D\n    Adj'.\\<eta> (G a) =\n    (G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n     G (F (G' (Adj.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n    G (F (Adj'.\\<eta> (G a))) \\<cdot>\\<^sub>D Adj.\\<eta> (G a)", "by auto"], ["proof (state)\nthis:\n  G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G (F (G' (Adj.\\<epsilon> a))) \\<cdot>\\<^sub>D\n   Adj.\\<eta> (G' (F (G a)))) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G a) =\n  (G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n   G (F (G' (Adj.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n  G (F (Adj'.\\<eta> (G a))) \\<cdot>\\<^sub>D Adj.\\<eta> (G a)\n\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a", "also"], ["proof (state)\nthis:\n  G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G (F (G' (Adj.\\<epsilon> a))) \\<cdot>\\<^sub>D\n   Adj.\\<eta> (G' (F (G a)))) \\<cdot>\\<^sub>D\n  Adj'.\\<eta> (G a) =\n  (G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n   G (F (G' (Adj.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n  G (F (Adj'.\\<eta> (G a))) \\<cdot>\\<^sub>D Adj.\\<eta> (G a)\n\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a", "have\n                \"... = G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n                       Adj.\\<eta> (G a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n     G (F (G' (Adj.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n    G (F (Adj'.\\<eta> (G a))) \\<cdot>\\<^sub>D Adj.\\<eta> (G a) =\n    G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n     G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n     G (F (G' (Adj.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n    G (F (Adj'.\\<eta> (G a))) \\<cdot>\\<^sub>D Adj.\\<eta> (G a) =\n    G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n     G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G a)", "have \"G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G (F (G' (Adj.\\<epsilon> a))) = G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G (Adj'.\\<epsilon> (F (G a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G (F (G' (Adj.\\<epsilon> a))) =\n    G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G (Adj'.\\<epsilon> (F (G a)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G (F (G' (Adj.\\<epsilon> a))) =\n    G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G (Adj'.\\<epsilon> (F (G a)))", "have \"G (Adj'.\\<epsilon> a \\<cdot>\\<^sub>C F (G' (Adj.\\<epsilon> a))) = G (Adj.\\<epsilon> a \\<cdot>\\<^sub>C Adj'.\\<epsilon> (F (G a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> a \\<cdot>\\<^sub>C F (G' (Adj.\\<epsilon> a))) =\n    G (Adj.\\<epsilon> a \\<cdot>\\<^sub>C Adj'.\\<epsilon> (F (G a)))", "using a Adj'.\\<epsilon>.naturality [of \"Adj.\\<epsilon> a\"]"], ["proof (prove)\nusing this:\n  Adj.C.ide a\n  Adj.C.arr (Adj.\\<epsilon> a) \\<Longrightarrow>\n  Adj'.\\<epsilon> (Adj.C.cod (Adj.\\<epsilon> a)) \\<cdot>\\<^sub>C\n  Adj'.FG.map (Adj.\\<epsilon> a) =\n  Adj.C.map (Adj.\\<epsilon> a) \\<cdot>\\<^sub>C\n  Adj'.\\<epsilon> (Adj.C.dom (Adj.\\<epsilon> a))\n\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> a \\<cdot>\\<^sub>C F (G' (Adj.\\<epsilon> a))) =\n    G (Adj.\\<epsilon> a \\<cdot>\\<^sub>C Adj'.\\<epsilon> (F (G a)))", "by auto"], ["proof (state)\nthis:\n  G (Adj'.\\<epsilon> a \\<cdot>\\<^sub>C F (G' (Adj.\\<epsilon> a))) =\n  G (Adj.\\<epsilon> a \\<cdot>\\<^sub>C Adj'.\\<epsilon> (F (G a)))\n\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G (F (G' (Adj.\\<epsilon> a))) =\n    G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G (Adj'.\\<epsilon> (F (G a)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  G (Adj'.\\<epsilon> a \\<cdot>\\<^sub>C F (G' (Adj.\\<epsilon> a))) =\n  G (Adj.\\<epsilon> a \\<cdot>\\<^sub>C Adj'.\\<epsilon> (F (G a)))\n\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G (F (G' (Adj.\\<epsilon> a))) =\n    G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G (Adj'.\\<epsilon> (F (G a)))", "using a"], ["proof (prove)\nusing this:\n  G (Adj'.\\<epsilon> a \\<cdot>\\<^sub>C F (G' (Adj.\\<epsilon> a))) =\n  G (Adj.\\<epsilon> a \\<cdot>\\<^sub>C Adj'.\\<epsilon> (F (G a)))\n  Adj.C.ide a\n\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G (F (G' (Adj.\\<epsilon> a))) =\n    G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G (Adj'.\\<epsilon> (F (G a)))", "by force"], ["proof (state)\nthis:\n  G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G (F (G' (Adj.\\<epsilon> a))) =\n  G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G (Adj'.\\<epsilon> (F (G a)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G (F (G' (Adj.\\<epsilon> a))) =\n  G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G (Adj'.\\<epsilon> (F (G a)))\n\ngoal (1 subgoal):\n 1. (G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n     G (F (G' (Adj.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n    G (F (Adj'.\\<eta> (G a))) \\<cdot>\\<^sub>D Adj.\\<eta> (G a) =\n    G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n     G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G (F (G' (Adj.\\<epsilon> a))) =\n  G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G (Adj'.\\<epsilon> (F (G a)))\n\ngoal (1 subgoal):\n 1. (G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n     G (F (G' (Adj.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n    G (F (Adj'.\\<eta> (G a))) \\<cdot>\\<^sub>D Adj.\\<eta> (G a) =\n    G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n     G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G a)", "using Adj.D.comp_assoc"], ["proof (prove)\nusing this:\n  G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D G (F (G' (Adj.\\<epsilon> a))) =\n  G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D G (Adj'.\\<epsilon> (F (G a)))\n  (?h \\<cdot>\\<^sub>D ?g) \\<cdot>\\<^sub>D ?f =\n  ?h \\<cdot>\\<^sub>D ?g \\<cdot>\\<^sub>D ?f\n\ngoal (1 subgoal):\n 1. (G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n     G (F (G' (Adj.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n    G (F (Adj'.\\<eta> (G a))) \\<cdot>\\<^sub>D Adj.\\<eta> (G a) =\n    G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n     G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G a)", "by auto"], ["proof (state)\nthis:\n  (G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n   G (F (G' (Adj.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n  G (F (Adj'.\\<eta> (G a))) \\<cdot>\\<^sub>D Adj.\\<eta> (G a) =\n  G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n   G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (G a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n   G (F (G' (Adj.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n  G (F (Adj'.\\<eta> (G a))) \\<cdot>\\<^sub>D Adj.\\<eta> (G a) =\n  G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n   G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (G a)\n\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a", "also"], ["proof (state)\nthis:\n  (G (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D\n   G (F (G' (Adj.\\<epsilon> a)))) \\<cdot>\\<^sub>D\n  G (F (Adj'.\\<eta> (G a))) \\<cdot>\\<^sub>D Adj.\\<eta> (G a) =\n  G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n   G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (G a)\n\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a", "have \"... = G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D Adj.\\<eta> (G a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n     G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G a) =\n    G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D Adj.\\<eta> (G a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n     G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G a) =\n    G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D Adj.\\<eta> (G a)", "have \"G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D G (F (Adj'.\\<eta> (G a))) = G (F (G a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n    G (F (Adj'.\\<eta> (G a))) =\n    G (F (G a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n    G (F (Adj'.\\<eta> (G a))) =\n    G (F (G a))", "have\n                    \"G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D G (F (Adj'.\\<eta> (G a))) = G (Adj'.\\<epsilon>FoF\\<eta>.map (G a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n    G (F (Adj'.\\<eta> (G a))) =\n    G (Adj'.\\<epsilon>FoF\\<eta>.map (G a))", "using a Adj'.\\<epsilon>FoF\\<eta>.map_simp_1 [of \"G a\"]"], ["proof (prove)\nusing this:\n  Adj.C.ide a\n  Adj.D.arr (G a) \\<Longrightarrow>\n  Adj'.\\<epsilon>FoF\\<eta>.map (G a) =\n  (Adj'.\\<epsilon> \\<circ> F) (Adj.D.cod (G a)) \\<cdot>\\<^sub>C\n  (F \\<circ> Adj'.\\<eta>) (G a)\n\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n    G (F (Adj'.\\<eta> (G a))) =\n    G (Adj'.\\<epsilon>FoF\\<eta>.map (G a))", "by auto"], ["proof (state)\nthis:\n  G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D G (F (Adj'.\\<eta> (G a))) =\n  G (Adj'.\\<epsilon>FoF\\<eta>.map (G a))\n\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n    G (F (Adj'.\\<eta> (G a))) =\n    G (F (G a))", "moreover"], ["proof (state)\nthis:\n  G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D G (F (Adj'.\\<eta> (G a))) =\n  G (Adj'.\\<epsilon>FoF\\<eta>.map (G a))\n\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n    G (F (Adj'.\\<eta> (G a))) =\n    G (F (G a))", "have \"Adj'.\\<epsilon>FoF\\<eta>.map (G a) = F (G a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Adj'.\\<epsilon>FoF\\<eta>.map (G a) = F (G a)", "using a"], ["proof (prove)\nusing this:\n  Adj.C.ide a\n\ngoal (1 subgoal):\n 1. Adj'.\\<epsilon>FoF\\<eta>.map (G a) = F (G a)", "by (simp add: Adj'.\\<eta>\\<epsilon>.triangle_F)"], ["proof (state)\nthis:\n  Adj'.\\<epsilon>FoF\\<eta>.map (G a) = F (G a)\n\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n    G (F (Adj'.\\<eta> (G a))) =\n    G (F (G a))", "ultimately"], ["proof (chain)\npicking this:\n  G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D G (F (Adj'.\\<eta> (G a))) =\n  G (Adj'.\\<epsilon>FoF\\<eta>.map (G a))\n  Adj'.\\<epsilon>FoF\\<eta>.map (G a) = F (G a)", "show ?thesis"], ["proof (prove)\nusing this:\n  G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D G (F (Adj'.\\<eta> (G a))) =\n  G (Adj'.\\<epsilon>FoF\\<eta>.map (G a))\n  Adj'.\\<epsilon>FoF\\<eta>.map (G a) = F (G a)\n\ngoal (1 subgoal):\n 1. G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n    G (F (Adj'.\\<eta> (G a))) =\n    G (F (G a))", "by auto"], ["proof (state)\nthis:\n  G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D G (F (Adj'.\\<eta> (G a))) =\n  G (F (G a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D G (F (Adj'.\\<eta> (G a))) =\n  G (F (G a))\n\ngoal (1 subgoal):\n 1. G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n     G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G a) =\n    G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D Adj.\\<eta> (G a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D G (F (Adj'.\\<eta> (G a))) =\n  G (F (G a))\n\ngoal (1 subgoal):\n 1. G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n     G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G a) =\n    G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D Adj.\\<eta> (G a)", "using a Adj.D.comp_cod_arr"], ["proof (prove)\nusing this:\n  G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D G (F (Adj'.\\<eta> (G a))) =\n  G (F (G a))\n  Adj.C.ide a\n  \\<lbrakk>Adj.D.arr ?f; Adj.D.cod ?f = ?b\\<rbrakk>\n  \\<Longrightarrow> ?b \\<cdot>\\<^sub>D ?f = ?f\n\ngoal (1 subgoal):\n 1. G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n    (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n     G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n    Adj.\\<eta> (G a) =\n    G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D Adj.\\<eta> (G a)", "by auto"], ["proof (state)\nthis:\n  G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n   G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (G a) =\n  G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D Adj.\\<eta> (G a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n   G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (G a) =\n  G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D Adj.\\<eta> (G a)\n\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a", "also"], ["proof (state)\nthis:\n  G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D\n  (G (Adj'.\\<epsilon> (F (G a))) \\<cdot>\\<^sub>D\n   G (F (Adj'.\\<eta> (G a)))) \\<cdot>\\<^sub>D\n  Adj.\\<eta> (G a) =\n  G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D Adj.\\<eta> (G a)\n\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a", "have \"... = G a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D Adj.\\<eta> (G a) = G a", "using a Adj.\\<eta>\\<epsilon>.triangle_G Adj.G\\<epsilon>o\\<eta>G.map_simp_1 [of a]"], ["proof (prove)\nusing this:\n  Adj.C.ide a\n  Adj.G\\<epsilon>o\\<eta>G.map = G\n  Adj.C.arr a \\<Longrightarrow>\n  Adj.G\\<epsilon>o\\<eta>G.map a =\n  (G \\<circ> Adj.\\<epsilon>) (Adj.C.cod a) \\<cdot>\\<^sub>D\n  (Adj.\\<eta> \\<circ> G) a\n\ngoal (1 subgoal):\n 1. G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D Adj.\\<eta> (G a) = G a", "by auto"], ["proof (state)\nthis:\n  G (Adj.\\<epsilon> a) \\<cdot>\\<^sub>D Adj.\\<eta> (G a) = G a\n\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a", "finally"], ["proof (chain)\npicking this:\n  \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a\n\ngoal (1 subgoal):\n 1. \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a", "by auto"], ["proof (state)\nthis:\n  \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a\n\ngoal (1 subgoal):\n 1. Adj.D.ide\n     (\\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a\n\ngoal (1 subgoal):\n 1. Adj.D.ide\n     (\\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a)", "using a"], ["proof (prove)\nusing this:\n  \\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a = G a\n  Adj.C.ide a\n\ngoal (1 subgoal):\n 1. Adj.D.ide\n     (\\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a)", "by auto"], ["proof (state)\nthis:\n  Adj.D.ide (\\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Adj.D.ide (\\<phi> (G' a) (Adj'.\\<epsilon> a) \\<cdot>\\<^sub>D \\<tau>.map a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Adj.D.inverse_arrows (\\<tau>.map a) (\\<phi> (G' a) (Adj'.\\<epsilon> a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Adj.D.iso (\\<tau>.map a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\ngoal (1 subgoal):\n 1. naturally_isomorphic (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G'", "have \"natural_isomorphism C D G G' \\<tau>.map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natural_isomorphism (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G' \\<tau>.map", ".."], ["proof (state)\nthis:\n  natural_isomorphism (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G' \\<tau>.map\n\ngoal (1 subgoal):\n 1. naturally_isomorphic (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G'", "thus \"naturally_isomorphic C D G G'\""], ["proof (prove)\nusing this:\n  natural_isomorphism (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G' \\<tau>.map\n\ngoal (1 subgoal):\n 1. naturally_isomorphic (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G'", "using naturally_isomorphic_def"], ["proof (prove)\nusing this:\n  natural_isomorphism (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G' \\<tau>.map\n  naturally_isomorphic ?A ?B ?F ?G =\n  (\\<exists>\\<tau>. natural_isomorphism ?A ?B ?F ?G \\<tau>)\n\ngoal (1 subgoal):\n 1. naturally_isomorphic (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G'", "by blast"], ["proof (state)\nthis:\n  naturally_isomorphic (\\<cdot>\\<^sub>C) (\\<cdot>\\<^sub>D) G G'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}