{"file_name": "/home/qj213/afp-2021-10-22/thys/Category3/EpiMonoIso.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Category3", "problem_names": ["lemma epiI [intro]:\n     assumes \"arr f\" and \"\\<And>g g'. seq g f \\<and> seq g' f \\<and> g \\<cdot> f = g' \\<cdot> f \\<Longrightarrow> g = g'\"\n     shows \"epi f\"", "lemma epi_implies_arr:\n     assumes \"epi f\"\n     shows \"arr f\"", "lemma epiE [elim]:\n     assumes \"epi f\"\n     and \"seq g f\" and \"seq g' f\" and \"g \\<cdot> f = g' \\<cdot> f\"\n     shows \"g = g'\"", "lemma monoI [intro]:\n     assumes \"arr g\" and \"\\<And>f f'. seq g f \\<and> seq g f' \\<and> g \\<cdot> f = g \\<cdot> f' \\<Longrightarrow> f = f'\"\n     shows \"mono g\"", "lemma mono_implies_arr:\n     assumes \"mono f\"\n     shows \"arr f\"", "lemma monoE [elim]:\n     assumes \"mono g\"\n     and \"seq g f\" and \"seq g f'\" and \"g \\<cdot> f = g \\<cdot> f'\"\n     shows \"f' = f\"", "lemma inverse_arrowsI [intro]:\n     assumes \"ide (g \\<cdot> f)\" and \"ide (f \\<cdot> g)\"\n     shows \"inverse_arrows f g\"", "lemma inverse_arrowsE [elim]:\n     assumes \"inverse_arrows f g\"\n     and \"\\<lbrakk> ide (g \\<cdot> f); ide (f \\<cdot> g) \\<rbrakk> \\<Longrightarrow> T\"\n     shows \"T\"", "lemma inverse_arrows_sym:\n       shows \"inverse_arrows f g \\<longleftrightarrow> inverse_arrows g f\"", "lemma ide_self_inverse:\n     assumes \"ide a\"\n     shows \"inverse_arrows a a\"", "lemma inverse_arrow_unique:\n     assumes \"inverse_arrows f g\" and \"inverse_arrows f g'\"\n     shows \"g = g'\"", "lemma inverse_arrows_compose:\n     assumes \"seq g f\" and \"inverse_arrows f f'\" and \"inverse_arrows g g'\"\n     shows \"inverse_arrows (g \\<cdot> f) (f' \\<cdot> g')\"", "lemma sectionI [intro]:\n     assumes \"ide (g \\<cdot> f)\"\n     shows \"section f\"", "lemma sectionE [elim]:\n     assumes \"section f\"\n     obtains g where \"ide (g \\<cdot> f)\"", "lemma retractionI [intro]:\n     assumes \"ide (g \\<cdot> f)\"\n     shows \"retraction g\"", "lemma retractionE [elim]:\n     assumes \"retraction g\"\n     obtains f where \"ide (g \\<cdot> f)\"", "lemma section_is_mono:\n     assumes \"section g\"\n     shows \"mono g\"", "lemma retraction_is_epi:\n     assumes \"retraction g\"\n     shows \"epi g\"", "lemma section_retraction_compose:\n     assumes \"ide (e \\<cdot> m)\" and \"ide (e' \\<cdot> m')\" and \"seq m' m\"\n     shows \"ide ((e \\<cdot> e') \\<cdot> (m' \\<cdot> m))\"", "lemma sections_compose [intro]:\n     assumes \"section m\" and \"section m'\" and \"seq m' m\"\n     shows \"section (m' \\<cdot> m)\"", "lemma retractions_compose [intro]:\n     assumes \"retraction e\" and \"retraction e'\" and \"seq e' e\"\n     shows \"retraction (e' \\<cdot> e)\"", "lemma monos_compose [intro]:\n     assumes \"mono m\" and \"mono m'\" and \"seq m' m\"\n     shows \"mono (m' \\<cdot> m)\"", "lemma epis_compose [intro]:\n     assumes \"epi e\" and \"epi e'\" and \"seq e' e\"\n     shows \"epi (e' \\<cdot> e)\"", "lemma isoI [intro]:\n     assumes \"inverse_arrows f g\"\n     shows \"iso f\"", "lemma isoE [elim]:\n     assumes \"iso f\"\n     obtains g where \"inverse_arrows f g\"", "lemma ide_is_iso [simp]:\n     assumes \"ide a\"\n     shows \"iso a\"", "lemma iso_is_arr:\n     assumes \"iso f\"\n     shows \"arr f\"", "lemma iso_is_section:\n     assumes \"iso f\"\n     shows \"section f\"", "lemma iso_is_retraction:\n     assumes \"iso f\"\n     shows \"retraction f\"", "lemma iso_iff_mono_and_retraction:\n    shows \"iso f \\<longleftrightarrow> mono f \\<and> retraction f\"", "lemma iso_iff_section_and_epi:\n    shows \"iso f \\<longleftrightarrow> section f \\<and> epi f\"", "lemma iso_iff_section_and_retraction:\n    shows \"iso f \\<longleftrightarrow> section f \\<and> retraction f\"", "lemma isos_compose [intro]:\n    assumes \"iso f\" and \"iso f'\" and \"seq f' f\"\n    shows \"iso (f' \\<cdot> f)\"", "lemma iso_cancel_left:\n    assumes \"iso f\" and \"f \\<cdot> g = f \\<cdot> g'\" and \"seq f g\"\n    shows \"g = g'\"", "lemma iso_cancel_right:\n    assumes \"iso g\" and \"f \\<cdot> g = f' \\<cdot> g\" and \"seq f g\" and \"iso g\"\n    shows \"f = f'\"", "lemma isomorphicI [intro]:\n    assumes \"iso f\"\n    shows \"isomorphic (dom f) (cod f)\"", "lemma isomorphicE [elim]:\n    assumes \"isomorphic a a'\"\n    obtains f where \"\\<guillemotleft>f : a \\<rightarrow> a'\\<guillemotright> \\<and> iso f\"", "lemma iso_in_homI [intro]:\n    assumes \"\\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright>\" and \"iso f\"\n    shows \"\\<guillemotleft>f : a \\<cong> b\\<guillemotright>\"", "lemma iso_in_homE [elim]:\n    assumes \"\\<guillemotleft>f : a \\<cong> b\\<guillemotright>\"\n    and \"\\<lbrakk>\\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright>; iso f\\<rbrakk> \\<Longrightarrow> T\"\n    shows T", "lemma isomorphicI':\n    assumes \"\\<guillemotleft>f : a \\<cong> b\\<guillemotright>\"\n    shows \"isomorphic a b\"", "lemma ide_iso_in_hom:\n    assumes \"ide a\"\n    shows \"\\<guillemotleft>a : a \\<cong> a\\<guillemotright>\"", "lemma comp_iso_in_hom [intro]:\n    assumes \"\\<guillemotleft>f : a \\<cong> b\\<guillemotright>\" and \"\\<guillemotleft>g : b \\<cong> c\\<guillemotright>\"\n    shows \"\\<guillemotleft>g \\<cdot> f : a \\<cong> c\\<guillemotright>\"", "lemma inv_is_inverse:\n    assumes \"iso f\"\n    shows \"inverse_arrows f (inv f)\"", "lemma iso_inv_iso [intro, simp]:\n    assumes \"iso f\"\n    shows \"iso (inv f)\"", "lemma inverse_unique:\n    assumes \"inverse_arrows f g\"\n    shows \"inv f = g\"", "lemma inv_ide [simp]:\n    assumes \"ide a\"\n    shows \"inv a = a\"", "lemma inv_inv [simp]:\n    assumes \"iso f\"\n    shows \"inv (inv f) = f\"", "lemma comp_arr_inv:\n    assumes \"inverse_arrows f g\"\n    shows \"f \\<cdot> g = dom g\"", "lemma comp_inv_arr:\n    assumes \"inverse_arrows f g\"\n    shows \"g \\<cdot> f = dom f\"", "lemma comp_arr_inv':\n    assumes \"iso f\"\n    shows \"f \\<cdot> inv f = cod f\"", "lemma comp_inv_arr':\n    assumes \"iso f\"\n    shows \"inv f \\<cdot> f = dom f\"", "lemma inv_in_hom [simp]:\n    assumes \"iso f\" and \"\\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright>\"\n    shows \"\\<guillemotleft>inv f : b \\<rightarrow> a\\<guillemotright>\"", "lemma arr_inv [simp]:\n    assumes \"iso f\"\n    shows \"arr (inv f)\"", "lemma dom_inv [simp]:\n    assumes \"iso f\"\n    shows \"dom (inv f) = cod f\"", "lemma cod_inv [simp]:\n    assumes \"iso f\"\n    shows \"cod (inv f) = dom f\"", "lemma inv_comp:\n    assumes \"iso f\" and \"iso g\" and \"seq g f\"\n    shows \"inv (g \\<cdot> f) = inv f \\<cdot> inv g\"", "lemma isomorphic_reflexive:\n    assumes \"ide f\"\n    shows \"isomorphic f f\"", "lemma isomorphic_symmetric:\n    assumes \"isomorphic f g\"\n    shows \"isomorphic g f\"", "lemma isomorphic_transitive [trans]:\n    assumes \"isomorphic f g\" and \"isomorphic g h\"\n    shows \"isomorphic f h\"", "lemma section_retraction_of_iso:\n    assumes \"iso f\"\n    shows \"ide (g \\<cdot> f) \\<Longrightarrow> inverse_arrows f g\"\n    and \"ide (f \\<cdot> g) \\<Longrightarrow> inverse_arrows f g\"", "lemma invert_side_of_triangle:\n    assumes \"arr h\" and \"f \\<cdot> g = h\"\n    shows \"iso f \\<Longrightarrow> seq (inv f) h \\<and> g = inv f \\<cdot> h\"\n    and \"iso g \\<Longrightarrow> seq h (inv g) \\<and> f = h \\<cdot> inv g\"", "lemma invert_opposite_sides_of_square:\n    assumes \"seq f g\" and \"f \\<cdot> g = h \\<cdot> k\"\n    shows \"\\<lbrakk> iso f; iso k \\<rbrakk> \\<Longrightarrow> seq g (inv k) \\<and> seq (inv f) h \\<and> g \\<cdot> inv k = inv f \\<cdot> h\"", "lemma inv_comp_left:\n    assumes \"iso (g \\<cdot> f)\" and \"iso g\"\n    shows \"inv (g \\<cdot> f) = inv f \\<cdot> inv g\" and \"iso f\"", "lemma inv_comp_right:\n    assumes \"iso (g \\<cdot> f)\" and \"iso f\"\n    shows \"inv (g \\<cdot> f) = inv f \\<cdot> inv g\" and \"iso g\""], "translations": [["", "lemma epiI [intro]:\n     assumes \"arr f\" and \"\\<And>g g'. seq g f \\<and> seq g' f \\<and> g \\<cdot> f = g' \\<cdot> f \\<Longrightarrow> g = g'\"\n     shows \"epi f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. epi f", "using assms epi_def inj_on_def"], ["proof (prove)\nusing this:\n  arr f\n  seq ?g f \\<and>\n  seq ?g' f \\<and> ?g \\<cdot> f = ?g' \\<cdot> f \\<Longrightarrow>\n  ?g = ?g'\n  epi ?f = (arr ?f \\<and> inj_on (\\<lambda>g. g \\<cdot> ?f) {g. seq g ?f})\n  inj_on ?f ?A =\n  (\\<forall>x\\<in>?A.\n      \\<forall>y\\<in>?A. ?f x = ?f y \\<longrightarrow> x = y)\n\ngoal (1 subgoal):\n 1. epi f", "by blast"], ["", "lemma epi_implies_arr:\n     assumes \"epi f\"\n     shows \"arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f", "using assms epi_def"], ["proof (prove)\nusing this:\n  epi f\n  epi ?f = (arr ?f \\<and> inj_on (\\<lambda>g. g \\<cdot> ?f) {g. seq g ?f})\n\ngoal (1 subgoal):\n 1. arr f", "by auto"], ["", "(*\n      * TODO: epiE and monoE don't need both seq hypotheses.\n      * Also, they are not stated in the form of elimination rules.\n      *)"], ["", "lemma epiE [elim]:\n     assumes \"epi f\"\n     and \"seq g f\" and \"seq g' f\" and \"g \\<cdot> f = g' \\<cdot> f\"\n     shows \"g = g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = g'", "using assms"], ["proof (prove)\nusing this:\n  epi f\n  seq g f\n  seq g' f\n  g \\<cdot> f = g' \\<cdot> f\n\ngoal (1 subgoal):\n 1. g = g'", "unfolding epi_def inj_on_def"], ["proof (prove)\nusing this:\n  arr f \\<and>\n  (\\<forall>x\\<in>{g. seq g f}.\n      \\<forall>y\\<in>{g. seq g f}.\n         x \\<cdot> f = y \\<cdot> f \\<longrightarrow> x = y)\n  seq g f\n  seq g' f\n  g \\<cdot> f = g' \\<cdot> f\n\ngoal (1 subgoal):\n 1. g = g'", "by blast"], ["", "lemma monoI [intro]:\n     assumes \"arr g\" and \"\\<And>f f'. seq g f \\<and> seq g f' \\<and> g \\<cdot> f = g \\<cdot> f' \\<Longrightarrow> f = f'\"\n     shows \"mono g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.mono g", "using assms mono_def inj_on_def"], ["proof (prove)\nusing this:\n  arr g\n  seq g ?f \\<and>\n  seq g ?f' \\<and> g \\<cdot> ?f = g \\<cdot> ?f' \\<Longrightarrow>\n  ?f = ?f'\n  local.mono ?f = (arr ?f \\<and> inj_on ((\\<cdot>) ?f) {g. seq ?f g})\n  inj_on ?f ?A =\n  (\\<forall>x\\<in>?A.\n      \\<forall>y\\<in>?A. ?f x = ?f y \\<longrightarrow> x = y)\n\ngoal (1 subgoal):\n 1. local.mono g", "by blast"], ["", "lemma mono_implies_arr:\n     assumes \"mono f\"\n     shows \"arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f", "using assms mono_def"], ["proof (prove)\nusing this:\n  local.mono f\n  local.mono ?f = (arr ?f \\<and> inj_on ((\\<cdot>) ?f) {g. seq ?f g})\n\ngoal (1 subgoal):\n 1. arr f", "by auto"], ["", "lemma monoE [elim]:\n     assumes \"mono g\"\n     and \"seq g f\" and \"seq g f'\" and \"g \\<cdot> f = g \\<cdot> f'\"\n     shows \"f' = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' = f", "using assms"], ["proof (prove)\nusing this:\n  local.mono g\n  seq g f\n  seq g f'\n  g \\<cdot> f = g \\<cdot> f'\n\ngoal (1 subgoal):\n 1. f' = f", "unfolding mono_def inj_on_def"], ["proof (prove)\nusing this:\n  arr g \\<and>\n  (\\<forall>x\\<in>{ga. seq g ga}.\n      \\<forall>y\\<in>{ga. seq g ga}.\n         g \\<cdot> x = g \\<cdot> y \\<longrightarrow> x = y)\n  seq g f\n  seq g f'\n  g \\<cdot> f = g \\<cdot> f'\n\ngoal (1 subgoal):\n 1. f' = f", "by blast"], ["", "definition inverse_arrows\n     where \"inverse_arrows f g \\<equiv> ide (g \\<cdot> f) \\<and> ide (f \\<cdot> g)\""], ["", "lemma inverse_arrowsI [intro]:\n     assumes \"ide (g \\<cdot> f)\" and \"ide (f \\<cdot> g)\"\n     shows \"inverse_arrows f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_arrows f g", "using assms inverse_arrows_def"], ["proof (prove)\nusing this:\n  ide (g \\<cdot> f)\n  ide (f \\<cdot> g)\n  inverse_arrows ?f ?g \\<equiv>\n  ide (?g \\<cdot> ?f) \\<and> ide (?f \\<cdot> ?g)\n\ngoal (1 subgoal):\n 1. inverse_arrows f g", "by blast"], ["", "lemma inverse_arrowsE [elim]:\n     assumes \"inverse_arrows f g\"\n     and \"\\<lbrakk> ide (g \\<cdot> f); ide (f \\<cdot> g) \\<rbrakk> \\<Longrightarrow> T\"\n     shows \"T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T", "using assms inverse_arrows_def"], ["proof (prove)\nusing this:\n  inverse_arrows f g\n  \\<lbrakk>ide (g \\<cdot> f); ide (f \\<cdot> g)\\<rbrakk> \\<Longrightarrow> T\n  inverse_arrows ?f ?g \\<equiv>\n  ide (?g \\<cdot> ?f) \\<and> ide (?f \\<cdot> ?g)\n\ngoal (1 subgoal):\n 1. T", "by blast"], ["", "lemma inverse_arrows_sym:\n       shows \"inverse_arrows f g \\<longleftrightarrow> inverse_arrows g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_arrows f g = inverse_arrows g f", "using inverse_arrows_def"], ["proof (prove)\nusing this:\n  inverse_arrows ?f ?g \\<equiv>\n  ide (?g \\<cdot> ?f) \\<and> ide (?f \\<cdot> ?g)\n\ngoal (1 subgoal):\n 1. inverse_arrows f g = inverse_arrows g f", "by auto"], ["", "lemma ide_self_inverse:\n     assumes \"ide a\"\n     shows \"inverse_arrows a a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_arrows a a", "using assms"], ["proof (prove)\nusing this:\n  ide a\n\ngoal (1 subgoal):\n 1. inverse_arrows a a", "by auto"], ["", "lemma inverse_arrow_unique:\n     assumes \"inverse_arrows f g\" and \"inverse_arrows f g'\"\n     shows \"g = g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = g'", "using assms"], ["proof (prove)\nusing this:\n  inverse_arrows f g\n  inverse_arrows f g'\n\ngoal (1 subgoal):\n 1. g = g'", "apply (elim inverse_arrowsE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ide (g \\<cdot> f); ide (f \\<cdot> g); ide (g' \\<cdot> f);\n     ide (f \\<cdot> g')\\<rbrakk>\n    \\<Longrightarrow> g = g'", "by (metis comp_cod_arr ide_compE comp_assoc seqE)"], ["", "lemma inverse_arrows_compose:\n     assumes \"seq g f\" and \"inverse_arrows f f'\" and \"inverse_arrows g g'\"\n     shows \"inverse_arrows (g \\<cdot> f) (f' \\<cdot> g')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_arrows (g \\<cdot> f) (f' \\<cdot> g')", "using assms"], ["proof (prove)\nusing this:\n  seq g f\n  inverse_arrows f f'\n  inverse_arrows g g'\n\ngoal (1 subgoal):\n 1. inverse_arrows (g \\<cdot> f) (f' \\<cdot> g')", "apply (elim inverse_arrowsE, intro inverse_arrowsI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>seq g f; ide (f' \\<cdot> f); ide (f \\<cdot> f');\n     ide (g' \\<cdot> g); ide (g \\<cdot> g'); seq g f; inverse_arrows f f';\n     inverse_arrows g g'\\<rbrakk>\n    \\<Longrightarrow> ide ((f' \\<cdot> g') \\<cdot> g \\<cdot> f)\n 2. \\<lbrakk>seq g f; ide (f' \\<cdot> f); ide (f \\<cdot> f');\n     ide (g' \\<cdot> g); ide (g \\<cdot> g'); seq g f; inverse_arrows f f';\n     inverse_arrows g g'\\<rbrakk>\n    \\<Longrightarrow> ide ((g \\<cdot> f) \\<cdot> f' \\<cdot> g')", "apply (metis seqE comp_arr_dom ide_compE comp_assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>seq g f; ide (f' \\<cdot> f); ide (f \\<cdot> f');\n     ide (g' \\<cdot> g); ide (g \\<cdot> g'); seq g f; inverse_arrows f f';\n     inverse_arrows g g'\\<rbrakk>\n    \\<Longrightarrow> ide ((g \\<cdot> f) \\<cdot> f' \\<cdot> g')", "by (metis seqE comp_arr_dom ide_compE comp_assoc)"], ["", "definition \"section\"\n     where \"section f \\<equiv> \\<exists>g. ide (g \\<cdot> f)\""], ["", "lemma sectionI [intro]:\n     assumes \"ide (g \\<cdot> f)\"\n     shows \"section f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. section f", "using assms section_def"], ["proof (prove)\nusing this:\n  ide (g \\<cdot> f)\n  section ?f \\<equiv> \\<exists>g. ide (g \\<cdot> ?f)\n\ngoal (1 subgoal):\n 1. section f", "by auto"], ["", "lemma sectionE [elim]:\n     assumes \"section f\"\n     obtains g where \"ide (g \\<cdot> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g. ide (g \\<cdot> f) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms section_def"], ["proof (prove)\nusing this:\n  section f\n  section ?f \\<equiv> \\<exists>g. ide (g \\<cdot> ?f)\n\ngoal (1 subgoal):\n 1. (\\<And>g. ide (g \\<cdot> f) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "definition retraction\n     where \"retraction g \\<equiv> \\<exists>f. ide (g \\<cdot> f)\""], ["", "lemma retractionI [intro]:\n     assumes \"ide (g \\<cdot> f)\"\n     shows \"retraction g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. retraction g", "using assms retraction_def"], ["proof (prove)\nusing this:\n  ide (g \\<cdot> f)\n  retraction ?g \\<equiv> \\<exists>f. ide (?g \\<cdot> f)\n\ngoal (1 subgoal):\n 1. retraction g", "by auto"], ["", "lemma retractionE [elim]:\n     assumes \"retraction g\"\n     obtains f where \"ide (g \\<cdot> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f. ide (g \\<cdot> f) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms retraction_def"], ["proof (prove)\nusing this:\n  retraction g\n  retraction ?g \\<equiv> \\<exists>f. ide (?g \\<cdot> f)\n\ngoal (1 subgoal):\n 1. (\\<And>f. ide (g \\<cdot> f) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma section_is_mono:\n     assumes \"section g\"\n     shows \"mono g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.mono g", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. arr g\n 2. \\<And>f f'.\n       seq g f \\<and>\n       seq g f' \\<and> g \\<cdot> f = g \\<cdot> f' \\<Longrightarrow>\n       f = f'", "show \"arr g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr g", "using assms section_def"], ["proof (prove)\nusing this:\n  section g\n  section ?f \\<equiv> \\<exists>g. ide (g \\<cdot> ?f)\n\ngoal (1 subgoal):\n 1. arr g", "by blast"], ["proof (state)\nthis:\n  arr g\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       seq g f \\<and>\n       seq g f' \\<and> g \\<cdot> f = g \\<cdot> f' \\<Longrightarrow>\n       f = f'", "from assms"], ["proof (chain)\npicking this:\n  section g", "obtain h where h: \"ide (h \\<cdot> g)\""], ["proof (prove)\nusing this:\n  section g\n\ngoal (1 subgoal):\n 1. (\\<And>h. ide (h \\<cdot> g) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ide (h \\<cdot> g)\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       seq g f \\<and>\n       seq g f' \\<and> g \\<cdot> f = g \\<cdot> f' \\<Longrightarrow>\n       f = f'", "have hg: \"seq h g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq h g", "using h"], ["proof (prove)\nusing this:\n  ide (h \\<cdot> g)\n\ngoal (1 subgoal):\n 1. seq h g", "by auto"], ["proof (state)\nthis:\n  seq h g\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       seq g f \\<and>\n       seq g f' \\<and> g \\<cdot> f = g \\<cdot> f' \\<Longrightarrow>\n       f = f'", "fix f f'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       seq g f \\<and>\n       seq g f' \\<and> g \\<cdot> f = g \\<cdot> f' \\<Longrightarrow>\n       f = f'", "assume \"seq g f \\<and> seq g f' \\<and> g \\<cdot> f = g \\<cdot> f'\""], ["proof (state)\nthis:\n  seq g f \\<and> seq g f' \\<and> g \\<cdot> f = g \\<cdot> f'\n\ngoal (1 subgoal):\n 1. \\<And>f f'.\n       seq g f \\<and>\n       seq g f' \\<and> g \\<cdot> f = g \\<cdot> f' \\<Longrightarrow>\n       f = f'", "thus \"f = f'\""], ["proof (prove)\nusing this:\n  seq g f \\<and> seq g f' \\<and> g \\<cdot> f = g \\<cdot> f'\n\ngoal (1 subgoal):\n 1. f = f'", "using hg h ide_compE seqE comp_assoc comp_cod_arr"], ["proof (prove)\nusing this:\n  seq g f \\<and> seq g f' \\<and> g \\<cdot> f = g \\<cdot> f'\n  seq h g\n  ide (h \\<cdot> g)\n  \\<lbrakk>ide (?g \\<cdot> ?f);\n   \\<lbrakk>seq ?g ?f; seq ?f ?g; ?g \\<cdot> ?f = local.dom ?f;\n    ?g \\<cdot> ?f = cod ?g\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  \\<lbrakk>seq ?g ?f;\n   \\<lbrakk>arr ?f; arr ?g; local.dom ?g = cod ?f\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  (?h \\<cdot> ?g) \\<cdot> ?f = ?h \\<cdot> ?g \\<cdot> ?f\n  \\<lbrakk>arr ?f; cod ?f = ?b\\<rbrakk> \\<Longrightarrow> ?b \\<cdot> ?f = ?f\n\ngoal (1 subgoal):\n 1. f = f'", "by metis"], ["proof (state)\nthis:\n  f = f'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma retraction_is_epi:\n     assumes \"retraction g\"\n     shows \"epi g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. epi g", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. arr g\n 2. \\<And>ga g'.\n       seq ga g \\<and>\n       seq g' g \\<and> ga \\<cdot> g = g' \\<cdot> g \\<Longrightarrow>\n       ga = g'", "show \"arr g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr g", "using assms retraction_def"], ["proof (prove)\nusing this:\n  retraction g\n  retraction ?g \\<equiv> \\<exists>f. ide (?g \\<cdot> f)\n\ngoal (1 subgoal):\n 1. arr g", "by blast"], ["proof (state)\nthis:\n  arr g\n\ngoal (1 subgoal):\n 1. \\<And>ga g'.\n       seq ga g \\<and>\n       seq g' g \\<and> ga \\<cdot> g = g' \\<cdot> g \\<Longrightarrow>\n       ga = g'", "from assms"], ["proof (chain)\npicking this:\n  retraction g", "obtain f where f: \"ide (g \\<cdot> f)\""], ["proof (prove)\nusing this:\n  retraction g\n\ngoal (1 subgoal):\n 1. (\\<And>f. ide (g \\<cdot> f) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ide (g \\<cdot> f)\n\ngoal (1 subgoal):\n 1. \\<And>ga g'.\n       seq ga g \\<and>\n       seq g' g \\<and> ga \\<cdot> g = g' \\<cdot> g \\<Longrightarrow>\n       ga = g'", "have gf: \"seq g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. seq g f", "using f"], ["proof (prove)\nusing this:\n  ide (g \\<cdot> f)\n\ngoal (1 subgoal):\n 1. seq g f", "by auto"], ["proof (state)\nthis:\n  seq g f\n\ngoal (1 subgoal):\n 1. \\<And>ga g'.\n       seq ga g \\<and>\n       seq g' g \\<and> ga \\<cdot> g = g' \\<cdot> g \\<Longrightarrow>\n       ga = g'", "fix h h'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ga g'.\n       seq ga g \\<and>\n       seq g' g \\<and> ga \\<cdot> g = g' \\<cdot> g \\<Longrightarrow>\n       ga = g'", "assume \"seq h g \\<and> seq h' g \\<and> h \\<cdot> g = h' \\<cdot> g\""], ["proof (state)\nthis:\n  seq h g \\<and> seq h' g \\<and> h \\<cdot> g = h' \\<cdot> g\n\ngoal (1 subgoal):\n 1. \\<And>ga g'.\n       seq ga g \\<and>\n       seq g' g \\<and> ga \\<cdot> g = g' \\<cdot> g \\<Longrightarrow>\n       ga = g'", "thus \"h = h'\""], ["proof (prove)\nusing this:\n  seq h g \\<and> seq h' g \\<and> h \\<cdot> g = h' \\<cdot> g\n\ngoal (1 subgoal):\n 1. h = h'", "using gf f ide_compE seqE comp_assoc comp_arr_dom"], ["proof (prove)\nusing this:\n  seq h g \\<and> seq h' g \\<and> h \\<cdot> g = h' \\<cdot> g\n  seq g f\n  ide (g \\<cdot> f)\n  \\<lbrakk>ide (?g \\<cdot> ?f);\n   \\<lbrakk>seq ?g ?f; seq ?f ?g; ?g \\<cdot> ?f = local.dom ?f;\n    ?g \\<cdot> ?f = cod ?g\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  \\<lbrakk>seq ?g ?f;\n   \\<lbrakk>arr ?f; arr ?g; local.dom ?g = cod ?f\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  (?h \\<cdot> ?g) \\<cdot> ?f = ?h \\<cdot> ?g \\<cdot> ?f\n  \\<lbrakk>arr ?f; local.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot> ?a = ?f\n\ngoal (1 subgoal):\n 1. h = h'", "by metis"], ["proof (state)\nthis:\n  h = h'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma section_retraction_compose:\n     assumes \"ide (e \\<cdot> m)\" and \"ide (e' \\<cdot> m')\" and \"seq m' m\"\n     shows \"ide ((e \\<cdot> e') \\<cdot> (m' \\<cdot> m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide ((e \\<cdot> e') \\<cdot> m' \\<cdot> m)", "using assms seqI seqE ide_compE comp_assoc comp_arr_dom"], ["proof (prove)\nusing this:\n  ide (e \\<cdot> m)\n  ide (e' \\<cdot> m')\n  seq m' m\n  \\<lbrakk>arr ?f; arr ?g; local.dom ?g = cod ?f\\<rbrakk>\n  \\<Longrightarrow> seq ?g ?f\n  \\<lbrakk>seq ?g ?f;\n   \\<lbrakk>arr ?f; arr ?g; local.dom ?g = cod ?f\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  \\<lbrakk>ide (?g \\<cdot> ?f);\n   \\<lbrakk>seq ?g ?f; seq ?f ?g; ?g \\<cdot> ?f = local.dom ?f;\n    ?g \\<cdot> ?f = cod ?g\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  (?h \\<cdot> ?g) \\<cdot> ?f = ?h \\<cdot> ?g \\<cdot> ?f\n  \\<lbrakk>arr ?f; local.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot> ?a = ?f\n\ngoal (1 subgoal):\n 1. ide ((e \\<cdot> e') \\<cdot> m' \\<cdot> m)", "by metis"], ["", "lemma sections_compose [intro]:\n     assumes \"section m\" and \"section m'\" and \"seq m' m\"\n     shows \"section (m' \\<cdot> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. section (m' \\<cdot> m)", "using assms section_def section_retraction_compose"], ["proof (prove)\nusing this:\n  section m\n  section m'\n  seq m' m\n  section ?f \\<equiv> \\<exists>g. ide (g \\<cdot> ?f)\n  \\<lbrakk>ide (?e \\<cdot> ?m); ide (?e' \\<cdot> ?m'); seq ?m' ?m\\<rbrakk>\n  \\<Longrightarrow> ide ((?e \\<cdot> ?e') \\<cdot> ?m' \\<cdot> ?m)\n\ngoal (1 subgoal):\n 1. section (m' \\<cdot> m)", "by metis"], ["", "lemma retractions_compose [intro]:\n     assumes \"retraction e\" and \"retraction e'\" and \"seq e' e\"\n     shows \"retraction (e' \\<cdot> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. retraction (e' \\<cdot> e)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. retraction (e' \\<cdot> e)", "from assms(1-2)"], ["proof (chain)\npicking this:\n  retraction e\n  retraction e'", "obtain m m'\n       where *: \"ide (e \\<cdot> m) \\<and> ide (e' \\<cdot> m')\""], ["proof (prove)\nusing this:\n  retraction e\n  retraction e'\n\ngoal (1 subgoal):\n 1. (\\<And>m m'.\n        ide (e \\<cdot> m) \\<and> ide (e' \\<cdot> m') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using retraction_def"], ["proof (prove)\nusing this:\n  retraction e\n  retraction e'\n  retraction ?g \\<equiv> \\<exists>f. ide (?g \\<cdot> f)\n\ngoal (1 subgoal):\n 1. (\\<And>m m'.\n        ide (e \\<cdot> m) \\<and> ide (e' \\<cdot> m') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ide (e \\<cdot> m) \\<and> ide (e' \\<cdot> m')\n\ngoal (1 subgoal):\n 1. retraction (e' \\<cdot> e)", "hence \"seq m m'\""], ["proof (prove)\nusing this:\n  ide (e \\<cdot> m) \\<and> ide (e' \\<cdot> m')\n\ngoal (1 subgoal):\n 1. seq m m'", "using assms(3)"], ["proof (prove)\nusing this:\n  ide (e \\<cdot> m) \\<and> ide (e' \\<cdot> m')\n  seq e' e\n\ngoal (1 subgoal):\n 1. seq m m'", "by (metis seqE seqI ide_compE)"], ["proof (state)\nthis:\n  seq m m'\n\ngoal (1 subgoal):\n 1. retraction (e' \\<cdot> e)", "with *"], ["proof (chain)\npicking this:\n  ide (e \\<cdot> m) \\<and> ide (e' \\<cdot> m')\n  seq m m'", "show ?thesis"], ["proof (prove)\nusing this:\n  ide (e \\<cdot> m) \\<and> ide (e' \\<cdot> m')\n  seq m m'\n\ngoal (1 subgoal):\n 1. retraction (e' \\<cdot> e)", "using section_retraction_compose retractionI"], ["proof (prove)\nusing this:\n  ide (e \\<cdot> m) \\<and> ide (e' \\<cdot> m')\n  seq m m'\n  \\<lbrakk>ide (?e \\<cdot> ?m); ide (?e' \\<cdot> ?m'); seq ?m' ?m\\<rbrakk>\n  \\<Longrightarrow> ide ((?e \\<cdot> ?e') \\<cdot> ?m' \\<cdot> ?m)\n  ide (?g \\<cdot> ?f) \\<Longrightarrow> retraction ?g\n\ngoal (1 subgoal):\n 1. retraction (e' \\<cdot> e)", "by blast"], ["proof (state)\nthis:\n  retraction (e' \\<cdot> e)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma monos_compose [intro]:\n     assumes \"mono m\" and \"mono m'\" and \"seq m' m\"\n     shows \"mono (m' \\<cdot> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.mono (m' \\<cdot> m)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.mono (m' \\<cdot> m)", "have \"inj_on (\\<lambda>f. (m' \\<cdot> m) \\<cdot> f) {f. seq (m' \\<cdot> m) f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on ((\\<cdot>) (m' \\<cdot> m)) {f. seq (m' \\<cdot> m) f}", "unfolding inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{f. seq (m' \\<cdot> m) f}.\n       \\<forall>y\\<in>{f. seq (m' \\<cdot> m) f}.\n          (m' \\<cdot> m) \\<cdot> x =\n          (m' \\<cdot> m) \\<cdot> y \\<longrightarrow>\n          x = y", "using assms"], ["proof (prove)\nusing this:\n  local.mono m\n  local.mono m'\n  seq m' m\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{f. seq (m' \\<cdot> m) f}.\n       \\<forall>y\\<in>{f. seq (m' \\<cdot> m) f}.\n          (m' \\<cdot> m) \\<cdot> x =\n          (m' \\<cdot> m) \\<cdot> y \\<longrightarrow>\n          x = y", "by (metis CollectD seqE monoE comp_assoc)"], ["proof (state)\nthis:\n  inj_on ((\\<cdot>) (m' \\<cdot> m)) {f. seq (m' \\<cdot> m) f}\n\ngoal (1 subgoal):\n 1. local.mono (m' \\<cdot> m)", "thus ?thesis"], ["proof (prove)\nusing this:\n  inj_on ((\\<cdot>) (m' \\<cdot> m)) {f. seq (m' \\<cdot> m) f}\n\ngoal (1 subgoal):\n 1. local.mono (m' \\<cdot> m)", "using assms(3) mono_def"], ["proof (prove)\nusing this:\n  inj_on ((\\<cdot>) (m' \\<cdot> m)) {f. seq (m' \\<cdot> m) f}\n  seq m' m\n  local.mono ?f = (arr ?f \\<and> inj_on ((\\<cdot>) ?f) {g. seq ?f g})\n\ngoal (1 subgoal):\n 1. local.mono (m' \\<cdot> m)", "by force"], ["proof (state)\nthis:\n  local.mono (m' \\<cdot> m)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma epis_compose [intro]:\n     assumes \"epi e\" and \"epi e'\" and \"seq e' e\"\n     shows \"epi (e' \\<cdot> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. epi (e' \\<cdot> e)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. epi (e' \\<cdot> e)", "have \"inj_on (\\<lambda>g. g \\<cdot> (e' \\<cdot> e)) {g. seq g (e' \\<cdot> e)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>g. g \\<cdot> e' \\<cdot> e) {g. seq g (e' \\<cdot> e)}", "unfolding inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{g. seq g (e' \\<cdot> e)}.\n       \\<forall>y\\<in>{g. seq g (e' \\<cdot> e)}.\n          x \\<cdot> e' \\<cdot> e = y \\<cdot> e' \\<cdot> e \\<longrightarrow>\n          x = y", "using assms"], ["proof (prove)\nusing this:\n  epi e\n  epi e'\n  seq e' e\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{g. seq g (e' \\<cdot> e)}.\n       \\<forall>y\\<in>{g. seq g (e' \\<cdot> e)}.\n          x \\<cdot> e' \\<cdot> e = y \\<cdot> e' \\<cdot> e \\<longrightarrow>\n          x = y", "by (metis CollectD epiE match_2 comp_assoc)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>g. g \\<cdot> e' \\<cdot> e) {g. seq g (e' \\<cdot> e)}\n\ngoal (1 subgoal):\n 1. epi (e' \\<cdot> e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>g. g \\<cdot> e' \\<cdot> e) {g. seq g (e' \\<cdot> e)}\n\ngoal (1 subgoal):\n 1. epi (e' \\<cdot> e)", "using assms(3) epi_def"], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>g. g \\<cdot> e' \\<cdot> e) {g. seq g (e' \\<cdot> e)}\n  seq e' e\n  epi ?f = (arr ?f \\<and> inj_on (\\<lambda>g. g \\<cdot> ?f) {g. seq g ?f})\n\ngoal (1 subgoal):\n 1. epi (e' \\<cdot> e)", "by force"], ["proof (state)\nthis:\n  epi (e' \\<cdot> e)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition iso\n     where \"iso f \\<equiv> \\<exists>g. inverse_arrows f g\""], ["", "lemma isoI [intro]:\n     assumes \"inverse_arrows f g\"\n     shows \"iso f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso f", "using assms iso_def"], ["proof (prove)\nusing this:\n  inverse_arrows f g\n  local.iso ?f \\<equiv> \\<exists>g. inverse_arrows ?f g\n\ngoal (1 subgoal):\n 1. local.iso f", "by auto"], ["", "lemma isoE [elim]:\n     assumes \"iso f\"\n     obtains g where \"inverse_arrows f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g. inverse_arrows f g \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms iso_def"], ["proof (prove)\nusing this:\n  local.iso f\n  local.iso ?f \\<equiv> \\<exists>g. inverse_arrows ?f g\n\ngoal (1 subgoal):\n 1. (\\<And>g. inverse_arrows f g \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma ide_is_iso [simp]:\n     assumes \"ide a\"\n     shows \"iso a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso a", "using assms ide_self_inverse"], ["proof (prove)\nusing this:\n  ide a\n  ide ?a \\<Longrightarrow> inverse_arrows ?a ?a\n\ngoal (1 subgoal):\n 1. local.iso a", "by auto"], ["", "lemma iso_is_arr:\n     assumes \"iso f\"\n     shows \"arr f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr f", "using assms"], ["proof (prove)\nusing this:\n  local.iso f\n\ngoal (1 subgoal):\n 1. arr f", "by blast"], ["", "lemma iso_is_section:\n     assumes \"iso f\"\n     shows \"section f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. section f", "using assms inverse_arrows_def"], ["proof (prove)\nusing this:\n  local.iso f\n  inverse_arrows ?f ?g \\<equiv>\n  ide (?g \\<cdot> ?f) \\<and> ide (?f \\<cdot> ?g)\n\ngoal (1 subgoal):\n 1. section f", "by blast"], ["", "lemma iso_is_retraction:\n     assumes \"iso f\"\n     shows \"retraction f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. retraction f", "using assms inverse_arrows_def"], ["proof (prove)\nusing this:\n  local.iso f\n  inverse_arrows ?f ?g \\<equiv>\n  ide (?g \\<cdot> ?f) \\<and> ide (?f \\<cdot> ?g)\n\ngoal (1 subgoal):\n 1. retraction f", "by blast"], ["", "lemma iso_iff_mono_and_retraction:\n    shows \"iso f \\<longleftrightarrow> mono f \\<and> retraction f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso f = (local.mono f \\<and> retraction f)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. local.iso f \\<Longrightarrow> local.mono f \\<and> retraction f\n 2. local.mono f \\<and> retraction f \\<Longrightarrow> local.iso f", "show \"iso f \\<Longrightarrow> mono f \\<and> retraction f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso f \\<Longrightarrow> local.mono f \\<and> retraction f", "by (simp add: iso_is_retraction iso_is_section section_is_mono)"], ["proof (state)\nthis:\n  local.iso f \\<Longrightarrow> local.mono f \\<and> retraction f\n\ngoal (1 subgoal):\n 1. local.mono f \\<and> retraction f \\<Longrightarrow> local.iso f", "show \"mono f \\<and> retraction f \\<Longrightarrow> iso f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.mono f \\<and> retraction f \\<Longrightarrow> local.iso f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.mono f \\<and> retraction f \\<Longrightarrow> local.iso f", "assume f: \"mono f \\<and> retraction f\""], ["proof (state)\nthis:\n  local.mono f \\<and> retraction f\n\ngoal (1 subgoal):\n 1. local.mono f \\<and> retraction f \\<Longrightarrow> local.iso f", "from f"], ["proof (chain)\npicking this:\n  local.mono f \\<and> retraction f", "obtain g where g: \"ide (f \\<cdot> g)\""], ["proof (prove)\nusing this:\n  local.mono f \\<and> retraction f\n\ngoal (1 subgoal):\n 1. (\\<And>g. ide (f \\<cdot> g) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ide (f \\<cdot> g)\n\ngoal (1 subgoal):\n 1. local.mono f \\<and> retraction f \\<Longrightarrow> local.iso f", "have \"inverse_arrows f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_arrows f g", "using f g comp_arr_dom comp_cod_arr comp_assoc inverse_arrowsI"], ["proof (prove)\nusing this:\n  local.mono f \\<and> retraction f\n  ide (f \\<cdot> g)\n  \\<lbrakk>arr ?f; local.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot> ?a = ?f\n  \\<lbrakk>arr ?f; cod ?f = ?b\\<rbrakk> \\<Longrightarrow> ?b \\<cdot> ?f = ?f\n  (?h \\<cdot> ?g) \\<cdot> ?f = ?h \\<cdot> ?g \\<cdot> ?f\n  \\<lbrakk>ide (?g \\<cdot> ?f); ide (?f \\<cdot> ?g)\\<rbrakk>\n  \\<Longrightarrow> inverse_arrows ?f ?g\n\ngoal (1 subgoal):\n 1. inverse_arrows f g", "by (metis ide_char' ide_compE monoE mono_implies_arr)"], ["proof (state)\nthis:\n  inverse_arrows f g\n\ngoal (1 subgoal):\n 1. local.mono f \\<and> retraction f \\<Longrightarrow> local.iso f", "thus \"iso f\""], ["proof (prove)\nusing this:\n  inverse_arrows f g\n\ngoal (1 subgoal):\n 1. local.iso f", "by auto"], ["proof (state)\nthis:\n  local.iso f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.mono f \\<and> retraction f \\<Longrightarrow> local.iso f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iso_iff_section_and_epi:\n    shows \"iso f \\<longleftrightarrow> section f \\<and> epi f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso f = (section f \\<and> epi f)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. local.iso f \\<Longrightarrow> section f \\<and> epi f\n 2. section f \\<and> epi f \\<Longrightarrow> local.iso f", "show \"iso f \\<Longrightarrow> section f \\<and> epi f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso f \\<Longrightarrow> section f \\<and> epi f", "by (simp add: iso_is_retraction iso_is_section retraction_is_epi)"], ["proof (state)\nthis:\n  local.iso f \\<Longrightarrow> section f \\<and> epi f\n\ngoal (1 subgoal):\n 1. section f \\<and> epi f \\<Longrightarrow> local.iso f", "show \"section f \\<and> epi f \\<Longrightarrow> iso f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. section f \\<and> epi f \\<Longrightarrow> local.iso f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. section f \\<and> epi f \\<Longrightarrow> local.iso f", "assume f: \"section f \\<and> epi f\""], ["proof (state)\nthis:\n  section f \\<and> epi f\n\ngoal (1 subgoal):\n 1. section f \\<and> epi f \\<Longrightarrow> local.iso f", "from f"], ["proof (chain)\npicking this:\n  section f \\<and> epi f", "obtain g where g: \"ide (g \\<cdot> f)\""], ["proof (prove)\nusing this:\n  section f \\<and> epi f\n\ngoal (1 subgoal):\n 1. (\\<And>g. ide (g \\<cdot> f) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ide (g \\<cdot> f)\n\ngoal (1 subgoal):\n 1. section f \\<and> epi f \\<Longrightarrow> local.iso f", "have \"inverse_arrows f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_arrows f g", "using f g comp_arr_dom comp_cod_arr epi_implies_arr\n                comp_assoc ide_compE inverse_arrowsI epiE ide_char'"], ["proof (prove)\nusing this:\n  section f \\<and> epi f\n  ide (g \\<cdot> f)\n  \\<lbrakk>arr ?f; local.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot> ?a = ?f\n  \\<lbrakk>arr ?f; cod ?f = ?b\\<rbrakk> \\<Longrightarrow> ?b \\<cdot> ?f = ?f\n  epi ?f \\<Longrightarrow> arr ?f\n  (?h \\<cdot> ?g) \\<cdot> ?f = ?h \\<cdot> ?g \\<cdot> ?f\n  \\<lbrakk>ide (?g \\<cdot> ?f);\n   \\<lbrakk>seq ?g ?f; seq ?f ?g; ?g \\<cdot> ?f = local.dom ?f;\n    ?g \\<cdot> ?f = cod ?g\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  \\<lbrakk>ide (?g \\<cdot> ?f); ide (?f \\<cdot> ?g)\\<rbrakk>\n  \\<Longrightarrow> inverse_arrows ?f ?g\n  \\<lbrakk>epi ?f; seq ?g ?f; seq ?g' ?f;\n   ?g \\<cdot> ?f = ?g' \\<cdot> ?f\\<rbrakk>\n  \\<Longrightarrow> ?g = ?g'\n  ide ?a = (arr ?a \\<and> (local.dom ?a = ?a \\<or> cod ?a = ?a))\n\ngoal (1 subgoal):\n 1. inverse_arrows f g", "by metis"], ["proof (state)\nthis:\n  inverse_arrows f g\n\ngoal (1 subgoal):\n 1. section f \\<and> epi f \\<Longrightarrow> local.iso f", "thus \"iso f\""], ["proof (prove)\nusing this:\n  inverse_arrows f g\n\ngoal (1 subgoal):\n 1. local.iso f", "by auto"], ["proof (state)\nthis:\n  local.iso f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  section f \\<and> epi f \\<Longrightarrow> local.iso f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iso_iff_section_and_retraction:\n    shows \"iso f \\<longleftrightarrow> section f \\<and> retraction f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso f = (section f \\<and> retraction f)", "using iso_is_retraction iso_is_section iso_iff_mono_and_retraction section_is_mono"], ["proof (prove)\nusing this:\n  local.iso ?f \\<Longrightarrow> retraction ?f\n  local.iso ?f \\<Longrightarrow> section ?f\n  local.iso ?f = (local.mono ?f \\<and> retraction ?f)\n  section ?g \\<Longrightarrow> local.mono ?g\n\ngoal (1 subgoal):\n 1. local.iso f = (section f \\<and> retraction f)", "by auto"], ["", "lemma isos_compose [intro]:\n    assumes \"iso f\" and \"iso f'\" and \"seq f' f\"\n    shows \"iso (f' \\<cdot> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso (f' \\<cdot> f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.iso (f' \\<cdot> f)", "from assms(1)"], ["proof (chain)\npicking this:\n  local.iso f", "obtain g where g: \"inverse_arrows f g\""], ["proof (prove)\nusing this:\n  local.iso f\n\ngoal (1 subgoal):\n 1. (\\<And>g. inverse_arrows f g \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  inverse_arrows f g\n\ngoal (1 subgoal):\n 1. local.iso (f' \\<cdot> f)", "from assms(2)"], ["proof (chain)\npicking this:\n  local.iso f'", "obtain g' where g': \"inverse_arrows f' g'\""], ["proof (prove)\nusing this:\n  local.iso f'\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        inverse_arrows f' g' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  inverse_arrows f' g'\n\ngoal (1 subgoal):\n 1. local.iso (f' \\<cdot> f)", "have \"inverse_arrows (f' \\<cdot> f) (g \\<cdot> g')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_arrows (f' \\<cdot> f) (g \\<cdot> g')", "using assms g g inverse_arrowsI inverse_arrowsE section_retraction_compose"], ["proof (prove)\nusing this:\n  local.iso f\n  local.iso f'\n  seq f' f\n  inverse_arrows f g\n  inverse_arrows f g\n  \\<lbrakk>ide (?g \\<cdot> ?f); ide (?f \\<cdot> ?g)\\<rbrakk>\n  \\<Longrightarrow> inverse_arrows ?f ?g\n  \\<lbrakk>inverse_arrows ?f ?g;\n   \\<lbrakk>ide (?g \\<cdot> ?f); ide (?f \\<cdot> ?g)\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  \\<lbrakk>ide (?e \\<cdot> ?m); ide (?e' \\<cdot> ?m'); seq ?m' ?m\\<rbrakk>\n  \\<Longrightarrow> ide ((?e \\<cdot> ?e') \\<cdot> ?m' \\<cdot> ?m)\n\ngoal (1 subgoal):\n 1. inverse_arrows (f' \\<cdot> f) (g \\<cdot> g')", "by (simp add: g' inverse_arrows_compose)"], ["proof (state)\nthis:\n  inverse_arrows (f' \\<cdot> f) (g \\<cdot> g')\n\ngoal (1 subgoal):\n 1. local.iso (f' \\<cdot> f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  inverse_arrows (f' \\<cdot> f) (g \\<cdot> g')\n\ngoal (1 subgoal):\n 1. local.iso (f' \\<cdot> f)", "using iso_def"], ["proof (prove)\nusing this:\n  inverse_arrows (f' \\<cdot> f) (g \\<cdot> g')\n  local.iso ?f \\<equiv> \\<exists>g. inverse_arrows ?f g\n\ngoal (1 subgoal):\n 1. local.iso (f' \\<cdot> f)", "by auto"], ["proof (state)\nthis:\n  local.iso (f' \\<cdot> f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iso_cancel_left:\n    assumes \"iso f\" and \"f \\<cdot> g = f \\<cdot> g'\" and \"seq f g\"\n    shows \"g = g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = g'", "using assms iso_is_section section_is_mono monoE"], ["proof (prove)\nusing this:\n  local.iso f\n  f \\<cdot> g = f \\<cdot> g'\n  seq f g\n  local.iso ?f \\<Longrightarrow> section ?f\n  section ?g \\<Longrightarrow> local.mono ?g\n  \\<lbrakk>local.mono ?g; seq ?g ?f; seq ?g ?f';\n   ?g \\<cdot> ?f = ?g \\<cdot> ?f'\\<rbrakk>\n  \\<Longrightarrow> ?f' = ?f\n\ngoal (1 subgoal):\n 1. g = g'", "by metis"], ["", "lemma iso_cancel_right:\n    assumes \"iso g\" and \"f \\<cdot> g = f' \\<cdot> g\" and \"seq f g\" and \"iso g\"\n    shows \"f = f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = f'", "using assms iso_is_retraction retraction_is_epi epiE"], ["proof (prove)\nusing this:\n  local.iso g\n  f \\<cdot> g = f' \\<cdot> g\n  seq f g\n  local.iso g\n  local.iso ?f \\<Longrightarrow> retraction ?f\n  retraction ?g \\<Longrightarrow> epi ?g\n  \\<lbrakk>epi ?f; seq ?g ?f; seq ?g' ?f;\n   ?g \\<cdot> ?f = ?g' \\<cdot> ?f\\<rbrakk>\n  \\<Longrightarrow> ?g = ?g'\n\ngoal (1 subgoal):\n 1. f = f'", "by metis"], ["", "definition isomorphic\n    where \"isomorphic a a' = (\\<exists>f. \\<guillemotleft>f : a \\<rightarrow> a'\\<guillemotright> \\<and> iso f)\""], ["", "lemma isomorphicI [intro]:\n    assumes \"iso f\"\n    shows \"isomorphic (dom f) (cod f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isomorphic (local.dom f) (cod f)", "using assms isomorphic_def iso_is_arr"], ["proof (prove)\nusing this:\n  local.iso f\n  isomorphic ?a ?a' =\n  (\\<exists>f.\n      \\<guillemotleft>f : ?a \\<rightarrow> ?a'\\<guillemotright> \\<and>\n      local.iso f)\n  local.iso ?f \\<Longrightarrow> arr ?f\n\ngoal (1 subgoal):\n 1. isomorphic (local.dom f) (cod f)", "by blast"], ["", "lemma isomorphicE [elim]:\n    assumes \"isomorphic a a'\"\n    obtains f where \"\\<guillemotleft>f : a \\<rightarrow> a'\\<guillemotright> \\<and> iso f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<guillemotleft>f : a \\<rightarrow> a'\\<guillemotright> \\<and>\n        local.iso f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms isomorphic_def"], ["proof (prove)\nusing this:\n  isomorphic a a'\n  isomorphic ?a ?a' =\n  (\\<exists>f.\n      \\<guillemotleft>f : ?a \\<rightarrow> ?a'\\<guillemotright> \\<and>\n      local.iso f)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<guillemotleft>f : a \\<rightarrow> a'\\<guillemotright> \\<and>\n        local.iso f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by meson"], ["", "definition iso_in_hom  (\"\\<guillemotleft>_ : _ \\<cong> _\\<guillemotright>\")\n    where \"iso_in_hom f a b \\<equiv> \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright> \\<and> iso f\""], ["", "lemma iso_in_homI [intro]:\n    assumes \"\\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright>\" and \"iso f\"\n    shows \"\\<guillemotleft>f : a \\<cong> b\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<cong> b\\<guillemotright>", "using assms iso_in_hom_def"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright>\n  local.iso f\n  \\<guillemotleft>?f : ?a \\<cong> ?b\\<guillemotright> \\<equiv>\n  \\<guillemotleft>?f : ?a \\<rightarrow> ?b\\<guillemotright> \\<and>\n  local.iso ?f\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>f : a \\<cong> b\\<guillemotright>", "by simp"], ["", "lemma iso_in_homE [elim]:\n    assumes \"\\<guillemotleft>f : a \\<cong> b\\<guillemotright>\"\n    and \"\\<lbrakk>\\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright>; iso f\\<rbrakk> \\<Longrightarrow> T\"\n    shows T"], ["proof (prove)\ngoal (1 subgoal):\n 1. T", "using assms iso_in_hom_def"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : a \\<cong> b\\<guillemotright>\n  \\<lbrakk>\\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright>;\n   local.iso f\\<rbrakk>\n  \\<Longrightarrow> T\n  \\<guillemotleft>?f : ?a \\<cong> ?b\\<guillemotright> \\<equiv>\n  \\<guillemotleft>?f : ?a \\<rightarrow> ?b\\<guillemotright> \\<and>\n  local.iso ?f\n\ngoal (1 subgoal):\n 1. T", "by simp"], ["", "lemma isomorphicI':\n    assumes \"\\<guillemotleft>f : a \\<cong> b\\<guillemotright>\"\n    shows \"isomorphic a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isomorphic a b", "using assms iso_in_hom_def isomorphic_def"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : a \\<cong> b\\<guillemotright>\n  \\<guillemotleft>?f : ?a \\<cong> ?b\\<guillemotright> \\<equiv>\n  \\<guillemotleft>?f : ?a \\<rightarrow> ?b\\<guillemotright> \\<and>\n  local.iso ?f\n  isomorphic ?a ?a' =\n  (\\<exists>f.\n      \\<guillemotleft>f : ?a \\<rightarrow> ?a'\\<guillemotright> \\<and>\n      local.iso f)\n\ngoal (1 subgoal):\n 1. isomorphic a b", "by auto"], ["", "lemma ide_iso_in_hom:\n    assumes \"ide a\"\n    shows \"\\<guillemotleft>a : a \\<cong> a\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>a : a \\<cong> a\\<guillemotright>", "using assms"], ["proof (prove)\nusing this:\n  ide a\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>a : a \\<cong> a\\<guillemotright>", "by fastforce"], ["", "lemma comp_iso_in_hom [intro]:\n    assumes \"\\<guillemotleft>f : a \\<cong> b\\<guillemotright>\" and \"\\<guillemotleft>g : b \\<cong> c\\<guillemotright>\"\n    shows \"\\<guillemotleft>g \\<cdot> f : a \\<cong> c\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>g \\<cdot> f : a \\<cong> c\\<guillemotright>", "using assms iso_in_hom_def"], ["proof (prove)\nusing this:\n  \\<guillemotleft>f : a \\<cong> b\\<guillemotright>\n  \\<guillemotleft>g : b \\<cong> c\\<guillemotright>\n  \\<guillemotleft>?f : ?a \\<cong> ?b\\<guillemotright> \\<equiv>\n  \\<guillemotleft>?f : ?a \\<rightarrow> ?b\\<guillemotright> \\<and>\n  local.iso ?f\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>g \\<cdot> f : a \\<cong> c\\<guillemotright>", "by auto"], ["", "definition inv\n    where \"inv f = (SOME g. inverse_arrows f g)\""], ["", "lemma inv_is_inverse:\n    assumes \"iso f\"\n    shows \"inverse_arrows f (inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse_arrows f (local.inv f)", "using assms inv_def someI [of \"inverse_arrows f\"]"], ["proof (prove)\nusing this:\n  local.iso f\n  local.inv ?f = (SOME g. inverse_arrows ?f g)\n  inverse_arrows f ?x \\<Longrightarrow>\n  inverse_arrows f (Eps (inverse_arrows f))\n\ngoal (1 subgoal):\n 1. inverse_arrows f (local.inv f)", "by auto"], ["", "lemma iso_inv_iso [intro, simp]:\n    assumes \"iso f\"\n    shows \"iso (inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso (local.inv f)", "using assms inv_is_inverse inverse_arrows_sym"], ["proof (prove)\nusing this:\n  local.iso f\n  local.iso ?f \\<Longrightarrow> inverse_arrows ?f (local.inv ?f)\n  inverse_arrows ?f ?g = inverse_arrows ?g ?f\n\ngoal (1 subgoal):\n 1. local.iso (local.inv f)", "by blast"], ["", "lemma inverse_unique:\n    assumes \"inverse_arrows f g\"\n    shows \"inv f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv f = g", "using assms inv_is_inverse inverse_arrow_unique isoI"], ["proof (prove)\nusing this:\n  inverse_arrows f g\n  local.iso ?f \\<Longrightarrow> inverse_arrows ?f (local.inv ?f)\n  \\<lbrakk>inverse_arrows ?f ?g; inverse_arrows ?f ?g'\\<rbrakk>\n  \\<Longrightarrow> ?g = ?g'\n  inverse_arrows ?f ?g \\<Longrightarrow> local.iso ?f\n\ngoal (1 subgoal):\n 1. local.inv f = g", "by auto"], ["", "lemma inv_ide [simp]:\n    assumes \"ide a\"\n    shows \"inv a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv a = a", "using assms"], ["proof (prove)\nusing this:\n  ide a\n\ngoal (1 subgoal):\n 1. local.inv a = a", "by (simp add: inverse_arrowsI inverse_unique)"], ["", "lemma inv_inv [simp]:\n    assumes \"iso f\"\n    shows \"inv (inv f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv (local.inv f) = f", "using assms inverse_arrows_sym inverse_unique"], ["proof (prove)\nusing this:\n  local.iso f\n  inverse_arrows ?f ?g = inverse_arrows ?g ?f\n  inverse_arrows ?f ?g \\<Longrightarrow> local.inv ?f = ?g\n\ngoal (1 subgoal):\n 1. local.inv (local.inv f) = f", "by blast"], ["", "lemma comp_arr_inv:\n    assumes \"inverse_arrows f g\"\n    shows \"f \\<cdot> g = dom g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> g = local.dom g", "using assms"], ["proof (prove)\nusing this:\n  inverse_arrows f g\n\ngoal (1 subgoal):\n 1. f \\<cdot> g = local.dom g", "by auto"], ["", "lemma comp_inv_arr:\n    assumes \"inverse_arrows f g\"\n    shows \"g \\<cdot> f = dom f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<cdot> f = local.dom f", "using assms"], ["proof (prove)\nusing this:\n  inverse_arrows f g\n\ngoal (1 subgoal):\n 1. g \\<cdot> f = local.dom f", "by auto"], ["", "lemma comp_arr_inv':\n    assumes \"iso f\"\n    shows \"f \\<cdot> inv f = cod f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> local.inv f = cod f", "using assms inv_is_inverse"], ["proof (prove)\nusing this:\n  local.iso f\n  local.iso ?f \\<Longrightarrow> inverse_arrows ?f (local.inv ?f)\n\ngoal (1 subgoal):\n 1. f \\<cdot> local.inv f = cod f", "by blast"], ["", "lemma comp_inv_arr':\n    assumes \"iso f\"\n    shows \"inv f \\<cdot> f = dom f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv f \\<cdot> f = local.dom f", "using assms inv_is_inverse"], ["proof (prove)\nusing this:\n  local.iso f\n  local.iso ?f \\<Longrightarrow> inverse_arrows ?f (local.inv ?f)\n\ngoal (1 subgoal):\n 1. local.inv f \\<cdot> f = local.dom f", "by blast"], ["", "lemma inv_in_hom [simp]:\n    assumes \"iso f\" and \"\\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright>\"\n    shows \"\\<guillemotleft>inv f : b \\<rightarrow> a\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>local.inv f : b \\<rightarrow> a\\<guillemotright>", "using assms inv_is_inverse seqE inverse_arrowsE"], ["proof (prove)\nusing this:\n  local.iso f\n  \\<guillemotleft>f : a \\<rightarrow> b\\<guillemotright>\n  local.iso ?f \\<Longrightarrow> inverse_arrows ?f (local.inv ?f)\n  \\<lbrakk>seq ?g ?f;\n   \\<lbrakk>arr ?f; arr ?g; local.dom ?g = cod ?f\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n  \\<lbrakk>inverse_arrows ?f ?g;\n   \\<lbrakk>ide (?g \\<cdot> ?f); ide (?f \\<cdot> ?g)\\<rbrakk>\n   \\<Longrightarrow> ?T\\<rbrakk>\n  \\<Longrightarrow> ?T\n\ngoal (1 subgoal):\n 1. \\<guillemotleft>local.inv f : b \\<rightarrow> a\\<guillemotright>", "by (metis ide_compE in_homE in_homI)"], ["", "lemma arr_inv [simp]:\n    assumes \"iso f\"\n    shows \"arr (inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arr (local.inv f)", "using assms inv_in_hom"], ["proof (prove)\nusing this:\n  local.iso f\n  \\<lbrakk>local.iso ?f;\n   \\<guillemotleft>?f : ?a \\<rightarrow> ?b\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>local.inv\n                                     ?f : ?b \\<rightarrow> ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. arr (local.inv f)", "by blast"], ["", "lemma dom_inv [simp]:\n    assumes \"iso f\"\n    shows \"dom (inv f) = cod f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.dom (local.inv f) = cod f", "using assms inv_in_hom"], ["proof (prove)\nusing this:\n  local.iso f\n  \\<lbrakk>local.iso ?f;\n   \\<guillemotleft>?f : ?a \\<rightarrow> ?b\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>local.inv\n                                     ?f : ?b \\<rightarrow> ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. local.dom (local.inv f) = cod f", "by blast"], ["", "lemma cod_inv [simp]:\n    assumes \"iso f\"\n    shows \"cod (inv f) = dom f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod (local.inv f) = local.dom f", "using assms inv_in_hom"], ["proof (prove)\nusing this:\n  local.iso f\n  \\<lbrakk>local.iso ?f;\n   \\<guillemotleft>?f : ?a \\<rightarrow> ?b\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>local.inv\n                                     ?f : ?b \\<rightarrow> ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. cod (local.inv f) = local.dom f", "by blast"], ["", "lemma inv_comp:\n    assumes \"iso f\" and \"iso g\" and \"seq g f\"\n    shows \"inv (g \\<cdot> f) = inv f \\<cdot> inv g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv (g \\<cdot> f) = local.inv f \\<cdot> local.inv g", "using assms inv_is_inverse inverse_unique inverse_arrows_compose inverse_arrows_def"], ["proof (prove)\nusing this:\n  local.iso f\n  local.iso g\n  seq g f\n  local.iso ?f \\<Longrightarrow> inverse_arrows ?f (local.inv ?f)\n  inverse_arrows ?f ?g \\<Longrightarrow> local.inv ?f = ?g\n  \\<lbrakk>seq ?g ?f; inverse_arrows ?f ?f'; inverse_arrows ?g ?g'\\<rbrakk>\n  \\<Longrightarrow> inverse_arrows (?g \\<cdot> ?f) (?f' \\<cdot> ?g')\n  inverse_arrows ?f ?g \\<equiv>\n  ide (?g \\<cdot> ?f) \\<and> ide (?f \\<cdot> ?g)\n\ngoal (1 subgoal):\n 1. local.inv (g \\<cdot> f) = local.inv f \\<cdot> local.inv g", "by meson"], ["", "lemma isomorphic_reflexive:\n    assumes \"ide f\"\n    shows \"isomorphic f f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isomorphic f f", "unfolding isomorphic_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>fa.\n       \\<guillemotleft>fa : f \\<rightarrow> f\\<guillemotright> \\<and>\n       local.iso fa", "using assms ide_is_iso ide_in_hom"], ["proof (prove)\nusing this:\n  ide f\n  ide ?a \\<Longrightarrow> local.iso ?a\n  ide ?a = \\<guillemotleft>?a : ?a \\<rightarrow> ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. \\<exists>fa.\n       \\<guillemotleft>fa : f \\<rightarrow> f\\<guillemotright> \\<and>\n       local.iso fa", "by blast"], ["", "lemma isomorphic_symmetric:\n    assumes \"isomorphic f g\"\n    shows \"isomorphic g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isomorphic g f", "using assms inv_in_hom"], ["proof (prove)\nusing this:\n  isomorphic f g\n  \\<lbrakk>local.iso ?f;\n   \\<guillemotleft>?f : ?a \\<rightarrow> ?b\\<guillemotright>\\<rbrakk>\n  \\<Longrightarrow> \\<guillemotleft>local.inv\n                                     ?f : ?b \\<rightarrow> ?a\\<guillemotright>\n\ngoal (1 subgoal):\n 1. isomorphic g f", "by blast"], ["", "lemma isomorphic_transitive [trans]:\n    assumes \"isomorphic f g\" and \"isomorphic g h\"\n    shows \"isomorphic f h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isomorphic f h", "using assms isomorphic_def isos_compose"], ["proof (prove)\nusing this:\n  isomorphic f g\n  isomorphic g h\n  isomorphic ?a ?a' =\n  (\\<exists>f.\n      \\<guillemotleft>f : ?a \\<rightarrow> ?a'\\<guillemotright> \\<and>\n      local.iso f)\n  \\<lbrakk>local.iso ?f; local.iso ?f'; seq ?f' ?f\\<rbrakk>\n  \\<Longrightarrow> local.iso (?f' \\<cdot> ?f)\n\ngoal (1 subgoal):\n 1. isomorphic f h", "by auto"], ["", "text \\<open>\n      A section or retraction of an isomorphism is in fact an inverse.\n\\<close>"], ["", "lemma section_retraction_of_iso:\n    assumes \"iso f\"\n    shows \"ide (g \\<cdot> f) \\<Longrightarrow> inverse_arrows f g\"\n    and \"ide (f \\<cdot> g) \\<Longrightarrow> inverse_arrows f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ide (g \\<cdot> f) \\<Longrightarrow> inverse_arrows f g) &&&\n    (ide (f \\<cdot> g) \\<Longrightarrow> inverse_arrows f g)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. ide (g \\<cdot> f) \\<Longrightarrow> inverse_arrows f g\n 2. ide (f \\<cdot> g) \\<Longrightarrow> inverse_arrows f g", "show \"ide (g \\<cdot> f) \\<Longrightarrow> inverse_arrows f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide (g \\<cdot> f) \\<Longrightarrow> inverse_arrows f g", "using assms"], ["proof (prove)\nusing this:\n  local.iso f\n\ngoal (1 subgoal):\n 1. ide (g \\<cdot> f) \\<Longrightarrow> inverse_arrows f g", "by (metis comp_inv_arr' epiE ide_compE inv_is_inverse iso_iff_section_and_epi)"], ["proof (state)\nthis:\n  ide (g \\<cdot> f) \\<Longrightarrow> inverse_arrows f g\n\ngoal (1 subgoal):\n 1. ide (f \\<cdot> g) \\<Longrightarrow> inverse_arrows f g", "show \"ide (f \\<cdot> g) \\<Longrightarrow> inverse_arrows f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ide (f \\<cdot> g) \\<Longrightarrow> inverse_arrows f g", "using assms"], ["proof (prove)\nusing this:\n  local.iso f\n\ngoal (1 subgoal):\n 1. ide (f \\<cdot> g) \\<Longrightarrow> inverse_arrows f g", "by (metis ide_compE comp_arr_inv' inv_is_inverse iso_iff_mono_and_retraction monoE)"], ["proof (state)\nthis:\n  ide (f \\<cdot> g) \\<Longrightarrow> inverse_arrows f g\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n      A situation that occurs frequently is that we have a commuting triangle,\n      but we need the triangle obtained by inverting one side that is an isomorphism.\n      The following fact streamlines this derivation.\n\\<close>"], ["", "lemma invert_side_of_triangle:\n    assumes \"arr h\" and \"f \\<cdot> g = h\"\n    shows \"iso f \\<Longrightarrow> seq (inv f) h \\<and> g = inv f \\<cdot> h\"\n    and \"iso g \\<Longrightarrow> seq h (inv g) \\<and> f = h \\<cdot> inv g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (local.iso f \\<Longrightarrow>\n     seq (local.inv f) h \\<and> g = local.inv f \\<cdot> h) &&&\n    (local.iso g \\<Longrightarrow>\n     seq h (local.inv g) \\<and> f = h \\<cdot> local.inv g)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. local.iso f \\<Longrightarrow>\n    seq (local.inv f) h \\<and> g = local.inv f \\<cdot> h\n 2. local.iso g \\<Longrightarrow>\n    seq h (local.inv g) \\<and> f = h \\<cdot> local.inv g", "show \"iso f \\<Longrightarrow> seq (inv f) h \\<and> g = inv f \\<cdot> h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso f \\<Longrightarrow>\n    seq (local.inv f) h \\<and> g = local.inv f \\<cdot> h", "by (metis assms seqE inv_is_inverse comp_cod_arr comp_inv_arr comp_assoc)"], ["proof (state)\nthis:\n  local.iso f \\<Longrightarrow>\n  seq (local.inv f) h \\<and> g = local.inv f \\<cdot> h\n\ngoal (1 subgoal):\n 1. local.iso g \\<Longrightarrow>\n    seq h (local.inv g) \\<and> f = h \\<cdot> local.inv g", "show \"iso g \\<Longrightarrow> seq h (inv g) \\<and> f = h \\<cdot> inv g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso g \\<Longrightarrow>\n    seq h (local.inv g) \\<and> f = h \\<cdot> local.inv g", "by (metis assms seqE inv_is_inverse comp_arr_dom comp_arr_inv dom_inv comp_assoc)"], ["proof (state)\nthis:\n  local.iso g \\<Longrightarrow>\n  seq h (local.inv g) \\<and> f = h \\<cdot> local.inv g\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n      A similar situation is where we have a commuting square and we want to\n      invert two opposite sides.\n\\<close>"], ["", "lemma invert_opposite_sides_of_square:\n    assumes \"seq f g\" and \"f \\<cdot> g = h \\<cdot> k\"\n    shows \"\\<lbrakk> iso f; iso k \\<rbrakk> \\<Longrightarrow> seq g (inv k) \\<and> seq (inv f) h \\<and> g \\<cdot> inv k = inv f \\<cdot> h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.iso f; local.iso k\\<rbrakk>\n    \\<Longrightarrow> seq g (local.inv k) \\<and>\n                      seq (local.inv f) h \\<and>\n                      g \\<cdot> local.inv k = local.inv f \\<cdot> h", "by (metis assms invert_side_of_triangle comp_assoc)"], ["", "text \\<open>\n      The following versions of \\<open>inv_comp\\<close> provide information needed for repeated\n      application to a composition of more than two arrows and seem often to be more\n      useful.\n\\<close>"], ["", "lemma inv_comp_left:\n    assumes \"iso (g \\<cdot> f)\" and \"iso g\"\n    shows \"inv (g \\<cdot> f) = inv f \\<cdot> inv g\" and \"iso f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv (g \\<cdot> f) = local.inv f \\<cdot> local.inv g &&&\n    local.iso f", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. local.inv (g \\<cdot> f) = local.inv f \\<cdot> local.inv g\n 2. local.iso f", "have 1: \"inv f = inv (g \\<cdot> f) \\<cdot> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv f = local.inv (g \\<cdot> f) \\<cdot> g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.inv f = local.inv (g \\<cdot> f) \\<cdot> g", "have \"inv (g \\<cdot> f) \\<cdot> g = inv (g \\<cdot> f) \\<cdot> inv (inv g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv (g \\<cdot> f) \\<cdot> g =\n    local.inv (g \\<cdot> f) \\<cdot> local.inv (local.inv g)", "using assms"], ["proof (prove)\nusing this:\n  local.iso (g \\<cdot> f)\n  local.iso g\n\ngoal (1 subgoal):\n 1. local.inv (g \\<cdot> f) \\<cdot> g =\n    local.inv (g \\<cdot> f) \\<cdot> local.inv (local.inv g)", "by simp"], ["proof (state)\nthis:\n  local.inv (g \\<cdot> f) \\<cdot> g =\n  local.inv (g \\<cdot> f) \\<cdot> local.inv (local.inv g)\n\ngoal (1 subgoal):\n 1. local.inv f = local.inv (g \\<cdot> f) \\<cdot> g", "also"], ["proof (state)\nthis:\n  local.inv (g \\<cdot> f) \\<cdot> g =\n  local.inv (g \\<cdot> f) \\<cdot> local.inv (local.inv g)\n\ngoal (1 subgoal):\n 1. local.inv f = local.inv (g \\<cdot> f) \\<cdot> g", "have \"... = inv (inv g \\<cdot> g \\<cdot> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv (g \\<cdot> f) \\<cdot> local.inv (local.inv g) =\n    local.inv (local.inv g \\<cdot> g \\<cdot> f)", "using assms inv_comp iso_is_arr"], ["proof (prove)\nusing this:\n  local.iso (g \\<cdot> f)\n  local.iso g\n  \\<lbrakk>local.iso ?f; local.iso ?g; seq ?g ?f\\<rbrakk>\n  \\<Longrightarrow> local.inv (?g \\<cdot> ?f) =\n                    local.inv ?f \\<cdot> local.inv ?g\n  local.iso ?f \\<Longrightarrow> arr ?f\n\ngoal (1 subgoal):\n 1. local.inv (g \\<cdot> f) \\<cdot> local.inv (local.inv g) =\n    local.inv (local.inv g \\<cdot> g \\<cdot> f)", "by simp"], ["proof (state)\nthis:\n  local.inv (g \\<cdot> f) \\<cdot> local.inv (local.inv g) =\n  local.inv (local.inv g \\<cdot> g \\<cdot> f)\n\ngoal (1 subgoal):\n 1. local.inv f = local.inv (g \\<cdot> f) \\<cdot> g", "also"], ["proof (state)\nthis:\n  local.inv (g \\<cdot> f) \\<cdot> local.inv (local.inv g) =\n  local.inv (local.inv g \\<cdot> g \\<cdot> f)\n\ngoal (1 subgoal):\n 1. local.inv f = local.inv (g \\<cdot> f) \\<cdot> g", "have \"... = inv ((inv g \\<cdot> g) \\<cdot> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv (local.inv g \\<cdot> g \\<cdot> f) =\n    local.inv ((local.inv g \\<cdot> g) \\<cdot> f)", "using comp_assoc"], ["proof (prove)\nusing this:\n  (?h \\<cdot> ?g) \\<cdot> ?f = ?h \\<cdot> ?g \\<cdot> ?f\n\ngoal (1 subgoal):\n 1. local.inv (local.inv g \\<cdot> g \\<cdot> f) =\n    local.inv ((local.inv g \\<cdot> g) \\<cdot> f)", "by simp"], ["proof (state)\nthis:\n  local.inv (local.inv g \\<cdot> g \\<cdot> f) =\n  local.inv ((local.inv g \\<cdot> g) \\<cdot> f)\n\ngoal (1 subgoal):\n 1. local.inv f = local.inv (g \\<cdot> f) \\<cdot> g", "also"], ["proof (state)\nthis:\n  local.inv (local.inv g \\<cdot> g \\<cdot> f) =\n  local.inv ((local.inv g \\<cdot> g) \\<cdot> f)\n\ngoal (1 subgoal):\n 1. local.inv f = local.inv (g \\<cdot> f) \\<cdot> g", "have \"... = inv f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv ((local.inv g \\<cdot> g) \\<cdot> f) = local.inv f", "using assms comp_ide_arr invert_side_of_triangle(1) iso_is_arr comp_assoc"], ["proof (prove)\nusing this:\n  local.iso (g \\<cdot> f)\n  local.iso g\n  \\<lbrakk>ide ?b; seq ?b ?f\\<rbrakk> \\<Longrightarrow> ?b \\<cdot> ?f = ?f\n  \\<lbrakk>arr ?h; ?f \\<cdot> ?g = ?h; local.iso ?f\\<rbrakk>\n  \\<Longrightarrow> seq (local.inv ?f) ?h \\<and>\n                    ?g = local.inv ?f \\<cdot> ?h\n  local.iso ?f \\<Longrightarrow> arr ?f\n  (?h \\<cdot> ?g) \\<cdot> ?f = ?h \\<cdot> ?g \\<cdot> ?f\n\ngoal (1 subgoal):\n 1. local.inv ((local.inv g \\<cdot> g) \\<cdot> f) = local.inv f", "by metis"], ["proof (state)\nthis:\n  local.inv ((local.inv g \\<cdot> g) \\<cdot> f) = local.inv f\n\ngoal (1 subgoal):\n 1. local.inv f = local.inv (g \\<cdot> f) \\<cdot> g", "finally"], ["proof (chain)\npicking this:\n  local.inv (g \\<cdot> f) \\<cdot> g = local.inv f", "show ?thesis"], ["proof (prove)\nusing this:\n  local.inv (g \\<cdot> f) \\<cdot> g = local.inv f\n\ngoal (1 subgoal):\n 1. local.inv f = local.inv (g \\<cdot> f) \\<cdot> g", "by simp"], ["proof (state)\nthis:\n  local.inv f = local.inv (g \\<cdot> f) \\<cdot> g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.inv f = local.inv (g \\<cdot> f) \\<cdot> g\n\ngoal (2 subgoals):\n 1. local.inv (g \\<cdot> f) = local.inv f \\<cdot> local.inv g\n 2. local.iso f", "show \"inv (g \\<cdot> f) = inv f \\<cdot> inv g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv (g \\<cdot> f) = local.inv f \\<cdot> local.inv g", "using assms 1 comp_arr_dom comp_assoc"], ["proof (prove)\nusing this:\n  local.iso (g \\<cdot> f)\n  local.iso g\n  local.inv f = local.inv (g \\<cdot> f) \\<cdot> g\n  \\<lbrakk>arr ?f; local.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot> ?a = ?f\n  (?h \\<cdot> ?g) \\<cdot> ?f = ?h \\<cdot> ?g \\<cdot> ?f\n\ngoal (1 subgoal):\n 1. local.inv (g \\<cdot> f) = local.inv f \\<cdot> local.inv g", "by (metis arr_inv cod_comp dom_inv invert_side_of_triangle(2) iso_is_arr seqI)"], ["proof (state)\nthis:\n  local.inv (g \\<cdot> f) = local.inv f \\<cdot> local.inv g\n\ngoal (1 subgoal):\n 1. local.iso f", "show \"iso f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso f", "using assms 1 comp_assoc inv_is_inverse"], ["proof (prove)\nusing this:\n  local.iso (g \\<cdot> f)\n  local.iso g\n  local.inv f = local.inv (g \\<cdot> f) \\<cdot> g\n  (?h \\<cdot> ?g) \\<cdot> ?f = ?h \\<cdot> ?g \\<cdot> ?f\n  local.iso ?f \\<Longrightarrow> inverse_arrows ?f (local.inv ?f)\n\ngoal (1 subgoal):\n 1. local.iso f", "by (metis arr_inv invert_side_of_triangle(1) inv_inv iso_inv_iso isos_compose)"], ["proof (state)\nthis:\n  local.iso f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inv_comp_right:\n    assumes \"iso (g \\<cdot> f)\" and \"iso f\"\n    shows \"inv (g \\<cdot> f) = inv f \\<cdot> inv g\" and \"iso g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv (g \\<cdot> f) = local.inv f \\<cdot> local.inv g &&&\n    local.iso g", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. local.inv (g \\<cdot> f) = local.inv f \\<cdot> local.inv g\n 2. local.iso g", "have 1: \"inv g = f \\<cdot> inv (g \\<cdot> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv g = f \\<cdot> local.inv (g \\<cdot> f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.inv g = f \\<cdot> local.inv (g \\<cdot> f)", "have \"f \\<cdot> inv (g \\<cdot> f) = inv (inv f) \\<cdot> inv (g \\<cdot> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<cdot> local.inv (g \\<cdot> f) =\n    local.inv (local.inv f) \\<cdot> local.inv (g \\<cdot> f)", "using assms"], ["proof (prove)\nusing this:\n  local.iso (g \\<cdot> f)\n  local.iso f\n\ngoal (1 subgoal):\n 1. f \\<cdot> local.inv (g \\<cdot> f) =\n    local.inv (local.inv f) \\<cdot> local.inv (g \\<cdot> f)", "by simp"], ["proof (state)\nthis:\n  f \\<cdot> local.inv (g \\<cdot> f) =\n  local.inv (local.inv f) \\<cdot> local.inv (g \\<cdot> f)\n\ngoal (1 subgoal):\n 1. local.inv g = f \\<cdot> local.inv (g \\<cdot> f)", "also"], ["proof (state)\nthis:\n  f \\<cdot> local.inv (g \\<cdot> f) =\n  local.inv (local.inv f) \\<cdot> local.inv (g \\<cdot> f)\n\ngoal (1 subgoal):\n 1. local.inv g = f \\<cdot> local.inv (g \\<cdot> f)", "have \"... = inv ((g \\<cdot> f) \\<cdot> inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv (local.inv f) \\<cdot> local.inv (g \\<cdot> f) =\n    local.inv ((g \\<cdot> f) \\<cdot> local.inv f)", "using assms inv_comp iso_is_arr"], ["proof (prove)\nusing this:\n  local.iso (g \\<cdot> f)\n  local.iso f\n  \\<lbrakk>local.iso ?f; local.iso ?g; seq ?g ?f\\<rbrakk>\n  \\<Longrightarrow> local.inv (?g \\<cdot> ?f) =\n                    local.inv ?f \\<cdot> local.inv ?g\n  local.iso ?f \\<Longrightarrow> arr ?f\n\ngoal (1 subgoal):\n 1. local.inv (local.inv f) \\<cdot> local.inv (g \\<cdot> f) =\n    local.inv ((g \\<cdot> f) \\<cdot> local.inv f)", "by simp"], ["proof (state)\nthis:\n  local.inv (local.inv f) \\<cdot> local.inv (g \\<cdot> f) =\n  local.inv ((g \\<cdot> f) \\<cdot> local.inv f)\n\ngoal (1 subgoal):\n 1. local.inv g = f \\<cdot> local.inv (g \\<cdot> f)", "also"], ["proof (state)\nthis:\n  local.inv (local.inv f) \\<cdot> local.inv (g \\<cdot> f) =\n  local.inv ((g \\<cdot> f) \\<cdot> local.inv f)\n\ngoal (1 subgoal):\n 1. local.inv g = f \\<cdot> local.inv (g \\<cdot> f)", "have \"... = inv (g \\<cdot> f \\<cdot> inv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv ((g \\<cdot> f) \\<cdot> local.inv f) =\n    local.inv (g \\<cdot> f \\<cdot> local.inv f)", "using comp_assoc"], ["proof (prove)\nusing this:\n  (?h \\<cdot> ?g) \\<cdot> ?f = ?h \\<cdot> ?g \\<cdot> ?f\n\ngoal (1 subgoal):\n 1. local.inv ((g \\<cdot> f) \\<cdot> local.inv f) =\n    local.inv (g \\<cdot> f \\<cdot> local.inv f)", "by simp"], ["proof (state)\nthis:\n  local.inv ((g \\<cdot> f) \\<cdot> local.inv f) =\n  local.inv (g \\<cdot> f \\<cdot> local.inv f)\n\ngoal (1 subgoal):\n 1. local.inv g = f \\<cdot> local.inv (g \\<cdot> f)", "also"], ["proof (state)\nthis:\n  local.inv ((g \\<cdot> f) \\<cdot> local.inv f) =\n  local.inv (g \\<cdot> f \\<cdot> local.inv f)\n\ngoal (1 subgoal):\n 1. local.inv g = f \\<cdot> local.inv (g \\<cdot> f)", "have \"... = inv g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv (g \\<cdot> f \\<cdot> local.inv f) = local.inv g", "using assms comp_arr_dom invert_side_of_triangle(2) iso_is_arr comp_assoc"], ["proof (prove)\nusing this:\n  local.iso (g \\<cdot> f)\n  local.iso f\n  \\<lbrakk>arr ?f; local.dom ?f = ?a\\<rbrakk>\n  \\<Longrightarrow> ?f \\<cdot> ?a = ?f\n  \\<lbrakk>arr ?h; ?f \\<cdot> ?g = ?h; local.iso ?g\\<rbrakk>\n  \\<Longrightarrow> seq ?h (local.inv ?g) \\<and>\n                    ?f = ?h \\<cdot> local.inv ?g\n  local.iso ?f \\<Longrightarrow> arr ?f\n  (?h \\<cdot> ?g) \\<cdot> ?f = ?h \\<cdot> ?g \\<cdot> ?f\n\ngoal (1 subgoal):\n 1. local.inv (g \\<cdot> f \\<cdot> local.inv f) = local.inv g", "by metis"], ["proof (state)\nthis:\n  local.inv (g \\<cdot> f \\<cdot> local.inv f) = local.inv g\n\ngoal (1 subgoal):\n 1. local.inv g = f \\<cdot> local.inv (g \\<cdot> f)", "finally"], ["proof (chain)\npicking this:\n  f \\<cdot> local.inv (g \\<cdot> f) = local.inv g", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<cdot> local.inv (g \\<cdot> f) = local.inv g\n\ngoal (1 subgoal):\n 1. local.inv g = f \\<cdot> local.inv (g \\<cdot> f)", "by simp"], ["proof (state)\nthis:\n  local.inv g = f \\<cdot> local.inv (g \\<cdot> f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.inv g = f \\<cdot> local.inv (g \\<cdot> f)\n\ngoal (2 subgoals):\n 1. local.inv (g \\<cdot> f) = local.inv f \\<cdot> local.inv g\n 2. local.iso g", "show \"inv (g \\<cdot> f) = inv f \\<cdot> inv g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inv (g \\<cdot> f) = local.inv f \\<cdot> local.inv g", "using assms 1 comp_cod_arr comp_assoc"], ["proof (prove)\nusing this:\n  local.iso (g \\<cdot> f)\n  local.iso f\n  local.inv g = f \\<cdot> local.inv (g \\<cdot> f)\n  \\<lbrakk>arr ?f; cod ?f = ?b\\<rbrakk> \\<Longrightarrow> ?b \\<cdot> ?f = ?f\n  (?h \\<cdot> ?g) \\<cdot> ?f = ?h \\<cdot> ?g \\<cdot> ?f\n\ngoal (1 subgoal):\n 1. local.inv (g \\<cdot> f) = local.inv f \\<cdot> local.inv g", "by (metis arr_inv cod_inv dom_comp seqI invert_side_of_triangle(1) iso_is_arr)"], ["proof (state)\nthis:\n  local.inv (g \\<cdot> f) = local.inv f \\<cdot> local.inv g\n\ngoal (1 subgoal):\n 1. local.iso g", "show \"iso g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.iso g", "using assms 1 comp_assoc inv_is_inverse"], ["proof (prove)\nusing this:\n  local.iso (g \\<cdot> f)\n  local.iso f\n  local.inv g = f \\<cdot> local.inv (g \\<cdot> f)\n  (?h \\<cdot> ?g) \\<cdot> ?f = ?h \\<cdot> ?g \\<cdot> ?f\n  local.iso ?f \\<Longrightarrow> inverse_arrows ?f (local.inv ?f)\n\ngoal (1 subgoal):\n 1. local.iso g", "by (metis arr_inv invert_side_of_triangle(2) inv_inv iso_inv_iso isos_compose)"], ["proof (state)\nthis:\n  local.iso g\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}