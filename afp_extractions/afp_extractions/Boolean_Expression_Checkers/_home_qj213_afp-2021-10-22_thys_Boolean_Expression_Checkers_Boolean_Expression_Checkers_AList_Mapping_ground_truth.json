{"file_name": "/home/qj213/afp-2021-10-22/thys/Boolean_Expression_Checkers/Boolean_Expression_Checkers_AList_Mapping.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Boolean_Expression_Checkers", "problem_names": ["lemma AList_Mapping_update: \n  \"map_of m k = None \\<Longrightarrow> Mapping.update k v (AList_Mapping.Mapping xs) = AList_Mapping.Mapping ((k,v)#xs)\"", "lemma reduce_alist_code [code, code_unfold]:\n  \"reduce (AList_Mapping.Mapping xs) t = reduce_alist xs t\"", "lemma normif_alist_code [code, code_unfold]:\n  \"normif (AList_Mapping.Mapping xs) t = normif_alist xs t\"", "lemmas empty_Mapping [code_unfold]"], "translations": [["", "lemma AList_Mapping_update: \n  \"map_of m k = None \\<Longrightarrow> Mapping.update k v (AList_Mapping.Mapping xs) = AList_Mapping.Mapping ((k,v)#xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of m k = None \\<Longrightarrow>\n    Mapping.update k v (AList_Mapping.Mapping xs) =\n    AList_Mapping.Mapping ((k, v) # xs)", "by (metis Mapping.abs_eq map_of.simps(2) prod.sel(1) prod.sel(2) update_Mapping update_conv')"], ["", "fun reduce_alist :: \"('a * bool) list \\<Rightarrow> 'a ifex \\<Rightarrow> 'a ifex\"\nwhere\n  \"reduce_alist xs (IF x t1 t2) = (case map_of xs x of\n     None \\<Rightarrow> mkIF x (reduce_alist ((x, True)#xs) t1) (reduce_alist ((x, False)#xs) t2) |\n     Some b \\<Rightarrow> reduce_alist xs (if b then t1 else t2))\" \n| \"reduce_alist _ t = t\""], ["", "primrec normif_alist :: \"('a * bool) list \\<Rightarrow> 'a ifex \\<Rightarrow> 'a ifex \\<Rightarrow> 'a ifex \\<Rightarrow> 'a ifex\" \nwhere\n  \"normif_alist xs Trueif t1 t2 = reduce_alist xs t1\" \n| \"normif_alist xs Falseif t1 t2 = reduce_alist xs t2\" \n| \"normif_alist xs (IF x t1 t2) t3 t4 = (case map_of xs x of\n    None \\<Rightarrow> mkIF x (normif_alist ((x, True)#xs) t1 t3 t4) (normif_alist ((x, False)#xs) t2 t3 t4) |\n    Some b \\<Rightarrow> if b then normif_alist xs t1 t3 t4 else normif_alist xs t2 t3 t4)\""], ["", "lemma reduce_alist_code [code, code_unfold]:\n  \"reduce (AList_Mapping.Mapping xs) t = reduce_alist xs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduce (AList_Mapping.Mapping xs) t = reduce_alist xs t", "by (induction t arbitrary: xs)\n     (auto simp: AList_Mapping_update split: option.split)"], ["", "lemma normif_alist_code [code, code_unfold]:\n  \"normif (AList_Mapping.Mapping xs) t = normif_alist xs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normif (AList_Mapping.Mapping xs) t = normif_alist xs t", "by (induction t arbitrary: xs)\n     (fastforce simp: AList_Mapping_update reduce_alist_code split: option.split)+"], ["", "lemmas empty_Mapping [code_unfold]"], ["", "end"]]}