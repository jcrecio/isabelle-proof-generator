{"file_name": "/home/qj213/afp-2021-10-22/thys/CSP_RefTK/CopyBuffer_props.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CSP_RefTK", "problem_names": ["lemma DF_COPY: \"(DF (range left \\<union> range right)) \\<sqsubseteq>\\<^sub>F\\<^sub>D COPY\"", "lemma DF_SYSTEM: \"DF UNIV \\<sqsubseteq>\\<^sub>F\\<^sub>D SYSTEM\""], "translations": [["", "lemma DF_COPY: \"(DF (range left \\<union> range right)) \\<sqsubseteq>\\<^sub>F\\<^sub>D COPY\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DF (range left \\<union> range right) \\<sqsubseteq>\\<^sub>F\\<^sub>D COPY", "apply(simp add:DF_def,rule fix_ind2, simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. adm (\\<lambda>a. a \\<sqsubseteq>\\<^sub>F\\<^sub>D COPY)\n 2. (\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow> \n        \\<bottom>) \\<sqsubseteq>\\<^sub>F\\<^sub>D\n    COPY\n 3. \\<And>x.\n       \\<lbrakk>x \\<sqsubseteq>\\<^sub>F\\<^sub>D COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow> \n            x) \\<sqsubseteq>\\<^sub>F\\<^sub>D\n        COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x) \\<sqsubseteq>\\<^sub>F\\<^sub>D\n                         COPY", "unfolding failure_divergence_refine_def"], ["proof (prove)\ngoal (3 subgoals):\n 1. adm (\\<lambda>a. a \\<le> COPY)\n 2. (\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow> \n        \\<bottom>)\n    \\<le> COPY\n 3. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. adm (\\<lambda>a. a \\<le> COPY)\n 2. (\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow> \n        \\<bottom>)\n    \\<le> COPY\n 3. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "show \"adm (\\<lambda>a. a \\<le> COPY)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adm (\\<lambda>a. a \\<le> COPY)", "by(rule le_adm, simp_all add:monofunI)"], ["proof (state)\nthis:\n  adm (\\<lambda>a. a \\<le> COPY)\n\ngoal (2 subgoals):\n 1. (\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow> \n        \\<bottom>)\n    \\<le> COPY\n 2. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow> \n        \\<bottom>)\n    \\<le> COPY\n 2. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "have 1:\"(\\<sqinter>xa\\<in> range left \\<union> range right \\<rightarrow> \\<bottom>) \\<le> (\\<sqinter>xa\\<in> range left \\<rightarrow>  \\<bottom>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow> \n        \\<bottom>)\n    \\<le> (\\<sqinter>xa\\<in>range left \\<rightarrow>  \\<bottom>)", "using mndet_subset_FD"], ["proof (prove)\nusing this:\n  ?A \\<noteq> {} \\<Longrightarrow>\n  (\\<sqinter>xa\\<in>?A \\<union> ?B \\<rightarrow>  ?P)\n  \\<le> (\\<sqinter>xa\\<in>?A \\<rightarrow>  ?P)\n\ngoal (1 subgoal):\n 1. (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow> \n        \\<bottom>)\n    \\<le> (\\<sqinter>xa\\<in>range left \\<rightarrow>  \\<bottom>)", "by (metis UNIV_I empty_iff imageI)"], ["proof (state)\nthis:\n  (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow> \n      \\<bottom>)\n  \\<le> (\\<sqinter>xa\\<in>range left \\<rightarrow>  \\<bottom>)\n\ngoal (2 subgoals):\n 1. (\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow> \n        \\<bottom>)\n    \\<le> COPY\n 2. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "have 2:\"(\\<sqinter>xa\\<in> range left \\<rightarrow>  \\<bottom>) \\<le> (left`?`x \\<rightarrow>  \\<bottom>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqinter>xa\\<in>range left \\<rightarrow>  \\<bottom>)\n    \\<le> (left`?`x \\<rightarrow> \\<bottom>)", "unfolding read_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqinter>xa\\<in>range left \\<rightarrow>  \\<bottom>)\n    \\<le> Mprefix (range left) ((\\<lambda>x. \\<bottom>) \\<circ> inv left)", "by (metis Mprefix_refines_Mndet comp_apply dual_order.antisym mono_mprefix_FD order_refl)"], ["proof (state)\nthis:\n  (\\<sqinter>xa\\<in>range left \\<rightarrow>  \\<bottom>)\n  \\<le> (left`?`x \\<rightarrow> \\<bottom>)\n\ngoal (2 subgoals):\n 1. (\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow> \n        \\<bottom>)\n    \\<le> COPY\n 2. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "show \"(\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow>  \\<bottom>) \\<le> COPY\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow> \n        \\<bottom>)\n    \\<le> COPY", "by (metis (mono_tags, lifting)  1 2 COPY_rec bot_less1 mono_read_FD order.trans)"], ["proof (state)\nthis:\n  (\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow>  \\<bottom>)\n  \\<le> COPY\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "fix P::\"'a channel process\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "assume  *: \"P \\<le> COPY\" and ** : \"(\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow>  P) \\<le> COPY\""], ["proof (state)\nthis:\n  P \\<le> COPY\n  (\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow>  P)\n  \\<le> COPY\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "have 1:\"(\\<sqinter>xa\\<in> range left \\<union> range right \\<rightarrow>  P) \\<le> (\\<sqinter>xa\\<in> range right \\<rightarrow>  P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n    \\<le> (\\<sqinter>xa\\<in>range right \\<rightarrow>  P)", "using mndet_subset_FD"], ["proof (prove)\nusing this:\n  ?A \\<noteq> {} \\<Longrightarrow>\n  (\\<sqinter>xa\\<in>?A \\<union> ?B \\<rightarrow>  ?P)\n  \\<le> (\\<sqinter>xa\\<in>?A \\<rightarrow>  ?P)\n\ngoal (1 subgoal):\n 1. (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n    \\<le> (\\<sqinter>xa\\<in>range right \\<rightarrow>  P)", "by (metis UNIV_I Un_commute empty_iff imageI)"], ["proof (state)\nthis:\n  (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n  \\<le> (\\<sqinter>xa\\<in>range right \\<rightarrow>  P)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "have 2:\"(\\<sqinter>xa\\<in> range right \\<rightarrow>  P) \\<le> (right`!`x \\<rightarrow>  P)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqinter>xa\\<in>range right \\<rightarrow>  P)\n    \\<le> (right`!`x \\<rightarrow> P)", "using mndet_subset_FD[of \"{right x}\" \"range right\"]"], ["proof (prove)\nusing this:\n  {right x} \\<noteq> {} \\<Longrightarrow>\n  (\\<sqinter>xa\\<in>{right x} \\<union> range right \\<rightarrow>  ?P)\n  \\<le> (\\<sqinter>xa\\<in>{right x} \\<rightarrow>  ?P)\n\ngoal (1 subgoal):\n 1. (\\<sqinter>xa\\<in>range right \\<rightarrow>  P)\n    \\<le> (right`!`x \\<rightarrow> P)", "by(simp add:write_def write0_def mndet_unit)"], ["proof (state)\nthis:\n  (\\<sqinter>xa\\<in>range right \\<rightarrow>  P)\n  \\<le> (right`!`?x \\<rightarrow> P)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "from 1 2"], ["proof (chain)\npicking this:\n  (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n  \\<le> (\\<sqinter>xa\\<in>range right \\<rightarrow>  P)\n  (\\<sqinter>xa\\<in>range right \\<rightarrow>  P)\n  \\<le> (right`!`?x \\<rightarrow> P)", "have ab:\"(\\<sqinter>xa\\<in> range left \\<union> range right \\<rightarrow>  P) \\<le> (right`!`x \\<rightarrow>  P)\" for x"], ["proof (prove)\nusing this:\n  (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n  \\<le> (\\<sqinter>xa\\<in>range right \\<rightarrow>  P)\n  (\\<sqinter>xa\\<in>range right \\<rightarrow>  P)\n  \\<le> (right`!`?x \\<rightarrow> P)\n\ngoal (1 subgoal):\n 1. (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n    \\<le> (right`!`x \\<rightarrow> P)", "using dual_order.trans"], ["proof (prove)\nusing this:\n  (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n  \\<le> (\\<sqinter>xa\\<in>range right \\<rightarrow>  P)\n  (\\<sqinter>xa\\<in>range right \\<rightarrow>  P)\n  \\<le> (right`!`?x \\<rightarrow> P)\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n\ngoal (1 subgoal):\n 1. (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n    \\<le> (right`!`x \\<rightarrow> P)", "by blast"], ["proof (state)\nthis:\n  (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n  \\<le> (right`!`?x \\<rightarrow> P)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "hence 3:\"(left`?`x \\<rightarrow> (\\<sqinter>xa\\<in> range left \\<union> range right \\<rightarrow>  P)) \\<le> (left`?`x \\<rightarrow>(right`!`x \\<rightarrow>  P))\""], ["proof (prove)\nusing this:\n  (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n  \\<le> (right`!`?x \\<rightarrow> P)\n\ngoal (1 subgoal):\n 1. (left`?`x \n        \\<rightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n  range right \\<rightarrow> \n                          P))\n    \\<le> (left`?`x \\<rightarrow> right`!`x \\<rightarrow> P)", "by (simp add: mono_read_FD)"], ["proof (state)\nthis:\n  (left`?`x \n      \\<rightarrow> (\\<sqinter>xa\\<in>range left \\<union>\nrange right \\<rightarrow> \n                        P))\n  \\<le> (left`?`x \\<rightarrow> right`!`x \\<rightarrow> P)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "have 4:\"\\<And>X. (\\<sqinter>xa\\<in> range left \\<union> range right \\<rightarrow> X) \\<le> (\\<sqinter>xa\\<in> range left \\<rightarrow> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  X)\n       \\<le> (\\<sqinter>xa\\<in>range left \\<rightarrow>  X)", "using mndet_subset_FD"], ["proof (prove)\nusing this:\n  ?A \\<noteq> {} \\<Longrightarrow>\n  (\\<sqinter>xa\\<in>?A \\<union> ?B \\<rightarrow>  ?P)\n  \\<le> (\\<sqinter>xa\\<in>?A \\<rightarrow>  ?P)\n\ngoal (1 subgoal):\n 1. \\<And>X.\n       (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  X)\n       \\<le> (\\<sqinter>xa\\<in>range left \\<rightarrow>  X)", "by (metis UNIV_I empty_iff imageI)"], ["proof (state)\nthis:\n  (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  ?X)\n  \\<le> (\\<sqinter>xa\\<in>range left \\<rightarrow>  ?X)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "have 5:\"\\<And>X. (\\<sqinter>xa\\<in> range left \\<rightarrow> X) \\<le> (left`?`x \\<rightarrow> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       (\\<sqinter>xa\\<in>range left \\<rightarrow>  X)\n       \\<le> (left`?`x \\<rightarrow> X)", "unfolding read_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       (\\<sqinter>xa\\<in>range left \\<rightarrow>  X)\n       \\<le> Mprefix (range left) ((\\<lambda>x. X) \\<circ> inv left)", "by (metis Mprefix_refines_Mndet comp_apply dual_order.antisym mono_mprefix_FD order_refl)"], ["proof (state)\nthis:\n  (\\<sqinter>xa\\<in>range left \\<rightarrow>  ?X1)\n  \\<le> (left`?`x \\<rightarrow> ?X1)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "from 3 4[of \"(\\<sqinter>xa\\<in> range left \\<union> range right \\<rightarrow>  P)\"] \n         5  [of \"(\\<sqinter>xa\\<in> range left \\<union> range right \\<rightarrow>  P)\"]"], ["proof (chain)\npicking this:\n  (left`?`x \n      \\<rightarrow> (\\<sqinter>xa\\<in>range left \\<union>\nrange right \\<rightarrow> \n                        P))\n  \\<le> (left`?`x \\<rightarrow> right`!`x \\<rightarrow> P)\n  (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow> \n      \\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n  \\<le> (\\<sqinter>xa\\<in>range left \\<rightarrow> \n            \\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow> \n               P)\n  (\\<sqinter>xa\\<in>range left \\<rightarrow> \n      \\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n  \\<le> (left`?`x \n            \\<rightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n      range right \\<rightarrow> \n                              P))", "have 6:\"(\\<sqinter>xa\\<in> range left \\<union> range right \\<rightarrow> \n                    (\\<sqinter>xa\\<in> range left \\<union> range right \\<rightarrow>  P)) \\<le> (left`?`x \\<rightarrow> (right`!`x \\<rightarrow>  P))\""], ["proof (prove)\nusing this:\n  (left`?`x \n      \\<rightarrow> (\\<sqinter>xa\\<in>range left \\<union>\nrange right \\<rightarrow> \n                        P))\n  \\<le> (left`?`x \\<rightarrow> right`!`x \\<rightarrow> P)\n  (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow> \n      \\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n  \\<le> (\\<sqinter>xa\\<in>range left \\<rightarrow> \n            \\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow> \n               P)\n  (\\<sqinter>xa\\<in>range left \\<rightarrow> \n      \\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n  \\<le> (left`?`x \n            \\<rightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n      range right \\<rightarrow> \n                              P))\n\ngoal (1 subgoal):\n 1. (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow> \n        \\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n    \\<le> (left`?`x \\<rightarrow> right`!`x \\<rightarrow> P)", "by (meson dual_order.trans)"], ["proof (state)\nthis:\n  (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow> \n      \\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  P)\n  \\<le> (left`?`x \\<rightarrow> right`!`x \\<rightarrow> P)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "from * **"], ["proof (chain)\npicking this:\n  P \\<le> COPY\n  (\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow>  P)\n  \\<le> COPY", "have 7:\"(left`?`x \\<rightarrow> (right`!`x \\<rightarrow>  P)) \\<le> (left`?`x \\<rightarrow> (right`!`x \\<rightarrow>  COPY))\""], ["proof (prove)\nusing this:\n  P \\<le> COPY\n  (\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow>  P)\n  \\<le> COPY\n\ngoal (1 subgoal):\n 1. (left`?`x \\<rightarrow> right`!`x \\<rightarrow> P)\n    \\<le> (left`?`x \\<rightarrow> right`!`x \\<rightarrow> COPY)", "by (simp add: mono_read_FD mono_write_FD)"], ["proof (state)\nthis:\n  (left`?`x \\<rightarrow> right`!`x \\<rightarrow> P)\n  \\<le> (left`?`x \\<rightarrow> right`!`x \\<rightarrow> COPY)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> COPY;\n        (\\<sqinter>xa\\<in>range left \\<union> range right \\<rightarrow>  x)\n        \\<le> COPY\\<rbrakk>\n       \\<Longrightarrow> (\\<sqinter>xa\\<in>range left \\<union>\n     range right \\<rightarrow> \n                             \\<sqinter>xa\\<in>range left \\<union>\n        range right \\<rightarrow> \n                                x)\n                         \\<le> COPY", "show \"(\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow>  \\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow>  P) \\<le> COPY\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow> \n        \\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow>  P)\n    \\<le> COPY", "by (metis (mono_tags, lifting) 6 7  COPY_rec dual_order.trans)"], ["proof (state)\nthis:\n  (\\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow> \n      \\<sqinter>x\\<in>range left \\<union> range right \\<rightarrow>  P)\n  \\<le> COPY\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open> ... and abstract consequences \\<close>"], ["", "corollary df_COPY: \"deadlock_free COPY\"\n      and lf_COPY: \"lifelock_free COPY\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deadlock_free COPY &&& lifelock_free COPY", "apply (meson DF_COPY DF_Univ_freeness UNIV_not_empty image_is_empty sup_eq_bot_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. lifelock_free COPY", "by (meson CHAOS_DF_refine_FD DF_COPY DF_Univ_freeness UNIV_not_empty deadlock_free_def \n            image_is_empty lifelock_free_def sup_eq_bot_iff trans_FD)"], ["", "corollary df_v2_COPY: \"deadlock_free_v2 COPY\" \n      and lf_v2_COPY: \"lifelock_free_v2 COPY\"\n      and nt_COPY: \"non_terminating COPY\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deadlock_free_v2 COPY &&& lifelock_free_v2 COPY &&& non_terminating COPY", "apply (simp add: df_COPY deadlock_free_is_deadlock_free_v2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. lifelock_free_v2 COPY\n 2. non_terminating COPY", "apply (simp add: lf_COPY lifelock_free_is_lifelock_free_v2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. non_terminating COPY", "using lf_COPY lifelock_free_is_non_terminating"], ["proof (prove)\nusing this:\n  lifelock_free COPY\n  lifelock_free ?P = non_terminating ?P\n\ngoal (1 subgoal):\n 1. non_terminating COPY", "by blast"], ["", "lemma DF_SYSTEM: \"DF UNIV \\<sqsubseteq>\\<^sub>F\\<^sub>D SYSTEM\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DF UNIV \\<sqsubseteq>\\<^sub>F\\<^sub>D SYSTEM", "using DF_subset[of \"(range left \\<union> range right)\" UNIV, simplified]\n  impl_refines_spec[THEN le_approx_implies_le_ref] DF_COPY \n  failure_divergence_refine_def trans_FD"], ["proof (prove)\nusing this:\n  DF UNIV \\<sqsubseteq>\\<^sub>F\\<^sub>D DF (range left \\<union> range right)\n  COPY \\<le> SYSTEM\n  DF (range left \\<union> range right) \\<sqsubseteq>\\<^sub>F\\<^sub>D COPY\n  ?P \\<sqsubseteq>\\<^sub>F\\<^sub>D ?Q \\<equiv> ?P \\<le> ?Q\n  \\<lbrakk>?P \\<sqsubseteq>\\<^sub>F\\<^sub>D ?Q;\n   ?Q \\<sqsubseteq>\\<^sub>F\\<^sub>D ?S\\<rbrakk>\n  \\<Longrightarrow> ?P \\<sqsubseteq>\\<^sub>F\\<^sub>D ?S\n\ngoal (1 subgoal):\n 1. DF UNIV \\<sqsubseteq>\\<^sub>F\\<^sub>D SYSTEM", "by blast"], ["", "corollary df_SYSTEM: \"deadlock_free SYSTEM\"\n      and lf_SYSTEM: \"lifelock_free SYSTEM\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deadlock_free SYSTEM &&& lifelock_free SYSTEM", "apply (simp add: DF_SYSTEM deadlock_free_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. lifelock_free SYSTEM", "using CHAOS_DF_refine_FD DF_SYSTEM lifelock_free_def trans_FD"], ["proof (prove)\nusing this:\n  CHAOS ?A \\<sqsubseteq>\\<^sub>F\\<^sub>D DF ?A\n  DF UNIV \\<sqsubseteq>\\<^sub>F\\<^sub>D SYSTEM\n  lifelock_free ?P \\<equiv> CHAOS UNIV \\<sqsubseteq>\\<^sub>F\\<^sub>D ?P\n  \\<lbrakk>?P \\<sqsubseteq>\\<^sub>F\\<^sub>D ?Q;\n   ?Q \\<sqsubseteq>\\<^sub>F\\<^sub>D ?S\\<rbrakk>\n  \\<Longrightarrow> ?P \\<sqsubseteq>\\<^sub>F\\<^sub>D ?S\n\ngoal (1 subgoal):\n 1. lifelock_free SYSTEM", "by blast"], ["", "corollary df_v2_SYSTEM: \"deadlock_free_v2 SYSTEM\" \n      and lf_v2_SYSTEM: \"lifelock_free_v2 SYSTEM\"\n      and nt_SYSTEM: \"non_terminating SYSTEM\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deadlock_free_v2 SYSTEM &&&\n    lifelock_free_v2 SYSTEM &&& non_terminating SYSTEM", "apply (simp add: df_SYSTEM deadlock_free_is_deadlock_free_v2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. lifelock_free_v2 SYSTEM\n 2. non_terminating SYSTEM", "apply (simp add: lf_SYSTEM lifelock_free_is_lifelock_free_v2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. non_terminating SYSTEM", "using lf_SYSTEM lifelock_free_is_non_terminating"], ["proof (prove)\nusing this:\n  lifelock_free SYSTEM\n  lifelock_free ?P = non_terminating ?P\n\ngoal (1 subgoal):\n 1. non_terminating SYSTEM", "by blast"], ["", "end"]]}