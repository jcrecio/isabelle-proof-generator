{"file_name": "/home/qj213/afp-2021-10-22/thys/Blue_Eyes/Blue_Eyes.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Blue_Eyes", "problem_names": ["lemma possible_sym: \"possible n p w w' = possible n p w' w\"", "lemma possible_refl: \"valid w \\<Longrightarrow> possible n p w w\"", "lemma possible_trans: \"possible n p w1 w2 \\<Longrightarrow> possible n p w2 w3 \\<Longrightarrow> possible n p w1 w3\"", "lemma try_swap_valid[simp]: \"valid (try_swap p c\\<^sub>1 c\\<^sub>2 w) = valid w\"", "lemma try_swap_eq[simp]: \"try_swap p c\\<^sub>1 c\\<^sub>2 w x = try_swap p c\\<^sub>1 c\\<^sub>2 w' x \\<longleftrightarrow> w x = w' x\"", "lemma try_swap_inv[simp]: \"try_swap p c\\<^sub>1 c\\<^sub>2 (try_swap p c\\<^sub>1 c\\<^sub>2 w) = w\"", "lemma leaves_try_swap[simp]:\n  assumes \"valid w\"\n  shows \"leaves n p (try_swap p' c\\<^sub>1 c\\<^sub>2 w) = leaves n p w\"", "lemma people_finite[simp]: \"finite (S::'person set)\"", "lemma possibleD_colors:\n  assumes \"possible n p w w'\" and \"p' \\<noteq> p\"\n  shows \"w' p' = w p'\"", "lemma blues_seen_others:\n  assumes \"w p' = blue\" and \"p \\<noteq> p'\"\n  shows \"w p = blue \\<Longrightarrow> card (blues_seen w p) = card (blues_seen w p')\"\n    and \"w p \\<noteq> blue \\<Longrightarrow> card (blues_seen w p) = Suc (card (blues_seen w p'))\"", "lemma blues_seen_same[simp]:\n  assumes \"possible n p w w'\"\n  shows \"blues_seen w' p = blues_seen w p\"", "lemma possible_blues_seen:\n  assumes \"possible n p w w'\"\n  assumes \"w p' = blue\" and \"p \\<noteq> p'\"\n  shows \"w' p = blue \\<Longrightarrow> card (blues_seen w p) = card (blues_seen w' p')\"\n    and \"w' p \\<noteq> blue \\<Longrightarrow> card (blues_seen w p) = Suc (card (blues_seen w' p'))\"", "lemma blue_leaves:\n  assumes \"w p = blue\" and \"valid w\"\n    and guru: \"w guru \\<noteq> blue\"\n  shows \"leaves n p w \\<longleftrightarrow> n \\<ge> card (blues_seen w p)\"", "theorem blue_eyes:\n  assumes \"card {p. w p = blue} = Suc n\" and \"valid w\" and \"w guru \\<noteq> blue\"\n  shows \"leaves k p w \\<longleftrightarrow> w p = blue \\<and> k \\<ge> n\""], "translations": [["", "lemma possible_sym: \"possible n p w w' = possible n p w' w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.possible n p w w' = local.possible n p w' w", "by (auto simp: possible.simps)"], ["", "text \\<open>In fact, \\<open>possible n p\\<close> is an equivalence relation:\\<close>"], ["", "lemma possible_refl: \"valid w \\<Longrightarrow> possible n p w w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.valid w \\<Longrightarrow> local.possible n p w w", "by (auto simp: possible.simps)"], ["", "lemma possible_trans: \"possible n p w1 w2 \\<Longrightarrow> possible n p w2 w3 \\<Longrightarrow> possible n p w1 w3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.possible n p w1 w2; local.possible n p w2 w3\\<rbrakk>\n    \\<Longrightarrow> local.possible n p w1 w3", "by (auto simp: possible.simps)"], ["", "section \\<open>Eye colors other than blue\\<close>"], ["", "text \\<open>Since there is no way to distinguish between the colors other than blue,\nonly the blue-eyed people will ever leave. To formalize this notion, we define\na function that takes a world and replaces the eye color of a specified person.\nThe original color is specified too, so that the transformation composes nicely\nwith the recursive hypothetical worlds of @{const possible}.\\<close>"], ["", "definition try_swap :: \"'person \\<Rightarrow> 'color \\<Rightarrow> 'color \\<Rightarrow> ('person \\<Rightarrow> 'color) \\<Rightarrow> ('person \\<Rightarrow> 'color)\" where\n  \"try_swap p c\\<^sub>1 c\\<^sub>2 w x = (if c\\<^sub>1 = blue \\<or> c\\<^sub>2 = blue \\<or> x \\<noteq> p then w x else Fun.swap c\\<^sub>1 c\\<^sub>2 id (w x))\""], ["", "lemma try_swap_valid[simp]: \"valid (try_swap p c\\<^sub>1 c\\<^sub>2 w) = valid w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.valid (local.try_swap p c\\<^sub>1 c\\<^sub>2 w) = local.valid w", "by (auto simp add: try_swap_def valid_def swap_def)"], ["", "lemma try_swap_eq[simp]: \"try_swap p c\\<^sub>1 c\\<^sub>2 w x = try_swap p c\\<^sub>1 c\\<^sub>2 w' x \\<longleftrightarrow> w x = w' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (local.try_swap p c\\<^sub>1 c\\<^sub>2 w x =\n     local.try_swap p c\\<^sub>1 c\\<^sub>2 w' x) =\n    (w x = w' x)", "by (auto simp add: try_swap_def swap_def)"], ["", "lemma try_swap_inv[simp]: \"try_swap p c\\<^sub>1 c\\<^sub>2 (try_swap p c\\<^sub>1 c\\<^sub>2 w) = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.try_swap p c\\<^sub>1 c\\<^sub>2\n     (local.try_swap p c\\<^sub>1 c\\<^sub>2 w) =\n    w", "by (rule ext) (auto simp add: try_swap_def swap_def)"], ["", "lemma leaves_try_swap[simp]:\n  assumes \"valid w\"\n  shows \"leaves n p (try_swap p' c\\<^sub>1 c\\<^sub>2 w) = leaves n p w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.leaves n p (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w) =\n    local.leaves n p w", "using assms"], ["proof (prove)\nusing this:\n  local.valid w\n\ngoal (1 subgoal):\n 1. local.leaves n p (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w) =\n    local.leaves n p w", "proof (induction n arbitrary: p w rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x p w.\n       \\<lbrakk>\\<And>y p w.\n                   \\<lbrakk>y < x; local.valid w\\<rbrakk>\n                   \\<Longrightarrow> local.leaves y p\n(local.try_swap p' c\\<^sub>1 c\\<^sub>2 w) =\n                                     local.leaves y p w;\n        local.valid w\\<rbrakk>\n       \\<Longrightarrow> local.leaves x p\n                          (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w) =\n                         local.leaves x p w", "case (less n)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < n; local.valid ?w\\<rbrakk>\n  \\<Longrightarrow> local.leaves ?y ?p\n                     (local.try_swap p' c\\<^sub>1 c\\<^sub>2 ?w) =\n                    local.leaves ?y ?p ?w\n  local.valid w\n\ngoal (1 subgoal):\n 1. \\<And>x p w.\n       \\<lbrakk>\\<And>y p w.\n                   \\<lbrakk>y < x; local.valid w\\<rbrakk>\n                   \\<Longrightarrow> local.leaves y p\n(local.try_swap p' c\\<^sub>1 c\\<^sub>2 w) =\n                                     local.leaves y p w;\n        local.valid w\\<rbrakk>\n       \\<Longrightarrow> local.leaves x p\n                          (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w) =\n                         local.leaves x p w", "have \"leaves n p w\" if \"leaves n p (try_swap p' c\\<^sub>1 c\\<^sub>2 w)\" for w"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.leaves n p w", "proof (unfold leaves.simps; rule+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w'. local.possible n p w w' \\<Longrightarrow> w' p = w p", "fix w'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w'. local.possible n p w w' \\<Longrightarrow> w' p = w p", "assume \"possible n p w w'\""], ["proof (state)\nthis:\n  local.possible n p w w'\n\ngoal (1 subgoal):\n 1. \\<And>w'. local.possible n p w w' \\<Longrightarrow> w' p = w p", "then"], ["proof (chain)\npicking this:\n  local.possible n p w w'", "have \"possible n p (try_swap p' c\\<^sub>1 c\\<^sub>2 w) (try_swap p' c\\<^sub>1 c\\<^sub>2 w')\""], ["proof (prove)\nusing this:\n  local.possible n p w w'\n\ngoal (1 subgoal):\n 1. local.possible n p (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w)\n     (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w')", "by (fastforce simp: possible.simps less.IH)"], ["proof (state)\nthis:\n  local.possible n p (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w)\n   (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w')\n\ngoal (1 subgoal):\n 1. \\<And>w'. local.possible n p w w' \\<Longrightarrow> w' p = w p", "with `leaves n p (try_swap p' c\\<^sub>1 c\\<^sub>2 w)`"], ["proof (chain)\npicking this:\n  local.leaves n p (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w)\n  local.possible n p (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w)\n   (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w')", "have \"try_swap p' c\\<^sub>1 c\\<^sub>2 w' p = try_swap p' c\\<^sub>1 c\\<^sub>2 w p\""], ["proof (prove)\nusing this:\n  local.leaves n p (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w)\n  local.possible n p (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w)\n   (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w')\n\ngoal (1 subgoal):\n 1. local.try_swap p' c\\<^sub>1 c\\<^sub>2 w' p =\n    local.try_swap p' c\\<^sub>1 c\\<^sub>2 w p", "unfolding leaves.simps"], ["proof (prove)\nusing this:\n  \\<forall>w'.\n     local.possible n p (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w)\n      w' \\<longrightarrow>\n     w' p = local.try_swap p' c\\<^sub>1 c\\<^sub>2 w p\n  local.possible n p (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w)\n   (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w')\n\ngoal (1 subgoal):\n 1. local.try_swap p' c\\<^sub>1 c\\<^sub>2 w' p =\n    local.try_swap p' c\\<^sub>1 c\\<^sub>2 w p", "by simp"], ["proof (state)\nthis:\n  local.try_swap p' c\\<^sub>1 c\\<^sub>2 w' p =\n  local.try_swap p' c\\<^sub>1 c\\<^sub>2 w p\n\ngoal (1 subgoal):\n 1. \\<And>w'. local.possible n p w w' \\<Longrightarrow> w' p = w p", "thus \"w' p = w p\""], ["proof (prove)\nusing this:\n  local.try_swap p' c\\<^sub>1 c\\<^sub>2 w' p =\n  local.try_swap p' c\\<^sub>1 c\\<^sub>2 w p\n\ngoal (1 subgoal):\n 1. w' p = w p", "by simp"], ["proof (state)\nthis:\n  w' p = w p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.leaves n p\n   (local.try_swap p' c\\<^sub>1 c\\<^sub>2 ?w) \\<Longrightarrow>\n  local.leaves n p ?w\n\ngoal (1 subgoal):\n 1. \\<And>x p w.\n       \\<lbrakk>\\<And>y p w.\n                   \\<lbrakk>y < x; local.valid w\\<rbrakk>\n                   \\<Longrightarrow> local.leaves y p\n(local.try_swap p' c\\<^sub>1 c\\<^sub>2 w) =\n                                     local.leaves y p w;\n        local.valid w\\<rbrakk>\n       \\<Longrightarrow> local.leaves x p\n                          (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w) =\n                         local.leaves x p w", "with try_swap_inv"], ["proof (chain)\npicking this:\n  local.try_swap ?p ?c\\<^sub>1 ?c\\<^sub>2\n   (local.try_swap ?p ?c\\<^sub>1 ?c\\<^sub>2 ?w) =\n  ?w\n  local.leaves n p\n   (local.try_swap p' c\\<^sub>1 c\\<^sub>2 ?w) \\<Longrightarrow>\n  local.leaves n p ?w", "show ?case"], ["proof (prove)\nusing this:\n  local.try_swap ?p ?c\\<^sub>1 ?c\\<^sub>2\n   (local.try_swap ?p ?c\\<^sub>1 ?c\\<^sub>2 ?w) =\n  ?w\n  local.leaves n p\n   (local.try_swap p' c\\<^sub>1 c\\<^sub>2 ?w) \\<Longrightarrow>\n  local.leaves n p ?w\n\ngoal (1 subgoal):\n 1. local.leaves n p (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w) =\n    local.leaves n p w", "by auto"], ["proof (state)\nthis:\n  local.leaves n p (local.try_swap p' c\\<^sub>1 c\\<^sub>2 w) =\n  local.leaves n p w\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>This lets us prove that only blue-eyed people will ever leave the island.\\<close>"], ["", "proposition only_blue_eyes_leave:\n  assumes \"leaves n p w\" and \"valid w\"\n  shows \"w p = blue\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w p = blue", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow> False", "assume \"w p \\<noteq> blue\""], ["proof (state)\nthis:\n  w p \\<noteq> blue\n\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  w p \\<noteq> blue", "obtain c where c: \"w p \\<noteq> c\"  \"c \\<noteq> blue\""], ["proof (prove)\nusing this:\n  w p \\<noteq> blue\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>w p \\<noteq> c; c \\<noteq> blue\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using colors_distinct"], ["proof (prove)\nusing this:\n  w p \\<noteq> blue\n  distinct [blue, brown, green, red]\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>w p \\<noteq> c; c \\<noteq> blue\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis distinct_length_2_or_more)"], ["proof (state)\nthis:\n  w p \\<noteq> c\n  c \\<noteq> blue\n\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow> False", "let ?w' = \"try_swap p (w p) c w\""], ["proof (state)\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow> False", "have \"possible n p w ?w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.possible n p w (local.try_swap p (w p) c w)", "using `valid w`"], ["proof (prove)\nusing this:\n  local.valid w\n\ngoal (1 subgoal):\n 1. local.possible n p w (local.try_swap p (w p) c w)", "apply (simp add: possible.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.valid w \\<Longrightarrow>\n    \\<forall>p'.\n       p' \\<noteq> p \\<longrightarrow> w p' = local.try_swap p (w p) c w p'", "by (auto simp: try_swap_def)"], ["proof (state)\nthis:\n  local.possible n p w (local.try_swap p (w p) c w)\n\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  local.possible n p w (local.try_swap p (w p) c w)\n\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow> False", "have \"?w' p \\<noteq> w p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.try_swap p (w p) c w p \\<noteq> w p", "using c `w p \\<noteq> blue`"], ["proof (prove)\nusing this:\n  w p \\<noteq> c\n  c \\<noteq> blue\n  w p \\<noteq> blue\n\ngoal (1 subgoal):\n 1. local.try_swap p (w p) c w p \\<noteq> w p", "by (auto simp: try_swap_def)"], ["proof (state)\nthis:\n  local.try_swap p (w p) c w p \\<noteq> w p\n\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  local.possible n p w (local.try_swap p (w p) c w)\n  local.try_swap p (w p) c w p \\<noteq> w p", "have \"\\<not> leaves n p w\""], ["proof (prove)\nusing this:\n  local.possible n p w (local.try_swap p (w p) c w)\n  local.try_swap p (w p) c w p \\<noteq> w p\n\ngoal (1 subgoal):\n 1. \\<not> local.leaves n p w", "by (auto simp: leaves.simps)"], ["proof (state)\nthis:\n  \\<not> local.leaves n p w\n\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  local.leaves n p w\n  local.valid w\n  \\<not> local.leaves n p w", "show False"], ["proof (prove)\nusing this:\n  local.leaves n p w\n  local.valid w\n  \\<not> local.leaves n p w\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "section \"The blue-eyed logicians\""], ["", "text \\<open>We will now consider the behavior of the logicians with blue eyes. First,\nsome simple lemmas. Reasoning about set cardinalities often requires considering infinite\nsets separately. Usefully, all sets of people are finite by assumption.\\<close>"], ["", "lemma people_finite[simp]: \"finite (S::'person set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S", "proof (rule finite_subset)"], ["proof (state)\ngoal (2 subgoals):\n 1. S \\<subseteq> ?B\n 2. finite ?B", "show \"S \\<subseteq> UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> UNIV", "by auto"], ["proof (state)\nthis:\n  S \\<subseteq> UNIV\n\ngoal (1 subgoal):\n 1. finite UNIV", "show \"finite (UNIV::'person set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite UNIV", "by fact"], ["proof (state)\nthis:\n  finite UNIV\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Secondly, we prove a destruction rule for @{const possible}. It is strictly weaker than\nthe definition, but thanks to the simpler form, it's easier to guide the automation with it.\\<close>"], ["", "lemma possibleD_colors:\n  assumes \"possible n p w w'\" and \"p' \\<noteq> p\"\n  shows \"w' p' = w p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w' p' = w p'", "using assms"], ["proof (prove)\nusing this:\n  local.possible n p w w'\n  p' \\<noteq> p\n\ngoal (1 subgoal):\n 1. w' p' = w p'", "unfolding possible.simps"], ["proof (prove)\nusing this:\n  local.valid w \\<and>\n  local.valid w' \\<and>\n  (\\<forall>p'. p' \\<noteq> p \\<longrightarrow> w p' = w' p') \\<and>\n  (\\<forall>n'<n. \\<forall>p'. local.leaves n' p' w = local.leaves n' p' w')\n  p' \\<noteq> p\n\ngoal (1 subgoal):\n 1. w' p' = w p'", "by simp"], ["", "text \\<open>A central concept in the reasoning is the set of blue-eyed people someone can see.\\<close>"], ["", "definition blues_seen :: \"('person \\<Rightarrow> 'color) \\<Rightarrow> 'person \\<Rightarrow> 'person set\" where\n  \"blues_seen w p = {p'. w p' = blue} - {p}\""], ["", "lemma blues_seen_others:\n  assumes \"w p' = blue\" and \"p \\<noteq> p'\"\n  shows \"w p = blue \\<Longrightarrow> card (blues_seen w p) = card (blues_seen w p')\"\n    and \"w p \\<noteq> blue \\<Longrightarrow> card (blues_seen w p) = Suc (card (blues_seen w p'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w p = blue \\<Longrightarrow>\n     card (local.blues_seen w p) = card (local.blues_seen w p')) &&&\n    (w p \\<noteq> blue \\<Longrightarrow>\n     card (local.blues_seen w p) = Suc (card (local.blues_seen w p')))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. w p = blue \\<Longrightarrow>\n    card (local.blues_seen w p) = card (local.blues_seen w p')\n 2. w p \\<noteq> blue \\<Longrightarrow>\n    card (local.blues_seen w p) = Suc (card (local.blues_seen w p'))", "assume \"w p = blue\""], ["proof (state)\nthis:\n  w p = blue\n\ngoal (2 subgoals):\n 1. w p = blue \\<Longrightarrow>\n    card (local.blues_seen w p) = card (local.blues_seen w p')\n 2. w p \\<noteq> blue \\<Longrightarrow>\n    card (local.blues_seen w p) = Suc (card (local.blues_seen w p'))", "then"], ["proof (chain)\npicking this:\n  w p = blue", "have \"blues_seen w p' = blues_seen w p \\<union> {p} - {p'}\""], ["proof (prove)\nusing this:\n  w p = blue\n\ngoal (1 subgoal):\n 1. local.blues_seen w p' = local.blues_seen w p \\<union> {p} - {p'}", "by (auto simp add: blues_seen_def)"], ["proof (state)\nthis:\n  local.blues_seen w p' = local.blues_seen w p \\<union> {p} - {p'}\n\ngoal (2 subgoals):\n 1. w p = blue \\<Longrightarrow>\n    card (local.blues_seen w p) = card (local.blues_seen w p')\n 2. w p \\<noteq> blue \\<Longrightarrow>\n    card (local.blues_seen w p) = Suc (card (local.blues_seen w p'))", "moreover"], ["proof (state)\nthis:\n  local.blues_seen w p' = local.blues_seen w p \\<union> {p} - {p'}\n\ngoal (2 subgoals):\n 1. w p = blue \\<Longrightarrow>\n    card (local.blues_seen w p) = card (local.blues_seen w p')\n 2. w p \\<noteq> blue \\<Longrightarrow>\n    card (local.blues_seen w p) = Suc (card (local.blues_seen w p'))", "have \"p \\<notin> blues_seen w p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<notin> local.blues_seen w p", "unfolding blues_seen_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<notin> {p'. w p' = blue} - {p}", "by auto"], ["proof (state)\nthis:\n  p \\<notin> local.blues_seen w p\n\ngoal (2 subgoals):\n 1. w p = blue \\<Longrightarrow>\n    card (local.blues_seen w p) = card (local.blues_seen w p')\n 2. w p \\<noteq> blue \\<Longrightarrow>\n    card (local.blues_seen w p) = Suc (card (local.blues_seen w p'))", "moreover"], ["proof (state)\nthis:\n  p \\<notin> local.blues_seen w p\n\ngoal (2 subgoals):\n 1. w p = blue \\<Longrightarrow>\n    card (local.blues_seen w p) = card (local.blues_seen w p')\n 2. w p \\<noteq> blue \\<Longrightarrow>\n    card (local.blues_seen w p) = Suc (card (local.blues_seen w p'))", "have \"p' \\<in> blues_seen w p \\<union> {p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p' \\<in> local.blues_seen w p \\<union> {p}", "unfolding blues_seen_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p' \\<in> {p'. w p' = blue} - {p} \\<union> {p}", "using `p \\<noteq> p'` `w p' = blue`"], ["proof (prove)\nusing this:\n  p \\<noteq> p'\n  w p' = blue\n\ngoal (1 subgoal):\n 1. p' \\<in> {p'. w p' = blue} - {p} \\<union> {p}", "by auto"], ["proof (state)\nthis:\n  p' \\<in> local.blues_seen w p \\<union> {p}\n\ngoal (2 subgoals):\n 1. w p = blue \\<Longrightarrow>\n    card (local.blues_seen w p) = card (local.blues_seen w p')\n 2. w p \\<noteq> blue \\<Longrightarrow>\n    card (local.blues_seen w p) = Suc (card (local.blues_seen w p'))", "ultimately"], ["proof (chain)\npicking this:\n  local.blues_seen w p' = local.blues_seen w p \\<union> {p} - {p'}\n  p \\<notin> local.blues_seen w p\n  p' \\<in> local.blues_seen w p \\<union> {p}", "show \"card (blues_seen w p) = card (blues_seen w p')\""], ["proof (prove)\nusing this:\n  local.blues_seen w p' = local.blues_seen w p \\<union> {p} - {p'}\n  p \\<notin> local.blues_seen w p\n  p' \\<in> local.blues_seen w p \\<union> {p}\n\ngoal (1 subgoal):\n 1. card (local.blues_seen w p) = card (local.blues_seen w p')", "by simp"], ["proof (state)\nthis:\n  card (local.blues_seen w p) = card (local.blues_seen w p')\n\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow>\n    card (local.blues_seen w p) = Suc (card (local.blues_seen w p'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow>\n    card (local.blues_seen w p) = Suc (card (local.blues_seen w p'))", "assume \"w p \\<noteq> blue\""], ["proof (state)\nthis:\n  w p \\<noteq> blue\n\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow>\n    card (local.blues_seen w p) = Suc (card (local.blues_seen w p'))", "then"], ["proof (chain)\npicking this:\n  w p \\<noteq> blue", "have \"blues_seen w p' = blues_seen w p - {p'}\""], ["proof (prove)\nusing this:\n  w p \\<noteq> blue\n\ngoal (1 subgoal):\n 1. local.blues_seen w p' = local.blues_seen w p - {p'}", "by (auto simp add: blues_seen_def)"], ["proof (state)\nthis:\n  local.blues_seen w p' = local.blues_seen w p - {p'}\n\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow>\n    card (local.blues_seen w p) = Suc (card (local.blues_seen w p'))", "moreover"], ["proof (state)\nthis:\n  local.blues_seen w p' = local.blues_seen w p - {p'}\n\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow>\n    card (local.blues_seen w p) = Suc (card (local.blues_seen w p'))", "have \"p' \\<in> blues_seen w p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p' \\<in> local.blues_seen w p", "unfolding blues_seen_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p' \\<in> {p'. w p' = blue} - {p}", "using `p \\<noteq> p'` `w p' = blue`"], ["proof (prove)\nusing this:\n  p \\<noteq> p'\n  w p' = blue\n\ngoal (1 subgoal):\n 1. p' \\<in> {p'. w p' = blue} - {p}", "by auto"], ["proof (state)\nthis:\n  p' \\<in> local.blues_seen w p\n\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow>\n    card (local.blues_seen w p) = Suc (card (local.blues_seen w p'))", "ultimately"], ["proof (chain)\npicking this:\n  local.blues_seen w p' = local.blues_seen w p - {p'}\n  p' \\<in> local.blues_seen w p", "show \"card (blues_seen w p) = Suc (card (blues_seen w p'))\""], ["proof (prove)\nusing this:\n  local.blues_seen w p' = local.blues_seen w p - {p'}\n  p' \\<in> local.blues_seen w p\n\ngoal (1 subgoal):\n 1. card (local.blues_seen w p) = Suc (card (local.blues_seen w p'))", "by (simp only: card_Suc_Diff1 people_finite)"], ["proof (state)\nthis:\n  card (local.blues_seen w p) = Suc (card (local.blues_seen w p'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma blues_seen_same[simp]:\n  assumes \"possible n p w w'\"\n  shows \"blues_seen w' p = blues_seen w p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.blues_seen w' p = local.blues_seen w p", "using assms"], ["proof (prove)\nusing this:\n  local.possible n p w w'\n\ngoal (1 subgoal):\n 1. local.blues_seen w' p = local.blues_seen w p", "by (auto simp: blues_seen_def possible.simps)"], ["", "lemma possible_blues_seen:\n  assumes \"possible n p w w'\"\n  assumes \"w p' = blue\" and \"p \\<noteq> p'\"\n  shows \"w' p = blue \\<Longrightarrow> card (blues_seen w p) = card (blues_seen w' p')\"\n    and \"w' p \\<noteq> blue \\<Longrightarrow> card (blues_seen w p) = Suc (card (blues_seen w' p'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w' p = blue \\<Longrightarrow>\n     card (local.blues_seen w p) = card (local.blues_seen w' p')) &&&\n    (w' p \\<noteq> blue \\<Longrightarrow>\n     card (local.blues_seen w p) = Suc (card (local.blues_seen w' p')))", "using possibleD_colors[OF `possible n p w w'`] and blues_seen_others assms"], ["proof (prove)\nusing this:\n  ?p' \\<noteq> p \\<Longrightarrow> w' ?p' = w ?p'\n  \\<lbrakk>?w ?p' = blue; ?p \\<noteq> ?p'; ?w ?p = blue\\<rbrakk>\n  \\<Longrightarrow> card (local.blues_seen ?w ?p) =\n                    card (local.blues_seen ?w ?p')\n  \\<lbrakk>?w ?p' = blue; ?p \\<noteq> ?p'; ?w ?p \\<noteq> blue\\<rbrakk>\n  \\<Longrightarrow> card (local.blues_seen ?w ?p) =\n                    Suc (card (local.blues_seen ?w ?p'))\n  local.possible n p w w'\n  w p' = blue\n  p \\<noteq> p'\n\ngoal (1 subgoal):\n 1. (w' p = blue \\<Longrightarrow>\n     card (local.blues_seen w p) = card (local.blues_seen w' p')) &&&\n    (w' p \\<noteq> blue \\<Longrightarrow>\n     card (local.blues_seen w p) = Suc (card (local.blues_seen w' p')))", "by (auto simp flip: blues_seen_same)"], ["", "text \\<open>Finally, the crux of the solution. We proceed by strong induction.\\<close>"], ["", "lemma blue_leaves:\n  assumes \"w p = blue\" and \"valid w\"\n    and guru: \"w guru \\<noteq> blue\"\n  shows \"leaves n p w \\<longleftrightarrow> n \\<ge> card (blues_seen w p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.leaves n p w = (card (local.blues_seen w p) \\<le> n)", "using assms"], ["proof (prove)\nusing this:\n  w p = blue\n  local.valid w\n  w guru \\<noteq> blue\n\ngoal (1 subgoal):\n 1. local.leaves n p w = (card (local.blues_seen w p) \\<le> n)", "proof (induction n arbitrary: p w rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x p w.\n       \\<lbrakk>\\<And>y p w.\n                   \\<lbrakk>y < x; w p = blue; local.valid w;\n                    w guru \\<noteq> blue\\<rbrakk>\n                   \\<Longrightarrow> local.leaves y p w =\n                                     (card (local.blues_seen w p) \\<le> y);\n        w p = blue; local.valid w; w guru \\<noteq> blue\\<rbrakk>\n       \\<Longrightarrow> local.leaves x p w =\n                         (card (local.blues_seen w p) \\<le> x)", "case (less n)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < n; ?w ?p = blue; local.valid ?w;\n   ?w guru \\<noteq> blue\\<rbrakk>\n  \\<Longrightarrow> local.leaves ?y ?p ?w =\n                    (card (local.blues_seen ?w ?p) \\<le> ?y)\n  w p = blue\n  local.valid w\n  w guru \\<noteq> blue\n\ngoal (1 subgoal):\n 1. \\<And>x p w.\n       \\<lbrakk>\\<And>y p w.\n                   \\<lbrakk>y < x; w p = blue; local.valid w;\n                    w guru \\<noteq> blue\\<rbrakk>\n                   \\<Longrightarrow> local.leaves y p w =\n                                     (card (local.blues_seen w p) \\<le> y);\n        w p = blue; local.valid w; w guru \\<noteq> blue\\<rbrakk>\n       \\<Longrightarrow> local.leaves x p w =\n                         (card (local.blues_seen w p) \\<le> x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.leaves n p w = (card (local.blues_seen w p) \\<le> n)", "proof\n    \\<comment> \\<open>First, we show that day \\<open>n\\<close> is sufficient to deduce that the eyes are blue.\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n\n 2. card (local.blues_seen w p) \\<le> n \\<Longrightarrow> local.leaves n p w", "assume \"n \\<ge> card (blues_seen w p)\""], ["proof (state)\nthis:\n  card (local.blues_seen w p) \\<le> n\n\ngoal (2 subgoals):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n\n 2. card (local.blues_seen w p) \\<le> n \\<Longrightarrow> local.leaves n p w", "have \"w' p = blue\" if \"possible n p w w'\" for w'"], ["proof (prove)\ngoal (1 subgoal):\n 1. w' p = blue", "proof (cases \"card (blues_seen w' p)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. card (local.blues_seen w' p) = 0 \\<Longrightarrow> w' p = blue\n 2. \\<And>nat.\n       card (local.blues_seen w' p) = Suc nat \\<Longrightarrow> w' p = blue", "case 0"], ["proof (state)\nthis:\n  card (local.blues_seen w' p) = 0\n\ngoal (2 subgoals):\n 1. card (local.blues_seen w' p) = 0 \\<Longrightarrow> w' p = blue\n 2. \\<And>nat.\n       card (local.blues_seen w' p) = Suc nat \\<Longrightarrow> w' p = blue", "moreover"], ["proof (state)\nthis:\n  card (local.blues_seen w' p) = 0\n\ngoal (2 subgoals):\n 1. card (local.blues_seen w' p) = 0 \\<Longrightarrow> w' p = blue\n 2. \\<And>nat.\n       card (local.blues_seen w' p) = Suc nat \\<Longrightarrow> w' p = blue", "from `possible n p w w'`"], ["proof (chain)\npicking this:\n  local.possible n p w w'", "have \"valid w'\""], ["proof (prove)\nusing this:\n  local.possible n p w w'\n\ngoal (1 subgoal):\n 1. local.valid w'", "by (simp add: possible.simps)"], ["proof (state)\nthis:\n  local.valid w'\n\ngoal (2 subgoals):\n 1. card (local.blues_seen w' p) = 0 \\<Longrightarrow> w' p = blue\n 2. \\<And>nat.\n       card (local.blues_seen w' p) = Suc nat \\<Longrightarrow> w' p = blue", "ultimately"], ["proof (chain)\npicking this:\n  card (local.blues_seen w' p) = 0\n  local.valid w'", "show \"w' p = blue\""], ["proof (prove)\nusing this:\n  card (local.blues_seen w' p) = 0\n  local.valid w'\n\ngoal (1 subgoal):\n 1. w' p = blue", "unfolding valid_def blues_seen_def"], ["proof (prove)\nusing this:\n  card ({p'. w' p' = blue} - {p}) = 0\n  \\<exists>p. p \\<noteq> guru \\<and> w' p = blue\n\ngoal (1 subgoal):\n 1. w' p = blue", "by auto"], ["proof (state)\nthis:\n  w' p = blue\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       card (local.blues_seen w' p) = Suc nat \\<Longrightarrow> w' p = blue", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       card (local.blues_seen w' p) = Suc nat \\<Longrightarrow> w' p = blue", "case (Suc k)\n      \\<comment> \\<open>We consider the behavior of somebody else, who also has blue eyes.\\<close>"], ["proof (state)\nthis:\n  card (local.blues_seen w' p) = Suc k\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       card (local.blues_seen w' p) = Suc nat \\<Longrightarrow> w' p = blue", "then"], ["proof (chain)\npicking this:\n  card (local.blues_seen w' p) = Suc k", "have \"blues_seen w' p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  card (local.blues_seen w' p) = Suc k\n\ngoal (1 subgoal):\n 1. local.blues_seen w' p \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  local.blues_seen w' p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       card (local.blues_seen w' p) = Suc nat \\<Longrightarrow> w' p = blue", "then"], ["proof (chain)\npicking this:\n  local.blues_seen w' p \\<noteq> {}", "obtain p' where \"w' p' = blue\" and \"p \\<noteq> p'\""], ["proof (prove)\nusing this:\n  local.blues_seen w' p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>p'.\n        \\<lbrakk>w' p' = blue; p \\<noteq> p'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding blues_seen_def"], ["proof (prove)\nusing this:\n  {p'. w' p' = blue} - {p} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>p'.\n        \\<lbrakk>w' p' = blue; p \\<noteq> p'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  w' p' = blue\n  p \\<noteq> p'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       card (local.blues_seen w' p) = Suc nat \\<Longrightarrow> w' p = blue", "then"], ["proof (chain)\npicking this:\n  w' p' = blue\n  p \\<noteq> p'", "have \"w p' = blue\""], ["proof (prove)\nusing this:\n  w' p' = blue\n  p \\<noteq> p'\n\ngoal (1 subgoal):\n 1. w p' = blue", "using possibleD_colors[OF `possible n p w w'`]"], ["proof (prove)\nusing this:\n  w' p' = blue\n  p \\<noteq> p'\n  ?p' \\<noteq> p \\<Longrightarrow> w' ?p' = w ?p'\n\ngoal (1 subgoal):\n 1. w p' = blue", "by simp"], ["proof (state)\nthis:\n  w p' = blue\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       card (local.blues_seen w' p) = Suc nat \\<Longrightarrow> w' p = blue", "have \"p \\<noteq> guru\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> guru", "using `w p = blue` and `w guru \\<noteq> blue`"], ["proof (prove)\nusing this:\n  w p = blue\n  w guru \\<noteq> blue\n\ngoal (1 subgoal):\n 1. p \\<noteq> guru", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> guru\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       card (local.blues_seen w' p) = Suc nat \\<Longrightarrow> w' p = blue", "hence \"w' guru \\<noteq> blue\""], ["proof (prove)\nusing this:\n  p \\<noteq> guru\n\ngoal (1 subgoal):\n 1. w' guru \\<noteq> blue", "using `w guru \\<noteq> blue` and possibleD_colors[OF `possible n p w w'`]"], ["proof (prove)\nusing this:\n  p \\<noteq> guru\n  w guru \\<noteq> blue\n  ?p' \\<noteq> p \\<Longrightarrow> w' ?p' = w ?p'\n\ngoal (1 subgoal):\n 1. w' guru \\<noteq> blue", "by simp"], ["proof (state)\nthis:\n  w' guru \\<noteq> blue\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       card (local.blues_seen w' p) = Suc nat \\<Longrightarrow> w' p = blue", "have \"valid w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.valid w'", "using `possible n p w w'`"], ["proof (prove)\nusing this:\n  local.possible n p w w'\n\ngoal (1 subgoal):\n 1. local.valid w'", "unfolding possible.simps"], ["proof (prove)\nusing this:\n  local.valid w \\<and>\n  local.valid w' \\<and>\n  (\\<forall>p'. p' \\<noteq> p \\<longrightarrow> w p' = w' p') \\<and>\n  (\\<forall>n'<n. \\<forall>p'. local.leaves n' p' w = local.leaves n' p' w')\n\ngoal (1 subgoal):\n 1. local.valid w'", "by simp"], ["proof (state)\nthis:\n  local.valid w'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       card (local.blues_seen w' p) = Suc nat \\<Longrightarrow> w' p = blue", "show \"w' p = blue\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w' p = blue", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. w' p \\<noteq> blue \\<Longrightarrow> False", "assume \"w' p \\<noteq> blue\"\n        \\<comment> \\<open>If our eyes weren't blue, then \\<open>p'\\<close> would see one blue-eyed person less than us.\\<close>"], ["proof (state)\nthis:\n  w' p \\<noteq> blue\n\ngoal (1 subgoal):\n 1. w' p \\<noteq> blue \\<Longrightarrow> False", "with possible_blues_seen[OF `possible n p w w'` `w p' = blue` `p \\<noteq> p'`]"], ["proof (chain)\npicking this:\n  w' p = blue \\<Longrightarrow>\n  card (local.blues_seen w p) = card (local.blues_seen w' p')\n  w' p \\<noteq> blue \\<Longrightarrow>\n  card (local.blues_seen w p) = Suc (card (local.blues_seen w' p'))\n  w' p \\<noteq> blue", "have *: \"card (blues_seen w p) = Suc (card (blues_seen w' p'))\""], ["proof (prove)\nusing this:\n  w' p = blue \\<Longrightarrow>\n  card (local.blues_seen w p) = card (local.blues_seen w' p')\n  w' p \\<noteq> blue \\<Longrightarrow>\n  card (local.blues_seen w p) = Suc (card (local.blues_seen w' p'))\n  w' p \\<noteq> blue\n\ngoal (1 subgoal):\n 1. card (local.blues_seen w p) = Suc (card (local.blues_seen w' p'))", "by simp\n        \\<comment> \\<open>By induction, they would've left on day \\<open>k = blues_seen w' p'\\<close>.\\<close>"], ["proof (state)\nthis:\n  card (local.blues_seen w p) = Suc (card (local.blues_seen w' p'))\n\ngoal (1 subgoal):\n 1. w' p \\<noteq> blue \\<Longrightarrow> False", "let ?k = \"card (blues_seen w' p')\""], ["proof (state)\ngoal (1 subgoal):\n 1. w' p \\<noteq> blue \\<Longrightarrow> False", "have \"?k < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (local.blues_seen w' p') < n", "using `n \\<ge> card (blues_seen w p)` and *"], ["proof (prove)\nusing this:\n  card (local.blues_seen w p) \\<le> n\n  card (local.blues_seen w p) = Suc (card (local.blues_seen w' p'))\n\ngoal (1 subgoal):\n 1. card (local.blues_seen w' p') < n", "by simp"], ["proof (state)\nthis:\n  card (local.blues_seen w' p') < n\n\ngoal (1 subgoal):\n 1. w' p \\<noteq> blue \\<Longrightarrow> False", "hence \"leaves ?k p' w'\""], ["proof (prove)\nusing this:\n  card (local.blues_seen w' p') < n\n\ngoal (1 subgoal):\n 1. local.leaves (card (local.blues_seen w' p')) p' w'", "using `valid w'` `w' p' = blue` `w' guru \\<noteq> blue`"], ["proof (prove)\nusing this:\n  card (local.blues_seen w' p') < n\n  local.valid w'\n  w' p' = blue\n  w' guru \\<noteq> blue\n\ngoal (1 subgoal):\n 1. local.leaves (card (local.blues_seen w' p')) p' w'", "by (intro less.IH[THEN iffD2]; auto)\n        \\<comment> \\<open>However, we know that actually, \\<open>p'\\<close> didn't leave that day yet.\\<close>"], ["proof (state)\nthis:\n  local.leaves (card (local.blues_seen w' p')) p' w'\n\ngoal (1 subgoal):\n 1. w' p \\<noteq> blue \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  local.leaves (card (local.blues_seen w' p')) p' w'\n\ngoal (1 subgoal):\n 1. w' p \\<noteq> blue \\<Longrightarrow> False", "have \"\\<not> leaves ?k p' w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> local.leaves (card (local.blues_seen w' p')) p' w", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. local.leaves (card (local.blues_seen w' p')) p' w \\<Longrightarrow>\n    False", "assume \"leaves ?k p' w\""], ["proof (state)\nthis:\n  local.leaves (card (local.blues_seen w' p')) p' w\n\ngoal (1 subgoal):\n 1. local.leaves (card (local.blues_seen w' p')) p' w \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  local.leaves (card (local.blues_seen w' p')) p' w", "have \"?k \\<ge> card (blues_seen w p')\""], ["proof (prove)\nusing this:\n  local.leaves (card (local.blues_seen w' p')) p' w\n\ngoal (1 subgoal):\n 1. card (local.blues_seen w p') \\<le> card (local.blues_seen w' p')", "using `?k < n` `w p' = blue` `valid w` `w guru \\<noteq> blue`"], ["proof (prove)\nusing this:\n  local.leaves (card (local.blues_seen w' p')) p' w\n  card (local.blues_seen w' p') < n\n  w p' = blue\n  local.valid w\n  w guru \\<noteq> blue\n\ngoal (1 subgoal):\n 1. card (local.blues_seen w p') \\<le> card (local.blues_seen w' p')", "by (intro less.IH[THEN iffD1]; auto)"], ["proof (state)\nthis:\n  card (local.blues_seen w p') \\<le> card (local.blues_seen w' p')\n\ngoal (1 subgoal):\n 1. local.leaves (card (local.blues_seen w' p')) p' w \\<Longrightarrow>\n    False", "have \"card (blues_seen w p) = card (blues_seen w p')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (local.blues_seen w p) = card (local.blues_seen w p')", "by (intro blues_seen_others; fact)"], ["proof (state)\nthis:\n  card (local.blues_seen w p) = card (local.blues_seen w p')\n\ngoal (1 subgoal):\n 1. local.leaves (card (local.blues_seen w' p')) p' w \\<Longrightarrow>\n    False", "with *"], ["proof (chain)\npicking this:\n  card (local.blues_seen w p) = Suc (card (local.blues_seen w' p'))\n  card (local.blues_seen w p) = card (local.blues_seen w p')", "have \"?k < card (blues_seen w p')\""], ["proof (prove)\nusing this:\n  card (local.blues_seen w p) = Suc (card (local.blues_seen w' p'))\n  card (local.blues_seen w p) = card (local.blues_seen w p')\n\ngoal (1 subgoal):\n 1. card (local.blues_seen w' p') < card (local.blues_seen w p')", "by simp"], ["proof (state)\nthis:\n  card (local.blues_seen w' p') < card (local.blues_seen w p')\n\ngoal (1 subgoal):\n 1. local.leaves (card (local.blues_seen w' p')) p' w \\<Longrightarrow>\n    False", "with `?k \\<ge> card (blues_seen w p')`"], ["proof (chain)\npicking this:\n  card (local.blues_seen w p') \\<le> card (local.blues_seen w' p')\n  card (local.blues_seen w' p') < card (local.blues_seen w p')", "show False"], ["proof (prove)\nusing this:\n  card (local.blues_seen w p') \\<le> card (local.blues_seen w' p')\n  card (local.blues_seen w' p') < card (local.blues_seen w p')\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> local.leaves (card (local.blues_seen w' p')) p' w\n\ngoal (1 subgoal):\n 1. w' p \\<noteq> blue \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> local.leaves (card (local.blues_seen w' p')) p' w\n\ngoal (1 subgoal):\n 1. w' p \\<noteq> blue \\<Longrightarrow> False", "have \"leaves ?k p' w' = leaves ?k p' w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.leaves (card (local.blues_seen w' p')) p' w' =\n    local.leaves (card (local.blues_seen w' p')) p' w", "using `possible n p w w'` `?k < n`"], ["proof (prove)\nusing this:\n  local.possible n p w w'\n  card (local.blues_seen w' p') < n\n\ngoal (1 subgoal):\n 1. local.leaves (card (local.blues_seen w' p')) p' w' =\n    local.leaves (card (local.blues_seen w' p')) p' w", "unfolding possible.simps"], ["proof (prove)\nusing this:\n  local.valid w \\<and>\n  local.valid w' \\<and>\n  (\\<forall>p'. p' \\<noteq> p \\<longrightarrow> w p' = w' p') \\<and>\n  (\\<forall>n'<n. \\<forall>p'. local.leaves n' p' w = local.leaves n' p' w')\n  card (local.blues_seen w' p') < n\n\ngoal (1 subgoal):\n 1. local.leaves (card (local.blues_seen w' p')) p' w' =\n    local.leaves (card (local.blues_seen w' p')) p' w", "by simp"], ["proof (state)\nthis:\n  local.leaves (card (local.blues_seen w' p')) p' w' =\n  local.leaves (card (local.blues_seen w' p')) p' w\n\ngoal (1 subgoal):\n 1. w' p \\<noteq> blue \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  local.leaves (card (local.blues_seen w' p')) p' w'\n  \\<not> local.leaves (card (local.blues_seen w' p')) p' w\n  local.leaves (card (local.blues_seen w' p')) p' w' =\n  local.leaves (card (local.blues_seen w' p')) p' w", "show False"], ["proof (prove)\nusing this:\n  local.leaves (card (local.blues_seen w' p')) p' w'\n  \\<not> local.leaves (card (local.blues_seen w' p')) p' w\n  local.leaves (card (local.blues_seen w' p')) p' w' =\n  local.leaves (card (local.blues_seen w' p')) p' w\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w' p = blue\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.possible n p w ?w' \\<Longrightarrow> ?w' p = blue\n\ngoal (2 subgoals):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n\n 2. card (local.blues_seen w p) \\<le> n \\<Longrightarrow> local.leaves n p w", "thus \"leaves n p w\""], ["proof (prove)\nusing this:\n  local.possible n p w ?w' \\<Longrightarrow> ?w' p = blue\n\ngoal (1 subgoal):\n 1. local.leaves n p w", "unfolding leaves.simps"], ["proof (prove)\nusing this:\n  local.possible n p w ?w' \\<Longrightarrow> ?w' p = blue\n\ngoal (1 subgoal):\n 1. \\<forall>w'. local.possible n p w w' \\<longrightarrow> w' p = w p", "using `w p = blue`"], ["proof (prove)\nusing this:\n  local.possible n p w ?w' \\<Longrightarrow> ?w' p = blue\n  w p = blue\n\ngoal (1 subgoal):\n 1. \\<forall>w'. local.possible n p w w' \\<longrightarrow> w' p = w p", "by simp"], ["proof (state)\nthis:\n  local.leaves n p w\n\ngoal (1 subgoal):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n", "next\n    \\<comment> \\<open>Then, we show that it's not possible to deduce the eye color any earlier.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n", "assume \"n < card (blues_seen w p)\"\n      \\<comment> \\<open>Consider a hypothetical world where \\<open>p\\<close> has brown eyes instead. We will prove that this\n        world is \\<open>possible\\<close>.\\<close>"], ["proof (state)\nthis:\n  n < card (local.blues_seen w p)\n\ngoal (1 subgoal):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n", "let ?w' = \"w(p := brown)\""], ["proof (state)\ngoal (1 subgoal):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n", "have \"?w' guru \\<noteq> blue\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w(p := brown)) guru \\<noteq> blue", "using `w guru \\<noteq> blue` `w p = blue`"], ["proof (prove)\nusing this:\n  w guru \\<noteq> blue\n  w p = blue\n\ngoal (1 subgoal):\n 1. (w(p := brown)) guru \\<noteq> blue", "by auto"], ["proof (state)\nthis:\n  (w(p := brown)) guru \\<noteq> blue\n\ngoal (1 subgoal):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n", "have \"valid ?w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.valid (w(p := brown))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.valid (w(p := brown))", "from `n < card (blues_seen w p)`"], ["proof (chain)\npicking this:\n  n < card (local.blues_seen w p)", "have \"card (blues_seen w p) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  n < card (local.blues_seen w p)\n\ngoal (1 subgoal):\n 1. card (local.blues_seen w p) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  card (local.blues_seen w p) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. local.valid (w(p := brown))", "hence \"blues_seen w p \\<noteq> {}\""], ["proof (prove)\nusing this:\n  card (local.blues_seen w p) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. local.blues_seen w p \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  local.blues_seen w p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. local.valid (w(p := brown))", "then"], ["proof (chain)\npicking this:\n  local.blues_seen w p \\<noteq> {}", "obtain p' where \"p' \\<in> blues_seen w p\""], ["proof (prove)\nusing this:\n  local.blues_seen w p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>p'.\n        p' \\<in> local.blues_seen w p \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p' \\<in> local.blues_seen w p\n\ngoal (1 subgoal):\n 1. local.valid (w(p := brown))", "hence \"p \\<noteq> p'\" and \"w p' = blue\""], ["proof (prove)\nusing this:\n  p' \\<in> local.blues_seen w p\n\ngoal (1 subgoal):\n 1. p \\<noteq> p' &&& w p' = blue", "by (auto simp: blues_seen_def)"], ["proof (state)\nthis:\n  p \\<noteq> p'\n  w p' = blue\n\ngoal (1 subgoal):\n 1. local.valid (w(p := brown))", "hence \"?w' p' = blue\""], ["proof (prove)\nusing this:\n  p \\<noteq> p'\n  w p' = blue\n\ngoal (1 subgoal):\n 1. (w(p := brown)) p' = blue", "by auto"], ["proof (state)\nthis:\n  (w(p := brown)) p' = blue\n\ngoal (1 subgoal):\n 1. local.valid (w(p := brown))", "with `?w' guru \\<noteq> blue`"], ["proof (chain)\npicking this:\n  (w(p := brown)) guru \\<noteq> blue\n  (w(p := brown)) p' = blue", "show \"valid ?w'\""], ["proof (prove)\nusing this:\n  (w(p := brown)) guru \\<noteq> blue\n  (w(p := brown)) p' = blue\n\ngoal (1 subgoal):\n 1. local.valid (w(p := brown))", "unfolding valid_def"], ["proof (prove)\nusing this:\n  (w(p := brown)) guru \\<noteq> blue\n  (w(p := brown)) p' = blue\n\ngoal (1 subgoal):\n 1. \\<exists>p. p \\<noteq> guru \\<and> (w(p := brown)) p = blue", "by auto"], ["proof (state)\nthis:\n  local.valid (w(p := brown))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.valid (w(p := brown))\n\ngoal (1 subgoal):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n", "moreover"], ["proof (state)\nthis:\n  local.valid (w(p := brown))\n\ngoal (1 subgoal):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n", "have \"leaves n' p' w = leaves n' p' ?w'\" if \"n' < n\" for n' p'"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.leaves n' p' w = local.leaves n' p' (w(p := brown))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.leaves n' p' w = local.leaves n' p' (w(p := brown))", "have not_leavesI: \"\\<not>leaves n' p' w'\"\n          if \"valid w'\"  \"w' guru \\<noteq> blue\" and P: \"w' p' = blue \\<Longrightarrow> n' < card (blues_seen w' p')\" for w'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> local.leaves n' p' w'", "proof (cases \"w' p' = blue\")"], ["proof (state)\ngoal (2 subgoals):\n 1. w' p' = blue \\<Longrightarrow> \\<not> local.leaves n' p' w'\n 2. w' p' \\<noteq> blue \\<Longrightarrow> \\<not> local.leaves n' p' w'", "case True"], ["proof (state)\nthis:\n  w' p' = blue\n\ngoal (2 subgoals):\n 1. w' p' = blue \\<Longrightarrow> \\<not> local.leaves n' p' w'\n 2. w' p' \\<noteq> blue \\<Longrightarrow> \\<not> local.leaves n' p' w'", "then"], ["proof (chain)\npicking this:\n  w' p' = blue", "have \"leaves n' p' w' \\<longleftrightarrow> n' \\<ge> card (blues_seen w' p')\""], ["proof (prove)\nusing this:\n  w' p' = blue\n\ngoal (1 subgoal):\n 1. local.leaves n' p' w' = (card (local.blues_seen w' p') \\<le> n')", "using less.IH `n' < n` `valid w'` `w' guru \\<noteq> blue`"], ["proof (prove)\nusing this:\n  w' p' = blue\n  \\<lbrakk>?y < n; ?w ?p = blue; local.valid ?w;\n   ?w guru \\<noteq> blue\\<rbrakk>\n  \\<Longrightarrow> local.leaves ?y ?p ?w =\n                    (card (local.blues_seen ?w ?p) \\<le> ?y)\n  n' < n\n  local.valid w'\n  w' guru \\<noteq> blue\n\ngoal (1 subgoal):\n 1. local.leaves n' p' w' = (card (local.blues_seen w' p') \\<le> n')", "by simp"], ["proof (state)\nthis:\n  local.leaves n' p' w' = (card (local.blues_seen w' p') \\<le> n')\n\ngoal (2 subgoals):\n 1. w' p' = blue \\<Longrightarrow> \\<not> local.leaves n' p' w'\n 2. w' p' \\<noteq> blue \\<Longrightarrow> \\<not> local.leaves n' p' w'", "with P[OF `w' p' = blue`]"], ["proof (chain)\npicking this:\n  n' < card (local.blues_seen w' p')\n  local.leaves n' p' w' = (card (local.blues_seen w' p') \\<le> n')", "show \"\\<not>leaves n' p' w'\""], ["proof (prove)\nusing this:\n  n' < card (local.blues_seen w' p')\n  local.leaves n' p' w' = (card (local.blues_seen w' p') \\<le> n')\n\ngoal (1 subgoal):\n 1. \\<not> local.leaves n' p' w'", "by simp"], ["proof (state)\nthis:\n  \\<not> local.leaves n' p' w'\n\ngoal (1 subgoal):\n 1. w' p' \\<noteq> blue \\<Longrightarrow> \\<not> local.leaves n' p' w'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. w' p' \\<noteq> blue \\<Longrightarrow> \\<not> local.leaves n' p' w'", "case False"], ["proof (state)\nthis:\n  w' p' \\<noteq> blue\n\ngoal (1 subgoal):\n 1. w' p' \\<noteq> blue \\<Longrightarrow> \\<not> local.leaves n' p' w'", "then"], ["proof (chain)\npicking this:\n  w' p' \\<noteq> blue", "show \"\\<not> leaves n' p' w'\""], ["proof (prove)\nusing this:\n  w' p' \\<noteq> blue\n\ngoal (1 subgoal):\n 1. \\<not> local.leaves n' p' w'", "using only_blue_eyes_leave `valid w'`"], ["proof (prove)\nusing this:\n  w' p' \\<noteq> blue\n  \\<lbrakk>local.leaves ?n ?p ?w; local.valid ?w\\<rbrakk>\n  \\<Longrightarrow> ?w ?p = blue\n  local.valid w'\n\ngoal (1 subgoal):\n 1. \\<not> local.leaves n' p' w'", "by auto"], ["proof (state)\nthis:\n  \\<not> local.leaves n' p' w'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>local.valid ?w'; ?w' guru \\<noteq> blue;\n   ?w' p' = blue \\<Longrightarrow>\n   n' < card (local.blues_seen ?w' p')\\<rbrakk>\n  \\<Longrightarrow> \\<not> local.leaves n' p' ?w'\n\ngoal (1 subgoal):\n 1. local.leaves n' p' w = local.leaves n' p' (w(p := brown))", "have \"\\<not>leaves n' p' w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> local.leaves n' p' w", "proof (intro not_leavesI)"], ["proof (state)\ngoal (3 subgoals):\n 1. local.valid w\n 2. w guru \\<noteq> blue\n 3. w p' = blue \\<Longrightarrow> n' < card (local.blues_seen w p')", "assume \"w p' = blue\""], ["proof (state)\nthis:\n  w p' = blue\n\ngoal (3 subgoals):\n 1. local.valid w\n 2. w guru \\<noteq> blue\n 3. w p' = blue \\<Longrightarrow> n' < card (local.blues_seen w p')", "with `w p = blue`"], ["proof (chain)\npicking this:\n  w p = blue\n  w p' = blue", "have \"card (blues_seen w p) = card (blues_seen w p')\""], ["proof (prove)\nusing this:\n  w p = blue\n  w p' = blue\n\ngoal (1 subgoal):\n 1. card (local.blues_seen w p) = card (local.blues_seen w p')", "apply (cases \"p = p'\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>w p = blue; w p' = blue; p \\<noteq> p'\\<rbrakk>\n    \\<Longrightarrow> card (local.blues_seen w p) =\n                      card (local.blues_seen w p')", "by (intro blues_seen_others; auto)"], ["proof (state)\nthis:\n  card (local.blues_seen w p) = card (local.blues_seen w p')\n\ngoal (3 subgoals):\n 1. local.valid w\n 2. w guru \\<noteq> blue\n 3. w p' = blue \\<Longrightarrow> n' < card (local.blues_seen w p')", "with `n' < n` and `n < card (blues_seen w p)`"], ["proof (chain)\npicking this:\n  n' < n\n  n < card (local.blues_seen w p)\n  card (local.blues_seen w p) = card (local.blues_seen w p')", "show \"n' < card (blues_seen w p')\""], ["proof (prove)\nusing this:\n  n' < n\n  n < card (local.blues_seen w p)\n  card (local.blues_seen w p) = card (local.blues_seen w p')\n\ngoal (1 subgoal):\n 1. n' < card (local.blues_seen w p')", "by simp"], ["proof (state)\nthis:\n  n' < card (local.blues_seen w p')\n\ngoal (2 subgoals):\n 1. local.valid w\n 2. w guru \\<noteq> blue", "qed fact+"], ["proof (state)\nthis:\n  \\<not> local.leaves n' p' w\n\ngoal (1 subgoal):\n 1. local.leaves n' p' w = local.leaves n' p' (w(p := brown))", "moreover"], ["proof (state)\nthis:\n  \\<not> local.leaves n' p' w\n\ngoal (1 subgoal):\n 1. local.leaves n' p' w = local.leaves n' p' (w(p := brown))", "have \"\\<not> leaves n' p' ?w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> local.leaves n' p' (w(p := brown))", "proof (intro not_leavesI)"], ["proof (state)\ngoal (3 subgoals):\n 1. local.valid (w(p := brown))\n 2. (w(p := brown)) guru \\<noteq> blue\n 3. (w(p := brown)) p' = blue \\<Longrightarrow>\n    n' < card (local.blues_seen (w(p := brown)) p')", "assume \"?w' p' = blue\""], ["proof (state)\nthis:\n  (w(p := brown)) p' = blue\n\ngoal (3 subgoals):\n 1. local.valid (w(p := brown))\n 2. (w(p := brown)) guru \\<noteq> blue\n 3. (w(p := brown)) p' = blue \\<Longrightarrow>\n    n' < card (local.blues_seen (w(p := brown)) p')", "with colors_distinct"], ["proof (chain)\npicking this:\n  distinct [blue, brown, green, red]\n  (w(p := brown)) p' = blue", "have \"p \\<noteq> p'\" and \"?w' p \\<noteq> blue\""], ["proof (prove)\nusing this:\n  distinct [blue, brown, green, red]\n  (w(p := brown)) p' = blue\n\ngoal (1 subgoal):\n 1. p \\<noteq> p' &&& (w(p := brown)) p \\<noteq> blue", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> p'\n  (w(p := brown)) p \\<noteq> blue\n\ngoal (3 subgoals):\n 1. local.valid (w(p := brown))\n 2. (w(p := brown)) guru \\<noteq> blue\n 3. (w(p := brown)) p' = blue \\<Longrightarrow>\n    n' < card (local.blues_seen (w(p := brown)) p')", "hence \"card (blues_seen ?w' p) = Suc (card (blues_seen ?w' p'))\""], ["proof (prove)\nusing this:\n  p \\<noteq> p'\n  (w(p := brown)) p \\<noteq> blue\n\ngoal (1 subgoal):\n 1. card (local.blues_seen (w(p := brown)) p) =\n    Suc (card (local.blues_seen (w(p := brown)) p'))", "using `?w' p' = blue`"], ["proof (prove)\nusing this:\n  p \\<noteq> p'\n  (w(p := brown)) p \\<noteq> blue\n  (w(p := brown)) p' = blue\n\ngoal (1 subgoal):\n 1. card (local.blues_seen (w(p := brown)) p) =\n    Suc (card (local.blues_seen (w(p := brown)) p'))", "by (intro blues_seen_others; auto)"], ["proof (state)\nthis:\n  card (local.blues_seen (w(p := brown)) p) =\n  Suc (card (local.blues_seen (w(p := brown)) p'))\n\ngoal (3 subgoals):\n 1. local.valid (w(p := brown))\n 2. (w(p := brown)) guru \\<noteq> blue\n 3. (w(p := brown)) p' = blue \\<Longrightarrow>\n    n' < card (local.blues_seen (w(p := brown)) p')", "moreover"], ["proof (state)\nthis:\n  card (local.blues_seen (w(p := brown)) p) =\n  Suc (card (local.blues_seen (w(p := brown)) p'))\n\ngoal (3 subgoals):\n 1. local.valid (w(p := brown))\n 2. (w(p := brown)) guru \\<noteq> blue\n 3. (w(p := brown)) p' = blue \\<Longrightarrow>\n    n' < card (local.blues_seen (w(p := brown)) p')", "have \"blues_seen w p = blues_seen ?w' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.blues_seen w p = local.blues_seen (w(p := brown)) p", "unfolding blues_seen_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p'. w p' = blue} - {p} = {p'. (w(p := brown)) p' = blue} - {p}", "by auto"], ["proof (state)\nthis:\n  local.blues_seen w p = local.blues_seen (w(p := brown)) p\n\ngoal (3 subgoals):\n 1. local.valid (w(p := brown))\n 2. (w(p := brown)) guru \\<noteq> blue\n 3. (w(p := brown)) p' = blue \\<Longrightarrow>\n    n' < card (local.blues_seen (w(p := brown)) p')", "ultimately"], ["proof (chain)\npicking this:\n  card (local.blues_seen (w(p := brown)) p) =\n  Suc (card (local.blues_seen (w(p := brown)) p'))\n  local.blues_seen w p = local.blues_seen (w(p := brown)) p", "show \"n' < card (blues_seen ?w' p')\""], ["proof (prove)\nusing this:\n  card (local.blues_seen (w(p := brown)) p) =\n  Suc (card (local.blues_seen (w(p := brown)) p'))\n  local.blues_seen w p = local.blues_seen (w(p := brown)) p\n\ngoal (1 subgoal):\n 1. n' < card (local.blues_seen (w(p := brown)) p')", "using `n' < n` and `n < card (blues_seen w p)`"], ["proof (prove)\nusing this:\n  card (local.blues_seen (w(p := brown)) p) =\n  Suc (card (local.blues_seen (w(p := brown)) p'))\n  local.blues_seen w p = local.blues_seen (w(p := brown)) p\n  n' < n\n  n < card (local.blues_seen w p)\n\ngoal (1 subgoal):\n 1. n' < card (local.blues_seen (w(p := brown)) p')", "by auto"], ["proof (state)\nthis:\n  n' < card (local.blues_seen (w(p := brown)) p')\n\ngoal (2 subgoals):\n 1. local.valid (w(p := brown))\n 2. (w(p := brown)) guru \\<noteq> blue", "qed fact+"], ["proof (state)\nthis:\n  \\<not> local.leaves n' p' (w(p := brown))\n\ngoal (1 subgoal):\n 1. local.leaves n' p' w = local.leaves n' p' (w(p := brown))", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> local.leaves n' p' w\n  \\<not> local.leaves n' p' (w(p := brown))", "show \"leaves n' p' w = leaves n' p' ?w'\""], ["proof (prove)\nusing this:\n  \\<not> local.leaves n' p' w\n  \\<not> local.leaves n' p' (w(p := brown))\n\ngoal (1 subgoal):\n 1. local.leaves n' p' w = local.leaves n' p' (w(p := brown))", "by simp"], ["proof (state)\nthis:\n  local.leaves n' p' w = local.leaves n' p' (w(p := brown))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?n' < n \\<Longrightarrow>\n  local.leaves ?n' ?p' w = local.leaves ?n' ?p' (w(p := brown))\n\ngoal (1 subgoal):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n", "ultimately"], ["proof (chain)\npicking this:\n  local.valid (w(p := brown))\n  ?n' < n \\<Longrightarrow>\n  local.leaves ?n' ?p' w = local.leaves ?n' ?p' (w(p := brown))", "have \"possible n p w ?w'\""], ["proof (prove)\nusing this:\n  local.valid (w(p := brown))\n  ?n' < n \\<Longrightarrow>\n  local.leaves ?n' ?p' w = local.leaves ?n' ?p' (w(p := brown))\n\ngoal (1 subgoal):\n 1. local.possible n p w (w(p := brown))", "using `valid w`"], ["proof (prove)\nusing this:\n  local.valid (w(p := brown))\n  ?n' < n \\<Longrightarrow>\n  local.leaves ?n' ?p' w = local.leaves ?n' ?p' (w(p := brown))\n  local.valid w\n\ngoal (1 subgoal):\n 1. local.possible n p w (w(p := brown))", "by (auto simp: possible.simps)"], ["proof (state)\nthis:\n  local.possible n p w (w(p := brown))\n\ngoal (1 subgoal):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n", "moreover"], ["proof (state)\nthis:\n  local.possible n p w (w(p := brown))\n\ngoal (1 subgoal):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n", "have \"?w' p \\<noteq> blue\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w(p := brown)) p \\<noteq> blue", "using colors_distinct"], ["proof (prove)\nusing this:\n  distinct [blue, brown, green, red]\n\ngoal (1 subgoal):\n 1. (w(p := brown)) p \\<noteq> blue", "by auto"], ["proof (state)\nthis:\n  (w(p := brown)) p \\<noteq> blue\n\ngoal (1 subgoal):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n", "ultimately"], ["proof (chain)\npicking this:\n  local.possible n p w (w(p := brown))\n  (w(p := brown)) p \\<noteq> blue", "have \"\\<not> leaves n p w\""], ["proof (prove)\nusing this:\n  local.possible n p w (w(p := brown))\n  (w(p := brown)) p \\<noteq> blue\n\ngoal (1 subgoal):\n 1. \\<not> local.leaves n p w", "unfolding leaves.simps"], ["proof (prove)\nusing this:\n  local.possible n p w (w(p := brown))\n  (w(p := brown)) p \\<noteq> blue\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>w'.\n               local.possible n p w w' \\<longrightarrow> w' p = w p)", "using `w p = blue`"], ["proof (prove)\nusing this:\n  local.possible n p w (w(p := brown))\n  (w(p := brown)) p \\<noteq> blue\n  w p = blue\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>w'.\n               local.possible n p w w' \\<longrightarrow> w' p = w p)", "by blast"], ["proof (state)\nthis:\n  \\<not> local.leaves n p w\n\ngoal (1 subgoal):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n", "}"], ["proof (state)\nthis:\n  n < card (local.blues_seen w p) \\<Longrightarrow>\n  \\<not> local.leaves n p w\n\ngoal (1 subgoal):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n", "then"], ["proof (chain)\npicking this:\n  n < card (local.blues_seen w p) \\<Longrightarrow>\n  \\<not> local.leaves n p w", "show \"leaves n p w \\<Longrightarrow> n \\<ge> card (blues_seen w p)\""], ["proof (prove)\nusing this:\n  n < card (local.blues_seen w p) \\<Longrightarrow>\n  \\<not> local.leaves n p w\n\ngoal (1 subgoal):\n 1. local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n", "by fastforce"], ["proof (state)\nthis:\n  local.leaves n p w \\<Longrightarrow> card (local.blues_seen w p) \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.leaves n p w = (card (local.blues_seen w p) \\<le> n)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>This can be combined into a theorem that describes the behavior of the logicians based\non the objective count of blue-eyed people, and not the count by a specific person. The xkcd\npuzzle is the instance where \\<open>n = 99\\<close>.\\<close>"], ["", "theorem blue_eyes:\n  assumes \"card {p. w p = blue} = Suc n\" and \"valid w\" and \"w guru \\<noteq> blue\"\n  shows \"leaves k p w \\<longleftrightarrow> w p = blue \\<and> k \\<ge> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.leaves k p w = (w p = blue \\<and> n \\<le> k)", "proof (cases \"w p = blue\")"], ["proof (state)\ngoal (2 subgoals):\n 1. w p = blue \\<Longrightarrow>\n    local.leaves k p w = (w p = blue \\<and> n \\<le> k)\n 2. w p \\<noteq> blue \\<Longrightarrow>\n    local.leaves k p w = (w p = blue \\<and> n \\<le> k)", "case True"], ["proof (state)\nthis:\n  w p = blue\n\ngoal (2 subgoals):\n 1. w p = blue \\<Longrightarrow>\n    local.leaves k p w = (w p = blue \\<and> n \\<le> k)\n 2. w p \\<noteq> blue \\<Longrightarrow>\n    local.leaves k p w = (w p = blue \\<and> n \\<le> k)", "with assms"], ["proof (chain)\npicking this:\n  card {p. w p = blue} = Suc n\n  local.valid w\n  w guru \\<noteq> blue\n  w p = blue", "have \"card (blues_seen w p) = n\""], ["proof (prove)\nusing this:\n  card {p. w p = blue} = Suc n\n  local.valid w\n  w guru \\<noteq> blue\n  w p = blue\n\ngoal (1 subgoal):\n 1. card (local.blues_seen w p) = n", "unfolding blues_seen_def"], ["proof (prove)\nusing this:\n  card {p. w p = blue} = Suc n\n  local.valid w\n  w guru \\<noteq> blue\n  w p = blue\n\ngoal (1 subgoal):\n 1. card ({p'. w p' = blue} - {p}) = n", "by simp"], ["proof (state)\nthis:\n  card (local.blues_seen w p) = n\n\ngoal (2 subgoals):\n 1. w p = blue \\<Longrightarrow>\n    local.leaves k p w = (w p = blue \\<and> n \\<le> k)\n 2. w p \\<noteq> blue \\<Longrightarrow>\n    local.leaves k p w = (w p = blue \\<and> n \\<le> k)", "then"], ["proof (chain)\npicking this:\n  card (local.blues_seen w p) = n", "show ?thesis"], ["proof (prove)\nusing this:\n  card (local.blues_seen w p) = n\n\ngoal (1 subgoal):\n 1. local.leaves k p w = (w p = blue \\<and> n \\<le> k)", "using `w p = blue` `valid w` `w guru \\<noteq> blue` blue_leaves"], ["proof (prove)\nusing this:\n  card (local.blues_seen w p) = n\n  w p = blue\n  local.valid w\n  w guru \\<noteq> blue\n  \\<lbrakk>?w ?p = blue; local.valid ?w; ?w guru \\<noteq> blue\\<rbrakk>\n  \\<Longrightarrow> local.leaves ?n ?p ?w =\n                    (card (local.blues_seen ?w ?p) \\<le> ?n)\n\ngoal (1 subgoal):\n 1. local.leaves k p w = (w p = blue \\<and> n \\<le> k)", "by simp"], ["proof (state)\nthis:\n  local.leaves k p w = (w p = blue \\<and> n \\<le> k)\n\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow>\n    local.leaves k p w = (w p = blue \\<and> n \\<le> k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow>\n    local.leaves k p w = (w p = blue \\<and> n \\<le> k)", "case False"], ["proof (state)\nthis:\n  w p \\<noteq> blue\n\ngoal (1 subgoal):\n 1. w p \\<noteq> blue \\<Longrightarrow>\n    local.leaves k p w = (w p = blue \\<and> n \\<le> k)", "then"], ["proof (chain)\npicking this:\n  w p \\<noteq> blue", "show ?thesis"], ["proof (prove)\nusing this:\n  w p \\<noteq> blue\n\ngoal (1 subgoal):\n 1. local.leaves k p w = (w p = blue \\<and> n \\<le> k)", "using only_blue_eyes_leave `valid w`"], ["proof (prove)\nusing this:\n  w p \\<noteq> blue\n  \\<lbrakk>local.leaves ?n ?p ?w; local.valid ?w\\<rbrakk>\n  \\<Longrightarrow> ?w ?p = blue\n  local.valid w\n\ngoal (1 subgoal):\n 1. local.leaves k p w = (w p = blue \\<and> n \\<le> k)", "by auto"], ["proof (state)\nthis:\n  local.leaves k p w = (w p = blue \\<and> n \\<le> k)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"], ["", "section \\<open>Future work\\<close>"], ["", "text \\<open>After completing this formalization, I have been made aware of epistemic logic.\nThe @{emph \\<open>possible worlds\\<close>} model in \\cref{sec:world} turns out to be quite similar\nto the usual semantics of this logic. It might be interesting to solve this puzzle within\nthe axiom system of epistemic logic, without explicit reasoning about possible worlds.\\<close>"]]}