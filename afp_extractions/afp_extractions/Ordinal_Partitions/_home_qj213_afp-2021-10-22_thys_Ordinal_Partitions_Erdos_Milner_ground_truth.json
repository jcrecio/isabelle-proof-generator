{"file_name": "/home/qj213/afp-2021-10-22/thys/Ordinal_Partitions/Erdos_Milner.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Ordinal_Partitions", "problem_names": ["theorem Erdos_Milner_aux:\n  assumes part: \"partn_lst_VWF \\<alpha> [ord_of_nat k, \\<gamma>] 2\"\n    and indec: \"indecomposable \\<alpha>\" and \"k > 1\" \"Ord \\<gamma>\" and \\<beta>: \"\\<beta> \\<in> elts \\<omega>1\"\n  shows \"partn_lst_VWF (\\<alpha>*\\<beta>) [ord_of_nat (2*k), min \\<gamma> (\\<omega>*\\<beta>)] 2\"", "theorem Erdos_Milner:\n  assumes \\<nu>: \"\\<nu> \\<in> elts \\<omega>1\"\n  shows \"partn_lst_VWF (\\<omega>\\<up>(1 + \\<nu> * ord_of_nat n)) [ord_of_nat (2^n), \\<omega>\\<up>(1+\\<nu>)] 2\""], "translations": [["", "theorem Erdos_Milner_aux:\n  assumes part: \"partn_lst_VWF \\<alpha> [ord_of_nat k, \\<gamma>] 2\"\n    and indec: \"indecomposable \\<alpha>\" and \"k > 1\" \"Ord \\<gamma>\" and \\<beta>: \"\\<beta> \\<in> elts \\<omega>1\"\n  shows \"partn_lst_VWF (\\<alpha>*\\<beta>) [ord_of_nat (2*k), min \\<gamma> (\\<omega>*\\<beta>)] 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "proof (cases \"\\<alpha>=1 \\<or> \\<beta>=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<alpha> = 1 \\<or> \\<beta> = 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2\n 2. \\<not> (\\<alpha> = 1 \\<or> \\<beta> = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "case True"], ["proof (state)\nthis:\n  \\<alpha> = 1 \\<or> \\<beta> = 0\n\ngoal (2 subgoals):\n 1. \\<alpha> = 1 \\<or> \\<beta> = 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2\n 2. \\<not> (\\<alpha> = 1 \\<or> \\<beta> = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "proof (cases \"\\<beta>=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<beta> = 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2\n 2. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "case True"], ["proof (state)\nthis:\n  \\<beta> = 0\n\ngoal (2 subgoals):\n 1. \\<beta> = 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2\n 2. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "moreover"], ["proof (state)\nthis:\n  \\<beta> = 0\n\ngoal (2 subgoals):\n 1. \\<beta> = 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2\n 2. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "have \"min \\<gamma> 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min \\<gamma> 0 = 0", "by (simp add: min_def)"], ["proof (state)\nthis:\n  min \\<gamma> 0 = 0\n\ngoal (2 subgoals):\n 1. \\<beta> = 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2\n 2. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "ultimately"], ["proof (chain)\npicking this:\n  \\<beta> = 0\n  min \\<gamma> 0 = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<beta> = 0\n  min \\<gamma> 0 = 0\n\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "by (simp add: partn_lst_triv0 [where i=1])"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<alpha> * \\<beta>)\n   [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2\n\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "case False"], ["proof (state)\nthis:\n  \\<beta> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "then"], ["proof (chain)\npicking this:\n  \\<beta> \\<noteq> 0", "obtain \"\\<alpha>=1\" \"Ord \\<beta>\""], ["proof (prove)\nusing this:\n  \\<beta> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<alpha> = 1; Ord \\<beta>\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson ON_imp_Ord Ord_\\<omega>1 True \\<beta> elts_subset_ON)"], ["proof (state)\nthis:\n  \\<alpha> = 1\n  Ord \\<beta>\n\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "then"], ["proof (chain)\npicking this:\n  \\<alpha> = 1\n  Ord \\<beta>", "obtain i where \"i < Suc (Suc 0)\" \"[ord_of_nat k, \\<gamma>] ! i \\<le> \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<alpha> = 1\n  Ord \\<beta>\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < Suc (Suc 0);\n         [ord_of_nat k, \\<gamma>] ! i \\<le> \\<alpha>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using partn_lst_VWF_nontriv [OF part]"], ["proof (prove)\nusing this:\n  \\<alpha> = 1\n  Ord \\<beta>\n  \\<lbrakk>?l = length [ord_of_nat k, \\<gamma>]; Ord \\<alpha>; 0 < ?l;\n   \\<And>i.\n      \\<lbrakk>i < ?l; [ord_of_nat k, \\<gamma>] ! i \\<le> \\<alpha>\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < Suc (Suc 0);\n         [ord_of_nat k, \\<gamma>] ! i \\<le> \\<alpha>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i < Suc (Suc 0)\n  [ord_of_nat k, \\<gamma>] ! i \\<le> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "then"], ["proof (chain)\npicking this:\n  i < Suc (Suc 0)\n  [ord_of_nat k, \\<gamma>] ! i \\<le> \\<alpha>", "have \"\\<gamma> \\<le> 1\""], ["proof (prove)\nusing this:\n  i < Suc (Suc 0)\n  [ord_of_nat k, \\<gamma>] ! i \\<le> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<le> 1", "using \\<open>\\<alpha>=1\\<close> \\<open>k > 1\\<close>"], ["proof (prove)\nusing this:\n  i < Suc (Suc 0)\n  [ord_of_nat k, \\<gamma>] ! i \\<le> \\<alpha>\n  \\<alpha> = 1\n  1 < k\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<le> 1", "by (fastforce simp: less_Suc_eq)"], ["proof (state)\nthis:\n  \\<gamma> \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "then"], ["proof (chain)\npicking this:\n  \\<gamma> \\<le> 1", "have \"min \\<gamma> (\\<omega>*\\<beta>) \\<le> 1\""], ["proof (prove)\nusing this:\n  \\<gamma> \\<le> 1\n\ngoal (1 subgoal):\n 1. min \\<gamma> (\\<omega> * \\<beta>) \\<le> 1", "by (metis Ord_1 Ord_\\<omega> Ord_linear_le Ord_mult \\<open>Ord \\<beta>\\<close> min_def order_trans)"], ["proof (state)\nthis:\n  min \\<gamma> (\\<omega> * \\<beta>) \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "moreover"], ["proof (state)\nthis:\n  min \\<gamma> (\\<omega> * \\<beta>) \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "have \"elts \\<beta> \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. elts \\<beta> \\<noteq> {}", "using False"], ["proof (prove)\nusing this:\n  \\<beta> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. elts \\<beta> \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  elts \\<beta> \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<beta> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "ultimately"], ["proof (chain)\npicking this:\n  min \\<gamma> (\\<omega> * \\<beta>) \\<le> 1\n  elts \\<beta> \\<noteq> {}", "show ?thesis"], ["proof (prove)\nusing this:\n  min \\<gamma> (\\<omega> * \\<beta>) \\<le> 1\n  elts \\<beta> \\<noteq> {}\n\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "by (auto simp: True \\<open>Ord \\<beta>\\<close> \\<open>\\<beta>\\<noteq>0\\<close> \\<open>\\<alpha>=1\\<close> intro!: partn_lst_triv1 [where i=1])"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<alpha> * \\<beta>)\n   [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<alpha> * \\<beta>)\n   [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2\n\ngoal (1 subgoal):\n 1. \\<not> (\\<alpha> = 1 \\<or> \\<beta> = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<alpha> = 1 \\<or> \\<beta> = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<alpha> = 1 \\<or> \\<beta> = 0)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<alpha> = 1 \\<or> \\<beta> = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<alpha> = 1 \\<or> \\<beta> = 0)", "have \"\\<alpha> \\<noteq> 1\" \"\\<beta> \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<not> (\\<alpha> = 1 \\<or> \\<beta> = 0)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 1 &&& \\<beta> \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  \\<alpha> \\<noteq> 1\n  \\<beta> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<alpha> = 1 \\<or> \\<beta> = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "then"], ["proof (chain)\npicking this:\n  \\<alpha> \\<noteq> 1\n  \\<beta> \\<noteq> 0", "have \"0 \\<in> elts \\<beta>\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<noteq> 1\n  \\<beta> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 \\<in> elts \\<beta>", "using Ord_\\<omega>1 Ord_in_Ord \\<beta> mem_0_Ord"], ["proof (prove)\nusing this:\n  \\<alpha> \\<noteq> 1\n  \\<beta> \\<noteq> 0\n  Ord \\<omega>1\n  \\<lbrakk>Ord ?k; ?m \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> Ord ?m\n  \\<beta> \\<in> elts \\<omega>1\n  \\<lbrakk>Ord ?k; ?k \\<noteq> 0\\<rbrakk> \\<Longrightarrow> 0 \\<in> elts ?k\n\ngoal (1 subgoal):\n 1. 0 \\<in> elts \\<beta>", "by blast"], ["proof (state)\nthis:\n  0 \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<alpha> = 1 \\<or> \\<beta> = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "proof (cases \"\\<alpha>=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<alpha> = 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2\n 2. \\<alpha> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "case True"], ["proof (state)\nthis:\n  \\<alpha> = 0\n\ngoal (2 subgoals):\n 1. \\<alpha> = 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2\n 2. \\<alpha> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "have \\<dagger>: \"[ord_of_nat (2 * k), 0] ! 1 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [ord_of_nat (2 * k), 0] ! 1 = 0", "by simp"], ["proof (state)\nthis:\n  [ord_of_nat (2 * k), 0] ! 1 = 0\n\ngoal (2 subgoals):\n 1. \\<alpha> = 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2\n 2. \\<alpha> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "using True assms"], ["proof (prove)\nusing this:\n  \\<alpha> = 0\n  partn_lst_VWF \\<alpha> [ord_of_nat k, \\<gamma>] 2\n  indecomposable \\<alpha>\n  1 < k\n  Ord \\<gamma>\n  \\<beta> \\<in> elts \\<omega>1\n\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "by (force simp: partn_lst_def nsets_empty_iff simp flip: numeral_2_eq_2 dest!: less_2_cases intro: \\<dagger>)"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<alpha> * \\<beta>)\n   [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "case False"], ["proof (state)\nthis:\n  \\<alpha> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "then"], ["proof (chain)\npicking this:\n  \\<alpha> \\<noteq> 0", "have \"\\<alpha> \\<ge> \\<omega>\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<omega> \\<le> \\<alpha>", "using indec \\<open>\\<alpha> \\<noteq> 1\\<close>"], ["proof (prove)\nusing this:\n  \\<alpha> \\<noteq> 0\n  indecomposable \\<alpha>\n  \\<alpha> \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<omega> \\<le> \\<alpha>", "by (metis Ord_\\<omega> indecomposable_is_\\<omega>_power le_oexp oexp_0_right)"], ["proof (state)\nthis:\n  \\<omega> \\<le> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "then"], ["proof (chain)\npicking this:\n  \\<omega> \\<le> \\<alpha>", "have \"\\<alpha> > 1\""], ["proof (prove)\nusing this:\n  \\<omega> \\<le> \\<alpha>\n\ngoal (1 subgoal):\n 1. 1 < \\<alpha>", "using \\<omega>_gt1 dual_order.strict_trans1"], ["proof (prove)\nusing this:\n  \\<omega> \\<le> \\<alpha>\n  1 < \\<omega>\n  \\<lbrakk>?b \\<le> ?a; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. 1 < \\<alpha>", "by blast"], ["proof (state)\nthis:\n  1 < \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<alpha> * \\<beta>)\n     [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2", "unfolding partn_lst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>[elts\n                     (\\<alpha> * \\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow>\n                   {..<length\n                        [ord_of_nat (2 * k),\n                         min \\<gamma> (\\<omega> * \\<beta>)]}.\n       \\<exists>i<length\n                   [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)].\n          \\<exists>H\\<subseteq>elts (\\<alpha> * \\<beta>).\n             tp H =\n             [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] !\n             i \\<and>\n             f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {i}", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> [elts (\\<alpha> * \\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow>\n               {..<Suc (Suc 0)} \\<Longrightarrow>\n       \\<exists>i<Suc (Suc 0).\n          \\<exists>H\\<subseteq>elts (\\<alpha> * \\<beta>).\n             tp H =\n             [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] !\n             i \\<and>\n             f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {i}", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> [elts (\\<alpha> * \\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow>\n               {..<Suc (Suc 0)} \\<Longrightarrow>\n       \\<exists>i<Suc (Suc 0).\n          \\<exists>H\\<subseteq>elts (\\<alpha> * \\<beta>).\n             tp H =\n             [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] !\n             i \\<and>\n             f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {i}", "assume \"f \\<in> [elts (\\<alpha>*\\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow> {..<Suc (Suc 0)}\""], ["proof (state)\nthis:\n  f \\<in> [elts (\\<alpha> * \\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow>\n          {..<Suc (Suc 0)}\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> [elts (\\<alpha> * \\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow>\n               {..<Suc (Suc 0)} \\<Longrightarrow>\n       \\<exists>i<Suc (Suc 0).\n          \\<exists>H\\<subseteq>elts (\\<alpha> * \\<beta>).\n             tp H =\n             [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] !\n             i \\<and>\n             f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {i}", "then"], ["proof (chain)\npicking this:\n  f \\<in> [elts (\\<alpha> * \\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow>\n          {..<Suc (Suc 0)}", "have f: \"f \\<in> [elts (\\<alpha>*\\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow> {..<2::nat}\""], ["proof (prove)\nusing this:\n  f \\<in> [elts (\\<alpha> * \\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow>\n          {..<Suc (Suc 0)}\n\ngoal (1 subgoal):\n 1. f \\<in> [elts (\\<alpha> * \\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow>\n            {..<2}", "by (simp add: eval_nat_numeral)"], ["proof (state)\nthis:\n  f \\<in> [elts (\\<alpha> * \\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow> {..<2}\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> [elts (\\<alpha> * \\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow>\n               {..<Suc (Suc 0)} \\<Longrightarrow>\n       \\<exists>i<Suc (Suc 0).\n          \\<exists>H\\<subseteq>elts (\\<alpha> * \\<beta>).\n             tp H =\n             [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] !\n             i \\<and>\n             f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {i}", "obtain ord [iff]: \"Ord \\<alpha>\" \"Ord \\<beta>\" \"Ord (\\<alpha>*\\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>Ord \\<alpha>; Ord \\<beta>; Ord (\\<alpha> * \\<beta>)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Ord_\\<omega>1 Ord_in_Ord \\<beta> indec indecomposable_imp_Ord Ord_mult"], ["proof (prove)\nusing this:\n  Ord \\<omega>1\n  \\<lbrakk>Ord ?k; ?m \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> Ord ?m\n  \\<beta> \\<in> elts \\<omega>1\n  indecomposable \\<alpha>\n  indecomposable ?\\<alpha> \\<Longrightarrow> Ord ?\\<alpha>\n  \\<lbrakk>Ord ?y; Ord ?x\\<rbrakk> \\<Longrightarrow> Ord (?x * ?y)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>Ord \\<alpha>; Ord \\<beta>; Ord (\\<alpha> * \\<beta>)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Ord \\<alpha>\n  Ord \\<beta>\n  Ord (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> [elts (\\<alpha> * \\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow>\n               {..<Suc (Suc 0)} \\<Longrightarrow>\n       \\<exists>i<Suc (Suc 0).\n          \\<exists>H\\<subseteq>elts (\\<alpha> * \\<beta>).\n             tp H =\n             [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] !\n             i \\<and>\n             f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {i}", "have *: False\n          if i [rule_format]: \"\\<forall>H. tp H = ord_of_nat (2*k) \\<longrightarrow> H \\<subseteq> elts (\\<alpha>*\\<beta>) \\<longrightarrow> \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {0}\"\n          and ii [rule_format]: \"\\<forall>H. tp H = \\<gamma> \\<longrightarrow> H \\<subseteq> elts (\\<alpha>*\\<beta>) \\<longrightarrow> \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1}\"\n          and iii [rule_format]: \"\\<forall>H. tp H = (\\<omega>*\\<beta>) \\<longrightarrow> H \\<subseteq> elts (\\<alpha>*\\<beta>) \\<longrightarrow> \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "have Ak0: \"\\<exists>X \\<in> [A]\\<^bsup>k\\<^esup>. f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\" \\<comment>\\<open>remark (8) about @{term\"A \\<subseteq> S\"}\\<close>\n          if A_\\<alpha>\\<beta>: \"A \\<subseteq> elts (\\<alpha>*\\<beta>)\" and ot: \"tp A \\<ge> \\<alpha>\" for A"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "let ?g = \"inv_into A (ordermap A VWF)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "have \"small A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small A", "using down that"], ["proof (prove)\nusing this:\n  ?Y \\<subseteq> elts ?x \\<Longrightarrow> small ?Y\n  A \\<subseteq> elts (\\<alpha> * \\<beta>)\n  \\<alpha> \\<le> tp A\n\ngoal (1 subgoal):\n 1. small A", "by auto"], ["proof (state)\nthis:\n  small A\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "then"], ["proof (chain)\npicking this:\n  small A", "have inj_g: \"inj_on ?g (elts \\<alpha>)\""], ["proof (prove)\nusing this:\n  small A\n\ngoal (1 subgoal):\n 1. inj_on (inv_into A (ordermap A VWF)) (elts \\<alpha>)", "by (meson inj_on_inv_into less_eq_V_def ordermap_surj ot subset_trans)"], ["proof (state)\nthis:\n  inj_on (inv_into A (ordermap A VWF)) (elts \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "have Aless: \"\\<And>x y. \\<lbrakk>x \\<in> A; y \\<in> A; x < y\\<rbrakk> \\<Longrightarrow> (x,y) \\<in> VWF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A; x < y\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> VWF", "by (meson Ord_in_Ord VWF_iff_Ord_less \\<open>Ord(\\<alpha>*\\<beta>)\\<close> subsetD that(1))"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A; ?x < ?y\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> VWF\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A; ?x < ?y\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> VWF", "have om_A_less: \"\\<And>x y. \\<lbrakk>x \\<in> A; y \\<in> A; x < y\\<rbrakk> \\<Longrightarrow> ordermap A VWF x < ordermap A VWF y\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A; ?x < ?y\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> VWF\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A; y \\<in> A; x < y\\<rbrakk>\n       \\<Longrightarrow> ordermap A VWF x < ordermap A VWF y", "by (auto simp: \\<open>small A\\<close> ordermap_mono_less)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A; ?x < ?y\\<rbrakk>\n  \\<Longrightarrow> ordermap A VWF ?x < ordermap A VWF ?y\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "have \\<alpha>_sub: \"elts \\<alpha> \\<subseteq> ordermap A VWF ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. elts \\<alpha> \\<subseteq> ordermap A VWF ` A", "by (metis \\<open>small A\\<close> elts_of_set less_eq_V_def ordertype_def ot replacement)"], ["proof (state)\nthis:\n  elts \\<alpha> \\<subseteq> ordermap A VWF ` A\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "have g: \"?g \\<in> elts \\<alpha> \\<rightarrow> elts (\\<alpha> * \\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_into A (ordermap A VWF)\n    \\<in> elts \\<alpha> \\<rightarrow> elts (\\<alpha> * \\<beta>)", "by (meson A_\\<alpha>\\<beta> Pi_I' \\<alpha>_sub inv_into_into subset_eq)"], ["proof (state)\nthis:\n  inv_into A (ordermap A VWF)\n  \\<in> elts \\<alpha> \\<rightarrow> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "then"], ["proof (chain)\npicking this:\n  inv_into A (ordermap A VWF)\n  \\<in> elts \\<alpha> \\<rightarrow> elts (\\<alpha> * \\<beta>)", "have fg: \"f \\<circ> (\\<lambda>X. ?g ` X) \\<in> [elts \\<alpha>]\\<^bsup>2\\<^esup> \\<rightarrow> {..<2}\""], ["proof (prove)\nusing this:\n  inv_into A (ordermap A VWF)\n  \\<in> elts \\<alpha> \\<rightarrow> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. f \\<circ> (`) (inv_into A (ordermap A VWF))\n    \\<in> [elts \\<alpha>]\\<^bsup>2\\<^esup> \\<rightarrow> {..<2}", "by (rule nsets_compose_image_funcset [OF f _ inj_g])"], ["proof (state)\nthis:\n  f \\<circ> (`) (inv_into A (ordermap A VWF))\n  \\<in> [elts \\<alpha>]\\<^bsup>2\\<^esup> \\<rightarrow> {..<2}\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "have g_less: \"?g x < ?g y\" if \"x < y\" \"x \\<in> elts \\<alpha>\" \"y \\<in> elts \\<alpha>\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_into A (ordermap A VWF) x < inv_into A (ordermap A VWF) y", "using Pi_mem [OF g]"], ["proof (prove)\nusing this:\n  ?x \\<in> elts \\<alpha> \\<Longrightarrow>\n  inv_into A (ordermap A VWF) ?x \\<in> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. inv_into A (ordermap A VWF) x < inv_into A (ordermap A VWF) y", "by (meson A_\\<alpha>\\<beta> Ord_in_Ord Ord_not_le ord \\<open>small A\\<close> dual_order.trans elts_subset_ON inv_ordermap_VWF_mono_le ot that vsubsetD)"], ["proof (state)\nthis:\n  \\<lbrakk>?x < ?y; ?x \\<in> elts \\<alpha>; ?y \\<in> elts \\<alpha>\\<rbrakk>\n  \\<Longrightarrow> inv_into A (ordermap A VWF) ?x\n                    < inv_into A (ordermap A VWF) ?y\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "obtain i H where \"i < 2\" \"H \\<subseteq> elts \\<alpha>\"\n            and ot_eq: \"tp H = [k,\\<gamma>]!i\" \"(f \\<circ> (\\<lambda>X. ?g ` X)) ` (nsets H 2) \\<subseteq> {i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i H.\n        \\<lbrakk>i < 2; H \\<subseteq> elts \\<alpha>;\n         tp H = [ord_of_nat k, \\<gamma>] ! i;\n         (f \\<circ> (`) (inv_into A (ordermap A VWF))) `\n         [H]\\<^bsup>2\\<^esup>\n         \\<subseteq> {i}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ii partn_lst_E [OF part fg]"], ["proof (prove)\nusing this:\n  \\<lbrakk>tp ?H = \\<gamma>;\n   ?H \\<subseteq> elts (\\<alpha> * \\<beta>)\\<rbrakk>\n  \\<Longrightarrow> \\<not> f ` [?H]\\<^bsup>2\\<^esup> \\<subseteq> {1}\n  \\<lbrakk>2 = length [ord_of_nat k, \\<gamma>];\n   \\<And>i H.\n      \\<lbrakk>i < 2; H \\<subseteq> elts \\<alpha>;\n       tp H = [ord_of_nat k, \\<gamma>] ! i;\n       (f \\<circ> (`) (inv_into A (ordermap A VWF))) ` [H]\\<^bsup>2\\<^esup>\n       \\<subseteq> {i}\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i H.\n        \\<lbrakk>i < 2; H \\<subseteq> elts \\<alpha>;\n         tp H = [ord_of_nat k, \\<gamma>] ! i;\n         (f \\<circ> (`) (inv_into A (ordermap A VWF))) `\n         [H]\\<^bsup>2\\<^esup>\n         \\<subseteq> {i}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: eval_nat_numeral)"], ["proof (state)\nthis:\n  i < 2\n  H \\<subseteq> elts \\<alpha>\n  tp H = [ord_of_nat k, \\<gamma>] ! i\n  (f \\<circ> (`) (inv_into A (ordermap A VWF))) ` [H]\\<^bsup>2\\<^esup>\n  \\<subseteq> {i}\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "then"], ["proof (chain)\npicking this:\n  i < 2\n  H \\<subseteq> elts \\<alpha>\n  tp H = [ord_of_nat k, \\<gamma>] ! i\n  (f \\<circ> (`) (inv_into A (ordermap A VWF))) ` [H]\\<^bsup>2\\<^esup>\n  \\<subseteq> {i}", "consider (0) \"i=0\" | (1) \"i=1\""], ["proof (prove)\nusing this:\n  i < 2\n  H \\<subseteq> elts \\<alpha>\n  tp H = [ord_of_nat k, \\<gamma>] ! i\n  (f \\<circ> (`) (inv_into A (ordermap A VWF))) ` [H]\\<^bsup>2\\<^esup>\n  \\<subseteq> {i}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = 0 \\<Longrightarrow> thesis;\n     i = 1 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by linarith"], ["proof (state)\nthis:\n  \\<lbrakk>i = 0 \\<Longrightarrow> ?thesis;\n   i = 1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>i = 0 \\<Longrightarrow> ?thesis;\n   i = 1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>i = 0 \\<Longrightarrow> ?thesis;\n   i = 1 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n 2. i = 1 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "case 0"], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n 2. i = 1 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "then"], ["proof (chain)\npicking this:\n  i = 0", "have \"f ` [inv_into A (ordermap A VWF) ` H]\\<^bsup>2\\<^esup> \\<subseteq> {0}\""], ["proof (prove)\nusing this:\n  i = 0\n\ngoal (1 subgoal):\n 1. f ` [inv_into A (ordermap A VWF) ` H]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "using ot_eq \\<open>H \\<subseteq> elts \\<alpha>\\<close> \\<alpha>_sub"], ["proof (prove)\nusing this:\n  i = 0\n  tp H = [ord_of_nat k, \\<gamma>] ! i\n  (f \\<circ> (`) (inv_into A (ordermap A VWF))) ` [H]\\<^bsup>2\\<^esup>\n  \\<subseteq> {i}\n  H \\<subseteq> elts \\<alpha>\n  elts \\<alpha> \\<subseteq> ordermap A VWF ` A\n\ngoal (1 subgoal):\n 1. f ` [inv_into A (ordermap A VWF) ` H]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "by (auto simp: nsets_def [of _ k] inj_on_inv_into elim!: nset_image_obtains)"], ["proof (state)\nthis:\n  f ` [inv_into A (ordermap A VWF) ` H]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n 2. i = 1 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "moreover"], ["proof (state)\nthis:\n  f ` [inv_into A (ordermap A VWF) ` H]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n 2. i = 1 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "have \"finite H \\<and> card H = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite H \\<and> card H = k", "using 0 ot_eq \\<open>H \\<subseteq> elts \\<alpha>\\<close> down"], ["proof (prove)\nusing this:\n  i = 0\n  tp H = [ord_of_nat k, \\<gamma>] ! i\n  (f \\<circ> (`) (inv_into A (ordermap A VWF))) ` [H]\\<^bsup>2\\<^esup>\n  \\<subseteq> {i}\n  H \\<subseteq> elts \\<alpha>\n  ?Y \\<subseteq> elts ?x \\<Longrightarrow> small ?Y\n\ngoal (1 subgoal):\n 1. finite H \\<and> card H = k", "by (simp add: finite_ordertype_eq_card)"], ["proof (state)\nthis:\n  finite H \\<and> card H = k\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n 2. i = 1 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "then"], ["proof (chain)\npicking this:\n  finite H \\<and> card H = k", "have \"inv_into A (ordermap A VWF) ` H \\<in> [A]\\<^bsup>k\\<^esup>\""], ["proof (prove)\nusing this:\n  finite H \\<and> card H = k\n\ngoal (1 subgoal):\n 1. inv_into A (ordermap A VWF) ` H \\<in> [A]\\<^bsup>k\\<^esup>", "using \\<open>H \\<subseteq> elts \\<alpha>\\<close> \\<alpha>_sub"], ["proof (prove)\nusing this:\n  finite H \\<and> card H = k\n  H \\<subseteq> elts \\<alpha>\n  elts \\<alpha> \\<subseteq> ordermap A VWF ` A\n\ngoal (1 subgoal):\n 1. inv_into A (ordermap A VWF) ` H \\<in> [A]\\<^bsup>k\\<^esup>", "by (auto simp: nsets_def [of _ k] card_image inj_on_inv_into inv_into_into)"], ["proof (state)\nthis:\n  inv_into A (ordermap A VWF) ` H \\<in> [A]\\<^bsup>k\\<^esup>\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n 2. i = 1 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "ultimately"], ["proof (chain)\npicking this:\n  f ` [inv_into A (ordermap A VWF) ` H]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n  inv_into A (ordermap A VWF) ` H \\<in> [A]\\<^bsup>k\\<^esup>", "show ?thesis"], ["proof (prove)\nusing this:\n  f ` [inv_into A (ordermap A VWF) ` H]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n  inv_into A (ordermap A VWF) ` H \\<in> [A]\\<^bsup>k\\<^esup>\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "by blast"], ["proof (state)\nthis:\n  \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n     f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "case 1"], ["proof (state)\nthis:\n  i = 1\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "have gH: \"?g ` H \\<subseteq> elts (\\<alpha> * \\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_into A (ordermap A VWF) ` H \\<subseteq> elts (\\<alpha> * \\<beta>)", "by (metis A_\\<alpha>\\<beta> \\<alpha>_sub \\<open>H \\<subseteq> elts \\<alpha>\\<close> image_subsetI inv_into_into subset_eq)"], ["proof (state)\nthis:\n  inv_into A (ordermap A VWF) ` H \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "have [simp]: \"tp (?g ` H) = tp H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tp (inv_into A (ordermap A VWF) ` H) = tp H", "by (meson \\<open>H \\<subseteq> elts \\<alpha>\\<close> ord down dual_order.trans elts_subset_ON gH g_less ordertype_VWF_inc_eq subsetD)"], ["proof (state)\nthis:\n  tp (inv_into A (ordermap A VWF) ` H) = tp H\n\ngoal (1 subgoal):\n 1. i = 1 \\<Longrightarrow>\n    \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "using ii [of \"?g ` H\"] ot_eq 1"], ["proof (prove)\nusing this:\n  \\<lbrakk>tp (inv_into A (ordermap A VWF) ` H) = \\<gamma>;\n   inv_into A (ordermap A VWF) ` H\n   \\<subseteq> elts (\\<alpha> * \\<beta>)\\<rbrakk>\n  \\<Longrightarrow> \\<not> f `\n                           [inv_into A (ordermap A VWF) `\n                            H]\\<^bsup>2\\<^esup>\n                           \\<subseteq> {1}\n  tp H = [ord_of_nat k, \\<gamma>] ! i\n  (f \\<circ> (`) (inv_into A (ordermap A VWF))) ` [H]\\<^bsup>2\\<^esup>\n  \\<subseteq> {i}\n  i = 1\n\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "apply (auto simp: gH elim!: nset_image_obtains)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>(\\<lambda>x. f (inv_into A (ordermap A VWF) ` x)) `\n                [H]\\<^bsup>2\\<^esup>\n                \\<subseteq> {Suc 0};\n        i = Suc 0; \\<gamma> = tp H;\n        \\<forall>X\\<in>[A]\\<^bsup>k\\<^esup>.\n           \\<not> f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0};\n        f xa \\<noteq> Suc 0\\<rbrakk>\n       \\<Longrightarrow> inj_on (inv_into A (ordermap A VWF)) H", "apply (meson \\<open>H \\<subseteq> elts \\<alpha>\\<close> inj_g bij_betw_def inj_on_subset)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n     f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>X\\<in>[A]\\<^bsup>k\\<^esup>.\n     f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?A \\<subseteq> elts (\\<alpha> * \\<beta>);\n   \\<alpha> \\<le> tp ?A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X\\<in>[?A]\\<^bsup>k\\<^esup>.\n                       f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n\ngoal (1 subgoal):\n 1. False", "define K where \"K \\<equiv> \\<lambda>i x. {y \\<in> elts (\\<alpha>*\\<beta>). x \\<noteq> y \\<and> f{x,y} = i}\""], ["proof (state)\nthis:\n  K \\<equiv>\n  \\<lambda>i x.\n     {y \\<in> elts (\\<alpha> * \\<beta>). x \\<noteq> y \\<and> f {x, y} = i}\n\ngoal (1 subgoal):\n 1. False", "have small_K: \"small (K i x)\" for i x"], ["proof (prove)\ngoal (1 subgoal):\n 1. small (K i x)", "by (simp add: K_def)"], ["proof (state)\nthis:\n  small (K ?i ?x)\n\ngoal (1 subgoal):\n 1. False", "define KI where \"KI \\<equiv> \\<lambda>i X. (\\<Inter>x\\<in>X. K i x)\""], ["proof (state)\nthis:\n  KI \\<equiv> \\<lambda>i X. \\<Inter> (K i ` X)\n\ngoal (1 subgoal):\n 1. False", "have KI_disj_self: \"X \\<inter> KI i X = {}\" for i X"], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<inter> KI i X = {}", "by (auto simp: KI_def K_def)"], ["proof (state)\nthis:\n  ?X \\<inter> KI ?i ?X = {}\n\ngoal (1 subgoal):\n 1. False", "define M where \"M \\<equiv> \\<lambda>D \\<AA> x. {\\<nu>::V. \\<nu> \\<in> D \\<and> tp (K 1 x \\<inter> \\<AA> \\<nu>) \\<ge> \\<alpha>}\""], ["proof (state)\nthis:\n  M \\<equiv>\n  \\<lambda>D \\<AA> x.\n     {\\<nu> \\<in> D. \\<alpha> \\<le> tp (K 1 x \\<inter> \\<AA> \\<nu>)}\n\ngoal (1 subgoal):\n 1. False", "have M_sub_D: \"M D \\<AA> x \\<subseteq> D\" for D \\<AA> x"], ["proof (prove)\ngoal (1 subgoal):\n 1. M D \\<AA> x \\<subseteq> D", "by (auto simp: M_def)"], ["proof (state)\nthis:\n  M ?D ?\\<AA> ?x \\<subseteq> ?D\n\ngoal (1 subgoal):\n 1. False", "have small_M [simp]: \"small (M D \\<AA> x)\" if \"small D\" for D \\<AA> x"], ["proof (prove)\ngoal (1 subgoal):\n 1. small (M D \\<AA> x)", "by (simp add: M_def that)"], ["proof (state)\nthis:\n  small ?D \\<Longrightarrow> small (M ?D ?\\<AA> ?x)\n\ngoal (1 subgoal):\n 1. False", "have 9: \"tp {x \\<in> A. tp (M D \\<AA> x) \\<ge> tp D} \\<ge> \\<alpha>\" (is \"ordertype ?AD _ \\<ge> \\<alpha>\")\n          if inD: \"indecomposable (tp D)\" and D: \"D \\<subseteq> elts \\<beta>\" and A: \"A \\<subseteq> elts (\\<alpha>*\\<beta>)\" and tpA: \"tp A = \\<alpha>\"\n            and \\<AA>: \"\\<AA> \\<in> D \\<rightarrow> {X. X \\<subseteq> elts (\\<alpha>*\\<beta>) \\<and> tp X = \\<alpha>}\"  for D A \\<AA>\n            \\<comment>\\<open>remark (9), assuming an indecomposable order type\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "define A' where \"A' \\<equiv> {x \\<in> A. \\<not> tp (M D \\<AA> x) \\<ge> tp D}\""], ["proof (state)\nthis:\n  A' \\<equiv> {x \\<in> A. \\<not> tp D \\<le> tp (M D \\<AA> x)}\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "have small [iff]: \"small A\" \"small D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small A &&& small D", "using A D down"], ["proof (prove)\nusing this:\n  A \\<subseteq> elts (\\<alpha> * \\<beta>)\n  D \\<subseteq> elts \\<beta>\n  ?Y \\<subseteq> elts ?x \\<Longrightarrow> small ?Y\n\ngoal (1 subgoal):\n 1. small A &&& small D", "by (auto simp: M_def)"], ["proof (state)\nthis:\n  small A\n  small D\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "have small_\\<AA>: \"small (\\<AA> \\<delta>)\" if \"\\<delta> \\<in> D\" for \\<delta>"], ["proof (prove)\ngoal (1 subgoal):\n 1. small (\\<AA> \\<delta>)", "using that \\<AA>"], ["proof (prove)\nusing this:\n  \\<delta> \\<in> D\n  \\<AA>\n  \\<in> D \\<rightarrow>\n        {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp X = \\<alpha>}\n\ngoal (1 subgoal):\n 1. small (\\<AA> \\<delta>)", "by (auto simp: Pi_iff subset_iff_less_eq_V)"], ["proof (state)\nthis:\n  ?\\<delta> \\<in> D \\<Longrightarrow> small (\\<AA> ?\\<delta>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "assume not_\\<alpha>_le: \"\\<not> \\<alpha> \\<le> tp {x \\<in> A. tp (M D \\<AA> x) \\<ge> tp D}\""], ["proof (state)\nthis:\n  \\<not> \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<not> \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "obtain \"small A\" \"small A'\" \"A' \\<subseteq> A\" and A'_sub: \"A' \\<subseteq> elts (\\<alpha> * \\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>small A; small A'; A' \\<subseteq> A;\n      A' \\<subseteq> elts (\\<alpha> * \\<beta>)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using A'_def A down"], ["proof (prove)\nusing this:\n  A' \\<equiv> {x \\<in> A. \\<not> tp D \\<le> tp (M D \\<AA> x)}\n  A \\<subseteq> elts (\\<alpha> * \\<beta>)\n  ?Y \\<subseteq> elts ?x \\<Longrightarrow> small ?Y\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>small A; small A'; A' \\<subseteq> A;\n      A' \\<subseteq> elts (\\<alpha> * \\<beta>)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  small A\n  small A'\n  A' \\<subseteq> A\n  A' \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  small A\n  small A'\n  A' \\<subseteq> A\n  A' \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "have \"A' = A - ?AD\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' = A - {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "by (force simp: A'_def)"], ["proof (state)\nthis:\n  A' = A - {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}\n  small A\n  small A'\n  A' \\<subseteq> A\n  A' \\<subseteq> elts (\\<alpha> * \\<beta>)\n  A' = A - {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "have A'_ge: \"tp A' \\<ge> \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<not> \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}\n  small A\n  small A'\n  A' \\<subseteq> A\n  A' \\<subseteq> elts (\\<alpha> * \\<beta>)\n  A' = A - {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp A'", "by (metis (no_types, lifting) dual_order.refl indec indecomposable_ordertype_eq mem_Collect_eq subsetI tpA)"], ["proof (state)\nthis:\n  \\<alpha> \\<le> tp A'\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "obtain X where \"X \\<subseteq> A'\" \"finite X\" \"card X = k\" and fX0: \"f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>X.\n        \\<lbrakk>X \\<subseteq> A'; finite X; card X = k;\n         f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Ak0 [OF A'_sub A'_ge]"], ["proof (prove)\nusing this:\n  \\<exists>X\\<in>[A']\\<^bsup>k\\<^esup>.\n     f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n\ngoal (1 subgoal):\n 1. (\\<And>X.\n        \\<lbrakk>X \\<subseteq> A'; finite X; card X = k;\n         f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: nsets_def [of _ k])"], ["proof (state)\nthis:\n  X \\<subseteq> A'\n  finite X\n  card X = k\n  f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  X \\<subseteq> A'\n  finite X\n  card X = k\n  f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "have \\<ddagger>: \"\\<not> tp (M D \\<AA> x) \\<ge> tp D\" if \"x \\<in> X\" for x"], ["proof (prove)\nusing this:\n  X \\<subseteq> A'\n  finite X\n  card X = k\n  f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n\ngoal (1 subgoal):\n 1. \\<not> tp D \\<le> tp (M D \\<AA> x)", "using that"], ["proof (prove)\nusing this:\n  X \\<subseteq> A'\n  finite X\n  card X = k\n  f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<not> tp D \\<le> tp (M D \\<AA> x)", "by (auto simp: A'_def)"], ["proof (state)\nthis:\n  ?x \\<in> X \\<Longrightarrow> \\<not> tp D \\<le> tp (M D \\<AA> ?x)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "obtain x where \"x \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> X \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using \\<open>card X = k\\<close> \\<open>k>1\\<close>"], ["proof (prove)\nusing this:\n  card X = k\n  1 < k\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> X \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "have \"\\<not> D \\<subseteq> (\\<Union> x\\<in>X. M D \\<AA> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> D \\<subseteq> \\<Union> (M D \\<AA> ` X)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. D \\<subseteq> \\<Union> (M D \\<AA> ` X) \\<Longrightarrow> False", "assume not: \"D \\<subseteq> (\\<Union>x\\<in>X. M D \\<AA> x)\""], ["proof (state)\nthis:\n  D \\<subseteq> \\<Union> (M D \\<AA> ` X)\n\ngoal (1 subgoal):\n 1. D \\<subseteq> \\<Union> (M D \\<AA> ` X) \\<Longrightarrow> False", "have \"\\<exists>X\\<in>M D \\<AA> ` X. tp D \\<le> tp X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>M D \\<AA> ` X. tp D \\<le> tp X", "proof (rule indecomposable_ordertype_finite_ge [OF inD])"], ["proof (state)\ngoal (5 subgoals):\n 1. finite (M D \\<AA> ` X)\n 2. ?A \\<subseteq> \\<Union> (M D \\<AA> ` X)\n 3. M D \\<AA> ` X \\<noteq> {}\n 4. tp D \\<le> tp ?A\n 5. small (\\<Union> (M D \\<AA> ` X))", "show \"M D \\<AA> ` X \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M D \\<AA> ` X \\<noteq> {}", "using A'_def A'_ge not not_\\<alpha>_le"], ["proof (prove)\nusing this:\n  A' \\<equiv> {x \\<in> A. \\<not> tp D \\<le> tp (M D \\<AA> x)}\n  \\<alpha> \\<le> tp A'\n  D \\<subseteq> \\<Union> (M D \\<AA> ` X)\n  \\<not> \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}\n\ngoal (1 subgoal):\n 1. M D \\<AA> ` X \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  M D \\<AA> ` X \\<noteq> {}\n\ngoal (4 subgoals):\n 1. finite (M D \\<AA> ` X)\n 2. ?A \\<subseteq> \\<Union> (M D \\<AA> ` X)\n 3. tp D \\<le> tp ?A\n 4. small (\\<Union> (M D \\<AA> ` X))", "show \"small (\\<Union> (M D \\<AA> ` X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small (\\<Union> (M D \\<AA> ` X))", "using \\<open>finite X\\<close>"], ["proof (prove)\nusing this:\n  finite X\n\ngoal (1 subgoal):\n 1. small (\\<Union> (M D \\<AA> ` X))", "by (simp add: finite_imp_small)"], ["proof (state)\nthis:\n  small (\\<Union> (M D \\<AA> ` X))\n\ngoal (3 subgoals):\n 1. finite (M D \\<AA> ` X)\n 2. ?A \\<subseteq> \\<Union> (M D \\<AA> ` X)\n 3. tp D \\<le> tp ?A", "qed (use \\<open>finite X\\<close> not in auto)"], ["proof (state)\nthis:\n  \\<exists>X\\<in>M D \\<AA> ` X. tp D \\<le> tp X\n\ngoal (1 subgoal):\n 1. D \\<subseteq> \\<Union> (M D \\<AA> ` X) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>X\\<in>M D \\<AA> ` X. tp D \\<le> tp X", "show False"], ["proof (prove)\nusing this:\n  \\<exists>X\\<in>M D \\<AA> ` X. tp D \\<le> tp X\n\ngoal (1 subgoal):\n 1. False", "by (simp add: \\<ddagger>)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> D \\<subseteq> \\<Union> (M D \\<AA> ` X)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> D \\<subseteq> \\<Union> (M D \\<AA> ` X)", "obtain \\<nu> where \"\\<nu> \\<in> D\" and \\<nu>: \"\\<nu> \\<notin> (\\<Union> x\\<in>X. M D \\<AA> x)\""], ["proof (prove)\nusing this:\n  \\<not> D \\<subseteq> \\<Union> (M D \\<AA> ` X)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<nu>.\n        \\<lbrakk>\\<nu> \\<in> D;\n         \\<nu> \\<notin> \\<Union> (M D \\<AA> ` X)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<nu> \\<in> D\n  \\<nu> \\<notin> \\<Union> (M D \\<AA> ` X)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "define \\<A> where \"\\<A> \\<equiv> {KI 0 X \\<inter> \\<AA> \\<nu>, \\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>, X \\<inter> \\<AA> \\<nu>}\""], ["proof (state)\nthis:\n  \\<A> \\<equiv>\n  {KI 0 X \\<inter> \\<AA> \\<nu>, \\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>,\n   X \\<inter> \\<AA> \\<nu>}\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "have \\<alpha>\\<beta>: \"X \\<subseteq> elts (\\<alpha>*\\<beta>)\" \"\\<AA> \\<nu> \\<subseteq> elts (\\<alpha>*\\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> elts (\\<alpha> * \\<beta>) &&&\n    \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)", "using A'_sub \\<open>X \\<subseteq> A'\\<close> \\<AA> \\<open>\\<nu> \\<in> D\\<close>"], ["proof (prove)\nusing this:\n  A' \\<subseteq> elts (\\<alpha> * \\<beta>)\n  X \\<subseteq> A'\n  \\<AA>\n  \\<in> D \\<rightarrow>\n        {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp X = \\<alpha>}\n  \\<nu> \\<in> D\n\ngoal (1 subgoal):\n 1. X \\<subseteq> elts (\\<alpha> * \\<beta>) &&&\n    \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)", "by auto"], ["proof (state)\nthis:\n  X \\<subseteq> elts (\\<alpha> * \\<beta>)\n  \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  X \\<subseteq> elts (\\<alpha> * \\<beta>)\n  \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)", "have \"KI 0 X \\<union> (\\<Union>x\\<in>X. K 1 x) \\<union> X = elts (\\<alpha>*\\<beta>)\""], ["proof (prove)\nusing this:\n  X \\<subseteq> elts (\\<alpha> * \\<beta>)\n  \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. KI 0 X \\<union> \\<Union> (K 1 ` X) \\<union> X =\n    elts (\\<alpha> * \\<beta>)", "using \\<open>x \\<in> X\\<close> f"], ["proof (prove)\nusing this:\n  X \\<subseteq> elts (\\<alpha> * \\<beta>)\n  \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  x \\<in> X\n  f \\<in> [elts (\\<alpha> * \\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow> {..<2}\n\ngoal (1 subgoal):\n 1. KI 0 X \\<union> \\<Union> (K 1 ` X) \\<union> X =\n    elts (\\<alpha> * \\<beta>)", "by (force simp: K_def KI_def Pi_iff less_2_cases_iff)"], ["proof (state)\nthis:\n  KI 0 X \\<union> \\<Union> (K 1 ` X) \\<union> X = elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "with \\<alpha>\\<beta>"], ["proof (chain)\npicking this:\n  X \\<subseteq> elts (\\<alpha> * \\<beta>)\n  \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  KI 0 X \\<union> \\<Union> (K 1 ` X) \\<union> X = elts (\\<alpha> * \\<beta>)", "have \\<AA>\\<nu>_\\<A>: \"finite \\<A>\" \"\\<AA> \\<nu> \\<subseteq> \\<Union>\\<A>\""], ["proof (prove)\nusing this:\n  X \\<subseteq> elts (\\<alpha> * \\<beta>)\n  \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  KI 0 X \\<union> \\<Union> (K 1 ` X) \\<union> X = elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. finite \\<A> &&& \\<AA> \\<nu> \\<subseteq> \\<Union> \\<A>", "by (auto simp: \\<A>_def)"], ["proof (state)\nthis:\n  finite \\<A>\n  \\<AA> \\<nu> \\<subseteq> \\<Union> \\<A>\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  finite \\<A>\n  \\<AA> \\<nu> \\<subseteq> \\<Union> \\<A>", "have \"\\<not> tp (K 1 x \\<inter> \\<AA> \\<nu>) \\<ge> \\<alpha>\" if \"x \\<in> X\" for x"], ["proof (prove)\nusing this:\n  finite \\<A>\n  \\<AA> \\<nu> \\<subseteq> \\<Union> \\<A>\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha> \\<le> tp (K 1 x \\<inter> \\<AA> \\<nu>)", "using that \\<open>\\<nu> \\<in> D\\<close> \\<nu> \\<open>k > 1\\<close> \\<open>card X = k\\<close>"], ["proof (prove)\nusing this:\n  finite \\<A>\n  \\<AA> \\<nu> \\<subseteq> \\<Union> \\<A>\n  x \\<in> X\n  \\<nu> \\<in> D\n  \\<nu> \\<notin> \\<Union> (M D \\<AA> ` X)\n  1 < k\n  card X = k\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha> \\<le> tp (K 1 x \\<inter> \\<AA> \\<nu>)", "by (fastforce simp: M_def)"], ["proof (state)\nthis:\n  ?x \\<in> X \\<Longrightarrow>\n  \\<not> \\<alpha> \\<le> tp (K 1 ?x \\<inter> \\<AA> \\<nu>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  ?x \\<in> X \\<Longrightarrow>\n  \\<not> \\<alpha> \\<le> tp (K 1 ?x \\<inter> \\<AA> \\<nu>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "have sm_K1: \"small (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>)", "by (meson Finite_V Int_lower2 \\<open>\\<nu> \\<in> D\\<close> \\<open>finite X\\<close> small_\\<AA> small_UN smaller_than_small)"], ["proof (state)\nthis:\n  small (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  ?x \\<in> X \\<Longrightarrow>\n  \\<not> \\<alpha> \\<le> tp (K 1 ?x \\<inter> \\<AA> \\<nu>)\n  small (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>)", "have not1: \"\\<not> tp (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>) \\<ge> \\<alpha>\""], ["proof (prove)\nusing this:\n  ?x \\<in> X \\<Longrightarrow>\n  \\<not> \\<alpha> \\<le> tp (K 1 ?x \\<inter> \\<AA> \\<nu>)\n  small (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha> \\<le> tp (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>)", "using \\<open>finite X\\<close> \\<open>x \\<in> X\\<close> indecomposable_ordertype_finite_ge [OF indec, of \"(\\<lambda>x. K 1 x \\<inter> \\<AA> \\<nu>) ` X\"]"], ["proof (prove)\nusing this:\n  ?x \\<in> X \\<Longrightarrow>\n  \\<not> \\<alpha> \\<le> tp (K 1 ?x \\<inter> \\<AA> \\<nu>)\n  small (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>)\n  finite X\n  x \\<in> X\n  \\<lbrakk>finite ((\\<lambda>x. K 1 x \\<inter> \\<AA> \\<nu>) ` X);\n   ?A \\<subseteq> (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>);\n   (\\<lambda>x. K 1 x \\<inter> \\<AA> \\<nu>) ` X \\<noteq> {};\n   \\<alpha> \\<le> tp ?A;\n   small (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X\\<in>(\\<lambda>x.\n K 1 x \\<inter> \\<AA> \\<nu>) `\n                                   X.\n                       \\<alpha> \\<le> tp X\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha> \\<le> tp (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>)", "by blast"], ["proof (state)\nthis:\n  \\<not> \\<alpha> \\<le> tp (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<not> \\<alpha> \\<le> tp (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "have \"\\<not> tp (X \\<inter> \\<AA> \\<nu>) \\<ge> \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<alpha> \\<le> tp (X \\<inter> \\<AA> \\<nu>)", "using \\<open>finite X\\<close> \\<open>\\<alpha> \\<ge> \\<omega>\\<close>"], ["proof (prove)\nusing this:\n  finite X\n  \\<omega> \\<le> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha> \\<le> tp (X \\<inter> \\<AA> \\<nu>)", "by (meson finite_Int mem_not_refl ordertype_VWF_\\<omega> vsubsetD)"], ["proof (state)\nthis:\n  \\<not> \\<alpha> \\<le> tp (X \\<inter> \\<AA> \\<nu>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<not> \\<alpha> \\<le> tp (X \\<inter> \\<AA> \\<nu>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "have \"\\<alpha> \\<le> tp (\\<AA> \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp (\\<AA> \\<nu>)", "using \\<AA> \\<open>\\<nu> \\<in> D\\<close> small_\\<AA>"], ["proof (prove)\nusing this:\n  \\<AA>\n  \\<in> D \\<rightarrow>\n        {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp X = \\<alpha>}\n  \\<nu> \\<in> D\n  ?\\<delta> \\<in> D \\<Longrightarrow> small (\\<AA> ?\\<delta>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp (\\<AA> \\<nu>)", "by fastforce+"], ["proof (state)\nthis:\n  \\<alpha> \\<le> tp (\\<AA> \\<nu>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<alpha> \\<le> tp (\\<AA> \\<nu>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "have \"small (\\<Union> \\<A>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small (\\<Union> \\<A>)", "using \\<open>\\<nu> \\<in> D\\<close> small_\\<AA>"], ["proof (prove)\nusing this:\n  \\<nu> \\<in> D\n  ?\\<delta> \\<in> D \\<Longrightarrow> small (\\<AA> ?\\<delta>)\n\ngoal (1 subgoal):\n 1. small (\\<Union> \\<A>)", "by (fastforce simp: \\<A>_def intro: smaller_than_small sm_K1)"], ["proof (state)\nthis:\n  small (\\<Union> \\<A>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> \\<alpha> \\<le> tp (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>)\n  \\<not> \\<alpha> \\<le> tp (X \\<inter> \\<AA> \\<nu>)\n  \\<alpha> \\<le> tp (\\<AA> \\<nu>)\n  small (\\<Union> \\<A>)", "have K0\\<AA>_ge: \"tp (KI 0 X \\<inter> \\<AA> \\<nu>) \\<ge> \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<not> \\<alpha> \\<le> tp (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>)\n  \\<not> \\<alpha> \\<le> tp (X \\<inter> \\<AA> \\<nu>)\n  \\<alpha> \\<le> tp (\\<AA> \\<nu>)\n  small (\\<Union> \\<A>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp (KI 0 X \\<inter> \\<AA> \\<nu>)", "using indecomposable_ordertype_finite_ge [OF indec \\<AA>\\<nu>_\\<A>]"], ["proof (prove)\nusing this:\n  \\<not> \\<alpha> \\<le> tp (\\<Union>x\\<in>X. K 1 x \\<inter> \\<AA> \\<nu>)\n  \\<not> \\<alpha> \\<le> tp (X \\<inter> \\<AA> \\<nu>)\n  \\<alpha> \\<le> tp (\\<AA> \\<nu>)\n  small (\\<Union> \\<A>)\n  \\<lbrakk>\\<A> \\<noteq> {}; \\<alpha> \\<le> tp (\\<AA> \\<nu>);\n   small (\\<Union> \\<A>)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>X\\<in>\\<A>. \\<alpha> \\<le> tp X\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp (KI 0 X \\<inter> \\<AA> \\<nu>)", "by (auto simp: \\<A>_def)"], ["proof (state)\nthis:\n  \\<alpha> \\<le> tp (KI 0 X \\<inter> \\<AA> \\<nu>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "have \\<AA>\\<nu>: \"\\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\" \"tp (\\<AA> \\<nu>) = \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>) &&&\n    tp (\\<AA> \\<nu>) = \\<alpha>", "using \\<open>\\<nu> \\<in> D\\<close> \\<AA>"], ["proof (prove)\nusing this:\n  \\<nu> \\<in> D\n  \\<AA>\n  \\<in> D \\<rightarrow>\n        {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp X = \\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>) &&&\n    tp (\\<AA> \\<nu>) = \\<alpha>", "by blast+"], ["proof (state)\nthis:\n  \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp (\\<AA> \\<nu>) = \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp (\\<AA> \\<nu>) = \\<alpha>", "obtain Y where Ysub: \"Y \\<subseteq> KI 0 X \\<inter> \\<AA> \\<nu>\" and \"finite Y\" \"card Y = k\" and fY0: \"f ` [Y]\\<^bsup>2\\<^esup> \\<subseteq> {0}\""], ["proof (prove)\nusing this:\n  \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp (\\<AA> \\<nu>) = \\<alpha>\n\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        \\<lbrakk>Y \\<subseteq> KI 0 X \\<inter> \\<AA> \\<nu>; finite Y;\n         card Y = k; f ` [Y]\\<^bsup>2\\<^esup> \\<subseteq> {0}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Ak0 [OF _ K0\\<AA>_ge]"], ["proof (prove)\nusing this:\n  \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp (\\<AA> \\<nu>) = \\<alpha>\n  KI 0 X \\<inter> \\<AA> \\<nu>\n  \\<subseteq> elts (\\<alpha> * \\<beta>) \\<Longrightarrow>\n  \\<exists>X\\<in>[KI 0 X \\<inter> \\<AA> \\<nu>]\\<^bsup>k\\<^esup>.\n     f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        \\<lbrakk>Y \\<subseteq> KI 0 X \\<inter> \\<AA> \\<nu>; finite Y;\n         card Y = k; f ` [Y]\\<^bsup>2\\<^esup> \\<subseteq> {0}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: nsets_def [of _ k])"], ["proof (state)\nthis:\n  Y \\<subseteq> KI 0 X \\<inter> \\<AA> \\<nu>\n  finite Y\n  card Y = k\n  f ` [Y]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "have \\<dagger>: \"X \\<inter> Y = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<inter> Y = {}", "using Ysub KI_disj_self"], ["proof (prove)\nusing this:\n  Y \\<subseteq> KI 0 X \\<inter> \\<AA> \\<nu>\n  ?X \\<inter> KI ?i ?X = {}\n\ngoal (1 subgoal):\n 1. X \\<inter> Y = {}", "by blast"], ["proof (state)\nthis:\n  X \\<inter> Y = {}\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  X \\<inter> Y = {}", "have \"card (X \\<union> Y) = 2*k\""], ["proof (prove)\nusing this:\n  X \\<inter> Y = {}\n\ngoal (1 subgoal):\n 1. card (X \\<union> Y) = 2 * k", "by (simp add: \\<open>card X = k\\<close> \\<open>card Y = k\\<close> \\<open>finite X\\<close> \\<open>finite Y\\<close> card_Un_disjoint)"], ["proof (state)\nthis:\n  card (X \\<union> Y) = 2 * k\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  card (X \\<union> Y) = 2 * k\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "have \"X \\<union> Y \\<subseteq> elts (\\<alpha> * \\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<union> Y \\<subseteq> elts (\\<alpha> * \\<beta>)", "using A'_sub \\<open>X \\<subseteq> A'\\<close> \\<AA>\\<nu>(1) \\<open>Y \\<subseteq> KI 0 X \\<inter> \\<AA> \\<nu>\\<close>"], ["proof (prove)\nusing this:\n  A' \\<subseteq> elts (\\<alpha> * \\<beta>)\n  X \\<subseteq> A'\n  \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  Y \\<subseteq> KI 0 X \\<inter> \\<AA> \\<nu>\n\ngoal (1 subgoal):\n 1. X \\<union> Y \\<subseteq> elts (\\<alpha> * \\<beta>)", "by auto"], ["proof (state)\nthis:\n  X \\<union> Y \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  X \\<union> Y \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "have \"f ` [X \\<union> Y]\\<^bsup>2\\<^esup> \\<subseteq> {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` [X \\<union> Y]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "using fX0 fY0 Ysub"], ["proof (prove)\nusing this:\n  f ` [X]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n  f ` [Y]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n  Y \\<subseteq> KI 0 X \\<inter> \\<AA> \\<nu>\n\ngoal (1 subgoal):\n 1. f ` [X \\<union> Y]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "by (auto simp: \\<dagger> nsets_disjoint_2 image_Un image_UN KI_def K_def)"], ["proof (state)\nthis:\n  f ` [X \\<union> Y]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n\ngoal (1 subgoal):\n 1. \\<not> \\<alpha>\n           \\<le> tp {x \\<in> A.\n                     tp D \\<le> tp (M D \\<AA> x)} \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  card (X \\<union> Y) = 2 * k\n  X \\<union> Y \\<subseteq> elts (\\<alpha> * \\<beta>)\n  f ` [X \\<union> Y]\\<^bsup>2\\<^esup> \\<subseteq> {0}", "show False"], ["proof (prove)\nusing this:\n  card (X \\<union> Y) = 2 * k\n  X \\<union> Y \\<subseteq> elts (\\<alpha> * \\<beta>)\n  f ` [X \\<union> Y]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n\ngoal (1 subgoal):\n 1. False", "using i \\<open>finite X\\<close> \\<open>finite Y\\<close> ordertype_VWF_finite_nat"], ["proof (prove)\nusing this:\n  card (X \\<union> Y) = 2 * k\n  X \\<union> Y \\<subseteq> elts (\\<alpha> * \\<beta>)\n  f ` [X \\<union> Y]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n  \\<lbrakk>tp ?H = ord_of_nat (2 * k);\n   ?H \\<subseteq> elts (\\<alpha> * \\<beta>)\\<rbrakk>\n  \\<Longrightarrow> \\<not> f ` [?H]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n  finite X\n  finite Y\n  finite ?A \\<Longrightarrow> tp ?A = ord_of_nat (card ?A)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>indecomposable (tp ?D); ?D \\<subseteq> elts \\<beta>;\n   ?A \\<subseteq> elts (\\<alpha> * \\<beta>); tp ?A = \\<alpha>;\n   ?\\<AA>\n   \\<in> ?D \\<rightarrow>\n         {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and>\n             tp X = \\<alpha>}\\<rbrakk>\n  \\<Longrightarrow> \\<alpha>\n                    \\<le> tp {x \\<in> ?A. tp ?D \\<le> tp (M ?D ?\\<AA> x)}\n\ngoal (1 subgoal):\n 1. False", "have IX: \"tp {x \\<in> A. tp (M D \\<AA> x) \\<ge> tp D} \\<ge> \\<alpha>\"\n          if D: \"D \\<subseteq> elts \\<beta>\" and A: \"A \\<subseteq> elts (\\<alpha>*\\<beta>)\" and tpA: \"tp A = \\<alpha>\"\n            and \\<AA>: \"\\<AA> \\<in> D \\<rightarrow> {X. X \\<subseteq> elts (\\<alpha>*\\<beta>) \\<and> tp X = \\<alpha>}\" for D A \\<AA>\n            \\<comment>\\<open>remark (9) for any order type\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "obtain L where UL: \"\\<Union>(List.set L) \\<subseteq> D\"\n            and indL: \"\\<And>X. X \\<in> List.set L \\<Longrightarrow> indecomposable (tp X)\"\n            and eqL: \"\\<And>M. \\<lbrakk>M \\<subseteq> D; \\<And>X. X \\<in> List.set L \\<Longrightarrow> tp (M \\<inter> X) \\<ge> tp X\\<rbrakk> \\<Longrightarrow> tp M = tp D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>L.\n        \\<lbrakk>\\<Union> (list.set L) \\<subseteq> D;\n         \\<And>X.\n            X \\<in> list.set L \\<Longrightarrow> indecomposable (tp X);\n         \\<And>M.\n            \\<lbrakk>M \\<subseteq> D;\n             \\<And>X.\n                X \\<in> list.set L \\<Longrightarrow>\n                tp X \\<le> tp (M \\<inter> X)\\<rbrakk>\n            \\<Longrightarrow> tp M = tp D\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ord"], ["proof (prove)\nusing this:\n  Ord \\<alpha>\n  Ord \\<beta>\n  Ord (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. (\\<And>L.\n        \\<lbrakk>\\<Union> (list.set L) \\<subseteq> D;\n         \\<And>X.\n            X \\<in> list.set L \\<Longrightarrow> indecomposable (tp X);\n         \\<And>M.\n            \\<lbrakk>M \\<subseteq> D;\n             \\<And>X.\n                X \\<in> list.set L \\<Longrightarrow>\n                tp X \\<le> tp (M \\<inter> X)\\<rbrakk>\n            \\<Longrightarrow> tp M = tp D\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis strong_ordertype_eq D order_refl)"], ["proof (state)\nthis:\n  \\<Union> (list.set L) \\<subseteq> D\n  ?X \\<in> list.set L \\<Longrightarrow> indecomposable (tp ?X)\n  \\<lbrakk>?M \\<subseteq> D;\n   \\<And>X.\n      X \\<in> list.set L \\<Longrightarrow>\n      tp X \\<le> tp (?M \\<inter> X)\\<rbrakk>\n  \\<Longrightarrow> tp ?M = tp D\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "obtain A'' where A'': \"A'' \\<subseteq> A\" \"tp A'' \\<ge> \\<alpha>\"\n            and \"\\<And>x X. \\<lbrakk>x \\<in> A''; X \\<in> List.set L\\<rbrakk> \\<Longrightarrow> tp (M D \\<AA> x \\<inter> X) \\<ge> tp X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A''.\n        \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n         \\<And>x X.\n            \\<lbrakk>x \\<in> A''; X \\<in> list.set L\\<rbrakk>\n            \\<Longrightarrow> tp X\n                              \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using UL indL"], ["proof (prove)\nusing this:\n  \\<Union> (list.set L) \\<subseteq> D\n  ?X \\<in> list.set L \\<Longrightarrow> indecomposable (tp ?X)\n\ngoal (1 subgoal):\n 1. (\\<And>A''.\n        \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n         \\<And>x X.\n            \\<lbrakk>x \\<in> A''; X \\<in> list.set L\\<rbrakk>\n            \\<Longrightarrow> tp X\n                              \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induction L arbitrary: thesis)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       \\<lbrakk>\\<And>A''.\n                   \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n                    \\<And>x X.\n                       \\<lbrakk>x \\<in> A''; X \\<in> list.set []\\<rbrakk>\n                       \\<Longrightarrow> tp X\n   \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<Union> (list.set []) \\<subseteq> D;\n        \\<And>X.\n           X \\<in> list.set [] \\<Longrightarrow>\n           indecomposable (tp X)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a L thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>A''.\n                               \\<lbrakk>A'' \\<subseteq> A;\n                                \\<alpha> \\<le> tp A'';\n                                \\<And>x X.\n                                   \\<lbrakk>x \\<in> A'';\n                                    X \\<in> list.set L\\<rbrakk>\n                                   \\<Longrightarrow> tp X\n               \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    \\<Union> (list.set L) \\<subseteq> D;\n                    \\<And>X.\n                       X \\<in> list.set L \\<Longrightarrow>\n                       indecomposable (tp X)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>A''.\n           \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n            \\<And>x X.\n               \\<lbrakk>x \\<in> A''; X \\<in> list.set (a # L)\\<rbrakk>\n               \\<Longrightarrow> tp X\n                                 \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Union> (list.set (a # L)) \\<subseteq> D;\n        \\<And>X.\n           X \\<in> list.set (a # L) \\<Longrightarrow>\n           indecomposable (tp X)\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Cons X L)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>A''.\n              \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n               \\<And>x X.\n                  \\<lbrakk>x \\<in> A''; X \\<in> list.set L\\<rbrakk>\n                  \\<Longrightarrow> tp X\n                                    \\<le> tp\n     (M D \\<AA> x \\<inter> X)\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   \\<Union> (list.set L) \\<subseteq> D;\n   \\<And>X.\n      X \\<in> list.set L \\<Longrightarrow> indecomposable (tp X)\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>?A'' \\<subseteq> A; \\<alpha> \\<le> tp ?A'';\n   \\<And>x Xa.\n      \\<lbrakk>x \\<in> ?A''; Xa \\<in> list.set (X # L)\\<rbrakk>\n      \\<Longrightarrow> tp Xa \\<le> tp (M D \\<AA> x \\<inter> Xa)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<Union> (list.set (X # L)) \\<subseteq> D\n  ?X \\<in> list.set (X # L) \\<Longrightarrow> indecomposable (tp ?X)\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       \\<lbrakk>\\<And>A''.\n                   \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n                    \\<And>x X.\n                       \\<lbrakk>x \\<in> A''; X \\<in> list.set []\\<rbrakk>\n                       \\<Longrightarrow> tp X\n   \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<Union> (list.set []) \\<subseteq> D;\n        \\<And>X.\n           X \\<in> list.set [] \\<Longrightarrow>\n           indecomposable (tp X)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a L thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>A''.\n                               \\<lbrakk>A'' \\<subseteq> A;\n                                \\<alpha> \\<le> tp A'';\n                                \\<And>x X.\n                                   \\<lbrakk>x \\<in> A'';\n                                    X \\<in> list.set L\\<rbrakk>\n                                   \\<Longrightarrow> tp X\n               \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    \\<Union> (list.set L) \\<subseteq> D;\n                    \\<And>X.\n                       X \\<in> list.set L \\<Longrightarrow>\n                       indecomposable (tp X)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>A''.\n           \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n            \\<And>x X.\n               \\<lbrakk>x \\<in> A''; X \\<in> list.set (a # L)\\<rbrakk>\n               \\<Longrightarrow> tp X\n                                 \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Union> (list.set (a # L)) \\<subseteq> D;\n        \\<And>X.\n           X \\<in> list.set (a # L) \\<Longrightarrow>\n           indecomposable (tp X)\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>A''.\n              \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n               \\<And>x X.\n                  \\<lbrakk>x \\<in> A''; X \\<in> list.set L\\<rbrakk>\n                  \\<Longrightarrow> tp X\n                                    \\<le> tp\n     (M D \\<AA> x \\<inter> X)\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   \\<Union> (list.set L) \\<subseteq> D;\n   \\<And>X.\n      X \\<in> list.set L \\<Longrightarrow> indecomposable (tp X)\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>?A'' \\<subseteq> A; \\<alpha> \\<le> tp ?A'';\n   \\<And>x Xa.\n      \\<lbrakk>x \\<in> ?A''; Xa \\<in> list.set (X # L)\\<rbrakk>\n      \\<Longrightarrow> tp Xa \\<le> tp (M D \\<AA> x \\<inter> Xa)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<Union> (list.set (X # L)) \\<subseteq> D\n  ?X \\<in> list.set (X # L) \\<Longrightarrow> indecomposable (tp ?X)", "obtain A'' where A'': \"A'' \\<subseteq> A\" \"tp A'' \\<ge> \\<alpha>\" and \"X \\<subseteq> D\"\n              and ge_X: \"\\<And>x X. \\<lbrakk>x \\<in> A''; X \\<in> List.set L\\<rbrakk> \\<Longrightarrow> tp (M D \\<AA> x \\<inter> X) \\<ge> tp X\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>A''.\n              \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n               \\<And>x X.\n                  \\<lbrakk>x \\<in> A''; X \\<in> list.set L\\<rbrakk>\n                  \\<Longrightarrow> tp X\n                                    \\<le> tp\n     (M D \\<AA> x \\<inter> X)\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   \\<Union> (list.set L) \\<subseteq> D;\n   \\<And>X.\n      X \\<in> list.set L \\<Longrightarrow> indecomposable (tp X)\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>?A'' \\<subseteq> A; \\<alpha> \\<le> tp ?A'';\n   \\<And>x Xa.\n      \\<lbrakk>x \\<in> ?A''; Xa \\<in> list.set (X # L)\\<rbrakk>\n      \\<Longrightarrow> tp Xa \\<le> tp (M D \\<AA> x \\<inter> Xa)\\<rbrakk>\n  \\<Longrightarrow> thesisa__\n  \\<Union> (list.set (X # L)) \\<subseteq> D\n  ?X \\<in> list.set (X # L) \\<Longrightarrow> indecomposable (tp ?X)\n\ngoal (1 subgoal):\n 1. (\\<And>A''.\n        \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A''; X \\<subseteq> D;\n         \\<And>x X.\n            \\<lbrakk>x \\<in> A''; X \\<in> list.set L\\<rbrakk>\n            \\<Longrightarrow> tp X\n                              \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A'' \\<subseteq> A\n  \\<alpha> \\<le> tp A''\n  X \\<subseteq> D\n  \\<lbrakk>?x \\<in> A''; ?X \\<in> list.set L\\<rbrakk>\n  \\<Longrightarrow> tp ?X \\<le> tp (M D \\<AA> ?x \\<inter> ?X)\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       \\<lbrakk>\\<And>A''.\n                   \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n                    \\<And>x X.\n                       \\<lbrakk>x \\<in> A''; X \\<in> list.set []\\<rbrakk>\n                       \\<Longrightarrow> tp X\n   \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<Union> (list.set []) \\<subseteq> D;\n        \\<And>X.\n           X \\<in> list.set [] \\<Longrightarrow>\n           indecomposable (tp X)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a L thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>A''.\n                               \\<lbrakk>A'' \\<subseteq> A;\n                                \\<alpha> \\<le> tp A'';\n                                \\<And>x X.\n                                   \\<lbrakk>x \\<in> A'';\n                                    X \\<in> list.set L\\<rbrakk>\n                                   \\<Longrightarrow> tp X\n               \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    \\<Union> (list.set L) \\<subseteq> D;\n                    \\<And>X.\n                       X \\<in> list.set L \\<Longrightarrow>\n                       indecomposable (tp X)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>A''.\n           \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n            \\<And>x X.\n               \\<lbrakk>x \\<in> A''; X \\<in> list.set (a # L)\\<rbrakk>\n               \\<Longrightarrow> tp X\n                                 \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Union> (list.set (a # L)) \\<subseteq> D;\n        \\<And>X.\n           X \\<in> list.set (a # L) \\<Longrightarrow>\n           indecomposable (tp X)\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  A'' \\<subseteq> A\n  \\<alpha> \\<le> tp A''\n  X \\<subseteq> D\n  \\<lbrakk>?x \\<in> A''; ?X \\<in> list.set L\\<rbrakk>\n  \\<Longrightarrow> tp ?X \\<le> tp (M D \\<AA> ?x \\<inter> ?X)", "have tp_A'': \"tp A'' = \\<alpha>\""], ["proof (prove)\nusing this:\n  A'' \\<subseteq> A\n  \\<alpha> \\<le> tp A''\n  X \\<subseteq> D\n  \\<lbrakk>?x \\<in> A''; ?X \\<in> list.set L\\<rbrakk>\n  \\<Longrightarrow> tp ?X \\<le> tp (M D \\<AA> ?x \\<inter> ?X)\n\ngoal (1 subgoal):\n 1. tp A'' = \\<alpha>", "by (metis A antisym down ordertype_VWF_mono tpA)"], ["proof (state)\nthis:\n  tp A'' = \\<alpha>\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       \\<lbrakk>\\<And>A''.\n                   \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n                    \\<And>x X.\n                       \\<lbrakk>x \\<in> A''; X \\<in> list.set []\\<rbrakk>\n                       \\<Longrightarrow> tp X\n   \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<Union> (list.set []) \\<subseteq> D;\n        \\<And>X.\n           X \\<in> list.set [] \\<Longrightarrow>\n           indecomposable (tp X)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a L thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>A''.\n                               \\<lbrakk>A'' \\<subseteq> A;\n                                \\<alpha> \\<le> tp A'';\n                                \\<And>x X.\n                                   \\<lbrakk>x \\<in> A'';\n                                    X \\<in> list.set L\\<rbrakk>\n                                   \\<Longrightarrow> tp X\n               \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    \\<Union> (list.set L) \\<subseteq> D;\n                    \\<And>X.\n                       X \\<in> list.set L \\<Longrightarrow>\n                       indecomposable (tp X)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>A''.\n           \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n            \\<And>x X.\n               \\<lbrakk>x \\<in> A''; X \\<in> list.set (a # L)\\<rbrakk>\n               \\<Longrightarrow> tp X\n                                 \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Union> (list.set (a # L)) \\<subseteq> D;\n        \\<And>X.\n           X \\<in> list.set (a # L) \\<Longrightarrow>\n           indecomposable (tp X)\\<rbrakk>\n       \\<Longrightarrow> thesis", "have ge_\\<alpha>: \"tp {x \\<in> A''. tp (M X \\<AA> x) \\<ge> tp X} \\<ge> \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A''. tp X \\<le> tp (M X \\<AA> x)}", "by (rule 9) (use A A'' tp_A'' Cons.prems \\<open>D \\<subseteq> elts \\<beta>\\<close> \\<open>X \\<subseteq> D\\<close> \\<AA> in auto)"], ["proof (state)\nthis:\n  \\<alpha> \\<le> tp {x \\<in> A''. tp X \\<le> tp (M X \\<AA> x)}\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       \\<lbrakk>\\<And>A''.\n                   \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n                    \\<And>x X.\n                       \\<lbrakk>x \\<in> A''; X \\<in> list.set []\\<rbrakk>\n                       \\<Longrightarrow> tp X\n   \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<Union> (list.set []) \\<subseteq> D;\n        \\<And>X.\n           X \\<in> list.set [] \\<Longrightarrow>\n           indecomposable (tp X)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a L thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>A''.\n                               \\<lbrakk>A'' \\<subseteq> A;\n                                \\<alpha> \\<le> tp A'';\n                                \\<And>x X.\n                                   \\<lbrakk>x \\<in> A'';\n                                    X \\<in> list.set L\\<rbrakk>\n                                   \\<Longrightarrow> tp X\n               \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    \\<Union> (list.set L) \\<subseteq> D;\n                    \\<And>X.\n                       X \\<in> list.set L \\<Longrightarrow>\n                       indecomposable (tp X)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>A''.\n           \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n            \\<And>x X.\n               \\<lbrakk>x \\<in> A''; X \\<in> list.set (a # L)\\<rbrakk>\n               \\<Longrightarrow> tp X\n                                 \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Union> (list.set (a # L)) \\<subseteq> D;\n        \\<And>X.\n           X \\<in> list.set (a # L) \\<Longrightarrow>\n           indecomposable (tp X)\\<rbrakk>\n       \\<Longrightarrow> thesis", "let ?A = \"{x \\<in> A''. tp (M D \\<AA> x \\<inter> X) \\<ge> tp X}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       \\<lbrakk>\\<And>A''.\n                   \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n                    \\<And>x X.\n                       \\<lbrakk>x \\<in> A''; X \\<in> list.set []\\<rbrakk>\n                       \\<Longrightarrow> tp X\n   \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<Union> (list.set []) \\<subseteq> D;\n        \\<And>X.\n           X \\<in> list.set [] \\<Longrightarrow>\n           indecomposable (tp X)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a L thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>A''.\n                               \\<lbrakk>A'' \\<subseteq> A;\n                                \\<alpha> \\<le> tp A'';\n                                \\<And>x X.\n                                   \\<lbrakk>x \\<in> A'';\n                                    X \\<in> list.set L\\<rbrakk>\n                                   \\<Longrightarrow> tp X\n               \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    \\<Union> (list.set L) \\<subseteq> D;\n                    \\<And>X.\n                       X \\<in> list.set L \\<Longrightarrow>\n                       indecomposable (tp X)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>A''.\n           \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n            \\<And>x X.\n               \\<lbrakk>x \\<in> A''; X \\<in> list.set (a # L)\\<rbrakk>\n               \\<Longrightarrow> tp X\n                                 \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Union> (list.set (a # L)) \\<subseteq> D;\n        \\<And>X.\n           X \\<in> list.set (a # L) \\<Longrightarrow>\n           indecomposable (tp X)\\<rbrakk>\n       \\<Longrightarrow> thesis", "have M_eq: \"M D \\<AA> x \\<inter> X = M X \\<AA> x\" if \"x \\<in> A''\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. M D \\<AA> x \\<inter> X = M X \\<AA> x", "using that \\<open>X \\<subseteq> D\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> A''\n  X \\<subseteq> D\n\ngoal (1 subgoal):\n 1. M D \\<AA> x \\<inter> X = M X \\<AA> x", "by (auto simp: M_def)"], ["proof (state)\nthis:\n  ?x \\<in> A'' \\<Longrightarrow> M D \\<AA> ?x \\<inter> X = M X \\<AA> ?x\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       \\<lbrakk>\\<And>A''.\n                   \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n                    \\<And>x X.\n                       \\<lbrakk>x \\<in> A''; X \\<in> list.set []\\<rbrakk>\n                       \\<Longrightarrow> tp X\n   \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<Union> (list.set []) \\<subseteq> D;\n        \\<And>X.\n           X \\<in> list.set [] \\<Longrightarrow>\n           indecomposable (tp X)\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a L thesis.\n       \\<lbrakk>\\<And>thesis.\n                   \\<lbrakk>\\<And>A''.\n                               \\<lbrakk>A'' \\<subseteq> A;\n                                \\<alpha> \\<le> tp A'';\n                                \\<And>x X.\n                                   \\<lbrakk>x \\<in> A'';\n                                    X \\<in> list.set L\\<rbrakk>\n                                   \\<Longrightarrow> tp X\n               \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    \\<Union> (list.set L) \\<subseteq> D;\n                    \\<And>X.\n                       X \\<in> list.set L \\<Longrightarrow>\n                       indecomposable (tp X)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>A''.\n           \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n            \\<And>x X.\n               \\<lbrakk>x \\<in> A''; X \\<in> list.set (a # L)\\<rbrakk>\n               \\<Longrightarrow> tp X\n                                 \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<Union> (list.set (a # L)) \\<subseteq> D;\n        \\<And>X.\n           X \\<in> list.set (a # L) \\<Longrightarrow>\n           indecomposable (tp X)\\<rbrakk>\n       \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule Cons.prems)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?A'' \\<subseteq> A\n 2. \\<alpha> \\<le> tp ?A''\n 3. \\<And>x Xa.\n       \\<lbrakk>x \\<in> ?A''; Xa \\<in> list.set (X # L)\\<rbrakk>\n       \\<Longrightarrow> tp Xa \\<le> tp (M D \\<AA> x \\<inter> Xa)", "show \"\\<alpha> \\<le> tp ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A''. tp X \\<le> tp (M D \\<AA> x \\<inter> X)}", "using ge_\\<alpha>"], ["proof (prove)\nusing this:\n  \\<alpha> \\<le> tp {x \\<in> A''. tp X \\<le> tp (M X \\<AA> x)}\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A''. tp X \\<le> tp (M D \\<AA> x \\<inter> X)}", "by (simp add: M_eq cong: conj_cong)"], ["proof (state)\nthis:\n  \\<alpha> \\<le> tp {x \\<in> A''. tp X \\<le> tp (M D \\<AA> x \\<inter> X)}\n\ngoal (2 subgoals):\n 1. {x \\<in> A''. tp X \\<le> tp (M D \\<AA> x \\<inter> X)} \\<subseteq> A\n 2. \\<And>x Xa.\n       \\<lbrakk>x \\<in> {x \\<in> A''.\n                         tp X \\<le> tp (M D \\<AA> x \\<inter> X)};\n        Xa \\<in> list.set (X # L)\\<rbrakk>\n       \\<Longrightarrow> tp Xa \\<le> tp (M D \\<AA> x \\<inter> Xa)", "show \"tp Y \\<le> tp (M D \\<AA> x \\<inter> Y)\" if \"x \\<in> ?A\" \"Y \\<in> list.set (X # L)\" for x Y"], ["proof (prove)\ngoal (1 subgoal):\n 1. tp Y \\<le> tp (M D \\<AA> x \\<inter> Y)", "using that ge_X"], ["proof (prove)\nusing this:\n  x \\<in> {x \\<in> A''. tp X \\<le> tp (M D \\<AA> x \\<inter> X)}\n  Y \\<in> list.set (X # L)\n  \\<lbrakk>?x \\<in> A''; ?X \\<in> list.set L\\<rbrakk>\n  \\<Longrightarrow> tp ?X \\<le> tp (M D \\<AA> ?x \\<inter> ?X)\n\ngoal (1 subgoal):\n 1. tp Y \\<le> tp (M D \\<AA> x \\<inter> Y)", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> {x \\<in> A''. tp X \\<le> tp (M D \\<AA> x \\<inter> X)};\n   ?Y \\<in> list.set (X # L)\\<rbrakk>\n  \\<Longrightarrow> tp ?Y \\<le> tp (M D \\<AA> ?x \\<inter> ?Y)\n\ngoal (1 subgoal):\n 1. {x \\<in> A''. tp X \\<le> tp (M D \\<AA> x \\<inter> X)} \\<subseteq> A", "qed (use A'' in auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>thesis.\n       \\<lbrakk>\\<And>A''.\n                   \\<lbrakk>A'' \\<subseteq> A; \\<alpha> \\<le> tp A'';\n                    \\<And>x X.\n                       \\<lbrakk>x \\<in> A''; X \\<in> list.set []\\<rbrakk>\n                       \\<Longrightarrow> tp X\n   \\<le> tp (M D \\<AA> x \\<inter> X)\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<Union> (list.set []) \\<subseteq> D;\n        \\<And>X.\n           X \\<in> list.set [] \\<Longrightarrow>\n           indecomposable (tp X)\\<rbrakk>\n       \\<Longrightarrow> thesis", "qed (use tpA in auto)"], ["proof (state)\nthis:\n  A'' \\<subseteq> A\n  \\<alpha> \\<le> tp A''\n  \\<lbrakk>?x \\<in> A''; ?X \\<in> list.set L\\<rbrakk>\n  \\<Longrightarrow> tp ?X \\<le> tp (M D \\<AA> ?x \\<inter> ?X)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "then"], ["proof (chain)\npicking this:\n  A'' \\<subseteq> A\n  \\<alpha> \\<le> tp A''\n  \\<lbrakk>?x \\<in> A''; ?X \\<in> list.set L\\<rbrakk>\n  \\<Longrightarrow> tp ?X \\<le> tp (M D \\<AA> ?x \\<inter> ?X)", "have tp_M_ge: \"tp (M D \\<AA> x) \\<ge> tp D\" if \"x \\<in> A''\" for x"], ["proof (prove)\nusing this:\n  A'' \\<subseteq> A\n  \\<alpha> \\<le> tp A''\n  \\<lbrakk>?x \\<in> A''; ?X \\<in> list.set L\\<rbrakk>\n  \\<Longrightarrow> tp ?X \\<le> tp (M D \\<AA> ?x \\<inter> ?X)\n\ngoal (1 subgoal):\n 1. tp D \\<le> tp (M D \\<AA> x)", "using eqL that"], ["proof (prove)\nusing this:\n  A'' \\<subseteq> A\n  \\<alpha> \\<le> tp A''\n  \\<lbrakk>?x \\<in> A''; ?X \\<in> list.set L\\<rbrakk>\n  \\<Longrightarrow> tp ?X \\<le> tp (M D \\<AA> ?x \\<inter> ?X)\n  \\<lbrakk>?M \\<subseteq> D;\n   \\<And>X.\n      X \\<in> list.set L \\<Longrightarrow>\n      tp X \\<le> tp (?M \\<inter> X)\\<rbrakk>\n  \\<Longrightarrow> tp ?M = tp D\n  x \\<in> A''\n\ngoal (1 subgoal):\n 1. tp D \\<le> tp (M D \\<AA> x)", "by (auto simp: M_def)"], ["proof (state)\nthis:\n  ?x \\<in> A'' \\<Longrightarrow> tp D \\<le> tp (M D \\<AA> ?x)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "have \"\\<alpha> \\<le> tp A''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp A''", "by (simp add: A'')"], ["proof (state)\nthis:\n  \\<alpha> \\<le> tp A''\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "also"], ["proof (state)\nthis:\n  \\<alpha> \\<le> tp A''\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "have \"\\<dots> \\<le> tp {x \\<in> A''. tp (M D \\<AA> x) \\<ge> tp D}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tp A'' \\<le> tp {x \\<in> A''. tp D \\<le> tp (M D \\<AA> x)}", "by (metis (mono_tags, lifting) tp_M_ge eq_iff mem_Collect_eq subsetI)"], ["proof (state)\nthis:\n  tp A'' \\<le> tp {x \\<in> A''. tp D \\<le> tp (M D \\<AA> x)}\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "also"], ["proof (state)\nthis:\n  tp A'' \\<le> tp {x \\<in> A''. tp D \\<le> tp (M D \\<AA> x)}\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "have \"\\<dots> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tp {x \\<in> A''. tp D \\<le> tp (M D \\<AA> x)}\n    \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "by (rule ordertype_mono) (use A'' A down in auto)"], ["proof (state)\nthis:\n  tp {x \\<in> A''. tp D \\<le> tp (M D \\<AA> x)}\n  \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "finally"], ["proof (chain)\npicking this:\n  \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}", "."], ["proof (state)\nthis:\n  \\<alpha> \\<le> tp {x \\<in> A. tp D \\<le> tp (M D \\<AA> x)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?D \\<subseteq> elts \\<beta>;\n   ?A \\<subseteq> elts (\\<alpha> * \\<beta>); tp ?A = \\<alpha>;\n   ?\\<AA>\n   \\<in> ?D \\<rightarrow>\n         {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and>\n             tp X = \\<alpha>}\\<rbrakk>\n  \\<Longrightarrow> \\<alpha>\n                    \\<le> tp {x \\<in> ?A. tp ?D \\<le> tp (M ?D ?\\<AA> x)}\n\ngoal (1 subgoal):\n 1. False", "have [simp]: \"tp {0} = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tp {0} = 1", "using ordertype_eq_Ord"], ["proof (prove)\nusing this:\n  Ord ?\\<alpha> \\<Longrightarrow> tp (elts ?\\<alpha>) = ?\\<alpha>\n\ngoal (1 subgoal):\n 1. tp {0} = 1", "by fastforce"], ["proof (state)\nthis:\n  tp {0} = 1\n\ngoal (1 subgoal):\n 1. False", "have IX': \"tp {x \\<in> A'. tp (K 1 x \\<inter> A) \\<ge> \\<alpha>} \\<ge> \\<alpha>\"\n          if A: \"A \\<subseteq> elts (\\<alpha>*\\<beta>)\" \"tp A = \\<alpha>\" and A': \"A' \\<subseteq> elts (\\<alpha>*\\<beta>)\" \"tp A' = \\<alpha>\" for A A'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> A)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> A)}", "have \\<ddagger>: \"\\<alpha> \\<le> tp (K 1 t \\<inter> A)\" if \"t \\<in> A'\" \"1 \\<le> tp {\\<nu>. \\<nu> = 0 \\<and> \\<alpha> \\<le> tp (K 1 t \\<inter> A)}\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp (K 1 t \\<inter> A)", "using that"], ["proof (prove)\nusing this:\n  t \\<in> A'\n  1 \\<le> tp {\\<nu>. \\<nu> = 0 \\<and> \\<alpha> \\<le> tp (K 1 t \\<inter> A)}\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp (K 1 t \\<inter> A)", "by (metis Collect_empty_eq less_eq_V_0_iff ordertype_empty zero_neq_one)"], ["proof (state)\nthis:\n  \\<lbrakk>?t \\<in> A';\n   1 \\<le> tp {\\<nu>.\n               \\<nu> = 0 \\<and>\n               \\<alpha> \\<le> tp (K 1 ?t \\<inter> A)}\\<rbrakk>\n  \\<Longrightarrow> \\<alpha> \\<le> tp (K 1 ?t \\<inter> A)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> A)}", "have \"tp {x \\<in> A'. 1 \\<le> tp {\\<nu>. \\<nu> = 0 \\<and> \\<alpha> \\<le> tp (K 1 x \\<inter> A)}}\n                  \\<le> tp {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> A)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tp {x \\<in> A'.\n        1 \\<le> tp {\\<nu>.\n                    \\<nu> = 0 \\<and> \\<alpha> \\<le> tp (K 1 x \\<inter> A)}}\n    \\<le> tp {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> A)}", "by (rule ordertype_mono) (use \"\\<ddagger>\" A' in \\<open>auto simp: down\\<close>)"], ["proof (state)\nthis:\n  tp {x \\<in> A'.\n      1 \\<le> tp {\\<nu>.\n                  \\<nu> = 0 \\<and> \\<alpha> \\<le> tp (K 1 x \\<inter> A)}}\n  \\<le> tp {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> A)}\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> A)}", "then"], ["proof (chain)\npicking this:\n  tp {x \\<in> A'.\n      1 \\<le> tp {\\<nu>.\n                  \\<nu> = 0 \\<and> \\<alpha> \\<le> tp (K 1 x \\<inter> A)}}\n  \\<le> tp {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> A)}", "show ?thesis"], ["proof (prove)\nusing this:\n  tp {x \\<in> A'.\n      1 \\<le> tp {\\<nu>.\n                  \\<nu> = 0 \\<and> \\<alpha> \\<le> tp (K 1 x \\<inter> A)}}\n  \\<le> tp {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> A)}\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> A)}", "using IX [of \"{0}\" A' \"\\<lambda>x. A\"] that \\<open>0 \\<in> elts \\<beta>\\<close>"], ["proof (prove)\nusing this:\n  tp {x \\<in> A'.\n      1 \\<le> tp {\\<nu>.\n                  \\<nu> = 0 \\<and> \\<alpha> \\<le> tp (K 1 x \\<inter> A)}}\n  \\<le> tp {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> A)}\n  \\<lbrakk>{0} \\<subseteq> elts \\<beta>;\n   A' \\<subseteq> elts (\\<alpha> * \\<beta>); tp A' = \\<alpha>;\n   (\\<lambda>x. A)\n   \\<in> {0} \\<rightarrow>\n         {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and>\n             tp X = \\<alpha>}\\<rbrakk>\n  \\<Longrightarrow> \\<alpha>\n                    \\<le> tp {x \\<in> A'.\n                              tp {0} \\<le> tp (M {0} (\\<lambda>x. A) x)}\n  A \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp A = \\<alpha>\n  A' \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp A' = \\<alpha>\n  0 \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> A)}", "by (simp add: M_def cong: conj_cong)"], ["proof (state)\nthis:\n  \\<alpha> \\<le> tp {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> A)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?A \\<subseteq> elts (\\<alpha> * \\<beta>); tp ?A = \\<alpha>;\n   ?A' \\<subseteq> elts (\\<alpha> * \\<beta>); tp ?A' = \\<alpha>\\<rbrakk>\n  \\<Longrightarrow> \\<alpha>\n                    \\<le> tp {x \\<in> ?A'.\n                              \\<alpha> \\<le> tp (K 1 x \\<inter> ?A)}\n\ngoal (1 subgoal):\n 1. False", "have 10: \"\\<exists>x0 \\<in> A. \\<exists>g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>. strict_mono_on g (elts \\<beta>) \\<and> (\\<forall>\\<nu> \\<in> F. g \\<nu> = \\<nu>)\n                                      \\<and> (\\<forall>\\<nu> \\<in> elts \\<beta>. tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)) \\<ge> \\<alpha>)\"\n          if F: \"finite F\" \"F \\<subseteq> elts \\<beta>\"\n            and A: \"A \\<subseteq> elts (\\<alpha>*\\<beta>)\" \"tp A = \\<alpha>\"\n            and \\<AA>: \"\\<AA> \\<in> elts \\<beta> \\<rightarrow> {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp X = \\<alpha>}\"\n          for F A \\<AA>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "define p where \"p \\<equiv> card F\""], ["proof (state)\nthis:\n  p \\<equiv> card F\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have \"\\<beta> \\<notin> F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta> \\<notin> F", "using that"], ["proof (prove)\nusing this:\n  finite F\n  F \\<subseteq> elts \\<beta>\n  A \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp A = \\<alpha>\n  \\<AA>\n  \\<in> elts \\<beta> \\<rightarrow>\n        {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp X = \\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<beta> \\<notin> F", "by auto"], ["proof (state)\nthis:\n  \\<beta> \\<notin> F\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "then"], ["proof (chain)\npicking this:\n  \\<beta> \\<notin> F", "obtain \\<iota> :: \"nat \\<Rightarrow> V\" where bij\\<iota>: \"bij_betw \\<iota> {..p} (insert \\<beta> F)\" and mon\\<iota>: \"strict_mono_on \\<iota> {..p}\""], ["proof (prove)\nusing this:\n  \\<beta> \\<notin> F\n\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>.\n        \\<lbrakk>bij_betw \\<iota> {..p} (insert \\<beta> F);\n         strict_mono_on \\<iota> {..p}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ZFC_Cardinals.ex_bij_betw_strict_mono_card [of \"insert \\<beta> F\"] elts_subset_ON \\<open>Ord \\<beta>\\<close> F"], ["proof (prove)\nusing this:\n  \\<beta> \\<notin> F\n  \\<lbrakk>finite (insert \\<beta> F); insert \\<beta> F \\<subseteq> ON;\n   \\<And>h.\n      \\<lbrakk>bij_betw h {..<card (insert \\<beta> F)} (insert \\<beta> F);\n       strict_mono_on h {..<card (insert \\<beta> F)}\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  Ord ?\\<alpha> \\<Longrightarrow> elts ?\\<alpha> \\<subseteq> ON\n  Ord \\<beta>\n  finite F\n  F \\<subseteq> elts \\<beta>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>.\n        \\<lbrakk>bij_betw \\<iota> {..p} (insert \\<beta> F);\n         strict_mono_on \\<iota> {..p}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: p_def lessThan_Suc_atMost) blast"], ["proof (state)\nthis:\n  bij_betw \\<iota> {..p} (insert \\<beta> F)\n  strict_mono_on \\<iota> {..p}\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have less_\\<iota>_I: \"\\<iota> k < \\<iota> l\" if \"k < l\" \"l \\<le> p\" for k l"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> k < \\<iota> l", "using mon\\<iota> that"], ["proof (prove)\nusing this:\n  strict_mono_on \\<iota> {..p}\n  k < l\n  l \\<le> p\n\ngoal (1 subgoal):\n 1. \\<iota> k < \\<iota> l", "by (auto simp: strict_mono_on_def)"], ["proof (state)\nthis:\n  \\<lbrakk>?k < ?l; ?l \\<le> p\\<rbrakk>\n  \\<Longrightarrow> \\<iota> ?k < \\<iota> ?l\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?k < ?l; ?l \\<le> p\\<rbrakk>\n  \\<Longrightarrow> \\<iota> ?k < \\<iota> ?l", "have less_\\<iota>_D: \"k < l\" if \"\\<iota> k < \\<iota> l\" \"k \\<le> p\" for k l"], ["proof (prove)\nusing this:\n  \\<lbrakk>?k < ?l; ?l \\<le> p\\<rbrakk>\n  \\<Longrightarrow> \\<iota> ?k < \\<iota> ?l\n\ngoal (1 subgoal):\n 1. k < l", "by (metis less_asym linorder_neqE_nat that)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<iota> ?k < \\<iota> ?l; ?k \\<le> p\\<rbrakk>\n  \\<Longrightarrow> ?k < ?l\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have Ord_\\<iota>: \"Ord (\\<iota> k)\" if \"k \\<le> p\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord (\\<iota> k)", "by (metis (no_types, lifting) ON_imp_Ord atMost_iff insert_subset mem_Collect_eq order_trans  \\<open>F \\<subseteq> elts \\<beta>\\<close> bij\\<iota> bij_betwE elts_subset_ON \\<open>Ord \\<beta>\\<close> that)"], ["proof (state)\nthis:\n  ?k \\<le> p \\<Longrightarrow> Ord (\\<iota> ?k)\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have le_\\<iota>0 [simp]: \"\\<And>j. j \\<le> p \\<Longrightarrow> \\<iota> 0 \\<le> \\<iota> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j. j \\<le> p \\<Longrightarrow> \\<iota> 0 \\<le> \\<iota> j", "by (metis eq_refl leI le_0_eq less_\\<iota>_I less_imp_le)"], ["proof (state)\nthis:\n  ?j \\<le> p \\<Longrightarrow> \\<iota> 0 \\<le> \\<iota> ?j\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have le_\\<iota>: \"\\<iota> i \\<le> \\<iota> (j - Suc 0)\" if \"i < j\" \"j \\<le> p\" for i j"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> i \\<le> \\<iota> (j - Suc 0)", "proof (cases i)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> \\<iota> i \\<le> \\<iota> (j - Suc 0)\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow> \\<iota> i \\<le> \\<iota> (j - Suc 0)", "case 0"], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> \\<iota> i \\<le> \\<iota> (j - Suc 0)\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow> \\<iota> i \\<le> \\<iota> (j - Suc 0)", "then"], ["proof (chain)\npicking this:\n  i = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  i = 0\n\ngoal (1 subgoal):\n 1. \\<iota> i \\<le> \\<iota> (j - Suc 0)", "using le_\\<iota>0 that"], ["proof (prove)\nusing this:\n  i = 0\n  ?j \\<le> p \\<Longrightarrow> \\<iota> 0 \\<le> \\<iota> ?j\n  i < j\n  j \\<le> p\n\ngoal (1 subgoal):\n 1. \\<iota> i \\<le> \\<iota> (j - Suc 0)", "by auto"], ["proof (state)\nthis:\n  \\<iota> i \\<le> \\<iota> (j - Suc 0)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow> \\<iota> i \\<le> \\<iota> (j - Suc 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow> \\<iota> i \\<le> \\<iota> (j - Suc 0)", "case (Suc i')"], ["proof (state)\nthis:\n  i = Suc i'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow> \\<iota> i \\<le> \\<iota> (j - Suc 0)", "then"], ["proof (chain)\npicking this:\n  i = Suc i'", "show ?thesis"], ["proof (prove)\nusing this:\n  i = Suc i'\n\ngoal (1 subgoal):\n 1. \\<iota> i \\<le> \\<iota> (j - Suc 0)", "by (metis (no_types, hide_lams) Suc_pred le_less less_Suc_eq less_Suc_eq_0_disj less_\\<iota>_I not_less_eq that)"], ["proof (state)\nthis:\n  \\<iota> i \\<le> \\<iota> (j - Suc 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?i < ?j; ?j \\<le> p\\<rbrakk>\n  \\<Longrightarrow> \\<iota> ?i \\<le> \\<iota> (?j - Suc 0)\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have [simp]: \"\\<iota> p = \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> p = \\<beta>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<iota> p = \\<beta>", "obtain k where k: \"\\<iota> k = \\<beta>\" \"k \\<le> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>\\<iota> k = \\<beta>; k \\<le> p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson atMost_iff bij\\<iota> bij_betw_iff_bijections insertI1)"], ["proof (state)\nthis:\n  \\<iota> k = \\<beta>\n  k \\<le> p\n\ngoal (1 subgoal):\n 1. \\<iota> p = \\<beta>", "then"], ["proof (chain)\npicking this:\n  \\<iota> k = \\<beta>\n  k \\<le> p", "have \"k = p \\<or> k < p\""], ["proof (prove)\nusing this:\n  \\<iota> k = \\<beta>\n  k \\<le> p\n\ngoal (1 subgoal):\n 1. k = p \\<or> k < p", "by linarith"], ["proof (state)\nthis:\n  k = p \\<or> k < p\n\ngoal (1 subgoal):\n 1. \\<iota> p = \\<beta>", "then"], ["proof (chain)\npicking this:\n  k = p \\<or> k < p", "show ?thesis"], ["proof (prove)\nusing this:\n  k = p \\<or> k < p\n\ngoal (1 subgoal):\n 1. \\<iota> p = \\<beta>", "using bij\\<iota> ord k that(2)"], ["proof (prove)\nusing this:\n  k = p \\<or> k < p\n  bij_betw \\<iota> {..p} (insert \\<beta> F)\n  Ord \\<alpha>\n  Ord \\<beta>\n  Ord (\\<alpha> * \\<beta>)\n  \\<iota> k = \\<beta>\n  k \\<le> p\n  F \\<subseteq> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<iota> p = \\<beta>", "by (metis OrdmemD atMost_iff bij_betw_iff_bijections insert_iff leD less_\\<iota>_D order_refl subsetD)"], ["proof (state)\nthis:\n  \\<iota> p = \\<beta>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<iota> p = \\<beta>\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have F_imp_Ex: \"\\<exists>k < p. \\<xi> = \\<iota> k\" if \"\\<xi> \\<in> F\" for \\<xi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k<p. \\<xi> = \\<iota> k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k<p. \\<xi> = \\<iota> k", "obtain k where k: \"k \\<le> p\" \"\\<xi> = \\<iota> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k \\<le> p; \\<xi> = \\<iota> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis \\<open>\\<xi> \\<in> F\\<close> atMost_iff bij\\<iota> bij_betw_def imageE insert_iff)"], ["proof (state)\nthis:\n  k \\<le> p\n  \\<xi> = \\<iota> k\n\ngoal (1 subgoal):\n 1. \\<exists>k<p. \\<xi> = \\<iota> k", "then"], ["proof (chain)\npicking this:\n  k \\<le> p\n  \\<xi> = \\<iota> k", "have \"k \\<noteq> p\""], ["proof (prove)\nusing this:\n  k \\<le> p\n  \\<xi> = \\<iota> k\n\ngoal (1 subgoal):\n 1. k \\<noteq> p", "using that F"], ["proof (prove)\nusing this:\n  k \\<le> p\n  \\<xi> = \\<iota> k\n  \\<xi> \\<in> F\n  finite F\n  F \\<subseteq> elts \\<beta>\n\ngoal (1 subgoal):\n 1. k \\<noteq> p", "by auto"], ["proof (state)\nthis:\n  k \\<noteq> p\n\ngoal (1 subgoal):\n 1. \\<exists>k<p. \\<xi> = \\<iota> k", "with k"], ["proof (chain)\npicking this:\n  k \\<le> p\n  \\<xi> = \\<iota> k\n  k \\<noteq> p", "show ?thesis"], ["proof (prove)\nusing this:\n  k \\<le> p\n  \\<xi> = \\<iota> k\n  k \\<noteq> p\n\ngoal (1 subgoal):\n 1. \\<exists>k<p. \\<xi> = \\<iota> k", "using le_neq_implies_less"], ["proof (prove)\nusing this:\n  k \\<le> p\n  \\<xi> = \\<iota> k\n  k \\<noteq> p\n  \\<lbrakk>?m \\<le> ?n; ?m \\<noteq> ?n\\<rbrakk> \\<Longrightarrow> ?m < ?n\n\ngoal (1 subgoal):\n 1. \\<exists>k<p. \\<xi> = \\<iota> k", "by blast"], ["proof (state)\nthis:\n  \\<exists>k<p. \\<xi> = \\<iota> k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?\\<xi> \\<in> F \\<Longrightarrow> \\<exists>k<p. ?\\<xi> = \\<iota> k\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have F_imp_ge: \"\\<xi> \\<ge> \\<iota> 0\" if \"\\<xi> \\<in> F\" for \\<xi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> 0 \\<le> \\<xi>", "using F_imp_Ex [OF that]"], ["proof (prove)\nusing this:\n  \\<exists>k<p. \\<xi> = \\<iota> k\n\ngoal (1 subgoal):\n 1. \\<iota> 0 \\<le> \\<xi>", "by (metis dual_order.order_iff_strict le0 less_\\<iota>_I)"], ["proof (state)\nthis:\n  ?\\<xi> \\<in> F \\<Longrightarrow> \\<iota> 0 \\<le> ?\\<xi>\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "define D where \"D \\<equiv> \\<lambda>k. (if k=0 then {..<\\<iota> 0} else {\\<iota> (k-1)<..<\\<iota> k}) \\<inter> elts \\<beta>\""], ["proof (state)\nthis:\n  D \\<equiv>\n  \\<lambda>k.\n     (if k = 0 then {..<\\<iota> 0}\n      else {\\<iota> (k - 1)<..<\\<iota> k}) \\<inter>\n     elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have D\\<beta>: \"D k \\<subseteq> elts \\<beta>\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. D k \\<subseteq> elts \\<beta>", "by (auto simp: D_def)"], ["proof (state)\nthis:\n  D ?k \\<subseteq> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "then"], ["proof (chain)\npicking this:\n  D ?k \\<subseteq> elts \\<beta>", "have small_D [simp]: \"small (D k)\" for k"], ["proof (prove)\nusing this:\n  D ?k \\<subseteq> elts \\<beta>\n\ngoal (1 subgoal):\n 1. small (D k)", "by (meson down)"], ["proof (state)\nthis:\n  small (D ?k)\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have M_Int_D: \"M (elts \\<beta>) \\<AA> x \\<inter> D k = M (D k) \\<AA> x\" if \"k \\<le> p\" for x k"], ["proof (prove)\ngoal (1 subgoal):\n 1. M (elts \\<beta>) \\<AA> x \\<inter> D k = M (D k) \\<AA> x", "using D\\<beta>"], ["proof (prove)\nusing this:\n  D ?k \\<subseteq> elts \\<beta>\n\ngoal (1 subgoal):\n 1. M (elts \\<beta>) \\<AA> x \\<inter> D k = M (D k) \\<AA> x", "by (auto simp: M_def)"], ["proof (state)\nthis:\n  ?k \\<le> p \\<Longrightarrow>\n  M (elts \\<beta>) \\<AA> ?x \\<inter> D ?k = M (D ?k) \\<AA> ?x\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have \\<iota>_le_if_D: \"\\<iota> k \\<le> \\<mu>\" if \"\\<mu> \\<in> D (Suc k)\" for \\<mu> k"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> k \\<le> \\<mu>", "using that"], ["proof (prove)\nusing this:\n  \\<mu> \\<in> D (Suc k)\n\ngoal (1 subgoal):\n 1. \\<iota> k \\<le> \\<mu>", "by (simp add: D_def order.order_iff_strict split: if_split_asm)"], ["proof (state)\nthis:\n  ?\\<mu> \\<in> D (Suc ?k) \\<Longrightarrow> \\<iota> ?k \\<le> ?\\<mu>\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have \"disjnt (D i) (D j)\" if \"i < j\" \"j \\<le> p\" for i j"], ["proof (prove)\ngoal (1 subgoal):\n 1. disjnt (D i) (D j)", "proof (cases j)"], ["proof (state)\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow> disjnt (D i) (D j)\n 2. \\<And>nat. j = Suc nat \\<Longrightarrow> disjnt (D i) (D j)", "case (Suc j')"], ["proof (state)\nthis:\n  j = Suc j'\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow> disjnt (D i) (D j)\n 2. \\<And>nat. j = Suc nat \\<Longrightarrow> disjnt (D i) (D j)", "then"], ["proof (chain)\npicking this:\n  j = Suc j'", "show ?thesis"], ["proof (prove)\nusing this:\n  j = Suc j'\n\ngoal (1 subgoal):\n 1. disjnt (D i) (D j)", "using that"], ["proof (prove)\nusing this:\n  j = Suc j'\n  i < j\n  j \\<le> p\n\ngoal (1 subgoal):\n 1. disjnt (D i) (D j)", "apply (auto simp: disjnt_def D_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>j = Suc j'; Suc j' \\<le> p; i = 0; x < \\<iota> 0;\n        x \\<in> elts \\<beta>; \\<iota> j' < x; x < \\<iota> (Suc j')\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>j = Suc j'; i < Suc j'; Suc j' \\<le> p; 0 < i;\n        x \\<in> elts \\<beta>; \\<iota> (i - Suc 0) < x; x < \\<iota> i;\n        \\<iota> j' < x; x < \\<iota> (Suc j')\\<rbrakk>\n       \\<Longrightarrow> False", "using not_less_eq"], ["proof (prove)\nusing this:\n  (\\<not> ?m < ?n) = (?n < Suc ?m)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>j = Suc j'; Suc j' \\<le> p; i = 0; x < \\<iota> 0;\n        x \\<in> elts \\<beta>; \\<iota> j' < x; x < \\<iota> (Suc j')\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>j = Suc j'; i < Suc j'; Suc j' \\<le> p; 0 < i;\n        x \\<in> elts \\<beta>; \\<iota> (i - Suc 0) < x; x < \\<iota> i;\n        \\<iota> j' < x; x < \\<iota> (Suc j')\\<rbrakk>\n       \\<Longrightarrow> False", "by (blast intro: less_\\<iota>_D less_trans Suc_leD)+"], ["proof (state)\nthis:\n  disjnt (D i) (D j)\n\ngoal (1 subgoal):\n 1. j = 0 \\<Longrightarrow> disjnt (D i) (D j)", "qed (use that in auto)"], ["proof (state)\nthis:\n  \\<lbrakk>?i < ?j; ?j \\<le> p\\<rbrakk>\n  \\<Longrightarrow> disjnt (D ?i) (D ?j)\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?i < ?j; ?j \\<le> p\\<rbrakk>\n  \\<Longrightarrow> disjnt (D ?i) (D ?j)", "have disjnt_DD: \"disjnt (D i) (D j)\" if \"i \\<noteq> j\" \"i \\<le> p\" \"j \\<le> p\" for i j"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < ?j; ?j \\<le> p\\<rbrakk>\n  \\<Longrightarrow> disjnt (D ?i) (D ?j)\n\ngoal (1 subgoal):\n 1. disjnt (D i) (D j)", "using disjnt_sym nat_neq_iff that"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < ?j; ?j \\<le> p\\<rbrakk>\n  \\<Longrightarrow> disjnt (D ?i) (D ?j)\n  disjnt ?A ?B \\<Longrightarrow> disjnt ?B ?A\n  (?m \\<noteq> ?n) = (?m < ?n \\<or> ?n < ?m)\n  i \\<noteq> j\n  i \\<le> p\n  j \\<le> p\n\ngoal (1 subgoal):\n 1. disjnt (D i) (D j)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?i \\<noteq> ?j; ?i \\<le> p; ?j \\<le> p\\<rbrakk>\n  \\<Longrightarrow> disjnt (D ?i) (D ?j)\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have UN_D_eq: \"(\\<Union>l \\<le> k. D l) = {..<\\<iota> k} \\<inter> (elts \\<beta> - F)\" if \"k \\<le> p\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (D ` {..k}) = {..<\\<iota> k} \\<inter> (elts \\<beta> - F)", "using that"], ["proof (prove)\nusing this:\n  k \\<le> p\n\ngoal (1 subgoal):\n 1. \\<Union> (D ` {..k}) = {..<\\<iota> k} \\<inter> (elts \\<beta> - F)", "proof (induction k)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<le> p \\<Longrightarrow>\n    \\<Union> (D ` {..0}) = {..<\\<iota> 0} \\<inter> (elts \\<beta> - F)\n 2. \\<And>k.\n       \\<lbrakk>k \\<le> p \\<Longrightarrow>\n                \\<Union> (D ` {..k}) =\n                {..<\\<iota> k} \\<inter> (elts \\<beta> - F);\n        Suc k \\<le> p\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (D ` {..Suc k}) =\n                         {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)", "case 0"], ["proof (state)\nthis:\n  0 \\<le> p\n\ngoal (2 subgoals):\n 1. 0 \\<le> p \\<Longrightarrow>\n    \\<Union> (D ` {..0}) = {..<\\<iota> 0} \\<inter> (elts \\<beta> - F)\n 2. \\<And>k.\n       \\<lbrakk>k \\<le> p \\<Longrightarrow>\n                \\<Union> (D ` {..k}) =\n                {..<\\<iota> k} \\<inter> (elts \\<beta> - F);\n        Suc k \\<le> p\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (D ` {..Suc k}) =\n                         {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)", "then"], ["proof (chain)\npicking this:\n  0 \\<le> p", "show ?case"], ["proof (prove)\nusing this:\n  0 \\<le> p\n\ngoal (1 subgoal):\n 1. \\<Union> (D ` {..0}) = {..<\\<iota> 0} \\<inter> (elts \\<beta> - F)", "by (auto simp: D_def F_imp_ge leD)"], ["proof (state)\nthis:\n  \\<Union> (D ` {..0}) = {..<\\<iota> 0} \\<inter> (elts \\<beta> - F)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>k \\<le> p \\<Longrightarrow>\n                \\<Union> (D ` {..k}) =\n                {..<\\<iota> k} \\<inter> (elts \\<beta> - F);\n        Suc k \\<le> p\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (D ` {..Suc k}) =\n                         {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>k \\<le> p \\<Longrightarrow>\n                \\<Union> (D ` {..k}) =\n                {..<\\<iota> k} \\<inter> (elts \\<beta> - F);\n        Suc k \\<le> p\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (D ` {..Suc k}) =\n                         {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)", "case (Suc k)"], ["proof (state)\nthis:\n  k \\<le> p \\<Longrightarrow>\n  \\<Union> (D ` {..k}) = {..<\\<iota> k} \\<inter> (elts \\<beta> - F)\n  Suc k \\<le> p\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>k \\<le> p \\<Longrightarrow>\n                \\<Union> (D ` {..k}) =\n                {..<\\<iota> k} \\<inter> (elts \\<beta> - F);\n        Suc k \\<le> p\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (D ` {..Suc k}) =\n                         {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)", "have \"D (Suc k) \\<union> {..<\\<iota> k} \\<inter> (elts \\<beta> - F) = {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)\"\n              (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. D (Suc k) \\<union> {..<\\<iota> k} \\<inter> (elts \\<beta> - F) =\n    {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. D (Suc k) \\<union> {..<\\<iota> k} \\<inter> (elts \\<beta> - F)\n    \\<subseteq> {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)\n 2. {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)\n    \\<subseteq> D (Suc k) \\<union>\n                {..<\\<iota> k} \\<inter> (elts \\<beta> - F)", "show \"?lhs \\<subseteq> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D (Suc k) \\<union> {..<\\<iota> k} \\<inter> (elts \\<beta> - F)\n    \\<subseteq> {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)", "using Suc.prems"], ["proof (prove)\nusing this:\n  Suc k \\<le> p\n\ngoal (1 subgoal):\n 1. D (Suc k) \\<union> {..<\\<iota> k} \\<inter> (elts \\<beta> - F)\n    \\<subseteq> {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)", "by (auto simp: D_def if_split_mem2 intro: less_\\<iota>_I less_trans dest!: less_\\<iota>_D F_imp_Ex)"], ["proof (state)\nthis:\n  D (Suc k) \\<union> {..<\\<iota> k} \\<inter> (elts \\<beta> - F)\n  \\<subseteq> {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)\n\ngoal (1 subgoal):\n 1. {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)\n    \\<subseteq> D (Suc k) \\<union>\n                {..<\\<iota> k} \\<inter> (elts \\<beta> - F)", "have \"\\<And>x. \\<lbrakk>x < \\<iota> (Suc k); x \\<in> elts \\<beta>; x \\<notin> F; \\<iota> k \\<le> x\\<rbrakk> \\<Longrightarrow> \\<iota> k < x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x < \\<iota> (Suc k); x \\<in> elts \\<beta>; x \\<notin> F;\n        \\<iota> k \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<iota> k < x", "using Suc.prems \\<open>F \\<subseteq> elts \\<beta>\\<close> bij\\<iota> le_imp_less_or_eq"], ["proof (prove)\nusing this:\n  Suc k \\<le> p\n  F \\<subseteq> elts \\<beta>\n  bij_betw \\<iota> {..p} (insert \\<beta> F)\n  ?x \\<le> ?y \\<Longrightarrow> ?x < ?y \\<or> ?x = ?y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x < \\<iota> (Suc k); x \\<in> elts \\<beta>; x \\<notin> F;\n        \\<iota> k \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<iota> k < x", "by (fastforce simp: bij_betw_iff_bijections)"], ["proof (state)\nthis:\n  \\<lbrakk>?x < \\<iota> (Suc k); ?x \\<in> elts \\<beta>; ?x \\<notin> F;\n   \\<iota> k \\<le> ?x\\<rbrakk>\n  \\<Longrightarrow> \\<iota> k < ?x\n\ngoal (1 subgoal):\n 1. {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)\n    \\<subseteq> D (Suc k) \\<union>\n                {..<\\<iota> k} \\<inter> (elts \\<beta> - F)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x < \\<iota> (Suc k); ?x \\<in> elts \\<beta>; ?x \\<notin> F;\n   \\<iota> k \\<le> ?x\\<rbrakk>\n  \\<Longrightarrow> \\<iota> k < ?x", "show \"?rhs \\<subseteq> ?lhs\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x < \\<iota> (Suc k); ?x \\<in> elts \\<beta>; ?x \\<notin> F;\n   \\<iota> k \\<le> ?x\\<rbrakk>\n  \\<Longrightarrow> \\<iota> k < ?x\n\ngoal (1 subgoal):\n 1. {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)\n    \\<subseteq> D (Suc k) \\<union>\n                {..<\\<iota> k} \\<inter> (elts \\<beta> - F)", "using Suc.prems"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x < \\<iota> (Suc k); ?x \\<in> elts \\<beta>; ?x \\<notin> F;\n   \\<iota> k \\<le> ?x\\<rbrakk>\n  \\<Longrightarrow> \\<iota> k < ?x\n  Suc k \\<le> p\n\ngoal (1 subgoal):\n 1. {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)\n    \\<subseteq> D (Suc k) \\<union>\n                {..<\\<iota> k} \\<inter> (elts \\<beta> - F)", "by (auto simp: D_def Ord_not_less Ord_in_Ord [OF \\<open>Ord \\<beta>\\<close>] Ord_\\<iota> if_split_mem2)"], ["proof (state)\nthis:\n  {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)\n  \\<subseteq> D (Suc k) \\<union> {..<\\<iota> k} \\<inter> (elts \\<beta> - F)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  D (Suc k) \\<union> {..<\\<iota> k} \\<inter> (elts \\<beta> - F) =\n  {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>k \\<le> p \\<Longrightarrow>\n                \\<Union> (D ` {..k}) =\n                {..<\\<iota> k} \\<inter> (elts \\<beta> - F);\n        Suc k \\<le> p\\<rbrakk>\n       \\<Longrightarrow> \\<Union> (D ` {..Suc k}) =\n                         {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)", "then"], ["proof (chain)\npicking this:\n  D (Suc k) \\<union> {..<\\<iota> k} \\<inter> (elts \\<beta> - F) =\n  {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)", "show ?case"], ["proof (prove)\nusing this:\n  D (Suc k) \\<union> {..<\\<iota> k} \\<inter> (elts \\<beta> - F) =\n  {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)\n\ngoal (1 subgoal):\n 1. \\<Union> (D ` {..Suc k}) =\n    {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)", "using Suc"], ["proof (prove)\nusing this:\n  D (Suc k) \\<union> {..<\\<iota> k} \\<inter> (elts \\<beta> - F) =\n  {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)\n  k \\<le> p \\<Longrightarrow>\n  \\<Union> (D ` {..k}) = {..<\\<iota> k} \\<inter> (elts \\<beta> - F)\n  Suc k \\<le> p\n\ngoal (1 subgoal):\n 1. \\<Union> (D ` {..Suc k}) =\n    {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)", "by (simp add: atMost_Suc)"], ["proof (state)\nthis:\n  \\<Union> (D ` {..Suc k}) =\n  {..<\\<iota> (Suc k)} \\<inter> (elts \\<beta> - F)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?k \\<le> p \\<Longrightarrow>\n  \\<Union> (D ` {..?k}) = {..<\\<iota> ?k} \\<inter> (elts \\<beta> - F)\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have \\<beta>_decomp: \"elts \\<beta> = F \\<union> (\\<Union>k \\<le> p. D k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. elts \\<beta> = F \\<union> \\<Union> (D ` {..p})", "using \\<open>F \\<subseteq> elts \\<beta>\\<close> OrdmemD [OF \\<open>Ord \\<beta>\\<close>]"], ["proof (prove)\nusing this:\n  F \\<subseteq> elts \\<beta>\n  ?j \\<in> elts \\<beta> \\<Longrightarrow> ?j < \\<beta>\n\ngoal (1 subgoal):\n 1. elts \\<beta> = F \\<union> \\<Union> (D ` {..p})", "by (auto simp: UN_D_eq)"], ["proof (state)\nthis:\n  elts \\<beta> = F \\<union> \\<Union> (D ` {..p})\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "define \\<beta>idx where \"\\<beta>idx \\<equiv> \\<lambda>\\<nu>. @k. \\<nu> \\<in> D k \\<and> k \\<le> p\""], ["proof (state)\nthis:\n  \\<beta>idx \\<equiv>\n  \\<lambda>\\<nu>. SOME k. \\<nu> \\<in> D k \\<and> k \\<le> p\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have \\<beta>idx: \"\\<nu> \\<in> D (\\<beta>idx \\<nu>) \\<and> \\<beta>idx \\<nu> \\<le> p\" if \"\\<nu> \\<in> elts \\<beta> - F\" for \\<nu>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nu> \\<in> D (\\<beta>idx \\<nu>) \\<and> \\<beta>idx \\<nu> \\<le> p", "using that"], ["proof (prove)\nusing this:\n  \\<nu> \\<in> elts \\<beta> - F\n\ngoal (1 subgoal):\n 1. \\<nu> \\<in> D (\\<beta>idx \\<nu>) \\<and> \\<beta>idx \\<nu> \\<le> p", "by (force simp: \\<beta>idx_def \\<beta>_decomp intro: someI_ex del: conjI)"], ["proof (state)\nthis:\n  ?\\<nu> \\<in> elts \\<beta> - F \\<Longrightarrow>\n  ?\\<nu> \\<in> D (\\<beta>idx ?\\<nu>) \\<and> \\<beta>idx ?\\<nu> \\<le> p\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have any_imp_\\<beta>idx: \"k = \\<beta>idx \\<nu>\" if \"\\<nu> \\<in> D k\" \"k \\<le> p\" for k \\<nu>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k = \\<beta>idx \\<nu>", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<noteq> \\<beta>idx \\<nu> \\<Longrightarrow> False", "assume non: \"k \\<noteq> \\<beta>idx \\<nu>\""], ["proof (state)\nthis:\n  k \\<noteq> \\<beta>idx \\<nu>\n\ngoal (1 subgoal):\n 1. k \\<noteq> \\<beta>idx \\<nu> \\<Longrightarrow> False", "have \"\\<nu> \\<notin> F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nu> \\<notin> F", "using that UN_D_eq"], ["proof (prove)\nusing this:\n  \\<nu> \\<in> D k\n  k \\<le> p\n  ?k \\<le> p \\<Longrightarrow>\n  \\<Union> (D ` {..?k}) = {..<\\<iota> ?k} \\<inter> (elts \\<beta> - F)\n\ngoal (1 subgoal):\n 1. \\<nu> \\<notin> F", "by auto"], ["proof (state)\nthis:\n  \\<nu> \\<notin> F\n\ngoal (1 subgoal):\n 1. k \\<noteq> \\<beta>idx \\<nu> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<nu> \\<notin> F", "show False"], ["proof (prove)\nusing this:\n  \\<nu> \\<notin> F\n\ngoal (1 subgoal):\n 1. False", "using disjnt_DD [OF non]"], ["proof (prove)\nusing this:\n  \\<nu> \\<notin> F\n  \\<lbrakk>k \\<le> p; \\<beta>idx \\<nu> \\<le> p\\<rbrakk>\n  \\<Longrightarrow> disjnt (D k) (D (\\<beta>idx \\<nu>))\n\ngoal (1 subgoal):\n 1. False", "by (metis D\\<beta> Diff_iff \\<beta>idx disjnt_iff subsetD that)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<nu> \\<in> D ?k; ?k \\<le> p\\<rbrakk>\n  \\<Longrightarrow> ?k = \\<beta>idx ?\\<nu>\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have \"\\<exists>A'. A' \\<subseteq> A \\<and> tp A' = \\<alpha> \\<and> (\\<forall>x \\<in> A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A'\\<subseteq>A.\n       tp A' = \\<alpha> \\<and>\n       (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x)", "using F"], ["proof (prove)\nusing this:\n  finite F\n  F \\<subseteq> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<exists>A'\\<subseteq>A.\n       tp A' = \\<alpha> \\<and>\n       (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x)", "proof induction"], ["proof (state)\ngoal (2 subgoals):\n 1. {} \\<subseteq> elts \\<beta> \\<Longrightarrow>\n    \\<exists>A'\\<subseteq>A.\n       tp A' = \\<alpha> \\<and>\n       (\\<forall>x\\<in>A'. {} \\<subseteq> M (elts \\<beta>) \\<AA> x)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> elts \\<beta> \\<Longrightarrow>\n        \\<exists>A'\\<subseteq>A.\n           tp A' = \\<alpha> \\<and>\n           (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x);\n        insert x F \\<subseteq> elts \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'\\<subseteq>A.\n                            tp A' = \\<alpha> \\<and>\n                            (\\<forall>xa\\<in>A'.\n                                insert x F\n                                \\<subseteq> M (elts \\<beta>) \\<AA> xa)", "case (insert \\<nu> F)"], ["proof (state)\nthis:\n  finite F\n  \\<nu> \\<notin> F\n  F \\<subseteq> elts \\<beta> \\<Longrightarrow>\n  \\<exists>A'\\<subseteq>A.\n     tp A' = \\<alpha> \\<and>\n     (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x)\n  insert \\<nu> F \\<subseteq> elts \\<beta>\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> elts \\<beta> \\<Longrightarrow>\n    \\<exists>A'\\<subseteq>A.\n       tp A' = \\<alpha> \\<and>\n       (\\<forall>x\\<in>A'. {} \\<subseteq> M (elts \\<beta>) \\<AA> x)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> elts \\<beta> \\<Longrightarrow>\n        \\<exists>A'\\<subseteq>A.\n           tp A' = \\<alpha> \\<and>\n           (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x);\n        insert x F \\<subseteq> elts \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'\\<subseteq>A.\n                            tp A' = \\<alpha> \\<and>\n                            (\\<forall>xa\\<in>A'.\n                                insert x F\n                                \\<subseteq> M (elts \\<beta>) \\<AA> xa)", "then"], ["proof (chain)\npicking this:\n  finite F\n  \\<nu> \\<notin> F\n  F \\<subseteq> elts \\<beta> \\<Longrightarrow>\n  \\<exists>A'\\<subseteq>A.\n     tp A' = \\<alpha> \\<and>\n     (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x)\n  insert \\<nu> F \\<subseteq> elts \\<beta>", "obtain A' where \"A' \\<subseteq> A\" and A': \"A' \\<subseteq> elts (\\<alpha>*\\<beta>)\" \"tp A' = \\<alpha>\" and FN: \"\\<And>x. x \\<in> A' \\<Longrightarrow> F \\<subseteq> M (elts \\<beta>) \\<AA> x\""], ["proof (prove)\nusing this:\n  finite F\n  \\<nu> \\<notin> F\n  F \\<subseteq> elts \\<beta> \\<Longrightarrow>\n  \\<exists>A'\\<subseteq>A.\n     tp A' = \\<alpha> \\<and>\n     (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x)\n  insert \\<nu> F \\<subseteq> elts \\<beta>\n\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        \\<lbrakk>A' \\<subseteq> A; A' \\<subseteq> elts (\\<alpha> * \\<beta>);\n         tp A' = \\<alpha>;\n         \\<And>x.\n            x \\<in> A' \\<Longrightarrow>\n            F \\<subseteq> M (elts \\<beta>) \\<AA> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using A(1)"], ["proof (prove)\nusing this:\n  finite F\n  \\<nu> \\<notin> F\n  F \\<subseteq> elts \\<beta> \\<Longrightarrow>\n  \\<exists>A'\\<subseteq>A.\n     tp A' = \\<alpha> \\<and>\n     (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x)\n  insert \\<nu> F \\<subseteq> elts \\<beta>\n  A \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        \\<lbrakk>A' \\<subseteq> A; A' \\<subseteq> elts (\\<alpha> * \\<beta>);\n         tp A' = \\<alpha>;\n         \\<And>x.\n            x \\<in> A' \\<Longrightarrow>\n            F \\<subseteq> M (elts \\<beta>) \\<AA> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A' \\<subseteq> A\n  A' \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp A' = \\<alpha>\n  ?x \\<in> A' \\<Longrightarrow> F \\<subseteq> M (elts \\<beta>) \\<AA> ?x\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> elts \\<beta> \\<Longrightarrow>\n    \\<exists>A'\\<subseteq>A.\n       tp A' = \\<alpha> \\<and>\n       (\\<forall>x\\<in>A'. {} \\<subseteq> M (elts \\<beta>) \\<AA> x)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> elts \\<beta> \\<Longrightarrow>\n        \\<exists>A'\\<subseteq>A.\n           tp A' = \\<alpha> \\<and>\n           (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x);\n        insert x F \\<subseteq> elts \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'\\<subseteq>A.\n                            tp A' = \\<alpha> \\<and>\n                            (\\<forall>xa\\<in>A'.\n                                insert x F\n                                \\<subseteq> M (elts \\<beta>) \\<AA> xa)", "define A'' where \"A'' \\<equiv> {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> \\<AA> \\<nu>)}\""], ["proof (state)\nthis:\n  A'' \\<equiv> {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> \\<AA> \\<nu>)}\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> elts \\<beta> \\<Longrightarrow>\n    \\<exists>A'\\<subseteq>A.\n       tp A' = \\<alpha> \\<and>\n       (\\<forall>x\\<in>A'. {} \\<subseteq> M (elts \\<beta>) \\<AA> x)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> elts \\<beta> \\<Longrightarrow>\n        \\<exists>A'\\<subseteq>A.\n           tp A' = \\<alpha> \\<and>\n           (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x);\n        insert x F \\<subseteq> elts \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'\\<subseteq>A.\n                            tp A' = \\<alpha> \\<and>\n                            (\\<forall>xa\\<in>A'.\n                                insert x F\n                                \\<subseteq> M (elts \\<beta>) \\<AA> xa)", "have \"\\<nu> \\<in> elts \\<beta>\" \"F \\<subseteq> elts \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nu> \\<in> elts \\<beta> &&& F \\<subseteq> elts \\<beta>", "using insert"], ["proof (prove)\nusing this:\n  finite F\n  \\<nu> \\<notin> F\n  F \\<subseteq> elts \\<beta> \\<Longrightarrow>\n  \\<exists>A'\\<subseteq>A.\n     tp A' = \\<alpha> \\<and>\n     (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x)\n  insert \\<nu> F \\<subseteq> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<nu> \\<in> elts \\<beta> &&& F \\<subseteq> elts \\<beta>", "by auto"], ["proof (state)\nthis:\n  \\<nu> \\<in> elts \\<beta>\n  F \\<subseteq> elts \\<beta>\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> elts \\<beta> \\<Longrightarrow>\n    \\<exists>A'\\<subseteq>A.\n       tp A' = \\<alpha> \\<and>\n       (\\<forall>x\\<in>A'. {} \\<subseteq> M (elts \\<beta>) \\<AA> x)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> elts \\<beta> \\<Longrightarrow>\n        \\<exists>A'\\<subseteq>A.\n           tp A' = \\<alpha> \\<and>\n           (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x);\n        insert x F \\<subseteq> elts \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'\\<subseteq>A.\n                            tp A' = \\<alpha> \\<and>\n                            (\\<forall>xa\\<in>A'.\n                                insert x F\n                                \\<subseteq> M (elts \\<beta>) \\<AA> xa)", "note ordertype_eq_Ord [OF \\<open>Ord \\<beta>\\<close>, simp]"], ["proof (state)\nthis:\n  tp (elts \\<beta>) = \\<beta>\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> elts \\<beta> \\<Longrightarrow>\n    \\<exists>A'\\<subseteq>A.\n       tp A' = \\<alpha> \\<and>\n       (\\<forall>x\\<in>A'. {} \\<subseteq> M (elts \\<beta>) \\<AA> x)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> elts \\<beta> \\<Longrightarrow>\n        \\<exists>A'\\<subseteq>A.\n           tp A' = \\<alpha> \\<and>\n           (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x);\n        insert x F \\<subseteq> elts \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'\\<subseteq>A.\n                            tp A' = \\<alpha> \\<and>\n                            (\\<forall>xa\\<in>A'.\n                                insert x F\n                                \\<subseteq> M (elts \\<beta>) \\<AA> xa)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A'\\<subseteq>A.\n       tp A' = \\<alpha> \\<and>\n       (\\<forall>x\\<in>A'.\n           insert \\<nu> F \\<subseteq> M (elts \\<beta>) \\<AA> x)", "proof (intro exI conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?A' \\<subseteq> A\n 2. tp ?A' = \\<alpha>\n 3. \\<forall>x\\<in>?A'. insert \\<nu> F \\<subseteq> M (elts \\<beta>) \\<AA> x", "show \"A'' \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A'' \\<subseteq> A", "using \\<open>A' \\<subseteq> A\\<close>"], ["proof (prove)\nusing this:\n  A' \\<subseteq> A\n\ngoal (1 subgoal):\n 1. A'' \\<subseteq> A", "by (auto simp: A''_def)"], ["proof (state)\nthis:\n  A'' \\<subseteq> A\n\ngoal (2 subgoals):\n 1. tp A'' = \\<alpha>\n 2. \\<forall>x\\<in>A''. insert \\<nu> F \\<subseteq> M (elts \\<beta>) \\<AA> x", "have \"tp A'' \\<le> \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tp A'' \\<le> \\<alpha>", "using \\<open>A'' \\<subseteq> A\\<close> down ordertype_VWF_mono A"], ["proof (prove)\nusing this:\n  A'' \\<subseteq> A\n  ?Y \\<subseteq> elts ?x \\<Longrightarrow> small ?Y\n  \\<lbrakk>?X \\<subseteq> ?Y; small ?Y\\<rbrakk>\n  \\<Longrightarrow> tp ?X \\<le> tp ?Y\n  A \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp A = \\<alpha>\n\ngoal (1 subgoal):\n 1. tp A'' \\<le> \\<alpha>", "by blast"], ["proof (state)\nthis:\n  tp A'' \\<le> \\<alpha>\n\ngoal (2 subgoals):\n 1. tp A'' = \\<alpha>\n 2. \\<forall>x\\<in>A''. insert \\<nu> F \\<subseteq> M (elts \\<beta>) \\<AA> x", "moreover"], ["proof (state)\nthis:\n  tp A'' \\<le> \\<alpha>\n\ngoal (2 subgoals):\n 1. tp A'' = \\<alpha>\n 2. \\<forall>x\\<in>A''. insert \\<nu> F \\<subseteq> M (elts \\<beta>) \\<AA> x", "have \"\\<AA> \\<nu> \\<subseteq> elts (\\<alpha>*\\<beta>)\" \"tp (\\<AA> \\<nu>) = \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>) &&&\n    tp (\\<AA> \\<nu>) = \\<alpha>", "using \\<AA> \\<open>\\<nu> \\<in> elts \\<beta>\\<close>"], ["proof (prove)\nusing this:\n  \\<AA>\n  \\<in> elts \\<beta> \\<rightarrow>\n        {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp X = \\<alpha>}\n  \\<nu> \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>) &&&\n    tp (\\<AA> \\<nu>) = \\<alpha>", "by auto"], ["proof (state)\nthis:\n  \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp (\\<AA> \\<nu>) = \\<alpha>\n\ngoal (2 subgoals):\n 1. tp A'' = \\<alpha>\n 2. \\<forall>x\\<in>A''. insert \\<nu> F \\<subseteq> M (elts \\<beta>) \\<AA> x", "then"], ["proof (chain)\npicking this:\n  \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp (\\<AA> \\<nu>) = \\<alpha>", "have \"\\<alpha> \\<le> tp A''\""], ["proof (prove)\nusing this:\n  \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp (\\<AA> \\<nu>) = \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp A''", "using IX' [OF _ _ A']"], ["proof (prove)\nusing this:\n  \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp (\\<AA> \\<nu>) = \\<alpha>\n  \\<lbrakk>?A \\<subseteq> elts (\\<alpha> * \\<beta>);\n   tp ?A = \\<alpha>\\<rbrakk>\n  \\<Longrightarrow> \\<alpha>\n                    \\<le> tp {x \\<in> A'.\n                              \\<alpha> \\<le> tp (K 1 x \\<inter> ?A)}\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp A''", "by (simp add: A''_def)"], ["proof (state)\nthis:\n  \\<alpha> \\<le> tp A''\n\ngoal (2 subgoals):\n 1. tp A'' = \\<alpha>\n 2. \\<forall>x\\<in>A''. insert \\<nu> F \\<subseteq> M (elts \\<beta>) \\<AA> x", "ultimately"], ["proof (chain)\npicking this:\n  tp A'' \\<le> \\<alpha>\n  \\<alpha> \\<le> tp A''", "show \"tp A'' = \\<alpha>\""], ["proof (prove)\nusing this:\n  tp A'' \\<le> \\<alpha>\n  \\<alpha> \\<le> tp A''\n\ngoal (1 subgoal):\n 1. tp A'' = \\<alpha>", "by (rule antisym)"], ["proof (state)\nthis:\n  tp A'' = \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A''. insert \\<nu> F \\<subseteq> M (elts \\<beta>) \\<AA> x", "have \"\\<nu> \\<in> M (elts \\<beta>) \\<AA> x\" \"F \\<subseteq> M (elts \\<beta>) \\<AA> x\"\n                if \"x \\<in> A''\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nu> \\<in> M (elts \\<beta>) \\<AA> x &&&\n    F \\<subseteq> M (elts \\<beta>) \\<AA> x", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<nu> \\<in> M (elts \\<beta>) \\<AA> x\n 2. F \\<subseteq> M (elts \\<beta>) \\<AA> x", "show \"F \\<subseteq> M (elts \\<beta>) \\<AA> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<subseteq> M (elts \\<beta>) \\<AA> x", "using A''_def FN that"], ["proof (prove)\nusing this:\n  A'' \\<equiv> {x \\<in> A'. \\<alpha> \\<le> tp (K 1 x \\<inter> \\<AA> \\<nu>)}\n  ?x \\<in> A' \\<Longrightarrow> F \\<subseteq> M (elts \\<beta>) \\<AA> ?x\n  x \\<in> A''\n\ngoal (1 subgoal):\n 1. F \\<subseteq> M (elts \\<beta>) \\<AA> x", "by blast"], ["proof (state)\nthis:\n  F \\<subseteq> M (elts \\<beta>) \\<AA> x\n\ngoal (1 subgoal):\n 1. \\<nu> \\<in> M (elts \\<beta>) \\<AA> x", "show \"\\<nu> \\<in> M (elts \\<beta>) \\<AA> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nu> \\<in> M (elts \\<beta>) \\<AA> x", "using \\<open>\\<nu> \\<in> elts \\<beta>\\<close> that"], ["proof (prove)\nusing this:\n  \\<nu> \\<in> elts \\<beta>\n  x \\<in> A''\n\ngoal (1 subgoal):\n 1. \\<nu> \\<in> M (elts \\<beta>) \\<AA> x", "by (simp add: M_def A''_def)"], ["proof (state)\nthis:\n  \\<nu> \\<in> M (elts \\<beta>) \\<AA> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> A'' \\<Longrightarrow> \\<nu> \\<in> M (elts \\<beta>) \\<AA> ?x\n  ?x \\<in> A'' \\<Longrightarrow> F \\<subseteq> M (elts \\<beta>) \\<AA> ?x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A''. insert \\<nu> F \\<subseteq> M (elts \\<beta>) \\<AA> x", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> A'' \\<Longrightarrow> \\<nu> \\<in> M (elts \\<beta>) \\<AA> ?x\n  ?x \\<in> A'' \\<Longrightarrow> F \\<subseteq> M (elts \\<beta>) \\<AA> ?x", "show \"\\<forall>x\\<in>A''. insert \\<nu> F \\<subseteq> M (elts \\<beta>) \\<AA> x\""], ["proof (prove)\nusing this:\n  ?x \\<in> A'' \\<Longrightarrow> \\<nu> \\<in> M (elts \\<beta>) \\<AA> ?x\n  ?x \\<in> A'' \\<Longrightarrow> F \\<subseteq> M (elts \\<beta>) \\<AA> ?x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A''. insert \\<nu> F \\<subseteq> M (elts \\<beta>) \\<AA> x", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>A''. insert \\<nu> F \\<subseteq> M (elts \\<beta>) \\<AA> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>A'\\<subseteq>A.\n     tp A' = \\<alpha> \\<and>\n     (\\<forall>x\\<in>A'.\n         insert \\<nu> F \\<subseteq> M (elts \\<beta>) \\<AA> x)\n\ngoal (1 subgoal):\n 1. {} \\<subseteq> elts \\<beta> \\<Longrightarrow>\n    \\<exists>A'\\<subseteq>A.\n       tp A' = \\<alpha> \\<and>\n       (\\<forall>x\\<in>A'. {} \\<subseteq> M (elts \\<beta>) \\<AA> x)", "qed (use A in auto)"], ["proof (state)\nthis:\n  \\<exists>A'\\<subseteq>A.\n     tp A' = \\<alpha> \\<and>\n     (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x)\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "then"], ["proof (chain)\npicking this:\n  \\<exists>A'\\<subseteq>A.\n     tp A' = \\<alpha> \\<and>\n     (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x)", "obtain A' where A': \"A' \\<subseteq> A\" \"tp A' = \\<alpha>\" and FN: \"\\<And>x. x \\<in> A' \\<Longrightarrow> F \\<subseteq> M (elts \\<beta>) \\<AA> x\""], ["proof (prove)\nusing this:\n  \\<exists>A'\\<subseteq>A.\n     tp A' = \\<alpha> \\<and>\n     (\\<forall>x\\<in>A'. F \\<subseteq> M (elts \\<beta>) \\<AA> x)\n\ngoal (1 subgoal):\n 1. (\\<And>A'.\n        \\<lbrakk>A' \\<subseteq> A; tp A' = \\<alpha>;\n         \\<And>x.\n            x \\<in> A' \\<Longrightarrow>\n            F \\<subseteq> M (elts \\<beta>) \\<AA> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  A' \\<subseteq> A\n  tp A' = \\<alpha>\n  ?x \\<in> A' \\<Longrightarrow> F \\<subseteq> M (elts \\<beta>) \\<AA> ?x\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "have False\n            if *: \"\\<And>x0 g. \\<lbrakk>x0 \\<in> A; g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>; strict_mono_on g (elts \\<beta>)\\<rbrakk>\n                   \\<Longrightarrow> (\\<exists>\\<nu>\\<in>F. g \\<nu> \\<noteq> \\<nu>) \\<or> (\\<exists>\\<nu>\\<in>elts \\<beta>. tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "fix x       \\<comment> \\<open>construction of the monotone map @{term g} mentioned above\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "assume \"x \\<in> A'\""], ["proof (state)\nthis:\n  x \\<in> A'\n\ngoal (1 subgoal):\n 1. False", "with A'"], ["proof (chain)\npicking this:\n  A' \\<subseteq> A\n  tp A' = \\<alpha>\n  x \\<in> A'", "have \"x \\<in> A\""], ["proof (prove)\nusing this:\n  A' \\<subseteq> A\n  tp A' = \\<alpha>\n  x \\<in> A'\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by blast"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. False", "have \"\\<exists>k. k \\<le> p \\<and> tp (M (D k) \\<AA> x) < tp (D k)\" (is \"?P\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>p. tp (M (D k) \\<AA> x) < tp (D k)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "assume \"\\<not> ?P\""], ["proof (state)\nthis:\n  \\<not> (\\<exists>k\\<le>p. tp (M (D k) \\<AA> x) < tp (D k))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>k\\<le>p. tp (M (D k) \\<AA> x) < tp (D k))", "have le: \"tp (D k) \\<le> tp (M (D k) \\<AA> x)\" if \"k \\<le> p\" for k"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>k\\<le>p. tp (M (D k) \\<AA> x) < tp (D k))\n\ngoal (1 subgoal):\n 1. tp (D k) \\<le> tp (M (D k) \\<AA> x)", "by (meson Ord_linear2 Ord_ordertype that)"], ["proof (state)\nthis:\n  ?k \\<le> p \\<Longrightarrow> tp (D ?k) \\<le> tp (M (D ?k) \\<AA> x)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "have \"\\<exists>f\\<in>D k \\<rightarrow> M (D k) \\<AA> x. inj_on f (D k) \\<and> (strict_mono_on f (D k))\"\n                     if \"k \\<le> p\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>D k \\<rightarrow> M (D k) \\<AA> x.\n       inj_on f (D k) \\<and> strict_mono_on f (D k)", "using le [OF that] that VWF_iff_Ord_less"], ["proof (prove)\nusing this:\n  tp (D k) \\<le> tp (M (D k) \\<AA> x)\n  k \\<le> p\n  \\<lbrakk>Ord ?\\<alpha>; Ord ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> ((?\\<alpha>, ?\\<beta>) \\<in> VWF) =\n                    (?\\<alpha> < ?\\<beta>)\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>D k \\<rightarrow> M (D k) \\<AA> x.\n       inj_on f (D k) \\<and> strict_mono_on f (D k)", "apply (clarsimp simp: ordertype_le_ordertype strict_mono_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>k \\<le> p; f \\<in> D k \\<rightarrow> M (D k) \\<AA> x;\n        inj_on f (D k);\n        \\<forall>x\\<in>D k.\n           \\<forall>y\\<in>D k.\n              (x, y) \\<in> VWF \\<longrightarrow>\n              (f x, f y) \\<in> VWF\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<in>D k \\<rightarrow> M (D k) \\<AA> x.\n                            inj_on f (D k) \\<and>\n                            (\\<forall>r s.\n                                r \\<in> D k \\<and>\n                                s \\<in> D k \\<and> r < s \\<longrightarrow>\n                                f r < f s)", "by (metis (full_types) D\\<beta> M_sub_D Ord_in_Ord PiE VWF_iff_Ord_less ord(2) subsetD)"], ["proof (state)\nthis:\n  ?k \\<le> p \\<Longrightarrow>\n  \\<exists>f\\<in>D ?k \\<rightarrow> M (D ?k) \\<AA> x.\n     inj_on f (D ?k) \\<and> strict_mono_on f (D ?k)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  ?k \\<le> p \\<Longrightarrow>\n  \\<exists>f\\<in>D ?k \\<rightarrow> M (D ?k) \\<AA> x.\n     inj_on f (D ?k) \\<and> strict_mono_on f (D ?k)", "obtain h where fun_h: \"\\<And>k. k \\<le> p \\<Longrightarrow> h k \\<in> D k \\<rightarrow> M (D k) \\<AA> x\"\n                  and inj_h: \"\\<And>k. k \\<le> p \\<Longrightarrow> inj_on (h k) (D k)\"\n                  and mono_h: \"\\<And>k x y. k \\<le> p \\<Longrightarrow> strict_mono_on (h k) (D k)\""], ["proof (prove)\nusing this:\n  ?k \\<le> p \\<Longrightarrow>\n  \\<exists>f\\<in>D ?k \\<rightarrow> M (D ?k) \\<AA> x.\n     inj_on f (D ?k) \\<and> strict_mono_on f (D ?k)\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>\\<And>k.\n                    k \\<le> p \\<Longrightarrow>\n                    h k \\<in> D k \\<rightarrow> M (D k) \\<AA> x;\n         \\<And>k. k \\<le> p \\<Longrightarrow> inj_on (h k) (D k);\n         \\<And>k x y.\n            k \\<le> p \\<Longrightarrow> strict_mono_on (h k) (D k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  ?k2 \\<le> p \\<Longrightarrow>\n  h ?k2 \\<in> D ?k2 \\<rightarrow> M (D ?k2) \\<AA> x\n  ?k2 \\<le> p \\<Longrightarrow> inj_on (h ?k2) (D ?k2)\n  ?k2 \\<le> p \\<Longrightarrow> strict_mono_on (h ?k2) (D ?k2)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  ?k2 \\<le> p \\<Longrightarrow>\n  h ?k2 \\<in> D ?k2 \\<rightarrow> M (D ?k2) \\<AA> x\n  ?k2 \\<le> p \\<Longrightarrow> inj_on (h ?k2) (D ?k2)\n  ?k2 \\<le> p \\<Longrightarrow> strict_mono_on (h ?k2) (D ?k2)", "have fun_hD: \"\\<And>k. k \\<le> p \\<Longrightarrow> h k \\<in> D k \\<rightarrow> D k\""], ["proof (prove)\nusing this:\n  ?k2 \\<le> p \\<Longrightarrow>\n  h ?k2 \\<in> D ?k2 \\<rightarrow> M (D ?k2) \\<AA> x\n  ?k2 \\<le> p \\<Longrightarrow> inj_on (h ?k2) (D ?k2)\n  ?k2 \\<le> p \\<Longrightarrow> strict_mono_on (h ?k2) (D ?k2)\n\ngoal (1 subgoal):\n 1. \\<And>k. k \\<le> p \\<Longrightarrow> h k \\<in> D k \\<rightarrow> D k", "by (auto simp: M_def)"], ["proof (state)\nthis:\n  ?k2 \\<le> p \\<Longrightarrow> h ?k2 \\<in> D ?k2 \\<rightarrow> D ?k2\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "have h_increasing: \"\\<nu> \\<le> h k \\<nu>\"\n                  if \"k \\<le> p\" and \\<nu>: \"\\<nu> \\<in> D k\" for k \\<nu>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nu> \\<le> h k \\<nu>", "proof (rule Ord_mono_imp_increasing)"], ["proof (state)\ngoal (4 subgoals):\n 1. h k \\<in> ?D \\<rightarrow> ?D\n 2. strict_mono_on (h k) ?D\n 3. ?D \\<subseteq> ON\n 4. \\<nu> \\<in> ?D", "show \"h k \\<in> D k \\<rightarrow> D k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h k \\<in> D k \\<rightarrow> D k", "by (simp add: fun_hD that(1))"], ["proof (state)\nthis:\n  h k \\<in> D k \\<rightarrow> D k\n\ngoal (3 subgoals):\n 1. strict_mono_on (h k) (D k)\n 2. D k \\<subseteq> ON\n 3. \\<nu> \\<in> D k", "show \"D k \\<subseteq> ON\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D k \\<subseteq> ON", "using D\\<beta> elts_subset_ON ord(2)"], ["proof (prove)\nusing this:\n  D ?k \\<subseteq> elts \\<beta>\n  Ord ?\\<alpha> \\<Longrightarrow> elts ?\\<alpha> \\<subseteq> ON\n  Ord \\<beta>\n\ngoal (1 subgoal):\n 1. D k \\<subseteq> ON", "by blast"], ["proof (state)\nthis:\n  D k \\<subseteq> ON\n\ngoal (2 subgoals):\n 1. strict_mono_on (h k) (D k)\n 2. \\<nu> \\<in> D k", "qed (auto simp: that mono_h)"], ["proof (state)\nthis:\n  \\<lbrakk>?k2 \\<le> p; ?\\<nu>2 \\<in> D ?k2\\<rbrakk>\n  \\<Longrightarrow> ?\\<nu>2 \\<le> h ?k2 ?\\<nu>2\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "define g where \"g \\<equiv> \\<lambda>\\<nu>. if \\<nu> \\<in> F then \\<nu> else h (\\<beta>idx \\<nu>) \\<nu>\""], ["proof (state)\nthis:\n  g \\<equiv>\n  \\<lambda>\\<nu>.\n     if \\<nu> \\<in> F then \\<nu> else h (\\<beta>idx \\<nu>) \\<nu>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "have [simp]: \"g \\<nu> = \\<nu>\" if \"\\<nu> \\<in> F\" for \\<nu>"], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<nu> = \\<nu>", "using that"], ["proof (prove)\nusing this:\n  \\<nu> \\<in> F\n\ngoal (1 subgoal):\n 1. g \\<nu> = \\<nu>", "by (auto simp: g_def)"], ["proof (state)\nthis:\n  ?\\<nu>2 \\<in> F \\<Longrightarrow> g ?\\<nu>2 = ?\\<nu>2\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "have fun_g: \"g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>", "proof (rule Pi_I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> elts \\<beta> \\<Longrightarrow> g x \\<in> elts \\<beta>", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> elts \\<beta> \\<Longrightarrow> g x \\<in> elts \\<beta>", "assume \"x \\<in> elts \\<beta>\""], ["proof (state)\nthis:\n  x \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> elts \\<beta> \\<Longrightarrow> g x \\<in> elts \\<beta>", "then"], ["proof (chain)\npicking this:\n  x \\<in> elts \\<beta>", "have \"x \\<in> D (\\<beta>idx x)\" \"\\<beta>idx x \\<le> p\" if \"x \\<notin> F\""], ["proof (prove)\nusing this:\n  x \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. x \\<in> D (\\<beta>idx x) &&& \\<beta>idx x \\<le> p", "using that"], ["proof (prove)\nusing this:\n  x \\<in> elts \\<beta>\n  x \\<notin> F\n\ngoal (1 subgoal):\n 1. x \\<in> D (\\<beta>idx x) &&& \\<beta>idx x \\<le> p", "by (auto simp: \\<beta>idx)"], ["proof (state)\nthis:\n  x \\<notin> F \\<Longrightarrow> x \\<in> D (\\<beta>idx x)\n  x \\<notin> F \\<Longrightarrow> \\<beta>idx x \\<le> p\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> elts \\<beta> \\<Longrightarrow> g x \\<in> elts \\<beta>", "then"], ["proof (chain)\npicking this:\n  x \\<notin> F \\<Longrightarrow> x \\<in> D (\\<beta>idx x)\n  x \\<notin> F \\<Longrightarrow> \\<beta>idx x \\<le> p", "show \"g x \\<in> elts \\<beta>\""], ["proof (prove)\nusing this:\n  x \\<notin> F \\<Longrightarrow> x \\<in> D (\\<beta>idx x)\n  x \\<notin> F \\<Longrightarrow> \\<beta>idx x \\<le> p\n\ngoal (1 subgoal):\n 1. g x \\<in> elts \\<beta>", "using fun_h  D\\<beta> M_sub_D \\<open>x \\<in> elts \\<beta>\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> F \\<Longrightarrow> x \\<in> D (\\<beta>idx x)\n  x \\<notin> F \\<Longrightarrow> \\<beta>idx x \\<le> p\n  ?k2 \\<le> p \\<Longrightarrow>\n  h ?k2 \\<in> D ?k2 \\<rightarrow> M (D ?k2) \\<AA> x__\n  D ?k \\<subseteq> elts \\<beta>\n  M ?D ?\\<AA> ?x \\<subseteq> ?D\n  x \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. g x \\<in> elts \\<beta>", "by (simp add: g_def) blast"], ["proof (state)\nthis:\n  g x \\<in> elts \\<beta>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "have h_in_D: \"h (\\<beta>idx \\<nu>) \\<nu> \\<in> D (\\<beta>idx \\<nu>)\" if \"\\<nu> \\<notin> F\" \"\\<nu> \\<in> elts \\<beta>\" for \\<nu>"], ["proof (prove)\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<nu>) \\<nu> \\<in> D (\\<beta>idx \\<nu>)", "using \\<beta>idx fun_hD that"], ["proof (prove)\nusing this:\n  ?\\<nu> \\<in> elts \\<beta> - F \\<Longrightarrow>\n  ?\\<nu> \\<in> D (\\<beta>idx ?\\<nu>) \\<and> \\<beta>idx ?\\<nu> \\<le> p\n  ?k2 \\<le> p \\<Longrightarrow> h ?k2 \\<in> D ?k2 \\<rightarrow> D ?k2\n  \\<nu> \\<notin> F\n  \\<nu> \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<nu>) \\<nu> \\<in> D (\\<beta>idx \\<nu>)", "by fastforce"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<nu>2 \\<notin> F; ?\\<nu>2 \\<in> elts \\<beta>\\<rbrakk>\n  \\<Longrightarrow> h (\\<beta>idx ?\\<nu>2) ?\\<nu>2\n                    \\<in> D (\\<beta>idx ?\\<nu>2)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "have 1: \"\\<iota> k < h (\\<beta>idx \\<nu>) \\<nu>\"\n                  if \"k < p\" and \\<nu>: \"\\<nu> \\<notin> F\" \"\\<nu> \\<in> elts \\<beta>\" and \"\\<iota> k < \\<nu>\" for k \\<nu>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> k < h (\\<beta>idx \\<nu>) \\<nu>", "using that h_in_D [OF \\<nu>] \\<beta>idx"], ["proof (prove)\nusing this:\n  k < p\n  \\<nu> \\<notin> F\n  \\<nu> \\<in> elts \\<beta>\n  \\<iota> k < \\<nu>\n  h (\\<beta>idx \\<nu>) \\<nu> \\<in> D (\\<beta>idx \\<nu>)\n  ?\\<nu> \\<in> elts \\<beta> - F \\<Longrightarrow>\n  ?\\<nu> \\<in> D (\\<beta>idx ?\\<nu>) \\<and> \\<beta>idx ?\\<nu> \\<le> p\n\ngoal (1 subgoal):\n 1. \\<iota> k < h (\\<beta>idx \\<nu>) \\<nu>", "by (fastforce simp: D_def dest: h_increasing split: if_split_asm)"], ["proof (state)\nthis:\n  \\<lbrakk>?k2 < p; ?\\<nu>2 \\<notin> F; ?\\<nu>2 \\<in> elts \\<beta>;\n   \\<iota> ?k2 < ?\\<nu>2\\<rbrakk>\n  \\<Longrightarrow> \\<iota> ?k2 < h (\\<beta>idx ?\\<nu>2) ?\\<nu>2\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>?k2 < p; ?\\<nu>2 \\<notin> F; ?\\<nu>2 \\<in> elts \\<beta>;\n   \\<iota> ?k2 < ?\\<nu>2\\<rbrakk>\n  \\<Longrightarrow> \\<iota> ?k2 < h (\\<beta>idx ?\\<nu>2) ?\\<nu>2\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "have 2: \"h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> k\"\n                  if \\<mu>: \"\\<mu> \\<notin> F\" \"\\<mu> \\<in> elts \\<beta>\" and \"k < p\" \"\\<mu> < \\<iota> k\" for \\<mu> k"], ["proof (prove)\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> k", "have \"\\<beta>idx \\<mu> \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta>idx \\<mu> \\<le> k", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<beta>idx \\<mu> \\<le> k \\<Longrightarrow> False", "assume \"\\<not> \\<beta>idx \\<mu> \\<le> k\""], ["proof (state)\nthis:\n  \\<not> \\<beta>idx \\<mu> \\<le> k\n\ngoal (1 subgoal):\n 1. \\<not> \\<beta>idx \\<mu> \\<le> k \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> \\<beta>idx \\<mu> \\<le> k", "have \"k < \\<beta>idx \\<mu>\""], ["proof (prove)\nusing this:\n  \\<not> \\<beta>idx \\<mu> \\<le> k\n\ngoal (1 subgoal):\n 1. k < \\<beta>idx \\<mu>", "by linarith"], ["proof (state)\nthis:\n  k < \\<beta>idx \\<mu>\n\ngoal (1 subgoal):\n 1. \\<not> \\<beta>idx \\<mu> \\<le> k \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  k < \\<beta>idx \\<mu>", "show False"], ["proof (prove)\nusing this:\n  k < \\<beta>idx \\<mu>\n\ngoal (1 subgoal):\n 1. False", "using \\<iota>_le_if_D \\<beta>idx"], ["proof (prove)\nusing this:\n  k < \\<beta>idx \\<mu>\n  ?\\<mu> \\<in> D (Suc ?k) \\<Longrightarrow> \\<iota> ?k \\<le> ?\\<mu>\n  ?\\<nu> \\<in> elts \\<beta> - F \\<Longrightarrow>\n  ?\\<nu> \\<in> D (\\<beta>idx ?\\<nu>) \\<and> \\<beta>idx ?\\<nu> \\<le> p\n\ngoal (1 subgoal):\n 1. False", "by (metis Diff_iff Suc_pred le0 leD le_\\<iota> le_less_trans \\<mu> \\<open>\\<mu> < \\<iota> k\\<close>)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<beta>idx \\<mu> \\<le> k\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> k", "then"], ["proof (chain)\npicking this:\n  \\<beta>idx \\<mu> \\<le> k", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<beta>idx \\<mu> \\<le> k\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> k", "using that h_in_D [OF \\<mu>]"], ["proof (prove)\nusing this:\n  \\<beta>idx \\<mu> \\<le> k\n  \\<mu> \\<notin> F\n  \\<mu> \\<in> elts \\<beta>\n  k < p\n  \\<mu> < \\<iota> k\n  h (\\<beta>idx \\<mu>) \\<mu> \\<in> D (\\<beta>idx \\<mu>)\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> k", "apply (simp add: D_def split: if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<mu> \\<notin> F; \\<mu> \\<in> elts \\<beta>; k < p;\n     \\<mu> < \\<iota> k; \\<beta>idx \\<mu> = 0;\n     h 0 \\<mu> < \\<iota> 0 \\<and> h 0 \\<mu> \\<in> elts \\<beta>\\<rbrakk>\n    \\<Longrightarrow> h 0 \\<mu> < \\<iota> k\n 2. \\<lbrakk>\\<beta>idx \\<mu> \\<le> k; \\<mu> \\<notin> F;\n     \\<mu> \\<in> elts \\<beta>; k < p; \\<mu> < \\<iota> k;\n     0 < \\<beta>idx \\<mu>;\n     \\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu> \\<and>\n     h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> (\\<beta>idx \\<mu>) \\<and>\n     h (\\<beta>idx \\<mu>) \\<mu> \\<in> elts \\<beta>\\<rbrakk>\n    \\<Longrightarrow> h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> k", "apply (metis (no_types) dual_order.order_iff_strict le0 less_\\<iota>_I less_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta>idx \\<mu> \\<le> k; \\<mu> \\<notin> F;\n     \\<mu> \\<in> elts \\<beta>; k < p; \\<mu> < \\<iota> k;\n     0 < \\<beta>idx \\<mu>;\n     \\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu> \\<and>\n     h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> (\\<beta>idx \\<mu>) \\<and>\n     h (\\<beta>idx \\<mu>) \\<mu> \\<in> elts \\<beta>\\<rbrakk>\n    \\<Longrightarrow> h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> k", "by (metis (no_types) dual_order.order_iff_strict less_\\<iota>_I less_trans)"], ["proof (state)\nthis:\n  h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<mu>2 \\<notin> F; ?\\<mu>2 \\<in> elts \\<beta>; ?k2 < p;\n   ?\\<mu>2 < \\<iota> ?k2\\<rbrakk>\n  \\<Longrightarrow> h (\\<beta>idx ?\\<mu>2) ?\\<mu>2 < \\<iota> ?k2\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<mu>2 \\<notin> F; ?\\<mu>2 \\<in> elts \\<beta>; ?k2 < p;\n   ?\\<mu>2 < \\<iota> ?k2\\<rbrakk>\n  \\<Longrightarrow> h (\\<beta>idx ?\\<mu>2) ?\\<mu>2 < \\<iota> ?k2\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "have \"h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>\"\n                  if \\<mu>: \"\\<mu> \\<notin> F\" \"\\<mu> \\<in> elts \\<beta>\" and \\<nu>: \"\\<nu> \\<notin> F\" \"\\<nu> \\<in> elts \\<beta>\" and \"\\<mu> < \\<nu>\" for \\<mu> \\<nu>"], ["proof (prove)\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "have le: \"\\<beta>idx \\<mu> \\<le> \\<beta>idx \\<nu>\" if \"\\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu>\" \"h (\\<beta>idx \\<nu>) \\<nu> < \\<iota> (\\<beta>idx \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta>idx \\<mu> \\<le> \\<beta>idx \\<nu>", "by (metis 2 that Diff_iff \\<beta>idx \\<mu> \\<nu> \\<open>\\<mu> < \\<nu>\\<close> dual_order.strict_implies_order dual_order.strict_trans1 h_increasing leI le_\\<iota> less_asym)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu>;\n   h (\\<beta>idx \\<nu>) \\<nu> < \\<iota> (\\<beta>idx \\<nu>)\\<rbrakk>\n  \\<Longrightarrow> \\<beta>idx \\<mu> \\<le> \\<beta>idx \\<nu>\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "have \"h 0 \\<mu> < h 0 \\<nu>\" if \"\\<beta>idx \\<mu> = 0\" \"\\<beta>idx \\<nu> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h 0 \\<mu> < h 0 \\<nu>", "using that mono_h"], ["proof (prove)\nusing this:\n  \\<beta>idx \\<mu> = 0\n  \\<beta>idx \\<nu> = 0\n  ?k2 \\<le> p \\<Longrightarrow> strict_mono_on (h ?k2) (D ?k2)\n\ngoal (1 subgoal):\n 1. h 0 \\<mu> < h 0 \\<nu>", "unfolding strict_mono_on_def"], ["proof (prove)\nusing this:\n  \\<beta>idx \\<mu> = 0\n  \\<beta>idx \\<nu> = 0\n  ?k2 \\<le> p \\<Longrightarrow>\n  \\<forall>r s.\n     r \\<in> D ?k2 \\<and> s \\<in> D ?k2 \\<and> r < s \\<longrightarrow>\n     h ?k2 r < h ?k2 s\n\ngoal (1 subgoal):\n 1. h 0 \\<mu> < h 0 \\<nu>", "by (metis Diff_iff \\<beta>idx \\<mu> \\<nu> \\<open>\\<mu> < \\<nu>\\<close>)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<beta>idx \\<mu> = 0; \\<beta>idx \\<nu> = 0\\<rbrakk>\n  \\<Longrightarrow> h 0 \\<mu> < h 0 \\<nu>\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>\\<beta>idx \\<mu> = 0; \\<beta>idx \\<nu> = 0\\<rbrakk>\n  \\<Longrightarrow> h 0 \\<mu> < h 0 \\<nu>\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "have \"h 0 \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>\"\n                    if \"0 < \\<beta>idx \\<nu>\" \"h 0 \\<mu> < \\<iota> 0\" and \"\\<iota> (\\<beta>idx \\<nu> - Suc 0) < h (\\<beta>idx \\<nu>) \\<nu>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h 0 \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "by (meson DiffI \\<beta>idx \\<nu> le_\\<iota> le_less_trans less_le_not_le that)"], ["proof (state)\nthis:\n  \\<lbrakk>0 < \\<beta>idx \\<nu>; h 0 \\<mu> < \\<iota> 0;\n   \\<iota> (\\<beta>idx \\<nu> - Suc 0) < h (\\<beta>idx \\<nu>) \\<nu>\\<rbrakk>\n  \\<Longrightarrow> h 0 \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>0 < \\<beta>idx \\<nu>; h 0 \\<mu> < \\<iota> 0;\n   \\<iota> (\\<beta>idx \\<nu> - Suc 0) < h (\\<beta>idx \\<nu>) \\<nu>\\<rbrakk>\n  \\<Longrightarrow> h 0 \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "have \"\\<beta>idx \\<nu> \\<noteq> 0\"\n                    if \"0 < \\<beta>idx \\<mu>\" \"h 0 \\<nu> < \\<iota> 0\" \"\\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta>idx \\<nu> \\<noteq> 0", "using le le_0_eq that"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu>;\n   h (\\<beta>idx \\<nu>) \\<nu> < \\<iota> (\\<beta>idx \\<nu>)\\<rbrakk>\n  \\<Longrightarrow> \\<beta>idx \\<mu> \\<le> \\<beta>idx \\<nu>\n  (?n \\<le> 0) = (?n = 0)\n  0 < \\<beta>idx \\<mu>\n  h 0 \\<nu> < \\<iota> 0\n  \\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu>\n\ngoal (1 subgoal):\n 1. \\<beta>idx \\<nu> \\<noteq> 0", "by fastforce"], ["proof (state)\nthis:\n  \\<lbrakk>0 < \\<beta>idx \\<mu>; h 0 \\<nu> < \\<iota> 0;\n   \\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu>\\<rbrakk>\n  \\<Longrightarrow> \\<beta>idx \\<nu> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>0 < \\<beta>idx \\<mu>; h 0 \\<nu> < \\<iota> 0;\n   \\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu>\\<rbrakk>\n  \\<Longrightarrow> \\<beta>idx \\<nu> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "have \"h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>\"\n                    if \"\\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu>\" \"h (\\<beta>idx \\<nu>) \\<nu> < \\<iota> (\\<beta>idx \\<nu>)\"\n                       \"h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> (\\<beta>idx \\<mu>)\" \"\\<iota> (\\<beta>idx \\<nu> - Suc 0) < h (\\<beta>idx \\<nu>) \\<nu>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "using mono_h"], ["proof (prove)\nusing this:\n  ?k2 \\<le> p \\<Longrightarrow> strict_mono_on (h ?k2) (D ?k2)\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "unfolding strict_mono_on_def"], ["proof (prove)\nusing this:\n  ?k2 \\<le> p \\<Longrightarrow>\n  \\<forall>r s.\n     r \\<in> D ?k2 \\<and> s \\<in> D ?k2 \\<and> r < s \\<longrightarrow>\n     h ?k2 r < h ?k2 s\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "by (metis le Diff_iff \\<beta>idx \\<mu> \\<nu> \\<open>\\<mu> < \\<nu>\\<close> le_\\<iota> le_less le_less_trans that)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu>;\n   h (\\<beta>idx \\<nu>) \\<nu> < \\<iota> (\\<beta>idx \\<nu>);\n   h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> (\\<beta>idx \\<mu>);\n   \\<iota> (\\<beta>idx \\<nu> - Suc 0) < h (\\<beta>idx \\<nu>) \\<nu>\\<rbrakk>\n  \\<Longrightarrow> h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<beta>idx \\<mu> = 0; \\<beta>idx \\<nu> = 0\\<rbrakk>\n  \\<Longrightarrow> h 0 \\<mu> < h 0 \\<nu>\n  \\<lbrakk>0 < \\<beta>idx \\<nu>; h 0 \\<mu> < \\<iota> 0;\n   \\<iota> (\\<beta>idx \\<nu> - Suc 0) < h (\\<beta>idx \\<nu>) \\<nu>\\<rbrakk>\n  \\<Longrightarrow> h 0 \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>\n  \\<lbrakk>0 < \\<beta>idx \\<mu>; h 0 \\<nu> < \\<iota> 0;\n   \\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu>\\<rbrakk>\n  \\<Longrightarrow> \\<beta>idx \\<nu> \\<noteq> 0\n  \\<lbrakk>\\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu>;\n   h (\\<beta>idx \\<nu>) \\<nu> < \\<iota> (\\<beta>idx \\<nu>);\n   h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> (\\<beta>idx \\<mu>);\n   \\<iota> (\\<beta>idx \\<nu> - Suc 0) < h (\\<beta>idx \\<nu>) \\<nu>\\<rbrakk>\n  \\<Longrightarrow> h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "show  ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<beta>idx \\<mu> = 0; \\<beta>idx \\<nu> = 0\\<rbrakk>\n  \\<Longrightarrow> h 0 \\<mu> < h 0 \\<nu>\n  \\<lbrakk>0 < \\<beta>idx \\<nu>; h 0 \\<mu> < \\<iota> 0;\n   \\<iota> (\\<beta>idx \\<nu> - Suc 0) < h (\\<beta>idx \\<nu>) \\<nu>\\<rbrakk>\n  \\<Longrightarrow> h 0 \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>\n  \\<lbrakk>0 < \\<beta>idx \\<mu>; h 0 \\<nu> < \\<iota> 0;\n   \\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu>\\<rbrakk>\n  \\<Longrightarrow> \\<beta>idx \\<nu> \\<noteq> 0\n  \\<lbrakk>\\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu>;\n   h (\\<beta>idx \\<nu>) \\<nu> < \\<iota> (\\<beta>idx \\<nu>);\n   h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> (\\<beta>idx \\<mu>);\n   \\<iota> (\\<beta>idx \\<nu> - Suc 0) < h (\\<beta>idx \\<nu>) \\<nu>\\<rbrakk>\n  \\<Longrightarrow> h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "using h_in_D [OF \\<mu>] h_in_D [OF \\<nu>]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<beta>idx \\<mu> = 0; \\<beta>idx \\<nu> = 0\\<rbrakk>\n  \\<Longrightarrow> h 0 \\<mu> < h 0 \\<nu>\n  \\<lbrakk>0 < \\<beta>idx \\<nu>; h 0 \\<mu> < \\<iota> 0;\n   \\<iota> (\\<beta>idx \\<nu> - Suc 0) < h (\\<beta>idx \\<nu>) \\<nu>\\<rbrakk>\n  \\<Longrightarrow> h 0 \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>\n  \\<lbrakk>0 < \\<beta>idx \\<mu>; h 0 \\<nu> < \\<iota> 0;\n   \\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu>\\<rbrakk>\n  \\<Longrightarrow> \\<beta>idx \\<nu> \\<noteq> 0\n  \\<lbrakk>\\<iota> (\\<beta>idx \\<mu> - Suc 0) < h (\\<beta>idx \\<mu>) \\<mu>;\n   h (\\<beta>idx \\<nu>) \\<nu> < \\<iota> (\\<beta>idx \\<nu>);\n   h (\\<beta>idx \\<mu>) \\<mu> < \\<iota> (\\<beta>idx \\<mu>);\n   \\<iota> (\\<beta>idx \\<nu> - Suc 0) < h (\\<beta>idx \\<nu>) \\<nu>\\<rbrakk>\n  \\<Longrightarrow> h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>\n  h (\\<beta>idx \\<mu>) \\<mu> \\<in> D (\\<beta>idx \\<mu>)\n  h (\\<beta>idx \\<nu>) \\<nu> \\<in> D (\\<beta>idx \\<nu>)\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>", "by (simp add: D_def split: if_split_asm)"], ["proof (state)\nthis:\n  h (\\<beta>idx \\<mu>) \\<mu> < h (\\<beta>idx \\<nu>) \\<nu>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<mu>2 \\<notin> F; ?\\<mu>2 \\<in> elts \\<beta>;\n   ?\\<nu>2 \\<notin> F; ?\\<nu>2 \\<in> elts \\<beta>;\n   ?\\<mu>2 < ?\\<nu>2\\<rbrakk>\n  \\<Longrightarrow> h (\\<beta>idx ?\\<mu>2) ?\\<mu>2\n                    < h (\\<beta>idx ?\\<nu>2) ?\\<nu>2\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>?k2 < p; ?\\<nu>2 \\<notin> F; ?\\<nu>2 \\<in> elts \\<beta>;\n   \\<iota> ?k2 < ?\\<nu>2\\<rbrakk>\n  \\<Longrightarrow> \\<iota> ?k2 < h (\\<beta>idx ?\\<nu>2) ?\\<nu>2\n  \\<lbrakk>?\\<mu>2 \\<notin> F; ?\\<mu>2 \\<in> elts \\<beta>; ?k2 < p;\n   ?\\<mu>2 < \\<iota> ?k2\\<rbrakk>\n  \\<Longrightarrow> h (\\<beta>idx ?\\<mu>2) ?\\<mu>2 < \\<iota> ?k2\n  \\<lbrakk>?\\<mu>2 \\<notin> F; ?\\<mu>2 \\<in> elts \\<beta>;\n   ?\\<nu>2 \\<notin> F; ?\\<nu>2 \\<in> elts \\<beta>;\n   ?\\<mu>2 < ?\\<nu>2\\<rbrakk>\n  \\<Longrightarrow> h (\\<beta>idx ?\\<mu>2) ?\\<mu>2\n                    < h (\\<beta>idx ?\\<nu>2) ?\\<nu>2", "have sm_g: \"strict_mono_on g (elts \\<beta>)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?k2 < p; ?\\<nu>2 \\<notin> F; ?\\<nu>2 \\<in> elts \\<beta>;\n   \\<iota> ?k2 < ?\\<nu>2\\<rbrakk>\n  \\<Longrightarrow> \\<iota> ?k2 < h (\\<beta>idx ?\\<nu>2) ?\\<nu>2\n  \\<lbrakk>?\\<mu>2 \\<notin> F; ?\\<mu>2 \\<in> elts \\<beta>; ?k2 < p;\n   ?\\<mu>2 < \\<iota> ?k2\\<rbrakk>\n  \\<Longrightarrow> h (\\<beta>idx ?\\<mu>2) ?\\<mu>2 < \\<iota> ?k2\n  \\<lbrakk>?\\<mu>2 \\<notin> F; ?\\<mu>2 \\<in> elts \\<beta>;\n   ?\\<nu>2 \\<notin> F; ?\\<nu>2 \\<in> elts \\<beta>;\n   ?\\<mu>2 < ?\\<nu>2\\<rbrakk>\n  \\<Longrightarrow> h (\\<beta>idx ?\\<mu>2) ?\\<mu>2\n                    < h (\\<beta>idx ?\\<nu>2) ?\\<nu>2\n\ngoal (1 subgoal):\n 1. strict_mono_on g (elts \\<beta>)", "by (auto simp: g_def strict_mono_on_def dest!: F_imp_Ex)"], ["proof (state)\nthis:\n  strict_mono_on g (elts \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k\\<le>p.\n               tp (M (D k) \\<AA> x) < tp (D k)) \\<Longrightarrow>\n    False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using * [OF \\<open>x \\<in> A\\<close> fun_g sm_g]"], ["proof (prove)\nusing this:\n  (\\<exists>\\<nu>\\<in>F. g \\<nu> \\<noteq> \\<nu>) \\<or>\n  (\\<exists>\\<nu>\\<in>elts \\<beta>.\n      tp (K 1 x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>)\n\ngoal (1 subgoal):\n 1. False", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<nu>.\n       \\<lbrakk>\\<nu> \\<in> F; g \\<nu> \\<noteq> \\<nu>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>\\<nu>.\n       \\<lbrakk>\\<nu> \\<in> elts \\<beta>;\n        tp (K 1 x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> False", "fix \\<nu>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<nu>.\n       \\<lbrakk>\\<nu> \\<in> F; g \\<nu> \\<noteq> \\<nu>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>\\<nu>.\n       \\<lbrakk>\\<nu> \\<in> elts \\<beta>;\n        tp (K 1 x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"\\<nu> \\<in> elts \\<beta>\" and \\<nu>: \"tp (K 1 x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>\""], ["proof (state)\nthis:\n  \\<nu> \\<in> elts \\<beta>\n  tp (K 1 x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>\n\ngoal (2 subgoals):\n 1. \\<And>\\<nu>.\n       \\<lbrakk>\\<nu> \\<in> F; g \\<nu> \\<noteq> \\<nu>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>\\<nu>.\n       \\<lbrakk>\\<nu> \\<in> elts \\<beta>;\n        tp (K 1 x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> False", "have FM: \"F \\<subseteq> M (elts \\<beta>) \\<AA> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<subseteq> M (elts \\<beta>) \\<AA> x", "by (meson FN \\<open>x \\<in> A'\\<close>)"], ["proof (state)\nthis:\n  F \\<subseteq> M (elts \\<beta>) \\<AA> x\n\ngoal (2 subgoals):\n 1. \\<And>\\<nu>.\n       \\<lbrakk>\\<nu> \\<in> F; g \\<nu> \\<noteq> \\<nu>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>\\<nu>.\n       \\<lbrakk>\\<nu> \\<in> elts \\<beta>;\n        tp (K 1 x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> False", "have False if \"tp (K (Suc 0) x \\<inter> \\<AA> \\<nu>) < \\<alpha>\" \"\\<nu> \\<in> F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using that FM"], ["proof (prove)\nusing this:\n  tp (K (Suc 0) x \\<inter> \\<AA> \\<nu>) < \\<alpha>\n  \\<nu> \\<in> F\n  F \\<subseteq> M (elts \\<beta>) \\<AA> x\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: M_def)"], ["proof (state)\nthis:\n  \\<lbrakk>tp (K (Suc 0) x \\<inter> \\<AA> \\<nu>) < \\<alpha>;\n   \\<nu> \\<in> F\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>\\<nu>.\n       \\<lbrakk>\\<nu> \\<in> F; g \\<nu> \\<noteq> \\<nu>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>\\<nu>.\n       \\<lbrakk>\\<nu> \\<in> elts \\<beta>;\n        tp (K 1 x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>tp (K (Suc 0) x \\<inter> \\<AA> \\<nu>) < \\<alpha>;\n   \\<nu> \\<in> F\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>\\<nu>.\n       \\<lbrakk>\\<nu> \\<in> F; g \\<nu> \\<noteq> \\<nu>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>\\<nu>.\n       \\<lbrakk>\\<nu> \\<in> elts \\<beta>;\n        tp (K 1 x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> False", "have False if \"tp (K (Suc 0) x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>\" \"\\<nu> \\<in> D k\" \"k \\<le> p\" \"\\<nu> \\<notin> F\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "have \"h (\\<beta>idx \\<nu>) \\<nu> \\<in> M (D (\\<beta>idx \\<nu>)) \\<AA> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<nu>) \\<nu> \\<in> M (D (\\<beta>idx \\<nu>)) \\<AA> x", "using fun_h \\<beta>idx \\<open>\\<nu> \\<in> elts \\<beta>\\<close> \\<open>\\<nu> \\<notin> F\\<close>"], ["proof (prove)\nusing this:\n  ?k2 \\<le> p \\<Longrightarrow>\n  h ?k2 \\<in> D ?k2 \\<rightarrow> M (D ?k2) \\<AA> x\n  ?\\<nu> \\<in> elts \\<beta> - F \\<Longrightarrow>\n  ?\\<nu> \\<in> D (\\<beta>idx ?\\<nu>) \\<and> \\<beta>idx ?\\<nu> \\<le> p\n  \\<nu> \\<in> elts \\<beta>\n  \\<nu> \\<notin> F\n\ngoal (1 subgoal):\n 1. h (\\<beta>idx \\<nu>) \\<nu> \\<in> M (D (\\<beta>idx \\<nu>)) \\<AA> x", "by auto"], ["proof (state)\nthis:\n  h (\\<beta>idx \\<nu>) \\<nu> \\<in> M (D (\\<beta>idx \\<nu>)) \\<AA> x\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  h (\\<beta>idx \\<nu>) \\<nu> \\<in> M (D (\\<beta>idx \\<nu>)) \\<AA> x", "show False"], ["proof (prove)\nusing this:\n  h (\\<beta>idx \\<nu>) \\<nu> \\<in> M (D (\\<beta>idx \\<nu>)) \\<AA> x\n\ngoal (1 subgoal):\n 1. False", "using that"], ["proof (prove)\nusing this:\n  h (\\<beta>idx \\<nu>) \\<nu> \\<in> M (D (\\<beta>idx \\<nu>)) \\<AA> x\n  tp (K (Suc 0) x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>\n  \\<nu> \\<in> D k\n  k \\<le> p\n  \\<nu> \\<notin> F\n\ngoal (1 subgoal):\n 1. False", "by (simp add: M_def g_def leD)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>tp (K (Suc 0) x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>;\n   \\<nu> \\<in> D ?k2; ?k2 \\<le> p; \\<nu> \\<notin> F\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>\\<nu>.\n       \\<lbrakk>\\<nu> \\<in> F; g \\<nu> \\<noteq> \\<nu>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>\\<nu>.\n       \\<lbrakk>\\<nu> \\<in> elts \\<beta>;\n        tp (K 1 x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>tp (K (Suc 0) x \\<inter> \\<AA> \\<nu>) < \\<alpha>;\n   \\<nu> \\<in> F\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>tp (K (Suc 0) x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>;\n   \\<nu> \\<in> D ?k2; ?k2 \\<le> p; \\<nu> \\<notin> F\\<rbrakk>\n  \\<Longrightarrow> False", "show False"], ["proof (prove)\nusing this:\n  \\<lbrakk>tp (K (Suc 0) x \\<inter> \\<AA> \\<nu>) < \\<alpha>;\n   \\<nu> \\<in> F\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>tp (K (Suc 0) x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>;\n   \\<nu> \\<in> D ?k2; ?k2 \\<le> p; \\<nu> \\<notin> F\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "using \\<open>\\<nu> \\<in> elts \\<beta>\\<close> \\<nu>"], ["proof (prove)\nusing this:\n  \\<lbrakk>tp (K (Suc 0) x \\<inter> \\<AA> \\<nu>) < \\<alpha>;\n   \\<nu> \\<in> F\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>tp (K (Suc 0) x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>;\n   \\<nu> \\<in> D ?k2; ?k2 \\<le> p; \\<nu> \\<notin> F\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<nu> \\<in> elts \\<beta>\n  tp (K 1 x \\<inter> \\<AA> (g \\<nu>)) < \\<alpha>\n\ngoal (1 subgoal):\n 1. False", "by (force simp: \\<beta>_decomp)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>\\<nu>.\n       \\<lbrakk>\\<nu> \\<in> F; g \\<nu> \\<noteq> \\<nu>\\<rbrakk>\n       \\<Longrightarrow> False", "qed auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k\\<le>p. tp (M (D k) \\<AA> x) < tp (D k)\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  \\<exists>k\\<le>p. tp (M (D k) \\<AA> x) < tp (D k)", "have \"\\<exists>l. l \\<le> p \\<and> tp (M (elts \\<beta>) \\<AA> x \\<inter> D l) < tp (D l)\""], ["proof (prove)\nusing this:\n  \\<exists>k\\<le>p. tp (M (D k) \\<AA> x) < tp (D k)\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<le>p. tp (M (elts \\<beta>) \\<AA> x \\<inter> D l) < tp (D l)", "using M_Int_D"], ["proof (prove)\nusing this:\n  \\<exists>k\\<le>p. tp (M (D k) \\<AA> x) < tp (D k)\n  ?k \\<le> p \\<Longrightarrow>\n  M (elts \\<beta>) \\<AA> ?x \\<inter> D ?k = M (D ?k) \\<AA> ?x\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<le>p. tp (M (elts \\<beta>) \\<AA> x \\<inter> D l) < tp (D l)", "by auto"], ["proof (state)\nthis:\n  \\<exists>l\\<le>p. tp (M (elts \\<beta>) \\<AA> x \\<inter> D l) < tp (D l)\n\ngoal (1 subgoal):\n 1. False", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> A' \\<Longrightarrow>\n  \\<exists>l\\<le>p. tp (M (elts \\<beta>) \\<AA> ?x2 \\<inter> D l) < tp (D l)\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> A' \\<Longrightarrow>\n  \\<exists>l\\<le>p. tp (M (elts \\<beta>) \\<AA> ?x2 \\<inter> D l) < tp (D l)", "obtain l where lp: \"\\<And>x. x \\<in> A'\\<Longrightarrow> l x \\<le> p\"\n              and lless: \"\\<And>x. x \\<in> A'\\<Longrightarrow> tp (M (elts \\<beta>) \\<AA> x \\<inter> D (l x)) < tp (D (l x))\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> A' \\<Longrightarrow>\n  \\<exists>l\\<le>p. tp (M (elts \\<beta>) \\<AA> ?x2 \\<inter> D l) < tp (D l)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>\\<And>x. x \\<in> A' \\<Longrightarrow> l x \\<le> p;\n         \\<And>x.\n            x \\<in> A' \\<Longrightarrow>\n            tp (M (elts \\<beta>) \\<AA> x \\<inter> D (l x))\n            < tp (D (l x))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  ?x \\<in> A' \\<Longrightarrow> l ?x \\<le> p\n  ?x \\<in> A' \\<Longrightarrow>\n  tp (M (elts \\<beta>) \\<AA> ?x \\<inter> D (l ?x)) < tp (D (l ?x))\n\ngoal (1 subgoal):\n 1. False", "obtain A'' L where \"A'' \\<subseteq> A'\" and A'': \"A'' \\<subseteq> elts (\\<alpha> * \\<beta>)\" \"tp A'' = \\<alpha>\" and lL: \"\\<And>x. x \\<in> A'' \\<Longrightarrow> l x = L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A'' L.\n        \\<lbrakk>A'' \\<subseteq> A';\n         A'' \\<subseteq> elts (\\<alpha> * \\<beta>); tp A'' = \\<alpha>;\n         \\<And>x. x \\<in> A'' \\<Longrightarrow> l x = L\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>A'' L.\n        \\<lbrakk>A'' \\<subseteq> A';\n         A'' \\<subseteq> elts (\\<alpha> * \\<beta>); tp A'' = \\<alpha>;\n         \\<And>x. x \\<in> A'' \\<Longrightarrow> l x = L\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have eq: \"A' = (\\<Union>i\\<le>p. {x \\<in> A'. l x = i})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' = (\\<Union>i\\<le>p. {x \\<in> A'. l x = i})", "using lp"], ["proof (prove)\nusing this:\n  ?x \\<in> A' \\<Longrightarrow> l ?x \\<le> p\n\ngoal (1 subgoal):\n 1. A' = (\\<Union>i\\<le>p. {x \\<in> A'. l x = i})", "by auto"], ["proof (state)\nthis:\n  A' = (\\<Union>i\\<le>p. {x \\<in> A'. l x = i})\n\ngoal (1 subgoal):\n 1. (\\<And>A'' L.\n        \\<lbrakk>A'' \\<subseteq> A';\n         A'' \\<subseteq> elts (\\<alpha> * \\<beta>); tp A'' = \\<alpha>;\n         \\<And>x. x \\<in> A'' \\<Longrightarrow> l x = L\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<exists>X\\<in>(\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p}. \\<alpha> \\<le> tp X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>(\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p}.\n       \\<alpha> \\<le> tp X", "proof (rule indecomposable_ordertype_finite_ge [OF indec])"], ["proof (state)\ngoal (5 subgoals):\n 1. finite ((\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p})\n 2. ?A \\<subseteq> (\\<Union>i\\<le>p. {x \\<in> A'. l x = i})\n 3. (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p} \\<noteq> {}\n 4. \\<alpha> \\<le> tp ?A\n 5. small (\\<Union>i\\<le>p. {x \\<in> A'. l x = i})", "show \"small (\\<Union>i\\<le>p. {x \\<in> A'. l x = i})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small (\\<Union>i\\<le>p. {x \\<in> A'. l x = i})", "by (metis A'(1) A(1) eq down smaller_than_small)"], ["proof (state)\nthis:\n  small (\\<Union>i\\<le>p. {x \\<in> A'. l x = i})\n\ngoal (4 subgoals):\n 1. finite ((\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p})\n 2. ?A \\<subseteq> (\\<Union>i\\<le>p. {x \\<in> A'. l x = i})\n 3. (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p} \\<noteq> {}\n 4. \\<alpha> \\<le> tp ?A", "qed (use A' eq in auto)"], ["proof (state)\nthis:\n  \\<exists>X\\<in>(\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p}.\n     \\<alpha> \\<le> tp X\n\ngoal (1 subgoal):\n 1. (\\<And>A'' L.\n        \\<lbrakk>A'' \\<subseteq> A';\n         A'' \\<subseteq> elts (\\<alpha> * \\<beta>); tp A'' = \\<alpha>;\n         \\<And>x. x \\<in> A'' \\<Longrightarrow> l x = L\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>X\\<in>(\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p}.\n     \\<alpha> \\<le> tp X", "show thesis"], ["proof (prove)\nusing this:\n  \\<exists>X\\<in>(\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p}.\n     \\<alpha> \\<le> tp X\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p};\n        \\<alpha> \\<le> tp x\\<rbrakk>\n       \\<Longrightarrow> thesis", "fix A''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p};\n        \\<alpha> \\<le> tp x\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume A'': \"A'' \\<in> (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p}\" and \"\\<alpha> \\<le> tp A''\""], ["proof (state)\nthis:\n  A'' \\<in> (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p}\n  \\<alpha> \\<le> tp A''\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p};\n        \\<alpha> \\<le> tp x\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  A'' \\<in> (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p}\n  \\<alpha> \\<le> tp A''", "obtain L where L: \"\\<And>x. x \\<in> A'' \\<Longrightarrow> l x = L\""], ["proof (prove)\nusing this:\n  A'' \\<in> (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p}\n  \\<alpha> \\<le> tp A''\n\ngoal (1 subgoal):\n 1. (\\<And>L.\n        (\\<And>x. x \\<in> A'' \\<Longrightarrow> l x = L) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ?x \\<in> A'' \\<Longrightarrow> l ?x = L\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p};\n        \\<alpha> \\<le> tp x\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \"A'' \\<subseteq> A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A'' \\<subseteq> A'", "using A''"], ["proof (prove)\nusing this:\n  A'' \\<in> (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p}\n\ngoal (1 subgoal):\n 1. A'' \\<subseteq> A'", "by force"], ["proof (state)\nthis:\n  A'' \\<subseteq> A'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p};\n        \\<alpha> \\<le> tp x\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  A'' \\<subseteq> A'", "have \"tp A'' \\<le> tp A'\""], ["proof (prove)\nusing this:\n  A'' \\<subseteq> A'\n\ngoal (1 subgoal):\n 1. tp A'' \\<le> tp A'", "by (meson A' A down order_trans ordertype_VWF_mono)"], ["proof (state)\nthis:\n  tp A'' \\<le> tp A'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p};\n        \\<alpha> \\<le> tp x\\<rbrakk>\n       \\<Longrightarrow> thesis", "with \\<open>\\<alpha> \\<le> tp A''\\<close>"], ["proof (chain)\npicking this:\n  \\<alpha> \\<le> tp A''\n  tp A'' \\<le> tp A'", "have \"tp A'' = \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<le> tp A''\n  tp A'' \\<le> tp A'\n\ngoal (1 subgoal):\n 1. tp A'' = \\<alpha>", "using A'(2)"], ["proof (prove)\nusing this:\n  \\<alpha> \\<le> tp A''\n  tp A'' \\<le> tp A'\n  tp A' = \\<alpha>\n\ngoal (1 subgoal):\n 1. tp A'' = \\<alpha>", "by auto"], ["proof (state)\nthis:\n  tp A'' = \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p};\n        \\<alpha> \\<le> tp x\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  tp A'' = \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p};\n        \\<alpha> \\<le> tp x\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \"A'' \\<subseteq> elts (\\<alpha> * \\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A'' \\<subseteq> elts (\\<alpha> * \\<beta>)", "using A' A \\<open>A'' \\<subseteq> A'\\<close>"], ["proof (prove)\nusing this:\n  A' \\<subseteq> A\n  tp A' = \\<alpha>\n  A \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp A = \\<alpha>\n  A'' \\<subseteq> A'\n\ngoal (1 subgoal):\n 1. A'' \\<subseteq> elts (\\<alpha> * \\<beta>)", "by auto"], ["proof (state)\nthis:\n  A'' \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> (\\<lambda>i. {x \\<in> A'. l x = i}) ` {..p};\n        \\<alpha> \\<le> tp x\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  tp A'' = \\<alpha>\n  A'' \\<subseteq> elts (\\<alpha> * \\<beta>)", "show thesis"], ["proof (prove)\nusing this:\n  tp A'' = \\<alpha>\n  A'' \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. thesis", "using L that [OF \\<open>A'' \\<subseteq> A'\\<close>]"], ["proof (prove)\nusing this:\n  tp A'' = \\<alpha>\n  A'' \\<subseteq> elts (\\<alpha> * \\<beta>)\n  ?x \\<in> A'' \\<Longrightarrow> l ?x = L\n  \\<lbrakk>A'' \\<subseteq> elts (\\<alpha> * \\<beta>); tp A'' = \\<alpha>;\n   \\<And>x. x \\<in> A'' \\<Longrightarrow> l x = ?L\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A'' \\<subseteq> A'\n  A'' \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp A'' = \\<alpha>\n  ?x \\<in> A'' \\<Longrightarrow> l ?x = L\n\ngoal (1 subgoal):\n 1. False", "have \\<AA>D: \"\\<AA> \\<in> D L \\<rightarrow> {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp X = \\<alpha>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA>\n    \\<in> D L \\<rightarrow>\n          {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and>\n              tp X = \\<alpha>}", "using \\<AA> D\\<beta>"], ["proof (prove)\nusing this:\n  \\<AA>\n  \\<in> elts \\<beta> \\<rightarrow>\n        {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp X = \\<alpha>}\n  D ?k \\<subseteq> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<AA>\n    \\<in> D L \\<rightarrow>\n          {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and>\n              tp X = \\<alpha>}", "by blast"], ["proof (state)\nthis:\n  \\<AA>\n  \\<in> D L \\<rightarrow>\n        {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp X = \\<alpha>}\n\ngoal (1 subgoal):\n 1. False", "have \"M (elts \\<beta>) \\<AA> x \\<inter> D L = M (D L) \\<AA> x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. M (elts \\<beta>) \\<AA> x \\<inter> D L = M (D L) \\<AA> x", "using D\\<beta>"], ["proof (prove)\nusing this:\n  D ?k \\<subseteq> elts \\<beta>\n\ngoal (1 subgoal):\n 1. M (elts \\<beta>) \\<AA> x \\<inter> D L = M (D L) \\<AA> x", "by (auto simp: M_def)"], ["proof (state)\nthis:\n  M (elts \\<beta>) \\<AA> ?x \\<inter> D L = M (D L) \\<AA> ?x\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  M (elts \\<beta>) \\<AA> ?x \\<inter> D L = M (D L) \\<AA> ?x", "have \"tp (M (D L) \\<AA> x) < tp (D L)\" if \"x \\<in> A''\" for x"], ["proof (prove)\nusing this:\n  M (elts \\<beta>) \\<AA> ?x \\<inter> D L = M (D L) \\<AA> ?x\n\ngoal (1 subgoal):\n 1. tp (M (D L) \\<AA> x) < tp (D L)", "using lless that \\<open>A'' \\<subseteq> A'\\<close> lL"], ["proof (prove)\nusing this:\n  M (elts \\<beta>) \\<AA> ?x \\<inter> D L = M (D L) \\<AA> ?x\n  ?x \\<in> A' \\<Longrightarrow>\n  tp (M (elts \\<beta>) \\<AA> ?x \\<inter> D (l ?x)) < tp (D (l ?x))\n  x \\<in> A''\n  A'' \\<subseteq> A'\n  ?x \\<in> A'' \\<Longrightarrow> l ?x = L\n\ngoal (1 subgoal):\n 1. tp (M (D L) \\<AA> x) < tp (D L)", "by force"], ["proof (state)\nthis:\n  ?x \\<in> A'' \\<Longrightarrow> tp (M (D L) \\<AA> ?x) < tp (D L)\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> A'' \\<Longrightarrow> tp (M (D L) \\<AA> ?x) < tp (D L)", "have \\<dagger>: \"{x \\<in> A''. tp (D L) \\<le> tp (M (D L) \\<AA> x)} = {}\""], ["proof (prove)\nusing this:\n  ?x \\<in> A'' \\<Longrightarrow> tp (M (D L) \\<AA> ?x) < tp (D L)\n\ngoal (1 subgoal):\n 1. {x \\<in> A''. tp (D L) \\<le> tp (M (D L) \\<AA> x)} = {}", "using leD"], ["proof (prove)\nusing this:\n  ?x \\<in> A'' \\<Longrightarrow> tp (M (D L) \\<AA> ?x) < tp (D L)\n  ?y \\<le> ?x \\<Longrightarrow> \\<not> ?x < ?y\n\ngoal (1 subgoal):\n 1. {x \\<in> A''. tp (D L) \\<le> tp (M (D L) \\<AA> x)} = {}", "by blast"], ["proof (state)\nthis:\n  {x \\<in> A''. tp (D L) \\<le> tp (M (D L) \\<AA> x)} = {}\n\ngoal (1 subgoal):\n 1. False", "have \"\\<alpha> \\<le> tp {x \\<in> A''. tp (D L) \\<le> tp (M (D L) \\<AA> x)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A''. tp (D L) \\<le> tp (M (D L) \\<AA> x)}", "using IX [OF D\\<beta> A'' \\<AA>D]"], ["proof (prove)\nusing this:\n  \\<alpha> \\<le> tp {x \\<in> A''. tp (D L) \\<le> tp (M (D L) \\<AA> x)}\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp {x \\<in> A''. tp (D L) \\<le> tp (M (D L) \\<AA> x)}", "by simp"], ["proof (state)\nthis:\n  \\<alpha> \\<le> tp {x \\<in> A''. tp (D L) \\<le> tp (M (D L) \\<AA> x)}\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  \\<alpha> \\<le> tp {x \\<in> A''. tp (D L) \\<le> tp (M (D L) \\<AA> x)}", "show False"], ["proof (prove)\nusing this:\n  \\<alpha> \\<le> tp {x \\<in> A''. tp (D L) \\<le> tp (M (D L) \\<AA> x)}\n\ngoal (1 subgoal):\n 1. False", "using \\<open>\\<alpha> \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  \\<alpha> \\<le> tp {x \\<in> A''. tp (D L) \\<le> tp (M (D L) \\<AA> x)}\n  \\<alpha> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. False", "by (simp add: \\<dagger>)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<And>x0 g.\n      \\<lbrakk>x0 \\<in> A; g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>;\n       strict_mono_on g (elts \\<beta>)\\<rbrakk>\n      \\<Longrightarrow> (\\<exists>\\<nu>\\<in>F. g \\<nu> \\<noteq> \\<nu>) \\<or>\n                        (\\<exists>\\<nu>\\<in>elts \\<beta>.\n                            tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>))\n                            < \\<alpha>)) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "then"], ["proof (chain)\npicking this:\n  (\\<And>x0 g.\n      \\<lbrakk>x0 \\<in> A; g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>;\n       strict_mono_on g (elts \\<beta>)\\<rbrakk>\n      \\<Longrightarrow> (\\<exists>\\<nu>\\<in>F. g \\<nu> \\<noteq> \\<nu>) \\<or>\n                        (\\<exists>\\<nu>\\<in>elts \\<beta>.\n                            tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>))\n                            < \\<alpha>)) \\<Longrightarrow>\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<And>x0 g.\n      \\<lbrakk>x0 \\<in> A; g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>;\n       strict_mono_on g (elts \\<beta>)\\<rbrakk>\n      \\<Longrightarrow> (\\<exists>\\<nu>\\<in>F. g \\<nu> \\<noteq> \\<nu>) \\<or>\n                        (\\<exists>\\<nu>\\<in>elts \\<beta>.\n                            tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>))\n                            < \\<alpha>)) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>x0\\<in>A.\n       \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n          strict_mono_on g (elts \\<beta>) \\<and>\n          (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n              \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))", "by (meson Ord_linear2 Ord_ordertype \\<open>Ord \\<alpha>\\<close>)"], ["proof (state)\nthis:\n  \\<exists>x0\\<in>A.\n     \\<exists>g\\<in>elts \\<beta> \\<rightarrow> elts \\<beta>.\n        strict_mono_on g (elts \\<beta>) \\<and>\n        (\\<forall>\\<nu>\\<in>F. g \\<nu> = \\<nu>) \\<and>\n        (\\<forall>\\<nu>\\<in>elts \\<beta>.\n            \\<alpha> \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>finite ?F; ?F \\<subseteq> elts \\<beta>;\n   ?A \\<subseteq> elts (\\<alpha> * \\<beta>); tp ?A = \\<alpha>;\n   ?\\<AA>\n   \\<in> elts \\<beta> \\<rightarrow>\n         {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and>\n             tp X = \\<alpha>}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x0\\<in>?A.\n                       \\<exists>g\\<in>elts \\<beta> \\<rightarrow>\nelts \\<beta>.\n                          strict_mono_on g (elts \\<beta>) \\<and>\n                          (\\<forall>\\<nu>\\<in>?F. g \\<nu> = \\<nu>) \\<and>\n                          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n                              \\<alpha>\n                              \\<le> tp (K 1 x0 \\<inter> ?\\<AA> (g \\<nu>)))\n\ngoal (1 subgoal):\n 1. False", "let ?U = \"UNIV :: nat set\""], ["proof (state)\ngoal (1 subgoal):\n 1. False", "define \\<mu> where \"\\<mu> \\<equiv> fst \\<circ> from_nat_into (elts \\<beta> \\<times> ?U)\""], ["proof (state)\nthis:\n  \\<mu> \\<equiv> fst \\<circ> from_nat_into (elts \\<beta> \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. False", "define q where \"q \\<equiv> to_nat_on (elts \\<beta> \\<times> ?U)\""], ["proof (state)\nthis:\n  q \\<equiv> to_nat_on (elts \\<beta> \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. False", "have co_\\<beta>U: \"countable (elts \\<beta> \\<times> ?U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable (elts \\<beta> \\<times> UNIV)", "by (simp add: \\<beta> less_\\<omega>1_imp_countable)"], ["proof (state)\nthis:\n  countable (elts \\<beta> \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  countable (elts \\<beta> \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. False", "have \"elts \\<beta> \\<times> ?U \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. elts \\<beta> \\<times> UNIV \\<noteq> {}", "using \\<open>0 \\<in> elts \\<beta>\\<close>"], ["proof (prove)\nusing this:\n  0 \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. elts \\<beta> \\<times> UNIV \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  elts \\<beta> \\<times> UNIV \\<noteq> {}\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  countable (elts \\<beta> \\<times> UNIV)\n  elts \\<beta> \\<times> UNIV \\<noteq> {}", "have \"range (from_nat_into (elts \\<beta> \\<times> ?U)) = (elts \\<beta> \\<times> ?U)\""], ["proof (prove)\nusing this:\n  countable (elts \\<beta> \\<times> UNIV)\n  elts \\<beta> \\<times> UNIV \\<noteq> {}\n\ngoal (1 subgoal):\n 1. range (from_nat_into (elts \\<beta> \\<times> UNIV)) =\n    elts \\<beta> \\<times> UNIV", "by (metis range_from_nat_into)"], ["proof (state)\nthis:\n  range (from_nat_into (elts \\<beta> \\<times> UNIV)) =\n  elts \\<beta> \\<times> UNIV\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  range (from_nat_into (elts \\<beta> \\<times> UNIV)) =\n  elts \\<beta> \\<times> UNIV", "have \\<mu>_in_\\<beta> [simp]: \"\\<mu> i \\<in> elts \\<beta>\" for i"], ["proof (prove)\nusing this:\n  range (from_nat_into (elts \\<beta> \\<times> UNIV)) =\n  elts \\<beta> \\<times> UNIV\n\ngoal (1 subgoal):\n 1. \\<mu> i \\<in> elts \\<beta>", "by (metis SigmaE \\<mu>_def comp_apply fst_conv range_eqI)"], ["proof (state)\nthis:\n  \\<mu> ?i \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  \\<mu> ?i \\<in> elts \\<beta>", "have Ord_\\<mu> [simp]: \"Ord (\\<mu> i)\" for i"], ["proof (prove)\nusing this:\n  \\<mu> ?i \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. Ord (\\<mu> i)", "using Ord_in_Ord"], ["proof (prove)\nusing this:\n  \\<mu> ?i \\<in> elts \\<beta>\n  \\<lbrakk>Ord ?k; ?m \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> Ord ?m\n\ngoal (1 subgoal):\n 1. Ord (\\<mu> i)", "by blast"], ["proof (state)\nthis:\n  Ord (\\<mu> ?i)\n\ngoal (1 subgoal):\n 1. False", "have inf_\\<beta>U: \"infinite (elts \\<beta> \\<times> ?U)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (elts \\<beta> \\<times> UNIV)", "using \\<open>0 \\<in> elts \\<beta>\\<close> finite_cartesian_productD2"], ["proof (prove)\nusing this:\n  0 \\<in> elts \\<beta>\n  \\<lbrakk>finite (?A \\<times> ?B); ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> finite ?B\n\ngoal (1 subgoal):\n 1. infinite (elts \\<beta> \\<times> UNIV)", "by auto"], ["proof (state)\nthis:\n  infinite (elts \\<beta> \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. False", "have 11 [simp]: \"\\<mu> (q (\\<nu>,n)) = \\<nu>\" if \"\\<nu> \\<in> elts \\<beta>\" for \\<nu> n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<mu> (q (\\<nu>, n)) = \\<nu>", "by (simp add: \\<mu>_def q_def that co_\\<beta>U)"], ["proof (state)\nthis:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<mu> (q (?\\<nu>, ?n)) = ?\\<nu>\n\ngoal (1 subgoal):\n 1. False", "have range_\\<mu> [simp]: \"range \\<mu> = elts \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range \\<mu> = elts \\<beta>", "by (auto simp: image_iff) (metis 11)"], ["proof (state)\nthis:\n  range \\<mu> = elts \\<beta>\n\ngoal (1 subgoal):\n 1. False", "have [simp]: \"KI i {} = UNIV\" \"KI i (insert a X) = K i a \\<inter> KI i X\" for i a X"], ["proof (prove)\ngoal (1 subgoal):\n 1. KI i {} = UNIV &&& KI i (insert a X) = K i a \\<inter> KI i X", "by (auto simp: KI_def)"], ["proof (state)\nthis:\n  KI ?i {} = UNIV\n  KI ?i (insert ?a ?X) = K ?i ?a \\<inter> KI ?i ?X\n\ngoal (1 subgoal):\n 1. False", "define \\<Phi> where \"\\<Phi> \\<equiv> \\<lambda>n::nat. \\<lambda>\\<AA> x. (\\<forall>\\<nu> \\<in> elts \\<beta>. \\<AA> \\<nu> \\<subseteq> elts (\\<alpha>*\\<beta>) \\<and> tp (\\<AA> \\<nu>) = \\<alpha>) \\<and> x ` {..<n} \\<subseteq> elts (\\<alpha>*\\<beta>)\n                                         \\<and> (\\<Union>\\<nu> \\<in> elts \\<beta>. \\<AA> \\<nu>) \\<subseteq> KI 1 (x ` {..<n}) \\<and> strict_mono_sets (elts \\<beta>) \\<AA>\""], ["proof (state)\nthis:\n  \\<Phi> \\<equiv>\n  \\<lambda>n \\<AA> x.\n     (\\<forall>\\<nu>\\<in>elts \\<beta>.\n         \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and>\n         tp (\\<AA> \\<nu>) = \\<alpha>) \\<and>\n     x ` {..<n} \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and>\n     \\<Union> (\\<AA> ` elts \\<beta>) \\<subseteq> KI 1 (x ` {..<n}) \\<and>\n     strict_mono_sets (elts \\<beta>) \\<AA>\n\ngoal (1 subgoal):\n 1. False", "define \\<Psi> where \"\\<Psi> \\<equiv> \\<lambda>n::nat. \\<lambda>g \\<AA> \\<AA>' xn. g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta> \\<and> strict_mono_on g (elts \\<beta>) \\<and> (\\<forall>i\\<le>n. g (\\<mu> i) = \\<mu> i)\n                  \\<and> (\\<forall>\\<nu> \\<in> elts \\<beta>. \\<AA>' \\<nu> \\<subseteq> K 1 xn \\<inter> \\<AA> (g \\<nu>))\n                  \\<and> less_sets {xn} (\\<AA>' (\\<mu> n)) \\<and> xn \\<in> \\<AA> (\\<mu> n)\""], ["proof (state)\nthis:\n  \\<Psi> \\<equiv>\n  \\<lambda>n g \\<AA> \\<AA>' xn.\n     g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta> \\<and>\n     strict_mono_on g (elts \\<beta>) \\<and>\n     (\\<forall>i\\<le>n. g (\\<mu> i) = \\<mu> i) \\<and>\n     (\\<forall>\\<nu>\\<in>elts \\<beta>.\n         \\<AA>' \\<nu> \\<subseteq> K 1 xn \\<inter> \\<AA> (g \\<nu>)) \\<and>\n     {xn} \\<lless> \\<AA>' (\\<mu> n) \\<and> xn \\<in> \\<AA> (\\<mu> n)\n\ngoal (1 subgoal):\n 1. False", "let ?\\<AA>0 = \"\\<lambda>\\<nu>. plus (\\<alpha> * \\<nu>) ` elts \\<alpha>\""], ["proof (state)\ngoal (1 subgoal):\n 1. False", "have base: \"\\<Phi> 0 ?\\<AA>0 x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Phi> 0 (\\<lambda>\\<nu>. (+) (\\<alpha> * \\<nu>) ` elts \\<alpha>) x", "by (auto simp: \\<Phi>_def add_mult_less add_mult_less_add_mult ordertype_image_plus strict_mono_sets_def less_sets_def)"], ["proof (state)\nthis:\n  \\<Phi> 0 (\\<lambda>\\<nu>. (+) (\\<alpha> * \\<nu>) ` elts \\<alpha>) ?x\n\ngoal (1 subgoal):\n 1. False", "have step: \"Ex (\\<lambda>(g,\\<AA>',xn). \\<Psi> n g \\<AA> \\<AA>' xn \\<and> \\<Phi> (Suc n) \\<AA>' (x(n:=xn)))\" if \"\\<Phi> n \\<AA> x\" for n \\<AA> x"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "have \\<AA>: \"\\<And>\\<nu>. \\<nu> \\<in> elts \\<beta> \\<Longrightarrow> \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp (\\<AA> \\<nu>) = \\<alpha>\"\n            and x: \"x ` {..<n} \\<subseteq> elts (\\<alpha> * \\<beta>)\"\n            and sub: \"\\<Union> (\\<AA> ` elts \\<beta>) \\<subseteq> KI (Suc 0) (x ` {..<n})\"\n            and sm: \"strict_mono_sets (elts \\<beta>) \\<AA>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>\\<nu>.\n         \\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n         \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and>\n         tp (\\<AA> \\<nu>) = \\<alpha>) &&&\n     x ` {..<n} \\<subseteq> elts (\\<alpha> * \\<beta>)) &&&\n    \\<Union> (\\<AA> ` elts \\<beta>) \\<subseteq> KI (Suc 0) (x ` {..<n}) &&&\n    strict_mono_sets (elts \\<beta>) \\<AA>", "using that"], ["proof (prove)\nusing this:\n  \\<Phi> n \\<AA> x\n\ngoal (1 subgoal):\n 1. ((\\<And>\\<nu>.\n         \\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n         \\<AA> \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and>\n         tp (\\<AA> \\<nu>) = \\<alpha>) &&&\n     x ` {..<n} \\<subseteq> elts (\\<alpha> * \\<beta>)) &&&\n    \\<Union> (\\<AA> ` elts \\<beta>) \\<subseteq> KI (Suc 0) (x ` {..<n}) &&&\n    strict_mono_sets (elts \\<beta>) \\<AA>", "by (auto simp: \\<Phi>_def)"], ["proof (state)\nthis:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<AA> ?\\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and>\n  tp (\\<AA> ?\\<nu>) = \\<alpha>\n  x ` {..<n} \\<subseteq> elts (\\<alpha> * \\<beta>)\n  \\<Union> (\\<AA> ` elts \\<beta>) \\<subseteq> KI (Suc 0) (x ` {..<n})\n  strict_mono_sets (elts \\<beta>) \\<AA>\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "have \\<mu>\\<beta>: \"\\<mu> ` {..n} \\<subseteq> elts \\<beta>\" and \\<AA>sub: \"\\<AA> (\\<mu> n) \\<subseteq> elts (\\<alpha> * \\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<mu> ` {..n} \\<subseteq> elts \\<beta> &&&\n    \\<AA> (\\<mu> n) \\<subseteq> elts (\\<alpha> * \\<beta>)", "by (auto simp: \\<AA>)"], ["proof (state)\nthis:\n  \\<mu> ` {..n} \\<subseteq> elts \\<beta>\n  \\<AA> (\\<mu> n) \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "have \\<AA>fun: \"\\<AA> \\<in> elts \\<beta> \\<rightarrow> {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp X = \\<alpha>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA>\n    \\<in> elts \\<beta> \\<rightarrow>\n          {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and>\n              tp X = \\<alpha>}", "by (simp add: \\<AA>)"], ["proof (state)\nthis:\n  \\<AA>\n  \\<in> elts \\<beta> \\<rightarrow>\n        {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp X = \\<alpha>}\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "then"], ["proof (chain)\npicking this:\n  \\<AA>\n  \\<in> elts \\<beta> \\<rightarrow>\n        {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp X = \\<alpha>}", "obtain xn g where xn: \"xn \\<in> \\<AA> (\\<mu> n)\" and g: \"g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>\"\n            and sm_g: \"strict_mono_on g (elts \\<beta>)\" and g_\\<mu>: \"\\<forall>\\<nu> \\<in> \\<mu>`{..n}. g \\<nu> = \\<nu>\"\n            and g_\\<alpha>: \"\\<forall>\\<nu> \\<in> elts \\<beta>. \\<alpha> \\<le> tp (K 1 xn \\<inter> \\<AA> (g \\<nu>))\""], ["proof (prove)\nusing this:\n  \\<AA>\n  \\<in> elts \\<beta> \\<rightarrow>\n        {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp X = \\<alpha>}\n\ngoal (1 subgoal):\n 1. (\\<And>xn g.\n        \\<lbrakk>xn \\<in> \\<AA> (\\<mu> n);\n         g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>;\n         strict_mono_on g (elts \\<beta>);\n         \\<forall>\\<nu>\\<in>\\<mu> ` {..n}. g \\<nu> = \\<nu>;\n         \\<forall>\\<nu>\\<in>elts \\<beta>.\n            \\<alpha> \\<le> tp (K 1 xn \\<inter> \\<AA> (g \\<nu>))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 10 [OF _ \\<mu>\\<beta> \\<AA>sub _ \\<AA>fun]"], ["proof (prove)\nusing this:\n  \\<AA>\n  \\<in> elts \\<beta> \\<rightarrow>\n        {X. X \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and> tp X = \\<alpha>}\n  \\<lbrakk>finite (\\<mu> ` {..n}); tp (\\<AA> (\\<mu> n)) = \\<alpha>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x0\\<in>\\<AA> (\\<mu> n).\n                       \\<exists>g\\<in>elts \\<beta> \\<rightarrow>\nelts \\<beta>.\n                          strict_mono_on g (elts \\<beta>) \\<and>\n                          (\\<forall>\\<nu>\\<in>\\<mu> ` {..n}.\n                              g \\<nu> = \\<nu>) \\<and>\n                          (\\<forall>\\<nu>\\<in>elts \\<beta>.\n                              \\<alpha>\n                              \\<le> tp (K 1 x0 \\<inter> \\<AA> (g \\<nu>)))\n\ngoal (1 subgoal):\n 1. (\\<And>xn g.\n        \\<lbrakk>xn \\<in> \\<AA> (\\<mu> n);\n         g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>;\n         strict_mono_on g (elts \\<beta>);\n         \\<forall>\\<nu>\\<in>\\<mu> ` {..n}. g \\<nu> = \\<nu>;\n         \\<forall>\\<nu>\\<in>elts \\<beta>.\n            \\<alpha> \\<le> tp (K 1 xn \\<inter> \\<AA> (g \\<nu>))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: \\<AA>)"], ["proof (state)\nthis:\n  xn \\<in> \\<AA> (\\<mu> n)\n  g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>\n  strict_mono_on g (elts \\<beta>)\n  \\<forall>\\<nu>\\<in>\\<mu> ` {..n}. g \\<nu> = \\<nu>\n  \\<forall>\\<nu>\\<in>elts \\<beta>.\n     \\<alpha> \\<le> tp (K 1 xn \\<inter> \\<AA> (g \\<nu>))\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "have tp1: \"tp (K 1 xn \\<inter> \\<AA> (g \\<nu>)) = \\<alpha>\" if \"\\<nu> \\<in> elts \\<beta>\" for \\<nu>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tp (K 1 xn \\<inter> \\<AA> (g \\<nu>)) = \\<alpha>", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. tp (K 1 xn \\<inter> \\<AA> (g \\<nu>)) \\<le> \\<alpha>\n 2. \\<alpha> \\<le> tp (K 1 xn \\<inter> \\<AA> (g \\<nu>))", "have \"tp (K 1 xn \\<inter> \\<AA> (g \\<nu>)) \\<le> tp (\\<AA> (g \\<nu>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tp (K 1 xn \\<inter> \\<AA> (g \\<nu>)) \\<le> tp (\\<AA> (g \\<nu>))", "proof (rule ordertype_VWF_mono)"], ["proof (state)\ngoal (2 subgoals):\n 1. K 1 xn \\<inter> \\<AA> (g \\<nu>) \\<subseteq> \\<AA> (g \\<nu>)\n 2. small (\\<AA> (g \\<nu>))", "show \"small (\\<AA> (g \\<nu>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small (\\<AA> (g \\<nu>))", "by (metis PiE \\<AA> down g that)"], ["proof (state)\nthis:\n  small (\\<AA> (g \\<nu>))\n\ngoal (1 subgoal):\n 1. K 1 xn \\<inter> \\<AA> (g \\<nu>) \\<subseteq> \\<AA> (g \\<nu>)", "qed auto"], ["proof (state)\nthis:\n  tp (K 1 xn \\<inter> \\<AA> (g \\<nu>)) \\<le> tp (\\<AA> (g \\<nu>))\n\ngoal (2 subgoals):\n 1. tp (K 1 xn \\<inter> \\<AA> (g \\<nu>)) \\<le> \\<alpha>\n 2. \\<alpha> \\<le> tp (K 1 xn \\<inter> \\<AA> (g \\<nu>))", "also"], ["proof (state)\nthis:\n  tp (K 1 xn \\<inter> \\<AA> (g \\<nu>)) \\<le> tp (\\<AA> (g \\<nu>))\n\ngoal (2 subgoals):\n 1. tp (K 1 xn \\<inter> \\<AA> (g \\<nu>)) \\<le> \\<alpha>\n 2. \\<alpha> \\<le> tp (K 1 xn \\<inter> \\<AA> (g \\<nu>))", "have \"\\<dots> = \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tp (\\<AA> (g \\<nu>)) = \\<alpha>", "using \\<AA> g that"], ["proof (prove)\nusing this:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<AA> ?\\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>) \\<and>\n  tp (\\<AA> ?\\<nu>) = \\<alpha>\n  g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>\n  \\<nu> \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. tp (\\<AA> (g \\<nu>)) = \\<alpha>", "by force"], ["proof (state)\nthis:\n  tp (\\<AA> (g \\<nu>)) = \\<alpha>\n\ngoal (2 subgoals):\n 1. tp (K 1 xn \\<inter> \\<AA> (g \\<nu>)) \\<le> \\<alpha>\n 2. \\<alpha> \\<le> tp (K 1 xn \\<inter> \\<AA> (g \\<nu>))", "finally"], ["proof (chain)\npicking this:\n  tp (K 1 xn \\<inter> \\<AA> (g \\<nu>)) \\<le> \\<alpha>", "show \"tp (K 1 xn \\<inter> \\<AA> (g \\<nu>)) \\<le> \\<alpha>\""], ["proof (prove)\nusing this:\n  tp (K 1 xn \\<inter> \\<AA> (g \\<nu>)) \\<le> \\<alpha>\n\ngoal (1 subgoal):\n 1. tp (K 1 xn \\<inter> \\<AA> (g \\<nu>)) \\<le> \\<alpha>", "."], ["proof (state)\nthis:\n  tp (K 1 xn \\<inter> \\<AA> (g \\<nu>)) \\<le> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<le> tp (K 1 xn \\<inter> \\<AA> (g \\<nu>))", "qed (use that g_\\<alpha> in auto)"], ["proof (state)\nthis:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  tp (K 1 xn \\<inter> \\<AA> (g ?\\<nu>)) = \\<alpha>\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "have tp2: \"tp (\\<AA> (\\<mu> n)) = \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tp (\\<AA> (\\<mu> n)) = \\<alpha>", "by (auto simp: \\<AA>)"], ["proof (state)\nthis:\n  tp (\\<AA> (\\<mu> n)) = \\<alpha>\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "obtain \"small (\\<AA> (\\<mu> n))\" \"\\<AA> (\\<mu> n) \\<subseteq> ON\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>small (\\<AA> (\\<mu> n));\n      \\<AA> (\\<mu> n) \\<subseteq> ON\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson \\<AA>sub ord down elts_subset_ON subset_trans)"], ["proof (state)\nthis:\n  small (\\<AA> (\\<mu> n))\n  \\<AA> (\\<mu> n) \\<subseteq> ON\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "then"], ["proof (chain)\npicking this:\n  small (\\<AA> (\\<mu> n))\n  \\<AA> (\\<mu> n) \\<subseteq> ON", "obtain A2 where A2: \"tp A2 = \\<alpha>\" \"A2 \\<subseteq> K 1 xn \\<inter> \\<AA> (\\<mu> n)\" \"less_sets {xn} A2\""], ["proof (prove)\nusing this:\n  small (\\<AA> (\\<mu> n))\n  \\<AA> (\\<mu> n) \\<subseteq> ON\n\ngoal (1 subgoal):\n 1. (\\<And>A2.\n        \\<lbrakk>tp A2 = \\<alpha>;\n         A2 \\<subseteq> K 1 xn \\<inter> \\<AA> (\\<mu> n);\n         {xn} \\<lless> A2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using indecomposable_imp_Ex_less_sets [OF indec \\<open>\\<alpha> > 1\\<close> tp2]"], ["proof (prove)\nusing this:\n  small (\\<AA> (\\<mu> n))\n  \\<AA> (\\<mu> n) \\<subseteq> ON\n  \\<lbrakk>small (\\<AA> (\\<mu> n)); \\<AA> (\\<mu> n) \\<subseteq> ON;\n   ?x \\<in> \\<AA> (\\<mu> n); tp ?A1.0 = \\<alpha>;\n   ?A1.0 \\<subseteq> \\<AA> (\\<mu> n);\n   \\<And>A2.\n      \\<lbrakk>tp A2 = \\<alpha>; A2 \\<subseteq> ?A1.0;\n       {?x} \\<lless> A2\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>A2.\n        \\<lbrakk>tp A2 = \\<alpha>;\n         A2 \\<subseteq> K 1 xn \\<inter> \\<AA> (\\<mu> n);\n         {xn} \\<lless> A2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis \\<mu>_in_\\<beta> atMost_iff image_eqI inf_le2 le_refl xn tp1 g_\\<mu>)"], ["proof (state)\nthis:\n  tp A2 = \\<alpha>\n  A2 \\<subseteq> K 1 xn \\<inter> \\<AA> (\\<mu> n)\n  {xn} \\<lless> A2\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "then"], ["proof (chain)\npicking this:\n  tp A2 = \\<alpha>\n  A2 \\<subseteq> K 1 xn \\<inter> \\<AA> (\\<mu> n)\n  {xn} \\<lless> A2", "have A2_sub: \"A2 \\<subseteq> \\<AA> (\\<mu> n)\""], ["proof (prove)\nusing this:\n  tp A2 = \\<alpha>\n  A2 \\<subseteq> K 1 xn \\<inter> \\<AA> (\\<mu> n)\n  {xn} \\<lless> A2\n\ngoal (1 subgoal):\n 1. A2 \\<subseteq> \\<AA> (\\<mu> n)", "by simp"], ["proof (state)\nthis:\n  A2 \\<subseteq> \\<AA> (\\<mu> n)\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "let ?\\<AA> = \"\\<lambda>\\<nu>. if \\<nu> = \\<mu> n then A2 else K 1 xn \\<inter> \\<AA> (g \\<nu>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "have [simp]: \"({..<Suc n} \\<inter> {x. x \\<noteq> n}) = ({..<n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {..<Suc n} \\<inter> {x. x \\<noteq> n} = {..<n}", "by auto"], ["proof (state)\nthis:\n  {..<Suc n} \\<inter> {x. x \\<noteq> n} = {..<n}\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "have \"K (Suc 0) xn \\<inter> (\\<Union>x\\<in>elts \\<beta> \\<inter> {\\<nu>. \\<nu> \\<noteq> \\<mu> n}. \\<AA> (g x)) \\<subseteq> KI (Suc 0) (x ` {..<n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K (Suc 0) xn \\<inter>\n    (\\<Union>x\\<in>elts \\<beta> \\<inter> {\\<nu>. \\<nu> \\<noteq> \\<mu> n}.\n        \\<AA> (g x))\n    \\<subseteq> KI (Suc 0) (x ` {..<n})", "using sub g"], ["proof (prove)\nusing this:\n  \\<Union> (\\<AA> ` elts \\<beta>) \\<subseteq> KI (Suc 0) (x ` {..<n})\n  g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>\n\ngoal (1 subgoal):\n 1. K (Suc 0) xn \\<inter>\n    (\\<Union>x\\<in>elts \\<beta> \\<inter> {\\<nu>. \\<nu> \\<noteq> \\<mu> n}.\n        \\<AA> (g x))\n    \\<subseteq> KI (Suc 0) (x ` {..<n})", "by (auto simp: KI_def)"], ["proof (state)\nthis:\n  K (Suc 0) xn \\<inter>\n  (\\<Union>x\\<in>elts \\<beta> \\<inter> {\\<nu>. \\<nu> \\<noteq> \\<mu> n}.\n      \\<AA> (g x))\n  \\<subseteq> KI (Suc 0) (x ` {..<n})\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "moreover"], ["proof (state)\nthis:\n  K (Suc 0) xn \\<inter>\n  (\\<Union>x\\<in>elts \\<beta> \\<inter> {\\<nu>. \\<nu> \\<noteq> \\<mu> n}.\n      \\<AA> (g x))\n  \\<subseteq> KI (Suc 0) (x ` {..<n})\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "have \"A2 \\<subseteq> KI (Suc 0) (x ` {..<n})\" \"A2 \\<subseteq> elts (\\<alpha> * \\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A2 \\<subseteq> KI (Suc 0) (x ` {..<n}) &&&\n    A2 \\<subseteq> elts (\\<alpha> * \\<beta>)", "using \\<AA>sub sub A2"], ["proof (prove)\nusing this:\n  \\<AA> (\\<mu> n) \\<subseteq> elts (\\<alpha> * \\<beta>)\n  \\<Union> (\\<AA> ` elts \\<beta>) \\<subseteq> KI (Suc 0) (x ` {..<n})\n  tp A2 = \\<alpha>\n  A2 \\<subseteq> K 1 xn \\<inter> \\<AA> (\\<mu> n)\n  {xn} \\<lless> A2\n\ngoal (1 subgoal):\n 1. A2 \\<subseteq> KI (Suc 0) (x ` {..<n}) &&&\n    A2 \\<subseteq> elts (\\<alpha> * \\<beta>)", "by fastforce+"], ["proof (state)\nthis:\n  A2 \\<subseteq> KI (Suc 0) (x ` {..<n})\n  A2 \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "moreover"], ["proof (state)\nthis:\n  A2 \\<subseteq> KI (Suc 0) (x ` {..<n})\n  A2 \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "have \"xn \\<in> elts (\\<alpha> * \\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xn \\<in> elts (\\<alpha> * \\<beta>)", "using \\<AA>sub xn"], ["proof (prove)\nusing this:\n  \\<AA> (\\<mu> n) \\<subseteq> elts (\\<alpha> * \\<beta>)\n  xn \\<in> \\<AA> (\\<mu> n)\n\ngoal (1 subgoal):\n 1. xn \\<in> elts (\\<alpha> * \\<beta>)", "by blast"], ["proof (state)\nthis:\n  xn \\<in> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "moreover"], ["proof (state)\nthis:\n  xn \\<in> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "have \"strict_mono_sets (elts \\<beta>) ?\\<AA>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono_sets (elts \\<beta>)\n     (\\<lambda>\\<nu>.\n         if \\<nu> = \\<mu> n then A2 else K 1 xn \\<inter> \\<AA> (g \\<nu>))", "using sm sm_g g g_\\<mu> A2_sub"], ["proof (prove)\nusing this:\n  strict_mono_sets (elts \\<beta>) \\<AA>\n  strict_mono_on g (elts \\<beta>)\n  g \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>\n  \\<forall>\\<nu>\\<in>\\<mu> ` {..n}. g \\<nu> = \\<nu>\n  A2 \\<subseteq> \\<AA> (\\<mu> n)\n\ngoal (1 subgoal):\n 1. strict_mono_sets (elts \\<beta>)\n     (\\<lambda>\\<nu>.\n         if \\<nu> = \\<mu> n then A2 else K 1 xn \\<inter> \\<AA> (g \\<nu>))", "unfolding strict_mono_sets_def strict_mono_on_def less_sets_def Pi_iff subset_iff Ball_def Bex_def image_iff"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> elts \\<beta> \\<longrightarrow>\n     (\\<forall>xa.\n         xa \\<in> elts \\<beta> \\<longrightarrow>\n         x < xa \\<longrightarrow>\n         (\\<forall>xb.\n             xb \\<in> \\<AA> x \\<longrightarrow>\n             (\\<forall>x. x \\<in> \\<AA> xa \\<longrightarrow> xb < x)))\n  \\<forall>r s.\n     r \\<in> elts \\<beta> \\<and>\n     s \\<in> elts \\<beta> \\<and> r < s \\<longrightarrow>\n     g r < g s\n  \\<forall>x. x \\<in> elts \\<beta> \\<longrightarrow> g x \\<in> elts \\<beta>\n  \\<forall>x.\n     (\\<exists>xa. xa \\<in> {..n} \\<and> x = \\<mu> xa) \\<longrightarrow>\n     g x = x\n  \\<forall>t. t \\<in> A2 \\<longrightarrow> t \\<in> \\<AA> (\\<mu> n)\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> elts \\<beta> \\<longrightarrow>\n       (\\<forall>xa.\n           xa \\<in> elts \\<beta> \\<longrightarrow>\n           x < xa \\<longrightarrow>\n           (\\<forall>xb.\n               xb \\<in> (if x = \\<mu> n then A2\n                         else K 1 xn \\<inter> \\<AA> (g x)) \\<longrightarrow>\n               (\\<forall>x.\n                   x \\<in> (if xa = \\<mu> n then A2\n                            else K 1 xn \\<inter>\n                                 \\<AA> (g xa)) \\<longrightarrow>\n                   xb < x)))", "by (simp (no_asm_use) add: if_split_mem2) (smt order_refl)"], ["proof (state)\nthis:\n  strict_mono_sets (elts \\<beta>)\n   (\\<lambda>\\<nu>.\n       if \\<nu> = \\<mu> n then A2 else K 1 xn \\<inter> \\<AA> (g \\<nu>))\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "ultimately"], ["proof (chain)\npicking this:\n  K (Suc 0) xn \\<inter>\n  (\\<Union>x\\<in>elts \\<beta> \\<inter> {\\<nu>. \\<nu> \\<noteq> \\<mu> n}.\n      \\<AA> (g x))\n  \\<subseteq> KI (Suc 0) (x ` {..<n})\n  A2 \\<subseteq> KI (Suc 0) (x ` {..<n})\n  A2 \\<subseteq> elts (\\<alpha> * \\<beta>)\n  xn \\<in> elts (\\<alpha> * \\<beta>)\n  strict_mono_sets (elts \\<beta>)\n   (\\<lambda>\\<nu>.\n       if \\<nu> = \\<mu> n then A2 else K 1 xn \\<inter> \\<AA> (g \\<nu>))", "have \"\\<Phi> (Suc n) ?\\<AA> (x(n := xn))\""], ["proof (prove)\nusing this:\n  K (Suc 0) xn \\<inter>\n  (\\<Union>x\\<in>elts \\<beta> \\<inter> {\\<nu>. \\<nu> \\<noteq> \\<mu> n}.\n      \\<AA> (g x))\n  \\<subseteq> KI (Suc 0) (x ` {..<n})\n  A2 \\<subseteq> KI (Suc 0) (x ` {..<n})\n  A2 \\<subseteq> elts (\\<alpha> * \\<beta>)\n  xn \\<in> elts (\\<alpha> * \\<beta>)\n  strict_mono_sets (elts \\<beta>)\n   (\\<lambda>\\<nu>.\n       if \\<nu> = \\<mu> n then A2 else K 1 xn \\<inter> \\<AA> (g \\<nu>))\n\ngoal (1 subgoal):\n 1. \\<Phi> (Suc n)\n     (\\<lambda>\\<nu>.\n         if \\<nu> = \\<mu> n then A2 else K 1 xn \\<inter> \\<AA> (g \\<nu>))\n     (x(n := xn))", "using tp1 x A2"], ["proof (prove)\nusing this:\n  K (Suc 0) xn \\<inter>\n  (\\<Union>x\\<in>elts \\<beta> \\<inter> {\\<nu>. \\<nu> \\<noteq> \\<mu> n}.\n      \\<AA> (g x))\n  \\<subseteq> KI (Suc 0) (x ` {..<n})\n  A2 \\<subseteq> KI (Suc 0) (x ` {..<n})\n  A2 \\<subseteq> elts (\\<alpha> * \\<beta>)\n  xn \\<in> elts (\\<alpha> * \\<beta>)\n  strict_mono_sets (elts \\<beta>)\n   (\\<lambda>\\<nu>.\n       if \\<nu> = \\<mu> n then A2 else K 1 xn \\<inter> \\<AA> (g \\<nu>))\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  tp (K 1 xn \\<inter> \\<AA> (g ?\\<nu>)) = \\<alpha>\n  x ` {..<n} \\<subseteq> elts (\\<alpha> * \\<beta>)\n  tp A2 = \\<alpha>\n  A2 \\<subseteq> K 1 xn \\<inter> \\<AA> (\\<mu> n)\n  {xn} \\<lless> A2\n\ngoal (1 subgoal):\n 1. \\<Phi> (Suc n)\n     (\\<lambda>\\<nu>.\n         if \\<nu> = \\<mu> n then A2 else K 1 xn \\<inter> \\<AA> (g \\<nu>))\n     (x(n := xn))", "by (auto simp: \\<Phi>_def K_def)"], ["proof (state)\nthis:\n  \\<Phi> (Suc n)\n   (\\<lambda>\\<nu>.\n       if \\<nu> = \\<mu> n then A2 else K 1 xn \\<inter> \\<AA> (g \\<nu>))\n   (x(n := xn))\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "with A2"], ["proof (chain)\npicking this:\n  tp A2 = \\<alpha>\n  A2 \\<subseteq> K 1 xn \\<inter> \\<AA> (\\<mu> n)\n  {xn} \\<lless> A2\n  \\<Phi> (Suc n)\n   (\\<lambda>\\<nu>.\n       if \\<nu> = \\<mu> n then A2 else K 1 xn \\<inter> \\<AA> (g \\<nu>))\n   (x(n := xn))", "show ?thesis"], ["proof (prove)\nusing this:\n  tp A2 = \\<alpha>\n  A2 \\<subseteq> K 1 xn \\<inter> \\<AA> (\\<mu> n)\n  {xn} \\<lless> A2\n  \\<Phi> (Suc n)\n   (\\<lambda>\\<nu>.\n       if \\<nu> = \\<mu> n then A2 else K 1 xn \\<inter> \\<AA> (g \\<nu>))\n   (x(n := xn))\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(g, \\<AA>', xn).\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           \\<Phi> (Suc n) \\<AA>' (x(n := xn)))", "by (rule_tac x=\"(g,?\\<AA>,xn)\" in exI) (simp add: \\<Psi>_def g sm_g g_\\<mu> xn)"], ["proof (state)\nthis:\n  Ex (\\<lambda>(g, \\<AA>', xn).\n         \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n         \\<Phi> (Suc n) \\<AA>' (x(n := xn)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Phi> ?n ?\\<AA> ?x \\<Longrightarrow>\n  Ex (\\<lambda>(g, \\<AA>', xn).\n         \\<Psi> ?n g ?\\<AA> \\<AA>' xn \\<and>\n         \\<Phi> (Suc ?n) \\<AA>' (?x(?n := xn)))\n\ngoal (1 subgoal):\n 1. False", "define G where \"G \\<equiv> \\<lambda>n \\<AA> x. @(g,\\<AA>',x'). \\<exists>xn. \\<Psi> n g \\<AA> \\<AA>' xn \\<and> x' = (x(n:=xn)) \\<and> \\<Phi> (Suc n) \\<AA>' x'\""], ["proof (state)\nthis:\n  G \\<equiv>\n  \\<lambda>n \\<AA> x.\n     SOME (g, \\<AA>', x').\n        \\<exists>xn.\n           \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n           x' = x(n := xn) \\<and> \\<Phi> (Suc n) \\<AA>' x'\n\ngoal (1 subgoal):\n 1. False", "have G\\<Phi>: \"(\\<lambda>(g,\\<AA>',x'). \\<Phi> (Suc n) \\<AA>' x') (G n \\<AA> x)\"\n          and G\\<Psi>: \"(\\<lambda>(g,\\<AA>',x'). \\<Psi> n g \\<AA> \\<AA>' (x' n)) (G n \\<AA> x)\"  if \"\\<Phi> n \\<AA> x\" for n \\<AA> x"], ["proof (prove)\ngoal (1 subgoal):\n 1. case G n \\<AA> x of\n    (g, \\<AA>', x') \\<Rightarrow> \\<Phi> (Suc n) \\<AA>' x' &&&\n    case G n \\<AA> x of\n    (g, \\<AA>', x') \\<Rightarrow> \\<Psi> n g \\<AA> \\<AA>' (x' n)", "using step [OF that]"], ["proof (prove)\nusing this:\n  Ex (\\<lambda>(g, \\<AA>', xn).\n         \\<Psi> n g \\<AA> \\<AA>' xn \\<and>\n         \\<Phi> (Suc n) \\<AA>' (x(n := xn)))\n\ngoal (1 subgoal):\n 1. case G n \\<AA> x of\n    (g, \\<AA>', x') \\<Rightarrow> \\<Phi> (Suc n) \\<AA>' x' &&&\n    case G n \\<AA> x of\n    (g, \\<AA>', x') \\<Rightarrow> \\<Psi> n g \\<AA> \\<AA>' (x' n)", "by (force simp: G_def dest: some_eq_imp)+"], ["proof (state)\nthis:\n  \\<Phi> ?n ?\\<AA> ?x \\<Longrightarrow>\n  case G ?n ?\\<AA> ?x of\n  (g, \\<AA>', x') \\<Rightarrow> \\<Phi> (Suc ?n) \\<AA>' x'\n  \\<Phi> ?n ?\\<AA> ?x \\<Longrightarrow>\n  case G ?n ?\\<AA> ?x of\n  (g, \\<AA>', x') \\<Rightarrow> \\<Psi> ?n g ?\\<AA> \\<AA>' (x' ?n)\n\ngoal (1 subgoal):\n 1. False", "define H where \"H \\<equiv> rec_nat (id,?\\<AA>0,undefined) (\\<lambda>n (g0,\\<AA>,x0). G n \\<AA> x0)\""], ["proof (state)\nthis:\n  H \\<equiv>\n  rec_nat\n   (id, \\<lambda>\\<nu>. (+) (\\<alpha> * \\<nu>) ` elts \\<alpha>, undefined)\n   (\\<lambda>n (g0, \\<AA>, x0). G n \\<AA> x0)\n\ngoal (1 subgoal):\n 1. False", "have H_Suc: \"H (Suc n) = (case H n of (g0, xa, xb) \\<Rightarrow> G n xa xb)\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. H (Suc n) = (case H n of (g0, xa, xb) \\<Rightarrow> G n xa xb)", "by (simp add: H_def)"], ["proof (state)\nthis:\n  H (Suc ?n) = (case H ?n of (g0, xa, xb) \\<Rightarrow> G ?n xa xb)\n\ngoal (1 subgoal):\n 1. False", "have \"(\\<lambda>(g,\\<AA>,x). \\<Phi> n \\<AA> x) (H n)\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. case H n of (g, \\<AA>, xa) \\<Rightarrow> \\<Phi> n \\<AA> xa", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. case H 0 of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> 0 \\<AA> x\n 2. \\<And>n.\n       case H n of\n       (g, \\<AA>, x) \\<Rightarrow> \\<Phi> n \\<AA> x \\<Longrightarrow>\n       case H (Suc n) of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> (Suc n) \\<AA> x", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. case H 0 of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> 0 \\<AA> x\n 2. \\<And>n.\n       case H n of\n       (g, \\<AA>, x) \\<Rightarrow> \\<Phi> n \\<AA> x \\<Longrightarrow>\n       case H (Suc n) of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> (Suc n) \\<AA> x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. case H 0 of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> 0 \\<AA> x", "by (simp add: H_def base)"], ["proof (state)\nthis:\n  case H 0 of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> 0 \\<AA> x\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       case H n of\n       (g, \\<AA>, x) \\<Rightarrow> \\<Phi> n \\<AA> x \\<Longrightarrow>\n       case H (Suc n) of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> (Suc n) \\<AA> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       case H n of\n       (g, \\<AA>, x) \\<Rightarrow> \\<Phi> n \\<AA> x \\<Longrightarrow>\n       case H (Suc n) of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> (Suc n) \\<AA> x", "case (Suc n)"], ["proof (state)\nthis:\n  case H n of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> n \\<AA> x\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       case H n of\n       (g, \\<AA>, x) \\<Rightarrow> \\<Phi> n \\<AA> x \\<Longrightarrow>\n       case H (Suc n) of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> (Suc n) \\<AA> x", "then"], ["proof (chain)\npicking this:\n  case H n of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> n \\<AA> x", "show ?case"], ["proof (prove)\nusing this:\n  case H n of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> n \\<AA> x\n\ngoal (1 subgoal):\n 1. case H (Suc n) of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> (Suc n) \\<AA> x", "using G\\<Phi>"], ["proof (prove)\nusing this:\n  case H n of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> n \\<AA> x\n  \\<Phi> ?n ?\\<AA> ?x \\<Longrightarrow>\n  case G ?n ?\\<AA> ?x of\n  (g, \\<AA>', x') \\<Rightarrow> \\<Phi> (Suc ?n) \\<AA>' x'\n\ngoal (1 subgoal):\n 1. case H (Suc n) of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> (Suc n) \\<AA> x", "by (fastforce simp: H_Suc)"], ["proof (state)\nthis:\n  case H (Suc n) of (g, \\<AA>, x) \\<Rightarrow> \\<Phi> (Suc n) \\<AA> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  case H ?n of (g, \\<AA>, xa) \\<Rightarrow> \\<Phi> ?n \\<AA> xa\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  case H ?n of (g, \\<AA>, xa) \\<Rightarrow> \\<Phi> ?n \\<AA> xa", "have H_imp_\\<Phi>: \"\\<Phi> n \\<AA> x\" if \"H n = (g,\\<AA>,x)\" for g \\<AA> x n"], ["proof (prove)\nusing this:\n  case H ?n of (g, \\<AA>, xa) \\<Rightarrow> \\<Phi> ?n \\<AA> xa\n\ngoal (1 subgoal):\n 1. \\<Phi> n \\<AA> x", "by (metis case_prodD that)"], ["proof (state)\nthis:\n  H ?n = (?g, ?\\<AA>, ?x) \\<Longrightarrow> \\<Phi> ?n ?\\<AA> ?x\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  H ?n = (?g, ?\\<AA>, ?x) \\<Longrightarrow> \\<Phi> ?n ?\\<AA> ?x", "have H_imp_\\<Psi>: \"(\\<lambda>(g,\\<AA>',x'). let (g0,\\<AA>,x) = H n in \\<Psi> n g \\<AA> \\<AA>' (x' n)) (H (Suc n))\" for n"], ["proof (prove)\nusing this:\n  H ?n = (?g, ?\\<AA>, ?x) \\<Longrightarrow> \\<Phi> ?n ?\\<AA> ?x\n\ngoal (1 subgoal):\n 1. case H (Suc n) of\n    (g, \\<AA>', x') \\<Rightarrow>\n      let (g0, \\<AA>, x) = H n in \\<Psi> n g \\<AA> \\<AA>' (x' n)", "using G\\<Psi>"], ["proof (prove)\nusing this:\n  H ?n = (?g, ?\\<AA>, ?x) \\<Longrightarrow> \\<Phi> ?n ?\\<AA> ?x\n  \\<Phi> ?n ?\\<AA> ?x \\<Longrightarrow>\n  case G ?n ?\\<AA> ?x of\n  (g, \\<AA>', x') \\<Rightarrow> \\<Psi> ?n g ?\\<AA> \\<AA>' (x' ?n)\n\ngoal (1 subgoal):\n 1. case H (Suc n) of\n    (g, \\<AA>', x') \\<Rightarrow>\n      let (g0, \\<AA>, x) = H n in \\<Psi> n g \\<AA> \\<AA>' (x' n)", "by (fastforce simp: H_Suc split: prod.split)"], ["proof (state)\nthis:\n  case H (Suc ?n) of\n  (g, \\<AA>', x') \\<Rightarrow>\n    let (g0, \\<AA>, x) = H ?n in \\<Psi> ?n g \\<AA> \\<AA>' (x' ?n)\n\ngoal (1 subgoal):\n 1. False", "define g where \"g \\<equiv> \\<lambda>n. (\\<lambda>(g,\\<AA>,x). g) (H (Suc n))\""], ["proof (state)\nthis:\n  g \\<equiv> \\<lambda>n. case H (Suc n) of (g, \\<AA>, xa) \\<Rightarrow> g\n\ngoal (1 subgoal):\n 1. False", "have g: \"g n \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>\" and sm_g: \"strict_mono_on (g n) (elts \\<beta>)\"\n                 and 13: \"\\<And>i. i\\<le>n \\<Longrightarrow> g n (\\<mu> i) = \\<mu> i\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. g n \\<in> elts \\<beta> \\<rightarrow> elts \\<beta> &&&\n    strict_mono_on (g n) (elts \\<beta>) &&&\n    (\\<And>i. i \\<le> n \\<Longrightarrow> g n (\\<mu> i) = \\<mu> i)", "using H_imp_\\<Psi> [of n]"], ["proof (prove)\nusing this:\n  case H (Suc n) of\n  (g, \\<AA>', x') \\<Rightarrow>\n    let (g0, \\<AA>, x) = H n in \\<Psi> n g \\<AA> \\<AA>' (x' n)\n\ngoal (1 subgoal):\n 1. g n \\<in> elts \\<beta> \\<rightarrow> elts \\<beta> &&&\n    strict_mono_on (g n) (elts \\<beta>) &&&\n    (\\<And>i. i \\<le> n \\<Longrightarrow> g n (\\<mu> i) = \\<mu> i)", "by (auto simp: g_def \\<Psi>_def)"], ["proof (state)\nthis:\n  g ?n \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>\n  strict_mono_on (g ?n) (elts \\<beta>)\n  ?i \\<le> ?n1 \\<Longrightarrow> g ?n1 (\\<mu> ?i) = \\<mu> ?i\n\ngoal (1 subgoal):\n 1. False", "define \\<AA> where \"\\<AA> \\<equiv> \\<lambda>n. (\\<lambda>(g,\\<AA>,x). \\<AA>) (H n)\""], ["proof (state)\nthis:\n  \\<AA> \\<equiv> \\<lambda>n. case H n of (g, \\<AA>, xa) \\<Rightarrow> \\<AA>\n\ngoal (1 subgoal):\n 1. False", "define x where \"x \\<equiv> \\<lambda>n. (\\<lambda>(g,\\<AA>,x). x n) (H (Suc n))\""], ["proof (state)\nthis:\n  x \\<equiv> \\<lambda>n. case H (Suc n) of (g, \\<AA>, xa) \\<Rightarrow> xa n\n\ngoal (1 subgoal):\n 1. False", "have 14: \"\\<AA> (Suc n) \\<nu> \\<subseteq> K 1 (x n) \\<inter> \\<AA> n (g n \\<nu>)\" if \"\\<nu> \\<in> elts \\<beta>\" for \\<nu> n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA> (Suc n) \\<nu> \\<subseteq> K 1 (x n) \\<inter> \\<AA> n (g n \\<nu>)", "using H_imp_\\<Psi> [of n] that"], ["proof (prove)\nusing this:\n  case H (Suc n) of\n  (g, \\<AA>', x') \\<Rightarrow>\n    let (g0, \\<AA>, x) = H n in \\<Psi> n g \\<AA> \\<AA>' (x' n)\n  \\<nu> \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<AA> (Suc n) \\<nu> \\<subseteq> K 1 (x n) \\<inter> \\<AA> n (g n \\<nu>)", "by (force simp: \\<Psi>_def \\<AA>_def x_def g_def)"], ["proof (state)\nthis:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<AA> (Suc ?n) ?\\<nu>\n  \\<subseteq> K 1 (x ?n) \\<inter> \\<AA> ?n (g ?n ?\\<nu>)\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<AA> (Suc ?n) ?\\<nu>\n  \\<subseteq> K 1 (x ?n) \\<inter> \\<AA> ?n (g ?n ?\\<nu>)", "have x14: \"\\<AA> (Suc n) \\<nu> \\<subseteq> \\<AA> n (g n \\<nu>)\" if \"\\<nu> \\<in> elts \\<beta>\" for \\<nu> n"], ["proof (prove)\nusing this:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<AA> (Suc ?n) ?\\<nu>\n  \\<subseteq> K 1 (x ?n) \\<inter> \\<AA> ?n (g ?n ?\\<nu>)\n\ngoal (1 subgoal):\n 1. \\<AA> (Suc n) \\<nu> \\<subseteq> \\<AA> n (g n \\<nu>)", "using that"], ["proof (prove)\nusing this:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<AA> (Suc ?n) ?\\<nu>\n  \\<subseteq> K 1 (x ?n) \\<inter> \\<AA> ?n (g ?n ?\\<nu>)\n  \\<nu> \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<AA> (Suc n) \\<nu> \\<subseteq> \\<AA> n (g n \\<nu>)", "by blast"], ["proof (state)\nthis:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<AA> (Suc ?n) ?\\<nu> \\<subseteq> \\<AA> ?n (g ?n ?\\<nu>)\n\ngoal (1 subgoal):\n 1. False", "have 15: \"x n \\<in> \\<AA> n (\\<mu> n)\" and 16: \"less_sets {x n} (\\<AA> (Suc n) (\\<mu> n))\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. x n \\<in> \\<AA> n (\\<mu> n) &&& {x n} \\<lless> \\<AA> (Suc n) (\\<mu> n)", "using H_imp_\\<Psi> [of n]"], ["proof (prove)\nusing this:\n  case H (Suc n) of\n  (g, \\<AA>', x') \\<Rightarrow>\n    let (g0, \\<AA>, x) = H n in \\<Psi> n g \\<AA> \\<AA>' (x' n)\n\ngoal (1 subgoal):\n 1. x n \\<in> \\<AA> n (\\<mu> n) &&& {x n} \\<lless> \\<AA> (Suc n) (\\<mu> n)", "by (force simp: \\<Psi>_def \\<AA>_def x_def)+"], ["proof (state)\nthis:\n  x ?n \\<in> \\<AA> ?n (\\<mu> ?n)\n  {x ?n} \\<lless> \\<AA> (Suc ?n) (\\<mu> ?n)\n\ngoal (1 subgoal):\n 1. False", "have \\<AA>_\\<alpha>\\<beta>: \"\\<AA> n \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\" if \"\\<nu> \\<in> elts \\<beta>\" for \\<nu> n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA> n \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)", "using H_imp_\\<Phi> [of n] that"], ["proof (prove)\nusing this:\n  H n = (?g, ?\\<AA>, ?x) \\<Longrightarrow> \\<Phi> n ?\\<AA> ?x\n  \\<nu> \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<AA> n \\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)", "by (auto simp: \\<Phi>_def \\<AA>_def split: prod.split)"], ["proof (state)\nthis:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<AA> ?n ?\\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. False", "have 12: \"strict_mono_sets (elts \\<beta>) (\\<AA> n)\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono_sets (elts \\<beta>) (\\<AA> n)", "using H_imp_\\<Phi> [of n] that"], ["proof (prove)\nusing this:\n  H n = (?g, ?\\<AA>, ?x) \\<Longrightarrow> \\<Phi> n ?\\<AA> ?x\n  \\<forall>H.\n     tp H = ord_of_nat (2 * k) \\<longrightarrow>\n     H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n     \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {0}\n  \\<forall>H.\n     tp H = \\<gamma> \\<longrightarrow>\n     H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n     \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1}\n  \\<forall>H.\n     tp H = \\<omega> * \\<beta> \\<longrightarrow>\n     H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n     \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1}\n\ngoal (1 subgoal):\n 1. strict_mono_sets (elts \\<beta>) (\\<AA> n)", "by (auto simp: \\<Phi>_def \\<AA>_def split: prod.split)"], ["proof (state)\nthis:\n  strict_mono_sets (elts \\<beta>) (\\<AA> ?n)\n\ngoal (1 subgoal):\n 1. False", "have tp_\\<AA>: \"tp (\\<AA> n \\<nu>) = \\<alpha>\" if \"\\<nu> \\<in> elts \\<beta>\" for \\<nu> n"], ["proof (prove)\ngoal (1 subgoal):\n 1. tp (\\<AA> n \\<nu>) = \\<alpha>", "using H_imp_\\<Phi> [of n] that"], ["proof (prove)\nusing this:\n  H n = (?g, ?\\<AA>, ?x) \\<Longrightarrow> \\<Phi> n ?\\<AA> ?x\n  \\<nu> \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. tp (\\<AA> n \\<nu>) = \\<alpha>", "by (auto simp: \\<Phi>_def \\<AA>_def split: prod.split)"], ["proof (state)\nthis:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  tp (\\<AA> ?n ?\\<nu>) = \\<alpha>\n\ngoal (1 subgoal):\n 1. False", "let ?Z = \"range x\""], ["proof (state)\ngoal (1 subgoal):\n 1. False", "have S_dec: \"\\<Union> (\\<AA> (m+k) ` elts \\<beta>) \\<subseteq> \\<Union> (\\<AA> m ` elts \\<beta>)\" for k m"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (\\<AA> (m + k) ` elts \\<beta>)\n    \\<subseteq> \\<Union> (\\<AA> m ` elts \\<beta>)", "by (induction k) (use 14 g in \\<open>fastforce+\\<close>)"], ["proof (state)\nthis:\n  \\<Union> (\\<AA> (?m + ?k) ` elts \\<beta>)\n  \\<subseteq> \\<Union> (\\<AA> ?m ` elts \\<beta>)\n\ngoal (1 subgoal):\n 1. False", "have \"x n \\<in> K 1 (x m)\" if \"m<n\" for m n"], ["proof (prove)\ngoal (1 subgoal):\n 1. x n \\<in> K 1 (x m)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x n \\<in> K 1 (x m)", "have \"x n \\<in> (\\<Union>\\<nu> \\<in> elts \\<beta>. \\<AA> n \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x n \\<in> \\<Union> (\\<AA> n ` elts \\<beta>)", "by (meson \"15\" UN_I \\<mu>_in_\\<beta>)"], ["proof (state)\nthis:\n  x n \\<in> \\<Union> (\\<AA> n ` elts \\<beta>)\n\ngoal (1 subgoal):\n 1. x n \\<in> K 1 (x m)", "also"], ["proof (state)\nthis:\n  x n \\<in> \\<Union> (\\<AA> n ` elts \\<beta>)\n\ngoal (1 subgoal):\n 1. x n \\<in> K 1 (x m)", "have \"\\<dots> \\<subseteq> (\\<Union>\\<nu> \\<in> elts \\<beta>. \\<AA> (Suc m) \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (\\<AA> n ` elts \\<beta>)\n    \\<subseteq> \\<Union> (\\<AA> (Suc m) ` elts \\<beta>)", "using S_dec [of \"Suc m\"] less_iff_Suc_add that"], ["proof (prove)\nusing this:\n  \\<Union> (\\<AA> (Suc m + ?k) ` elts \\<beta>)\n  \\<subseteq> \\<Union> (\\<AA> (Suc m) ` elts \\<beta>)\n  (?m < ?n) = (\\<exists>k. ?n = Suc (?m + k))\n  m < n\n\ngoal (1 subgoal):\n 1. \\<Union> (\\<AA> n ` elts \\<beta>)\n    \\<subseteq> \\<Union> (\\<AA> (Suc m) ` elts \\<beta>)", "by auto"], ["proof (state)\nthis:\n  \\<Union> (\\<AA> n ` elts \\<beta>)\n  \\<subseteq> \\<Union> (\\<AA> (Suc m) ` elts \\<beta>)\n\ngoal (1 subgoal):\n 1. x n \\<in> K 1 (x m)", "also"], ["proof (state)\nthis:\n  \\<Union> (\\<AA> n ` elts \\<beta>)\n  \\<subseteq> \\<Union> (\\<AA> (Suc m) ` elts \\<beta>)\n\ngoal (1 subgoal):\n 1. x n \\<in> K 1 (x m)", "have \"\\<dots> \\<subseteq> K 1 (x m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (\\<AA> (Suc m) ` elts \\<beta>) \\<subseteq> K 1 (x m)", "using 14"], ["proof (prove)\nusing this:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<AA> (Suc ?n) ?\\<nu>\n  \\<subseteq> K 1 (x ?n) \\<inter> \\<AA> ?n (g ?n ?\\<nu>)\n\ngoal (1 subgoal):\n 1. \\<Union> (\\<AA> (Suc m) ` elts \\<beta>) \\<subseteq> K 1 (x m)", "by auto"], ["proof (state)\nthis:\n  \\<Union> (\\<AA> (Suc m) ` elts \\<beta>) \\<subseteq> K 1 (x m)\n\ngoal (1 subgoal):\n 1. x n \\<in> K 1 (x m)", "finally"], ["proof (chain)\npicking this:\n  x n \\<in> K 1 (x m)", "show ?thesis"], ["proof (prove)\nusing this:\n  x n \\<in> K 1 (x m)\n\ngoal (1 subgoal):\n 1. x n \\<in> K 1 (x m)", "."], ["proof (state)\nthis:\n  x n \\<in> K 1 (x m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?m < ?n \\<Longrightarrow> x ?n \\<in> K 1 (x ?m)\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  ?m < ?n \\<Longrightarrow> x ?n \\<in> K 1 (x ?m)", "have \"f{x m, x n} = 1\" if \"m<n\" for m n"], ["proof (prove)\nusing this:\n  ?m < ?n \\<Longrightarrow> x ?n \\<in> K 1 (x ?m)\n\ngoal (1 subgoal):\n 1. f {x m, x n} = 1", "using that"], ["proof (prove)\nusing this:\n  ?m < ?n \\<Longrightarrow> x ?n \\<in> K 1 (x ?m)\n  m < n\n\ngoal (1 subgoal):\n 1. f {x m, x n} = 1", "by (auto simp: K_def)"], ["proof (state)\nthis:\n  ?m < ?n \\<Longrightarrow> f {x ?m, x ?n} = 1\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  ?m < ?n \\<Longrightarrow> f {x ?m, x ?n} = 1", "have Z_K1: \"f ` [?Z]\\<^bsup>2\\<^esup> \\<subseteq> {1}\""], ["proof (prove)\nusing this:\n  ?m < ?n \\<Longrightarrow> f {x ?m, x ?n} = 1\n\ngoal (1 subgoal):\n 1. f ` [range x]\\<^bsup>2\\<^esup> \\<subseteq> {1}", "by (clarsimp simp: nsets_2_eq) (metis insert_commute less_linear)"], ["proof (state)\nthis:\n  f ` [range x]\\<^bsup>2\\<^esup> \\<subseteq> {1}\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  f ` [range x]\\<^bsup>2\\<^esup> \\<subseteq> {1}\n\ngoal (1 subgoal):\n 1. False", "have Z_sub: \"?Z \\<subseteq> elts (\\<alpha> * \\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range x \\<subseteq> elts (\\<alpha> * \\<beta>)", "using \"15\" \\<AA>_\\<alpha>\\<beta> \\<mu>_in_\\<beta>"], ["proof (prove)\nusing this:\n  x ?n \\<in> \\<AA> ?n (\\<mu> ?n)\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<AA> ?n ?\\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  \\<mu> ?i \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. range x \\<subseteq> elts (\\<alpha> * \\<beta>)", "by blast"], ["proof (state)\nthis:\n  range x \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  range x \\<subseteq> elts (\\<alpha> * \\<beta>)\n\ngoal (1 subgoal):\n 1. False", "have \"tp ?Z \\<ge> \\<omega> * \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "define \\<gg> where \"\\<gg> \\<equiv> \\<lambda>i j x. wfrec (measure (\\<lambda>k. j-k)) (\\<lambda>\\<gg> k. if k<j then g k (\\<gg> (Suc k)) else x) i\""], ["proof (state)\nthis:\n  \\<gg> \\<equiv>\n  \\<lambda>i j x.\n     wfrec (measure ((-) j))\n      (\\<lambda>\\<gg> k. if k < j then g k (\\<gg> (Suc k)) else x) i\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have \\<gg>: \"\\<gg> i j x = (if i<j then g i (\\<gg> (Suc i) j x) else x)\" for i j x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gg> i j x = (if i < j then g i (\\<gg> (Suc i) j x) else x)", "by (simp add: \\<gg>_def wfrec cut_apply)"], ["proof (state)\nthis:\n  \\<gg> ?i ?j ?x = (if ?i < ?j then g ?i (\\<gg> (Suc ?i) ?j ?x) else ?x)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have 17: \"\\<gg> k j (\\<mu> i) = \\<mu> i\" if \"i \\<le> k\" for i j k"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gg> k j (\\<mu> i) = \\<mu> i", "using wf_measure [of \"\\<lambda>k. j-k\"] that"], ["proof (prove)\nusing this:\n  wf (measure ((-) j))\n  i \\<le> k\n\ngoal (1 subgoal):\n 1. \\<gg> k j (\\<mu> i) = \\<mu> i", "by (induction k rule: wf_induct_rule) (simp add: \"13\" \\<gg> le_imp_less_Suc)"], ["proof (state)\nthis:\n  ?i \\<le> ?k \\<Longrightarrow> \\<gg> ?k ?j (\\<mu> ?i) = \\<mu> ?i\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have \\<gg>_in_\\<beta>: \"\\<gg> i j \\<nu>  \\<in> elts \\<beta>\" if \"\\<nu> \\<in> elts \\<beta>\" for i j \\<nu>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gg> i j \\<nu> \\<in> elts \\<beta>", "using wf_measure [of \"\\<lambda>k. j-k\"] that"], ["proof (prove)\nusing this:\n  wf (measure ((-) j))\n  \\<nu> \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<gg> i j \\<nu> \\<in> elts \\<beta>", "proof (induction i rule: wf_induct_rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> measure ((-) j);\n                    \\<nu> \\<in> elts \\<beta>\\<rbrakk>\n                   \\<Longrightarrow> \\<gg> y j \\<nu> \\<in> elts \\<beta>;\n        \\<nu> \\<in> elts \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<gg> x j \\<nu> \\<in> elts \\<beta>", "case (less i)"], ["proof (state)\nthis:\n  \\<lbrakk>(?y, i) \\<in> measure ((-) j); \\<nu> \\<in> elts \\<beta>\\<rbrakk>\n  \\<Longrightarrow> \\<gg> ?y j \\<nu> \\<in> elts \\<beta>\n  \\<nu> \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> measure ((-) j);\n                    \\<nu> \\<in> elts \\<beta>\\<rbrakk>\n                   \\<Longrightarrow> \\<gg> y j \\<nu> \\<in> elts \\<beta>;\n        \\<nu> \\<in> elts \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<gg> x j \\<nu> \\<in> elts \\<beta>", "with g"], ["proof (chain)\npicking this:\n  g ?n \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>\n  \\<lbrakk>(?y, i) \\<in> measure ((-) j); \\<nu> \\<in> elts \\<beta>\\<rbrakk>\n  \\<Longrightarrow> \\<gg> ?y j \\<nu> \\<in> elts \\<beta>\n  \\<nu> \\<in> elts \\<beta>", "show ?case"], ["proof (prove)\nusing this:\n  g ?n \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>\n  \\<lbrakk>(?y, i) \\<in> measure ((-) j); \\<nu> \\<in> elts \\<beta>\\<rbrakk>\n  \\<Longrightarrow> \\<gg> ?y j \\<nu> \\<in> elts \\<beta>\n  \\<nu> \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<gg> i j \\<nu> \\<in> elts \\<beta>", "by (force simp: \\<gg> [of i])"], ["proof (state)\nthis:\n  \\<gg> i j \\<nu> \\<in> elts \\<beta>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<gg> ?i ?j ?\\<nu> \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "then"], ["proof (chain)\npicking this:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<gg> ?i ?j ?\\<nu> \\<in> elts \\<beta>", "have \\<gg>_fun: \"\\<gg> i j \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>\" for i j"], ["proof (prove)\nusing this:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<gg> ?i ?j ?\\<nu> \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<gg> i j \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>", "by simp"], ["proof (state)\nthis:\n  \\<gg> ?i ?j \\<in> elts \\<beta> \\<rightarrow> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have sm_\\<gg>: \"strict_mono_on (\\<gg> i j) (elts \\<beta>)\" for i j"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono_on (\\<gg> i j) (elts \\<beta>)", "using wf_measure [of \"\\<lambda>k. j-k\"]"], ["proof (prove)\nusing this:\n  wf (measure ((-) j))\n\ngoal (1 subgoal):\n 1. strict_mono_on (\\<gg> i j) (elts \\<beta>)", "proof (induction i rule: wf_induct_rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<And>y.\n           (y, x) \\<in> measure ((-) j) \\<Longrightarrow>\n           strict_mono_on (\\<gg> y j) (elts \\<beta>)) \\<Longrightarrow>\n       strict_mono_on (\\<gg> x j) (elts \\<beta>)", "case (less i)"], ["proof (state)\nthis:\n  (?y, i) \\<in> measure ((-) j) \\<Longrightarrow>\n  strict_mono_on (\\<gg> ?y j) (elts \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<And>y.\n           (y, x) \\<in> measure ((-) j) \\<Longrightarrow>\n           strict_mono_on (\\<gg> y j) (elts \\<beta>)) \\<Longrightarrow>\n       strict_mono_on (\\<gg> x j) (elts \\<beta>)", "with sm_g"], ["proof (chain)\npicking this:\n  strict_mono_on (g ?n) (elts \\<beta>)\n  (?y, i) \\<in> measure ((-) j) \\<Longrightarrow>\n  strict_mono_on (\\<gg> ?y j) (elts \\<beta>)", "show ?case"], ["proof (prove)\nusing this:\n  strict_mono_on (g ?n) (elts \\<beta>)\n  (?y, i) \\<in> measure ((-) j) \\<Longrightarrow>\n  strict_mono_on (\\<gg> ?y j) (elts \\<beta>)\n\ngoal (1 subgoal):\n 1. strict_mono_on (\\<gg> i j) (elts \\<beta>)", "by (auto simp: \\<gg> [of i] strict_mono_on_def \\<gg>_in_\\<beta>)"], ["proof (state)\nthis:\n  strict_mono_on (\\<gg> i j) (elts \\<beta>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  strict_mono_on (\\<gg> ?i ?j) (elts \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have *: \"\\<AA> j (\\<mu> j) \\<subseteq> \\<AA> i (\\<gg> i j (\\<mu> j))\" if \"i < j\" for i j"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA> j (\\<mu> j) \\<subseteq> \\<AA> i (\\<gg> i j (\\<mu> j))", "using wf_measure [of \"\\<lambda>k. j-k\"] that"], ["proof (prove)\nusing this:\n  wf (measure ((-) j))\n  i < j\n\ngoal (1 subgoal):\n 1. \\<AA> j (\\<mu> j) \\<subseteq> \\<AA> i (\\<gg> i j (\\<mu> j))", "proof (induction i rule: wf_induct_rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> measure ((-) j); y < j\\<rbrakk>\n                   \\<Longrightarrow> \\<AA> j (\\<mu> j)\n                                     \\<subseteq> \\<AA> y\n            (\\<gg> y j (\\<mu> j));\n        x < j\\<rbrakk>\n       \\<Longrightarrow> \\<AA> j (\\<mu> j)\n                         \\<subseteq> \\<AA> x (\\<gg> x j (\\<mu> j))", "case (less i)"], ["proof (state)\nthis:\n  \\<lbrakk>(?y, i) \\<in> measure ((-) j); ?y < j\\<rbrakk>\n  \\<Longrightarrow> \\<AA> j (\\<mu> j)\n                    \\<subseteq> \\<AA> ?y (\\<gg> ?y j (\\<mu> j))\n  i < j\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> measure ((-) j); y < j\\<rbrakk>\n                   \\<Longrightarrow> \\<AA> j (\\<mu> j)\n                                     \\<subseteq> \\<AA> y\n            (\\<gg> y j (\\<mu> j));\n        x < j\\<rbrakk>\n       \\<Longrightarrow> \\<AA> j (\\<mu> j)\n                         \\<subseteq> \\<AA> x (\\<gg> x j (\\<mu> j))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?y, i) \\<in> measure ((-) j); ?y < j\\<rbrakk>\n  \\<Longrightarrow> \\<AA> j (\\<mu> j)\n                    \\<subseteq> \\<AA> ?y (\\<gg> ?y j (\\<mu> j))\n  i < j", "have \"j - Suc i < j - i\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?y, i) \\<in> measure ((-) j); ?y < j\\<rbrakk>\n  \\<Longrightarrow> \\<AA> j (\\<mu> j)\n                    \\<subseteq> \\<AA> ?y (\\<gg> ?y j (\\<mu> j))\n  i < j\n\ngoal (1 subgoal):\n 1. j - Suc i < j - i", "by (metis (no_types) Suc_diff_Suc lessI)"], ["proof (state)\nthis:\n  j - Suc i < j - i\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> measure ((-) j); y < j\\<rbrakk>\n                   \\<Longrightarrow> \\<AA> j (\\<mu> j)\n                                     \\<subseteq> \\<AA> y\n            (\\<gg> y j (\\<mu> j));\n        x < j\\<rbrakk>\n       \\<Longrightarrow> \\<AA> j (\\<mu> j)\n                         \\<subseteq> \\<AA> x (\\<gg> x j (\\<mu> j))", "with less \\<gg>_in_\\<beta>"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?y, i) \\<in> measure ((-) j); ?y < j\\<rbrakk>\n  \\<Longrightarrow> \\<AA> j (\\<mu> j)\n                    \\<subseteq> \\<AA> ?y (\\<gg> ?y j (\\<mu> j))\n  i < j\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<gg> ?i ?j ?\\<nu> \\<in> elts \\<beta>\n  j - Suc i < j - i", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?y, i) \\<in> measure ((-) j); ?y < j\\<rbrakk>\n  \\<Longrightarrow> \\<AA> j (\\<mu> j)\n                    \\<subseteq> \\<AA> ?y (\\<gg> ?y j (\\<mu> j))\n  i < j\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<gg> ?i ?j ?\\<nu> \\<in> elts \\<beta>\n  j - Suc i < j - i\n\ngoal (1 subgoal):\n 1. \\<AA> j (\\<mu> j) \\<subseteq> \\<AA> i (\\<gg> i j (\\<mu> j))", "by (simp add: \\<gg> [of i]) (metis 17 Suc_lessI \\<mu>_in_\\<beta> order_refl order_trans x14)"], ["proof (state)\nthis:\n  \\<AA> j (\\<mu> j) \\<subseteq> \\<AA> i (\\<gg> i j (\\<mu> j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i < ?j \\<Longrightarrow>\n  \\<AA> ?j (\\<mu> ?j) \\<subseteq> \\<AA> ?i (\\<gg> ?i ?j (\\<mu> ?j))\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have le: \"\\<gg> i j (\\<mu> j) \\<le> \\<mu> i \\<longleftrightarrow> \\<mu> j \\<le> \\<mu> i\" for i j"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<gg> i j (\\<mu> j) \\<le> \\<mu> i) = (\\<mu> j \\<le> \\<mu> i)", "using sm_\\<gg>"], ["proof (prove)\nusing this:\n  strict_mono_on (\\<gg> ?i ?j) (elts \\<beta>)\n\ngoal (1 subgoal):\n 1. (\\<gg> i j (\\<mu> j) \\<le> \\<mu> i) = (\\<mu> j \\<le> \\<mu> i)", "unfolding strict_mono_on_def"], ["proof (prove)\nusing this:\n  \\<forall>r s.\n     r \\<in> elts \\<beta> \\<and>\n     s \\<in> elts \\<beta> \\<and> r < s \\<longrightarrow>\n     \\<gg> ?i ?j r < \\<gg> ?i ?j s\n\ngoal (1 subgoal):\n 1. (\\<gg> i j (\\<mu> j) \\<le> \\<mu> i) = (\\<mu> j \\<le> \\<mu> i)", "by (metis \"17\" Ord_in_Ord Ord_linear2 \\<mu>_in_\\<beta> leD le_refl less_V_def \\<open>Ord \\<beta>\\<close>)"], ["proof (state)\nthis:\n  (\\<gg> ?i ?j (\\<mu> ?j) \\<le> \\<mu> ?i) = (\\<mu> ?j \\<le> \\<mu> ?i)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "then"], ["proof (chain)\npicking this:\n  (\\<gg> ?i ?j (\\<mu> ?j) \\<le> \\<mu> ?i) = (\\<mu> ?j \\<le> \\<mu> ?i)", "have less: \"\\<gg> i j (\\<mu> j) < \\<mu> i \\<longleftrightarrow> \\<mu> j < \\<mu> i\" for i j"], ["proof (prove)\nusing this:\n  (\\<gg> ?i ?j (\\<mu> ?j) \\<le> \\<mu> ?i) = (\\<mu> ?j \\<le> \\<mu> ?i)\n\ngoal (1 subgoal):\n 1. (\\<gg> i j (\\<mu> j) < \\<mu> i) = (\\<mu> j < \\<mu> i)", "by (metis (no_types, lifting) \"17\" \\<mu>_in_\\<beta> less_V_def order_refl sm_\\<gg> strict_mono_on_def)"], ["proof (state)\nthis:\n  (\\<gg> ?i ?j (\\<mu> ?j) < \\<mu> ?i) = (\\<mu> ?j < \\<mu> ?i)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have eq: \"\\<gg> i j (\\<mu> j) = \\<mu> i \\<longleftrightarrow> \\<mu> j = \\<mu> i\" for i j"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<gg> i j (\\<mu> j) = \\<mu> i) = (\\<mu> j = \\<mu> i)", "by (metis eq_refl le less less_le)"], ["proof (state)\nthis:\n  (\\<gg> ?i ?j (\\<mu> ?j) = \\<mu> ?i) = (\\<mu> ?j = \\<mu> ?i)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have 18: \"less_sets (\\<AA> m (\\<mu> m)) (\\<AA> n (\\<mu> n)) \\<longleftrightarrow> \\<mu> m < \\<mu> n\" for m n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)", "proof (cases n m rule: linorder_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. n < m \\<Longrightarrow>\n    (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)\n 2. n = m \\<Longrightarrow>\n    (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)\n 3. m < n \\<Longrightarrow>\n    (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)", "case less"], ["proof (state)\nthis:\n  n < m\n\ngoal (3 subgoals):\n 1. n < m \\<Longrightarrow>\n    (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)\n 2. n = m \\<Longrightarrow>\n    (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)\n 3. m < n \\<Longrightarrow>\n    (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)", "proof (intro iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n) \\<Longrightarrow>\n    \\<mu> m < \\<mu> n\n 2. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "assume \"less_sets (\\<AA> m (\\<mu> m)) (\\<AA> n (\\<mu> n))\""], ["proof (state)\nthis:\n  \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal (2 subgoals):\n 1. \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n) \\<Longrightarrow>\n    \\<mu> m < \\<mu> n\n 2. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "moreover"], ["proof (state)\nthis:\n  \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal (2 subgoals):\n 1. \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n) \\<Longrightarrow>\n    \\<mu> m < \\<mu> n\n 2. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "have \"\\<not> less_sets (\\<AA> m (\\<mu> m)) (\\<AA> n (\\<mu> n))\" if \"\\<mu> n = \\<mu> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "by (metis \"*\" \"15\" eq less less_V_def less_sets_def less_sets_weaken2 that)"], ["proof (state)\nthis:\n  \\<mu> n = \\<mu> m \\<Longrightarrow>\n  \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal (2 subgoals):\n 1. \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n) \\<Longrightarrow>\n    \\<mu> m < \\<mu> n\n 2. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "moreover"], ["proof (state)\nthis:\n  \\<mu> n = \\<mu> m \\<Longrightarrow>\n  \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal (2 subgoals):\n 1. \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n) \\<Longrightarrow>\n    \\<mu> m < \\<mu> n\n 2. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "have \"\\<not> less_sets (\\<AA> m (\\<mu> m)) (\\<AA> n (\\<mu> n))\" if \"\\<mu> n < \\<mu> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "using that 12 15 * [OF less]"], ["proof (prove)\nusing this:\n  \\<mu> n < \\<mu> m\n  strict_mono_sets (elts \\<beta>) (\\<AA> ?n)\n  x ?n \\<in> \\<AA> ?n (\\<mu> ?n)\n  \\<AA> m (\\<mu> m) \\<subseteq> \\<AA> n (\\<gg> n m (\\<mu> m))\n\ngoal (1 subgoal):\n 1. \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "apply (clarsimp simp: less_sets_def strict_mono_sets_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<mu> n < \\<mu> m;\n     \\<And>n.\n        \\<forall>x\\<in>elts \\<beta>.\n           \\<forall>y\\<in>elts \\<beta>.\n              x < y \\<longrightarrow>\n              (\\<forall>x\\<in>\\<AA> n x. \\<forall>y\\<in>\\<AA> n y. x < y);\n     \\<And>n. x n \\<in> \\<AA> n (\\<mu> n);\n     \\<AA> m (\\<mu> m) \\<subseteq> \\<AA> n (\\<gg> n m (\\<mu> m))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>\\<AA> m (\\<mu> m).\n                         \\<exists>xa\\<in>\\<AA> n (\\<mu> n). \\<not> x < xa", "by (metis Ord_in_Ord Ord_linear2 \\<gg>_in_\\<beta> \\<mu>_in_\\<beta> \\<open>Ord \\<beta>\\<close> le leD less_asym subsetD)"], ["proof (state)\nthis:\n  \\<mu> n < \\<mu> m \\<Longrightarrow>\n  \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal (2 subgoals):\n 1. \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n) \\<Longrightarrow>\n    \\<mu> m < \\<mu> n\n 2. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "ultimately"], ["proof (chain)\npicking this:\n  \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n  \\<mu> n = \\<mu> m \\<Longrightarrow>\n  \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n  \\<mu> n < \\<mu> m \\<Longrightarrow>\n  \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "show \"\\<mu> m < \\<mu> n\""], ["proof (prove)\nusing this:\n  \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n  \\<mu> n = \\<mu> m \\<Longrightarrow>\n  \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n  \\<mu> n < \\<mu> m \\<Longrightarrow>\n  \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal (1 subgoal):\n 1. \\<mu> m < \\<mu> n", "by (meson Ord_in_Ord Ord_linear_lt \\<mu>_in_\\<beta> \\<open>Ord \\<beta>\\<close>)"], ["proof (state)\nthis:\n  \\<mu> m < \\<mu> n\n\ngoal (1 subgoal):\n 1. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "assume \"\\<mu> m < \\<mu> n\""], ["proof (state)\nthis:\n  \\<mu> m < \\<mu> n\n\ngoal (1 subgoal):\n 1. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "then"], ["proof (chain)\npicking this:\n  \\<mu> m < \\<mu> n", "have \"less_sets (\\<AA> n (\\<gg> n m (\\<mu> m))) (\\<AA> n (\\<mu> n))\""], ["proof (prove)\nusing this:\n  \\<mu> m < \\<mu> n\n\ngoal (1 subgoal):\n 1. \\<AA> n (\\<gg> n m (\\<mu> m)) \\<lless> \\<AA> n (\\<mu> n)", "by (metis \"12\" \\<gg>_in_\\<beta> \\<mu>_in_\\<beta> eq le less_V_def strict_mono_sets_def)"], ["proof (state)\nthis:\n  \\<AA> n (\\<gg> n m (\\<mu> m)) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal (1 subgoal):\n 1. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "then"], ["proof (chain)\npicking this:\n  \\<AA> n (\\<gg> n m (\\<mu> m)) \\<lless> \\<AA> n (\\<mu> n)", "show \"less_sets (\\<AA> m (\\<mu> m)) (\\<AA> n (\\<mu> n))\""], ["proof (prove)\nusing this:\n  \\<AA> n (\\<gg> n m (\\<mu> m)) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal (1 subgoal):\n 1. \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "by (meson *[OF less] less_sets_weaken1)"], ["proof (state)\nthis:\n  \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)\n\ngoal (2 subgoals):\n 1. n = m \\<Longrightarrow>\n    (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)\n 2. m < n \\<Longrightarrow>\n    (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. n = m \\<Longrightarrow>\n    (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)\n 2. m < n \\<Longrightarrow>\n    (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)", "case equal"], ["proof (state)\nthis:\n  n = m\n\ngoal (2 subgoals):\n 1. n = m \\<Longrightarrow>\n    (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)\n 2. m < n \\<Longrightarrow>\n    (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)", "with 15"], ["proof (chain)\npicking this:\n  x ?n \\<in> \\<AA> ?n (\\<mu> ?n)\n  n = m", "show ?thesis"], ["proof (prove)\nusing this:\n  x ?n \\<in> \\<AA> ?n (\\<mu> ?n)\n  n = m\n\ngoal (1 subgoal):\n 1. (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)", "by auto"], ["proof (state)\nthis:\n  (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)\n\ngoal (1 subgoal):\n 1. m < n \\<Longrightarrow>\n    (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. m < n \\<Longrightarrow>\n    (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)", "case greater"], ["proof (state)\nthis:\n  m < n\n\ngoal (1 subgoal):\n 1. m < n \\<Longrightarrow>\n    (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)", "proof (intro iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n) \\<Longrightarrow>\n    \\<mu> m < \\<mu> n\n 2. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "assume \"less_sets (\\<AA> m (\\<mu> m)) (\\<AA> n (\\<mu> n))\""], ["proof (state)\nthis:\n  \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal (2 subgoals):\n 1. \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n) \\<Longrightarrow>\n    \\<mu> m < \\<mu> n\n 2. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "moreover"], ["proof (state)\nthis:\n  \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal (2 subgoals):\n 1. \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n) \\<Longrightarrow>\n    \\<mu> m < \\<mu> n\n 2. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "have \"\\<not> less_sets (\\<AA> m (\\<mu> m)) (\\<AA> n (\\<mu> n))\" if \"\\<mu> n = \\<mu> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "by (metis \"*\" \"15\" disjnt_iff eq greater in_mono less_sets_imp_disjnt that)"], ["proof (state)\nthis:\n  \\<mu> n = \\<mu> m \\<Longrightarrow>\n  \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal (2 subgoals):\n 1. \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n) \\<Longrightarrow>\n    \\<mu> m < \\<mu> n\n 2. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "moreover"], ["proof (state)\nthis:\n  \\<mu> n = \\<mu> m \\<Longrightarrow>\n  \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal (2 subgoals):\n 1. \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n) \\<Longrightarrow>\n    \\<mu> m < \\<mu> n\n 2. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "have \"\\<not> less_sets (\\<AA> m (\\<mu> m)) (\\<AA> n (\\<mu> n))\" if \"\\<mu> n < \\<mu> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "using that 12 15 * [OF greater]"], ["proof (prove)\nusing this:\n  \\<mu> n < \\<mu> m\n  strict_mono_sets (elts \\<beta>) (\\<AA> ?n)\n  x ?n \\<in> \\<AA> ?n (\\<mu> ?n)\n  \\<AA> n (\\<mu> n) \\<subseteq> \\<AA> m (\\<gg> m n (\\<mu> n))\n\ngoal (1 subgoal):\n 1. \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "apply (clarsimp simp: less_sets_def strict_mono_sets_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<mu> n < \\<mu> m;\n     \\<And>n.\n        \\<forall>x\\<in>elts \\<beta>.\n           \\<forall>y\\<in>elts \\<beta>.\n              x < y \\<longrightarrow>\n              (\\<forall>x\\<in>\\<AA> n x. \\<forall>y\\<in>\\<AA> n y. x < y);\n     \\<And>n. x n \\<in> \\<AA> n (\\<mu> n);\n     \\<AA> n (\\<mu> n) \\<subseteq> \\<AA> m (\\<gg> m n (\\<mu> n))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>\\<AA> m (\\<mu> m).\n                         \\<exists>xa\\<in>\\<AA> n (\\<mu> n). \\<not> x < xa", "by (meson \\<gg>_in_\\<beta> \\<mu>_in_\\<beta> in_mono less less_asym)"], ["proof (state)\nthis:\n  \\<mu> n < \\<mu> m \\<Longrightarrow>\n  \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal (2 subgoals):\n 1. \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n) \\<Longrightarrow>\n    \\<mu> m < \\<mu> n\n 2. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "ultimately"], ["proof (chain)\npicking this:\n  \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n  \\<mu> n = \\<mu> m \\<Longrightarrow>\n  \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n  \\<mu> n < \\<mu> m \\<Longrightarrow>\n  \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "show \"\\<mu> m < \\<mu> n\""], ["proof (prove)\nusing this:\n  \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n  \\<mu> n = \\<mu> m \\<Longrightarrow>\n  \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n  \\<mu> n < \\<mu> m \\<Longrightarrow>\n  \\<not> \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal (1 subgoal):\n 1. \\<mu> m < \\<mu> n", "by (meson Ord_\\<mu> Ord_linear_lt)"], ["proof (state)\nthis:\n  \\<mu> m < \\<mu> n\n\ngoal (1 subgoal):\n 1. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "assume \"\\<mu> m < \\<mu> n\""], ["proof (state)\nthis:\n  \\<mu> m < \\<mu> n\n\ngoal (1 subgoal):\n 1. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "then"], ["proof (chain)\npicking this:\n  \\<mu> m < \\<mu> n", "have \"less_sets (\\<AA> m (\\<mu> m)) (\\<AA> m (\\<gg> m n (\\<mu> n)))\""], ["proof (prove)\nusing this:\n  \\<mu> m < \\<mu> n\n\ngoal (1 subgoal):\n 1. \\<AA> m (\\<mu> m) \\<lless> \\<AA> m (\\<gg> m n (\\<mu> n))", "by (meson 12 Ord_in_Ord Ord_linear2 \\<gg>_in_\\<beta> \\<mu>_in_\\<beta> le leD ord(2) strict_mono_sets_def)"], ["proof (state)\nthis:\n  \\<AA> m (\\<mu> m) \\<lless> \\<AA> m (\\<gg> m n (\\<mu> n))\n\ngoal (1 subgoal):\n 1. \\<mu> m < \\<mu> n \\<Longrightarrow>\n    \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "then"], ["proof (chain)\npicking this:\n  \\<AA> m (\\<mu> m) \\<lless> \\<AA> m (\\<gg> m n (\\<mu> n))", "show \"less_sets (\\<AA> m (\\<mu> m)) (\\<AA> n (\\<mu> n))\""], ["proof (prove)\nusing this:\n  \\<AA> m (\\<mu> m) \\<lless> \\<AA> m (\\<gg> m n (\\<mu> n))\n\ngoal (1 subgoal):\n 1. \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)", "by (meson \"*\" greater less_sets_weaken2)"], ["proof (state)\nthis:\n  \\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<AA> m (\\<mu> m) \\<lless> \\<AA> n (\\<mu> n)) = (\\<mu> m < \\<mu> n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<AA> ?m (\\<mu> ?m) \\<lless> \\<AA> ?n (\\<mu> ?n)) = (\\<mu> ?m < \\<mu> ?n)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have \\<AA>_increasing_\\<mu>: \"\\<AA> n (\\<mu> n) \\<subseteq> \\<AA> m (\\<mu> m)\" if \"m \\<le> n\" \"\\<mu> m = \\<mu> n\" for m n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA> n (\\<mu> n) \\<subseteq> \\<AA> m (\\<mu> m)", "by (metis \"*\" \"17\" dual_order.order_iff_strict that)"], ["proof (state)\nthis:\n  \\<lbrakk>?m \\<le> ?n; \\<mu> ?m = \\<mu> ?n\\<rbrakk>\n  \\<Longrightarrow> \\<AA> ?n (\\<mu> ?n) \\<subseteq> \\<AA> ?m (\\<mu> ?m)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>?m \\<le> ?n; \\<mu> ?m = \\<mu> ?n\\<rbrakk>\n  \\<Longrightarrow> \\<AA> ?n (\\<mu> ?n) \\<subseteq> \\<AA> ?m (\\<mu> ?m)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have INF: \"infinite {n. n \\<ge> m \\<and> \\<mu> m = \\<mu> n}\" for m"], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}", "have \"infinite (range (\\<lambda>n. q (\\<mu> m, n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (range (\\<lambda>n. q (\\<mu> m, n)))", "unfolding q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite\n     (range\n       (\\<lambda>n. to_nat_on (elts \\<beta> \\<times> UNIV) (\\<mu> m, n)))", "using to_nat_on_infinite [OF co_\\<beta>U inf_\\<beta>U] finite_image_iff"], ["proof (prove)\nusing this:\n  bij_betw (to_nat_on (elts \\<beta> \\<times> UNIV))\n   (elts \\<beta> \\<times> UNIV) UNIV\n  inj_on ?f ?A \\<Longrightarrow> finite (?f ` ?A) = finite ?A\n\ngoal (1 subgoal):\n 1. infinite\n     (range\n       (\\<lambda>n. to_nat_on (elts \\<beta> \\<times> UNIV) (\\<mu> m, n)))", "by (simp add: finite_image_iff inj_on_def)"], ["proof (state)\nthis:\n  infinite (range (\\<lambda>n. q (\\<mu> m, n)))\n\ngoal (1 subgoal):\n 1. infinite {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}", "moreover"], ["proof (state)\nthis:\n  infinite (range (\\<lambda>n. q (\\<mu> m, n)))\n\ngoal (1 subgoal):\n 1. infinite {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}", "have \"(range (\\<lambda>n. q (\\<mu> m, n))) \\<subseteq> {n. \\<mu> m = \\<mu> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (\\<lambda>n. q (\\<mu> m, n)) \\<subseteq> {n. \\<mu> m = \\<mu> n}", "using 11 [of \"\\<mu> m\"]"], ["proof (prove)\nusing this:\n  \\<mu> m \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<mu> (q (\\<mu> m, ?n)) = \\<mu> m\n\ngoal (1 subgoal):\n 1. range (\\<lambda>n. q (\\<mu> m, n)) \\<subseteq> {n. \\<mu> m = \\<mu> n}", "by auto"], ["proof (state)\nthis:\n  range (\\<lambda>n. q (\\<mu> m, n)) \\<subseteq> {n. \\<mu> m = \\<mu> n}\n\ngoal (1 subgoal):\n 1. infinite {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}", "ultimately"], ["proof (chain)\npicking this:\n  infinite (range (\\<lambda>n. q (\\<mu> m, n)))\n  range (\\<lambda>n. q (\\<mu> m, n)) \\<subseteq> {n. \\<mu> m = \\<mu> n}", "have \"infinite {n. \\<mu> m = \\<mu> n}\""], ["proof (prove)\nusing this:\n  infinite (range (\\<lambda>n. q (\\<mu> m, n)))\n  range (\\<lambda>n. q (\\<mu> m, n)) \\<subseteq> {n. \\<mu> m = \\<mu> n}\n\ngoal (1 subgoal):\n 1. infinite {n. \\<mu> m = \\<mu> n}", "using finite_subset"], ["proof (prove)\nusing this:\n  infinite (range (\\<lambda>n. q (\\<mu> m, n)))\n  range (\\<lambda>n. q (\\<mu> m, n)) \\<subseteq> {n. \\<mu> m = \\<mu> n}\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. infinite {n. \\<mu> m = \\<mu> n}", "by auto"], ["proof (state)\nthis:\n  infinite {n. \\<mu> m = \\<mu> n}\n\ngoal (1 subgoal):\n 1. infinite {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}", "then"], ["proof (chain)\npicking this:\n  infinite {n. \\<mu> m = \\<mu> n}", "have \"infinite ({n. \\<mu> m = \\<mu> n} - {..<m})\""], ["proof (prove)\nusing this:\n  infinite {n. \\<mu> m = \\<mu> n}\n\ngoal (1 subgoal):\n 1. infinite ({n. \\<mu> m = \\<mu> n} - {..<m})", "by simp"], ["proof (state)\nthis:\n  infinite ({n. \\<mu> m = \\<mu> n} - {..<m})\n\ngoal (1 subgoal):\n 1. infinite {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}", "then"], ["proof (chain)\npicking this:\n  infinite ({n. \\<mu> m = \\<mu> n} - {..<m})", "show ?thesis"], ["proof (prove)\nusing this:\n  infinite ({n. \\<mu> m = \\<mu> n} - {..<m})\n\ngoal (1 subgoal):\n 1. infinite {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}", "by (auto simp: finite_nat_set_iff_bounded Bex_def not_less)"], ["proof (state)\nthis:\n  infinite {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  infinite {n. ?m \\<le> n \\<and> \\<mu> ?m = \\<mu> n}\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "let ?eqv = \"\\<lambda>m. {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have sm_x: \"strict_mono_on x (?eqv m)\" for m"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono_on x {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}", "proof (clarsimp simp: strict_mono_on_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<lbrakk>m \\<le> r; \\<mu> s = \\<mu> r; \\<mu> m = \\<mu> r;\n        r < s\\<rbrakk>\n       \\<Longrightarrow> x r < x s", "fix n p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<lbrakk>m \\<le> r; \\<mu> s = \\<mu> r; \\<mu> m = \\<mu> r;\n        r < s\\<rbrakk>\n       \\<Longrightarrow> x r < x s", "assume \"m \\<le> n\" \"\\<mu> p = \\<mu> n\" \"\\<mu> m = \\<mu> n\" \"n < p\""], ["proof (state)\nthis:\n  m \\<le> n\n  \\<mu> p = \\<mu> n\n  \\<mu> m = \\<mu> n\n  n < p\n\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<lbrakk>m \\<le> r; \\<mu> s = \\<mu> r; \\<mu> m = \\<mu> r;\n        r < s\\<rbrakk>\n       \\<Longrightarrow> x r < x s", "with 16 [of n]"], ["proof (chain)\npicking this:\n  {x n} \\<lless> \\<AA> (Suc n) (\\<mu> n)\n  m \\<le> n\n  \\<mu> p = \\<mu> n\n  \\<mu> m = \\<mu> n\n  n < p", "show \"x n < x p\""], ["proof (prove)\nusing this:\n  {x n} \\<lless> \\<AA> (Suc n) (\\<mu> n)\n  m \\<le> n\n  \\<mu> p = \\<mu> n\n  \\<mu> m = \\<mu> n\n  n < p\n\ngoal (1 subgoal):\n 1. x n < x p", "by (simp add: less_sets_def) (metis \"*\" \"15\" \"17\" Suc_lessI le_SucI subsetD)"], ["proof (state)\nthis:\n  x n < x p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  strict_mono_on x {n. ?m \\<le> n \\<and> \\<mu> ?m = \\<mu> n}\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "then"], ["proof (chain)\npicking this:\n  strict_mono_on x {n. ?m \\<le> n \\<and> \\<mu> ?m = \\<mu> n}", "have inj_x: \"inj_on x (?eqv m)\" for m"], ["proof (prove)\nusing this:\n  strict_mono_on x {n. ?m \\<le> n \\<and> \\<mu> ?m = \\<mu> n}\n\ngoal (1 subgoal):\n 1. inj_on x {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}", "using strict_mono_on_imp_inj_on"], ["proof (prove)\nusing this:\n  strict_mono_on x {n. ?m \\<le> n \\<and> \\<mu> ?m = \\<mu> n}\n  strict_mono_on ?f ?A \\<Longrightarrow> inj_on ?f ?A\n\ngoal (1 subgoal):\n 1. inj_on x {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}", "by blast"], ["proof (state)\nthis:\n  inj_on x {n. ?m \\<le> n \\<and> \\<mu> ?m = \\<mu> n}\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "define ZA where \"ZA \\<equiv> \\<lambda>m. ?Z \\<inter> \\<AA> m (\\<mu> m)\""], ["proof (state)\nthis:\n  ZA \\<equiv> \\<lambda>m. range x \\<inter> \\<AA> m (\\<mu> m)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have small_ZA [simp]: \"small (ZA m)\" for m"], ["proof (prove)\ngoal (1 subgoal):\n 1. small (ZA m)", "by (metis ZA_def inf_le1 small_image_nat smaller_than_small)"], ["proof (state)\nthis:\n  small (ZA ?m)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have 19: \"tp (ZA m) \\<ge> \\<omega>\" for m"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega> \\<le> tp (ZA m)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<omega> \\<le> tp (ZA m)", "have \"x ` {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n} \\<subseteq> ZA m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ` {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n} \\<subseteq> ZA m", "unfolding ZA_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x ` {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}\n    \\<subseteq> range x \\<inter> \\<AA> m (\\<mu> m)", "using \"15\" \\<AA>_increasing_\\<mu>"], ["proof (prove)\nusing this:\n  x ?n \\<in> \\<AA> ?n (\\<mu> ?n)\n  \\<lbrakk>?m \\<le> ?n; \\<mu> ?m = \\<mu> ?n\\<rbrakk>\n  \\<Longrightarrow> \\<AA> ?n (\\<mu> ?n) \\<subseteq> \\<AA> ?m (\\<mu> ?m)\n\ngoal (1 subgoal):\n 1. x ` {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}\n    \\<subseteq> range x \\<inter> \\<AA> m (\\<mu> m)", "by blast"], ["proof (state)\nthis:\n  x ` {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n} \\<subseteq> ZA m\n\ngoal (1 subgoal):\n 1. \\<omega> \\<le> tp (ZA m)", "then"], ["proof (chain)\npicking this:\n  x ` {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n} \\<subseteq> ZA m", "have \"infinite (ZA m)\""], ["proof (prove)\nusing this:\n  x ` {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n} \\<subseteq> ZA m\n\ngoal (1 subgoal):\n 1. infinite (ZA m)", "using INF [of m] finite_image_iff [OF inj_x]"], ["proof (prove)\nusing this:\n  x ` {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n} \\<subseteq> ZA m\n  infinite {n. m \\<le> n \\<and> \\<mu> m = \\<mu> n}\n  finite (x ` {n. ?m1 \\<le> n \\<and> \\<mu> ?m1 = \\<mu> n}) =\n  finite {n. ?m1 \\<le> n \\<and> \\<mu> ?m1 = \\<mu> n}\n\ngoal (1 subgoal):\n 1. infinite (ZA m)", "by (meson finite_subset)"], ["proof (state)\nthis:\n  infinite (ZA m)\n\ngoal (1 subgoal):\n 1. \\<omega> \\<le> tp (ZA m)", "then"], ["proof (chain)\npicking this:\n  infinite (ZA m)", "show ?thesis"], ["proof (prove)\nusing this:\n  infinite (ZA m)\n\ngoal (1 subgoal):\n 1. \\<omega> \\<le> tp (ZA m)", "by (simp add: ordertype_infinite_ge_\\<omega>)"], ["proof (state)\nthis:\n  \\<omega> \\<le> tp (ZA m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<omega> \\<le> tp (ZA ?m)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have \"\\<exists>f \\<in> elts \\<omega> \\<rightarrow> ZA m. strict_mono_on f (elts \\<omega>)\" for m"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>elts \\<omega> \\<rightarrow> ZA m.\n       strict_mono_on f (elts \\<omega>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>elts \\<omega> \\<rightarrow> ZA m.\n       strict_mono_on f (elts \\<omega>)", "obtain Z where \"Z \\<subseteq> ZA m\" \"tp Z = \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Z.\n        \\<lbrakk>Z \\<subseteq> ZA m; tp Z = \\<omega>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson 19 Ord_\\<omega> le_ordertype_obtains_subset small_ZA)"], ["proof (state)\nthis:\n  Z \\<subseteq> ZA m\n  tp Z = \\<omega>\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>elts \\<omega> \\<rightarrow> ZA m.\n       strict_mono_on f (elts \\<omega>)", "moreover"], ["proof (state)\nthis:\n  Z \\<subseteq> ZA m\n  tp Z = \\<omega>\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>elts \\<omega> \\<rightarrow> ZA m.\n       strict_mono_on f (elts \\<omega>)", "have \"ZA m \\<subseteq> ON\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZA m \\<subseteq> ON", "using Ord_in_Ord \\<AA>_\\<alpha>\\<beta> \\<mu>_in_\\<beta>"], ["proof (prove)\nusing this:\n  \\<lbrakk>Ord ?k; ?m \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> Ord ?m\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<AA> ?n ?\\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  \\<mu> ?i \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. ZA m \\<subseteq> ON", "unfolding ZA_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>Ord ?k; ?m \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> Ord ?m\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<AA> ?n ?\\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  \\<mu> ?i \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. range x \\<inter> \\<AA> m (\\<mu> m) \\<subseteq> ON", "by blast"], ["proof (state)\nthis:\n  ZA m \\<subseteq> ON\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>elts \\<omega> \\<rightarrow> ZA m.\n       strict_mono_on f (elts \\<omega>)", "ultimately"], ["proof (chain)\npicking this:\n  Z \\<subseteq> ZA m\n  tp Z = \\<omega>\n  ZA m \\<subseteq> ON", "show ?thesis"], ["proof (prove)\nusing this:\n  Z \\<subseteq> ZA m\n  tp Z = \\<omega>\n  ZA m \\<subseteq> ON\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>elts \\<omega> \\<rightarrow> ZA m.\n       strict_mono_on f (elts \\<omega>)", "by (metis strict_mono_on_ordertype Pi_mono small_ZA smaller_than_small subset_iff)"], ["proof (state)\nthis:\n  \\<exists>f\\<in>elts \\<omega> \\<rightarrow> ZA m.\n     strict_mono_on f (elts \\<omega>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>f\\<in>elts \\<omega> \\<rightarrow> ZA ?m.\n     strict_mono_on f (elts \\<omega>)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "then"], ["proof (chain)\npicking this:\n  \\<exists>f\\<in>elts \\<omega> \\<rightarrow> ZA ?m.\n     strict_mono_on f (elts \\<omega>)", "obtain \\<phi> where \\<phi>: \"\\<And>m. \\<phi> m \\<in> elts \\<omega> \\<rightarrow> ZA m\"\n                         and sm_\\<phi>: \"\\<And>m. strict_mono_on (\\<phi> m) (elts \\<omega>)\""], ["proof (prove)\nusing this:\n  \\<exists>f\\<in>elts \\<omega> \\<rightarrow> ZA ?m.\n     strict_mono_on f (elts \\<omega>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        \\<lbrakk>\\<And>m. \\<phi> m \\<in> elts \\<omega> \\<rightarrow> ZA m;\n         \\<And>m. strict_mono_on (\\<phi> m) (elts \\<omega>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<phi> ?m \\<in> elts \\<omega> \\<rightarrow> ZA ?m\n  strict_mono_on (\\<phi> ?m) (elts \\<omega>)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have \"Ex(\\<lambda>(m,\\<nu>). \\<nu> \\<in> elts \\<beta> \\<and> \\<gamma> = \\<omega> * \\<nu> + ord_of_nat m)\" if \"\\<gamma> \\<in> elts (\\<omega> * \\<beta>)\" for \\<gamma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(m, \\<nu>).\n           \\<nu> \\<in> elts \\<beta> \\<and>\n           \\<gamma> = \\<omega> * \\<nu> + ord_of_nat m)", "using that"], ["proof (prove)\nusing this:\n  \\<gamma> \\<in> elts (\\<omega> * \\<beta>)\n\ngoal (1 subgoal):\n 1. Ex (\\<lambda>(m, \\<nu>).\n           \\<nu> \\<in> elts \\<beta> \\<and>\n           \\<gamma> = \\<omega> * \\<nu> + ord_of_nat m)", "by (auto simp: mult [of \\<omega> \\<beta>] lift_def elts_\\<omega>)"], ["proof (state)\nthis:\n  ?\\<gamma> \\<in> elts (\\<omega> * \\<beta>) \\<Longrightarrow>\n  Ex (\\<lambda>(m, \\<nu>).\n         \\<nu> \\<in> elts \\<beta> \\<and>\n         ?\\<gamma> = \\<omega> * \\<nu> + ord_of_nat m)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "then"], ["proof (chain)\npicking this:\n  ?\\<gamma> \\<in> elts (\\<omega> * \\<beta>) \\<Longrightarrow>\n  Ex (\\<lambda>(m, \\<nu>).\n         \\<nu> \\<in> elts \\<beta> \\<and>\n         ?\\<gamma> = \\<omega> * \\<nu> + ord_of_nat m)", "obtain split where split: \"\\<And>\\<gamma>. \\<gamma> \\<in> elts (\\<omega> * \\<beta>) \\<Longrightarrow>\n             (\\<lambda>(m,\\<nu>). \\<nu> \\<in> elts \\<beta> \\<and> \\<gamma> = \\<omega> * \\<nu> + ord_of_nat m)(split \\<gamma>)\""], ["proof (prove)\nusing this:\n  ?\\<gamma> \\<in> elts (\\<omega> * \\<beta>) \\<Longrightarrow>\n  Ex (\\<lambda>(m, \\<nu>).\n         \\<nu> \\<in> elts \\<beta> \\<and>\n         ?\\<gamma> = \\<omega> * \\<nu> + ord_of_nat m)\n\ngoal (1 subgoal):\n 1. (\\<And>split.\n        (\\<And>\\<gamma>.\n            \\<gamma> \\<in> elts (\\<omega> * \\<beta>) \\<Longrightarrow>\n            case split \\<gamma> of\n            (m, \\<nu>) \\<Rightarrow>\n              \\<nu> \\<in> elts \\<beta> \\<and>\n              \\<gamma> = \\<omega> * \\<nu> + ord_of_nat m) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by meson"], ["proof (state)\nthis:\n  ?\\<gamma> \\<in> elts (\\<omega> * \\<beta>) \\<Longrightarrow>\n  case split ?\\<gamma> of\n  (m, \\<nu>) \\<Rightarrow>\n    \\<nu> \\<in> elts \\<beta> \\<and>\n    ?\\<gamma> = \\<omega> * \\<nu> + ord_of_nat m\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have split_eq [simp]: \"split (\\<omega> * \\<nu> + ord_of_nat m) = (m,\\<nu>)\" if \"\\<nu> \\<in> elts \\<beta>\" for \\<nu> m"], ["proof (prove)\ngoal (1 subgoal):\n 1. split (\\<omega> * \\<nu> + ord_of_nat m) = (m, \\<nu>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. split (\\<omega> * \\<nu> + ord_of_nat m) = (m, \\<nu>)", "have [simp]: \"\\<omega> * \\<nu> + ord_of_nat m = \\<omega> * \\<xi> + ord_of_nat n \\<longleftrightarrow> \\<xi> = \\<nu> \\<and> n = m\" if \"\\<xi> \\<in> elts \\<beta>\" for \\<xi> n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<omega> * \\<nu> + ord_of_nat m = \\<omega> * \\<xi> + ord_of_nat n) =\n    (\\<xi> = \\<nu> \\<and> n = m)", "by (metis Ord_\\<omega> that Ord_mem_iff_less_TC mult_cancellation_lemma ord_of_nat_\\<omega> ord_of_nat_inject)"], ["proof (state)\nthis:\n  ?\\<xi> \\<in> elts \\<beta> \\<Longrightarrow>\n  (\\<omega> * \\<nu> + ord_of_nat m = \\<omega> * ?\\<xi> + ord_of_nat ?n) =\n  (?\\<xi> = \\<nu> \\<and> ?n = m)\n\ngoal (1 subgoal):\n 1. split (\\<omega> * \\<nu> + ord_of_nat m) = (m, \\<nu>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. split (\\<omega> * \\<nu> + ord_of_nat m) = (m, \\<nu>)", "using split [of \"\\<omega>*\\<nu> + m\"] that"], ["proof (prove)\nusing this:\n  \\<omega> * \\<nu> + ord_of_nat m\n  \\<in> elts (\\<omega> * \\<beta>) \\<Longrightarrow>\n  case split (\\<omega> * \\<nu> + ord_of_nat m) of\n  (ma, \\<nu>') \\<Rightarrow>\n    \\<nu>' \\<in> elts \\<beta> \\<and>\n    \\<omega> * \\<nu> + ord_of_nat m = \\<omega> * \\<nu>' + ord_of_nat ma\n  \\<nu> \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. split (\\<omega> * \\<nu> + ord_of_nat m) = (m, \\<nu>)", "by (auto simp: mult [of \\<omega> \\<beta>] lift_def cong: conj_cong)"], ["proof (state)\nthis:\n  split (\\<omega> * \\<nu> + ord_of_nat m) = (m, \\<nu>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  split (\\<omega> * ?\\<nu> + ord_of_nat ?m) = (?m, ?\\<nu>)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "define \\<pi> where \"\\<pi> \\<equiv> \\<lambda>\\<gamma>. (\\<lambda>(m,\\<nu>). \\<phi> (q(\\<nu>,0)) m)(split \\<gamma>)\""], ["proof (state)\nthis:\n  \\<pi> \\<equiv>\n  \\<lambda>\\<gamma>.\n     case case split \\<gamma> of (x, y) \\<Rightarrow> (ord_of_nat x, y) of\n     (m, \\<nu>) \\<Rightarrow> \\<phi> (q (\\<nu>, 0)) m\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have \\<pi>_Pi: \"\\<pi> \\<in> elts (\\<omega> * \\<beta>) \\<rightarrow> (\\<Union>m. ZA m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<in> elts (\\<omega> * \\<beta>) \\<rightarrow> \\<Union> (range ZA)", "using \\<phi>"], ["proof (prove)\nusing this:\n  \\<phi> ?m \\<in> elts \\<omega> \\<rightarrow> ZA ?m\n\ngoal (1 subgoal):\n 1. \\<pi> \\<in> elts (\\<omega> * \\<beta>) \\<rightarrow> \\<Union> (range ZA)", "by (fastforce simp: \\<pi>_def mult [of \\<omega> \\<beta>] lift_def elts_\\<omega>)"], ["proof (state)\nthis:\n  \\<pi> \\<in> elts (\\<omega> * \\<beta>) \\<rightarrow> \\<Union> (range ZA)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "moreover"], ["proof (state)\nthis:\n  \\<pi> \\<in> elts (\\<omega> * \\<beta>) \\<rightarrow> \\<Union> (range ZA)\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have \"(\\<Union>m. ZA m) \\<subseteq> ON\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (range ZA) \\<subseteq> ON", "unfolding ZA_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>m. range x \\<inter> \\<AA> m (\\<mu> m)) \\<subseteq> ON", "using \\<AA>_\\<alpha>\\<beta> \\<mu>_in_\\<beta> elts_subset_ON"], ["proof (prove)\nusing this:\n  ?\\<nu> \\<in> elts \\<beta> \\<Longrightarrow>\n  \\<AA> ?n ?\\<nu> \\<subseteq> elts (\\<alpha> * \\<beta>)\n  \\<mu> ?i \\<in> elts \\<beta>\n  Ord ?\\<alpha> \\<Longrightarrow> elts ?\\<alpha> \\<subseteq> ON\n\ngoal (1 subgoal):\n 1. (\\<Union>m. range x \\<inter> \\<AA> m (\\<mu> m)) \\<subseteq> ON", "by blast"], ["proof (state)\nthis:\n  \\<Union> (range ZA) \\<subseteq> ON\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>?m \\<le> ?n; \\<mu> ?m = \\<mu> ?n\\<rbrakk>\n  \\<Longrightarrow> \\<AA> ?n (\\<mu> ?n) \\<subseteq> \\<AA> ?m (\\<mu> ?m)\n  \\<pi> \\<in> elts (\\<omega> * \\<beta>) \\<rightarrow> \\<Union> (range ZA)\n  \\<Union> (range ZA) \\<subseteq> ON", "have Ord_\\<pi>_Pi: \"\\<pi> \\<in> elts (\\<omega> * \\<beta>) \\<rightarrow> ON\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?m \\<le> ?n; \\<mu> ?m = \\<mu> ?n\\<rbrakk>\n  \\<Longrightarrow> \\<AA> ?n (\\<mu> ?n) \\<subseteq> \\<AA> ?m (\\<mu> ?m)\n  \\<pi> \\<in> elts (\\<omega> * \\<beta>) \\<rightarrow> \\<Union> (range ZA)\n  \\<Union> (range ZA) \\<subseteq> ON\n\ngoal (1 subgoal):\n 1. \\<pi> \\<in> elts (\\<omega> * \\<beta>) \\<rightarrow> ON", "by fastforce"], ["proof (state)\nthis:\n  \\<pi> \\<in> elts (\\<omega> * \\<beta>) \\<rightarrow> ON\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "show \"tp ?Z \\<ge> \\<omega> * \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have \\<dagger>: \"(\\<Union>m. ZA m) = ?Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (range ZA) = range x", "using \"15\""], ["proof (prove)\nusing this:\n  x ?n \\<in> \\<AA> ?n (\\<mu> ?n)\n\ngoal (1 subgoal):\n 1. \\<Union> (range ZA) = range x", "by (force simp: ZA_def)"], ["proof (state)\nthis:\n  \\<Union> (range ZA) = range x\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "moreover"], ["proof (state)\nthis:\n  \\<Union> (range ZA) = range x\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "have \"tp (elts (\\<omega> * \\<beta>)) \\<le> tp (\\<Union>m. ZA m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tp (elts (\\<omega> * \\<beta>)) \\<le> tp (\\<Union> (range ZA))", "proof (rule ordertype_inc_le)"], ["proof (state)\ngoal (8 subgoals):\n 1. small (elts (\\<omega> * \\<beta>))\n 2. small (\\<Union> (range ZA))\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> elts (\\<omega> * \\<beta>);\n        y \\<in> elts (\\<omega> * \\<beta>); (x, y) \\<in> VWF\\<rbrakk>\n       \\<Longrightarrow> (?\\<pi> x, ?\\<pi> y) \\<in> VWF\n 4. wf VWF\n 5. total_on (elts (\\<omega> * \\<beta>)) VWF\n 6. wf VWF\n 7. trans VWF\n 8. ?\\<pi> ` elts (\\<omega> * \\<beta>) \\<subseteq> \\<Union> (range ZA)", "show \"\\<pi> ` elts (\\<omega> * \\<beta>) \\<subseteq> (\\<Union>m. ZA m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> ` elts (\\<omega> * \\<beta>) \\<subseteq> \\<Union> (range ZA)", "using \\<pi>_Pi"], ["proof (prove)\nusing this:\n  \\<pi> \\<in> elts (\\<omega> * \\<beta>) \\<rightarrow> \\<Union> (range ZA)\n\ngoal (1 subgoal):\n 1. \\<pi> ` elts (\\<omega> * \\<beta>) \\<subseteq> \\<Union> (range ZA)", "by blast"], ["proof (state)\nthis:\n  \\<pi> ` elts (\\<omega> * \\<beta>) \\<subseteq> \\<Union> (range ZA)\n\ngoal (7 subgoals):\n 1. small (elts (\\<omega> * \\<beta>))\n 2. small (\\<Union> (range ZA))\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> elts (\\<omega> * \\<beta>);\n        y \\<in> elts (\\<omega> * \\<beta>); (x, y) \\<in> VWF\\<rbrakk>\n       \\<Longrightarrow> (\\<pi> x, \\<pi> y) \\<in> VWF\n 4. wf VWF\n 5. total_on (elts (\\<omega> * \\<beta>)) VWF\n 6. wf VWF\n 7. trans VWF", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. small (elts (\\<omega> * \\<beta>))\n 2. small (\\<Union> (range ZA))\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> elts (\\<omega> * \\<beta>);\n        y \\<in> elts (\\<omega> * \\<beta>); (x, y) \\<in> VWF\\<rbrakk>\n       \\<Longrightarrow> (\\<pi> x, \\<pi> y) \\<in> VWF\n 4. wf VWF\n 5. total_on (elts (\\<omega> * \\<beta>)) VWF\n 6. wf VWF\n 7. trans VWF", "fix u v"], ["proof (state)\ngoal (7 subgoals):\n 1. small (elts (\\<omega> * \\<beta>))\n 2. small (\\<Union> (range ZA))\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> elts (\\<omega> * \\<beta>);\n        y \\<in> elts (\\<omega> * \\<beta>); (x, y) \\<in> VWF\\<rbrakk>\n       \\<Longrightarrow> (\\<pi> x, \\<pi> y) \\<in> VWF\n 4. wf VWF\n 5. total_on (elts (\\<omega> * \\<beta>)) VWF\n 6. wf VWF\n 7. trans VWF", "assume x: \"u \\<in> elts (\\<omega> * \\<beta>)\" and y: \"v \\<in> elts (\\<omega> * \\<beta>)\" and \"(u,v) \\<in> VWF\""], ["proof (state)\nthis:\n  u \\<in> elts (\\<omega> * \\<beta>)\n  v \\<in> elts (\\<omega> * \\<beta>)\n  (u, v) \\<in> VWF\n\ngoal (7 subgoals):\n 1. small (elts (\\<omega> * \\<beta>))\n 2. small (\\<Union> (range ZA))\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> elts (\\<omega> * \\<beta>);\n        y \\<in> elts (\\<omega> * \\<beta>); (x, y) \\<in> VWF\\<rbrakk>\n       \\<Longrightarrow> (\\<pi> x, \\<pi> y) \\<in> VWF\n 4. wf VWF\n 5. total_on (elts (\\<omega> * \\<beta>)) VWF\n 6. wf VWF\n 7. trans VWF", "then"], ["proof (chain)\npicking this:\n  u \\<in> elts (\\<omega> * \\<beta>)\n  v \\<in> elts (\\<omega> * \\<beta>)\n  (u, v) \\<in> VWF", "have \"u<v\""], ["proof (prove)\nusing this:\n  u \\<in> elts (\\<omega> * \\<beta>)\n  v \\<in> elts (\\<omega> * \\<beta>)\n  (u, v) \\<in> VWF\n\ngoal (1 subgoal):\n 1. u < v", "by (meson Ord_\\<omega> Ord_in_Ord Ord_mult VWF_iff_Ord_less ord(2))"], ["proof (state)\nthis:\n  u < v\n\ngoal (7 subgoals):\n 1. small (elts (\\<omega> * \\<beta>))\n 2. small (\\<Union> (range ZA))\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> elts (\\<omega> * \\<beta>);\n        y \\<in> elts (\\<omega> * \\<beta>); (x, y) \\<in> VWF\\<rbrakk>\n       \\<Longrightarrow> (\\<pi> x, \\<pi> y) \\<in> VWF\n 4. wf VWF\n 5. total_on (elts (\\<omega> * \\<beta>)) VWF\n 6. wf VWF\n 7. trans VWF", "moreover"], ["proof (state)\nthis:\n  u < v\n\ngoal (7 subgoals):\n 1. small (elts (\\<omega> * \\<beta>))\n 2. small (\\<Union> (range ZA))\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> elts (\\<omega> * \\<beta>);\n        y \\<in> elts (\\<omega> * \\<beta>); (x, y) \\<in> VWF\\<rbrakk>\n       \\<Longrightarrow> (\\<pi> x, \\<pi> y) \\<in> VWF\n 4. wf VWF\n 5. total_on (elts (\\<omega> * \\<beta>)) VWF\n 6. wf VWF\n 7. trans VWF", "obtain m \\<nu> n \\<xi> where ueq: \"u = \\<omega> * \\<nu> + ord_of_nat m\" and \\<nu>: \"\\<nu> \\<in> elts \\<beta>\"\n                             and veq: \"v = \\<omega> * \\<xi> + ord_of_nat n\" and \\<xi>: \"\\<xi> \\<in> elts \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<nu> m \\<xi> n.\n        \\<lbrakk>u = \\<omega> * \\<nu> + ord_of_nat m;\n         \\<nu> \\<in> elts \\<beta>; v = \\<omega> * \\<xi> + ord_of_nat n;\n         \\<xi> \\<in> elts \\<beta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using x y"], ["proof (prove)\nusing this:\n  u \\<in> elts (\\<omega> * \\<beta>)\n  v \\<in> elts (\\<omega> * \\<beta>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<nu> m \\<xi> n.\n        \\<lbrakk>u = \\<omega> * \\<nu> + ord_of_nat m;\n         \\<nu> \\<in> elts \\<beta>; v = \\<omega> * \\<xi> + ord_of_nat n;\n         \\<xi> \\<in> elts \\<beta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp:  mult [of \\<omega> \\<beta>] lift_def elts_\\<omega>)"], ["proof (state)\nthis:\n  u = \\<omega> * \\<nu> + ord_of_nat m\n  \\<nu> \\<in> elts \\<beta>\n  v = \\<omega> * \\<xi> + ord_of_nat n\n  \\<xi> \\<in> elts \\<beta>\n\ngoal (7 subgoals):\n 1. small (elts (\\<omega> * \\<beta>))\n 2. small (\\<Union> (range ZA))\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> elts (\\<omega> * \\<beta>);\n        y \\<in> elts (\\<omega> * \\<beta>); (x, y) \\<in> VWF\\<rbrakk>\n       \\<Longrightarrow> (\\<pi> x, \\<pi> y) \\<in> VWF\n 4. wf VWF\n 5. total_on (elts (\\<omega> * \\<beta>)) VWF\n 6. wf VWF\n 7. trans VWF", "ultimately"], ["proof (chain)\npicking this:\n  u < v\n  u = \\<omega> * \\<nu> + ord_of_nat m\n  \\<nu> \\<in> elts \\<beta>\n  v = \\<omega> * \\<xi> + ord_of_nat n\n  \\<xi> \\<in> elts \\<beta>", "have \"\\<nu> \\<le> \\<xi>\""], ["proof (prove)\nusing this:\n  u < v\n  u = \\<omega> * \\<nu> + ord_of_nat m\n  \\<nu> \\<in> elts \\<beta>\n  v = \\<omega> * \\<xi> + ord_of_nat n\n  \\<xi> \\<in> elts \\<beta>\n\ngoal (1 subgoal):\n 1. \\<nu> \\<le> \\<xi>", "by (meson Ord_\\<omega> Ord_in_Ord Ord_linear2 \\<open>Ord \\<beta>\\<close> add_mult_less_add_mult less_asym ord_of_nat_\\<omega>)"], ["proof (state)\nthis:\n  \\<nu> \\<le> \\<xi>\n\ngoal (7 subgoals):\n 1. small (elts (\\<omega> * \\<beta>))\n 2. small (\\<Union> (range ZA))\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> elts (\\<omega> * \\<beta>);\n        y \\<in> elts (\\<omega> * \\<beta>); (x, y) \\<in> VWF\\<rbrakk>\n       \\<Longrightarrow> (\\<pi> x, \\<pi> y) \\<in> VWF\n 4. wf VWF\n 5. total_on (elts (\\<omega> * \\<beta>)) VWF\n 6. wf VWF\n 7. trans VWF", "consider (eq) \"\\<nu> = \\<xi>\" | (lt) \"\\<nu> < \\<xi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nu> = \\<xi> \\<Longrightarrow> thesis;\n     \\<nu> < \\<xi> \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using \\<open>\\<nu> \\<le> \\<xi>\\<close> le_neq_trans"], ["proof (prove)\nusing this:\n  \\<nu> \\<le> \\<xi>\n  \\<lbrakk>?a \\<le> ?b; ?a \\<noteq> ?b\\<rbrakk> \\<Longrightarrow> ?a < ?b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<nu> = \\<xi> \\<Longrightarrow> thesis;\n     \\<nu> < \\<xi> \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>\\<nu> = \\<xi> \\<Longrightarrow> ?thesis;\n   \\<nu> < \\<xi> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (7 subgoals):\n 1. small (elts (\\<omega> * \\<beta>))\n 2. small (\\<Union> (range ZA))\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> elts (\\<omega> * \\<beta>);\n        y \\<in> elts (\\<omega> * \\<beta>); (x, y) \\<in> VWF\\<rbrakk>\n       \\<Longrightarrow> (\\<pi> x, \\<pi> y) \\<in> VWF\n 4. wf VWF\n 5. total_on (elts (\\<omega> * \\<beta>)) VWF\n 6. wf VWF\n 7. trans VWF", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<nu> = \\<xi> \\<Longrightarrow> ?thesis;\n   \\<nu> < \\<xi> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "have \"\\<pi> u < \\<pi> v\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<nu> = \\<xi> \\<Longrightarrow> ?thesis;\n   \\<nu> < \\<xi> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<pi> u < \\<pi> v", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<nu> = \\<xi> \\<Longrightarrow> \\<pi> u < \\<pi> v\n 2. \\<nu> < \\<xi> \\<Longrightarrow> \\<pi> u < \\<pi> v", "case eq"], ["proof (state)\nthis:\n  \\<nu> = \\<xi>\n\ngoal (2 subgoals):\n 1. \\<nu> = \\<xi> \\<Longrightarrow> \\<pi> u < \\<pi> v\n 2. \\<nu> < \\<xi> \\<Longrightarrow> \\<pi> u < \\<pi> v", "then"], ["proof (chain)\npicking this:\n  \\<nu> = \\<xi>", "have \"m < n\""], ["proof (prove)\nusing this:\n  \\<nu> = \\<xi>\n\ngoal (1 subgoal):\n 1. m < n", "using ueq veq \\<open>u<v\\<close>"], ["proof (prove)\nusing this:\n  \\<nu> = \\<xi>\n  u = \\<omega> * \\<nu> + ord_of_nat m\n  v = \\<omega> * \\<xi> + ord_of_nat n\n  u < v\n\ngoal (1 subgoal):\n 1. m < n", "by simp"], ["proof (state)\nthis:\n  m < n\n\ngoal (2 subgoals):\n 1. \\<nu> = \\<xi> \\<Longrightarrow> \\<pi> u < \\<pi> v\n 2. \\<nu> < \\<xi> \\<Longrightarrow> \\<pi> u < \\<pi> v", "then"], ["proof (chain)\npicking this:\n  m < n", "have \"\\<phi> (q (\\<xi>, 0)) m < \\<phi> (q (\\<xi>, 0)) n\""], ["proof (prove)\nusing this:\n  m < n\n\ngoal (1 subgoal):\n 1. \\<phi> (q (\\<xi>, 0)) (ord_of_nat m)\n    < \\<phi> (q (\\<xi>, 0)) (ord_of_nat n)", "using sm_\\<phi> strict_mono_onD"], ["proof (prove)\nusing this:\n  m < n\n  strict_mono_on (\\<phi> ?m) (elts \\<omega>)\n  \\<lbrakk>strict_mono_on ?f ?A; ?r \\<in> ?A; ?s \\<in> ?A; ?r < ?s\\<rbrakk>\n  \\<Longrightarrow> ?f ?r < ?f ?s\n\ngoal (1 subgoal):\n 1. \\<phi> (q (\\<xi>, 0)) (ord_of_nat m)\n    < \\<phi> (q (\\<xi>, 0)) (ord_of_nat n)", "by blast"], ["proof (state)\nthis:\n  \\<phi> (q (\\<xi>, 0)) (ord_of_nat m)\n  < \\<phi> (q (\\<xi>, 0)) (ord_of_nat n)\n\ngoal (2 subgoals):\n 1. \\<nu> = \\<xi> \\<Longrightarrow> \\<pi> u < \\<pi> v\n 2. \\<nu> < \\<xi> \\<Longrightarrow> \\<pi> u < \\<pi> v", "then"], ["proof (chain)\npicking this:\n  \\<phi> (q (\\<xi>, 0)) (ord_of_nat m)\n  < \\<phi> (q (\\<xi>, 0)) (ord_of_nat n)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> (q (\\<xi>, 0)) (ord_of_nat m)\n  < \\<phi> (q (\\<xi>, 0)) (ord_of_nat n)\n\ngoal (1 subgoal):\n 1. \\<pi> u < \\<pi> v", "using eq ueq veq \\<nu> \\<open>m < n\\<close>"], ["proof (prove)\nusing this:\n  \\<phi> (q (\\<xi>, 0)) (ord_of_nat m)\n  < \\<phi> (q (\\<xi>, 0)) (ord_of_nat n)\n  \\<nu> = \\<xi>\n  u = \\<omega> * \\<nu> + ord_of_nat m\n  v = \\<omega> * \\<xi> + ord_of_nat n\n  \\<nu> \\<in> elts \\<beta>\n  m < n\n\ngoal (1 subgoal):\n 1. \\<pi> u < \\<pi> v", "by (simp add: \\<pi>_def)"], ["proof (state)\nthis:\n  \\<pi> u < \\<pi> v\n\ngoal (1 subgoal):\n 1. \\<nu> < \\<xi> \\<Longrightarrow> \\<pi> u < \\<pi> v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nu> < \\<xi> \\<Longrightarrow> \\<pi> u < \\<pi> v", "case lt"], ["proof (state)\nthis:\n  \\<nu> < \\<xi>\n\ngoal (1 subgoal):\n 1. \\<nu> < \\<xi> \\<Longrightarrow> \\<pi> u < \\<pi> v", "have \"\\<phi> (q(\\<nu>,0)) m \\<in> \\<AA> (q(\\<nu>,0)) (\\<mu>(q(\\<nu>,0)))\" \"\\<phi> (q (\\<xi>,0)) n \\<in> \\<AA> (q(\\<xi>,0)) (\\<mu>(q(\\<xi>,0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> (q (\\<nu>, 0)) (ord_of_nat m)\n    \\<in> \\<AA> (q (\\<nu>, 0)) (\\<mu> (q (\\<nu>, 0))) &&&\n    \\<phi> (q (\\<xi>, 0)) (ord_of_nat n)\n    \\<in> \\<AA> (q (\\<xi>, 0)) (\\<mu> (q (\\<xi>, 0)))", "using \\<phi>"], ["proof (prove)\nusing this:\n  \\<phi> ?m \\<in> elts \\<omega> \\<rightarrow> ZA ?m\n\ngoal (1 subgoal):\n 1. \\<phi> (q (\\<nu>, 0)) (ord_of_nat m)\n    \\<in> \\<AA> (q (\\<nu>, 0)) (\\<mu> (q (\\<nu>, 0))) &&&\n    \\<phi> (q (\\<xi>, 0)) (ord_of_nat n)\n    \\<in> \\<AA> (q (\\<xi>, 0)) (\\<mu> (q (\\<xi>, 0)))", "unfolding ZA_def"], ["proof (prove)\nusing this:\n  \\<phi> ?m\n  \\<in> elts \\<omega> \\<rightarrow> range x \\<inter> \\<AA> ?m (\\<mu> ?m)\n\ngoal (1 subgoal):\n 1. \\<phi> (q (\\<nu>, 0)) (ord_of_nat m)\n    \\<in> \\<AA> (q (\\<nu>, 0)) (\\<mu> (q (\\<nu>, 0))) &&&\n    \\<phi> (q (\\<xi>, 0)) (ord_of_nat n)\n    \\<in> \\<AA> (q (\\<xi>, 0)) (\\<mu> (q (\\<xi>, 0)))", "by blast+"], ["proof (state)\nthis:\n  \\<phi> (q (\\<nu>, 0)) (ord_of_nat m)\n  \\<in> \\<AA> (q (\\<nu>, 0)) (\\<mu> (q (\\<nu>, 0)))\n  \\<phi> (q (\\<xi>, 0)) (ord_of_nat n)\n  \\<in> \\<AA> (q (\\<xi>, 0)) (\\<mu> (q (\\<xi>, 0)))\n\ngoal (1 subgoal):\n 1. \\<nu> < \\<xi> \\<Longrightarrow> \\<pi> u < \\<pi> v", "then"], ["proof (chain)\npicking this:\n  \\<phi> (q (\\<nu>, 0)) (ord_of_nat m)\n  \\<in> \\<AA> (q (\\<nu>, 0)) (\\<mu> (q (\\<nu>, 0)))\n  \\<phi> (q (\\<xi>, 0)) (ord_of_nat n)\n  \\<in> \\<AA> (q (\\<xi>, 0)) (\\<mu> (q (\\<xi>, 0)))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> (q (\\<nu>, 0)) (ord_of_nat m)\n  \\<in> \\<AA> (q (\\<nu>, 0)) (\\<mu> (q (\\<nu>, 0)))\n  \\<phi> (q (\\<xi>, 0)) (ord_of_nat n)\n  \\<in> \\<AA> (q (\\<xi>, 0)) (\\<mu> (q (\\<xi>, 0)))\n\ngoal (1 subgoal):\n 1. \\<pi> u < \\<pi> v", "using lt ueq veq \\<nu> \\<xi> 18 [of \"q(\\<nu>,0)\" \"q(\\<xi>,0)\"]"], ["proof (prove)\nusing this:\n  \\<phi> (q (\\<nu>, 0)) (ord_of_nat m)\n  \\<in> \\<AA> (q (\\<nu>, 0)) (\\<mu> (q (\\<nu>, 0)))\n  \\<phi> (q (\\<xi>, 0)) (ord_of_nat n)\n  \\<in> \\<AA> (q (\\<xi>, 0)) (\\<mu> (q (\\<xi>, 0)))\n  \\<nu> < \\<xi>\n  u = \\<omega> * \\<nu> + ord_of_nat m\n  v = \\<omega> * \\<xi> + ord_of_nat n\n  \\<nu> \\<in> elts \\<beta>\n  \\<xi> \\<in> elts \\<beta>\n  (\\<AA> (q (\\<nu>, 0)) (\\<mu> (q (\\<nu>, 0))) \\<lless>\n   \\<AA> (q (\\<xi>, 0)) (\\<mu> (q (\\<xi>, 0)))) =\n  (\\<mu> (q (\\<nu>, 0)) < \\<mu> (q (\\<xi>, 0)))\n\ngoal (1 subgoal):\n 1. \\<pi> u < \\<pi> v", "by (simp add: \\<pi>_def less_sets_def)"], ["proof (state)\nthis:\n  \\<pi> u < \\<pi> v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<pi> u < \\<pi> v\n\ngoal (7 subgoals):\n 1. small (elts (\\<omega> * \\<beta>))\n 2. small (\\<Union> (range ZA))\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> elts (\\<omega> * \\<beta>);\n        y \\<in> elts (\\<omega> * \\<beta>); (x, y) \\<in> VWF\\<rbrakk>\n       \\<Longrightarrow> (\\<pi> x, \\<pi> y) \\<in> VWF\n 4. wf VWF\n 5. total_on (elts (\\<omega> * \\<beta>)) VWF\n 6. wf VWF\n 7. trans VWF", "then"], ["proof (chain)\npicking this:\n  \\<pi> u < \\<pi> v", "show \"(\\<pi> u, \\<pi> v) \\<in> VWF\""], ["proof (prove)\nusing this:\n  \\<pi> u < \\<pi> v\n\ngoal (1 subgoal):\n 1. (\\<pi> u, \\<pi> v) \\<in> VWF", "using \\<pi>_Pi"], ["proof (prove)\nusing this:\n  \\<pi> u < \\<pi> v\n  \\<pi> \\<in> elts (\\<omega> * \\<beta>) \\<rightarrow> \\<Union> (range ZA)\n\ngoal (1 subgoal):\n 1. (\\<pi> u, \\<pi> v) \\<in> VWF", "by (metis Ord_\\<pi>_Pi PiE VWF_iff_Ord_less x y mem_Collect_eq)"], ["proof (state)\nthis:\n  (\\<pi> u, \\<pi> v) \\<in> VWF\n\ngoal (6 subgoals):\n 1. small (elts (\\<omega> * \\<beta>))\n 2. small (\\<Union> (range ZA))\n 3. wf VWF\n 4. total_on (elts (\\<omega> * \\<beta>)) VWF\n 5. wf VWF\n 6. trans VWF", "qed (use \\<dagger> in auto)"], ["proof (state)\nthis:\n  tp (elts (\\<omega> * \\<beta>)) \\<le> tp (\\<Union> (range ZA))\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Union> (range ZA) = range x\n  tp (elts (\\<omega> * \\<beta>)) \\<le> tp (\\<Union> (range ZA))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Union> (range ZA) = range x\n  tp (elts (\\<omega> * \\<beta>)) \\<le> tp (\\<Union> (range ZA))\n\ngoal (1 subgoal):\n 1. \\<omega> * \\<beta> \\<le> tp (range x)", "by simp"], ["proof (state)\nthis:\n  \\<omega> * \\<beta> \\<le> tp (range x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<omega> * \\<beta> \\<le> tp (range x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<omega> * \\<beta> \\<le> tp (range x)\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  \\<omega> * \\<beta> \\<le> tp (range x)", "obtain Z where \"Z \\<subseteq> ?Z\" \"tp Z = \\<omega> * \\<beta>\""], ["proof (prove)\nusing this:\n  \\<omega> * \\<beta> \\<le> tp (range x)\n\ngoal (1 subgoal):\n 1. (\\<And>Z.\n        \\<lbrakk>Z \\<subseteq> range x; tp Z = \\<omega> * \\<beta>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson Ord_\\<omega> Ord_mult ord Z_sub down le_ordertype_obtains_subset)"], ["proof (state)\nthis:\n  Z \\<subseteq> range x\n  tp Z = \\<omega> * \\<beta>\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  f ` [range x]\\<^bsup>2\\<^esup> \\<subseteq> {1}\n  range x \\<subseteq> elts (\\<alpha> * \\<beta>)\n  Z \\<subseteq> range x\n  tp Z = \\<omega> * \\<beta>", "show False"], ["proof (prove)\nusing this:\n  f ` [range x]\\<^bsup>2\\<^esup> \\<subseteq> {1}\n  range x \\<subseteq> elts (\\<alpha> * \\<beta>)\n  Z \\<subseteq> range x\n  tp Z = \\<omega> * \\<beta>\n\ngoal (1 subgoal):\n 1. False", "using iii [of Z]"], ["proof (prove)\nusing this:\n  f ` [range x]\\<^bsup>2\\<^esup> \\<subseteq> {1}\n  range x \\<subseteq> elts (\\<alpha> * \\<beta>)\n  Z \\<subseteq> range x\n  tp Z = \\<omega> * \\<beta>\n  \\<lbrakk>tp Z = \\<omega> * \\<beta>;\n   Z \\<subseteq> elts (\\<alpha> * \\<beta>)\\<rbrakk>\n  \\<Longrightarrow> \\<not> f ` [Z]\\<^bsup>2\\<^esup> \\<subseteq> {1}\n\ngoal (1 subgoal):\n 1. False", "by (meson dual_order.trans image_mono nsets_mono)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>H.\n              tp H = ord_of_nat (2 * k) \\<longrightarrow>\n              H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n              \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {0};\n   \\<forall>H.\n      tp H = \\<gamma> \\<longrightarrow>\n      H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n      \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1};\n   \\<forall>H.\n      tp H = \\<omega> * \\<beta> \\<longrightarrow>\n      H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n      \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1}\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> [elts (\\<alpha> * \\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow>\n               {..<Suc (Suc 0)} \\<Longrightarrow>\n       \\<exists>i<Suc (Suc 0).\n          \\<exists>H\\<subseteq>elts (\\<alpha> * \\<beta>).\n             tp H =\n             [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] !\n             i \\<and>\n             f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {i}", "have False\n        if 0: \"\\<forall>H. tp H = ord_of_nat (2*k) \\<longrightarrow> H \\<subseteq> elts (\\<alpha>*\\<beta>) \\<longrightarrow> \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {0}\"\n          and 1: \"\\<forall>H. tp H = min \\<gamma> (\\<omega> * \\<beta>) \\<longrightarrow> H \\<subseteq> elts (\\<alpha>*\\<beta>) \\<longrightarrow> \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"\\<omega>*\\<beta> \\<le> \\<gamma>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<omega> * \\<beta> \\<le> \\<gamma> \\<Longrightarrow> False\n 2. \\<not> \\<omega> * \\<beta> \\<le> \\<gamma> \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  \\<omega> * \\<beta> \\<le> \\<gamma>\n\ngoal (2 subgoals):\n 1. \\<omega> * \\<beta> \\<le> \\<gamma> \\<Longrightarrow> False\n 2. \\<not> \\<omega> * \\<beta> \\<le> \\<gamma> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<omega> * \\<beta> \\<le> \\<gamma>", "have \\<dagger>: \"\\<exists>H'\\<subseteq>H. tp H' = \\<omega> * \\<beta>\" if \"tp H = \\<gamma>\" \"small H\" for H"], ["proof (prove)\nusing this:\n  \\<omega> * \\<beta> \\<le> \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<exists>H'\\<subseteq>H. tp H' = \\<omega> * \\<beta>", "by (metis Ord_\\<omega> Ord_\\<omega>1 Ord_in_Ord Ord_mult \\<beta> le_ordertype_obtains_subset that)"], ["proof (state)\nthis:\n  \\<lbrakk>tp ?H = \\<gamma>; small ?H\\<rbrakk>\n  \\<Longrightarrow> \\<exists>H'\\<subseteq>?H. tp H' = \\<omega> * \\<beta>\n\ngoal (2 subgoals):\n 1. \\<omega> * \\<beta> \\<le> \\<gamma> \\<Longrightarrow> False\n 2. \\<not> \\<omega> * \\<beta> \\<le> \\<gamma> \\<Longrightarrow> False", "have [simp]: \"min \\<gamma> (\\<omega>*\\<beta>) = \\<omega>*\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min \\<gamma> (\\<omega> * \\<beta>) = \\<omega> * \\<beta>", "by (simp add: min_absorb2 that True)"], ["proof (state)\nthis:\n  min \\<gamma> (\\<omega> * \\<beta>) = \\<omega> * \\<beta>\n\ngoal (2 subgoals):\n 1. \\<omega> * \\<beta> \\<le> \\<gamma> \\<Longrightarrow> False\n 2. \\<not> \\<omega> * \\<beta> \\<le> \\<gamma> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  min \\<gamma> (\\<omega> * \\<beta>) = \\<omega> * \\<beta>", "show ?thesis"], ["proof (prove)\nusing this:\n  min \\<gamma> (\\<omega> * \\<beta>) = \\<omega> * \\<beta>\n\ngoal (1 subgoal):\n 1. False", "using * [OF 0] 1 True"], ["proof (prove)\nusing this:\n  min \\<gamma> (\\<omega> * \\<beta>) = \\<omega> * \\<beta>\n  \\<lbrakk>\\<forall>H.\n              tp H = \\<gamma> \\<longrightarrow>\n              H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n              \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1};\n   \\<forall>H.\n      tp H = \\<omega> * \\<beta> \\<longrightarrow>\n      H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n      \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1}\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<forall>H.\n     tp H = min \\<gamma> (\\<omega> * \\<beta>) \\<longrightarrow>\n     H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n     \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1}\n  \\<omega> * \\<beta> \\<le> \\<gamma>\n\ngoal (1 subgoal):\n 1. False", "by simp (meson \\<dagger> down image_mono nsets_mono subset_trans)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> \\<omega> * \\<beta> \\<le> \\<gamma> \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<omega> * \\<beta> \\<le> \\<gamma> \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  \\<not> \\<omega> * \\<beta> \\<le> \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<not> \\<omega> * \\<beta> \\<le> \\<gamma> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> \\<omega> * \\<beta> \\<le> \\<gamma>", "have \\<dagger>: \"\\<exists>H'\\<subseteq>H. tp H' = \\<gamma>\" if \"tp H = \\<omega> * \\<beta>\" \"small H\" for H"], ["proof (prove)\nusing this:\n  \\<not> \\<omega> * \\<beta> \\<le> \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<exists>H'\\<subseteq>H. tp H' = \\<gamma>", "by (metis Ord_linear_le Ord_ordertype \\<open>Ord \\<gamma>\\<close> le_ordertype_obtains_subset that)"], ["proof (state)\nthis:\n  \\<lbrakk>tp ?H = \\<omega> * \\<beta>; small ?H\\<rbrakk>\n  \\<Longrightarrow> \\<exists>H'\\<subseteq>?H. tp H' = \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<not> \\<omega> * \\<beta> \\<le> \\<gamma> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>tp ?H = \\<omega> * \\<beta>; small ?H\\<rbrakk>\n  \\<Longrightarrow> \\<exists>H'\\<subseteq>?H. tp H' = \\<gamma>", "have \"\\<gamma> \\<le> \\<omega>*\\<beta>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>tp ?H = \\<omega> * \\<beta>; small ?H\\<rbrakk>\n  \\<Longrightarrow> \\<exists>H'\\<subseteq>?H. tp H' = \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<gamma> \\<le> \\<omega> * \\<beta>", "by (meson Ord_\\<omega> Ord_\\<omega>1 Ord_in_Ord Ord_linear_le Ord_mult \\<beta> \\<open>Ord \\<gamma>\\<close> False)"], ["proof (state)\nthis:\n  \\<gamma> \\<le> \\<omega> * \\<beta>\n\ngoal (1 subgoal):\n 1. \\<not> \\<omega> * \\<beta> \\<le> \\<gamma> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<gamma> \\<le> \\<omega> * \\<beta>", "have [simp]: \"min \\<gamma> (\\<omega>*\\<beta>) = \\<gamma>\""], ["proof (prove)\nusing this:\n  \\<gamma> \\<le> \\<omega> * \\<beta>\n\ngoal (1 subgoal):\n 1. min \\<gamma> (\\<omega> * \\<beta>) = \\<gamma>", "by (simp add: min_absorb1)"], ["proof (state)\nthis:\n  min \\<gamma> (\\<omega> * \\<beta>) = \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<not> \\<omega> * \\<beta> \\<le> \\<gamma> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  min \\<gamma> (\\<omega> * \\<beta>) = \\<gamma>", "show ?thesis"], ["proof (prove)\nusing this:\n  min \\<gamma> (\\<omega> * \\<beta>) = \\<gamma>\n\ngoal (1 subgoal):\n 1. False", "using * [OF 0] 1 False"], ["proof (prove)\nusing this:\n  min \\<gamma> (\\<omega> * \\<beta>) = \\<gamma>\n  \\<lbrakk>\\<forall>H.\n              tp H = \\<gamma> \\<longrightarrow>\n              H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n              \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1};\n   \\<forall>H.\n      tp H = \\<omega> * \\<beta> \\<longrightarrow>\n      H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n      \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1}\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<forall>H.\n     tp H = min \\<gamma> (\\<omega> * \\<beta>) \\<longrightarrow>\n     H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n     \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1}\n  \\<not> \\<omega> * \\<beta> \\<le> \\<gamma>\n\ngoal (1 subgoal):\n 1. False", "by simp (meson \\<dagger> down image_mono nsets_mono subset_trans)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>H.\n              tp H = ord_of_nat (2 * k) \\<longrightarrow>\n              H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n              \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {0};\n   \\<forall>H.\n      tp H = min \\<gamma> (\\<omega> * \\<beta>) \\<longrightarrow>\n      H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n      \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1}\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> [elts (\\<alpha> * \\<beta>)]\\<^bsup>2\\<^esup> \\<rightarrow>\n               {..<Suc (Suc 0)} \\<Longrightarrow>\n       \\<exists>i<Suc (Suc 0).\n          \\<exists>H\\<subseteq>elts (\\<alpha> * \\<beta>).\n             tp H =\n             [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] !\n             i \\<and>\n             f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {i}", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>H.\n              tp H = ord_of_nat (2 * k) \\<longrightarrow>\n              H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n              \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {0};\n   \\<forall>H.\n      tp H = min \\<gamma> (\\<omega> * \\<beta>) \\<longrightarrow>\n      H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n      \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1}\\<rbrakk>\n  \\<Longrightarrow> False", "show \"\\<exists>i<Suc (Suc 0). \\<exists>H\\<subseteq>elts (\\<alpha>*\\<beta>). tp H = [ord_of_nat (2*k), min \\<gamma> (\\<omega>*\\<beta>)] ! i \\<and> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {i}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>H.\n              tp H = ord_of_nat (2 * k) \\<longrightarrow>\n              H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n              \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {0};\n   \\<forall>H.\n      tp H = min \\<gamma> (\\<omega> * \\<beta>) \\<longrightarrow>\n      H \\<subseteq> elts (\\<alpha> * \\<beta>) \\<longrightarrow>\n      \\<not> f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {1}\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<exists>i<Suc (Suc 0).\n       \\<exists>H\\<subseteq>elts (\\<alpha> * \\<beta>).\n          tp H =\n          [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] ! i \\<and>\n          f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {i}", "by force"], ["proof (state)\nthis:\n  \\<exists>i<Suc (Suc 0).\n     \\<exists>H\\<subseteq>elts (\\<alpha> * \\<beta>).\n        tp H =\n        [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] ! i \\<and>\n        f ` [H]\\<^bsup>2\\<^esup> \\<subseteq> {i}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<alpha> * \\<beta>)\n   [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<alpha> * \\<beta>)\n   [ord_of_nat (2 * k), min \\<gamma> (\\<omega> * \\<beta>)] 2\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem Erdos_Milner:\n  assumes \\<nu>: \"\\<nu> \\<in> elts \\<omega>1\"\n  shows \"partn_lst_VWF (\\<omega>\\<up>(1 + \\<nu> * ord_of_nat n)) [ord_of_nat (2^n), \\<omega>\\<up>(1+\\<nu>)] 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n))\n     [ord_of_nat (2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat 0))\n     [ord_of_nat (2 ^ 0), \\<omega> \\<up> (1 + \\<nu>)] 2\n 2. \\<And>n.\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n))\n        [ord_of_nat (2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2 \\<Longrightarrow>\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n        [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat 0))\n     [ord_of_nat (2 ^ 0), \\<omega> \\<up> (1 + \\<nu>)] 2\n 2. \\<And>n.\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n))\n        [ord_of_nat (2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2 \\<Longrightarrow>\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n        [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat 0))\n     [ord_of_nat (2 ^ 0), \\<omega> \\<up> (1 + \\<nu>)] 2", "using partn_lst_VWF_degenerate [of 1 2]"], ["proof (prove)\nusing this:\n  1 < 2 \\<Longrightarrow>\n  partn_lst_VWF \\<omega> (ord_of_nat 1 # ?\\<alpha>s) 2\n\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat 0))\n     [ord_of_nat (2 ^ 0), \\<omega> \\<up> (1 + \\<nu>)] 2", "by simp"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat 0))\n   [ord_of_nat (2 ^ 0), \\<omega> \\<up> (1 + \\<nu>)] 2\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n))\n        [ord_of_nat (2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2 \\<Longrightarrow>\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n        [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n))\n        [ord_of_nat (2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2 \\<Longrightarrow>\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n        [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "case (Suc n)"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n))\n   [ord_of_nat (2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n))\n        [ord_of_nat (2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2 \\<Longrightarrow>\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n        [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "have \"Ord \\<nu>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord \\<nu>", "using Ord_\\<omega>1 Ord_in_Ord assms"], ["proof (prove)\nusing this:\n  Ord \\<omega>1\n  \\<lbrakk>Ord ?k; ?m \\<in> elts ?k\\<rbrakk> \\<Longrightarrow> Ord ?m\n  \\<nu> \\<in> elts \\<omega>1\n\ngoal (1 subgoal):\n 1. Ord \\<nu>", "by blast"], ["proof (state)\nthis:\n  Ord \\<nu>\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n))\n        [ord_of_nat (2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2 \\<Longrightarrow>\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n        [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "have \"1+\\<nu> \\<le> \\<nu>+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + \\<nu> \\<le> \\<nu> + 1", "by (simp add: \\<open>Ord \\<nu>\\<close> one_V_def plus_Ord_le)"], ["proof (state)\nthis:\n  1 + \\<nu> \\<le> \\<nu> + 1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n))\n        [ord_of_nat (2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2 \\<Longrightarrow>\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n        [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "then"], ["proof (chain)\npicking this:\n  1 + \\<nu> \\<le> \\<nu> + 1", "have [simp]: \"min (\\<omega> \\<up> (1 + \\<nu>)) (\\<omega> * \\<omega> \\<up> \\<nu>) = \\<omega> \\<up> (1+\\<nu>)\""], ["proof (prove)\nusing this:\n  1 + \\<nu> \\<le> \\<nu> + 1\n\ngoal (1 subgoal):\n 1. min (\\<omega> \\<up> (1 + \\<nu>)) (\\<omega> * \\<omega> \\<up> \\<nu>) =\n    \\<omega> \\<up> (1 + \\<nu>)", "by (simp add: \\<open>Ord \\<nu>\\<close> oexp_add min_def)"], ["proof (state)\nthis:\n  min (\\<omega> \\<up> (1 + \\<nu>)) (\\<omega> * \\<omega> \\<up> \\<nu>) =\n  \\<omega> \\<up> (1 + \\<nu>)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n))\n        [ord_of_nat (2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2 \\<Longrightarrow>\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n        [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "have ind: \"indecomposable (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indecomposable (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n))", "by (simp add: \\<open>Ord \\<nu>\\<close> indecomposable_\\<omega>_power)"], ["proof (state)\nthis:\n  indecomposable (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n))\n        [ord_of_nat (2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2 \\<Longrightarrow>\n       partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n        [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n     [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n     [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n     [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n     [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n     [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "then"], ["proof (chain)\npicking this:\n  n = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n     [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "using partn_lst_VWF_\\<omega>_2 \\<open>Ord \\<nu>\\<close> one_V_def"], ["proof (prove)\nusing this:\n  n = 0\n  Ord ?\\<alpha> \\<Longrightarrow>\n  partn_lst_VWF (\\<omega> \\<up> (1 + ?\\<alpha>))\n   [ord_of_nat 2, \\<omega> \\<up> (1 + ?\\<alpha>)] 2\n  Ord \\<nu>\n  1 \\<equiv> ZFC_in_HOL.succ 0\n\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n     [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "by auto"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n   [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n     [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n     [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n     [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "then"], ["proof (chain)\npicking this:\n  n \\<noteq> 0", "have \"Suc 0 < 2 ^ n\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Suc 0 < 2 ^ n", "using less_2_cases not_less_eq"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  ?n < 2 \\<Longrightarrow> ?n = 0 \\<or> ?n = Suc 0\n  (\\<not> ?m < ?n) = (?n < Suc ?m)\n\ngoal (1 subgoal):\n 1. Suc 0 < 2 ^ n", "by fastforce"], ["proof (state)\nthis:\n  Suc 0 < 2 ^ n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n     [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "then"], ["proof (chain)\npicking this:\n  Suc 0 < 2 ^ n", "have \"partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * n) * \\<omega> \\<up> \\<nu>) [ord_of_nat (2 * 2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2\""], ["proof (prove)\nusing this:\n  Suc 0 < 2 ^ n\n\ngoal (1 subgoal):\n 1. partn_lst_VWF\n     (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n) * \\<omega> \\<up> \\<nu>)\n     [ord_of_nat (2 * 2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2", "using Erdos_Milner_aux [OF Suc ind, where \\<beta> = \"\\<omega>\\<up>\\<nu>\"] \\<open>Ord \\<nu>\\<close> \\<nu>"], ["proof (prove)\nusing this:\n  Suc 0 < 2 ^ n\n  \\<lbrakk>1 < 2 ^ n; Ord (\\<omega> \\<up> (1 + \\<nu>));\n   \\<omega> \\<up> \\<nu> \\<in> elts \\<omega>1\\<rbrakk>\n  \\<Longrightarrow> partn_lst_VWF\n                     (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n) *\n                      \\<omega> \\<up> \\<nu>)\n                     [ord_of_nat (2 * 2 ^ n),\n                      min (\\<omega> \\<up> (1 + \\<nu>))\n                       (\\<omega> * \\<omega> \\<up> \\<nu>)]\n                     2\n  Ord \\<nu>\n  \\<nu> \\<in> elts \\<omega>1\n\ngoal (1 subgoal):\n 1. partn_lst_VWF\n     (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n) * \\<omega> \\<up> \\<nu>)\n     [ord_of_nat (2 * 2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2", "by (auto simp: countable_oexp)"], ["proof (state)\nthis:\n  partn_lst_VWF\n   (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n) * \\<omega> \\<up> \\<nu>)\n   [ord_of_nat (2 * 2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n     [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "then"], ["proof (chain)\npicking this:\n  partn_lst_VWF\n   (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n) * \\<omega> \\<up> \\<nu>)\n   [ord_of_nat (2 * 2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2", "show ?thesis"], ["proof (prove)\nusing this:\n  partn_lst_VWF\n   (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n) * \\<omega> \\<up> \\<nu>)\n   [ord_of_nat (2 * 2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2\n\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n     [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "using \\<open>Ord \\<nu>\\<close>"], ["proof (prove)\nusing this:\n  partn_lst_VWF\n   (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat n) * \\<omega> \\<up> \\<nu>)\n   [ord_of_nat (2 * 2 ^ n), \\<omega> \\<up> (1 + \\<nu>)] 2\n  Ord \\<nu>\n\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n     [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2", "by (simp add: mult_succ mult.assoc oexp_add)"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n   [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<omega> \\<up> (1 + \\<nu> * ord_of_nat (Suc n)))\n   [ord_of_nat (2 ^ Suc n), \\<omega> \\<up> (1 + \\<nu>)] 2\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary remark_3: \"partn_lst_VWF (\\<omega>\\<up>(Suc(4*k))) [4, \\<omega>\\<up>(Suc(2*k))] 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> ord_of_nat (Suc (4 * k)))\n     [ord_of_nat 4, \\<omega> \\<up> ord_of_nat (Suc (2 * k))] 2", "using Erdos_Milner [of \"2*k\" 2]"], ["proof (prove)\nusing this:\n  ord_of_nat (2 * k) \\<in> elts \\<omega>1 \\<Longrightarrow>\n  partn_lst_VWF (\\<omega> \\<up> (1 + ord_of_nat (2 * k) * ord_of_nat 2))\n   [ord_of_nat (2\\<^sup>2), \\<omega> \\<up> (1 + ord_of_nat (2 * k))] 2\n\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> ord_of_nat (Suc (4 * k)))\n     [ord_of_nat 4, \\<omega> \\<up> ord_of_nat (Suc (2 * k))] 2", "apply (simp flip: ord_of_nat_mult ord_of_nat.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> (1 + ord_of_nat (4 * k)))\n     [ord_of_nat 4, \\<omega> \\<up> (1 + ord_of_nat (2 * k))]\n     2 \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (Suc (4 * k)))\n     [ord_of_nat 4, \\<omega> \\<up> ord_of_nat (Suc (2 * k))] 2", "by (simp add: one_V_def)"], ["", "text \\<open>Theorem 3.2 of Jean A. Larson, ibid.\\<close>"], ["", "corollary Theorem_3_2:\n  fixes k n::nat\n  shows \"partn_lst_VWF (\\<omega>\\<up>(n*k)) [\\<omega>\\<up>n, ord_of_nat k] 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "proof (cases \"n=0 \\<or> k=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<or> k = 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2\n 2. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "case True"], ["proof (state)\nthis:\n  n = 0 \\<or> k = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<or> k = 0 \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2\n 2. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "then"], ["proof (chain)\npicking this:\n  n = 0 \\<or> k = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  n = 0 \\<or> k = 0\n\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "by (auto intro: partn_lst_triv0 [where i=1] partn_lst_triv1 [where i=0])"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n   [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "case False"], ["proof (state)\nthis:\n  \\<not> (n = 0 \\<or> k = 0)\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "then"], ["proof (chain)\npicking this:\n  \\<not> (n = 0 \\<or> k = 0)", "have \"n > 0\" \"k > 0\""], ["proof (prove)\nusing this:\n  \\<not> (n = 0 \\<or> k = 0)\n\ngoal (1 subgoal):\n 1. 0 < n &&& 0 < k", "by auto"], ["proof (state)\nthis:\n  0 < n\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "have PV: \"partn_lst_VWF (\\<omega> \\<up> (1 + ord_of_nat (n-1) * ord_of_nat (k-1))) [ord_of_nat (2 ^ (k-1)), \\<omega> \\<up> (1 + ord_of_nat (n-1))] 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partn_lst_VWF\n     (\\<omega> \\<up> (1 + ord_of_nat (n - 1) * ord_of_nat (k - 1)))\n     [ord_of_nat (2 ^ (k - 1)), \\<omega> \\<up> (1 + ord_of_nat (n - 1))] 2", "using Erdos_Milner [of \"ord_of_nat (n-1)\" \"k-1\"] Ord_\\<omega>1 Ord_mem_iff_lt less_imp_le"], ["proof (prove)\nusing this:\n  ord_of_nat (n - 1) \\<in> elts \\<omega>1 \\<Longrightarrow>\n  partn_lst_VWF\n   (\\<omega> \\<up> (1 + ord_of_nat (n - 1) * ord_of_nat (k - 1)))\n   [ord_of_nat (2 ^ (k - 1)), \\<omega> \\<up> (1 + ord_of_nat (n - 1))] 2\n  Ord \\<omega>1\n  \\<lbrakk>Ord ?k; Ord ?l\\<rbrakk>\n  \\<Longrightarrow> (?k \\<in> elts ?l) = (?k < ?l)\n  ?x < ?y \\<Longrightarrow> ?x \\<le> ?y\n\ngoal (1 subgoal):\n 1. partn_lst_VWF\n     (\\<omega> \\<up> (1 + ord_of_nat (n - 1) * ord_of_nat (k - 1)))\n     [ord_of_nat (2 ^ (k - 1)), \\<omega> \\<up> (1 + ord_of_nat (n - 1))] 2", "by blast"], ["proof (state)\nthis:\n  partn_lst_VWF\n   (\\<omega> \\<up> (1 + ord_of_nat (n - 1) * ord_of_nat (k - 1)))\n   [ord_of_nat (2 ^ (k - 1)), \\<omega> \\<up> (1 + ord_of_nat (n - 1))] 2\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "have \"k+n \\<le> Suc (Suc(k-1) * Suc(n-1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k + n \\<le> Suc (Suc (k - 1) * Suc (n - 1))", "by simp"], ["proof (state)\nthis:\n  k + n \\<le> Suc (Suc (k - 1) * Suc (n - 1))\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "also"], ["proof (state)\nthis:\n  k + n \\<le> Suc (Suc (k - 1) * Suc (n - 1))\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "have \"\\<dots> \\<le> Suc (k * n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc (k - 1) * Suc (n - 1)) \\<le> Suc (k * n)", "using False"], ["proof (prove)\nusing this:\n  \\<not> (n = 0 \\<or> k = 0)\n\ngoal (1 subgoal):\n 1. Suc (Suc (k - 1) * Suc (n - 1)) \\<le> Suc (k * n)", "by auto"], ["proof (state)\nthis:\n  Suc (Suc (k - 1) * Suc (n - 1)) \\<le> Suc (k * n)\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "finally"], ["proof (chain)\npicking this:\n  k + n \\<le> Suc (k * n)", "have \"1 + (n - 1) * (k - 1) \\<le> (n*k)\""], ["proof (prove)\nusing this:\n  k + n \\<le> Suc (k * n)\n\ngoal (1 subgoal):\n 1. 1 + (n - 1) * (k - 1) \\<le> n * k", "using False"], ["proof (prove)\nusing this:\n  k + n \\<le> Suc (k * n)\n  \\<not> (n = 0 \\<or> k = 0)\n\ngoal (1 subgoal):\n 1. 1 + (n - 1) * (k - 1) \\<le> n * k", "by (auto simp: algebra_simps)"], ["proof (state)\nthis:\n  1 + (n - 1) * (k - 1) \\<le> n * k\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "then"], ["proof (chain)\npicking this:\n  1 + (n - 1) * (k - 1) \\<le> n * k", "have \"(1 + ord_of_nat (n - 1) * ord_of_nat (k - 1)) \\<le> ord_of_nat(n*k)\""], ["proof (prove)\nusing this:\n  1 + (n - 1) * (k - 1) \\<le> n * k\n\ngoal (1 subgoal):\n 1. 1 + ord_of_nat (n - 1) * ord_of_nat (k - 1) \\<le> ord_of_nat (n * k)", "by (metis (mono_tags, lifting) One_nat_def one_V_def ord_of_nat.simps ord_of_nat_add ord_of_nat_mono_iff ord_of_nat_mult)"], ["proof (state)\nthis:\n  1 + ord_of_nat (n - 1) * ord_of_nat (k - 1) \\<le> ord_of_nat (n * k)\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "then"], ["proof (chain)\npicking this:\n  1 + ord_of_nat (n - 1) * ord_of_nat (k - 1) \\<le> ord_of_nat (n * k)", "have x: \"\\<omega> \\<up> (1 + ord_of_nat (n - 1) * ord_of_nat (k - 1)) \\<le> \\<omega>\\<up>(n*k)\""], ["proof (prove)\nusing this:\n  1 + ord_of_nat (n - 1) * ord_of_nat (k - 1) \\<le> ord_of_nat (n * k)\n\ngoal (1 subgoal):\n 1. \\<omega> \\<up> (1 + ord_of_nat (n - 1) * ord_of_nat (k - 1))\n    \\<le> \\<omega> \\<up> ord_of_nat (n * k)", "by (simp add: oexp_mono_le)"], ["proof (state)\nthis:\n  \\<omega> \\<up> (1 + ord_of_nat (n - 1) * ord_of_nat (k - 1))\n  \\<le> \\<omega> \\<up> ord_of_nat (n * k)\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "then"], ["proof (chain)\npicking this:\n  \\<omega> \\<up> (1 + ord_of_nat (n - 1) * ord_of_nat (k - 1))\n  \\<le> \\<omega> \\<up> ord_of_nat (n * k)", "have \"partn_lst_VWF (\\<omega>\\<up>(n*k)) [\\<omega> \\<up> (1 + ord_of_nat (n-1)), ord_of_nat (2 ^ (k-1))] 2\""], ["proof (prove)\nusing this:\n  \\<omega> \\<up> (1 + ord_of_nat (n - 1) * ord_of_nat (k - 1))\n  \\<le> \\<omega> \\<up> ord_of_nat (n * k)\n\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> (1 + ord_of_nat (n - 1)), ord_of_nat (2 ^ (k - 1))] 2", "by (metis PV partn_lst_two_swap Partitions.partn_lst_greater_resource less_eq_V_def)"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n   [\\<omega> \\<up> (1 + ord_of_nat (n - 1)), ord_of_nat (2 ^ (k - 1))] 2\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "moreover"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n   [\\<omega> \\<up> (1 + ord_of_nat (n - 1)), ord_of_nat (2 ^ (k - 1))] 2\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "have \"(1 + ord_of_nat (n-1)) = ord_of_nat n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + ord_of_nat (n - 1) = ord_of_nat n", "using ord_of_minus_1 [OF \\<open>n > 0\\<close>]"], ["proof (prove)\nusing this:\n  ord_of_nat n = ZFC_in_HOL.succ (ord_of_nat (n - 1))\n\ngoal (1 subgoal):\n 1. 1 + ord_of_nat (n - 1) = ord_of_nat n", "by (simp add: one_V_def)"], ["proof (state)\nthis:\n  1 + ord_of_nat (n - 1) = ord_of_nat n\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "ultimately"], ["proof (chain)\npicking this:\n  partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n   [\\<omega> \\<up> (1 + ord_of_nat (n - 1)), ord_of_nat (2 ^ (k - 1))] 2\n  1 + ord_of_nat (n - 1) = ord_of_nat n", "have \"partn_lst_VWF (\\<omega>\\<up>(n*k)) [\\<omega> \\<up> n, ord_of_nat (2 ^ (k-1))] 2\""], ["proof (prove)\nusing this:\n  partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n   [\\<omega> \\<up> (1 + ord_of_nat (n - 1)), ord_of_nat (2 ^ (k - 1))] 2\n  1 + ord_of_nat (n - 1) = ord_of_nat n\n\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat (2 ^ (k - 1))] 2", "by simp"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n   [\\<omega> \\<up> ord_of_nat n, ord_of_nat (2 ^ (k - 1))] 2\n\ngoal (1 subgoal):\n 1. \\<not> (n = 0 \\<or> k = 0) \\<Longrightarrow>\n    partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "then"], ["proof (chain)\npicking this:\n  partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n   [\\<omega> \\<up> ord_of_nat n, ord_of_nat (2 ^ (k - 1))] 2", "show ?thesis"], ["proof (prove)\nusing this:\n  partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n   [\\<omega> \\<up> ord_of_nat n, ord_of_nat (2 ^ (k - 1))] 2\n\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "using power_gt_expt [of 2 \"k-1\"]"], ["proof (prove)\nusing this:\n  partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n   [\\<omega> \\<up> ord_of_nat n, ord_of_nat (2 ^ (k - 1))] 2\n  Suc 0 < 2 \\<Longrightarrow> k - 1 < 2 ^ (k - 1)\n\ngoal (1 subgoal):\n 1. partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n     [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2", "by (force simp: less_Suc_eq intro: partn_lst_less)"], ["proof (state)\nthis:\n  partn_lst_VWF (\\<omega> \\<up> ord_of_nat (n * k))\n   [\\<omega> \\<up> ord_of_nat n, ord_of_nat k] 2\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}