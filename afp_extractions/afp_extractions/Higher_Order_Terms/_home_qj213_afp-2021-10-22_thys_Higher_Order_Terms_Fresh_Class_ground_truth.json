{"file_name": "/home/qj213/afp-2021-10-22/thys/Higher_Order_Terms/Fresh_Class.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Higher_Order_Terms", "problem_names": ["lemma [code]: \"fresh_frun m S = fst (run_state m (fresh_fNext S))\"", "lemma [code]: \"fresh_run m S = fst (run_state m (fresh_Next S))\""], "translations": [["", "lemma [code]: \"fresh_frun m S = fst (run_state m (fresh_fNext S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_frun m S = fst (run_state m (fresh_fNext S))", "by (simp add: fresh_fNext_def fresh_frun_def)"], ["", "lemma [code]: \"fresh_run m S = fst (run_state m (fresh_Next S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_run m S = fst (run_state m (fresh_Next S))", "by (simp add: fresh_Next_def fresh_run_def)"], ["", "instantiation nat :: fresh begin"], ["", "definition default_nat :: nat where\n\"default_nat = 0\""], ["", "definition next_nat where\n\"next_nat = Suc\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(nat, fresh_class)", "by intro_classes (auto simp: next_nat_def)"], ["", "end"], ["", "instantiation char :: default\nbegin"], ["", "definition default_char :: char where\n\"default_char = CHR ''_''\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(char, default_class)", ".."], ["", "end"], ["", "instantiation name :: fresh begin"], ["", "definition default_name where\n\"default_name = Name ''_''\""], ["", "definition next_name where\n\"next_name xs = Name.append xs default\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(name, fresh_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x < next x", "fix v :: name"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x < next x", "show \"v < next v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v < next v", "unfolding next_name_def default_name_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v < Name.append v (Name ''_'')", "by (rule name_append_less) simp"], ["proof (state)\nthis:\n  v < next v\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "export_code\n  fresh_create fresh_Next fresh_fNext fresh_frun fresh_run\n  checking Scala? SML?"], ["", "end"]]}