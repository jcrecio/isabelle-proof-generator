{"file_name": "/home/qj213/afp-2021-10-22/thys/Higher_Order_Terms/Fresh_Monad.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Higher_Order_Terms", "problem_names": ["lemma update_next_strict_mono[simp, intro]: \"strict_mono_state update_next\"", "lemma update_next_mono[simp, intro]: \"mono_state update_next\"", "lemma create_alt_def[code]: \"create = State (\\<lambda>a. (next a, next a))\"", "lemma next_ge_all: \"finite S \\<Longrightarrow> fresh_in S s \\<Longrightarrow> next s \\<notin> S\"", "lemma Next_ge_max: \"finite S \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow> Next S > Max S\"", "lemma Next_not_member_subset: \"finite S' \\<Longrightarrow> S \\<subseteq> S' \\<Longrightarrow> Next S' \\<notin> S\"", "lemma Next_not_member: \"finite S \\<Longrightarrow> Next S \\<notin> S\"", "lemma Next_geq_not_member: \"finite S \\<Longrightarrow> s \\<ge> Next S \\<Longrightarrow> s \\<notin> S\"", "lemma next_not_member: \"finite S \\<Longrightarrow> s \\<ge> Next S \\<Longrightarrow> next s \\<notin> S\"", "lemma create_mono[simp, intro]: \"mono_state create\"", "lemma create_strict_mono[simp, intro]: \"strict_mono_state create\"", "lemma next_ge_fall: \"fresh_fin S s \\<Longrightarrow> next s |\\<notin>| S\"", "lemma fNext_ge_max: \"S \\<noteq> {||} \\<Longrightarrow> fNext S > fMax S\"", "lemma next_not_fmember: \"s \\<ge> fNext S \\<Longrightarrow> next s |\\<notin>| S\"", "lemma fNext_geq_not_member: \"s \\<ge> fNext S \\<Longrightarrow> s |\\<notin>| S\"", "lemma fNext_not_member: \"fNext S |\\<notin>| S\"", "lemma fNext_not_member_subset: \"S |\\<subseteq>| S' \\<Longrightarrow> fNext S' |\\<notin>| S\""], "translations": [["", "lemma update_next_strict_mono[simp, intro]: \"strict_mono_state update_next\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono_state update_next", "using next_ge"], ["proof (prove)\nusing this:\n  ?x < next ?x\n\ngoal (1 subgoal):\n 1. strict_mono_state update_next", "by (auto intro: update_strict_mono)"], ["", "lemma update_next_mono[simp, intro]: \"mono_state update_next\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono_state update_next", "by (rule strict_mono_implies_mono) (rule update_next_strict_mono)"], ["", "definition create :: \"('a, 'a) state\" where\n\"create = update_next \\<bind> (\\<lambda>_. State_Monad.get)\""], ["", "lemma create_alt_def[code]: \"create = State (\\<lambda>a. (next a, next a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. create = State (\\<lambda>a. (next a, next a))", "unfolding create_def State_Monad.update_def State_Monad.get_def State_Monad.set_def State_Monad.bind_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. State\n     (\\<lambda>s.\n         case run_state\n               (State\n                 (\\<lambda>s.\n                     case run_state (State (\\<lambda>s. (s, s))) s of\n                     (a, x) \\<Rightarrow>\n                       run_state\n                        (((\\<lambda>s'.\n                              State (\\<lambda>_. ((), s'))) \\<circ>\n                          next)\n                          a)\n                        x))\n               s of\n         (a, x) \\<Rightarrow> run_state (State (\\<lambda>s. (s, s))) x) =\n    State (\\<lambda>a. (next a, next a))", "by simp"], ["", "abbreviation fresh_in :: \"'a set \\<Rightarrow> 'a \\<Rightarrow> bool\" where\n\"fresh_in S s \\<equiv> Ball S ((\\<ge>) s)\""], ["", "lemma next_ge_all: \"finite S \\<Longrightarrow> fresh_in S s \\<Longrightarrow> next s \\<notin> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; \\<forall>y\\<in>S. y \\<le> s\\<rbrakk>\n    \\<Longrightarrow> next s \\<notin> S", "by (metis antisym less_imp_le less_irrefl next_ge)"], ["", "definition Next :: \"'a set \\<Rightarrow> 'a\" where\n\"Next S = (if S = {} then arb else next (Max S))\""], ["", "lemma Next_ge_max: \"finite S \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow> Next S > Max S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; S \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max S < Next S", "unfolding Next_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; S \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max S < (if S = {} then arb else next (Max S))", "using next_ge"], ["proof (prove)\nusing this:\n  ?x < next ?x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; S \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max S < (if S = {} then arb else next (Max S))", "by simp"], ["", "lemma Next_not_member_subset: \"finite S' \\<Longrightarrow> S \\<subseteq> S' \\<Longrightarrow> Next S' \\<notin> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S'; S \\<subseteq> S'\\<rbrakk>\n    \\<Longrightarrow> Next S' \\<notin> S", "unfolding Next_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S'; S \\<subseteq> S'\\<rbrakk>\n    \\<Longrightarrow> (if S' = {} then arb else next (Max S')) \\<notin> S", "using next_ge"], ["proof (prove)\nusing this:\n  ?x < next ?x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S'; S \\<subseteq> S'\\<rbrakk>\n    \\<Longrightarrow> (if S' = {} then arb else next (Max S')) \\<notin> S", "by (metis Max_ge Max_mono empty_iff finite_subset leD less_le_trans subset_empty)"], ["", "lemma Next_not_member: \"finite S \\<Longrightarrow> Next S \\<notin> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow> Next S \\<notin> S", "by (rule Next_not_member_subset) auto"], ["", "lemma Next_geq_not_member: \"finite S \\<Longrightarrow> s \\<ge> Next S \\<Longrightarrow> s \\<notin> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; Next S \\<le> s\\<rbrakk>\n    \\<Longrightarrow> s \\<notin> S", "unfolding Next_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S;\n     (if S = {} then arb else next (Max S)) \\<le> s\\<rbrakk>\n    \\<Longrightarrow> s \\<notin> S", "using next_ge"], ["proof (prove)\nusing this:\n  ?x < next ?x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S;\n     (if S = {} then arb else next (Max S)) \\<le> s\\<rbrakk>\n    \\<Longrightarrow> s \\<notin> S", "by (metis (full_types) Max_ge all_not_in_conv leD le_less_trans)"], ["", "lemma next_not_member: \"finite S \\<Longrightarrow> s \\<ge> Next S \\<Longrightarrow> next s \\<notin> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; Next S \\<le> s\\<rbrakk>\n    \\<Longrightarrow> next s \\<notin> S", "by (meson Next_geq_not_member less_imp_le next_ge order_trans)"], ["", "lemma create_mono[simp, intro]: \"mono_state create\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono_state create", "unfolding create_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mono_state (update_next \\<bind> (\\<lambda>_. State_Monad.get))", "by (auto intro: bind_mono_strong)"], ["", "lemma create_strict_mono[simp, intro]: \"strict_mono_state create\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono_state create", "unfolding create_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono_state (update_next \\<bind> (\\<lambda>_. State_Monad.get))", "by (rule bind_strict_mono_strong2) auto"], ["", "abbreviation run_fresh where\n\"run_fresh m S \\<equiv> fst (run_state m (Next S))\""], ["", "abbreviation fresh_fin :: \"'a fset \\<Rightarrow> 'a \\<Rightarrow> bool\" where\n\"fresh_fin S s \\<equiv> fBall S ((\\<ge>) s)\""], ["", "context includes fset.lifting begin"], ["", "lemma next_ge_fall: \"fresh_fin S s \\<Longrightarrow> next s |\\<notin>| S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fBall S (\\<lambda>y. y \\<le> s) \\<Longrightarrow> next s |\\<notin>| S", "by (transfer fixing: \"next\") (rule next_ge_all)"], ["", "lift_definition fNext :: \"'a fset \\<Rightarrow> 'a\" is Next"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma fNext_ge_max: \"S \\<noteq> {||} \\<Longrightarrow> fNext S > fMax S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<noteq> {||} \\<Longrightarrow> fMax S < fNext S", "by transfer (rule Next_ge_max)"], ["", "lemma next_not_fmember: \"s \\<ge> fNext S \\<Longrightarrow> next s |\\<notin>| S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fNext S \\<le> s \\<Longrightarrow> next s |\\<notin>| S", "by transfer (rule next_not_member)"], ["", "lemma fNext_geq_not_member: \"s \\<ge> fNext S \\<Longrightarrow> s |\\<notin>| S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fNext S \\<le> s \\<Longrightarrow> s |\\<notin>| S", "by transfer (rule Next_geq_not_member)"], ["", "lemma fNext_not_member: \"fNext S |\\<notin>| S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fNext S |\\<notin>| S", "by transfer (rule Next_not_member)"], ["", "lemma fNext_not_member_subset: \"S |\\<subseteq>| S' \\<Longrightarrow> fNext S' |\\<notin>| S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S |\\<subseteq>| S' \\<Longrightarrow> fNext S' |\\<notin>| S", "by transfer (rule Next_not_member_subset)"], ["", "abbreviation frun_fresh where\n\"frun_fresh m S \\<equiv> fst (run_state m (fNext S))\""], ["", "end"], ["", "end"], ["", "end"]]}