{"file_name": "/home/qj213/afp-2021-10-22/thys/Higher_Order_Terms/Find_First.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Higher_Order_Terms", "problem_names": ["lemma find_first_correct:\n  assumes \"find_first x xs = Some i\"\n  shows \"i < length xs\" \"xs ! i = x\" \"x \\<notin> set (take i xs)\"", "lemma find_first_none: \"x \\<notin> set xs \\<Longrightarrow> find_first x xs = None\"", "lemma find_first_some_strong:\n  assumes \"x \\<in> set (take n xs)\" \"n \\<le> length xs\"\n  obtains i where \"find_first x xs = Some i\" \"i < n\"", "lemma find_first_some:\n  assumes \"x \\<in> set xs\"\n  obtains i where \"find_first x xs = Some i\" \"i < length xs\"", "lemma find_first_some_index: \"i < length xs \\<Longrightarrow> distinct xs \\<Longrightarrow> find_first (xs ! i) xs = Some i\"", "lemma find_first_append:\n  \"find_first x (ys @ zs) =\n    (case find_first x ys of None \\<Rightarrow> map_option (\\<lambda>i. i + length ys) (find_first x zs) | Some a \\<Rightarrow> Some a)\"", "lemma find_first_first:\n  assumes \"i < length xs\" \"x \\<notin> set (take i xs)\" \"xs ! i = x\"\n  shows \"find_first x xs = Some i\"", "lemma find_first_prefix:\n  assumes \"find_first x xs = Some i\" \"i < n\"\n  shows \"find_first x (take n xs) = Some i\"", "lemma find_first_later:\n  assumes \"i < length xs\" \"j < length xs\" \"i < j\"\n  assumes \"xs ! i = x\" \"xs ! j = x\"\n  shows \"find_first x xs \\<noteq> Some j\"", "lemma find_first_in_map:\n  assumes \"length xs \\<le> length ys\" \"find_first n xs = Some i\"\n  shows \"fmlookup (fmap_of_list (zip xs ys)) n = Some (ys ! i)\"", "lemma common_prefix_find:\n  assumes \"z \\<in> set (common_prefix xs ys)\"\n  shows \"find_first z xs = find_first z ys\"", "lemma find_first_insert_nth_eq:\n  assumes \"n \\<le> length xs\" \"x \\<notin> set (take n xs)\"\n  shows \"find_first x (insert_nth n x xs) = Some n\"", "lemma insert_nth_induct:\n  fixes P :: \"nat \\<Rightarrow> 'a \\<Rightarrow> 'a list \\<Rightarrow> bool\"\n    and a0 :: \"nat\"\n    and a1 :: \"'a\"\n    and a2 :: \"'a list\"\n  assumes \"\\<And>x xs. P 0 x xs\"\n    and \"\\<And>n x y ys. P n x ys \\<Longrightarrow> P (Suc n) x (y # ys)\"\n    and \"\\<And>n x. P (Suc n) x []\"\n  shows \"P a0 a1 a2\"", "lemma find_first_insert_nth_neq:\n  assumes \"x \\<noteq> y\"\n  shows \"find_first x (insert_nth n y xs) = map_option (\\<lambda>i. if i < n then i else Suc i) (find_first x xs)\""], "translations": [["", "lemma find_first_correct:\n  assumes \"find_first x xs = Some i\"\n  shows \"i < length xs\" \"xs ! i = x\" \"x \\<notin> set (take i xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length xs &&& xs ! i = x &&& x \\<notin> set (take i xs)", "using assms"], ["proof (prove)\nusing this:\n  find_first x xs = Some i\n\ngoal (1 subgoal):\n 1. i < length xs &&& xs ! i = x &&& x \\<notin> set (take i xs)", "proof (induction xs arbitrary: i)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>i. find_first x [] = Some i \\<Longrightarrow> i < length []\n 2. \\<And>i. find_first x [] = Some i \\<Longrightarrow> [] ! i = x\n 3. \\<And>i.\n       find_first x [] = Some i \\<Longrightarrow> x \\<notin> set (take i [])\n 4. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> i < length (a # xs)\n 5. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = x\n 6. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> set (take i (a # xs))", "case (Cons y ys)"], ["proof (state)\nthis:\n  find_first x ys = Some ?i \\<Longrightarrow> ?i < length ys\n  find_first x ys = Some ?i \\<Longrightarrow> ys ! ?i = x\n  find_first x ys = Some ?i \\<Longrightarrow> x \\<notin> set (take ?i ys)\n\ngoal (6 subgoals):\n 1. \\<And>i. find_first x [] = Some i \\<Longrightarrow> i < length []\n 2. \\<And>i. find_first x [] = Some i \\<Longrightarrow> [] ! i = x\n 3. \\<And>i.\n       find_first x [] = Some i \\<Longrightarrow> x \\<notin> set (take i [])\n 4. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> i < length (a # xs)\n 5. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = x\n 6. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> set (take i (a # xs))", "{"], ["proof (state)\nthis:\n  find_first x ys = Some ?i \\<Longrightarrow> ?i < length ys\n  find_first x ys = Some ?i \\<Longrightarrow> ys ! ?i = x\n  find_first x ys = Some ?i \\<Longrightarrow> x \\<notin> set (take ?i ys)\n\ngoal (6 subgoals):\n 1. \\<And>i. find_first x [] = Some i \\<Longrightarrow> i < length []\n 2. \\<And>i. find_first x [] = Some i \\<Longrightarrow> [] ! i = x\n 3. \\<And>i.\n       find_first x [] = Some i \\<Longrightarrow> x \\<notin> set (take i [])\n 4. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> i < length (a # xs)\n 5. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = x\n 6. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> set (take i (a # xs))", "case 1"], ["proof (state)\nthis:\n  find_first x (y # ys) = Some i\n\ngoal (6 subgoals):\n 1. \\<And>i. find_first x [] = Some i \\<Longrightarrow> i < length []\n 2. \\<And>i. find_first x [] = Some i \\<Longrightarrow> [] ! i = x\n 3. \\<And>i.\n       find_first x [] = Some i \\<Longrightarrow> x \\<notin> set (take i [])\n 4. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> i < length (a # xs)\n 5. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = x\n 6. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> set (take i (a # xs))", "with Cons"], ["proof (chain)\npicking this:\n  find_first x ys = Some ?i \\<Longrightarrow> ?i < length ys\n  find_first x ys = Some ?i \\<Longrightarrow> ys ! ?i = x\n  find_first x ys = Some ?i \\<Longrightarrow> x \\<notin> set (take ?i ys)\n  find_first x (y # ys) = Some i", "show ?case"], ["proof (prove)\nusing this:\n  find_first x ys = Some ?i \\<Longrightarrow> ?i < length ys\n  find_first x ys = Some ?i \\<Longrightarrow> ys ! ?i = x\n  find_first x ys = Some ?i \\<Longrightarrow> x \\<notin> set (take ?i ys)\n  find_first x (y # ys) = Some i\n\ngoal (1 subgoal):\n 1. i < length (y # ys)", "by (cases \"x = y\") auto"], ["proof (state)\nthis:\n  i < length (y # ys)\n\ngoal (5 subgoals):\n 1. \\<And>i. find_first x [] = Some i \\<Longrightarrow> i < length []\n 2. \\<And>i. find_first x [] = Some i \\<Longrightarrow> [] ! i = x\n 3. \\<And>i.\n       find_first x [] = Some i \\<Longrightarrow> x \\<notin> set (take i [])\n 4. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = x\n 5. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> set (take i (a # xs))", "}"], ["proof (state)\nthis:\n  find_first x (y # ys) = Some ?ia2 \\<Longrightarrow> ?ia2 < length (y # ys)\n\ngoal (5 subgoals):\n 1. \\<And>i. find_first x [] = Some i \\<Longrightarrow> i < length []\n 2. \\<And>i. find_first x [] = Some i \\<Longrightarrow> [] ! i = x\n 3. \\<And>i.\n       find_first x [] = Some i \\<Longrightarrow> x \\<notin> set (take i [])\n 4. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = x\n 5. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> set (take i (a # xs))", "{"], ["proof (state)\nthis:\n  find_first x (y # ys) = Some ?ia2 \\<Longrightarrow> ?ia2 < length (y # ys)\n\ngoal (5 subgoals):\n 1. \\<And>i. find_first x [] = Some i \\<Longrightarrow> i < length []\n 2. \\<And>i. find_first x [] = Some i \\<Longrightarrow> [] ! i = x\n 3. \\<And>i.\n       find_first x [] = Some i \\<Longrightarrow> x \\<notin> set (take i [])\n 4. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = x\n 5. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> set (take i (a # xs))", "case 2"], ["proof (state)\nthis:\n  find_first x (y # ys) = Some i\n\ngoal (5 subgoals):\n 1. \\<And>i. find_first x [] = Some i \\<Longrightarrow> i < length []\n 2. \\<And>i. find_first x [] = Some i \\<Longrightarrow> [] ! i = x\n 3. \\<And>i.\n       find_first x [] = Some i \\<Longrightarrow> x \\<notin> set (take i [])\n 4. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = x\n 5. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> set (take i (a # xs))", "with Cons"], ["proof (chain)\npicking this:\n  find_first x ys = Some ?i \\<Longrightarrow> ?i < length ys\n  find_first x ys = Some ?i \\<Longrightarrow> ys ! ?i = x\n  find_first x ys = Some ?i \\<Longrightarrow> x \\<notin> set (take ?i ys)\n  find_first x (y # ys) = Some i", "show ?case"], ["proof (prove)\nusing this:\n  find_first x ys = Some ?i \\<Longrightarrow> ?i < length ys\n  find_first x ys = Some ?i \\<Longrightarrow> ys ! ?i = x\n  find_first x ys = Some ?i \\<Longrightarrow> x \\<notin> set (take ?i ys)\n  find_first x (y # ys) = Some i\n\ngoal (1 subgoal):\n 1. (y # ys) ! i = x", "by (cases \"x = y\") auto"], ["proof (state)\nthis:\n  (y # ys) ! i = x\n\ngoal (4 subgoals):\n 1. \\<And>i. find_first x [] = Some i \\<Longrightarrow> i < length []\n 2. \\<And>i. find_first x [] = Some i \\<Longrightarrow> [] ! i = x\n 3. \\<And>i.\n       find_first x [] = Some i \\<Longrightarrow> x \\<notin> set (take i [])\n 4. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> set (take i (a # xs))", "}"], ["proof (state)\nthis:\n  find_first x (y # ys) = Some ?ia2 \\<Longrightarrow> (y # ys) ! ?ia2 = x\n\ngoal (4 subgoals):\n 1. \\<And>i. find_first x [] = Some i \\<Longrightarrow> i < length []\n 2. \\<And>i. find_first x [] = Some i \\<Longrightarrow> [] ! i = x\n 3. \\<And>i.\n       find_first x [] = Some i \\<Longrightarrow> x \\<notin> set (take i [])\n 4. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> set (take i (a # xs))", "{"], ["proof (state)\nthis:\n  find_first x (y # ys) = Some ?ia2 \\<Longrightarrow> (y # ys) ! ?ia2 = x\n\ngoal (4 subgoals):\n 1. \\<And>i. find_first x [] = Some i \\<Longrightarrow> i < length []\n 2. \\<And>i. find_first x [] = Some i \\<Longrightarrow> [] ! i = x\n 3. \\<And>i.\n       find_first x [] = Some i \\<Longrightarrow> x \\<notin> set (take i [])\n 4. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> set (take i (a # xs))", "case 3"], ["proof (state)\nthis:\n  find_first x (y # ys) = Some i\n\ngoal (4 subgoals):\n 1. \\<And>i. find_first x [] = Some i \\<Longrightarrow> i < length []\n 2. \\<And>i. find_first x [] = Some i \\<Longrightarrow> [] ! i = x\n 3. \\<And>i.\n       find_first x [] = Some i \\<Longrightarrow> x \\<notin> set (take i [])\n 4. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   find_first x xs = Some i \\<Longrightarrow> i < length xs;\n        \\<And>i. find_first x xs = Some i \\<Longrightarrow> xs ! i = x;\n        \\<And>i.\n           find_first x xs = Some i \\<Longrightarrow>\n           x \\<notin> set (take i xs);\n        find_first x (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> set (take i (a # xs))", "with Cons"], ["proof (chain)\npicking this:\n  find_first x ys = Some ?i \\<Longrightarrow> ?i < length ys\n  find_first x ys = Some ?i \\<Longrightarrow> ys ! ?i = x\n  find_first x ys = Some ?i \\<Longrightarrow> x \\<notin> set (take ?i ys)\n  find_first x (y # ys) = Some i", "show ?case"], ["proof (prove)\nusing this:\n  find_first x ys = Some ?i \\<Longrightarrow> ?i < length ys\n  find_first x ys = Some ?i \\<Longrightarrow> ys ! ?i = x\n  find_first x ys = Some ?i \\<Longrightarrow> x \\<notin> set (take ?i ys)\n  find_first x (y # ys) = Some i\n\ngoal (1 subgoal):\n 1. x \\<notin> set (take i (y # ys))", "by (cases \"x = y\") auto"], ["proof (state)\nthis:\n  x \\<notin> set (take i (y # ys))\n\ngoal (3 subgoals):\n 1. \\<And>i. find_first x [] = Some i \\<Longrightarrow> i < length []\n 2. \\<And>i. find_first x [] = Some i \\<Longrightarrow> [] ! i = x\n 3. \\<And>i.\n       find_first x [] = Some i \\<Longrightarrow> x \\<notin> set (take i [])", "}"], ["proof (state)\nthis:\n  find_first x (y # ys) = Some ?ia2 \\<Longrightarrow>\n  x \\<notin> set (take ?ia2 (y # ys))\n\ngoal (3 subgoals):\n 1. \\<And>i. find_first x [] = Some i \\<Longrightarrow> i < length []\n 2. \\<And>i. find_first x [] = Some i \\<Longrightarrow> [] ! i = x\n 3. \\<And>i.\n       find_first x [] = Some i \\<Longrightarrow> x \\<notin> set (take i [])", "qed auto"], ["", "lemma find_first_none: \"x \\<notin> set xs \\<Longrightarrow> find_first x xs = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> set xs \\<Longrightarrow> find_first x xs = None", "by (induct xs) auto"], ["", "lemma find_first_some_strong:\n  assumes \"x \\<in> set (take n xs)\" \"n \\<le> length xs\"\n  obtains i where \"find_first x xs = Some i\" \"i < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>find_first x xs = Some i; i < n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> set (take n xs)\n  n \\<le> length xs\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>find_first x xs = Some i; i < n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induction xs arbitrary: thesis n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>thesis n.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>find_first x [] = Some i; i < n\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        x \\<in> set (take n []); n \\<le> length []\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a xs thesis n.\n       \\<lbrakk>\\<And>thesis n.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>find_first x xs = Some i;\n                                i < n\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    x \\<in> set (take n xs); n \\<le> length xs\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>i.\n           \\<lbrakk>find_first x (a # xs) = Some i; i < n\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        x \\<in> set (take n (a # xs)); n \\<le> length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Cons y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>find_first x ys = Some i; i < ?n\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   x \\<in> set (take ?n ys); ?n \\<le> length ys\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>find_first x (y # ys) = Some ?i; ?i < n\\<rbrakk>\n  \\<Longrightarrow> thesis\n  x \\<in> set (take n (y # ys))\n  n \\<le> length (y # ys)\n\ngoal (2 subgoals):\n 1. \\<And>thesis n.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>find_first x [] = Some i; i < n\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        x \\<in> set (take n []); n \\<le> length []\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a xs thesis n.\n       \\<lbrakk>\\<And>thesis n.\n                   \\<lbrakk>\\<And>i.\n                               \\<lbrakk>find_first x xs = Some i;\n                                i < n\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    x \\<in> set (take n xs); n \\<le> length xs\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>i.\n           \\<lbrakk>find_first x (a # xs) = Some i; i < n\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        x \\<in> set (take n (a # xs)); n \\<le> length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> thesis", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"x = y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> thesis\n 2. x \\<noteq> y \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  x = y\n\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> thesis\n 2. x \\<noteq> y \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule Cons.prems)"], ["proof (state)\ngoal (2 subgoals):\n 1. find_first x (y # ys) = Some ?i\n 2. ?i < n", "show \"find_first x (y # ys) = Some 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_first x (y # ys) = Some 0", "unfolding \\<open>x = y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. find_first y (y # ys) = Some 0", "by simp"], ["proof (state)\nthis:\n  find_first x (y # ys) = Some 0\n\ngoal (1 subgoal):\n 1. 0 < n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < n", "show \"0 < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>find_first x ys = Some i; i < ?n\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   x \\<in> set (take ?n ys); ?n \\<le> length ys\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>find_first x (y # ys) = Some ?i; ?i < n\\<rbrakk>\n  \\<Longrightarrow> thesis\n  x \\<in> set (take n (y # ys))\n  n \\<le> length (y # ys)\n\ngoal (1 subgoal):\n 1. 0 < n", "by (metis length_pos_if_in_set length_take min.absorb2)"], ["proof (state)\nthis:\n  0 < n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule Cons.IH)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>find_first x ys = Some i; i < ?n\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. x \\<in> set (take ?n ys)\n 3. ?n \\<le> length ys", "fix i"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>find_first x ys = Some i; i < ?n\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. x \\<in> set (take ?n ys)\n 3. ?n \\<le> length ys", "assume \"find_first x ys = Some i\" \"i < n - 1\""], ["proof (state)\nthis:\n  find_first x ys = Some i\n  i < n - 1\n\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>find_first x ys = Some i; i < ?n\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. x \\<in> set (take ?n ys)\n 3. ?n \\<le> length ys", "with False"], ["proof (chain)\npicking this:\n  x \\<noteq> y\n  find_first x ys = Some i\n  i < n - 1", "have \"find_first x (y # ys) = Some (Suc i)\" \"Suc i < n\""], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  find_first x ys = Some i\n  i < n - 1\n\ngoal (1 subgoal):\n 1. find_first x (y # ys) = Some (Suc i) &&& Suc i < n", "using False"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  find_first x ys = Some i\n  i < n - 1\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. find_first x (y # ys) = Some (Suc i) &&& Suc i < n", "by auto"], ["proof (state)\nthis:\n  find_first x (y # ys) = Some (Suc i)\n  Suc i < n\n\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>find_first x ys = Some i; i < ?n\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. x \\<in> set (take ?n ys)\n 3. ?n \\<le> length ys", "thus thesis"], ["proof (prove)\nusing this:\n  find_first x (y # ys) = Some (Suc i)\n  Suc i < n\n\ngoal (1 subgoal):\n 1. thesis", "using Cons"], ["proof (prove)\nusing this:\n  find_first x (y # ys) = Some (Suc i)\n  Suc i < n\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>find_first x ys = Some i; i < ?n\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   x \\<in> set (take ?n ys); ?n \\<le> length ys\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>find_first x (y # ys) = Some ?i; ?i < n\\<rbrakk>\n  \\<Longrightarrow> thesis\n  x \\<in> set (take n (y # ys))\n  n \\<le> length (y # ys)\n\ngoal (1 subgoal):\n 1. thesis", "by metis"], ["proof (state)\nthis:\n  thesis\n\ngoal (2 subgoals):\n 1. x \\<in> set (take (n - 1) ys)\n 2. n - 1 \\<le> length ys", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> set (take (n - 1) ys)\n 2. n - 1 \\<le> length ys", "show \"x \\<in> set (take (n - 1) ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (take (n - 1) ys)", "using Cons False"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>find_first x ys = Some i; i < ?n\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   x \\<in> set (take ?n ys); ?n \\<le> length ys\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>find_first x (y # ys) = Some ?i; ?i < n\\<rbrakk>\n  \\<Longrightarrow> thesis\n  x \\<in> set (take n (y # ys))\n  n \\<le> length (y # ys)\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x \\<in> set (take (n - 1) ys)", "by (metis empty_iff list.set(1) set_ConsD take_Cons')"], ["proof (state)\nthis:\n  x \\<in> set (take (n - 1) ys)\n\ngoal (1 subgoal):\n 1. n - 1 \\<le> length ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n - 1 \\<le> length ys", "show \"n - 1 \\<le> length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n - 1 \\<le> length ys", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>find_first x ys = Some i; i < ?n\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   x \\<in> set (take ?n ys); ?n \\<le> length ys\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>find_first x (y # ys) = Some ?i; ?i < n\\<rbrakk>\n  \\<Longrightarrow> thesis\n  x \\<in> set (take n (y # ys))\n  n \\<le> length (y # ys)\n\ngoal (1 subgoal):\n 1. n - 1 \\<le> length ys", "by (metis One_nat_def le_diff_conv list.size(4))"], ["proof (state)\nthis:\n  n - 1 \\<le> length ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>thesis n.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>find_first x [] = Some i; i < n\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        x \\<in> set (take n []); n \\<le> length []\\<rbrakk>\n       \\<Longrightarrow> thesis", "qed simp"], ["", "lemma find_first_some:\n  assumes \"x \\<in> set xs\"\n  obtains i where \"find_first x xs = Some i\" \"i < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>find_first x xs = Some i; i < length xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>find_first x xs = Some i; i < length xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis order_refl take_all find_first_some_strong)"], ["", "lemma find_first_some_index: \"i < length xs \\<Longrightarrow> distinct xs \\<Longrightarrow> find_first (xs ! i) xs = Some i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length xs; distinct xs\\<rbrakk>\n    \\<Longrightarrow> find_first (xs ! i) xs = Some i", "proof (induction xs arbitrary: i)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>i < length []; distinct []\\<rbrakk>\n       \\<Longrightarrow> find_first ([] ! i) [] = Some i\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; distinct xs\\<rbrakk>\n                   \\<Longrightarrow> find_first (xs ! i) xs = Some i;\n        i < length (a # xs); distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> find_first ((a # xs) ! i) (a # xs) = Some i", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>?i < length xs; distinct xs\\<rbrakk>\n  \\<Longrightarrow> find_first (xs ! ?i) xs = Some ?i\n  i < length (x # xs)\n  distinct (x # xs)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>i < length []; distinct []\\<rbrakk>\n       \\<Longrightarrow> find_first ([] ! i) [] = Some i\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; distinct xs\\<rbrakk>\n                   \\<Longrightarrow> find_first (xs ! i) xs = Some i;\n        i < length (a # xs); distinct (a # xs)\\<rbrakk>\n       \\<Longrightarrow> find_first ((a # xs) ! i) (a # xs) = Some i", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. find_first ((x # xs) ! i) (x # xs) = Some i", "proof (cases \"i = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> find_first ((x # xs) ! i) (x # xs) = Some i\n 2. i \\<noteq> 0 \\<Longrightarrow>\n    find_first ((x # xs) ! i) (x # xs) = Some i", "case False"], ["proof (state)\nthis:\n  i \\<noteq> 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> find_first ((x # xs) ! i) (x # xs) = Some i\n 2. i \\<noteq> 0 \\<Longrightarrow>\n    find_first ((x # xs) ! i) (x # xs) = Some i", "have \"find_first ((x # xs) ! i) (x # xs) = map_option Suc (Some (i - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_first ((x # xs) ! i) (x # xs) = map_option Suc (Some (i - 1))", "using Cons False"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < length xs; distinct xs\\<rbrakk>\n  \\<Longrightarrow> find_first (xs ! ?i) xs = Some ?i\n  i < length (x # xs)\n  distinct (x # xs)\n  i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. find_first ((x # xs) ! i) (x # xs) = map_option Suc (Some (i - 1))", "by auto"], ["proof (state)\nthis:\n  find_first ((x # xs) ! i) (x # xs) = map_option Suc (Some (i - 1))\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> find_first ((x # xs) ! i) (x # xs) = Some i\n 2. i \\<noteq> 0 \\<Longrightarrow>\n    find_first ((x # xs) ! i) (x # xs) = Some i", "also"], ["proof (state)\nthis:\n  find_first ((x # xs) ! i) (x # xs) = map_option Suc (Some (i - 1))\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> find_first ((x # xs) ! i) (x # xs) = Some i\n 2. i \\<noteq> 0 \\<Longrightarrow>\n    find_first ((x # xs) ! i) (x # xs) = Some i", "have \"\\<dots> = Some i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_option Suc (Some (i - 1)) = Some i", "using False"], ["proof (prove)\nusing this:\n  i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. map_option Suc (Some (i - 1)) = Some i", "by auto"], ["proof (state)\nthis:\n  map_option Suc (Some (i - 1)) = Some i\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> find_first ((x # xs) ! i) (x # xs) = Some i\n 2. i \\<noteq> 0 \\<Longrightarrow>\n    find_first ((x # xs) ! i) (x # xs) = Some i", "finally"], ["proof (chain)\npicking this:\n  find_first ((x # xs) ! i) (x # xs) = Some i", "show ?thesis"], ["proof (prove)\nusing this:\n  find_first ((x # xs) ! i) (x # xs) = Some i\n\ngoal (1 subgoal):\n 1. find_first ((x # xs) ! i) (x # xs) = Some i", "."], ["proof (state)\nthis:\n  find_first ((x # xs) ! i) (x # xs) = Some i\n\ngoal (1 subgoal):\n 1. i = 0 \\<Longrightarrow> find_first ((x # xs) ! i) (x # xs) = Some i", "qed simp"], ["proof (state)\nthis:\n  find_first ((x # xs) ! i) (x # xs) = Some i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < length []; distinct []\\<rbrakk>\n       \\<Longrightarrow> find_first ([] ! i) [] = Some i", "qed auto"], ["", "lemma find_first_append:\n  \"find_first x (ys @ zs) =\n    (case find_first x ys of None \\<Rightarrow> map_option (\\<lambda>i. i + length ys) (find_first x zs) | Some a \\<Rightarrow> Some a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_first x (ys @ zs) =\n    (case find_first x ys of\n     None \\<Rightarrow>\n       map_option (\\<lambda>i. i + length ys) (find_first x zs)\n     | Some a \\<Rightarrow> Some a)", "by (induct ys) (auto simp: option.map_comp comp_def map_option.identity split: option.splits)"], ["", "lemma find_first_first:\n  assumes \"i < length xs\" \"x \\<notin> set (take i xs)\" \"xs ! i = x\"\n  shows \"find_first x xs = Some i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_first x xs = Some i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. find_first x xs = Some i", "let ?ys = \"take i xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. find_first x xs = Some i", "let ?zs = \"drop i xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. find_first x xs = Some i", "have \"?zs ! 0 = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop i xs ! 0 = x", "using assms"], ["proof (prove)\nusing this:\n  i < length xs\n  x \\<notin> set (take i xs)\n  xs ! i = x\n\ngoal (1 subgoal):\n 1. drop i xs ! 0 = x", "by simp"], ["proof (state)\nthis:\n  drop i xs ! 0 = x\n\ngoal (1 subgoal):\n 1. find_first x xs = Some i", "hence \"find_first x ?zs = Some 0\""], ["proof (prove)\nusing this:\n  drop i xs ! 0 = x\n\ngoal (1 subgoal):\n 1. find_first x (drop i xs) = Some 0", "using assms"], ["proof (prove)\nusing this:\n  drop i xs ! 0 = x\n  i < length xs\n  x \\<notin> set (take i xs)\n  xs ! i = x\n\ngoal (1 subgoal):\n 1. find_first x (drop i xs) = Some 0", "by (cases ?zs) auto"], ["proof (state)\nthis:\n  find_first x (drop i xs) = Some 0\n\ngoal (1 subgoal):\n 1. find_first x xs = Some i", "moreover"], ["proof (state)\nthis:\n  find_first x (drop i xs) = Some 0\n\ngoal (1 subgoal):\n 1. find_first x xs = Some i", "have \"find_first x ?ys = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_first x (take i xs) = None", "using assms"], ["proof (prove)\nusing this:\n  i < length xs\n  x \\<notin> set (take i xs)\n  xs ! i = x\n\ngoal (1 subgoal):\n 1. find_first x (take i xs) = None", "by (simp add: find_first_none)"], ["proof (state)\nthis:\n  find_first x (take i xs) = None\n\ngoal (1 subgoal):\n 1. find_first x xs = Some i", "ultimately"], ["proof (chain)\npicking this:\n  find_first x (drop i xs) = Some 0\n  find_first x (take i xs) = None", "have \"find_first x (?ys @ ?zs) = Some i\""], ["proof (prove)\nusing this:\n  find_first x (drop i xs) = Some 0\n  find_first x (take i xs) = None\n\ngoal (1 subgoal):\n 1. find_first x (take i xs @ drop i xs) = Some i", "unfolding find_first_append"], ["proof (prove)\nusing this:\n  find_first x (drop i xs) = Some 0\n  find_first x (take i xs) = None\n\ngoal (1 subgoal):\n 1. (case find_first x (take i xs) of\n     None \\<Rightarrow>\n       map_option (\\<lambda>ia. ia + length (take i xs))\n        (find_first x (drop i xs))\n     | Some x \\<Rightarrow> Some x) =\n    Some i", "using assms"], ["proof (prove)\nusing this:\n  find_first x (drop i xs) = Some 0\n  find_first x (take i xs) = None\n  i < length xs\n  x \\<notin> set (take i xs)\n  xs ! i = x\n\ngoal (1 subgoal):\n 1. (case find_first x (take i xs) of\n     None \\<Rightarrow>\n       map_option (\\<lambda>ia. ia + length (take i xs))\n        (find_first x (drop i xs))\n     | Some x \\<Rightarrow> Some x) =\n    Some i", "by simp"], ["proof (state)\nthis:\n  find_first x (take i xs @ drop i xs) = Some i\n\ngoal (1 subgoal):\n 1. find_first x xs = Some i", "thus ?thesis"], ["proof (prove)\nusing this:\n  find_first x (take i xs @ drop i xs) = Some i\n\ngoal (1 subgoal):\n 1. find_first x xs = Some i", "using assms"], ["proof (prove)\nusing this:\n  find_first x (take i xs @ drop i xs) = Some i\n  i < length xs\n  x \\<notin> set (take i xs)\n  xs ! i = x\n\ngoal (1 subgoal):\n 1. find_first x xs = Some i", "by simp"], ["proof (state)\nthis:\n  find_first x xs = Some i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma find_first_prefix:\n  assumes \"find_first x xs = Some i\" \"i < n\"\n  shows \"find_first x (take n xs) = Some i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_first x (take n xs) = Some i", "proof (rule find_first_first)"], ["proof (state)\ngoal (3 subgoals):\n 1. i < length (take n xs)\n 2. x \\<notin> set (take i (take n xs))\n 3. take n xs ! i = x", "show \"i < length (take n xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (take n xs)", "using assms"], ["proof (prove)\nusing this:\n  find_first x xs = Some i\n  i < n\n\ngoal (1 subgoal):\n 1. i < length (take n xs)", "by (simp add: find_first_correct)"], ["proof (state)\nthis:\n  i < length (take n xs)\n\ngoal (2 subgoals):\n 1. x \\<notin> set (take i (take n xs))\n 2. take n xs ! i = x", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<notin> set (take i (take n xs))\n 2. take n xs ! i = x", "have \"x \\<notin> set (take i xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> set (take i xs)", "using assms"], ["proof (prove)\nusing this:\n  find_first x xs = Some i\n  i < n\n\ngoal (1 subgoal):\n 1. x \\<notin> set (take i xs)", "by (simp add: find_first_correct)"], ["proof (state)\nthis:\n  x \\<notin> set (take i xs)\n\ngoal (2 subgoals):\n 1. x \\<notin> set (take i (take n xs))\n 2. take n xs ! i = x", "with assms"], ["proof (chain)\npicking this:\n  find_first x xs = Some i\n  i < n\n  x \\<notin> set (take i xs)", "show \"x \\<notin> set (take i (take n xs))\""], ["proof (prove)\nusing this:\n  find_first x xs = Some i\n  i < n\n  x \\<notin> set (take i xs)\n\ngoal (1 subgoal):\n 1. x \\<notin> set (take i (take n xs))", "by (simp add: min.absorb1)"], ["proof (state)\nthis:\n  x \\<notin> set (take i (take n xs))\n\ngoal (1 subgoal):\n 1. take n xs ! i = x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. take n xs ! i = x", "show \"take n xs ! i = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take n xs ! i = x", "using assms"], ["proof (prove)\nusing this:\n  find_first x xs = Some i\n  i < n\n\ngoal (1 subgoal):\n 1. take n xs ! i = x", "by (simp add: find_first_correct)"], ["proof (state)\nthis:\n  take n xs ! i = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma find_first_later:\n  assumes \"i < length xs\" \"j < length xs\" \"i < j\"\n  assumes \"xs ! i = x\" \"xs ! j = x\"\n  shows \"find_first x xs \\<noteq> Some j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_first x xs \\<noteq> Some j", "proof (cases \"x \\<in> set (take i xs)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> set (take i xs) \\<Longrightarrow>\n    find_first x xs \\<noteq> Some j\n 2. x \\<notin> set (take i xs) \\<Longrightarrow>\n    find_first x xs \\<noteq> Some j", "case True"], ["proof (state)\nthis:\n  x \\<in> set (take i xs)\n\ngoal (2 subgoals):\n 1. x \\<in> set (take i xs) \\<Longrightarrow>\n    find_first x xs \\<noteq> Some j\n 2. x \\<notin> set (take i xs) \\<Longrightarrow>\n    find_first x xs \\<noteq> Some j", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (take i xs)", "obtain k where \"find_first x xs = Some k\" \"k < i\""], ["proof (prove)\nusing this:\n  x \\<in> set (take i xs)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>find_first x xs = Some k; k < i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> set (take i xs)\n  i < length xs\n  j < length xs\n  i < j\n  xs ! i = x\n  xs ! j = x\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>find_first x xs = Some k; k < i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: find_first_some_strong)"], ["proof (state)\nthis:\n  find_first x xs = Some k\n  k < i\n\ngoal (2 subgoals):\n 1. x \\<in> set (take i xs) \\<Longrightarrow>\n    find_first x xs \\<noteq> Some j\n 2. x \\<notin> set (take i xs) \\<Longrightarrow>\n    find_first x xs \\<noteq> Some j", "thus ?thesis"], ["proof (prove)\nusing this:\n  find_first x xs = Some k\n  k < i\n\ngoal (1 subgoal):\n 1. find_first x xs \\<noteq> Some j", "using assms"], ["proof (prove)\nusing this:\n  find_first x xs = Some k\n  k < i\n  i < length xs\n  j < length xs\n  i < j\n  xs ! i = x\n  xs ! j = x\n\ngoal (1 subgoal):\n 1. find_first x xs \\<noteq> Some j", "by simp"], ["proof (state)\nthis:\n  find_first x xs \\<noteq> Some j\n\ngoal (1 subgoal):\n 1. x \\<notin> set (take i xs) \\<Longrightarrow>\n    find_first x xs \\<noteq> Some j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> set (take i xs) \\<Longrightarrow>\n    find_first x xs \\<noteq> Some j", "case False"], ["proof (state)\nthis:\n  x \\<notin> set (take i xs)\n\ngoal (1 subgoal):\n 1. x \\<notin> set (take i xs) \\<Longrightarrow>\n    find_first x xs \\<noteq> Some j", "hence \"find_first x xs = Some i\""], ["proof (prove)\nusing this:\n  x \\<notin> set (take i xs)\n\ngoal (1 subgoal):\n 1. find_first x xs = Some i", "using assms"], ["proof (prove)\nusing this:\n  x \\<notin> set (take i xs)\n  i < length xs\n  j < length xs\n  i < j\n  xs ! i = x\n  xs ! j = x\n\ngoal (1 subgoal):\n 1. find_first x xs = Some i", "by (simp add: find_first_first)"], ["proof (state)\nthis:\n  find_first x xs = Some i\n\ngoal (1 subgoal):\n 1. x \\<notin> set (take i xs) \\<Longrightarrow>\n    find_first x xs \\<noteq> Some j", "thus ?thesis"], ["proof (prove)\nusing this:\n  find_first x xs = Some i\n\ngoal (1 subgoal):\n 1. find_first x xs \\<noteq> Some j", "using assms"], ["proof (prove)\nusing this:\n  find_first x xs = Some i\n  i < length xs\n  j < length xs\n  i < j\n  xs ! i = x\n  xs ! j = x\n\ngoal (1 subgoal):\n 1. find_first x xs \\<noteq> Some j", "by simp"], ["proof (state)\nthis:\n  find_first x xs \\<noteq> Some j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma find_first_in_map:\n  assumes \"length xs \\<le> length ys\" \"find_first n xs = Some i\"\n  shows \"fmlookup (fmap_of_list (zip xs ys)) n = Some (ys ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fmlookup (fmap_of_list (zip xs ys)) n = Some (ys ! i)", "using assms"], ["proof (prove)\nusing this:\n  length xs \\<le> length ys\n  find_first n xs = Some i\n\ngoal (1 subgoal):\n 1. fmlookup (fmap_of_list (zip xs ys)) n = Some (ys ! i)", "proof (induction xs arbitrary: ys i)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys i.\n       \\<lbrakk>length [] \\<le> length ys; find_first n [] = Some i\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmap_of_list (zip [] ys)) n =\n                         Some (ys ! i)\n 2. \\<And>a xs ys i.\n       \\<lbrakk>\\<And>ys i.\n                   \\<lbrakk>length xs \\<le> length ys;\n                    find_first n xs = Some i\\<rbrakk>\n                   \\<Longrightarrow> fmlookup (fmap_of_list (zip xs ys)) n =\n                                     Some (ys ! i);\n        length (a # xs) \\<le> length ys;\n        find_first n (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmap_of_list (zip (a # xs) ys)) n =\n                         Some (ys ! i)", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>length xs \\<le> length ?ys; find_first n xs = Some ?i\\<rbrakk>\n  \\<Longrightarrow> fmlookup (fmap_of_list (zip xs ?ys)) n = Some (?ys ! ?i)\n  length (x # xs) \\<le> length ys\n  find_first n (x # xs) = Some i\n\ngoal (2 subgoals):\n 1. \\<And>ys i.\n       \\<lbrakk>length [] \\<le> length ys; find_first n [] = Some i\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmap_of_list (zip [] ys)) n =\n                         Some (ys ! i)\n 2. \\<And>a xs ys i.\n       \\<lbrakk>\\<And>ys i.\n                   \\<lbrakk>length xs \\<le> length ys;\n                    find_first n xs = Some i\\<rbrakk>\n                   \\<Longrightarrow> fmlookup (fmap_of_list (zip xs ys)) n =\n                                     Some (ys ! i);\n        length (a # xs) \\<le> length ys;\n        find_first n (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmap_of_list (zip (a # xs) ys)) n =\n                         Some (ys ! i)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>length xs \\<le> length ?ys; find_first n xs = Some ?i\\<rbrakk>\n  \\<Longrightarrow> fmlookup (fmap_of_list (zip xs ?ys)) n = Some (?ys ! ?i)\n  length (x # xs) \\<le> length ys\n  find_first n (x # xs) = Some i", "obtain y ys' where \"ys = y # ys'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>length xs \\<le> length ?ys; find_first n xs = Some ?i\\<rbrakk>\n  \\<Longrightarrow> fmlookup (fmap_of_list (zip xs ?ys)) n = Some (?ys ! ?i)\n  length (x # xs) \\<le> length ys\n  find_first n (x # xs) = Some i\n\ngoal (1 subgoal):\n 1. (\\<And>y ys'. ys = y # ys' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Skolem_list_nth le_0_eq length_greater_0_conv less_nat_zero_code list.set_cases listrel_Cons1 listrel_iff_nth nth_mem)"], ["proof (state)\nthis:\n  ys = y # ys'\n\ngoal (2 subgoals):\n 1. \\<And>ys i.\n       \\<lbrakk>length [] \\<le> length ys; find_first n [] = Some i\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmap_of_list (zip [] ys)) n =\n                         Some (ys ! i)\n 2. \\<And>a xs ys i.\n       \\<lbrakk>\\<And>ys i.\n                   \\<lbrakk>length xs \\<le> length ys;\n                    find_first n xs = Some i\\<rbrakk>\n                   \\<Longrightarrow> fmlookup (fmap_of_list (zip xs ys)) n =\n                                     Some (ys ! i);\n        length (a # xs) \\<le> length ys;\n        find_first n (a # xs) = Some i\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmap_of_list (zip (a # xs) ys)) n =\n                         Some (ys ! i)", "with Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>length xs \\<le> length ?ys; find_first n xs = Some ?i\\<rbrakk>\n  \\<Longrightarrow> fmlookup (fmap_of_list (zip xs ?ys)) n = Some (?ys ! ?i)\n  length (x # xs) \\<le> length ys\n  find_first n (x # xs) = Some i\n  ys = y # ys'", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>length xs \\<le> length ?ys; find_first n xs = Some ?i\\<rbrakk>\n  \\<Longrightarrow> fmlookup (fmap_of_list (zip xs ?ys)) n = Some (?ys ! ?i)\n  length (x # xs) \\<le> length ys\n  find_first n (x # xs) = Some i\n  ys = y # ys'\n\ngoal (1 subgoal):\n 1. fmlookup (fmap_of_list (zip (x # xs) ys)) n = Some (ys ! i)", "by (cases \"x = n\") auto"], ["proof (state)\nthis:\n  fmlookup (fmap_of_list (zip (x # xs) ys)) n = Some (ys ! i)\n\ngoal (1 subgoal):\n 1. \\<And>ys i.\n       \\<lbrakk>length [] \\<le> length ys; find_first n [] = Some i\\<rbrakk>\n       \\<Longrightarrow> fmlookup (fmap_of_list (zip [] ys)) n =\n                         Some (ys ! i)", "qed auto"], ["", "fun common_prefix where\n\"common_prefix (x # xs) (y # ys) = (if x = y then x # common_prefix xs ys else [])\" |\n\"common_prefix _ _ = []\""], ["", "lemma common_prefix_find:\n  assumes \"z \\<in> set (common_prefix xs ys)\"\n  shows \"find_first z xs = find_first z ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_first z xs = find_first z ys", "using assms"], ["proof (prove)\nusing this:\n  z \\<in> set (common_prefix xs ys)\n\ngoal (1 subgoal):\n 1. find_first z xs = find_first z ys", "by (induct xs ys rule: common_prefix.induct) auto"], ["", "lemma find_first_insert_nth_eq:\n  assumes \"n \\<le> length xs\" \"x \\<notin> set (take n xs)\"\n  shows \"find_first x (insert_nth n x xs) = Some n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_first x (insert_nth n x xs) = Some n", "using assms"], ["proof (prove)\nusing this:\n  n \\<le> length xs\n  x \\<notin> set (take n xs)\n\ngoal (1 subgoal):\n 1. find_first x (insert_nth n x xs) = Some n", "by (auto simp: find_first_append find_first_none split: option.splits)"], ["", "lemma insert_nth_induct:\n  fixes P :: \"nat \\<Rightarrow> 'a \\<Rightarrow> 'a list \\<Rightarrow> bool\"\n    and a0 :: \"nat\"\n    and a1 :: \"'a\"\n    and a2 :: \"'a list\"\n  assumes \"\\<And>x xs. P 0 x xs\"\n    and \"\\<And>n x y ys. P n x ys \\<Longrightarrow> P (Suc n) x (y # ys)\"\n    and \"\\<And>n x. P (Suc n) x []\"\n  shows \"P a0 a1 a2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P a0 a1 a2", "using assms"], ["proof (prove)\nusing this:\n  P 0 ?x ?xs\n  P ?n ?x ?ys \\<Longrightarrow> P (Suc ?n) ?x (?y # ?ys)\n  P (Suc ?n) ?x []\n\ngoal (1 subgoal):\n 1. P a0 a1 a2", "apply induction_schema"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>P a0 a1 a2.\n       \\<lbrakk>\\<And>x__ xs__.\n                   \\<lbrakk>a0 = 0; a1 = x__; a2 = xs__\\<rbrakk>\n                   \\<Longrightarrow> P;\n        \\<And>n__ x__ ys__ y__.\n           \\<lbrakk>a0 = Suc n__; a1 = x__; a2 = y__ # ys__\\<rbrakk>\n           \\<Longrightarrow> P;\n        \\<And>n__ x__.\n           \\<lbrakk>a0 = Suc n__; a1 = x__; a2 = []\\<rbrakk>\n           \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. wf ?R2\n 3. \\<And>n__ x__ ys__ y__.\n       ((n__, x__, ys__), Suc n__, x__, y__ # ys__) \\<in> ?R2", "apply pat_completeness"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf ?R2\n 2. \\<And>n__ x__ ys__ y__.\n       ((n__, x__, ys__), Suc n__, x__, y__ # ys__) \\<in> ?R2", "apply lexicographic_order"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma find_first_insert_nth_neq:\n  assumes \"x \\<noteq> y\"\n  shows \"find_first x (insert_nth n y xs) = map_option (\\<lambda>i. if i < n then i else Suc i) (find_first x xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_first x (insert_nth n y xs) =\n    map_option (\\<lambda>i. if i < n then i else Suc i) (find_first x xs)", "using assms"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. find_first x (insert_nth n y xs) =\n    map_option (\\<lambda>i. if i < n then i else Suc i) (find_first x xs)", "proof (induction n y xs rule: insert_nth_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xa xs.\n       x \\<noteq> xa \\<Longrightarrow>\n       find_first x (insert_nth 0 xa xs) =\n       map_option (\\<lambda>i. if i < 0 then i else Suc i) (find_first x xs)\n 2. \\<And>n xa y ys.\n       \\<lbrakk>x \\<noteq> xa \\<Longrightarrow>\n                find_first x (insert_nth n xa ys) =\n                map_option (\\<lambda>i. if i < n then i else Suc i)\n                 (find_first x ys);\n        x \\<noteq> xa\\<rbrakk>\n       \\<Longrightarrow> find_first x (insert_nth (Suc n) xa (y # ys)) =\n                         map_option\n                          (\\<lambda>i. if i < Suc n then i else Suc i)\n                          (find_first x (y # ys))\n 3. \\<And>n xa.\n       x \\<noteq> xa \\<Longrightarrow>\n       find_first x (insert_nth (Suc n) xa []) =\n       map_option (\\<lambda>i. if i < Suc n then i else Suc i)\n        (find_first x [])", "case 2"], ["proof (state)\nthis:\n  x \\<noteq> x_ \\<Longrightarrow>\n  find_first x (insert_nth n_ x_ ys_) =\n  map_option (\\<lambda>i. if i < n_ then i else Suc i) (find_first x ys_)\n  x \\<noteq> x_\n\ngoal (3 subgoals):\n 1. \\<And>xa xs.\n       x \\<noteq> xa \\<Longrightarrow>\n       find_first x (insert_nth 0 xa xs) =\n       map_option (\\<lambda>i. if i < 0 then i else Suc i) (find_first x xs)\n 2. \\<And>n xa y ys.\n       \\<lbrakk>x \\<noteq> xa \\<Longrightarrow>\n                find_first x (insert_nth n xa ys) =\n                map_option (\\<lambda>i. if i < n then i else Suc i)\n                 (find_first x ys);\n        x \\<noteq> xa\\<rbrakk>\n       \\<Longrightarrow> find_first x (insert_nth (Suc n) xa (y # ys)) =\n                         map_option\n                          (\\<lambda>i. if i < Suc n then i else Suc i)\n                          (find_first x (y # ys))\n 3. \\<And>n xa.\n       x \\<noteq> xa \\<Longrightarrow>\n       find_first x (insert_nth (Suc n) xa []) =\n       map_option (\\<lambda>i. if i < Suc n then i else Suc i)\n        (find_first x [])", "note insert_nth_take_drop[simp del]"], ["proof (state)\nthis:\n  insert_nth ?n ?x ?xs = take ?n ?xs @ [?x] @ drop ?n ?xs\n\ngoal (3 subgoals):\n 1. \\<And>xa xs.\n       x \\<noteq> xa \\<Longrightarrow>\n       find_first x (insert_nth 0 xa xs) =\n       map_option (\\<lambda>i. if i < 0 then i else Suc i) (find_first x xs)\n 2. \\<And>n xa y ys.\n       \\<lbrakk>x \\<noteq> xa \\<Longrightarrow>\n                find_first x (insert_nth n xa ys) =\n                map_option (\\<lambda>i. if i < n then i else Suc i)\n                 (find_first x ys);\n        x \\<noteq> xa\\<rbrakk>\n       \\<Longrightarrow> find_first x (insert_nth (Suc n) xa (y # ys)) =\n                         map_option\n                          (\\<lambda>i. if i < Suc n then i else Suc i)\n                          (find_first x (y # ys))\n 3. \\<And>n xa.\n       x \\<noteq> xa \\<Longrightarrow>\n       find_first x (insert_nth (Suc n) xa []) =\n       map_option (\\<lambda>i. if i < Suc n then i else Suc i)\n        (find_first x [])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. find_first x (insert_nth (Suc n_) x_ (y_ # ys_)) =\n    map_option (\\<lambda>i. if i < Suc n_ then i else Suc i)\n     (find_first x (y_ # ys_))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> y_ \\<Longrightarrow>\n    map_option Suc (find_first x (insert_nth n_ x_ ys_)) =\n    map_option (\\<lambda>i. if i < Suc n_ then i else Suc i)\n     (map_option Suc (find_first x ys_))", "apply (subst 2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<noteq> y_ \\<Longrightarrow> x \\<noteq> x_\n 2. x \\<noteq> y_ \\<Longrightarrow>\n    map_option Suc\n     (map_option (\\<lambda>i. if i < n_ then i else Suc i)\n       (find_first x ys_)) =\n    map_option (\\<lambda>i. if i < Suc n_ then i else Suc i)\n     (map_option Suc (find_first x ys_))", "apply (rule 2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> y_ \\<Longrightarrow>\n    map_option Suc\n     (map_option (\\<lambda>i. if i < n_ then i else Suc i)\n       (find_first x ys_)) =\n    map_option (\\<lambda>i. if i < Suc n_ then i else Suc i)\n     (map_option Suc (find_first x ys_))", "unfolding option.map_comp"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> y_ \\<Longrightarrow>\n    map_option (Suc \\<circ> (\\<lambda>i. if i < n_ then i else Suc i))\n     (find_first x ys_) =\n    map_option ((\\<lambda>i. if i < Suc n_ then i else Suc i) \\<circ> Suc)\n     (find_first x ys_)", "apply (rule option.map_cong0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>x \\<noteq> y_;\n        z \\<in> set_option (find_first x ys_)\\<rbrakk>\n       \\<Longrightarrow> (Suc \\<circ>\n                          (\\<lambda>i. if i < n_ then i else Suc i))\n                          z =\n                         ((\\<lambda>i.\n                              if i < Suc n_ then i else Suc i) \\<circ>\n                          Suc)\n                          z", "by auto"], ["proof (state)\nthis:\n  find_first x (insert_nth (Suc n_) x_ (y_ # ys_)) =\n  map_option (\\<lambda>i. if i < Suc n_ then i else Suc i)\n   (find_first x (y_ # ys_))\n\ngoal (2 subgoals):\n 1. \\<And>xa xs.\n       x \\<noteq> xa \\<Longrightarrow>\n       find_first x (insert_nth 0 xa xs) =\n       map_option (\\<lambda>i. if i < 0 then i else Suc i) (find_first x xs)\n 2. \\<And>n xa.\n       x \\<noteq> xa \\<Longrightarrow>\n       find_first x (insert_nth (Suc n) xa []) =\n       map_option (\\<lambda>i. if i < Suc n then i else Suc i)\n        (find_first x [])", "qed auto"], ["", "end"]]}