{"file_name": "/home/qj213/afp-2021-10-22/thys/Parity_Game/WinningRegion.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Parity_Game", "problem_names": ["lemma winning_regionI [intro]:\n  assumes \"v \\<in> V\" \"strategy p \\<sigma>\" \"winning_strategy p \\<sigma> v\"\n  shows \"v \\<in> winning_region p\"", "lemma winning_region_in_V [simp]: \"winning_region p \\<subseteq> V\"", "lemma winning_region_deadends:\n  assumes \"v \\<in> VV p\" \"deadend v\"\n  shows \"v \\<in> winning_region p**\"", "lemma (in vmc_path) paths_stay_in_winning_region:\n  assumes \\<sigma>': \"strategy p \\<sigma>'\" \"winning_strategy p \\<sigma>' v0\"\n    and \\<sigma>: \"\\<And>v. v \\<in> winning_region p \\<Longrightarrow> \\<sigma>' v = \\<sigma> v\"\n  shows \"lset P \\<subseteq> winning_region p\"", "lemma (in vmc_path) path_hits_winning_region_is_winning:\n  assumes \\<sigma>': \"strategy p \\<sigma>'\" \"\\<And>v. v \\<in> winning_region p \\<Longrightarrow> winning_strategy p \\<sigma>' v\"\n    and \\<sigma>: \"\\<And>v. v \\<in> winning_region p \\<Longrightarrow> \\<sigma>' v = \\<sigma> v\"\n    and P: \"lset P \\<inter> winning_region p \\<noteq> {}\"\n  shows \"winning_path p P\"", "lemma winning_strategy_updates:\n  assumes \\<sigma>: \"strategy p \\<sigma>\" \"winning_strategy p \\<sigma> v0\"\n    and v: \"v \\<notin> winning_region p\" \"v\\<rightarrow>w\"\n  shows \"winning_strategy p (\\<sigma>(v := w)) v0\"", "lemma winning_region_extends_VVp:\n  assumes v: \"v \\<in> VV p\" \"v\\<rightarrow>w\" and w: \"w \\<in> winning_region p\"\n  shows \"v \\<in> winning_region p\""], "translations": [["", "lemma winning_regionI [intro]:\n  assumes \"v \\<in> V\" \"strategy p \\<sigma>\" \"winning_strategy p \\<sigma> v\"\n  shows \"v \\<in> winning_region p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> winning_region p", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> V\n  strategy p \\<sigma>\n  winning_strategy p \\<sigma> v\n\ngoal (1 subgoal):\n 1. v \\<in> winning_region p", "unfolding winning_region_def"], ["proof (prove)\nusing this:\n  v \\<in> V\n  strategy p \\<sigma>\n  winning_strategy p \\<sigma> v\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> V.\n             \\<exists>\\<sigma>.\n                strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v}", "by blast"], ["", "lemma winning_region_in_V [simp]: \"winning_region p \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_region p \\<subseteq> V", "unfolding winning_region_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {v \\<in> V.\n     \\<exists>\\<sigma>.\n        strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v}\n    \\<subseteq> V", "by blast"], ["", "lemma winning_region_deadends:\n  assumes \"v \\<in> VV p\" \"deadend v\"\n  shows \"v \\<in> winning_region p**\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> winning_region p**", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. v \\<in> V\n 2. strategy p** ?\\<sigma>\n 3. winning_strategy p** ?\\<sigma> v", "show \"v \\<in> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> V", "using \\<open>v \\<in> VV p\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> VV p\n\ngoal (1 subgoal):\n 1. v \\<in> V", "by blast"], ["proof (state)\nthis:\n  v \\<in> V\n\ngoal (2 subgoals):\n 1. strategy p** ?\\<sigma>\n 2. winning_strategy p** ?\\<sigma> v", "show \"winning_strategy p** \\<sigma>_arbitrary v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_strategy p** \\<sigma>_arbitrary v", "using assms winning_strategy_on_deadends"], ["proof (prove)\nusing this:\n  v \\<in> VV p\n  deadend v\n  \\<lbrakk>?v \\<in> VV ?p; deadend ?v; strategy ?p ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> winning_strategy ?p** ?\\<sigma> ?v\n\ngoal (1 subgoal):\n 1. winning_strategy p** \\<sigma>_arbitrary v", "by simp"], ["proof (state)\nthis:\n  winning_strategy p** \\<sigma>_arbitrary v\n\ngoal (1 subgoal):\n 1. strategy p** \\<sigma>_arbitrary", "qed simp"], ["", "subsection \\<open>Paths in Winning Regions\\<close>"], ["", "lemma (in vmc_path) paths_stay_in_winning_region:\n  assumes \\<sigma>': \"strategy p \\<sigma>'\" \"winning_strategy p \\<sigma>' v0\"\n    and \\<sigma>: \"\\<And>v. v \\<in> winning_region p \\<Longrightarrow> \\<sigma>' v = \\<sigma> v\"\n  shows \"lset P \\<subseteq> winning_region p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset P \\<subseteq> winning_region p", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> lset P \\<Longrightarrow> x \\<in> winning_region p", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> lset P \\<Longrightarrow> x \\<in> winning_region p", "assume \"x \\<in> lset P\""], ["proof (state)\nthis:\n  x \\<in> lset P\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> lset P \\<Longrightarrow> x \\<in> winning_region p", "thus \"x \\<in> winning_region p\""], ["proof (prove)\nusing this:\n  x \\<in> lset P\n\ngoal (1 subgoal):\n 1. x \\<in> winning_region p", "using assms vmc_path_axioms"], ["proof (prove)\nusing this:\n  x \\<in> lset P\n  strategy p \\<sigma>'\n  winning_strategy p \\<sigma>' v0\n  ?v \\<in> winning_region p \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v\n  vmc_path G P v0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. x \\<in> winning_region p", "proof (induct arbitrary: v0 rule: llist_set_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs v0.\n       \\<lbrakk>\\<not> lnull xs; strategy p \\<sigma>';\n        winning_strategy p \\<sigma>' v0;\n        \\<And>v.\n           v \\<in> winning_region p \\<Longrightarrow>\n           \\<sigma>' v = \\<sigma> v;\n        vmc_path G xs v0 p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> lhd xs \\<in> winning_region p\n 2. \\<And>xs y v0.\n       \\<lbrakk>\\<not> lnull xs; y \\<in> lset (ltl xs);\n        \\<And>v0.\n           \\<lbrakk>strategy p \\<sigma>'; winning_strategy p \\<sigma>' v0;\n            \\<And>v.\n               v \\<in> winning_region p \\<Longrightarrow>\n               \\<sigma>' v = \\<sigma> v;\n            vmc_path G (ltl xs) v0 p \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> y \\<in> winning_region p;\n        strategy p \\<sigma>'; winning_strategy p \\<sigma>' v0;\n        \\<And>v.\n           v \\<in> winning_region p \\<Longrightarrow>\n           \\<sigma>' v = \\<sigma> v;\n        vmc_path G xs v0 p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> y \\<in> winning_region p", "case (find P v0)"], ["proof (state)\nthis:\n  \\<not> lnull P\n  strategy p \\<sigma>'\n  winning_strategy p \\<sigma>' v0\n  ?v \\<in> winning_region p \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v\n  vmc_path G P v0 p \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>xs v0.\n       \\<lbrakk>\\<not> lnull xs; strategy p \\<sigma>';\n        winning_strategy p \\<sigma>' v0;\n        \\<And>v.\n           v \\<in> winning_region p \\<Longrightarrow>\n           \\<sigma>' v = \\<sigma> v;\n        vmc_path G xs v0 p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> lhd xs \\<in> winning_region p\n 2. \\<And>xs y v0.\n       \\<lbrakk>\\<not> lnull xs; y \\<in> lset (ltl xs);\n        \\<And>v0.\n           \\<lbrakk>strategy p \\<sigma>'; winning_strategy p \\<sigma>' v0;\n            \\<And>v.\n               v \\<in> winning_region p \\<Longrightarrow>\n               \\<sigma>' v = \\<sigma> v;\n            vmc_path G (ltl xs) v0 p \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> y \\<in> winning_region p;\n        strategy p \\<sigma>'; winning_strategy p \\<sigma>' v0;\n        \\<And>v.\n           v \\<in> winning_region p \\<Longrightarrow>\n           \\<sigma>' v = \\<sigma> v;\n        vmc_path G xs v0 p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> y \\<in> winning_region p", "interpret vmc_path G P v0 p \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path G P v0 p \\<sigma>", "using find.prems(4)"], ["proof (prove)\nusing this:\n  vmc_path G P v0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. vmc_path G P v0 p \\<sigma>", "."], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs v0.\n       \\<lbrakk>\\<not> lnull xs; strategy p \\<sigma>';\n        winning_strategy p \\<sigma>' v0;\n        \\<And>v.\n           v \\<in> winning_region p \\<Longrightarrow>\n           \\<sigma>' v = \\<sigma> v;\n        vmc_path G xs v0 p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> lhd xs \\<in> winning_region p\n 2. \\<And>xs y v0.\n       \\<lbrakk>\\<not> lnull xs; y \\<in> lset (ltl xs);\n        \\<And>v0.\n           \\<lbrakk>strategy p \\<sigma>'; winning_strategy p \\<sigma>' v0;\n            \\<And>v.\n               v \\<in> winning_region p \\<Longrightarrow>\n               \\<sigma>' v = \\<sigma> v;\n            vmc_path G (ltl xs) v0 p \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> y \\<in> winning_region p;\n        strategy p \\<sigma>'; winning_strategy p \\<sigma>' v0;\n        \\<And>v.\n           v \\<in> winning_region p \\<Longrightarrow>\n           \\<sigma>' v = \\<sigma> v;\n        vmc_path G xs v0 p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> y \\<in> winning_region p", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lhd P \\<in> winning_region p", "using P_v0 \\<sigma>'(1) find.prems(2) v0_V"], ["proof (prove)\nusing this:\n  lhd P = v0\n  strategy p \\<sigma>'\n  winning_strategy p \\<sigma>' v0\n  v0 \\<in> V\n\ngoal (1 subgoal):\n 1. lhd P \\<in> winning_region p", "unfolding winning_region_def"], ["proof (prove)\nusing this:\n  lhd P = v0\n  strategy p \\<sigma>'\n  winning_strategy p \\<sigma>' v0\n  v0 \\<in> V\n\ngoal (1 subgoal):\n 1. lhd P\n    \\<in> {v \\<in> V.\n           \\<exists>\\<sigma>.\n              strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v}", "by blast"], ["proof (state)\nthis:\n  lhd P \\<in> winning_region p\n\ngoal (1 subgoal):\n 1. \\<And>xs y v0.\n       \\<lbrakk>\\<not> lnull xs; y \\<in> lset (ltl xs);\n        \\<And>v0.\n           \\<lbrakk>strategy p \\<sigma>'; winning_strategy p \\<sigma>' v0;\n            \\<And>v.\n               v \\<in> winning_region p \\<Longrightarrow>\n               \\<sigma>' v = \\<sigma> v;\n            vmc_path G (ltl xs) v0 p \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> y \\<in> winning_region p;\n        strategy p \\<sigma>'; winning_strategy p \\<sigma>' v0;\n        \\<And>v.\n           v \\<in> winning_region p \\<Longrightarrow>\n           \\<sigma>' v = \\<sigma> v;\n        vmc_path G xs v0 p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> y \\<in> winning_region p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs y v0.\n       \\<lbrakk>\\<not> lnull xs; y \\<in> lset (ltl xs);\n        \\<And>v0.\n           \\<lbrakk>strategy p \\<sigma>'; winning_strategy p \\<sigma>' v0;\n            \\<And>v.\n               v \\<in> winning_region p \\<Longrightarrow>\n               \\<sigma>' v = \\<sigma> v;\n            vmc_path G (ltl xs) v0 p \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> y \\<in> winning_region p;\n        strategy p \\<sigma>'; winning_strategy p \\<sigma>' v0;\n        \\<And>v.\n           v \\<in> winning_region p \\<Longrightarrow>\n           \\<sigma>' v = \\<sigma> v;\n        vmc_path G xs v0 p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> y \\<in> winning_region p", "case (step P x v0)"], ["proof (state)\nthis:\n  \\<not> lnull P\n  x \\<in> lset (ltl P)\n  \\<lbrakk>strategy p \\<sigma>'; winning_strategy p \\<sigma>' ?v0.0;\n   \\<And>v.\n      v \\<in> winning_region p \\<Longrightarrow> \\<sigma>' v = \\<sigma> v;\n   vmc_path G (ltl P) ?v0.0 p \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> x \\<in> winning_region p\n  strategy p \\<sigma>'\n  winning_strategy p \\<sigma>' v0\n  ?v \\<in> winning_region p \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v\n  vmc_path G P v0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>xs y v0.\n       \\<lbrakk>\\<not> lnull xs; y \\<in> lset (ltl xs);\n        \\<And>v0.\n           \\<lbrakk>strategy p \\<sigma>'; winning_strategy p \\<sigma>' v0;\n            \\<And>v.\n               v \\<in> winning_region p \\<Longrightarrow>\n               \\<sigma>' v = \\<sigma> v;\n            vmc_path G (ltl xs) v0 p \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> y \\<in> winning_region p;\n        strategy p \\<sigma>'; winning_strategy p \\<sigma>' v0;\n        \\<And>v.\n           v \\<in> winning_region p \\<Longrightarrow>\n           \\<sigma>' v = \\<sigma> v;\n        vmc_path G xs v0 p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> y \\<in> winning_region p", "interpret vmc_path G P v0 p \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path G P v0 p \\<sigma>", "using step.prems(4)"], ["proof (prove)\nusing this:\n  vmc_path G P v0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. vmc_path G P v0 p \\<sigma>", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs y v0.\n       \\<lbrakk>\\<not> lnull xs; y \\<in> lset (ltl xs);\n        \\<And>v0.\n           \\<lbrakk>strategy p \\<sigma>'; winning_strategy p \\<sigma>' v0;\n            \\<And>v.\n               v \\<in> winning_region p \\<Longrightarrow>\n               \\<sigma>' v = \\<sigma> v;\n            vmc_path G (ltl xs) v0 p \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> y \\<in> winning_region p;\n        strategy p \\<sigma>'; winning_strategy p \\<sigma>' v0;\n        \\<And>v.\n           v \\<in> winning_region p \\<Longrightarrow>\n           \\<sigma>' v = \\<sigma> v;\n        vmc_path G xs v0 p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> y \\<in> winning_region p", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> winning_region p", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> x \\<in> winning_region p", "assume \"lnull (ltl P)\""], ["proof (state)\nthis:\n  lnull (ltl P)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> x \\<in> winning_region p", "thus ?thesis"], ["proof (prove)\nusing this:\n  lnull (ltl P)\n\ngoal (1 subgoal):\n 1. x \\<in> winning_region p", "using P_lnull_ltl_LCons step.hyps(2)"], ["proof (prove)\nusing this:\n  lnull (ltl P)\n  lnull (ltl P) \\<Longrightarrow> P = LCons v0 LNil\n  x \\<in> lset (ltl P)\n\ngoal (1 subgoal):\n 1. x \\<in> winning_region p", "by auto"], ["proof (state)\nthis:\n  x \\<in> winning_region p\n\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow> x \\<in> winning_region p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow> x \\<in> winning_region p", "assume \"\\<not>lnull (ltl P)\""], ["proof (state)\nthis:\n  \\<not> lnull (ltl P)\n\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow> x \\<in> winning_region p", "then"], ["proof (chain)\npicking this:\n  \\<not> lnull (ltl P)", "interpret vmc_path_no_deadend G P v0 p \\<sigma>"], ["proof (prove)\nusing this:\n  \\<not> lnull (ltl P)\n\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v0 p \\<sigma>", "using P_no_deadend_v0"], ["proof (prove)\nusing this:\n  \\<not> lnull (ltl P)\n  \\<not> lnull (ltl P) \\<Longrightarrow> \\<not> deadend v0\n\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v0 p \\<sigma>", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow> x \\<in> winning_region p", "have \"winning_strategy p \\<sigma>' w0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' w0", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_strategy p \\<sigma>' w0\n 2. \\<not> ?P \\<Longrightarrow> winning_strategy p \\<sigma>' w0", "assume \"v0 \\<in> VV p\""], ["proof (state)\nthis:\n  v0 \\<in> VV p\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_strategy p \\<sigma>' w0\n 2. \\<not> ?P \\<Longrightarrow> winning_strategy p \\<sigma>' w0", "hence \"winning_strategy p \\<sigma>' (\\<sigma>' v0)\""], ["proof (prove)\nusing this:\n  v0 \\<in> VV p\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' (\\<sigma>' v0)", "using strategy_extends_VVp local.step(4) step.prems(2) v0_no_deadend"], ["proof (prove)\nusing this:\n  v0 \\<in> VV p\n  \\<lbrakk>?v0.0 \\<in> VV ?p; \\<not> deadend ?v0.0; strategy ?p ?\\<sigma>;\n   winning_strategy ?p ?\\<sigma> ?v0.0\\<rbrakk>\n  \\<Longrightarrow> winning_strategy ?p ?\\<sigma> (?\\<sigma> ?v0.0)\n  strategy p \\<sigma>'\n  winning_strategy p \\<sigma>' v0\n  \\<not> deadend v0\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' (\\<sigma>' v0)", "by blast"], ["proof (state)\nthis:\n  winning_strategy p \\<sigma>' (\\<sigma>' v0)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_strategy p \\<sigma>' w0\n 2. \\<not> ?P \\<Longrightarrow> winning_strategy p \\<sigma>' w0", "moreover"], ["proof (state)\nthis:\n  winning_strategy p \\<sigma>' (\\<sigma>' v0)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_strategy p \\<sigma>' w0\n 2. \\<not> ?P \\<Longrightarrow> winning_strategy p \\<sigma>' w0", "have \"\\<sigma> v0 = w0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> v0 = w0", "using v0_conforms \\<open>v0 \\<in> VV p\\<close>"], ["proof (prove)\nusing this:\n  v0 \\<in> VV p \\<Longrightarrow> \\<sigma> v0 = w0\n  v0 \\<in> VV p\n\ngoal (1 subgoal):\n 1. \\<sigma> v0 = w0", "by blast"], ["proof (state)\nthis:\n  \\<sigma> v0 = w0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_strategy p \\<sigma>' w0\n 2. \\<not> ?P \\<Longrightarrow> winning_strategy p \\<sigma>' w0", "moreover"], ["proof (state)\nthis:\n  \\<sigma> v0 = w0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_strategy p \\<sigma>' w0\n 2. \\<not> ?P \\<Longrightarrow> winning_strategy p \\<sigma>' w0", "have \"\\<sigma>' v0 = \\<sigma> v0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>' v0 = \\<sigma> v0", "using \\<sigma> assms(1) step.prems(2) v0_V"], ["proof (prove)\nusing this:\n  ?v \\<in> winning_region p \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v\n  strategy p \\<sigma>'\n  winning_strategy p \\<sigma>' v0\n  v0 \\<in> V\n\ngoal (1 subgoal):\n 1. \\<sigma>' v0 = \\<sigma> v0", "unfolding winning_region_def"], ["proof (prove)\nusing this:\n  ?v \\<in> {v \\<in> V.\n            \\<exists>\\<sigma>.\n               strategy p \\<sigma> \\<and>\n               winning_strategy p \\<sigma> v} \\<Longrightarrow>\n  \\<sigma>' ?v = \\<sigma> ?v\n  strategy p \\<sigma>'\n  winning_strategy p \\<sigma>' v0\n  v0 \\<in> V\n\ngoal (1 subgoal):\n 1. \\<sigma>' v0 = \\<sigma> v0", "by blast"], ["proof (state)\nthis:\n  \\<sigma>' v0 = \\<sigma> v0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_strategy p \\<sigma>' w0\n 2. \\<not> ?P \\<Longrightarrow> winning_strategy p \\<sigma>' w0", "ultimately"], ["proof (chain)\npicking this:\n  winning_strategy p \\<sigma>' (\\<sigma>' v0)\n  \\<sigma> v0 = w0\n  \\<sigma>' v0 = \\<sigma> v0", "show ?thesis"], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma>' (\\<sigma>' v0)\n  \\<sigma> v0 = w0\n  \\<sigma>' v0 = \\<sigma> v0\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' w0", "by simp"], ["proof (state)\nthis:\n  winning_strategy p \\<sigma>' w0\n\ngoal (1 subgoal):\n 1. v0 \\<notin> VV p \\<Longrightarrow> winning_strategy p \\<sigma>' w0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v0 \\<notin> VV p \\<Longrightarrow> winning_strategy p \\<sigma>' w0", "assume \"v0 \\<notin> VV p\""], ["proof (state)\nthis:\n  v0 \\<notin> VV p\n\ngoal (1 subgoal):\n 1. v0 \\<notin> VV p \\<Longrightarrow> winning_strategy p \\<sigma>' w0", "thus ?thesis"], ["proof (prove)\nusing this:\n  v0 \\<notin> VV p\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' w0", "using v0_V strategy_extends_VVpstar step(4) step.prems(2)"], ["proof (prove)\nusing this:\n  v0 \\<notin> VV p\n  v0 \\<in> V\n  \\<lbrakk>?v0.0 \\<in> VV ?p**; ?v0.0 \\<rightarrow> ?w0.0;\n   winning_strategy ?p ?\\<sigma> ?v0.0\\<rbrakk>\n  \\<Longrightarrow> winning_strategy ?p ?\\<sigma> ?w0.0\n  strategy p \\<sigma>'\n  winning_strategy p \\<sigma>' v0\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' w0", "by simp"], ["proof (state)\nthis:\n  winning_strategy p \\<sigma>' w0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  winning_strategy p \\<sigma>' w0\n\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow> x \\<in> winning_region p", "thus ?thesis"], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma>' w0\n\ngoal (1 subgoal):\n 1. x \\<in> winning_region p", "using step.hyps(3) step(4) \\<sigma> vmc_path_ltl"], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma>' w0\n  \\<lbrakk>strategy p \\<sigma>'; winning_strategy p \\<sigma>' ?v0.0;\n   \\<And>v.\n      v \\<in> winning_region p \\<Longrightarrow> \\<sigma>' v = \\<sigma> v;\n   vmc_path G (ltl P) ?v0.0 p \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> x \\<in> winning_region p\n  strategy p \\<sigma>'\n  ?v \\<in> winning_region p \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v\n  vmc_path G (ltl P) w0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. x \\<in> winning_region p", "by blast"], ["proof (state)\nthis:\n  x \\<in> winning_region p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> winning_region p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> winning_region p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in vmc_path) path_hits_winning_region_is_winning:\n  assumes \\<sigma>': \"strategy p \\<sigma>'\" \"\\<And>v. v \\<in> winning_region p \\<Longrightarrow> winning_strategy p \\<sigma>' v\"\n    and \\<sigma>: \"\\<And>v. v \\<in> winning_region p \\<Longrightarrow> \\<sigma>' v = \\<sigma> v\"\n    and P: \"lset P \\<inter> winning_region p \\<noteq> {}\"\n  shows \"winning_path p P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_path p P", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. winning_path p P", "obtain n where n: \"enat n < llength P\" \"P $ n \\<in> winning_region p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P; P $ n \\<in> winning_region p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using P"], ["proof (prove)\nusing this:\n  lset P \\<inter> winning_region p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P; P $ n \\<in> winning_region p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson lset_intersect_lnth)"], ["proof (state)\nthis:\n  enat n < llength P\n  P $ n \\<in> winning_region p\n\ngoal (1 subgoal):\n 1. winning_path p P", "define P' where \"P' = ldropn n P\""], ["proof (state)\nthis:\n  P' = ldropn n P\n\ngoal (1 subgoal):\n 1. winning_path p P", "then"], ["proof (chain)\npicking this:\n  P' = ldropn n P", "interpret P': vmc_path G P' \"P $ n\" p \\<sigma>"], ["proof (prove)\nusing this:\n  P' = ldropn n P\n\ngoal (1 subgoal):\n 1. vmc_path G P' (P $ n) p \\<sigma>", "unfolding P'_def"], ["proof (prove)\nusing this:\n  ldropn n P = ldropn n P\n\ngoal (1 subgoal):\n 1. vmc_path G (ldropn n P) (P $ n) p \\<sigma>", "using vmc_path_ldropn n(1)"], ["proof (prove)\nusing this:\n  ldropn n P = ldropn n P\n  enat ?n < llength P \\<Longrightarrow>\n  vmc_path G (ldropn ?n P) (P $ ?n) p \\<sigma>\n  enat n < llength P\n\ngoal (1 subgoal):\n 1. vmc_path G (ldropn n P) (P $ n) p \\<sigma>", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. winning_path p P", "have \"winning_strategy p \\<sigma>' (P $ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' (P $ n)", "using \\<sigma>'(2) n(2)"], ["proof (prove)\nusing this:\n  ?v \\<in> winning_region p \\<Longrightarrow>\n  winning_strategy p \\<sigma>' ?v\n  P $ n \\<in> winning_region p\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' (P $ n)", "by blast"], ["proof (state)\nthis:\n  winning_strategy p \\<sigma>' (P $ n)\n\ngoal (1 subgoal):\n 1. winning_path p P", "hence \"lset P' \\<subseteq> winning_region p\""], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma>' (P $ n)\n\ngoal (1 subgoal):\n 1. lset P' \\<subseteq> winning_region p", "using P'.paths_stay_in_winning_region[OF \\<sigma>'(1) _ \\<sigma>]"], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma>' (P $ n)\n  \\<lbrakk>winning_strategy p \\<sigma>' (P $ n);\n   \\<And>v.\n      v \\<in> winning_region p \\<Longrightarrow>\n      v \\<in> winning_region p\\<rbrakk>\n  \\<Longrightarrow> lset P' \\<subseteq> winning_region p\n\ngoal (1 subgoal):\n 1. lset P' \\<subseteq> winning_region p", "by blast"], ["proof (state)\nthis:\n  lset P' \\<subseteq> winning_region p\n\ngoal (1 subgoal):\n 1. winning_path p P", "hence \"\\<And>v. v \\<in> lset P' \\<Longrightarrow> \\<sigma> v = \\<sigma>' v\""], ["proof (prove)\nusing this:\n  lset P' \\<subseteq> winning_region p\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> lset P' \\<Longrightarrow> \\<sigma> v = \\<sigma>' v", "using \\<sigma>"], ["proof (prove)\nusing this:\n  lset P' \\<subseteq> winning_region p\n  ?v \\<in> winning_region p \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> lset P' \\<Longrightarrow> \\<sigma> v = \\<sigma>' v", "by auto"], ["proof (state)\nthis:\n  ?v \\<in> lset P' \\<Longrightarrow> \\<sigma> ?v = \\<sigma>' ?v\n\ngoal (1 subgoal):\n 1. winning_path p P", "hence \"path_conforms_with_strategy p P' \\<sigma>'\""], ["proof (prove)\nusing this:\n  ?v \\<in> lset P' \\<Longrightarrow> \\<sigma> ?v = \\<sigma>' ?v\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P' \\<sigma>'", "using path_conforms_with_strategy_irrelevant_updates P'.P_conforms"], ["proof (prove)\nusing this:\n  ?v \\<in> lset P' \\<Longrightarrow> \\<sigma> ?v = \\<sigma>' ?v\n  \\<lbrakk>path_conforms_with_strategy ?p ?P ?\\<sigma>;\n   \\<And>v.\n      v \\<in> lset ?P \\<Longrightarrow> ?\\<sigma> v = ?\\<sigma>' v\\<rbrakk>\n  \\<Longrightarrow> path_conforms_with_strategy ?p ?P ?\\<sigma>'\n  path_conforms_with_strategy p P' \\<sigma>\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P' \\<sigma>'", "by blast"], ["proof (state)\nthis:\n  path_conforms_with_strategy p P' \\<sigma>'\n\ngoal (1 subgoal):\n 1. winning_path p P", "then"], ["proof (chain)\npicking this:\n  path_conforms_with_strategy p P' \\<sigma>'", "interpret P': vmc_path G P' \"P $ n\" p \\<sigma>'"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P' \\<sigma>'\n\ngoal (1 subgoal):\n 1. vmc_path G P' (P $ n) p \\<sigma>'", "using P'.conforms_to_another_strategy"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P' \\<sigma>'\n  path_conforms_with_strategy p P' ?\\<sigma>' \\<Longrightarrow>\n  vmc_path G P' (P $ n) p ?\\<sigma>'\n\ngoal (1 subgoal):\n 1. vmc_path G P' (P $ n) p \\<sigma>'", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. winning_path p P", "have \"winning_path p P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_path p P'", "using \\<sigma>'(2) n(2) P'.vmc_path_axioms winning_strategy_def"], ["proof (prove)\nusing this:\n  ?v \\<in> winning_region p \\<Longrightarrow>\n  winning_strategy p \\<sigma>' ?v\n  P $ n \\<in> winning_region p\n  vmc_path G P' (P $ n) p \\<sigma>'\n  winning_strategy ?p ?\\<sigma> ?v0.0 \\<equiv>\n  \\<forall>P.\n     vmc_path G P ?v0.0 ?p ?\\<sigma> \\<longrightarrow> winning_path ?p P\n\ngoal (1 subgoal):\n 1. winning_path p P'", "by blast"], ["proof (state)\nthis:\n  winning_path p P'\n\ngoal (1 subgoal):\n 1. winning_path p P", "thus \"winning_path p P\""], ["proof (prove)\nusing this:\n  winning_path p P'\n\ngoal (1 subgoal):\n 1. winning_path p P", "unfolding P'_def"], ["proof (prove)\nusing this:\n  winning_path p (ldropn n P)\n\ngoal (1 subgoal):\n 1. winning_path p P", "using winning_path_drop_add n(1) P_valid"], ["proof (prove)\nusing this:\n  winning_path p (ldropn n P)\n  \\<lbrakk>valid_path ?P; winning_path ?p (ldropn ?n ?P);\n   enat ?n < llength ?P\\<rbrakk>\n  \\<Longrightarrow> winning_path ?p ?P\n  enat n < llength P\n  valid_path P\n\ngoal (1 subgoal):\n 1. winning_path p P", "by blast"], ["proof (state)\nthis:\n  winning_path p P\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Irrelevant Updates\\<close>"], ["", "text \\<open>Updating a winning strategy outside of the winning region is irrelevant.\\<close>"], ["", "lemma winning_strategy_updates:\n  assumes \\<sigma>: \"strategy p \\<sigma>\" \"winning_strategy p \\<sigma> v0\"\n    and v: \"v \\<notin> winning_region p\" \"v\\<rightarrow>w\"\n  shows \"winning_strategy p (\\<sigma>(v := w)) v0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_strategy p (\\<sigma>(v := w)) v0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       vmc_path G P v0 p (\\<sigma>(v := w)) \\<Longrightarrow>\n       winning_path p P", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       vmc_path G P v0 p (\\<sigma>(v := w)) \\<Longrightarrow>\n       winning_path p P", "assume \"vmc_path G P v0 p (\\<sigma>(v := w))\""], ["proof (state)\nthis:\n  vmc_path G P v0 p (\\<sigma>(v := w))\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       vmc_path G P v0 p (\\<sigma>(v := w)) \\<Longrightarrow>\n       winning_path p P", "then"], ["proof (chain)\npicking this:\n  vmc_path G P v0 p (\\<sigma>(v := w))", "interpret vmc_path G P v0 p \"\\<sigma>(v := w)\""], ["proof (prove)\nusing this:\n  vmc_path G P v0 p (\\<sigma>(v := w))\n\ngoal (1 subgoal):\n 1. vmc_path G P v0 p (\\<sigma>(v := w))", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       vmc_path G P v0 p (\\<sigma>(v := w)) \\<Longrightarrow>\n       winning_path p P", "have \"\\<And>v'. v' \\<in> winning_region p \\<Longrightarrow> \\<sigma> v' = (\\<sigma>(v := w)) v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v'.\n       v' \\<in> winning_region p \\<Longrightarrow>\n       \\<sigma> v' = (\\<sigma>(v := w)) v'", "using v"], ["proof (prove)\nusing this:\n  v \\<notin> winning_region p\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. \\<And>v'.\n       v' \\<in> winning_region p \\<Longrightarrow>\n       \\<sigma> v' = (\\<sigma>(v := w)) v'", "by auto"], ["proof (state)\nthis:\n  ?v' \\<in> winning_region p \\<Longrightarrow>\n  \\<sigma> ?v' = (\\<sigma>(v := w)) ?v'\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       vmc_path G P v0 p (\\<sigma>(v := w)) \\<Longrightarrow>\n       winning_path p P", "hence \"v \\<notin> lset P\""], ["proof (prove)\nusing this:\n  ?v' \\<in> winning_region p \\<Longrightarrow>\n  \\<sigma> ?v' = (\\<sigma>(v := w)) ?v'\n\ngoal (1 subgoal):\n 1. v \\<notin> lset P", "using v paths_stay_in_winning_region \\<sigma>"], ["proof (prove)\nusing this:\n  ?v' \\<in> winning_region p \\<Longrightarrow>\n  \\<sigma> ?v' = (\\<sigma>(v := w)) ?v'\n  v \\<notin> winning_region p\n  v \\<rightarrow> w\n  \\<lbrakk>strategy p ?\\<sigma>'; winning_strategy p ?\\<sigma>' v0;\n   \\<And>va.\n      va \\<in> winning_region p \\<Longrightarrow>\n      ?\\<sigma>' va = (\\<sigma>(v := w)) va\\<rbrakk>\n  \\<Longrightarrow> lset P \\<subseteq> winning_region p\n  strategy p \\<sigma>\n  winning_strategy p \\<sigma> v0\n\ngoal (1 subgoal):\n 1. v \\<notin> lset P", "unfolding winning_region_def"], ["proof (prove)\nusing this:\n  ?v'\n  \\<in> {v \\<in> V.\n         \\<exists>\\<sigma>.\n            strategy p \\<sigma> \\<and>\n            winning_strategy p \\<sigma> v} \\<Longrightarrow>\n  \\<sigma> ?v' = (\\<sigma>(v := w)) ?v'\n  v \\<notin> {v \\<in> V.\n              \\<exists>\\<sigma>.\n                 strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v}\n  v \\<rightarrow> w\n  \\<lbrakk>strategy p ?\\<sigma>'; winning_strategy p ?\\<sigma>' v0;\n   \\<And>va.\n      va \\<in> {v \\<in> V.\n                \\<exists>\\<sigma>.\n                   strategy p \\<sigma> \\<and>\n                   winning_strategy p \\<sigma> v} \\<Longrightarrow>\n      ?\\<sigma>' va = (\\<sigma>(v := w)) va\\<rbrakk>\n  \\<Longrightarrow> lset P\n                    \\<subseteq> {v \\<in> V.\n                                 \\<exists>\\<sigma>.\n                                    strategy p \\<sigma> \\<and>\n                                    winning_strategy p \\<sigma> v}\n  strategy p \\<sigma>\n  winning_strategy p \\<sigma> v0\n\ngoal (1 subgoal):\n 1. v \\<notin> lset P", "by blast"], ["proof (state)\nthis:\n  v \\<notin> lset P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       vmc_path G P v0 p (\\<sigma>(v := w)) \\<Longrightarrow>\n       winning_path p P", "hence \"path_conforms_with_strategy p P \\<sigma>\""], ["proof (prove)\nusing this:\n  v \\<notin> lset P\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma>", "using P_conforms path_conforms_with_strategy_irrelevant'"], ["proof (prove)\nusing this:\n  v \\<notin> lset P\n  path_conforms_with_strategy p P (\\<sigma>(v := w))\n  \\<lbrakk>path_conforms_with_strategy ?p ?P (?\\<sigma>(?v := ?w));\n   ?v \\<notin> lset ?P\\<rbrakk>\n  \\<Longrightarrow> path_conforms_with_strategy ?p ?P ?\\<sigma>\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma>", "by blast"], ["proof (state)\nthis:\n  path_conforms_with_strategy p P \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       vmc_path G P v0 p (\\<sigma>(v := w)) \\<Longrightarrow>\n       winning_path p P", "thus \"winning_path p P\""], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P \\<sigma>\n\ngoal (1 subgoal):\n 1. winning_path p P", "using conforms_to_another_strategy \\<sigma>(2) winning_strategy_def"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P \\<sigma>\n  path_conforms_with_strategy p P ?\\<sigma>' \\<Longrightarrow>\n  vmc_path G P v0 p ?\\<sigma>'\n  winning_strategy p \\<sigma> v0\n  winning_strategy ?p ?\\<sigma> ?v0.0 \\<equiv>\n  \\<forall>P.\n     vmc_path G P ?v0.0 ?p ?\\<sigma> \\<longrightarrow> winning_path ?p P\n\ngoal (1 subgoal):\n 1. winning_path p P", "by blast"], ["proof (state)\nthis:\n  winning_path p P\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Extending Winning Regions\\<close>"], ["", "lemma winning_region_extends_VVp:\n  assumes v: \"v \\<in> VV p\" \"v\\<rightarrow>w\" and w: \"w \\<in> winning_region p\"\n  shows \"v \\<in> winning_region p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> winning_region p", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<notin> winning_region p \\<Longrightarrow> False", "obtain \\<sigma> where \\<sigma>: \"strategy p \\<sigma>\" \"winning_strategy p \\<sigma> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<lbrakk>strategy p \\<sigma>; winning_strategy p \\<sigma> w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using w"], ["proof (prove)\nusing this:\n  w \\<in> winning_region p\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<lbrakk>strategy p \\<sigma>; winning_strategy p \\<sigma> w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding winning_region_def"], ["proof (prove)\nusing this:\n  w \\<in> {v \\<in> V.\n           \\<exists>\\<sigma>.\n              strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<lbrakk>strategy p \\<sigma>; winning_strategy p \\<sigma> w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  strategy p \\<sigma>\n  winning_strategy p \\<sigma> w\n\ngoal (1 subgoal):\n 1. v \\<notin> winning_region p \\<Longrightarrow> False", "let ?\\<sigma> = \"\\<sigma>(v := w)\""], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<notin> winning_region p \\<Longrightarrow> False", "assume contra: \"v \\<notin> winning_region p\""], ["proof (state)\nthis:\n  v \\<notin> winning_region p\n\ngoal (1 subgoal):\n 1. v \\<notin> winning_region p \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  v \\<notin> winning_region p\n\ngoal (1 subgoal):\n 1. v \\<notin> winning_region p \\<Longrightarrow> False", "have \"strategy p ?\\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p (\\<sigma>(v := w))", "using valid_strategy_updates \\<sigma>(1) \\<open>v\\<rightarrow>w\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>strategy ?p ?\\<sigma>; ?v0.0 \\<rightarrow> ?w0.0\\<rbrakk>\n  \\<Longrightarrow> strategy ?p (?\\<sigma>(?v0.0 := ?w0.0))\n  strategy p \\<sigma>\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. strategy p (\\<sigma>(v := w))", "by blast"], ["proof (state)\nthis:\n  strategy p (\\<sigma>(v := w))\n\ngoal (1 subgoal):\n 1. v \\<notin> winning_region p \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  strategy p (\\<sigma>(v := w))\n\ngoal (1 subgoal):\n 1. v \\<notin> winning_region p \\<Longrightarrow> False", "hence \"winning_strategy p ?\\<sigma> v\""], ["proof (prove)\nusing this:\n  strategy p (\\<sigma>(v := w))\n\ngoal (1 subgoal):\n 1. winning_strategy p (\\<sigma>(v := w)) v", "using winning_strategy_updates \\<sigma> contra v strategy_extends_backwards_VVp"], ["proof (prove)\nusing this:\n  strategy p (\\<sigma>(v := w))\n  \\<lbrakk>strategy ?p ?\\<sigma>; winning_strategy ?p ?\\<sigma> ?v0.0;\n   ?v \\<notin> winning_region ?p; ?v \\<rightarrow> ?w\\<rbrakk>\n  \\<Longrightarrow> winning_strategy ?p (?\\<sigma>(?v := ?w)) ?v0.0\n  strategy p \\<sigma>\n  winning_strategy p \\<sigma> w\n  v \\<notin> winning_region p\n  v \\<in> VV p\n  v \\<rightarrow> w\n  \\<lbrakk>?v0.0 \\<in> VV ?p; ?\\<sigma> ?v0.0 = ?w; ?v0.0 \\<rightarrow> ?w;\n   strategy ?p ?\\<sigma>; winning_strategy ?p ?\\<sigma> ?w\\<rbrakk>\n  \\<Longrightarrow> winning_strategy ?p ?\\<sigma> ?v0.0\n\ngoal (1 subgoal):\n 1. winning_strategy p (\\<sigma>(v := w)) v", "by auto"], ["proof (state)\nthis:\n  winning_strategy p (\\<sigma>(v := w)) v\n\ngoal (1 subgoal):\n 1. v \\<notin> winning_region p \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  v \\<notin> winning_region p\n  strategy p (\\<sigma>(v := w))\n  winning_strategy p (\\<sigma>(v := w)) v", "show False"], ["proof (prove)\nusing this:\n  v \\<notin> winning_region p\n  strategy p (\\<sigma>(v := w))\n  winning_strategy p (\\<sigma>(v := w)) v\n\ngoal (1 subgoal):\n 1. False", "using \\<open>v\\<rightarrow>w\\<close>"], ["proof (prove)\nusing this:\n  v \\<notin> winning_region p\n  strategy p (\\<sigma>(v := w))\n  winning_strategy p (\\<sigma>(v := w)) v\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. False", "unfolding winning_region_def"], ["proof (prove)\nusing this:\n  v \\<notin> {v \\<in> V.\n              \\<exists>\\<sigma>.\n                 strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v}\n  strategy p (\\<sigma>(v := w))\n  winning_strategy p (\\<sigma>(v := w)) v\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Unfortunately, we cannot prove the corresponding theorem \\<open>winning_region_extends_VVpstar\\<close>\n  for @{term \"VV p**\"}-nodes yet.\n  First, we need to show that there exists a uniform winning strategy on @{term \"winning_region p\"}.\n  We will prove \\<open>winning_region_extends_VVpstar\\<close> as soon as we have this.\n\\<close>"], ["", "end \\<comment> \\<open>context ParityGame\\<close>"], ["", "end"]]}