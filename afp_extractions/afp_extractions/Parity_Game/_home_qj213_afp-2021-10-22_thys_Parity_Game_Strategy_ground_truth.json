{"file_name": "/home/qj213/afp-2021-10-22/thys/Parity_Game/Strategy.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Parity_Game", "problem_names": ["lemma (in ParityGame) strategyI [intro]:\n  \"(\\<And>v. \\<lbrakk> v \\<in> VV p; \\<not>deadend v \\<rbrakk> \\<Longrightarrow> v\\<rightarrow>\\<sigma> v) \\<Longrightarrow> strategy p \\<sigma>\"", "lemma valid_arbitrary_strategy [simp]: \"strategy p \\<sigma>_arbitrary\"", "lemma valid_strategy_updates: \"\\<lbrakk> strategy p \\<sigma>; v0\\<rightarrow>w0 \\<rbrakk> \\<Longrightarrow> strategy p (\\<sigma>(v0 := w0))\"", "lemma valid_strategy_updates_set:\n  assumes \"strategy p \\<sigma>\" \"\\<And>v. \\<lbrakk> v \\<in> A; v \\<in> VV p; \\<not>deadend v \\<rbrakk> \\<Longrightarrow> v\\<rightarrow>\\<sigma>' v\"\n  shows \"strategy p (override_on \\<sigma> \\<sigma>' A)\"", "lemma valid_strategy_updates_set_strong:\n  assumes \"strategy p \\<sigma>\" \"strategy p \\<sigma>'\"\n  shows \"strategy p (override_on \\<sigma> \\<sigma>' A)\"", "lemma subgame_strategy_stays_in_subgame:\n  assumes \\<sigma>: \"ParityGame.strategy (subgame V') p \\<sigma>\"\n    and \"v \\<in> ParityGame.VV (subgame V') p\" \"\\<not>Digraph.deadend (subgame V') v\"\n  shows \"\\<sigma> v \\<in> V'\"", "lemma valid_strategy_supergame:\n  assumes \\<sigma>: \"strategy p \\<sigma>\"\n    and \\<sigma>': \"ParityGame.strategy (subgame V') p \\<sigma>'\"\n    and G'_no_deadends: \"\\<And>v. v \\<in> V' \\<Longrightarrow> \\<not>Digraph.deadend (subgame V') v\"\n  shows \"strategy p (override_on \\<sigma> \\<sigma>' V')\" (is \"strategy p ?\\<sigma>\")", "lemma valid_strategy_in_V: \"\\<lbrakk> strategy p \\<sigma>; v \\<in> VV p; \\<not>deadend v \\<rbrakk> \\<Longrightarrow> \\<sigma> v \\<in> V\"", "lemma valid_strategy_only_in_V: \"\\<lbrakk> strategy p \\<sigma>; \\<And>v. v \\<in> V \\<Longrightarrow> \\<sigma> v = \\<sigma>' v \\<rbrakk> \\<Longrightarrow> strategy p \\<sigma>'\"", "lemma path_conforms_with_strategy_ltl [intro]:\n  \"path_conforms_with_strategy p P \\<sigma> \\<Longrightarrow> path_conforms_with_strategy p (ltl P) \\<sigma>\"", "lemma path_conforms_with_strategy_drop:\n  \"path_conforms_with_strategy p P \\<sigma> \\<Longrightarrow> path_conforms_with_strategy p (ldropn n P) \\<sigma>\"", "lemma path_conforms_with_strategy_prefix:\n  \"path_conforms_with_strategy p P \\<sigma> \\<Longrightarrow> lprefix P' P \\<Longrightarrow> path_conforms_with_strategy p P' \\<sigma>\"", "lemma path_conforms_with_strategy_irrelevant:\n  assumes \"path_conforms_with_strategy p P \\<sigma>\" \"v \\<notin> lset P\"\n  shows \"path_conforms_with_strategy p P (\\<sigma>(v := w))\"", "lemma path_conforms_with_strategy_irrelevant_deadend:\n  assumes \"path_conforms_with_strategy p P \\<sigma>\" \"deadend v \\<or> v \\<notin> VV p\" \"valid_path P\"\n  shows \"path_conforms_with_strategy p P (\\<sigma>(v := w))\"", "lemma path_conforms_with_strategy_irrelevant_updates:\n  assumes \"path_conforms_with_strategy p P \\<sigma>\" \"\\<And>v. v \\<in> lset P \\<Longrightarrow> \\<sigma> v = \\<sigma>' v\"\n  shows \"path_conforms_with_strategy p P \\<sigma>'\"", "lemma path_conforms_with_strategy_irrelevant':\n  assumes \"path_conforms_with_strategy p P (\\<sigma>(v := w))\" \"v \\<notin> lset P\"\n  shows \"path_conforms_with_strategy p P \\<sigma>\"", "lemma path_conforms_with_strategy_irrelevant_deadend':\n  assumes \"path_conforms_with_strategy p P (\\<sigma>(v := w))\" \"deadend v \\<or> v \\<notin> VV p\" \"valid_path P\"\n  shows \"path_conforms_with_strategy p P \\<sigma>\"", "lemma path_conforms_with_strategy_start:\n  \"path_conforms_with_strategy p (LCons v (LCons w P)) \\<sigma> \\<Longrightarrow> v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w\"", "lemma path_conforms_with_strategy_lappend:\n  assumes\n    P: \"lfinite P\" \"\\<not>lnull P\" \"path_conforms_with_strategy p P \\<sigma>\"\n    and P': \"\\<not>lnull P'\" \"path_conforms_with_strategy p P' \\<sigma>\"\n    and conforms: \"llast P \\<in> VV p \\<Longrightarrow> \\<sigma> (llast P) = lhd P'\"\n  shows \"path_conforms_with_strategy p (lappend P P') \\<sigma>\"", "lemma path_conforms_with_strategy_VVpstar:\n  assumes \"lset P \\<subseteq> VV p**\"\n  shows \"path_conforms_with_strategy p P \\<sigma>\"", "lemma subgame_path_conforms_with_strategy:\n  assumes V': \"V' \\<subseteq> V\" and P: \"path_conforms_with_strategy p P \\<sigma>\" \"lset P \\<subseteq> V'\"\n  shows \"ParityGame.path_conforms_with_strategy (subgame V') p P \\<sigma>\"", "lemma (in vmc_path) subgame_path_vmc_path:\n  assumes V': \"V' \\<subseteq> V\" and P: \"lset P \\<subseteq> V'\"\n  shows \"vmc_path (subgame V') P v0 p \\<sigma>\"", "lemma greedy_path_LNil: \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<noteq> LNil\"", "lemma greedy_path_lhd: \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v P \\<Longrightarrow> v = v0\"", "lemma greedy_path_deadend_v0: \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v P \\<Longrightarrow> P = LNil \\<longleftrightarrow> deadend v0\"", "lemma greedy_path_ltl:\n  assumes \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v P\"\n  shows \"P = LNil \\<or> P = greedy_conforming_path p \\<sigma> \\<sigma>' (\\<sigma> v0) \\<or> P = greedy_conforming_path p \\<sigma> \\<sigma>' (\\<sigma>' v0)\"", "lemma greedy_path_ltl_ex:\n  assumes \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v P\"\n  shows \"P = LNil \\<or> (\\<exists>v. P = greedy_conforming_path p \\<sigma> \\<sigma>' v)\"", "lemma greedy_path_ltl_VVp:\n  assumes \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P\" \"v0 \\<in> VV p\" \"\\<not>deadend v0\"\n  shows \"\\<sigma> v0 = lhd P\"", "lemma greedy_path_ltl_VVpstar:\n  assumes \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P\" \"v0 \\<in> VV p**\" \"\\<not>deadend v0\"\n  shows \"\\<sigma>' v0 = lhd P\"", "lemma greedy_conforming_path_properties:\n  assumes \"v0 \\<in> V\" \"strategy p \\<sigma>\" \"strategy p** \\<sigma>'\"\n  shows\n        greedy_path_not_null:  \"\\<not>lnull (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\"\n    and greedy_path_v0:        \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 $ 0 = v0\"\n    and greedy_path_valid:     \"valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\"\n    and greedy_path_maximal:   \"maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\"\n    and greedy_path_conforms:  \"path_conforms_with_strategy p (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\"\n    and greedy_path_conforms': \"path_conforms_with_strategy p** (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'\"", "lemma Ptl_conforms [simp]: \"path_conforms_with_strategy p (ltl P) \\<sigma>\"", "lemma Pdrop_conforms [simp]: \"path_conforms_with_strategy p (ldropn n P) \\<sigma>\"", "lemma prefix_conforms [simp]: \"path_conforms_with_strategy p (ltake n P) \\<sigma>\"", "lemma extension_conforms [simp]:\n  \"(v' \\<in> VV p \\<Longrightarrow> \\<sigma> v' = v0) \\<Longrightarrow> path_conforms_with_strategy p (LCons v' P) \\<sigma>\"", "lemma extension_valid_maximal_conforming:\n  assumes \"v'\\<rightarrow>v0\" \"v' \\<in> VV p \\<Longrightarrow> \\<sigma> v' = v0\"\n  shows \"vmc_path G (LCons v' P) v' p \\<sigma>\"", "lemma vmc_path_ldropn:\n  assumes \"enat n < llength P\"\n  shows \"vmc_path G (ldropn n P) (P $ n) p \\<sigma>\"", "lemma conforms_to_another_strategy:\n  \"path_conforms_with_strategy p P \\<sigma>' \\<Longrightarrow> vmc_path G P v0 p \\<sigma>'\"", "lemma (in ParityGame) valid_maximal_conforming_path_0:\n  assumes \"\\<not>lnull P\" \"valid_path P\" \"maximal_path P\" \"path_conforms_with_strategy p P \\<sigma>\"\n  shows \"vmc_path G P (P $ 0) p \\<sigma>\"", "lemma Ptl_not_null [simp]: \"\\<not>lnull (ltl P)\"", "lemma Ptl_LCons: \"ltl P = LCons w0 (ltl (ltl P))\"", "lemma P_LCons': \"P = LCons v0 (LCons w0 (ltl (ltl P)))\"", "lemma v0_edge_w0 [simp]: \"v0\\<rightarrow>w0\"", "lemma Ptl_0: \"ltl P $ 0 = lhd (ltl P)\"", "lemma P_Suc_0: \"P $ Suc 0 = w0\"", "lemma Ptl_edge [simp]: \"v0 \\<rightarrow> lhd (ltl P)\"", "lemma v0_conforms: \"v0 \\<in> VV p \\<Longrightarrow> \\<sigma> v0 = w0\"", "lemma w0_V [simp]: \"w0 \\<in> V\"", "lemma w0_lset_P [simp]: \"w0 \\<in> lset P\"", "lemma vmc_path_ltl [simp]: \"vmc_path G (ltl P) w0 p \\<sigma>\"", "lemma vmc_path_lnull_ltl_no_deadend:\n  \"\\<not>lnull (ltl P) \\<Longrightarrow> vmc_path_no_deadend G P v0 p \\<sigma>\"", "lemma vmc_path_conforms:\n  assumes \"enat (Suc n) < llength P\" \"P $ n \\<in> VV p\"\n  shows \"\\<sigma> (P $ n) = P $ Suc n\"", "lemma vmc_path_lset_induction [consumes 1, case_names base step]:\n  assumes \"Q P\"\n    and base: \"v0 \\<in> S\"\n    and step_assumption: \"\\<And>P v0. \\<lbrakk> vmc_path_no_deadend G P v0 p \\<sigma>; v0 \\<in> S; Q P \\<rbrakk>\n      \\<Longrightarrow> Q (ltl P) \\<and> (vmc_path_no_deadend.w0 P) \\<in> S\"\n  shows \"lset P \\<subseteq> S\"", "lemma vmc_path_lset_induction_closed_subset [case_names VVp VVpstar v0 disjoint]:\n  assumes VVp: \"\\<And>v. \\<lbrakk> v \\<in> S; \\<not>deadend v; v \\<in> VV p \\<rbrakk> \\<Longrightarrow> \\<sigma> v \\<in> S \\<union> T\"\n    and VVpstar: \"\\<And>v w. \\<lbrakk> v \\<in> S; \\<not>deadend v; v \\<in> VV p** ; v\\<rightarrow>w \\<rbrakk> \\<Longrightarrow> w \\<in> S \\<union> T\"\n    and v0: \"v0 \\<in> S\"\n    and disjoint: \"lset P \\<inter> T = {}\"\n  shows \"lset P \\<subseteq> S\""], "translations": [["", "lemma (in ParityGame) strategyI [intro]:\n  \"(\\<And>v. \\<lbrakk> v \\<in> VV p; \\<not>deadend v \\<rbrakk> \\<Longrightarrow> v\\<rightarrow>\\<sigma> v) \\<Longrightarrow> strategy p \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n        \\<Longrightarrow> v \\<rightarrow> \\<sigma> v) \\<Longrightarrow>\n    strategy p \\<sigma>", "unfolding strategy_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n        \\<Longrightarrow> v \\<rightarrow> \\<sigma> v) \\<Longrightarrow>\n    \\<forall>v\\<in>VV p.\n       \\<not> deadend v \\<longrightarrow> v \\<rightarrow> \\<sigma> v", "by blast"], ["", "subsection \\<open>Strategy-Conforming Paths\\<close>"], ["", "text \\<open>\n  If @{term \"path_conforms_with_strategy p P \\<sigma>\"} holds, then we call @{term P} a\n  \\emph{@{term \\<sigma>}-path}.\n  This means that @{term P} follows @{term \\<sigma>} on all nodes of player @{term p}\n  except maybe the last node on the path.\n\\<close>"], ["", "coinductive (in ParityGame) path_conforms_with_strategy\n  :: \"Player \\<Rightarrow> 'a Path \\<Rightarrow> 'a Strategy \\<Rightarrow> bool\" where\n  path_conforms_LNil:  \"path_conforms_with_strategy p LNil \\<sigma>\"\n| path_conforms_LCons_LNil: \"path_conforms_with_strategy p (LCons v LNil) \\<sigma>\"\n| path_conforms_VVp: \"\\<lbrakk> v \\<in> VV p; w = \\<sigma> v; path_conforms_with_strategy p (LCons w Ps) \\<sigma> \\<rbrakk>\n    \\<Longrightarrow> path_conforms_with_strategy p (LCons v (LCons w Ps)) \\<sigma>\"\n| path_conforms_VVpstar: \"\\<lbrakk> v \\<notin> VV p; path_conforms_with_strategy p Ps \\<sigma> \\<rbrakk>\n    \\<Longrightarrow> path_conforms_with_strategy p (LCons v Ps) \\<sigma>\""], ["", "text \\<open>\n  Define a locale for valid maximal paths that conform to a given strategy, because we need\n  this concept quite often.  However, we are not yet able to add interesting lemmas to this locale.\n  We will do this at the end of this section, where we have more lemmas available.\n\\<close>"], ["", "locale vmc_path = vm_path +\n  fixes p \\<sigma> assumes P_conforms [simp]: \"path_conforms_with_strategy p P \\<sigma>\""], ["", "text \\<open>\n  Similary, define a locale for valid maximal paths that conform to given strategies for both\n  players.\n\\<close>"], ["", "locale vmc2_path = comp?: vmc_path G P v0 \"p**\" \\<sigma>' + vmc_path G P v0 p \\<sigma>\n  for G P v0 p \\<sigma> \\<sigma>'"], ["", "subsection \\<open>An Arbitrary Strategy\\<close>"], ["", "context ParityGame begin"], ["", "text \\<open>\n  Define an arbitrary strategy.  This is useful to define other strategies by overriding part of\n  this strategy.\n\\<close>"], ["", "definition \"\\<sigma>_arbitrary \\<equiv> \\<lambda>v. SOME w. v\\<rightarrow>w\""], ["", "lemma valid_arbitrary_strategy [simp]: \"strategy p \\<sigma>_arbitrary\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p \\<sigma>_arbitrary", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> \\<sigma>_arbitrary v", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> \\<sigma>_arbitrary v", "assume \"\\<not>deadend v\""], ["proof (state)\nthis:\n  \\<not> deadend v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> \\<sigma>_arbitrary v", "thus \"v \\<rightarrow> \\<sigma>_arbitrary v\""], ["proof (prove)\nusing this:\n  \\<not> deadend v\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> \\<sigma>_arbitrary v", "unfolding \\<sigma>_arbitrary_def"], ["proof (prove)\nusing this:\n  \\<not> deadend v\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> (SOME w. v \\<rightarrow> w)", "using someI_ex[of \"\\<lambda>w. v\\<rightarrow>w\"]"], ["proof (prove)\nusing this:\n  \\<not> deadend v\n  \\<exists>x. v \\<rightarrow> x \\<Longrightarrow>\n  v \\<rightarrow> (SOME x. v \\<rightarrow> x)\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> (SOME w. v \\<rightarrow> w)", "by blast"], ["proof (state)\nthis:\n  v \\<rightarrow> \\<sigma>_arbitrary v\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Valid Strategies\\<close>"], ["", "lemma valid_strategy_updates: \"\\<lbrakk> strategy p \\<sigma>; v0\\<rightarrow>w0 \\<rbrakk> \\<Longrightarrow> strategy p (\\<sigma>(v0 := w0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>strategy p \\<sigma>; v0 \\<rightarrow> w0\\<rbrakk>\n    \\<Longrightarrow> strategy p (\\<sigma>(v0 := w0))", "unfolding strategy_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>v\\<in>VV p.\n                \\<not> deadend v \\<longrightarrow>\n                v \\<rightarrow> \\<sigma> v;\n     v0 \\<rightarrow> w0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>VV p.\n                         \\<not> deadend v \\<longrightarrow>\n                         v \\<rightarrow> (\\<sigma>(v0 := w0)) v", "by auto"], ["", "lemma valid_strategy_updates_set:\n  assumes \"strategy p \\<sigma>\" \"\\<And>v. \\<lbrakk> v \\<in> A; v \\<in> VV p; \\<not>deadend v \\<rbrakk> \\<Longrightarrow> v\\<rightarrow>\\<sigma>' v\"\n  shows \"strategy p (override_on \\<sigma> \\<sigma>' A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p (override_on \\<sigma> \\<sigma>' A)", "unfolding strategy_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>VV p.\n       \\<not> deadend v \\<longrightarrow>\n       v \\<rightarrow> override_on \\<sigma> \\<sigma>' A v", "by (metis assms override_on_def strategy_def)"], ["", "lemma valid_strategy_updates_set_strong:\n  assumes \"strategy p \\<sigma>\" \"strategy p \\<sigma>'\"\n  shows \"strategy p (override_on \\<sigma> \\<sigma>' A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p (override_on \\<sigma> \\<sigma>' A)", "using assms(1) assms(2)[unfolded strategy_def] valid_strategy_updates_set"], ["proof (prove)\nusing this:\n  strategy p \\<sigma>\n  \\<forall>v\\<in>VV p.\n     \\<not> deadend v \\<longrightarrow> v \\<rightarrow> \\<sigma>' v\n  \\<lbrakk>strategy ?p ?\\<sigma>;\n   \\<And>v.\n      \\<lbrakk>v \\<in> ?A; v \\<in> VV ?p; \\<not> deadend v\\<rbrakk>\n      \\<Longrightarrow> v \\<rightarrow> ?\\<sigma>' v\\<rbrakk>\n  \\<Longrightarrow> strategy ?p (override_on ?\\<sigma> ?\\<sigma>' ?A)\n\ngoal (1 subgoal):\n 1. strategy p (override_on \\<sigma> \\<sigma>' A)", "by simp"], ["", "lemma subgame_strategy_stays_in_subgame:\n  assumes \\<sigma>: \"ParityGame.strategy (subgame V') p \\<sigma>\"\n    and \"v \\<in> ParityGame.VV (subgame V') p\" \"\\<not>Digraph.deadend (subgame V') v\"\n  shows \"\\<sigma> v \\<in> V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> V'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> V'", "interpret G': ParityGame \"subgame V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ParityGame (subgame V')", "using subgame_ParityGame"], ["proof (prove)\nusing this:\n  ParityGame (subgame ?V')\n\ngoal (1 subgoal):\n 1. ParityGame (subgame V')", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> V'", "have \"\\<sigma> v \\<in> V\\<^bsub>subgame V'\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> V\\<^bsub>subgame V'\\<^esub>", "using assms"], ["proof (prove)\nusing this:\n  G'.strategy p \\<sigma>\n  v \\<in> G'.VV p\n  \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                    v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> V\\<^bsub>subgame V'\\<^esub>", "unfolding G'.strategy_def G'.edges_are_in_V(2)"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>G'.VV p.\n     \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                       v \\<rightarrow>\\<^bsub>subgame V'\\<^esub>\n                       w) \\<longrightarrow>\n     v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> \\<sigma> v\n  v \\<in> G'.VV p\n  \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                    v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> V\\<^bsub>subgame V'\\<^esub>", "by blast"], ["proof (state)\nthis:\n  \\<sigma> v \\<in> V\\<^bsub>subgame V'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> V'", "thus \"\\<sigma> v \\<in> V'\""], ["proof (prove)\nusing this:\n  \\<sigma> v \\<in> V\\<^bsub>subgame V'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> V'", "by (metis Diff_iff IntE subgame_VV Player.distinct(2))"], ["proof (state)\nthis:\n  \\<sigma> v \\<in> V'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma valid_strategy_supergame:\n  assumes \\<sigma>: \"strategy p \\<sigma>\"\n    and \\<sigma>': \"ParityGame.strategy (subgame V') p \\<sigma>'\"\n    and G'_no_deadends: \"\\<And>v. v \\<in> V' \\<Longrightarrow> \\<not>Digraph.deadend (subgame V') v\"\n  shows \"strategy p (override_on \\<sigma> \\<sigma>' V')\" (is \"strategy p ?\\<sigma>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p (override_on \\<sigma> \\<sigma>' V')", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "interpret G': ParityGame \"subgame V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ParityGame (subgame V')", "using subgame_ParityGame"], ["proof (prove)\nusing this:\n  ParityGame (subgame ?V')\n\ngoal (1 subgoal):\n 1. ParityGame (subgame V')", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "assume v: \"v \\<in> VV p\" \"\\<not>deadend v\""], ["proof (state)\nthis:\n  v \\<in> VV p\n  \\<not> deadend v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "show \"v \\<rightarrow> ?\\<sigma> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v\n 2. \\<not> ?P \\<Longrightarrow>\n    v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "assume \"v \\<in> V'\""], ["proof (state)\nthis:\n  v \\<in> V'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v\n 2. \\<not> ?P \\<Longrightarrow>\n    v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "hence \"v \\<in> G'.VV p\""], ["proof (prove)\nusing this:\n  v \\<in> V'\n\ngoal (1 subgoal):\n 1. v \\<in> G'.VV p", "using subgame_VV \\<open>v \\<in> VV p\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> V'\n  (if ?p = Even then V0\\<^bsub>subgame ?V'\\<^esub>\n   else V\\<^bsub>subgame ?V'\\<^esub> - V0\\<^bsub>subgame ?V'\\<^esub>) =\n  ?V' \\<inter> VV ?p\n  v \\<in> VV p\n\ngoal (1 subgoal):\n 1. v \\<in> G'.VV p", "by blast"], ["proof (state)\nthis:\n  v \\<in> G'.VV p\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v\n 2. \\<not> ?P \\<Longrightarrow>\n    v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "moreover"], ["proof (state)\nthis:\n  v \\<in> G'.VV p\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v\n 2. \\<not> ?P \\<Longrightarrow>\n    v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "have \"\\<not>G'.deadend v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                      v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)", "using G'_no_deadends \\<open>v \\<in> V'\\<close>"], ["proof (prove)\nusing this:\n  ?v \\<in> V' \\<Longrightarrow>\n  \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                    ?v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)\n  v \\<in> V'\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                      v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)", "by blast"], ["proof (state)\nthis:\n  \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                    v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v\n 2. \\<not> ?P \\<Longrightarrow>\n    v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> G'.VV p\n  \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                    v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)", "have \"v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> \\<sigma>' v\""], ["proof (prove)\nusing this:\n  v \\<in> G'.VV p\n  \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                    v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> \\<sigma>' v", "using \\<sigma>'"], ["proof (prove)\nusing this:\n  v \\<in> G'.VV p\n  \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                    v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)\n  G'.strategy p \\<sigma>'\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> \\<sigma>' v", "unfolding G'.strategy_def"], ["proof (prove)\nusing this:\n  v \\<in> G'.VV p\n  \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                    v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)\n  \\<forall>v\\<in>G'.VV p.\n     \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                       v \\<rightarrow>\\<^bsub>subgame V'\\<^esub>\n                       w) \\<longrightarrow>\n     v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> \\<sigma>' v\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> \\<sigma>' v", "by blast"], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> \\<sigma>' v\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v\n 2. \\<not> ?P \\<Longrightarrow>\n    v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "moreover"], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> \\<sigma>' v\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v\n 2. \\<not> ?P \\<Longrightarrow>\n    v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "have \"\\<sigma>' v = ?\\<sigma> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>' v = override_on \\<sigma> \\<sigma>' V' v", "using \\<open>v \\<in> V'\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> V'\n\ngoal (1 subgoal):\n 1. \\<sigma>' v = override_on \\<sigma> \\<sigma>' V' v", "by simp"], ["proof (state)\nthis:\n  \\<sigma>' v = override_on \\<sigma> \\<sigma>' V' v\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v\n 2. \\<not> ?P \\<Longrightarrow>\n    v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "ultimately"], ["proof (chain)\npicking this:\n  v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> \\<sigma>' v\n  \\<sigma>' v = override_on \\<sigma> \\<sigma>' V' v", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> \\<sigma>' v\n  \\<sigma>' v = override_on \\<sigma> \\<sigma>' V' v\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "by (metis subgame_E subsetCE)"], ["proof (state)\nthis:\n  v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v\n\ngoal (1 subgoal):\n 1. v \\<notin> V' \\<Longrightarrow>\n    v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<notin> V' \\<Longrightarrow>\n    v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "assume \"v \\<notin> V'\""], ["proof (state)\nthis:\n  v \\<notin> V'\n\ngoal (1 subgoal):\n 1. v \\<notin> V' \\<Longrightarrow>\n    v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "thus ?thesis"], ["proof (prove)\nusing this:\n  v \\<notin> V'\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "using v \\<sigma>"], ["proof (prove)\nusing this:\n  v \\<notin> V'\n  v \\<in> VV p\n  \\<not> deadend v\n  strategy p \\<sigma>\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "unfolding strategy_def"], ["proof (prove)\nusing this:\n  v \\<notin> V'\n  v \\<in> VV p\n  \\<not> deadend v\n  \\<forall>v\\<in>VV p.\n     \\<not> deadend v \\<longrightarrow> v \\<rightarrow> \\<sigma> v\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v", "by simp"], ["proof (state)\nthis:\n  v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<rightarrow> override_on \\<sigma> \\<sigma>' V' v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma valid_strategy_in_V: \"\\<lbrakk> strategy p \\<sigma>; v \\<in> VV p; \\<not>deadend v \\<rbrakk> \\<Longrightarrow> \\<sigma> v \\<in> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>strategy p \\<sigma>; v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n    \\<Longrightarrow> \\<sigma> v \\<in> V", "unfolding strategy_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>v\\<in>VV p.\n                \\<not> deadend v \\<longrightarrow>\n                v \\<rightarrow> \\<sigma> v;\n     v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n    \\<Longrightarrow> \\<sigma> v \\<in> V", "using valid_edge_set"], ["proof (prove)\nusing this:\n  E \\<subseteq> V \\<times> V\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>v\\<in>VV p.\n                \\<not> deadend v \\<longrightarrow>\n                v \\<rightarrow> \\<sigma> v;\n     v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n    \\<Longrightarrow> \\<sigma> v \\<in> V", "by auto"], ["", "lemma valid_strategy_only_in_V: \"\\<lbrakk> strategy p \\<sigma>; \\<And>v. v \\<in> V \\<Longrightarrow> \\<sigma> v = \\<sigma>' v \\<rbrakk> \\<Longrightarrow> strategy p \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>strategy p \\<sigma>;\n     \\<And>v. v \\<in> V \\<Longrightarrow> \\<sigma> v = \\<sigma>' v\\<rbrakk>\n    \\<Longrightarrow> strategy p \\<sigma>'", "unfolding strategy_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>v\\<in>VV p.\n                \\<not> deadend v \\<longrightarrow>\n                v \\<rightarrow> \\<sigma> v;\n     \\<And>v. v \\<in> V \\<Longrightarrow> \\<sigma> v = \\<sigma>' v\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>VV p.\n                         \\<not> deadend v \\<longrightarrow>\n                         v \\<rightarrow> \\<sigma>' v", "using edges_are_in_V(1)"], ["proof (prove)\nusing this:\n  ?v \\<rightarrow> ?w \\<Longrightarrow> ?v \\<in> V\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>v\\<in>VV p.\n                \\<not> deadend v \\<longrightarrow>\n                v \\<rightarrow> \\<sigma> v;\n     \\<And>v. v \\<in> V \\<Longrightarrow> \\<sigma> v = \\<sigma>' v\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>VV p.\n                         \\<not> deadend v \\<longrightarrow>\n                         v \\<rightarrow> \\<sigma>' v", "by auto"], ["", "subsection \\<open>Conforming Strategies\\<close>"], ["", "lemma path_conforms_with_strategy_ltl [intro]:\n  \"path_conforms_with_strategy p P \\<sigma> \\<Longrightarrow> path_conforms_with_strategy p (ltl P) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma> \\<Longrightarrow>\n    path_conforms_with_strategy p (ltl P) \\<sigma>", "by (drule path_conforms_with_strategy.cases) (simp_all add: path_conforms_with_strategy.intros(1))"], ["", "lemma path_conforms_with_strategy_drop:\n  \"path_conforms_with_strategy p P \\<sigma> \\<Longrightarrow> path_conforms_with_strategy p (ldropn n P) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma> \\<Longrightarrow>\n    path_conforms_with_strategy p (ldropn n P) \\<sigma>", "by (simp add: path_conforms_with_strategy_ltl ltl_ldrop[of \"\\<lambda>P. path_conforms_with_strategy p P \\<sigma>\"])"], ["", "lemma path_conforms_with_strategy_prefix:\n  \"path_conforms_with_strategy p P \\<sigma> \\<Longrightarrow> lprefix P' P \\<Longrightarrow> path_conforms_with_strategy p P' \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>path_conforms_with_strategy p P \\<sigma>; lprefix P' P\\<rbrakk>\n    \\<Longrightarrow> path_conforms_with_strategy p P' \\<sigma>", "proof (coinduction arbitrary: P P')"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P P'.\n       \\<lbrakk>path_conforms_with_strategy p P \\<sigma>;\n        lprefix P' P\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "case (path_conforms_with_strategy P P')"], ["proof (state)\nthis:\n  path_conforms_with_strategy p P \\<sigma>\n  lprefix P' P\n\ngoal (1 subgoal):\n 1. \\<And>P P'.\n       \\<lbrakk>path_conforms_with_strategy p P \\<sigma>;\n        lprefix P' P\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "thus ?case"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P \\<sigma>\n  lprefix P' P\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'.\n        p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>pa v \\<sigma>'.\n        p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>v pa w \\<sigma>' Ps.\n        p = pa \\<and>\n        P' = LCons v (LCons w Ps) \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>' v \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             LCons w Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'.\n        p = pa \\<and>\n        P' = LCons v Ps \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'))", "proof (cases rule: path_conforms_with_strategy.cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>lprefix P' P; P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>v.\n       \\<lbrakk>lprefix P' P; P = LCons v LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 3. \\<And>v w Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v (LCons w Ps); v \\<in> VV p;\n        w = \\<sigma> v;\n        path_conforms_with_strategy p (LCons w Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 4. \\<And>v Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v Ps; v \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "case path_conforms_LNil"], ["proof (state)\nthis:\n  P = LNil\n\ngoal (4 subgoals):\n 1. \\<lbrakk>lprefix P' P; P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>v.\n       \\<lbrakk>lprefix P' P; P = LCons v LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 3. \\<And>v w Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v (LCons w Ps); v \\<in> VV p;\n        w = \\<sigma> v;\n        path_conforms_with_strategy p (LCons w Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 4. \\<And>v Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v Ps; v \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  P = LNil\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'.\n        p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>pa v \\<sigma>'.\n        p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>v pa w \\<sigma>' Ps.\n        p = pa \\<and>\n        P' = LCons v (LCons w Ps) \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>' v \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             LCons w Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'.\n        p = pa \\<and>\n        P' = LCons v Ps \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'))", "using path_conforms_with_strategy(2)"], ["proof (prove)\nusing this:\n  P = LNil\n  lprefix P' P\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'.\n        p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>pa v \\<sigma>'.\n        p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>v pa w \\<sigma>' Ps.\n        p = pa \\<and>\n        P' = LCons v (LCons w Ps) \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>' v \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             LCons w Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'.\n        p = pa \\<and>\n        P' = LCons v Ps \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>'.\n      p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>pa v \\<sigma>'.\n      p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>v pa w \\<sigma>' Ps.\n      p = pa \\<and>\n      P' = LCons v (LCons w Ps) \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>' v \\<and>\n      ((\\<exists>P P'.\n           pa = p \\<and>\n           LCons w Ps = P' \\<and>\n           \\<sigma>' = \\<sigma> \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           lprefix P' P) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>'.\n      p = pa \\<and>\n      P' = LCons v Ps \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>P P'.\n           pa = p \\<and>\n           Ps = P' \\<and>\n           \\<sigma>' = \\<sigma> \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           lprefix P' P) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'))\n\ngoal (3 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>lprefix P' P; P = LCons v LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>v w Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v (LCons w Ps); v \\<in> VV p;\n        w = \\<sigma> v;\n        path_conforms_with_strategy p (LCons w Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 3. \\<And>v Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v Ps; v \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>lprefix P' P; P = LCons v LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>v w Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v (LCons w Ps); v \\<in> VV p;\n        w = \\<sigma> v;\n        path_conforms_with_strategy p (LCons w Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 3. \\<And>v Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v Ps; v \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "case path_conforms_LCons_LNil"], ["proof (state)\nthis:\n  P = LCons v_ LNil\n\ngoal (3 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>lprefix P' P; P = LCons v LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>v w Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v (LCons w Ps); v \\<in> VV p;\n        w = \\<sigma> v;\n        path_conforms_with_strategy p (LCons w Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 3. \\<And>v Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v Ps; v \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  P = LCons v_ LNil\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'.\n        p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>pa v \\<sigma>'.\n        p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>v pa w \\<sigma>' Ps.\n        p = pa \\<and>\n        P' = LCons v (LCons w Ps) \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>' v \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             LCons w Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'.\n        p = pa \\<and>\n        P' = LCons v Ps \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'))", "by (metis lprefix_LCons_conv lprefix_antisym lprefix_code(1) path_conforms_with_strategy(2))"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>'.\n      p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>pa v \\<sigma>'.\n      p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>v pa w \\<sigma>' Ps.\n      p = pa \\<and>\n      P' = LCons v (LCons w Ps) \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>' v \\<and>\n      ((\\<exists>P P'.\n           pa = p \\<and>\n           LCons w Ps = P' \\<and>\n           \\<sigma>' = \\<sigma> \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           lprefix P' P) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>'.\n      p = pa \\<and>\n      P' = LCons v Ps \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>P P'.\n           pa = p \\<and>\n           Ps = P' \\<and>\n           \\<sigma>' = \\<sigma> \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           lprefix P' P) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'))\n\ngoal (2 subgoals):\n 1. \\<And>v w Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v (LCons w Ps); v \\<in> VV p;\n        w = \\<sigma> v;\n        path_conforms_with_strategy p (LCons w Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>v Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v Ps; v \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v w Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v (LCons w Ps); v \\<in> VV p;\n        w = \\<sigma> v;\n        path_conforms_with_strategy p (LCons w Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>v Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v Ps; v \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "case (path_conforms_VVp v w)"], ["proof (state)\nthis:\n  P = LCons v (LCons w Ps_)\n  v \\<in> VV p\n  w = \\<sigma> v\n  path_conforms_with_strategy p (LCons w Ps_) \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>v w Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v (LCons w Ps); v \\<in> VV p;\n        w = \\<sigma> v;\n        path_conforms_with_strategy p (LCons w Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>v Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v Ps; v \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  P = LCons v (LCons w Ps_)\n  v \\<in> VV p\n  w = \\<sigma> v\n  path_conforms_with_strategy p (LCons w Ps_) \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'.\n        p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>pa v \\<sigma>'.\n        p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>v pa w \\<sigma>' Ps.\n        p = pa \\<and>\n        P' = LCons v (LCons w Ps) \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>' v \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             LCons w Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'.\n        p = pa \\<and>\n        P' = LCons v Ps \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'))", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>P = LCons v (LCons w Ps_); v \\<in> VV p; w = \\<sigma> v;\n     path_conforms_with_strategy p (LCons w Ps_) \\<sigma>; ?P4\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<lbrakk>P = LCons v (LCons w Ps_); v \\<in> VV p; w = \\<sigma> v;\n     path_conforms_with_strategy p (LCons w Ps_) \\<sigma>;\n     \\<not> ?P4\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))", "assume \"P' \\<noteq> LNil \\<and> P' \\<noteq> LCons v LNil\""], ["proof (state)\nthis:\n  P' \\<noteq> LNil \\<and> P' \\<noteq> LCons v LNil\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P = LCons v (LCons w Ps_); v \\<in> VV p; w = \\<sigma> v;\n     path_conforms_with_strategy p (LCons w Ps_) \\<sigma>; ?P4\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<lbrakk>P = LCons v (LCons w Ps_); v \\<in> VV p; w = \\<sigma> v;\n     path_conforms_with_strategy p (LCons w Ps_) \\<sigma>;\n     \\<not> ?P4\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))", "hence \"\\<exists>Q. P' = LCons v (LCons w Q)\""], ["proof (prove)\nusing this:\n  P' \\<noteq> LNil \\<and> P' \\<noteq> LCons v LNil\n\ngoal (1 subgoal):\n 1. \\<exists>Q. P' = LCons v (LCons w Q)", "by (metis local.path_conforms_VVp(1) lprefix_LCons_conv path_conforms_with_strategy(2))"], ["proof (state)\nthis:\n  \\<exists>Q. P' = LCons v (LCons w Q)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P = LCons v (LCons w Ps_); v \\<in> VV p; w = \\<sigma> v;\n     path_conforms_with_strategy p (LCons w Ps_) \\<sigma>; ?P4\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<lbrakk>P = LCons v (LCons w Ps_); v \\<in> VV p; w = \\<sigma> v;\n     path_conforms_with_strategy p (LCons w Ps_) \\<sigma>;\n     \\<not> ?P4\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>Q. P' = LCons v (LCons w Q)\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'.\n        p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>pa v \\<sigma>'.\n        p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>v pa w \\<sigma>' Ps.\n        p = pa \\<and>\n        P' = LCons v (LCons w Ps) \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>' v \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             LCons w Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'.\n        p = pa \\<and>\n        P' = LCons v Ps \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'))", "using local.path_conforms_VVp(1,3,4) path_conforms_with_strategy(2)"], ["proof (prove)\nusing this:\n  \\<exists>Q. P' = LCons v (LCons w Q)\n  P = LCons v (LCons w Ps_)\n  w = \\<sigma> v\n  path_conforms_with_strategy p (LCons w Ps_) \\<sigma>\n  lprefix P' P\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'.\n        p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>pa v \\<sigma>'.\n        p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>v pa w \\<sigma>' Ps.\n        p = pa \\<and>\n        P' = LCons v (LCons w Ps) \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>' v \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             LCons w Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'.\n        p = pa \\<and>\n        P' = LCons v Ps \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'))", "by force"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>'.\n      p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>pa v \\<sigma>'.\n      p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>v pa w \\<sigma>' Ps.\n      p = pa \\<and>\n      P' = LCons v (LCons w Ps) \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>' v \\<and>\n      ((\\<exists>P P'.\n           pa = p \\<and>\n           LCons w Ps = P' \\<and>\n           \\<sigma>' = \\<sigma> \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           lprefix P' P) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>'.\n      p = pa \\<and>\n      P' = LCons v Ps \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>P P'.\n           pa = p \\<and>\n           Ps = P' \\<and>\n           \\<sigma>' = \\<sigma> \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           lprefix P' P) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P = LCons v (LCons w Ps_); v \\<in> VV p; w = \\<sigma> v;\n     path_conforms_with_strategy p (LCons w Ps_) \\<sigma>;\n     \\<not> (P' \\<noteq> LNil \\<and> P' \\<noteq> LCons v LNil)\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>'.\n      p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>pa v \\<sigma>'.\n      p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>v pa w \\<sigma>' Ps.\n      p = pa \\<and>\n      P' = LCons v (LCons w Ps) \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>' v \\<and>\n      ((\\<exists>P P'.\n           pa = p \\<and>\n           LCons w Ps = P' \\<and>\n           \\<sigma>' = \\<sigma> \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           lprefix P' P) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>'.\n      p = pa \\<and>\n      P' = LCons v Ps \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>P P'.\n           pa = p \\<and>\n           Ps = P' \\<and>\n           \\<sigma>' = \\<sigma> \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           lprefix P' P) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'))\n\ngoal (1 subgoal):\n 1. \\<And>v Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v Ps; v \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v Ps; v \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "case (path_conforms_VVpstar v)"], ["proof (state)\nthis:\n  P = LCons v Ps_\n  v \\<notin> VV p\n  path_conforms_with_strategy p Ps_ \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>v Ps.\n       \\<lbrakk>lprefix P' P; P = LCons v Ps; v \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>pa v \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v LNil \\<and>\n                             \\<sigma> = \\<sigma>') \\<or>\n                         (\\<exists>v pa w \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P' = LCons v (LCons w Ps) \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>' v \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  LCons w Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P' = LCons v Ps \\<and>\n                             \\<sigma> = \\<sigma>' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P P'.\n                                  pa = p \\<and>\n                                  Ps = P' \\<and>\n                                  \\<sigma>' = \\<sigma> \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  lprefix P' P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  P = LCons v Ps_\n  v \\<notin> VV p\n  path_conforms_with_strategy p Ps_ \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'.\n        p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>pa v \\<sigma>'.\n        p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>v pa w \\<sigma>' Ps.\n        p = pa \\<and>\n        P' = LCons v (LCons w Ps) \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>' v \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             LCons w Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'.\n        p = pa \\<and>\n        P' = LCons v Ps \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'))", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>P = LCons v Ps_; v \\<notin> VV p;\n     path_conforms_with_strategy p Ps_ \\<sigma>; ?P3\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<lbrakk>P = LCons v Ps_; v \\<notin> VV p;\n     path_conforms_with_strategy p Ps_ \\<sigma>; \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))", "assume \"P' \\<noteq> LNil\""], ["proof (state)\nthis:\n  P' \\<noteq> LNil\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P = LCons v Ps_; v \\<notin> VV p;\n     path_conforms_with_strategy p Ps_ \\<sigma>; ?P3\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<lbrakk>P = LCons v Ps_; v \\<notin> VV p;\n     path_conforms_with_strategy p Ps_ \\<sigma>; \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))", "hence \"\\<exists>Q. P' = LCons v Q\""], ["proof (prove)\nusing this:\n  P' \\<noteq> LNil\n\ngoal (1 subgoal):\n 1. \\<exists>Q. P' = LCons v Q", "using local.path_conforms_VVpstar(1) lprefix_LCons_conv path_conforms_with_strategy(2)"], ["proof (prove)\nusing this:\n  P' \\<noteq> LNil\n  P = LCons v Ps_\n  lprefix ?xs (LCons ?y ?ys) =\n  (?xs = LNil \\<or>\n   (\\<exists>xs'. ?xs = LCons ?y xs' \\<and> lprefix xs' ?ys))\n  lprefix P' P\n\ngoal (1 subgoal):\n 1. \\<exists>Q. P' = LCons v Q", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>Q. P' = LCons v Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P = LCons v Ps_; v \\<notin> VV p;\n     path_conforms_with_strategy p Ps_ \\<sigma>; ?P3\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<lbrakk>P = LCons v Ps_; v \\<notin> VV p;\n     path_conforms_with_strategy p Ps_ \\<sigma>; \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>Q. P' = LCons v Q\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'.\n        p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>pa v \\<sigma>'.\n        p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>v pa w \\<sigma>' Ps.\n        p = pa \\<and>\n        P' = LCons v (LCons w Ps) \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>' v \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             LCons w Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'.\n        p = pa \\<and>\n        P' = LCons v Ps \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'))", "using local.path_conforms_VVpstar path_conforms_with_strategy(2)"], ["proof (prove)\nusing this:\n  \\<exists>Q. P' = LCons v Q\n  P = LCons v Ps_\n  v \\<notin> VV p\n  path_conforms_with_strategy p Ps_ \\<sigma>\n  lprefix P' P\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'.\n        p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>pa v \\<sigma>'.\n        p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>v pa w \\<sigma>' Ps.\n        p = pa \\<and>\n        P' = LCons v (LCons w Ps) \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>' v \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             LCons w Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'.\n        p = pa \\<and>\n        P' = LCons v Ps \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>P P'.\n             pa = p \\<and>\n             Ps = P' \\<and>\n             \\<sigma>' = \\<sigma> \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             lprefix P' P) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>'.\n      p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>pa v \\<sigma>'.\n      p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>v pa w \\<sigma>' Ps.\n      p = pa \\<and>\n      P' = LCons v (LCons w Ps) \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>' v \\<and>\n      ((\\<exists>P P'.\n           pa = p \\<and>\n           LCons w Ps = P' \\<and>\n           \\<sigma>' = \\<sigma> \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           lprefix P' P) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>'.\n      p = pa \\<and>\n      P' = LCons v Ps \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>P P'.\n           pa = p \\<and>\n           Ps = P' \\<and>\n           \\<sigma>' = \\<sigma> \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           lprefix P' P) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P = LCons v Ps_; v \\<notin> VV p;\n     path_conforms_with_strategy p Ps_ \\<sigma>;\n     \\<not> P' \\<noteq> LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>pa v \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v LNil \\<and>\n                          \\<sigma> = \\<sigma>') \\<or>\n                      (\\<exists>v pa w \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P' = LCons v (LCons w Ps) \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>' v \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               LCons w Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P' = LCons v Ps \\<and>\n                          \\<sigma> = \\<sigma>' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P P'.\n                               pa = p \\<and>\n                               Ps = P' \\<and>\n                               \\<sigma>' = \\<sigma> \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               lprefix P' P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))", "qed simp"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>'.\n      p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>pa v \\<sigma>'.\n      p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>v pa w \\<sigma>' Ps.\n      p = pa \\<and>\n      P' = LCons v (LCons w Ps) \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>' v \\<and>\n      ((\\<exists>P P'.\n           pa = p \\<and>\n           LCons w Ps = P' \\<and>\n           \\<sigma>' = \\<sigma> \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           lprefix P' P) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>'.\n      p = pa \\<and>\n      P' = LCons v Ps \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>P P'.\n           pa = p \\<and>\n           Ps = P' \\<and>\n           \\<sigma>' = \\<sigma> \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           lprefix P' P) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>'.\n      p = pa \\<and> P' = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>pa v \\<sigma>'.\n      p = pa \\<and> P' = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>v pa w \\<sigma>' Ps.\n      p = pa \\<and>\n      P' = LCons v (LCons w Ps) \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>' v \\<and>\n      ((\\<exists>P P'.\n           pa = p \\<and>\n           LCons w Ps = P' \\<and>\n           \\<sigma>' = \\<sigma> \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           lprefix P' P) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>'.\n      p = pa \\<and>\n      P' = LCons v Ps \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>P P'.\n           pa = p \\<and>\n           Ps = P' \\<and>\n           \\<sigma>' = \\<sigma> \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           lprefix P' P) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_conforms_with_strategy_irrelevant:\n  assumes \"path_conforms_with_strategy p P \\<sigma>\" \"v \\<notin> lset P\"\n  shows \"path_conforms_with_strategy p P (\\<sigma>(v := w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P (\\<sigma>(v := w))", "using assms"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P \\<sigma>\n  v \\<notin> lset P\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P (\\<sigma>(v := w))", "apply (coinduction arbitrary: P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>path_conforms_with_strategy p P \\<sigma>;\n        v \\<notin> lset P\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  v \\<notin> lset P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  v \\<notin> lset P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "by (drule path_conforms_with_strategy.cases) auto"], ["", "lemma path_conforms_with_strategy_irrelevant_deadend:\n  assumes \"path_conforms_with_strategy p P \\<sigma>\" \"deadend v \\<or> v \\<notin> VV p\" \"valid_path P\"\n  shows \"path_conforms_with_strategy p P (\\<sigma>(v := w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P (\\<sigma>(v := w))", "using assms"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P \\<sigma>\n  deadend v \\<or> v \\<notin> VV p\n  valid_path P\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P (\\<sigma>(v := w))", "proof (coinduction arbitrary: P)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>path_conforms_with_strategy p P \\<sigma>;\n        deadend v \\<or> v \\<notin> VV p; valid_path P\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "let ?\\<sigma> = \"\\<sigma>(v := w)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>path_conforms_with_strategy p P \\<sigma>;\n        deadend v \\<or> v \\<notin> VV p; valid_path P\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "case (path_conforms_with_strategy P)"], ["proof (state)\nthis:\n  path_conforms_with_strategy p P \\<sigma>\n  deadend v \\<or> v \\<notin> VV p\n  valid_path P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>path_conforms_with_strategy p P \\<sigma>;\n        deadend v \\<or> v \\<notin> VV p; valid_path P\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "thus ?case"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P \\<sigma>\n  deadend v \\<or> v \\<notin> VV p\n  valid_path P\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'.\n        p = pa \\<and> P = LNil \\<and> \\<sigma>(v := w) = \\<sigma>') \\<or>\n    (\\<exists>pa va \\<sigma>'.\n        p = pa \\<and>\n        P = LCons va LNil \\<and> \\<sigma>(v := w) = \\<sigma>') \\<or>\n    (\\<exists>va pa wa \\<sigma>' Ps.\n        p = pa \\<and>\n        P = LCons va (LCons wa Ps) \\<and>\n        \\<sigma>(v := w) = \\<sigma>' \\<and>\n        va \\<in> VV pa \\<and>\n        wa = \\<sigma>' va \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             LCons wa Ps = P \\<and>\n             \\<sigma>' = \\<sigma>(v := w) \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P) \\<or>\n         path_conforms_with_strategy pa (LCons wa Ps) \\<sigma>')) \\<or>\n    (\\<exists>va pa Ps \\<sigma>'.\n        p = pa \\<and>\n        P = LCons va Ps \\<and>\n        \\<sigma>(v := w) = \\<sigma>' \\<and>\n        va \\<notin> VV pa \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             Ps = P \\<and>\n             \\<sigma>' = \\<sigma>(v := w) \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'))", "proof (cases rule: path_conforms_with_strategy.cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n     P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P = LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>pa va \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>va pa wa \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P = LCons va (LCons wa Ps) \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<in> VV pa \\<and>\n                          wa = \\<sigma>' va \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               LCons wa Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa (LCons wa Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>va pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va Ps \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<notin> VV pa \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>va.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 3. \\<And>va wa Ps.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va (LCons wa Ps); va \\<in> VV p; wa = \\<sigma> va;\n        path_conforms_with_strategy p (LCons wa Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 4. \\<And>va Ps.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va Ps; va \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "case (path_conforms_VVp v' w Ps)"], ["proof (state)\nthis:\n  P = LCons v' (LCons w Ps)\n  v' \\<in> VV p\n  w = \\<sigma> v'\n  path_conforms_with_strategy p (LCons w Ps) \\<sigma>\n\ngoal (4 subgoals):\n 1. \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n     P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P = LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>pa va \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>va pa wa \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P = LCons va (LCons wa Ps) \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<in> VV pa \\<and>\n                          wa = \\<sigma>' va \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               LCons wa Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa (LCons wa Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>va pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va Ps \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<notin> VV pa \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>va.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 3. \\<And>va wa Ps.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va (LCons wa Ps); va \\<in> VV p; wa = \\<sigma> va;\n        path_conforms_with_strategy p (LCons wa Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 4. \\<And>va Ps.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va Ps; va \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "have \"w = ?\\<sigma> v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w = (\\<sigma>(v := w)) v'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. w = (\\<sigma>(v := w)) v'", "from \\<open>valid_path P\\<close>"], ["proof (chain)\npicking this:\n  valid_path P", "have \"\\<not>deadend v'\""], ["proof (prove)\nusing this:\n  valid_path P\n\ngoal (1 subgoal):\n 1. \\<not> deadend v'", "using local.path_conforms_VVp(1) valid_path_cons_simp"], ["proof (prove)\nusing this:\n  valid_path P\n  P = LCons v' (LCons w Ps)\n  valid_path (LCons ?x ?xs) =\n  (?xs = LNil \\<and> ?x \\<in> V \\<or>\n   ?x \\<in> V \\<and>\n   lhd ?xs \\<in> V \\<and>\n   ?x \\<rightarrow> lhd ?xs \\<and> valid_path ?xs \\<and> \\<not> lnull ?xs)\n\ngoal (1 subgoal):\n 1. \\<not> deadend v'", "by blast"], ["proof (state)\nthis:\n  \\<not> deadend v'\n\ngoal (1 subgoal):\n 1. w = (\\<sigma>(v := w)) v'", "with assms(2)"], ["proof (chain)\npicking this:\n  deadend v \\<or> v \\<notin> VV p\n  \\<not> deadend v'", "have \"v' \\<noteq> v\""], ["proof (prove)\nusing this:\n  deadend v \\<or> v \\<notin> VV p\n  \\<not> deadend v'\n\ngoal (1 subgoal):\n 1. v' \\<noteq> v", "using local.path_conforms_VVp(2)"], ["proof (prove)\nusing this:\n  deadend v \\<or> v \\<notin> VV p\n  \\<not> deadend v'\n  v' \\<in> VV p\n\ngoal (1 subgoal):\n 1. v' \\<noteq> v", "by blast"], ["proof (state)\nthis:\n  v' \\<noteq> v\n\ngoal (1 subgoal):\n 1. w = (\\<sigma>(v := w)) v'", "thus \"w = ?\\<sigma> v'\""], ["proof (prove)\nusing this:\n  v' \\<noteq> v\n\ngoal (1 subgoal):\n 1. w = (\\<sigma>(v := w)) v'", "by (simp add: local.path_conforms_VVp(3))"], ["proof (state)\nthis:\n  w = (\\<sigma>(v := w)) v'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w = (\\<sigma>(v := w)) v'\n\ngoal (4 subgoals):\n 1. \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n     P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P = LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>pa va \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>va pa wa \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P = LCons va (LCons wa Ps) \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<in> VV pa \\<and>\n                          wa = \\<sigma>' va \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               LCons wa Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa (LCons wa Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>va pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va Ps \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<notin> VV pa \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>va.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 3. \\<And>va wa Ps.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va (LCons wa Ps); va \\<in> VV p; wa = \\<sigma> va;\n        path_conforms_with_strategy p (LCons wa Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 4. \\<And>va Ps.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va Ps; va \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "moreover"], ["proof (state)\nthis:\n  w = (\\<sigma>(v := w)) v'\n\ngoal (4 subgoals):\n 1. \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n     P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P = LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>pa va \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>va pa wa \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P = LCons va (LCons wa Ps) \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<in> VV pa \\<and>\n                          wa = \\<sigma>' va \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               LCons wa Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa (LCons wa Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>va pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va Ps \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<notin> VV pa \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>va.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 3. \\<And>va wa Ps.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va (LCons wa Ps); va \\<in> VV p; wa = \\<sigma> va;\n        path_conforms_with_strategy p (LCons wa Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 4. \\<And>va Ps.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va Ps; va \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "have \"\\<exists>P. LCons w Ps = P \\<and> path_conforms_with_strategy p P \\<sigma> \\<and> (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P.\n       LCons w Ps = P \\<and>\n       path_conforms_with_strategy p P \\<sigma> \\<and>\n       (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P.\n       LCons w Ps = P \\<and>\n       path_conforms_with_strategy p P \\<sigma> \\<and>\n       (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P", "have \"valid_path (LCons w Ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_path (LCons w Ps)", "using local.path_conforms_VVp(1) path_conforms_with_strategy(3) valid_path_ltl'"], ["proof (prove)\nusing this:\n  P = LCons v' (LCons w Ps)\n  valid_path P\n  valid_path (LCons ?v ?Ps) \\<Longrightarrow> valid_path ?Ps\n\ngoal (1 subgoal):\n 1. valid_path (LCons w Ps)", "by blast"], ["proof (state)\nthis:\n  valid_path (LCons w Ps)\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       LCons w Ps = P \\<and>\n       path_conforms_with_strategy p P \\<sigma> \\<and>\n       (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P", "thus ?thesis"], ["proof (prove)\nusing this:\n  valid_path (LCons w Ps)\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       LCons w Ps = P \\<and>\n       path_conforms_with_strategy p P \\<sigma> \\<and>\n       (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P", "using local.path_conforms_VVp(4) path_conforms_with_strategy(2)"], ["proof (prove)\nusing this:\n  valid_path (LCons w Ps)\n  path_conforms_with_strategy p (LCons w Ps) \\<sigma>\n  deadend v \\<or> v \\<notin> VV p\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       LCons w Ps = P \\<and>\n       path_conforms_with_strategy p P \\<sigma> \\<and>\n       (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P", "by blast"], ["proof (state)\nthis:\n  \\<exists>P.\n     LCons w Ps = P \\<and>\n     path_conforms_with_strategy p P \\<sigma> \\<and>\n     (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>P.\n     LCons w Ps = P \\<and>\n     path_conforms_with_strategy p P \\<sigma> \\<and>\n     (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P\n\ngoal (4 subgoals):\n 1. \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n     P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P = LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>pa va \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>va pa wa \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P = LCons va (LCons wa Ps) \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<in> VV pa \\<and>\n                          wa = \\<sigma>' va \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               LCons wa Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa (LCons wa Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>va pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va Ps \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<notin> VV pa \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>va.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 3. \\<And>va wa Ps.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va (LCons wa Ps); va \\<in> VV p; wa = \\<sigma> va;\n        path_conforms_with_strategy p (LCons wa Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 4. \\<And>va Ps.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va Ps; va \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "ultimately"], ["proof (chain)\npicking this:\n  w = (\\<sigma>(v := w)) v'\n  \\<exists>P.\n     LCons w Ps = P \\<and>\n     path_conforms_with_strategy p P \\<sigma> \\<and>\n     (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P", "show ?thesis"], ["proof (prove)\nusing this:\n  w = (\\<sigma>(v := w)) v'\n  \\<exists>P.\n     LCons w Ps = P \\<and>\n     path_conforms_with_strategy p P \\<sigma> \\<and>\n     (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'.\n        p = pa \\<and> P = LNil \\<and> \\<sigma>(v := w) = \\<sigma>') \\<or>\n    (\\<exists>pa va \\<sigma>'.\n        p = pa \\<and>\n        P = LCons va LNil \\<and> \\<sigma>(v := w) = \\<sigma>') \\<or>\n    (\\<exists>va pa wa \\<sigma>' Ps.\n        p = pa \\<and>\n        P = LCons va (LCons wa Ps) \\<and>\n        \\<sigma>(v := w) = \\<sigma>' \\<and>\n        va \\<in> VV pa \\<and>\n        wa = \\<sigma>' va \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             LCons wa Ps = P \\<and>\n             \\<sigma>' = \\<sigma>(v := w) \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P) \\<or>\n         path_conforms_with_strategy pa (LCons wa Ps) \\<sigma>')) \\<or>\n    (\\<exists>va pa Ps \\<sigma>'.\n        p = pa \\<and>\n        P = LCons va Ps \\<and>\n        \\<sigma>(v := w) = \\<sigma>' \\<and>\n        va \\<notin> VV pa \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             Ps = P \\<and>\n             \\<sigma>' = \\<sigma>(v := w) \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'))", "using local.path_conforms_VVp(1,2)"], ["proof (prove)\nusing this:\n  w = (\\<sigma>(v := w)) v'\n  \\<exists>P.\n     LCons w Ps = P \\<and>\n     path_conforms_with_strategy p P \\<sigma> \\<and>\n     (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P\n  P = LCons v' (LCons w Ps)\n  v' \\<in> VV p\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'.\n        p = pa \\<and> P = LNil \\<and> \\<sigma>(v := w) = \\<sigma>') \\<or>\n    (\\<exists>pa va \\<sigma>'.\n        p = pa \\<and>\n        P = LCons va LNil \\<and> \\<sigma>(v := w) = \\<sigma>') \\<or>\n    (\\<exists>va pa wa \\<sigma>' Ps.\n        p = pa \\<and>\n        P = LCons va (LCons wa Ps) \\<and>\n        \\<sigma>(v := w) = \\<sigma>' \\<and>\n        va \\<in> VV pa \\<and>\n        wa = \\<sigma>' va \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             LCons wa Ps = P \\<and>\n             \\<sigma>' = \\<sigma>(v := w) \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P) \\<or>\n         path_conforms_with_strategy pa (LCons wa Ps) \\<sigma>')) \\<or>\n    (\\<exists>va pa Ps \\<sigma>'.\n        p = pa \\<and>\n        P = LCons va Ps \\<and>\n        \\<sigma>(v := w) = \\<sigma>' \\<and>\n        va \\<notin> VV pa \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             Ps = P \\<and>\n             \\<sigma>' = \\<sigma>(v := w) \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>'.\n      p = pa \\<and> P = LNil \\<and> \\<sigma>(v := w) = \\<sigma>') \\<or>\n  (\\<exists>pa va \\<sigma>'.\n      p = pa \\<and>\n      P = LCons va LNil \\<and> \\<sigma>(v := w) = \\<sigma>') \\<or>\n  (\\<exists>va pa wa \\<sigma>' Ps.\n      p = pa \\<and>\n      P = LCons va (LCons wa Ps) \\<and>\n      \\<sigma>(v := w) = \\<sigma>' \\<and>\n      va \\<in> VV pa \\<and>\n      wa = \\<sigma>' va \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           LCons wa Ps = P \\<and>\n           \\<sigma>' = \\<sigma>(v := w) \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P) \\<or>\n       path_conforms_with_strategy pa (LCons wa Ps) \\<sigma>')) \\<or>\n  (\\<exists>va pa Ps \\<sigma>'.\n      p = pa \\<and>\n      P = LCons va Ps \\<and>\n      \\<sigma>(v := w) = \\<sigma>' \\<and>\n      va \\<notin> VV pa \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           Ps = P \\<and>\n           \\<sigma>' = \\<sigma>(v := w) \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'))\n\ngoal (3 subgoals):\n 1. \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n     P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P = LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>pa va \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>va pa wa \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P = LCons va (LCons wa Ps) \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<in> VV pa \\<and>\n                          wa = \\<sigma>' va \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               LCons wa Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa (LCons wa Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>va pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va Ps \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<notin> VV pa \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>va.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 3. \\<And>va Ps.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va Ps; va \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n     P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P = LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>pa va \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>va pa wa \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P = LCons va (LCons wa Ps) \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<in> VV pa \\<and>\n                          wa = \\<sigma>' va \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               LCons wa Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa (LCons wa Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>va pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va Ps \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<notin> VV pa \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>va.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 3. \\<And>va Ps.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va Ps; va \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "case (path_conforms_VVpstar v' Ps)"], ["proof (state)\nthis:\n  P = LCons v' Ps\n  v' \\<notin> VV p\n  path_conforms_with_strategy p Ps \\<sigma>\n\ngoal (3 subgoals):\n 1. \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n     P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P = LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>pa va \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>va pa wa \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P = LCons va (LCons wa Ps) \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<in> VV pa \\<and>\n                          wa = \\<sigma>' va \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               LCons wa Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa (LCons wa Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>va pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va Ps \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<notin> VV pa \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>va.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 3. \\<And>va Ps.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va Ps; va \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "have \"\\<exists>P. path_conforms_with_strategy p Ps \\<sigma> \\<and> (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path Ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P.\n       path_conforms_with_strategy p Ps \\<sigma> \\<and>\n       (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path Ps", "using local.path_conforms_VVpstar(1,3) path_conforms_with_strategy(2,3) valid_path_ltl'"], ["proof (prove)\nusing this:\n  P = LCons v' Ps\n  path_conforms_with_strategy p Ps \\<sigma>\n  deadend v \\<or> v \\<notin> VV p\n  valid_path P\n  valid_path (LCons ?v ?Ps) \\<Longrightarrow> valid_path ?Ps\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       path_conforms_with_strategy p Ps \\<sigma> \\<and>\n       (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path Ps", "by blast"], ["proof (state)\nthis:\n  \\<exists>P.\n     path_conforms_with_strategy p Ps \\<sigma> \\<and>\n     (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path Ps\n\ngoal (3 subgoals):\n 1. \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n     P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P = LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>pa va \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>va pa wa \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P = LCons va (LCons wa Ps) \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<in> VV pa \\<and>\n                          wa = \\<sigma>' va \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               LCons wa Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa (LCons wa Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>va pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va Ps \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<notin> VV pa \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>va.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))\n 3. \\<And>va Ps.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va Ps; va \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>P.\n     path_conforms_with_strategy p Ps \\<sigma> \\<and>\n     (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path Ps\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'.\n        p = pa \\<and> P = LNil \\<and> \\<sigma>(v := w) = \\<sigma>') \\<or>\n    (\\<exists>pa va \\<sigma>'.\n        p = pa \\<and>\n        P = LCons va LNil \\<and> \\<sigma>(v := w) = \\<sigma>') \\<or>\n    (\\<exists>va pa wa \\<sigma>' Ps.\n        p = pa \\<and>\n        P = LCons va (LCons wa Ps) \\<and>\n        \\<sigma>(v := w) = \\<sigma>' \\<and>\n        va \\<in> VV pa \\<and>\n        wa = \\<sigma>' va \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             LCons wa Ps = P \\<and>\n             \\<sigma>' = \\<sigma>(v := w) \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P) \\<or>\n         path_conforms_with_strategy pa (LCons wa Ps) \\<sigma>')) \\<or>\n    (\\<exists>va pa Ps \\<sigma>'.\n        p = pa \\<and>\n        P = LCons va Ps \\<and>\n        \\<sigma>(v := w) = \\<sigma>' \\<and>\n        va \\<notin> VV pa \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             Ps = P \\<and>\n             \\<sigma>' = \\<sigma>(v := w) \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'))", "by (simp add: local.path_conforms_VVpstar(1,2))"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>'.\n      p = pa \\<and> P = LNil \\<and> \\<sigma>(v := w) = \\<sigma>') \\<or>\n  (\\<exists>pa va \\<sigma>'.\n      p = pa \\<and>\n      P = LCons va LNil \\<and> \\<sigma>(v := w) = \\<sigma>') \\<or>\n  (\\<exists>va pa wa \\<sigma>' Ps.\n      p = pa \\<and>\n      P = LCons va (LCons wa Ps) \\<and>\n      \\<sigma>(v := w) = \\<sigma>' \\<and>\n      va \\<in> VV pa \\<and>\n      wa = \\<sigma>' va \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           LCons wa Ps = P \\<and>\n           \\<sigma>' = \\<sigma>(v := w) \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P) \\<or>\n       path_conforms_with_strategy pa (LCons wa Ps) \\<sigma>')) \\<or>\n  (\\<exists>va pa Ps \\<sigma>'.\n      p = pa \\<and>\n      P = LCons va Ps \\<and>\n      \\<sigma>(v := w) = \\<sigma>' \\<and>\n      va \\<notin> VV pa \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           Ps = P \\<and>\n           \\<sigma>' = \\<sigma>(v := w) \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n     P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                          p = pa \\<and>\n                          P = LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>pa va \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va LNil \\<and>\n                          \\<sigma>(v := w) = \\<sigma>') \\<or>\n                      (\\<exists>va pa wa \\<sigma>' Ps.\n                          p = pa \\<and>\n                          P = LCons va (LCons wa Ps) \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<in> VV pa \\<and>\n                          wa = \\<sigma>' va \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               LCons wa Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa (LCons wa Ps)\n                            \\<sigma>')) \\<or>\n                      (\\<exists>va pa Ps \\<sigma>'.\n                          p = pa \\<and>\n                          P = LCons va Ps \\<and>\n                          \\<sigma>(v := w) = \\<sigma>' \\<and>\n                          va \\<notin> VV pa \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               Ps = P \\<and>\n                               \\<sigma>' = \\<sigma>(v := w) \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (deadend v \\<or> v \\<notin> VV p) \\<and>\n                               valid_path P) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>'))\n 2. \\<And>va.\n       \\<lbrakk>deadend v \\<or> v \\<notin> VV p; valid_path P;\n        P = LCons va LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'.\n                             p = pa \\<and>\n                             P = LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>pa va \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va LNil \\<and>\n                             \\<sigma>(v := w) = \\<sigma>') \\<or>\n                         (\\<exists>va pa wa \\<sigma>' Ps.\n                             p = pa \\<and>\n                             P = LCons va (LCons wa Ps) \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<in> VV pa \\<and>\n                             wa = \\<sigma>' va \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons wa Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa (LCons wa Ps)\n                               \\<sigma>')) \\<or>\n                         (\\<exists>va pa Ps \\<sigma>'.\n                             p = pa \\<and>\n                             P = LCons va Ps \\<and>\n                             \\<sigma>(v := w) = \\<sigma>' \\<and>\n                             va \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>' = \\<sigma>(v := w) \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (deadend v \\<or> v \\<notin> VV p) \\<and>\n                                  valid_path P) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>'))", "qed simp_all"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>'.\n      p = pa \\<and> P = LNil \\<and> \\<sigma>(v := w) = \\<sigma>') \\<or>\n  (\\<exists>pa va \\<sigma>'.\n      p = pa \\<and>\n      P = LCons va LNil \\<and> \\<sigma>(v := w) = \\<sigma>') \\<or>\n  (\\<exists>va pa wa \\<sigma>' Ps.\n      p = pa \\<and>\n      P = LCons va (LCons wa Ps) \\<and>\n      \\<sigma>(v := w) = \\<sigma>' \\<and>\n      va \\<in> VV pa \\<and>\n      wa = \\<sigma>' va \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           LCons wa Ps = P \\<and>\n           \\<sigma>' = \\<sigma>(v := w) \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P) \\<or>\n       path_conforms_with_strategy pa (LCons wa Ps) \\<sigma>')) \\<or>\n  (\\<exists>va pa Ps \\<sigma>'.\n      p = pa \\<and>\n      P = LCons va Ps \\<and>\n      \\<sigma>(v := w) = \\<sigma>' \\<and>\n      va \\<notin> VV pa \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           Ps = P \\<and>\n           \\<sigma>' = \\<sigma>(v := w) \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           (deadend v \\<or> v \\<notin> VV p) \\<and> valid_path P) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_conforms_with_strategy_irrelevant_updates:\n  assumes \"path_conforms_with_strategy p P \\<sigma>\" \"\\<And>v. v \\<in> lset P \\<Longrightarrow> \\<sigma> v = \\<sigma>' v\"\n  shows \"path_conforms_with_strategy p P \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma>'", "using assms"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P \\<sigma>\n  ?v \\<in> lset P \\<Longrightarrow> \\<sigma> ?v = \\<sigma>' ?v\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma>'", "proof (coinduction arbitrary: P)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>path_conforms_with_strategy p P \\<sigma>;\n        \\<forall>v.\n           v \\<in> lset P \\<longrightarrow>\n           \\<sigma> v = \\<sigma>' v\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                             p = pa \\<and>\n                             P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>pa v \\<sigma>.\n                             p = pa \\<and>\n                             P = LCons v LNil \\<and>\n                             \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>v pa w \\<sigma>'' Ps.\n                             p = pa \\<and>\n                             P = LCons v (LCons w Ps) \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>'' v \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons w Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>'')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>''.\n                             p = pa \\<and>\n                             P = LCons v Ps \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>''))", "case (path_conforms_with_strategy P)"], ["proof (state)\nthis:\n  path_conforms_with_strategy p P \\<sigma>\n  \\<forall>v. v \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>path_conforms_with_strategy p P \\<sigma>;\n        \\<forall>v.\n           v \\<in> lset P \\<longrightarrow>\n           \\<sigma> v = \\<sigma>' v\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                             p = pa \\<and>\n                             P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>pa v \\<sigma>.\n                             p = pa \\<and>\n                             P = LCons v LNil \\<and>\n                             \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>v pa w \\<sigma>'' Ps.\n                             p = pa \\<and>\n                             P = LCons v (LCons w Ps) \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>'' v \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons w Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>'')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>''.\n                             p = pa \\<and>\n                             P = LCons v Ps \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>''))", "thus ?case"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P \\<sigma>\n  \\<forall>v. v \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>.\n        p = pa \\<and> P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n    (\\<exists>pa v \\<sigma>.\n        p = pa \\<and> P = LCons v LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n    (\\<exists>v pa w \\<sigma>'' Ps.\n        p = pa \\<and>\n        P = LCons v (LCons w Ps) \\<and>\n        \\<sigma>' = \\<sigma>'' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>'' v \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             LCons w Ps = P \\<and>\n             \\<sigma>'' = \\<sigma>' \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             (\\<forall>v.\n                 v \\<in> lset P \\<longrightarrow>\n                 \\<sigma> v = \\<sigma>' v)) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>'')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>''.\n        p = pa \\<and>\n        P = LCons v Ps \\<and>\n        \\<sigma>' = \\<sigma>'' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             Ps = P \\<and>\n             \\<sigma>'' = \\<sigma>' \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             (\\<forall>v.\n                 v \\<in> lset P \\<longrightarrow>\n                 \\<sigma> v = \\<sigma>' v)) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>''))", "proof (cases rule: path_conforms_with_strategy.cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<forall>v.\n                v \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v;\n     P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                          p = pa \\<and>\n                          P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                      (\\<exists>pa v \\<sigma>.\n                          p = pa \\<and>\n                          P = LCons v LNil \\<and>\n                          \\<sigma>' = \\<sigma>) \\<or>\n                      (\\<exists>v pa w \\<sigma>'' Ps.\n                          p = pa \\<and>\n                          P = LCons v (LCons w Ps) \\<and>\n                          \\<sigma>' = \\<sigma>'' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>'' v \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               LCons w Ps = P \\<and>\n                               \\<sigma>'' = \\<sigma>' \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (\\<forall>v.\n                                   v \\<in> lset P \\<longrightarrow>\n                                   \\<sigma> v = \\<sigma>' v)) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>'')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>''.\n                          p = pa \\<and>\n                          P = LCons v Ps \\<and>\n                          \\<sigma>' = \\<sigma>'' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               Ps = P \\<and>\n                               \\<sigma>'' = \\<sigma>' \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (\\<forall>v.\n                                   v \\<in> lset P \\<longrightarrow>\n                                   \\<sigma> v = \\<sigma>' v)) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>''))\n 2. \\<And>v.\n       \\<lbrakk>\\<forall>v.\n                   v \\<in> lset P \\<longrightarrow>\n                   \\<sigma> v = \\<sigma>' v;\n        P = LCons v LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                             p = pa \\<and>\n                             P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>pa v \\<sigma>.\n                             p = pa \\<and>\n                             P = LCons v LNil \\<and>\n                             \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>v pa w \\<sigma>'' Ps.\n                             p = pa \\<and>\n                             P = LCons v (LCons w Ps) \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>'' v \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons w Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>'')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>''.\n                             p = pa \\<and>\n                             P = LCons v Ps \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>''))\n 3. \\<And>v w Ps.\n       \\<lbrakk>\\<forall>v.\n                   v \\<in> lset P \\<longrightarrow>\n                   \\<sigma> v = \\<sigma>' v;\n        P = LCons v (LCons w Ps); v \\<in> VV p; w = \\<sigma> v;\n        path_conforms_with_strategy p (LCons w Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                             p = pa \\<and>\n                             P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>pa v \\<sigma>.\n                             p = pa \\<and>\n                             P = LCons v LNil \\<and>\n                             \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>v pa w \\<sigma>'' Ps.\n                             p = pa \\<and>\n                             P = LCons v (LCons w Ps) \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>'' v \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons w Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>'')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>''.\n                             p = pa \\<and>\n                             P = LCons v Ps \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>''))\n 4. \\<And>v Ps.\n       \\<lbrakk>\\<forall>v.\n                   v \\<in> lset P \\<longrightarrow>\n                   \\<sigma> v = \\<sigma>' v;\n        P = LCons v Ps; v \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                             p = pa \\<and>\n                             P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>pa v \\<sigma>.\n                             p = pa \\<and>\n                             P = LCons v LNil \\<and>\n                             \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>v pa w \\<sigma>'' Ps.\n                             p = pa \\<and>\n                             P = LCons v (LCons w Ps) \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>'' v \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons w Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>'')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>''.\n                             p = pa \\<and>\n                             P = LCons v Ps \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>''))", "case (path_conforms_VVp v' w Ps)"], ["proof (state)\nthis:\n  P = LCons v' (LCons w Ps)\n  v' \\<in> VV p\n  w = \\<sigma> v'\n  path_conforms_with_strategy p (LCons w Ps) \\<sigma>\n\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<forall>v.\n                v \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v;\n     P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                          p = pa \\<and>\n                          P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                      (\\<exists>pa v \\<sigma>.\n                          p = pa \\<and>\n                          P = LCons v LNil \\<and>\n                          \\<sigma>' = \\<sigma>) \\<or>\n                      (\\<exists>v pa w \\<sigma>'' Ps.\n                          p = pa \\<and>\n                          P = LCons v (LCons w Ps) \\<and>\n                          \\<sigma>' = \\<sigma>'' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>'' v \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               LCons w Ps = P \\<and>\n                               \\<sigma>'' = \\<sigma>' \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (\\<forall>v.\n                                   v \\<in> lset P \\<longrightarrow>\n                                   \\<sigma> v = \\<sigma>' v)) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>'')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>''.\n                          p = pa \\<and>\n                          P = LCons v Ps \\<and>\n                          \\<sigma>' = \\<sigma>'' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               Ps = P \\<and>\n                               \\<sigma>'' = \\<sigma>' \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (\\<forall>v.\n                                   v \\<in> lset P \\<longrightarrow>\n                                   \\<sigma> v = \\<sigma>' v)) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>''))\n 2. \\<And>v.\n       \\<lbrakk>\\<forall>v.\n                   v \\<in> lset P \\<longrightarrow>\n                   \\<sigma> v = \\<sigma>' v;\n        P = LCons v LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                             p = pa \\<and>\n                             P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>pa v \\<sigma>.\n                             p = pa \\<and>\n                             P = LCons v LNil \\<and>\n                             \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>v pa w \\<sigma>'' Ps.\n                             p = pa \\<and>\n                             P = LCons v (LCons w Ps) \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>'' v \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons w Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>'')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>''.\n                             p = pa \\<and>\n                             P = LCons v Ps \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>''))\n 3. \\<And>v w Ps.\n       \\<lbrakk>\\<forall>v.\n                   v \\<in> lset P \\<longrightarrow>\n                   \\<sigma> v = \\<sigma>' v;\n        P = LCons v (LCons w Ps); v \\<in> VV p; w = \\<sigma> v;\n        path_conforms_with_strategy p (LCons w Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                             p = pa \\<and>\n                             P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>pa v \\<sigma>.\n                             p = pa \\<and>\n                             P = LCons v LNil \\<and>\n                             \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>v pa w \\<sigma>'' Ps.\n                             p = pa \\<and>\n                             P = LCons v (LCons w Ps) \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>'' v \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons w Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>'')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>''.\n                             p = pa \\<and>\n                             P = LCons v Ps \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>''))\n 4. \\<And>v Ps.\n       \\<lbrakk>\\<forall>v.\n                   v \\<in> lset P \\<longrightarrow>\n                   \\<sigma> v = \\<sigma>' v;\n        P = LCons v Ps; v \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                             p = pa \\<and>\n                             P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>pa v \\<sigma>.\n                             p = pa \\<and>\n                             P = LCons v LNil \\<and>\n                             \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>v pa w \\<sigma>'' Ps.\n                             p = pa \\<and>\n                             P = LCons v (LCons w Ps) \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>'' v \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons w Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>'')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>''.\n                             p = pa \\<and>\n                             P = LCons v Ps \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>''))", "have \"w = \\<sigma>' v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w = \\<sigma>' v'", "using local.path_conforms_VVp(1,3) path_conforms_with_strategy(2)"], ["proof (prove)\nusing this:\n  P = LCons v' (LCons w Ps)\n  w = \\<sigma> v'\n  \\<forall>v. v \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v\n\ngoal (1 subgoal):\n 1. w = \\<sigma>' v'", "by auto"], ["proof (state)\nthis:\n  w = \\<sigma>' v'\n\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<forall>v.\n                v \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v;\n     P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                          p = pa \\<and>\n                          P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                      (\\<exists>pa v \\<sigma>.\n                          p = pa \\<and>\n                          P = LCons v LNil \\<and>\n                          \\<sigma>' = \\<sigma>) \\<or>\n                      (\\<exists>v pa w \\<sigma>'' Ps.\n                          p = pa \\<and>\n                          P = LCons v (LCons w Ps) \\<and>\n                          \\<sigma>' = \\<sigma>'' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>'' v \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               LCons w Ps = P \\<and>\n                               \\<sigma>'' = \\<sigma>' \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (\\<forall>v.\n                                   v \\<in> lset P \\<longrightarrow>\n                                   \\<sigma> v = \\<sigma>' v)) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>'')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>''.\n                          p = pa \\<and>\n                          P = LCons v Ps \\<and>\n                          \\<sigma>' = \\<sigma>'' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               Ps = P \\<and>\n                               \\<sigma>'' = \\<sigma>' \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (\\<forall>v.\n                                   v \\<in> lset P \\<longrightarrow>\n                                   \\<sigma> v = \\<sigma>' v)) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>''))\n 2. \\<And>v.\n       \\<lbrakk>\\<forall>v.\n                   v \\<in> lset P \\<longrightarrow>\n                   \\<sigma> v = \\<sigma>' v;\n        P = LCons v LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                             p = pa \\<and>\n                             P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>pa v \\<sigma>.\n                             p = pa \\<and>\n                             P = LCons v LNil \\<and>\n                             \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>v pa w \\<sigma>'' Ps.\n                             p = pa \\<and>\n                             P = LCons v (LCons w Ps) \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>'' v \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons w Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>'')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>''.\n                             p = pa \\<and>\n                             P = LCons v Ps \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>''))\n 3. \\<And>v w Ps.\n       \\<lbrakk>\\<forall>v.\n                   v \\<in> lset P \\<longrightarrow>\n                   \\<sigma> v = \\<sigma>' v;\n        P = LCons v (LCons w Ps); v \\<in> VV p; w = \\<sigma> v;\n        path_conforms_with_strategy p (LCons w Ps) \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                             p = pa \\<and>\n                             P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>pa v \\<sigma>.\n                             p = pa \\<and>\n                             P = LCons v LNil \\<and>\n                             \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>v pa w \\<sigma>'' Ps.\n                             p = pa \\<and>\n                             P = LCons v (LCons w Ps) \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>'' v \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons w Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>'')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>''.\n                             p = pa \\<and>\n                             P = LCons v Ps \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>''))\n 4. \\<And>v Ps.\n       \\<lbrakk>\\<forall>v.\n                   v \\<in> lset P \\<longrightarrow>\n                   \\<sigma> v = \\<sigma>' v;\n        P = LCons v Ps; v \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                             p = pa \\<and>\n                             P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>pa v \\<sigma>.\n                             p = pa \\<and>\n                             P = LCons v LNil \\<and>\n                             \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>v pa w \\<sigma>'' Ps.\n                             p = pa \\<and>\n                             P = LCons v (LCons w Ps) \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>'' v \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons w Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>'')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>''.\n                             p = pa \\<and>\n                             P = LCons v Ps \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  w = \\<sigma>' v'\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>.\n        p = pa \\<and> P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n    (\\<exists>pa v \\<sigma>.\n        p = pa \\<and> P = LCons v LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n    (\\<exists>v pa w \\<sigma>'' Ps.\n        p = pa \\<and>\n        P = LCons v (LCons w Ps) \\<and>\n        \\<sigma>' = \\<sigma>'' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>'' v \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             LCons w Ps = P \\<and>\n             \\<sigma>'' = \\<sigma>' \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             (\\<forall>v.\n                 v \\<in> lset P \\<longrightarrow>\n                 \\<sigma> v = \\<sigma>' v)) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>'')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>''.\n        p = pa \\<and>\n        P = LCons v Ps \\<and>\n        \\<sigma>' = \\<sigma>'' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             Ps = P \\<and>\n             \\<sigma>'' = \\<sigma>' \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             (\\<forall>v.\n                 v \\<in> lset P \\<longrightarrow>\n                 \\<sigma> v = \\<sigma>' v)) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>''))", "using local.path_conforms_VVp(1,4) path_conforms_with_strategy(2)"], ["proof (prove)\nusing this:\n  w = \\<sigma>' v'\n  P = LCons v' (LCons w Ps)\n  path_conforms_with_strategy p (LCons w Ps) \\<sigma>\n  \\<forall>v. v \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>.\n        p = pa \\<and> P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n    (\\<exists>pa v \\<sigma>.\n        p = pa \\<and> P = LCons v LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n    (\\<exists>v pa w \\<sigma>'' Ps.\n        p = pa \\<and>\n        P = LCons v (LCons w Ps) \\<and>\n        \\<sigma>' = \\<sigma>'' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>'' v \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             LCons w Ps = P \\<and>\n             \\<sigma>'' = \\<sigma>' \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             (\\<forall>v.\n                 v \\<in> lset P \\<longrightarrow>\n                 \\<sigma> v = \\<sigma>' v)) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>'')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>''.\n        p = pa \\<and>\n        P = LCons v Ps \\<and>\n        \\<sigma>' = \\<sigma>'' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             Ps = P \\<and>\n             \\<sigma>'' = \\<sigma>' \\<and>\n             path_conforms_with_strategy p P \\<sigma> \\<and>\n             (\\<forall>v.\n                 v \\<in> lset P \\<longrightarrow>\n                 \\<sigma> v = \\<sigma>' v)) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>''))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>.\n      p = pa \\<and> P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n  (\\<exists>pa v \\<sigma>.\n      p = pa \\<and> P = LCons v LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n  (\\<exists>v pa w \\<sigma>'' Ps.\n      p = pa \\<and>\n      P = LCons v (LCons w Ps) \\<and>\n      \\<sigma>' = \\<sigma>'' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>'' v \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           LCons w Ps = P \\<and>\n           \\<sigma>'' = \\<sigma>' \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           (\\<forall>v.\n               v \\<in> lset P \\<longrightarrow>\n               \\<sigma> v = \\<sigma>' v)) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>'')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>''.\n      p = pa \\<and>\n      P = LCons v Ps \\<and>\n      \\<sigma>' = \\<sigma>'' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           Ps = P \\<and>\n           \\<sigma>'' = \\<sigma>' \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           (\\<forall>v.\n               v \\<in> lset P \\<longrightarrow>\n               \\<sigma> v = \\<sigma>' v)) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>''))\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>v.\n                v \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v;\n     P = LNil\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                          p = pa \\<and>\n                          P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                      (\\<exists>pa v \\<sigma>.\n                          p = pa \\<and>\n                          P = LCons v LNil \\<and>\n                          \\<sigma>' = \\<sigma>) \\<or>\n                      (\\<exists>v pa w \\<sigma>'' Ps.\n                          p = pa \\<and>\n                          P = LCons v (LCons w Ps) \\<and>\n                          \\<sigma>' = \\<sigma>'' \\<and>\n                          v \\<in> VV pa \\<and>\n                          w = \\<sigma>'' v \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               LCons w Ps = P \\<and>\n                               \\<sigma>'' = \\<sigma>' \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (\\<forall>v.\n                                   v \\<in> lset P \\<longrightarrow>\n                                   \\<sigma> v = \\<sigma>' v)) \\<or>\n                           path_conforms_with_strategy pa (LCons w Ps)\n                            \\<sigma>'')) \\<or>\n                      (\\<exists>v pa Ps \\<sigma>''.\n                          p = pa \\<and>\n                          P = LCons v Ps \\<and>\n                          \\<sigma>' = \\<sigma>'' \\<and>\n                          v \\<notin> VV pa \\<and>\n                          ((\\<exists>P.\n                               pa = p \\<and>\n                               Ps = P \\<and>\n                               \\<sigma>'' = \\<sigma>' \\<and>\n                               path_conforms_with_strategy p P\n                                \\<sigma> \\<and>\n                               (\\<forall>v.\n                                   v \\<in> lset P \\<longrightarrow>\n                                   \\<sigma> v = \\<sigma>' v)) \\<or>\n                           path_conforms_with_strategy pa Ps \\<sigma>''))\n 2. \\<And>v.\n       \\<lbrakk>\\<forall>v.\n                   v \\<in> lset P \\<longrightarrow>\n                   \\<sigma> v = \\<sigma>' v;\n        P = LCons v LNil\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                             p = pa \\<and>\n                             P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>pa v \\<sigma>.\n                             p = pa \\<and>\n                             P = LCons v LNil \\<and>\n                             \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>v pa w \\<sigma>'' Ps.\n                             p = pa \\<and>\n                             P = LCons v (LCons w Ps) \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>'' v \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons w Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>'')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>''.\n                             p = pa \\<and>\n                             P = LCons v Ps \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>''))\n 3. \\<And>v Ps.\n       \\<lbrakk>\\<forall>v.\n                   v \\<in> lset P \\<longrightarrow>\n                   \\<sigma> v = \\<sigma>' v;\n        P = LCons v Ps; v \\<notin> VV p;\n        path_conforms_with_strategy p Ps \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>.\n                             p = pa \\<and>\n                             P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>pa v \\<sigma>.\n                             p = pa \\<and>\n                             P = LCons v LNil \\<and>\n                             \\<sigma>' = \\<sigma>) \\<or>\n                         (\\<exists>v pa w \\<sigma>'' Ps.\n                             p = pa \\<and>\n                             P = LCons v (LCons w Ps) \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>'' v \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  LCons w Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>'')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>''.\n                             p = pa \\<and>\n                             P = LCons v Ps \\<and>\n                             \\<sigma>' = \\<sigma>'' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>P.\n                                  pa = p \\<and>\n                                  Ps = P \\<and>\n                                  \\<sigma>'' = \\<sigma>' \\<and>\n                                  path_conforms_with_strategy p P\n                                   \\<sigma> \\<and>\n                                  (\\<forall>v.\nv \\<in> lset P \\<longrightarrow> \\<sigma> v = \\<sigma>' v)) \\<or>\n                              path_conforms_with_strategy pa Ps \\<sigma>''))", "qed simp_all"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>.\n      p = pa \\<and> P = LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n  (\\<exists>pa v \\<sigma>.\n      p = pa \\<and> P = LCons v LNil \\<and> \\<sigma>' = \\<sigma>) \\<or>\n  (\\<exists>v pa w \\<sigma>'' Ps.\n      p = pa \\<and>\n      P = LCons v (LCons w Ps) \\<and>\n      \\<sigma>' = \\<sigma>'' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>'' v \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           LCons w Ps = P \\<and>\n           \\<sigma>'' = \\<sigma>' \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           (\\<forall>v.\n               v \\<in> lset P \\<longrightarrow>\n               \\<sigma> v = \\<sigma>' v)) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>'')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>''.\n      p = pa \\<and>\n      P = LCons v Ps \\<and>\n      \\<sigma>' = \\<sigma>'' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           Ps = P \\<and>\n           \\<sigma>'' = \\<sigma>' \\<and>\n           path_conforms_with_strategy p P \\<sigma> \\<and>\n           (\\<forall>v.\n               v \\<in> lset P \\<longrightarrow>\n               \\<sigma> v = \\<sigma>' v)) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>''))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_conforms_with_strategy_irrelevant':\n  assumes \"path_conforms_with_strategy p P (\\<sigma>(v := w))\" \"v \\<notin> lset P\"\n  shows \"path_conforms_with_strategy p P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma>", "by (metis assms fun_upd_triv fun_upd_upd path_conforms_with_strategy_irrelevant)"], ["", "lemma path_conforms_with_strategy_irrelevant_deadend':\n  assumes \"path_conforms_with_strategy p P (\\<sigma>(v := w))\" \"deadend v \\<or> v \\<notin> VV p\" \"valid_path P\"\n  shows \"path_conforms_with_strategy p P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma>", "by (metis assms fun_upd_triv fun_upd_upd path_conforms_with_strategy_irrelevant_deadend)"], ["", "lemma path_conforms_with_strategy_start:\n  \"path_conforms_with_strategy p (LCons v (LCons w P)) \\<sigma> \\<Longrightarrow> v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>path_conforms_with_strategy p (LCons v (LCons w P)) \\<sigma>;\n     v \\<in> VV p\\<rbrakk>\n    \\<Longrightarrow> \\<sigma> v = w", "by (drule path_conforms_with_strategy.cases) simp_all"], ["", "lemma path_conforms_with_strategy_lappend:\n  assumes\n    P: \"lfinite P\" \"\\<not>lnull P\" \"path_conforms_with_strategy p P \\<sigma>\"\n    and P': \"\\<not>lnull P'\" \"path_conforms_with_strategy p P' \\<sigma>\"\n    and conforms: \"llast P \\<in> VV p \\<Longrightarrow> \\<sigma> (llast P) = lhd P'\"\n  shows \"path_conforms_with_strategy p (lappend P P') \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (lappend P P') \\<sigma>", "using assms"], ["proof (prove)\nusing this:\n  lfinite P\n  \\<not> lnull P\n  path_conforms_with_strategy p P \\<sigma>\n  \\<not> lnull P'\n  path_conforms_with_strategy p P' \\<sigma>\n  llast P \\<in> VV p \\<Longrightarrow> \\<sigma> (llast P) = lhd P'\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (lappend P P') \\<sigma>", "proof (induct P rule: lfinite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>lnull xs; \\<not> lnull xs;\n        path_conforms_with_strategy p xs \\<sigma>; \\<not> lnull P';\n        path_conforms_with_strategy p P' \\<sigma>;\n        llast xs \\<in> VV p \\<Longrightarrow>\n        \\<sigma> (llast xs) = lhd P'\\<rbrakk>\n       \\<Longrightarrow> path_conforms_with_strategy p (lappend xs P')\n                          \\<sigma>\n 2. \\<And>xs.\n       \\<lbrakk>lfinite xs; \\<not> lnull xs;\n        \\<lbrakk>\\<not> lnull (ltl xs);\n         path_conforms_with_strategy p (ltl xs) \\<sigma>; \\<not> lnull P';\n         path_conforms_with_strategy p P' \\<sigma>;\n         llast (ltl xs) \\<in> VV p \\<Longrightarrow>\n         \\<sigma> (llast (ltl xs)) = lhd P'\\<rbrakk>\n        \\<Longrightarrow> path_conforms_with_strategy p\n                           (lappend (ltl xs) P') \\<sigma>;\n        \\<not> lnull xs; path_conforms_with_strategy p xs \\<sigma>;\n        \\<not> lnull P'; path_conforms_with_strategy p P' \\<sigma>;\n        llast xs \\<in> VV p \\<Longrightarrow>\n        \\<sigma> (llast xs) = lhd P'\\<rbrakk>\n       \\<Longrightarrow> path_conforms_with_strategy p (lappend xs P')\n                          \\<sigma>", "case (LCons P)"], ["proof (state)\nthis:\n  lfinite P\n  \\<not> lnull P\n  \\<lbrakk>\\<not> lnull (ltl P);\n   path_conforms_with_strategy p (ltl P) \\<sigma>; \\<not> lnull P';\n   path_conforms_with_strategy p P' \\<sigma>;\n   llast (ltl P) \\<in> VV p \\<Longrightarrow>\n   \\<sigma> (llast (ltl P)) = lhd P'\\<rbrakk>\n  \\<Longrightarrow> path_conforms_with_strategy p (lappend (ltl P) P')\n                     \\<sigma>\n  \\<not> lnull P\n  path_conforms_with_strategy p P \\<sigma>\n  \\<not> lnull P'\n  path_conforms_with_strategy p P' \\<sigma>\n  llast P \\<in> VV p \\<Longrightarrow> \\<sigma> (llast P) = lhd P'\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>lnull xs; \\<not> lnull xs;\n        path_conforms_with_strategy p xs \\<sigma>; \\<not> lnull P';\n        path_conforms_with_strategy p P' \\<sigma>;\n        llast xs \\<in> VV p \\<Longrightarrow>\n        \\<sigma> (llast xs) = lhd P'\\<rbrakk>\n       \\<Longrightarrow> path_conforms_with_strategy p (lappend xs P')\n                          \\<sigma>\n 2. \\<And>xs.\n       \\<lbrakk>lfinite xs; \\<not> lnull xs;\n        \\<lbrakk>\\<not> lnull (ltl xs);\n         path_conforms_with_strategy p (ltl xs) \\<sigma>; \\<not> lnull P';\n         path_conforms_with_strategy p P' \\<sigma>;\n         llast (ltl xs) \\<in> VV p \\<Longrightarrow>\n         \\<sigma> (llast (ltl xs)) = lhd P'\\<rbrakk>\n        \\<Longrightarrow> path_conforms_with_strategy p\n                           (lappend (ltl xs) P') \\<sigma>;\n        \\<not> lnull xs; path_conforms_with_strategy p xs \\<sigma>;\n        \\<not> lnull P'; path_conforms_with_strategy p P' \\<sigma>;\n        llast xs \\<in> VV p \\<Longrightarrow>\n        \\<sigma> (llast xs) = lhd P'\\<rbrakk>\n       \\<Longrightarrow> path_conforms_with_strategy p (lappend xs P')\n                          \\<sigma>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (lappend P P') \\<sigma>", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (lappend P P') \\<sigma>\n 2. \\<not> ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (lappend P P') \\<sigma>", "assume \"lnull (ltl P)\""], ["proof (state)\nthis:\n  lnull (ltl P)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (lappend P P') \\<sigma>\n 2. \\<not> ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (lappend P P') \\<sigma>", "then"], ["proof (chain)\npicking this:\n  lnull (ltl P)", "obtain v0 where v0: \"P = LCons v0 LNil\""], ["proof (prove)\nusing this:\n  lnull (ltl P)\n\ngoal (1 subgoal):\n 1. (\\<And>v0. P = LCons v0 LNil \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis LCons.prems(1) lhd_LCons_ltl llist.collapse(1))"], ["proof (state)\nthis:\n  P = LCons v0 LNil\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (lappend P P') \\<sigma>\n 2. \\<not> ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (lappend P P') \\<sigma>", "have \"path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>\n 2. \\<not> ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>", "assume \"lhd P \\<in> VV p\""], ["proof (state)\nthis:\n  lhd P \\<in> VV p\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>\n 2. \\<not> ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>", "moreover"], ["proof (state)\nthis:\n  lhd P \\<in> VV p\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>\n 2. \\<not> ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>", "with v0"], ["proof (chain)\npicking this:\n  P = LCons v0 LNil\n  lhd P \\<in> VV p", "have \"lhd P' = \\<sigma> (lhd P)\""], ["proof (prove)\nusing this:\n  P = LCons v0 LNil\n  lhd P \\<in> VV p\n\ngoal (1 subgoal):\n 1. lhd P' = \\<sigma> (lhd P)", "using LCons.prems(5)"], ["proof (prove)\nusing this:\n  P = LCons v0 LNil\n  lhd P \\<in> VV p\n  llast P \\<in> VV p \\<Longrightarrow> \\<sigma> (llast P) = lhd P'\n\ngoal (1 subgoal):\n 1. lhd P' = \\<sigma> (lhd P)", "by auto"], ["proof (state)\nthis:\n  lhd P' = \\<sigma> (lhd P)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>\n 2. \\<not> ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>", "ultimately"], ["proof (chain)\npicking this:\n  lhd P \\<in> VV p\n  lhd P' = \\<sigma> (lhd P)", "show ?thesis"], ["proof (prove)\nusing this:\n  lhd P \\<in> VV p\n  lhd P' = \\<sigma> (lhd P)\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>", "using path_conforms_VVp[of \"lhd P\" p \"lhd P'\" \\<sigma>]"], ["proof (prove)\nusing this:\n  lhd P \\<in> VV p\n  lhd P' = \\<sigma> (lhd P)\n  \\<lbrakk>lhd P \\<in> VV p; lhd P' = \\<sigma> (lhd P);\n   path_conforms_with_strategy p (LCons (lhd P') ?Ps) \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> path_conforms_with_strategy p\n                     (LCons (lhd P) (LCons (lhd P') ?Ps)) \\<sigma>\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>", "by (metis (no_types) LCons.prems(4) \\<open>\\<not>lnull P'\\<close> lhd_LCons_ltl)"], ["proof (state)\nthis:\n  path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>\n\ngoal (1 subgoal):\n 1. lhd P \\<notin> VV p \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lhd P \\<notin> VV p \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>", "assume \"lhd P \\<notin> VV p\""], ["proof (state)\nthis:\n  lhd P \\<notin> VV p\n\ngoal (1 subgoal):\n 1. lhd P \\<notin> VV p \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>", "thus ?thesis"], ["proof (prove)\nusing this:\n  lhd P \\<notin> VV p\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>", "using path_conforms_VVpstar"], ["proof (prove)\nusing this:\n  lhd P \\<notin> VV p\n  \\<lbrakk>?v \\<notin> VV ?p;\n   path_conforms_with_strategy ?p ?Ps ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> path_conforms_with_strategy ?p (LCons ?v ?Ps) ?\\<sigma>\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>", "using LCons.prems(4) v0"], ["proof (prove)\nusing this:\n  lhd P \\<notin> VV p\n  \\<lbrakk>?v \\<notin> VV ?p;\n   path_conforms_with_strategy ?p ?Ps ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> path_conforms_with_strategy ?p (LCons ?v ?Ps) ?\\<sigma>\n  path_conforms_with_strategy p P' \\<sigma>\n  P = LCons v0 LNil\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>", "by blast"], ["proof (state)\nthis:\n  path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (lappend P P') \\<sigma>\n 2. \\<not> ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (lappend P P') \\<sigma>", "thus ?thesis"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p (LCons (lhd P) P') \\<sigma>\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (lappend P P') \\<sigma>", "by (simp add: v0)"], ["proof (state)\nthis:\n  path_conforms_with_strategy p (lappend P P') \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow>\n    path_conforms_with_strategy p (lappend P P') \\<sigma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow>\n    path_conforms_with_strategy p (lappend P P') \\<sigma>", "assume \"\\<not>lnull (ltl P)\""], ["proof (state)\nthis:\n  \\<not> lnull (ltl P)\n\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow>\n    path_conforms_with_strategy p (lappend P P') \\<sigma>", "hence *: \"path_conforms_with_strategy p (lappend (ltl P) P') \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<not> lnull (ltl P)\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (lappend (ltl P) P') \\<sigma>", "by (metis LCons.hyps(3) LCons.prems(1) LCons.prems(2) LCons.prems(5) LCons.prems(5)\n                assms(4) assms(5) lhd_LCons_ltl llast_LCons2 path_conforms_with_strategy_ltl)"], ["proof (state)\nthis:\n  path_conforms_with_strategy p (lappend (ltl P) P') \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow>\n    path_conforms_with_strategy p (lappend P P') \\<sigma>", "have \"path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P')) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n     \\<sigma>", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n     \\<sigma>\n 2. \\<not> ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n     \\<sigma>", "assume \"lhd P \\<in> VV p\""], ["proof (state)\nthis:\n  lhd P \\<in> VV p\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n     \\<sigma>\n 2. \\<not> ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n     \\<sigma>", "moreover"], ["proof (state)\nthis:\n  lhd P \\<in> VV p\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n     \\<sigma>\n 2. \\<not> ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n     \\<sigma>", "hence \"lhd (ltl P) = \\<sigma> (lhd P)\""], ["proof (prove)\nusing this:\n  lhd P \\<in> VV p\n\ngoal (1 subgoal):\n 1. lhd (ltl P) = \\<sigma> (lhd P)", "by (metis LCons.prems(1) LCons.prems(2) \\<open>\\<not>lnull (ltl P)\\<close>\n                  lhd_LCons_ltl path_conforms_with_strategy_start)"], ["proof (state)\nthis:\n  lhd (ltl P) = \\<sigma> (lhd P)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n     \\<sigma>\n 2. \\<not> ?P \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n     \\<sigma>", "ultimately"], ["proof (chain)\npicking this:\n  lhd P \\<in> VV p\n  lhd (ltl P) = \\<sigma> (lhd P)", "show ?thesis"], ["proof (prove)\nusing this:\n  lhd P \\<in> VV p\n  lhd (ltl P) = \\<sigma> (lhd P)\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n     \\<sigma>", "using path_conforms_VVp[of \"lhd P\" p \"lhd (ltl P)\" \\<sigma>] * \\<open>\\<not>lnull (ltl P)\\<close>"], ["proof (prove)\nusing this:\n  lhd P \\<in> VV p\n  lhd (ltl P) = \\<sigma> (lhd P)\n  \\<lbrakk>lhd P \\<in> VV p; lhd (ltl P) = \\<sigma> (lhd P);\n   path_conforms_with_strategy p (LCons (lhd (ltl P)) ?Ps) \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> path_conforms_with_strategy p\n                     (LCons (lhd P) (LCons (lhd (ltl P)) ?Ps)) \\<sigma>\n  path_conforms_with_strategy p (lappend (ltl P) P') \\<sigma>\n  \\<not> lnull (ltl P)\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n     \\<sigma>", "by (metis lappend_code(2) lhd_LCons_ltl)"], ["proof (state)\nthis:\n  path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n   \\<sigma>\n\ngoal (1 subgoal):\n 1. lhd P \\<notin> VV p \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n     \\<sigma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lhd P \\<notin> VV p \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n     \\<sigma>", "assume \"lhd P \\<notin> VV p\""], ["proof (state)\nthis:\n  lhd P \\<notin> VV p\n\ngoal (1 subgoal):\n 1. lhd P \\<notin> VV p \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n     \\<sigma>", "thus ?thesis"], ["proof (prove)\nusing this:\n  lhd P \\<notin> VV p\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n     \\<sigma>", "by (simp add: \"*\" path_conforms_VVpstar)"], ["proof (state)\nthis:\n  path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n   \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n   \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow>\n    path_conforms_with_strategy p (lappend P P') \\<sigma>", "with \\<open>\\<not>lnull P\\<close>"], ["proof (chain)\npicking this:\n  \\<not> lnull P\n  path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n   \\<sigma>", "show \"path_conforms_with_strategy p (lappend P P') \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<not> lnull P\n  path_conforms_with_strategy p (LCons (lhd P) (lappend (ltl P) P'))\n   \\<sigma>\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (lappend P P') \\<sigma>", "by (metis lappend_code(2) lhd_LCons_ltl)"], ["proof (state)\nthis:\n  path_conforms_with_strategy p (lappend P P') \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  path_conforms_with_strategy p (lappend P P') \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>lnull xs; \\<not> lnull xs;\n        path_conforms_with_strategy p xs \\<sigma>; \\<not> lnull P';\n        path_conforms_with_strategy p P' \\<sigma>;\n        llast xs \\<in> VV p \\<Longrightarrow>\n        \\<sigma> (llast xs) = lhd P'\\<rbrakk>\n       \\<Longrightarrow> path_conforms_with_strategy p (lappend xs P')\n                          \\<sigma>", "qed simp"], ["", "lemma path_conforms_with_strategy_VVpstar:\n  assumes \"lset P \\<subseteq> VV p**\"\n  shows \"path_conforms_with_strategy p P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma>", "using assms"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> VV p**\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma>", "proof (coinduction arbitrary: P)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       lset P \\<subseteq> VV p** \\<Longrightarrow>\n       (\\<exists>pa \\<sigma>'.\n           p = pa \\<and> P = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n       (\\<exists>pa v \\<sigma>'.\n           p = pa \\<and> P = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n       (\\<exists>v pa w \\<sigma>' Ps.\n           p = pa \\<and>\n           P = LCons v (LCons w Ps) \\<and>\n           \\<sigma> = \\<sigma>' \\<and>\n           v \\<in> VV pa \\<and>\n           w = \\<sigma>' v \\<and>\n           ((\\<exists>P.\n                pa = p \\<and>\n                LCons w Ps = P \\<and>\n                \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n            path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n       (\\<exists>v pa Ps \\<sigma>'.\n           p = pa \\<and>\n           P = LCons v Ps \\<and>\n           \\<sigma> = \\<sigma>' \\<and>\n           v \\<notin> VV pa \\<and>\n           ((\\<exists>P.\n                pa = p \\<and>\n                Ps = P \\<and>\n                \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n            path_conforms_with_strategy pa Ps \\<sigma>'))", "case (path_conforms_with_strategy P)"], ["proof (state)\nthis:\n  lset P \\<subseteq> VV p**\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       lset P \\<subseteq> VV p** \\<Longrightarrow>\n       (\\<exists>pa \\<sigma>'.\n           p = pa \\<and> P = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n       (\\<exists>pa v \\<sigma>'.\n           p = pa \\<and> P = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n       (\\<exists>v pa w \\<sigma>' Ps.\n           p = pa \\<and>\n           P = LCons v (LCons w Ps) \\<and>\n           \\<sigma> = \\<sigma>' \\<and>\n           v \\<in> VV pa \\<and>\n           w = \\<sigma>' v \\<and>\n           ((\\<exists>P.\n                pa = p \\<and>\n                LCons w Ps = P \\<and>\n                \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n            path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n       (\\<exists>v pa Ps \\<sigma>'.\n           p = pa \\<and>\n           P = LCons v Ps \\<and>\n           \\<sigma> = \\<sigma>' \\<and>\n           v \\<notin> VV pa \\<and>\n           ((\\<exists>P.\n                pa = p \\<and>\n                Ps = P \\<and>\n                \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n            path_conforms_with_strategy pa Ps \\<sigma>'))", "moreover"], ["proof (state)\nthis:\n  lset P \\<subseteq> VV p**\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       lset P \\<subseteq> VV p** \\<Longrightarrow>\n       (\\<exists>pa \\<sigma>'.\n           p = pa \\<and> P = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n       (\\<exists>pa v \\<sigma>'.\n           p = pa \\<and> P = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n       (\\<exists>v pa w \\<sigma>' Ps.\n           p = pa \\<and>\n           P = LCons v (LCons w Ps) \\<and>\n           \\<sigma> = \\<sigma>' \\<and>\n           v \\<in> VV pa \\<and>\n           w = \\<sigma>' v \\<and>\n           ((\\<exists>P.\n                pa = p \\<and>\n                LCons w Ps = P \\<and>\n                \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n            path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n       (\\<exists>v pa Ps \\<sigma>'.\n           p = pa \\<and>\n           P = LCons v Ps \\<and>\n           \\<sigma> = \\<sigma>' \\<and>\n           v \\<notin> VV pa \\<and>\n           ((\\<exists>P.\n                pa = p \\<and>\n                Ps = P \\<and>\n                \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n            path_conforms_with_strategy pa Ps \\<sigma>'))", "have \"\\<And>v Ps. P = LCons v Ps \\<Longrightarrow> ?case\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v Ps.\n       P = LCons v Ps \\<Longrightarrow>\n       (\\<exists>pa \\<sigma>'.\n           p = pa \\<and> P = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n       (\\<exists>pa v \\<sigma>'.\n           p = pa \\<and> P = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n       (\\<exists>v pa w \\<sigma>' Ps.\n           p = pa \\<and>\n           P = LCons v (LCons w Ps) \\<and>\n           \\<sigma> = \\<sigma>' \\<and>\n           v \\<in> VV pa \\<and>\n           w = \\<sigma>' v \\<and>\n           ((\\<exists>P.\n                pa = p \\<and>\n                LCons w Ps = P \\<and>\n                \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n            path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n       (\\<exists>v pa Ps \\<sigma>'.\n           p = pa \\<and>\n           P = LCons v Ps \\<and>\n           \\<sigma> = \\<sigma>' \\<and>\n           v \\<notin> VV pa \\<and>\n           ((\\<exists>P.\n                pa = p \\<and>\n                Ps = P \\<and>\n                \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n            path_conforms_with_strategy pa Ps \\<sigma>'))", "using path_conforms_with_strategy"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> VV p**\n\ngoal (1 subgoal):\n 1. \\<And>v Ps.\n       P = LCons v Ps \\<Longrightarrow>\n       (\\<exists>pa \\<sigma>'.\n           p = pa \\<and> P = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n       (\\<exists>pa v \\<sigma>'.\n           p = pa \\<and> P = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n       (\\<exists>v pa w \\<sigma>' Ps.\n           p = pa \\<and>\n           P = LCons v (LCons w Ps) \\<and>\n           \\<sigma> = \\<sigma>' \\<and>\n           v \\<in> VV pa \\<and>\n           w = \\<sigma>' v \\<and>\n           ((\\<exists>P.\n                pa = p \\<and>\n                LCons w Ps = P \\<and>\n                \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n            path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n       (\\<exists>v pa Ps \\<sigma>'.\n           p = pa \\<and>\n           P = LCons v Ps \\<and>\n           \\<sigma> = \\<sigma>' \\<and>\n           v \\<notin> VV pa \\<and>\n           ((\\<exists>P.\n                pa = p \\<and>\n                Ps = P \\<and>\n                \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n            path_conforms_with_strategy pa Ps \\<sigma>'))", "by auto"], ["proof (state)\nthis:\n  P = LCons ?v ?Ps \\<Longrightarrow>\n  (\\<exists>pa \\<sigma>'.\n      p = pa \\<and> P = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>pa v \\<sigma>'.\n      p = pa \\<and> P = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>v pa w \\<sigma>' Ps.\n      p = pa \\<and>\n      P = LCons v (LCons w Ps) \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>' v \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           LCons w Ps = P \\<and>\n           \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>'.\n      p = pa \\<and>\n      P = LCons v Ps \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           Ps = P \\<and>\n           \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'))\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       lset P \\<subseteq> VV p** \\<Longrightarrow>\n       (\\<exists>pa \\<sigma>'.\n           p = pa \\<and> P = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n       (\\<exists>pa v \\<sigma>'.\n           p = pa \\<and> P = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n       (\\<exists>v pa w \\<sigma>' Ps.\n           p = pa \\<and>\n           P = LCons v (LCons w Ps) \\<and>\n           \\<sigma> = \\<sigma>' \\<and>\n           v \\<in> VV pa \\<and>\n           w = \\<sigma>' v \\<and>\n           ((\\<exists>P.\n                pa = p \\<and>\n                LCons w Ps = P \\<and>\n                \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n            path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n       (\\<exists>v pa Ps \\<sigma>'.\n           p = pa \\<and>\n           P = LCons v Ps \\<and>\n           \\<sigma> = \\<sigma>' \\<and>\n           v \\<notin> VV pa \\<and>\n           ((\\<exists>P.\n                pa = p \\<and>\n                Ps = P \\<and>\n                \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n            path_conforms_with_strategy pa Ps \\<sigma>'))", "ultimately"], ["proof (chain)\npicking this:\n  lset P \\<subseteq> VV p**\n  P = LCons ?v ?Ps \\<Longrightarrow>\n  (\\<exists>pa \\<sigma>'.\n      p = pa \\<and> P = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>pa v \\<sigma>'.\n      p = pa \\<and> P = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>v pa w \\<sigma>' Ps.\n      p = pa \\<and>\n      P = LCons v (LCons w Ps) \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>' v \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           LCons w Ps = P \\<and>\n           \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>'.\n      p = pa \\<and>\n      P = LCons v Ps \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           Ps = P \\<and>\n           \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'))", "show ?case"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> VV p**\n  P = LCons ?v ?Ps \\<Longrightarrow>\n  (\\<exists>pa \\<sigma>'.\n      p = pa \\<and> P = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>pa v \\<sigma>'.\n      p = pa \\<and> P = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>v pa w \\<sigma>' Ps.\n      p = pa \\<and>\n      P = LCons v (LCons w Ps) \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>' v \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           LCons w Ps = P \\<and>\n           \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>'.\n      p = pa \\<and>\n      P = LCons v Ps \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           Ps = P \\<and>\n           \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'))\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'.\n        p = pa \\<and> P = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>pa v \\<sigma>'.\n        p = pa \\<and> P = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n    (\\<exists>v pa w \\<sigma>' Ps.\n        p = pa \\<and>\n        P = LCons v (LCons w Ps) \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>' v \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             LCons w Ps = P \\<and>\n             \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'.\n        p = pa \\<and>\n        P = LCons v Ps \\<and>\n        \\<sigma> = \\<sigma>' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>P.\n             pa = p \\<and>\n             Ps = P \\<and>\n             \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'))", "by (cases \"P = LNil\", simp) (metis lnull_def not_lnull_conv)"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>'.\n      p = pa \\<and> P = LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>pa v \\<sigma>'.\n      p = pa \\<and> P = LCons v LNil \\<and> \\<sigma> = \\<sigma>') \\<or>\n  (\\<exists>v pa w \\<sigma>' Ps.\n      p = pa \\<and>\n      P = LCons v (LCons w Ps) \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>' v \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           LCons w Ps = P \\<and>\n           \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>'.\n      p = pa \\<and>\n      P = LCons v Ps \\<and>\n      \\<sigma> = \\<sigma>' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>P.\n           pa = p \\<and>\n           Ps = P \\<and>\n           \\<sigma>' = \\<sigma> \\<and> lset P \\<subseteq> VV p**) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subgame_path_conforms_with_strategy:\n  assumes V': \"V' \\<subseteq> V\" and P: \"path_conforms_with_strategy p P \\<sigma>\" \"lset P \\<subseteq> V'\"\n  shows \"ParityGame.path_conforms_with_strategy (subgame V') p P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ParityGame.path_conforms_with_strategy (subgame V') p P \\<sigma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ParityGame.path_conforms_with_strategy (subgame V') p P \\<sigma>", "have \"lset P \\<subseteq> V\\<^bsub>subgame V'\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset P \\<subseteq> V\\<^bsub>subgame V'\\<^esub>", "unfolding subgame_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lset P\n    \\<subseteq> V\\<^bsub>G\\<lparr>verts := V \\<inter> V', arcs := Restr E V', player0 := V0 \\<inter> V'\\<rparr>\\<^esub>", "using P(2) V'"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> V'\n  V' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. lset P\n    \\<subseteq> V\\<^bsub>G\\<lparr>verts := V \\<inter> V', arcs := Restr E V', player0 := V0 \\<inter> V'\\<rparr>\\<^esub>", "by auto"], ["proof (state)\nthis:\n  lset P \\<subseteq> V\\<^bsub>subgame V'\\<^esub>\n\ngoal (1 subgoal):\n 1. ParityGame.path_conforms_with_strategy (subgame V') p P \\<sigma>", "with P(1)"], ["proof (chain)\npicking this:\n  path_conforms_with_strategy p P \\<sigma>\n  lset P \\<subseteq> V\\<^bsub>subgame V'\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P \\<sigma>\n  lset P \\<subseteq> V\\<^bsub>subgame V'\\<^esub>\n\ngoal (1 subgoal):\n 1. ParityGame.path_conforms_with_strategy (subgame V') p P \\<sigma>", "by (coinduction arbitrary: P rule: ParityGame.path_conforms_with_strategy.coinduct[OF subgame_ParityGame])\n       (cases rule: path_conforms_with_strategy.cases, auto)"], ["proof (state)\nthis:\n  ParityGame.path_conforms_with_strategy (subgame V') p P \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in vmc_path) subgame_path_vmc_path:\n  assumes V': \"V' \\<subseteq> V\" and P: \"lset P \\<subseteq> V'\"\n  shows \"vmc_path (subgame V') P v0 p \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path (subgame V') P v0 p \\<sigma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. vmc_path (subgame V') P v0 p \\<sigma>", "interpret G': ParityGame \"subgame V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ParityGame (subgame V')", "using subgame_ParityGame"], ["proof (prove)\nusing this:\n  ParityGame (subgame ?V')\n\ngoal (1 subgoal):\n 1. ParityGame (subgame V')", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. vmc_path (subgame V') P v0 p \\<sigma>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path (subgame V') P v0 p \\<sigma>", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<not> lnull P\n 2. G'.valid_path P\n 3. G'.maximal_path P\n 4. lhd P = v0\n 5. G'.path_conforms_with_strategy p P \\<sigma>", "show \"G'.valid_path P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.valid_path P", "using subgame_valid_path P_valid P"], ["proof (prove)\nusing this:\n  \\<lbrakk>valid_path ?P; lset ?P \\<subseteq> ?V'\\<rbrakk>\n  \\<Longrightarrow> Digraph.valid_path (subgame ?V') ?P\n  valid_path P\n  lset P \\<subseteq> V'\n\ngoal (1 subgoal):\n 1. G'.valid_path P", "by blast"], ["proof (state)\nthis:\n  G'.valid_path P\n\ngoal (4 subgoals):\n 1. \\<not> lnull P\n 2. G'.maximal_path P\n 3. lhd P = v0\n 4. G'.path_conforms_with_strategy p P \\<sigma>", "show \"G'.maximal_path P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.maximal_path P", "using subgame_maximal_path V' P_maximal P"], ["proof (prove)\nusing this:\n  \\<lbrakk>?V' \\<subseteq> V; maximal_path ?P;\n   lset ?P \\<subseteq> ?V'\\<rbrakk>\n  \\<Longrightarrow> Digraph.maximal_path (subgame ?V') ?P\n  V' \\<subseteq> V\n  maximal_path P\n  lset P \\<subseteq> V'\n\ngoal (1 subgoal):\n 1. G'.maximal_path P", "by blast"], ["proof (state)\nthis:\n  G'.maximal_path P\n\ngoal (3 subgoals):\n 1. \\<not> lnull P\n 2. lhd P = v0\n 3. G'.path_conforms_with_strategy p P \\<sigma>", "show \"G'.path_conforms_with_strategy p P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p P \\<sigma>", "using subgame_path_conforms_with_strategy V' P_conforms P"], ["proof (prove)\nusing this:\n  \\<lbrakk>?V' \\<subseteq> V; path_conforms_with_strategy ?p ?P ?\\<sigma>;\n   lset ?P \\<subseteq> ?V'\\<rbrakk>\n  \\<Longrightarrow> ParityGame.path_conforms_with_strategy (subgame ?V') ?p\n                     ?P ?\\<sigma>\n  V' \\<subseteq> V\n  path_conforms_with_strategy p P \\<sigma>\n  lset P \\<subseteq> V'\n\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p P \\<sigma>", "by blast"], ["proof (state)\nthis:\n  G'.path_conforms_with_strategy p P \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<not> lnull P\n 2. lhd P = v0", "qed simp_all"], ["proof (state)\nthis:\n  vmc_path (subgame V') P v0 p \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Greedy Conforming Path\\<close>"], ["", "text \\<open>\n  Given a starting point and two strategies, there exists a path conforming to both strategies.\n  Here we define this path.  Incidentally, this also shows that the assumptions of the locales\n  \\<open>vmc_path\\<close> and \\<open>vmc2_path\\<close> are satisfiable.\n\n  We are only interested in proving the existence of such a path, so the definition\n  (i.e., the implementation) and most lemmas are private.\n\\<close>"], ["", "context begin"], ["", "private"], ["", "primcorec greedy_conforming_path :: \"Player \\<Rightarrow> 'a Strategy \\<Rightarrow> 'a Strategy \\<Rightarrow> 'a \\<Rightarrow> 'a Path\" where\n  \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n    LCons v0 (if deadend v0\n      then LNil\n      else if v0 \\<in> VV p\n        then greedy_conforming_path p \\<sigma> \\<sigma>' (\\<sigma> v0)\n        else greedy_conforming_path p \\<sigma> \\<sigma>' (\\<sigma>' v0))\""], ["", "private"], ["", "lemma greedy_path_LNil: \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<noteq> LNil\""], ["proof (prove)\ngoal (1 subgoal):\n 1. greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<noteq> LNil", "using greedy_conforming_path.disc_iff llist.discI(1)"], ["proof (prove)\nusing this:\n  \\<not> lnull (greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0)\n  ?llist = LNil \\<Longrightarrow> lnull ?llist\n\ngoal (1 subgoal):\n 1. greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<noteq> LNil", "by blast"], ["", "private"], ["", "lemma greedy_path_lhd: \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v P \\<Longrightarrow> v = v0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n    LCons v P \\<Longrightarrow>\n    v = v0", "using greedy_conforming_path.code"], ["proof (prove)\nusing this:\n  greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n  LCons ?v0.0\n   (if deadend ?v0.0 then LNil\n    else if ?v0.0 \\<in> VV ?p\n         then greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>'\n               (?\\<sigma> ?v0.0)\n         else greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>'\n               (?\\<sigma>' ?v0.0))\n\ngoal (1 subgoal):\n 1. greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n    LCons v P \\<Longrightarrow>\n    v = v0", "by auto"], ["", "private"], ["", "lemma greedy_path_deadend_v0: \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v P \\<Longrightarrow> P = LNil \\<longleftrightarrow> deadend v0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n    LCons v P \\<Longrightarrow>\n    (P = LNil) = deadend v0", "by (metis (no_types, lifting) greedy_conforming_path.disc_iff\n      greedy_conforming_path.simps(3) llist.disc(1) ltl_simps(2))"], ["", "private"], ["", "corollary greedy_path_deadend_v:\n  \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v P \\<Longrightarrow> P = LNil \\<longleftrightarrow> deadend v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n    LCons v P \\<Longrightarrow>\n    (P = LNil) = deadend v", "using greedy_path_deadend_v0 greedy_path_lhd"], ["proof (prove)\nusing this:\n  greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n  LCons ?v ?P \\<Longrightarrow>\n  (?P = LNil) = deadend ?v0.0\n  greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n  LCons ?v ?P \\<Longrightarrow>\n  ?v = ?v0.0\n\ngoal (1 subgoal):\n 1. greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n    LCons v P \\<Longrightarrow>\n    (P = LNil) = deadend v", "by metis"], ["", "corollary greedy_path_deadend_v': \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<Longrightarrow> deadend v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n    LCons v LNil \\<Longrightarrow>\n    deadend v", "using greedy_path_deadend_v"], ["proof (prove)\nusing this:\n  greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n  LCons ?v ?P \\<Longrightarrow>\n  (?P = LNil) = deadend ?v\n\ngoal (1 subgoal):\n 1. greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n    LCons v LNil \\<Longrightarrow>\n    deadend v", "by blast"], ["", "private"], ["", "lemma greedy_path_ltl:\n  assumes \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v P\"\n  shows \"P = LNil \\<or> P = greedy_conforming_path p \\<sigma> \\<sigma>' (\\<sigma> v0) \\<or> P = greedy_conforming_path p \\<sigma> \\<sigma>' (\\<sigma>' v0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P = LNil \\<or>\n    P = greedy_conforming_path p \\<sigma> \\<sigma>' (\\<sigma> v0) \\<or>\n    P = greedy_conforming_path p \\<sigma> \\<sigma>' (\\<sigma>' v0)", "apply (insert assms, frule greedy_path_lhd)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v P;\n     v = v0\\<rbrakk>\n    \\<Longrightarrow> P = LNil \\<or>\n                      P =\n                      greedy_conforming_path p \\<sigma> \\<sigma>'\n                       (\\<sigma> v0) \\<or>\n                      P =\n                      greedy_conforming_path p \\<sigma> \\<sigma>'\n                       (\\<sigma>' v0)", "apply (cases \"deadend v0\", simp add: greedy_conforming_path.code)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v P;\n     v = v0; \\<not> deadend v0\\<rbrakk>\n    \\<Longrightarrow> P = LNil \\<or>\n                      P =\n                      greedy_conforming_path p \\<sigma> \\<sigma>'\n                       (\\<sigma> v0) \\<or>\n                      P =\n                      greedy_conforming_path p \\<sigma> \\<sigma>'\n                       (\\<sigma>' v0)", "by (metis (no_types, lifting) greedy_conforming_path.sel(2) ltl_simps(2))"], ["", "private"], ["", "lemma greedy_path_ltl_ex:\n  assumes \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v P\"\n  shows \"P = LNil \\<or> (\\<exists>v. P = greedy_conforming_path p \\<sigma> \\<sigma>' v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P = LNil \\<or>\n    (\\<exists>v. P = greedy_conforming_path p \\<sigma> \\<sigma>' v)", "using assms greedy_path_ltl"], ["proof (prove)\nusing this:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v P\n  greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n  LCons ?v ?P \\<Longrightarrow>\n  ?P = LNil \\<or>\n  ?P =\n  greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' (?\\<sigma> ?v0.0) \\<or>\n  ?P = greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' (?\\<sigma>' ?v0.0)\n\ngoal (1 subgoal):\n 1. P = LNil \\<or>\n    (\\<exists>v. P = greedy_conforming_path p \\<sigma> \\<sigma>' v)", "by blast"], ["", "private"], ["", "lemma greedy_path_ltl_VVp:\n  assumes \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P\" \"v0 \\<in> VV p\" \"\\<not>deadend v0\"\n  shows \"\\<sigma> v0 = lhd P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> v0 = lhd P", "using assms greedy_conforming_path.code"], ["proof (prove)\nusing this:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P\n  v0 \\<in> VV p\n  \\<not> deadend v0\n  greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n  LCons ?v0.0\n   (if deadend ?v0.0 then LNil\n    else if ?v0.0 \\<in> VV ?p\n         then greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>'\n               (?\\<sigma> ?v0.0)\n         else greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>'\n               (?\\<sigma>' ?v0.0))\n\ngoal (1 subgoal):\n 1. \\<sigma> v0 = lhd P", "by auto"], ["", "private"], ["", "lemma greedy_path_ltl_VVpstar:\n  assumes \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P\" \"v0 \\<in> VV p**\" \"\\<not>deadend v0\"\n  shows \"\\<sigma>' v0 = lhd P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>' v0 = lhd P", "using assms greedy_conforming_path.code"], ["proof (prove)\nusing this:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P\n  v0 \\<in> VV p**\n  \\<not> deadend v0\n  greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n  LCons ?v0.0\n   (if deadend ?v0.0 then LNil\n    else if ?v0.0 \\<in> VV ?p\n         then greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>'\n               (?\\<sigma> ?v0.0)\n         else greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>'\n               (?\\<sigma>' ?v0.0))\n\ngoal (1 subgoal):\n 1. \\<sigma>' v0 = lhd P", "by auto"], ["", "private"], ["", "lemma greedy_conforming_path_properties:\n  assumes \"v0 \\<in> V\" \"strategy p \\<sigma>\" \"strategy p** \\<sigma>'\"\n  shows\n        greedy_path_not_null:  \"\\<not>lnull (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\"\n    and greedy_path_v0:        \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 $ 0 = v0\"\n    and greedy_path_valid:     \"valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\"\n    and greedy_path_maximal:   \"maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\"\n    and greedy_path_conforms:  \"path_conforms_with_strategy p (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\"\n    and greedy_path_conforms': \"path_conforms_with_strategy p** (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> lnull (greedy_conforming_path p \\<sigma> \\<sigma>' v0) &&&\n     greedy_conforming_path p \\<sigma> \\<sigma>' v0 $ 0 = v0 &&&\n     valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)) &&&\n    maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0) &&&\n    path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma> &&&\n    path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "proof-"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<not> lnull (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. greedy_conforming_path p \\<sigma> \\<sigma>' v0 $ 0 = v0\n 3. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 4. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 5. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 6. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "define P where [simp]: \"P = greedy_conforming_path p \\<sigma> \\<sigma>' v0\""], ["proof (state)\nthis:\n  P = greedy_conforming_path p \\<sigma> \\<sigma>' v0\n\ngoal (6 subgoals):\n 1. \\<not> lnull (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. greedy_conforming_path p \\<sigma> \\<sigma>' v0 $ 0 = v0\n 3. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 4. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 5. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 6. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "show \"\\<not>lnull P\" \"P $ 0 = v0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lnull P &&& P $ 0 = v0", "by (simp_all add: lnth_0_conv_lhd)"], ["proof (state)\nthis:\n  \\<not> lnull P\n  P $ 0 = v0\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "{"], ["proof (state)\nthis:\n  \\<not> lnull P\n  P $ 0 = v0\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "fix v0"], ["proof (state)\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "assume \"v0 \\<in> V\""], ["proof (state)\nthis:\n  v0 \\<in> V\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "let ?P = \"greedy_conforming_path p \\<sigma> \\<sigma>' v0\""], ["proof (state)\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "assume asm: \"\\<not>(\\<exists>v. ?P = LCons v LNil)\""], ["proof (state)\nthis:\n  \\<nexists>v. greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "obtain P' where P': \"?P = LCons v0 P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v0 P' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis greedy_path_LNil greedy_path_lhd neq_LNil_conv)"], ["proof (state)\nthis:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "hence \"\\<not>deadend v0\""], ["proof (prove)\nusing this:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n\ngoal (1 subgoal):\n 1. \\<not> deadend v0", "using asm greedy_path_deadend_v0 \\<open>v0 \\<in> V\\<close>"], ["proof (prove)\nusing this:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n  \\<nexists>v. greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil\n  greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n  LCons ?v ?P \\<Longrightarrow>\n  (?P = LNil) = deadend ?v0.0\n  v0 \\<in> V\n\ngoal (1 subgoal):\n 1. \\<not> deadend v0", "by blast"], ["proof (state)\nthis:\n  \\<not> deadend v0\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "from P'"], ["proof (chain)\npicking this:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'", "have 1: \"\\<not>lnull P'\""], ["proof (prove)\nusing this:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n\ngoal (1 subgoal):\n 1. \\<not> lnull P'", "using asm llist.collapse(1) \\<open>v0 \\<in> V\\<close> greedy_path_deadend_v0"], ["proof (prove)\nusing this:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n  \\<nexists>v. greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil\n  lnull ?llist \\<Longrightarrow> ?llist = LNil\n  v0 \\<in> V\n  greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n  LCons ?v ?P \\<Longrightarrow>\n  (?P = LNil) = deadend ?v0.0\n\ngoal (1 subgoal):\n 1. \\<not> lnull P'", "by blast"], ["proof (state)\nthis:\n  \\<not> lnull P'\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "moreover"], ["proof (state)\nthis:\n  \\<not> lnull P'\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "from P' \\<open>\\<not>deadend v0\\<close> assms(2,3) \\<open>v0 \\<in> V\\<close>"], ["proof (chain)\npicking this:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n  \\<not> deadend v0\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'\n  v0 \\<in> V", "have \"v0\\<rightarrow>lhd P'\""], ["proof (prove)\nusing this:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n  \\<not> deadend v0\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'\n  v0 \\<in> V\n\ngoal (1 subgoal):\n 1. v0 \\<rightarrow> lhd P'", "unfolding strategy_def"], ["proof (prove)\nusing this:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n  \\<not> deadend v0\n  \\<forall>v\\<in>VV p.\n     \\<not> deadend v \\<longrightarrow> v \\<rightarrow> \\<sigma> v\n  \\<forall>v\\<in>VV p**.\n     \\<not> deadend v \\<longrightarrow> v \\<rightarrow> \\<sigma>' v\n  v0 \\<in> V\n\ngoal (1 subgoal):\n 1. v0 \\<rightarrow> lhd P'", "using greedy_path_ltl_VVp greedy_path_ltl_VVpstar"], ["proof (prove)\nusing this:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n  \\<not> deadend v0\n  \\<forall>v\\<in>VV p.\n     \\<not> deadend v \\<longrightarrow> v \\<rightarrow> \\<sigma> v\n  \\<forall>v\\<in>VV p**.\n     \\<not> deadend v \\<longrightarrow> v \\<rightarrow> \\<sigma>' v\n  v0 \\<in> V\n  \\<lbrakk>greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n           LCons ?v0.0 ?P;\n   ?v0.0 \\<in> VV ?p; \\<not> deadend ?v0.0\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma> ?v0.0 = lhd ?P\n  \\<lbrakk>greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n           LCons ?v0.0 ?P;\n   ?v0.0 \\<in> VV ?p**; \\<not> deadend ?v0.0\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma>' ?v0.0 = lhd ?P\n\ngoal (1 subgoal):\n 1. v0 \\<rightarrow> lhd P'", "by (cases \"v0 \\<in> VV p\") auto"], ["proof (state)\nthis:\n  v0 \\<rightarrow> lhd P'\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "moreover"], ["proof (state)\nthis:\n  v0 \\<rightarrow> lhd P'\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "hence \"lhd P' \\<in> V\""], ["proof (prove)\nusing this:\n  v0 \\<rightarrow> lhd P'\n\ngoal (1 subgoal):\n 1. lhd P' \\<in> V", "by blast"], ["proof (state)\nthis:\n  lhd P' \\<in> V\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "moreover"], ["proof (state)\nthis:\n  lhd P' \\<in> V\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "hence \"\\<exists>v. P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V\""], ["proof (prove)\nusing this:\n  lhd P' \\<in> V\n\ngoal (1 subgoal):\n 1. \\<exists>v.\n       P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V", "by (metis P' calculation(1) greedy_conforming_path.simps(2) greedy_path_ltl_ex lnull_def)"], ["proof (state)\nthis:\n  \\<exists>v.\n     P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "text \\<open>The conjunction of all the above.\\<close>"], ["proof (state)\nthis:\n  \\<exists>v.\n     P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> lnull P'\n  v0 \\<rightarrow> lhd P'\n  lhd P' \\<in> V\n  \\<exists>v.\n     P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V", "have \"\\<exists>P'. ?P = LCons v0 P' \\<and> \\<not>lnull P' \\<and> v0\\<rightarrow>lhd P' \\<and> lhd P' \\<in> V\n        \\<and> (\\<exists>v. P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V)\""], ["proof (prove)\nusing this:\n  \\<not> lnull P'\n  v0 \\<rightarrow> lhd P'\n  lhd P' \\<in> V\n  \\<exists>v.\n     P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P' \\<and>\n       \\<not> lnull P' \\<and>\n       v0 \\<rightarrow> lhd P' \\<and>\n       lhd P' \\<in> V \\<and>\n       (\\<exists>v.\n           P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and>\n           v \\<in> V)", "using P'"], ["proof (prove)\nusing this:\n  \\<not> lnull P'\n  v0 \\<rightarrow> lhd P'\n  lhd P' \\<in> V\n  \\<exists>v.\n     P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P' \\<and>\n       \\<not> lnull P' \\<and>\n       v0 \\<rightarrow> lhd P' \\<and>\n       lhd P' \\<in> V \\<and>\n       (\\<exists>v.\n           P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and>\n           v \\<in> V)", "by blast"], ["proof (state)\nthis:\n  \\<exists>P'.\n     greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P' \\<and>\n     \\<not> lnull P' \\<and>\n     v0 \\<rightarrow> lhd P' \\<and>\n     lhd P' \\<in> V \\<and>\n     (\\<exists>v.\n         P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and>\n         v \\<in> V)\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?v0a2 \\<in> V;\n   \\<nexists>v.\n      greedy_conforming_path p \\<sigma> \\<sigma>' ?v0a2 =\n      LCons v LNil\\<rbrakk>\n  \\<Longrightarrow> \\<exists>P'.\n                       greedy_conforming_path p \\<sigma> \\<sigma>' ?v0a2 =\n                       LCons ?v0a2 P' \\<and>\n                       \\<not> lnull P' \\<and>\n                       ?v0a2 \\<rightarrow> lhd P' \\<and>\n                       lhd P' \\<in> V \\<and>\n                       (\\<exists>v.\n                           P' =\n                           greedy_conforming_path p \\<sigma> \\<sigma>'\n                            v \\<and>\n                           v \\<in> V)\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "note coinduction_helper = this"], ["proof (state)\nthis:\n  \\<lbrakk>?v0a2 \\<in> V;\n   \\<nexists>v.\n      greedy_conforming_path p \\<sigma> \\<sigma>' ?v0a2 =\n      LCons v LNil\\<rbrakk>\n  \\<Longrightarrow> \\<exists>P'.\n                       greedy_conforming_path p \\<sigma> \\<sigma>' ?v0a2 =\n                       LCons ?v0a2 P' \\<and>\n                       \\<not> lnull P' \\<and>\n                       ?v0a2 \\<rightarrow> lhd P' \\<and>\n                       lhd P' \\<in> V \\<and>\n                       (\\<exists>v.\n                           P' =\n                           greedy_conforming_path p \\<sigma> \\<sigma>'\n                            v \\<and>\n                           v \\<in> V)\n\ngoal (4 subgoals):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 3. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 4. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "show \"valid_path P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_path P", "using assms"], ["proof (prove)\nusing this:\n  v0 \\<in> V\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'\n\ngoal (1 subgoal):\n 1. valid_path P", "unfolding P_def"], ["proof (prove)\nusing this:\n  v0 \\<in> V\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'\n\ngoal (1 subgoal):\n 1. valid_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)", "proof (coinduction arbitrary: v0 rule: valid_path.coinduct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v0.\n       \\<lbrakk>v0 \\<in> V; strategy p \\<sigma>;\n        strategy p** \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n                         LNil \\<or>\n                         (\\<exists>v.\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LCons v LNil \\<and>\n                             v \\<in> V) \\<or>\n                         (\\<exists>v w Ps.\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LCons v Ps \\<and>\n                             v \\<in> V \\<and>\n                             w \\<in> V \\<and>\n                             v \\<rightarrow> w \\<and>\n                             ((\\<exists>v0.\n                                  Ps =\n                                  greedy_conforming_path p \\<sigma>\n                                   \\<sigma>' v0 \\<and>\n                                  v0 \\<in> V \\<and>\n                                  strategy p \\<sigma> \\<and>\n                                  strategy p** \\<sigma>') \\<or>\n                              valid_path Ps) \\<and>\n                             \\<not> lnull Ps \\<and> lhd Ps = w)", "case (valid_path v0)"], ["proof (state)\nthis:\n  v0 \\<in> V\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>v0.\n       \\<lbrakk>v0 \\<in> V; strategy p \\<sigma>;\n        strategy p** \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n                         LNil \\<or>\n                         (\\<exists>v.\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LCons v LNil \\<and>\n                             v \\<in> V) \\<or>\n                         (\\<exists>v w Ps.\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LCons v Ps \\<and>\n                             v \\<in> V \\<and>\n                             w \\<in> V \\<and>\n                             v \\<rightarrow> w \\<and>\n                             ((\\<exists>v0.\n                                  Ps =\n                                  greedy_conforming_path p \\<sigma>\n                                   \\<sigma>' v0 \\<and>\n                                  v0 \\<in> V \\<and>\n                                  strategy p \\<sigma> \\<and>\n                                  strategy p** \\<sigma>') \\<or>\n                              valid_path Ps) \\<and>\n                             \\<not> lnull Ps \\<and> lhd Ps = w)", "from \\<open>v0 \\<in> V\\<close> assms(2,3)"], ["proof (chain)\npicking this:\n  v0 \\<in> V\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'", "show ?case"], ["proof (prove)\nusing this:\n  v0 \\<in> V\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'\n\ngoal (1 subgoal):\n 1. greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<or>\n    (\\<exists>v.\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        v \\<in> V) \\<or>\n    (\\<exists>v w Ps.\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        v \\<in> V \\<and>\n        w \\<in> V \\<and>\n        v \\<rightarrow> w \\<and>\n        ((\\<exists>v0.\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             v0 \\<in> V \\<and>\n             strategy p \\<sigma> \\<and> strategy p** \\<sigma>') \\<or>\n         valid_path Ps) \\<and>\n        \\<not> lnull Ps \\<and> lhd Ps = w)", "using coinduction_helper[of v0] greedy_path_lhd"], ["proof (prove)\nusing this:\n  v0 \\<in> V\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'\n  \\<lbrakk>v0 \\<in> V;\n   \\<nexists>v.\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil\\<rbrakk>\n  \\<Longrightarrow> \\<exists>P'.\n                       greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n                       LCons v0 P' \\<and>\n                       \\<not> lnull P' \\<and>\n                       v0 \\<rightarrow> lhd P' \\<and>\n                       lhd P' \\<in> V \\<and>\n                       (\\<exists>v.\n                           P' =\n                           greedy_conforming_path p \\<sigma> \\<sigma>'\n                            v \\<and>\n                           v \\<in> V)\n  greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n  LCons ?v ?P \\<Longrightarrow>\n  ?v = ?v0.0\n\ngoal (1 subgoal):\n 1. greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<or>\n    (\\<exists>v.\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        v \\<in> V) \\<or>\n    (\\<exists>v w Ps.\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        v \\<in> V \\<and>\n        w \\<in> V \\<and>\n        v \\<rightarrow> w \\<and>\n        ((\\<exists>v0.\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             v0 \\<in> V \\<and>\n             strategy p \\<sigma> \\<and> strategy p** \\<sigma>') \\<or>\n         valid_path Ps) \\<and>\n        \\<not> lnull Ps \\<and> lhd Ps = w)", "by blast"], ["proof (state)\nthis:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<or>\n  (\\<exists>v.\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n      v \\<in> V) \\<or>\n  (\\<exists>v w Ps.\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n      v \\<in> V \\<and>\n      w \\<in> V \\<and>\n      v \\<rightarrow> w \\<and>\n      ((\\<exists>v0.\n           Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n           v0 \\<in> V \\<and>\n           strategy p \\<sigma> \\<and> strategy p** \\<sigma>') \\<or>\n       valid_path Ps) \\<and>\n      \\<not> lnull Ps \\<and> lhd Ps = w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  valid_path P\n\ngoal (3 subgoals):\n 1. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)\n 2. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 3. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "show \"maximal_path P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maximal_path P", "using assms"], ["proof (prove)\nusing this:\n  v0 \\<in> V\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'\n\ngoal (1 subgoal):\n 1. maximal_path P", "unfolding P_def"], ["proof (prove)\nusing this:\n  v0 \\<in> V\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'\n\ngoal (1 subgoal):\n 1. maximal_path (greedy_conforming_path p \\<sigma> \\<sigma>' v0)", "proof (coinduction arbitrary: v0)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v0.\n       \\<lbrakk>v0 \\<in> V; strategy p \\<sigma>;\n        strategy p** \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n                         LNil \\<or>\n                         (\\<exists>v.\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LCons v LNil \\<and>\n                             deadend v) \\<or>\n                         (\\<exists>Ps v.\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LCons v Ps \\<and>\n                             \\<not> lnull Ps \\<and>\n                             ((\\<exists>v0.\n                                  Ps =\n                                  greedy_conforming_path p \\<sigma>\n                                   \\<sigma>' v0 \\<and>\n                                  v0 \\<in> V \\<and>\n                                  strategy p \\<sigma> \\<and>\n                                  strategy p** \\<sigma>') \\<or>\n                              maximal_path Ps))", "case (maximal_path v0)"], ["proof (state)\nthis:\n  v0 \\<in> V\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>v0.\n       \\<lbrakk>v0 \\<in> V; strategy p \\<sigma>;\n        strategy p** \\<sigma>'\\<rbrakk>\n       \\<Longrightarrow> greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n                         LNil \\<or>\n                         (\\<exists>v.\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LCons v LNil \\<and>\n                             deadend v) \\<or>\n                         (\\<exists>Ps v.\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LCons v Ps \\<and>\n                             \\<not> lnull Ps \\<and>\n                             ((\\<exists>v0.\n                                  Ps =\n                                  greedy_conforming_path p \\<sigma>\n                                   \\<sigma>' v0 \\<and>\n                                  v0 \\<in> V \\<and>\n                                  strategy p \\<sigma> \\<and>\n                                  strategy p** \\<sigma>') \\<or>\n                              maximal_path Ps))", "from \\<open>v0 \\<in> V\\<close> assms(2,3)"], ["proof (chain)\npicking this:\n  v0 \\<in> V\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'", "show ?case"], ["proof (prove)\nusing this:\n  v0 \\<in> V\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'\n\ngoal (1 subgoal):\n 1. greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<or>\n    (\\<exists>v.\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        deadend v) \\<or>\n    (\\<exists>Ps v.\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<not> lnull Ps \\<and>\n        ((\\<exists>v0.\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             v0 \\<in> V \\<and>\n             strategy p \\<sigma> \\<and> strategy p** \\<sigma>') \\<or>\n         maximal_path Ps))", "using coinduction_helper[of v0] greedy_path_deadend_v'"], ["proof (prove)\nusing this:\n  v0 \\<in> V\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'\n  \\<lbrakk>v0 \\<in> V;\n   \\<nexists>v.\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil\\<rbrakk>\n  \\<Longrightarrow> \\<exists>P'.\n                       greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n                       LCons v0 P' \\<and>\n                       \\<not> lnull P' \\<and>\n                       v0 \\<rightarrow> lhd P' \\<and>\n                       lhd P' \\<in> V \\<and>\n                       (\\<exists>v.\n                           P' =\n                           greedy_conforming_path p \\<sigma> \\<sigma>'\n                            v \\<and>\n                           v \\<in> V)\n  greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n  LCons ?v LNil \\<Longrightarrow>\n  deadend ?v\n\ngoal (1 subgoal):\n 1. greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<or>\n    (\\<exists>v.\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        deadend v) \\<or>\n    (\\<exists>Ps v.\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<not> lnull Ps \\<and>\n        ((\\<exists>v0.\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             v0 \\<in> V \\<and>\n             strategy p \\<sigma> \\<and> strategy p** \\<sigma>') \\<or>\n         maximal_path Ps))", "by blast"], ["proof (state)\nthis:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<or>\n  (\\<exists>v.\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n      deadend v) \\<or>\n  (\\<exists>Ps v.\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n      \\<not> lnull Ps \\<and>\n      ((\\<exists>v0.\n           Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n           v0 \\<in> V \\<and>\n           strategy p \\<sigma> \\<and> strategy p** \\<sigma>') \\<or>\n       maximal_path Ps))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  maximal_path P\n\ngoal (2 subgoals):\n 1. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 2. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "{"], ["proof (state)\nthis:\n  maximal_path P\n\ngoal (2 subgoals):\n 1. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 2. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "fix p'' \\<sigma>''"], ["proof (state)\ngoal (2 subgoals):\n 1. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 2. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "assume p'': \"(p'' = p \\<and> \\<sigma>'' = \\<sigma>) \\<or> (p'' = p** \\<and> \\<sigma>'' = \\<sigma>')\""], ["proof (state)\nthis:\n  p'' = p \\<and> \\<sigma>'' = \\<sigma> \\<or>\n  p'' = p** \\<and> \\<sigma>'' = \\<sigma>'\n\ngoal (2 subgoals):\n 1. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 2. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "moreover"], ["proof (state)\nthis:\n  p'' = p \\<and> \\<sigma>'' = \\<sigma> \\<or>\n  p'' = p** \\<and> \\<sigma>'' = \\<sigma>'\n\ngoal (2 subgoals):\n 1. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 2. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "with assms"], ["proof (chain)\npicking this:\n  v0 \\<in> V\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'\n  p'' = p \\<and> \\<sigma>'' = \\<sigma> \\<or>\n  p'' = p** \\<and> \\<sigma>'' = \\<sigma>'", "have \"strategy p'' \\<sigma>''\""], ["proof (prove)\nusing this:\n  v0 \\<in> V\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'\n  p'' = p \\<and> \\<sigma>'' = \\<sigma> \\<or>\n  p'' = p** \\<and> \\<sigma>'' = \\<sigma>'\n\ngoal (1 subgoal):\n 1. strategy p'' \\<sigma>''", "by blast"], ["proof (state)\nthis:\n  strategy p'' \\<sigma>''\n\ngoal (2 subgoals):\n 1. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 2. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "hence \"path_conforms_with_strategy p'' P \\<sigma>''\""], ["proof (prove)\nusing this:\n  strategy p'' \\<sigma>''\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p'' P \\<sigma>''", "using \\<open>v0 \\<in> V\\<close>"], ["proof (prove)\nusing this:\n  strategy p'' \\<sigma>''\n  v0 \\<in> V\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p'' P \\<sigma>''", "unfolding P_def"], ["proof (prove)\nusing this:\n  strategy p'' \\<sigma>''\n  v0 \\<in> V\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p''\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>''", "proof (coinduction arbitrary: v0)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v0.\n       \\<lbrakk>strategy p'' \\<sigma>''; v0 \\<in> V\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'''.\n                             p'' = pa \\<and>\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LNil \\<and>\n                             \\<sigma>'' = \\<sigma>''') \\<or>\n                         (\\<exists>pa v \\<sigma>'''.\n                             p'' = pa \\<and>\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LCons v LNil \\<and>\n                             \\<sigma>'' = \\<sigma>''') \\<or>\n                         (\\<exists>v pa w \\<sigma>''' Ps.\n                             p'' = pa \\<and>\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LCons v (LCons w Ps) \\<and>\n                             \\<sigma>'' = \\<sigma>''' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>''' v \\<and>\n                             ((\\<exists>v0.\n                                  pa = p'' \\<and>\n                                  LCons w Ps =\n                                  greedy_conforming_path p \\<sigma>\n                                   \\<sigma>' v0 \\<and>\n                                  \\<sigma>''' = \\<sigma>'' \\<and>\n                                  strategy p'' \\<sigma>'' \\<and>\n                                  v0 \\<in> V) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>''')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'''.\n                             p'' = pa \\<and>\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LCons v Ps \\<and>\n                             \\<sigma>'' = \\<sigma>''' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>v0.\n                                  pa = p'' \\<and>\n                                  Ps =\n                                  greedy_conforming_path p \\<sigma>\n                                   \\<sigma>' v0 \\<and>\n                                  \\<sigma>''' = \\<sigma>'' \\<and>\n                                  strategy p'' \\<sigma>'' \\<and>\n                                  v0 \\<in> V) \\<or>\n                              path_conforms_with_strategy pa Ps\n                               \\<sigma>'''))", "case (path_conforms_with_strategy v0)"], ["proof (state)\nthis:\n  strategy p'' \\<sigma>''\n  v0 \\<in> V\n\ngoal (1 subgoal):\n 1. \\<And>v0.\n       \\<lbrakk>strategy p'' \\<sigma>''; v0 \\<in> V\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pa \\<sigma>'''.\n                             p'' = pa \\<and>\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LNil \\<and>\n                             \\<sigma>'' = \\<sigma>''') \\<or>\n                         (\\<exists>pa v \\<sigma>'''.\n                             p'' = pa \\<and>\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LCons v LNil \\<and>\n                             \\<sigma>'' = \\<sigma>''') \\<or>\n                         (\\<exists>v pa w \\<sigma>''' Ps.\n                             p'' = pa \\<and>\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LCons v (LCons w Ps) \\<and>\n                             \\<sigma>'' = \\<sigma>''' \\<and>\n                             v \\<in> VV pa \\<and>\n                             w = \\<sigma>''' v \\<and>\n                             ((\\<exists>v0.\n                                  pa = p'' \\<and>\n                                  LCons w Ps =\n                                  greedy_conforming_path p \\<sigma>\n                                   \\<sigma>' v0 \\<and>\n                                  \\<sigma>''' = \\<sigma>'' \\<and>\n                                  strategy p'' \\<sigma>'' \\<and>\n                                  v0 \\<in> V) \\<or>\n                              path_conforms_with_strategy pa (LCons w Ps)\n                               \\<sigma>''')) \\<or>\n                         (\\<exists>v pa Ps \\<sigma>'''.\n                             p'' = pa \\<and>\n                             greedy_conforming_path p \\<sigma> \\<sigma>'\n                              v0 =\n                             LCons v Ps \\<and>\n                             \\<sigma>'' = \\<sigma>''' \\<and>\n                             v \\<notin> VV pa \\<and>\n                             ((\\<exists>v0.\n                                  pa = p'' \\<and>\n                                  Ps =\n                                  greedy_conforming_path p \\<sigma>\n                                   \\<sigma>' v0 \\<and>\n                                  \\<sigma>''' = \\<sigma>'' \\<and>\n                                  strategy p'' \\<sigma>'' \\<and>\n                                  v0 \\<in> V) \\<or>\n                              path_conforms_with_strategy pa Ps\n                               \\<sigma>'''))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))", "proof (cases \"v0 \\<in> VV p''\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v0 \\<in> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))\n 2. v0 \\<notin> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))", "case True"], ["proof (state)\nthis:\n  v0 \\<in> VV p''\n\ngoal (2 subgoals):\n 1. v0 \\<in> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))\n 2. v0 \\<notin> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))", "{"], ["proof (state)\nthis:\n  v0 \\<in> VV p''\n\ngoal (2 subgoals):\n 1. v0 \\<in> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))\n 2. v0 \\<notin> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))", "assume \"\\<not>(\\<exists>v. greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil)\""], ["proof (state)\nthis:\n  \\<nexists>v. greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil\n\ngoal (2 subgoals):\n 1. v0 \\<in> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))\n 2. v0 \\<notin> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))", "with \\<open>v0 \\<in> V\\<close>"], ["proof (chain)\npicking this:\n  v0 \\<in> V\n  \\<nexists>v. greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil", "obtain P' where\n            P': \"greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\" \"\\<not>lnull P'\" \"v0\\<rightarrow>lhd P'\"\n                \"lhd P' \\<in> V\" \"\\<exists>v. P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V\""], ["proof (prove)\nusing this:\n  v0 \\<in> V\n  \\<nexists>v. greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n                 LCons v0 P';\n         \\<not> lnull P'; v0 \\<rightarrow> lhd P'; lhd P' \\<in> V;\n         \\<exists>v.\n            P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and>\n            v \\<in> V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using coinduction_helper"], ["proof (prove)\nusing this:\n  v0 \\<in> V\n  \\<nexists>v. greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil\n  \\<lbrakk>?v0a2 \\<in> V;\n   \\<nexists>v.\n      greedy_conforming_path p \\<sigma> \\<sigma>' ?v0a2 =\n      LCons v LNil\\<rbrakk>\n  \\<Longrightarrow> \\<exists>P'.\n                       greedy_conforming_path p \\<sigma> \\<sigma>' ?v0a2 =\n                       LCons ?v0a2 P' \\<and>\n                       \\<not> lnull P' \\<and>\n                       ?v0a2 \\<rightarrow> lhd P' \\<and>\n                       lhd P' \\<in> V \\<and>\n                       (\\<exists>v.\n                           P' =\n                           greedy_conforming_path p \\<sigma> \\<sigma>'\n                            v \\<and>\n                           v \\<in> V)\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n                 LCons v0 P';\n         \\<not> lnull P'; v0 \\<rightarrow> lhd P'; lhd P' \\<in> V;\n         \\<exists>v.\n            P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and>\n            v \\<in> V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n  \\<not> lnull P'\n  v0 \\<rightarrow> lhd P'\n  lhd P' \\<in> V\n  \\<exists>v.\n     P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V\n\ngoal (2 subgoals):\n 1. v0 \\<in> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))\n 2. v0 \\<notin> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))", "with \\<open>v0 \\<in> VV p''\\<close> p''"], ["proof (chain)\npicking this:\n  v0 \\<in> VV p''\n  p'' = p \\<and> \\<sigma>'' = \\<sigma> \\<or>\n  p'' = p** \\<and> \\<sigma>'' = \\<sigma>'\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n  \\<not> lnull P'\n  v0 \\<rightarrow> lhd P'\n  lhd P' \\<in> V\n  \\<exists>v.\n     P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V", "have \"\\<sigma>'' v0 = lhd P'\""], ["proof (prove)\nusing this:\n  v0 \\<in> VV p''\n  p'' = p \\<and> \\<sigma>'' = \\<sigma> \\<or>\n  p'' = p** \\<and> \\<sigma>'' = \\<sigma>'\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n  \\<not> lnull P'\n  v0 \\<rightarrow> lhd P'\n  lhd P' \\<in> V\n  \\<exists>v.\n     P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V\n\ngoal (1 subgoal):\n 1. \\<sigma>'' v0 = lhd P'", "using greedy_path_ltl_VVp greedy_path_ltl_VVpstar"], ["proof (prove)\nusing this:\n  v0 \\<in> VV p''\n  p'' = p \\<and> \\<sigma>'' = \\<sigma> \\<or>\n  p'' = p** \\<and> \\<sigma>'' = \\<sigma>'\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n  \\<not> lnull P'\n  v0 \\<rightarrow> lhd P'\n  lhd P' \\<in> V\n  \\<exists>v.\n     P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V\n  \\<lbrakk>greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n           LCons ?v0.0 ?P;\n   ?v0.0 \\<in> VV ?p; \\<not> deadend ?v0.0\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma> ?v0.0 = lhd ?P\n  \\<lbrakk>greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n           LCons ?v0.0 ?P;\n   ?v0.0 \\<in> VV ?p**; \\<not> deadend ?v0.0\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma>' ?v0.0 = lhd ?P\n\ngoal (1 subgoal):\n 1. \\<sigma>'' v0 = lhd P'", "by blast"], ["proof (state)\nthis:\n  \\<sigma>'' v0 = lhd P'\n\ngoal (2 subgoals):\n 1. v0 \\<in> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))\n 2. v0 \\<notin> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))", "with \\<open>v0 \\<in> VV p''\\<close> P'(1,2,5)"], ["proof (chain)\npicking this:\n  v0 \\<in> VV p''\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n  \\<not> lnull P'\n  \\<exists>v.\n     P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V\n  \\<sigma>'' v0 = lhd P'", "have ?path_conforms_VVp"], ["proof (prove)\nusing this:\n  v0 \\<in> VV p''\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n  \\<not> lnull P'\n  \\<exists>v.\n     P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V\n  \\<sigma>'' v0 = lhd P'\n\ngoal (1 subgoal):\n 1. \\<exists>v pa w \\<sigma>''' Ps.\n       p'' = pa \\<and>\n       greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n       LCons v (LCons w Ps) \\<and>\n       \\<sigma>'' = \\<sigma>''' \\<and>\n       v \\<in> VV pa \\<and>\n       w = \\<sigma>''' v \\<and>\n       ((\\<exists>v0.\n            pa = p'' \\<and>\n            LCons w Ps =\n            greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n            \\<sigma>''' = \\<sigma>'' \\<and>\n            strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n        path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')", "using greedy_conforming_path.code path_conforms_with_strategy(1)"], ["proof (prove)\nusing this:\n  v0 \\<in> VV p''\n  greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v0 P'\n  \\<not> lnull P'\n  \\<exists>v.\n     P' = greedy_conforming_path p \\<sigma> \\<sigma>' v \\<and> v \\<in> V\n  \\<sigma>'' v0 = lhd P'\n  greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>' ?v0.0 =\n  LCons ?v0.0\n   (if deadend ?v0.0 then LNil\n    else if ?v0.0 \\<in> VV ?p\n         then greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>'\n               (?\\<sigma> ?v0.0)\n         else greedy_conforming_path ?p ?\\<sigma> ?\\<sigma>'\n               (?\\<sigma>' ?v0.0))\n  strategy p'' \\<sigma>''\n\ngoal (1 subgoal):\n 1. \\<exists>v pa w \\<sigma>''' Ps.\n       p'' = pa \\<and>\n       greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n       LCons v (LCons w Ps) \\<and>\n       \\<sigma>'' = \\<sigma>''' \\<and>\n       v \\<in> VV pa \\<and>\n       w = \\<sigma>''' v \\<and>\n       ((\\<exists>v0.\n            pa = p'' \\<and>\n            LCons w Ps =\n            greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n            \\<sigma>''' = \\<sigma>'' \\<and>\n            strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n        path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>v pa w \\<sigma>''' Ps.\n     p'' = pa \\<and>\n     greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n     LCons v (LCons w Ps) \\<and>\n     \\<sigma>'' = \\<sigma>''' \\<and>\n     v \\<in> VV pa \\<and>\n     w = \\<sigma>''' v \\<and>\n     ((\\<exists>v0.\n          pa = p'' \\<and>\n          LCons w Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n          \\<sigma>''' = \\<sigma>'' \\<and>\n          strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n      path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')\n\ngoal (2 subgoals):\n 1. v0 \\<in> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))\n 2. v0 \\<notin> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))", "}"], ["proof (state)\nthis:\n  \\<nexists>v.\n     greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n     LCons v LNil \\<Longrightarrow>\n  \\<exists>v pa w \\<sigma>''' Ps.\n     p'' = pa \\<and>\n     greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n     LCons v (LCons w Ps) \\<and>\n     \\<sigma>'' = \\<sigma>''' \\<and>\n     v \\<in> VV pa \\<and>\n     w = \\<sigma>''' v \\<and>\n     ((\\<exists>v0.\n          pa = p'' \\<and>\n          LCons w Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n          \\<sigma>''' = \\<sigma>'' \\<and>\n          strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n      path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')\n\ngoal (2 subgoals):\n 1. v0 \\<in> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))\n 2. v0 \\<notin> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>v.\n     greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n     LCons v LNil \\<Longrightarrow>\n  \\<exists>v pa w \\<sigma>''' Ps.\n     p'' = pa \\<and>\n     greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n     LCons v (LCons w Ps) \\<and>\n     \\<sigma>'' = \\<sigma>''' \\<and>\n     v \\<in> VV pa \\<and>\n     w = \\<sigma>''' v \\<and>\n     ((\\<exists>v0.\n          pa = p'' \\<and>\n          LCons w Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n          \\<sigma>''' = \\<sigma>'' \\<and>\n          strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n      path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>'''.\n      p'' = pa \\<and>\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n      \\<sigma>'' = \\<sigma>''') \\<or>\n  (\\<exists>pa v \\<sigma>'''.\n      p'' = pa \\<and>\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n      \\<sigma>'' = \\<sigma>''') \\<or>\n  (\\<exists>v pa w \\<sigma>''' Ps.\n      p'' = pa \\<and>\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n      LCons v (LCons w Ps) \\<and>\n      \\<sigma>'' = \\<sigma>''' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>''' v \\<and>\n      ((\\<exists>v0.\n           pa = p'' \\<and>\n           LCons w Ps =\n           greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n           \\<sigma>''' = \\<sigma>'' \\<and>\n           strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>'''.\n      p'' = pa \\<and>\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n      \\<sigma>'' = \\<sigma>''' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>v0.\n           pa = p'' \\<and>\n           Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n           \\<sigma>''' = \\<sigma>'' \\<and>\n           strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'''))\n\ngoal (1 subgoal):\n 1. v0 \\<notin> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v0 \\<notin> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))", "case False"], ["proof (state)\nthis:\n  v0 \\<notin> VV p''\n\ngoal (1 subgoal):\n 1. v0 \\<notin> VV p'' \\<Longrightarrow>\n    (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))", "thus ?thesis"], ["proof (prove)\nusing this:\n  v0 \\<notin> VV p''\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))", "using coinduction_helper[of v0] path_conforms_with_strategy"], ["proof (prove)\nusing this:\n  v0 \\<notin> VV p''\n  \\<lbrakk>v0 \\<in> V;\n   \\<nexists>v.\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil\\<rbrakk>\n  \\<Longrightarrow> \\<exists>P'.\n                       greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n                       LCons v0 P' \\<and>\n                       \\<not> lnull P' \\<and>\n                       v0 \\<rightarrow> lhd P' \\<and>\n                       lhd P' \\<in> V \\<and>\n                       (\\<exists>v.\n                           P' =\n                           greedy_conforming_path p \\<sigma> \\<sigma>'\n                            v \\<and>\n                           v \\<in> V)\n  strategy p'' \\<sigma>''\n  v0 \\<in> V\n\ngoal (1 subgoal):\n 1. (\\<exists>pa \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>pa v \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n        \\<sigma>'' = \\<sigma>''') \\<or>\n    (\\<exists>v pa w \\<sigma>''' Ps.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n        LCons v (LCons w Ps) \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<in> VV pa \\<and>\n        w = \\<sigma>''' v \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             LCons w Ps =\n             greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n    (\\<exists>v pa Ps \\<sigma>'''.\n        p'' = pa \\<and>\n        greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n        \\<sigma>'' = \\<sigma>''' \\<and>\n        v \\<notin> VV pa \\<and>\n        ((\\<exists>v0.\n             pa = p'' \\<and>\n             Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n             \\<sigma>''' = \\<sigma>'' \\<and>\n             strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n         path_conforms_with_strategy pa Ps \\<sigma>'''))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>'''.\n      p'' = pa \\<and>\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n      \\<sigma>'' = \\<sigma>''') \\<or>\n  (\\<exists>pa v \\<sigma>'''.\n      p'' = pa \\<and>\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n      \\<sigma>'' = \\<sigma>''') \\<or>\n  (\\<exists>v pa w \\<sigma>''' Ps.\n      p'' = pa \\<and>\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n      LCons v (LCons w Ps) \\<and>\n      \\<sigma>'' = \\<sigma>''' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>''' v \\<and>\n      ((\\<exists>v0.\n           pa = p'' \\<and>\n           LCons w Ps =\n           greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n           \\<sigma>''' = \\<sigma>'' \\<and>\n           strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>'''.\n      p'' = pa \\<and>\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n      \\<sigma>'' = \\<sigma>''' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>v0.\n           pa = p'' \\<and>\n           Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n           \\<sigma>''' = \\<sigma>'' \\<and>\n           strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>pa \\<sigma>'''.\n      p'' = pa \\<and>\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LNil \\<and>\n      \\<sigma>'' = \\<sigma>''') \\<or>\n  (\\<exists>pa v \\<sigma>'''.\n      p'' = pa \\<and>\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v LNil \\<and>\n      \\<sigma>'' = \\<sigma>''') \\<or>\n  (\\<exists>v pa w \\<sigma>''' Ps.\n      p'' = pa \\<and>\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 =\n      LCons v (LCons w Ps) \\<and>\n      \\<sigma>'' = \\<sigma>''' \\<and>\n      v \\<in> VV pa \\<and>\n      w = \\<sigma>''' v \\<and>\n      ((\\<exists>v0.\n           pa = p'' \\<and>\n           LCons w Ps =\n           greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n           \\<sigma>''' = \\<sigma>'' \\<and>\n           strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n       path_conforms_with_strategy pa (LCons w Ps) \\<sigma>''')) \\<or>\n  (\\<exists>v pa Ps \\<sigma>'''.\n      p'' = pa \\<and>\n      greedy_conforming_path p \\<sigma> \\<sigma>' v0 = LCons v Ps \\<and>\n      \\<sigma>'' = \\<sigma>''' \\<and>\n      v \\<notin> VV pa \\<and>\n      ((\\<exists>v0.\n           pa = p'' \\<and>\n           Ps = greedy_conforming_path p \\<sigma> \\<sigma>' v0 \\<and>\n           \\<sigma>''' = \\<sigma>'' \\<and>\n           strategy p'' \\<sigma>'' \\<and> v0 \\<in> V) \\<or>\n       path_conforms_with_strategy pa Ps \\<sigma>'''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  path_conforms_with_strategy p'' P \\<sigma>''\n\ngoal (2 subgoals):\n 1. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 2. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "}"], ["proof (state)\nthis:\n  ?p''2 = p \\<and> ?\\<sigma>''2 = \\<sigma> \\<or>\n  ?p''2 = p** \\<and> ?\\<sigma>''2 = \\<sigma>' \\<Longrightarrow>\n  path_conforms_with_strategy ?p''2 P ?\\<sigma>''2\n\ngoal (2 subgoals):\n 1. path_conforms_with_strategy p\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>\n 2. path_conforms_with_strategy p**\n     (greedy_conforming_path p \\<sigma> \\<sigma>' v0) \\<sigma>'", "thus \"path_conforms_with_strategy p P \\<sigma>\" \"path_conforms_with_strategy p** P \\<sigma>'\""], ["proof (prove)\nusing this:\n  ?p''2 = p \\<and> ?\\<sigma>''2 = \\<sigma> \\<or>\n  ?p''2 = p** \\<and> ?\\<sigma>''2 = \\<sigma>' \\<Longrightarrow>\n  path_conforms_with_strategy ?p''2 P ?\\<sigma>''2\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma> &&&\n    path_conforms_with_strategy p** P \\<sigma>'", "by blast+"], ["proof (state)\nthis:\n  path_conforms_with_strategy p P \\<sigma>\n  path_conforms_with_strategy p** P \\<sigma>'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary strategy_conforming_path_exists:\n  assumes \"v0 \\<in> V\" \"strategy p \\<sigma>\" \"strategy p** \\<sigma>'\"\n  obtains P where \"vmc2_path G P v0 p \\<sigma> \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P.\n        vmc2_path G P v0 p \\<sigma> \\<sigma>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>P.\n        vmc2_path G P v0 p \\<sigma> \\<sigma>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    vmc2_path G ?P2 v0 p \\<sigma> \\<sigma>'", "show \"vmc2_path G (greedy_conforming_path p \\<sigma> \\<sigma>' v0) v0 p \\<sigma> \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc2_path G (greedy_conforming_path p \\<sigma> \\<sigma>' v0) v0 p\n     \\<sigma> \\<sigma>'", "using assms"], ["proof (prove)\nusing this:\n  v0 \\<in> V\n  strategy p \\<sigma>\n  strategy p** \\<sigma>'\n\ngoal (1 subgoal):\n 1. vmc2_path G (greedy_conforming_path p \\<sigma> \\<sigma>' v0) v0 p\n     \\<sigma> \\<sigma>'", "by unfold_locales (simp_all add: greedy_conforming_path_properties)"], ["proof (state)\nthis:\n  vmc2_path G (greedy_conforming_path p \\<sigma> \\<sigma>' v0) v0 p \\<sigma>\n   \\<sigma>'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary strategy_conforming_path_exists_single:\n  assumes \"v0 \\<in> V\" \"strategy p \\<sigma>\"\n  obtains P where \"vmc_path G P v0 p \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P.\n        vmc_path G P v0 p \\<sigma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>P.\n        vmc_path G P v0 p \\<sigma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    vmc_path G ?P2 v0 p \\<sigma>", "show \"vmc_path G (greedy_conforming_path p \\<sigma> \\<sigma>_arbitrary v0) v0 p \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path G (greedy_conforming_path p \\<sigma> \\<sigma>_arbitrary v0) v0\n     p \\<sigma>", "using assms"], ["proof (prove)\nusing this:\n  v0 \\<in> V\n  strategy p \\<sigma>\n\ngoal (1 subgoal):\n 1. vmc_path G (greedy_conforming_path p \\<sigma> \\<sigma>_arbitrary v0) v0\n     p \\<sigma>", "by unfold_locales (simp_all add: greedy_conforming_path_properties)"], ["proof (state)\nthis:\n  vmc_path G (greedy_conforming_path p \\<sigma> \\<sigma>_arbitrary v0) v0 p\n   \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"], ["", "subsection \\<open>Valid Maximal Conforming Paths\\<close>"], ["", "text \\<open>Now is the time to add some lemmas to the locale \\<open>vmc_path\\<close>.\\<close>"], ["", "context vmc_path begin"], ["", "lemma Ptl_conforms [simp]: \"path_conforms_with_strategy p (ltl P) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (ltl P) \\<sigma>", "using P_conforms path_conforms_with_strategy_ltl"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P \\<sigma>\n  path_conforms_with_strategy ?p ?P ?\\<sigma> \\<Longrightarrow>\n  path_conforms_with_strategy ?p (ltl ?P) ?\\<sigma>\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (ltl P) \\<sigma>", "by blast"], ["", "lemma Pdrop_conforms [simp]: \"path_conforms_with_strategy p (ldropn n P) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (ldropn n P) \\<sigma>", "using P_conforms path_conforms_with_strategy_drop"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P \\<sigma>\n  path_conforms_with_strategy ?p ?P ?\\<sigma> \\<Longrightarrow>\n  path_conforms_with_strategy ?p (ldropn ?n ?P) ?\\<sigma>\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (ldropn n P) \\<sigma>", "by blast"], ["", "lemma prefix_conforms [simp]: \"path_conforms_with_strategy p (ltake n P) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (ltake n P) \\<sigma>", "using P_conforms path_conforms_with_strategy_prefix"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P \\<sigma>\n  \\<lbrakk>path_conforms_with_strategy ?p ?P ?\\<sigma>;\n   lprefix ?P' ?P\\<rbrakk>\n  \\<Longrightarrow> path_conforms_with_strategy ?p ?P' ?\\<sigma>\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (ltake n P) \\<sigma>", "by blast"], ["", "lemma extension_conforms [simp]:\n  \"(v' \\<in> VV p \\<Longrightarrow> \\<sigma> v' = v0) \\<Longrightarrow> path_conforms_with_strategy p (LCons v' P) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v' \\<in> VV p \\<Longrightarrow> \\<sigma> v' = v0) \\<Longrightarrow>\n    path_conforms_with_strategy p (LCons v' P) \\<sigma>", "by (metis P_LCons P_conforms path_conforms_VVp path_conforms_VVpstar)"], ["", "lemma extension_valid_maximal_conforming:\n  assumes \"v'\\<rightarrow>v0\" \"v' \\<in> VV p \\<Longrightarrow> \\<sigma> v' = v0\"\n  shows \"vmc_path G (LCons v' P) v' p \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path G (LCons v' P) v' p \\<sigma>", "using assms"], ["proof (prove)\nusing this:\n  v' \\<rightarrow> v0\n  v' \\<in> VV p \\<Longrightarrow> \\<sigma> v' = v0\n\ngoal (1 subgoal):\n 1. vmc_path G (LCons v' P) v' p \\<sigma>", "by unfold_locales simp_all"], ["", "lemma vmc_path_ldropn:\n  assumes \"enat n < llength P\"\n  shows \"vmc_path G (ldropn n P) (P $ n) p \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path G (ldropn n P) (P $ n) p \\<sigma>", "using assms"], ["proof (prove)\nusing this:\n  enat n < llength P\n\ngoal (1 subgoal):\n 1. vmc_path G (ldropn n P) (P $ n) p \\<sigma>", "by unfold_locales (simp_all add: lhd_ldropn)"], ["", "lemma conforms_to_another_strategy:\n  \"path_conforms_with_strategy p P \\<sigma>' \\<Longrightarrow> vmc_path G P v0 p \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma>' \\<Longrightarrow>\n    vmc_path G P v0 p \\<sigma>'", "using P_not_null P_valid P_maximal P_v0"], ["proof (prove)\nusing this:\n  \\<not> lnull P\n  valid_path P\n  maximal_path P\n  lhd P = v0\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma>' \\<Longrightarrow>\n    vmc_path G P v0 p \\<sigma>'", "by unfold_locales blast+"], ["", "end"], ["", "lemma (in ParityGame) valid_maximal_conforming_path_0:\n  assumes \"\\<not>lnull P\" \"valid_path P\" \"maximal_path P\" \"path_conforms_with_strategy p P \\<sigma>\"\n  shows \"vmc_path G P (P $ 0) p \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path G P (P $ 0) p \\<sigma>", "using assms"], ["proof (prove)\nusing this:\n  \\<not> lnull P\n  valid_path P\n  maximal_path P\n  path_conforms_with_strategy p P \\<sigma>\n\ngoal (1 subgoal):\n 1. vmc_path G P (P $ 0) p \\<sigma>", "by unfold_locales (simp_all add: lnth_0_conv_lhd)"], ["", "subsection \\<open>Valid Maximal Conforming Paths with One Edge\\<close>"], ["", "text \\<open>\n  We define a locale for valid maximal conforming paths that contain at least one edge.\n  This is equivalent to the first node being no deadend.  This assumption allows us to prove\n  much stronger lemmas about @{term \"ltl P\"} compared to @{term \"vmc_path\"}.\n\\<close>"], ["", "locale vmc_path_no_deadend = vmc_path +\n  assumes v0_no_deadend [simp]: \"\\<not>deadend v0\"\nbegin"], ["", "definition \"w0 \\<equiv> lhd (ltl P)\""], ["", "lemma Ptl_not_null [simp]: \"\\<not>lnull (ltl P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P)", "using P_LCons P_maximal maximal_no_deadend v0_no_deadend"], ["proof (prove)\nusing this:\n  P = LCons v0 (ltl P)\n  maximal_path P\n  \\<lbrakk>maximal_path (LCons ?v ?Ps); \\<not> deadend ?v\\<rbrakk>\n  \\<Longrightarrow> \\<not> lnull ?Ps\n  \\<not> deadend v0\n\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P)", "by metis"], ["", "lemma Ptl_LCons: \"ltl P = LCons w0 (ltl (ltl P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ltl P = LCons w0 (ltl (ltl P))", "unfolding w0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ltl P = LCons (lhd (ltl P)) (ltl (ltl P))", "by simp"], ["", "lemma P_LCons': \"P = LCons v0 (LCons w0 (ltl (ltl P)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P = LCons v0 (LCons w0 (ltl (ltl P)))", "using P_LCons Ptl_LCons"], ["proof (prove)\nusing this:\n  P = LCons v0 (ltl P)\n  ltl P = LCons w0 (ltl (ltl P))\n\ngoal (1 subgoal):\n 1. P = LCons v0 (LCons w0 (ltl (ltl P)))", "by simp"], ["", "lemma v0_edge_w0 [simp]: \"v0\\<rightarrow>w0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v0 \\<rightarrow> w0", "using P_valid P_LCons'"], ["proof (prove)\nusing this:\n  valid_path P\n  P = LCons v0 (LCons w0 (ltl (ltl P)))\n\ngoal (1 subgoal):\n 1. v0 \\<rightarrow> w0", "by (metis valid_path_edges')"], ["", "lemma Ptl_0: \"ltl P $ 0 = lhd (ltl P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ltl P $ 0 = lhd (ltl P)", "by (simp add: lhd_conv_lnth)"], ["", "lemma P_Suc_0: \"P $ Suc 0 = w0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P $ Suc 0 = w0", "by (simp add: P_lnth_Suc Ptl_0 w0_def)"], ["", "lemma Ptl_edge [simp]: \"v0 \\<rightarrow> lhd (ltl P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v0 \\<rightarrow> lhd (ltl P)", "by (metis P_LCons' P_valid valid_path_edges' w0_def)"], ["", "lemma v0_conforms: \"v0 \\<in> VV p \\<Longrightarrow> \\<sigma> v0 = w0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v0 \\<in> VV p \\<Longrightarrow> \\<sigma> v0 = w0", "using path_conforms_with_strategy_start"], ["proof (prove)\nusing this:\n  \\<lbrakk>path_conforms_with_strategy ?p (LCons ?v (LCons ?w ?P))\n            ?\\<sigma>;\n   ?v \\<in> VV ?p\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma> ?v = ?w\n\ngoal (1 subgoal):\n 1. v0 \\<in> VV p \\<Longrightarrow> \\<sigma> v0 = w0", "by (metis P_LCons' P_conforms)"], ["", "lemma w0_V [simp]: \"w0 \\<in> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w0 \\<in> V", "by (metis Ptl_LCons Ptl_valid valid_path_cons_simp)"], ["", "lemma w0_lset_P [simp]: \"w0 \\<in> lset P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w0 \\<in> lset P", "by (metis P_LCons' lset_intros(1) lset_intros(2))"], ["", "lemma vmc_path_ltl [simp]: \"vmc_path G (ltl P) w0 p \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path G (ltl P) w0 p \\<sigma>", "by (unfold_locales) (simp_all add: w0_def)"], ["", "end"], ["", "context vmc_path begin"], ["", "lemma vmc_path_lnull_ltl_no_deadend:\n  \"\\<not>lnull (ltl P) \\<Longrightarrow> vmc_path_no_deadend G P v0 p \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow>\n    vmc_path_no_deadend G P v0 p \\<sigma>", "using P_0 P_no_deadends"], ["proof (prove)\nusing this:\n  P $ 0 = v0\n  enat (Suc ?n) < llength P \\<Longrightarrow> \\<not> deadend (P $ ?n)\n\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow>\n    vmc_path_no_deadend G P v0 p \\<sigma>", "by (unfold_locales) (metis enat_ltl_Suc lnull_0_llength)"], ["", "lemma vmc_path_conforms:\n  assumes \"enat (Suc n) < llength P\" \"P $ n \\<in> VV p\"\n  shows \"\\<sigma> (P $ n) = P $ Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> (P $ n) = P $ Suc n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma> (P $ n) = P $ Suc n", "define P' where \"P' = ldropn n P\""], ["proof (state)\nthis:\n  P' = ldropn n P\n\ngoal (1 subgoal):\n 1. \\<sigma> (P $ n) = P $ Suc n", "then"], ["proof (chain)\npicking this:\n  P' = ldropn n P", "interpret P': vmc_path G P' \"P $ n\" p \\<sigma>"], ["proof (prove)\nusing this:\n  P' = ldropn n P\n\ngoal (1 subgoal):\n 1. vmc_path G P' (P $ n) p \\<sigma>", "using vmc_path_ldropn assms(1) Suc_llength"], ["proof (prove)\nusing this:\n  P' = ldropn n P\n  enat ?n < llength P \\<Longrightarrow>\n  vmc_path G (ldropn ?n P) (P $ ?n) p \\<sigma>\n  enat (Suc n) < llength P\n  enat (Suc ?n) < llength ?xs \\<Longrightarrow> enat ?n < llength ?xs\n\ngoal (1 subgoal):\n 1. vmc_path G P' (P $ n) p \\<sigma>", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma> (P $ n) = P $ Suc n", "have \"\\<not>deadend (P $ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> deadend (P $ n)", "using assms(1) P_no_deadends"], ["proof (prove)\nusing this:\n  enat (Suc n) < llength P\n  enat (Suc ?n) < llength P \\<Longrightarrow> \\<not> deadend (P $ ?n)\n\ngoal (1 subgoal):\n 1. \\<not> deadend (P $ n)", "by blast"], ["proof (state)\nthis:\n  \\<not> deadend (P $ n)\n\ngoal (1 subgoal):\n 1. \\<sigma> (P $ n) = P $ Suc n", "then"], ["proof (chain)\npicking this:\n  \\<not> deadend (P $ n)", "interpret P': vmc_path_no_deadend G P' \"P $ n\" p \\<sigma>"], ["proof (prove)\nusing this:\n  \\<not> deadend (P $ n)\n\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P' (P $ n) p \\<sigma>", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma> (P $ n) = P $ Suc n", "have \"\\<sigma> (P $ n) = P'.w0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> (P $ n) = P'.w0", "using P'.v0_conforms assms(2)"], ["proof (prove)\nusing this:\n  P $ n \\<in> VV p \\<Longrightarrow> \\<sigma> (P $ n) = P'.w0\n  P $ n \\<in> VV p\n\ngoal (1 subgoal):\n 1. \\<sigma> (P $ n) = P'.w0", "by blast"], ["proof (state)\nthis:\n  \\<sigma> (P $ n) = P'.w0\n\ngoal (1 subgoal):\n 1. \\<sigma> (P $ n) = P $ Suc n", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<sigma> (P $ n) = P'.w0\n\ngoal (1 subgoal):\n 1. \\<sigma> (P $ n) = P $ Suc n", "using P'_def P'.P_Suc_0 assms(1)"], ["proof (prove)\nusing this:\n  \\<sigma> (P $ n) = P'.w0\n  P' = ldropn n P\n  P' $ Suc 0 = P'.w0\n  enat (Suc n) < llength P\n\ngoal (1 subgoal):\n 1. \\<sigma> (P $ n) = P $ Suc n", "by simp"], ["proof (state)\nthis:\n  \\<sigma> (P $ n) = P $ Suc n\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>@{term lset} Induction Schemas for Paths\\<close>"], ["", "text \\<open>Let us define an induction schema useful for proving @{term \"lset P \\<subseteq> S\"}.\\<close>"], ["", "lemma vmc_path_lset_induction [consumes 1, case_names base step]:\n  assumes \"Q P\"\n    and base: \"v0 \\<in> S\"\n    and step_assumption: \"\\<And>P v0. \\<lbrakk> vmc_path_no_deadend G P v0 p \\<sigma>; v0 \\<in> S; Q P \\<rbrakk>\n      \\<Longrightarrow> Q (ltl P) \\<and> (vmc_path_no_deadend.w0 P) \\<in> S\"\n  shows \"lset P \\<subseteq> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset P \\<subseteq> S", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> lset P \\<Longrightarrow> x \\<in> S", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> lset P \\<Longrightarrow> x \\<in> S", "assume \"v \\<in> lset P\""], ["proof (state)\nthis:\n  v \\<in> lset P\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> lset P \\<Longrightarrow> x \\<in> S", "thus \"v \\<in> S\""], ["proof (prove)\nusing this:\n  v \\<in> lset P\n\ngoal (1 subgoal):\n 1. v \\<in> S", "using vmc_path_axioms assms(1,2)"], ["proof (prove)\nusing this:\n  v \\<in> lset P\n  vmc_path G P v0 p \\<sigma>\n  Q P\n  v0 \\<in> S\n\ngoal (1 subgoal):\n 1. v \\<in> S", "proof (induct arbitrary: v0 rule: llist_set_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs v0.\n       \\<lbrakk>\\<not> lnull xs; vmc_path G xs v0 p \\<sigma>; Q xs;\n        v0 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> lhd xs \\<in> S\n 2. \\<And>xs y v0.\n       \\<lbrakk>\\<not> lnull xs; y \\<in> lset (ltl xs);\n        \\<And>v0.\n           \\<lbrakk>vmc_path G (ltl xs) v0 p \\<sigma>; Q (ltl xs);\n            v0 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> y \\<in> S;\n        vmc_path G xs v0 p \\<sigma>; Q xs; v0 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "case (find P)"], ["proof (state)\nthis:\n  \\<not> lnull P\n  vmc_path G P v0 p \\<sigma>\n  Q P\n  v0 \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>xs v0.\n       \\<lbrakk>\\<not> lnull xs; vmc_path G xs v0 p \\<sigma>; Q xs;\n        v0 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> lhd xs \\<in> S\n 2. \\<And>xs y v0.\n       \\<lbrakk>\\<not> lnull xs; y \\<in> lset (ltl xs);\n        \\<And>v0.\n           \\<lbrakk>vmc_path G (ltl xs) v0 p \\<sigma>; Q (ltl xs);\n            v0 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> y \\<in> S;\n        vmc_path G xs v0 p \\<sigma>; Q xs; v0 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "then"], ["proof (chain)\npicking this:\n  \\<not> lnull P\n  vmc_path G P v0 p \\<sigma>\n  Q P\n  v0 \\<in> S", "interpret vmc_path G P v0 p \\<sigma>"], ["proof (prove)\nusing this:\n  \\<not> lnull P\n  vmc_path G P v0 p \\<sigma>\n  Q P\n  v0 \\<in> S\n\ngoal (1 subgoal):\n 1. vmc_path G P v0 p \\<sigma>", "by blast"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs v0.\n       \\<lbrakk>\\<not> lnull xs; vmc_path G xs v0 p \\<sigma>; Q xs;\n        v0 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> lhd xs \\<in> S\n 2. \\<And>xs y v0.\n       \\<lbrakk>\\<not> lnull xs; y \\<in> lset (ltl xs);\n        \\<And>v0.\n           \\<lbrakk>vmc_path G (ltl xs) v0 p \\<sigma>; Q (ltl xs);\n            v0 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> y \\<in> S;\n        vmc_path G xs v0 p \\<sigma>; Q xs; v0 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lhd P \\<in> S", "by (simp add: find.prems(3))"], ["proof (state)\nthis:\n  lhd P \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>xs y v0.\n       \\<lbrakk>\\<not> lnull xs; y \\<in> lset (ltl xs);\n        \\<And>v0.\n           \\<lbrakk>vmc_path G (ltl xs) v0 p \\<sigma>; Q (ltl xs);\n            v0 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> y \\<in> S;\n        vmc_path G xs v0 p \\<sigma>; Q xs; v0 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs y v0.\n       \\<lbrakk>\\<not> lnull xs; y \\<in> lset (ltl xs);\n        \\<And>v0.\n           \\<lbrakk>vmc_path G (ltl xs) v0 p \\<sigma>; Q (ltl xs);\n            v0 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> y \\<in> S;\n        vmc_path G xs v0 p \\<sigma>; Q xs; v0 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "case (step P v)"], ["proof (state)\nthis:\n  \\<not> lnull P\n  v \\<in> lset (ltl P)\n  \\<lbrakk>vmc_path G (ltl P) ?v0.0 p \\<sigma>; Q (ltl P);\n   ?v0.0 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> v \\<in> S\n  vmc_path G P v0 p \\<sigma>\n  Q P\n  v0 \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>xs y v0.\n       \\<lbrakk>\\<not> lnull xs; y \\<in> lset (ltl xs);\n        \\<And>v0.\n           \\<lbrakk>vmc_path G (ltl xs) v0 p \\<sigma>; Q (ltl xs);\n            v0 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> y \\<in> S;\n        vmc_path G xs v0 p \\<sigma>; Q xs; v0 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "then"], ["proof (chain)\npicking this:\n  \\<not> lnull P\n  v \\<in> lset (ltl P)\n  \\<lbrakk>vmc_path G (ltl P) ?v0.0 p \\<sigma>; Q (ltl P);\n   ?v0.0 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> v \\<in> S\n  vmc_path G P v0 p \\<sigma>\n  Q P\n  v0 \\<in> S", "interpret vmc_path G P v0 p \\<sigma>"], ["proof (prove)\nusing this:\n  \\<not> lnull P\n  v \\<in> lset (ltl P)\n  \\<lbrakk>vmc_path G (ltl P) ?v0.0 p \\<sigma>; Q (ltl P);\n   ?v0.0 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> v \\<in> S\n  vmc_path G P v0 p \\<sigma>\n  Q P\n  v0 \\<in> S\n\ngoal (1 subgoal):\n 1. vmc_path G P v0 p \\<sigma>", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs y v0.\n       \\<lbrakk>\\<not> lnull xs; y \\<in> lset (ltl xs);\n        \\<And>v0.\n           \\<lbrakk>vmc_path G (ltl xs) v0 p \\<sigma>; Q (ltl xs);\n            v0 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> y \\<in> S;\n        vmc_path G xs v0 p \\<sigma>; Q xs; v0 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> y \\<in> S", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> S", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> v \\<in> S\n 2. \\<not> ?P \\<Longrightarrow> v \\<in> S", "assume \"lnull (ltl P)\""], ["proof (state)\nthis:\n  lnull (ltl P)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> v \\<in> S\n 2. \\<not> ?P \\<Longrightarrow> v \\<in> S", "hence \"P = LCons v LNil\""], ["proof (prove)\nusing this:\n  lnull (ltl P)\n\ngoal (1 subgoal):\n 1. P = LCons v LNil", "by (metis llist.disc(2) lset_cases step.hyps(2))"], ["proof (state)\nthis:\n  P = LCons v LNil\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> v \\<in> S\n 2. \\<not> ?P \\<Longrightarrow> v \\<in> S", "thus ?thesis"], ["proof (prove)\nusing this:\n  P = LCons v LNil\n\ngoal (1 subgoal):\n 1. v \\<in> S", "using step.prems(3) P_LCons"], ["proof (prove)\nusing this:\n  P = LCons v LNil\n  v0 \\<in> S\n  P = LCons v0 (ltl P)\n\ngoal (1 subgoal):\n 1. v \\<in> S", "by blast"], ["proof (state)\nthis:\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow> v \\<in> S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow> v \\<in> S", "assume \"\\<not>lnull (ltl P)\""], ["proof (state)\nthis:\n  \\<not> lnull (ltl P)\n\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow> v \\<in> S", "then"], ["proof (chain)\npicking this:\n  \\<not> lnull (ltl P)", "interpret vmc_path_no_deadend G P v0 p \\<sigma>"], ["proof (prove)\nusing this:\n  \\<not> lnull (ltl P)\n\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v0 p \\<sigma>", "using vmc_path_lnull_ltl_no_deadend"], ["proof (prove)\nusing this:\n  \\<not> lnull (ltl P)\n  \\<not> lnull (ltl P) \\<Longrightarrow>\n  vmc_path_no_deadend G P v0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v0 p \\<sigma>", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lnull (ltl P) \\<Longrightarrow> v \\<in> S", "show \"v \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> S", "using step.hyps(3)\n              step_assumption[OF vmc_path_no_deadend_axioms \\<open>v0 \\<in> S\\<close> \\<open>Q P\\<close>]\n              vmc_path_ltl"], ["proof (prove)\nusing this:\n  \\<lbrakk>vmc_path G (ltl P) ?v0.0 p \\<sigma>; Q (ltl P);\n   ?v0.0 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> v \\<in> S\n  Q (ltl P) \\<and> w0 \\<in> S\n  vmc_path G (ltl P) w0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. v \\<in> S", "by blast"], ["proof (state)\nthis:\n  v \\<in> S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<in> S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<in> S\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>@{thm vmc_path_lset_induction} without the Q predicate.\\<close>"], ["", "corollary vmc_path_lset_induction_simple [case_names base step]:\n  assumes base: \"v0 \\<in> S\"\n    and step: \"\\<And>P v0. \\<lbrakk> vmc_path_no_deadend G P v0 p \\<sigma>; v0 \\<in> S \\<rbrakk>\n      \\<Longrightarrow> vmc_path_no_deadend.w0 P \\<in> S\"\n  shows \"lset P \\<subseteq> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset P \\<subseteq> S", "using assms vmc_path_lset_induction[of \"\\<lambda>P. True\"]"], ["proof (prove)\nusing this:\n  v0 \\<in> S\n  \\<lbrakk>vmc_path_no_deadend G ?P ?v0.0 p \\<sigma>; ?v0.0 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> vmc_path_no_deadend.w0 ?P \\<in> S\n  \\<lbrakk>True; v0 \\<in> ?S;\n   \\<And>P v0.\n      \\<lbrakk>vmc_path_no_deadend G P v0 p \\<sigma>; v0 \\<in> ?S;\n       True\\<rbrakk>\n      \\<Longrightarrow> True \\<and>\n                        vmc_path_no_deadend.w0 P \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> lset P \\<subseteq> ?S\n\ngoal (1 subgoal):\n 1. lset P \\<subseteq> S", "by blast"], ["", "text \\<open>Another induction schema for proving @{term \"lset P \\<subseteq> S\"} based on closure properties.\\<close>"], ["", "lemma vmc_path_lset_induction_closed_subset [case_names VVp VVpstar v0 disjoint]:\n  assumes VVp: \"\\<And>v. \\<lbrakk> v \\<in> S; \\<not>deadend v; v \\<in> VV p \\<rbrakk> \\<Longrightarrow> \\<sigma> v \\<in> S \\<union> T\"\n    and VVpstar: \"\\<And>v w. \\<lbrakk> v \\<in> S; \\<not>deadend v; v \\<in> VV p** ; v\\<rightarrow>w \\<rbrakk> \\<Longrightarrow> w \\<in> S \\<union> T\"\n    and v0: \"v0 \\<in> S\"\n    and disjoint: \"lset P \\<inter> T = {}\"\n  shows \"lset P \\<subseteq> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset P \\<subseteq> S", "using disjoint"], ["proof (prove)\nusing this:\n  lset P \\<inter> T = {}\n\ngoal (1 subgoal):\n 1. lset P \\<subseteq> S", "proof (induct rule: vmc_path_lset_induction)"], ["proof (state)\ngoal (2 subgoals):\n 1. v0 \\<in> S\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p \\<sigma>; v0 \\<in> S;\n        lset P \\<inter> T = {}\\<rbrakk>\n       \\<Longrightarrow> lset (ltl P) \\<inter> T = {} \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S", "case (step P v0)"], ["proof (state)\nthis:\n  vmc_path_no_deadend G P v0 p \\<sigma>\n  v0 \\<in> S\n  lset P \\<inter> T = {}\n\ngoal (2 subgoals):\n 1. v0 \\<in> S\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p \\<sigma>; v0 \\<in> S;\n        lset P \\<inter> T = {}\\<rbrakk>\n       \\<Longrightarrow> lset (ltl P) \\<inter> T = {} \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S", "interpret vmc_path_no_deadend G P v0 p \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v0 p \\<sigma>", "using step.hyps(1)"], ["proof (prove)\nusing this:\n  vmc_path_no_deadend G P v0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v0 p \\<sigma>", "."], ["proof (state)\ngoal (2 subgoals):\n 1. v0 \\<in> S\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p \\<sigma>; v0 \\<in> S;\n        lset P \\<inter> T = {}\\<rbrakk>\n       \\<Longrightarrow> lset (ltl P) \\<inter> T = {} \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S", "have \"lset (ltl P) \\<inter> T = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset (ltl P) \\<inter> T = {}", "using step.hyps(3)"], ["proof (prove)\nusing this:\n  lset P \\<inter> T = {}\n\ngoal (1 subgoal):\n 1. lset (ltl P) \\<inter> T = {}", "by (meson disjoint_eq_subset_Compl lset_ltl order.trans)"], ["proof (state)\nthis:\n  lset (ltl P) \\<inter> T = {}\n\ngoal (2 subgoals):\n 1. v0 \\<in> S\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p \\<sigma>; v0 \\<in> S;\n        lset P \\<inter> T = {}\\<rbrakk>\n       \\<Longrightarrow> lset (ltl P) \\<inter> T = {} \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S", "moreover"], ["proof (state)\nthis:\n  lset (ltl P) \\<inter> T = {}\n\ngoal (2 subgoals):\n 1. v0 \\<in> S\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p \\<sigma>; v0 \\<in> S;\n        lset P \\<inter> T = {}\\<rbrakk>\n       \\<Longrightarrow> lset (ltl P) \\<inter> T = {} \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S", "have \"w0 \\<in> S \\<union> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w0 \\<in> S \\<union> T", "using assms(1,2)[of v0] step.hyps(2) v0_no_deadend v0_conforms"], ["proof (prove)\nusing this:\n  \\<lbrakk>v0 \\<in> S; \\<not> deadend v0; v0 \\<in> VV p\\<rbrakk>\n  \\<Longrightarrow> \\<sigma> v0 \\<in> S \\<union> T\n  \\<lbrakk>v0 \\<in> S; \\<not> deadend v0; v0 \\<in> VV p**;\n   v0 \\<rightarrow> ?w\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> S \\<union> T\n  v0 \\<in> S\n  \\<not> deadend v0\n  v0 \\<in> VV p \\<Longrightarrow> \\<sigma> v0 = w0\n\ngoal (1 subgoal):\n 1. w0 \\<in> S \\<union> T", "by (cases \"v0 \\<in> VV p\") simp_all"], ["proof (state)\nthis:\n  w0 \\<in> S \\<union> T\n\ngoal (2 subgoals):\n 1. v0 \\<in> S\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p \\<sigma>; v0 \\<in> S;\n        lset P \\<inter> T = {}\\<rbrakk>\n       \\<Longrightarrow> lset (ltl P) \\<inter> T = {} \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S", "ultimately"], ["proof (chain)\npicking this:\n  lset (ltl P) \\<inter> T = {}\n  w0 \\<in> S \\<union> T", "show ?case"], ["proof (prove)\nusing this:\n  lset (ltl P) \\<inter> T = {}\n  w0 \\<in> S \\<union> T\n\ngoal (1 subgoal):\n 1. lset (ltl P) \\<inter> T = {} \\<and> w0 \\<in> S", "using step.hyps(3) w0_lset_P"], ["proof (prove)\nusing this:\n  lset (ltl P) \\<inter> T = {}\n  w0 \\<in> S \\<union> T\n  lset P \\<inter> T = {}\n  w0 \\<in> lset P\n\ngoal (1 subgoal):\n 1. lset (ltl P) \\<inter> T = {} \\<and> w0 \\<in> S", "by blast"], ["proof (state)\nthis:\n  lset (ltl P) \\<inter> T = {} \\<and> w0 \\<in> S\n\ngoal (1 subgoal):\n 1. v0 \\<in> S", "qed (insert v0)"], ["", "end"], ["", "end"]]}