{"file_name": "/home/qj213/afp-2021-10-22/thys/Parity_Game/PositionalDeterminacy.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Parity_Game", "problem_names": ["lemma positional_strategy_induction_step:\n  assumes \"v \\<in> V\"\n    and no_deadends: \"\\<And>v. v \\<in> V \\<Longrightarrow> \\<not>deadend v\"\n    and IH: \"\\<And>(G :: ('a, 'b) ParityGame_scheme) v.\n      \\<lbrakk> card (\\<omega>\\<^bsub>G\\<^esub> ` V\\<^bsub>G\\<^esub>) < card (\\<omega> ` V); v \\<in> V\\<^bsub>G\\<^esub>;\n        ParityGame G;\n        \\<And>v. v \\<in> V\\<^bsub>G\\<^esub> \\<Longrightarrow> \\<not>Digraph.deadend G v  \\<rbrakk>\n      \\<Longrightarrow> \\<exists>p. v \\<in> ParityGame.winning_region G p\"\n  shows \"\\<exists>p. v \\<in> winning_region p\"", "theorem positional_strategy_exists_without_deadends:\n  assumes \"v \\<in> V\" \"\\<And>v. v \\<in> V \\<Longrightarrow> \\<not>deadend v\"\n  shows \"\\<exists>p. v \\<in> winning_region p\"", "theorem positional_strategy_exists:\n  assumes \"v0 \\<in> V\"\n  shows \"\\<exists>p. v0 \\<in> winning_region p\"", "theorem partition_into_winning_regions:\n  shows \"V = winning_region Even \\<union> winning_region Odd\"\n    and \"winning_region Even \\<inter> winning_region Odd = {}\""], "translations": [["", "lemma positional_strategy_induction_step:\n  assumes \"v \\<in> V\"\n    and no_deadends: \"\\<And>v. v \\<in> V \\<Longrightarrow> \\<not>deadend v\"\n    and IH: \"\\<And>(G :: ('a, 'b) ParityGame_scheme) v.\n      \\<lbrakk> card (\\<omega>\\<^bsub>G\\<^esub> ` V\\<^bsub>G\\<^esub>) < card (\\<omega> ` V); v \\<in> V\\<^bsub>G\\<^esub>;\n        ParityGame G;\n        \\<And>v. v \\<in> V\\<^bsub>G\\<^esub> \\<Longrightarrow> \\<not>Digraph.deadend G v  \\<rbrakk>\n      \\<Longrightarrow> \\<exists>p. v \\<in> ParityGame.winning_region G p\"\n  shows \"\\<exists>p. v \\<in> winning_region p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "text \\<open>First, we determine the minimum priority and the player who likes it.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "define min_prio where \"min_prio = Min (\\<omega> ` V)\""], ["proof (state)\nthis:\n  min_prio = Min (\\<omega> ` V)\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have \"\\<exists>p. winning_priority p min_prio\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p. (if p = Even then even else odd) min_prio", "by auto"], ["proof (state)\nthis:\n  \\<exists>p. (if p = Even then even else odd) min_prio\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "then"], ["proof (chain)\npicking this:\n  \\<exists>p. (if p = Even then even else odd) min_prio", "obtain p where p: \"winning_priority p min_prio\""], ["proof (prove)\nusing this:\n  \\<exists>p. (if p = Even then even else odd) min_prio\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        (if p = Even then even else odd) min_prio \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (if p = Even then even else odd) min_prio\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "text \\<open>Then we define the tentative winning region of player @{term \"p**\"}.\n    The rest of the proof is to show that this is the complete winning region.\n\\<close>"], ["proof (state)\nthis:\n  (if p = Even then even else odd) min_prio\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "define W1 where \"W1 = winning_region p**\""], ["proof (state)\nthis:\n  W1 = winning_region p**\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "text \\<open>For this, we define several more sets of nodes.\n    First, \\<open>U\\<close> is the tentative winning region of player @{term p}.\n\\<close>"], ["proof (state)\nthis:\n  W1 = winning_region p**\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "define U where \"U = V - W1\""], ["proof (state)\nthis:\n  U = V - W1\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "define K where \"K = U \\<inter> (\\<omega> -` {min_prio})\""], ["proof (state)\nthis:\n  K = U \\<inter> \\<omega> -` {min_prio}\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "define V' where \"V' = U - attractor p K\""], ["proof (state)\nthis:\n  V' = U - attractor p K\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "define G' where [simp]: \"G' = subgame V'\""], ["proof (state)\nthis:\n  G' = subgame V'\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "interpret G': ParityGame G'"], ["proof (prove)\ngoal (1 subgoal):\n 1. ParityGame G'", "using subgame_ParityGame"], ["proof (prove)\nusing this:\n  ParityGame (subgame ?V')\n\ngoal (1 subgoal):\n 1. ParityGame G'", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have U_equiv: \"\\<And>v. v \\<in> V \\<Longrightarrow> v \\<in> U \\<longleftrightarrow> v \\<notin> winning_region p**\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V \\<Longrightarrow>\n       (v \\<in> U) = (v \\<notin> winning_region p**)", "unfolding U_def W1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V \\<Longrightarrow>\n       (v \\<in> V - winning_region p**) = (v \\<notin> winning_region p**)", "by blast"], ["proof (state)\nthis:\n  ?v \\<in> V \\<Longrightarrow>\n  (?v \\<in> U) = (?v \\<notin> winning_region p**)\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have \"V' \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V' \\<subseteq> V", "unfolding U_def V'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. V - W1 - attractor p K \\<subseteq> V", "by blast"], ["proof (state)\nthis:\n  V' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "hence [simp]: \"V\\<^bsub>G'\\<^esub> = V'\""], ["proof (prove)\nusing this:\n  V' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. V\\<^bsub>G'\\<^esub> = V'", "unfolding G'_def"], ["proof (prove)\nusing this:\n  V' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. V\\<^bsub>subgame V'\\<^esub> = V'", "by simp"], ["proof (state)\nthis:\n  V\\<^bsub>G'\\<^esub> = V'\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have \"V\\<^bsub>G'\\<^esub> \\<subseteq> V\" \"E\\<^bsub>G'\\<^esub> \\<subseteq> E\" \"\\<omega>\\<^bsub>G'\\<^esub> = \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V\\<^bsub>G'\\<^esub> \\<subseteq> V &&&\n    E\\<^bsub>G'\\<^esub> \\<subseteq> E &&&\n    \\<omega>\\<^bsub>G'\\<^esub> = \\<omega>", "unfolding G'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. V\\<^bsub>subgame V'\\<^esub> \\<subseteq> V &&&\n    E\\<^bsub>subgame V'\\<^esub> \\<subseteq> E &&&\n    \\<omega>\\<^bsub>subgame V'\\<^esub> = \\<omega>", "by (simp_all add: subgame_\\<omega>)"], ["proof (state)\nthis:\n  V\\<^bsub>G'\\<^esub> \\<subseteq> V\n  E\\<^bsub>G'\\<^esub> \\<subseteq> E\n  \\<omega>\\<^bsub>G'\\<^esub> = \\<omega>\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have \"G'.VV p = V' \\<inter> VV p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.VV p = V' \\<inter> VV p", "unfolding G'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if p = Even then V0\\<^bsub>subgame V'\\<^esub>\n     else V\\<^bsub>subgame V'\\<^esub> - V0\\<^bsub>subgame V'\\<^esub>) =\n    V' \\<inter> VV p", "using subgame_VV"], ["proof (prove)\nusing this:\n  (if ?p = Even then V0\\<^bsub>subgame ?V'\\<^esub>\n   else V\\<^bsub>subgame ?V'\\<^esub> - V0\\<^bsub>subgame ?V'\\<^esub>) =\n  ?V' \\<inter> VV ?p\n\ngoal (1 subgoal):\n 1. (if p = Even then V0\\<^bsub>subgame V'\\<^esub>\n     else V\\<^bsub>subgame V'\\<^esub> - V0\\<^bsub>subgame V'\\<^esub>) =\n    V' \\<inter> VV p", "by simp"], ["proof (state)\nthis:\n  G'.VV p = V' \\<inter> VV p\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have V_decomp: \"V = attractor p K \\<union> V' \\<union> W1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V = attractor p K \\<union> V' \\<union> W1", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. V = attractor p K \\<union> V' \\<union> W1", "have \"V \\<subseteq> attractor p K \\<union> V' \\<union> W1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<subseteq> attractor p K \\<union> V' \\<union> W1", "unfolding V'_def U_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<subseteq> attractor p K \\<union> (V - W1 - attractor p K) \\<union>\n                  W1", "by blast"], ["proof (state)\nthis:\n  V \\<subseteq> attractor p K \\<union> V' \\<union> W1\n\ngoal (1 subgoal):\n 1. V = attractor p K \\<union> V' \\<union> W1", "moreover"], ["proof (state)\nthis:\n  V \\<subseteq> attractor p K \\<union> V' \\<union> W1\n\ngoal (1 subgoal):\n 1. V = attractor p K \\<union> V' \\<union> W1", "have \"attractor p K \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. attractor p K \\<subseteq> V", "using attractor_in_V[of K]"], ["proof (prove)\nusing this:\n  K \\<subseteq> V \\<Longrightarrow> attractor ?p K \\<subseteq> V\n\ngoal (1 subgoal):\n 1. attractor p K \\<subseteq> V", "unfolding K_def U_def"], ["proof (prove)\nusing this:\n  (V - W1) \\<inter> \\<omega> -` {min_prio} \\<subseteq> V \\<Longrightarrow>\n  attractor ?p ((V - W1) \\<inter> \\<omega> -` {min_prio}) \\<subseteq> V\n\ngoal (1 subgoal):\n 1. attractor p ((V - W1) \\<inter> \\<omega> -` {min_prio}) \\<subseteq> V", "by blast"], ["proof (state)\nthis:\n  attractor p K \\<subseteq> V\n\ngoal (1 subgoal):\n 1. V = attractor p K \\<union> V' \\<union> W1", "ultimately"], ["proof (chain)\npicking this:\n  V \\<subseteq> attractor p K \\<union> V' \\<union> W1\n  attractor p K \\<subseteq> V", "show ?thesis"], ["proof (prove)\nusing this:\n  V \\<subseteq> attractor p K \\<union> V' \\<union> W1\n  attractor p K \\<subseteq> V\n\ngoal (1 subgoal):\n 1. V = attractor p K \\<union> V' \\<union> W1", "unfolding W1_def winning_region_def"], ["proof (prove)\nusing this:\n  V \\<subseteq> attractor p K \\<union> V' \\<union>\n                {v \\<in> V.\n                 \\<exists>\\<sigma>.\n                    strategy p** \\<sigma> \\<and>\n                    winning_strategy p** \\<sigma> v}\n  attractor p K \\<subseteq> V\n\ngoal (1 subgoal):\n 1. V =\n    attractor p K \\<union> V' \\<union>\n    {v \\<in> V.\n     \\<exists>\\<sigma>.\n        strategy p** \\<sigma> \\<and> winning_strategy p** \\<sigma> v}", "using \\<open>V' \\<subseteq> V\\<close>"], ["proof (prove)\nusing this:\n  V \\<subseteq> attractor p K \\<union> V' \\<union>\n                {v \\<in> V.\n                 \\<exists>\\<sigma>.\n                    strategy p** \\<sigma> \\<and>\n                    winning_strategy p** \\<sigma> v}\n  attractor p K \\<subseteq> V\n  V' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. V =\n    attractor p K \\<union> V' \\<union>\n    {v \\<in> V.\n     \\<exists>\\<sigma>.\n        strategy p** \\<sigma> \\<and> winning_strategy p** \\<sigma> v}", "by blast"], ["proof (state)\nthis:\n  V = attractor p K \\<union> V' \\<union> W1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  V = attractor p K \\<union> V' \\<union> W1\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have G'_no_deadends: \"\\<And>v. v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not>G'.deadend v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "assume \"v \\<in> V\\<^bsub>G'\\<^esub>\""], ["proof (state)\nthis:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "hence *: \"v \\<in> U - attractor p K\""], ["proof (prove)\nusing this:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. v \\<in> U - attractor p K", "using \\<open>V\\<^bsub>G'\\<^esub> = V'\\<close> V'_def"], ["proof (prove)\nusing this:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n  V\\<^bsub>G'\\<^esub> = V'\n  V' = U - attractor p K\n\ngoal (1 subgoal):\n 1. v \\<in> U - attractor p K", "by blast"], ["proof (state)\nthis:\n  v \\<in> U - attractor p K\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "moreover"], ["proof (state)\nthis:\n  v \\<in> U - attractor p K\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "hence \"\\<exists>w \\<in> U. v\\<rightarrow>w\""], ["proof (prove)\nusing this:\n  v \\<in> U - attractor p K\n\ngoal (1 subgoal):\n 1. \\<exists>w\\<in>U. v \\<rightarrow> w", "using removing_winning_region_induces_no_deadends[of v \"p**\"] no_deadends U_equiv U_def"], ["proof (prove)\nusing this:\n  v \\<in> U - attractor p K\n  \\<lbrakk>v \\<in> V - winning_region p**; \\<not> deadend v\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w\\<in>V - winning_region p**. v \\<rightarrow> w\n  ?v \\<in> V \\<Longrightarrow> \\<not> deadend ?v\n  ?v \\<in> V \\<Longrightarrow>\n  (?v \\<in> U) = (?v \\<notin> winning_region p**)\n  U = V - W1\n\ngoal (1 subgoal):\n 1. \\<exists>w\\<in>U. v \\<rightarrow> w", "by blast"], ["proof (state)\nthis:\n  \\<exists>w\\<in>U. v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "moreover"], ["proof (state)\nthis:\n  \\<exists>w\\<in>U. v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "have \"\\<And>w. \\<lbrakk> v \\<in> VV p**; v\\<rightarrow>w \\<rbrakk> \\<Longrightarrow> w \\<in> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>v \\<in> VV p**; v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> U", "using * U_equiv winning_region_extends_VVp"], ["proof (prove)\nusing this:\n  v \\<in> U - attractor p K\n  ?v \\<in> V \\<Longrightarrow>\n  (?v \\<in> U) = (?v \\<notin> winning_region p**)\n  \\<lbrakk>?v \\<in> VV ?p; ?v \\<rightarrow> ?w;\n   ?w \\<in> winning_region ?p\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> winning_region ?p\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       \\<lbrakk>v \\<in> VV p**; v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> U", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>v \\<in> VV p**; v \\<rightarrow> ?w\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> U\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> U - attractor p K\n  \\<exists>w\\<in>U. v \\<rightarrow> w\n  \\<lbrakk>v \\<in> VV p**; v \\<rightarrow> ?w\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> U", "have \"\\<exists>w \\<in> V'. v\\<rightarrow>w\""], ["proof (prove)\nusing this:\n  v \\<in> U - attractor p K\n  \\<exists>w\\<in>U. v \\<rightarrow> w\n  \\<lbrakk>v \\<in> VV p**; v \\<rightarrow> ?w\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> U\n\ngoal (1 subgoal):\n 1. \\<exists>w\\<in>V'. v \\<rightarrow> w", "using U_equiv winning_region_extends_VVp removing_attractor_induces_no_deadends V'_def"], ["proof (prove)\nusing this:\n  v \\<in> U - attractor p K\n  \\<exists>w\\<in>U. v \\<rightarrow> w\n  \\<lbrakk>v \\<in> VV p**; v \\<rightarrow> ?w\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> U\n  ?v \\<in> V \\<Longrightarrow>\n  (?v \\<in> U) = (?v \\<notin> winning_region p**)\n  \\<lbrakk>?v \\<in> VV ?p; ?v \\<rightarrow> ?w;\n   ?w \\<in> winning_region ?p\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> winning_region ?p\n  \\<lbrakk>?v \\<in> ?S - attractor ?p ?W; ?v \\<rightarrow> ?w; ?w \\<in> ?S;\n   \\<And>w.\n      \\<lbrakk>?v \\<in> VV ?p**; ?v \\<rightarrow> w\\<rbrakk>\n      \\<Longrightarrow> w \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w\\<in>?S - attractor ?p ?W. ?v \\<rightarrow> w\n  V' = U - attractor p K\n\ngoal (1 subgoal):\n 1. \\<exists>w\\<in>V'. v \\<rightarrow> w", "by blast"], ["proof (state)\nthis:\n  \\<exists>w\\<in>V'. v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "thus \"\\<not>G'.deadend v\""], ["proof (prove)\nusing this:\n  \\<exists>w\\<in>V'. v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. \\<not> G'.deadend v", "using \\<open>v \\<in> V\\<^bsub>G'\\<^esub>\\<close> \\<open>V' \\<subseteq> V\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>w\\<in>V'. v \\<rightarrow> w\n  v \\<in> V\\<^bsub>G'\\<^esub>\n  V' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. \\<not> G'.deadend v", "by simp"], ["proof (state)\nthis:\n  \\<not> G'.deadend v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend ?v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "text \\<open>\n    By definition of @{term W1}, we obtain a winning strategy on @{term W1} for player @{term \"p**\"}.\n\\<close>"], ["proof (state)\nthis:\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend ?v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "obtain \\<sigma>W1 where \\<sigma>W1:\n    \"strategy p** \\<sigma>W1\" \"\\<And>v. v \\<in> W1 \\<Longrightarrow> winning_strategy p** \\<sigma>W1 v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>W1.\n        \\<lbrakk>strategy p** \\<sigma>W1;\n         \\<And>v.\n            v \\<in> W1 \\<Longrightarrow>\n            winning_strategy p** \\<sigma>W1 v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding W1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>W1.\n        \\<lbrakk>strategy p** \\<sigma>W1;\n         \\<And>v.\n            v \\<in> winning_region p** \\<Longrightarrow>\n            winning_strategy p** \\<sigma>W1 v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using merge_winning_strategies"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>.\n     strategy ?p \\<sigma> \\<and>\n     (\\<forall>v\\<in>winning_region ?p. winning_strategy ?p \\<sigma> v)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>W1.\n        \\<lbrakk>strategy p** \\<sigma>W1;\n         \\<And>v.\n            v \\<in> winning_region p** \\<Longrightarrow>\n            winning_strategy p** \\<sigma>W1 v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  strategy p** \\<sigma>W1\n  ?v \\<in> W1 \\<Longrightarrow> winning_strategy p** \\<sigma>W1 ?v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "{"], ["proof (state)\nthis:\n  strategy p** \\<sigma>W1\n  ?v \\<in> W1 \\<Longrightarrow> winning_strategy p** \\<sigma>W1 ?v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "assume \"v \\<in> V\\<^bsub>G'\\<^esub>\""], ["proof (state)\nthis:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "text \\<open>Apply the induction hypothesis to get the winning strategy for @{term v} in @{term G'}.\\<close>"], ["proof (state)\nthis:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have G'_winning_strategy: \"\\<exists>p. v \\<in> G'.winning_region p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> G'.winning_region p", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> G'.winning_region p", "have \"card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>) < card (\\<omega> ` V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n    < card (\\<omega> ` V)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n    < card (\\<omega> ` V)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n    < card (\\<omega> ` V)", "assume \"min_prio \\<in> \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>\""], ["proof (state)\nthis:\n  min_prio \\<in> \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n    < card (\\<omega> ` V)", "then"], ["proof (chain)\npicking this:\n  min_prio \\<in> \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>", "obtain v where v: \"v \\<in> V\\<^bsub>G'\\<^esub>\" \"\\<omega>\\<^bsub>G'\\<^esub> v = min_prio\""], ["proof (prove)\nusing this:\n  min_prio \\<in> \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> V\\<^bsub>G'\\<^esub>;\n         \\<omega>\\<^bsub>G'\\<^esub> v = min_prio\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n  \\<omega>\\<^bsub>G'\\<^esub> v = min_prio\n\ngoal (1 subgoal):\n 1. card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n    < card (\\<omega> ` V)", "hence \"v \\<in> \\<omega> -` {min_prio}\""], ["proof (prove)\nusing this:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n  \\<omega>\\<^bsub>G'\\<^esub> v = min_prio\n\ngoal (1 subgoal):\n 1. v \\<in> \\<omega> -` {min_prio}", "using \\<open>\\<omega>\\<^bsub>G'\\<^esub> = \\<omega>\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n  \\<omega>\\<^bsub>G'\\<^esub> v = min_prio\n  \\<omega>\\<^bsub>G'\\<^esub> = \\<omega>\n\ngoal (1 subgoal):\n 1. v \\<in> \\<omega> -` {min_prio}", "by simp"], ["proof (state)\nthis:\n  v \\<in> \\<omega> -` {min_prio}\n\ngoal (1 subgoal):\n 1. card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n    < card (\\<omega> ` V)", "hence False"], ["proof (prove)\nusing this:\n  v \\<in> \\<omega> -` {min_prio}\n\ngoal (1 subgoal):\n 1. False", "using V'_def K_def attractor_set_base \\<open>V\\<^bsub>G'\\<^esub> = V'\\<close> v(1)"], ["proof (prove)\nusing this:\n  v \\<in> \\<omega> -` {min_prio}\n  V' = U - attractor p K\n  K = U \\<inter> \\<omega> -` {min_prio}\n  ?W \\<subseteq> attractor ?p ?W\n  V\\<^bsub>G'\\<^esub> = V'\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. False", "by (metis DiffD1 DiffD2 IntI contra_subsetD)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n    < card (\\<omega> ` V)", "}"], ["proof (state)\nthis:\n  min_prio\n  \\<in> \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n    < card (\\<omega> ` V)", "hence \"min_prio \\<notin> \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>\""], ["proof (prove)\nusing this:\n  min_prio\n  \\<in> \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. min_prio \\<notin> \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>", "by blast"], ["proof (state)\nthis:\n  min_prio \\<notin> \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n    < card (\\<omega> ` V)", "moreover"], ["proof (state)\nthis:\n  min_prio \\<notin> \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n    < card (\\<omega> ` V)", "have \"min_prio \\<in> \\<omega> ` V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_prio \\<in> \\<omega> ` V", "unfolding min_prio_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (\\<omega> ` V) \\<in> \\<omega> ` V", "using priorities_finite Min_in assms(1)"], ["proof (prove)\nusing this:\n  finite (\\<omega> ` V)\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Min ?A \\<in> ?A\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. Min (\\<omega> ` V) \\<in> \\<omega> ` V", "by blast"], ["proof (state)\nthis:\n  min_prio \\<in> \\<omega> ` V\n\ngoal (1 subgoal):\n 1. card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n    < card (\\<omega> ` V)", "moreover"], ["proof (state)\nthis:\n  min_prio \\<in> \\<omega> ` V\n\ngoal (1 subgoal):\n 1. card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n    < card (\\<omega> ` V)", "have \"\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub> \\<subseteq> \\<omega> ` V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>\n    \\<subseteq> \\<omega> ` V", "unfolding G'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega>\\<^bsub>subgame V'\\<^esub> ` V\\<^bsub>subgame V'\\<^esub>\n    \\<subseteq> \\<omega> ` V", "by simp"], ["proof (state)\nthis:\n  \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub> \\<subseteq> \\<omega> ` V\n\ngoal (1 subgoal):\n 1. card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n    < card (\\<omega> ` V)", "ultimately"], ["proof (chain)\npicking this:\n  min_prio \\<notin> \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>\n  min_prio \\<in> \\<omega> ` V\n  \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub> \\<subseteq> \\<omega> ` V", "show ?thesis"], ["proof (prove)\nusing this:\n  min_prio \\<notin> \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>\n  min_prio \\<in> \\<omega> ` V\n  \\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub> \\<subseteq> \\<omega> ` V\n\ngoal (1 subgoal):\n 1. card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n    < card (\\<omega> ` V)", "by (metis priorities_finite psubsetI psubset_card_mono)"], ["proof (state)\nthis:\n  card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n  < card (\\<omega> ` V)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n  < card (\\<omega> ` V)\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> G'.winning_region p", "thus ?thesis"], ["proof (prove)\nusing this:\n  card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n  < card (\\<omega> ` V)\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> G'.winning_region p", "using IH[of G'] \\<open>v \\<in> V\\<^bsub>G'\\<^esub>\\<close> G'_no_deadends G'.ParityGame_axioms"], ["proof (prove)\nusing this:\n  card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n  < card (\\<omega> ` V)\n  \\<lbrakk>card (\\<omega>\\<^bsub>G'\\<^esub> ` V\\<^bsub>G'\\<^esub>)\n           < card (\\<omega> ` V);\n   ?v \\<in> V\\<^bsub>G'\\<^esub>; ParityGame G';\n   \\<And>v.\n      v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n      \\<not> G'.deadend v\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p. ?v \\<in> G'.winning_region p\n  v \\<in> V\\<^bsub>G'\\<^esub>\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend ?v\n  ParityGame G'\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> G'.winning_region p", "by blast"], ["proof (state)\nthis:\n  \\<exists>p. v \\<in> G'.winning_region p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>p. v \\<in> G'.winning_region p\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "text \\<open>\n      It turns out the winning region of player @{term \"p**\"} is empty, so we have a strategy\n      for player @{term p}.\n\\<close>"], ["proof (state)\nthis:\n  \\<exists>p. v \\<in> G'.winning_region p\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have \"v \\<in> G'.winning_region p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> G'.winning_region p", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<notin> G'.winning_region p \\<Longrightarrow> False", "assume \"\\<not>?thesis\""], ["proof (state)\nthis:\n  v \\<notin> G'.winning_region p\n\ngoal (1 subgoal):\n 1. v \\<notin> G'.winning_region p \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  v \\<notin> G'.winning_region p\n\ngoal (1 subgoal):\n 1. v \\<notin> G'.winning_region p \\<Longrightarrow> False", "obtain p' \\<sigma> where p': \"G'.strategy p' \\<sigma>\" \"G'.winning_strategy p' \\<sigma> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p' \\<sigma>.\n        \\<lbrakk>G'.strategy p' \\<sigma>;\n         G'.winning_strategy p' \\<sigma> v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using G'_winning_strategy"], ["proof (prove)\nusing this:\n  \\<exists>p. v \\<in> G'.winning_region p\n\ngoal (1 subgoal):\n 1. (\\<And>p' \\<sigma>.\n        \\<lbrakk>G'.strategy p' \\<sigma>;\n         G'.winning_strategy p' \\<sigma> v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding G'.winning_region_def"], ["proof (prove)\nusing this:\n  \\<exists>p.\n     v \\<in> {v \\<in> V\\<^bsub>G'\\<^esub>.\n              \\<exists>\\<sigma>.\n                 G'.strategy p \\<sigma> \\<and>\n                 G'.winning_strategy p \\<sigma> v}\n\ngoal (1 subgoal):\n 1. (\\<And>p' \\<sigma>.\n        \\<lbrakk>G'.strategy p' \\<sigma>;\n         G'.winning_strategy p' \\<sigma> v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  G'.strategy p' \\<sigma>\n  G'.winning_strategy p' \\<sigma> v\n\ngoal (1 subgoal):\n 1. v \\<notin> G'.winning_region p \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  v \\<notin> G'.winning_region p\n  G'.strategy p' \\<sigma>\n  G'.winning_strategy p' \\<sigma> v", "have \"p' \\<noteq> p\""], ["proof (prove)\nusing this:\n  v \\<notin> G'.winning_region p\n  G'.strategy p' \\<sigma>\n  G'.winning_strategy p' \\<sigma> v\n\ngoal (1 subgoal):\n 1. p' \\<noteq> p", "using \\<open>v \\<in> V\\<^bsub>G'\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  v \\<notin> G'.winning_region p\n  G'.strategy p' \\<sigma>\n  G'.winning_strategy p' \\<sigma> v\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. p' \\<noteq> p", "unfolding G'.winning_region_def"], ["proof (prove)\nusing this:\n  v \\<notin> {v \\<in> V\\<^bsub>G'\\<^esub>.\n              \\<exists>\\<sigma>.\n                 G'.strategy p \\<sigma> \\<and>\n                 G'.winning_strategy p \\<sigma> v}\n  G'.strategy p' \\<sigma>\n  G'.winning_strategy p' \\<sigma> v\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. p' \\<noteq> p", "by blast"], ["proof (state)\nthis:\n  p' \\<noteq> p\n\ngoal (1 subgoal):\n 1. v \\<notin> G'.winning_region p \\<Longrightarrow> False", "hence \"p' = p**\""], ["proof (prove)\nusing this:\n  p' \\<noteq> p\n\ngoal (1 subgoal):\n 1. p' = p**", "by (cases p; cases p') auto"], ["proof (state)\nthis:\n  p' = p**\n\ngoal (1 subgoal):\n 1. v \\<notin> G'.winning_region p \\<Longrightarrow> False", "with p'"], ["proof (chain)\npicking this:\n  G'.strategy p' \\<sigma>\n  G'.winning_strategy p' \\<sigma> v\n  p' = p**", "have \\<sigma>: \"G'.strategy p** \\<sigma>\" \"G'.winning_strategy p** \\<sigma> v\""], ["proof (prove)\nusing this:\n  G'.strategy p' \\<sigma>\n  G'.winning_strategy p' \\<sigma> v\n  p' = p**\n\ngoal (1 subgoal):\n 1. G'.strategy p** \\<sigma> &&& G'.winning_strategy p** \\<sigma> v", "by simp_all"], ["proof (state)\nthis:\n  G'.strategy p** \\<sigma>\n  G'.winning_strategy p** \\<sigma> v\n\ngoal (1 subgoal):\n 1. v \\<notin> G'.winning_region p \\<Longrightarrow> False", "have \"v \\<in> winning_region p**\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> winning_region p**", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. v \\<in> V\n 2. strategy p** ?\\<sigma>\n 3. winning_strategy p** ?\\<sigma> v", "show \"v \\<in> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> V", "using \\<open>v \\<in> V\\<^bsub>G'\\<^esub>\\<close> \\<open>V\\<^bsub>G'\\<^esub> \\<subseteq> V\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n  V\\<^bsub>G'\\<^esub> \\<subseteq> V\n\ngoal (1 subgoal):\n 1. v \\<in> V", "by blast"], ["proof (state)\nthis:\n  v \\<in> V\n\ngoal (2 subgoals):\n 1. strategy p** ?\\<sigma>\n 2. winning_strategy p** ?\\<sigma> v", "define \\<sigma>' where \"\\<sigma>' = override_on (override_on \\<sigma>_arbitrary \\<sigma>W1 W1) \\<sigma> V'\""], ["proof (state)\nthis:\n  \\<sigma>' =\n  override_on (override_on \\<sigma>_arbitrary \\<sigma>W1 W1) \\<sigma> V'\n\ngoal (2 subgoals):\n 1. strategy p** ?\\<sigma>\n 2. winning_strategy p** ?\\<sigma> v", "thus \"strategy p** \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' =\n  override_on (override_on \\<sigma>_arbitrary \\<sigma>W1 W1) \\<sigma> V'\n\ngoal (1 subgoal):\n 1. strategy p** \\<sigma>'", "using valid_strategy_updates_set_strong valid_arbitrary_strategy \\<sigma>W1(1)\n                valid_strategy_supergame \\<sigma>(1) G'_no_deadends \\<open>V\\<^bsub>G'\\<^esub> = V'\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma>' =\n  override_on (override_on \\<sigma>_arbitrary \\<sigma>W1 W1) \\<sigma> V'\n  \\<lbrakk>strategy ?p ?\\<sigma>; strategy ?p ?\\<sigma>'\\<rbrakk>\n  \\<Longrightarrow> strategy ?p (override_on ?\\<sigma> ?\\<sigma>' ?A)\n  strategy ?p \\<sigma>_arbitrary\n  strategy p** \\<sigma>W1\n  \\<lbrakk>strategy ?p ?\\<sigma>;\n   ParityGame.strategy (subgame ?V') ?p ?\\<sigma>';\n   \\<And>v.\n      v \\<in> ?V' \\<Longrightarrow>\n      \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame ?V'\\<^esub>.\n                        v \\<rightarrow>\\<^bsub>subgame ?V'\\<^esub>\n                        w)\\<rbrakk>\n  \\<Longrightarrow> strategy ?p (override_on ?\\<sigma> ?\\<sigma>' ?V')\n  G'.strategy p** \\<sigma>\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend ?v\n  V\\<^bsub>G'\\<^esub> = V'\n\ngoal (1 subgoal):\n 1. strategy p** \\<sigma>'", "unfolding G'_def"], ["proof (prove)\nusing this:\n  \\<sigma>' =\n  override_on (override_on \\<sigma>_arbitrary \\<sigma>W1 W1) \\<sigma> V'\n  \\<lbrakk>strategy ?p ?\\<sigma>; strategy ?p ?\\<sigma>'\\<rbrakk>\n  \\<Longrightarrow> strategy ?p (override_on ?\\<sigma> ?\\<sigma>' ?A)\n  strategy ?p \\<sigma>_arbitrary\n  strategy p** \\<sigma>W1\n  \\<lbrakk>strategy ?p ?\\<sigma>;\n   ParityGame.strategy (subgame ?V') ?p ?\\<sigma>';\n   \\<And>v.\n      v \\<in> ?V' \\<Longrightarrow>\n      \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame ?V'\\<^esub>.\n                        v \\<rightarrow>\\<^bsub>subgame ?V'\\<^esub>\n                        w)\\<rbrakk>\n  \\<Longrightarrow> strategy ?p (override_on ?\\<sigma> ?\\<sigma>' ?V')\n  ParityGame.strategy (subgame V') p** \\<sigma>\n  ?v \\<in> V\\<^bsub>subgame V'\\<^esub> \\<Longrightarrow>\n  \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                    ?v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)\n  V\\<^bsub>subgame V'\\<^esub> = V'\n\ngoal (1 subgoal):\n 1. strategy p** \\<sigma>'", "by blast"], ["proof (state)\nthis:\n  strategy p** \\<sigma>'\n\ngoal (1 subgoal):\n 1. winning_strategy p**\n     (override_on (override_on \\<sigma>_arbitrary \\<sigma>W1 W1) \\<sigma>\n       V')\n     v", "show \"winning_strategy p** \\<sigma>' v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_strategy p** \\<sigma>' v", "proof (rule winning_strategyI, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"vmc_path G P v p** \\<sigma>'\""], ["proof (state)\nthis:\n  vmc_path G P v p** \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  vmc_path G P v p** \\<sigma>'", "interpret vmc_path G P v \"p**\" \\<sigma>'"], ["proof (prove)\nusing this:\n  vmc_path G P v p** \\<sigma>'\n\ngoal (1 subgoal):\n 1. vmc_path G P v p** \\<sigma>'", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"\\<not>winning_path p** P\""], ["proof (state)\nthis:\n  \\<not> winning_path p** P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "text \\<open>\n            First we show that @{term P} stays in @{term V'}, because if it stays in @{term V'},\n            then it conforms to @{term \\<sigma>}, so it must be winning for @{term \"p**\"}.\\<close>"], ["proof (state)\nthis:\n  \\<not> winning_path p** P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "have \"lset P \\<subseteq> V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset P \\<subseteq> V'", "proof (induct rule: vmc_path_lset_induction_closed_subset)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' v \\<in> V' \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p****;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> ?T\n 3. v \\<in> V'\n 4. lset P \\<inter> ?T = {}", "fix v"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' v \\<in> V' \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p****;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> ?T\n 3. va__ \\<in> V'\n 4. lset P \\<inter> ?T = {}", "assume \"v \\<in> V'\" \"\\<not>deadend v\" \"v \\<in> VV p**\""], ["proof (state)\nthis:\n  v \\<in> V'\n  \\<not> deadend v\n  v \\<in> VV p**\n\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' v \\<in> V' \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p****;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> ?T\n 3. va__ \\<in> V'\n 4. lset P \\<inter> ?T = {}", "hence \"v \\<in> ParityGame.VV (subgame V') p**\""], ["proof (prove)\nusing this:\n  v \\<in> V'\n  \\<not> deadend v\n  v \\<in> VV p**\n\ngoal (1 subgoal):\n 1. v \\<in> (if p** = Even then V0\\<^bsub>subgame V'\\<^esub>\n             else V\\<^bsub>subgame V'\\<^esub> -\n                  V0\\<^bsub>subgame V'\\<^esub>)", "by auto"], ["proof (state)\nthis:\n  v \\<in> (if p** = Even then V0\\<^bsub>subgame V'\\<^esub>\n           else V\\<^bsub>subgame V'\\<^esub> - V0\\<^bsub>subgame V'\\<^esub>)\n\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' v \\<in> V' \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p****;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> ?T\n 3. va__ \\<in> V'\n 4. lset P \\<inter> ?T = {}", "moreover"], ["proof (state)\nthis:\n  v \\<in> (if p** = Even then V0\\<^bsub>subgame V'\\<^esub>\n           else V\\<^bsub>subgame V'\\<^esub> - V0\\<^bsub>subgame V'\\<^esub>)\n\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' v \\<in> V' \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p****;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> ?T\n 3. va__ \\<in> V'\n 4. lset P \\<inter> ?T = {}", "have \"\\<not>G'.deadend v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> G'.deadend v", "using G'_no_deadends \\<open>V\\<^bsub>G'\\<^esub> = V'\\<close> \\<open>v \\<in> V'\\<close>"], ["proof (prove)\nusing this:\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend ?v\n  V\\<^bsub>G'\\<^esub> = V'\n  v \\<in> V'\n\ngoal (1 subgoal):\n 1. \\<not> G'.deadend v", "by blast"], ["proof (state)\nthis:\n  \\<not> G'.deadend v\n\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' v \\<in> V' \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p****;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> ?T\n 3. va__ \\<in> V'\n 4. lset P \\<inter> ?T = {}", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> (if p** = Even then V0\\<^bsub>subgame V'\\<^esub>\n           else V\\<^bsub>subgame V'\\<^esub> - V0\\<^bsub>subgame V'\\<^esub>)\n  \\<not> G'.deadend v", "have \"\\<sigma> v \\<in> V'\""], ["proof (prove)\nusing this:\n  v \\<in> (if p** = Even then V0\\<^bsub>subgame V'\\<^esub>\n           else V\\<^bsub>subgame V'\\<^esub> - V0\\<^bsub>subgame V'\\<^esub>)\n  \\<not> G'.deadend v\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> V'", "using subgame_strategy_stays_in_subgame p'(1) \\<open>p' = p**\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> (if p** = Even then V0\\<^bsub>subgame V'\\<^esub>\n           else V\\<^bsub>subgame V'\\<^esub> - V0\\<^bsub>subgame V'\\<^esub>)\n  \\<not> G'.deadend v\n  \\<lbrakk>ParityGame.strategy (subgame ?V') ?p ?\\<sigma>;\n   ?v \\<in> (if ?p = Even then V0\\<^bsub>subgame ?V'\\<^esub>\n             else V\\<^bsub>subgame ?V'\\<^esub> -\n                  V0\\<^bsub>subgame ?V'\\<^esub>);\n   \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame ?V'\\<^esub>.\n                     ?v \\<rightarrow>\\<^bsub>subgame ?V'\\<^esub> w)\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma> ?v \\<in> ?V'\n  G'.strategy p' \\<sigma>\n  p' = p**\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> V'", "unfolding G'_def"], ["proof (prove)\nusing this:\n  v \\<in> (if p** = Even then V0\\<^bsub>subgame V'\\<^esub>\n           else V\\<^bsub>subgame V'\\<^esub> - V0\\<^bsub>subgame V'\\<^esub>)\n  \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                    v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)\n  \\<lbrakk>ParityGame.strategy (subgame ?V') ?p ?\\<sigma>;\n   ?v \\<in> (if ?p = Even then V0\\<^bsub>subgame ?V'\\<^esub>\n             else V\\<^bsub>subgame ?V'\\<^esub> -\n                  V0\\<^bsub>subgame ?V'\\<^esub>);\n   \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame ?V'\\<^esub>.\n                     ?v \\<rightarrow>\\<^bsub>subgame ?V'\\<^esub> w)\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma> ?v \\<in> ?V'\n  ParityGame.strategy (subgame V') p' \\<sigma>\n  p' = p**\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> V'", "by blast"], ["proof (state)\nthis:\n  \\<sigma> v \\<in> V'\n\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' v \\<in> V' \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p****;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> ?T\n 3. va__ \\<in> V'\n 4. lset P \\<inter> ?T = {}", "thus \"\\<sigma>' v \\<in> V' \\<union> W1\""], ["proof (prove)\nusing this:\n  \\<sigma> v \\<in> V'\n\ngoal (1 subgoal):\n 1. \\<sigma>' v \\<in> V' \\<union> W1", "unfolding \\<sigma>'_def"], ["proof (prove)\nusing this:\n  \\<sigma> v \\<in> V'\n\ngoal (1 subgoal):\n 1. override_on (override_on \\<sigma>_arbitrary \\<sigma>W1 W1) \\<sigma> V' v\n    \\<in> V' \\<union> W1", "using \\<open>v \\<in> V'\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> v \\<in> V'\n  v \\<in> V'\n\ngoal (1 subgoal):\n 1. override_on (override_on \\<sigma>_arbitrary \\<sigma>W1 W1) \\<sigma> V' v\n    \\<in> V' \\<union> W1", "by simp"], ["proof (state)\nthis:\n  \\<sigma>' v \\<in> V' \\<union> W1\n\ngoal (3 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p****;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> W1\n 2. va__ \\<in> V'\n 3. lset P \\<inter> W1 = {}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p****;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> W1\n 2. v \\<in> V'\n 3. lset P \\<inter> W1 = {}", "fix v w"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p****;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> W1\n 2. va__ \\<in> V'\n 3. lset P \\<inter> W1 = {}", "assume \"v \\<in> V'\" \"\\<not>deadend v\" \"v \\<in> VV p****\" \"v\\<rightarrow>w\""], ["proof (state)\nthis:\n  v \\<in> V'\n  \\<not> deadend v\n  v \\<in> VV p****\n  v \\<rightarrow> w\n\ngoal (3 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p****;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> W1\n 2. va__ \\<in> V'\n 3. lset P \\<inter> W1 = {}", "show \"w \\<in> V' \\<union> W1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<in> V' \\<union> W1", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<notin> V' \\<union> W1 \\<Longrightarrow> False", "assume \"w \\<notin> V' \\<union> W1\""], ["proof (state)\nthis:\n  w \\<notin> V' \\<union> W1\n\ngoal (1 subgoal):\n 1. w \\<notin> V' \\<union> W1 \\<Longrightarrow> False", "hence \"w \\<in> attractor p K\""], ["proof (prove)\nusing this:\n  w \\<notin> V' \\<union> W1\n\ngoal (1 subgoal):\n 1. w \\<in> attractor p K", "using V_decomp \\<open>v\\<rightarrow>w\\<close>"], ["proof (prove)\nusing this:\n  w \\<notin> V' \\<union> W1\n  V = attractor p K \\<union> V' \\<union> W1\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. w \\<in> attractor p K", "by blast"], ["proof (state)\nthis:\n  w \\<in> attractor p K\n\ngoal (1 subgoal):\n 1. w \\<notin> V' \\<union> W1 \\<Longrightarrow> False", "hence \"v \\<in> attractor p K\""], ["proof (prove)\nusing this:\n  w \\<in> attractor p K\n\ngoal (1 subgoal):\n 1. v \\<in> attractor p K", "using \\<open>v \\<in> VV p****\\<close> attractor_set_VVp \\<open>v\\<rightarrow>w\\<close>"], ["proof (prove)\nusing this:\n  w \\<in> attractor p K\n  v \\<in> VV p****\n  \\<lbrakk>?v \\<in> VV ?p; ?v \\<rightarrow> ?w;\n   ?w \\<in> attractor ?p ?W\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> attractor ?p ?W\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. v \\<in> attractor p K", "by auto"], ["proof (state)\nthis:\n  v \\<in> attractor p K\n\ngoal (1 subgoal):\n 1. w \\<notin> V' \\<union> W1 \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  v \\<in> attractor p K\n\ngoal (1 subgoal):\n 1. False", "using \\<open>v \\<in> V'\\<close> V'_def"], ["proof (prove)\nusing this:\n  v \\<in> attractor p K\n  v \\<in> V'\n  V' = U - attractor p K\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w \\<in> V' \\<union> W1\n\ngoal (2 subgoals):\n 1. va__ \\<in> V'\n 2. lset P \\<inter> W1 = {}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> V'\n 2. lset P \\<inter> W1 = {}", "have \"\\<And>v. v \\<in> W1 \\<Longrightarrow> \\<sigma>W1 v = \\<sigma>' v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> W1 \\<Longrightarrow> \\<sigma>W1 v = \\<sigma>' v", "unfolding \\<sigma>'_def V'_def U_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> W1 \\<Longrightarrow>\n       \\<sigma>W1 v =\n       override_on (override_on \\<sigma>_arbitrary \\<sigma>W1 W1) \\<sigma>\n        (V - W1 - attractor p K) v", "by simp"], ["proof (state)\nthis:\n  ?v \\<in> W1 \\<Longrightarrow> \\<sigma>W1 ?v = \\<sigma>' ?v\n\ngoal (2 subgoals):\n 1. v \\<in> V'\n 2. lset P \\<inter> W1 = {}", "thus \"lset P \\<inter> W1 = {}\""], ["proof (prove)\nusing this:\n  ?v \\<in> W1 \\<Longrightarrow> \\<sigma>W1 ?v = \\<sigma>' ?v\n\ngoal (1 subgoal):\n 1. lset P \\<inter> W1 = {}", "using path_hits_winning_region_is_winning \\<sigma>W1 \\<open>\\<not>winning_path p** P\\<close>"], ["proof (prove)\nusing this:\n  ?v \\<in> W1 \\<Longrightarrow> \\<sigma>W1 ?v = \\<sigma>' ?v\n  \\<lbrakk>strategy p** ?\\<sigma>';\n   \\<And>v.\n      v \\<in> winning_region p** \\<Longrightarrow>\n      winning_strategy p** ?\\<sigma>' v;\n   \\<And>v.\n      v \\<in> winning_region p** \\<Longrightarrow>\n      ?\\<sigma>' v = \\<sigma>' v;\n   lset P \\<inter> winning_region p** \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> winning_path p** P\n  strategy p** \\<sigma>W1\n  ?v \\<in> W1 \\<Longrightarrow> winning_strategy p** \\<sigma>W1 ?v\n  \\<not> winning_path p** P\n\ngoal (1 subgoal):\n 1. lset P \\<inter> W1 = {}", "unfolding W1_def"], ["proof (prove)\nusing this:\n  ?v \\<in> winning_region p** \\<Longrightarrow> \\<sigma>W1 ?v = \\<sigma>' ?v\n  \\<lbrakk>strategy p** ?\\<sigma>';\n   \\<And>v.\n      v \\<in> winning_region p** \\<Longrightarrow>\n      winning_strategy p** ?\\<sigma>' v;\n   \\<And>v.\n      v \\<in> winning_region p** \\<Longrightarrow>\n      ?\\<sigma>' v = \\<sigma>' v;\n   lset P \\<inter> winning_region p** \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> winning_path p** P\n  strategy p** \\<sigma>W1\n  ?v \\<in> winning_region p** \\<Longrightarrow>\n  winning_strategy p** \\<sigma>W1 ?v\n  \\<not> winning_path p** P\n\ngoal (1 subgoal):\n 1. lset P \\<inter> winning_region p** = {}", "by blast"], ["proof (state)\nthis:\n  lset P \\<inter> W1 = {}\n\ngoal (1 subgoal):\n 1. v \\<in> V'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> V'", "show \"v \\<in> V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> V'", "using \\<open>V\\<^bsub>G'\\<^esub> = V'\\<close> \\<open>v \\<in> V\\<^bsub>G'\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  V\\<^bsub>G'\\<^esub> = V'\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. v \\<in> V'", "by blast"], ["proof (state)\nthis:\n  v \\<in> V'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lset P \\<subseteq> V'\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "text \\<open>This concludes the proof of @{term \"lset P \\<subseteq> V'\"}.\\<close>"], ["proof (state)\nthis:\n  lset P \\<subseteq> V'\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"G'.valid_path P\""], ["proof (prove)\nusing this:\n  lset P \\<subseteq> V'\n\ngoal (1 subgoal):\n 1. G'.valid_path P", "using subgame_valid_path"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> V'\n  \\<lbrakk>valid_path ?P; lset ?P \\<subseteq> ?V'\\<rbrakk>\n  \\<Longrightarrow> Digraph.valid_path (subgame ?V') ?P\n\ngoal (1 subgoal):\n 1. G'.valid_path P", "by simp"], ["proof (state)\nthis:\n  G'.valid_path P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  G'.valid_path P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "have \"G'.maximal_path P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.maximal_path P", "using \\<open>lset P \\<subseteq> V'\\<close> subgame_maximal_path \\<open>V' \\<subseteq> V\\<close>"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> V'\n  \\<lbrakk>?V' \\<subseteq> V; maximal_path ?P;\n   lset ?P \\<subseteq> ?V'\\<rbrakk>\n  \\<Longrightarrow> Digraph.maximal_path (subgame ?V') ?P\n  V' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. G'.maximal_path P", "by simp"], ["proof (state)\nthis:\n  G'.maximal_path P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  G'.maximal_path P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "have \"G'.path_conforms_with_strategy p** P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p** P \\<sigma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p** P \\<sigma>", "have \"G'.path_conforms_with_strategy p** P \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p** P \\<sigma>'", "using subgame_path_conforms_with_strategy \\<open>V' \\<subseteq> V\\<close> \\<open>lset P \\<subseteq> V'\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?V' \\<subseteq> V; path_conforms_with_strategy ?p ?P ?\\<sigma>;\n   lset ?P \\<subseteq> ?V'\\<rbrakk>\n  \\<Longrightarrow> ParityGame.path_conforms_with_strategy (subgame ?V') ?p\n                     ?P ?\\<sigma>\n  V' \\<subseteq> V\n  lset P \\<subseteq> V'\n\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p** P \\<sigma>'", "by simp"], ["proof (state)\nthis:\n  G'.path_conforms_with_strategy p** P \\<sigma>'\n\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p** P \\<sigma>", "moreover"], ["proof (state)\nthis:\n  G'.path_conforms_with_strategy p** P \\<sigma>'\n\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p** P \\<sigma>", "have \"\\<And>v. v \\<in> lset P \\<Longrightarrow> \\<sigma>' v = \\<sigma> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> lset P \\<Longrightarrow> \\<sigma>' v = \\<sigma> v", "using \\<open>lset P \\<subseteq> V'\\<close> \\<sigma>'_def"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> V'\n  \\<sigma>' =\n  override_on (override_on \\<sigma>_arbitrary \\<sigma>W1 W1) \\<sigma> V'\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> lset P \\<Longrightarrow> \\<sigma>' v = \\<sigma> v", "by auto"], ["proof (state)\nthis:\n  ?v \\<in> lset P \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v\n\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p** P \\<sigma>", "ultimately"], ["proof (chain)\npicking this:\n  G'.path_conforms_with_strategy p** P \\<sigma>'\n  ?v \\<in> lset P \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v", "show ?thesis"], ["proof (prove)\nusing this:\n  G'.path_conforms_with_strategy p** P \\<sigma>'\n  ?v \\<in> lset P \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v\n\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p** P \\<sigma>", "using G'.path_conforms_with_strategy_irrelevant_updates"], ["proof (prove)\nusing this:\n  G'.path_conforms_with_strategy p** P \\<sigma>'\n  ?v \\<in> lset P \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v\n  \\<lbrakk>G'.path_conforms_with_strategy ?p ?P ?\\<sigma>;\n   \\<And>v.\n      v \\<in> lset ?P \\<Longrightarrow> ?\\<sigma> v = ?\\<sigma>' v\\<rbrakk>\n  \\<Longrightarrow> G'.path_conforms_with_strategy ?p ?P ?\\<sigma>'\n\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p** P \\<sigma>", "by blast"], ["proof (state)\nthis:\n  G'.path_conforms_with_strategy p** P \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G'.path_conforms_with_strategy p** P \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  G'.valid_path P\n  G'.maximal_path P\n  G'.path_conforms_with_strategy p** P \\<sigma>", "have \"G'.winning_path p** P\""], ["proof (prove)\nusing this:\n  G'.valid_path P\n  G'.maximal_path P\n  G'.path_conforms_with_strategy p** P \\<sigma>\n\ngoal (1 subgoal):\n 1. G'.winning_path p** P", "using \\<sigma>(2) G'.winning_strategy_def G'.valid_maximal_conforming_path_0 P_0 P_not_null"], ["proof (prove)\nusing this:\n  G'.valid_path P\n  G'.maximal_path P\n  G'.path_conforms_with_strategy p** P \\<sigma>\n  G'.winning_strategy p** \\<sigma> v\n  G'.winning_strategy ?p ?\\<sigma> ?v0.0 \\<equiv>\n  \\<forall>P.\n     vmc_path G' P ?v0.0 ?p ?\\<sigma> \\<longrightarrow> G'.winning_path ?p P\n  \\<lbrakk>\\<not> lnull ?P; G'.valid_path ?P; G'.maximal_path ?P;\n   G'.path_conforms_with_strategy ?p ?P ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> vmc_path G' ?P (?P $ 0) ?p ?\\<sigma>\n  P $ 0 = v\n  \\<not> lnull P\n\ngoal (1 subgoal):\n 1. G'.winning_path p** P", "by blast"], ["proof (state)\nthis:\n  G'.winning_path p** P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  G'.winning_path p** P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "have \"G'.VV p**** \\<subseteq> VV p****\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.VV p**** \\<subseteq> VV p****", "using subgame_VV_subset G'_def"], ["proof (prove)\nusing this:\n  (if ?p = Even then V0\\<^bsub>subgame ?V'\\<^esub>\n   else V\\<^bsub>subgame ?V'\\<^esub> - V0\\<^bsub>subgame ?V'\\<^esub>)\n  \\<subseteq> VV ?p\n  G' = subgame V'\n\ngoal (1 subgoal):\n 1. G'.VV p**** \\<subseteq> VV p****", "by blast"], ["proof (state)\nthis:\n  G'.VV p**** \\<subseteq> VV p****\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v p** \\<sigma>';\n        \\<not> winning_path p** P\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  G'.winning_path p** P\n  G'.VV p**** \\<subseteq> VV p****", "show False"], ["proof (prove)\nusing this:\n  G'.winning_path p** P\n  G'.VV p**** \\<subseteq> VV p****\n\ngoal (1 subgoal):\n 1. False", "using G'.winning_path_supergame[of \"p**\"] \\<open>\\<omega>\\<^bsub>G'\\<^esub> = \\<omega>\\<close>\n                  \\<open>\\<not>winning_path p** P\\<close> ParityGame_axioms"], ["proof (prove)\nusing this:\n  G'.winning_path p** P\n  G'.VV p**** \\<subseteq> VV p****\n  \\<lbrakk>G'.winning_path p** ?P; ParityGame ?G';\n   G'.VV p****\n   \\<subseteq> (if p**** = Even then V0\\<^bsub>?G'\\<^esub>\n                else V\\<^bsub>?G'\\<^esub> - V0\\<^bsub>?G'\\<^esub>);\n   \\<omega>\\<^bsub>G'\\<^esub> = \\<omega>\\<^bsub>?G'\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ParityGame.winning_path ?G' p** ?P\n  \\<omega>\\<^bsub>G'\\<^esub> = \\<omega>\n  \\<not> winning_path p** P\n  ParityGame G\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  winning_strategy p** \\<sigma>' v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<in> winning_region p**\n\ngoal (1 subgoal):\n 1. v \\<notin> G'.winning_region p \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  v \\<in> winning_region p**\n\ngoal (1 subgoal):\n 1. v \\<notin> G'.winning_region p \\<Longrightarrow> False", "have \"v \\<in> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> V", "using \\<open>V\\<^bsub>G'\\<^esub> \\<subseteq> V\\<close> \\<open>v \\<in> V\\<^bsub>G'\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  V\\<^bsub>G'\\<^esub> \\<subseteq> V\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. v \\<in> V", "by blast"], ["proof (state)\nthis:\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. v \\<notin> G'.winning_region p \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> winning_region p**\n  v \\<in> V", "have \"v \\<in> W1\""], ["proof (prove)\nusing this:\n  v \\<in> winning_region p**\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. v \\<in> W1", "unfolding W1_def winning_region_def"], ["proof (prove)\nusing this:\n  v \\<in> {v \\<in> V.\n           \\<exists>\\<sigma>.\n              strategy p** \\<sigma> \\<and> winning_strategy p** \\<sigma> v}\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> V.\n             \\<exists>\\<sigma>.\n                strategy p** \\<sigma> \\<and>\n                winning_strategy p** \\<sigma> v}", "by blast"], ["proof (state)\nthis:\n  v \\<in> W1\n\ngoal (1 subgoal):\n 1. v \\<notin> G'.winning_region p \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  v \\<in> W1\n\ngoal (1 subgoal):\n 1. False", "using \\<open>v \\<in> V\\<^bsub>G'\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> W1\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. False", "using U_def V'_def \\<open>V\\<^bsub>G'\\<^esub> = V'\\<close> \\<open>v \\<in> V\\<^bsub>G'\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> W1\n  v \\<in> V\\<^bsub>G'\\<^esub>\n  U = V - W1\n  V' = U - attractor p K\n  V\\<^bsub>G'\\<^esub> = V'\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<in> G'.winning_region p\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "}"], ["proof (state)\nthis:\n  ?va2 \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n  ?va2 \\<in> G'.winning_region p\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "note recursion = this"], ["proof (state)\nthis:\n  ?va2 \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n  ?va2 \\<in> G'.winning_region p\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "text \\<open>\n    We compose a winning strategy for player @{term p} on @{term \"V - W1\"} out of three pieces.\n\\<close>"], ["proof (state)\nthis:\n  ?va2 \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n  ?va2 \\<in> G'.winning_region p\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "text \\<open>\n    First, if we happen to land in the attractor region of @{term K}, we follow the attractor\n    strategy.  This is good because the priority of the nodes in @{term K} is good for\n    player @{term p}, so he likes to go there.\\<close>"], ["proof (state)\nthis:\n  ?va2 \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n  ?va2 \\<in> G'.winning_region p\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "obtain \\<sigma>1\n    where \\<sigma>1: \"strategy p \\<sigma>1\"\n              \"strategy_attracts p \\<sigma>1 (attractor p K) K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1.\n        \\<lbrakk>strategy p \\<sigma>1;\n         strategy_attracts p \\<sigma>1 (attractor p K) K\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using attractor_has_strategy[of K p] K_def U_def"], ["proof (prove)\nusing this:\n  K \\<subseteq> V \\<Longrightarrow>\n  \\<exists>\\<sigma>.\n     strategy p \\<sigma> \\<and>\n     strategy_attracts p \\<sigma> (attractor p K) K\n  K = U \\<inter> \\<omega> -` {min_prio}\n  U = V - W1\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1.\n        \\<lbrakk>strategy p \\<sigma>1;\n         strategy_attracts p \\<sigma>1 (attractor p K) K\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  strategy p \\<sigma>1\n  strategy_attracts p \\<sigma>1 (attractor p K) K\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "text \\<open>Next, on @{term G'} we follow the winning strategy whose existence we proved earlier.\\<close>"], ["proof (state)\nthis:\n  strategy p \\<sigma>1\n  strategy_attracts p \\<sigma>1 (attractor p K) K\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have \"G'.winning_region p = V\\<^bsub>G'\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.winning_region p = V\\<^bsub>G'\\<^esub>", "using recursion"], ["proof (prove)\nusing this:\n  ?va2 \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n  ?va2 \\<in> G'.winning_region p\n\ngoal (1 subgoal):\n 1. G'.winning_region p = V\\<^bsub>G'\\<^esub>", "unfolding G'.winning_region_def"], ["proof (prove)\nusing this:\n  ?va2 \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n  ?va2\n  \\<in> {v \\<in> V\\<^bsub>G'\\<^esub>.\n         \\<exists>\\<sigma>.\n            G'.strategy p \\<sigma> \\<and> G'.winning_strategy p \\<sigma> v}\n\ngoal (1 subgoal):\n 1. {v \\<in> V\\<^bsub>G'\\<^esub>.\n     \\<exists>\\<sigma>.\n        G'.strategy p \\<sigma> \\<and> G'.winning_strategy p \\<sigma> v} =\n    V\\<^bsub>G'\\<^esub>", "by blast"], ["proof (state)\nthis:\n  G'.winning_region p = V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "then"], ["proof (chain)\npicking this:\n  G'.winning_region p = V\\<^bsub>G'\\<^esub>", "obtain \\<sigma>2\n    where \\<sigma>2: \"\\<And>v. v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> G'.strategy p \\<sigma>2\"\n              \"\\<And>v. v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> G'.winning_strategy p \\<sigma>2 v\""], ["proof (prove)\nusing this:\n  G'.winning_region p = V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>2.\n        \\<lbrakk>\\<And>v.\n                    v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n                    G'.strategy p \\<sigma>2;\n         \\<And>v.\n            v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n            G'.winning_strategy p \\<sigma>2 v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using G'.merge_winning_strategies"], ["proof (prove)\nusing this:\n  G'.winning_region p = V\\<^bsub>G'\\<^esub>\n  \\<exists>\\<sigma>.\n     G'.strategy ?p \\<sigma> \\<and>\n     (\\<forall>v\\<in>G'.winning_region ?p.\n         G'.winning_strategy ?p \\<sigma> v)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>2.\n        \\<lbrakk>\\<And>v.\n                    v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n                    G'.strategy p \\<sigma>2;\n         \\<And>v.\n            v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n            G'.winning_strategy p \\<sigma>2 v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> G'.strategy p \\<sigma>2\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n  G'.winning_strategy p \\<sigma>2 ?v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "text \\<open>\n    As a last option we choose an arbitrary successor but avoid entering @{term W1}.\n    In particular, this defines the strategy on the set @{term K}.\\<close>"], ["proof (state)\nthis:\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> G'.strategy p \\<sigma>2\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n  G'.winning_strategy p \\<sigma>2 ?v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "define succ where \"succ v = (SOME w. v\\<rightarrow>w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1))\" for v"], ["proof (state)\nthis:\n  succ ?v =\n  (SOME w. ?v \\<rightarrow> w \\<and> (?v \\<in> W1 \\<or> w \\<notin> W1))\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "text \\<open>Compose the three pieces.\\<close>"], ["proof (state)\nthis:\n  succ ?v =\n  (SOME w. ?v \\<rightarrow> w \\<and> (?v \\<in> W1 \\<or> w \\<notin> W1))\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "define \\<sigma> where \"\\<sigma> = override_on (override_on succ \\<sigma>2 V') \\<sigma>1 (attractor p K - K)\""], ["proof (state)\nthis:\n  \\<sigma> =\n  override_on (override_on succ \\<sigma>2 V') \\<sigma>1 (attractor p K - K)\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have \"attractor p K \\<inter> W1 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. attractor p K \\<inter> W1 = {}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. attractor p K \\<inter> W1 \\<noteq> {} \\<Longrightarrow> False", "assume \"attractor p K \\<inter> W1 \\<noteq> {}\""], ["proof (state)\nthis:\n  attractor p K \\<inter> W1 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. attractor p K \\<inter> W1 \\<noteq> {} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  attractor p K \\<inter> W1 \\<noteq> {}", "obtain v where v: \"v \\<in> attractor p K\" \"v \\<in> W1\""], ["proof (prove)\nusing this:\n  attractor p K \\<inter> W1 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> attractor p K; v \\<in> W1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v \\<in> attractor p K\n  v \\<in> W1\n\ngoal (1 subgoal):\n 1. attractor p K \\<inter> W1 \\<noteq> {} \\<Longrightarrow> False", "hence \"v \\<in> V\""], ["proof (prove)\nusing this:\n  v \\<in> attractor p K\n  v \\<in> W1\n\ngoal (1 subgoal):\n 1. v \\<in> V", "using W1_def winning_region_def"], ["proof (prove)\nusing this:\n  v \\<in> attractor p K\n  v \\<in> W1\n  W1 = winning_region p**\n  winning_region ?p \\<equiv>\n  {v \\<in> V.\n   \\<exists>\\<sigma>.\n      strategy ?p \\<sigma> \\<and> winning_strategy ?p \\<sigma> v}\n\ngoal (1 subgoal):\n 1. v \\<in> V", "by blast"], ["proof (state)\nthis:\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. attractor p K \\<inter> W1 \\<noteq> {} \\<Longrightarrow> False", "obtain P where \"vmc2_path G P v p \\<sigma>1 \\<sigma>W1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P.\n        vmc2_path G P v p \\<sigma>1 \\<sigma>W1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using strategy_conforming_path_exists \\<sigma>W1(1) \\<sigma>1(1) \\<open>v \\<in> V\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v0.0 \\<in> V; strategy ?p ?\\<sigma>; strategy ?p** ?\\<sigma>';\n   \\<And>P.\n      vmc2_path G P ?v0.0 ?p ?\\<sigma> ?\\<sigma>' \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  strategy p** \\<sigma>W1\n  strategy p \\<sigma>1\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        vmc2_path G P v p \\<sigma>1 \\<sigma>W1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  vmc2_path G P v p \\<sigma>1 \\<sigma>W1\n\ngoal (1 subgoal):\n 1. attractor p K \\<inter> W1 \\<noteq> {} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  vmc2_path G P v p \\<sigma>1 \\<sigma>W1", "interpret vmc2_path G P v p \\<sigma>1 \\<sigma>W1"], ["proof (prove)\nusing this:\n  vmc2_path G P v p \\<sigma>1 \\<sigma>W1\n\ngoal (1 subgoal):\n 1. vmc2_path G P v p \\<sigma>1 \\<sigma>W1", "."], ["proof (state)\ngoal (1 subgoal):\n 1. attractor p K \\<inter> W1 \\<noteq> {} \\<Longrightarrow> False", "have \"strategy_attracts_via p \\<sigma>1 v (attractor p K) K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma>1 v (attractor p K) K", "using v(1) \\<sigma>1(2) strategy_attracts_def"], ["proof (prove)\nusing this:\n  v \\<in> attractor p K\n  strategy_attracts p \\<sigma>1 (attractor p K) K\n  strategy_attracts ?p ?\\<sigma> ?A ?W \\<equiv>\n  \\<forall>v0\\<in>?A. strategy_attracts_via ?p ?\\<sigma> v0 ?A ?W\n\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma>1 v (attractor p K) K", "by blast"], ["proof (state)\nthis:\n  strategy_attracts_via p \\<sigma>1 v (attractor p K) K\n\ngoal (1 subgoal):\n 1. attractor p K \\<inter> W1 \\<noteq> {} \\<Longrightarrow> False", "hence \"lset P \\<inter> K \\<noteq> {}\""], ["proof (prove)\nusing this:\n  strategy_attracts_via p \\<sigma>1 v (attractor p K) K\n\ngoal (1 subgoal):\n 1. lset P \\<inter> K \\<noteq> {}", "using strategy_attracts_viaE visits_via_visits"], ["proof (prove)\nusing this:\n  strategy_attracts_via p \\<sigma>1 v (attractor p K) K\n  strategy_attracts_via p \\<sigma>1 v ?A ?W \\<Longrightarrow>\n  G'.visits_via P ?A ?W\n  G'.visits_via ?P ?A ?W \\<Longrightarrow> lset ?P \\<inter> ?W \\<noteq> {}\n\ngoal (1 subgoal):\n 1. lset P \\<inter> K \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  lset P \\<inter> K \\<noteq> {}\n\ngoal (1 subgoal):\n 1. attractor p K \\<inter> W1 \\<noteq> {} \\<Longrightarrow> False", "hence \"\\<not>lset P \\<subseteq> W1\""], ["proof (prove)\nusing this:\n  lset P \\<inter> K \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> lset P \\<subseteq> W1", "unfolding K_def U_def"], ["proof (prove)\nusing this:\n  lset P \\<inter> ((V - W1) \\<inter> \\<omega> -` {min_prio}) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> lset P \\<subseteq> W1", "by blast"], ["proof (state)\nthis:\n  \\<not> lset P \\<subseteq> W1\n\ngoal (1 subgoal):\n 1. attractor p K \\<inter> W1 \\<noteq> {} \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<not> lset P \\<subseteq> W1\n\ngoal (1 subgoal):\n 1. False", "unfolding W1_def"], ["proof (prove)\nusing this:\n  \\<not> lset P \\<subseteq> winning_region p**\n\ngoal (1 subgoal):\n 1. False", "using comp.paths_stay_in_winning_region \\<sigma>W1 v(2)"], ["proof (prove)\nusing this:\n  \\<not> lset P \\<subseteq> winning_region p**\n  \\<lbrakk>strategy p** ?\\<sigma>'; winning_strategy p** ?\\<sigma>' v;\n   \\<And>v.\n      v \\<in> winning_region p** \\<Longrightarrow>\n      ?\\<sigma>' v = \\<sigma>W1 v\\<rbrakk>\n  \\<Longrightarrow> lset P \\<subseteq> winning_region p**\n  strategy p** \\<sigma>W1\n  ?v \\<in> W1 \\<Longrightarrow> winning_strategy p** \\<sigma>W1 ?v\n  v \\<in> W1\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  attractor p K \\<inter> W1 = {}\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "text \\<open>On specific sets, @{term \\<sigma>} behaves like one of the three pieces.\\<close>"], ["proof (state)\nthis:\n  attractor p K \\<inter> W1 = {}\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have \\<sigma>_\\<sigma>1: \"\\<And>v. v \\<in> attractor p K - K \\<Longrightarrow> \\<sigma> v = \\<sigma>1 v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> attractor p K - K \\<Longrightarrow> \\<sigma> v = \\<sigma>1 v", "unfolding \\<sigma>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> attractor p K - K \\<Longrightarrow>\n       override_on (override_on succ \\<sigma>2 V') \\<sigma>1\n        (attractor p K - K) v =\n       \\<sigma>1 v", "by simp"], ["proof (state)\nthis:\n  ?v \\<in> attractor p K - K \\<Longrightarrow> \\<sigma> ?v = \\<sigma>1 ?v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have \\<sigma>_\\<sigma>2: \"\\<And>v. v \\<in> V' \\<Longrightarrow> \\<sigma> v = \\<sigma>2 v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> V' \\<Longrightarrow> \\<sigma> v = \\<sigma>2 v", "unfolding \\<sigma>_def V'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> U - attractor p K \\<Longrightarrow>\n       override_on (override_on succ \\<sigma>2 (U - attractor p K))\n        \\<sigma>1 (attractor p K - K) v =\n       \\<sigma>2 v", "by auto"], ["proof (state)\nthis:\n  ?v \\<in> V' \\<Longrightarrow> \\<sigma> ?v = \\<sigma>2 ?v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have \\<sigma>_K: \"\\<And>v. v \\<in> K \\<union> W1 \\<Longrightarrow> \\<sigma> v = succ v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> K \\<union> W1 \\<Longrightarrow> \\<sigma> v = succ v", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> K \\<union> W1 \\<Longrightarrow> \\<sigma> v = succ v", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> K \\<union> W1 \\<Longrightarrow> \\<sigma> v = succ v", "assume v: \"v \\<in> K \\<union> W1\""], ["proof (state)\nthis:\n  v \\<in> K \\<union> W1\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> K \\<union> W1 \\<Longrightarrow> \\<sigma> v = succ v", "hence \"v \\<notin> V'\""], ["proof (prove)\nusing this:\n  v \\<in> K \\<union> W1\n\ngoal (1 subgoal):\n 1. v \\<notin> V'", "unfolding V'_def U_def"], ["proof (prove)\nusing this:\n  v \\<in> K \\<union> W1\n\ngoal (1 subgoal):\n 1. v \\<notin> V - W1 - attractor p K", "using attractor_set_base"], ["proof (prove)\nusing this:\n  v \\<in> K \\<union> W1\n  ?W \\<subseteq> attractor ?p ?W\n\ngoal (1 subgoal):\n 1. v \\<notin> V - W1 - attractor p K", "by auto"], ["proof (state)\nthis:\n  v \\<notin> V'\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> K \\<union> W1 \\<Longrightarrow> \\<sigma> v = succ v", "with v"], ["proof (chain)\npicking this:\n  v \\<in> K \\<union> W1\n  v \\<notin> V'", "show \"\\<sigma> v = succ v\""], ["proof (prove)\nusing this:\n  v \\<in> K \\<union> W1\n  v \\<notin> V'\n\ngoal (1 subgoal):\n 1. \\<sigma> v = succ v", "unfolding \\<sigma>_def U_def"], ["proof (prove)\nusing this:\n  v \\<in> K \\<union> W1\n  v \\<notin> V'\n\ngoal (1 subgoal):\n 1. override_on (override_on succ \\<sigma>2 V') \\<sigma>1\n     (attractor p K - K) v =\n    succ v", "using \\<open>attractor p K \\<inter> W1 = {}\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> K \\<union> W1\n  v \\<notin> V'\n  attractor p K \\<inter> W1 = {}\n\ngoal (1 subgoal):\n 1. override_on (override_on succ \\<sigma>2 V') \\<sigma>1\n     (attractor p K - K) v =\n    succ v", "by (metis (mono_tags, lifting) Diff_iff IntI UnE override_on_def override_on_emptyset)"], ["proof (state)\nthis:\n  \\<sigma> v = succ v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?v \\<in> K \\<union> W1 \\<Longrightarrow> \\<sigma> ?v = succ ?v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "text \\<open>Show that @{term succ} succeeds in avoiding entering @{term W1}.\\<close>"], ["proof (state)\nthis:\n  ?v \\<in> K \\<union> W1 \\<Longrightarrow> \\<sigma> ?v = succ ?v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "{"], ["proof (state)\nthis:\n  ?v \\<in> K \\<union> W1 \\<Longrightarrow> \\<sigma> ?v = succ ?v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "assume v: \"v \\<in> VV p\""], ["proof (state)\nthis:\n  v \\<in> VV p\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "hence \"\\<not>deadend v\""], ["proof (prove)\nusing this:\n  v \\<in> VV p\n\ngoal (1 subgoal):\n 1. \\<not> deadend v", "using no_deadends"], ["proof (prove)\nusing this:\n  v \\<in> VV p\n  ?v \\<in> V \\<Longrightarrow> \\<not> deadend ?v\n\ngoal (1 subgoal):\n 1. \\<not> deadend v", "by blast"], ["proof (state)\nthis:\n  \\<not> deadend v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have \"\\<exists>w. v\\<rightarrow>w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)", "assume \"v \\<in> W1\""], ["proof (state)\nthis:\n  v \\<in> W1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)", "thus ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> W1\n\ngoal (1 subgoal):\n 1. \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)", "using no_deadends \\<open>\\<not>deadend v\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> W1\n  ?v \\<in> V \\<Longrightarrow> \\<not> deadend ?v\n  \\<not> deadend v\n\ngoal (1 subgoal):\n 1. \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)", "by blast"], ["proof (state)\nthis:\n  \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)\n\ngoal (1 subgoal):\n 1. v \\<notin> W1 \\<Longrightarrow>\n    \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<notin> W1 \\<Longrightarrow>\n    \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)", "assume \"v \\<notin> W1\""], ["proof (state)\nthis:\n  v \\<notin> W1\n\ngoal (1 subgoal):\n 1. v \\<notin> W1 \\<Longrightarrow>\n    \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>w.\n       v \\<rightarrow> w \\<and>\n       (v \\<in> W1 \\<or> w \\<notin> W1) \\<Longrightarrow>\n    False", "assume \"\\<not>(\\<exists>w. v\\<rightarrow>w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1))\""], ["proof (state)\nthis:\n  \\<nexists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)\n\ngoal (1 subgoal):\n 1. \\<nexists>w.\n       v \\<rightarrow> w \\<and>\n       (v \\<in> W1 \\<or> w \\<notin> W1) \\<Longrightarrow>\n    False", "hence \"\\<And>w. v\\<rightarrow>w \\<Longrightarrow> winning_strategy p** \\<sigma>W1 w\""], ["proof (prove)\nusing this:\n  \\<nexists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       v \\<rightarrow> w \\<Longrightarrow> winning_strategy p** \\<sigma>W1 w", "using \\<sigma>W1(2)"], ["proof (prove)\nusing this:\n  \\<nexists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)\n  ?v \\<in> W1 \\<Longrightarrow> winning_strategy p** \\<sigma>W1 ?v\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       v \\<rightarrow> w \\<Longrightarrow> winning_strategy p** \\<sigma>W1 w", "by blast"], ["proof (state)\nthis:\n  v \\<rightarrow> ?w \\<Longrightarrow> winning_strategy p** \\<sigma>W1 ?w\n\ngoal (1 subgoal):\n 1. \\<nexists>w.\n       v \\<rightarrow> w \\<and>\n       (v \\<in> W1 \\<or> w \\<notin> W1) \\<Longrightarrow>\n    False", "hence \"winning_strategy p** \\<sigma>W1 v\""], ["proof (prove)\nusing this:\n  v \\<rightarrow> ?w \\<Longrightarrow> winning_strategy p** \\<sigma>W1 ?w\n\ngoal (1 subgoal):\n 1. winning_strategy p** \\<sigma>W1 v", "using strategy_extends_backwards_VVpstar \\<sigma>W1(1) \\<open>v \\<in> VV p\\<close>"], ["proof (prove)\nusing this:\n  v \\<rightarrow> ?w \\<Longrightarrow> winning_strategy p** \\<sigma>W1 ?w\n  \\<lbrakk>?v0.0 \\<in> VV ?p**; strategy ?p ?\\<sigma>;\n   \\<And>w.\n      ?v0.0 \\<rightarrow> w \\<Longrightarrow>\n      winning_strategy ?p ?\\<sigma> w\\<rbrakk>\n  \\<Longrightarrow> winning_strategy ?p ?\\<sigma> ?v0.0\n  strategy p** \\<sigma>W1\n  v \\<in> VV p\n\ngoal (1 subgoal):\n 1. winning_strategy p** \\<sigma>W1 v", "by simp"], ["proof (state)\nthis:\n  winning_strategy p** \\<sigma>W1 v\n\ngoal (1 subgoal):\n 1. \\<nexists>w.\n       v \\<rightarrow> w \\<and>\n       (v \\<in> W1 \\<or> w \\<notin> W1) \\<Longrightarrow>\n    False", "hence \"v \\<in> W1\""], ["proof (prove)\nusing this:\n  winning_strategy p** \\<sigma>W1 v\n\ngoal (1 subgoal):\n 1. v \\<in> W1", "unfolding W1_def winning_region_def"], ["proof (prove)\nusing this:\n  winning_strategy p** \\<sigma>W1 v\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> V.\n             \\<exists>\\<sigma>.\n                strategy p** \\<sigma> \\<and>\n                winning_strategy p** \\<sigma> v}", "using \\<sigma>W1(1) \\<open>\\<not>deadend v\\<close>"], ["proof (prove)\nusing this:\n  winning_strategy p** \\<sigma>W1 v\n  strategy p** \\<sigma>W1\n  \\<not> deadend v\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> V.\n             \\<exists>\\<sigma>.\n                strategy p** \\<sigma> \\<and>\n                winning_strategy p** \\<sigma> v}", "by blast"], ["proof (state)\nthis:\n  v \\<in> W1\n\ngoal (1 subgoal):\n 1. \\<nexists>w.\n       v \\<rightarrow> w \\<and>\n       (v \\<in> W1 \\<or> w \\<notin> W1) \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  v \\<in> W1\n\ngoal (1 subgoal):\n 1. False", "using \\<open>v \\<notin> W1\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> W1\n  v \\<notin> W1\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "hence \"v\\<rightarrow>succ v\" \"v \\<in> W1 \\<or> succ v \\<notin> W1\""], ["proof (prove)\nusing this:\n  \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> succ v &&& v \\<in> W1 \\<or> succ v \\<notin> W1", "unfolding succ_def"], ["proof (prove)\nusing this:\n  \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\n    (SOME w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)) &&&\n    v \\<in> W1 \\<or>\n    (SOME w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1))\n    \\<notin> W1", "using someI_ex[of \"\\<lambda>w. v\\<rightarrow>w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)\"]"], ["proof (prove)\nusing this:\n  \\<exists>w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)\n  \\<exists>x.\n     v \\<rightarrow> x \\<and>\n     (v \\<in> W1 \\<or> x \\<notin> W1) \\<Longrightarrow>\n  v \\<rightarrow>\n  (SOME x. v \\<rightarrow> x \\<and> (v \\<in> W1 \\<or> x \\<notin> W1)) \\<and>\n  (v \\<in> W1 \\<or>\n   (SOME x. v \\<rightarrow> x \\<and> (v \\<in> W1 \\<or> x \\<notin> W1))\n   \\<notin> W1)\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\n    (SOME w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1)) &&&\n    v \\<in> W1 \\<or>\n    (SOME w. v \\<rightarrow> w \\<and> (v \\<in> W1 \\<or> w \\<notin> W1))\n    \\<notin> W1", "by blast+"], ["proof (state)\nthis:\n  v \\<rightarrow> succ v\n  v \\<in> W1 \\<or> succ v \\<notin> W1\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "}"], ["proof (state)\nthis:\n  ?va2 \\<in> VV p \\<Longrightarrow> ?va2 \\<rightarrow> succ ?va2\n  ?va2 \\<in> VV p \\<Longrightarrow>\n  ?va2 \\<in> W1 \\<or> succ ?va2 \\<notin> W1\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "note succ_works = this"], ["proof (state)\nthis:\n  ?va2 \\<in> VV p \\<Longrightarrow> ?va2 \\<rightarrow> succ ?va2\n  ?va2 \\<in> VV p \\<Longrightarrow>\n  ?va2 \\<in> W1 \\<or> succ ?va2 \\<notin> W1\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have \"strategy p \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p \\<sigma>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "assume v: \"v \\<in> VV p\" \"\\<not>deadend v\""], ["proof (state)\nthis:\n  v \\<in> VV p\n  \\<not> deadend v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "hence \"v \\<in> attractor p K - K \\<Longrightarrow> v\\<rightarrow>\\<sigma> v\""], ["proof (prove)\nusing this:\n  v \\<in> VV p\n  \\<not> deadend v\n\ngoal (1 subgoal):\n 1. v \\<in> attractor p K - K \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "using \\<sigma>_\\<sigma>1 \\<sigma>1(1) v"], ["proof (prove)\nusing this:\n  v \\<in> VV p\n  \\<not> deadend v\n  ?v \\<in> attractor p K - K \\<Longrightarrow> \\<sigma> ?v = \\<sigma>1 ?v\n  strategy p \\<sigma>1\n  v \\<in> VV p\n  \\<not> deadend v\n\ngoal (1 subgoal):\n 1. v \\<in> attractor p K - K \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "unfolding strategy_def"], ["proof (prove)\nusing this:\n  v \\<in> VV p\n  \\<not> deadend v\n  ?v \\<in> attractor p K - K \\<Longrightarrow> \\<sigma> ?v = \\<sigma>1 ?v\n  \\<forall>v\\<in>VV p.\n     \\<not> deadend v \\<longrightarrow> v \\<rightarrow> \\<sigma>1 v\n  v \\<in> VV p\n  \\<not> deadend v\n\ngoal (1 subgoal):\n 1. v \\<in> attractor p K - K \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "by auto"], ["proof (state)\nthis:\n  v \\<in> attractor p K - K \\<Longrightarrow> v \\<rightarrow> \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "moreover"], ["proof (state)\nthis:\n  v \\<in> attractor p K - K \\<Longrightarrow> v \\<rightarrow> \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "have \"v \\<in> V' \\<Longrightarrow> v\\<rightarrow>\\<sigma> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> V' \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> V' \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "assume \"v \\<in> V'\""], ["proof (state)\nthis:\n  v \\<in> V'\n\ngoal (1 subgoal):\n 1. v \\<in> V' \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "moreover"], ["proof (state)\nthis:\n  v \\<in> V'\n\ngoal (1 subgoal):\n 1. v \\<in> V' \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "have \"v \\<in> V\\<^bsub>G'\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> V\\<^bsub>G'\\<^esub>", "using \\<open>v \\<in> V'\\<close> \\<open>V\\<^bsub>G'\\<^esub> = V'\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> V'\n  V\\<^bsub>G'\\<^esub> = V'\n\ngoal (1 subgoal):\n 1. v \\<in> V\\<^bsub>G'\\<^esub>", "by blast"], ["proof (state)\nthis:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. v \\<in> V' \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "moreover"], ["proof (state)\nthis:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. v \\<in> V' \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "have \"v \\<in> G'.VV p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> G'.VV p", "using \\<open>G'.VV p = V' \\<inter> VV p\\<close> \\<open>v \\<in> V'\\<close> \\<open>v \\<in> VV p\\<close>"], ["proof (prove)\nusing this:\n  G'.VV p = V' \\<inter> VV p\n  v \\<in> V'\n  v \\<in> VV p\n\ngoal (1 subgoal):\n 1. v \\<in> G'.VV p", "by blast"], ["proof (state)\nthis:\n  v \\<in> G'.VV p\n\ngoal (1 subgoal):\n 1. v \\<in> V' \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "moreover"], ["proof (state)\nthis:\n  v \\<in> G'.VV p\n\ngoal (1 subgoal):\n 1. v \\<in> V' \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "have \"\\<not>Digraph.deadend G' v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> G'.deadend v", "using G'_no_deadends \\<open>v \\<in> V\\<^bsub>G'\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend ?v\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> G'.deadend v", "by blast"], ["proof (state)\nthis:\n  \\<not> G'.deadend v\n\ngoal (1 subgoal):\n 1. v \\<in> V' \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> V'\n  v \\<in> V\\<^bsub>G'\\<^esub>\n  v \\<in> G'.VV p\n  \\<not> G'.deadend v", "have \"v \\<rightarrow>\\<^bsub>G'\\<^esub> \\<sigma>2 v\""], ["proof (prove)\nusing this:\n  v \\<in> V'\n  v \\<in> V\\<^bsub>G'\\<^esub>\n  v \\<in> G'.VV p\n  \\<not> G'.deadend v\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^bsub>G'\\<^esub> \\<sigma>2 v", "using \\<sigma>2(1) G'.strategy_def[of p \\<sigma>2]"], ["proof (prove)\nusing this:\n  v \\<in> V'\n  v \\<in> V\\<^bsub>G'\\<^esub>\n  v \\<in> G'.VV p\n  \\<not> G'.deadend v\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> G'.strategy p \\<sigma>2\n  G'.strategy p \\<sigma>2 \\<equiv>\n  \\<forall>v\\<in>G'.VV p.\n     \\<not> G'.deadend v \\<longrightarrow>\n     v \\<rightarrow>\\<^bsub>G'\\<^esub> \\<sigma>2 v\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^bsub>G'\\<^esub> \\<sigma>2 v", "by blast"], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^bsub>G'\\<^esub> \\<sigma>2 v\n\ngoal (1 subgoal):\n 1. v \\<in> V' \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "with \\<open>v \\<in> V'\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> V'\n  v \\<rightarrow>\\<^bsub>G'\\<^esub> \\<sigma>2 v", "show \"v\\<rightarrow>\\<sigma> v\""], ["proof (prove)\nusing this:\n  v \\<in> V'\n  v \\<rightarrow>\\<^bsub>G'\\<^esub> \\<sigma>2 v\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> \\<sigma> v", "using \\<open>E\\<^bsub>G'\\<^esub> \\<subseteq> E\\<close> \\<sigma>_\\<sigma>2"], ["proof (prove)\nusing this:\n  v \\<in> V'\n  v \\<rightarrow>\\<^bsub>G'\\<^esub> \\<sigma>2 v\n  E\\<^bsub>G'\\<^esub> \\<subseteq> E\n  ?v \\<in> V' \\<Longrightarrow> \\<sigma> ?v = \\<sigma>2 ?v\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> \\<sigma> v", "by (metis subsetCE)"], ["proof (state)\nthis:\n  v \\<rightarrow> \\<sigma> v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<in> V' \\<Longrightarrow> v \\<rightarrow> \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "moreover"], ["proof (state)\nthis:\n  v \\<in> V' \\<Longrightarrow> v \\<rightarrow> \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "have \"v \\<in> K \\<union> W1 \\<Longrightarrow> v\\<rightarrow>\\<sigma> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> K \\<union> W1 \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "using succ_works(1) v \\<sigma>_K"], ["proof (prove)\nusing this:\n  ?va2 \\<in> VV p \\<Longrightarrow> ?va2 \\<rightarrow> succ ?va2\n  v \\<in> VV p\n  \\<not> deadend v\n  ?v \\<in> K \\<union> W1 \\<Longrightarrow> \\<sigma> ?v = succ ?v\n\ngoal (1 subgoal):\n 1. v \\<in> K \\<union> W1 \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "by auto"], ["proof (state)\nthis:\n  v \\<in> K \\<union> W1 \\<Longrightarrow> v \\<rightarrow> \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "moreover"], ["proof (state)\nthis:\n  v \\<in> K \\<union> W1 \\<Longrightarrow> v \\<rightarrow> \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "have \"v \\<in> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> V", "using \\<open>v \\<in> VV p\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> VV p\n\ngoal (1 subgoal):\n 1. v \\<in> V", "by blast"], ["proof (state)\nthis:\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> VV p; \\<not> deadend v\\<rbrakk>\n       \\<Longrightarrow> v \\<rightarrow> \\<sigma> v", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> attractor p K - K \\<Longrightarrow> v \\<rightarrow> \\<sigma> v\n  v \\<in> V' \\<Longrightarrow> v \\<rightarrow> \\<sigma> v\n  v \\<in> K \\<union> W1 \\<Longrightarrow> v \\<rightarrow> \\<sigma> v\n  v \\<in> V", "show \"v\\<rightarrow>\\<sigma> v\""], ["proof (prove)\nusing this:\n  v \\<in> attractor p K - K \\<Longrightarrow> v \\<rightarrow> \\<sigma> v\n  v \\<in> V' \\<Longrightarrow> v \\<rightarrow> \\<sigma> v\n  v \\<in> K \\<union> W1 \\<Longrightarrow> v \\<rightarrow> \\<sigma> v\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> \\<sigma> v", "using V_decomp"], ["proof (prove)\nusing this:\n  v \\<in> attractor p K - K \\<Longrightarrow> v \\<rightarrow> \\<sigma> v\n  v \\<in> V' \\<Longrightarrow> v \\<rightarrow> \\<sigma> v\n  v \\<in> K \\<union> W1 \\<Longrightarrow> v \\<rightarrow> \\<sigma> v\n  v \\<in> V\n  V = attractor p K \\<union> V' \\<union> W1\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> \\<sigma> v", "by blast"], ["proof (state)\nthis:\n  v \\<rightarrow> \\<sigma> v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  strategy p \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have \\<sigma>_attracts: \"strategy_attracts p \\<sigma> (attractor p K) K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy_attracts p \\<sigma> (attractor p K) K", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. strategy_attracts p \\<sigma> (attractor p K) K", "have \"strategy_attracts p (override_on \\<sigma> \\<sigma>1 (attractor p K - K)) (attractor p K) K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy_attracts p (override_on \\<sigma> \\<sigma>1 (attractor p K - K))\n     (attractor p K) K", "using strategy_attracts_irrelevant_override \\<sigma>1 \\<open>strategy p \\<sigma>\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>strategy_attracts ?p ?\\<sigma> ?A ?W; strategy ?p ?\\<sigma>;\n   strategy ?p ?\\<sigma>'\\<rbrakk>\n  \\<Longrightarrow> strategy_attracts ?p\n                     (override_on ?\\<sigma>' ?\\<sigma> (?A - ?W)) ?A ?W\n  strategy p \\<sigma>1\n  strategy_attracts p \\<sigma>1 (attractor p K) K\n  strategy p \\<sigma>\n\ngoal (1 subgoal):\n 1. strategy_attracts p (override_on \\<sigma> \\<sigma>1 (attractor p K - K))\n     (attractor p K) K", "by blast"], ["proof (state)\nthis:\n  strategy_attracts p (override_on \\<sigma> \\<sigma>1 (attractor p K - K))\n   (attractor p K) K\n\ngoal (1 subgoal):\n 1. strategy_attracts p \\<sigma> (attractor p K) K", "moreover"], ["proof (state)\nthis:\n  strategy_attracts p (override_on \\<sigma> \\<sigma>1 (attractor p K - K))\n   (attractor p K) K\n\ngoal (1 subgoal):\n 1. strategy_attracts p \\<sigma> (attractor p K) K", "have \"\\<sigma> = override_on \\<sigma> \\<sigma>1 (attractor p K - K)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> = override_on \\<sigma> \\<sigma>1 (attractor p K - K)", "by (rule ext) (simp add: override_on_def \\<sigma>_\\<sigma>1)"], ["proof (state)\nthis:\n  \\<sigma> = override_on \\<sigma> \\<sigma>1 (attractor p K - K)\n\ngoal (1 subgoal):\n 1. strategy_attracts p \\<sigma> (attractor p K) K", "ultimately"], ["proof (chain)\npicking this:\n  strategy_attracts p (override_on \\<sigma> \\<sigma>1 (attractor p K - K))\n   (attractor p K) K\n  \\<sigma> = override_on \\<sigma> \\<sigma>1 (attractor p K - K)", "show ?thesis"], ["proof (prove)\nusing this:\n  strategy_attracts p (override_on \\<sigma> \\<sigma>1 (attractor p K - K))\n   (attractor p K) K\n  \\<sigma> = override_on \\<sigma> \\<sigma>1 (attractor p K - K)\n\ngoal (1 subgoal):\n 1. strategy_attracts p \\<sigma> (attractor p K) K", "by simp"], ["proof (state)\nthis:\n  strategy_attracts p \\<sigma> (attractor p K) K\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  strategy_attracts p \\<sigma> (attractor p K) K\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "text \\<open>Show that @{term \\<sigma>} is a winning strategy on @{term \"V - W1\"}.\\<close>"], ["proof (state)\nthis:\n  strategy_attracts p \\<sigma> (attractor p K) K\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "have \"\\<forall>v \\<in> V - W1. winning_strategy p \\<sigma> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V - W1. winning_strategy p \\<sigma> v", "proof (intro ballI winning_strategyI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v P.\n       \\<lbrakk>v \\<in> V - W1; vmc_path G P v p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> winning_path p P", "fix v P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v P.\n       \\<lbrakk>v \\<in> V - W1; vmc_path G P v p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> winning_path p P", "assume P: \"v \\<in> V - W1\" \"vmc_path G P v p \\<sigma>\""], ["proof (state)\nthis:\n  v \\<in> V - W1\n  vmc_path G P v p \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>v P.\n       \\<lbrakk>v \\<in> V - W1; vmc_path G P v p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> winning_path p P", "interpret vmc_path G P v p \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path G P v p \\<sigma>", "using P(2)"], ["proof (prove)\nusing this:\n  vmc_path G P v p \\<sigma>\n\ngoal (1 subgoal):\n 1. vmc_path G P v p \\<sigma>", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v P.\n       \\<lbrakk>v \\<in> V - W1; vmc_path G P v p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> winning_path p P", "have \"lset P \\<subseteq> V - W1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset P \\<subseteq> V - W1", "proof (induct rule: vmc_path_lset_induction_closed_subset)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V - W1; \\<not> deadend v; v \\<in> VV p\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> v \\<in> V - W1 \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V - W1; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V - W1 \\<union> ?T\n 3. v \\<in> V - W1\n 4. lset P \\<inter> ?T = {}", "fix v"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V - W1; \\<not> deadend v; v \\<in> VV p\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> v \\<in> V - W1 \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V - W1; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V - W1 \\<union> ?T\n 3. va__ \\<in> V - W1\n 4. lset P \\<inter> ?T = {}", "assume \"v \\<in> V - W1\" \"\\<not>deadend v\" \"v \\<in> VV p\""], ["proof (state)\nthis:\n  v \\<in> V - W1\n  \\<not> deadend v\n  v \\<in> VV p\n\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V - W1; \\<not> deadend v; v \\<in> VV p\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> v \\<in> V - W1 \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V - W1; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V - W1 \\<union> ?T\n 3. va__ \\<in> V - W1\n 4. lset P \\<inter> ?T = {}", "show \"\\<sigma> v \\<in> V - W1 \\<union> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> V - W1 \\<union> {}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma> v \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "assume \"\\<not>?thesis\""], ["proof (state)\nthis:\n  \\<sigma> v \\<notin> V - W1 \\<union> {}\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "hence \"\\<sigma> v \\<in> W1\""], ["proof (prove)\nusing this:\n  \\<sigma> v \\<notin> V - W1 \\<union> {}\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> W1", "using \\<open>strategy p \\<sigma>\\<close> \\<open>\\<not>deadend v\\<close> \\<open>v \\<in> VV p\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> v \\<notin> V - W1 \\<union> {}\n  strategy p \\<sigma>\n  \\<not> deadend v\n  v \\<in> VV p\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> W1", "unfolding strategy_def"], ["proof (prove)\nusing this:\n  \\<sigma> v \\<notin> V - W1 \\<union> {}\n  \\<forall>v\\<in>VV p.\n     \\<not> deadend v \\<longrightarrow> v \\<rightarrow> \\<sigma> v\n  \\<not> deadend v\n  v \\<in> VV p\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> W1", "by blast"], ["proof (state)\nthis:\n  \\<sigma> v \\<in> W1\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "hence \"v \\<notin> K\""], ["proof (prove)\nusing this:\n  \\<sigma> v \\<in> W1\n\ngoal (1 subgoal):\n 1. v \\<notin> K", "using succ_works(2)[OF \\<open>v \\<in> VV p\\<close>] \\<open>v \\<in> V - W1\\<close> \\<sigma>_K"], ["proof (prove)\nusing this:\n  \\<sigma> v \\<in> W1\n  v \\<in> W1 \\<or> succ v \\<notin> W1\n  v \\<in> V - W1\n  ?v \\<in> K \\<union> W1 \\<Longrightarrow> \\<sigma> ?v = succ ?v\n\ngoal (1 subgoal):\n 1. v \\<notin> K", "by auto"], ["proof (state)\nthis:\n  v \\<notin> K\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  v \\<notin> K\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "have \"v \\<notin> attractor p K - K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<notin> attractor p K - K", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> attractor p K - K \\<Longrightarrow> False", "assume \"v \\<in> attractor p K - K\""], ["proof (state)\nthis:\n  v \\<in> attractor p K - K\n\ngoal (1 subgoal):\n 1. v \\<in> attractor p K - K \\<Longrightarrow> False", "hence \"\\<sigma> v \\<in> attractor p K\""], ["proof (prove)\nusing this:\n  v \\<in> attractor p K - K\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> attractor p K", "using attracted_strategy_step \\<open>strategy p \\<sigma>\\<close> \\<sigma>_attracts \\<open>\\<not>deadend v\\<close> \\<open>v \\<in> VV p\\<close>\n                  attractor_set_base"], ["proof (prove)\nusing this:\n  v \\<in> attractor p K - K\n  \\<lbrakk>strategy ?p ?\\<sigma>; strategy_attracts ?p ?\\<sigma> ?A ?W;\n   \\<not> deadend ?v0.0; ?v0.0 \\<in> ?A - ?W; ?v0.0 \\<in> VV ?p\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma> ?v0.0 \\<in> ?A \\<union> ?W\n  strategy p \\<sigma>\n  strategy_attracts p \\<sigma> (attractor p K) K\n  \\<not> deadend v\n  v \\<in> VV p\n  ?W \\<subseteq> attractor ?p ?W\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> attractor p K", "by blast"], ["proof (state)\nthis:\n  \\<sigma> v \\<in> attractor p K\n\ngoal (1 subgoal):\n 1. v \\<in> attractor p K - K \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<sigma> v \\<in> attractor p K\n\ngoal (1 subgoal):\n 1. False", "using \\<open>\\<sigma> v \\<in> W1\\<close> \\<open>attractor p K \\<inter> W1 = {}\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> v \\<in> attractor p K\n  \\<sigma> v \\<in> W1\n  attractor p K \\<inter> W1 = {}\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<notin> attractor p K - K\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  v \\<notin> attractor p K - K\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "have \"v \\<notin> V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<notin> V'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> V' \\<Longrightarrow> False", "assume \"v \\<in> V'\""], ["proof (state)\nthis:\n  v \\<in> V'\n\ngoal (1 subgoal):\n 1. v \\<in> V' \\<Longrightarrow> False", "have \"\\<sigma>2 v \\<in> V\\<^bsub>G'\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>2 v \\<in> V\\<^bsub>G'\\<^esub>", "proof (rule G'.valid_strategy_in_V[of p \\<sigma>2 v])"], ["proof (state)\ngoal (3 subgoals):\n 1. G'.strategy p \\<sigma>2\n 2. v \\<in> G'.VV p\n 3. \\<not> G'.deadend v", "have \"v \\<in> V\\<^bsub>G'\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> V\\<^bsub>G'\\<^esub>", "using \\<open>V\\<^bsub>G'\\<^esub> = V'\\<close> \\<open>v \\<in> V'\\<close>"], ["proof (prove)\nusing this:\n  V\\<^bsub>G'\\<^esub> = V'\n  v \\<in> V'\n\ngoal (1 subgoal):\n 1. v \\<in> V\\<^bsub>G'\\<^esub>", "by simp"], ["proof (state)\nthis:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (3 subgoals):\n 1. G'.strategy p \\<sigma>2\n 2. v \\<in> G'.VV p\n 3. \\<not> G'.deadend v", "thus \"\\<not>G'.deadend v\""], ["proof (prove)\nusing this:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> G'.deadend v", "using G'_no_deadends"], ["proof (prove)\nusing this:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend ?v\n\ngoal (1 subgoal):\n 1. \\<not> G'.deadend v", "by blast"], ["proof (state)\nthis:\n  \\<not> G'.deadend v\n\ngoal (2 subgoals):\n 1. G'.strategy p \\<sigma>2\n 2. v \\<in> G'.VV p", "show \"G'.strategy p \\<sigma>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.strategy p \\<sigma>2", "using \\<sigma>2(1) \\<open>v \\<in> V\\<^bsub>G'\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> G'.strategy p \\<sigma>2\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. G'.strategy p \\<sigma>2", "by blast"], ["proof (state)\nthis:\n  G'.strategy p \\<sigma>2\n\ngoal (1 subgoal):\n 1. v \\<in> G'.VV p", "show \"v \\<in> G'.VV p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> G'.VV p", "using \\<open>v \\<in> VV p\\<close> \\<open>G'.VV p = V' \\<inter> VV p\\<close> \\<open>v \\<in> V'\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> VV p\n  G'.VV p = V' \\<inter> VV p\n  v \\<in> V'\n\ngoal (1 subgoal):\n 1. v \\<in> G'.VV p", "by simp"], ["proof (state)\nthis:\n  v \\<in> G'.VV p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<sigma>2 v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. v \\<in> V' \\<Longrightarrow> False", "hence \"\\<sigma> v \\<in> V\\<^bsub>G'\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<sigma>2 v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> V\\<^bsub>G'\\<^esub>", "using \\<open>v \\<in> V'\\<close> \\<sigma>_\\<sigma>2"], ["proof (prove)\nusing this:\n  \\<sigma>2 v \\<in> V\\<^bsub>G'\\<^esub>\n  v \\<in> V'\n  ?v \\<in> V' \\<Longrightarrow> \\<sigma> ?v = \\<sigma>2 ?v\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<in> V\\<^bsub>G'\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<sigma> v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. v \\<in> V' \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<sigma> v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. False", "using \\<open>V\\<^bsub>G'\\<^esub> = V'\\<close> \\<open>\\<sigma> v \\<in> W1\\<close> V'_def U_def"], ["proof (prove)\nusing this:\n  \\<sigma> v \\<in> V\\<^bsub>G'\\<^esub>\n  V\\<^bsub>G'\\<^esub> = V'\n  \\<sigma> v \\<in> W1\n  V' = U - attractor p K\n  U = V - W1\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<notin> V'\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  v \\<notin> K\n  v \\<notin> attractor p K - K\n  v \\<notin> V'", "show False"], ["proof (prove)\nusing this:\n  v \\<notin> K\n  v \\<notin> attractor p K - K\n  v \\<notin> V'\n\ngoal (1 subgoal):\n 1. False", "using \\<open>v \\<in> V - W1\\<close> V_decomp"], ["proof (prove)\nusing this:\n  v \\<notin> K\n  v \\<notin> attractor p K - K\n  v \\<notin> V'\n  v \\<in> V - W1\n  V = attractor p K \\<union> V' \\<union> W1\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<sigma> v \\<in> V - W1 \\<union> {}\n\ngoal (3 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V - W1; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V - W1 \\<union> {}\n 2. va__ \\<in> V - W1\n 3. lset P \\<inter> {} = {}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V - W1; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V - W1 \\<union> {}\n 2. v \\<in> V - W1\n 3. lset P \\<inter> {} = {}", "fix v w"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V - W1; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V - W1 \\<union> {}\n 2. va__ \\<in> V - W1\n 3. lset P \\<inter> {} = {}", "assume \"v \\<in> V - W1\" \"\\<not>deadend v\" \"v \\<in> VV p**\" \"v\\<rightarrow>w\""], ["proof (state)\nthis:\n  v \\<in> V - W1\n  \\<not> deadend v\n  v \\<in> VV p**\n  v \\<rightarrow> w\n\ngoal (3 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V - W1; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V - W1 \\<union> {}\n 2. va__ \\<in> V - W1\n 3. lset P \\<inter> {} = {}", "show \"w \\<in> V - W1 \\<union> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<in> V - W1 \\<union> {}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "assume \"\\<not>?thesis\""], ["proof (state)\nthis:\n  w \\<notin> V - W1 \\<union> {}\n\ngoal (1 subgoal):\n 1. w \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "hence \"w \\<in> W1\""], ["proof (prove)\nusing this:\n  w \\<notin> V - W1 \\<union> {}\n\ngoal (1 subgoal):\n 1. w \\<in> W1", "using \\<open>v\\<rightarrow>w\\<close>"], ["proof (prove)\nusing this:\n  w \\<notin> V - W1 \\<union> {}\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. w \\<in> W1", "by blast"], ["proof (state)\nthis:\n  w \\<in> W1\n\ngoal (1 subgoal):\n 1. w \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "let ?\\<sigma> = \"\\<sigma>W1(v := w)\""], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "have \"winning_strategy p** \\<sigma>W1 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_strategy p** \\<sigma>W1 w", "using \\<open>w \\<in> W1\\<close> \\<sigma>W1(2)"], ["proof (prove)\nusing this:\n  w \\<in> W1\n  ?v \\<in> W1 \\<Longrightarrow> winning_strategy p** \\<sigma>W1 ?v\n\ngoal (1 subgoal):\n 1. winning_strategy p** \\<sigma>W1 w", "by blast"], ["proof (state)\nthis:\n  winning_strategy p** \\<sigma>W1 w\n\ngoal (1 subgoal):\n 1. w \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  winning_strategy p** \\<sigma>W1 w\n\ngoal (1 subgoal):\n 1. w \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "have \"\\<not>(\\<exists>\\<sigma>. strategy p** \\<sigma> \\<and> winning_strategy p** \\<sigma> v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>.\n       strategy p** \\<sigma> \\<and> winning_strategy p** \\<sigma> v", "using \\<open>v \\<in> V - W1\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> V - W1\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>.\n       strategy p** \\<sigma> \\<and> winning_strategy p** \\<sigma> v", "unfolding W1_def winning_region_def"], ["proof (prove)\nusing this:\n  v \\<in> V -\n          {v \\<in> V.\n           \\<exists>\\<sigma>.\n              strategy p** \\<sigma> \\<and> winning_strategy p** \\<sigma> v}\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<sigma>.\n       strategy p** \\<sigma> \\<and> winning_strategy p** \\<sigma> v", "by blast"], ["proof (state)\nthis:\n  \\<nexists>\\<sigma>.\n     strategy p** \\<sigma> \\<and> winning_strategy p** \\<sigma> v\n\ngoal (1 subgoal):\n 1. w \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  winning_strategy p** \\<sigma>W1 w\n  \\<nexists>\\<sigma>.\n     strategy p** \\<sigma> \\<and> winning_strategy p** \\<sigma> v", "have \"winning_strategy p** ?\\<sigma> w\""], ["proof (prove)\nusing this:\n  winning_strategy p** \\<sigma>W1 w\n  \\<nexists>\\<sigma>.\n     strategy p** \\<sigma> \\<and> winning_strategy p** \\<sigma> v\n\ngoal (1 subgoal):\n 1. winning_strategy p** (\\<sigma>W1(v := w)) w", "using winning_strategy_updates[of \"p**\" \\<sigma>W1 w v w] \\<sigma>W1(1) \\<open>v\\<rightarrow>w\\<close>"], ["proof (prove)\nusing this:\n  winning_strategy p** \\<sigma>W1 w\n  \\<nexists>\\<sigma>.\n     strategy p** \\<sigma> \\<and> winning_strategy p** \\<sigma> v\n  \\<lbrakk>strategy p** \\<sigma>W1; winning_strategy p** \\<sigma>W1 w;\n   v \\<notin> winning_region p**; v \\<rightarrow> w\\<rbrakk>\n  \\<Longrightarrow> winning_strategy p** (\\<sigma>W1(v := w)) w\n  strategy p** \\<sigma>W1\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. winning_strategy p** (\\<sigma>W1(v := w)) w", "unfolding winning_region_def"], ["proof (prove)\nusing this:\n  winning_strategy p** \\<sigma>W1 w\n  \\<nexists>\\<sigma>.\n     strategy p** \\<sigma> \\<and> winning_strategy p** \\<sigma> v\n  \\<lbrakk>strategy p** \\<sigma>W1; winning_strategy p** \\<sigma>W1 w;\n   v \\<notin> {v \\<in> V.\n               \\<exists>\\<sigma>.\n                  strategy p** \\<sigma> \\<and>\n                  winning_strategy p** \\<sigma> v};\n   v \\<rightarrow> w\\<rbrakk>\n  \\<Longrightarrow> winning_strategy p** (\\<sigma>W1(v := w)) w\n  strategy p** \\<sigma>W1\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. winning_strategy p** (\\<sigma>W1(v := w)) w", "by blast"], ["proof (state)\nthis:\n  winning_strategy p** (\\<sigma>W1(v := w)) w\n\ngoal (1 subgoal):\n 1. w \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  winning_strategy p** (\\<sigma>W1(v := w)) w\n\ngoal (1 subgoal):\n 1. w \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "have \"strategy p** ?\\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p** (\\<sigma>W1(v := w))", "using \\<open>v\\<rightarrow>w\\<close> \\<sigma>W1(1) valid_strategy_updates"], ["proof (prove)\nusing this:\n  v \\<rightarrow> w\n  strategy p** \\<sigma>W1\n  \\<lbrakk>strategy ?p ?\\<sigma>; ?v0.0 \\<rightarrow> ?w0.0\\<rbrakk>\n  \\<Longrightarrow> strategy ?p (?\\<sigma>(?v0.0 := ?w0.0))\n\ngoal (1 subgoal):\n 1. strategy p** (\\<sigma>W1(v := w))", "by blast"], ["proof (state)\nthis:\n  strategy p** (\\<sigma>W1(v := w))\n\ngoal (1 subgoal):\n 1. w \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  winning_strategy p** (\\<sigma>W1(v := w)) w\n  strategy p** (\\<sigma>W1(v := w))", "have \"winning_strategy p** ?\\<sigma> v\""], ["proof (prove)\nusing this:\n  winning_strategy p** (\\<sigma>W1(v := w)) w\n  strategy p** (\\<sigma>W1(v := w))\n\ngoal (1 subgoal):\n 1. winning_strategy p** (\\<sigma>W1(v := w)) v", "using strategy_extends_backwards_VVp[of v \"p**\" ?\\<sigma> w]\n                \\<open>v \\<in> VV p**\\<close> \\<open>v\\<rightarrow>w\\<close>"], ["proof (prove)\nusing this:\n  winning_strategy p** (\\<sigma>W1(v := w)) w\n  strategy p** (\\<sigma>W1(v := w))\n  \\<lbrakk>v \\<in> VV p**; (\\<sigma>W1(v := w)) v = w; v \\<rightarrow> w;\n   strategy p** (\\<sigma>W1(v := w));\n   winning_strategy p** (\\<sigma>W1(v := w)) w\\<rbrakk>\n  \\<Longrightarrow> winning_strategy p** (\\<sigma>W1(v := w)) v\n  v \\<in> VV p**\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. winning_strategy p** (\\<sigma>W1(v := w)) v", "by auto"], ["proof (state)\nthis:\n  winning_strategy p** (\\<sigma>W1(v := w)) v\n\ngoal (1 subgoal):\n 1. w \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "hence \"v \\<in> W1\""], ["proof (prove)\nusing this:\n  winning_strategy p** (\\<sigma>W1(v := w)) v\n\ngoal (1 subgoal):\n 1. v \\<in> W1", "unfolding W1_def winning_region_def"], ["proof (prove)\nusing this:\n  winning_strategy p** (\\<sigma>W1(v := w)) v\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> V.\n             \\<exists>\\<sigma>.\n                strategy p** \\<sigma> \\<and>\n                winning_strategy p** \\<sigma> v}", "using \\<open>strategy p** ?\\<sigma>\\<close> \\<open>v \\<in> V - W1\\<close>"], ["proof (prove)\nusing this:\n  winning_strategy p** (\\<sigma>W1(v := w)) v\n  strategy p** (\\<sigma>W1(v := w))\n  v \\<in> V - W1\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> V.\n             \\<exists>\\<sigma>.\n                strategy p** \\<sigma> \\<and>\n                winning_strategy p** \\<sigma> v}", "by blast"], ["proof (state)\nthis:\n  v \\<in> W1\n\ngoal (1 subgoal):\n 1. w \\<notin> V - W1 \\<union> {} \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  v \\<in> W1\n\ngoal (1 subgoal):\n 1. False", "using \\<open>v \\<in> V - W1\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> W1\n  v \\<in> V - W1\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w \\<in> V - W1 \\<union> {}\n\ngoal (2 subgoals):\n 1. va__ \\<in> V - W1\n 2. lset P \\<inter> {} = {}", "qed (insert P(1), simp_all)"], ["proof (state)\nthis:\n  lset P \\<subseteq> V - W1\n\ngoal (1 subgoal):\n 1. \\<And>v P.\n       \\<lbrakk>v \\<in> V - W1; vmc_path G P v p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> winning_path p P", "text \\<open>This concludes the proof of @{term \"lset P \\<subseteq> V - W1\"}.\\<close>"], ["proof (state)\nthis:\n  lset P \\<subseteq> V - W1\n\ngoal (1 subgoal):\n 1. \\<And>v P.\n       \\<lbrakk>v \\<in> V - W1; vmc_path G P v p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> winning_path p P", "hence \"lset P \\<subseteq> attractor p K \\<union> V'\""], ["proof (prove)\nusing this:\n  lset P \\<subseteq> V - W1\n\ngoal (1 subgoal):\n 1. lset P \\<subseteq> attractor p K \\<union> V'", "using V_decomp"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> V - W1\n  V = attractor p K \\<union> V' \\<union> W1\n\ngoal (1 subgoal):\n 1. lset P \\<subseteq> attractor p K \\<union> V'", "by blast"], ["proof (state)\nthis:\n  lset P \\<subseteq> attractor p K \\<union> V'\n\ngoal (1 subgoal):\n 1. \\<And>v P.\n       \\<lbrakk>v \\<in> V - W1; vmc_path G P v p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> winning_path p P", "have \"\\<not>lfinite P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lfinite P", "using no_deadends lfinite_lset maximal_ends_on_deadend[of P] P_maximal P_not_null lset_P_V"], ["proof (prove)\nusing this:\n  ?v \\<in> V \\<Longrightarrow> \\<not> deadend ?v\n  \\<lbrakk>lfinite ?xs; \\<not> lnull ?xs\\<rbrakk>\n  \\<Longrightarrow> llast ?xs \\<in> lset ?xs\n  \\<lbrakk>maximal_path P; lfinite P; \\<not> lnull P\\<rbrakk>\n  \\<Longrightarrow> deadend (llast P)\n  maximal_path P\n  \\<not> lnull P\n  lset P \\<subseteq> V\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P", "by blast"], ["proof (state)\nthis:\n  \\<not> lfinite P\n\ngoal (1 subgoal):\n 1. \\<And>v P.\n       \\<lbrakk>v \\<in> V - W1; vmc_path G P v p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> winning_path p P", "text \\<open>\n      Every @{term \\<sigma>}-conforming path starting in @{term \"V - W1\"} is winning.\n      We distinguish two cases:\n      \\begin{enumerate}\n        \\item @{term P} eventually stays in @{term V'}.\n          Then @{term P} is winning because @{term \\<sigma>2} is winning.\n        \\item @{term P} visits @{term K} infinitely often.\n          Then @{term P} is winning because of the priority of the nodes in @{term K}.\n      \\end{enumerate}\n\\<close>"], ["proof (state)\nthis:\n  \\<not> lfinite P\n\ngoal (1 subgoal):\n 1. \\<And>v P.\n       \\<lbrakk>v \\<in> V - W1; vmc_path G P v p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> winning_path p P", "show \"winning_path p P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_path p P", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_path p P\n 2. \\<not> ?P \\<Longrightarrow> winning_path p P", "assume \"\\<exists>n. lset (ldropn n P) \\<subseteq> V'\""], ["proof (state)\nthis:\n  \\<exists>n. lset (ldropn n P) \\<subseteq> V'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_path p P\n 2. \\<not> ?P \\<Longrightarrow> winning_path p P", "text \\<open>The first case: @{term P} eventually stays in @{term V'}.\\<close>"], ["proof (state)\nthis:\n  \\<exists>n. lset (ldropn n P) \\<subseteq> V'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_path p P\n 2. \\<not> ?P \\<Longrightarrow> winning_path p P", "then"], ["proof (chain)\npicking this:\n  \\<exists>n. lset (ldropn n P) \\<subseteq> V'", "obtain n where n: \"lset (ldropn n P) \\<subseteq> V'\""], ["proof (prove)\nusing this:\n  \\<exists>n. lset (ldropn n P) \\<subseteq> V'\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        lset (ldropn n P) \\<subseteq> V' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  lset (ldropn n P) \\<subseteq> V'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_path p P\n 2. \\<not> ?P \\<Longrightarrow> winning_path p P", "define P' where \"P' = ldropn n P\""], ["proof (state)\nthis:\n  P' = ldropn n P\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_path p P\n 2. \\<not> ?P \\<Longrightarrow> winning_path p P", "hence \"lset P' \\<subseteq> V'\""], ["proof (prove)\nusing this:\n  P' = ldropn n P\n\ngoal (1 subgoal):\n 1. lset P' \\<subseteq> V'", "using n"], ["proof (prove)\nusing this:\n  P' = ldropn n P\n  lset (ldropn n P) \\<subseteq> V'\n\ngoal (1 subgoal):\n 1. lset P' \\<subseteq> V'", "by blast"], ["proof (state)\nthis:\n  lset P' \\<subseteq> V'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_path p P\n 2. \\<not> ?P \\<Longrightarrow> winning_path p P", "interpret vmc_path': vmc_path G' P' \"lhd P'\" p \\<sigma>2"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path G' P' (lhd P') p \\<sigma>2", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<not> lnull P'\n 2. G'.valid_path P'\n 3. G'.maximal_path P'\n 4. lhd P' = lhd P'\n 5. G'.path_conforms_with_strategy p P' \\<sigma>2", "show \"\\<not>lnull P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lnull P'", "unfolding P'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lnull (ldropn n P)", "using \\<open>\\<not>lfinite P\\<close> lfinite_ldropn lnull_imp_lfinite"], ["proof (prove)\nusing this:\n  \\<not> lfinite P\n  lfinite (ldropn ?n ?xs) = lfinite ?xs\n  lnull ?xs \\<Longrightarrow> lfinite ?xs\n\ngoal (1 subgoal):\n 1. \\<not> lnull (ldropn n P)", "by blast"], ["proof (state)\nthis:\n  \\<not> lnull P'\n\ngoal (4 subgoals):\n 1. G'.valid_path P'\n 2. G'.maximal_path P'\n 3. lhd P' = lhd P'\n 4. G'.path_conforms_with_strategy p P' \\<sigma>2", "show \"G'.valid_path P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.valid_path P'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. G'.valid_path P'", "have \"valid_path P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_path P'", "unfolding P'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_path (ldropn n P)", "by simp"], ["proof (state)\nthis:\n  valid_path P'\n\ngoal (1 subgoal):\n 1. G'.valid_path P'", "thus ?thesis"], ["proof (prove)\nusing this:\n  valid_path P'\n\ngoal (1 subgoal):\n 1. G'.valid_path P'", "using subgame_valid_path \\<open>lset P' \\<subseteq> V'\\<close> G'_def"], ["proof (prove)\nusing this:\n  valid_path P'\n  \\<lbrakk>valid_path ?P; lset ?P \\<subseteq> ?V'\\<rbrakk>\n  \\<Longrightarrow> Digraph.valid_path (subgame ?V') ?P\n  lset P' \\<subseteq> V'\n  G' = subgame V'\n\ngoal (1 subgoal):\n 1. G'.valid_path P'", "by blast"], ["proof (state)\nthis:\n  G'.valid_path P'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G'.valid_path P'\n\ngoal (3 subgoals):\n 1. G'.maximal_path P'\n 2. lhd P' = lhd P'\n 3. G'.path_conforms_with_strategy p P' \\<sigma>2", "show \"G'.maximal_path P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.maximal_path P'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. G'.maximal_path P'", "have \"maximal_path P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maximal_path P'", "unfolding P'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. maximal_path (ldropn n P)", "by simp"], ["proof (state)\nthis:\n  maximal_path P'\n\ngoal (1 subgoal):\n 1. G'.maximal_path P'", "thus ?thesis"], ["proof (prove)\nusing this:\n  maximal_path P'\n\ngoal (1 subgoal):\n 1. G'.maximal_path P'", "using subgame_maximal_path \\<open>lset P' \\<subseteq> V'\\<close> \\<open>V' \\<subseteq> V\\<close> G'_def"], ["proof (prove)\nusing this:\n  maximal_path P'\n  \\<lbrakk>?V' \\<subseteq> V; maximal_path ?P;\n   lset ?P \\<subseteq> ?V'\\<rbrakk>\n  \\<Longrightarrow> Digraph.maximal_path (subgame ?V') ?P\n  lset P' \\<subseteq> V'\n  V' \\<subseteq> V\n  G' = subgame V'\n\ngoal (1 subgoal):\n 1. G'.maximal_path P'", "by blast"], ["proof (state)\nthis:\n  G'.maximal_path P'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G'.maximal_path P'\n\ngoal (2 subgoals):\n 1. lhd P' = lhd P'\n 2. G'.path_conforms_with_strategy p P' \\<sigma>2", "show \"G'.path_conforms_with_strategy p P' \\<sigma>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p P' \\<sigma>2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p P' \\<sigma>2", "have \"path_conforms_with_strategy p P' \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P' \\<sigma>", "unfolding P'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (ldropn n P) \\<sigma>", "by simp"], ["proof (state)\nthis:\n  path_conforms_with_strategy p P' \\<sigma>\n\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p P' \\<sigma>2", "hence \"path_conforms_with_strategy p P' \\<sigma>2\""], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P' \\<sigma>\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P' \\<sigma>2", "using path_conforms_with_strategy_irrelevant_updates \\<open>lset P' \\<subseteq> V'\\<close> \\<sigma>_\\<sigma>2"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P' \\<sigma>\n  \\<lbrakk>path_conforms_with_strategy ?p ?P ?\\<sigma>;\n   \\<And>v.\n      v \\<in> lset ?P \\<Longrightarrow> ?\\<sigma> v = ?\\<sigma>' v\\<rbrakk>\n  \\<Longrightarrow> path_conforms_with_strategy ?p ?P ?\\<sigma>'\n  lset P' \\<subseteq> V'\n  ?v \\<in> V' \\<Longrightarrow> \\<sigma> ?v = \\<sigma>2 ?v\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P' \\<sigma>2", "by blast"], ["proof (state)\nthis:\n  path_conforms_with_strategy p P' \\<sigma>2\n\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p P' \\<sigma>2", "thus ?thesis"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P' \\<sigma>2\n\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p P' \\<sigma>2", "using subgame_path_conforms_with_strategy \\<open>lset P' \\<subseteq> V'\\<close> \\<open>V' \\<subseteq> V\\<close> G'_def"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P' \\<sigma>2\n  \\<lbrakk>?V' \\<subseteq> V; path_conforms_with_strategy ?p ?P ?\\<sigma>;\n   lset ?P \\<subseteq> ?V'\\<rbrakk>\n  \\<Longrightarrow> ParityGame.path_conforms_with_strategy (subgame ?V') ?p\n                     ?P ?\\<sigma>\n  lset P' \\<subseteq> V'\n  V' \\<subseteq> V\n  G' = subgame V'\n\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p P' \\<sigma>2", "by blast"], ["proof (state)\nthis:\n  G'.path_conforms_with_strategy p P' \\<sigma>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G'.path_conforms_with_strategy p P' \\<sigma>2\n\ngoal (1 subgoal):\n 1. lhd P' = lhd P'", "qed simp"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_path p P\n 2. \\<not> ?P \\<Longrightarrow> winning_path p P", "have \"G'.winning_strategy p \\<sigma>2 (lhd P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.winning_strategy p \\<sigma>2 (lhd P')", "using \\<open>lset P' \\<subseteq> V'\\<close> vmc_path'.P_not_null \\<sigma>2(2)[of \"lhd P'\"] \\<open>V\\<^bsub>G'\\<^esub> = V'\\<close> llist.set_sel(1)"], ["proof (prove)\nusing this:\n  lset P' \\<subseteq> V'\n  \\<not> lnull P'\n  lhd P' \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n  G'.winning_strategy p \\<sigma>2 (lhd P')\n  V\\<^bsub>G'\\<^esub> = V'\n  \\<not> lnull ?a \\<Longrightarrow> lhd ?a \\<in> lset ?a\n\ngoal (1 subgoal):\n 1. G'.winning_strategy p \\<sigma>2 (lhd P')", "by blast"], ["proof (state)\nthis:\n  G'.winning_strategy p \\<sigma>2 (lhd P')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_path p P\n 2. \\<not> ?P \\<Longrightarrow> winning_path p P", "hence \"G'.winning_path p P'\""], ["proof (prove)\nusing this:\n  G'.winning_strategy p \\<sigma>2 (lhd P')\n\ngoal (1 subgoal):\n 1. G'.winning_path p P'", "using G'.winning_strategy_def vmc_path'.vmc_path_axioms"], ["proof (prove)\nusing this:\n  G'.winning_strategy p \\<sigma>2 (lhd P')\n  G'.winning_strategy ?p ?\\<sigma> ?v0.0 \\<equiv>\n  \\<forall>P.\n     vmc_path G' P ?v0.0 ?p ?\\<sigma> \\<longrightarrow> G'.winning_path ?p P\n  vmc_path G' P' (lhd P') p \\<sigma>2\n\ngoal (1 subgoal):\n 1. G'.winning_path p P'", "by blast"], ["proof (state)\nthis:\n  G'.winning_path p P'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_path p P\n 2. \\<not> ?P \\<Longrightarrow> winning_path p P", "moreover"], ["proof (state)\nthis:\n  G'.winning_path p P'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_path p P\n 2. \\<not> ?P \\<Longrightarrow> winning_path p P", "have \"G'.VV p** \\<subseteq> VV p**\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.VV p** \\<subseteq> VV p**", "unfolding G'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if p** = Even then V0\\<^bsub>subgame V'\\<^esub>\n     else V\\<^bsub>subgame V'\\<^esub> - V0\\<^bsub>subgame V'\\<^esub>)\n    \\<subseteq> VV p**", "using subgame_VV"], ["proof (prove)\nusing this:\n  (if ?p = Even then V0\\<^bsub>subgame ?V'\\<^esub>\n   else V\\<^bsub>subgame ?V'\\<^esub> - V0\\<^bsub>subgame ?V'\\<^esub>) =\n  ?V' \\<inter> VV ?p\n\ngoal (1 subgoal):\n 1. (if p** = Even then V0\\<^bsub>subgame V'\\<^esub>\n     else V\\<^bsub>subgame V'\\<^esub> - V0\\<^bsub>subgame V'\\<^esub>)\n    \\<subseteq> VV p**", "by simp"], ["proof (state)\nthis:\n  G'.VV p** \\<subseteq> VV p**\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_path p P\n 2. \\<not> ?P \\<Longrightarrow> winning_path p P", "ultimately"], ["proof (chain)\npicking this:\n  G'.winning_path p P'\n  G'.VV p** \\<subseteq> VV p**", "have \"winning_path p P'\""], ["proof (prove)\nusing this:\n  G'.winning_path p P'\n  G'.VV p** \\<subseteq> VV p**\n\ngoal (1 subgoal):\n 1. winning_path p P'", "using G'.winning_path_supergame[of p P' G] \\<open>\\<omega>\\<^bsub>G'\\<^esub> = \\<omega>\\<close> ParityGame_axioms"], ["proof (prove)\nusing this:\n  G'.winning_path p P'\n  G'.VV p** \\<subseteq> VV p**\n  \\<lbrakk>G'.winning_path p P'; ParityGame G; G'.VV p** \\<subseteq> VV p**;\n   \\<omega>\\<^bsub>G'\\<^esub> = \\<omega>\\<rbrakk>\n  \\<Longrightarrow> winning_path p P'\n  \\<omega>\\<^bsub>G'\\<^esub> = \\<omega>\n  ParityGame G\n\ngoal (1 subgoal):\n 1. winning_path p P'", "by blast"], ["proof (state)\nthis:\n  winning_path p P'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> winning_path p P\n 2. \\<not> ?P \\<Longrightarrow> winning_path p P", "thus ?thesis"], ["proof (prove)\nusing this:\n  winning_path p P'\n\ngoal (1 subgoal):\n 1. winning_path p P", "unfolding P'_def"], ["proof (prove)\nusing this:\n  winning_path p (ldropn n P)\n\ngoal (1 subgoal):\n 1. winning_path p P", "using infinite_small_llength[OF \\<open>\\<not>lfinite P\\<close>]\n              winning_path_drop_add[of P p n] P_valid"], ["proof (prove)\nusing this:\n  winning_path p (ldropn n P)\n  enat ?n < llength P\n  \\<lbrakk>valid_path P; winning_path p (ldropn n P);\n   enat n < llength P\\<rbrakk>\n  \\<Longrightarrow> winning_path p P\n  valid_path P\n\ngoal (1 subgoal):\n 1. winning_path p P", "by blast"], ["proof (state)\nthis:\n  winning_path p P\n\ngoal (1 subgoal):\n 1. \\<nexists>n. lset (ldropn n P) \\<subseteq> V' \\<Longrightarrow>\n    winning_path p P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>n. lset (ldropn n P) \\<subseteq> V' \\<Longrightarrow>\n    winning_path p P", "assume asm: \"\\<not>(\\<exists>n. lset (ldropn n P) \\<subseteq> V')\""], ["proof (state)\nthis:\n  \\<nexists>n. lset (ldropn n P) \\<subseteq> V'\n\ngoal (1 subgoal):\n 1. \\<nexists>n. lset (ldropn n P) \\<subseteq> V' \\<Longrightarrow>\n    winning_path p P", "text \\<open>The second case: @{term P} visits @{term K} infinitely often.\n        Then @{term min_prio} occurs infinitely often on @{term P}.\\<close>"], ["proof (state)\nthis:\n  \\<nexists>n. lset (ldropn n P) \\<subseteq> V'\n\ngoal (1 subgoal):\n 1. \\<nexists>n. lset (ldropn n P) \\<subseteq> V' \\<Longrightarrow>\n    winning_path p P", "have \"min_prio \\<in> path_inf_priorities P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_prio \\<in> path_inf_priorities P", "unfolding path_inf_priorities_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. min_prio\n    \\<in> {k. \\<forall>n. k \\<in> lset (ldropn n (lmap \\<omega> P))}", "proof (intro CollectI allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "obtain k1 where k1: \"ldropn n P $ k1 \\<notin> V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k1.\n        ldropn n P $ k1 \\<notin> V' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using asm"], ["proof (prove)\nusing this:\n  \\<nexists>n. lset (ldropn n P) \\<subseteq> V'\n\ngoal (1 subgoal):\n 1. (\\<And>k1.\n        ldropn n P $ k1 \\<notin> V' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis lset_lnth subsetI)"], ["proof (state)\nthis:\n  ldropn n P $ k1 \\<notin> V'\n\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "define k2 where \"k2 = k1 + n\""], ["proof (state)\nthis:\n  k2 = k1 + n\n\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "interpret vmc_path G \"ldropn k2 P\" \"P $ k2\" p \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path G (ldropn k2 P) (P $ k2) p \\<sigma>", "using vmc_path_ldropn infinite_small_llength \\<open>\\<not>lfinite P\\<close>"], ["proof (prove)\nusing this:\n  enat ?n < llength P \\<Longrightarrow>\n  vmc_path G (ldropn ?n P) (P $ ?n) p \\<sigma>\n  \\<not> lfinite ?xs \\<Longrightarrow> enat ?n < llength ?xs\n  \\<not> lfinite P\n\ngoal (1 subgoal):\n 1. vmc_path G (ldropn k2 P) (P $ k2) p \\<sigma>", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "have \"P $ k2 \\<notin> V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P $ k2 \\<notin> V'", "unfolding k2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P $ k1 + n \\<notin> V'", "using k1 lnth_ldropn infinite_small_llength[OF \\<open>\\<not>lfinite P\\<close>]"], ["proof (prove)\nusing this:\n  ldropn n P $ k1 \\<notin> V'\n  enat (?n + ?m) < llength ?xs \\<Longrightarrow>\n  ldropn ?n ?xs $ ?m = ?xs $ ?m + ?n\n  enat ?n < llength P\n\ngoal (1 subgoal):\n 1. P $ k1 + n \\<notin> V'", "by simp"], ["proof (state)\nthis:\n  P $ k2 \\<notin> V'\n\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "hence \"P $ k2 \\<in> attractor p K\""], ["proof (prove)\nusing this:\n  P $ k2 \\<notin> V'\n\ngoal (1 subgoal):\n 1. P $ k2 \\<in> attractor p K", "using \\<open>\\<not>lfinite P\\<close> \\<open>lset P \\<subseteq> V - W1\\<close>"], ["proof (prove)\nusing this:\n  P $ k2 \\<notin> V'\n  \\<not> lfinite P\n  lset P \\<subseteq> V - W1\n\ngoal (1 subgoal):\n 1. P $ k2 \\<in> attractor p K", "by (metis DiffI U_def V'_def lset_nth_member_inf)"], ["proof (state)\nthis:\n  P $ k2 \\<in> attractor p K\n\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "then"], ["proof (chain)\npicking this:\n  P $ k2 \\<in> attractor p K", "obtain k3 where k3: \"ldropn k2 P $ k3 \\<in> K\""], ["proof (prove)\nusing this:\n  P $ k2 \\<in> attractor p K\n\ngoal (1 subgoal):\n 1. (\\<And>k3.\n        ldropn k2 P $ k3 \\<in> K \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<sigma>_attracts strategy_attractsE"], ["proof (prove)\nusing this:\n  P $ k2 \\<in> attractor p K\n  strategy_attracts p \\<sigma> (attractor p K) K\n  \\<lbrakk>strategy_attracts p \\<sigma> ?A ?W; P $ k2 \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> G'.visits_via (ldropn k2 P) ?A ?W\n\ngoal (1 subgoal):\n 1. (\\<And>k3.\n        ldropn k2 P $ k3 \\<in> K \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding G'.visits_via_def"], ["proof (prove)\nusing this:\n  P $ k2 \\<in> attractor p K\n  strategy_attracts p \\<sigma> (attractor p K) K\n  \\<lbrakk>strategy_attracts p \\<sigma> ?A ?W; P $ k2 \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n.\n                       enat n < llength (ldropn k2 P) \\<and>\n                       ldropn k2 P $ n \\<in> ?W \\<and>\n                       lset (ltake (enat n) (ldropn k2 P)) \\<subseteq> ?A\n\ngoal (1 subgoal):\n 1. (\\<And>k3.\n        ldropn k2 P $ k3 \\<in> K \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ldropn k2 P $ k3 \\<in> K\n\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "define k4 where \"k4 = k3 + k2\""], ["proof (state)\nthis:\n  k4 = k3 + k2\n\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "hence \"P $ k4 \\<in> K\""], ["proof (prove)\nusing this:\n  k4 = k3 + k2\n\ngoal (1 subgoal):\n 1. P $ k4 \\<in> K", "using k3 lnth_ldropn infinite_small_llength[OF \\<open>\\<not>lfinite P\\<close>]"], ["proof (prove)\nusing this:\n  k4 = k3 + k2\n  ldropn k2 P $ k3 \\<in> K\n  enat (?n + ?m) < llength ?xs \\<Longrightarrow>\n  ldropn ?n ?xs $ ?m = ?xs $ ?m + ?n\n  enat ?n < llength P\n\ngoal (1 subgoal):\n 1. P $ k4 \\<in> K", "by simp"], ["proof (state)\nthis:\n  P $ k4 \\<in> K\n\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "moreover"], ["proof (state)\nthis:\n  P $ k4 \\<in> K\n\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "have \"k4 \\<ge> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> k4", "unfolding k4_def k2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> k3 + (k1 + n)", "using le_add2 le_trans"], ["proof (prove)\nusing this:\n  ?n \\<le> ?m + ?n\n  \\<lbrakk>?i \\<le> ?j; ?j \\<le> ?k\\<rbrakk> \\<Longrightarrow> ?i \\<le> ?k\n\ngoal (1 subgoal):\n 1. n \\<le> k3 + (k1 + n)", "by blast"], ["proof (state)\nthis:\n  n \\<le> k4\n\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "moreover"], ["proof (state)\nthis:\n  n \\<le> k4\n\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "have \"ldropn n P $ k4 - n = P $ (k4 - n) + n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ldropn n P $ k4 - n = P $ k4 - n + n", "using lnth_ldropn infinite_small_llength \\<open>\\<not>lfinite P\\<close>"], ["proof (prove)\nusing this:\n  enat (?n + ?m) < llength ?xs \\<Longrightarrow>\n  ldropn ?n ?xs $ ?m = ?xs $ ?m + ?n\n  \\<not> lfinite ?xs \\<Longrightarrow> enat ?n < llength ?xs\n  \\<not> lfinite P\n\ngoal (1 subgoal):\n 1. ldropn n P $ k4 - n = P $ k4 - n + n", "by blast"], ["proof (state)\nthis:\n  ldropn n P $ k4 - n = P $ k4 - n + n\n\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "ultimately"], ["proof (chain)\npicking this:\n  P $ k4 \\<in> K\n  n \\<le> k4\n  ldropn n P $ k4 - n = P $ k4 - n + n", "have \"ldropn n P $ k4 - n \\<in> K\""], ["proof (prove)\nusing this:\n  P $ k4 \\<in> K\n  n \\<le> k4\n  ldropn n P $ k4 - n = P $ k4 - n + n\n\ngoal (1 subgoal):\n 1. ldropn n P $ k4 - n \\<in> K", "by simp"], ["proof (state)\nthis:\n  ldropn n P $ k4 - n \\<in> K\n\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "hence \"lset (ldropn n P) \\<inter> K \\<noteq> {}\""], ["proof (prove)\nusing this:\n  ldropn n P $ k4 - n \\<in> K\n\ngoal (1 subgoal):\n 1. lset (ldropn n P) \\<inter> K \\<noteq> {}", "using \\<open>\\<not>lfinite P\\<close> lfinite_ldropn in_lset_conv_lnth[of \"ldropn n P $ k4 - n\"]"], ["proof (prove)\nusing this:\n  ldropn n P $ k4 - n \\<in> K\n  \\<not> lfinite P\n  lfinite (ldropn ?n ?xs) = lfinite ?xs\n  (ldropn n P $ k4 - n \\<in> lset ?xs) =\n  (\\<exists>na. enat na < llength ?xs \\<and> ?xs $ na = ldropn n P $ k4 - n)\n\ngoal (1 subgoal):\n 1. lset (ldropn n P) \\<inter> K \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  lset (ldropn n P) \\<inter> K \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>n. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "thus \"min_prio \\<in> lset (ldropn n (lmap \\<omega> P))\""], ["proof (prove)\nusing this:\n  lset (ldropn n P) \\<inter> K \\<noteq> {}\n\ngoal (1 subgoal):\n 1. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "unfolding K_def"], ["proof (prove)\nusing this:\n  lset (ldropn n P) \\<inter> (U \\<inter> \\<omega> -` {min_prio}) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. min_prio \\<in> lset (ldropn n (lmap \\<omega> P))", "by auto"], ["proof (state)\nthis:\n  min_prio \\<in> lset (ldropn n (lmap \\<omega> P))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  min_prio \\<in> path_inf_priorities P\n\ngoal (1 subgoal):\n 1. \\<nexists>n. lset (ldropn n P) \\<subseteq> V' \\<Longrightarrow>\n    winning_path p P", "thus ?thesis"], ["proof (prove)\nusing this:\n  min_prio \\<in> path_inf_priorities P\n\ngoal (1 subgoal):\n 1. winning_path p P", "unfolding winning_path_def"], ["proof (prove)\nusing this:\n  min_prio \\<in> path_inf_priorities P\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<and>\n    (\\<exists>a\\<in>path_inf_priorities P.\n        (\\<forall>b\\<in>path_inf_priorities P. a \\<le> b) \\<and>\n        (if p = Even then even else odd) a) \\<or>\n    \\<not> lnull P \\<and> lfinite P \\<and> llast P \\<in> VV p** \\<or>\n    lnull P \\<and> p = Even", "using path_inf_priorities_at_least_min_prio[OF P_valid, folded min_prio_def]\n              \\<open>winning_priority p min_prio\\<close> \\<open>\\<not>lfinite P\\<close>"], ["proof (prove)\nusing this:\n  min_prio \\<in> path_inf_priorities P\n  ?a \\<in> path_inf_priorities P \\<Longrightarrow> min_prio \\<le> ?a\n  (if p = Even then even else odd) min_prio\n  \\<not> lfinite P\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<and>\n    (\\<exists>a\\<in>path_inf_priorities P.\n        (\\<forall>b\\<in>path_inf_priorities P. a \\<le> b) \\<and>\n        (if p = Even then even else odd) a) \\<or>\n    \\<not> lnull P \\<and> lfinite P \\<and> llast P \\<in> VV p** \\<or>\n    lnull P \\<and> p = Even", "by blast"], ["proof (state)\nthis:\n  winning_path p P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  winning_path p P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>v\\<in>V - W1. winning_strategy p \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "hence \"\\<forall>v \\<in> V. \\<exists>p \\<sigma>. strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>V - W1. winning_strategy p \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V.\n       \\<exists>p \\<sigma>.\n          strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v", "unfolding W1_def winning_region_def"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>V -\n                 {v \\<in> V.\n                  \\<exists>\\<sigma>.\n                     strategy p** \\<sigma> \\<and>\n                     winning_strategy p** \\<sigma> v}.\n     winning_strategy p \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V.\n       \\<exists>p \\<sigma>.\n          strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v", "using \\<open>strategy p \\<sigma>\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>V -\n                 {v \\<in> V.\n                  \\<exists>\\<sigma>.\n                     strategy p** \\<sigma> \\<and>\n                     winning_strategy p** \\<sigma> v}.\n     winning_strategy p \\<sigma> v\n  strategy p \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>V.\n       \\<exists>p \\<sigma>.\n          strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v", "by blast"], ["proof (state)\nthis:\n  \\<forall>v\\<in>V.\n     \\<exists>p \\<sigma>.\n        strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "hence \"\\<exists>p \\<sigma>. strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>V.\n     \\<exists>p \\<sigma>.\n        strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<exists>p \\<sigma>.\n       strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v", "using \\<open>v \\<in> V\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>V.\n     \\<exists>p \\<sigma>.\n        strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. \\<exists>p \\<sigma>.\n       strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v", "by simp"], ["proof (state)\nthis:\n  \\<exists>p \\<sigma>.\n     strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>p \\<sigma>.\n     strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "unfolding winning_region_def"], ["proof (prove)\nusing this:\n  \\<exists>p \\<sigma>.\n     strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       v \\<in> {v \\<in> V.\n                \\<exists>\\<sigma>.\n                   strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v}", "using \\<open>v \\<in> V\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>p \\<sigma>.\n     strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v\n  v \\<in> V\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       v \\<in> {v \\<in> V.\n                \\<exists>\\<sigma>.\n                   strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v}", "by blast"], ["proof (state)\nthis:\n  \\<exists>p. v \\<in> winning_region p\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Positional Determinacy without Deadends\\<close>"], ["", "theorem positional_strategy_exists_without_deadends:\n  assumes \"v \\<in> V\" \"\\<And>v. v \\<in> V \\<Longrightarrow> \\<not>deadend v\"\n  shows \"\\<exists>p. v \\<in> winning_region p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "using assms ParityGame_axioms"], ["proof (prove)\nusing this:\n  v \\<in> V\n  ?v \\<in> V \\<Longrightarrow> \\<not> deadend ?v\n  ParityGame G\n\ngoal (1 subgoal):\n 1. \\<exists>p. v \\<in> winning_region p", "by (induct \"card (\\<omega> ` V)\" arbitrary: G v rule: nat_less_induct)\n     (rule ParityGame.positional_strategy_induction_step, simp_all)"], ["", "subsection \\<open>Positional Determinacy with Deadends\\<close>"], ["", "text \\<open>\n  Prove a stronger version of the previous theorem: Allow deadends.\n\\<close>"], ["", "theorem positional_strategy_exists:\n  assumes \"v0 \\<in> V\"\n  shows \"\\<exists>p. v0 \\<in> winning_region p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "define A where \"A = attractor p (deadends p**)\""], ["proof (state)\nthis:\n  A = attractor p (deadends p**)\n\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "assume v0_in_attractor: \"v0 \\<in> attractor p (deadends p**)\""], ["proof (state)\nthis:\n  v0 \\<in> attractor p (deadends p**)\n\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "then"], ["proof (chain)\npicking this:\n  v0 \\<in> attractor p (deadends p**)", "obtain \\<sigma> where \\<sigma>: \"strategy p \\<sigma>\" \"strategy_attracts p \\<sigma> A (deadends p**)\""], ["proof (prove)\nusing this:\n  v0 \\<in> attractor p (deadends p**)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<lbrakk>strategy p \\<sigma>;\n         strategy_attracts p \\<sigma> A (deadends p**)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using attractor_has_strategy[of \"deadends p**\" \"p\"] A_def deadends_in_V"], ["proof (prove)\nusing this:\n  v0 \\<in> attractor p (deadends p**)\n  deadends p** \\<subseteq> V \\<Longrightarrow>\n  \\<exists>\\<sigma>.\n     strategy p \\<sigma> \\<and>\n     strategy_attracts p \\<sigma> (attractor p (deadends p**))\n      (deadends p**)\n  A = attractor p (deadends p**)\n  deadends ?p \\<subseteq> V\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<lbrakk>strategy p \\<sigma>;\n         strategy_attracts p \\<sigma> A (deadends p**)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  strategy p \\<sigma>\n  strategy_attracts p \\<sigma> A (deadends p**)\n\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "have \"A \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> V", "using A_def"], ["proof (prove)\nusing this:\n  A = attractor p (deadends p**)\n\ngoal (1 subgoal):\n 1. A \\<subseteq> V", "using attractor_in_V deadends_in_V"], ["proof (prove)\nusing this:\n  A = attractor p (deadends p**)\n  ?W \\<subseteq> V \\<Longrightarrow> attractor ?p ?W \\<subseteq> V\n  deadends ?p \\<subseteq> V\n\ngoal (1 subgoal):\n 1. A \\<subseteq> V", "by blast"], ["proof (state)\nthis:\n  A \\<subseteq> V\n\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "hence \"A - deadends p** \\<subseteq> V\""], ["proof (prove)\nusing this:\n  A \\<subseteq> V\n\ngoal (1 subgoal):\n 1. A - deadends p** \\<subseteq> V", "by auto"], ["proof (state)\nthis:\n  A - deadends p** \\<subseteq> V\n\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "have \"winning_strategy p \\<sigma> v0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma> v0", "proof (unfold winning_strategy_def, intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P. vmc_path G P v0 p \\<sigma> \\<Longrightarrow> winning_path p P", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P. vmc_path G P v0 p \\<sigma> \\<Longrightarrow> winning_path p P", "assume \"vmc_path G P v0 p \\<sigma>\""], ["proof (state)\nthis:\n  vmc_path G P v0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>P. vmc_path G P v0 p \\<sigma> \\<Longrightarrow> winning_path p P", "then"], ["proof (chain)\npicking this:\n  vmc_path G P v0 p \\<sigma>", "interpret vmc_path G P v0 p \\<sigma>"], ["proof (prove)\nusing this:\n  vmc_path G P v0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. vmc_path G P v0 p \\<sigma>", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P. vmc_path G P v0 p \\<sigma> \\<Longrightarrow> winning_path p P", "show \"winning_path p P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_path p P", "using visits_deadend[of \"p**\"] \\<sigma>(2) strategy_attracts_lset v0_in_attractor"], ["proof (prove)\nusing this:\n  lset P \\<inter> deadends p** \\<noteq> {} \\<Longrightarrow>\n  winning_path p**** P\n  strategy_attracts p \\<sigma> A (deadends p**)\n  \\<lbrakk>strategy_attracts p \\<sigma> ?A ?W; v0 \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> lset P \\<inter> ?W \\<noteq> {}\n  v0 \\<in> attractor p (deadends p**)\n\ngoal (1 subgoal):\n 1. winning_path p P", "unfolding A_def"], ["proof (prove)\nusing this:\n  lset P \\<inter> deadends p** \\<noteq> {} \\<Longrightarrow>\n  winning_path p**** P\n  strategy_attracts p \\<sigma> (attractor p (deadends p**)) (deadends p**)\n  \\<lbrakk>strategy_attracts p \\<sigma> ?A ?W; v0 \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> lset P \\<inter> ?W \\<noteq> {}\n  v0 \\<in> attractor p (deadends p**)\n\ngoal (1 subgoal):\n 1. winning_path p P", "by simp"], ["proof (state)\nthis:\n  winning_path p P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  winning_strategy p \\<sigma> v0\n\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "hence \"\\<exists>p \\<sigma>. strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v0\""], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma> v0\n\ngoal (1 subgoal):\n 1. \\<exists>p \\<sigma>.\n       strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v0", "using \\<sigma>"], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma> v0\n  strategy p \\<sigma>\n  strategy_attracts p \\<sigma> A (deadends p**)\n\ngoal (1 subgoal):\n 1. \\<exists>p \\<sigma>.\n       strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v0", "by blast"], ["proof (state)\nthis:\n  \\<exists>p \\<sigma>.\n     strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v0\n\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "}"], ["proof (state)\nthis:\n  v0 \\<in> attractor ?p2 (deadends ?p2**) \\<Longrightarrow>\n  \\<exists>p \\<sigma>.\n     strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v0\n\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "note lemma_path_to_deadend = this"], ["proof (state)\nthis:\n  v0 \\<in> attractor ?p2 (deadends ?p2**) \\<Longrightarrow>\n  \\<exists>p \\<sigma>.\n     strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v0\n\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "define A where \"A p = attractor p (deadends p**)\" for p"], ["proof (state)\nthis:\n  A ?p = attractor ?p (deadends ?p**)\n\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "text \\<open>Remove the attractor sets of the sets of deadends.\\<close>"], ["proof (state)\nthis:\n  A ?p = attractor ?p (deadends ?p**)\n\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "define V' where \"V' = V - A Even - A Odd\""], ["proof (state)\nthis:\n  V' = V - A Even - A Odd\n\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "hence \"V' \\<subseteq> V\""], ["proof (prove)\nusing this:\n  V' = V - A Even - A Odd\n\ngoal (1 subgoal):\n 1. V' \\<subseteq> V", "by blast"], ["proof (state)\nthis:\n  V' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "assume \"v0 \\<in> V'\""], ["proof (state)\nthis:\n  v0 \\<in> V'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "define G' where \"G' = subgame V'\""], ["proof (state)\nthis:\n  G' = subgame V'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "interpret G': ParityGame G'"], ["proof (prove)\ngoal (1 subgoal):\n 1. ParityGame G'", "unfolding G'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ParityGame (subgame V')", "using subgame_ParityGame"], ["proof (prove)\nusing this:\n  ParityGame (subgame ?V')\n\ngoal (1 subgoal):\n 1. ParityGame (subgame V')", "."], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "have \"V\\<^bsub>G'\\<^esub> = V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V\\<^bsub>G'\\<^esub> = V'", "unfolding G'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. V\\<^bsub>subgame V'\\<^esub> = V'", "using \\<open>V' \\<subseteq> V\\<close>"], ["proof (prove)\nusing this:\n  V' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. V\\<^bsub>subgame V'\\<^esub> = V'", "by simp"], ["proof (state)\nthis:\n  V\\<^bsub>G'\\<^esub> = V'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "hence \"v0 \\<in> V\\<^bsub>G'\\<^esub>\""], ["proof (prove)\nusing this:\n  V\\<^bsub>G'\\<^esub> = V'\n\ngoal (1 subgoal):\n 1. v0 \\<in> V\\<^bsub>G'\\<^esub>", "using \\<open>v0 \\<in> V'\\<close>"], ["proof (prove)\nusing this:\n  V\\<^bsub>G'\\<^esub> = V'\n  v0 \\<in> V'\n\ngoal (1 subgoal):\n 1. v0 \\<in> V\\<^bsub>G'\\<^esub>", "by simp"], ["proof (state)\nthis:\n  v0 \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "moreover"], ["proof (state)\nthis:\n  v0 \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "have V'_no_deadends: \"\\<And>v. v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not>G'.deadend v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "assume \"v \\<in> V\\<^bsub>G'\\<^esub>\""], ["proof (state)\nthis:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "moreover"], ["proof (state)\nthis:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "have \"V' = V - A Even - A Even**\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V' = V - A Even - A Even**", "using V'_def"], ["proof (prove)\nusing this:\n  V' = V - A Even - A Odd\n\ngoal (1 subgoal):\n 1. V' = V - A Even - A Even**", "by simp"], ["proof (state)\nthis:\n  V' = V - A Even - A Even**\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend v", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n  V' = V - A Even - A Even**", "show \"\\<not>G'.deadend v\""], ["proof (prove)\nusing this:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n  V' = V - A Even - A Even**\n\ngoal (1 subgoal):\n 1. \\<not> G'.deadend v", "using subgame_without_deadends \\<open>v \\<in> V\\<^bsub>G'\\<^esub>\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> V\\<^bsub>G'\\<^esub>\n  V' = V - A Even - A Even**\n  \\<lbrakk>?V' =\n           V - attractor ?p (deadends ?p**) -\n           attractor ?p** (deadends ?p****);\n   ?v \\<in> V\\<^bsub>subgame ?V'\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> \\<not> \\<not> (\\<exists>w\n      \\<in>V\\<^bsub>subgame ?V'\\<^esub>.\n?v \\<rightarrow>\\<^bsub>subgame ?V'\\<^esub> w)\n  v \\<in> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> G'.deadend v", "unfolding A_def G'_def"], ["proof (prove)\nusing this:\n  v \\<in> V\\<^bsub>subgame V'\\<^esub>\n  V' =\n  V - attractor Even (deadends Even**) -\n  attractor Even** (deadends Even****)\n  \\<lbrakk>?V' =\n           V - attractor ?p (deadends ?p**) -\n           attractor ?p** (deadends ?p****);\n   ?v \\<in> V\\<^bsub>subgame ?V'\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> \\<not> \\<not> (\\<exists>w\n      \\<in>V\\<^bsub>subgame ?V'\\<^esub>.\n?v \\<rightarrow>\\<^bsub>subgame ?V'\\<^esub> w)\n  v \\<in> V\\<^bsub>subgame V'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                      v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)", "by blast"], ["proof (state)\nthis:\n  \\<not> G'.deadend v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend ?v\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "ultimately"], ["proof (chain)\npicking this:\n  v0 \\<in> V\\<^bsub>G'\\<^esub>\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend ?v", "obtain p \\<sigma> where \\<sigma>: \"G'.strategy p \\<sigma>\" \"G'.winning_strategy p \\<sigma> v0\""], ["proof (prove)\nusing this:\n  v0 \\<in> V\\<^bsub>G'\\<^esub>\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend ?v\n\ngoal (1 subgoal):\n 1. (\\<And>p \\<sigma>.\n        \\<lbrakk>G'.strategy p \\<sigma>;\n         G'.winning_strategy p \\<sigma> v0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using G'.positional_strategy_exists_without_deadends"], ["proof (prove)\nusing this:\n  v0 \\<in> V\\<^bsub>G'\\<^esub>\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend ?v\n  \\<lbrakk>?v \\<in> V\\<^bsub>G'\\<^esub>;\n   \\<And>v.\n      v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n      \\<not> G'.deadend v\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p. ?v \\<in> G'.winning_region p\n\ngoal (1 subgoal):\n 1. (\\<And>p \\<sigma>.\n        \\<lbrakk>G'.strategy p \\<sigma>;\n         G'.winning_strategy p \\<sigma> v0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding G'.winning_region_def"], ["proof (prove)\nusing this:\n  v0 \\<in> V\\<^bsub>G'\\<^esub>\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend ?v\n  \\<lbrakk>?v \\<in> V\\<^bsub>G'\\<^esub>;\n   \\<And>v.\n      v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n      \\<not> G'.deadend v\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p.\n                       ?v \\<in> {v \\<in> V\\<^bsub>G'\\<^esub>.\n                                 \\<exists>\\<sigma>.\n                                    G'.strategy p \\<sigma> \\<and>\n                                    G'.winning_strategy p \\<sigma> v}\n\ngoal (1 subgoal):\n 1. (\\<And>p \\<sigma>.\n        \\<lbrakk>G'.strategy p \\<sigma>;\n         G'.winning_strategy p \\<sigma> v0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  G'.strategy p \\<sigma>\n  G'.winning_strategy p \\<sigma> v0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "have V'_no_deadends': \"\\<And>v. v \\<in> V' \\<Longrightarrow> \\<not>deadend v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> V' \\<Longrightarrow> \\<not> deadend v", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> V' \\<Longrightarrow> \\<not> deadend v", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> V' \\<Longrightarrow> \\<not> deadend v", "assume \"v \\<in> V'\""], ["proof (state)\nthis:\n  v \\<in> V'\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> V' \\<Longrightarrow> \\<not> deadend v", "hence \"\\<not>G'.deadend v\""], ["proof (prove)\nusing this:\n  v \\<in> V'\n\ngoal (1 subgoal):\n 1. \\<not> G'.deadend v", "using V'_no_deadends \\<open>V' \\<subseteq> V\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> V'\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend ?v\n  V' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. \\<not> G'.deadend v", "unfolding G'_def"], ["proof (prove)\nusing this:\n  v \\<in> V'\n  ?v \\<in> V\\<^bsub>subgame V'\\<^esub> \\<Longrightarrow>\n  \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                    ?v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)\n  V' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                      v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)", "by auto"], ["proof (state)\nthis:\n  \\<not> G'.deadend v\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> V' \\<Longrightarrow> \\<not> deadend v", "thus \"\\<not>deadend v\""], ["proof (prove)\nusing this:\n  \\<not> G'.deadend v\n\ngoal (1 subgoal):\n 1. \\<not> deadend v", "unfolding G'_def"], ["proof (prove)\nusing this:\n  \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                    v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)\n\ngoal (1 subgoal):\n 1. \\<not> deadend v", "using \\<open>V' \\<subseteq> V\\<close>"], ["proof (prove)\nusing this:\n  \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                    v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)\n  V' \\<subseteq> V\n\ngoal (1 subgoal):\n 1. \\<not> deadend v", "by auto"], ["proof (state)\nthis:\n  \\<not> deadend v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?v \\<in> V' \\<Longrightarrow> \\<not> deadend ?v\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "obtain \\<sigma>_attr\n      where \\<sigma>_attr: \"strategy p \\<sigma>_attr\" \"strategy_attracts p \\<sigma>_attr (A p) (deadends p**)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>_attr.\n        \\<lbrakk>strategy p \\<sigma>_attr;\n         strategy_attracts p \\<sigma>_attr (A p) (deadends p**)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using attractor_has_strategy[OF deadends_in_V]"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>.\n     strategy ?p \\<sigma> \\<and>\n     strategy_attracts ?p \\<sigma> (attractor ?p (deadends ?p1))\n      (deadends ?p1)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>_attr.\n        \\<lbrakk>strategy p \\<sigma>_attr;\n         strategy_attracts p \\<sigma>_attr (A p) (deadends p**)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding A_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>.\n     strategy ?p \\<sigma> \\<and>\n     strategy_attracts ?p \\<sigma> (attractor ?p (deadends ?p1))\n      (deadends ?p1)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>_attr.\n        \\<lbrakk>strategy p \\<sigma>_attr;\n         strategy_attracts p \\<sigma>_attr (attractor p (deadends p**))\n          (deadends p**)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  strategy p \\<sigma>_attr\n  strategy_attracts p \\<sigma>_attr (A p) (deadends p**)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "define \\<sigma>' where \"\\<sigma>' = override_on \\<sigma> \\<sigma>_attr (A Even \\<union> A Odd)\""], ["proof (state)\nthis:\n  \\<sigma>' = override_on \\<sigma> \\<sigma>_attr (A Even \\<union> A Odd)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "have \\<sigma>'_is_\\<sigma>_on_V': \"\\<And>v. v \\<in> V' \\<Longrightarrow> \\<sigma>' v = \\<sigma> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> V' \\<Longrightarrow> \\<sigma>' v = \\<sigma> v", "unfolding V'_def \\<sigma>'_def A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> V - attractor Even (deadends Even**) -\n               attractor Odd (deadends Odd**) \\<Longrightarrow>\n       override_on \\<sigma> \\<sigma>_attr\n        (attractor Even (deadends Even**) \\<union>\n         attractor Odd (deadends Odd**))\n        v =\n       \\<sigma> v", "by (cases p) simp_all"], ["proof (state)\nthis:\n  ?v \\<in> V' \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "have \"strategy p \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p \\<sigma>'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. strategy p \\<sigma>'", "have \"\\<sigma>' = override_on \\<sigma>_attr \\<sigma> (UNIV - A Even - A Odd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>' = override_on \\<sigma>_attr \\<sigma> (UNIV - A Even - A Odd)", "unfolding \\<sigma>'_def override_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a.\n        if a \\<in> A Even \\<union> A Odd then \\<sigma>_attr a\n        else \\<sigma> a) =\n    (\\<lambda>a.\n        if a \\<in> UNIV - A Even - A Odd then \\<sigma> a\n        else \\<sigma>_attr a)", "by (rule ext) simp"], ["proof (state)\nthis:\n  \\<sigma>' = override_on \\<sigma>_attr \\<sigma> (UNIV - A Even - A Odd)\n\ngoal (1 subgoal):\n 1. strategy p \\<sigma>'", "moreover"], ["proof (state)\nthis:\n  \\<sigma>' = override_on \\<sigma>_attr \\<sigma> (UNIV - A Even - A Odd)\n\ngoal (1 subgoal):\n 1. strategy p \\<sigma>'", "have \"strategy p (override_on \\<sigma>_attr \\<sigma> V')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p (override_on \\<sigma>_attr \\<sigma> V')", "using valid_strategy_supergame \\<sigma>_attr(1) \\<sigma>(1) V'_no_deadends \\<open>V\\<^bsub>G'\\<^esub> = V'\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>strategy ?p ?\\<sigma>;\n   ParityGame.strategy (subgame ?V') ?p ?\\<sigma>';\n   \\<And>v.\n      v \\<in> ?V' \\<Longrightarrow>\n      \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame ?V'\\<^esub>.\n                        v \\<rightarrow>\\<^bsub>subgame ?V'\\<^esub>\n                        w)\\<rbrakk>\n  \\<Longrightarrow> strategy ?p (override_on ?\\<sigma> ?\\<sigma>' ?V')\n  strategy p \\<sigma>_attr\n  G'.strategy p \\<sigma>\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend ?v\n  V\\<^bsub>G'\\<^esub> = V'\n\ngoal (1 subgoal):\n 1. strategy p (override_on \\<sigma>_attr \\<sigma> V')", "unfolding G'_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>strategy ?p ?\\<sigma>;\n   ParityGame.strategy (subgame ?V') ?p ?\\<sigma>';\n   \\<And>v.\n      v \\<in> ?V' \\<Longrightarrow>\n      \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame ?V'\\<^esub>.\n                        v \\<rightarrow>\\<^bsub>subgame ?V'\\<^esub>\n                        w)\\<rbrakk>\n  \\<Longrightarrow> strategy ?p (override_on ?\\<sigma> ?\\<sigma>' ?V')\n  strategy p \\<sigma>_attr\n  ParityGame.strategy (subgame V') p \\<sigma>\n  ?v \\<in> V\\<^bsub>subgame V'\\<^esub> \\<Longrightarrow>\n  \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                    ?v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)\n  V\\<^bsub>subgame V'\\<^esub> = V'\n\ngoal (1 subgoal):\n 1. strategy p (override_on \\<sigma>_attr \\<sigma> V')", "by blast"], ["proof (state)\nthis:\n  strategy p (override_on \\<sigma>_attr \\<sigma> V')\n\ngoal (1 subgoal):\n 1. strategy p \\<sigma>'", "ultimately"], ["proof (chain)\npicking this:\n  \\<sigma>' = override_on \\<sigma>_attr \\<sigma> (UNIV - A Even - A Odd)\n  strategy p (override_on \\<sigma>_attr \\<sigma> V')", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<sigma>' = override_on \\<sigma>_attr \\<sigma> (UNIV - A Even - A Odd)\n  strategy p (override_on \\<sigma>_attr \\<sigma> V')\n\ngoal (1 subgoal):\n 1. strategy p \\<sigma>'", "by (simp add: valid_strategy_only_in_V V'_def override_on_def)"], ["proof (state)\nthis:\n  strategy p \\<sigma>'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  strategy p \\<sigma>'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "moreover"], ["proof (state)\nthis:\n  strategy p \\<sigma>'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "have \"winning_strategy p \\<sigma>' v0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' v0", "proof (rule winning_strategyI, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v0 p \\<sigma>';\n        \\<not> winning_path p P\\<rbrakk>\n       \\<Longrightarrow> False", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v0 p \\<sigma>';\n        \\<not> winning_path p P\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"vmc_path G P v0 p \\<sigma>'\""], ["proof (state)\nthis:\n  vmc_path G P v0 p \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v0 p \\<sigma>';\n        \\<not> winning_path p P\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  vmc_path G P v0 p \\<sigma>'", "interpret vmc_path G P v0 p \\<sigma>'"], ["proof (prove)\nusing this:\n  vmc_path G P v0 p \\<sigma>'\n\ngoal (1 subgoal):\n 1. vmc_path G P v0 p \\<sigma>'", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v0 p \\<sigma>';\n        \\<not> winning_path p P\\<rbrakk>\n       \\<Longrightarrow> False", "interpret vmc_path_no_deadend G P v0 p \\<sigma>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v0 p \\<sigma>'", "using V'_no_deadends' \\<open>v0 \\<in> V'\\<close>"], ["proof (prove)\nusing this:\n  ?v \\<in> V' \\<Longrightarrow> \\<not> deadend ?v\n  v0 \\<in> V'\n\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v0 p \\<sigma>'", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v0 p \\<sigma>';\n        \\<not> winning_path p P\\<rbrakk>\n       \\<Longrightarrow> False", "assume contra: \"\\<not>winning_path p P\""], ["proof (state)\nthis:\n  \\<not> winning_path p P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v0 p \\<sigma>';\n        \\<not> winning_path p P\\<rbrakk>\n       \\<Longrightarrow> False", "have \"lset P \\<subseteq> V'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset P \\<subseteq> V'", "proof (induct rule: vmc_path_lset_induction_closed_subset)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' v \\<in> V' \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> ?T\n 3. v0 \\<in> V'\n 4. lset P \\<inter> ?T = {}", "fix v"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' v \\<in> V' \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> ?T\n 3. v0 \\<in> V'\n 4. lset P \\<inter> ?T = {}", "assume \"v \\<in> V'\" \"\\<not>deadend v\" \"v \\<in> VV p\""], ["proof (state)\nthis:\n  v \\<in> V'\n  \\<not> deadend v\n  v \\<in> VV p\n\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' v \\<in> V' \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> ?T\n 3. v0 \\<in> V'\n 4. lset P \\<inter> ?T = {}", "hence \"v \\<in> G'.VV p\""], ["proof (prove)\nusing this:\n  v \\<in> V'\n  \\<not> deadend v\n  v \\<in> VV p\n\ngoal (1 subgoal):\n 1. v \\<in> G'.VV p", "unfolding G'_def"], ["proof (prove)\nusing this:\n  v \\<in> V'\n  \\<not> deadend v\n  v \\<in> VV p\n\ngoal (1 subgoal):\n 1. v \\<in> (if p = Even then V0\\<^bsub>subgame V'\\<^esub>\n             else V\\<^bsub>subgame V'\\<^esub> -\n                  V0\\<^bsub>subgame V'\\<^esub>)", "by (simp add: \\<open>v \\<in> V'\\<close>)"], ["proof (state)\nthis:\n  v \\<in> G'.VV p\n\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' v \\<in> V' \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> ?T\n 3. v0 \\<in> V'\n 4. lset P \\<inter> ?T = {}", "moreover"], ["proof (state)\nthis:\n  v \\<in> G'.VV p\n\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' v \\<in> V' \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> ?T\n 3. v0 \\<in> V'\n 4. lset P \\<inter> ?T = {}", "have \"\\<not>G'.deadend v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> G'.deadend v", "using V'_no_deadends \\<open>v \\<in> V'\\<close> \\<open>V\\<^bsub>G'\\<^esub> = V'\\<close>"], ["proof (prove)\nusing this:\n  ?v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow> \\<not> G'.deadend ?v\n  v \\<in> V'\n  V\\<^bsub>G'\\<^esub> = V'\n\ngoal (1 subgoal):\n 1. \\<not> G'.deadend v", "by blast"], ["proof (state)\nthis:\n  \\<not> G'.deadend v\n\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' v \\<in> V' \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> ?T\n 3. v0 \\<in> V'\n 4. lset P \\<inter> ?T = {}", "moreover"], ["proof (state)\nthis:\n  \\<not> G'.deadend v\n\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' v \\<in> V' \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> ?T\n 3. v0 \\<in> V'\n 4. lset P \\<inter> ?T = {}", "have \"G'.strategy p \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.strategy p \\<sigma>'", "using G'.valid_strategy_only_in_V \\<sigma>'_def \\<sigma>'_is_\\<sigma>_on_V' \\<sigma>(1) \\<open>V\\<^bsub>G'\\<^esub> = V'\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>G'.strategy ?p ?\\<sigma>;\n   \\<And>v.\n      v \\<in> V\\<^bsub>G'\\<^esub> \\<Longrightarrow>\n      ?\\<sigma> v = ?\\<sigma>' v\\<rbrakk>\n  \\<Longrightarrow> G'.strategy ?p ?\\<sigma>'\n  \\<sigma>' = override_on \\<sigma> \\<sigma>_attr (A Even \\<union> A Odd)\n  ?v \\<in> V' \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v\n  G'.strategy p \\<sigma>\n  V\\<^bsub>G'\\<^esub> = V'\n\ngoal (1 subgoal):\n 1. G'.strategy p \\<sigma>'", "by auto"], ["proof (state)\nthis:\n  G'.strategy p \\<sigma>'\n\ngoal (4 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' v \\<in> V' \\<union> ?T\n 2. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> ?T\n 3. v0 \\<in> V'\n 4. lset P \\<inter> ?T = {}", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> G'.VV p\n  \\<not> G'.deadend v\n  G'.strategy p \\<sigma>'", "show \"\\<sigma>' v \\<in> V' \\<union> A p\""], ["proof (prove)\nusing this:\n  v \\<in> G'.VV p\n  \\<not> G'.deadend v\n  G'.strategy p \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<sigma>' v \\<in> V' \\<union> A p", "using subgame_strategy_stays_in_subgame"], ["proof (prove)\nusing this:\n  v \\<in> G'.VV p\n  \\<not> G'.deadend v\n  G'.strategy p \\<sigma>'\n  \\<lbrakk>ParityGame.strategy (subgame ?V') ?p ?\\<sigma>;\n   ?v \\<in> (if ?p = Even then V0\\<^bsub>subgame ?V'\\<^esub>\n             else V\\<^bsub>subgame ?V'\\<^esub> -\n                  V0\\<^bsub>subgame ?V'\\<^esub>);\n   \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame ?V'\\<^esub>.\n                     ?v \\<rightarrow>\\<^bsub>subgame ?V'\\<^esub> w)\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma> ?v \\<in> ?V'\n\ngoal (1 subgoal):\n 1. \\<sigma>' v \\<in> V' \\<union> A p", "unfolding G'_def"], ["proof (prove)\nusing this:\n  v \\<in> (if p = Even then V0\\<^bsub>subgame V'\\<^esub>\n           else V\\<^bsub>subgame V'\\<^esub> - V0\\<^bsub>subgame V'\\<^esub>)\n  \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame V'\\<^esub>.\n                    v \\<rightarrow>\\<^bsub>subgame V'\\<^esub> w)\n  ParityGame.strategy (subgame V') p \\<sigma>'\n  \\<lbrakk>ParityGame.strategy (subgame ?V') ?p ?\\<sigma>;\n   ?v \\<in> (if ?p = Even then V0\\<^bsub>subgame ?V'\\<^esub>\n             else V\\<^bsub>subgame ?V'\\<^esub> -\n                  V0\\<^bsub>subgame ?V'\\<^esub>);\n   \\<not> \\<not> (\\<exists>w\\<in>V\\<^bsub>subgame ?V'\\<^esub>.\n                     ?v \\<rightarrow>\\<^bsub>subgame ?V'\\<^esub> w)\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma> ?v \\<in> ?V'\n\ngoal (1 subgoal):\n 1. \\<sigma>' v \\<in> V' \\<union> A p", "by blast"], ["proof (state)\nthis:\n  \\<sigma>' v \\<in> V' \\<union> A p\n\ngoal (3 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> A p\n 2. v0 \\<in> V'\n 3. lset P \\<inter> A p = {}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> A p\n 2. v0 \\<in> V'\n 3. lset P \\<inter> A p = {}", "fix v w"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> A p\n 2. v0 \\<in> V'\n 3. lset P \\<inter> A p = {}", "assume \"v \\<in> V'\" \"\\<not>deadend v\" \"v \\<in> VV p**\" \"v\\<rightarrow>w\""], ["proof (state)\nthis:\n  v \\<in> V'\n  \\<not> deadend v\n  v \\<in> VV p**\n  v \\<rightarrow> w\n\ngoal (3 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> A p\n 2. v0 \\<in> V'\n 3. lset P \\<inter> A p = {}", "have \"w \\<notin> A p**\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<notin> A p**", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<in> A p** \\<Longrightarrow> False", "assume \"w \\<in> A p**\""], ["proof (state)\nthis:\n  w \\<in> A p**\n\ngoal (1 subgoal):\n 1. w \\<in> A p** \\<Longrightarrow> False", "hence \"v \\<in> A p**\""], ["proof (prove)\nusing this:\n  w \\<in> A p**\n\ngoal (1 subgoal):\n 1. v \\<in> A p**", "unfolding A_def"], ["proof (prove)\nusing this:\n  w \\<in> attractor p** (deadends p****)\n\ngoal (1 subgoal):\n 1. v \\<in> attractor p** (deadends p****)", "using \\<open>v \\<in> VV p**\\<close> \\<open>v\\<rightarrow>w\\<close> attractor_set_VVp"], ["proof (prove)\nusing this:\n  w \\<in> attractor p** (deadends p****)\n  v \\<in> VV p**\n  v \\<rightarrow> w\n  \\<lbrakk>?v \\<in> VV ?p; ?v \\<rightarrow> ?w;\n   ?w \\<in> attractor ?p ?W\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> attractor ?p ?W\n\ngoal (1 subgoal):\n 1. v \\<in> attractor p** (deadends p****)", "by blast"], ["proof (state)\nthis:\n  v \\<in> A p**\n\ngoal (1 subgoal):\n 1. w \\<in> A p** \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  v \\<in> A p**\n\ngoal (1 subgoal):\n 1. False", "using \\<open>v \\<in> V'\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> A p**\n  v \\<in> V'\n\ngoal (1 subgoal):\n 1. False", "unfolding V'_def"], ["proof (prove)\nusing this:\n  v \\<in> A p**\n  v \\<in> V - A Even - A Odd\n\ngoal (1 subgoal):\n 1. False", "by (cases p) auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w \\<notin> A p**\n\ngoal (3 subgoals):\n 1. \\<And>v w.\n       \\<lbrakk>v \\<in> V'; \\<not> deadend v; v \\<in> VV p**;\n        v \\<rightarrow> w\\<rbrakk>\n       \\<Longrightarrow> w \\<in> V' \\<union> A p\n 2. v0 \\<in> V'\n 3. lset P \\<inter> A p = {}", "thus \"w \\<in> V' \\<union> A p\""], ["proof (prove)\nusing this:\n  w \\<notin> A p**\n\ngoal (1 subgoal):\n 1. w \\<in> V' \\<union> A p", "unfolding V'_def"], ["proof (prove)\nusing this:\n  w \\<notin> A p**\n\ngoal (1 subgoal):\n 1. w \\<in> V - A Even - A Odd \\<union> A p", "using \\<open>v\\<rightarrow>w\\<close>"], ["proof (prove)\nusing this:\n  w \\<notin> A p**\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. w \\<in> V - A Even - A Odd \\<union> A p", "by (cases p) auto"], ["proof (state)\nthis:\n  w \\<in> V' \\<union> A p\n\ngoal (2 subgoals):\n 1. v0 \\<in> V'\n 2. lset P \\<inter> A p = {}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. v0 \\<in> V'\n 2. lset P \\<inter> A p = {}", "show \"lset P \\<inter> A p = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset P \\<inter> A p = {}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. lset P \\<inter> A p \\<noteq> {} \\<Longrightarrow> False", "assume \"lset P \\<inter> A p \\<noteq> {}\""], ["proof (state)\nthis:\n  lset P \\<inter> A p \\<noteq> {}\n\ngoal (1 subgoal):\n 1. lset P \\<inter> A p \\<noteq> {} \\<Longrightarrow> False", "have \"strategy_attracts p (override_on \\<sigma>' \\<sigma>_attr (A p - deadends p**))\n                                    (A p)\n                                    (deadends p**)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy_attracts p\n     (override_on \\<sigma>' \\<sigma>_attr (A p - deadends p**)) (A p)\n     (deadends p**)", "using strategy_attracts_irrelevant_override[OF \\<sigma>_attr(2) \\<sigma>_attr(1) \\<open>strategy p \\<sigma>'\\<close>]"], ["proof (prove)\nusing this:\n  strategy_attracts p\n   (override_on \\<sigma>' \\<sigma>_attr (A p - deadends p**)) (A p)\n   (deadends p**)\n\ngoal (1 subgoal):\n 1. strategy_attracts p\n     (override_on \\<sigma>' \\<sigma>_attr (A p - deadends p**)) (A p)\n     (deadends p**)", "by blast"], ["proof (state)\nthis:\n  strategy_attracts p\n   (override_on \\<sigma>' \\<sigma>_attr (A p - deadends p**)) (A p)\n   (deadends p**)\n\ngoal (1 subgoal):\n 1. lset P \\<inter> A p \\<noteq> {} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  strategy_attracts p\n   (override_on \\<sigma>' \\<sigma>_attr (A p - deadends p**)) (A p)\n   (deadends p**)\n\ngoal (1 subgoal):\n 1. lset P \\<inter> A p \\<noteq> {} \\<Longrightarrow> False", "have \"override_on \\<sigma>' \\<sigma>_attr (A p - deadends p**) = \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. override_on \\<sigma>' \\<sigma>_attr (A p - deadends p**) = \\<sigma>'", "by (rule ext, unfold \\<sigma>'_def, cases p) (simp_all add: override_on_def)"], ["proof (state)\nthis:\n  override_on \\<sigma>' \\<sigma>_attr (A p - deadends p**) = \\<sigma>'\n\ngoal (1 subgoal):\n 1. lset P \\<inter> A p \\<noteq> {} \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  strategy_attracts p\n   (override_on \\<sigma>' \\<sigma>_attr (A p - deadends p**)) (A p)\n   (deadends p**)\n  override_on \\<sigma>' \\<sigma>_attr (A p - deadends p**) = \\<sigma>'", "have \"strategy_attracts p \\<sigma>' (A p) (deadends p**)\""], ["proof (prove)\nusing this:\n  strategy_attracts p\n   (override_on \\<sigma>' \\<sigma>_attr (A p - deadends p**)) (A p)\n   (deadends p**)\n  override_on \\<sigma>' \\<sigma>_attr (A p - deadends p**) = \\<sigma>'\n\ngoal (1 subgoal):\n 1. strategy_attracts p \\<sigma>' (A p) (deadends p**)", "by simp"], ["proof (state)\nthis:\n  strategy_attracts p \\<sigma>' (A p) (deadends p**)\n\ngoal (1 subgoal):\n 1. lset P \\<inter> A p \\<noteq> {} \\<Longrightarrow> False", "hence \"lset P \\<inter> deadends p** \\<noteq> {}\""], ["proof (prove)\nusing this:\n  strategy_attracts p \\<sigma>' (A p) (deadends p**)\n\ngoal (1 subgoal):\n 1. lset P \\<inter> deadends p** \\<noteq> {}", "using \\<open>lset P \\<inter> A p \\<noteq> {}\\<close> attracted_path[OF deadends_in_V]"], ["proof (prove)\nusing this:\n  strategy_attracts p \\<sigma>' (A p) (deadends p**)\n  lset P \\<inter> A p \\<noteq> {}\n  \\<lbrakk>strategy_attracts p \\<sigma>' ?A (deadends ?p1);\n   lset P \\<inter> ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> lset P \\<inter> deadends ?p1 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. lset P \\<inter> deadends p** \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  lset P \\<inter> deadends p** \\<noteq> {}\n\ngoal (1 subgoal):\n 1. lset P \\<inter> A p \\<noteq> {} \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  lset P \\<inter> deadends p** \\<noteq> {}\n\ngoal (1 subgoal):\n 1. False", "using contra visits_deadend[of \"p**\"]"], ["proof (prove)\nusing this:\n  lset P \\<inter> deadends p** \\<noteq> {}\n  \\<not> winning_path p P\n  lset P \\<inter> deadends p** \\<noteq> {} \\<Longrightarrow>\n  winning_path p**** P\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lset P \\<inter> A p = {}\n\ngoal (1 subgoal):\n 1. v0 \\<in> V'", "qed (insert \\<open>v0 \\<in> V'\\<close>)"], ["proof (state)\nthis:\n  lset P \\<subseteq> V'\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v0 p \\<sigma>';\n        \\<not> winning_path p P\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  lset P \\<subseteq> V'", "interpret vmc_path G' P v0 p \\<sigma>'"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> V'\n\ngoal (1 subgoal):\n 1. vmc_path G' P v0 p \\<sigma>'", "unfolding G'_def"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> V'\n\ngoal (1 subgoal):\n 1. vmc_path (subgame V') P v0 p \\<sigma>'", "using subgame_path_vmc_path[OF \\<open>V' \\<subseteq> V\\<close>]"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> V'\n  lset P \\<subseteq> V' \\<Longrightarrow>\n  vmc_path (subgame V') P v0 p \\<sigma>'\n\ngoal (1 subgoal):\n 1. vmc_path (subgame V') P v0 p \\<sigma>'", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v0 p \\<sigma>';\n        \\<not> winning_path p P\\<rbrakk>\n       \\<Longrightarrow> False", "have \"G'.path_conforms_with_strategy p P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p P \\<sigma>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p P \\<sigma>", "have \"\\<And>v. v \\<in> lset P \\<Longrightarrow> \\<sigma>' v = \\<sigma> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> lset P \\<Longrightarrow> \\<sigma>' v = \\<sigma> v", "using \\<sigma>'_is_\\<sigma>_on_V' \\<open>V\\<^bsub>G'\\<^esub> = V'\\<close> lset_P_V"], ["proof (prove)\nusing this:\n  ?v \\<in> V' \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v\n  V\\<^bsub>G'\\<^esub> = V'\n  lset P \\<subseteq> V\\<^bsub>G'\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> lset P \\<Longrightarrow> \\<sigma>' v = \\<sigma> v", "by blast"], ["proof (state)\nthis:\n  ?v \\<in> lset P \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v\n\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p P \\<sigma>", "thus \"G'.path_conforms_with_strategy p P \\<sigma>\""], ["proof (prove)\nusing this:\n  ?v \\<in> lset P \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v\n\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p P \\<sigma>", "using P_conforms G'.path_conforms_with_strategy_irrelevant_updates"], ["proof (prove)\nusing this:\n  ?v \\<in> lset P \\<Longrightarrow> \\<sigma>' ?v = \\<sigma> ?v\n  G'.path_conforms_with_strategy p P \\<sigma>'\n  \\<lbrakk>G'.path_conforms_with_strategy ?p ?P ?\\<sigma>;\n   \\<And>v.\n      v \\<in> lset ?P \\<Longrightarrow> ?\\<sigma> v = ?\\<sigma>' v\\<rbrakk>\n  \\<Longrightarrow> G'.path_conforms_with_strategy ?p ?P ?\\<sigma>'\n\ngoal (1 subgoal):\n 1. G'.path_conforms_with_strategy p P \\<sigma>", "by blast"], ["proof (state)\nthis:\n  G'.path_conforms_with_strategy p P \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G'.path_conforms_with_strategy p P \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v0 p \\<sigma>';\n        \\<not> winning_path p P\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  G'.path_conforms_with_strategy p P \\<sigma>", "interpret vmc_path G' P v0 p \\<sigma>"], ["proof (prove)\nusing this:\n  G'.path_conforms_with_strategy p P \\<sigma>\n\ngoal (1 subgoal):\n 1. vmc_path G' P v0 p \\<sigma>", "using conforms_to_another_strategy"], ["proof (prove)\nusing this:\n  G'.path_conforms_with_strategy p P \\<sigma>\n  G'.path_conforms_with_strategy p P ?\\<sigma>' \\<Longrightarrow>\n  vmc_path G' P v0 p ?\\<sigma>'\n\ngoal (1 subgoal):\n 1. vmc_path G' P v0 p \\<sigma>", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v0 p \\<sigma>';\n        \\<not> winning_path p P\\<rbrakk>\n       \\<Longrightarrow> False", "have \"G'.winning_path p P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.winning_path p P", "using \\<sigma>(2)[unfolded G'.winning_strategy_def] vmc_path_axioms"], ["proof (prove)\nusing this:\n  \\<forall>P.\n     vmc_path G' P v0 p \\<sigma> \\<longrightarrow> G'.winning_path p P\n  vmc_path G' P v0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. G'.winning_path p P", "by blast"], ["proof (state)\nthis:\n  G'.winning_path p P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>vmc_path G P v0 p \\<sigma>';\n        \\<not> winning_path p P\\<rbrakk>\n       \\<Longrightarrow> False", "from \\<open>\\<not>winning_path p P\\<close>\n           G'.winning_path_supergame[OF this ParityGame_axioms, unfolded G'_def]\n           subgame_VV_subset[of \"p**\" V']\n           subgame_\\<omega>[of V']"], ["proof (chain)\npicking this:\n  \\<not> winning_path p P\n  \\<lbrakk>(if p** = Even then V0\\<^bsub>subgame V'\\<^esub>\n            else V\\<^bsub>subgame V'\\<^esub> - V0\\<^bsub>subgame V'\\<^esub>)\n           \\<subseteq> VV p**;\n   \\<omega>\\<^bsub>subgame V'\\<^esub> = \\<omega>\\<rbrakk>\n  \\<Longrightarrow> winning_path p P\n  (if p** = Even then V0\\<^bsub>subgame V'\\<^esub>\n   else V\\<^bsub>subgame V'\\<^esub> - V0\\<^bsub>subgame V'\\<^esub>)\n  \\<subseteq> VV p**\n  \\<omega>\\<^bsub>subgame V'\\<^esub> = \\<omega>", "show False"], ["proof (prove)\nusing this:\n  \\<not> winning_path p P\n  \\<lbrakk>(if p** = Even then V0\\<^bsub>subgame V'\\<^esub>\n            else V\\<^bsub>subgame V'\\<^esub> - V0\\<^bsub>subgame V'\\<^esub>)\n           \\<subseteq> VV p**;\n   \\<omega>\\<^bsub>subgame V'\\<^esub> = \\<omega>\\<rbrakk>\n  \\<Longrightarrow> winning_path p P\n  (if p** = Even then V0\\<^bsub>subgame V'\\<^esub>\n   else V\\<^bsub>subgame V'\\<^esub> - V0\\<^bsub>subgame V'\\<^esub>)\n  \\<subseteq> VV p**\n  \\<omega>\\<^bsub>subgame V'\\<^esub> = \\<omega>\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  winning_strategy p \\<sigma>' v0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "ultimately"], ["proof (chain)\npicking this:\n  strategy p \\<sigma>'\n  winning_strategy p \\<sigma>' v0", "show ?thesis"], ["proof (prove)\nusing this:\n  strategy p \\<sigma>'\n  winning_strategy p \\<sigma>' v0\n\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "unfolding winning_region_def"], ["proof (prove)\nusing this:\n  strategy p \\<sigma>'\n  winning_strategy p \\<sigma>' v0\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       v0 \\<in> {v \\<in> V.\n                 \\<exists>\\<sigma>.\n                    strategy p \\<sigma> \\<and>\n                    winning_strategy p \\<sigma> v}", "using \\<open>v0 \\<in> V\\<close>"], ["proof (prove)\nusing this:\n  strategy p \\<sigma>'\n  winning_strategy p \\<sigma>' v0\n  v0 \\<in> V\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       v0 \\<in> {v \\<in> V.\n                 \\<exists>\\<sigma>.\n                    strategy p \\<sigma> \\<and>\n                    winning_strategy p \\<sigma> v}", "by blast"], ["proof (state)\nthis:\n  \\<exists>p. v0 \\<in> winning_region p\n\ngoal (1 subgoal):\n 1. v0 \\<notin> V' \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v0 \\<notin> V' \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "assume \"v0 \\<notin> V'\""], ["proof (state)\nthis:\n  v0 \\<notin> V'\n\ngoal (1 subgoal):\n 1. v0 \\<notin> V' \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "then"], ["proof (chain)\npicking this:\n  v0 \\<notin> V'", "obtain p where \"v0 \\<in> attractor p (deadends p**)\""], ["proof (prove)\nusing this:\n  v0 \\<notin> V'\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        v0 \\<in> attractor p (deadends p**) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding V'_def A_def"], ["proof (prove)\nusing this:\n  v0 \\<notin> V - attractor Even (deadends Even**) -\n              attractor Odd (deadends Odd**)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        v0 \\<in> attractor p (deadends p**) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<open>v0 \\<in> V\\<close>"], ["proof (prove)\nusing this:\n  v0 \\<notin> V - attractor Even (deadends Even**) -\n              attractor Odd (deadends Odd**)\n  v0 \\<in> V\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        v0 \\<in> attractor p (deadends p**) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v0 \\<in> attractor p (deadends p**)\n\ngoal (1 subgoal):\n 1. v0 \\<notin> V' \\<Longrightarrow> \\<exists>p. v0 \\<in> winning_region p", "thus ?thesis"], ["proof (prove)\nusing this:\n  v0 \\<in> attractor p (deadends p**)\n\ngoal (1 subgoal):\n 1. \\<exists>p. v0 \\<in> winning_region p", "unfolding winning_region_def"], ["proof (prove)\nusing this:\n  v0 \\<in> attractor p (deadends p**)\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       v0 \\<in> {v \\<in> V.\n                 \\<exists>\\<sigma>.\n                    strategy p \\<sigma> \\<and>\n                    winning_strategy p \\<sigma> v}", "using lemma_path_to_deadend \\<open>v0 \\<in> V\\<close>"], ["proof (prove)\nusing this:\n  v0 \\<in> attractor p (deadends p**)\n  v0 \\<in> attractor ?p2 (deadends ?p2**) \\<Longrightarrow>\n  \\<exists>p \\<sigma>.\n     strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v0\n  v0 \\<in> V\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       v0 \\<in> {v \\<in> V.\n                 \\<exists>\\<sigma>.\n                    strategy p \\<sigma> \\<and>\n                    winning_strategy p \\<sigma> v}", "by blast"], ["proof (state)\nthis:\n  \\<exists>p. v0 \\<in> winning_region p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>p. v0 \\<in> winning_region p\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The Main Theorem: Positional Determinacy\\<close>"], ["", "text \\<open>\\label{subsec:positional_determinacy}\\<close>"], ["", "text \\<open>\n  Prove the main theorem: The winning regions of player \\Even and \\Odd are a partition of the set\n  of nodes @{term V}.\n\\<close>"], ["", "theorem partition_into_winning_regions:\n  shows \"V = winning_region Even \\<union> winning_region Odd\"\n    and \"winning_region Even \\<inter> winning_region Odd = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V = winning_region Even \\<union> winning_region Odd &&&\n    winning_region Even \\<inter> winning_region Odd = {}", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. V \\<subseteq> winning_region Even \\<union> winning_region Odd\n 2. winning_region Even \\<union> winning_region Odd \\<subseteq> V\n 3. winning_region Even \\<inter> winning_region Odd = {}", "show \"V \\<subseteq> winning_region Even \\<union> winning_region Odd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<subseteq> winning_region Even \\<union> winning_region Odd", "by (rule subsetI) (metis (full_types) Un_iff other_other_player positional_strategy_exists)"], ["proof (state)\nthis:\n  V \\<subseteq> winning_region Even \\<union> winning_region Odd\n\ngoal (2 subgoals):\n 1. winning_region Even \\<union> winning_region Odd \\<subseteq> V\n 2. winning_region Even \\<inter> winning_region Odd = {}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. winning_region Even \\<union> winning_region Odd \\<subseteq> V\n 2. winning_region Even \\<inter> winning_region Odd = {}", "show \"winning_region Even \\<union> winning_region Odd \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_region Even \\<union> winning_region Odd \\<subseteq> V", "by (rule subsetI) (meson Un_iff subsetCE winning_region_in_V)"], ["proof (state)\nthis:\n  winning_region Even \\<union> winning_region Odd \\<subseteq> V\n\ngoal (1 subgoal):\n 1. winning_region Even \\<inter> winning_region Odd = {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. winning_region Even \\<inter> winning_region Odd = {}", "show \"winning_region Even \\<inter> winning_region Odd = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_region Even \\<inter> winning_region Odd = {}", "using winning_strategy_only_for_one_player[of Even]"], ["proof (prove)\nusing this:\n  \\<lbrakk>strategy Even ?\\<sigma>; winning_strategy Even ?\\<sigma> ?v;\n   strategy Even** ?\\<sigma>'; winning_strategy Even** ?\\<sigma>' ?v;\n   ?v \\<in> V\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. winning_region Even \\<inter> winning_region Odd = {}", "unfolding winning_region_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>strategy Even ?\\<sigma>; winning_strategy Even ?\\<sigma> ?v;\n   strategy Even** ?\\<sigma>'; winning_strategy Even** ?\\<sigma>' ?v;\n   ?v \\<in> V\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. {v \\<in> V.\n     \\<exists>\\<sigma>.\n        strategy Even \\<sigma> \\<and>\n        winning_strategy Even \\<sigma> v} \\<inter>\n    {v \\<in> V.\n     \\<exists>\\<sigma>.\n        strategy Odd \\<sigma> \\<and> winning_strategy Odd \\<sigma> v} =\n    {}", "by auto"], ["proof (state)\nthis:\n  winning_region Even \\<inter> winning_region Odd = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "end \\<comment> \\<open>context ParityGame\\<close>"], ["", "end"]]}