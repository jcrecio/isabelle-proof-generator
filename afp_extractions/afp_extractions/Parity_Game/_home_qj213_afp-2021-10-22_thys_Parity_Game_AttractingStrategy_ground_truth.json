{"file_name": "/home/qj213/afp-2021-10-22/thys/Parity_Game/AttractingStrategy.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Parity_Game", "problem_names": ["lemma visits_via_monotone: \"\\<lbrakk> visits_via P A W; A \\<subseteq> A' \\<rbrakk> \\<Longrightarrow> visits_via P A' W\"", "lemma visits_via_visits: \"visits_via P A W \\<Longrightarrow> lset P \\<inter> W \\<noteq> {}\"", "lemma (in vmc_path) visits_via_trivial: \"v0 \\<in> W \\<Longrightarrow> visits_via P A W\"", "lemma visits_via_LCons:\n  assumes \"visits_via P A W\"\n  shows \"visits_via (LCons v0 P) (insert v0 A) W\"", "lemma (in vmc_path_no_deadend) visits_via_ltl:\n  assumes \"visits_via P A W\"\n    and v0: \"v0 \\<notin> W\"\n  shows \"visits_via (ltl P) A W\"", "lemma (in vm_path) visits_via_deadend:\n  assumes \"visits_via P A (deadends p)\"\n  shows \"winning_path p** P\"", "lemma (in vmc_path) strategy_attracts_viaE:\n  assumes \"strategy_attracts_via p \\<sigma> v0 A W\"\n  shows \"visits_via P A W\"", "lemma (in vmc_path) strategy_attracts_via_SucE:\n  assumes \"strategy_attracts_via p \\<sigma> v0 A W\" \"v0 \\<notin> W\"\n  shows \"\\<exists>n. enat (Suc n) < llength P \\<and> P $ Suc n \\<in> W \\<and> lset (ltake (enat (Suc n)) P) \\<subseteq> A\"", "lemma (in vmc_path) strategy_attracts_via_lset:\n  assumes \"strategy_attracts_via p \\<sigma> v0 A W\"\n  shows \"lset P \\<inter> W \\<noteq> {}\"", "lemma strategy_attracts_via_v0:\n  assumes \\<sigma>: \"strategy p \\<sigma>\" \"strategy_attracts_via p \\<sigma> v0 A W\"\n    and v0: \"v0 \\<in> V\"\n  shows \"v0 \\<in> A \\<union> W\"", "lemma strategy_attracts_viaI [intro]:\n  assumes \"\\<And>P. vmc_path G P v0 p \\<sigma> \\<Longrightarrow> visits_via P A W\"\n  shows \"strategy_attracts_via p \\<sigma> v0 A W\"", "lemma strategy_attracts_via_no_deadends:\n  assumes \"v \\<in> V\" \"v \\<in> A - W\" \"strategy_attracts_via p \\<sigma> v A W\"\n  shows \"\\<not>deadend v\"", "lemma attractor_strategy_on_extends:\n  \"\\<lbrakk> strategy_attracts_via p \\<sigma> v0 A W; A \\<subseteq> A' \\<rbrakk> \\<Longrightarrow> strategy_attracts_via p \\<sigma> v0 A' W\"", "lemma strategy_attracts_via_trivial: \"v0 \\<in> W \\<Longrightarrow> strategy_attracts_via p \\<sigma> v0 A W\"", "lemma strategy_attracts_via_successor:\n  assumes \\<sigma>: \"strategy p \\<sigma>\" \"strategy_attracts_via p \\<sigma> v0 A W\"\n    and v0: \"v0 \\<in> A - W\"\n    and w0: \"v0\\<rightarrow>w0\" \"v0 \\<in> VV p \\<Longrightarrow> \\<sigma> v0 = w0\"\n  shows \"strategy_attracts_via p \\<sigma> w0 A W\"", "lemma strategy_attracts_VVp:\n  assumes \\<sigma>: \"strategy p \\<sigma>\" \"strategy_attracts_via p \\<sigma> v0 A W\"\n    and v: \"v0 \\<in> A - W\" \"v0 \\<in> VV p\" \"\\<not>deadend v0\"\n  shows \"\\<sigma> v0 \\<in> A \\<union> W\"", "lemma strategy_attracts_VVpstar:\n  assumes \"strategy p \\<sigma>\" \"strategy_attracts_via p \\<sigma> v0 A W\"\n    and \"v0 \\<in> A - W\" \"v0 \\<notin> VV p\" \"w0 \\<in> V - A - W\"\n  shows \"\\<not>v0 \\<rightarrow> w0\"", "lemma (in vmc_path) strategy_attractsE:\n  assumes \"strategy_attracts p \\<sigma> A W\" \"v0 \\<in> A\"\n  shows \"visits_via P A W\"", "lemma strategy_attractsI [intro]:\n  assumes \"\\<And>P v. \\<lbrakk> v \\<in> A; vmc_path G P v p \\<sigma> \\<rbrakk> \\<Longrightarrow> visits_via P A W\"\n  shows \"strategy_attracts p \\<sigma> A W\"", "lemma (in vmc_path) strategy_attracts_lset:\n  assumes \"strategy_attracts p \\<sigma> A W\" \"v0 \\<in> A\"\n  shows \"lset P \\<inter> W \\<noteq> {}\"", "lemma strategy_attracts_empty [simp]: \"strategy_attracts p \\<sigma> {} W\"", "lemma strategy_attracts_invalid_path:\n  assumes P: \"P = LCons v (LCons w P')\" \"v \\<in> A - W\" \"w \\<notin> A \\<union> W\"\n  shows \"\\<not>visits_via P A W\" (is \"\\<not>?A\")", "lemma strategy_attracts_does_not_leave:\n  assumes \\<sigma>: \"strategy_attracts p \\<sigma> A W\" \"strategy p \\<sigma>\"\n    and v: \"v\\<rightarrow>w\" \"v \\<in> A - W\" \"w \\<notin> A \\<union> W\"\n  shows \"v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w\"", "lemma strategy_attracts_irrelevant_override:\n  assumes \"strategy_attracts p \\<sigma> A W\" \"strategy p \\<sigma>\" \"strategy p \\<sigma>'\"\n  shows \"strategy_attracts p (override_on \\<sigma>' \\<sigma> (A - W)) A W\"", "lemma strategy_attracts_trivial [simp]: \"strategy_attracts p \\<sigma> W W\"", "lemma (in vmc_path) attracted_path:\n  assumes \"W \\<subseteq> V\"\n    and \\<sigma>: \"strategy_attracts p \\<sigma> A W\"\n    and P_hits_A: \"lset P \\<inter> A \\<noteq> {}\"\n  shows \"lset P \\<inter> W \\<noteq> {}\"", "lemma attracted_strategy_step:\n  assumes \\<sigma>: \"strategy p \\<sigma>\" \"strategy_attracts p \\<sigma> A W\"\n    and v0: \"\\<not>deadend v0\" \"v0 \\<in> A - W\" \"v0 \\<in> VV p\"\n  shows \"\\<sigma> v0 \\<in> A \\<union> W\"", "lemma (in vmc_path_no_deadend) attracted_path_step:\n  assumes \\<sigma>: \"strategy_attracts p \\<sigma> A W\"\n    and v0: \"v0 \\<in> A - W\"\n  shows \"w0 \\<in> A \\<union> W\""], "translations": [["", "lemma visits_via_monotone: \"\\<lbrakk> visits_via P A W; A \\<subseteq> A' \\<rbrakk> \\<Longrightarrow> visits_via P A' W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>visits_via P A W; A \\<subseteq> A'\\<rbrakk>\n    \\<Longrightarrow> visits_via P A' W", "unfolding visits_via_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n.\n                enat n < llength P \\<and>\n                P $ n \\<in> W \\<and> lset (ltake (enat n) P) \\<subseteq> A;\n     A \\<subseteq> A'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n.\n                         enat n < llength P \\<and>\n                         P $ n \\<in> W \\<and>\n                         lset (ltake (enat n) P) \\<subseteq> A'", "by blast"], ["", "lemma visits_via_visits: \"visits_via P A W \\<Longrightarrow> lset P \\<inter> W \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. visits_via P A W \\<Longrightarrow> lset P \\<inter> W \\<noteq> {}", "unfolding visits_via_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       enat n < llength P \\<and>\n       P $ n \\<in> W \\<and>\n       lset (ltake (enat n) P) \\<subseteq> A \\<Longrightarrow>\n    lset P \\<inter> W \\<noteq> {}", "by (meson disjoint_iff_not_equal in_lset_conv_lnth)"], ["", "lemma (in vmc_path) visits_via_trivial: \"v0 \\<in> W \\<Longrightarrow> visits_via P A W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v0 \\<in> W \\<Longrightarrow> visits_via P A W", "unfolding visits_via_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v0 \\<in> W \\<Longrightarrow>\n    \\<exists>n.\n       enat n < llength P \\<and>\n       P $ n \\<in> W \\<and> lset (ltake (enat n) P) \\<subseteq> A", "apply (rule exI[of _ 0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. v0 \\<in> W \\<Longrightarrow>\n    enat 0 < llength P \\<and>\n    P $ 0 \\<in> W \\<and> lset (ltake (enat 0) P) \\<subseteq> A", "using zero_enat_def"], ["proof (prove)\nusing this:\n  0 = enat 0\n\ngoal (1 subgoal):\n 1. v0 \\<in> W \\<Longrightarrow>\n    enat 0 < llength P \\<and>\n    P $ 0 \\<in> W \\<and> lset (ltake (enat 0) P) \\<subseteq> A", "by auto"], ["", "lemma visits_via_LCons:\n  assumes \"visits_via P A W\"\n  shows \"visits_via (LCons v0 P) (insert v0 A) W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. visits_via (LCons v0 P) (insert v0 A) W", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. visits_via (LCons v0 P) (insert v0 A) W", "obtain n where n: \"enat n < llength P\" \"P $ n \\<in> W\" \"lset (ltake (enat n) P) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P; P $ n \\<in> W;\n         lset (ltake (enat n) P) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  visits_via P A W\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P; P $ n \\<in> W;\n         lset (ltake (enat n) P) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding visits_via_def"], ["proof (prove)\nusing this:\n  \\<exists>n.\n     enat n < llength P \\<and>\n     P $ n \\<in> W \\<and> lset (ltake (enat n) P) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P; P $ n \\<in> W;\n         lset (ltake (enat n) P) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  enat n < llength P\n  P $ n \\<in> W\n  lset (ltake (enat n) P) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. visits_via (LCons v0 P) (insert v0 A) W", "define P' where \"P' = LCons v0 P\""], ["proof (state)\nthis:\n  P' = LCons v0 P\n\ngoal (1 subgoal):\n 1. visits_via (LCons v0 P) (insert v0 A) W", "have \"enat (Suc n) < llength P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc n) < llength P'", "unfolding P'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc n) < llength (LCons v0 P)", "by (metis n(1) ldropn_Suc_LCons ldropn_Suc_conv_ldropn ldropn_eq_LConsD)"], ["proof (state)\nthis:\n  enat (Suc n) < llength P'\n\ngoal (1 subgoal):\n 1. visits_via (LCons v0 P) (insert v0 A) W", "moreover"], ["proof (state)\nthis:\n  enat (Suc n) < llength P'\n\ngoal (1 subgoal):\n 1. visits_via (LCons v0 P) (insert v0 A) W", "have \"P' $ Suc n \\<in> W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P' $ Suc n \\<in> W", "unfolding P'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. LCons v0 P $ Suc n \\<in> W", "by (simp add: n(2))"], ["proof (state)\nthis:\n  P' $ Suc n \\<in> W\n\ngoal (1 subgoal):\n 1. visits_via (LCons v0 P) (insert v0 A) W", "moreover"], ["proof (state)\nthis:\n  P' $ Suc n \\<in> W\n\ngoal (1 subgoal):\n 1. visits_via (LCons v0 P) (insert v0 A) W", "have \"lset (ltake (enat (Suc n)) P') \\<subseteq> insert v0 A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset (ltake (enat (Suc n)) P') \\<subseteq> insert v0 A", "using lset_ltake_Suc[of P' v0 n A]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> lnull P'; P' $ 0 = v0;\n   lset (ltake (enat n) (ltl P')) \\<subseteq> A\\<rbrakk>\n  \\<Longrightarrow> lset (ltake (enat (Suc n)) P') \\<subseteq> insert v0 A\n\ngoal (1 subgoal):\n 1. lset (ltake (enat (Suc n)) P') \\<subseteq> insert v0 A", "unfolding P'_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> lnull (LCons v0 P); LCons v0 P $ 0 = v0;\n   lset (ltake (enat n) (ltl (LCons v0 P))) \\<subseteq> A\\<rbrakk>\n  \\<Longrightarrow> lset (ltake (enat (Suc n)) (LCons v0 P))\n                    \\<subseteq> insert v0 A\n\ngoal (1 subgoal):\n 1. lset (ltake (enat (Suc n)) (LCons v0 P)) \\<subseteq> insert v0 A", "by (simp add: n(3))"], ["proof (state)\nthis:\n  lset (ltake (enat (Suc n)) P') \\<subseteq> insert v0 A\n\ngoal (1 subgoal):\n 1. visits_via (LCons v0 P) (insert v0 A) W", "ultimately"], ["proof (chain)\npicking this:\n  enat (Suc n) < llength P'\n  P' $ Suc n \\<in> W\n  lset (ltake (enat (Suc n)) P') \\<subseteq> insert v0 A", "show ?thesis"], ["proof (prove)\nusing this:\n  enat (Suc n) < llength P'\n  P' $ Suc n \\<in> W\n  lset (ltake (enat (Suc n)) P') \\<subseteq> insert v0 A\n\ngoal (1 subgoal):\n 1. visits_via (LCons v0 P) (insert v0 A) W", "unfolding visits_via_def P'_def"], ["proof (prove)\nusing this:\n  enat (Suc n) < llength (LCons v0 P)\n  LCons v0 P $ Suc n \\<in> W\n  lset (ltake (enat (Suc n)) (LCons v0 P)) \\<subseteq> insert v0 A\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       enat n < llength (LCons v0 P) \\<and>\n       LCons v0 P $ n \\<in> W \\<and>\n       lset (ltake (enat n) (LCons v0 P)) \\<subseteq> insert v0 A", "by blast"], ["proof (state)\nthis:\n  visits_via (LCons v0 P) (insert v0 A) W\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in vmc_path_no_deadend) visits_via_ltl:\n  assumes \"visits_via P A W\"\n    and v0: \"v0 \\<notin> W\"\n  shows \"visits_via (ltl P) A W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. visits_via (ltl P) A W", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. visits_via (ltl P) A W", "obtain n where n: \"enat n < llength P\" \"P $ n \\<in> W\" \"lset (ltake (enat n) P) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P; P $ n \\<in> W;\n         lset (ltake (enat n) P) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)[unfolded visits_via_def]"], ["proof (prove)\nusing this:\n  \\<exists>n.\n     enat n < llength P \\<and>\n     P $ n \\<in> W \\<and> lset (ltake (enat n) P) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P; P $ n \\<in> W;\n         lset (ltake (enat n) P) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  enat n < llength P\n  P $ n \\<in> W\n  lset (ltake (enat n) P) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. visits_via (ltl P) A W", "have \"n \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "using v0 n(2) DiffE"], ["proof (prove)\nusing this:\n  v0 \\<notin> W\n  P $ n \\<in> W\n  \\<lbrakk>?c \\<in> ?A - ?B;\n   \\<lbrakk>?c \\<in> ?A; ?c \\<notin> ?B\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "by force"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. visits_via (ltl P) A W", "then"], ["proof (chain)\npicking this:\n  n \\<noteq> 0", "obtain n' where n': \"Suc n' = n\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>n'. Suc n' = n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using nat.exhaust"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  \\<lbrakk>?y = 0 \\<Longrightarrow> ?P;\n   \\<And>x2. ?y = Suc x2 \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>n'. Suc n' = n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by metis"], ["proof (state)\nthis:\n  Suc n' = n\n\ngoal (1 subgoal):\n 1. visits_via (ltl P) A W", "have \"\\<exists>n. enat n < llength (ltl P) \\<and> (ltl P) $ n \\<in> W \\<and> lset (ltake (enat n) (ltl P)) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       enat n < llength (ltl P) \\<and>\n       ltl P $ n \\<in> W \\<and> lset (ltake (enat n) (ltl P)) \\<subseteq> A", "apply (rule exI[of _ n'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat n' < llength (ltl P) \\<and>\n    ltl P $ n' \\<in> W \\<and> lset (ltake (enat n') (ltl P)) \\<subseteq> A", "using n n' enat_Suc_ltl[of n' P] P_lnth_Suc lset_ltake_ltl[of n' P]"], ["proof (prove)\nusing this:\n  enat n < llength P\n  P $ n \\<in> W\n  lset (ltake (enat n) P) \\<subseteq> A\n  Suc n' = n\n  enat (Suc n') < llength P \\<Longrightarrow> enat n' < llength (ltl P)\n  P $ Suc ?n = ltl P $ ?n\n  lset (ltake (enat n') (ltl P)) \\<subseteq> lset (ltake (enat (Suc n')) P)\n\ngoal (1 subgoal):\n 1. enat n' < llength (ltl P) \\<and>\n    ltl P $ n' \\<in> W \\<and> lset (ltake (enat n') (ltl P)) \\<subseteq> A", "by auto"], ["proof (state)\nthis:\n  \\<exists>n.\n     enat n < llength (ltl P) \\<and>\n     ltl P $ n \\<in> W \\<and> lset (ltake (enat n) (ltl P)) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. visits_via (ltl P) A W", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>n.\n     enat n < llength (ltl P) \\<and>\n     ltl P $ n \\<in> W \\<and> lset (ltake (enat n) (ltl P)) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. visits_via (ltl P) A W", "using visits_via_def"], ["proof (prove)\nusing this:\n  \\<exists>n.\n     enat n < llength (ltl P) \\<and>\n     ltl P $ n \\<in> W \\<and> lset (ltake (enat n) (ltl P)) \\<subseteq> A\n  visits_via ?P ?A ?W \\<equiv>\n  \\<exists>n.\n     enat n < llength ?P \\<and>\n     ?P $ n \\<in> ?W \\<and> lset (ltake (enat n) ?P) \\<subseteq> ?A\n\ngoal (1 subgoal):\n 1. visits_via (ltl P) A W", "by blast"], ["proof (state)\nthis:\n  visits_via (ltl P) A W\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in vm_path) visits_via_deadend:\n  assumes \"visits_via P A (deadends p)\"\n  shows \"winning_path p** P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_path p** P", "using assms visits_via_visits visits_deadend"], ["proof (prove)\nusing this:\n  visits_via P A (deadends p)\n  visits_via ?P ?A ?W \\<Longrightarrow> lset ?P \\<inter> ?W \\<noteq> {}\n  lset P \\<inter> deadends ?p \\<noteq> {} \\<Longrightarrow>\n  winning_path ?p** P\n\ngoal (1 subgoal):\n 1. winning_path p** P", "by blast"], ["", "subsection \\<open>Attracting Strategy from a Single Node\\<close>"], ["", "text \\<open>\n  All @{term \\<sigma>}-paths starting from @{term v0} visit @{term W} and until then they stay in @{term A}.\n\\<close>"], ["", "definition strategy_attracts_via :: \"Player \\<Rightarrow> 'a Strategy \\<Rightarrow> 'a \\<Rightarrow> 'a set \\<Rightarrow> 'a set \\<Rightarrow> bool\" where\n  \"strategy_attracts_via p \\<sigma> v0 A W \\<equiv> \\<forall>P. vmc_path G P v0 p \\<sigma> \\<longrightarrow> visits_via P A W\""], ["", "lemma (in vmc_path) strategy_attracts_viaE:\n  assumes \"strategy_attracts_via p \\<sigma> v0 A W\"\n  shows \"visits_via P A W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. visits_via P A W", "using strategy_attracts_via_def assms vmc_path_axioms"], ["proof (prove)\nusing this:\n  strategy_attracts_via ?p ?\\<sigma> ?v0.0 ?A ?W \\<equiv>\n  \\<forall>P.\n     vmc_path G P ?v0.0 ?p ?\\<sigma> \\<longrightarrow> visits_via P ?A ?W\n  strategy_attracts_via p \\<sigma> v0 A W\n  vmc_path G P v0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. visits_via P A W", "by blast"], ["", "lemma (in vmc_path) strategy_attracts_via_SucE:\n  assumes \"strategy_attracts_via p \\<sigma> v0 A W\" \"v0 \\<notin> W\"\n  shows \"\\<exists>n. enat (Suc n) < llength P \\<and> P $ Suc n \\<in> W \\<and> lset (ltake (enat (Suc n)) P) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       enat (Suc n) < llength P \\<and>\n       P $ Suc n \\<in> W \\<and> lset (ltake (enat (Suc n)) P) \\<subseteq> A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       enat (Suc n) < llength P \\<and>\n       P $ Suc n \\<in> W \\<and> lset (ltake (enat (Suc n)) P) \\<subseteq> A", "obtain n where n: \"enat n < llength P\" \"P $ n \\<in> W\" \"lset (ltake (enat n) P) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P; P $ n \\<in> W;\n         lset (ltake (enat n) P) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using strategy_attracts_viaE[unfolded visits_via_def] assms(1)"], ["proof (prove)\nusing this:\n  strategy_attracts_via p \\<sigma> v0 ?A ?W \\<Longrightarrow>\n  \\<exists>n.\n     enat n < llength P \\<and>\n     P $ n \\<in> ?W \\<and> lset (ltake (enat n) P) \\<subseteq> ?A\n  strategy_attracts_via p \\<sigma> v0 A W\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P; P $ n \\<in> W;\n         lset (ltake (enat n) P) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  enat n < llength P\n  P $ n \\<in> W\n  lset (ltake (enat n) P) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       enat (Suc n) < llength P \\<and>\n       P $ Suc n \\<in> W \\<and> lset (ltake (enat (Suc n)) P) \\<subseteq> A", "have \"n \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "using assms(2) n(2)"], ["proof (prove)\nusing this:\n  v0 \\<notin> W\n  P $ n \\<in> W\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "by (metis P_0)"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       enat (Suc n) < llength P \\<and>\n       P $ Suc n \\<in> W \\<and> lset (ltake (enat (Suc n)) P) \\<subseteq> A", "thus ?thesis"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       enat (Suc n) < llength P \\<and>\n       P $ Suc n \\<in> W \\<and> lset (ltake (enat (Suc n)) P) \\<subseteq> A", "using n not0_implies_Suc"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  enat n < llength P\n  P $ n \\<in> W\n  lset (ltake (enat n) P) \\<subseteq> A\n  ?n \\<noteq> 0 \\<Longrightarrow> \\<exists>m. ?n = Suc m\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       enat (Suc n) < llength P \\<and>\n       P $ Suc n \\<in> W \\<and> lset (ltake (enat (Suc n)) P) \\<subseteq> A", "by blast"], ["proof (state)\nthis:\n  \\<exists>n.\n     enat (Suc n) < llength P \\<and>\n     P $ Suc n \\<in> W \\<and> lset (ltake (enat (Suc n)) P) \\<subseteq> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in vmc_path) strategy_attracts_via_lset:\n  assumes \"strategy_attracts_via p \\<sigma> v0 A W\"\n  shows \"lset P \\<inter> W \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset P \\<inter> W \\<noteq> {}", "using assms[THEN strategy_attracts_viaE, unfolded visits_via_def]"], ["proof (prove)\nusing this:\n  \\<exists>n.\n     enat n < llength P \\<and>\n     P $ n \\<in> W \\<and> lset (ltake (enat n) P) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. lset P \\<inter> W \\<noteq> {}", "by (meson disjoint_iff_not_equal lset_lnth_member subset_refl)"], ["", "lemma strategy_attracts_via_v0:\n  assumes \\<sigma>: \"strategy p \\<sigma>\" \"strategy_attracts_via p \\<sigma> v0 A W\"\n    and v0: \"v0 \\<in> V\"\n  shows \"v0 \\<in> A \\<union> W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v0 \\<in> A \\<union> W", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. v0 \\<in> A \\<union> W", "obtain P where \"vmc_path G P v0 p \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P.\n        vmc_path G P v0 p \\<sigma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using strategy_conforming_path_exists_single assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v0.0 \\<in> V; strategy ?p ?\\<sigma>;\n   \\<And>P.\n      vmc_path G P ?v0.0 ?p ?\\<sigma> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  strategy p \\<sigma>\n  strategy_attracts_via p \\<sigma> v0 A W\n  v0 \\<in> V\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        vmc_path G P v0 p \\<sigma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  vmc_path G P v0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. v0 \\<in> A \\<union> W", "then"], ["proof (chain)\npicking this:\n  vmc_path G P v0 p \\<sigma>", "interpret vmc_path G P v0 p \\<sigma>"], ["proof (prove)\nusing this:\n  vmc_path G P v0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. vmc_path G P v0 p \\<sigma>", "."], ["proof (state)\ngoal (1 subgoal):\n 1. v0 \\<in> A \\<union> W", "obtain n where n: \"enat n < llength P\" \"P $ n \\<in> W\" \"lset (ltake (enat n) P) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P; P $ n \\<in> W;\n         lset (ltake (enat n) P) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<sigma>(2)[unfolded strategy_attracts_via_def visits_via_def] vmc_path_axioms"], ["proof (prove)\nusing this:\n  \\<forall>P.\n     vmc_path G P v0 p \\<sigma> \\<longrightarrow>\n     (\\<exists>n.\n         enat n < llength P \\<and>\n         P $ n \\<in> W \\<and> lset (ltake (enat n) P) \\<subseteq> A)\n  vmc_path G P v0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P; P $ n \\<in> W;\n         lset (ltake (enat n) P) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  enat n < llength P\n  P $ n \\<in> W\n  lset (ltake (enat n) P) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. v0 \\<in> A \\<union> W", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. v0 \\<in> A \\<union> W", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> v0 \\<in> A \\<union> W\n 2. n \\<noteq> 0 \\<Longrightarrow> v0 \\<in> A \\<union> W", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> v0 \\<in> A \\<union> W\n 2. n \\<noteq> 0 \\<Longrightarrow> v0 \\<in> A \\<union> W", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. v0 \\<in> A \\<union> W", "using n(2)"], ["proof (prove)\nusing this:\n  n = 0\n  P $ n \\<in> W\n\ngoal (1 subgoal):\n 1. v0 \\<in> A \\<union> W", "by simp"], ["proof (state)\nthis:\n  v0 \\<in> A \\<union> W\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> v0 \\<in> A \\<union> W", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> v0 \\<in> A \\<union> W", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> v0 \\<in> A \\<union> W", "hence \"lhd (ltake (enat n) P) = lhd P\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lhd (ltake (enat n) P) = lhd P", "by (simp add: enat_0_iff(1))"], ["proof (state)\nthis:\n  lhd (ltake (enat n) P) = lhd P\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> v0 \\<in> A \\<union> W", "hence \"v0 \\<in> lset (ltake (enat n) P)\""], ["proof (prove)\nusing this:\n  lhd (ltake (enat n) P) = lhd P\n\ngoal (1 subgoal):\n 1. v0 \\<in> lset (ltake (enat n) P)", "by (metis \\<open>n \\<noteq> 0\\<close> P_not_null P_v0 enat_0_iff(1) llist.set_sel(1) ltake.disc(2))"], ["proof (state)\nthis:\n  v0 \\<in> lset (ltake (enat n) P)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> v0 \\<in> A \\<union> W", "thus ?thesis"], ["proof (prove)\nusing this:\n  v0 \\<in> lset (ltake (enat n) P)\n\ngoal (1 subgoal):\n 1. v0 \\<in> A \\<union> W", "using n(3)"], ["proof (prove)\nusing this:\n  v0 \\<in> lset (ltake (enat n) P)\n  lset (ltake (enat n) P) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. v0 \\<in> A \\<union> W", "by blast"], ["proof (state)\nthis:\n  v0 \\<in> A \\<union> W\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v0 \\<in> A \\<union> W\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary strategy_attracts_not_outside:\n  \"\\<lbrakk> v0 \\<in> V - A - W; strategy p \\<sigma> \\<rbrakk> \\<Longrightarrow> \\<not>strategy_attracts_via p \\<sigma> v0 A W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v0 \\<in> V - A - W; strategy p \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> \\<not> strategy_attracts_via p \\<sigma> v0 A W", "using strategy_attracts_via_v0"], ["proof (prove)\nusing this:\n  \\<lbrakk>strategy ?p ?\\<sigma>;\n   strategy_attracts_via ?p ?\\<sigma> ?v0.0 ?A ?W; ?v0.0 \\<in> V\\<rbrakk>\n  \\<Longrightarrow> ?v0.0 \\<in> ?A \\<union> ?W\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v0 \\<in> V - A - W; strategy p \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> \\<not> strategy_attracts_via p \\<sigma> v0 A W", "by blast"], ["", "lemma strategy_attracts_viaI [intro]:\n  assumes \"\\<And>P. vmc_path G P v0 p \\<sigma> \\<Longrightarrow> visits_via P A W\"\n  shows \"strategy_attracts_via p \\<sigma> v0 A W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma> v0 A W", "unfolding strategy_attracts_via_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P.\n       vmc_path G P v0 p \\<sigma> \\<longrightarrow> visits_via P A W", "using assms"], ["proof (prove)\nusing this:\n  vmc_path G ?P v0 p \\<sigma> \\<Longrightarrow> visits_via ?P A W\n\ngoal (1 subgoal):\n 1. \\<forall>P.\n       vmc_path G P v0 p \\<sigma> \\<longrightarrow> visits_via P A W", "by blast"], ["", "lemma strategy_attracts_via_no_deadends:\n  assumes \"v \\<in> V\" \"v \\<in> A - W\" \"strategy_attracts_via p \\<sigma> v A W\"\n  shows \"\\<not>deadend v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> deadend v", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. deadend v \\<Longrightarrow> False", "assume \"deadend v\""], ["proof (state)\nthis:\n  deadend v\n\ngoal (1 subgoal):\n 1. deadend v \\<Longrightarrow> False", "define P where [simp]: \"P = LCons v LNil\""], ["proof (state)\nthis:\n  P = LCons v LNil\n\ngoal (1 subgoal):\n 1. deadend v \\<Longrightarrow> False", "interpret vmc_path G P v p \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path G P v p \\<sigma>", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<not> lnull P\n 2. valid_path P\n 3. maximal_path P\n 4. lhd P = v\n 5. path_conforms_with_strategy p P \\<sigma>", "show \"valid_path P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_path P", "using \\<open>v \\<in> A - W\\<close> \\<open>v \\<in> V\\<close> valid_path_base'"], ["proof (prove)\nusing this:\n  v \\<in> A - W\n  v \\<in> V\n  ?v \\<in> V \\<Longrightarrow> valid_path (LCons ?v LNil)\n\ngoal (1 subgoal):\n 1. valid_path P", "by auto"], ["proof (state)\nthis:\n  valid_path P\n\ngoal (4 subgoals):\n 1. \\<not> lnull P\n 2. maximal_path P\n 3. lhd P = v\n 4. path_conforms_with_strategy p P \\<sigma>", "show \"maximal_path P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maximal_path P", "using \\<open>deadend v\\<close>"], ["proof (prove)\nusing this:\n  deadend v\n\ngoal (1 subgoal):\n 1. maximal_path P", "by (simp add: maximal_path.intros(2))"], ["proof (state)\nthis:\n  maximal_path P\n\ngoal (3 subgoals):\n 1. \\<not> lnull P\n 2. lhd P = v\n 3. path_conforms_with_strategy p P \\<sigma>", "show \"path_conforms_with_strategy p P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma>", "by (simp add: path_conforms_LCons_LNil)"], ["proof (state)\nthis:\n  path_conforms_with_strategy p P \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<not> lnull P\n 2. lhd P = v", "qed simp_all"], ["proof (state)\ngoal (1 subgoal):\n 1. deadend v \\<Longrightarrow> False", "have \"visits_via P A W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. visits_via P A W", "using assms(3) strategy_attracts_viaE"], ["proof (prove)\nusing this:\n  strategy_attracts_via p \\<sigma> v A W\n  strategy_attracts_via p \\<sigma> v ?A ?W \\<Longrightarrow>\n  visits_via P ?A ?W\n\ngoal (1 subgoal):\n 1. visits_via P A W", "by blast"], ["proof (state)\nthis:\n  visits_via P A W\n\ngoal (1 subgoal):\n 1. deadend v \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  visits_via P A W\n\ngoal (1 subgoal):\n 1. deadend v \\<Longrightarrow> False", "have \"llength P = eSuc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llength P = eSuc 0", "by simp"], ["proof (state)\nthis:\n  llength P = eSuc 0\n\ngoal (1 subgoal):\n 1. deadend v \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  visits_via P A W\n  llength P = eSuc 0", "have \"P $ 0 \\<in> W\""], ["proof (prove)\nusing this:\n  visits_via P A W\n  llength P = eSuc 0\n\ngoal (1 subgoal):\n 1. P $ 0 \\<in> W", "by (simp add: enat_0_iff(1) visits_via_def)"], ["proof (state)\nthis:\n  P $ 0 \\<in> W\n\ngoal (1 subgoal):\n 1. deadend v \\<Longrightarrow> False", "with \\<open>v \\<in> A - W\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> A - W\n  P $ 0 \\<in> W", "show False"], ["proof (prove)\nusing this:\n  v \\<in> A - W\n  P $ 0 \\<in> W\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma attractor_strategy_on_extends:\n  \"\\<lbrakk> strategy_attracts_via p \\<sigma> v0 A W; A \\<subseteq> A' \\<rbrakk> \\<Longrightarrow> strategy_attracts_via p \\<sigma> v0 A' W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>strategy_attracts_via p \\<sigma> v0 A W;\n     A \\<subseteq> A'\\<rbrakk>\n    \\<Longrightarrow> strategy_attracts_via p \\<sigma> v0 A' W", "unfolding strategy_attracts_via_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>P.\n                vmc_path G P v0 p \\<sigma> \\<longrightarrow>\n                visits_via P A W;\n     A \\<subseteq> A'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>P.\n                         vmc_path G P v0 p \\<sigma> \\<longrightarrow>\n                         visits_via P A' W", "using visits_via_monotone"], ["proof (prove)\nusing this:\n  \\<lbrakk>visits_via ?P ?A ?W; ?A \\<subseteq> ?A'\\<rbrakk>\n  \\<Longrightarrow> visits_via ?P ?A' ?W\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>P.\n                vmc_path G P v0 p \\<sigma> \\<longrightarrow>\n                visits_via P A W;\n     A \\<subseteq> A'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>P.\n                         vmc_path G P v0 p \\<sigma> \\<longrightarrow>\n                         visits_via P A' W", "by blast"], ["", "lemma strategy_attracts_via_trivial: \"v0 \\<in> W \\<Longrightarrow> strategy_attracts_via p \\<sigma> v0 A W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v0 \\<in> W \\<Longrightarrow> strategy_attracts_via p \\<sigma> v0 A W", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>v0 \\<in> W; vmc_path G P v0 p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> visits_via P A W", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>v0 \\<in> W; vmc_path G P v0 p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> visits_via P A W", "assume \"v0 \\<in> W\" \"vmc_path G P v0 p \\<sigma>\""], ["proof (state)\nthis:\n  v0 \\<in> W\n  vmc_path G P v0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>v0 \\<in> W; vmc_path G P v0 p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> visits_via P A W", "then"], ["proof (chain)\npicking this:\n  v0 \\<in> W\n  vmc_path G P v0 p \\<sigma>", "interpret vmc_path G P v0 p \\<sigma>"], ["proof (prove)\nusing this:\n  v0 \\<in> W\n  vmc_path G P v0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. vmc_path G P v0 p \\<sigma>", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>v0 \\<in> W; vmc_path G P v0 p \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> visits_via P A W", "show \"visits_via P A W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. visits_via P A W", "using visits_via_trivial"], ["proof (prove)\nusing this:\n  v0 \\<in> ?W \\<Longrightarrow> visits_via P ?A ?W\n\ngoal (1 subgoal):\n 1. visits_via P A W", "using \\<open>v0 \\<in> W\\<close>"], ["proof (prove)\nusing this:\n  v0 \\<in> ?W \\<Longrightarrow> visits_via P ?A ?W\n  v0 \\<in> W\n\ngoal (1 subgoal):\n 1. visits_via P A W", "by blast"], ["proof (state)\nthis:\n  visits_via P A W\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strategy_attracts_via_successor:\n  assumes \\<sigma>: \"strategy p \\<sigma>\" \"strategy_attracts_via p \\<sigma> v0 A W\"\n    and v0: \"v0 \\<in> A - W\"\n    and w0: \"v0\\<rightarrow>w0\" \"v0 \\<in> VV p \\<Longrightarrow> \\<sigma> v0 = w0\"\n  shows \"strategy_attracts_via p \\<sigma> w0 A W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma> w0 A W", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P. vmc_path G P w0 p \\<sigma> \\<Longrightarrow> visits_via P A W", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P. vmc_path G P w0 p \\<sigma> \\<Longrightarrow> visits_via P A W", "assume \"vmc_path G P w0 p \\<sigma>\""], ["proof (state)\nthis:\n  vmc_path G P w0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>P. vmc_path G P w0 p \\<sigma> \\<Longrightarrow> visits_via P A W", "then"], ["proof (chain)\npicking this:\n  vmc_path G P w0 p \\<sigma>", "interpret vmc_path G P w0 p \\<sigma>"], ["proof (prove)\nusing this:\n  vmc_path G P w0 p \\<sigma>\n\ngoal (1 subgoal):\n 1. vmc_path G P w0 p \\<sigma>", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P. vmc_path G P w0 p \\<sigma> \\<Longrightarrow> visits_via P A W", "define P' where [simp]: \"P' = LCons v0 P\""], ["proof (state)\nthis:\n  P' = LCons v0 P\n\ngoal (1 subgoal):\n 1. \\<And>P. vmc_path G P w0 p \\<sigma> \\<Longrightarrow> visits_via P A W", "then"], ["proof (chain)\npicking this:\n  P' = LCons v0 P", "interpret P': vmc_path G P' v0 p \\<sigma>"], ["proof (prove)\nusing this:\n  P' = LCons v0 P\n\ngoal (1 subgoal):\n 1. vmc_path G P' v0 p \\<sigma>", "using extension_valid_maximal_conforming w0"], ["proof (prove)\nusing this:\n  P' = LCons v0 P\n  \\<lbrakk>?v' \\<rightarrow> w0;\n   ?v' \\<in> VV p \\<Longrightarrow> \\<sigma> ?v' = w0\\<rbrakk>\n  \\<Longrightarrow> vmc_path G (LCons ?v' P) ?v' p \\<sigma>\n  v0 \\<rightarrow> w0\n  v0 \\<in> VV p \\<Longrightarrow> \\<sigma> v0 = w0\n\ngoal (1 subgoal):\n 1. vmc_path G P' v0 p \\<sigma>", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P. vmc_path G P w0 p \\<sigma> \\<Longrightarrow> visits_via P A W", "interpret P': vmc_path_no_deadend G P' v0 p \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P' v0 p \\<sigma>", "using \\<open>v0\\<rightarrow>w0\\<close>"], ["proof (prove)\nusing this:\n  v0 \\<rightarrow> w0\n\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P' v0 p \\<sigma>", "by unfold_locales blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P. vmc_path G P w0 p \\<sigma> \\<Longrightarrow> visits_via P A W", "have \"visits_via P' A W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. visits_via P' A W", "using \\<sigma>(2) P'.strategy_attracts_viaE"], ["proof (prove)\nusing this:\n  strategy_attracts_via p \\<sigma> v0 A W\n  strategy_attracts_via p \\<sigma> v0 ?A ?W \\<Longrightarrow>\n  visits_via P' ?A ?W\n\ngoal (1 subgoal):\n 1. visits_via P' A W", "by blast"], ["proof (state)\nthis:\n  visits_via P' A W\n\ngoal (1 subgoal):\n 1. \\<And>P. vmc_path G P w0 p \\<sigma> \\<Longrightarrow> visits_via P A W", "thus \"visits_via P A W\""], ["proof (prove)\nusing this:\n  visits_via P' A W\n\ngoal (1 subgoal):\n 1. visits_via P A W", "using P'.visits_via_ltl v0"], ["proof (prove)\nusing this:\n  visits_via P' A W\n  \\<lbrakk>visits_via P' ?A ?W; v0 \\<notin> ?W\\<rbrakk>\n  \\<Longrightarrow> visits_via (ltl P') ?A ?W\n  v0 \\<in> A - W\n\ngoal (1 subgoal):\n 1. visits_via P A W", "by simp"], ["proof (state)\nthis:\n  visits_via P A W\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strategy_attracts_VVp:\n  assumes \\<sigma>: \"strategy p \\<sigma>\" \"strategy_attracts_via p \\<sigma> v0 A W\"\n    and v: \"v0 \\<in> A - W\" \"v0 \\<in> VV p\" \"\\<not>deadend v0\"\n  shows \"\\<sigma> v0 \\<in> A \\<union> W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> v0 \\<in> A \\<union> W", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma> v0 \\<in> A \\<union> W", "have \"v0\\<rightarrow>\\<sigma> v0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v0 \\<rightarrow> \\<sigma> v0", "using \\<sigma>(1)[unfolded strategy_def] v(2,3)"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>VV p.\n     \\<not> deadend v \\<longrightarrow> v \\<rightarrow> \\<sigma> v\n  v0 \\<in> VV p\n  \\<not> deadend v0\n\ngoal (1 subgoal):\n 1. v0 \\<rightarrow> \\<sigma> v0", "by blast"], ["proof (state)\nthis:\n  v0 \\<rightarrow> \\<sigma> v0\n\ngoal (1 subgoal):\n 1. \\<sigma> v0 \\<in> A \\<union> W", "hence \"strategy_attracts_via p \\<sigma> (\\<sigma> v0) A W\""], ["proof (prove)\nusing this:\n  v0 \\<rightarrow> \\<sigma> v0\n\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma> (\\<sigma> v0) A W", "using strategy_attracts_via_successor \\<sigma> v(1)"], ["proof (prove)\nusing this:\n  v0 \\<rightarrow> \\<sigma> v0\n  \\<lbrakk>strategy ?p ?\\<sigma>;\n   strategy_attracts_via ?p ?\\<sigma> ?v0.0 ?A ?W; ?v0.0 \\<in> ?A - ?W;\n   ?v0.0 \\<rightarrow> ?w0.0;\n   ?v0.0 \\<in> VV ?p \\<Longrightarrow> ?\\<sigma> ?v0.0 = ?w0.0\\<rbrakk>\n  \\<Longrightarrow> strategy_attracts_via ?p ?\\<sigma> ?w0.0 ?A ?W\n  strategy p \\<sigma>\n  strategy_attracts_via p \\<sigma> v0 A W\n  v0 \\<in> A - W\n\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma> (\\<sigma> v0) A W", "by blast"], ["proof (state)\nthis:\n  strategy_attracts_via p \\<sigma> (\\<sigma> v0) A W\n\ngoal (1 subgoal):\n 1. \\<sigma> v0 \\<in> A \\<union> W", "thus ?thesis"], ["proof (prove)\nusing this:\n  strategy_attracts_via p \\<sigma> (\\<sigma> v0) A W\n\ngoal (1 subgoal):\n 1. \\<sigma> v0 \\<in> A \\<union> W", "using strategy_attracts_via_v0 \\<open>v0\\<rightarrow>\\<sigma> v0\\<close> \\<sigma>(1)"], ["proof (prove)\nusing this:\n  strategy_attracts_via p \\<sigma> (\\<sigma> v0) A W\n  \\<lbrakk>strategy ?p ?\\<sigma>;\n   strategy_attracts_via ?p ?\\<sigma> ?v0.0 ?A ?W; ?v0.0 \\<in> V\\<rbrakk>\n  \\<Longrightarrow> ?v0.0 \\<in> ?A \\<union> ?W\n  v0 \\<rightarrow> \\<sigma> v0\n  strategy p \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<sigma> v0 \\<in> A \\<union> W", "by blast"], ["proof (state)\nthis:\n  \\<sigma> v0 \\<in> A \\<union> W\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strategy_attracts_VVpstar:\n  assumes \"strategy p \\<sigma>\" \"strategy_attracts_via p \\<sigma> v0 A W\"\n    and \"v0 \\<in> A - W\" \"v0 \\<notin> VV p\" \"w0 \\<in> V - A - W\"\n  shows \"\\<not>v0 \\<rightarrow> w0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v0, w0) \\<notin> E", "by (metis assms strategy_attracts_not_outside strategy_attracts_via_successor)"], ["", "subsection \\<open>Attracting strategy from a set of nodes\\<close>"], ["", "text \\<open>\n  All @{term \\<sigma>}-paths starting from @{term A} visit @{term W} and until then they stay in @{term A}.\n\\<close>"], ["", "definition strategy_attracts :: \"Player \\<Rightarrow> 'a Strategy \\<Rightarrow> 'a set \\<Rightarrow> 'a set \\<Rightarrow> bool\" where\n  \"strategy_attracts p \\<sigma> A W \\<equiv> \\<forall>v0 \\<in> A. strategy_attracts_via p \\<sigma> v0 A W\""], ["", "lemma (in vmc_path) strategy_attractsE:\n  assumes \"strategy_attracts p \\<sigma> A W\" \"v0 \\<in> A\"\n  shows \"visits_via P A W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. visits_via P A W", "using assms(1)[unfolded strategy_attracts_def] assms(2) strategy_attracts_viaE"], ["proof (prove)\nusing this:\n  \\<forall>v0\\<in>A. strategy_attracts_via p \\<sigma> v0 A W\n  v0 \\<in> A\n  strategy_attracts_via p \\<sigma> v0 ?A ?W \\<Longrightarrow>\n  visits_via P ?A ?W\n\ngoal (1 subgoal):\n 1. visits_via P A W", "by blast"], ["", "lemma strategy_attractsI [intro]:\n  assumes \"\\<And>P v. \\<lbrakk> v \\<in> A; vmc_path G P v p \\<sigma> \\<rbrakk> \\<Longrightarrow> visits_via P A W\"\n  shows \"strategy_attracts p \\<sigma> A W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy_attracts p \\<sigma> A W", "unfolding strategy_attracts_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v0\\<in>A. strategy_attracts_via p \\<sigma> v0 A W", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> A; vmc_path G ?P ?v p \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> visits_via ?P A W\n\ngoal (1 subgoal):\n 1. \\<forall>v0\\<in>A. strategy_attracts_via p \\<sigma> v0 A W", "by blast"], ["", "lemma (in vmc_path) strategy_attracts_lset:\n  assumes \"strategy_attracts p \\<sigma> A W\" \"v0 \\<in> A\"\n  shows \"lset P \\<inter> W \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset P \\<inter> W \\<noteq> {}", "using assms(1)[unfolded strategy_attracts_def] assms(2) strategy_attracts_via_lset(1)[of A W]"], ["proof (prove)\nusing this:\n  \\<forall>v0\\<in>A. strategy_attracts_via p \\<sigma> v0 A W\n  v0 \\<in> A\n  strategy_attracts_via p \\<sigma> v0 A W \\<Longrightarrow>\n  lset P \\<inter> W \\<noteq> {}\n\ngoal (1 subgoal):\n 1. lset P \\<inter> W \\<noteq> {}", "by blast"], ["", "lemma strategy_attracts_empty [simp]: \"strategy_attracts p \\<sigma> {} W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy_attracts p \\<sigma> {} W", "by blast"], ["", "lemma strategy_attracts_invalid_path:\n  assumes P: \"P = LCons v (LCons w P')\" \"v \\<in> A - W\" \"w \\<notin> A \\<union> W\"\n  shows \"\\<not>visits_via P A W\" (is \"\\<not>?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> visits_via P A W", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. visits_via P A W \\<Longrightarrow> False", "assume ?A"], ["proof (state)\nthis:\n  visits_via P A W\n\ngoal (1 subgoal):\n 1. visits_via P A W \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  visits_via P A W", "obtain n where n: \"enat n < llength P\" \"P $ n \\<in> W\" \"lset (ltake (enat n) P) \\<subseteq> A\""], ["proof (prove)\nusing this:\n  visits_via P A W\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P; P $ n \\<in> W;\n         lset (ltake (enat n) P) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding visits_via_def"], ["proof (prove)\nusing this:\n  \\<exists>n.\n     enat n < llength P \\<and>\n     P $ n \\<in> W \\<and> lset (ltake (enat n) P) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P; P $ n \\<in> W;\n         lset (ltake (enat n) P) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  enat n < llength P\n  P $ n \\<in> W\n  lset (ltake (enat n) P) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. visits_via P A W \\<Longrightarrow> False", "have \"n \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "using \\<open>v \\<in> A - W\\<close> n(2) P(1) DiffD2"], ["proof (prove)\nusing this:\n  v \\<in> A - W\n  P $ n \\<in> W\n  P = LCons v (LCons w P')\n  \\<lbrakk>?c \\<in> ?A - ?B; ?c \\<in> ?B\\<rbrakk> \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "by force"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. visits_via P A W \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. visits_via P A W \\<Longrightarrow> False", "have \"n \\<noteq> Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> Suc 0", "using \\<open>w \\<notin> A \\<union> W\\<close> n(2) P(1)"], ["proof (prove)\nusing this:\n  w \\<notin> A \\<union> W\n  P $ n \\<in> W\n  P = LCons v (LCons w P')\n\ngoal (1 subgoal):\n 1. n \\<noteq> Suc 0", "by auto"], ["proof (state)\nthis:\n  n \\<noteq> Suc 0\n\ngoal (1 subgoal):\n 1. visits_via P A W \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  n \\<noteq> 0\n  n \\<noteq> Suc 0", "have \"Suc (Suc 0) \\<le> n\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  n \\<noteq> Suc 0\n\ngoal (1 subgoal):\n 1. Suc (Suc 0) \\<le> n", "by presburger"], ["proof (state)\nthis:\n  Suc (Suc 0) \\<le> n\n\ngoal (1 subgoal):\n 1. visits_via P A W \\<Longrightarrow> False", "hence \"lset (ltake (enat (Suc (Suc 0))) P) \\<subseteq> A\""], ["proof (prove)\nusing this:\n  Suc (Suc 0) \\<le> n\n\ngoal (1 subgoal):\n 1. lset (ltake (enat (Suc (Suc 0))) P) \\<subseteq> A", "using n(3)"], ["proof (prove)\nusing this:\n  Suc (Suc 0) \\<le> n\n  lset (ltake (enat n) P) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. lset (ltake (enat (Suc (Suc 0))) P) \\<subseteq> A", "by (meson contra_subsetD enat_ord_simps(1) lset_ltake_prefix lset_lnth_member lset_subset)"], ["proof (state)\nthis:\n  lset (ltake (enat (Suc (Suc 0))) P) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. visits_via P A W \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  lset (ltake (enat (Suc (Suc 0))) P) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. visits_via P A W \\<Longrightarrow> False", "have \"enat (Suc 0) < llength (ltake (eSuc (eSuc 0)) P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc 0) < llength (ltake (eSuc (eSuc 0)) P)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. enat (Suc 0) < llength (ltake (eSuc (eSuc 0)) P)", "have *: \"enat (Suc (Suc 0)) < llength P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc (Suc 0)) < llength P", "using \\<open>Suc (Suc 0) \\<le> n\\<close> n(1)"], ["proof (prove)\nusing this:\n  Suc (Suc 0) \\<le> n\n  enat n < llength P\n\ngoal (1 subgoal):\n 1. enat (Suc (Suc 0)) < llength P", "by (meson enat_ord_simps(2) le_less_linear less_le_trans neq_iff)"], ["proof (state)\nthis:\n  enat (Suc (Suc 0)) < llength P\n\ngoal (1 subgoal):\n 1. enat (Suc 0) < llength (ltake (eSuc (eSuc 0)) P)", "have \"llength (ltake (enat (Suc (Suc 0))) P) = min (enat (Suc (Suc 0))) (llength P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llength (ltake (enat (Suc (Suc 0))) P) =\n    min (enat (Suc (Suc 0))) (llength P)", "by simp"], ["proof (state)\nthis:\n  llength (ltake (enat (Suc (Suc 0))) P) =\n  min (enat (Suc (Suc 0))) (llength P)\n\ngoal (1 subgoal):\n 1. enat (Suc 0) < llength (ltake (eSuc (eSuc 0)) P)", "hence \"llength (ltake (enat (Suc (Suc 0))) P) = enat (Suc (Suc 0))\""], ["proof (prove)\nusing this:\n  llength (ltake (enat (Suc (Suc 0))) P) =\n  min (enat (Suc (Suc 0))) (llength P)\n\ngoal (1 subgoal):\n 1. llength (ltake (enat (Suc (Suc 0))) P) = enat (Suc (Suc 0))", "using *"], ["proof (prove)\nusing this:\n  llength (ltake (enat (Suc (Suc 0))) P) =\n  min (enat (Suc (Suc 0))) (llength P)\n  enat (Suc (Suc 0)) < llength P\n\ngoal (1 subgoal):\n 1. llength (ltake (enat (Suc (Suc 0))) P) = enat (Suc (Suc 0))", "by (simp add: min_absorb1)"], ["proof (state)\nthis:\n  llength (ltake (enat (Suc (Suc 0))) P) = enat (Suc (Suc 0))\n\ngoal (1 subgoal):\n 1. enat (Suc 0) < llength (ltake (eSuc (eSuc 0)) P)", "thus ?thesis"], ["proof (prove)\nusing this:\n  llength (ltake (enat (Suc (Suc 0))) P) = enat (Suc (Suc 0))\n\ngoal (1 subgoal):\n 1. enat (Suc 0) < llength (ltake (eSuc (eSuc 0)) P)", "by (simp add: eSuc_enat zero_enat_def)"], ["proof (state)\nthis:\n  enat (Suc 0) < llength (ltake (eSuc (eSuc 0)) P)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  enat (Suc 0) < llength (ltake (eSuc (eSuc 0)) P)\n\ngoal (1 subgoal):\n 1. visits_via P A W \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  lset (ltake (enat (Suc (Suc 0))) P) \\<subseteq> A\n  enat (Suc 0) < llength (ltake (eSuc (eSuc 0)) P)", "have \"ltake (enat (Suc (Suc 0))) P $ Suc 0 \\<in> A\""], ["proof (prove)\nusing this:\n  lset (ltake (enat (Suc (Suc 0))) P) \\<subseteq> A\n  enat (Suc 0) < llength (ltake (eSuc (eSuc 0)) P)\n\ngoal (1 subgoal):\n 1. ltake (enat (Suc (Suc 0))) P $ Suc 0 \\<in> A", "by (simp add: lset_lnth_member)"], ["proof (state)\nthis:\n  ltake (enat (Suc (Suc 0))) P $ Suc 0 \\<in> A\n\ngoal (1 subgoal):\n 1. visits_via P A W \\<Longrightarrow> False", "hence \"P $ Suc 0 \\<in> A\""], ["proof (prove)\nusing this:\n  ltake (enat (Suc (Suc 0))) P $ Suc 0 \\<in> A\n\ngoal (1 subgoal):\n 1. P $ Suc 0 \\<in> A", "by (simp add: lnth_ltake)"], ["proof (state)\nthis:\n  P $ Suc 0 \\<in> A\n\ngoal (1 subgoal):\n 1. visits_via P A W \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  P $ Suc 0 \\<in> A\n\ngoal (1 subgoal):\n 1. False", "using P(1,3)"], ["proof (prove)\nusing this:\n  P $ Suc 0 \\<in> A\n  P = LCons v (LCons w P')\n  w \\<notin> A \\<union> W\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  If @{term A} is an attractor set of @{term W} and an edge leaves @{term A} without going through\n  @{term W}, then @{term v} belongs to @{term \"VV p\"} and the attractor strategy @{term \\<sigma>} avoids\n  this edge.  All other cases give a contradiction.\n\\<close>"], ["", "lemma strategy_attracts_does_not_leave:\n  assumes \\<sigma>: \"strategy_attracts p \\<sigma> A W\" \"strategy p \\<sigma>\"\n    and v: \"v\\<rightarrow>w\" \"v \\<in> A - W\" \"w \\<notin> A \\<union> W\"\n  shows \"v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w) \\<Longrightarrow>\n    False", "assume contra: \"\\<not>(v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w)\""], ["proof (state)\nthis:\n  \\<not> (v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w)\n\ngoal (1 subgoal):\n 1. \\<not> (v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w) \\<Longrightarrow>\n    False", "(* Define a strategy for p** which tries to take this edge. *)"], ["proof (state)\nthis:\n  \\<not> (v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w)\n\ngoal (1 subgoal):\n 1. \\<not> (v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w) \\<Longrightarrow>\n    False", "define \\<sigma>' where \"\\<sigma>' = \\<sigma>_arbitrary(v := w)\""], ["proof (state)\nthis:\n  \\<sigma>' = \\<sigma>_arbitrary(v := w)\n\ngoal (1 subgoal):\n 1. \\<not> (v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w) \\<Longrightarrow>\n    False", "hence \"strategy p** \\<sigma>'\""], ["proof (prove)\nusing this:\n  \\<sigma>' = \\<sigma>_arbitrary(v := w)\n\ngoal (1 subgoal):\n 1. strategy p** \\<sigma>'", "using \\<open>v\\<rightarrow>w\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma>' = \\<sigma>_arbitrary(v := w)\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. strategy p** \\<sigma>'", "by (simp add: valid_strategy_updates)"], ["proof (state)\nthis:\n  strategy p** \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<not> (v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  strategy p** \\<sigma>'", "obtain P where P: \"vmc2_path G P v p \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  strategy p** \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        vmc2_path G P v p \\<sigma> \\<sigma>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<open>v\\<rightarrow>w\\<close> strategy_conforming_path_exists \\<sigma>(2)"], ["proof (prove)\nusing this:\n  strategy p** \\<sigma>'\n  v \\<rightarrow> w\n  \\<lbrakk>?v0.0 \\<in> V; strategy ?p ?\\<sigma>; strategy ?p** ?\\<sigma>';\n   \\<And>P.\n      vmc2_path G P ?v0.0 ?p ?\\<sigma> ?\\<sigma>' \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  strategy p \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>P.\n        vmc2_path G P v p \\<sigma> \\<sigma>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  vmc2_path G P v p \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<not> (v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  vmc2_path G P v p \\<sigma> \\<sigma>'", "interpret vmc2_path G P v p \\<sigma> \\<sigma>'"], ["proof (prove)\nusing this:\n  vmc2_path G P v p \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. vmc2_path G P v p \\<sigma> \\<sigma>'", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w) \\<Longrightarrow>\n    False", "interpret vmc_path_no_deadend G P v p \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v p \\<sigma>", "using \\<open>v\\<rightarrow>w\\<close>"], ["proof (prove)\nusing this:\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v p \\<sigma>", "by unfold_locales blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w) \\<Longrightarrow>\n    False", "interpret comp: vmc_path_no_deadend G P v \"p**\" \\<sigma>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v p** \\<sigma>'", "using \\<open>v\\<rightarrow>w\\<close>"], ["proof (prove)\nusing this:\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v p** \\<sigma>'", "by unfold_locales blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w) \\<Longrightarrow>\n    False", "have \"w = w0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w = comp.w0", "using contra \\<sigma>'_def v0_conforms comp.v0_conforms"], ["proof (prove)\nusing this:\n  \\<not> (v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w)\n  \\<sigma>' = \\<sigma>_arbitrary(v := w)\n  v \\<in> VV p \\<Longrightarrow> \\<sigma> v = comp.w0\n  v \\<in> VV p** \\<Longrightarrow> \\<sigma>' v = comp.w0\n\ngoal (1 subgoal):\n 1. w = comp.w0", "by (cases \"v \\<in> VV p\") auto"], ["proof (state)\nthis:\n  w = comp.w0\n\ngoal (1 subgoal):\n 1. \\<not> (v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w) \\<Longrightarrow>\n    False", "hence \"\\<not>visits_via P A W\""], ["proof (prove)\nusing this:\n  w = comp.w0\n\ngoal (1 subgoal):\n 1. \\<not> visits_via P A W", "using strategy_attracts_invalid_path[of P v w \"ltl (ltl P)\"] v(2,3) P_LCons'"], ["proof (prove)\nusing this:\n  w = comp.w0\n  \\<lbrakk>P = LCons v (LCons w (ltl (ltl P))); v \\<in> ?A - ?W;\n   w \\<notin> ?A \\<union> ?W\\<rbrakk>\n  \\<Longrightarrow> \\<not> visits_via P ?A ?W\n  v \\<in> A - W\n  w \\<notin> A \\<union> W\n  P = LCons v (LCons comp.w0 (ltl (ltl P)))\n\ngoal (1 subgoal):\n 1. \\<not> visits_via P A W", "by simp"], ["proof (state)\nthis:\n  \\<not> visits_via P A W\n\ngoal (1 subgoal):\n 1. \\<not> (v \\<in> VV p \\<and> \\<sigma> v \\<noteq> w) \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  \\<not> visits_via P A W\n\ngoal (1 subgoal):\n 1. False", "by (meson DiffE \\<sigma>(1) strategy_attractsE v(2))"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Given an attracting strategy @{term \\<sigma>}, we can turn every strategy @{term \\<sigma>'} into an attracting\n  strategy by overriding @{term \\<sigma>'} on a suitable subset of the nodes.  This also means that\n  an attracting strategy is still attracting if we override it outside of @{term \"A - W\"}.\n\\<close>"], ["", "lemma strategy_attracts_irrelevant_override:\n  assumes \"strategy_attracts p \\<sigma> A W\" \"strategy p \\<sigma>\" \"strategy p \\<sigma>'\"\n  shows \"strategy_attracts p (override_on \\<sigma>' \\<sigma> (A - W)) A W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy_attracts p (override_on \\<sigma>' \\<sigma> (A - W)) A W", "proof (rule strategy_attractsI, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "fix P v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "let ?\\<sigma> = \"override_on \\<sigma>' \\<sigma> (A - W)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"vmc_path G P v p ?\\<sigma>\""], ["proof (state)\nthis:\n  vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W))\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W))", "interpret vmc_path G P v p ?\\<sigma>"], ["proof (prove)\nusing this:\n  vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W))\n\ngoal (1 subgoal):\n 1. vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W))", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"v \\<in> A\""], ["proof (state)\nthis:\n  v \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"P $ 0 \\<in> A\""], ["proof (prove)\nusing this:\n  v \\<in> A\n\ngoal (1 subgoal):\n 1. P $ 0 \\<in> A", "using \\<open>v \\<in> A\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> A\n  v \\<in> A\n\ngoal (1 subgoal):\n 1. P $ 0 \\<in> A", "by simp"], ["proof (state)\nthis:\n  P $ 0 \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  P $ 0 \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "assume contra: \"\\<not>visits_via P A W\""], ["proof (state)\nthis:\n  \\<not> visits_via P A W\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  P $ 0 \\<in> A\n  \\<not> visits_via P A W", "have \"P $ 0 \\<in> A - W\""], ["proof (prove)\nusing this:\n  P $ 0 \\<in> A\n  \\<not> visits_via P A W\n\ngoal (1 subgoal):\n 1. P $ 0 \\<in> A - W", "unfolding visits_via_def"], ["proof (prove)\nusing this:\n  P $ 0 \\<in> A\n  \\<nexists>n.\n     enat n < llength P \\<and>\n     P $ n \\<in> W \\<and> lset (ltake (enat n) P) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. P $ 0 \\<in> A - W", "by (meson DiffI P_len not_less0 lset_ltake)"], ["proof (state)\nthis:\n  P $ 0 \\<in> A - W\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "have \"\\<not>lset P \\<subseteq> A - W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lset P \\<subseteq> A - W", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lset P \\<subseteq> A - W \\<Longrightarrow> False", "assume \"lset P \\<subseteq> A - W\""], ["proof (state)\nthis:\n  lset P \\<subseteq> A - W\n\ngoal (1 subgoal):\n 1. lset P \\<subseteq> A - W \\<Longrightarrow> False", "hence \"\\<And>v. v \\<in> lset P \\<Longrightarrow> override_on \\<sigma>' \\<sigma> (A - W) v = \\<sigma> v\""], ["proof (prove)\nusing this:\n  lset P \\<subseteq> A - W\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> lset P \\<Longrightarrow>\n       override_on \\<sigma>' \\<sigma> (A - W) v = \\<sigma> v", "by auto"], ["proof (state)\nthis:\n  ?v \\<in> lset P \\<Longrightarrow>\n  override_on \\<sigma>' \\<sigma> (A - W) ?v = \\<sigma> ?v\n\ngoal (1 subgoal):\n 1. lset P \\<subseteq> A - W \\<Longrightarrow> False", "hence \"path_conforms_with_strategy p P \\<sigma>\""], ["proof (prove)\nusing this:\n  ?v \\<in> lset P \\<Longrightarrow>\n  override_on \\<sigma>' \\<sigma> (A - W) ?v = \\<sigma> ?v\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma>", "using path_conforms_with_strategy_irrelevant_updates[OF P_conforms]"], ["proof (prove)\nusing this:\n  ?v \\<in> lset P \\<Longrightarrow>\n  override_on \\<sigma>' \\<sigma> (A - W) ?v = \\<sigma> ?v\n  (\\<And>v.\n      v \\<in> lset P \\<Longrightarrow>\n      override_on \\<sigma>' \\<sigma> (A - W) v =\n      ?\\<sigma>' v) \\<Longrightarrow>\n  path_conforms_with_strategy p P ?\\<sigma>'\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P \\<sigma>", "by blast"], ["proof (state)\nthis:\n  path_conforms_with_strategy p P \\<sigma>\n\ngoal (1 subgoal):\n 1. lset P \\<subseteq> A - W \\<Longrightarrow> False", "hence \"vmc_path G P (P $ 0) p \\<sigma>\""], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P \\<sigma>\n\ngoal (1 subgoal):\n 1. vmc_path G P (P $ 0) p \\<sigma>", "using conforms_to_another_strategy P_0"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy p P \\<sigma>\n  path_conforms_with_strategy p P ?\\<sigma>' \\<Longrightarrow>\n  vmc_path G P v p ?\\<sigma>'\n  P $ 0 = v\n\ngoal (1 subgoal):\n 1. vmc_path G P (P $ 0) p \\<sigma>", "by blast"], ["proof (state)\nthis:\n  vmc_path G P (P $ 0) p \\<sigma>\n\ngoal (1 subgoal):\n 1. lset P \\<subseteq> A - W \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  vmc_path G P (P $ 0) p \\<sigma>\n\ngoal (1 subgoal):\n 1. False", "using contra \\<open>P $ 0 \\<in> A\\<close> assms(1)"], ["proof (prove)\nusing this:\n  vmc_path G P (P $ 0) p \\<sigma>\n  \\<not> visits_via P A W\n  P $ 0 \\<in> A\n  strategy_attracts p \\<sigma> A W\n\ngoal (1 subgoal):\n 1. False", "by (meson vmc_path.strategy_attractsE)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> lset P \\<subseteq> A - W\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"\\<exists>n. enat n < llength P \\<and> P $ n \\<notin> A - W\""], ["proof (prove)\nusing this:\n  \\<not> lset P \\<subseteq> A - W\n\ngoal (1 subgoal):\n 1. \\<exists>n. enat n < llength P \\<and> P $ n \\<notin> A - W", "by (meson lset_subset)"], ["proof (state)\nthis:\n  \\<exists>n. enat n < llength P \\<and> P $ n \\<notin> A - W\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>n. enat n < llength P \\<and> P $ n \\<notin> A - W", "obtain n where n: \"enat n < llength P \\<and> P $ n \\<notin> A - W\"\n    \"\\<And>i. i < n \\<Longrightarrow> \\<not>(enat i < llength P \\<and> P $ i \\<notin> A - W)\""], ["proof (prove)\nusing this:\n  \\<exists>n. enat n < llength P \\<and> P $ n \\<notin> A - W\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P \\<and> P $ n \\<notin> A - W;\n         \\<And>i.\n            i < n \\<Longrightarrow>\n            \\<not> (enat i < llength P \\<and> P $ i \\<notin> A - W)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ex_least_nat_le[of \"\\<lambda>n. enat n < llength P \\<and> P $ n \\<notin> A - W\"]"], ["proof (prove)\nusing this:\n  \\<exists>n. enat n < llength P \\<and> P $ n \\<notin> A - W\n  \\<lbrakk>enat ?n < llength P \\<and> P $ ?n \\<notin> A - W;\n   \\<not> (enat 0 < llength P \\<and> P $ 0 \\<notin> A - W)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k\\<le>?n.\n                       (\\<forall>i<k.\n                           \\<not> (enat i < llength P \\<and>\n                                   P $ i \\<notin> A - W)) \\<and>\n                       enat k < llength P \\<and> P $ k \\<notin> A - W\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P \\<and> P $ n \\<notin> A - W;\n         \\<And>i.\n            i < n \\<Longrightarrow>\n            \\<not> (enat i < llength P \\<and> P $ i \\<notin> A - W)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  enat n < llength P \\<and> P $ n \\<notin> A - W\n  ?i < n \\<Longrightarrow>\n  \\<not> (enat ?i < llength P \\<and> P $ ?i \\<notin> A - W)\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "hence n_min: \"\\<And>i. i < n \\<Longrightarrow> P $ i \\<in> A - W\""], ["proof (prove)\nusing this:\n  enat n < llength P \\<and> P $ n \\<notin> A - W\n  ?i < n \\<Longrightarrow>\n  \\<not> (enat ?i < llength P \\<and> P $ ?i \\<notin> A - W)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> P $ i \\<in> A - W", "using dual_order.strict_trans enat_ord_simps(2)"], ["proof (prove)\nusing this:\n  enat n < llength P \\<and> P $ n \\<notin> A - W\n  ?i < n \\<Longrightarrow>\n  \\<not> (enat ?i < llength P \\<and> P $ ?i \\<notin> A - W)\n  \\<lbrakk>?b < ?a; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  (enat ?m < enat ?n) = (?m < ?n)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> P $ i \\<in> A - W", "by blast"], ["proof (state)\nthis:\n  ?i < n \\<Longrightarrow> P $ ?i \\<in> A - W\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "have \"n \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "using \\<open>P $ 0 \\<in> A - W\\<close> n(1)"], ["proof (prove)\nusing this:\n  P $ 0 \\<in> A - W\n  enat n < llength P \\<and> P $ n \\<notin> A - W\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "by meson"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  n \\<noteq> 0", "obtain n' where n': \"Suc n' = n\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>n'. Suc n' = n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using not0_implies_Suc"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  ?n \\<noteq> 0 \\<Longrightarrow> \\<exists>m. ?n = Suc m\n\ngoal (1 subgoal):\n 1. (\\<And>n'. Suc n' = n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  Suc n' = n\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"P $ n' \\<in> A - W\""], ["proof (prove)\nusing this:\n  Suc n' = n\n\ngoal (1 subgoal):\n 1. P $ n' \\<in> A - W", "using n_min"], ["proof (prove)\nusing this:\n  Suc n' = n\n  ?i < n \\<Longrightarrow> P $ ?i \\<in> A - W\n\ngoal (1 subgoal):\n 1. P $ n' \\<in> A - W", "by blast"], ["proof (state)\nthis:\n  P $ n' \\<in> A - W\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  P $ n' \\<in> A - W\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "have \"P $ n' \\<rightarrow> P $ Suc n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P $ n' \\<rightarrow> P $ Suc n'", "using P_valid n(1) n' valid_path_edges"], ["proof (prove)\nusing this:\n  valid_path P\n  enat n < llength P \\<and> P $ n \\<notin> A - W\n  Suc n' = n\n  \\<lbrakk>valid_path ?P; enat (Suc ?n) < llength ?P\\<rbrakk>\n  \\<Longrightarrow> ?P $ ?n \\<rightarrow> ?P $ Suc ?n\n\ngoal (1 subgoal):\n 1. P $ n' \\<rightarrow> P $ Suc n'", "by blast"], ["proof (state)\nthis:\n  P $ n' \\<rightarrow> P $ Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  P $ n' \\<rightarrow> P $ Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "have \"P $ Suc n' \\<notin> A \\<union> W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P $ Suc n' \\<notin> A \\<union> W", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. P $ Suc n' \\<notin> A \\<union> W", "have \"P $ n \\<notin> W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P $ n \\<notin> W", "using contra n(1) n_min"], ["proof (prove)\nusing this:\n  \\<not> visits_via P A W\n  enat n < llength P \\<and> P $ n \\<notin> A - W\n  ?i < n \\<Longrightarrow> P $ ?i \\<in> A - W\n\ngoal (1 subgoal):\n 1. P $ n \\<notin> W", "unfolding visits_via_def"], ["proof (prove)\nusing this:\n  \\<nexists>n.\n     enat n < llength P \\<and>\n     P $ n \\<in> W \\<and> lset (ltake (enat n) P) \\<subseteq> A\n  enat n < llength P \\<and> P $ n \\<notin> A - W\n  ?i < n \\<Longrightarrow> P $ ?i \\<in> A - W\n\ngoal (1 subgoal):\n 1. P $ n \\<notin> W", "by (meson Diff_subset lset_ltake subsetCE)"], ["proof (state)\nthis:\n  P $ n \\<notin> W\n\ngoal (1 subgoal):\n 1. P $ Suc n' \\<notin> A \\<union> W", "thus ?thesis"], ["proof (prove)\nusing this:\n  P $ n \\<notin> W\n\ngoal (1 subgoal):\n 1. P $ Suc n' \\<notin> A \\<union> W", "using n(1) n'"], ["proof (prove)\nusing this:\n  P $ n \\<notin> W\n  enat n < llength P \\<and> P $ n \\<notin> A - W\n  Suc n' = n\n\ngoal (1 subgoal):\n 1. P $ Suc n' \\<notin> A \\<union> W", "by blast"], ["proof (state)\nthis:\n  P $ Suc n' \\<notin> A \\<union> W\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P $ Suc n' \\<notin> A \\<union> W\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  P $ n' \\<in> A - W\n  P $ n' \\<rightarrow> P $ Suc n'\n  P $ Suc n' \\<notin> A \\<union> W", "have \"P $ n' \\<in> VV p \\<and> \\<sigma> (P $ n') \\<noteq> P $ Suc n'\""], ["proof (prove)\nusing this:\n  P $ n' \\<in> A - W\n  P $ n' \\<rightarrow> P $ Suc n'\n  P $ Suc n' \\<notin> A \\<union> W\n\ngoal (1 subgoal):\n 1. P $ n' \\<in> VV p \\<and> \\<sigma> (P $ n') \\<noteq> P $ Suc n'", "using strategy_attracts_does_not_leave[of p \\<sigma> A W \"P $ n'\" \"P $ Suc n'\"]\n          assms(1,2)"], ["proof (prove)\nusing this:\n  P $ n' \\<in> A - W\n  P $ n' \\<rightarrow> P $ Suc n'\n  P $ Suc n' \\<notin> A \\<union> W\n  \\<lbrakk>strategy_attracts p \\<sigma> A W; strategy p \\<sigma>;\n   P $ n' \\<rightarrow> P $ Suc n'; P $ n' \\<in> A - W;\n   P $ Suc n' \\<notin> A \\<union> W\\<rbrakk>\n  \\<Longrightarrow> P $ n' \\<in> VV p \\<and>\n                    \\<sigma> (P $ n') \\<noteq> P $ Suc n'\n  strategy_attracts p \\<sigma> A W\n  strategy p \\<sigma>\n\ngoal (1 subgoal):\n 1. P $ n' \\<in> VV p \\<and> \\<sigma> (P $ n') \\<noteq> P $ Suc n'", "by blast"], ["proof (state)\nthis:\n  P $ n' \\<in> VV p \\<and> \\<sigma> (P $ n') \\<noteq> P $ Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>P v.\n       \\<lbrakk>v \\<in> A;\n        vmc_path G P v p (override_on \\<sigma>' \\<sigma> (A - W));\n        \\<not> visits_via P A W\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  P $ n' \\<in> VV p \\<and> \\<sigma> (P $ n') \\<noteq> P $ Suc n'\n\ngoal (1 subgoal):\n 1. False", "using n(1) n' vmc_path_conforms \\<open>P $ n' \\<in> A - W\\<close>"], ["proof (prove)\nusing this:\n  P $ n' \\<in> VV p \\<and> \\<sigma> (P $ n') \\<noteq> P $ Suc n'\n  enat n < llength P \\<and> P $ n \\<notin> A - W\n  Suc n' = n\n  \\<lbrakk>enat (Suc ?n) < llength P; P $ ?n \\<in> VV p\\<rbrakk>\n  \\<Longrightarrow> override_on \\<sigma>' \\<sigma> (A - W) (P $ ?n) =\n                    P $ Suc ?n\n  P $ n' \\<in> A - W\n\ngoal (1 subgoal):\n 1. False", "by (metis override_on_apply_in)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strategy_attracts_trivial [simp]: \"strategy_attracts p \\<sigma> W W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy_attracts p \\<sigma> W W", "by (simp add: strategy_attracts_def strategy_attracts_via_trivial)"], ["", "text \\<open>If a @{term \\<sigma>}-conforming path @{term P} hits an attractor @{term A}, it will visit @{term W}.\\<close>"], ["", "lemma (in vmc_path) attracted_path:\n  assumes \"W \\<subseteq> V\"\n    and \\<sigma>: \"strategy_attracts p \\<sigma> A W\"\n    and P_hits_A: \"lset P \\<inter> A \\<noteq> {}\"\n  shows \"lset P \\<inter> W \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset P \\<inter> W \\<noteq> {}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. lset P \\<inter> W \\<noteq> {}", "obtain n where n: \"enat n < llength P\" \"P $ n \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P; P $ n \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using P_hits_A"], ["proof (prove)\nusing this:\n  lset P \\<inter> A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>enat n < llength P; P $ n \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson lset_intersect_lnth)"], ["proof (state)\nthis:\n  enat n < llength P\n  P $ n \\<in> A\n\ngoal (1 subgoal):\n 1. lset P \\<inter> W \\<noteq> {}", "define P' where \"P' = ldropn n P\""], ["proof (state)\nthis:\n  P' = ldropn n P\n\ngoal (1 subgoal):\n 1. lset P \\<inter> W \\<noteq> {}", "interpret vmc_path G P' \"P $ n\" p \\<sigma>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path G P' (P $ n) p \\<sigma>", "unfolding P'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path G (ldropn n P) (P $ n) p \\<sigma>", "using vmc_path_ldropn n(1)"], ["proof (prove)\nusing this:\n  enat ?n < llength P \\<Longrightarrow>\n  vmc_path G (ldropn ?n P) (P $ ?n) p \\<sigma>\n  enat n < llength P\n\ngoal (1 subgoal):\n 1. vmc_path G (ldropn n P) (P $ n) p \\<sigma>", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. lset P \\<inter> W \\<noteq> {}", "have \"visits_via P' A W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. visits_via P' A W", "using \\<sigma> n(2) strategy_attractsE"], ["proof (prove)\nusing this:\n  strategy_attracts p \\<sigma> A W\n  P $ n \\<in> A\n  \\<lbrakk>strategy_attracts p \\<sigma> ?A ?W; P $ n \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> visits_via P' ?A ?W\n\ngoal (1 subgoal):\n 1. visits_via P' A W", "by blast"], ["proof (state)\nthis:\n  visits_via P' A W\n\ngoal (1 subgoal):\n 1. lset P \\<inter> W \\<noteq> {}", "thus ?thesis"], ["proof (prove)\nusing this:\n  visits_via P' A W\n\ngoal (1 subgoal):\n 1. lset P \\<inter> W \\<noteq> {}", "unfolding P'_def"], ["proof (prove)\nusing this:\n  visits_via (ldropn n P) A W\n\ngoal (1 subgoal):\n 1. lset P \\<inter> W \\<noteq> {}", "using visits_via_visits in_lset_ldropnD[of _ n P]"], ["proof (prove)\nusing this:\n  visits_via (ldropn n P) A W\n  visits_via ?P ?A ?W \\<Longrightarrow> lset ?P \\<inter> ?W \\<noteq> {}\n  ?x \\<in> lset (ldropn n P) \\<Longrightarrow> ?x \\<in> lset P\n\ngoal (1 subgoal):\n 1. lset P \\<inter> W \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  lset P \\<inter> W \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma attracted_strategy_step:\n  assumes \\<sigma>: \"strategy p \\<sigma>\" \"strategy_attracts p \\<sigma> A W\"\n    and v0: \"\\<not>deadend v0\" \"v0 \\<in> A - W\" \"v0 \\<in> VV p\"\n  shows \"\\<sigma> v0 \\<in> A \\<union> W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> v0 \\<in> A \\<union> W", "by (metis DiffD1 strategy_attracts_VVp assms strategy_attracts_def)"], ["", "lemma (in vmc_path_no_deadend) attracted_path_step:\n  assumes \\<sigma>: \"strategy_attracts p \\<sigma> A W\"\n    and v0: \"v0 \\<in> A - W\"\n  shows \"w0 \\<in> A \\<union> W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w0 \\<in> A \\<union> W", "by (metis (no_types) DiffD1 P_LCons' \\<sigma> strategy_attractsE strategy_attracts_invalid_path v0)"], ["", "end \\<comment> \\<open>context ParityGame\\<close>"], ["", "end"]]}