{"file_name": "/home/qj213/afp-2021-10-22/thys/Parity_Game/WellOrderedStrategy.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Parity_Game", "problem_names": ["lemma r_refl [simp]: \"refl_on Strategies r\"", "lemma r_total [simp]: \"total_on Strategies r\"", "lemma r_trans [simp]: \"trans r\"", "lemma r_wf [simp]: \"wf (r - Id)\"", "lemma choose_works:\n  assumes \"v \\<in> S\"\n  shows \"minimal_good_strategy v (choose v)\"", "lemma well_ordered_strategy_valid: \"strategy p well_ordered_strategy\"", "lemma path_strategies_in_Strategies:\n  assumes \"lset P \\<subseteq> S\"\n  shows \"lset (path_strategies P) \\<subseteq> Strategies\"", "lemma path_strategies_good:\n  assumes \"lset P \\<subseteq> S\" \"enat n < llength P\"\n  shows \"path_strategies P $ n \\<in> good (P $ n)\"", "lemma path_strategies_strategy:\n  assumes \"lset P \\<subseteq> S\" \"enat n < llength P\"\n  shows \"strategy p (path_strategies P $ n)\"", "lemma path_strategies_monotone_Suc:\n  assumes P: \"lset P \\<subseteq> S\" \"valid_path P\" \"path_conforms_with_strategy p P well_ordered_strategy\"\n    \"enat (Suc n) < llength P\"\n  shows \"(path_strategies P $ Suc n, path_strategies P $ n) \\<in> r\"", "lemma path_strategies_monotone:\n  assumes P: \"lset P \\<subseteq> S\" \"valid_path P\" \"path_conforms_with_strategy p P well_ordered_strategy\"\n    \"n < m\" \"enat m < llength P\"\n  shows \"(path_strategies P $ m, path_strategies P $ n) \\<in> r\"", "lemma path_strategies_eventually_constant:\n  assumes \"\\<not>lfinite P\" \"lset P \\<subseteq> S\" \"valid_path P\" \"path_conforms_with_strategy p P well_ordered_strategy\"\n  shows \"\\<exists>n. \\<forall>m \\<ge> n. path_strategies P $ n = path_strategies P $ m\"", "lemma path_eventually_conforms_to_\\<sigma>_map_n:\n  assumes \"lset P \\<subseteq> S\" \"valid_path P\" \"path_conforms_with_strategy p P well_ordered_strategy\"\n  shows \"\\<exists>n. path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)\""], "translations": [["", "lemma r_refl [simp]: \"refl_on Strategies r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refl_on Strategies r", "using r_wo"], ["proof (prove)\nusing this:\n  well_order_on Strategies r\n\ngoal (1 subgoal):\n 1. refl_on Strategies r", "unfolding well_order_on_def linear_order_on_def partial_order_on_def preorder_on_def"], ["proof (prove)\nusing this:\n  (((refl_on Strategies r \\<and> trans r) \\<and> antisym r) \\<and>\n   total_on Strategies r) \\<and>\n  wf (r - Id)\n\ngoal (1 subgoal):\n 1. refl_on Strategies r", "by blast"], ["", "lemma r_total [simp]: \"total_on Strategies r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. total_on Strategies r", "using r_wo"], ["proof (prove)\nusing this:\n  well_order_on Strategies r\n\ngoal (1 subgoal):\n 1. total_on Strategies r", "unfolding well_order_on_def linear_order_on_def"], ["proof (prove)\nusing this:\n  (partial_order_on Strategies r \\<and> total_on Strategies r) \\<and>\n  wf (r - Id)\n\ngoal (1 subgoal):\n 1. total_on Strategies r", "by blast"], ["", "lemma r_trans [simp]: \"trans r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trans r", "using r_wo"], ["proof (prove)\nusing this:\n  well_order_on Strategies r\n\ngoal (1 subgoal):\n 1. trans r", "unfolding well_order_on_def linear_order_on_def partial_order_on_def preorder_on_def"], ["proof (prove)\nusing this:\n  (((refl_on Strategies r \\<and> trans r) \\<and> antisym r) \\<and>\n   total_on Strategies r) \\<and>\n  wf (r - Id)\n\ngoal (1 subgoal):\n 1. trans r", "by blast"], ["", "lemma r_wf [simp]: \"wf (r - Id)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (r - Id)", "using well_order_on_def r_wo"], ["proof (prove)\nusing this:\n  well_order_on ?A ?r \\<equiv> linear_order_on ?A ?r \\<and> wf (?r - Id)\n  well_order_on Strategies r\n\ngoal (1 subgoal):\n 1. wf (r - Id)", "by blast"], ["", "text \\<open>@{const choose} always chooses a minimal good strategy on @{term S}.\\<close>"], ["", "lemma choose_works:\n  assumes \"v \\<in> S\"\n  shows \"minimal_good_strategy v (choose v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "have wf: \"wf (r - Id)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (r - Id)", "using well_order_on_def r_wo"], ["proof (prove)\nusing this:\n  well_order_on ?A ?r \\<equiv> linear_order_on ?A ?r \\<and> wf (?r - Id)\n  well_order_on Strategies r\n\ngoal (1 subgoal):\n 1. wf (r - Id)", "by blast"], ["proof (state)\nthis:\n  wf (r - Id)\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "obtain \\<sigma> where \\<sigma>1: \"minimal_good_strategy v \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        minimal_good_strategy v \\<sigma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding minimal_good_strategy_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<sigma> \\<in> good v \\<and>\n        (\\<forall>\\<sigma>'.\n            (\\<sigma>', \\<sigma>) \\<in> r - Id \\<longrightarrow>\n            \\<sigma>' \\<notin> good v) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson good_ex[OF \\<open>v \\<in> S\\<close>] wf wf_eq_minimal)"], ["proof (state)\nthis:\n  minimal_good_strategy v \\<sigma>\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "hence \\<sigma>: \"\\<sigma> \\<in> good v\" \"\\<And>\\<sigma>'. (\\<sigma>', \\<sigma>) \\<in> r - Id \\<Longrightarrow> \\<sigma>' \\<notin> good v\""], ["proof (prove)\nusing this:\n  minimal_good_strategy v \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> good v &&&\n    (\\<And>\\<sigma>'.\n        (\\<sigma>', \\<sigma>) \\<in> r - Id \\<Longrightarrow>\n        \\<sigma>' \\<notin> good v)", "unfolding minimal_good_strategy_def"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> good v \\<and>\n  (\\<forall>\\<sigma>'.\n      (\\<sigma>', \\<sigma>) \\<in> r - Id \\<longrightarrow>\n      \\<sigma>' \\<notin> good v)\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> good v &&&\n    (\\<And>\\<sigma>'.\n        (\\<sigma>', \\<sigma>) \\<in> r - Id \\<Longrightarrow>\n        \\<sigma>' \\<notin> good v)", "by auto"], ["proof (state)\nthis:\n  \\<sigma> \\<in> good v\n  (?\\<sigma>', \\<sigma>) \\<in> r - Id \\<Longrightarrow>\n  ?\\<sigma>' \\<notin> good v\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "{"], ["proof (state)\nthis:\n  \\<sigma> \\<in> good v\n  (?\\<sigma>', \\<sigma>) \\<in> r - Id \\<Longrightarrow>\n  ?\\<sigma>' \\<notin> good v\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "fix \\<sigma>'"], ["proof (state)\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "assume \"minimal_good_strategy v \\<sigma>'\""], ["proof (state)\nthis:\n  minimal_good_strategy v \\<sigma>'\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "hence \\<sigma>': \"\\<sigma>' \\<in> good v\" \"\\<And>\\<sigma>. (\\<sigma>, \\<sigma>') \\<in> r - Id \\<Longrightarrow> \\<sigma> \\<notin> good v\""], ["proof (prove)\nusing this:\n  minimal_good_strategy v \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<in> good v &&&\n    (\\<And>\\<sigma>.\n        (\\<sigma>, \\<sigma>') \\<in> r - Id \\<Longrightarrow>\n        \\<sigma> \\<notin> good v)", "unfolding minimal_good_strategy_def"], ["proof (prove)\nusing this:\n  \\<sigma>' \\<in> good v \\<and>\n  (\\<forall>\\<sigma>''.\n      (\\<sigma>'', \\<sigma>') \\<in> r - Id \\<longrightarrow>\n      \\<sigma>'' \\<notin> good v)\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<in> good v &&&\n    (\\<And>\\<sigma>.\n        (\\<sigma>, \\<sigma>') \\<in> r - Id \\<Longrightarrow>\n        \\<sigma> \\<notin> good v)", "by auto"], ["proof (state)\nthis:\n  \\<sigma>' \\<in> good v\n  (?\\<sigma>, \\<sigma>') \\<in> r - Id \\<Longrightarrow>\n  ?\\<sigma> \\<notin> good v\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "have \"(\\<sigma>, \\<sigma>') \\<notin> r - Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<sigma>') \\<notin> r - Id", "using \\<sigma>(1) \\<sigma>'(2)"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> good v\n  (?\\<sigma>, \\<sigma>') \\<in> r - Id \\<Longrightarrow>\n  ?\\<sigma> \\<notin> good v\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<sigma>') \\<notin> r - Id", "by blast"], ["proof (state)\nthis:\n  (\\<sigma>, \\<sigma>') \\<notin> r - Id\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, \\<sigma>') \\<notin> r - Id\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "have \"(\\<sigma>', \\<sigma>) \\<notin> r - Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<sigma>) \\<notin> r - Id", "using \\<sigma>(2) \\<sigma>'(1)"], ["proof (prove)\nusing this:\n  (?\\<sigma>', \\<sigma>) \\<in> r - Id \\<Longrightarrow>\n  ?\\<sigma>' \\<notin> good v\n  \\<sigma>' \\<in> good v\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<sigma>) \\<notin> r - Id", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>', \\<sigma>) \\<notin> r - Id\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', \\<sigma>) \\<notin> r - Id\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "have \"\\<sigma> \\<in> Strategies\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> Strategies", "using \\<sigma>(1) \\<open>v \\<in> S\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> good v\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> Strategies", "by auto"], ["proof (state)\nthis:\n  \\<sigma> \\<in> Strategies\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "moreover"], ["proof (state)\nthis:\n  \\<sigma> \\<in> Strategies\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "have \"\\<sigma>' \\<in> Strategies\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>' \\<in> Strategies", "using \\<sigma>'(1) \\<open>v \\<in> S\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma>' \\<in> good v\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<in> Strategies", "by auto"], ["proof (state)\nthis:\n  \\<sigma>' \\<in> Strategies\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<sigma>') \\<notin> r - Id\n  (\\<sigma>', \\<sigma>) \\<notin> r - Id\n  \\<sigma> \\<in> Strategies\n  \\<sigma>' \\<in> Strategies", "have \"\\<sigma>' = \\<sigma>\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<sigma>') \\<notin> r - Id\n  (\\<sigma>', \\<sigma>) \\<notin> r - Id\n  \\<sigma> \\<in> Strategies\n  \\<sigma>' \\<in> Strategies\n\ngoal (1 subgoal):\n 1. \\<sigma>' = \\<sigma>", "using r_wo Linear_order_in_diff_Id well_order_on_Field well_order_on_def"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<sigma>') \\<notin> r - Id\n  (\\<sigma>', \\<sigma>) \\<notin> r - Id\n  \\<sigma> \\<in> Strategies\n  \\<sigma>' \\<in> Strategies\n  well_order_on Strategies r\n  \\<lbrakk>Linear_order ?r; ?a \\<in> Field ?r; ?b \\<in> Field ?r\\<rbrakk>\n  \\<Longrightarrow> ((?a, ?b) \\<in> ?r) = ((?b, ?a) \\<notin> ?r - Id)\n  well_order_on ?A ?r \\<Longrightarrow> ?A = Field ?r\n  well_order_on ?A ?r \\<equiv> linear_order_on ?A ?r \\<and> wf (?r - Id)\n\ngoal (1 subgoal):\n 1. \\<sigma>' = \\<sigma>", "by fastforce"], ["proof (state)\nthis:\n  \\<sigma>' = \\<sigma>\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "}"], ["proof (state)\nthis:\n  minimal_good_strategy v ?\\<sigma>'2 \\<Longrightarrow>\n  ?\\<sigma>'2 = \\<sigma>\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "with \\<sigma>1"], ["proof (chain)\npicking this:\n  minimal_good_strategy v \\<sigma>\n  minimal_good_strategy v ?\\<sigma>'2 \\<Longrightarrow>\n  ?\\<sigma>'2 = \\<sigma>", "have \"\\<exists>!\\<sigma>. minimal_good_strategy v \\<sigma>\""], ["proof (prove)\nusing this:\n  minimal_good_strategy v \\<sigma>\n  minimal_good_strategy v ?\\<sigma>'2 \\<Longrightarrow>\n  ?\\<sigma>'2 = \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>!\\<sigma>. minimal_good_strategy v \\<sigma>", "by blast"], ["proof (state)\nthis:\n  \\<exists>!\\<sigma>. minimal_good_strategy v \\<sigma>\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>!\\<sigma>. minimal_good_strategy v \\<sigma>\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "using theI'[of \"minimal_good_strategy v\", folded choose_def]"], ["proof (prove)\nusing this:\n  \\<exists>!\\<sigma>. minimal_good_strategy v \\<sigma>\n  \\<exists>!x. minimal_good_strategy v x \\<Longrightarrow>\n  minimal_good_strategy v (choose v)\n\ngoal (1 subgoal):\n 1. minimal_good_strategy v (choose v)", "by blast"], ["proof (state)\nthis:\n  minimal_good_strategy v (choose v)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary\n  assumes \"v \\<in> S\"\n  shows choose_good: \"choose v \\<in> good v\"\n    and choose_minimal: \"\\<And>\\<sigma>'. (\\<sigma>', choose v) \\<in> r - Id \\<Longrightarrow> \\<sigma>' \\<notin> good v\"\n    and choose_strategy: \"strategy p (choose v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. choose v \\<in> good v &&&\n    (\\<And>\\<sigma>'.\n        (\\<sigma>', choose v) \\<in> r - Id \\<Longrightarrow>\n        \\<sigma>' \\<notin> good v) &&&\n    strategy p (choose v)", "using choose_works[OF assms, unfolded minimal_good_strategy_def] good_strategies"], ["proof (prove)\nusing this:\n  choose v \\<in> good v \\<and>\n  (\\<forall>\\<sigma>'.\n      (\\<sigma>', choose v) \\<in> r - Id \\<longrightarrow>\n      \\<sigma>' \\<notin> good v)\n  ?\\<sigma> \\<in> good ?v \\<Longrightarrow> strategy p ?\\<sigma>\n\ngoal (1 subgoal):\n 1. choose v \\<in> good v &&&\n    (\\<And>\\<sigma>'.\n        (\\<sigma>', choose v) \\<in> r - Id \\<Longrightarrow>\n        \\<sigma>' \\<notin> good v) &&&\n    strategy p (choose v)", "by blast+"], ["", "corollary choose_in_Strategies: \"v \\<in> S \\<Longrightarrow> choose v \\<in> Strategies\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> S \\<Longrightarrow> choose v \\<in> Strategies", "using choose_good"], ["proof (prove)\nusing this:\n  ?v \\<in> S \\<Longrightarrow> choose ?v \\<in> good ?v\n\ngoal (1 subgoal):\n 1. v \\<in> S \\<Longrightarrow> choose v \\<in> Strategies", "by blast"], ["", "lemma well_ordered_strategy_valid: \"strategy p well_ordered_strategy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p well_ordered_strategy", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. strategy p well_ordered_strategy", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. strategy p well_ordered_strategy", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. strategy p well_ordered_strategy", "assume \"v \\<in> S\" \"v \\<in> VV p\" \"\\<not>deadend v\""], ["proof (state)\nthis:\n  v \\<in> S\n  v \\<in> VV p\n  \\<not> deadend v\n\ngoal (1 subgoal):\n 1. strategy p well_ordered_strategy", "moreover"], ["proof (state)\nthis:\n  v \\<in> S\n  v \\<in> VV p\n  \\<not> deadend v\n\ngoal (1 subgoal):\n 1. strategy p well_ordered_strategy", "have \"strategy p (choose v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p (choose v)", "using choose_works[OF \\<open>v \\<in> S\\<close>, unfolded minimal_good_strategy_def, THEN conjunct1] good_strategies"], ["proof (prove)\nusing this:\n  choose v \\<in> good v\n  ?\\<sigma> \\<in> good ?v \\<Longrightarrow> strategy p ?\\<sigma>\n\ngoal (1 subgoal):\n 1. strategy p (choose v)", "by blast"], ["proof (state)\nthis:\n  strategy p (choose v)\n\ngoal (1 subgoal):\n 1. strategy p well_ordered_strategy", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> S\n  v \\<in> VV p\n  \\<not> deadend v\n  strategy p (choose v)", "have \"v\\<rightarrow>(\\<lambda>v. choose v v) v\""], ["proof (prove)\nusing this:\n  v \\<in> S\n  v \\<in> VV p\n  \\<not> deadend v\n  strategy p (choose v)\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> choose v v", "using strategy_def"], ["proof (prove)\nusing this:\n  v \\<in> S\n  v \\<in> VV p\n  \\<not> deadend v\n  strategy p (choose v)\n  strategy ?p ?\\<sigma> \\<equiv>\n  \\<forall>v\\<in>VV ?p.\n     \\<not> deadend v \\<longrightarrow> v \\<rightarrow> ?\\<sigma> v\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> choose v v", "by blast"], ["proof (state)\nthis:\n  v \\<rightarrow> choose v v\n\ngoal (1 subgoal):\n 1. strategy p well_ordered_strategy", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?v2 \\<in> S; ?v2 \\<in> VV p; \\<not> deadend ?v2\\<rbrakk>\n  \\<Longrightarrow> ?v2 \\<rightarrow> choose ?v2 ?v2\n\ngoal (1 subgoal):\n 1. strategy p well_ordered_strategy", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v2 \\<in> S; ?v2 \\<in> VV p; \\<not> deadend ?v2\\<rbrakk>\n  \\<Longrightarrow> ?v2 \\<rightarrow> choose ?v2 ?v2\n\ngoal (1 subgoal):\n 1. strategy p well_ordered_strategy", "unfolding well_ordered_strategy_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v2 \\<in> S; ?v2 \\<in> VV p; \\<not> deadend ?v2\\<rbrakk>\n  \\<Longrightarrow> ?v2 \\<rightarrow> choose ?v2 ?v2\n\ngoal (1 subgoal):\n 1. strategy p (override_on \\<sigma>_arbitrary (\\<lambda>v. choose v v) S)", "using valid_strategy_updates_set"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v2 \\<in> S; ?v2 \\<in> VV p; \\<not> deadend ?v2\\<rbrakk>\n  \\<Longrightarrow> ?v2 \\<rightarrow> choose ?v2 ?v2\n  \\<lbrakk>strategy ?p ?\\<sigma>;\n   \\<And>v.\n      \\<lbrakk>v \\<in> ?A; v \\<in> VV ?p; \\<not> deadend v\\<rbrakk>\n      \\<Longrightarrow> v \\<rightarrow> ?\\<sigma>' v\\<rbrakk>\n  \\<Longrightarrow> strategy ?p (override_on ?\\<sigma> ?\\<sigma>' ?A)\n\ngoal (1 subgoal):\n 1. strategy p (override_on \\<sigma>_arbitrary (\\<lambda>v. choose v v) S)", "by force"], ["proof (state)\nthis:\n  strategy p well_ordered_strategy\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Strategies on a Path\\<close>"], ["", "text \\<open>Maps a path to its strategies.\\<close>"], ["", "definition \"path_strategies \\<equiv> lmap choose\""], ["", "lemma path_strategies_in_Strategies:\n  assumes \"lset P \\<subseteq> S\"\n  shows \"lset (path_strategies P) \\<subseteq> Strategies\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset (path_strategies P) \\<subseteq> Strategies", "using path_strategies_def assms choose_in_Strategies"], ["proof (prove)\nusing this:\n  path_strategies \\<equiv> lmap choose\n  lset P \\<subseteq> S\n  ?v \\<in> S \\<Longrightarrow> choose ?v \\<in> Strategies\n\ngoal (1 subgoal):\n 1. lset (path_strategies P) \\<subseteq> Strategies", "by auto"], ["", "lemma path_strategies_good:\n  assumes \"lset P \\<subseteq> S\" \"enat n < llength P\"\n  shows \"path_strategies P $ n \\<in> good (P $ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_strategies P $ n \\<in> good (P $ n)", "by (simp add: path_strategies_def assms choose_good lset_lnth_member)"], ["", "lemma path_strategies_strategy:\n  assumes \"lset P \\<subseteq> S\" \"enat n < llength P\"\n  shows \"strategy p (path_strategies P $ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p (path_strategies P $ n)", "using path_strategies_good assms good_strategies"], ["proof (prove)\nusing this:\n  \\<lbrakk>lset ?P \\<subseteq> S; enat ?n < llength ?P\\<rbrakk>\n  \\<Longrightarrow> path_strategies ?P $ ?n \\<in> good (?P $ ?n)\n  lset P \\<subseteq> S\n  enat n < llength P\n  ?\\<sigma> \\<in> good ?v \\<Longrightarrow> strategy p ?\\<sigma>\n\ngoal (1 subgoal):\n 1. strategy p (path_strategies P $ n)", "by blast"], ["", "lemma path_strategies_monotone_Suc:\n  assumes P: \"lset P \\<subseteq> S\" \"valid_path P\" \"path_conforms_with_strategy p P well_ordered_strategy\"\n    \"enat (Suc n) < llength P\"\n  shows \"(path_strategies P $ Suc n, path_strategies P $ n) \\<in> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "define P' where \"P' = ldropn n P\""], ["proof (state)\nthis:\n  P' = ldropn n P\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "hence \"enat (Suc 0) < llength P'\""], ["proof (prove)\nusing this:\n  P' = ldropn n P\n\ngoal (1 subgoal):\n 1. enat (Suc 0) < llength P'", "using P(4)"], ["proof (prove)\nusing this:\n  P' = ldropn n P\n  enat (Suc n) < llength P\n\ngoal (1 subgoal):\n 1. enat (Suc 0) < llength P'", "by (metis enat_ltl_Suc ldrop_eSuc_ltl ldropn_Suc_conv_ldropn llist.disc(2) lnull_0_llength ltl_ldropn)"], ["proof (state)\nthis:\n  enat (Suc 0) < llength P'\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "then"], ["proof (chain)\npicking this:\n  enat (Suc 0) < llength P'", "obtain v w Ps where vw: \"P' = LCons v (LCons w Ps)\""], ["proof (prove)\nusing this:\n  enat (Suc 0) < llength P'\n\ngoal (1 subgoal):\n 1. (\\<And>v w Ps.\n        P' = LCons v (LCons w Ps) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis ldropn_0 ldropn_Suc_conv_ldropn ldropn_lnull lnull_0_llength)"], ["proof (state)\nthis:\n  P' = LCons v (LCons w Ps)\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "moreover"], ["proof (state)\nthis:\n  P' = LCons v (LCons w Ps)\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "have \"lset P' \\<subseteq> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset P' \\<subseteq> S", "unfolding P'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lset (ldropn n P) \\<subseteq> S", "using P(1) lset_ldropn_subset[of n P]"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> S\n  lset (ldropn n P) \\<subseteq> lset P\n\ngoal (1 subgoal):\n 1. lset (ldropn n P) \\<subseteq> S", "by blast"], ["proof (state)\nthis:\n  lset P' \\<subseteq> S\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "ultimately"], ["proof (chain)\npicking this:\n  P' = LCons v (LCons w Ps)\n  lset P' \\<subseteq> S", "have \"v \\<in> S\" \"w \\<in> S\""], ["proof (prove)\nusing this:\n  P' = LCons v (LCons w Ps)\n  lset P' \\<subseteq> S\n\ngoal (1 subgoal):\n 1. v \\<in> S &&& w \\<in> S", "by auto"], ["proof (state)\nthis:\n  v \\<in> S\n  w \\<in> S\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "moreover"], ["proof (state)\nthis:\n  v \\<in> S\n  w \\<in> S\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "have \"v\\<rightarrow>w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow> w", "using valid_path_edges'[of v w Ps, folded vw] valid_path_drop[OF P(2)] P'_def"], ["proof (prove)\nusing this:\n  valid_path P' \\<Longrightarrow> v \\<rightarrow> w\n  valid_path (ldropn ?n P)\n  P' = ldropn n P\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> w", "by blast"], ["proof (state)\nthis:\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "moreover"], ["proof (state)\nthis:\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "have \"choose v \\<in> good v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. choose v \\<in> good v", "using choose_good \\<open>v \\<in> S\\<close>"], ["proof (prove)\nusing this:\n  ?v \\<in> S \\<Longrightarrow> choose ?v \\<in> good ?v\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. choose v \\<in> good v", "by blast"], ["proof (state)\nthis:\n  choose v \\<in> good v\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "moreover"], ["proof (state)\nthis:\n  choose v \\<in> good v\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "have \"v \\<in> VV p \\<Longrightarrow> choose v v = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> VV p \\<Longrightarrow> choose v v = w", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> VV p \\<Longrightarrow> choose v v = w", "assume \"v \\<in> VV p\""], ["proof (state)\nthis:\n  v \\<in> VV p\n\ngoal (1 subgoal):\n 1. v \\<in> VV p \\<Longrightarrow> choose v v = w", "moreover"], ["proof (state)\nthis:\n  v \\<in> VV p\n\ngoal (1 subgoal):\n 1. v \\<in> VV p \\<Longrightarrow> choose v v = w", "have \"path_conforms_with_strategy p P' well_ordered_strategy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P' well_ordered_strategy", "unfolding P'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (ldropn n P) well_ordered_strategy", "using path_conforms_with_strategy_drop P(3)"], ["proof (prove)\nusing this:\n  path_conforms_with_strategy ?p ?P ?\\<sigma> \\<Longrightarrow>\n  path_conforms_with_strategy ?p (ldropn ?n ?P) ?\\<sigma>\n  path_conforms_with_strategy p P well_ordered_strategy\n\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (ldropn n P) well_ordered_strategy", "by blast"], ["proof (state)\nthis:\n  path_conforms_with_strategy p P' well_ordered_strategy\n\ngoal (1 subgoal):\n 1. v \\<in> VV p \\<Longrightarrow> choose v v = w", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> VV p\n  path_conforms_with_strategy p P' well_ordered_strategy", "have \"well_ordered_strategy v = w\""], ["proof (prove)\nusing this:\n  v \\<in> VV p\n  path_conforms_with_strategy p P' well_ordered_strategy\n\ngoal (1 subgoal):\n 1. well_ordered_strategy v = w", "using vw path_conforms_with_strategy_start"], ["proof (prove)\nusing this:\n  v \\<in> VV p\n  path_conforms_with_strategy p P' well_ordered_strategy\n  P' = LCons v (LCons w Ps)\n  \\<lbrakk>path_conforms_with_strategy ?p (LCons ?v (LCons ?w ?P))\n            ?\\<sigma>;\n   ?v \\<in> VV ?p\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma> ?v = ?w\n\ngoal (1 subgoal):\n 1. well_ordered_strategy v = w", "by blast"], ["proof (state)\nthis:\n  well_ordered_strategy v = w\n\ngoal (1 subgoal):\n 1. v \\<in> VV p \\<Longrightarrow> choose v v = w", "thus \"choose v v = w\""], ["proof (prove)\nusing this:\n  well_ordered_strategy v = w\n\ngoal (1 subgoal):\n 1. choose v v = w", "unfolding well_ordered_strategy_def"], ["proof (prove)\nusing this:\n  override_on \\<sigma>_arbitrary (\\<lambda>v. choose v v) S v = w\n\ngoal (1 subgoal):\n 1. choose v v = w", "using \\<open>v \\<in> S\\<close>"], ["proof (prove)\nusing this:\n  override_on \\<sigma>_arbitrary (\\<lambda>v. choose v v) S v = w\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. choose v v = w", "by auto"], ["proof (state)\nthis:\n  choose v v = w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<in> VV p \\<Longrightarrow> choose v v = w\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> S\n  w \\<in> S\n  v \\<rightarrow> w\n  choose v \\<in> good v\n  v \\<in> VV p \\<Longrightarrow> choose v v = w", "have \"choose v \\<in> good w\""], ["proof (prove)\nusing this:\n  v \\<in> S\n  w \\<in> S\n  v \\<rightarrow> w\n  choose v \\<in> good v\n  v \\<in> VV p \\<Longrightarrow> choose v v = w\n\ngoal (1 subgoal):\n 1. choose v \\<in> good w", "using strategies_continue"], ["proof (prove)\nusing this:\n  v \\<in> S\n  w \\<in> S\n  v \\<rightarrow> w\n  choose v \\<in> good v\n  v \\<in> VV p \\<Longrightarrow> choose v v = w\n  \\<lbrakk>?v \\<in> S; ?v \\<rightarrow> ?w;\n   ?v \\<in> VV p \\<Longrightarrow> ?\\<sigma> ?v = ?w;\n   ?\\<sigma> \\<in> good ?v\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma> \\<in> good ?w\n\ngoal (1 subgoal):\n 1. choose v \\<in> good w", "by blast"], ["proof (state)\nthis:\n  choose v \\<in> good w\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "hence *: \"(choose v, choose w) \\<notin> r - Id\""], ["proof (prove)\nusing this:\n  choose v \\<in> good w\n\ngoal (1 subgoal):\n 1. (choose v, choose w) \\<notin> r - Id", "using choose_minimal \\<open>w \\<in> S\\<close>"], ["proof (prove)\nusing this:\n  choose v \\<in> good w\n  \\<lbrakk>?v \\<in> S; (?\\<sigma>', choose ?v) \\<in> r - Id\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma>' \\<notin> good ?v\n  w \\<in> S\n\ngoal (1 subgoal):\n 1. (choose v, choose w) \\<notin> r - Id", "by blast"], ["proof (state)\nthis:\n  (choose v, choose w) \\<notin> r - Id\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "have \"(choose w, choose v) \\<in> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (choose w, choose v) \\<in> r", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (choose w, choose v) \\<in> r\n 2. \\<not> ?P \\<Longrightarrow> (choose w, choose v) \\<in> r", "assume \"choose v = choose w\""], ["proof (state)\nthis:\n  choose v = choose w\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (choose w, choose v) \\<in> r\n 2. \\<not> ?P \\<Longrightarrow> (choose w, choose v) \\<in> r", "thus ?thesis"], ["proof (prove)\nusing this:\n  choose v = choose w\n\ngoal (1 subgoal):\n 1. (choose w, choose v) \\<in> r", "using r_refl refl_onD choose_in_Strategies[OF \\<open>v \\<in> S\\<close>]"], ["proof (prove)\nusing this:\n  choose v = choose w\n  refl_on Strategies r\n  \\<lbrakk>refl_on ?A ?r; ?a \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> (?a, ?a) \\<in> ?r\n  choose v \\<in> Strategies\n\ngoal (1 subgoal):\n 1. (choose w, choose v) \\<in> r", "by fastforce"], ["proof (state)\nthis:\n  (choose w, choose v) \\<in> r\n\ngoal (1 subgoal):\n 1. choose v \\<noteq> choose w \\<Longrightarrow>\n    (choose w, choose v) \\<in> r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. choose v \\<noteq> choose w \\<Longrightarrow>\n    (choose w, choose v) \\<in> r", "assume \"choose v \\<noteq> choose w\""], ["proof (state)\nthis:\n  choose v \\<noteq> choose w\n\ngoal (1 subgoal):\n 1. choose v \\<noteq> choose w \\<Longrightarrow>\n    (choose w, choose v) \\<in> r", "thus ?thesis"], ["proof (prove)\nusing this:\n  choose v \\<noteq> choose w\n\ngoal (1 subgoal):\n 1. (choose w, choose v) \\<in> r", "using * r_total choose_in_Strategies[OF \\<open>v \\<in> S\\<close>] choose_in_Strategies[OF \\<open>w \\<in> S\\<close>]"], ["proof (prove)\nusing this:\n  choose v \\<noteq> choose w\n  (choose v, choose w) \\<notin> r - Id\n  total_on Strategies r\n  choose v \\<in> Strategies\n  choose w \\<in> Strategies\n\ngoal (1 subgoal):\n 1. (choose w, choose v) \\<in> r", "by (metis (lifting) Linear_order_in_diff_Id r_wo well_order_on_Field well_order_on_def)"], ["proof (state)\nthis:\n  (choose w, choose v) \\<in> r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (choose w, choose v) \\<in> r\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "hence \"(path_strategies P' $ Suc 0, path_strategies P' $ 0) \\<in> r\""], ["proof (prove)\nusing this:\n  (choose w, choose v) \\<in> r\n\ngoal (1 subgoal):\n 1. (path_strategies P' $ Suc 0, path_strategies P' $ 0) \\<in> r", "unfolding path_strategies_def"], ["proof (prove)\nusing this:\n  (choose w, choose v) \\<in> r\n\ngoal (1 subgoal):\n 1. (lmap choose P' $ Suc 0, lmap choose P' $ 0) \\<in> r", "using vw"], ["proof (prove)\nusing this:\n  (choose w, choose v) \\<in> r\n  P' = LCons v (LCons w Ps)\n\ngoal (1 subgoal):\n 1. (lmap choose P' $ Suc 0, lmap choose P' $ 0) \\<in> r", "by simp"], ["proof (state)\nthis:\n  (path_strategies P' $ Suc 0, path_strategies P' $ 0) \\<in> r\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "thus ?thesis"], ["proof (prove)\nusing this:\n  (path_strategies P' $ Suc 0, path_strategies P' $ 0) \\<in> r\n\ngoal (1 subgoal):\n 1. (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r", "unfolding path_strategies_def P'_def"], ["proof (prove)\nusing this:\n  (lmap choose (ldropn n P) $ Suc 0, lmap choose (ldropn n P) $ 0) \\<in> r\n\ngoal (1 subgoal):\n 1. (lmap choose P $ Suc n, lmap choose P $ n) \\<in> r", "using lnth_lmap_ldropn[OF Suc_llength[OF P(4)], of choose]\n          lnth_lmap_ldropn_Suc[OF P(4), of choose]"], ["proof (prove)\nusing this:\n  (lmap choose (ldropn n P) $ Suc 0, lmap choose (ldropn n P) $ 0) \\<in> r\n  lmap choose (ldropn n P) $ 0 = lmap choose P $ n\n  lmap choose (ldropn n P) $ Suc 0 = lmap choose P $ Suc n\n\ngoal (1 subgoal):\n 1. (lmap choose P $ Suc n, lmap choose P $ n) \\<in> r", "by simp"], ["proof (state)\nthis:\n  (path_strategies P $ Suc n, path_strategies P $ n) \\<in> r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_strategies_monotone:\n  assumes P: \"lset P \\<subseteq> S\" \"valid_path P\" \"path_conforms_with_strategy p P well_ordered_strategy\"\n    \"n < m\" \"enat m < llength P\"\n  shows \"(path_strategies P $ m, path_strategies P $ n) \\<in> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (path_strategies P $ m, path_strategies P $ n) \\<in> r", "using assms"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> S\n  valid_path P\n  path_conforms_with_strategy p P well_ordered_strategy\n  n < m\n  enat m < llength P\n\ngoal (1 subgoal):\n 1. (path_strategies P $ m, path_strategies P $ n) \\<in> r", "proof (induct \"m - n\" arbitrary: n m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n m.\n       \\<lbrakk>0 = m - n; lset P \\<subseteq> S; valid_path P;\n        path_conforms_with_strategy p P well_ordered_strategy; n < m;\n        enat m < llength P\\<rbrakk>\n       \\<Longrightarrow> (path_strategies P $ m, path_strategies P $ n)\n                         \\<in> r\n 2. \\<And>x n m.\n       \\<lbrakk>\\<And>n m.\n                   \\<lbrakk>x = m - n; lset P \\<subseteq> S; valid_path P;\n                    path_conforms_with_strategy p P well_ordered_strategy;\n                    n < m; enat m < llength P\\<rbrakk>\n                   \\<Longrightarrow> (path_strategies P $ m,\npath_strategies P $ n)\n                                     \\<in> r;\n        Suc x = m - n; lset P \\<subseteq> S; valid_path P;\n        path_conforms_with_strategy p P well_ordered_strategy; n < m;\n        enat m < llength P\\<rbrakk>\n       \\<Longrightarrow> (path_strategies P $ m, path_strategies P $ n)\n                         \\<in> r", "case (Suc d)"], ["proof (state)\nthis:\n  \\<lbrakk>d = ?m - ?n; lset P \\<subseteq> S; valid_path P;\n   path_conforms_with_strategy p P well_ordered_strategy; ?n < ?m;\n   enat ?m < llength P\\<rbrakk>\n  \\<Longrightarrow> (path_strategies P $ ?m, path_strategies P $ ?n) \\<in> r\n  Suc d = m - n\n  lset P \\<subseteq> S\n  valid_path P\n  path_conforms_with_strategy p P well_ordered_strategy\n  n < m\n  enat m < llength P\n\ngoal (2 subgoals):\n 1. \\<And>n m.\n       \\<lbrakk>0 = m - n; lset P \\<subseteq> S; valid_path P;\n        path_conforms_with_strategy p P well_ordered_strategy; n < m;\n        enat m < llength P\\<rbrakk>\n       \\<Longrightarrow> (path_strategies P $ m, path_strategies P $ n)\n                         \\<in> r\n 2. \\<And>x n m.\n       \\<lbrakk>\\<And>n m.\n                   \\<lbrakk>x = m - n; lset P \\<subseteq> S; valid_path P;\n                    path_conforms_with_strategy p P well_ordered_strategy;\n                    n < m; enat m < llength P\\<rbrakk>\n                   \\<Longrightarrow> (path_strategies P $ m,\npath_strategies P $ n)\n                                     \\<in> r;\n        Suc x = m - n; lset P \\<subseteq> S; valid_path P;\n        path_conforms_with_strategy p P well_ordered_strategy; n < m;\n        enat m < llength P\\<rbrakk>\n       \\<Longrightarrow> (path_strategies P $ m, path_strategies P $ n)\n                         \\<in> r", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (path_strategies P $ m, path_strategies P $ n) \\<in> r", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (path_strategies P $ m, path_strategies P $ n) \\<in> r\n 2. \\<not> ?P \\<Longrightarrow>\n    (path_strategies P $ m, path_strategies P $ n) \\<in> r", "assume \"d = 0\""], ["proof (state)\nthis:\n  d = 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (path_strategies P $ m, path_strategies P $ n) \\<in> r\n 2. \\<not> ?P \\<Longrightarrow>\n    (path_strategies P $ m, path_strategies P $ n) \\<in> r", "thus ?thesis"], ["proof (prove)\nusing this:\n  d = 0\n\ngoal (1 subgoal):\n 1. (path_strategies P $ m, path_strategies P $ n) \\<in> r", "using path_strategies_monotone_Suc[OF P(1,2,3)]"], ["proof (prove)\nusing this:\n  d = 0\n  enat (Suc ?n) < llength P \\<Longrightarrow>\n  (path_strategies P $ Suc ?n, path_strategies P $ ?n) \\<in> r\n\ngoal (1 subgoal):\n 1. (path_strategies P $ m, path_strategies P $ n) \\<in> r", "by (metis (no_types) Suc.hyps(2) Suc.prems(4,5) Suc_diff_Suc Suc_inject Suc_leI diff_is_0_eq diffs0_imp_equal)"], ["proof (state)\nthis:\n  (path_strategies P $ m, path_strategies P $ n) \\<in> r\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0 \\<Longrightarrow>\n    (path_strategies P $ m, path_strategies P $ n) \\<in> r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d \\<noteq> 0 \\<Longrightarrow>\n    (path_strategies P $ m, path_strategies P $ n) \\<in> r", "assume \"d \\<noteq> 0\""], ["proof (state)\nthis:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0 \\<Longrightarrow>\n    (path_strategies P $ m, path_strategies P $ n) \\<in> r", "have \"m \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<noteq> 0", "using Suc.hyps(2)"], ["proof (prove)\nusing this:\n  Suc d = m - n\n\ngoal (1 subgoal):\n 1. m \\<noteq> 0", "by linarith"], ["proof (state)\nthis:\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0 \\<Longrightarrow>\n    (path_strategies P $ m, path_strategies P $ n) \\<in> r", "then"], ["proof (chain)\npicking this:\n  m \\<noteq> 0", "obtain m' where m': \"Suc m' = m\""], ["proof (prove)\nusing this:\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>m'. Suc m' = m \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using not0_implies_Suc"], ["proof (prove)\nusing this:\n  m \\<noteq> 0\n  ?n \\<noteq> 0 \\<Longrightarrow> \\<exists>m. ?n = Suc m\n\ngoal (1 subgoal):\n 1. (\\<And>m'. Suc m' = m \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  Suc m' = m\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0 \\<Longrightarrow>\n    (path_strategies P $ m, path_strategies P $ n) \\<in> r", "hence \"d = m' - n\""], ["proof (prove)\nusing this:\n  Suc m' = m\n\ngoal (1 subgoal):\n 1. d = m' - n", "using Suc.hyps(2)"], ["proof (prove)\nusing this:\n  Suc m' = m\n  Suc d = m - n\n\ngoal (1 subgoal):\n 1. d = m' - n", "by presburger"], ["proof (state)\nthis:\n  d = m' - n\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0 \\<Longrightarrow>\n    (path_strategies P $ m, path_strategies P $ n) \\<in> r", "moreover"], ["proof (state)\nthis:\n  d = m' - n\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0 \\<Longrightarrow>\n    (path_strategies P $ m, path_strategies P $ n) \\<in> r", "hence \"n < m'\""], ["proof (prove)\nusing this:\n  d = m' - n\n\ngoal (1 subgoal):\n 1. n < m'", "using \\<open>d \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  d = m' - n\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n < m'", "by presburger"], ["proof (state)\nthis:\n  n < m'\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0 \\<Longrightarrow>\n    (path_strategies P $ m, path_strategies P $ n) \\<in> r", "ultimately"], ["proof (chain)\npicking this:\n  d = m' - n\n  n < m'", "have \"(path_strategies P $ m', path_strategies P $ n) \\<in> r\""], ["proof (prove)\nusing this:\n  d = m' - n\n  n < m'\n\ngoal (1 subgoal):\n 1. (path_strategies P $ m', path_strategies P $ n) \\<in> r", "using Suc.hyps(1)[of m' n, OF _ P(1,2,3)] Suc.prems(5) dual_order.strict_trans enat_ord_simps(2) m'"], ["proof (prove)\nusing this:\n  d = m' - n\n  n < m'\n  \\<lbrakk>d = m' - n; n < m'; enat m' < llength P\\<rbrakk>\n  \\<Longrightarrow> (path_strategies P $ m', path_strategies P $ n) \\<in> r\n  enat m < llength P\n  \\<lbrakk>?b < ?a; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  (enat ?m < enat ?n) = (?m < ?n)\n  Suc m' = m\n\ngoal (1 subgoal):\n 1. (path_strategies P $ m', path_strategies P $ n) \\<in> r", "by blast"], ["proof (state)\nthis:\n  (path_strategies P $ m', path_strategies P $ n) \\<in> r\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0 \\<Longrightarrow>\n    (path_strategies P $ m, path_strategies P $ n) \\<in> r", "thus ?thesis"], ["proof (prove)\nusing this:\n  (path_strategies P $ m', path_strategies P $ n) \\<in> r\n\ngoal (1 subgoal):\n 1. (path_strategies P $ m, path_strategies P $ n) \\<in> r", "using m' path_strategies_monotone_Suc[OF P(1,2,3)]"], ["proof (prove)\nusing this:\n  (path_strategies P $ m', path_strategies P $ n) \\<in> r\n  Suc m' = m\n  enat (Suc ?n) < llength P \\<Longrightarrow>\n  (path_strategies P $ Suc ?n, path_strategies P $ ?n) \\<in> r\n\ngoal (1 subgoal):\n 1. (path_strategies P $ m, path_strategies P $ n) \\<in> r", "by (metis (no_types) Suc.prems(5) r_trans trans_def)"], ["proof (state)\nthis:\n  (path_strategies P $ m, path_strategies P $ n) \\<in> r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (path_strategies P $ m, path_strategies P $ n) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<And>n m.\n       \\<lbrakk>0 = m - n; lset P \\<subseteq> S; valid_path P;\n        path_conforms_with_strategy p P well_ordered_strategy; n < m;\n        enat m < llength P\\<rbrakk>\n       \\<Longrightarrow> (path_strategies P $ m, path_strategies P $ n)\n                         \\<in> r", "qed simp"], ["", "lemma path_strategies_eventually_constant:\n  assumes \"\\<not>lfinite P\" \"lset P \\<subseteq> S\" \"valid_path P\" \"path_conforms_with_strategy p P well_ordered_strategy\"\n  shows \"\\<exists>n. \\<forall>m \\<ge> n. path_strategies P $ n = path_strategies P $ m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       \\<forall>m\\<ge>n. path_strategies P $ n = path_strategies P $ m", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       \\<forall>m\\<ge>n. path_strategies P $ n = path_strategies P $ m", "define \\<sigma>_set where \"\\<sigma>_set = lset (path_strategies P)\""], ["proof (state)\nthis:\n  \\<sigma>_set = lset (path_strategies P)\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       \\<forall>m\\<ge>n. path_strategies P $ n = path_strategies P $ m", "have \"\\<exists>\\<sigma>. \\<sigma> \\<in> \\<sigma>_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>. \\<sigma> \\<in> \\<sigma>_set", "unfolding \\<sigma>_set_def path_strategies_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>. \\<sigma> \\<in> lset (lmap choose P)", "using assms(1) lfinite_lmap lset_nth_member_inf"], ["proof (prove)\nusing this:\n  \\<not> lfinite P\n  lfinite (lmap ?f ?xs) = lfinite ?xs\n  \\<lbrakk>\\<not> lfinite ?xs; lset ?xs \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> ?xs $ ?n \\<in> ?A\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>. \\<sigma> \\<in> lset (lmap choose P)", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>. \\<sigma> \\<in> \\<sigma>_set\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       \\<forall>m\\<ge>n. path_strategies P $ n = path_strategies P $ m", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<sigma>. \\<sigma> \\<in> \\<sigma>_set", "obtain \\<sigma>' where \\<sigma>': \"\\<sigma>' \\<in> \\<sigma>_set\" \"\\<And>\\<tau>. (\\<tau>, \\<sigma>') \\<in> r - Id \\<Longrightarrow> \\<tau> \\<notin> \\<sigma>_set\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. \\<sigma> \\<in> \\<sigma>_set\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>'.\n        \\<lbrakk>\\<sigma>' \\<in> \\<sigma>_set;\n         \\<And>\\<tau>.\n            (\\<tau>, \\<sigma>') \\<in> r - Id \\<Longrightarrow>\n            \\<tau> \\<notin> \\<sigma>_set\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using wfE_min[of \"r - Id\" _ \\<sigma>_set]"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>. \\<sigma> \\<in> \\<sigma>_set\n  \\<lbrakk>wf (r - Id); ?x \\<in> \\<sigma>_set;\n   \\<And>z.\n      \\<lbrakk>z \\<in> \\<sigma>_set;\n       \\<And>y.\n          (y, z) \\<in> r - Id \\<Longrightarrow>\n          y \\<notin> \\<sigma>_set\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>'.\n        \\<lbrakk>\\<sigma>' \\<in> \\<sigma>_set;\n         \\<And>\\<tau>.\n            (\\<tau>, \\<sigma>') \\<in> r - Id \\<Longrightarrow>\n            \\<tau> \\<notin> \\<sigma>_set\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<sigma>' \\<in> \\<sigma>_set\n  (?\\<tau>, \\<sigma>') \\<in> r - Id \\<Longrightarrow>\n  ?\\<tau> \\<notin> \\<sigma>_set\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       \\<forall>m\\<ge>n. path_strategies P $ n = path_strategies P $ m", "obtain n where n: \"path_strategies P $ n = \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        path_strategies P $ n = \\<sigma>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<sigma>'(1) lset_lnth[of \\<sigma>']"], ["proof (prove)\nusing this:\n  \\<sigma>' \\<in> \\<sigma>_set\n  \\<sigma>' \\<in> lset ?xs \\<Longrightarrow> \\<exists>n. ?xs $ n = \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        path_strategies P $ n = \\<sigma>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding \\<sigma>_set_def"], ["proof (prove)\nusing this:\n  \\<sigma>' \\<in> lset (path_strategies P)\n  \\<sigma>' \\<in> lset ?xs \\<Longrightarrow> \\<exists>n. ?xs $ n = \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        path_strategies P $ n = \\<sigma>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  path_strategies P $ n = \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       \\<forall>m\\<ge>n. path_strategies P $ n = path_strategies P $ m", "{"], ["proof (state)\nthis:\n  path_strategies P $ n = \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       \\<forall>m\\<ge>n. path_strategies P $ n = path_strategies P $ m", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       \\<forall>m\\<ge>n. path_strategies P $ n = path_strategies P $ m", "assume \"n \\<le> m\""], ["proof (state)\nthis:\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       \\<forall>m\\<ge>n. path_strategies P $ n = path_strategies P $ m", "have \"path_strategies P $ n = path_strategies P $ m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_strategies P $ n = path_strategies P $ m", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. path_strategies P $ n \\<noteq> path_strategies P $ m \\<Longrightarrow>\n    False", "assume *: \"path_strategies P $ n \\<noteq> path_strategies P $ m\""], ["proof (state)\nthis:\n  path_strategies P $ n \\<noteq> path_strategies P $ m\n\ngoal (1 subgoal):\n 1. path_strategies P $ n \\<noteq> path_strategies P $ m \\<Longrightarrow>\n    False", "with \\<open>n \\<le> m\\<close>"], ["proof (chain)\npicking this:\n  n \\<le> m\n  path_strategies P $ n \\<noteq> path_strategies P $ m", "have \"n < m\""], ["proof (prove)\nusing this:\n  n \\<le> m\n  path_strategies P $ n \\<noteq> path_strategies P $ m\n\ngoal (1 subgoal):\n 1. n < m", "using le_imp_less_or_eq"], ["proof (prove)\nusing this:\n  n \\<le> m\n  path_strategies P $ n \\<noteq> path_strategies P $ m\n  ?x \\<le> ?y \\<Longrightarrow> ?x < ?y \\<or> ?x = ?y\n\ngoal (1 subgoal):\n 1. n < m", "by blast"], ["proof (state)\nthis:\n  n < m\n\ngoal (1 subgoal):\n 1. path_strategies P $ n \\<noteq> path_strategies P $ m \\<Longrightarrow>\n    False", "with path_strategies_monotone"], ["proof (chain)\npicking this:\n  \\<lbrakk>lset ?P \\<subseteq> S; valid_path ?P;\n   path_conforms_with_strategy p ?P well_ordered_strategy; ?n < ?m;\n   enat ?m < llength ?P\\<rbrakk>\n  \\<Longrightarrow> (path_strategies ?P $ ?m, path_strategies ?P $ ?n)\n                    \\<in> r\n  n < m", "have \"(path_strategies P $ m, path_strategies P $ n) \\<in> r\""], ["proof (prove)\nusing this:\n  \\<lbrakk>lset ?P \\<subseteq> S; valid_path ?P;\n   path_conforms_with_strategy p ?P well_ordered_strategy; ?n < ?m;\n   enat ?m < llength ?P\\<rbrakk>\n  \\<Longrightarrow> (path_strategies ?P $ ?m, path_strategies ?P $ ?n)\n                    \\<in> r\n  n < m\n\ngoal (1 subgoal):\n 1. (path_strategies P $ m, path_strategies P $ n) \\<in> r", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>lset ?P \\<subseteq> S; valid_path ?P;\n   path_conforms_with_strategy p ?P well_ordered_strategy; ?n < ?m;\n   enat ?m < llength ?P\\<rbrakk>\n  \\<Longrightarrow> (path_strategies ?P $ ?m, path_strategies ?P $ ?n)\n                    \\<in> r\n  n < m\n  \\<not> lfinite P\n  lset P \\<subseteq> S\n  valid_path P\n  path_conforms_with_strategy p P well_ordered_strategy\n\ngoal (1 subgoal):\n 1. (path_strategies P $ m, path_strategies P $ n) \\<in> r", "by (simp add: infinite_small_llength)"], ["proof (state)\nthis:\n  (path_strategies P $ m, path_strategies P $ n) \\<in> r\n\ngoal (1 subgoal):\n 1. path_strategies P $ n \\<noteq> path_strategies P $ m \\<Longrightarrow>\n    False", "with *"], ["proof (chain)\npicking this:\n  path_strategies P $ n \\<noteq> path_strategies P $ m\n  (path_strategies P $ m, path_strategies P $ n) \\<in> r", "have \"(path_strategies P $ m, path_strategies P $ n) \\<in> r - Id\""], ["proof (prove)\nusing this:\n  path_strategies P $ n \\<noteq> path_strategies P $ m\n  (path_strategies P $ m, path_strategies P $ n) \\<in> r\n\ngoal (1 subgoal):\n 1. (path_strategies P $ m, path_strategies P $ n) \\<in> r - Id", "by simp"], ["proof (state)\nthis:\n  (path_strategies P $ m, path_strategies P $ n) \\<in> r - Id\n\ngoal (1 subgoal):\n 1. path_strategies P $ n \\<noteq> path_strategies P $ m \\<Longrightarrow>\n    False", "with \\<sigma>'(2) n"], ["proof (chain)\npicking this:\n  (?\\<tau>, \\<sigma>') \\<in> r - Id \\<Longrightarrow>\n  ?\\<tau> \\<notin> \\<sigma>_set\n  path_strategies P $ n = \\<sigma>'\n  (path_strategies P $ m, path_strategies P $ n) \\<in> r - Id", "have \"path_strategies P $ m \\<notin> \\<sigma>_set\""], ["proof (prove)\nusing this:\n  (?\\<tau>, \\<sigma>') \\<in> r - Id \\<Longrightarrow>\n  ?\\<tau> \\<notin> \\<sigma>_set\n  path_strategies P $ n = \\<sigma>'\n  (path_strategies P $ m, path_strategies P $ n) \\<in> r - Id\n\ngoal (1 subgoal):\n 1. path_strategies P $ m \\<notin> \\<sigma>_set", "by blast"], ["proof (state)\nthis:\n  path_strategies P $ m \\<notin> \\<sigma>_set\n\ngoal (1 subgoal):\n 1. path_strategies P $ n \\<noteq> path_strategies P $ m \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  path_strategies P $ m \\<notin> \\<sigma>_set\n\ngoal (1 subgoal):\n 1. False", "unfolding \\<sigma>_set_def path_strategies_def"], ["proof (prove)\nusing this:\n  lmap choose P $ m \\<notin> lset (lmap choose P)\n\ngoal (1 subgoal):\n 1. False", "using assms(1) lfinite_lmap lset_nth_member_inf"], ["proof (prove)\nusing this:\n  lmap choose P $ m \\<notin> lset (lmap choose P)\n  \\<not> lfinite P\n  lfinite (lmap ?f ?xs) = lfinite ?xs\n  \\<lbrakk>\\<not> lfinite ?xs; lset ?xs \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> ?xs $ ?n \\<in> ?A\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  path_strategies P $ n = path_strategies P $ m\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       \\<forall>m\\<ge>n. path_strategies P $ n = path_strategies P $ m", "}"], ["proof (state)\nthis:\n  n \\<le> ?m2 \\<Longrightarrow>\n  path_strategies P $ n = path_strategies P $ ?m2\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       \\<forall>m\\<ge>n. path_strategies P $ n = path_strategies P $ m", "thus ?thesis"], ["proof (prove)\nusing this:\n  n \\<le> ?m2 \\<Longrightarrow>\n  path_strategies P $ n = path_strategies P $ ?m2\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       \\<forall>m\\<ge>n. path_strategies P $ n = path_strategies P $ m", "by blast"], ["proof (state)\nthis:\n  \\<exists>n.\n     \\<forall>m\\<ge>n. path_strategies P $ n = path_strategies P $ m\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Eventually One Strategy\\<close>"], ["", "text \\<open>\n  The key lemma: Every path that stays in @{term S} and follows @{const well_ordered_strategy}\n  eventually follows one strategy because the strategies are well-ordered and non-increasing\n  along the path.\n\\<close>"], ["", "lemma path_eventually_conforms_to_\\<sigma>_map_n:\n  assumes \"lset P \\<subseteq> S\" \"valid_path P\" \"path_conforms_with_strategy p P well_ordered_strategy\"\n  shows \"\\<exists>n. path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "assume \"lfinite P\""], ["proof (state)\nthis:\n  lfinite P\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "then"], ["proof (chain)\npicking this:\n  lfinite P", "obtain n where \"llength P = enat n\""], ["proof (prove)\nusing this:\n  lfinite P\n\ngoal (1 subgoal):\n 1. (\\<And>n. llength P = enat n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lfinite_llength_enat"], ["proof (prove)\nusing this:\n  lfinite P\n  lfinite ?xs \\<Longrightarrow> \\<exists>n. llength ?xs = enat n\n\ngoal (1 subgoal):\n 1. (\\<And>n. llength P = enat n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  llength P = enat n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "hence \"ldropn n P = LNil\""], ["proof (prove)\nusing this:\n  llength P = enat n\n\ngoal (1 subgoal):\n 1. ldropn n P = LNil", "by simp"], ["proof (state)\nthis:\n  ldropn n P = LNil\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ldropn n P = LNil\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "by (metis path_conforms_LNil)"], ["proof (state)\nthis:\n  \\<exists>n.\n     path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "assume \"\\<not>lfinite P\""], ["proof (state)\nthis:\n  \\<not> lfinite P\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "then"], ["proof (chain)\npicking this:\n  \\<not> lfinite P", "obtain n where n: \"\\<And>m. n \\<le> m \\<Longrightarrow> path_strategies P $ n = path_strategies P $ m\""], ["proof (prove)\nusing this:\n  \\<not> lfinite P\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        (\\<And>m.\n            n \\<le> m \\<Longrightarrow>\n            path_strategies P $ n = path_strategies P $ m) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using path_strategies_eventually_constant assms"], ["proof (prove)\nusing this:\n  \\<not> lfinite P\n  \\<lbrakk>\\<not> lfinite ?P; lset ?P \\<subseteq> S; valid_path ?P;\n   path_conforms_with_strategy p ?P well_ordered_strategy\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n.\n                       \\<forall>m\\<ge>n.\n                          path_strategies ?P $ n = path_strategies ?P $ m\n  lset P \\<subseteq> S\n  valid_path P\n  path_conforms_with_strategy p P well_ordered_strategy\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        (\\<And>m.\n            n \\<le> m \\<Longrightarrow>\n            path_strategies P $ n = path_strategies P $ m) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n \\<le> ?m \\<Longrightarrow>\n  path_strategies P $ n = path_strategies P $ ?m\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "let ?\\<sigma> = well_ordered_strategy"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "define P' where \"P' = ldropn n P\""], ["proof (state)\nthis:\n  P' = ldropn n P\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "{"], ["proof (state)\nthis:\n  P' = ldropn n P\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "assume \"v \\<in> lset P'\""], ["proof (state)\nthis:\n  v \\<in> lset P'\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "hence \"v \\<in> S\""], ["proof (prove)\nusing this:\n  v \\<in> lset P'\n\ngoal (1 subgoal):\n 1. v \\<in> S", "using \\<open>lset P \\<subseteq> S\\<close> P'_def in_lset_ldropnD"], ["proof (prove)\nusing this:\n  v \\<in> lset P'\n  lset P \\<subseteq> S\n  P' = ldropn n P\n  ?x \\<in> lset (ldropn ?n ?xs) \\<Longrightarrow> ?x \\<in> lset ?xs\n\ngoal (1 subgoal):\n 1. v \\<in> S", "by fastforce"], ["proof (state)\nthis:\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "from \\<open>v \\<in> lset P'\\<close>"], ["proof (chain)\npicking this:\n  v \\<in> lset P'", "obtain m where m: \"enat m < llength P'\" \"P' $ m = v\""], ["proof (prove)\nusing this:\n  v \\<in> lset P'\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>enat m < llength P'; P' $ m = v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson in_lset_conv_lnth)"], ["proof (state)\nthis:\n  enat m < llength P'\n  P' $ m = v\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "hence \"P $ m + n = v\""], ["proof (prove)\nusing this:\n  enat m < llength P'\n  P' $ m = v\n\ngoal (1 subgoal):\n 1. P $ m + n = v", "unfolding P'_def"], ["proof (prove)\nusing this:\n  enat m < llength (ldropn n P)\n  ldropn n P $ m = v\n\ngoal (1 subgoal):\n 1. P $ m + n = v", "by (simp add: \\<open>\\<not>lfinite P\\<close> infinite_small_llength)"], ["proof (state)\nthis:\n  P $ m + n = v\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "moreover"], ["proof (state)\nthis:\n  P $ m + n = v\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "have \"?\\<sigma> v = choose v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_ordered_strategy v = choose v v", "unfolding well_ordered_strategy_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. override_on \\<sigma>_arbitrary (\\<lambda>v. choose v v) S v = choose v v", "using \\<open>v \\<in> S\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. override_on \\<sigma>_arbitrary (\\<lambda>v. choose v v) S v = choose v v", "by auto"], ["proof (state)\nthis:\n  well_ordered_strategy v = choose v v\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "ultimately"], ["proof (chain)\npicking this:\n  P $ m + n = v\n  well_ordered_strategy v = choose v v", "have \"?\\<sigma> v = (path_strategies P $ m + n) v\""], ["proof (prove)\nusing this:\n  P $ m + n = v\n  well_ordered_strategy v = choose v v\n\ngoal (1 subgoal):\n 1. well_ordered_strategy v = (path_strategies P $ m + n) v", "unfolding path_strategies_def"], ["proof (prove)\nusing this:\n  P $ m + n = v\n  well_ordered_strategy v = choose v v\n\ngoal (1 subgoal):\n 1. well_ordered_strategy v = (lmap choose P $ m + n) v", "using infinite_small_llength[OF \\<open>\\<not>lfinite P\\<close>]"], ["proof (prove)\nusing this:\n  P $ m + n = v\n  well_ordered_strategy v = choose v v\n  enat ?n < llength P\n\ngoal (1 subgoal):\n 1. well_ordered_strategy v = (lmap choose P $ m + n) v", "by simp"], ["proof (state)\nthis:\n  well_ordered_strategy v = (path_strategies P $ m + n) v\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "hence \"?\\<sigma> v = (path_strategies P $ n) v\""], ["proof (prove)\nusing this:\n  well_ordered_strategy v = (path_strategies P $ m + n) v\n\ngoal (1 subgoal):\n 1. well_ordered_strategy v = (path_strategies P $ n) v", "using n[of \"m + n\"]"], ["proof (prove)\nusing this:\n  well_ordered_strategy v = (path_strategies P $ m + n) v\n  n \\<le> m + n \\<Longrightarrow>\n  path_strategies P $ n = path_strategies P $ m + n\n\ngoal (1 subgoal):\n 1. well_ordered_strategy v = (path_strategies P $ n) v", "by simp"], ["proof (state)\nthis:\n  well_ordered_strategy v = (path_strategies P $ n) v\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "}"], ["proof (state)\nthis:\n  ?v2 \\<in> lset P' \\<Longrightarrow>\n  well_ordered_strategy ?v2 = (path_strategies P $ n) ?v2\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "moreover"], ["proof (state)\nthis:\n  ?v2 \\<in> lset P' \\<Longrightarrow>\n  well_ordered_strategy ?v2 = (path_strategies P $ n) ?v2\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "have \"path_conforms_with_strategy p P' well_ordered_strategy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p P' well_ordered_strategy", "unfolding P'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. path_conforms_with_strategy p (ldropn n P) well_ordered_strategy", "by (simp add: assms(3) path_conforms_with_strategy_drop)"], ["proof (state)\nthis:\n  path_conforms_with_strategy p P' well_ordered_strategy\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P \\<Longrightarrow>\n    \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "ultimately"], ["proof (chain)\npicking this:\n  ?v2 \\<in> lset P' \\<Longrightarrow>\n  well_ordered_strategy ?v2 = (path_strategies P $ n) ?v2\n  path_conforms_with_strategy p P' well_ordered_strategy", "show ?thesis"], ["proof (prove)\nusing this:\n  ?v2 \\<in> lset P' \\<Longrightarrow>\n  well_ordered_strategy ?v2 = (path_strategies P $ n) ?v2\n  path_conforms_with_strategy p P' well_ordered_strategy\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "using path_conforms_with_strategy_irrelevant_updates P'_def"], ["proof (prove)\nusing this:\n  ?v2 \\<in> lset P' \\<Longrightarrow>\n  well_ordered_strategy ?v2 = (path_strategies P $ n) ?v2\n  path_conforms_with_strategy p P' well_ordered_strategy\n  \\<lbrakk>path_conforms_with_strategy ?p ?P ?\\<sigma>;\n   \\<And>v.\n      v \\<in> lset ?P \\<Longrightarrow> ?\\<sigma> v = ?\\<sigma>' v\\<rbrakk>\n  \\<Longrightarrow> path_conforms_with_strategy ?p ?P ?\\<sigma>'\n  P' = ldropn n P\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)", "by blast"], ["proof (state)\nthis:\n  \\<exists>n.\n     path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)\n\ngoal:\nNo subgoals!", "qed"], ["", "end \\<comment> \\<open>WellOrderedStrategies\\<close>"], ["", "end"]]}