{"file_name": "/home/qj213/afp-2021-10-22/thys/Parity_Game/MoreCoinductiveList.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Parity_Game", "problem_names": ["lemma lset_lnth: \"x \\<in> lset xs \\<Longrightarrow> \\<exists>n. lnth xs n = x\"", "lemma lset_lnth_member: \"\\<lbrakk> lset xs \\<subseteq> A; enat n < llength xs \\<rbrakk> \\<Longrightarrow> lnth xs n \\<in> A\"", "lemma lset_nth_member_inf: \"\\<lbrakk> \\<not>lfinite xs; lset xs \\<subseteq> A \\<rbrakk> \\<Longrightarrow> lnth xs n \\<in> A\"", "lemma lset_intersect_lnth: \"lset xs \\<inter> A \\<noteq> {} \\<Longrightarrow> \\<exists>n. enat n < llength xs \\<and> lnth xs n \\<in> A\"", "lemma lset_ltake_Suc:\n  assumes \"\\<not>lnull xs\" \"lnth xs 0 = x\" \"lset (ltake (enat n) (ltl xs)) \\<subseteq> A\"\n  shows \"lset (ltake (enat (Suc n)) xs) \\<subseteq> insert x A\"", "lemma lfinite_lset: \"lfinite xs \\<Longrightarrow> \\<not>lnull xs \\<Longrightarrow> llast xs \\<in> lset xs\"", "lemma lset_subset: \"\\<not>(lset xs \\<subseteq> A) \\<Longrightarrow> \\<exists>n. enat n < llength xs \\<and> lnth xs n \\<notin> A\"", "lemma enat_Suc_ltl:\n  assumes \"enat (Suc n) < llength xs\"\n  shows \"enat n < llength (ltl xs)\"", "lemma enat_ltl_Suc: \"enat n < llength (ltl xs) \\<Longrightarrow> enat (Suc n) < llength xs\"", "lemma infinite_small_llength [intro]: \"\\<not>lfinite xs \\<Longrightarrow> enat n < llength xs\"", "lemma lnull_0_llength: \"\\<not>lnull xs \\<Longrightarrow> enat 0 < llength xs\"", "lemma Suc_llength: \"enat (Suc n) < llength xs \\<Longrightarrow> enat n < llength xs\"", "lemma ltake_lnth: \"ltake n xs = ltake n ys \\<Longrightarrow> enat m < n \\<Longrightarrow> lnth xs m = lnth ys m\"", "lemma lset_ltake_prefix [simp]: \"n \\<le> m \\<Longrightarrow> lset (ltake n xs) \\<subseteq> lset (ltake m xs)\"", "lemma lset_ltake: \"(\\<And>m. m < n \\<Longrightarrow> lnth xs m \\<in> A) \\<Longrightarrow> lset (ltake (enat n) xs) \\<subseteq> A\"", "lemma llength_ltake': \"enat n < llength xs \\<Longrightarrow> llength (ltake (enat n) xs) = enat n\"", "lemma llast_ltake:\n  assumes \"enat (Suc n) < llength xs\"\n  shows \"llast (ltake (enat (Suc n)) xs) = lnth xs n\" (is \"llast ?A = _\")", "lemma lset_ltake_ltl: \"lset (ltake (enat n) (ltl xs)) \\<subseteq> lset (ltake (enat (Suc n)) xs)\"", "lemma ltl_ldrop: \"\\<lbrakk> \\<And>xs. P xs \\<Longrightarrow> P (ltl xs); P xs \\<rbrakk> \\<Longrightarrow> P (ldropn n xs)\"", "lemma lfinite_drop_set: \"lfinite xs \\<Longrightarrow> \\<exists>n. v \\<notin> lset (ldrop n xs)\"", "lemma index_infinite_set:\n  \"\\<lbrakk> \\<not>lfinite x; lnth x m = y; \\<And>i. lnth x i = y \\<Longrightarrow> (\\<exists>m > i. lnth x m = y) \\<rbrakk> \\<Longrightarrow> y \\<in> lset (ldropn n x)\"", "lemma lnth_lmap_ldropn:\n  \"enat n < llength xs \\<Longrightarrow> lnth (lmap f (ldropn n xs)) 0 = lnth (lmap f xs) n\"", "lemma lnth_lmap_ldropn_Suc:\n  \"enat (Suc n) < llength xs \\<Longrightarrow> lnth (lmap f (ldropn n xs)) (Suc 0) = lnth (lmap f xs) (Suc n)\""], "translations": [["", "lemma lset_lnth: \"x \\<in> lset xs \\<Longrightarrow> \\<exists>n. lnth xs n = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> lset xs \\<Longrightarrow> \\<exists>n. lnth xs n = x", "by (induct rule: llist.set_induct, meson lnth_0, meson lnth_Suc_LCons)"], ["", "lemma lset_lnth_member: \"\\<lbrakk> lset xs \\<subseteq> A; enat n < llength xs \\<rbrakk> \\<Longrightarrow> lnth xs n \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>lset xs \\<subseteq> A; enat n < llength xs\\<rbrakk>\n    \\<Longrightarrow> lnth xs n \\<in> A", "using contra_subsetD[of \"lset xs\" A] in_lset_conv_lnth[of _ xs]"], ["proof (prove)\nusing this:\n  \\<lbrakk>lset xs \\<subseteq> A; ?c \\<notin> A\\<rbrakk>\n  \\<Longrightarrow> ?c \\<notin> lset xs\n  (?x \\<in> lset xs) =\n  (\\<exists>n. enat n < llength xs \\<and> lnth xs n = ?x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>lset xs \\<subseteq> A; enat n < llength xs\\<rbrakk>\n    \\<Longrightarrow> lnth xs n \\<in> A", "by blast"], ["", "lemma lset_nth_member_inf: \"\\<lbrakk> \\<not>lfinite xs; lset xs \\<subseteq> A \\<rbrakk> \\<Longrightarrow> lnth xs n \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> lfinite xs; lset xs \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> lnth xs n \\<in> A", "by (metis contra_subsetD inf_llist_lnth lset_inf_llist rangeI)"], ["", "lemma lset_intersect_lnth: \"lset xs \\<inter> A \\<noteq> {} \\<Longrightarrow> \\<exists>n. enat n < llength xs \\<and> lnth xs n \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset xs \\<inter> A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>n. enat n < llength xs \\<and> lnth xs n \\<in> A", "by (metis disjoint_iff_not_equal in_lset_conv_lnth)"], ["", "lemma lset_ltake_Suc:\n  assumes \"\\<not>lnull xs\" \"lnth xs 0 = x\" \"lset (ltake (enat n) (ltl xs)) \\<subseteq> A\"\n  shows \"lset (ltake (enat (Suc n)) xs) \\<subseteq> insert x A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset (ltake (enat (Suc n)) xs) \\<subseteq> insert x A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. lset (ltake (enat (Suc n)) xs) \\<subseteq> insert x A", "have \"lset (ltake (eSuc (enat n)) (LCons x (ltl xs))) \\<subseteq> insert x A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset (ltake (eSuc (enat n)) (LCons x (ltl xs))) \\<subseteq> insert x A", "using assms(3)"], ["proof (prove)\nusing this:\n  lset (ltake (enat n) (ltl xs)) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. lset (ltake (eSuc (enat n)) (LCons x (ltl xs))) \\<subseteq> insert x A", "by auto"], ["proof (state)\nthis:\n  lset (ltake (eSuc (enat n)) (LCons x (ltl xs))) \\<subseteq> insert x A\n\ngoal (1 subgoal):\n 1. lset (ltake (enat (Suc n)) xs) \\<subseteq> insert x A", "moreover"], ["proof (state)\nthis:\n  lset (ltake (eSuc (enat n)) (LCons x (ltl xs))) \\<subseteq> insert x A\n\ngoal (1 subgoal):\n 1. lset (ltake (enat (Suc n)) xs) \\<subseteq> insert x A", "from assms(1,2)"], ["proof (chain)\npicking this:\n  \\<not> lnull xs\n  lnth xs 0 = x", "have \"LCons x (ltl xs) = xs\""], ["proof (prove)\nusing this:\n  \\<not> lnull xs\n  lnth xs 0 = x\n\ngoal (1 subgoal):\n 1. LCons x (ltl xs) = xs", "by (metis lnth_0 ltl_simps(2) not_lnull_conv)"], ["proof (state)\nthis:\n  LCons x (ltl xs) = xs\n\ngoal (1 subgoal):\n 1. lset (ltake (enat (Suc n)) xs) \\<subseteq> insert x A", "ultimately"], ["proof (chain)\npicking this:\n  lset (ltake (eSuc (enat n)) (LCons x (ltl xs))) \\<subseteq> insert x A\n  LCons x (ltl xs) = xs", "show ?thesis"], ["proof (prove)\nusing this:\n  lset (ltake (eSuc (enat n)) (LCons x (ltl xs))) \\<subseteq> insert x A\n  LCons x (ltl xs) = xs\n\ngoal (1 subgoal):\n 1. lset (ltake (enat (Suc n)) xs) \\<subseteq> insert x A", "by (simp add: eSuc_enat)"], ["proof (state)\nthis:\n  lset (ltake (enat (Suc n)) xs) \\<subseteq> insert x A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfinite_lset: \"lfinite xs \\<Longrightarrow> \\<not>lnull xs \\<Longrightarrow> llast xs \\<in> lset xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>lfinite xs; \\<not> lnull xs\\<rbrakk>\n    \\<Longrightarrow> llast xs \\<in> lset xs", "proof (induct rule: lfinite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>lnull xs; \\<not> lnull xs\\<rbrakk>\n       \\<Longrightarrow> llast xs \\<in> lset xs\n 2. \\<And>xs.\n       \\<lbrakk>lfinite xs; \\<not> lnull xs;\n        \\<not> lnull (ltl xs) \\<Longrightarrow>\n        llast (ltl xs) \\<in> lset (ltl xs);\n        \\<not> lnull xs\\<rbrakk>\n       \\<Longrightarrow> llast xs \\<in> lset xs", "case (LCons xs)"], ["proof (state)\nthis:\n  lfinite xs\n  \\<not> lnull xs\n  \\<not> lnull (ltl xs) \\<Longrightarrow> llast (ltl xs) \\<in> lset (ltl xs)\n  \\<not> lnull xs\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>lnull xs; \\<not> lnull xs\\<rbrakk>\n       \\<Longrightarrow> llast xs \\<in> lset xs\n 2. \\<And>xs.\n       \\<lbrakk>lfinite xs; \\<not> lnull xs;\n        \\<not> lnull (ltl xs) \\<Longrightarrow>\n        llast (ltl xs) \\<in> lset (ltl xs);\n        \\<not> lnull xs\\<rbrakk>\n       \\<Longrightarrow> llast xs \\<in> lset xs", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. llast xs \\<in> lset xs", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> llast xs \\<in> lset xs\n 2. \\<not> ?P \\<Longrightarrow> llast xs \\<in> lset xs", "assume *: \"\\<not>lnull (ltl xs)\""], ["proof (state)\nthis:\n  \\<not> lnull (ltl xs)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> llast xs \\<in> lset xs\n 2. \\<not> ?P \\<Longrightarrow> llast xs \\<in> lset xs", "hence \"llast (ltl xs) \\<in> lset (ltl xs)\""], ["proof (prove)\nusing this:\n  \\<not> lnull (ltl xs)\n\ngoal (1 subgoal):\n 1. llast (ltl xs) \\<in> lset (ltl xs)", "using LCons.hyps(3)"], ["proof (prove)\nusing this:\n  \\<not> lnull (ltl xs)\n  \\<not> lnull (ltl xs) \\<Longrightarrow> llast (ltl xs) \\<in> lset (ltl xs)\n\ngoal (1 subgoal):\n 1. llast (ltl xs) \\<in> lset (ltl xs)", "by blast"], ["proof (state)\nthis:\n  llast (ltl xs) \\<in> lset (ltl xs)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> llast xs \\<in> lset xs\n 2. \\<not> ?P \\<Longrightarrow> llast xs \\<in> lset xs", "hence \"llast (ltl xs) \\<in> lset xs\""], ["proof (prove)\nusing this:\n  llast (ltl xs) \\<in> lset (ltl xs)\n\ngoal (1 subgoal):\n 1. llast (ltl xs) \\<in> lset xs", "by (simp add: in_lset_ltlD)"], ["proof (state)\nthis:\n  llast (ltl xs) \\<in> lset xs\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> llast xs \\<in> lset xs\n 2. \\<not> ?P \\<Longrightarrow> llast xs \\<in> lset xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  llast (ltl xs) \\<in> lset xs\n\ngoal (1 subgoal):\n 1. llast xs \\<in> lset xs", "by (metis * LCons.prems lhd_LCons_ltl llast_LCons2)"], ["proof (state)\nthis:\n  llast xs \\<in> lset xs\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> lnull (ltl xs) \\<Longrightarrow> llast xs \\<in> lset xs", "qed (metis LCons.prems lhd_LCons_ltl llast_LCons llist.set_sel(1))"], ["proof (state)\nthis:\n  llast xs \\<in> lset xs\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>lnull xs; \\<not> lnull xs\\<rbrakk>\n       \\<Longrightarrow> llast xs \\<in> lset xs", "qed simp"], ["", "lemma lset_subset: \"\\<not>(lset xs \\<subseteq> A) \\<Longrightarrow> \\<exists>n. enat n < llength xs \\<and> lnth xs n \\<notin> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lset xs \\<subseteq> A \\<Longrightarrow>\n    \\<exists>n. enat n < llength xs \\<and> lnth xs n \\<notin> A", "by (metis in_lset_conv_lnth subsetI)"], ["", "subsection \\<open>@{term \"llength\"}\\<close>"], ["", "lemma enat_Suc_ltl:\n  assumes \"enat (Suc n) < llength xs\"\n  shows \"enat n < llength (ltl xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat n < llength (ltl xs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. enat n < llength (ltl xs)", "from assms"], ["proof (chain)\npicking this:\n  enat (Suc n) < llength xs", "have \"eSuc (enat n) < llength xs\""], ["proof (prove)\nusing this:\n  enat (Suc n) < llength xs\n\ngoal (1 subgoal):\n 1. eSuc (enat n) < llength xs", "by (simp add: eSuc_enat)"], ["proof (state)\nthis:\n  eSuc (enat n) < llength xs\n\ngoal (1 subgoal):\n 1. enat n < llength (ltl xs)", "hence \"enat n < epred (llength xs)\""], ["proof (prove)\nusing this:\n  eSuc (enat n) < llength xs\n\ngoal (1 subgoal):\n 1. enat n < epred (llength xs)", "using eSuc_le_iff ileI1"], ["proof (prove)\nusing this:\n  eSuc (enat n) < llength xs\n  (eSuc ?x \\<le> ?y) = (\\<exists>y'. ?y = eSuc y' \\<and> ?x \\<le> y')\n  ?m < ?n \\<Longrightarrow> eSuc ?m \\<le> ?n\n\ngoal (1 subgoal):\n 1. enat n < epred (llength xs)", "by fastforce"], ["proof (state)\nthis:\n  enat n < epred (llength xs)\n\ngoal (1 subgoal):\n 1. enat n < llength (ltl xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  enat n < epred (llength xs)\n\ngoal (1 subgoal):\n 1. enat n < llength (ltl xs)", "by (simp add: epred_llength)"], ["proof (state)\nthis:\n  enat n < llength (ltl xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma enat_ltl_Suc: \"enat n < llength (ltl xs) \\<Longrightarrow> enat (Suc n) < llength xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat n < llength (ltl xs) \\<Longrightarrow> enat (Suc n) < llength xs", "by (metis eSuc_enat ldrop_ltl leD leI lnull_ldrop)"], ["", "lemma infinite_small_llength [intro]: \"\\<not>lfinite xs \\<Longrightarrow> enat n < llength xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lfinite xs \\<Longrightarrow> enat n < llength xs", "using enat_iless lfinite_conv_llength_enat neq_iff"], ["proof (prove)\nusing this:\n  ?n < enat ?m \\<Longrightarrow> \\<exists>k. ?n = enat k\n  lfinite ?xs = (\\<exists>n. llength ?xs = enat n)\n  (?x \\<noteq> ?y) = (?x < ?y \\<or> ?y < ?x)\n\ngoal (1 subgoal):\n 1. \\<not> lfinite xs \\<Longrightarrow> enat n < llength xs", "by blast"], ["", "lemma lnull_0_llength: \"\\<not>lnull xs \\<Longrightarrow> enat 0 < llength xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lnull xs \\<Longrightarrow> enat 0 < llength xs", "using zero_enat_def"], ["proof (prove)\nusing this:\n  0 = enat 0\n\ngoal (1 subgoal):\n 1. \\<not> lnull xs \\<Longrightarrow> enat 0 < llength xs", "by auto"], ["", "lemma Suc_llength: \"enat (Suc n) < llength xs \\<Longrightarrow> enat n < llength xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc n) < llength xs \\<Longrightarrow> enat n < llength xs", "using dual_order.strict_trans enat_ord_simps(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?b < ?a; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  (enat ?m < enat ?n) = (?m < ?n)\n\ngoal (1 subgoal):\n 1. enat (Suc n) < llength xs \\<Longrightarrow> enat n < llength xs", "by blast"], ["", "subsection \\<open>@{term \"ltake\"}\\<close>"], ["", "lemma ltake_lnth: \"ltake n xs = ltake n ys \\<Longrightarrow> enat m < n \\<Longrightarrow> lnth xs m = lnth ys m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ltake n xs = ltake n ys; enat m < n\\<rbrakk>\n    \\<Longrightarrow> lnth xs m = lnth ys m", "by (metis lnth_ltake)"], ["", "lemma lset_ltake_prefix [simp]: \"n \\<le> m \\<Longrightarrow> lset (ltake n xs) \\<subseteq> lset (ltake m xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> m \\<Longrightarrow>\n    lset (ltake n xs) \\<subseteq> lset (ltake m xs)", "by (simp add: lprefix_lsetD)"], ["", "lemma lset_ltake: \"(\\<And>m. m < n \\<Longrightarrow> lnth xs m \\<in> A) \\<Longrightarrow> lset (ltake (enat n) xs) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m. m < n \\<Longrightarrow> lnth xs m \\<in> A) \\<Longrightarrow>\n    lset (ltake (enat n) xs) \\<subseteq> A", "proof (induct n arbitrary: xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       (\\<And>m.\n           m < 0 \\<Longrightarrow> lnth xs m \\<in> A) \\<Longrightarrow>\n       lset (ltake (enat 0) xs) \\<subseteq> A\n 2. \\<And>n xs.\n       \\<lbrakk>\\<And>xs.\n                   (\\<And>m.\n                       m < n \\<Longrightarrow>\n                       lnth xs m \\<in> A) \\<Longrightarrow>\n                   lset (ltake (enat n) xs) \\<subseteq> A;\n        \\<And>m. m < Suc n \\<Longrightarrow> lnth xs m \\<in> A\\<rbrakk>\n       \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "case 0"], ["proof (state)\nthis:\n  ?m < 0 \\<Longrightarrow> lnth xs ?m \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       (\\<And>m.\n           m < 0 \\<Longrightarrow> lnth xs m \\<in> A) \\<Longrightarrow>\n       lset (ltake (enat 0) xs) \\<subseteq> A\n 2. \\<And>n xs.\n       \\<lbrakk>\\<And>xs.\n                   (\\<And>m.\n                       m < n \\<Longrightarrow>\n                       lnth xs m \\<in> A) \\<Longrightarrow>\n                   lset (ltake (enat n) xs) \\<subseteq> A;\n        \\<And>m. m < Suc n \\<Longrightarrow> lnth xs m \\<in> A\\<rbrakk>\n       \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "have \"ltake (enat 0) xs = LNil\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ltake (enat 0) xs = LNil", "by (simp add: zero_enat_def)"], ["proof (state)\nthis:\n  ltake (enat 0) xs = LNil\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       (\\<And>m.\n           m < 0 \\<Longrightarrow> lnth xs m \\<in> A) \\<Longrightarrow>\n       lset (ltake (enat 0) xs) \\<subseteq> A\n 2. \\<And>n xs.\n       \\<lbrakk>\\<And>xs.\n                   (\\<And>m.\n                       m < n \\<Longrightarrow>\n                       lnth xs m \\<in> A) \\<Longrightarrow>\n                   lset (ltake (enat n) xs) \\<subseteq> A;\n        \\<And>m. m < Suc n \\<Longrightarrow> lnth xs m \\<in> A\\<rbrakk>\n       \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "thus ?case"], ["proof (prove)\nusing this:\n  ltake (enat 0) xs = LNil\n\ngoal (1 subgoal):\n 1. lset (ltake (enat 0) xs) \\<subseteq> A", "by simp"], ["proof (state)\nthis:\n  lset (ltake (enat 0) xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>\\<And>xs.\n                   (\\<And>m.\n                       m < n \\<Longrightarrow>\n                       lnth xs m \\<in> A) \\<Longrightarrow>\n                   lset (ltake (enat n) xs) \\<subseteq> A;\n        \\<And>m. m < Suc n \\<Longrightarrow> lnth xs m \\<in> A\\<rbrakk>\n       \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>\\<And>xs.\n                   (\\<And>m.\n                       m < n \\<Longrightarrow>\n                       lnth xs m \\<in> A) \\<Longrightarrow>\n                   lset (ltake (enat n) xs) \\<subseteq> A;\n        \\<And>m. m < Suc n \\<Longrightarrow> lnth xs m \\<in> A\\<rbrakk>\n       \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "case (Suc n)"], ["proof (state)\nthis:\n  (\\<And>m. m < n \\<Longrightarrow> lnth ?xs m \\<in> A) \\<Longrightarrow>\n  lset (ltake (enat n) ?xs) \\<subseteq> A\n  ?m < Suc n \\<Longrightarrow> lnth xs ?m \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>\\<And>xs.\n                   (\\<And>m.\n                       m < n \\<Longrightarrow>\n                       lnth xs m \\<in> A) \\<Longrightarrow>\n                   lset (ltake (enat n) xs) \\<subseteq> A;\n        \\<And>m. m < Suc n \\<Longrightarrow> lnth xs m \\<in> A\\<rbrakk>\n       \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n 2. \\<not> ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "assume \"xs \\<noteq> LNil\""], ["proof (state)\nthis:\n  xs \\<noteq> LNil\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n 2. \\<not> ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "then"], ["proof (chain)\npicking this:\n  xs \\<noteq> LNil", "obtain x xs' where xs: \"xs = LCons x xs'\""], ["proof (prove)\nusing this:\n  xs \\<noteq> LNil\n\ngoal (1 subgoal):\n 1. (\\<And>x xs'.\n        xs = LCons x xs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson neq_LNil_conv)"], ["proof (state)\nthis:\n  xs = LCons x xs'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n 2. \\<not> ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "{"], ["proof (state)\nthis:\n  xs = LCons x xs'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n 2. \\<not> ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "fix m"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n 2. \\<not> ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "assume \"m < n\""], ["proof (state)\nthis:\n  m < n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n 2. \\<not> ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "hence \"Suc m < Suc n\""], ["proof (prove)\nusing this:\n  m < n\n\ngoal (1 subgoal):\n 1. Suc m < Suc n", "by simp"], ["proof (state)\nthis:\n  Suc m < Suc n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n 2. \\<not> ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "hence \"lnth xs (Suc m) \\<in> A\""], ["proof (prove)\nusing this:\n  Suc m < Suc n\n\ngoal (1 subgoal):\n 1. lnth xs (Suc m) \\<in> A", "using Suc.prems"], ["proof (prove)\nusing this:\n  Suc m < Suc n\n  ?m < Suc n \\<Longrightarrow> lnth xs ?m \\<in> A\n\ngoal (1 subgoal):\n 1. lnth xs (Suc m) \\<in> A", "by presburger"], ["proof (state)\nthis:\n  lnth xs (Suc m) \\<in> A\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n 2. \\<not> ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "hence \"lnth xs' m \\<in> A\""], ["proof (prove)\nusing this:\n  lnth xs (Suc m) \\<in> A\n\ngoal (1 subgoal):\n 1. lnth xs' m \\<in> A", "using xs"], ["proof (prove)\nusing this:\n  lnth xs (Suc m) \\<in> A\n  xs = LCons x xs'\n\ngoal (1 subgoal):\n 1. lnth xs' m \\<in> A", "by simp"], ["proof (state)\nthis:\n  lnth xs' m \\<in> A\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n 2. \\<not> ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "}"], ["proof (state)\nthis:\n  ?m2 < n \\<Longrightarrow> lnth xs' ?m2 \\<in> A\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n 2. \\<not> ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "hence \"lset (ltake (enat n) xs') \\<subseteq> A\""], ["proof (prove)\nusing this:\n  ?m2 < n \\<Longrightarrow> lnth xs' ?m2 \\<in> A\n\ngoal (1 subgoal):\n 1. lset (ltake (enat n) xs') \\<subseteq> A", "using Suc.hyps"], ["proof (prove)\nusing this:\n  ?m2 < n \\<Longrightarrow> lnth xs' ?m2 \\<in> A\n  (\\<And>m. m < n \\<Longrightarrow> lnth ?xs m \\<in> A) \\<Longrightarrow>\n  lset (ltake (enat n) ?xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. lset (ltake (enat n) xs') \\<subseteq> A", "by blast"], ["proof (state)\nthis:\n  lset (ltake (enat n) xs') \\<subseteq> A\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n 2. \\<not> ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "moreover"], ["proof (state)\nthis:\n  lset (ltake (enat n) xs') \\<subseteq> A\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n 2. \\<not> ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "have \"ltake (enat (Suc n)) xs = LCons x (ltake (enat n) xs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ltake (enat (Suc n)) xs = LCons x (ltake (enat n) xs')", "using xs ltake_eSuc_LCons[of _ x xs']"], ["proof (prove)\nusing this:\n  xs = LCons x xs'\n  ltake (eSuc ?n) (LCons x xs') = LCons x (ltake ?n xs')\n\ngoal (1 subgoal):\n 1. ltake (enat (Suc n)) xs = LCons x (ltake (enat n) xs')", "by (metis (no_types) eSuc_enat)"], ["proof (state)\nthis:\n  ltake (enat (Suc n)) xs = LCons x (ltake (enat n) xs')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n 2. \\<not> ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "moreover"], ["proof (state)\nthis:\n  ltake (enat (Suc n)) xs = LCons x (ltake (enat n) xs')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n 2. \\<not> ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "have \"x \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A", "using Suc.prems xs"], ["proof (prove)\nusing this:\n  ?m < Suc n \\<Longrightarrow> lnth xs ?m \\<in> A\n  xs = LCons x xs'\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by force"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n 2. \\<not> ?P \\<Longrightarrow> lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "ultimately"], ["proof (chain)\npicking this:\n  lset (ltake (enat n) xs') \\<subseteq> A\n  ltake (enat (Suc n)) xs = LCons x (ltake (enat n) xs')\n  x \\<in> A", "show ?thesis"], ["proof (prove)\nusing this:\n  lset (ltake (enat n) xs') \\<subseteq> A\n  ltake (enat (Suc n)) xs = LCons x (ltake (enat n) xs')\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "by simp"], ["proof (state)\nthis:\n  lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<not> xs \\<noteq> LNil \\<Longrightarrow>\n    lset (ltake (enat (Suc n)) xs) \\<subseteq> A", "qed simp"], ["proof (state)\nthis:\n  lset (ltake (enat (Suc n)) xs) \\<subseteq> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma llength_ltake': \"enat n < llength xs \\<Longrightarrow> llength (ltake (enat n) xs) = enat n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat n < llength xs \\<Longrightarrow>\n    llength (ltake (enat n) xs) = enat n", "by (metis llength_ltake min.strict_order_iff)"], ["", "lemma llast_ltake:\n  assumes \"enat (Suc n) < llength xs\"\n  shows \"llast (ltake (enat (Suc n)) xs) = lnth xs n\" (is \"llast ?A = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. llast (ltake (enat (Suc n)) xs) = lnth xs n", "unfolding llast_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case llength (ltake (enat (Suc n)) xs) of\n     enat (Suc xa) \\<Rightarrow> lnth (ltake (enat (Suc n)) xs) xa) =\n    lnth xs n", "using llength_ltake'[OF assms]"], ["proof (prove)\nusing this:\n  llength (ltake (enat (Suc n)) xs) = enat (Suc n)\n\ngoal (1 subgoal):\n 1. (case llength (ltake (enat (Suc n)) xs) of\n     enat (Suc xa) \\<Rightarrow> lnth (ltake (enat (Suc n)) xs) xa) =\n    lnth xs n", "by (auto simp add: lnth_ltake)"], ["", "lemma lset_ltake_ltl: \"lset (ltake (enat n) (ltl xs)) \\<subseteq> lset (ltake (enat (Suc n)) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset (ltake (enat n) (ltl xs))\n    \\<subseteq> lset (ltake (enat (Suc n)) xs)", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    lset (ltake (enat n) (ltl xs))\n    \\<subseteq> lset (ltake (enat (Suc n)) xs)\n 2. \\<not> ?P \\<Longrightarrow>\n    lset (ltake (enat n) (ltl xs))\n    \\<subseteq> lset (ltake (enat (Suc n)) xs)", "assume \"\\<not>lnull xs\""], ["proof (state)\nthis:\n  \\<not> lnull xs\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    lset (ltake (enat n) (ltl xs))\n    \\<subseteq> lset (ltake (enat (Suc n)) xs)\n 2. \\<not> ?P \\<Longrightarrow>\n    lset (ltake (enat n) (ltl xs))\n    \\<subseteq> lset (ltake (enat (Suc n)) xs)", "then"], ["proof (chain)\npicking this:\n  \\<not> lnull xs", "obtain v0 where \"xs = LCons v0 (ltl xs)\""], ["proof (prove)\nusing this:\n  \\<not> lnull xs\n\ngoal (1 subgoal):\n 1. (\\<And>v0.\n        xs = LCons v0 (ltl xs) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis lhd_LCons_ltl)"], ["proof (state)\nthis:\n  xs = LCons v0 (ltl xs)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    lset (ltake (enat n) (ltl xs))\n    \\<subseteq> lset (ltake (enat (Suc n)) xs)\n 2. \\<not> ?P \\<Longrightarrow>\n    lset (ltake (enat n) (ltl xs))\n    \\<subseteq> lset (ltake (enat (Suc n)) xs)", "hence \"ltake (eSuc (enat n)) xs = LCons v0 (ltake (enat n) (ltl xs))\""], ["proof (prove)\nusing this:\n  xs = LCons v0 (ltl xs)\n\ngoal (1 subgoal):\n 1. ltake (eSuc (enat n)) xs = LCons v0 (ltake (enat n) (ltl xs))", "by (metis ltake_eSuc_LCons)"], ["proof (state)\nthis:\n  ltake (eSuc (enat n)) xs = LCons v0 (ltake (enat n) (ltl xs))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    lset (ltake (enat n) (ltl xs))\n    \\<subseteq> lset (ltake (enat (Suc n)) xs)\n 2. \\<not> ?P \\<Longrightarrow>\n    lset (ltake (enat n) (ltl xs))\n    \\<subseteq> lset (ltake (enat (Suc n)) xs)", "hence \"lset (ltake (enat (Suc n)) xs) = lset (LCons v0 (ltake (enat n) (ltl xs)))\""], ["proof (prove)\nusing this:\n  ltake (eSuc (enat n)) xs = LCons v0 (ltake (enat n) (ltl xs))\n\ngoal (1 subgoal):\n 1. lset (ltake (enat (Suc n)) xs) =\n    lset (LCons v0 (ltake (enat n) (ltl xs)))", "by (simp add: eSuc_enat)"], ["proof (state)\nthis:\n  lset (ltake (enat (Suc n)) xs) = lset (LCons v0 (ltake (enat n) (ltl xs)))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    lset (ltake (enat n) (ltl xs))\n    \\<subseteq> lset (ltake (enat (Suc n)) xs)\n 2. \\<not> ?P \\<Longrightarrow>\n    lset (ltake (enat n) (ltl xs))\n    \\<subseteq> lset (ltake (enat (Suc n)) xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  lset (ltake (enat (Suc n)) xs) = lset (LCons v0 (ltake (enat n) (ltl xs)))\n\ngoal (1 subgoal):\n 1. lset (ltake (enat n) (ltl xs))\n    \\<subseteq> lset (ltake (enat (Suc n)) xs)", "using lset_LCons[of v0 \"ltake (enat n) (ltl xs)\"]"], ["proof (prove)\nusing this:\n  lset (ltake (enat (Suc n)) xs) = lset (LCons v0 (ltake (enat n) (ltl xs)))\n  lset (LCons v0 (ltake (enat n) (ltl xs))) =\n  insert v0 (lset (ltake (enat n) (ltl xs)))\n\ngoal (1 subgoal):\n 1. lset (ltake (enat n) (ltl xs))\n    \\<subseteq> lset (ltake (enat (Suc n)) xs)", "by blast"], ["proof (state)\nthis:\n  lset (ltake (enat n) (ltl xs)) \\<subseteq> lset (ltake (enat (Suc n)) xs)\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> lnull xs \\<Longrightarrow>\n    lset (ltake (enat n) (ltl xs))\n    \\<subseteq> lset (ltake (enat (Suc n)) xs)", "qed (simp add: lnull_def)"], ["", "subsection \\<open>@{term \"ldropn\"}\\<close>"], ["", "lemma ltl_ldrop: \"\\<lbrakk> \\<And>xs. P xs \\<Longrightarrow> P (ltl xs); P xs \\<rbrakk> \\<Longrightarrow> P (ldropn n xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs. P xs \\<Longrightarrow> P (ltl xs); P xs\\<rbrakk>\n    \\<Longrightarrow> P (ldropn n xs)", "unfolding ldropn_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs. P xs \\<Longrightarrow> P (ltl xs); P xs\\<rbrakk>\n    \\<Longrightarrow> P ((ltl ^^ n) xs)", "by (induct n) simp_all"], ["", "subsection \\<open>@{term \"lfinite\"}\\<close>"], ["", "lemma lfinite_drop_set: \"lfinite xs \\<Longrightarrow> \\<exists>n. v \\<notin> lset (ldrop n xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfinite xs \\<Longrightarrow> \\<exists>n. v \\<notin> lset (ldrop n xs)", "by (metis ldrop_inf lmember_code(1) lset_lmember)"], ["", "lemma index_infinite_set:\n  \"\\<lbrakk> \\<not>lfinite x; lnth x m = y; \\<And>i. lnth x i = y \\<Longrightarrow> (\\<exists>m > i. lnth x m = y) \\<rbrakk> \\<Longrightarrow> y \\<in> lset (ldropn n x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n     \\<And>i.\n        lnth x i = y \\<Longrightarrow> \\<exists>m>i. lnth x m = y\\<rbrakk>\n    \\<Longrightarrow> y \\<in> lset (ldropn n x)", "proof (induct n arbitrary: x m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x m.\n       \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn 0 x)\n 2. \\<And>n x m.\n       \\<lbrakk>\\<And>x m.\n                   \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n                    \\<And>i.\n                       lnth x i = y \\<Longrightarrow>\n                       \\<exists>m>i. lnth x m = y\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> lset (ldropn n x);\n        \\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn (Suc n) x)", "case 0"], ["proof (state)\nthis:\n  \\<not> lfinite x\n  lnth x m = y\n  lnth x ?i = y \\<Longrightarrow> \\<exists>m>?i. lnth x m = y\n\ngoal (2 subgoals):\n 1. \\<And>x m.\n       \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn 0 x)\n 2. \\<And>n x m.\n       \\<lbrakk>\\<And>x m.\n                   \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n                    \\<And>i.\n                       lnth x i = y \\<Longrightarrow>\n                       \\<exists>m>i. lnth x m = y\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> lset (ldropn n x);\n        \\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn (Suc n) x)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> lfinite x\n  lnth x m = y\n  lnth x ?i = y \\<Longrightarrow> \\<exists>m>?i. lnth x m = y\n\ngoal (1 subgoal):\n 1. y \\<in> lset (ldropn 0 x)", "using lset_nth_member_inf"], ["proof (prove)\nusing this:\n  \\<not> lfinite x\n  lnth x m = y\n  lnth x ?i = y \\<Longrightarrow> \\<exists>m>?i. lnth x m = y\n  \\<lbrakk>\\<not> lfinite ?xs; lset ?xs \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> lnth ?xs ?n \\<in> ?A\n\ngoal (1 subgoal):\n 1. y \\<in> lset (ldropn 0 x)", "by auto"], ["proof (state)\nthis:\n  y \\<in> lset (ldropn 0 x)\n\ngoal (1 subgoal):\n 1. \\<And>n x m.\n       \\<lbrakk>\\<And>x m.\n                   \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n                    \\<And>i.\n                       lnth x i = y \\<Longrightarrow>\n                       \\<exists>m>i. lnth x m = y\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> lset (ldropn n x);\n        \\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn (Suc n) x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n x m.\n       \\<lbrakk>\\<And>x m.\n                   \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n                    \\<And>i.\n                       lnth x i = y \\<Longrightarrow>\n                       \\<exists>m>i. lnth x m = y\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> lset (ldropn n x);\n        \\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn (Suc n) x)", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> lfinite ?x; lnth ?x ?m = y;\n   \\<And>i.\n      lnth ?x i = y \\<Longrightarrow> \\<exists>m>i. lnth ?x m = y\\<rbrakk>\n  \\<Longrightarrow> y \\<in> lset (ldropn n ?x)\n  \\<not> lfinite x\n  lnth x m = y\n  lnth x ?i = y \\<Longrightarrow> \\<exists>m>?i. lnth x m = y\n\ngoal (1 subgoal):\n 1. \\<And>n x m.\n       \\<lbrakk>\\<And>x m.\n                   \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n                    \\<And>i.\n                       lnth x i = y \\<Longrightarrow>\n                       \\<exists>m>i. lnth x m = y\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> lset (ldropn n x);\n        \\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn (Suc n) x)", "obtain a xs where x: \"x = LCons a xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a xs. x = LCons a xs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson Suc.prems(1) lnull_imp_lfinite not_lnull_conv)"], ["proof (state)\nthis:\n  x = LCons a xs\n\ngoal (1 subgoal):\n 1. \\<And>n x m.\n       \\<lbrakk>\\<And>x m.\n                   \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n                    \\<And>i.\n                       lnth x i = y \\<Longrightarrow>\n                       \\<exists>m>i. lnth x m = y\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> lset (ldropn n x);\n        \\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn (Suc n) x)", "obtain j where j: \"j > m\" \"lnth x j = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>m < j; lnth x j = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Suc.prems(2,3)"], ["proof (prove)\nusing this:\n  lnth x m = y\n  lnth x ?i = y \\<Longrightarrow> \\<exists>m>?i. lnth x m = y\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>m < j; lnth x j = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  m < j\n  lnth x j = y\n\ngoal (1 subgoal):\n 1. \\<And>n x m.\n       \\<lbrakk>\\<And>x m.\n                   \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n                    \\<And>i.\n                       lnth x i = y \\<Longrightarrow>\n                       \\<exists>m>i. lnth x m = y\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> lset (ldropn n x);\n        \\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn (Suc n) x)", "have \"lnth xs (j - 1) = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lnth xs (j - 1) = y", "by (metis lnth_LCons' j(1,2) not_less0 x)"], ["proof (state)\nthis:\n  lnth xs (j - 1) = y\n\ngoal (1 subgoal):\n 1. \\<And>n x m.\n       \\<lbrakk>\\<And>x m.\n                   \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n                    \\<And>i.\n                       lnth x i = y \\<Longrightarrow>\n                       \\<exists>m>i. lnth x m = y\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> lset (ldropn n x);\n        \\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn (Suc n) x)", "moreover"], ["proof (state)\nthis:\n  lnth xs (j - 1) = y\n\ngoal (1 subgoal):\n 1. \\<And>n x m.\n       \\<lbrakk>\\<And>x m.\n                   \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n                    \\<And>i.\n                       lnth x i = y \\<Longrightarrow>\n                       \\<exists>m>i. lnth x m = y\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> lset (ldropn n x);\n        \\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn (Suc n) x)", "{"], ["proof (state)\nthis:\n  lnth xs (j - 1) = y\n\ngoal (1 subgoal):\n 1. \\<And>n x m.\n       \\<lbrakk>\\<And>x m.\n                   \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n                    \\<And>i.\n                       lnth x i = y \\<Longrightarrow>\n                       \\<exists>m>i. lnth x m = y\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> lset (ldropn n x);\n        \\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn (Suc n) x)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n x m.\n       \\<lbrakk>\\<And>x m.\n                   \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n                    \\<And>i.\n                       lnth x i = y \\<Longrightarrow>\n                       \\<exists>m>i. lnth x m = y\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> lset (ldropn n x);\n        \\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn (Suc n) x)", "assume \"lnth xs i = y\""], ["proof (state)\nthis:\n  lnth xs i = y\n\ngoal (1 subgoal):\n 1. \\<And>n x m.\n       \\<lbrakk>\\<And>x m.\n                   \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n                    \\<And>i.\n                       lnth x i = y \\<Longrightarrow>\n                       \\<exists>m>i. lnth x m = y\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> lset (ldropn n x);\n        \\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn (Suc n) x)", "hence \"lnth x (Suc i) = y\""], ["proof (prove)\nusing this:\n  lnth xs i = y\n\ngoal (1 subgoal):\n 1. lnth x (Suc i) = y", "by (simp add: x)"], ["proof (state)\nthis:\n  lnth x (Suc i) = y\n\ngoal (1 subgoal):\n 1. \\<And>n x m.\n       \\<lbrakk>\\<And>x m.\n                   \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n                    \\<And>i.\n                       lnth x i = y \\<Longrightarrow>\n                       \\<exists>m>i. lnth x m = y\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> lset (ldropn n x);\n        \\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn (Suc n) x)", "hence \"\\<exists>j>i. lnth xs j = y\""], ["proof (prove)\nusing this:\n  lnth x (Suc i) = y\n\ngoal (1 subgoal):\n 1. \\<exists>j>i. lnth xs j = y", "by (metis Suc.prems(3) Suc_lessE lnth_Suc_LCons x)"], ["proof (state)\nthis:\n  \\<exists>j>i. lnth xs j = y\n\ngoal (1 subgoal):\n 1. \\<And>n x m.\n       \\<lbrakk>\\<And>x m.\n                   \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n                    \\<And>i.\n                       lnth x i = y \\<Longrightarrow>\n                       \\<exists>m>i. lnth x m = y\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> lset (ldropn n x);\n        \\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn (Suc n) x)", "}"], ["proof (state)\nthis:\n  lnth xs ?i2 = y \\<Longrightarrow> \\<exists>j>?i2. lnth xs j = y\n\ngoal (1 subgoal):\n 1. \\<And>n x m.\n       \\<lbrakk>\\<And>x m.\n                   \\<lbrakk>\\<not> lfinite x; lnth x m = y;\n                    \\<And>i.\n                       lnth x i = y \\<Longrightarrow>\n                       \\<exists>m>i. lnth x m = y\\<rbrakk>\n                   \\<Longrightarrow> y \\<in> lset (ldropn n x);\n        \\<not> lfinite x; lnth x m = y;\n        \\<And>i.\n           lnth x i = y \\<Longrightarrow>\n           \\<exists>m>i. lnth x m = y\\<rbrakk>\n       \\<Longrightarrow> y \\<in> lset (ldropn (Suc n) x)", "ultimately"], ["proof (chain)\npicking this:\n  lnth xs (j - 1) = y\n  lnth xs ?i2 = y \\<Longrightarrow> \\<exists>j>?i2. lnth xs j = y", "show ?case"], ["proof (prove)\nusing this:\n  lnth xs (j - 1) = y\n  lnth xs ?i2 = y \\<Longrightarrow> \\<exists>j>?i2. lnth xs j = y\n\ngoal (1 subgoal):\n 1. y \\<in> lset (ldropn (Suc n) x)", "using Suc.hyps Suc.prems(1) x"], ["proof (prove)\nusing this:\n  lnth xs (j - 1) = y\n  lnth xs ?i2 = y \\<Longrightarrow> \\<exists>j>?i2. lnth xs j = y\n  \\<lbrakk>\\<not> lfinite ?x; lnth ?x ?m = y;\n   \\<And>i.\n      lnth ?x i = y \\<Longrightarrow> \\<exists>m>i. lnth ?x m = y\\<rbrakk>\n  \\<Longrightarrow> y \\<in> lset (ldropn n ?x)\n  \\<not> lfinite x\n  x = LCons a xs\n\ngoal (1 subgoal):\n 1. y \\<in> lset (ldropn (Suc n) x)", "by auto"], ["proof (state)\nthis:\n  y \\<in> lset (ldropn (Suc n) x)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>@{term \"lmap\"}\\<close>"], ["", "lemma lnth_lmap_ldropn:\n  \"enat n < llength xs \\<Longrightarrow> lnth (lmap f (ldropn n xs)) 0 = lnth (lmap f xs) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat n < llength xs \\<Longrightarrow>\n    lnth (lmap f (ldropn n xs)) 0 = lnth (lmap f xs) n", "by (simp add: lhd_ldropn lnth_0_conv_lhd)"], ["", "lemma lnth_lmap_ldropn_Suc:\n  \"enat (Suc n) < llength xs \\<Longrightarrow> lnth (lmap f (ldropn n xs)) (Suc 0) = lnth (lmap f xs) (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (Suc n) < llength xs \\<Longrightarrow>\n    lnth (lmap f (ldropn n xs)) (Suc 0) = lnth (lmap f xs) (Suc n)", "by (metis (no_types, lifting) Suc_llength ldropn_ltl leD llist.map_disc_iff lnth_lmap_ldropn\n                                lnth_ltl lnull_ldropn ltl_ldropn ltl_lmap)"], ["", "subsection \\<open>Notation\\<close>"], ["", "text \\<open>We introduce the notation \\$ to denote @{term \"lnth\"}.\\<close>"], ["", "notation lnth (infix \"$\" 61)"], ["", "end"]]}