{"file_name": "/home/qj213/afp-2021-10-22/thys/Parity_Game/UniformStrategy.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Parity_Game", "problem_names": ["lemma merge_attractor_strategies:\n  assumes \"S \\<subseteq> V\"\n    and strategies_ex: \"\\<And>v. v \\<in> S \\<Longrightarrow> \\<exists>\\<sigma>. strategy p \\<sigma> \\<and> strategy_attracts_via p \\<sigma> v S W\"\n  shows \"\\<exists>\\<sigma>. strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W\"", "lemma merge_winning_strategies:\n  shows \"\\<exists>\\<sigma>. strategy p \\<sigma> \\<and> (\\<forall>v \\<in> winning_region p. winning_strategy p \\<sigma> v)\"", "lemma winning_region_extends_VVpstar:\n  assumes v: \"v \\<in> VV p**\" and w: \"\\<And>w. v\\<rightarrow>w \\<Longrightarrow> w \\<in> winning_region p\"\n  shows \"v \\<in> winning_region p\"", "lemma removing_winning_region_induces_no_deadends:\n  assumes \"v \\<in> V - winning_region p\" \"\\<not>deadend v\"\n  shows \"\\<exists>w \\<in> V - winning_region p. v\\<rightarrow>w\""], "translations": [["", "lemma merge_attractor_strategies:\n  assumes \"S \\<subseteq> V\"\n    and strategies_ex: \"\\<And>v. v \\<in> S \\<Longrightarrow> \\<exists>\\<sigma>. strategy p \\<sigma> \\<and> strategy_attracts_via p \\<sigma> v S W\"\n  shows \"\\<exists>\\<sigma>. strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "define good where \"good v = {\\<sigma>. strategy p \\<sigma> \\<and> strategy_attracts_via p \\<sigma> v S W }\" for v"], ["proof (state)\nthis:\n  good ?v =\n  {\\<sigma>.\n   strategy p \\<sigma> \\<and> strategy_attracts_via p \\<sigma> ?v S W}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "let ?G = \"{\\<sigma>. \\<exists>v \\<in> S - W. \\<sigma> \\<in> good v}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "obtain r where r: \"well_order_on ?G r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        well_order_on\n         {\\<sigma>. \\<exists>v\\<in>S - W. \\<sigma> \\<in> good v}\n         r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using well_order_on"], ["proof (prove)\nusing this:\n  \\<exists>r. well_order_on ?A r\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        well_order_on\n         {\\<sigma>. \\<exists>v\\<in>S - W. \\<sigma> \\<in> good v}\n         r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  well_order_on {\\<sigma>. \\<exists>v\\<in>S - W. \\<sigma> \\<in> good v} r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "interpret WellOrderedStrategies G \"S - W\" p good r"], ["proof (prove)\ngoal (1 subgoal):\n 1. WellOrderedStrategies G (S - W) p good r", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. S - W \\<subseteq> V\n 2. well_order_on {\\<sigma>. \\<exists>v\\<in>S - W. \\<sigma> \\<in> good v} r\n 3. \\<And>v.\n       v \\<in> S - W \\<Longrightarrow>\n       \\<exists>\\<sigma>. \\<sigma> \\<in> good v\n 4. \\<And>v \\<sigma>.\n       \\<sigma> \\<in> good v \\<Longrightarrow> strategy p \\<sigma>\n 5. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> S - W; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "show \"S - W \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S - W \\<subseteq> V", "using \\<open>S \\<subseteq> V\\<close>"], ["proof (prove)\nusing this:\n  S \\<subseteq> V\n\ngoal (1 subgoal):\n 1. S - W \\<subseteq> V", "by blast"], ["proof (state)\nthis:\n  S - W \\<subseteq> V\n\ngoal (4 subgoals):\n 1. well_order_on {\\<sigma>. \\<exists>v\\<in>S - W. \\<sigma> \\<in> good v} r\n 2. \\<And>v.\n       v \\<in> S - W \\<Longrightarrow>\n       \\<exists>\\<sigma>. \\<sigma> \\<in> good v\n 3. \\<And>v \\<sigma>.\n       \\<sigma> \\<in> good v \\<Longrightarrow> strategy p \\<sigma>\n 4. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> S - W; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. well_order_on {\\<sigma>. \\<exists>v\\<in>S - W. \\<sigma> \\<in> good v} r\n 2. \\<And>v.\n       v \\<in> S - W \\<Longrightarrow>\n       \\<exists>\\<sigma>. \\<sigma> \\<in> good v\n 3. \\<And>v \\<sigma>.\n       \\<sigma> \\<in> good v \\<Longrightarrow> strategy p \\<sigma>\n 4. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> S - W; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "show \"\\<And>v. v \\<in> S - W \\<Longrightarrow> \\<exists>\\<sigma>. \\<sigma> \\<in> good v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> S - W \\<Longrightarrow>\n       \\<exists>\\<sigma>. \\<sigma> \\<in> good v", "unfolding good_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> S - W \\<Longrightarrow>\n       \\<exists>\\<sigma>.\n          \\<sigma>\n          \\<in> {\\<sigma>.\n                 strategy p \\<sigma> \\<and>\n                 strategy_attracts_via p \\<sigma> v S W}", "using strategies_ex"], ["proof (prove)\nusing this:\n  ?v \\<in> S \\<Longrightarrow>\n  \\<exists>\\<sigma>.\n     strategy p \\<sigma> \\<and> strategy_attracts_via p \\<sigma> ?v S W\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> S - W \\<Longrightarrow>\n       \\<exists>\\<sigma>.\n          \\<sigma>\n          \\<in> {\\<sigma>.\n                 strategy p \\<sigma> \\<and>\n                 strategy_attracts_via p \\<sigma> v S W}", "by blast"], ["proof (state)\nthis:\n  ?v \\<in> S - W \\<Longrightarrow> \\<exists>\\<sigma>. \\<sigma> \\<in> good ?v\n\ngoal (3 subgoals):\n 1. well_order_on {\\<sigma>. \\<exists>v\\<in>S - W. \\<sigma> \\<in> good v} r\n 2. \\<And>v \\<sigma>.\n       \\<sigma> \\<in> good v \\<Longrightarrow> strategy p \\<sigma>\n 3. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> S - W; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. well_order_on {\\<sigma>. \\<exists>v\\<in>S - W. \\<sigma> \\<in> good v} r\n 2. \\<And>v \\<sigma>.\n       \\<sigma> \\<in> good v \\<Longrightarrow> strategy p \\<sigma>\n 3. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> S - W; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "show \"\\<And>v \\<sigma>. \\<sigma> \\<in> good v \\<Longrightarrow> strategy p \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v \\<sigma>.\n       \\<sigma> \\<in> good v \\<Longrightarrow> strategy p \\<sigma>", "unfolding good_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v \\<sigma>.\n       \\<sigma>\n       \\<in> {\\<sigma>.\n              strategy p \\<sigma> \\<and>\n              strategy_attracts_via p \\<sigma> v S W} \\<Longrightarrow>\n       strategy p \\<sigma>", "by blast"], ["proof (state)\nthis:\n  ?\\<sigma> \\<in> good ?v \\<Longrightarrow> strategy p ?\\<sigma>\n\ngoal (2 subgoals):\n 1. well_order_on {\\<sigma>. \\<exists>v\\<in>S - W. \\<sigma> \\<in> good v} r\n 2. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> S - W; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. well_order_on {\\<sigma>. \\<exists>v\\<in>S - W. \\<sigma> \\<in> good v} r\n 2. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> S - W; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "fix v w \\<sigma>"], ["proof (state)\ngoal (2 subgoals):\n 1. well_order_on {\\<sigma>. \\<exists>v\\<in>S - W. \\<sigma> \\<in> good v} r\n 2. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> S - W; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "assume v: \"v \\<in> S - W\" \"v\\<rightarrow>w\" \"v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w\" \"\\<sigma> \\<in> good v\""], ["proof (state)\nthis:\n  v \\<in> S - W\n  v \\<rightarrow> w\n  v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w\n  \\<sigma> \\<in> good v\n\ngoal (2 subgoals):\n 1. well_order_on {\\<sigma>. \\<exists>v\\<in>S - W. \\<sigma> \\<in> good v} r\n 2. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> S - W; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "hence \\<sigma>: \"strategy p \\<sigma>\" \"strategy_attracts_via p \\<sigma> v S W\""], ["proof (prove)\nusing this:\n  v \\<in> S - W\n  v \\<rightarrow> w\n  v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w\n  \\<sigma> \\<in> good v\n\ngoal (1 subgoal):\n 1. strategy p \\<sigma> &&& strategy_attracts_via p \\<sigma> v S W", "unfolding good_def"], ["proof (prove)\nusing this:\n  v \\<in> S - W\n  v \\<rightarrow> w\n  v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w\n  \\<sigma>\n  \\<in> {\\<sigma>.\n         strategy p \\<sigma> \\<and> strategy_attracts_via p \\<sigma> v S W}\n\ngoal (1 subgoal):\n 1. strategy p \\<sigma> &&& strategy_attracts_via p \\<sigma> v S W", "by simp_all"], ["proof (state)\nthis:\n  strategy p \\<sigma>\n  strategy_attracts_via p \\<sigma> v S W\n\ngoal (2 subgoals):\n 1. well_order_on {\\<sigma>. \\<exists>v\\<in>S - W. \\<sigma> \\<in> good v} r\n 2. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> S - W; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "hence \"strategy_attracts_via p \\<sigma> w S W\""], ["proof (prove)\nusing this:\n  strategy p \\<sigma>\n  strategy_attracts_via p \\<sigma> v S W\n\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma> w S W", "using strategy_attracts_via_successor v"], ["proof (prove)\nusing this:\n  strategy p \\<sigma>\n  strategy_attracts_via p \\<sigma> v S W\n  \\<lbrakk>strategy ?p ?\\<sigma>;\n   strategy_attracts_via ?p ?\\<sigma> ?v0.0 ?A ?W; ?v0.0 \\<in> ?A - ?W;\n   ?v0.0 \\<rightarrow> ?w0.0;\n   ?v0.0 \\<in> VV ?p \\<Longrightarrow> ?\\<sigma> ?v0.0 = ?w0.0\\<rbrakk>\n  \\<Longrightarrow> strategy_attracts_via ?p ?\\<sigma> ?w0.0 ?A ?W\n  v \\<in> S - W\n  v \\<rightarrow> w\n  v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w\n  \\<sigma> \\<in> good v\n\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma> w S W", "by blast"], ["proof (state)\nthis:\n  strategy_attracts_via p \\<sigma> w S W\n\ngoal (2 subgoals):\n 1. well_order_on {\\<sigma>. \\<exists>v\\<in>S - W. \\<sigma> \\<in> good v} r\n 2. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> S - W; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "thus \"\\<sigma> \\<in> good w\""], ["proof (prove)\nusing this:\n  strategy_attracts_via p \\<sigma> w S W\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> good w", "unfolding good_def"], ["proof (prove)\nusing this:\n  strategy_attracts_via p \\<sigma> w S W\n\ngoal (1 subgoal):\n 1. \\<sigma>\n    \\<in> {\\<sigma>.\n           strategy p \\<sigma> \\<and>\n           strategy_attracts_via p \\<sigma> w S W}", "using \\<sigma>(1)"], ["proof (prove)\nusing this:\n  strategy_attracts_via p \\<sigma> w S W\n  strategy p \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<sigma>\n    \\<in> {\\<sigma>.\n           strategy p \\<sigma> \\<and>\n           strategy_attracts_via p \\<sigma> w S W}", "by blast"], ["proof (state)\nthis:\n  \\<sigma> \\<in> good w\n\ngoal (1 subgoal):\n 1. well_order_on {\\<sigma>. \\<exists>v\\<in>S - W. \\<sigma> \\<in> good v} r", "qed (insert r)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "have S_W_no_deadends: \"\\<And>v. v \\<in> S - W \\<Longrightarrow> \\<not>deadend v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> S - W \\<Longrightarrow> \\<not> deadend v", "using strategy_attracts_via_no_deadends[of _ S W] strategies_ex"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> V; ?v \\<in> S - W;\n   strategy_attracts_via ?p ?\\<sigma> ?v S W\\<rbrakk>\n  \\<Longrightarrow> \\<not> deadend ?v\n  ?v \\<in> S \\<Longrightarrow>\n  \\<exists>\\<sigma>.\n     strategy p \\<sigma> \\<and> strategy_attracts_via p \\<sigma> ?v S W\n\ngoal (1 subgoal):\n 1. \\<And>v. v \\<in> S - W \\<Longrightarrow> \\<not> deadend v", "by (metis (no_types) Diff_iff S_V rev_subsetD)"], ["proof (state)\nthis:\n  ?v \\<in> S - W \\<Longrightarrow> \\<not> deadend ?v\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "{"], ["proof (state)\nthis:\n  ?v \\<in> S - W \\<Longrightarrow> \\<not> deadend ?v\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "fix v0"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "assume \"v0 \\<in> S\""], ["proof (state)\nthis:\n  v0 \\<in> S\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "assume P: \"vmc_path G P v0 p well_ordered_strategy\""], ["proof (state)\nthis:\n  vmc_path G P v0 p well_ordered_strategy\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "then"], ["proof (chain)\npicking this:\n  vmc_path G P v0 p well_ordered_strategy", "interpret vmc_path G P v0 p well_ordered_strategy"], ["proof (prove)\nusing this:\n  vmc_path G P v0 p well_ordered_strategy\n\ngoal (1 subgoal):\n 1. vmc_path G P v0 p well_ordered_strategy", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "have \"visits_via P S W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. visits_via P S W", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> visits_via P S W \\<Longrightarrow> False", "assume contra: \"\\<not>visits_via P S W\""], ["proof (state)\nthis:\n  \\<not> visits_via P S W\n\ngoal (1 subgoal):\n 1. \\<not> visits_via P S W \\<Longrightarrow> False", "hence \"lset P \\<subseteq> S - W\""], ["proof (prove)\nusing this:\n  \\<not> visits_via P S W\n\ngoal (1 subgoal):\n 1. lset P \\<subseteq> S - W", "proof (induct rule: vmc_path_lset_induction)"], ["proof (state)\ngoal (2 subgoals):\n 1. v0 \\<in> S - W\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> S - W; \\<not> visits_via P S W\\<rbrakk>\n       \\<Longrightarrow> \\<not> visits_via (ltl P) S W \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S - W", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. v0 \\<in> S - W\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> S - W; \\<not> visits_via P S W\\<rbrakk>\n       \\<Longrightarrow> \\<not> visits_via (ltl P) S W \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S - W", "show \"v0 \\<in> S - W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v0 \\<in> S - W", "using \\<open>v0 \\<in> S\\<close> contra visits_via_trivial"], ["proof (prove)\nusing this:\n  v0 \\<in> S\n  \\<not> visits_via P S W\n  v0 \\<in> ?W \\<Longrightarrow> visits_via P ?A ?W\n\ngoal (1 subgoal):\n 1. v0 \\<in> S - W", "by blast"], ["proof (state)\nthis:\n  v0 \\<in> S - W\n\ngoal (1 subgoal):\n 1. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> S - W; \\<not> visits_via P S W\\<rbrakk>\n       \\<Longrightarrow> \\<not> visits_via (ltl P) S W \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S - W", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> S - W; \\<not> visits_via P S W\\<rbrakk>\n       \\<Longrightarrow> \\<not> visits_via (ltl P) S W \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S - W", "case (step P v0)"], ["proof (state)\nthis:\n  vmc_path_no_deadend G P v0 p well_ordered_strategy\n  v0 \\<in> S - W\n  \\<not> visits_via P S W\n\ngoal (1 subgoal):\n 1. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> S - W; \\<not> visits_via P S W\\<rbrakk>\n       \\<Longrightarrow> \\<not> visits_via (ltl P) S W \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S - W", "interpret vmc_path_no_deadend G P v0 p well_ordered_strategy"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v0 p well_ordered_strategy", "using step.hyps(1)"], ["proof (prove)\nusing this:\n  vmc_path_no_deadend G P v0 p well_ordered_strategy\n\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v0 p well_ordered_strategy", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> S - W; \\<not> visits_via P S W\\<rbrakk>\n       \\<Longrightarrow> \\<not> visits_via (ltl P) S W \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S - W", "have \"insert v0 S = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert v0 S = S", "using step.hyps(2)"], ["proof (prove)\nusing this:\n  v0 \\<in> S - W\n\ngoal (1 subgoal):\n 1. insert v0 S = S", "by blast"], ["proof (state)\nthis:\n  insert v0 S = S\n\ngoal (1 subgoal):\n 1. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> S - W; \\<not> visits_via P S W\\<rbrakk>\n       \\<Longrightarrow> \\<not> visits_via (ltl P) S W \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S - W", "hence *: \"\\<not>visits_via (ltl P) S W\""], ["proof (prove)\nusing this:\n  insert v0 S = S\n\ngoal (1 subgoal):\n 1. \\<not> visits_via (ltl P) S W", "using visits_via_LCons[of \"ltl P\" S W v0, folded P_LCons] step.hyps(3)"], ["proof (prove)\nusing this:\n  insert v0 S = S\n  visits_via (ltl P) S W \\<Longrightarrow> visits_via P (insert v0 S) W\n  \\<not> visits_via P S W\n\ngoal (1 subgoal):\n 1. \\<not> visits_via (ltl P) S W", "by auto"], ["proof (state)\nthis:\n  \\<not> visits_via (ltl P) S W\n\ngoal (1 subgoal):\n 1. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> S - W; \\<not> visits_via P S W\\<rbrakk>\n       \\<Longrightarrow> \\<not> visits_via (ltl P) S W \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S - W", "hence **: \"w0 \\<notin> W\""], ["proof (prove)\nusing this:\n  \\<not> visits_via (ltl P) S W\n\ngoal (1 subgoal):\n 1. w0 \\<notin> W", "using vmc_path.visits_via_trivial[OF vmc_path_ltl]"], ["proof (prove)\nusing this:\n  \\<not> visits_via (ltl P) S W\n  w0 \\<in> ?W \\<Longrightarrow> visits_via (ltl P) ?A ?W\n\ngoal (1 subgoal):\n 1. w0 \\<notin> W", "by blast"], ["proof (state)\nthis:\n  w0 \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> S - W; \\<not> visits_via P S W\\<rbrakk>\n       \\<Longrightarrow> \\<not> visits_via (ltl P) S W \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S - W", "have \"w0 \\<in> S \\<union> W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w0 \\<in> S \\<union> W", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> w0 \\<in> S \\<union> W\n 2. \\<not> ?P \\<Longrightarrow> w0 \\<in> S \\<union> W", "assume \"v0 \\<in> VV p\""], ["proof (state)\nthis:\n  v0 \\<in> VV p\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> w0 \\<in> S \\<union> W\n 2. \\<not> ?P \\<Longrightarrow> w0 \\<in> S \\<union> W", "hence \"well_ordered_strategy v0 = w0\""], ["proof (prove)\nusing this:\n  v0 \\<in> VV p\n\ngoal (1 subgoal):\n 1. well_ordered_strategy v0 = w0", "using v0_conforms"], ["proof (prove)\nusing this:\n  v0 \\<in> VV p\n  v0 \\<in> VV p \\<Longrightarrow> well_ordered_strategy v0 = w0\n\ngoal (1 subgoal):\n 1. well_ordered_strategy v0 = w0", "by blast"], ["proof (state)\nthis:\n  well_ordered_strategy v0 = w0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> w0 \\<in> S \\<union> W\n 2. \\<not> ?P \\<Longrightarrow> w0 \\<in> S \\<union> W", "hence \"choose v0 v0 = w0\""], ["proof (prove)\nusing this:\n  well_ordered_strategy v0 = w0\n\ngoal (1 subgoal):\n 1. choose v0 v0 = w0", "using step.hyps(2) well_ordered_strategy_def"], ["proof (prove)\nusing this:\n  well_ordered_strategy v0 = w0\n  v0 \\<in> S - W\n  well_ordered_strategy \\<equiv>\n  override_on \\<sigma>_arbitrary (\\<lambda>v. choose v v) (S - W)\n\ngoal (1 subgoal):\n 1. choose v0 v0 = w0", "by auto"], ["proof (state)\nthis:\n  choose v0 v0 = w0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> w0 \\<in> S \\<union> W\n 2. \\<not> ?P \\<Longrightarrow> w0 \\<in> S \\<union> W", "moreover"], ["proof (state)\nthis:\n  choose v0 v0 = w0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> w0 \\<in> S \\<union> W\n 2. \\<not> ?P \\<Longrightarrow> w0 \\<in> S \\<union> W", "have \"strategy_attracts_via p (choose v0) v0 S W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy_attracts_via p (choose v0) v0 S W", "using choose_good good_def step.hyps(2)"], ["proof (prove)\nusing this:\n  ?v \\<in> S - W \\<Longrightarrow> choose ?v \\<in> good ?v\n  good ?v =\n  {\\<sigma>.\n   strategy p \\<sigma> \\<and> strategy_attracts_via p \\<sigma> ?v S W}\n  v0 \\<in> S - W\n\ngoal (1 subgoal):\n 1. strategy_attracts_via p (choose v0) v0 S W", "by blast"], ["proof (state)\nthis:\n  strategy_attracts_via p (choose v0) v0 S W\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> w0 \\<in> S \\<union> W\n 2. \\<not> ?P \\<Longrightarrow> w0 \\<in> S \\<union> W", "ultimately"], ["proof (chain)\npicking this:\n  choose v0 v0 = w0\n  strategy_attracts_via p (choose v0) v0 S W", "show ?thesis"], ["proof (prove)\nusing this:\n  choose v0 v0 = w0\n  strategy_attracts_via p (choose v0) v0 S W\n\ngoal (1 subgoal):\n 1. w0 \\<in> S \\<union> W", "by (metis strategy_attracts_via_successor strategy_attracts_via_v0\n                      choose_strategy step.hyps(2) v0_edge_w0 w0_V)"], ["proof (state)\nthis:\n  w0 \\<in> S \\<union> W\n\ngoal (1 subgoal):\n 1. v0 \\<notin> VV p \\<Longrightarrow> w0 \\<in> S \\<union> W", "qed (metis DiffD1 assms(2) step.hyps(2) strategy_attracts_via_successor\n                   strategy_attracts_via_v0 v0_edge_w0 w0_V)"], ["proof (state)\nthis:\n  w0 \\<in> S \\<union> W\n\ngoal (1 subgoal):\n 1. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> S - W; \\<not> visits_via P S W\\<rbrakk>\n       \\<Longrightarrow> \\<not> visits_via (ltl P) S W \\<and>\n                         vmc_path_no_deadend.w0 P \\<in> S - W", "with * **"], ["proof (chain)\npicking this:\n  \\<not> visits_via (ltl P) S W\n  w0 \\<notin> W\n  w0 \\<in> S \\<union> W", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> visits_via (ltl P) S W\n  w0 \\<notin> W\n  w0 \\<in> S \\<union> W\n\ngoal (1 subgoal):\n 1. \\<not> visits_via (ltl P) S W \\<and> w0 \\<in> S - W", "by blast"], ["proof (state)\nthis:\n  \\<not> visits_via (ltl P) S W \\<and> w0 \\<in> S - W\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lset P \\<subseteq> S - W\n\ngoal (1 subgoal):\n 1. \\<not> visits_via P S W \\<Longrightarrow> False", "have \"\\<not>lfinite P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lfinite P", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lfinite P \\<Longrightarrow> False", "assume \"lfinite P\""], ["proof (state)\nthis:\n  lfinite P\n\ngoal (1 subgoal):\n 1. lfinite P \\<Longrightarrow> False", "hence \"deadend (llast P)\""], ["proof (prove)\nusing this:\n  lfinite P\n\ngoal (1 subgoal):\n 1. deadend (llast P)", "using P_maximal P_not_null maximal_ends_on_deadend"], ["proof (prove)\nusing this:\n  lfinite P\n  maximal_path P\n  \\<not> lnull P\n  \\<lbrakk>maximal_path ?P; lfinite ?P; \\<not> lnull ?P\\<rbrakk>\n  \\<Longrightarrow> deadend (llast ?P)\n\ngoal (1 subgoal):\n 1. deadend (llast P)", "by blast"], ["proof (state)\nthis:\n  deadend (llast P)\n\ngoal (1 subgoal):\n 1. lfinite P \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  deadend (llast P)\n\ngoal (1 subgoal):\n 1. lfinite P \\<Longrightarrow> False", "have \"llast P \\<in> S - W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llast P \\<in> S - W", "using \\<open>lset P \\<subseteq> S - W\\<close> P_not_null \\<open>lfinite P\\<close> lfinite_lset"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> S - W\n  \\<not> lnull P\n  lfinite P\n  \\<lbrakk>lfinite ?xs; \\<not> lnull ?xs\\<rbrakk>\n  \\<Longrightarrow> llast ?xs \\<in> lset ?xs\n\ngoal (1 subgoal):\n 1. llast P \\<in> S - W", "by blast"], ["proof (state)\nthis:\n  llast P \\<in> S - W\n\ngoal (1 subgoal):\n 1. lfinite P \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  deadend (llast P)\n  llast P \\<in> S - W", "show False"], ["proof (prove)\nusing this:\n  deadend (llast P)\n  llast P \\<in> S - W\n\ngoal (1 subgoal):\n 1. False", "using S_W_no_deadends"], ["proof (prove)\nusing this:\n  deadend (llast P)\n  llast P \\<in> S - W\n  ?v \\<in> S - W \\<Longrightarrow> \\<not> deadend ?v\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> lfinite P\n\ngoal (1 subgoal):\n 1. \\<not> visits_via P S W \\<Longrightarrow> False", "obtain n where n: \"path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        path_conforms_with_strategy p (ldropn n P)\n         (path_strategies P $ n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using path_eventually_conforms_to_\\<sigma>_map_n[OF \\<open>lset P \\<subseteq> S - W\\<close> P_valid P_conforms]"], ["proof (prove)\nusing this:\n  \\<exists>n.\n     path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        path_conforms_with_strategy p (ldropn n P)\n         (path_strategies P $ n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)\n\ngoal (1 subgoal):\n 1. \\<not> visits_via P S W \\<Longrightarrow> False", "define \\<sigma>' where [simp]: \"\\<sigma>' = path_strategies P $ n\""], ["proof (state)\nthis:\n  \\<sigma>' = path_strategies P $ n\n\ngoal (1 subgoal):\n 1. \\<not> visits_via P S W \\<Longrightarrow> False", "define P' where [simp]: \"P' = ldropn n P\""], ["proof (state)\nthis:\n  P' = ldropn n P\n\ngoal (1 subgoal):\n 1. \\<not> visits_via P S W \\<Longrightarrow> False", "interpret vmc_path G P' \"lhd P'\" p \\<sigma>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path G P' (lhd P') p \\<sigma>'", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<not> lnull P'\n 2. valid_path P'\n 3. maximal_path P'\n 4. lhd P' = lhd P'\n 5. path_conforms_with_strategy p P' \\<sigma>'", "show \"\\<not>lnull P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lnull P'", "unfolding P'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lnull (ldropn n P)", "using \\<open>\\<not>lfinite P\\<close> lfinite_ldropn lnull_imp_lfinite"], ["proof (prove)\nusing this:\n  \\<not> lfinite P\n  lfinite (ldropn ?n ?xs) = lfinite ?xs\n  lnull ?xs \\<Longrightarrow> lfinite ?xs\n\ngoal (1 subgoal):\n 1. \\<not> lnull (ldropn n P)", "by blast"], ["proof (state)\nthis:\n  \\<not> lnull P'\n\ngoal (4 subgoals):\n 1. valid_path P'\n 2. maximal_path P'\n 3. lhd P' = lhd P'\n 4. path_conforms_with_strategy p P' \\<sigma>'", "qed (simp_all add: n)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> visits_via P S W \\<Longrightarrow> False", "have \"strategy p \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p \\<sigma>'", "unfolding \\<sigma>'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p (path_strategies P $ n)", "using path_strategies_strategy \\<open>lset P \\<subseteq> S - W\\<close> \\<open>\\<not>lfinite P\\<close> infinite_small_llength"], ["proof (prove)\nusing this:\n  \\<lbrakk>lset ?P \\<subseteq> S - W; enat ?n < llength ?P\\<rbrakk>\n  \\<Longrightarrow> strategy p (path_strategies ?P $ ?n)\n  lset P \\<subseteq> S - W\n  \\<not> lfinite P\n  \\<not> lfinite ?xs \\<Longrightarrow> enat ?n < llength ?xs\n\ngoal (1 subgoal):\n 1. strategy p (path_strategies P $ n)", "by blast"], ["proof (state)\nthis:\n  strategy p \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<not> visits_via P S W \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  strategy p \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<not> visits_via P S W \\<Longrightarrow> False", "have \"strategy_attracts_via p \\<sigma>' (lhd P') S W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma>' (lhd P') S W", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma>' (lhd P') S W", "have \"P $ n \\<in> S - W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P $ n \\<in> S - W", "using \\<open>lset P \\<subseteq> S - W\\<close> \\<open>\\<not>lfinite P\\<close> lset_nth_member_inf"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> S - W\n  \\<not> lfinite P\n  \\<lbrakk>\\<not> lfinite ?xs; lset ?xs \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> ?xs $ ?n \\<in> ?A\n\ngoal (1 subgoal):\n 1. P $ n \\<in> S - W", "by blast"], ["proof (state)\nthis:\n  P $ n \\<in> S - W\n\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma>' (lhd P') S W", "hence \"\\<sigma>' \\<in> good (P $ n)\""], ["proof (prove)\nusing this:\n  P $ n \\<in> S - W\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<in> good (P $ n)", "using path_strategies_good \\<sigma>'_def \\<open>\\<not>lfinite P\\<close> \\<open>lset P \\<subseteq> S - W\\<close>"], ["proof (prove)\nusing this:\n  P $ n \\<in> S - W\n  \\<lbrakk>lset ?P \\<subseteq> S - W; enat ?n < llength ?P\\<rbrakk>\n  \\<Longrightarrow> path_strategies ?P $ ?n \\<in> good (?P $ ?n)\n  \\<sigma>' = path_strategies P $ n\n  \\<not> lfinite P\n  lset P \\<subseteq> S - W\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<in> good (P $ n)", "by blast"], ["proof (state)\nthis:\n  \\<sigma>' \\<in> good (P $ n)\n\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma>' (lhd P') S W", "hence \"strategy_attracts_via p \\<sigma>' (P $ n) S W\""], ["proof (prove)\nusing this:\n  \\<sigma>' \\<in> good (P $ n)\n\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma>' (P $ n) S W", "unfolding good_def"], ["proof (prove)\nusing this:\n  \\<sigma>'\n  \\<in> {\\<sigma>.\n         strategy p \\<sigma> \\<and>\n         strategy_attracts_via p \\<sigma> (P $ n) S W}\n\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma>' (P $ n) S W", "by blast"], ["proof (state)\nthis:\n  strategy_attracts_via p \\<sigma>' (P $ n) S W\n\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma>' (lhd P') S W", "thus ?thesis"], ["proof (prove)\nusing this:\n  strategy_attracts_via p \\<sigma>' (P $ n) S W\n\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma>' (lhd P') S W", "unfolding P'_def"], ["proof (prove)\nusing this:\n  strategy_attracts_via p \\<sigma>' (P $ n) S W\n\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma>' (lhd (ldropn n P)) S W", "using P_0"], ["proof (prove)\nusing this:\n  strategy_attracts_via p \\<sigma>' (P $ n) S W\n  P' $ 0 = lhd P'\n\ngoal (1 subgoal):\n 1. strategy_attracts_via p \\<sigma>' (lhd (ldropn n P)) S W", "by (simp add: \\<open>\\<not>lfinite P\\<close> infinite_small_llength)"], ["proof (state)\nthis:\n  strategy_attracts_via p \\<sigma>' (lhd P') S W\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  strategy_attracts_via p \\<sigma>' (lhd P') S W\n\ngoal (1 subgoal):\n 1. \\<not> visits_via P S W \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  strategy_attracts_via p \\<sigma>' (lhd P') S W\n\ngoal (1 subgoal):\n 1. \\<not> visits_via P S W \\<Longrightarrow> False", "from \\<open>lset P \\<subseteq> S - W\\<close>"], ["proof (chain)\npicking this:\n  lset P \\<subseteq> S - W", "have \"lset P' \\<subseteq> S - W\""], ["proof (prove)\nusing this:\n  lset P \\<subseteq> S - W\n\ngoal (1 subgoal):\n 1. lset P' \\<subseteq> S - W", "unfolding P'_def"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> S - W\n\ngoal (1 subgoal):\n 1. lset (ldropn n P) \\<subseteq> S - W", "using lset_ldropn_subset[of n P]"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> S - W\n  lset (ldropn n P) \\<subseteq> lset P\n\ngoal (1 subgoal):\n 1. lset (ldropn n P) \\<subseteq> S - W", "by blast"], ["proof (state)\nthis:\n  lset P' \\<subseteq> S - W\n\ngoal (1 subgoal):\n 1. \\<not> visits_via P S W \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  strategy p \\<sigma>'\n  strategy_attracts_via p \\<sigma>' (lhd P') S W\n  lset P' \\<subseteq> S - W", "show False"], ["proof (prove)\nusing this:\n  strategy p \\<sigma>'\n  strategy_attracts_via p \\<sigma>' (lhd P') S W\n  lset P' \\<subseteq> S - W\n\ngoal (1 subgoal):\n 1. False", "using strategy_attracts_via_lset"], ["proof (prove)\nusing this:\n  strategy p \\<sigma>'\n  strategy_attracts_via p \\<sigma>' (lhd P') S W\n  lset P' \\<subseteq> S - W\n  strategy_attracts_via p \\<sigma>' (lhd P') ?A ?W \\<Longrightarrow>\n  lset P' \\<inter> ?W \\<noteq> {}\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  visits_via P S W\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?v0.2 \\<in> S;\n   vmc_path G ?P2 ?v0.2 p well_ordered_strategy\\<rbrakk>\n  \\<Longrightarrow> visits_via ?P2 S W\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v0.2 \\<in> S;\n   vmc_path G ?P2 ?v0.2 p well_ordered_strategy\\<rbrakk>\n  \\<Longrightarrow> visits_via ?P2 S W\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "using well_ordered_strategy_valid"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v0.2 \\<in> S;\n   vmc_path G ?P2 ?v0.2 p well_ordered_strategy\\<rbrakk>\n  \\<Longrightarrow> visits_via ?P2 S W\n  strategy p well_ordered_strategy\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>.\n     strategy p \\<sigma> \\<and> strategy_attracts p \\<sigma> S W\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>A Uniform Winning Strategy\\<close>"], ["", "text \\<open>\n  Let @{term S} be the winning region of player @{term p}.\n  Then there exists a uniform winning strategy on @{term S}.\n\\<close>"], ["", "lemma merge_winning_strategies:\n  shows \"\\<exists>\\<sigma>. strategy p \\<sigma> \\<and> (\\<forall>v \\<in> winning_region p. winning_strategy p \\<sigma> v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "define good where \"good v = {\\<sigma>. strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v}\" for v"], ["proof (state)\nthis:\n  good ?v =\n  {\\<sigma>. strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> ?v}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "let ?G = \"{\\<sigma>. \\<exists>v \\<in> winning_region p. \\<sigma> \\<in> good v}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "obtain r where r: \"well_order_on ?G r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        well_order_on\n         {\\<sigma>. \\<exists>v\\<in>winning_region p. \\<sigma> \\<in> good v}\n         r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using well_order_on"], ["proof (prove)\nusing this:\n  \\<exists>r. well_order_on ?A r\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        well_order_on\n         {\\<sigma>. \\<exists>v\\<in>winning_region p. \\<sigma> \\<in> good v}\n         r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  well_order_on\n   {\\<sigma>. \\<exists>v\\<in>winning_region p. \\<sigma> \\<in> good v} r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "have no_VVp_deadends: \"\\<And>v. \\<lbrakk> v \\<in> winning_region p; v \\<in> VV p \\<rbrakk> \\<Longrightarrow> \\<not>deadend v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> winning_region p; v \\<in> VV p\\<rbrakk>\n       \\<Longrightarrow> \\<not> deadend v", "using no_winning_strategy_on_deadends"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> VV ?p; deadend ?v; strategy ?p ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> \\<not> winning_strategy ?p ?\\<sigma> ?v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> winning_region p; v \\<in> VV p\\<rbrakk>\n       \\<Longrightarrow> \\<not> deadend v", "unfolding winning_region_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> VV ?p; deadend ?v; strategy ?p ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> \\<not> winning_strategy ?p ?\\<sigma> ?v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> {v \\<in> V.\n                         \\<exists>\\<sigma>.\n                            strategy p \\<sigma> \\<and>\n                            winning_strategy p \\<sigma> v};\n        v \\<in> VV p\\<rbrakk>\n       \\<Longrightarrow> \\<not> deadend v", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>?v \\<in> winning_region p; ?v \\<in> VV p\\<rbrakk>\n  \\<Longrightarrow> \\<not> deadend ?v\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "interpret WellOrderedStrategies G \"winning_region p\" p good r"], ["proof (prove)\ngoal (1 subgoal):\n 1. WellOrderedStrategies G (winning_region p) p good r", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. winning_region p \\<subseteq> V\n 2. well_order_on\n     {\\<sigma>. \\<exists>v\\<in>winning_region p. \\<sigma> \\<in> good v} r\n 3. \\<And>v.\n       v \\<in> winning_region p \\<Longrightarrow>\n       \\<exists>\\<sigma>. \\<sigma> \\<in> good v\n 4. \\<And>v \\<sigma>.\n       \\<sigma> \\<in> good v \\<Longrightarrow> strategy p \\<sigma>\n 5. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> winning_region p; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "show \"\\<And>v. v \\<in> winning_region p \\<Longrightarrow> \\<exists>\\<sigma>. \\<sigma> \\<in> good v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> winning_region p \\<Longrightarrow>\n       \\<exists>\\<sigma>. \\<sigma> \\<in> good v", "unfolding good_def winning_region_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       v \\<in> {v \\<in> V.\n                \\<exists>\\<sigma>.\n                   strategy p \\<sigma> \\<and>\n                   winning_strategy p \\<sigma> v} \\<Longrightarrow>\n       \\<exists>\\<sigma>.\n          \\<sigma>\n          \\<in> {\\<sigma>.\n                 strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v}", "by blast"], ["proof (state)\nthis:\n  ?v \\<in> winning_region p \\<Longrightarrow>\n  \\<exists>\\<sigma>. \\<sigma> \\<in> good ?v\n\ngoal (4 subgoals):\n 1. winning_region p \\<subseteq> V\n 2. well_order_on\n     {\\<sigma>. \\<exists>v\\<in>winning_region p. \\<sigma> \\<in> good v} r\n 3. \\<And>v \\<sigma>.\n       \\<sigma> \\<in> good v \\<Longrightarrow> strategy p \\<sigma>\n 4. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> winning_region p; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. winning_region p \\<subseteq> V\n 2. well_order_on\n     {\\<sigma>. \\<exists>v\\<in>winning_region p. \\<sigma> \\<in> good v} r\n 3. \\<And>v \\<sigma>.\n       \\<sigma> \\<in> good v \\<Longrightarrow> strategy p \\<sigma>\n 4. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> winning_region p; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "show \"\\<And>v \\<sigma>. \\<sigma> \\<in> good v \\<Longrightarrow> strategy p \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v \\<sigma>.\n       \\<sigma> \\<in> good v \\<Longrightarrow> strategy p \\<sigma>", "unfolding good_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v \\<sigma>.\n       \\<sigma>\n       \\<in> {\\<sigma>.\n              strategy p \\<sigma> \\<and>\n              winning_strategy p \\<sigma> v} \\<Longrightarrow>\n       strategy p \\<sigma>", "by blast"], ["proof (state)\nthis:\n  ?\\<sigma> \\<in> good ?v \\<Longrightarrow> strategy p ?\\<sigma>\n\ngoal (3 subgoals):\n 1. winning_region p \\<subseteq> V\n 2. well_order_on\n     {\\<sigma>. \\<exists>v\\<in>winning_region p. \\<sigma> \\<in> good v} r\n 3. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> winning_region p; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. winning_region p \\<subseteq> V\n 2. well_order_on\n     {\\<sigma>. \\<exists>v\\<in>winning_region p. \\<sigma> \\<in> good v} r\n 3. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> winning_region p; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "fix v w \\<sigma>"], ["proof (state)\ngoal (3 subgoals):\n 1. winning_region p \\<subseteq> V\n 2. well_order_on\n     {\\<sigma>. \\<exists>v\\<in>winning_region p. \\<sigma> \\<in> good v} r\n 3. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> winning_region p; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "assume v: \"v \\<in> winning_region p\" \"v\\<rightarrow>w\" \"v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w\" \"\\<sigma> \\<in> good v\""], ["proof (state)\nthis:\n  v \\<in> winning_region p\n  v \\<rightarrow> w\n  v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w\n  \\<sigma> \\<in> good v\n\ngoal (3 subgoals):\n 1. winning_region p \\<subseteq> V\n 2. well_order_on\n     {\\<sigma>. \\<exists>v\\<in>winning_region p. \\<sigma> \\<in> good v} r\n 3. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> winning_region p; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "hence \\<sigma>: \"strategy p \\<sigma>\" \"winning_strategy p \\<sigma> v\""], ["proof (prove)\nusing this:\n  v \\<in> winning_region p\n  v \\<rightarrow> w\n  v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w\n  \\<sigma> \\<in> good v\n\ngoal (1 subgoal):\n 1. strategy p \\<sigma> &&& winning_strategy p \\<sigma> v", "unfolding good_def"], ["proof (prove)\nusing this:\n  v \\<in> winning_region p\n  v \\<rightarrow> w\n  v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w\n  \\<sigma>\n  \\<in> {\\<sigma>. strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v}\n\ngoal (1 subgoal):\n 1. strategy p \\<sigma> &&& winning_strategy p \\<sigma> v", "by simp_all"], ["proof (state)\nthis:\n  strategy p \\<sigma>\n  winning_strategy p \\<sigma> v\n\ngoal (3 subgoals):\n 1. winning_region p \\<subseteq> V\n 2. well_order_on\n     {\\<sigma>. \\<exists>v\\<in>winning_region p. \\<sigma> \\<in> good v} r\n 3. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> winning_region p; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "hence \"winning_strategy p \\<sigma> w\""], ["proof (prove)\nusing this:\n  strategy p \\<sigma>\n  winning_strategy p \\<sigma> v\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma> w", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>strategy p \\<sigma>; winning_strategy p \\<sigma> v;\n     ?P2\\<rbrakk>\n    \\<Longrightarrow> winning_strategy p \\<sigma> w\n 2. \\<lbrakk>strategy p \\<sigma>; winning_strategy p \\<sigma> v;\n     \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> winning_strategy p \\<sigma> w", "assume *: \"v \\<in> VV p\""], ["proof (state)\nthis:\n  v \\<in> VV p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>strategy p \\<sigma>; winning_strategy p \\<sigma> v;\n     ?P2\\<rbrakk>\n    \\<Longrightarrow> winning_strategy p \\<sigma> w\n 2. \\<lbrakk>strategy p \\<sigma>; winning_strategy p \\<sigma> v;\n     \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> winning_strategy p \\<sigma> w", "hence **: \"\\<sigma> v = w\""], ["proof (prove)\nusing this:\n  v \\<in> VV p\n\ngoal (1 subgoal):\n 1. \\<sigma> v = w", "using v(3)"], ["proof (prove)\nusing this:\n  v \\<in> VV p\n  v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w\n\ngoal (1 subgoal):\n 1. \\<sigma> v = w", "by blast"], ["proof (state)\nthis:\n  \\<sigma> v = w\n\ngoal (2 subgoals):\n 1. \\<lbrakk>strategy p \\<sigma>; winning_strategy p \\<sigma> v;\n     ?P2\\<rbrakk>\n    \\<Longrightarrow> winning_strategy p \\<sigma> w\n 2. \\<lbrakk>strategy p \\<sigma>; winning_strategy p \\<sigma> v;\n     \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> winning_strategy p \\<sigma> w", "have \"\\<not>deadend v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> deadend v", "using no_VVp_deadends \\<open>v \\<in> VV p\\<close> v(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> winning_region p; ?v \\<in> VV p\\<rbrakk>\n  \\<Longrightarrow> \\<not> deadend ?v\n  v \\<in> VV p\n  v \\<in> winning_region p\n\ngoal (1 subgoal):\n 1. \\<not> deadend v", "by blast"], ["proof (state)\nthis:\n  \\<not> deadend v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>strategy p \\<sigma>; winning_strategy p \\<sigma> v;\n     ?P2\\<rbrakk>\n    \\<Longrightarrow> winning_strategy p \\<sigma> w\n 2. \\<lbrakk>strategy p \\<sigma>; winning_strategy p \\<sigma> v;\n     \\<not> ?P2\\<rbrakk>\n    \\<Longrightarrow> winning_strategy p \\<sigma> w", "with * **"], ["proof (chain)\npicking this:\n  v \\<in> VV p\n  \\<sigma> v = w\n  \\<not> deadend v", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> VV p\n  \\<sigma> v = w\n  \\<not> deadend v\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma> w", "using strategy_extends_VVp \\<sigma>"], ["proof (prove)\nusing this:\n  v \\<in> VV p\n  \\<sigma> v = w\n  \\<not> deadend v\n  \\<lbrakk>?v0.0 \\<in> VV ?p; \\<not> deadend ?v0.0; strategy ?p ?\\<sigma>;\n   winning_strategy ?p ?\\<sigma> ?v0.0\\<rbrakk>\n  \\<Longrightarrow> winning_strategy ?p ?\\<sigma> (?\\<sigma> ?v0.0)\n  strategy p \\<sigma>\n  winning_strategy p \\<sigma> v\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma> w", "by blast"], ["proof (state)\nthis:\n  winning_strategy p \\<sigma> w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strategy p \\<sigma>; winning_strategy p \\<sigma> v;\n     v \\<notin> VV p\\<rbrakk>\n    \\<Longrightarrow> winning_strategy p \\<sigma> w", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>strategy p \\<sigma>; winning_strategy p \\<sigma> v;\n     v \\<notin> VV p\\<rbrakk>\n    \\<Longrightarrow> winning_strategy p \\<sigma> w", "assume \"v \\<notin> VV p\""], ["proof (state)\nthis:\n  v \\<notin> VV p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>strategy p \\<sigma>; winning_strategy p \\<sigma> v;\n     v \\<notin> VV p\\<rbrakk>\n    \\<Longrightarrow> winning_strategy p \\<sigma> w", "thus ?thesis"], ["proof (prove)\nusing this:\n  v \\<notin> VV p\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma> w", "using strategy_extends_VVpstar \\<sigma> \\<open>v\\<rightarrow>w\\<close>"], ["proof (prove)\nusing this:\n  v \\<notin> VV p\n  \\<lbrakk>?v0.0 \\<in> VV ?p**; ?v0.0 \\<rightarrow> ?w0.0;\n   winning_strategy ?p ?\\<sigma> ?v0.0\\<rbrakk>\n  \\<Longrightarrow> winning_strategy ?p ?\\<sigma> ?w0.0\n  strategy p \\<sigma>\n  winning_strategy p \\<sigma> v\n  v \\<rightarrow> w\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma> w", "by blast"], ["proof (state)\nthis:\n  winning_strategy p \\<sigma> w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  winning_strategy p \\<sigma> w\n\ngoal (3 subgoals):\n 1. winning_region p \\<subseteq> V\n 2. well_order_on\n     {\\<sigma>. \\<exists>v\\<in>winning_region p. \\<sigma> \\<in> good v} r\n 3. \\<And>v w \\<sigma>.\n       \\<lbrakk>v \\<in> winning_region p; v \\<rightarrow> w;\n        v \\<in> VV p \\<Longrightarrow> \\<sigma> v = w;\n        \\<sigma> \\<in> good v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> \\<in> good w", "thus \"\\<sigma> \\<in> good w\""], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma> w\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> good w", "unfolding good_def"], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma> w\n\ngoal (1 subgoal):\n 1. \\<sigma>\n    \\<in> {\\<sigma>.\n           strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> w}", "using \\<sigma>(1)"], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma> w\n  strategy p \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<sigma>\n    \\<in> {\\<sigma>.\n           strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> w}", "by blast"], ["proof (state)\nthis:\n  \\<sigma> \\<in> good w\n\ngoal (2 subgoals):\n 1. winning_region p \\<subseteq> V\n 2. well_order_on\n     {\\<sigma>. \\<exists>v\\<in>winning_region p. \\<sigma> \\<in> good v} r", "qed (insert winning_region_in_V r)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "fix v0"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "assume \"v0 \\<in> winning_region p\""], ["proof (state)\nthis:\n  v0 \\<in> winning_region p\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "assume P: \"vmc_path G P v0 p well_ordered_strategy\""], ["proof (state)\nthis:\n  vmc_path G P v0 p well_ordered_strategy\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "then"], ["proof (chain)\npicking this:\n  vmc_path G P v0 p well_ordered_strategy", "interpret vmc_path G P v0 p well_ordered_strategy"], ["proof (prove)\nusing this:\n  vmc_path G P v0 p well_ordered_strategy\n\ngoal (1 subgoal):\n 1. vmc_path G P v0 p well_ordered_strategy", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "have \"lset P \\<subseteq> winning_region p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lset P \\<subseteq> winning_region p", "proof (induct rule: vmc_path_lset_induction_simple)"], ["proof (state)\ngoal (2 subgoals):\n 1. v0 \\<in> winning_region p\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> winning_region p\\<rbrakk>\n       \\<Longrightarrow> vmc_path_no_deadend.w0 P \\<in> winning_region p", "case (step P v0)"], ["proof (state)\nthis:\n  vmc_path_no_deadend G P v0 p well_ordered_strategy\n  v0 \\<in> winning_region p\n\ngoal (2 subgoals):\n 1. v0__ \\<in> winning_region p\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> winning_region p\\<rbrakk>\n       \\<Longrightarrow> vmc_path_no_deadend.w0 P \\<in> winning_region p", "interpret vmc_path_no_deadend G P v0 p well_ordered_strategy"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v0 p well_ordered_strategy", "using step.hyps(1)"], ["proof (prove)\nusing this:\n  vmc_path_no_deadend G P v0 p well_ordered_strategy\n\ngoal (1 subgoal):\n 1. vmc_path_no_deadend G P v0 p well_ordered_strategy", "."], ["proof (state)\ngoal (2 subgoals):\n 1. v0__ \\<in> winning_region p\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> winning_region p\\<rbrakk>\n       \\<Longrightarrow> vmc_path_no_deadend.w0 P \\<in> winning_region p", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. v0__ \\<in> winning_region p\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> winning_region p\\<rbrakk>\n       \\<Longrightarrow> vmc_path_no_deadend.w0 P \\<in> winning_region p", "assume \"v0 \\<in> VV p\""], ["proof (state)\nthis:\n  v0 \\<in> VV p\n\ngoal (2 subgoals):\n 1. v0__ \\<in> winning_region p\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> winning_region p\\<rbrakk>\n       \\<Longrightarrow> vmc_path_no_deadend.w0 P \\<in> winning_region p", "hence \"well_ordered_strategy v0 = w0\""], ["proof (prove)\nusing this:\n  v0 \\<in> VV p\n\ngoal (1 subgoal):\n 1. well_ordered_strategy v0 = w0", "using v0_conforms"], ["proof (prove)\nusing this:\n  v0 \\<in> VV p\n  v0 \\<in> VV p \\<Longrightarrow> well_ordered_strategy v0 = w0\n\ngoal (1 subgoal):\n 1. well_ordered_strategy v0 = w0", "by blast"], ["proof (state)\nthis:\n  well_ordered_strategy v0 = w0\n\ngoal (2 subgoals):\n 1. v0__ \\<in> winning_region p\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> winning_region p\\<rbrakk>\n       \\<Longrightarrow> vmc_path_no_deadend.w0 P \\<in> winning_region p", "hence \"choose v0 v0 = w0\""], ["proof (prove)\nusing this:\n  well_ordered_strategy v0 = w0\n\ngoal (1 subgoal):\n 1. choose v0 v0 = w0", "by (simp add: step.hyps(2) well_ordered_strategy_def)"], ["proof (state)\nthis:\n  choose v0 v0 = w0\n\ngoal (2 subgoals):\n 1. v0__ \\<in> winning_region p\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> winning_region p\\<rbrakk>\n       \\<Longrightarrow> vmc_path_no_deadend.w0 P \\<in> winning_region p", "}"], ["proof (state)\nthis:\n  v0 \\<in> VV p \\<Longrightarrow> choose v0 v0 = w0\n\ngoal (2 subgoals):\n 1. v0__ \\<in> winning_region p\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> winning_region p\\<rbrakk>\n       \\<Longrightarrow> vmc_path_no_deadend.w0 P \\<in> winning_region p", "hence \"choose v0 \\<in> good w0\""], ["proof (prove)\nusing this:\n  v0 \\<in> VV p \\<Longrightarrow> choose v0 v0 = w0\n\ngoal (1 subgoal):\n 1. choose v0 \\<in> good w0", "using strategies_continue choose_good step.hyps(2)"], ["proof (prove)\nusing this:\n  v0 \\<in> VV p \\<Longrightarrow> choose v0 v0 = w0\n  \\<lbrakk>?v \\<in> winning_region p; ?v \\<rightarrow> ?w;\n   ?v \\<in> VV p \\<Longrightarrow> ?\\<sigma> ?v = ?w;\n   ?\\<sigma> \\<in> good ?v\\<rbrakk>\n  \\<Longrightarrow> ?\\<sigma> \\<in> good ?w\n  ?v \\<in> winning_region p \\<Longrightarrow> choose ?v \\<in> good ?v\n  v0 \\<in> winning_region p\n\ngoal (1 subgoal):\n 1. choose v0 \\<in> good w0", "by simp"], ["proof (state)\nthis:\n  choose v0 \\<in> good w0\n\ngoal (2 subgoals):\n 1. v0__ \\<in> winning_region p\n 2. \\<And>P v0.\n       \\<lbrakk>vmc_path_no_deadend G P v0 p well_ordered_strategy;\n        v0 \\<in> winning_region p\\<rbrakk>\n       \\<Longrightarrow> vmc_path_no_deadend.w0 P \\<in> winning_region p", "thus ?case"], ["proof (prove)\nusing this:\n  choose v0 \\<in> good w0\n\ngoal (1 subgoal):\n 1. w0 \\<in> winning_region p", "unfolding good_def winning_region_def"], ["proof (prove)\nusing this:\n  WellOrderedStrategies.choose\n   (\\<lambda>v.\n       {\\<sigma>. strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v})\n   r v0\n  \\<in> {\\<sigma>.\n         strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> w0}\n\ngoal (1 subgoal):\n 1. w0 \\<in> {v \\<in> V.\n              \\<exists>\\<sigma>.\n                 strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v}", "using w0_V"], ["proof (prove)\nusing this:\n  WellOrderedStrategies.choose\n   (\\<lambda>v.\n       {\\<sigma>. strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v})\n   r v0\n  \\<in> {\\<sigma>.\n         strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> w0}\n  w0 \\<in> V\n\ngoal (1 subgoal):\n 1. w0 \\<in> {v \\<in> V.\n              \\<exists>\\<sigma>.\n                 strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v}", "by blast"], ["proof (state)\nthis:\n  w0 \\<in> winning_region p\n\ngoal (1 subgoal):\n 1. v0__ \\<in> winning_region p", "qed (insert \\<open>v0 \\<in> winning_region p\\<close>)"], ["proof (state)\nthis:\n  lset P \\<subseteq> winning_region p\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "have \"winning_path p P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_path p P", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> winning_path p P \\<Longrightarrow> False", "assume contra: \"\\<not>winning_path p P\""], ["proof (state)\nthis:\n  \\<not> winning_path p P\n\ngoal (1 subgoal):\n 1. \\<not> winning_path p P \\<Longrightarrow> False", "have \"\\<not>lfinite P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lfinite P", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lfinite P \\<Longrightarrow> False", "assume \"lfinite P\""], ["proof (state)\nthis:\n  lfinite P\n\ngoal (1 subgoal):\n 1. lfinite P \\<Longrightarrow> False", "hence \"deadend (llast P)\""], ["proof (prove)\nusing this:\n  lfinite P\n\ngoal (1 subgoal):\n 1. deadend (llast P)", "using maximal_ends_on_deadend"], ["proof (prove)\nusing this:\n  lfinite P\n  \\<lbrakk>maximal_path ?P; lfinite ?P; \\<not> lnull ?P\\<rbrakk>\n  \\<Longrightarrow> deadend (llast ?P)\n\ngoal (1 subgoal):\n 1. deadend (llast P)", "by simp"], ["proof (state)\nthis:\n  deadend (llast P)\n\ngoal (1 subgoal):\n 1. lfinite P \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  deadend (llast P)\n\ngoal (1 subgoal):\n 1. lfinite P \\<Longrightarrow> False", "have \"llast P \\<in> winning_region p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llast P \\<in> winning_region p", "using \\<open>lset P \\<subseteq> winning_region p\\<close> P_not_null \\<open>lfinite P\\<close> lfinite_lset"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> winning_region p\n  \\<not> lnull P\n  lfinite P\n  \\<lbrakk>lfinite ?xs; \\<not> lnull ?xs\\<rbrakk>\n  \\<Longrightarrow> llast ?xs \\<in> lset ?xs\n\ngoal (1 subgoal):\n 1. llast P \\<in> winning_region p", "by blast"], ["proof (state)\nthis:\n  llast P \\<in> winning_region p\n\ngoal (1 subgoal):\n 1. lfinite P \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  llast P \\<in> winning_region p\n\ngoal (1 subgoal):\n 1. lfinite P \\<Longrightarrow> False", "have \"llast P \\<in> VV p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. llast P \\<in> VV p", "using contra paths_are_winning_for_one_player \\<open>lfinite P\\<close>"], ["proof (prove)\nusing this:\n  \\<not> winning_path p P\n  valid_path ?P \\<Longrightarrow>\n  winning_path ?p ?P = (\\<not> winning_path ?p** ?P)\n  lfinite P\n\ngoal (1 subgoal):\n 1. llast P \\<in> VV p", "unfolding winning_path_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<not> lfinite P \\<and>\n          (\\<exists>a\\<in>path_inf_priorities P.\n              (\\<forall>b\\<in>path_inf_priorities P. a \\<le> b) \\<and>\n              (if p = Even then even else odd) a) \\<or>\n          \\<not> lnull P \\<and> lfinite P \\<and> llast P \\<in> VV p** \\<or>\n          lnull P \\<and> p = Even)\n  valid_path ?P \\<Longrightarrow>\n  (\\<not> lfinite ?P \\<and>\n   (\\<exists>a\\<in>path_inf_priorities ?P.\n       (\\<forall>b\\<in>path_inf_priorities ?P. a \\<le> b) \\<and>\n       (if ?p = Even then even else odd) a) \\<or>\n   \\<not> lnull ?P \\<and> lfinite ?P \\<and> llast ?P \\<in> VV ?p** \\<or>\n   lnull ?P \\<and> ?p = Even) =\n  (\\<not> (\\<not> lfinite ?P \\<and>\n           (\\<exists>a\\<in>path_inf_priorities ?P.\n               (\\<forall>b\\<in>path_inf_priorities ?P. a \\<le> b) \\<and>\n               (if ?p** = Even then even else odd) a) \\<or>\n           \\<not> lnull ?P \\<and>\n           lfinite ?P \\<and> llast ?P \\<in> VV ?p**** \\<or>\n           lnull ?P \\<and> ?p** = Even))\n  lfinite P\n\ngoal (1 subgoal):\n 1. llast P \\<in> VV p", "by simp"], ["proof (state)\nthis:\n  llast P \\<in> VV p\n\ngoal (1 subgoal):\n 1. lfinite P \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  deadend (llast P)\n  llast P \\<in> winning_region p\n  llast P \\<in> VV p", "show False"], ["proof (prove)\nusing this:\n  deadend (llast P)\n  llast P \\<in> winning_region p\n  llast P \\<in> VV p\n\ngoal (1 subgoal):\n 1. False", "using no_VVp_deadends"], ["proof (prove)\nusing this:\n  deadend (llast P)\n  llast P \\<in> winning_region p\n  llast P \\<in> VV p\n  \\<lbrakk>?v \\<in> winning_region p; ?v \\<in> VV p\\<rbrakk>\n  \\<Longrightarrow> \\<not> deadend ?v\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> lfinite P\n\ngoal (1 subgoal):\n 1. \\<not> winning_path p P \\<Longrightarrow> False", "obtain n where n: \"path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        path_conforms_with_strategy p (ldropn n P)\n         (path_strategies P $ n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using path_eventually_conforms_to_\\<sigma>_map_n[OF \\<open>lset P \\<subseteq> winning_region p\\<close> P_valid P_conforms]"], ["proof (prove)\nusing this:\n  \\<exists>n.\n     path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        path_conforms_with_strategy p (ldropn n P)\n         (path_strategies P $ n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  path_conforms_with_strategy p (ldropn n P) (path_strategies P $ n)\n\ngoal (1 subgoal):\n 1. \\<not> winning_path p P \\<Longrightarrow> False", "define \\<sigma>' where [simp]: \"\\<sigma>' = path_strategies P $ n\""], ["proof (state)\nthis:\n  \\<sigma>' = path_strategies P $ n\n\ngoal (1 subgoal):\n 1. \\<not> winning_path p P \\<Longrightarrow> False", "define P' where [simp]: \"P' = ldropn n P\""], ["proof (state)\nthis:\n  P' = ldropn n P\n\ngoal (1 subgoal):\n 1. \\<not> winning_path p P \\<Longrightarrow> False", "interpret P': vmc_path G P' \"lhd P'\" p \\<sigma>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. vmc_path G P' (lhd P') p \\<sigma>'", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<not> lnull P'\n 2. valid_path P'\n 3. maximal_path P'\n 4. lhd P' = lhd P'\n 5. path_conforms_with_strategy p P' \\<sigma>'", "show \"\\<not>lnull P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lnull P'", "using \\<open>\\<not>lfinite P\\<close>"], ["proof (prove)\nusing this:\n  \\<not> lfinite P\n\ngoal (1 subgoal):\n 1. \\<not> lnull P'", "unfolding P'_def"], ["proof (prove)\nusing this:\n  \\<not> lfinite P\n\ngoal (1 subgoal):\n 1. \\<not> lnull (ldropn n P)", "using lfinite_ldropn lnull_imp_lfinite"], ["proof (prove)\nusing this:\n  \\<not> lfinite P\n  lfinite (ldropn ?n ?xs) = lfinite ?xs\n  lnull ?xs \\<Longrightarrow> lfinite ?xs\n\ngoal (1 subgoal):\n 1. \\<not> lnull (ldropn n P)", "by blast"], ["proof (state)\nthis:\n  \\<not> lnull P'\n\ngoal (4 subgoals):\n 1. valid_path P'\n 2. maximal_path P'\n 3. lhd P' = lhd P'\n 4. path_conforms_with_strategy p P' \\<sigma>'", "qed (simp_all add: n)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> winning_path p P \\<Longrightarrow> False", "have \"strategy p \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p \\<sigma>'", "unfolding \\<sigma>'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. strategy p (path_strategies P $ n)", "using path_strategies_strategy \\<open>lset P \\<subseteq> winning_region p\\<close> \\<open>\\<not>lfinite P\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>lset ?P \\<subseteq> winning_region p;\n   enat ?n < llength ?P\\<rbrakk>\n  \\<Longrightarrow> strategy p (path_strategies ?P $ ?n)\n  lset P \\<subseteq> winning_region p\n  \\<not> lfinite P\n\ngoal (1 subgoal):\n 1. strategy p (path_strategies P $ n)", "by blast"], ["proof (state)\nthis:\n  strategy p \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<not> winning_path p P \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  strategy p \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<not> winning_path p P \\<Longrightarrow> False", "have \"winning_strategy p \\<sigma>' (lhd P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' (lhd P')", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' (lhd P')", "have \"P $ n \\<in> winning_region p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P $ n \\<in> winning_region p", "using \\<open>lset P \\<subseteq> winning_region p\\<close> \\<open>\\<not>lfinite P\\<close> lset_nth_member_inf"], ["proof (prove)\nusing this:\n  lset P \\<subseteq> winning_region p\n  \\<not> lfinite P\n  \\<lbrakk>\\<not> lfinite ?xs; lset ?xs \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> ?xs $ ?n \\<in> ?A\n\ngoal (1 subgoal):\n 1. P $ n \\<in> winning_region p", "by blast"], ["proof (state)\nthis:\n  P $ n \\<in> winning_region p\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' (lhd P')", "hence \"\\<sigma>' \\<in> good (P $ n)\""], ["proof (prove)\nusing this:\n  P $ n \\<in> winning_region p\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<in> good (P $ n)", "using path_strategies_good choose_good \\<sigma>'_def \\<open>\\<not>lfinite P\\<close> \\<open>lset P \\<subseteq> winning_region p\\<close>"], ["proof (prove)\nusing this:\n  P $ n \\<in> winning_region p\n  \\<lbrakk>lset ?P \\<subseteq> winning_region p;\n   enat ?n < llength ?P\\<rbrakk>\n  \\<Longrightarrow> path_strategies ?P $ ?n \\<in> good (?P $ ?n)\n  ?v \\<in> winning_region p \\<Longrightarrow> choose ?v \\<in> good ?v\n  \\<sigma>' = path_strategies P $ n\n  \\<not> lfinite P\n  lset P \\<subseteq> winning_region p\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<in> good (P $ n)", "by blast"], ["proof (state)\nthis:\n  \\<sigma>' \\<in> good (P $ n)\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' (lhd P')", "hence \"winning_strategy p \\<sigma>' (P $ n)\""], ["proof (prove)\nusing this:\n  \\<sigma>' \\<in> good (P $ n)\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' (P $ n)", "unfolding good_def"], ["proof (prove)\nusing this:\n  \\<sigma>'\n  \\<in> {\\<sigma>.\n         strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> (P $ n)}\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' (P $ n)", "by blast"], ["proof (state)\nthis:\n  winning_strategy p \\<sigma>' (P $ n)\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' (lhd P')", "thus ?thesis"], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma>' (P $ n)\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' (lhd P')", "unfolding P'_def"], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma>' (P $ n)\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' (lhd (ldropn n P))", "using P_0 \\<open>\\<not>lfinite P\\<close>"], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma>' (P $ n)\n  P $ 0 = v0\n  \\<not> lfinite P\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma>' (lhd (ldropn n P))", "by (simp add: infinite_small_llength lhd_ldropn)"], ["proof (state)\nthis:\n  winning_strategy p \\<sigma>' (lhd P')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  winning_strategy p \\<sigma>' (lhd P')\n\ngoal (1 subgoal):\n 1. \\<not> winning_path p P \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  strategy p \\<sigma>'\n  winning_strategy p \\<sigma>' (lhd P')", "have \"winning_path p P'\""], ["proof (prove)\nusing this:\n  strategy p \\<sigma>'\n  winning_strategy p \\<sigma>' (lhd P')\n\ngoal (1 subgoal):\n 1. winning_path p P'", "unfolding winning_strategy_def"], ["proof (prove)\nusing this:\n  strategy p \\<sigma>'\n  \\<forall>P.\n     vmc_path G P (lhd P') p \\<sigma>' \\<longrightarrow> winning_path p P\n\ngoal (1 subgoal):\n 1. winning_path p P'", "using P'.vmc_path_axioms"], ["proof (prove)\nusing this:\n  strategy p \\<sigma>'\n  \\<forall>P.\n     vmc_path G P (lhd P') p \\<sigma>' \\<longrightarrow> winning_path p P\n  vmc_path G P' (lhd P') p \\<sigma>'\n\ngoal (1 subgoal):\n 1. winning_path p P'", "by blast"], ["proof (state)\nthis:\n  winning_path p P'\n\ngoal (1 subgoal):\n 1. \\<not> winning_path p P \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  winning_path p P'\n\ngoal (1 subgoal):\n 1. \\<not> winning_path p P \\<Longrightarrow> False", "have \"\\<not>lfinite P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lfinite P'", "using \\<open>\\<not>lfinite P\\<close> P'_def"], ["proof (prove)\nusing this:\n  \\<not> lfinite P\n  P' = ldropn n P\n\ngoal (1 subgoal):\n 1. \\<not> lfinite P'", "by simp"], ["proof (state)\nthis:\n  \\<not> lfinite P'\n\ngoal (1 subgoal):\n 1. \\<not> winning_path p P \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  winning_path p P'\n  \\<not> lfinite P'", "show False"], ["proof (prove)\nusing this:\n  winning_path p P'\n  \\<not> lfinite P'\n\ngoal (1 subgoal):\n 1. False", "using contra winning_path_drop_add[OF P_valid]"], ["proof (prove)\nusing this:\n  winning_path p P'\n  \\<not> lfinite P'\n  \\<not> winning_path p P\n  \\<lbrakk>winning_path ?p (ldropn ?n P); enat ?n < llength P\\<rbrakk>\n  \\<Longrightarrow> winning_path ?p P\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  winning_path p P\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?v0.2 \\<in> winning_region p;\n   vmc_path G ?P2 ?v0.2 p well_ordered_strategy\\<rbrakk>\n  \\<Longrightarrow> winning_path p ?P2\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v0.2 \\<in> winning_region p;\n   vmc_path G ?P2 ?v0.2 p well_ordered_strategy\\<rbrakk>\n  \\<Longrightarrow> winning_path p ?P2\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)", "unfolding winning_strategy_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v0.2 \\<in> winning_region p;\n   vmc_path G ?P2 ?v0.2 p well_ordered_strategy\\<rbrakk>\n  \\<Longrightarrow> winning_path p ?P2\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p.\n           \\<forall>P.\n              vmc_path G P v p \\<sigma> \\<longrightarrow> winning_path p P)", "using well_ordered_strategy_valid"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v0.2 \\<in> winning_region p;\n   vmc_path G ?P2 ?v0.2 p well_ordered_strategy\\<rbrakk>\n  \\<Longrightarrow> winning_path p ?P2\n  strategy p well_ordered_strategy\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>.\n       strategy p \\<sigma> \\<and>\n       (\\<forall>v\\<in>winning_region p.\n           \\<forall>P.\n              vmc_path G P v p \\<sigma> \\<longrightarrow> winning_path p P)", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>.\n     strategy p \\<sigma> \\<and>\n     (\\<forall>v\\<in>winning_region p. winning_strategy p \\<sigma> v)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Extending Winning Regions\\<close>"], ["", "text \\<open>\n  Now we are finally able to prove the complement of \\<open>winning_region_extends_VVp\\<close> for\n  @{term \"VV p**\"} nodes, which was still missing.\n\\<close>"], ["", "lemma winning_region_extends_VVpstar:\n  assumes v: \"v \\<in> VV p**\" and w: \"\\<And>w. v\\<rightarrow>w \\<Longrightarrow> w \\<in> winning_region p\"\n  shows \"v \\<in> winning_region p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> winning_region p", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> winning_region p", "obtain \\<sigma> where \\<sigma>: \"strategy p \\<sigma>\"  \"\\<And>v. v \\<in> winning_region p \\<Longrightarrow> winning_strategy p \\<sigma> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<lbrakk>strategy p \\<sigma>;\n         \\<And>v.\n            v \\<in> winning_region p \\<Longrightarrow>\n            winning_strategy p \\<sigma> v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using merge_winning_strategies"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>.\n     strategy ?p \\<sigma> \\<and>\n     (\\<forall>v\\<in>winning_region ?p. winning_strategy ?p \\<sigma> v)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<lbrakk>strategy p \\<sigma>;\n         \\<And>v.\n            v \\<in> winning_region p \\<Longrightarrow>\n            winning_strategy p \\<sigma> v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  strategy p \\<sigma>\n  ?v \\<in> winning_region p \\<Longrightarrow> winning_strategy p \\<sigma> ?v\n\ngoal (1 subgoal):\n 1. v \\<in> winning_region p", "have \"winning_strategy p \\<sigma> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma> v", "using strategy_extends_backwards_VVpstar[OF v \\<sigma>(1)] \\<sigma>(2) w"], ["proof (prove)\nusing this:\n  (\\<And>w.\n      v \\<rightarrow> w \\<Longrightarrow>\n      winning_strategy p \\<sigma> w) \\<Longrightarrow>\n  winning_strategy p \\<sigma> v\n  ?v \\<in> winning_region p \\<Longrightarrow> winning_strategy p \\<sigma> ?v\n  v \\<rightarrow> ?w \\<Longrightarrow> ?w \\<in> winning_region p\n\ngoal (1 subgoal):\n 1. winning_strategy p \\<sigma> v", "by blast"], ["proof (state)\nthis:\n  winning_strategy p \\<sigma> v\n\ngoal (1 subgoal):\n 1. v \\<in> winning_region p", "thus ?thesis"], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma> v\n\ngoal (1 subgoal):\n 1. v \\<in> winning_region p", "unfolding winning_region_def"], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma> v\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> V.\n             \\<exists>\\<sigma>.\n                strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v}", "using v \\<sigma>(1)"], ["proof (prove)\nusing this:\n  winning_strategy p \\<sigma> v\n  v \\<in> VV p**\n  strategy p \\<sigma>\n\ngoal (1 subgoal):\n 1. v \\<in> {v \\<in> V.\n             \\<exists>\\<sigma>.\n                strategy p \\<sigma> \\<and> winning_strategy p \\<sigma> v}", "by blast"], ["proof (state)\nthis:\n  v \\<in> winning_region p\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>It immediately follows that removing a winning region cannot create new deadends.\\<close>"], ["", "lemma removing_winning_region_induces_no_deadends:\n  assumes \"v \\<in> V - winning_region p\" \"\\<not>deadend v\"\n  shows \"\\<exists>w \\<in> V - winning_region p. v\\<rightarrow>w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w\\<in>V - winning_region p. v \\<rightarrow> w", "using assms winning_region_extends_VVp winning_region_extends_VVpstar"], ["proof (prove)\nusing this:\n  v \\<in> V - winning_region p\n  \\<not> deadend v\n  \\<lbrakk>?v \\<in> VV ?p; ?v \\<rightarrow> ?w;\n   ?w \\<in> winning_region ?p\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> winning_region ?p\n  \\<lbrakk>?v \\<in> VV ?p**;\n   \\<And>w.\n      ?v \\<rightarrow> w \\<Longrightarrow>\n      w \\<in> winning_region ?p\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> winning_region ?p\n\ngoal (1 subgoal):\n 1. \\<exists>w\\<in>V - winning_region p. v \\<rightarrow> w", "by blast"], ["", "end \\<comment> \\<open>context ParityGame\\<close>"], ["", "end"]]}