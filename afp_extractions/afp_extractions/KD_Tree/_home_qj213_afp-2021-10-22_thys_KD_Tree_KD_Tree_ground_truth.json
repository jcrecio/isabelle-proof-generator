{"file_name": "/home/qj213/afp-2021-10-22/thys/KD_Tree/KD_Tree.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/KD_Tree", "problem_names": ["lemma dist_point_def:\n  fixes p\\<^sub>0 :: \"('k::finite) point\"\n  shows \"dist p\\<^sub>0 p\\<^sub>1 = sqrt (\\<Sum>k \\<in> UNIV. (p\\<^sub>0$k - p\\<^sub>1$k)\\<^sup>2)\"", "lemma invar_l:\n  \"invar (Node k v l r) \\<Longrightarrow> invar l\"", "lemma invar_r:\n  \"invar (Node k v l r) \\<Longrightarrow> invar r\"", "lemma invar_l_le_k:\n  \"invar (Node k v l r) \\<Longrightarrow> \\<forall>p \\<in> set_kdt l. p$k \\<le> v\"", "lemma invar_r_ge_k:\n  \"invar (Node k v l r) \\<Longrightarrow> \\<forall>p \\<in> set_kdt r. v < p$k\"", "lemma invar_set:\n  \"set_kdt (Node k v l r) = set_kdt l \\<union> set_kdt r\"", "lemma size_ge0[simp]:\n  \"0 < size_kdt kdt\"", "lemma eq_size_1[simp]:\n  \"size_kdt kdt = 1 \\<longleftrightarrow> (\\<exists>p. kdt = Leaf p)\"", "lemma eq_1_size[simp]:\n  \"1 = size_kdt kdt \\<longleftrightarrow> (\\<exists>p. kdt = Leaf p)\"", "lemma neq_Leaf_iff:\n  \"(\\<nexists>p. kdt = Leaf p) = (\\<exists>k v l r. kdt = Node k v l r)\"", "lemma eq_height_0[simp]:\n  \"height kdt = 0 \\<longleftrightarrow> (\\<exists>p. kdt = Leaf p)\"", "lemma eq_0_height[simp]:\n  \"0 = height kdt \\<longleftrightarrow> (\\<exists>p. kdt = Leaf p)\"", "lemma eq_min_height_0[simp]:\n  \"min_height kdt = 0 \\<longleftrightarrow> (\\<exists>p. kdt = Leaf p)\"", "lemma eq_0_min_height[simp]:\n  \"0 = min_height kdt \\<longleftrightarrow> (\\<exists>p. kdt = Leaf p)\"", "lemma size_height:\n  \"size_kdt kdt \\<le> 2 ^ height kdt\"", "lemma min_height_le_height:\n  \"min_height kdt \\<le> height kdt\"", "lemma min_height_size:\n  \"2 ^ min_height kdt \\<le> size_kdt kdt\"", "lemma complete_iff_height:\n  \"complete kdt \\<longleftrightarrow> (min_height kdt = height kdt)\"", "lemma size_if_complete:\n  \"complete kdt \\<Longrightarrow> size_kdt kdt = 2 ^ height kdt\"", "lemma complete_if_size_height:\n  \"size_kdt kdt = 2 ^ height kdt \\<Longrightarrow> complete kdt\"", "lemma complete_if_size_min_height:\n  \"size_kdt kdt = 2 ^ min_height kdt \\<Longrightarrow> complete kdt\"", "lemma complete_iff_size:\n  \"complete kdt \\<longleftrightarrow> size_kdt kdt = 2 ^ height kdt\"", "lemma size_height_if_incomplete:\n  \"\\<not> complete kdt \\<Longrightarrow> size_kdt kdt < 2 ^ height kdt\"", "lemma min_height_size_if_incomplete:\n  \"\\<not> complete kdt \\<Longrightarrow> 2 ^ min_height kdt < size_kdt kdt\"", "lemma balanced_subtreeL:\n  \"balanced (Node k v l r) \\<Longrightarrow> balanced l\"", "lemma balanced_subtreeR:\n  \"balanced (Node k v l r) \\<Longrightarrow> balanced r\"", "lemma balanced_optimal:\n  assumes \"balanced kdt\" \"size_kdt kdt \\<le> size_kdt kdt'\"\n  shows \"height kdt \\<le> height kdt'\"", "lemma size_height_log:\n  \"log 2 (size_kdt kdt) \\<le> height kdt\"", "lemma min_height_size_log:\n  \"min_height kdt \\<le> log 2 (size_kdt kdt)\"", "lemma size_log_if_complete:\n  \"complete kdt \\<Longrightarrow> height kdt = log 2 (size_kdt kdt)\"", "lemma min_height_size_log_if_incomplete:\n  \"\\<not> complete kdt \\<Longrightarrow> min_height kdt < log 2 (size_kdt kdt)\"", "lemma min_height_balanced:\n  assumes \"balanced kdt\"\n  shows \"min_height kdt = nat(floor(log 2 (size_kdt kdt)))\"", "lemma height_balanced:\n  assumes \"balanced kdt\"\n  shows \"height kdt = nat(ceiling(log 2 (size_kdt kdt)))\"", "lemma balanced_Node_if_wbal1:\n  assumes \"balanced l\" \"balanced r\" \"size_kdt l = size_kdt r + 1\"\n  shows \"balanced (Node k v l r)\"", "lemma balanced_sym:\n  \"balanced (Node k v l r) \\<Longrightarrow> balanced (Node k' v' r l)\"", "lemma balanced_Node_if_wbal2:\n  assumes \"balanced l\" \"balanced r\" \"abs(int(size_kdt l) - int(size_kdt r)) \\<le> 1\"\n  shows \"balanced (Node k v l r)\""], "translations": [["", "lemma dist_point_def:\n  fixes p\\<^sub>0 :: \"('k::finite) point\"\n  shows \"dist p\\<^sub>0 p\\<^sub>1 = sqrt (\\<Sum>k \\<in> UNIV. (p\\<^sub>0$k - p\\<^sub>1$k)\\<^sup>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist p\\<^sub>0 p\\<^sub>1 =\n    sqrt (\\<Sum>k\\<in>UNIV. (p\\<^sub>0 $ k - p\\<^sub>1 $ k)\\<^sup>2)", "unfolding dist_vec_def L2_set_def dist_real_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt\n     (\\<Sum>i\\<in>UNIV. \\<bar>p\\<^sub>0 $ i - p\\<^sub>1 $ i\\<bar>\\<^sup>2) =\n    sqrt (\\<Sum>k\\<in>UNIV. (p\\<^sub>0 $ k - p\\<^sub>1 $ k)\\<^sup>2)", "by simp"], ["", "datatype 'k kdt =\n  Leaf \"'k point\"\n| Node 'k real \"'k kdt\" \"'k kdt\""], ["", "subsection \\<open>Definition of the \\<open>k\\<close>-d Tree Invariant and Related Functions\\<close>"], ["", "fun set_kdt :: \"'k kdt \\<Rightarrow> ('k point) set\" where\n  \"set_kdt (Leaf p) = { p }\"\n| \"set_kdt (Node _ _ l r) = set_kdt l \\<union> set_kdt r\""], ["", "definition spread :: \"('k::finite) \\<Rightarrow> 'k point set \\<Rightarrow> real\" where\n  \"spread k P = (if P = {} then 0 else let V = (\\<lambda>p. p$k) ` P in Max V - Min V)\""], ["", "definition widest_spread_axis :: \"('k::finite) \\<Rightarrow> 'k set \\<Rightarrow> 'k point set \\<Rightarrow> bool\" where\n  \"widest_spread_axis k K ps \\<longleftrightarrow> (\\<forall>k' \\<in> K. spread k' ps \\<le> spread k ps)\""], ["", "fun invar :: \"('k::finite) kdt \\<Rightarrow> bool\" where\n  \"invar (Leaf p) \\<longleftrightarrow> True\"\n| \"invar (Node k v l r) \\<longleftrightarrow> (\\<forall>p \\<in> set_kdt l. p$k \\<le> v) \\<and> (\\<forall>p \\<in> set_kdt r. v < p$k) \\<and>\n    widest_spread_axis k UNIV (set_kdt l \\<union> set_kdt r) \\<and> invar l \\<and> invar r\""], ["", "fun size_kdt :: \"'k kdt \\<Rightarrow> nat\" where\n  \"size_kdt (Leaf _) = 1\"\n| \"size_kdt (Node _ _ l r) = size_kdt l + size_kdt r\""], ["", "fun height :: \"'k kdt \\<Rightarrow> nat\" where\n  \"height (Leaf _) = 0\"\n| \"height (Node _ _ l r) = max (height l) (height r) + 1\""], ["", "fun min_height :: \"'k kdt \\<Rightarrow> nat\" where\n  \"min_height (Leaf _) = 0\"\n| \"min_height (Node _ _ l r) = min (min_height l) (min_height r) + 1\""], ["", "definition balanced :: \"'k kdt \\<Rightarrow> bool\" where\n  \"balanced kdt \\<longleftrightarrow> height kdt - min_height kdt \\<le> 1\""], ["", "fun complete :: \"'k kdt \\<Rightarrow> bool\" where\n  \"complete (Leaf _) = True\"\n| \"complete (Node _ _ l r) \\<longleftrightarrow> complete l \\<and> complete r \\<and> height l = height r\""], ["", "lemma invar_l:\n  \"invar (Node k v l r) \\<Longrightarrow> invar l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar (Node k v l r) \\<Longrightarrow> invar l", "by simp"], ["", "lemma invar_r:\n  \"invar (Node k v l r) \\<Longrightarrow> invar r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar (Node k v l r) \\<Longrightarrow> invar r", "by simp"], ["", "lemma invar_l_le_k:\n  \"invar (Node k v l r) \\<Longrightarrow> \\<forall>p \\<in> set_kdt l. p$k \\<le> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar (Node k v l r) \\<Longrightarrow>\n    \\<forall>p\\<in>set_kdt l. p $ k \\<le> v", "by simp"], ["", "lemma invar_r_ge_k:\n  \"invar (Node k v l r) \\<Longrightarrow> \\<forall>p \\<in> set_kdt r. v < p$k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invar (Node k v l r) \\<Longrightarrow>\n    \\<forall>p\\<in>set_kdt r. v < p $ k", "by simp"], ["", "lemma invar_set:\n  \"set_kdt (Node k v l r) = set_kdt l \\<union> set_kdt r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_kdt (Node k v l r) = set_kdt l \\<union> set_kdt r", "by simp"], ["", "subsection \\<open>Lemmas adapted from \\<open>HOL-Library.Tree\\<close> to \\<open>k\\<close>-d Tree\\<close>"], ["", "lemma size_ge0[simp]:\n  \"0 < size_kdt kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < KD_Tree.size_kdt kdt", "by (induction kdt) auto"], ["", "lemma eq_size_1[simp]:\n  \"size_kdt kdt = 1 \\<longleftrightarrow> (\\<exists>p. kdt = Leaf p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (KD_Tree.size_kdt kdt = 1) = (\\<exists>p. kdt = Leaf p)", "apply (induction kdt)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. (KD_Tree.size_kdt (Leaf x) = 1) = (\\<exists>p. Leaf x = Leaf p)\n 2. \\<And>x1a x2 kdt1 kdt2.\n       \\<lbrakk>(KD_Tree.size_kdt kdt1 = 1) = (\\<exists>p. kdt1 = Leaf p);\n        (KD_Tree.size_kdt kdt2 = 1) = (\\<exists>p. kdt2 = Leaf p)\\<rbrakk>\n       \\<Longrightarrow> (KD_Tree.size_kdt (Node x1a x2 kdt1 kdt2) = 1) =\n                         (\\<exists>p. Node x1a x2 kdt1 kdt2 = Leaf p)", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>kdt2.\n       \\<lbrakk>KD_Tree.size_kdt kdt2 = 0;\n        \\<forall>p. kdt2 \\<noteq> Leaf p\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>kdt1.\n       \\<lbrakk>KD_Tree.size_kdt kdt1 = 0;\n        \\<forall>p. kdt1 \\<noteq> Leaf p\\<rbrakk>\n       \\<Longrightarrow> False", "using size_ge0 nat_less_le"], ["proof (prove)\nusing this:\n  0 < KD_Tree.size_kdt ?kdt\n  (?m < ?n) = (?m \\<le> ?n \\<and> ?m \\<noteq> ?n)\n\ngoal (2 subgoals):\n 1. \\<And>kdt2.\n       \\<lbrakk>KD_Tree.size_kdt kdt2 = 0;\n        \\<forall>p. kdt2 \\<noteq> Leaf p\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>kdt1.\n       \\<lbrakk>KD_Tree.size_kdt kdt1 = 0;\n        \\<forall>p. kdt1 \\<noteq> Leaf p\\<rbrakk>\n       \\<Longrightarrow> False", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eq_1_size[simp]:\n  \"1 = size_kdt kdt \\<longleftrightarrow> (\\<exists>p. kdt = Leaf p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 = KD_Tree.size_kdt kdt) = (\\<exists>p. kdt = Leaf p)", "using eq_size_1"], ["proof (prove)\nusing this:\n  (KD_Tree.size_kdt ?kdt = 1) = (\\<exists>p. ?kdt = Leaf p)\n\ngoal (1 subgoal):\n 1. (1 = KD_Tree.size_kdt kdt) = (\\<exists>p. kdt = Leaf p)", "by metis"], ["", "lemma neq_Leaf_iff:\n  \"(\\<nexists>p. kdt = Leaf p) = (\\<exists>k v l r. kdt = Node k v l r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<nexists>p. kdt = Leaf p) = (\\<exists>k v l r. kdt = Node k v l r)", "by (cases kdt) auto"], ["", "lemma eq_height_0[simp]:\n  \"height kdt = 0 \\<longleftrightarrow> (\\<exists>p. kdt = Leaf p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (height kdt = 0) = (\\<exists>p. kdt = Leaf p)", "by (cases kdt) auto"], ["", "lemma eq_0_height[simp]:\n  \"0 = height kdt \\<longleftrightarrow> (\\<exists>p. kdt = Leaf p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 = height kdt) = (\\<exists>p. kdt = Leaf p)", "by (cases kdt) auto"], ["", "lemma eq_min_height_0[simp]:\n  \"min_height kdt = 0 \\<longleftrightarrow> (\\<exists>p. kdt = Leaf p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (min_height kdt = 0) = (\\<exists>p. kdt = Leaf p)", "by (cases kdt) auto"], ["", "lemma eq_0_min_height[simp]:\n  \"0 = min_height kdt \\<longleftrightarrow> (\\<exists>p. kdt = Leaf p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 = min_height kdt) = (\\<exists>p. kdt = Leaf p)", "by (cases kdt) auto"], ["", "lemma size_height:\n  \"size_kdt kdt \\<le> 2 ^ height kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt \\<le> 2 ^ height kdt", "proof(induction kdt)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. KD_Tree.size_kdt (Leaf x) \\<le> 2 ^ height (Leaf x)\n 2. \\<And>x1a x2 kdt1 kdt2.\n       \\<lbrakk>KD_Tree.size_kdt kdt1 \\<le> 2 ^ height kdt1;\n        KD_Tree.size_kdt kdt2 \\<le> 2 ^ height kdt2\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.size_kdt (Node x1a x2 kdt1 kdt2)\n                         \\<le> 2 ^ height (Node x1a x2 kdt1 kdt2)", "case (Node k v l r)"], ["proof (state)\nthis:\n  KD_Tree.size_kdt l \\<le> 2 ^ height l\n  KD_Tree.size_kdt r \\<le> 2 ^ height r\n\ngoal (2 subgoals):\n 1. \\<And>x. KD_Tree.size_kdt (Leaf x) \\<le> 2 ^ height (Leaf x)\n 2. \\<And>x1a x2 kdt1 kdt2.\n       \\<lbrakk>KD_Tree.size_kdt kdt1 \\<le> 2 ^ height kdt1;\n        KD_Tree.size_kdt kdt2 \\<le> 2 ^ height kdt2\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.size_kdt (Node x1a x2 kdt1 kdt2)\n                         \\<le> 2 ^ height (Node x1a x2 kdt1 kdt2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "proof (cases \"height l \\<le> height r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)\n 2. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "case True"], ["proof (state)\nthis:\n  height l \\<le> height r\n\ngoal (2 subgoals):\n 1. height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)\n 2. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "have \"size_kdt (Node k v l r) = size_kdt l + size_kdt r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt (Node k v l r) =\n    KD_Tree.size_kdt l + KD_Tree.size_kdt r", "by simp"], ["proof (state)\nthis:\n  KD_Tree.size_kdt (Node k v l r) = KD_Tree.size_kdt l + KD_Tree.size_kdt r\n\ngoal (2 subgoals):\n 1. height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)\n 2. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "also"], ["proof (state)\nthis:\n  KD_Tree.size_kdt (Node k v l r) = KD_Tree.size_kdt l + KD_Tree.size_kdt r\n\ngoal (2 subgoals):\n 1. height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)\n 2. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "have \"\\<dots> \\<le> 2 ^ height l + 2 ^ height r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l + KD_Tree.size_kdt r\n    \\<le> 2 ^ height l + 2 ^ height r", "using Node.IH"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt l \\<le> 2 ^ height l\n  KD_Tree.size_kdt r \\<le> 2 ^ height r\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l + KD_Tree.size_kdt r\n    \\<le> 2 ^ height l + 2 ^ height r", "by arith"], ["proof (state)\nthis:\n  KD_Tree.size_kdt l + KD_Tree.size_kdt r \\<le> 2 ^ height l + 2 ^ height r\n\ngoal (2 subgoals):\n 1. height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)\n 2. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "also"], ["proof (state)\nthis:\n  KD_Tree.size_kdt l + KD_Tree.size_kdt r \\<le> 2 ^ height l + 2 ^ height r\n\ngoal (2 subgoals):\n 1. height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)\n 2. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "have \"\\<dots> \\<le> 2 ^ height r + 2 ^ height r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ height l + 2 ^ height r \\<le> 2 ^ height r + 2 ^ height r", "using True"], ["proof (prove)\nusing this:\n  height l \\<le> height r\n\ngoal (1 subgoal):\n 1. 2 ^ height l + 2 ^ height r \\<le> 2 ^ height r + 2 ^ height r", "by simp"], ["proof (state)\nthis:\n  2 ^ height l + 2 ^ height r \\<le> 2 ^ height r + 2 ^ height r\n\ngoal (2 subgoals):\n 1. height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)\n 2. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "also"], ["proof (state)\nthis:\n  2 ^ height l + 2 ^ height r \\<le> 2 ^ height r + 2 ^ height r\n\ngoal (2 subgoals):\n 1. height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)\n 2. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "have \"\\<dots> = 2 ^ height (Node k v l r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ height r + 2 ^ height r = 2 ^ height (Node k v l r)", "using True"], ["proof (prove)\nusing this:\n  height l \\<le> height r\n\ngoal (1 subgoal):\n 1. 2 ^ height r + 2 ^ height r = 2 ^ height (Node k v l r)", "by (auto simp: max_def mult_2)"], ["proof (state)\nthis:\n  2 ^ height r + 2 ^ height r = 2 ^ height (Node k v l r)\n\ngoal (2 subgoals):\n 1. height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)\n 2. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "finally"], ["proof (chain)\npicking this:\n  KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "show ?thesis"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "."], ["proof (state)\nthis:\n  KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)\n\ngoal (1 subgoal):\n 1. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "case False"], ["proof (state)\nthis:\n  \\<not> height l \\<le> height r\n\ngoal (1 subgoal):\n 1. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "have \"size_kdt (Node k v l r) = size_kdt l + size_kdt r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt (Node k v l r) =\n    KD_Tree.size_kdt l + KD_Tree.size_kdt r", "by simp"], ["proof (state)\nthis:\n  KD_Tree.size_kdt (Node k v l r) = KD_Tree.size_kdt l + KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "also"], ["proof (state)\nthis:\n  KD_Tree.size_kdt (Node k v l r) = KD_Tree.size_kdt l + KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "have \"\\<dots> \\<le> 2 ^ height l + 2 ^ height r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l + KD_Tree.size_kdt r\n    \\<le> 2 ^ height l + 2 ^ height r", "using Node.IH"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt l \\<le> 2 ^ height l\n  KD_Tree.size_kdt r \\<le> 2 ^ height r\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l + KD_Tree.size_kdt r\n    \\<le> 2 ^ height l + 2 ^ height r", "by arith"], ["proof (state)\nthis:\n  KD_Tree.size_kdt l + KD_Tree.size_kdt r \\<le> 2 ^ height l + 2 ^ height r\n\ngoal (1 subgoal):\n 1. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "also"], ["proof (state)\nthis:\n  KD_Tree.size_kdt l + KD_Tree.size_kdt r \\<le> 2 ^ height l + 2 ^ height r\n\ngoal (1 subgoal):\n 1. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "have \"\\<dots> \\<le> 2 ^ height l + 2 ^ height l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ height l + 2 ^ height r \\<le> 2 ^ height l + 2 ^ height l", "using False"], ["proof (prove)\nusing this:\n  \\<not> height l \\<le> height r\n\ngoal (1 subgoal):\n 1. 2 ^ height l + 2 ^ height r \\<le> 2 ^ height l + 2 ^ height l", "by simp"], ["proof (state)\nthis:\n  2 ^ height l + 2 ^ height r \\<le> 2 ^ height l + 2 ^ height l\n\ngoal (1 subgoal):\n 1. \\<not> height l \\<le> height r \\<Longrightarrow>\n    KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "finally"], ["proof (chain)\npicking this:\n  KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height l + 2 ^ height l", "show ?thesis"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height l + 2 ^ height l\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "using False"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height l + 2 ^ height l\n  \\<not> height l \\<le> height r\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)", "by (auto simp: max_def mult_2)"], ["proof (state)\nthis:\n  KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  KD_Tree.size_kdt (Node k v l r) \\<le> 2 ^ height (Node k v l r)\n\ngoal (1 subgoal):\n 1. \\<And>x. KD_Tree.size_kdt (Leaf x) \\<le> 2 ^ height (Leaf x)", "qed simp"], ["", "lemma min_height_le_height:\n  \"min_height kdt \\<le> height kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_height kdt \\<le> height kdt", "by (induction kdt) auto"], ["", "lemma min_height_size:\n  \"2 ^ min_height kdt \\<le> size_kdt kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ min_height kdt \\<le> KD_Tree.size_kdt kdt", "proof(induction kdt)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. 2 ^ min_height (Leaf x) \\<le> KD_Tree.size_kdt (Leaf x)\n 2. \\<And>x1a x2 kdt1 kdt2.\n       \\<lbrakk>2 ^ min_height kdt1 \\<le> KD_Tree.size_kdt kdt1;\n        2 ^ min_height kdt2 \\<le> KD_Tree.size_kdt kdt2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ min_height (Node x1a x2 kdt1 kdt2)\n                         \\<le> KD_Tree.size_kdt (Node x1a x2 kdt1 kdt2)", "case (Node k v l r)"], ["proof (state)\nthis:\n  2 ^ min_height l \\<le> KD_Tree.size_kdt l\n  2 ^ min_height r \\<le> KD_Tree.size_kdt r\n\ngoal (2 subgoals):\n 1. \\<And>x. 2 ^ min_height (Leaf x) \\<le> KD_Tree.size_kdt (Leaf x)\n 2. \\<And>x1a x2 kdt1 kdt2.\n       \\<lbrakk>2 ^ min_height kdt1 \\<le> KD_Tree.size_kdt kdt1;\n        2 ^ min_height kdt2 \\<le> KD_Tree.size_kdt kdt2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ min_height (Node x1a x2 kdt1 kdt2)\n                         \\<le> KD_Tree.size_kdt (Node x1a x2 kdt1 kdt2)", "have \"(2::nat) ^ min_height (Node k v l r) \\<le> 2 ^ min_height l + 2 ^ min_height r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ min_height (Node k v l r) \\<le> 2 ^ min_height l + 2 ^ min_height r", "by (simp add: min_def)"], ["proof (state)\nthis:\n  2 ^ min_height (Node k v l r) \\<le> 2 ^ min_height l + 2 ^ min_height r\n\ngoal (2 subgoals):\n 1. \\<And>x. 2 ^ min_height (Leaf x) \\<le> KD_Tree.size_kdt (Leaf x)\n 2. \\<And>x1a x2 kdt1 kdt2.\n       \\<lbrakk>2 ^ min_height kdt1 \\<le> KD_Tree.size_kdt kdt1;\n        2 ^ min_height kdt2 \\<le> KD_Tree.size_kdt kdt2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ min_height (Node x1a x2 kdt1 kdt2)\n                         \\<le> KD_Tree.size_kdt (Node x1a x2 kdt1 kdt2)", "also"], ["proof (state)\nthis:\n  2 ^ min_height (Node k v l r) \\<le> 2 ^ min_height l + 2 ^ min_height r\n\ngoal (2 subgoals):\n 1. \\<And>x. 2 ^ min_height (Leaf x) \\<le> KD_Tree.size_kdt (Leaf x)\n 2. \\<And>x1a x2 kdt1 kdt2.\n       \\<lbrakk>2 ^ min_height kdt1 \\<le> KD_Tree.size_kdt kdt1;\n        2 ^ min_height kdt2 \\<le> KD_Tree.size_kdt kdt2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ min_height (Node x1a x2 kdt1 kdt2)\n                         \\<le> KD_Tree.size_kdt (Node x1a x2 kdt1 kdt2)", "have \"\\<dots> \\<le> size_kdt (Node k v l r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ min_height l + 2 ^ min_height r\n    \\<le> KD_Tree.size_kdt (Node k v l r)", "using Node.IH"], ["proof (prove)\nusing this:\n  2 ^ min_height l \\<le> KD_Tree.size_kdt l\n  2 ^ min_height r \\<le> KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. 2 ^ min_height l + 2 ^ min_height r\n    \\<le> KD_Tree.size_kdt (Node k v l r)", "by simp"], ["proof (state)\nthis:\n  2 ^ min_height l + 2 ^ min_height r \\<le> KD_Tree.size_kdt (Node k v l r)\n\ngoal (2 subgoals):\n 1. \\<And>x. 2 ^ min_height (Leaf x) \\<le> KD_Tree.size_kdt (Leaf x)\n 2. \\<And>x1a x2 kdt1 kdt2.\n       \\<lbrakk>2 ^ min_height kdt1 \\<le> KD_Tree.size_kdt kdt1;\n        2 ^ min_height kdt2 \\<le> KD_Tree.size_kdt kdt2\\<rbrakk>\n       \\<Longrightarrow> 2 ^ min_height (Node x1a x2 kdt1 kdt2)\n                         \\<le> KD_Tree.size_kdt (Node x1a x2 kdt1 kdt2)", "finally"], ["proof (chain)\npicking this:\n  2 ^ min_height (Node k v l r) \\<le> KD_Tree.size_kdt (Node k v l r)", "show ?case"], ["proof (prove)\nusing this:\n  2 ^ min_height (Node k v l r) \\<le> KD_Tree.size_kdt (Node k v l r)\n\ngoal (1 subgoal):\n 1. 2 ^ min_height (Node k v l r) \\<le> KD_Tree.size_kdt (Node k v l r)", "."], ["proof (state)\nthis:\n  2 ^ min_height (Node k v l r) \\<le> KD_Tree.size_kdt (Node k v l r)\n\ngoal (1 subgoal):\n 1. \\<And>x. 2 ^ min_height (Leaf x) \\<le> KD_Tree.size_kdt (Leaf x)", "qed simp"], ["", "lemma complete_iff_height:\n  \"complete kdt \\<longleftrightarrow> (min_height kdt = height kdt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.complete kdt = (min_height kdt = height kdt)", "apply (induction kdt)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       KD_Tree.complete (Leaf x) = (min_height (Leaf x) = height (Leaf x))\n 2. \\<And>x1a x2 kdt1 kdt2.\n       \\<lbrakk>KD_Tree.complete kdt1 = (min_height kdt1 = height kdt1);\n        KD_Tree.complete kdt2 = (min_height kdt2 = height kdt2)\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete (Node x1a x2 kdt1 kdt2) =\n                         (min_height (Node x1a x2 kdt1 kdt2) =\n                          height (Node x1a x2 kdt1 kdt2))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 kdt1 kdt2.\n       \\<lbrakk>KD_Tree.complete kdt1 = (min_height kdt1 = height kdt1);\n        KD_Tree.complete kdt2 = (min_height kdt2 = height kdt2)\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete (Node x1a x2 kdt1 kdt2) =\n                         (min_height (Node x1a x2 kdt1 kdt2) =\n                          height (Node x1a x2 kdt1 kdt2))", "apply (simp add: min_def max_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>kdt1 kdt2.\n       \\<lbrakk>KD_Tree.complete kdt1 = (min_height kdt1 = height kdt1);\n        KD_Tree.complete kdt2 = (min_height kdt2 = height kdt2)\\<rbrakk>\n       \\<Longrightarrow> (min_height kdt1\n                          \\<le> min_height kdt2 \\<longrightarrow>\n                          (height kdt1 \\<le> height kdt2 \\<longrightarrow>\n                           (min_height kdt1 = height kdt1 \\<and>\n                            min_height kdt2 = height kdt2 \\<and>\n                            height kdt1 = height kdt2) =\n                           (min_height kdt1 = height kdt2)) \\<and>\n                          (\\<not> height kdt1\n                                  \\<le> height kdt2 \\<longrightarrow>\n                           min_height kdt1 \\<noteq> height kdt1)) \\<and>\n                         (\\<not> min_height kdt1\n                                 \\<le> min_height kdt2 \\<longrightarrow>\n                          (height kdt1 \\<le> height kdt2 \\<longrightarrow>\n                           (min_height kdt1 = height kdt1 \\<and>\n                            min_height kdt2 = height kdt2 \\<and>\n                            height kdt1 = height kdt2) =\n                           (min_height kdt2 = height kdt2)) \\<and>\n                          (\\<not> height kdt1\n                                  \\<le> height kdt2 \\<longrightarrow>\n                           min_height kdt2 \\<noteq> height kdt1))", "by (metis le_antisym le_trans min_height_le_height)"], ["", "lemma size_if_complete:\n  \"complete kdt \\<Longrightarrow> size_kdt kdt = 2 ^ height kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.complete kdt \\<Longrightarrow>\n    KD_Tree.size_kdt kdt = 2 ^ height kdt", "by (induction kdt) auto"], ["", "lemma complete_if_size_height:\n  \"size_kdt kdt = 2 ^ height kdt \\<Longrightarrow> complete kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt = 2 ^ height kdt \\<Longrightarrow>\n    KD_Tree.complete kdt", "proof (induction \"height kdt\" arbitrary: kdt)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>kdt.\n       \\<lbrakk>0 = height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt\n 2. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = height kdt; KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "case 0"], ["proof (state)\nthis:\n  0 = height kdt\n  KD_Tree.size_kdt kdt = 2 ^ height kdt\n\ngoal (2 subgoals):\n 1. \\<And>kdt.\n       \\<lbrakk>0 = height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt\n 2. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = height kdt; KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "thus ?case"], ["proof (prove)\nusing this:\n  0 = height kdt\n  KD_Tree.size_kdt kdt = 2 ^ height kdt\n\ngoal (1 subgoal):\n 1. KD_Tree.complete kdt", "by auto"], ["proof (state)\nthis:\n  KD_Tree.complete kdt\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = height kdt; KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = height kdt; KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "case (Suc h)"], ["proof (state)\nthis:\n  \\<lbrakk>h = height ?kdt; KD_Tree.size_kdt ?kdt = 2 ^ height ?kdt\\<rbrakk>\n  \\<Longrightarrow> KD_Tree.complete ?kdt\n  Suc h = height kdt\n  KD_Tree.size_kdt kdt = 2 ^ height kdt\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = height kdt; KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "hence \"\\<nexists>p. kdt = Leaf p\""], ["proof (prove)\nusing this:\n  \\<lbrakk>h = height ?kdt; KD_Tree.size_kdt ?kdt = 2 ^ height ?kdt\\<rbrakk>\n  \\<Longrightarrow> KD_Tree.complete ?kdt\n  Suc h = height kdt\n  KD_Tree.size_kdt kdt = 2 ^ height kdt\n\ngoal (1 subgoal):\n 1. \\<nexists>p. kdt = Leaf p", "by auto"], ["proof (state)\nthis:\n  \\<nexists>p. kdt = Leaf p\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = height kdt; KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "then"], ["proof (chain)\npicking this:\n  \\<nexists>p. kdt = Leaf p", "obtain k v l r where [simp]: \"kdt = Node k v l r\""], ["proof (prove)\nusing this:\n  \\<nexists>p. kdt = Leaf p\n\ngoal (1 subgoal):\n 1. (\\<And>k v l r.\n        kdt = Node k v l r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using neq_Leaf_iff"], ["proof (prove)\nusing this:\n  \\<nexists>p. kdt = Leaf p\n  (\\<nexists>p. ?kdt = Leaf p) = (\\<exists>k v l r. ?kdt = Node k v l r)\n\ngoal (1 subgoal):\n 1. (\\<And>k v l r.\n        kdt = Node k v l r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  kdt = Node k v l r\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = height kdt; KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "have 1: \"height l \\<le> h\" and 2: \"height r \\<le> h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. height l \\<le> h &&& height r \\<le> h", "using Suc(2)"], ["proof (prove)\nusing this:\n  Suc h = height kdt\n\ngoal (1 subgoal):\n 1. height l \\<le> h &&& height r \\<le> h", "by(auto)"], ["proof (state)\nthis:\n  height l \\<le> h\n  height r \\<le> h\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = height kdt; KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "have 3: \"\\<not> height l < h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> height l < h", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. height l < h \\<Longrightarrow> False", "assume 0: \"height l < h\""], ["proof (state)\nthis:\n  height l < h\n\ngoal (1 subgoal):\n 1. height l < h \\<Longrightarrow> False", "have \"size_kdt kdt = size_kdt l + size_kdt r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt = KD_Tree.size_kdt l + KD_Tree.size_kdt r", "by simp"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt = KD_Tree.size_kdt l + KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. height l < h \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt = KD_Tree.size_kdt l + KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. height l < h \\<Longrightarrow> False", "have \"\\<dots> \\<le> 2 ^ height l + 2 ^ height r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l + KD_Tree.size_kdt r\n    \\<le> 2 ^ height l + 2 ^ height r", "using size_height[of l] size_height[of r]"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt l \\<le> 2 ^ height l\n  KD_Tree.size_kdt r \\<le> 2 ^ height r\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l + KD_Tree.size_kdt r\n    \\<le> 2 ^ height l + 2 ^ height r", "by arith"], ["proof (state)\nthis:\n  KD_Tree.size_kdt l + KD_Tree.size_kdt r \\<le> 2 ^ height l + 2 ^ height r\n\ngoal (1 subgoal):\n 1. height l < h \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  KD_Tree.size_kdt l + KD_Tree.size_kdt r \\<le> 2 ^ height l + 2 ^ height r\n\ngoal (1 subgoal):\n 1. height l < h \\<Longrightarrow> False", "have \" \\<dots> < 2 ^ h + 2 ^ height r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ height l + 2 ^ height r < 2 ^ h + 2 ^ height r", "using 0"], ["proof (prove)\nusing this:\n  height l < h\n\ngoal (1 subgoal):\n 1. 2 ^ height l + 2 ^ height r < 2 ^ h + 2 ^ height r", "by (simp)"], ["proof (state)\nthis:\n  2 ^ height l + 2 ^ height r < 2 ^ h + 2 ^ height r\n\ngoal (1 subgoal):\n 1. height l < h \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  2 ^ height l + 2 ^ height r < 2 ^ h + 2 ^ height r\n\ngoal (1 subgoal):\n 1. height l < h \\<Longrightarrow> False", "have \" \\<dots> \\<le> 2 ^ h + 2 ^ h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ h + 2 ^ height r \\<le> 2 ^ h + 2 ^ h", "using 2"], ["proof (prove)\nusing this:\n  height r \\<le> h\n\ngoal (1 subgoal):\n 1. 2 ^ h + 2 ^ height r \\<le> 2 ^ h + 2 ^ h", "by (simp)"], ["proof (state)\nthis:\n  2 ^ h + 2 ^ height r \\<le> 2 ^ h + 2 ^ h\n\ngoal (1 subgoal):\n 1. height l < h \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  2 ^ h + 2 ^ height r \\<le> 2 ^ h + 2 ^ h\n\ngoal (1 subgoal):\n 1. height l < h \\<Longrightarrow> False", "have \"\\<dots> = 2 ^ (Suc h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ h + 2 ^ h = 2 ^ Suc h", "by (simp)"], ["proof (state)\nthis:\n  2 ^ h + 2 ^ h = 2 ^ Suc h\n\ngoal (1 subgoal):\n 1. height l < h \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  2 ^ h + 2 ^ h = 2 ^ Suc h\n\ngoal (1 subgoal):\n 1. height l < h \\<Longrightarrow> False", "have \"\\<dots> = size_kdt kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ Suc h = KD_Tree.size_kdt kdt", "using Suc(2,3)"], ["proof (prove)\nusing this:\n  Suc h = height kdt\n  KD_Tree.size_kdt kdt = 2 ^ height kdt\n\ngoal (1 subgoal):\n 1. 2 ^ Suc h = KD_Tree.size_kdt kdt", "by simp"], ["proof (state)\nthis:\n  2 ^ Suc h = KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. height l < h \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  KD_Tree.size_kdt kdt < KD_Tree.size_kdt kdt", "have \"size_kdt kdt < size_kdt kdt\""], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt kdt < KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt < KD_Tree.size_kdt kdt", "."], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt < KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. height l < h \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt kdt < KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. False", "by (simp)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> height l < h\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = height kdt; KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "have 4: \"\\<not> height r < h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> height r < h", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. height r < h \\<Longrightarrow> False", "assume 0: \"height r < h\""], ["proof (state)\nthis:\n  height r < h\n\ngoal (1 subgoal):\n 1. height r < h \\<Longrightarrow> False", "have \"size_kdt kdt = size_kdt l + size_kdt r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt = KD_Tree.size_kdt l + KD_Tree.size_kdt r", "by simp"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt = KD_Tree.size_kdt l + KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. height r < h \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt = KD_Tree.size_kdt l + KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. height r < h \\<Longrightarrow> False", "have \"\\<dots> \\<le> 2 ^ height l + 2 ^ height r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l + KD_Tree.size_kdt r\n    \\<le> 2 ^ height l + 2 ^ height r", "using size_height[of l] size_height[of r]"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt l \\<le> 2 ^ height l\n  KD_Tree.size_kdt r \\<le> 2 ^ height r\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l + KD_Tree.size_kdt r\n    \\<le> 2 ^ height l + 2 ^ height r", "by arith"], ["proof (state)\nthis:\n  KD_Tree.size_kdt l + KD_Tree.size_kdt r \\<le> 2 ^ height l + 2 ^ height r\n\ngoal (1 subgoal):\n 1. height r < h \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  KD_Tree.size_kdt l + KD_Tree.size_kdt r \\<le> 2 ^ height l + 2 ^ height r\n\ngoal (1 subgoal):\n 1. height r < h \\<Longrightarrow> False", "have \" \\<dots> < 2 ^ height l + 2 ^ h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ height l + 2 ^ height r < 2 ^ height l + 2 ^ h", "using 0"], ["proof (prove)\nusing this:\n  height r < h\n\ngoal (1 subgoal):\n 1. 2 ^ height l + 2 ^ height r < 2 ^ height l + 2 ^ h", "by (simp)"], ["proof (state)\nthis:\n  2 ^ height l + 2 ^ height r < 2 ^ height l + 2 ^ h\n\ngoal (1 subgoal):\n 1. height r < h \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  2 ^ height l + 2 ^ height r < 2 ^ height l + 2 ^ h\n\ngoal (1 subgoal):\n 1. height r < h \\<Longrightarrow> False", "have \" \\<dots> \\<le> 2 ^ h + 2 ^ h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ height l + 2 ^ h \\<le> 2 ^ h + 2 ^ h", "using 1"], ["proof (prove)\nusing this:\n  height l \\<le> h\n\ngoal (1 subgoal):\n 1. 2 ^ height l + 2 ^ h \\<le> 2 ^ h + 2 ^ h", "by (simp)"], ["proof (state)\nthis:\n  2 ^ height l + 2 ^ h \\<le> 2 ^ h + 2 ^ h\n\ngoal (1 subgoal):\n 1. height r < h \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  2 ^ height l + 2 ^ h \\<le> 2 ^ h + 2 ^ h\n\ngoal (1 subgoal):\n 1. height r < h \\<Longrightarrow> False", "have \"\\<dots> = 2 ^ (Suc h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ h + 2 ^ h = 2 ^ Suc h", "by (simp)"], ["proof (state)\nthis:\n  2 ^ h + 2 ^ h = 2 ^ Suc h\n\ngoal (1 subgoal):\n 1. height r < h \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  2 ^ h + 2 ^ h = 2 ^ Suc h\n\ngoal (1 subgoal):\n 1. height r < h \\<Longrightarrow> False", "have \"\\<dots> = size_kdt kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ Suc h = KD_Tree.size_kdt kdt", "using Suc(2,3)"], ["proof (prove)\nusing this:\n  Suc h = height kdt\n  KD_Tree.size_kdt kdt = 2 ^ height kdt\n\ngoal (1 subgoal):\n 1. 2 ^ Suc h = KD_Tree.size_kdt kdt", "by simp"], ["proof (state)\nthis:\n  2 ^ Suc h = KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. height r < h \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  KD_Tree.size_kdt kdt < KD_Tree.size_kdt kdt", "have \"size_kdt kdt < size_kdt kdt\""], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt kdt < KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt < KD_Tree.size_kdt kdt", "."], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt < KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. height r < h \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt kdt < KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. False", "by (simp)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> height r < h\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = height kdt; KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "from 1 2 3 4"], ["proof (chain)\npicking this:\n  height l \\<le> h\n  height r \\<le> h\n  \\<not> height l < h\n  \\<not> height r < h", "have *: \"height l = h\" \"height r = h\""], ["proof (prove)\nusing this:\n  height l \\<le> h\n  height r \\<le> h\n  \\<not> height l < h\n  \\<not> height r < h\n\ngoal (1 subgoal):\n 1. height l = h &&& height r = h", "by linarith+"], ["proof (state)\nthis:\n  height l = h\n  height r = h\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = height kdt; KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "hence \"size_kdt l = 2 ^ height l\" \"size_kdt r = 2 ^ height r\""], ["proof (prove)\nusing this:\n  height l = h\n  height r = h\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l = 2 ^ height l &&& KD_Tree.size_kdt r = 2 ^ height r", "using Suc(3) size_height[of l] size_height[of r]"], ["proof (prove)\nusing this:\n  height l = h\n  height r = h\n  KD_Tree.size_kdt kdt = 2 ^ height kdt\n  KD_Tree.size_kdt l \\<le> 2 ^ height l\n  KD_Tree.size_kdt r \\<le> 2 ^ height r\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l = 2 ^ height l &&& KD_Tree.size_kdt r = 2 ^ height r", "by (auto)"], ["proof (state)\nthis:\n  KD_Tree.size_kdt l = 2 ^ height l\n  KD_Tree.size_kdt r = 2 ^ height r\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = height kdt; KD_Tree.size_kdt kdt = 2 ^ height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "with * Suc(1)"], ["proof (chain)\npicking this:\n  height l = h\n  height r = h\n  \\<lbrakk>h = height ?kdt; KD_Tree.size_kdt ?kdt = 2 ^ height ?kdt\\<rbrakk>\n  \\<Longrightarrow> KD_Tree.complete ?kdt\n  KD_Tree.size_kdt l = 2 ^ height l\n  KD_Tree.size_kdt r = 2 ^ height r", "show ?case"], ["proof (prove)\nusing this:\n  height l = h\n  height r = h\n  \\<lbrakk>h = height ?kdt; KD_Tree.size_kdt ?kdt = 2 ^ height ?kdt\\<rbrakk>\n  \\<Longrightarrow> KD_Tree.complete ?kdt\n  KD_Tree.size_kdt l = 2 ^ height l\n  KD_Tree.size_kdt r = 2 ^ height r\n\ngoal (1 subgoal):\n 1. KD_Tree.complete kdt", "by simp"], ["proof (state)\nthis:\n  KD_Tree.complete kdt\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complete_if_size_min_height:\n  \"size_kdt kdt = 2 ^ min_height kdt \\<Longrightarrow> complete kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt = 2 ^ min_height kdt \\<Longrightarrow>\n    KD_Tree.complete kdt", "proof (induct \"min_height kdt\" arbitrary: kdt)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>kdt.\n       \\<lbrakk>0 = min_height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt\n 2. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = min_height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = min_height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "case 0"], ["proof (state)\nthis:\n  0 = min_height kdt\n  KD_Tree.size_kdt kdt = 2 ^ min_height kdt\n\ngoal (2 subgoals):\n 1. \\<And>kdt.\n       \\<lbrakk>0 = min_height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt\n 2. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = min_height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = min_height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "thus ?case"], ["proof (prove)\nusing this:\n  0 = min_height kdt\n  KD_Tree.size_kdt kdt = 2 ^ min_height kdt\n\ngoal (1 subgoal):\n 1. KD_Tree.complete kdt", "by auto"], ["proof (state)\nthis:\n  KD_Tree.complete kdt\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = min_height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = min_height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = min_height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = min_height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "case (Suc h)"], ["proof (state)\nthis:\n  \\<lbrakk>h = min_height ?kdt;\n   KD_Tree.size_kdt ?kdt = 2 ^ min_height ?kdt\\<rbrakk>\n  \\<Longrightarrow> KD_Tree.complete ?kdt\n  Suc h = min_height kdt\n  KD_Tree.size_kdt kdt = 2 ^ min_height kdt\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = min_height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = min_height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "hence \"\\<nexists>p. kdt = Leaf p\""], ["proof (prove)\nusing this:\n  \\<lbrakk>h = min_height ?kdt;\n   KD_Tree.size_kdt ?kdt = 2 ^ min_height ?kdt\\<rbrakk>\n  \\<Longrightarrow> KD_Tree.complete ?kdt\n  Suc h = min_height kdt\n  KD_Tree.size_kdt kdt = 2 ^ min_height kdt\n\ngoal (1 subgoal):\n 1. \\<nexists>p. kdt = Leaf p", "by auto"], ["proof (state)\nthis:\n  \\<nexists>p. kdt = Leaf p\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = min_height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = min_height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "then"], ["proof (chain)\npicking this:\n  \\<nexists>p. kdt = Leaf p", "obtain k v l r where [simp]: \"kdt = Node k v l r\""], ["proof (prove)\nusing this:\n  \\<nexists>p. kdt = Leaf p\n\ngoal (1 subgoal):\n 1. (\\<And>k v l r.\n        kdt = Node k v l r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using neq_Leaf_iff"], ["proof (prove)\nusing this:\n  \\<nexists>p. kdt = Leaf p\n  (\\<nexists>p. ?kdt = Leaf p) = (\\<exists>k v l r. ?kdt = Node k v l r)\n\ngoal (1 subgoal):\n 1. (\\<And>k v l r.\n        kdt = Node k v l r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  kdt = Node k v l r\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = min_height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = min_height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "have 1: \"h \\<le> min_height l\" and 2: \"h \\<le> min_height r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<le> min_height l &&& h \\<le> min_height r", "using Suc(2)"], ["proof (prove)\nusing this:\n  Suc h = min_height kdt\n\ngoal (1 subgoal):\n 1. h \\<le> min_height l &&& h \\<le> min_height r", "by (auto)"], ["proof (state)\nthis:\n  h \\<le> min_height l\n  h \\<le> min_height r\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = min_height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = min_height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "have 3: \"\\<not> h < min_height l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> h < min_height l", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. h < min_height l \\<Longrightarrow> False", "assume 0: \"h < min_height l\""], ["proof (state)\nthis:\n  h < min_height l\n\ngoal (1 subgoal):\n 1. h < min_height l \\<Longrightarrow> False", "have \"size_kdt kdt = size_kdt l + size_kdt r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt = KD_Tree.size_kdt l + KD_Tree.size_kdt r", "by simp"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt = KD_Tree.size_kdt l + KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. h < min_height l \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt = KD_Tree.size_kdt l + KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. h < min_height l \\<Longrightarrow> False", "note min_height_size[of l]"], ["proof (state)\nthis:\n  2 ^ min_height l \\<le> KD_Tree.size_kdt l\n\ngoal (1 subgoal):\n 1. h < min_height l \\<Longrightarrow> False", "also(xtrans)"], ["proof (state)\nthis:\n  2 ^ min_height l \\<le> KD_Tree.size_kdt l\n\ngoal (1 subgoal):\n 1. h < min_height l \\<Longrightarrow> False", "note min_height_size[of r]"], ["proof (state)\nthis:\n  2 ^ min_height r \\<le> KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. h < min_height l \\<Longrightarrow> False", "also(xtrans)"], ["proof (state)\nthis:\n  2 ^ min_height r \\<le> KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. h < min_height l \\<Longrightarrow> False", "have \"(2::nat) ^ min_height l > 2 ^ h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ h < 2 ^ min_height l", "using 0"], ["proof (prove)\nusing this:\n  h < min_height l\n\ngoal (1 subgoal):\n 1. 2 ^ h < 2 ^ min_height l", "by (simp add: diff_less_mono)"], ["proof (state)\nthis:\n  2 ^ h < 2 ^ min_height l\n\ngoal (1 subgoal):\n 1. h < min_height l \\<Longrightarrow> False", "also(xtrans)"], ["proof (state)\nthis:\n  2 ^ h < 2 ^ min_height l\n\ngoal (1 subgoal):\n 1. h < min_height l \\<Longrightarrow> False", "have \"(2::nat) ^ min_height r \\<ge> 2 ^ h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ h \\<le> 2 ^ min_height r", "using 2"], ["proof (prove)\nusing this:\n  h \\<le> min_height r\n\ngoal (1 subgoal):\n 1. 2 ^ h \\<le> 2 ^ min_height r", "by simp"], ["proof (state)\nthis:\n  2 ^ h \\<le> 2 ^ min_height r\n\ngoal (1 subgoal):\n 1. h < min_height l \\<Longrightarrow> False", "also(xtrans)"], ["proof (state)\nthis:\n  2 ^ h \\<le> 2 ^ min_height r\n\ngoal (1 subgoal):\n 1. h < min_height l \\<Longrightarrow> False", "have \"(2::nat) ^ h + 2 ^ h = 2 ^ (Suc h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ h + 2 ^ h = 2 ^ Suc h", "by (simp)"], ["proof (state)\nthis:\n  2 ^ h + 2 ^ h = 2 ^ Suc h\n\ngoal (1 subgoal):\n 1. h < min_height l \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  2 ^ h + 2 ^ h = 2 ^ Suc h\n\ngoal (1 subgoal):\n 1. h < min_height l \\<Longrightarrow> False", "have \"\\<dots> = size_kdt kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ Suc h = KD_Tree.size_kdt kdt", "using Suc(2,3)"], ["proof (prove)\nusing this:\n  Suc h = min_height kdt\n  KD_Tree.size_kdt kdt = 2 ^ min_height kdt\n\ngoal (1 subgoal):\n 1. 2 ^ Suc h = KD_Tree.size_kdt kdt", "by simp"], ["proof (state)\nthis:\n  2 ^ Suc h = KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. h < min_height l \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y.\n              y \\<le> x \\<Longrightarrow>\n              y + KD_Tree.size_kdt r \\<le> x + KD_Tree.size_kdt r;\n   \\<And>x y.\n      y \\<le> x \\<Longrightarrow>\n      2 ^ min_height l + y \\<le> 2 ^ min_height l + x;\n   \\<And>x y.\n      y < x \\<Longrightarrow> y + 2 ^ min_height r < x + 2 ^ min_height r;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> 2 ^ h + y \\<le> 2 ^ h + x\\<rbrakk>\n  \\<Longrightarrow> KD_Tree.size_kdt kdt < KD_Tree.size_kdt kdt", "show False"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y.\n              y \\<le> x \\<Longrightarrow>\n              y + KD_Tree.size_kdt r \\<le> x + KD_Tree.size_kdt r;\n   \\<And>x y.\n      y \\<le> x \\<Longrightarrow>\n      2 ^ min_height l + y \\<le> 2 ^ min_height l + x;\n   \\<And>x y.\n      y < x \\<Longrightarrow> y + 2 ^ min_height r < x + 2 ^ min_height r;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> 2 ^ h + y \\<le> 2 ^ h + x\\<rbrakk>\n  \\<Longrightarrow> KD_Tree.size_kdt kdt < KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. False", "by (simp add: diff_le_mono)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> h < min_height l\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = min_height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = min_height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "have 4: \"\\<not> h < min_height r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> h < min_height r", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. h < min_height r \\<Longrightarrow> False", "assume 0: \"h < min_height r\""], ["proof (state)\nthis:\n  h < min_height r\n\ngoal (1 subgoal):\n 1. h < min_height r \\<Longrightarrow> False", "have \"size_kdt kdt = size_kdt l + size_kdt r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt = KD_Tree.size_kdt l + KD_Tree.size_kdt r", "by simp"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt = KD_Tree.size_kdt l + KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. h < min_height r \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt = KD_Tree.size_kdt l + KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. h < min_height r \\<Longrightarrow> False", "note min_height_size[of l]"], ["proof (state)\nthis:\n  2 ^ min_height l \\<le> KD_Tree.size_kdt l\n\ngoal (1 subgoal):\n 1. h < min_height r \\<Longrightarrow> False", "also(xtrans)"], ["proof (state)\nthis:\n  2 ^ min_height l \\<le> KD_Tree.size_kdt l\n\ngoal (1 subgoal):\n 1. h < min_height r \\<Longrightarrow> False", "note min_height_size[of r]"], ["proof (state)\nthis:\n  2 ^ min_height r \\<le> KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. h < min_height r \\<Longrightarrow> False", "also(xtrans)"], ["proof (state)\nthis:\n  2 ^ min_height r \\<le> KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. h < min_height r \\<Longrightarrow> False", "have \"(2::nat) ^ min_height r > 2 ^ h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ h < 2 ^ min_height r", "using 0"], ["proof (prove)\nusing this:\n  h < min_height r\n\ngoal (1 subgoal):\n 1. 2 ^ h < 2 ^ min_height r", "by (simp add: diff_less_mono)"], ["proof (state)\nthis:\n  2 ^ h < 2 ^ min_height r\n\ngoal (1 subgoal):\n 1. h < min_height r \\<Longrightarrow> False", "also(xtrans)"], ["proof (state)\nthis:\n  2 ^ h < 2 ^ min_height r\n\ngoal (1 subgoal):\n 1. h < min_height r \\<Longrightarrow> False", "have \"(2::nat) ^ min_height l \\<ge> 2 ^ h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ h \\<le> 2 ^ min_height l", "using 1"], ["proof (prove)\nusing this:\n  h \\<le> min_height l\n\ngoal (1 subgoal):\n 1. 2 ^ h \\<le> 2 ^ min_height l", "by simp"], ["proof (state)\nthis:\n  2 ^ h \\<le> 2 ^ min_height l\n\ngoal (1 subgoal):\n 1. h < min_height r \\<Longrightarrow> False", "also(xtrans)"], ["proof (state)\nthis:\n  2 ^ h \\<le> 2 ^ min_height l\n\ngoal (1 subgoal):\n 1. h < min_height r \\<Longrightarrow> False", "have \"(2::nat) ^ h + 2 ^ h = 2 ^ (Suc h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ h + 2 ^ h = 2 ^ Suc h", "by (simp)"], ["proof (state)\nthis:\n  2 ^ h + 2 ^ h = 2 ^ Suc h\n\ngoal (1 subgoal):\n 1. h < min_height r \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  2 ^ h + 2 ^ h = 2 ^ Suc h\n\ngoal (1 subgoal):\n 1. h < min_height r \\<Longrightarrow> False", "have \"\\<dots> = size_kdt kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ Suc h = KD_Tree.size_kdt kdt", "using Suc(2,3)"], ["proof (prove)\nusing this:\n  Suc h = min_height kdt\n  KD_Tree.size_kdt kdt = 2 ^ min_height kdt\n\ngoal (1 subgoal):\n 1. 2 ^ Suc h = KD_Tree.size_kdt kdt", "by simp"], ["proof (state)\nthis:\n  2 ^ Suc h = KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. h < min_height r \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y.\n              y \\<le> x \\<Longrightarrow>\n              y + KD_Tree.size_kdt r \\<le> x + KD_Tree.size_kdt r;\n   \\<And>x y.\n      y \\<le> x \\<Longrightarrow>\n      2 ^ min_height l + y \\<le> 2 ^ min_height l + x;\n   \\<And>x y.\n      y < x \\<Longrightarrow> 2 ^ min_height l + y < 2 ^ min_height l + x;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> y + 2 ^ h \\<le> x + 2 ^ h\\<rbrakk>\n  \\<Longrightarrow> KD_Tree.size_kdt kdt < KD_Tree.size_kdt kdt", "show False"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y.\n              y \\<le> x \\<Longrightarrow>\n              y + KD_Tree.size_kdt r \\<le> x + KD_Tree.size_kdt r;\n   \\<And>x y.\n      y \\<le> x \\<Longrightarrow>\n      2 ^ min_height l + y \\<le> 2 ^ min_height l + x;\n   \\<And>x y.\n      y < x \\<Longrightarrow> 2 ^ min_height l + y < 2 ^ min_height l + x;\n   \\<And>x y. y \\<le> x \\<Longrightarrow> y + 2 ^ h \\<le> x + 2 ^ h\\<rbrakk>\n  \\<Longrightarrow> KD_Tree.size_kdt kdt < KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. False", "by (simp add: diff_le_mono)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> h < min_height r\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = min_height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = min_height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "from 1 2 3 4"], ["proof (chain)\npicking this:\n  h \\<le> min_height l\n  h \\<le> min_height r\n  \\<not> h < min_height l\n  \\<not> h < min_height r", "have *: \"min_height l = h\" \"min_height r = h\""], ["proof (prove)\nusing this:\n  h \\<le> min_height l\n  h \\<le> min_height r\n  \\<not> h < min_height l\n  \\<not> h < min_height r\n\ngoal (1 subgoal):\n 1. min_height l = h &&& min_height r = h", "by linarith+"], ["proof (state)\nthis:\n  min_height l = h\n  min_height r = h\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = min_height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = min_height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "hence \"size_kdt l = 2 ^ min_height l\" \"size_kdt r = 2 ^ min_height r\""], ["proof (prove)\nusing this:\n  min_height l = h\n  min_height r = h\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l = 2 ^ min_height l &&&\n    KD_Tree.size_kdt r = 2 ^ min_height r", "using Suc(3) min_height_size[of l] min_height_size[of r]"], ["proof (prove)\nusing this:\n  min_height l = h\n  min_height r = h\n  KD_Tree.size_kdt kdt = 2 ^ min_height kdt\n  2 ^ min_height l \\<le> KD_Tree.size_kdt l\n  2 ^ min_height r \\<le> KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l = 2 ^ min_height l &&&\n    KD_Tree.size_kdt r = 2 ^ min_height r", "by (auto)"], ["proof (state)\nthis:\n  KD_Tree.size_kdt l = 2 ^ min_height l\n  KD_Tree.size_kdt r = 2 ^ min_height r\n\ngoal (1 subgoal):\n 1. \\<And>x kdt.\n       \\<lbrakk>\\<And>kdt.\n                   \\<lbrakk>x = min_height kdt;\n                    KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n                   \\<Longrightarrow> KD_Tree.complete kdt;\n        Suc x = min_height kdt;\n        KD_Tree.size_kdt kdt = 2 ^ min_height kdt\\<rbrakk>\n       \\<Longrightarrow> KD_Tree.complete kdt", "with * Suc(1)"], ["proof (chain)\npicking this:\n  min_height l = h\n  min_height r = h\n  \\<lbrakk>h = min_height ?kdt;\n   KD_Tree.size_kdt ?kdt = 2 ^ min_height ?kdt\\<rbrakk>\n  \\<Longrightarrow> KD_Tree.complete ?kdt\n  KD_Tree.size_kdt l = 2 ^ min_height l\n  KD_Tree.size_kdt r = 2 ^ min_height r", "show ?case"], ["proof (prove)\nusing this:\n  min_height l = h\n  min_height r = h\n  \\<lbrakk>h = min_height ?kdt;\n   KD_Tree.size_kdt ?kdt = 2 ^ min_height ?kdt\\<rbrakk>\n  \\<Longrightarrow> KD_Tree.complete ?kdt\n  KD_Tree.size_kdt l = 2 ^ min_height l\n  KD_Tree.size_kdt r = 2 ^ min_height r\n\ngoal (1 subgoal):\n 1. KD_Tree.complete kdt", "by (simp add: complete_iff_height)"], ["proof (state)\nthis:\n  KD_Tree.complete kdt\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complete_iff_size:\n  \"complete kdt \\<longleftrightarrow> size_kdt kdt = 2 ^ height kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.complete kdt = (KD_Tree.size_kdt kdt = 2 ^ height kdt)", "using complete_if_size_height size_if_complete"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt ?kdt = 2 ^ height ?kdt \\<Longrightarrow>\n  KD_Tree.complete ?kdt\n  KD_Tree.complete ?kdt \\<Longrightarrow>\n  KD_Tree.size_kdt ?kdt = 2 ^ height ?kdt\n\ngoal (1 subgoal):\n 1. KD_Tree.complete kdt = (KD_Tree.size_kdt kdt = 2 ^ height kdt)", "by blast"], ["", "lemma size_height_if_incomplete:\n  \"\\<not> complete kdt \\<Longrightarrow> size_kdt kdt < 2 ^ height kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    KD_Tree.size_kdt kdt < 2 ^ height kdt", "by (meson antisym_conv complete_iff_size not_le size_height)"], ["", "lemma min_height_size_if_incomplete:\n  \"\\<not> complete kdt \\<Longrightarrow> 2 ^ min_height kdt < size_kdt kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    2 ^ min_height kdt < KD_Tree.size_kdt kdt", "by (metis complete_if_size_min_height le_less min_height_size)"], ["", "lemma balanced_subtreeL:\n  \"balanced (Node k v l r) \\<Longrightarrow> balanced l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. balanced (Node k v l r) \\<Longrightarrow> balanced l", "by (simp add: balanced_def)"], ["", "lemma balanced_subtreeR:\n  \"balanced (Node k v l r) \\<Longrightarrow> balanced r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. balanced (Node k v l r) \\<Longrightarrow> balanced r", "by (simp add: balanced_def)"], ["", "lemma balanced_optimal:\n  assumes \"balanced kdt\" \"size_kdt kdt \\<le> size_kdt kdt'\"\n  shows \"height kdt \\<le> height kdt'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. height kdt \\<le> height kdt'", "proof (cases \"complete kdt\")"], ["proof (state)\ngoal (2 subgoals):\n 1. KD_Tree.complete kdt \\<Longrightarrow> height kdt \\<le> height kdt'\n 2. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    height kdt \\<le> height kdt'", "case True"], ["proof (state)\nthis:\n  KD_Tree.complete kdt\n\ngoal (2 subgoals):\n 1. KD_Tree.complete kdt \\<Longrightarrow> height kdt \\<le> height kdt'\n 2. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    height kdt \\<le> height kdt'", "have \"(2::nat) ^ height kdt \\<le> 2 ^ height kdt'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ height kdt \\<le> 2 ^ height kdt'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 ^ height kdt \\<le> 2 ^ height kdt'", "have \"2 ^ height kdt = size_kdt kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ height kdt = KD_Tree.size_kdt kdt", "using True"], ["proof (prove)\nusing this:\n  KD_Tree.complete kdt\n\ngoal (1 subgoal):\n 1. 2 ^ height kdt = KD_Tree.size_kdt kdt", "by (simp add: complete_iff_height size_if_complete)"], ["proof (state)\nthis:\n  2 ^ height kdt = KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. 2 ^ height kdt \\<le> 2 ^ height kdt'", "also"], ["proof (state)\nthis:\n  2 ^ height kdt = KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. 2 ^ height kdt \\<le> 2 ^ height kdt'", "have \"\\<dots> \\<le> size_kdt kdt'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt \\<le> KD_Tree.size_kdt kdt'", "using assms(2)"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt kdt \\<le> KD_Tree.size_kdt kdt'\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt \\<le> KD_Tree.size_kdt kdt'", "by simp"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt \\<le> KD_Tree.size_kdt kdt'\n\ngoal (1 subgoal):\n 1. 2 ^ height kdt \\<le> 2 ^ height kdt'", "also"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt \\<le> KD_Tree.size_kdt kdt'\n\ngoal (1 subgoal):\n 1. 2 ^ height kdt \\<le> 2 ^ height kdt'", "have \"\\<dots> \\<le> 2 ^ height kdt'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt' \\<le> 2 ^ height kdt'", "by (rule size_height)"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt' \\<le> 2 ^ height kdt'\n\ngoal (1 subgoal):\n 1. 2 ^ height kdt \\<le> 2 ^ height kdt'", "finally"], ["proof (chain)\npicking this:\n  2 ^ height kdt \\<le> 2 ^ height kdt'", "show ?thesis"], ["proof (prove)\nusing this:\n  2 ^ height kdt \\<le> 2 ^ height kdt'\n\ngoal (1 subgoal):\n 1. 2 ^ height kdt \\<le> 2 ^ height kdt'", "."], ["proof (state)\nthis:\n  2 ^ height kdt \\<le> 2 ^ height kdt'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  2 ^ height kdt \\<le> 2 ^ height kdt'\n\ngoal (2 subgoals):\n 1. KD_Tree.complete kdt \\<Longrightarrow> height kdt \\<le> height kdt'\n 2. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    height kdt \\<le> height kdt'", "thus ?thesis"], ["proof (prove)\nusing this:\n  2 ^ height kdt \\<le> 2 ^ height kdt'\n\ngoal (1 subgoal):\n 1. height kdt \\<le> height kdt'", "by (simp)"], ["proof (state)\nthis:\n  height kdt \\<le> height kdt'\n\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    height kdt \\<le> height kdt'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    height kdt \\<le> height kdt'", "case False"], ["proof (state)\nthis:\n  \\<not> KD_Tree.complete kdt\n\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    height kdt \\<le> height kdt'", "have \"(2::nat) ^ min_height kdt < 2 ^ height kdt'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ min_height kdt < 2 ^ height kdt'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 ^ min_height kdt < 2 ^ height kdt'", "have \"(2::nat) ^ min_height kdt < size_kdt kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ min_height kdt < KD_Tree.size_kdt kdt", "by(rule min_height_size_if_incomplete[OF False])"], ["proof (state)\nthis:\n  2 ^ min_height kdt < KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. 2 ^ min_height kdt < 2 ^ height kdt'", "also"], ["proof (state)\nthis:\n  2 ^ min_height kdt < KD_Tree.size_kdt kdt\n\ngoal (1 subgoal):\n 1. 2 ^ min_height kdt < 2 ^ height kdt'", "have \"\\<dots> \\<le> size_kdt kdt'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt \\<le> KD_Tree.size_kdt kdt'", "using assms(2)"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt kdt \\<le> KD_Tree.size_kdt kdt'\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt \\<le> KD_Tree.size_kdt kdt'", "by simp"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt \\<le> KD_Tree.size_kdt kdt'\n\ngoal (1 subgoal):\n 1. 2 ^ min_height kdt < 2 ^ height kdt'", "also"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt \\<le> KD_Tree.size_kdt kdt'\n\ngoal (1 subgoal):\n 1. 2 ^ min_height kdt < 2 ^ height kdt'", "have \"\\<dots> \\<le> 2 ^ height kdt'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt' \\<le> 2 ^ height kdt'", "by(rule size_height)"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt' \\<le> 2 ^ height kdt'\n\ngoal (1 subgoal):\n 1. 2 ^ min_height kdt < 2 ^ height kdt'", "finally"], ["proof (chain)\npicking this:\n  2 ^ min_height kdt < 2 ^ height kdt'", "have \"(2::nat) ^ min_height kdt < (2::nat) ^ height kdt'\""], ["proof (prove)\nusing this:\n  2 ^ min_height kdt < 2 ^ height kdt'\n\ngoal (1 subgoal):\n 1. 2 ^ min_height kdt < 2 ^ height kdt'", "."], ["proof (state)\nthis:\n  2 ^ min_height kdt < 2 ^ height kdt'\n\ngoal (1 subgoal):\n 1. 2 ^ min_height kdt < 2 ^ height kdt'", "thus ?thesis"], ["proof (prove)\nusing this:\n  2 ^ min_height kdt < 2 ^ height kdt'\n\ngoal (1 subgoal):\n 1. 2 ^ min_height kdt < 2 ^ height kdt'", "."], ["proof (state)\nthis:\n  2 ^ min_height kdt < 2 ^ height kdt'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  2 ^ min_height kdt < 2 ^ height kdt'\n\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    height kdt \\<le> height kdt'", "hence *: \"min_height kdt < height kdt'\""], ["proof (prove)\nusing this:\n  2 ^ min_height kdt < 2 ^ height kdt'\n\ngoal (1 subgoal):\n 1. min_height kdt < height kdt'", "by simp"], ["proof (state)\nthis:\n  min_height kdt < height kdt'\n\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    height kdt \\<le> height kdt'", "have \"min_height kdt + 1 = height kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_height kdt + 1 = height kdt", "using min_height_le_height[of kdt] assms(1) False"], ["proof (prove)\nusing this:\n  min_height kdt \\<le> height kdt\n  balanced kdt\n  \\<not> KD_Tree.complete kdt\n\ngoal (1 subgoal):\n 1. min_height kdt + 1 = height kdt", "by (simp add: complete_iff_height balanced_def)"], ["proof (state)\nthis:\n  min_height kdt + 1 = height kdt\n\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    height kdt \\<le> height kdt'", "with *"], ["proof (chain)\npicking this:\n  min_height kdt < height kdt'\n  min_height kdt + 1 = height kdt", "show ?thesis"], ["proof (prove)\nusing this:\n  min_height kdt < height kdt'\n  min_height kdt + 1 = height kdt\n\ngoal (1 subgoal):\n 1. height kdt \\<le> height kdt'", "by arith"], ["proof (state)\nthis:\n  height kdt \\<le> height kdt'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Lemmas adapted from \\<open>HOL-Library.Tree_Real\\<close> to \\<open>k\\<close>-d Tree\\<close>"], ["", "lemma size_height_log:\n  \"log 2 (size_kdt kdt) \\<le> height kdt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. log 2 (real (KD_Tree.size_kdt kdt)) \\<le> real (height kdt)", "by (simp add: log2_of_power_le size_height)"], ["", "lemma min_height_size_log:\n  \"min_height kdt \\<le> log 2 (size_kdt kdt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (min_height kdt) \\<le> log 2 (real (KD_Tree.size_kdt kdt))", "by (simp add: le_log2_of_power min_height_size)"], ["", "lemma size_log_if_complete:\n  \"complete kdt \\<Longrightarrow> height kdt = log 2 (size_kdt kdt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.complete kdt \\<Longrightarrow>\n    real (height kdt) = log 2 (real (KD_Tree.size_kdt kdt))", "using complete_iff_size log2_of_power_eq"], ["proof (prove)\nusing this:\n  KD_Tree.complete ?kdt = (KD_Tree.size_kdt ?kdt = 2 ^ height ?kdt)\n  ?m = 2 ^ ?n \\<Longrightarrow> real ?n = log 2 (real ?m)\n\ngoal (1 subgoal):\n 1. KD_Tree.complete kdt \\<Longrightarrow>\n    real (height kdt) = log 2 (real (KD_Tree.size_kdt kdt))", "by blast"], ["", "lemma min_height_size_log_if_incomplete:\n  \"\\<not> complete kdt \\<Longrightarrow> min_height kdt < log 2 (size_kdt kdt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    real (min_height kdt) < log 2 (real (KD_Tree.size_kdt kdt))", "by (simp add: less_log2_of_power min_height_size_if_incomplete)"], ["", "lemma min_height_balanced:\n  assumes \"balanced kdt\"\n  shows \"min_height kdt = nat(floor(log 2 (size_kdt kdt)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>\n 2. \\<not> ?P \\<Longrightarrow>\n    min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>", "assume *: \"complete kdt\""], ["proof (state)\nthis:\n  KD_Tree.complete kdt\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>\n 2. \\<not> ?P \\<Longrightarrow>\n    min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>", "hence \"size_kdt kdt = 2 ^ min_height kdt\""], ["proof (prove)\nusing this:\n  KD_Tree.complete kdt\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt = 2 ^ min_height kdt", "by (simp add: complete_iff_height size_if_complete)"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt = 2 ^ min_height kdt\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>\n 2. \\<not> ?P \\<Longrightarrow>\n    min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>", "from log2_of_power_eq[OF this]"], ["proof (chain)\npicking this:\n  real (min_height kdt) = log 2 (real (KD_Tree.size_kdt kdt))", "show ?thesis"], ["proof (prove)\nusing this:\n  real (min_height kdt) = log 2 (real (KD_Tree.size_kdt kdt))\n\ngoal (1 subgoal):\n 1. min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>", "by linarith"], ["proof (state)\nthis:\n  min_height kdt = nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>", "assume *: \"\\<not> complete kdt\""], ["proof (state)\nthis:\n  \\<not> KD_Tree.complete kdt\n\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>", "hence \"height kdt = min_height kdt + 1\""], ["proof (prove)\nusing this:\n  \\<not> KD_Tree.complete kdt\n\ngoal (1 subgoal):\n 1. height kdt = min_height kdt + 1", "using assms min_height_le_height[of kdt]"], ["proof (prove)\nusing this:\n  \\<not> KD_Tree.complete kdt\n  balanced kdt\n  min_height kdt \\<le> height kdt\n\ngoal (1 subgoal):\n 1. height kdt = min_height kdt + 1", "by(auto simp add: balanced_def complete_iff_height)"], ["proof (state)\nthis:\n  height kdt = min_height kdt + 1\n\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>", "hence \"size_kdt kdt < 2 ^ (min_height kdt + 1)\""], ["proof (prove)\nusing this:\n  height kdt = min_height kdt + 1\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt < 2 ^ (min_height kdt + 1)", "by (metis * size_height_if_incomplete)"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt < 2 ^ (min_height kdt + 1)\n\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>", "hence \"log 2 (size_kdt kdt) < min_height kdt + 1\""], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt kdt < 2 ^ (min_height kdt + 1)\n\ngoal (1 subgoal):\n 1. log 2 (real (KD_Tree.size_kdt kdt)) < real (min_height kdt + 1)", "using log2_of_power_less size_ge0"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt kdt < 2 ^ (min_height kdt + 1)\n  \\<lbrakk>?m < 2 ^ ?n; 0 < ?m\\<rbrakk>\n  \\<Longrightarrow> log 2 (real ?m) < real ?n\n  0 < KD_Tree.size_kdt ?kdt\n\ngoal (1 subgoal):\n 1. log 2 (real (KD_Tree.size_kdt kdt)) < real (min_height kdt + 1)", "by blast"], ["proof (state)\nthis:\n  log 2 (real (KD_Tree.size_kdt kdt)) < real (min_height kdt + 1)\n\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>", "thus ?thesis"], ["proof (prove)\nusing this:\n  log 2 (real (KD_Tree.size_kdt kdt)) < real (min_height kdt + 1)\n\ngoal (1 subgoal):\n 1. min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>", "using min_height_size_log[of kdt]"], ["proof (prove)\nusing this:\n  log 2 (real (KD_Tree.size_kdt kdt)) < real (min_height kdt + 1)\n  real (min_height kdt) \\<le> log 2 (real (KD_Tree.size_kdt kdt))\n\ngoal (1 subgoal):\n 1. min_height kdt =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>", "by linarith"], ["proof (state)\nthis:\n  min_height kdt = nat \\<lfloor>log 2 (real (KD_Tree.size_kdt kdt))\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma height_balanced:\n  assumes \"balanced kdt\"\n  shows \"height kdt = nat(ceiling(log 2 (size_kdt kdt)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>\n 2. \\<not> ?P \\<Longrightarrow>\n    height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>", "assume *: \"complete kdt\""], ["proof (state)\nthis:\n  KD_Tree.complete kdt\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>\n 2. \\<not> ?P \\<Longrightarrow>\n    height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>", "hence \"size_kdt kdt = 2 ^ height kdt\""], ["proof (prove)\nusing this:\n  KD_Tree.complete kdt\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt = 2 ^ height kdt", "by (simp add: size_if_complete)"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt = 2 ^ height kdt\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>\n 2. \\<not> ?P \\<Longrightarrow>\n    height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>", "from log2_of_power_eq[OF this]"], ["proof (chain)\npicking this:\n  real (height kdt) = log 2 (real (KD_Tree.size_kdt kdt))", "show ?thesis"], ["proof (prove)\nusing this:\n  real (height kdt) = log 2 (real (KD_Tree.size_kdt kdt))\n\ngoal (1 subgoal):\n 1. height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>", "by linarith"], ["proof (state)\nthis:\n  height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>\n\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>", "assume *: \"\\<not> complete kdt\""], ["proof (state)\nthis:\n  \\<not> KD_Tree.complete kdt\n\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>", "hence **: \"height kdt = min_height kdt + 1\""], ["proof (prove)\nusing this:\n  \\<not> KD_Tree.complete kdt\n\ngoal (1 subgoal):\n 1. height kdt = min_height kdt + 1", "using assms min_height_le_height[of kdt]"], ["proof (prove)\nusing this:\n  \\<not> KD_Tree.complete kdt\n  balanced kdt\n  min_height kdt \\<le> height kdt\n\ngoal (1 subgoal):\n 1. height kdt = min_height kdt + 1", "by(auto simp add: balanced_def complete_iff_height)"], ["proof (state)\nthis:\n  height kdt = min_height kdt + 1\n\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>", "hence \"size_kdt kdt \\<le> 2 ^ (min_height kdt + 1)\""], ["proof (prove)\nusing this:\n  height kdt = min_height kdt + 1\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt kdt \\<le> 2 ^ (min_height kdt + 1)", "by (metis size_height)"], ["proof (state)\nthis:\n  KD_Tree.size_kdt kdt \\<le> 2 ^ (min_height kdt + 1)\n\ngoal (1 subgoal):\n 1. \\<not> KD_Tree.complete kdt \\<Longrightarrow>\n    height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>", "from  log2_of_power_le[OF this size_ge0] min_height_size_log_if_incomplete[OF *] **"], ["proof (chain)\npicking this:\n  log 2 (real (KD_Tree.size_kdt kdt)) \\<le> real (min_height kdt + 1)\n  real (min_height kdt) < log 2 (real (KD_Tree.size_kdt kdt))\n  height kdt = min_height kdt + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  log 2 (real (KD_Tree.size_kdt kdt)) \\<le> real (min_height kdt + 1)\n  real (min_height kdt) < log 2 (real (KD_Tree.size_kdt kdt))\n  height kdt = min_height kdt + 1\n\ngoal (1 subgoal):\n 1. height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>", "by linarith"], ["proof (state)\nthis:\n  height kdt = nat \\<lceil>log 2 (real (KD_Tree.size_kdt kdt))\\<rceil>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma balanced_Node_if_wbal1:\n  assumes \"balanced l\" \"balanced r\" \"size_kdt l = size_kdt r + 1\"\n  shows \"balanced (Node k v l r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "from assms(3)"], ["proof (chain)\npicking this:\n  KD_Tree.size_kdt l = KD_Tree.size_kdt r + 1", "have [simp]: \"size_kdt l = size_kdt r + 1\""], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt l = KD_Tree.size_kdt r + 1\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l = KD_Tree.size_kdt r + 1", "by simp"], ["proof (state)\nthis:\n  KD_Tree.size_kdt l = KD_Tree.size_kdt r + 1\n\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "have \"nat \\<lceil>log 2 (1 + size_kdt r)\\<rceil> \\<ge> nat \\<lceil>log 2 (size_kdt r)\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat \\<lceil>log 2 (real (KD_Tree.size_kdt r))\\<rceil>\n    \\<le> nat \\<lceil>log 2 (real (1 + KD_Tree.size_kdt r))\\<rceil>", "by(rule nat_mono[OF ceiling_mono]) simp"], ["proof (state)\nthis:\n  nat \\<lceil>log 2 (real (KD_Tree.size_kdt r))\\<rceil>\n  \\<le> nat \\<lceil>log 2 (real (1 + KD_Tree.size_kdt r))\\<rceil>\n\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "hence 1: \"height(Node k v l r) = nat \\<lceil>log 2 (1 + size_kdt r)\\<rceil> + 1\""], ["proof (prove)\nusing this:\n  nat \\<lceil>log 2 (real (KD_Tree.size_kdt r))\\<rceil>\n  \\<le> nat \\<lceil>log 2 (real (1 + KD_Tree.size_kdt r))\\<rceil>\n\ngoal (1 subgoal):\n 1. height (Node k v l r) =\n    nat \\<lceil>log 2 (real (1 + KD_Tree.size_kdt r))\\<rceil> + 1", "using height_balanced[OF assms(1)] height_balanced[OF assms(2)]"], ["proof (prove)\nusing this:\n  nat \\<lceil>log 2 (real (KD_Tree.size_kdt r))\\<rceil>\n  \\<le> nat \\<lceil>log 2 (real (1 + KD_Tree.size_kdt r))\\<rceil>\n  height l = nat \\<lceil>log 2 (real (KD_Tree.size_kdt l))\\<rceil>\n  height r = nat \\<lceil>log 2 (real (KD_Tree.size_kdt r))\\<rceil>\n\ngoal (1 subgoal):\n 1. height (Node k v l r) =\n    nat \\<lceil>log 2 (real (1 + KD_Tree.size_kdt r))\\<rceil> + 1", "by (simp del: nat_ceiling_le_eq add: max_def)"], ["proof (state)\nthis:\n  height (Node k v l r) =\n  nat \\<lceil>log 2 (real (1 + KD_Tree.size_kdt r))\\<rceil> + 1\n\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "have \"nat \\<lfloor>log 2 (1 + size_kdt r)\\<rfloor> \\<ge> nat \\<lfloor>log 2 (size_kdt r)\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat \\<lfloor>log 2 (real (KD_Tree.size_kdt r))\\<rfloor>\n    \\<le> nat \\<lfloor>log 2 (real (1 + KD_Tree.size_kdt r))\\<rfloor>", "by(rule nat_mono[OF floor_mono]) simp"], ["proof (state)\nthis:\n  nat \\<lfloor>log 2 (real (KD_Tree.size_kdt r))\\<rfloor>\n  \\<le> nat \\<lfloor>log 2 (real (1 + KD_Tree.size_kdt r))\\<rfloor>\n\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "hence 2: \"min_height(Node k v l r) = nat \\<lfloor>log 2 (size_kdt r)\\<rfloor> + 1\""], ["proof (prove)\nusing this:\n  nat \\<lfloor>log 2 (real (KD_Tree.size_kdt r))\\<rfloor>\n  \\<le> nat \\<lfloor>log 2 (real (1 + KD_Tree.size_kdt r))\\<rfloor>\n\ngoal (1 subgoal):\n 1. min_height (Node k v l r) =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt r))\\<rfloor> + 1", "using min_height_balanced[OF assms(1)] min_height_balanced[OF assms(2)]"], ["proof (prove)\nusing this:\n  nat \\<lfloor>log 2 (real (KD_Tree.size_kdt r))\\<rfloor>\n  \\<le> nat \\<lfloor>log 2 (real (1 + KD_Tree.size_kdt r))\\<rfloor>\n  min_height l = nat \\<lfloor>log 2 (real (KD_Tree.size_kdt l))\\<rfloor>\n  min_height r = nat \\<lfloor>log 2 (real (KD_Tree.size_kdt r))\\<rfloor>\n\ngoal (1 subgoal):\n 1. min_height (Node k v l r) =\n    nat \\<lfloor>log 2 (real (KD_Tree.size_kdt r))\\<rfloor> + 1", "by (simp)"], ["proof (state)\nthis:\n  min_height (Node k v l r) =\n  nat \\<lfloor>log 2 (real (KD_Tree.size_kdt r))\\<rfloor> + 1\n\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "have \"size_kdt r \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> KD_Tree.size_kdt r", "by (simp add: Suc_leI)"], ["proof (state)\nthis:\n  1 \\<le> KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "then"], ["proof (chain)\npicking this:\n  1 \\<le> KD_Tree.size_kdt r", "obtain i where i: \"2 ^ i \\<le> size_kdt r\" \"size_kdt r < 2 ^ (i + 1)\""], ["proof (prove)\nusing this:\n  1 \\<le> KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>2 ^ i \\<le> KD_Tree.size_kdt r;\n         KD_Tree.size_kdt r < 2 ^ (i + 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ex_power_ivl1[of 2 \"size_kdt r\"]"], ["proof (prove)\nusing this:\n  1 \\<le> KD_Tree.size_kdt r\n  \\<lbrakk>2 \\<le> 2; 1 \\<le> KD_Tree.size_kdt r\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n.\n                       2 ^ n \\<le> KD_Tree.size_kdt r \\<and>\n                       KD_Tree.size_kdt r < 2 ^ (n + 1)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>2 ^ i \\<le> KD_Tree.size_kdt r;\n         KD_Tree.size_kdt r < 2 ^ (i + 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  2 ^ i \\<le> KD_Tree.size_kdt r\n  KD_Tree.size_kdt r < 2 ^ (i + 1)\n\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "hence i1: \"2 ^ i < size_kdt r + 1\" \"size_kdt r + 1 \\<le> 2 ^ (i + 1)\""], ["proof (prove)\nusing this:\n  2 ^ i \\<le> KD_Tree.size_kdt r\n  KD_Tree.size_kdt r < 2 ^ (i + 1)\n\ngoal (1 subgoal):\n 1. 2 ^ i < KD_Tree.size_kdt r + 1 &&&\n    KD_Tree.size_kdt r + 1 \\<le> 2 ^ (i + 1)", "by auto"], ["proof (state)\nthis:\n  2 ^ i < KD_Tree.size_kdt r + 1\n  KD_Tree.size_kdt r + 1 \\<le> 2 ^ (i + 1)\n\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "from 1 2 floor_log_nat_eq_if[OF i] ceiling_log_nat_eq_if[OF i1]"], ["proof (chain)\npicking this:\n  height (Node k v l r) =\n  nat \\<lceil>log 2 (real (1 + KD_Tree.size_kdt r))\\<rceil> + 1\n  min_height (Node k v l r) =\n  nat \\<lfloor>log 2 (real (KD_Tree.size_kdt r))\\<rfloor> + 1\n  2 \\<le> 2 \\<Longrightarrow>\n  \\<lfloor>log (real 2) (real (KD_Tree.size_kdt r))\\<rfloor> = int i\n  2 \\<le> 2 \\<Longrightarrow>\n  \\<lceil>log (real 2) (real (KD_Tree.size_kdt r + 1))\\<rceil> = int i + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  height (Node k v l r) =\n  nat \\<lceil>log 2 (real (1 + KD_Tree.size_kdt r))\\<rceil> + 1\n  min_height (Node k v l r) =\n  nat \\<lfloor>log 2 (real (KD_Tree.size_kdt r))\\<rfloor> + 1\n  2 \\<le> 2 \\<Longrightarrow>\n  \\<lfloor>log (real 2) (real (KD_Tree.size_kdt r))\\<rfloor> = int i\n  2 \\<le> 2 \\<Longrightarrow>\n  \\<lceil>log (real 2) (real (KD_Tree.size_kdt r + 1))\\<rceil> = int i + 1\n\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "by(simp add:balanced_def)"], ["proof (state)\nthis:\n  balanced (Node k v l r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma balanced_sym:\n  \"balanced (Node k v l r) \\<Longrightarrow> balanced (Node k' v' r l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. balanced (Node k v l r) \\<Longrightarrow> balanced (Node k' v' r l)", "by (auto simp: balanced_def)"], ["", "lemma balanced_Node_if_wbal2:\n  assumes \"balanced l\" \"balanced r\" \"abs(int(size_kdt l) - int(size_kdt r)) \\<le> 1\"\n  shows \"balanced (Node k v l r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "have \"size_kdt l = size_kdt r \\<or> (size_kdt l = size_kdt r + 1 \\<or> size_kdt r = size_kdt l + 1)\" (is \"?A \\<or> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l = KD_Tree.size_kdt r \\<or>\n    KD_Tree.size_kdt l = KD_Tree.size_kdt r + 1 \\<or>\n    KD_Tree.size_kdt r = KD_Tree.size_kdt l + 1", "using assms(3)"], ["proof (prove)\nusing this:\n  \\<bar>int (KD_Tree.size_kdt l) - int (KD_Tree.size_kdt r)\\<bar> \\<le> 1\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l = KD_Tree.size_kdt r \\<or>\n    KD_Tree.size_kdt l = KD_Tree.size_kdt r + 1 \\<or>\n    KD_Tree.size_kdt r = KD_Tree.size_kdt l + 1", "by linarith"], ["proof (state)\nthis:\n  KD_Tree.size_kdt l = KD_Tree.size_kdt r \\<or>\n  KD_Tree.size_kdt l = KD_Tree.size_kdt r + 1 \\<or>\n  KD_Tree.size_kdt r = KD_Tree.size_kdt l + 1\n\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "thus ?thesis"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt l = KD_Tree.size_kdt r \\<or>\n  KD_Tree.size_kdt l = KD_Tree.size_kdt r + 1 \\<or>\n  KD_Tree.size_kdt r = KD_Tree.size_kdt l + 1\n\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. KD_Tree.size_kdt l = KD_Tree.size_kdt r \\<Longrightarrow>\n    balanced (Node k v l r)\n 2. KD_Tree.size_kdt l = KD_Tree.size_kdt r + 1 \\<or>\n    KD_Tree.size_kdt r = KD_Tree.size_kdt l + 1 \\<Longrightarrow>\n    balanced (Node k v l r)", "assume \"?A\""], ["proof (state)\nthis:\n  KD_Tree.size_kdt l = KD_Tree.size_kdt r\n\ngoal (2 subgoals):\n 1. KD_Tree.size_kdt l = KD_Tree.size_kdt r \\<Longrightarrow>\n    balanced (Node k v l r)\n 2. KD_Tree.size_kdt l = KD_Tree.size_kdt r + 1 \\<or>\n    KD_Tree.size_kdt r = KD_Tree.size_kdt l + 1 \\<Longrightarrow>\n    balanced (Node k v l r)", "thus ?thesis"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt l = KD_Tree.size_kdt r\n\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "using assms(1,2)"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt l = KD_Tree.size_kdt r\n  balanced l\n  balanced r\n\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "apply(simp add: balanced_def min_def max_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>KD_Tree.size_kdt l = KD_Tree.size_kdt r;\n     height l - min_height l \\<le> Suc 0;\n     height r - min_height r \\<le> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (height l \\<le> height r \\<longrightarrow>\n                       min_height l \\<le> min_height r \\<longrightarrow>\n                       height r - min_height l \\<le> Suc 0) \\<and>\n                      (\\<not> height l \\<le> height r \\<longrightarrow>\n                       \\<not> min_height l\n                              \\<le> min_height r \\<longrightarrow>\n                       height l - min_height r \\<le> Suc 0)", "by (metis assms(1,2) balanced_optimal le_antisym le_less)"], ["proof (state)\nthis:\n  balanced (Node k v l r)\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l = KD_Tree.size_kdt r + 1 \\<or>\n    KD_Tree.size_kdt r = KD_Tree.size_kdt l + 1 \\<Longrightarrow>\n    balanced (Node k v l r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l = KD_Tree.size_kdt r + 1 \\<or>\n    KD_Tree.size_kdt r = KD_Tree.size_kdt l + 1 \\<Longrightarrow>\n    balanced (Node k v l r)", "assume \"?B\""], ["proof (state)\nthis:\n  KD_Tree.size_kdt l = KD_Tree.size_kdt r + 1 \\<or>\n  KD_Tree.size_kdt r = KD_Tree.size_kdt l + 1\n\ngoal (1 subgoal):\n 1. KD_Tree.size_kdt l = KD_Tree.size_kdt r + 1 \\<or>\n    KD_Tree.size_kdt r = KD_Tree.size_kdt l + 1 \\<Longrightarrow>\n    balanced (Node k v l r)", "thus ?thesis"], ["proof (prove)\nusing this:\n  KD_Tree.size_kdt l = KD_Tree.size_kdt r + 1 \\<or>\n  KD_Tree.size_kdt r = KD_Tree.size_kdt l + 1\n\ngoal (1 subgoal):\n 1. balanced (Node k v l r)", "by (meson assms(1,2) balanced_sym balanced_Node_if_wbal1)"], ["proof (state)\nthis:\n  balanced (Node k v l r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  balanced (Node k v l r)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}