{"file_name": "/home/qj213/afp-2021-10-22/thys/Treaps/Random_Treap.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Treaps", "problem_names": ["lemma tree_sigma_cong:\n  assumes \"sets M = sets M'\"\n  shows   \"tree_sigma M = tree_sigma M'\"", "lemma distr_restrict:\n  assumes \"sets N = sets L\" \"sets K \\<subseteq> sets M\"\n          \"\\<And>X. X \\<in> sets K \\<Longrightarrow> emeasure M X = emeasure K X\"\n          \"\\<And>X. X \\<in> sets M \\<Longrightarrow> X \\<subseteq> space M - space K \\<Longrightarrow> emeasure M X = 0\"\n          \"f \\<in> M \\<rightarrow>\\<^sub>M N\" \"f \\<in> K \\<rightarrow>\\<^sub>M L\"\n  shows   \"distr M N f = distr K L f\"", "lemma sets_tree_sigma_count_space:\n  assumes \"countable B\"\n  shows   \"sets (tree_sigma (count_space B)) = Pow (trees B)\"", "lemma height_primrec: \"height = rec_tree 0 (\\<lambda>_ _ _ a b. Suc (max a b))\"", "lemma ipl_primrec: \"ipl = rec_tree 0 (\\<lambda>l _ r a b. size l + size r + a + b)\"", "lemma size_primrec: \"size = rec_tree 0 (\\<lambda>_ _ _ a b. 1 + a + b)\"", "lemma ipl_map_tree[simp]: \"ipl (map_tree f t) = ipl t\"", "lemma set_pmf_random_bst: \"finite A \\<Longrightarrow> set_pmf (random_bst A) \\<subseteq> trees A\"", "lemma trees_mono: \"A \\<subseteq> B \\<Longrightarrow> trees A \\<subseteq> trees B\"", "lemma ins_primrec:\n  \"ins k (p::real) t = rec_tree \n    (Node Leaf (k,p) Leaf)\n    (\\<lambda>l z r l' r'. case z of (k1, p1) \\<Rightarrow>\n      if k < k1 then\n        (case l' of\n          Leaf \\<Rightarrow> Leaf\n        | Node l2 (k2,p2) r2 \\<Rightarrow> \n            if 0 \\<le> p2 - p1 then Node (Node l2 (k2,p2) r2) (k1,p1) r\n            else Node l2 (k2,p2) (Node r2 (k1,p1) r))\n      else if k > k1 then\n        (case r' of\n          Leaf \\<Rightarrow> Leaf\n        | Node l2 (k2,p2) r2 \\<Rightarrow>\n            if 0 \\<le> p2 - p1 then Node l (k1,p1) (Node l2 (k2,p2) r2)\n            else Node (Node l (k1,p1) l2) (k2,p2) r2)\n      else Node l (k1,p1) r\n      ) t\"", "lemma measurable_less_count_space [measurable (raw)]:\n  assumes \"countable A\"\n  assumes [measurable]: \"a \\<in> B \\<rightarrow>\\<^sub>M count_space A\"\n  assumes [measurable]: \"b \\<in> B \\<rightarrow>\\<^sub>M count_space A\"\n  shows   \"Measurable.pred B (\\<lambda>x. a x < b x)\"", "lemma measurable_ins [measurable (raw)]:\n  assumes [measurable]: \"countable A\"\n  assumes [measurable]: \"k \\<in> B \\<rightarrow>\\<^sub>M count_space A\"\n  assumes [measurable]: \"x \\<in> B \\<rightarrow>\\<^sub>M (lborel :: real measure)\"\n  assumes [measurable]: \"t \\<in> B \\<rightarrow>\\<^sub>M tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)\"\n  shows   \"(\\<lambda>y. ins (k y) (x y) (t y)) \\<in> B \\<rightarrow>\\<^sub>M tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)\"", "lemma map_tree_primrec: \"map_tree f t = rec_tree \\<langle>\\<rangle> (\\<lambda>l a r l' r'.  \\<langle>l', f a, r'\\<rangle>) t\"", "lemma sets_rinss':\n  assumes \"countable B\" \"set ys \\<subseteq> B\"\n  shows \"t \\<in> trees (B \\<times> UNIV) \\<Longrightarrow> sets (rinss ys t B) = sets (tree_sigma (count_space B \\<Otimes>\\<^sub>M lborel))\"", "lemma measurable_foldl [measurable]:\n  assumes \"f \\<in> A \\<rightarrow>\\<^sub>M B\" \"set xs \\<subseteq> space C\"\n  assumes \"\\<And>c. c \\<in> set xs \\<Longrightarrow> (\\<lambda>(a,b). g a b c) \\<in> (A \\<Otimes>\\<^sub>M B) \\<rightarrow>\\<^sub>M B\"\n  shows   \"(\\<lambda>x. foldl (g x) (f x) xs) \\<in> A \\<rightarrow>\\<^sub>M B\"", "lemma ins_trees: \"t \\<in> trees A \\<Longrightarrow> (x,y) \\<in> A \\<Longrightarrow> ins x y t \\<in> trees A\"", "lemma sets_rinss [simp]: \n  assumes \"t \\<in> trees (A \\<times> UNIV)\" \n  shows \"sets (rinss xs t A) = tree_sigma (count_space A \\<Otimes>\\<^sub>M borel)\"", "lemma bst_of_list_measurable [measurable]:\n  \"bst_of_list \\<in> measurable (count_space (lists A)) (tree_sigma (count_space A))\"", "lemma insort_wrt_measurable [measurable]:\n  \"(\\<lambda>x. insort_wrt x xs) \\<in> count_space (Pow (A \\<times> A)) \\<rightarrow>\\<^sub>M count_space (lists A)\"", "lemma bst_of_list_sort_meaurable [measurable]:\n  \"(\\<lambda>x. bst_of_list (sort_key x xs)) \\<in> \n     Pi\\<^sub>M (set xs) (\\<lambda>i. borel::real measure) \\<rightarrow>\\<^sub>M tree_sigma (count_space A)\"", "lemma random_treap_fold:\n  assumes \"t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\"\n  shows \"rinss xs t A = distr (\\<Pi>\\<^sub>M x\\<in>set xs. \\<U> 0 1)\n                              (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) t xs)\"", "lemma rinss_bst_of_list:\n      \"distr (rinss xs Leaf A) (tree_sigma (count_space A)) (map_tree fst) =\n       distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1)) (tree_sigma (count_space A))\n             (\\<lambda>p. bst_of_list (sort_key p xs))\" (is \"?lhs = ?rhs\")", "lemma lborel_permutations_of_set_bst_of_list:\n  shows \"distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1)) (tree_sigma (count_space A))\n               (\\<lambda>p. bst_of_list (sort_key p xs)) =\n         distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list\" (is \"?lhs = ?rhs\")", "lemma distr_bst_of_list_tree_sigma_count_space: \"\n   distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list =\n     distr (random_perm xs) (count_space (trees A)) bst_of_list\"", "lemma distr_bst_of_list_random_bst: \"\n  distr (random_perm xs) (count_space (trees A)) bst_of_list =\n    restrict_space (random_bst (set xs)) (trees A)\" (is \"?lhs = ?rhs\")", "theorem rinss_random_bst:\n  \"distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A)) (map_tree fst) =\n     restrict_space (measure_pmf (random_bst (set xs))) (trees A)\""], "translations": [["", "lemma tree_sigma_cong:\n  assumes \"sets M = sets M'\"\n  shows   \"tree_sigma M = tree_sigma M'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tree_sigma M = tree_sigma M'", "using sets_eq_imp_space_eq[OF assms]"], ["proof (prove)\nusing this:\n  space M = space M'\n\ngoal (1 subgoal):\n 1. tree_sigma M = tree_sigma M'", "using assms"], ["proof (prove)\nusing this:\n  space M = space M'\n  sets M = sets M'\n\ngoal (1 subgoal):\n 1. tree_sigma M = tree_sigma M'", "by (simp add: tree_sigma_def)"], ["", "lemma distr_restrict:\n  assumes \"sets N = sets L\" \"sets K \\<subseteq> sets M\"\n          \"\\<And>X. X \\<in> sets K \\<Longrightarrow> emeasure M X = emeasure K X\"\n          \"\\<And>X. X \\<in> sets M \\<Longrightarrow> X \\<subseteq> space M - space K \\<Longrightarrow> emeasure M X = 0\"\n          \"f \\<in> M \\<rightarrow>\\<^sub>M N\" \"f \\<in> K \\<rightarrow>\\<^sub>M L\"\n  shows   \"distr M N f = distr K L f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr M N f = distr K L f", "proof (rule measure_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (distr M N f) = sets (distr K L f)\n 2. \\<And>A.\n       A \\<in> sets (distr M N f) \\<Longrightarrow>\n       emeasure (distr M N f) A = emeasure (distr K L f) A", "fix X"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (distr M N f) = sets (distr K L f)\n 2. \\<And>A.\n       A \\<in> sets (distr M N f) \\<Longrightarrow>\n       emeasure (distr M N f) A = emeasure (distr K L f) A", "assume \"X \\<in> sets (distr M N f)\""], ["proof (state)\nthis:\n  X \\<in> sets (distr M N f)\n\ngoal (2 subgoals):\n 1. sets (distr M N f) = sets (distr K L f)\n 2. \\<And>A.\n       A \\<in> sets (distr M N f) \\<Longrightarrow>\n       emeasure (distr M N f) A = emeasure (distr K L f) A", "thus \"emeasure (distr M N f) X = emeasure (distr K L f) X\""], ["proof (prove)\nusing this:\n  X \\<in> sets (distr M N f)\n\ngoal (1 subgoal):\n 1. emeasure (distr M N f) X = emeasure (distr K L f) X", "using assms(1)"], ["proof (prove)\nusing this:\n  X \\<in> sets (distr M N f)\n  sets N = sets L\n\ngoal (1 subgoal):\n 1. emeasure (distr M N f) X = emeasure (distr K L f) X", "by (intro emeasure_distr_restrict assms) simp_all"], ["proof (state)\nthis:\n  emeasure (distr M N f) X = emeasure (distr K L f) X\n\ngoal (1 subgoal):\n 1. sets (distr M N f) = sets (distr K L f)", "qed (use assms in auto)"], ["", "(* END TODO *)"], ["", "lemma sets_tree_sigma_count_space:\n  assumes \"countable B\"\n  shows   \"sets (tree_sigma (count_space B)) = Pow (trees B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (tree_sigma (count_space B)) = Pow (trees B)", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> sets (tree_sigma (count_space B)) \\<Longrightarrow>\n       x \\<in> Pow (trees B)\n 2. \\<And>x.\n       x \\<in> Pow (trees B) \\<Longrightarrow>\n       x \\<in> sets (tree_sigma (count_space B))", "fix X"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> sets (tree_sigma (count_space B)) \\<Longrightarrow>\n       x \\<in> Pow (trees B)\n 2. \\<And>x.\n       x \\<in> Pow (trees B) \\<Longrightarrow>\n       x \\<in> sets (tree_sigma (count_space B))", "assume X: \"X \\<in> Pow (trees B)\""], ["proof (state)\nthis:\n  X \\<in> Pow (trees B)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> sets (tree_sigma (count_space B)) \\<Longrightarrow>\n       x \\<in> Pow (trees B)\n 2. \\<And>x.\n       x \\<in> Pow (trees B) \\<Longrightarrow>\n       x \\<in> sets (tree_sigma (count_space B))", "have \"{t} \\<in> sets (tree_sigma (count_space B))\" if \"t \\<in> trees B\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. {t} \\<in> sets (tree_sigma (count_space B))", "using that"], ["proof (prove)\nusing this:\n  t \\<in> trees B\n\ngoal (1 subgoal):\n 1. {t} \\<in> sets (tree_sigma (count_space B))", "proof (induction t)"], ["proof (state)\ngoal (2 subgoals):\n 1. {\\<langle>\\<rangle>} \\<in> sets (tree_sigma (count_space B))\n 2. \\<And>l r v.\n       \\<lbrakk>l \\<in> trees B;\n        {l} \\<in> sets (tree_sigma (count_space B)); r \\<in> trees B;\n        {r} \\<in> sets (tree_sigma (count_space B)); v \\<in> B\\<rbrakk>\n       \\<Longrightarrow> {\\<langle>l, v, r\\<rangle>}\n                         \\<in> sets (tree_sigma (count_space B))", "case (2 l r x)"], ["proof (state)\nthis:\n  l \\<in> trees B\n  r \\<in> trees B\n  x \\<in> B\n  {l} \\<in> sets (tree_sigma (count_space B))\n  {r} \\<in> sets (tree_sigma (count_space B))\n\ngoal (2 subgoals):\n 1. {\\<langle>\\<rangle>} \\<in> sets (tree_sigma (count_space B))\n 2. \\<And>l r v.\n       \\<lbrakk>l \\<in> trees B;\n        {l} \\<in> sets (tree_sigma (count_space B)); r \\<in> trees B;\n        {r} \\<in> sets (tree_sigma (count_space B)); v \\<in> B\\<rbrakk>\n       \\<Longrightarrow> {\\<langle>l, v, r\\<rangle>}\n                         \\<in> sets (tree_sigma (count_space B))", "hence \"{\\<langle>la, v, ra\\<rangle> |la v ra. (v, la, ra) \\<in> {x} \\<times> {l} \\<times> {r}}\n               \\<in> sets (tree_sigma (count_space B))\""], ["proof (prove)\nusing this:\n  l \\<in> trees B\n  r \\<in> trees B\n  x \\<in> B\n  {l} \\<in> sets (tree_sigma (count_space B))\n  {r} \\<in> sets (tree_sigma (count_space B))\n\ngoal (1 subgoal):\n 1. {\\<langle>la, v, ra\\<rangle> |la v ra.\n     (v, la, ra) \\<in> {x} \\<times> {l} \\<times> {r}}\n    \\<in> sets (tree_sigma (count_space B))", "by (intro Node_in_tree_sigma pair_measureI) auto"], ["proof (state)\nthis:\n  {\\<langle>la, v, ra\\<rangle> |la v ra.\n   (v, la, ra) \\<in> {x} \\<times> {l} \\<times> {r}}\n  \\<in> sets (tree_sigma (count_space B))\n\ngoal (2 subgoals):\n 1. {\\<langle>\\<rangle>} \\<in> sets (tree_sigma (count_space B))\n 2. \\<And>l r v.\n       \\<lbrakk>l \\<in> trees B;\n        {l} \\<in> sets (tree_sigma (count_space B)); r \\<in> trees B;\n        {r} \\<in> sets (tree_sigma (count_space B)); v \\<in> B\\<rbrakk>\n       \\<Longrightarrow> {\\<langle>l, v, r\\<rangle>}\n                         \\<in> sets (tree_sigma (count_space B))", "thus ?case"], ["proof (prove)\nusing this:\n  {\\<langle>la, v, ra\\<rangle> |la v ra.\n   (v, la, ra) \\<in> {x} \\<times> {l} \\<times> {r}}\n  \\<in> sets (tree_sigma (count_space B))\n\ngoal (1 subgoal):\n 1. {\\<langle>l, x, r\\<rangle>} \\<in> sets (tree_sigma (count_space B))", "by simp"], ["proof (state)\nthis:\n  {\\<langle>l, x, r\\<rangle>} \\<in> sets (tree_sigma (count_space B))\n\ngoal (1 subgoal):\n 1. {\\<langle>\\<rangle>} \\<in> sets (tree_sigma (count_space B))", "qed simp_all"], ["proof (state)\nthis:\n  ?t \\<in> trees B \\<Longrightarrow>\n  {?t} \\<in> sets (tree_sigma (count_space B))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> sets (tree_sigma (count_space B)) \\<Longrightarrow>\n       x \\<in> Pow (trees B)\n 2. \\<And>x.\n       x \\<in> Pow (trees B) \\<Longrightarrow>\n       x \\<in> sets (tree_sigma (count_space B))", "with X"], ["proof (chain)\npicking this:\n  X \\<in> Pow (trees B)\n  ?t \\<in> trees B \\<Longrightarrow>\n  {?t} \\<in> sets (tree_sigma (count_space B))", "have \"(\\<Union>t\\<in>X. {t}) \\<in> sets (tree_sigma (count_space B))\""], ["proof (prove)\nusing this:\n  X \\<in> Pow (trees B)\n  ?t \\<in> trees B \\<Longrightarrow>\n  {?t} \\<in> sets (tree_sigma (count_space B))\n\ngoal (1 subgoal):\n 1. (\\<Union>t\\<in>X. {t}) \\<in> sets (tree_sigma (count_space B))", "by (intro sets.countable_UN' countable_subset[OF _ countable_trees[OF assms]]) auto"], ["proof (state)\nthis:\n  (\\<Union>t\\<in>X. {t}) \\<in> sets (tree_sigma (count_space B))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> sets (tree_sigma (count_space B)) \\<Longrightarrow>\n       x \\<in> Pow (trees B)\n 2. \\<And>x.\n       x \\<in> Pow (trees B) \\<Longrightarrow>\n       x \\<in> sets (tree_sigma (count_space B))", "also"], ["proof (state)\nthis:\n  (\\<Union>t\\<in>X. {t}) \\<in> sets (tree_sigma (count_space B))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> sets (tree_sigma (count_space B)) \\<Longrightarrow>\n       x \\<in> Pow (trees B)\n 2. \\<And>x.\n       x \\<in> Pow (trees B) \\<Longrightarrow>\n       x \\<in> sets (tree_sigma (count_space B))", "have \"(\\<Union>t\\<in>X. {t}) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>t\\<in>X. {t}) = X", "by blast"], ["proof (state)\nthis:\n  (\\<Union>t\\<in>X. {t}) = X\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> sets (tree_sigma (count_space B)) \\<Longrightarrow>\n       x \\<in> Pow (trees B)\n 2. \\<And>x.\n       x \\<in> Pow (trees B) \\<Longrightarrow>\n       x \\<in> sets (tree_sigma (count_space B))", "finally"], ["proof (chain)\npicking this:\n  X \\<in> sets (tree_sigma (count_space B))", "show \"X \\<in> sets (tree_sigma (count_space B))\""], ["proof (prove)\nusing this:\n  X \\<in> sets (tree_sigma (count_space B))\n\ngoal (1 subgoal):\n 1. X \\<in> sets (tree_sigma (count_space B))", "."], ["proof (state)\nthis:\n  X \\<in> sets (tree_sigma (count_space B))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sets (tree_sigma (count_space B)) \\<Longrightarrow>\n       x \\<in> Pow (trees B)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sets (tree_sigma (count_space B)) \\<Longrightarrow>\n       x \\<in> Pow (trees B)", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sets (tree_sigma (count_space B)) \\<Longrightarrow>\n       x \\<in> Pow (trees B)", "assume \"X \\<in> sets (tree_sigma (count_space B))\""], ["proof (state)\nthis:\n  X \\<in> sets (tree_sigma (count_space B))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> sets (tree_sigma (count_space B)) \\<Longrightarrow>\n       x \\<in> Pow (trees B)", "from sets.sets_into_space[OF this]"], ["proof (chain)\npicking this:\n  X \\<subseteq> space (tree_sigma (count_space B))", "show \"X \\<in> Pow (trees B)\""], ["proof (prove)\nusing this:\n  X \\<subseteq> space (tree_sigma (count_space B))\n\ngoal (1 subgoal):\n 1. X \\<in> Pow (trees B)", "by (simp add: space_tree_sigma)"], ["proof (state)\nthis:\n  X \\<in> Pow (trees B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma height_primrec: \"height = rec_tree 0 (\\<lambda>_ _ _ a b. Suc (max a b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. height = rec_tree 0 (\\<lambda>_ _ _ a b. Suc (max a b))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. height x = rec_tree 0 (\\<lambda>_ _ _ a b. Suc (max a b)) x", "fix t :: \"'a tree\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. height x = rec_tree 0 (\\<lambda>_ _ _ a b. Suc (max a b)) x", "show \"height t = rec_tree 0 (\\<lambda>_ _ _ a b. Suc (max a b)) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. height t = rec_tree 0 (\\<lambda>_ _ _ a b. Suc (max a b)) t", "by (induction t) simp_all"], ["proof (state)\nthis:\n  height t = rec_tree 0 (\\<lambda>_ _ _ a b. Suc (max a b)) t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ipl_primrec: \"ipl = rec_tree 0 (\\<lambda>l _ r a b. size l + size r + a + b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipl = rec_tree 0 (\\<lambda>l _ r a. (+) (size l + size r + a))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       ipl x = rec_tree 0 (\\<lambda>l _ r a. (+) (size l + size r + a)) x", "fix t :: \"'a tree\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       ipl x = rec_tree 0 (\\<lambda>l _ r a. (+) (size l + size r + a)) x", "show \"ipl t = rec_tree 0 (\\<lambda>l _ r a b. size l + size r + a + b) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipl t = rec_tree 0 (\\<lambda>l _ r a. (+) (size l + size r + a)) t", "by (induction t) auto"], ["proof (state)\nthis:\n  ipl t = rec_tree 0 (\\<lambda>l _ r a. (+) (size l + size r + a)) t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma size_primrec: \"size = rec_tree 0 (\\<lambda>_ _ _ a b. 1 + a + b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size = rec_tree 0 (\\<lambda>_ _ _ a. (+) (1 + a))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. size x = rec_tree 0 (\\<lambda>_ _ _ a. (+) (1 + a)) x", "fix t :: \"'a tree\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. size x = rec_tree 0 (\\<lambda>_ _ _ a. (+) (1 + a)) x", "show \"size t = rec_tree 0 (\\<lambda>_ _ _ a b. 1 + a + b) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size t = rec_tree 0 (\\<lambda>_ _ _ a. (+) (1 + a)) t", "by (induction t) auto"], ["proof (state)\nthis:\n  size t = rec_tree 0 (\\<lambda>_ _ _ a. (+) (1 + a)) t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ipl_map_tree[simp]: \"ipl (map_tree f t) = ipl t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipl (map_tree f t) = ipl t", "by (induction t) auto"], ["", "lemma set_pmf_random_bst: \"finite A \\<Longrightarrow> set_pmf (random_bst A) \\<subseteq> trees A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow> set_pmf (random_bst A) \\<subseteq> trees A", "by (subst random_bst_altdef) \n     (auto intro!: bst_of_list_trees simp add: bst_of_list_trees permutations_of_setD)"], ["", "lemma trees_mono: \"A \\<subseteq> B \\<Longrightarrow> trees A \\<subseteq> trees B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> B \\<Longrightarrow> trees A \\<subseteq> trees B", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<subseteq> B; x \\<in> trees A\\<rbrakk>\n       \\<Longrightarrow> x \\<in> trees B", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<subseteq> B; x \\<in> trees A\\<rbrakk>\n       \\<Longrightarrow> x \\<in> trees B", "assume \"A \\<subseteq> B\" \"t \\<in> trees A\""], ["proof (state)\nthis:\n  A \\<subseteq> B\n  t \\<in> trees A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<subseteq> B; x \\<in> trees A\\<rbrakk>\n       \\<Longrightarrow> x \\<in> trees B", "then"], ["proof (chain)\npicking this:\n  A \\<subseteq> B\n  t \\<in> trees A", "show \"t \\<in> trees B\""], ["proof (prove)\nusing this:\n  A \\<subseteq> B\n  t \\<in> trees A\n\ngoal (1 subgoal):\n 1. t \\<in> trees B", "by (induction t) auto"], ["proof (state)\nthis:\n  t \\<in> trees B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ins_primrec:\n  \"ins k (p::real) t = rec_tree \n    (Node Leaf (k,p) Leaf)\n    (\\<lambda>l z r l' r'. case z of (k1, p1) \\<Rightarrow>\n      if k < k1 then\n        (case l' of\n          Leaf \\<Rightarrow> Leaf\n        | Node l2 (k2,p2) r2 \\<Rightarrow> \n            if 0 \\<le> p2 - p1 then Node (Node l2 (k2,p2) r2) (k1,p1) r\n            else Node l2 (k2,p2) (Node r2 (k1,p1) r))\n      else if k > k1 then\n        (case r' of\n          Leaf \\<Rightarrow> Leaf\n        | Node l2 (k2,p2) r2 \\<Rightarrow>\n            if 0 \\<le> p2 - p1 then Node l (k1,p1) (Node l2 (k2,p2) r2)\n            else Node (Node l (k1,p1) l2) (k2,p2) r2)\n      else Node l (k1,p1) r\n      ) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ins k p t =\n    rec_tree\n     \\<langle>\\<langle>\\<rangle>, (k, p), \\<langle>\\<rangle>\\<rangle>\n     (\\<lambda>l z r l' r'.\n         case z of\n         (k1, p1) \\<Rightarrow>\n           if k < k1\n           then case l' of\n                \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n                | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                    if 0 \\<le> p2 - p1\n                    then \\<langle>\\<langle>l2, (k2, p2), r2\\<rangle>,\n                          (k1, p1), r\\<rangle>\n                    else \\<langle>l2, (k2, p2),\n                          \\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n           else if k1 < k\n                then case r' of\n                     \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n                     | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                         if 0 \\<le> p2 - p1\n                         then \\<langle>l, (k1, p1),\n                               \\<langle>l2, (k2, p2), r2\\<rangle>\\<rangle>\n                         else \\<langle>\\<langle>l, (k1, p1), l2\\<rangle>,\n                               (k2, p2), r2\\<rangle>\n                else \\<langle>l, (k1, p1), r\\<rangle>)\n     t", "proof (induction k p t rule: ins.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k p.\n       ins k p \\<langle>\\<rangle> =\n       rec_tree\n        \\<langle>\\<langle>\\<rangle>, (k, p), \\<langle>\\<rangle>\\<rangle>\n        (\\<lambda>l z r l' r'.\n            case z of\n            (k1, p1) \\<Rightarrow>\n              if k < k1\n              then case l' of\n                   \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n                   | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                       if 0 \\<le> p2 - p1\n                       then \\<langle>\\<langle>l2, (k2, p2), r2\\<rangle>,\n                             (k1, p1), r\\<rangle>\n                       else \\<langle>l2, (k2, p2),\n                             \\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n              else if k1 < k\n                   then case r' of\n                        \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n                        | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                            if 0 \\<le> p2 - p1\n                            then \\<langle>l, (k1, p1),\n                                  \\<langle>l2, (k2, p2),\n                                   r2\\<rangle>\\<rangle>\n                            else \\<langle>\\<langle>l, (k1, p1), l2\\<rangle>,\n                                  (k2, p2), r2\\<rangle>\n                   else \\<langle>l, (k1, p1), r\\<rangle>)\n        \\<langle>\\<rangle>\n 2. \\<And>k p l k1 p1 r.\n       \\<lbrakk>k < k1 \\<Longrightarrow>\n                ins k p l =\n                rec_tree\n                 \\<langle>\\<langle>\\<rangle>, (k, p),\n                  \\<langle>\\<rangle>\\<rangle>\n                 (\\<lambda>l z r l' r'.\n                     case z of\n                     (k1, p1) \\<Rightarrow>\n                       if k < k1\n                       then case l' of\n                            \\<langle>\\<rangle> \\<Rightarrow>\n                              \\<langle>\\<rangle>\n                            | \\<langle>l2, (k2, p2),\n                               r2\\<rangle> \\<Rightarrow>\n                                if 0 \\<le> p2 - p1\n                                then \\<langle>\\<langle>l2, (k2, p2),\n         r2\\<rangle>,\n(k1, p1), r\\<rangle>\n                                else \\<langle>l2, (k2, p2),\n\\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n                       else if k1 < k\n                            then case r' of\n                                 \\<langle>\\<rangle> \\<Rightarrow>\n                                   \\<langle>\\<rangle>\n                                 | \\<langle>l2, (k2, p2),\n                                    r2\\<rangle> \\<Rightarrow>\n                                     if 0 \\<le> p2 - p1\n                                     then \\<langle>l, (k1, p1),\n     \\<langle>l2, (k2, p2), r2\\<rangle>\\<rangle>\n                                     else \\<langle>\\<langle>l, (k1, p1),\n              l2\\<rangle>,\n     (k2, p2), r2\\<rangle>\n                            else \\<langle>l, (k1, p1), r\\<rangle>)\n                 l;\n        \\<lbrakk>\\<not> k < k1; k1 < k\\<rbrakk>\n        \\<Longrightarrow> ins k p r =\n                          rec_tree\n                           \\<langle>\\<langle>\\<rangle>, (k, p),\n                            \\<langle>\\<rangle>\\<rangle>\n                           (\\<lambda>l z r l' r'.\n                               case z of\n                               (k1, p1) \\<Rightarrow>\n                                 if k < k1\n                                 then case l' of\n\\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n| \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n    if 0 \\<le> p2 - p1\n    then \\<langle>\\<langle>l2, (k2, p2), r2\\<rangle>, (k1, p1), r\\<rangle>\n    else \\<langle>l2, (k2, p2), \\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n                                 else if k1 < k\nthen case r' of \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n     | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n         if 0 \\<le> p2 - p1\n         then \\<langle>l, (k1, p1),\n               \\<langle>l2, (k2, p2), r2\\<rangle>\\<rangle>\n         else \\<langle>\\<langle>l, (k1, p1), l2\\<rangle>, (k2, p2),\n               r2\\<rangle>\nelse \\<langle>l, (k1, p1), r\\<rangle>)\n                           r\\<rbrakk>\n       \\<Longrightarrow> ins k p \\<langle>l, (k1, p1), r\\<rangle> =\n                         rec_tree\n                          \\<langle>\\<langle>\\<rangle>, (k, p),\n                           \\<langle>\\<rangle>\\<rangle>\n                          (\\<lambda>l z r l' r'.\n                              case z of\n                              (k1, p1) \\<Rightarrow>\n                                if k < k1\n                                then case l' of\n                                     \\<langle>\\<rangle> \\<Rightarrow>\n \\<langle>\\<rangle>\n                                     | \\<langle>l2, (k2, p2),\n  r2\\<rangle> \\<Rightarrow>\n   if 0 \\<le> p2 - p1\n   then \\<langle>\\<langle>l2, (k2, p2), r2\\<rangle>, (k1, p1), r\\<rangle>\n   else \\<langle>l2, (k2, p2), \\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n                                else if k1 < k\n                                     then case r' of\n    \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n    | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n        if 0 \\<le> p2 - p1\n        then \\<langle>l, (k1, p1),\n              \\<langle>l2, (k2, p2), r2\\<rangle>\\<rangle>\n        else \\<langle>\\<langle>l, (k1, p1), l2\\<rangle>, (k2, p2),\n              r2\\<rangle>\n                                     else \\<langle>l, (k1, p1), r\\<rangle>)\n                          \\<langle>l, (k1, p1), r\\<rangle>", "case (2 k p l k1 p1 r)"], ["proof (state)\nthis:\n  k < k1 \\<Longrightarrow>\n  ins k p l =\n  rec_tree \\<langle>\\<langle>\\<rangle>, (k, p), \\<langle>\\<rangle>\\<rangle>\n   (\\<lambda>l z r l' r'.\n       case z of\n       (k1, p1) \\<Rightarrow>\n         if k < k1\n         then case l' of \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n              | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                  if 0 \\<le> p2 - p1\n                  then \\<langle>\\<langle>l2, (k2, p2), r2\\<rangle>,\n                        (k1, p1), r\\<rangle>\n                  else \\<langle>l2, (k2, p2),\n                        \\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n         else if k1 < k\n              then case r' of\n                   \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n                   | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                       if 0 \\<le> p2 - p1\n                       then \\<langle>l, (k1, p1),\n                             \\<langle>l2, (k2, p2), r2\\<rangle>\\<rangle>\n                       else \\<langle>\\<langle>l, (k1, p1), l2\\<rangle>,\n                             (k2, p2), r2\\<rangle>\n              else \\<langle>l, (k1, p1), r\\<rangle>)\n   l\n  \\<lbrakk>\\<not> k < k1; k1 < k\\<rbrakk>\n  \\<Longrightarrow> ins k p r =\n                    rec_tree\n                     \\<langle>\\<langle>\\<rangle>, (k, p),\n                      \\<langle>\\<rangle>\\<rangle>\n                     (\\<lambda>l z r l' r'.\n                         case z of\n                         (k1, p1) \\<Rightarrow>\n                           if k < k1\n                           then case l' of\n                                \\<langle>\\<rangle> \\<Rightarrow>\n                                  \\<langle>\\<rangle>\n                                | \\<langle>l2, (k2, p2),\n                                   r2\\<rangle> \\<Rightarrow>\n                                    if 0 \\<le> p2 - p1\n                                    then \\<langle>\\<langle>l2, (k2, p2),\n             r2\\<rangle>,\n    (k1, p1), r\\<rangle>\n                                    else \\<langle>l2, (k2, p2),\n    \\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n                           else if k1 < k\n                                then case r' of\n                                     \\<langle>\\<rangle> \\<Rightarrow>\n \\<langle>\\<rangle>\n                                     | \\<langle>l2, (k2, p2),\n  r2\\<rangle> \\<Rightarrow>\n   if 0 \\<le> p2 - p1\n   then \\<langle>l, (k1, p1), \\<langle>l2, (k2, p2), r2\\<rangle>\\<rangle>\n   else \\<langle>\\<langle>l, (k1, p1), l2\\<rangle>, (k2, p2), r2\\<rangle>\n                                else \\<langle>l, (k1, p1), r\\<rangle>)\n                     r\n\ngoal (2 subgoals):\n 1. \\<And>k p.\n       ins k p \\<langle>\\<rangle> =\n       rec_tree\n        \\<langle>\\<langle>\\<rangle>, (k, p), \\<langle>\\<rangle>\\<rangle>\n        (\\<lambda>l z r l' r'.\n            case z of\n            (k1, p1) \\<Rightarrow>\n              if k < k1\n              then case l' of\n                   \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n                   | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                       if 0 \\<le> p2 - p1\n                       then \\<langle>\\<langle>l2, (k2, p2), r2\\<rangle>,\n                             (k1, p1), r\\<rangle>\n                       else \\<langle>l2, (k2, p2),\n                             \\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n              else if k1 < k\n                   then case r' of\n                        \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n                        | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                            if 0 \\<le> p2 - p1\n                            then \\<langle>l, (k1, p1),\n                                  \\<langle>l2, (k2, p2),\n                                   r2\\<rangle>\\<rangle>\n                            else \\<langle>\\<langle>l, (k1, p1), l2\\<rangle>,\n                                  (k2, p2), r2\\<rangle>\n                   else \\<langle>l, (k1, p1), r\\<rangle>)\n        \\<langle>\\<rangle>\n 2. \\<And>k p l k1 p1 r.\n       \\<lbrakk>k < k1 \\<Longrightarrow>\n                ins k p l =\n                rec_tree\n                 \\<langle>\\<langle>\\<rangle>, (k, p),\n                  \\<langle>\\<rangle>\\<rangle>\n                 (\\<lambda>l z r l' r'.\n                     case z of\n                     (k1, p1) \\<Rightarrow>\n                       if k < k1\n                       then case l' of\n                            \\<langle>\\<rangle> \\<Rightarrow>\n                              \\<langle>\\<rangle>\n                            | \\<langle>l2, (k2, p2),\n                               r2\\<rangle> \\<Rightarrow>\n                                if 0 \\<le> p2 - p1\n                                then \\<langle>\\<langle>l2, (k2, p2),\n         r2\\<rangle>,\n(k1, p1), r\\<rangle>\n                                else \\<langle>l2, (k2, p2),\n\\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n                       else if k1 < k\n                            then case r' of\n                                 \\<langle>\\<rangle> \\<Rightarrow>\n                                   \\<langle>\\<rangle>\n                                 | \\<langle>l2, (k2, p2),\n                                    r2\\<rangle> \\<Rightarrow>\n                                     if 0 \\<le> p2 - p1\n                                     then \\<langle>l, (k1, p1),\n     \\<langle>l2, (k2, p2), r2\\<rangle>\\<rangle>\n                                     else \\<langle>\\<langle>l, (k1, p1),\n              l2\\<rangle>,\n     (k2, p2), r2\\<rangle>\n                            else \\<langle>l, (k1, p1), r\\<rangle>)\n                 l;\n        \\<lbrakk>\\<not> k < k1; k1 < k\\<rbrakk>\n        \\<Longrightarrow> ins k p r =\n                          rec_tree\n                           \\<langle>\\<langle>\\<rangle>, (k, p),\n                            \\<langle>\\<rangle>\\<rangle>\n                           (\\<lambda>l z r l' r'.\n                               case z of\n                               (k1, p1) \\<Rightarrow>\n                                 if k < k1\n                                 then case l' of\n\\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n| \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n    if 0 \\<le> p2 - p1\n    then \\<langle>\\<langle>l2, (k2, p2), r2\\<rangle>, (k1, p1), r\\<rangle>\n    else \\<langle>l2, (k2, p2), \\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n                                 else if k1 < k\nthen case r' of \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n     | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n         if 0 \\<le> p2 - p1\n         then \\<langle>l, (k1, p1),\n               \\<langle>l2, (k2, p2), r2\\<rangle>\\<rangle>\n         else \\<langle>\\<langle>l, (k1, p1), l2\\<rangle>, (k2, p2),\n               r2\\<rangle>\nelse \\<langle>l, (k1, p1), r\\<rangle>)\n                           r\\<rbrakk>\n       \\<Longrightarrow> ins k p \\<langle>l, (k1, p1), r\\<rangle> =\n                         rec_tree\n                          \\<langle>\\<langle>\\<rangle>, (k, p),\n                           \\<langle>\\<rangle>\\<rangle>\n                          (\\<lambda>l z r l' r'.\n                              case z of\n                              (k1, p1) \\<Rightarrow>\n                                if k < k1\n                                then case l' of\n                                     \\<langle>\\<rangle> \\<Rightarrow>\n \\<langle>\\<rangle>\n                                     | \\<langle>l2, (k2, p2),\n  r2\\<rangle> \\<Rightarrow>\n   if 0 \\<le> p2 - p1\n   then \\<langle>\\<langle>l2, (k2, p2), r2\\<rangle>, (k1, p1), r\\<rangle>\n   else \\<langle>l2, (k2, p2), \\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n                                else if k1 < k\n                                     then case r' of\n    \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n    | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n        if 0 \\<le> p2 - p1\n        then \\<langle>l, (k1, p1),\n              \\<langle>l2, (k2, p2), r2\\<rangle>\\<rangle>\n        else \\<langle>\\<langle>l, (k1, p1), l2\\<rangle>, (k2, p2),\n              r2\\<rangle>\n                                     else \\<langle>l, (k1, p1), r\\<rangle>)\n                          \\<langle>l, (k1, p1), r\\<rangle>", "thus ?case"], ["proof (prove)\nusing this:\n  k < k1 \\<Longrightarrow>\n  ins k p l =\n  rec_tree \\<langle>\\<langle>\\<rangle>, (k, p), \\<langle>\\<rangle>\\<rangle>\n   (\\<lambda>l z r l' r'.\n       case z of\n       (k1, p1) \\<Rightarrow>\n         if k < k1\n         then case l' of \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n              | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                  if 0 \\<le> p2 - p1\n                  then \\<langle>\\<langle>l2, (k2, p2), r2\\<rangle>,\n                        (k1, p1), r\\<rangle>\n                  else \\<langle>l2, (k2, p2),\n                        \\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n         else if k1 < k\n              then case r' of\n                   \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n                   | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                       if 0 \\<le> p2 - p1\n                       then \\<langle>l, (k1, p1),\n                             \\<langle>l2, (k2, p2), r2\\<rangle>\\<rangle>\n                       else \\<langle>\\<langle>l, (k1, p1), l2\\<rangle>,\n                             (k2, p2), r2\\<rangle>\n              else \\<langle>l, (k1, p1), r\\<rangle>)\n   l\n  \\<lbrakk>\\<not> k < k1; k1 < k\\<rbrakk>\n  \\<Longrightarrow> ins k p r =\n                    rec_tree\n                     \\<langle>\\<langle>\\<rangle>, (k, p),\n                      \\<langle>\\<rangle>\\<rangle>\n                     (\\<lambda>l z r l' r'.\n                         case z of\n                         (k1, p1) \\<Rightarrow>\n                           if k < k1\n                           then case l' of\n                                \\<langle>\\<rangle> \\<Rightarrow>\n                                  \\<langle>\\<rangle>\n                                | \\<langle>l2, (k2, p2),\n                                   r2\\<rangle> \\<Rightarrow>\n                                    if 0 \\<le> p2 - p1\n                                    then \\<langle>\\<langle>l2, (k2, p2),\n             r2\\<rangle>,\n    (k1, p1), r\\<rangle>\n                                    else \\<langle>l2, (k2, p2),\n    \\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n                           else if k1 < k\n                                then case r' of\n                                     \\<langle>\\<rangle> \\<Rightarrow>\n \\<langle>\\<rangle>\n                                     | \\<langle>l2, (k2, p2),\n  r2\\<rangle> \\<Rightarrow>\n   if 0 \\<le> p2 - p1\n   then \\<langle>l, (k1, p1), \\<langle>l2, (k2, p2), r2\\<rangle>\\<rangle>\n   else \\<langle>\\<langle>l, (k1, p1), l2\\<rangle>, (k2, p2), r2\\<rangle>\n                                else \\<langle>l, (k1, p1), r\\<rangle>)\n                     r\n\ngoal (1 subgoal):\n 1. ins k p \\<langle>l, (k1, p1), r\\<rangle> =\n    rec_tree\n     \\<langle>\\<langle>\\<rangle>, (k, p), \\<langle>\\<rangle>\\<rangle>\n     (\\<lambda>l z r l' r'.\n         case z of\n         (k1, p1) \\<Rightarrow>\n           if k < k1\n           then case l' of\n                \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n                | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                    if 0 \\<le> p2 - p1\n                    then \\<langle>\\<langle>l2, (k2, p2), r2\\<rangle>,\n                          (k1, p1), r\\<rangle>\n                    else \\<langle>l2, (k2, p2),\n                          \\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n           else if k1 < k\n                then case r' of\n                     \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n                     | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                         if 0 \\<le> p2 - p1\n                         then \\<langle>l, (k1, p1),\n                               \\<langle>l2, (k2, p2), r2\\<rangle>\\<rangle>\n                         else \\<langle>\\<langle>l, (k1, p1), l2\\<rangle>,\n                               (k2, p2), r2\\<rangle>\n                else \\<langle>l, (k1, p1), r\\<rangle>)\n     \\<langle>l, (k1, p1), r\\<rangle>", "by (cases \"k < k1\") (auto simp add: case_prod_beta ins_neq_Leaf split: tree.splits if_splits)"], ["proof (state)\nthis:\n  ins k p \\<langle>l, (k1, p1), r\\<rangle> =\n  rec_tree \\<langle>\\<langle>\\<rangle>, (k, p), \\<langle>\\<rangle>\\<rangle>\n   (\\<lambda>l z r l' r'.\n       case z of\n       (k1, p1) \\<Rightarrow>\n         if k < k1\n         then case l' of \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n              | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                  if 0 \\<le> p2 - p1\n                  then \\<langle>\\<langle>l2, (k2, p2), r2\\<rangle>,\n                        (k1, p1), r\\<rangle>\n                  else \\<langle>l2, (k2, p2),\n                        \\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n         else if k1 < k\n              then case r' of\n                   \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n                   | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                       if 0 \\<le> p2 - p1\n                       then \\<langle>l, (k1, p1),\n                             \\<langle>l2, (k2, p2), r2\\<rangle>\\<rangle>\n                       else \\<langle>\\<langle>l, (k1, p1), l2\\<rangle>,\n                             (k2, p2), r2\\<rangle>\n              else \\<langle>l, (k1, p1), r\\<rangle>)\n   \\<langle>l, (k1, p1), r\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>k p.\n       ins k p \\<langle>\\<rangle> =\n       rec_tree\n        \\<langle>\\<langle>\\<rangle>, (k, p), \\<langle>\\<rangle>\\<rangle>\n        (\\<lambda>l z r l' r'.\n            case z of\n            (k1, p1) \\<Rightarrow>\n              if k < k1\n              then case l' of\n                   \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n                   | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                       if 0 \\<le> p2 - p1\n                       then \\<langle>\\<langle>l2, (k2, p2), r2\\<rangle>,\n                             (k1, p1), r\\<rangle>\n                       else \\<langle>l2, (k2, p2),\n                             \\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n              else if k1 < k\n                   then case r' of\n                        \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n                        | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                            if 0 \\<le> p2 - p1\n                            then \\<langle>l, (k1, p1),\n                                  \\<langle>l2, (k2, p2),\n                                   r2\\<rangle>\\<rangle>\n                            else \\<langle>\\<langle>l, (k1, p1), l2\\<rangle>,\n                                  (k2, p2), r2\\<rangle>\n                   else \\<langle>l, (k1, p1), r\\<rangle>)\n        \\<langle>\\<rangle>", "qed auto"], ["", "lemma measurable_less_count_space [measurable (raw)]:\n  assumes \"countable A\"\n  assumes [measurable]: \"a \\<in> B \\<rightarrow>\\<^sub>M count_space A\"\n  assumes [measurable]: \"b \\<in> B \\<rightarrow>\\<^sub>M count_space A\"\n  shows   \"Measurable.pred B (\\<lambda>x. a x < b x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred B (\\<lambda>x. a x < b x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Measurable.pred B (\\<lambda>x. a x < b x)", "have \"Measurable.pred (count_space (A \\<times> A)) (\\<lambda>x. fst x < snd x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred (count_space (A \\<times> A)) (\\<lambda>x. fst x < snd x)", "by simp"], ["proof (state)\nthis:\n  Measurable.pred (count_space (A \\<times> A)) (\\<lambda>x. fst x < snd x)\n\ngoal (1 subgoal):\n 1. Measurable.pred B (\\<lambda>x. a x < b x)", "also"], ["proof (state)\nthis:\n  Measurable.pred (count_space (A \\<times> A)) (\\<lambda>x. fst x < snd x)\n\ngoal (1 subgoal):\n 1. Measurable.pred B (\\<lambda>x. a x < b x)", "have \"count_space (A \\<times> A) = count_space A \\<Otimes>\\<^sub>M count_space A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count_space (A \\<times> A) =\n    count_space A \\<Otimes>\\<^sub>M count_space A", "using assms(1)"], ["proof (prove)\nusing this:\n  countable A\n\ngoal (1 subgoal):\n 1. count_space (A \\<times> A) =\n    count_space A \\<Otimes>\\<^sub>M count_space A", "by (simp add: pair_measure_countable)"], ["proof (state)\nthis:\n  count_space (A \\<times> A) = count_space A \\<Otimes>\\<^sub>M count_space A\n\ngoal (1 subgoal):\n 1. Measurable.pred B (\\<lambda>x. a x < b x)", "finally"], ["proof (chain)\npicking this:\n  Measurable.pred (count_space A \\<Otimes>\\<^sub>M count_space A)\n   (\\<lambda>x. fst x < snd x)", "have \"Measurable.pred B ((\\<lambda>x. fst x < snd x) \\<circ> (\\<lambda>x. (a x, b x)))\""], ["proof (prove)\nusing this:\n  Measurable.pred (count_space A \\<Otimes>\\<^sub>M count_space A)\n   (\\<lambda>x. fst x < snd x)\n\ngoal (1 subgoal):\n 1. Measurable.pred B\n     ((\\<lambda>x. fst x < snd x) \\<circ> (\\<lambda>x. (a x, b x)))", "by measurable"], ["proof (state)\nthis:\n  Measurable.pred B\n   ((\\<lambda>x. fst x < snd x) \\<circ> (\\<lambda>x. (a x, b x)))\n\ngoal (1 subgoal):\n 1. Measurable.pred B (\\<lambda>x. a x < b x)", "thus ?thesis"], ["proof (prove)\nusing this:\n  Measurable.pred B\n   ((\\<lambda>x. fst x < snd x) \\<circ> (\\<lambda>x. (a x, b x)))\n\ngoal (1 subgoal):\n 1. Measurable.pred B (\\<lambda>x. a x < b x)", "by (simp add: o_def)"], ["proof (state)\nthis:\n  Measurable.pred B (\\<lambda>x. a x < b x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma measurable_ins [measurable (raw)]:\n  assumes [measurable]: \"countable A\"\n  assumes [measurable]: \"k \\<in> B \\<rightarrow>\\<^sub>M count_space A\"\n  assumes [measurable]: \"x \\<in> B \\<rightarrow>\\<^sub>M (lborel :: real measure)\"\n  assumes [measurable]: \"t \\<in> B \\<rightarrow>\\<^sub>M tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)\"\n  shows   \"(\\<lambda>y. ins (k y) (x y) (t y)) \\<in> B \\<rightarrow>\\<^sub>M tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. ins (k y) (x y) (t y))\n    \\<in> B \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)", "unfolding ins_primrec"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        rec_tree\n         \\<langle>\\<langle>\\<rangle>, (k y, x y),\n          \\<langle>\\<rangle>\\<rangle>\n         (\\<lambda>l z r l' r'.\n             case z of\n             (k1, p1) \\<Rightarrow>\n               if k y < k1\n               then case l' of\n                    \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n                    | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                        if 0 \\<le> p2 - p1\n                        then \\<langle>\\<langle>l2, (k2, p2), r2\\<rangle>,\n                              (k1, p1), r\\<rangle>\n                        else \\<langle>l2, (k2, p2),\n                              \\<langle>r2, (k1, p1), r\\<rangle>\\<rangle>\n               else if k1 < k y\n                    then case r' of\n                         \\<langle>\\<rangle> \\<Rightarrow> \\<langle>\\<rangle>\n                         | \\<langle>l2, (k2, p2), r2\\<rangle> \\<Rightarrow>\n                             if 0 \\<le> p2 - p1\n                             then \\<langle>l, (k1, p1),\n                                   \\<langle>l2, (k2, p2),\n                                    r2\\<rangle>\\<rangle>\n                             else \\<langle>\\<langle>l, (k1, p1),\n      l2\\<rangle>,\n                                   (k2, p2), r2\\<rangle>\n                    else \\<langle>l, (k1, p1), r\\<rangle>)\n         (t y))\n    \\<in> B \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)", "by measurable"], ["", "lemma map_tree_primrec: \"map_tree f t = rec_tree \\<langle>\\<rangle> (\\<lambda>l a r l' r'.  \\<langle>l', f a, r'\\<rangle>) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_tree f t =\n    rec_tree \\<langle>\\<rangle> (\\<lambda>l a r l'. Node l' (f a)) t", "by (induction t) auto"], ["", "definition \\<U> where \"\\<U> = (\\<lambda>a b::real. uniform_measure lborel {a..b})\""], ["", "declare \\<U>_def[simp]"], ["", "fun insR:: \"'a::linorder \\<Rightarrow> ('a \\<times> real) tree \\<Rightarrow> 'a set \\<Rightarrow> ('a \\<times> real) tree measure\" where\n  \"insR x t A  = distr (\\<U> 0 1) (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)) (\\<lambda>p. ins x p t)\""], ["", "fun rinss :: \"'a::linorder list \\<Rightarrow> ('a \\<times> real) tree \\<Rightarrow> 'a set \\<Rightarrow> ('a \\<times> real) tree measure\" where\n  \"rinss [] t A =  return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)) t\" |\n  \"rinss (x#xs) t A = insR x t A \\<bind> (\\<lambda>t. rinss xs t A)\""], ["", "lemma sets_rinss':\n  assumes \"countable B\" \"set ys \\<subseteq> B\"\n  shows \"t \\<in> trees (B \\<times> UNIV) \\<Longrightarrow> sets (rinss ys t B) = sets (tree_sigma (count_space B \\<Otimes>\\<^sub>M lborel))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> trees (B \\<times> UNIV) \\<Longrightarrow>\n    sets (rinss ys t B) =\n    sets (tree_sigma (count_space B \\<Otimes>\\<^sub>M lborel))", "using assms"], ["proof (prove)\nusing this:\n  countable B\n  set ys \\<subseteq> B\n\ngoal (1 subgoal):\n 1. t \\<in> trees (B \\<times> UNIV) \\<Longrightarrow>\n    sets (rinss ys t B) =\n    sets (tree_sigma (count_space B \\<Otimes>\\<^sub>M lborel))", "proof(induction ys arbitrary: t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>t \\<in> trees (B \\<times> UNIV); countable B;\n        set [] \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> sets (rinss [] t B) =\n                         sets\n                          (tree_sigma\n                            (count_space B \\<Otimes>\\<^sub>M lborel))\n 2. \\<And>a ys t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>t \\<in> trees (B \\<times> UNIV); countable B;\n                    set ys \\<subseteq> B\\<rbrakk>\n                   \\<Longrightarrow> sets (rinss ys t B) =\n                                     sets\n(tree_sigma (count_space B \\<Otimes>\\<^sub>M lborel));\n        t \\<in> trees (B \\<times> UNIV); countable B;\n        set (a # ys) \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> sets (rinss (a # ys) t B) =\n                         sets\n                          (tree_sigma\n                            (count_space B \\<Otimes>\\<^sub>M lborel))", "case (Cons y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>?t \\<in> trees (B \\<times> UNIV); countable B;\n   set ys \\<subseteq> B\\<rbrakk>\n  \\<Longrightarrow> sets (rinss ys ?t B) =\n                    sets\n                     (tree_sigma (count_space B \\<Otimes>\\<^sub>M lborel))\n  t \\<in> trees (B \\<times> UNIV)\n  countable B\n  set (y # ys) \\<subseteq> B\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>t \\<in> trees (B \\<times> UNIV); countable B;\n        set [] \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> sets (rinss [] t B) =\n                         sets\n                          (tree_sigma\n                            (count_space B \\<Otimes>\\<^sub>M lborel))\n 2. \\<And>a ys t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>t \\<in> trees (B \\<times> UNIV); countable B;\n                    set ys \\<subseteq> B\\<rbrakk>\n                   \\<Longrightarrow> sets (rinss ys t B) =\n                                     sets\n(tree_sigma (count_space B \\<Otimes>\\<^sub>M lborel));\n        t \\<in> trees (B \\<times> UNIV); countable B;\n        set (a # ys) \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> sets (rinss (a # ys) t B) =\n                         sets\n                          (tree_sigma\n                            (count_space B \\<Otimes>\\<^sub>M lborel))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?t \\<in> trees (B \\<times> UNIV); countable B;\n   set ys \\<subseteq> B\\<rbrakk>\n  \\<Longrightarrow> sets (rinss ys ?t B) =\n                    sets\n                     (tree_sigma (count_space B \\<Otimes>\\<^sub>M lborel))\n  t \\<in> trees (B \\<times> UNIV)\n  countable B\n  set (y # ys) \\<subseteq> B", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t \\<in> trees (B \\<times> UNIV); countable B;\n   set ys \\<subseteq> B\\<rbrakk>\n  \\<Longrightarrow> sets (rinss ys ?t B) =\n                    sets\n                     (tree_sigma (count_space B \\<Otimes>\\<^sub>M lborel))\n  t \\<in> trees (B \\<times> UNIV)\n  countable B\n  set (y # ys) \\<subseteq> B\n\ngoal (1 subgoal):\n 1. sets (rinss (y # ys) t B) =\n    sets (tree_sigma (count_space B \\<Otimes>\\<^sub>M lborel))", "by (subst rinss.simps, subst sets_bind) (auto simp add: space_tree_sigma space_pair_measure)"], ["proof (state)\nthis:\n  sets (rinss (y # ys) t B) =\n  sets (tree_sigma (count_space B \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>t \\<in> trees (B \\<times> UNIV); countable B;\n        set [] \\<subseteq> B\\<rbrakk>\n       \\<Longrightarrow> sets (rinss [] t B) =\n                         sets\n                          (tree_sigma\n                            (count_space B \\<Otimes>\\<^sub>M lborel))", "qed auto"], ["", "lemma measurable_foldl [measurable]:\n  assumes \"f \\<in> A \\<rightarrow>\\<^sub>M B\" \"set xs \\<subseteq> space C\"\n  assumes \"\\<And>c. c \\<in> set xs \\<Longrightarrow> (\\<lambda>(a,b). g a b c) \\<in> (A \\<Otimes>\\<^sub>M B) \\<rightarrow>\\<^sub>M B\"\n  shows   \"(\\<lambda>x. foldl (g x) (f x) xs) \\<in> A \\<rightarrow>\\<^sub>M B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. foldl (g x) (f x) xs) \\<in> A \\<rightarrow>\\<^sub>M B", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> A \\<rightarrow>\\<^sub>M B\n  set xs \\<subseteq> space C\n  ?c \\<in> set xs \\<Longrightarrow>\n  (\\<lambda>(a, b). g a b ?c)\n  \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. foldl (g x) (f x) xs) \\<in> A \\<rightarrow>\\<^sub>M B", "proof (induction xs arbitrary: f)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> A \\<rightarrow>\\<^sub>M B;\n        set [] \\<subseteq> space C;\n        \\<And>c.\n           c \\<in> set [] \\<Longrightarrow>\n           (\\<lambda>(a, b). g a b c)\n           \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) [])\n                         \\<in> A \\<rightarrow>\\<^sub>M B\n 2. \\<And>a xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>f \\<in> A \\<rightarrow>\\<^sub>M B;\n                    set xs \\<subseteq> space C;\n                    \\<And>c.\n                       c \\<in> set xs \\<Longrightarrow>\n                       (\\<lambda>(a, b). g a b c)\n                       \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M\n                             B\\<rbrakk>\n                   \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) xs)\n                                     \\<in> A \\<rightarrow>\\<^sub>M B;\n        f \\<in> A \\<rightarrow>\\<^sub>M B; set (a # xs) \\<subseteq> space C;\n        \\<And>c.\n           c \\<in> set (a # xs) \\<Longrightarrow>\n           (\\<lambda>(a, b). g a b c)\n           \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) (a # xs))\n                         \\<in> A \\<rightarrow>\\<^sub>M B", "case Nil"], ["proof (state)\nthis:\n  f \\<in> A \\<rightarrow>\\<^sub>M B\n  set [] \\<subseteq> space C\n  ?c \\<in> set [] \\<Longrightarrow>\n  (\\<lambda>a. case a of (a, b) \\<Rightarrow> g a b ?c)\n  \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> A \\<rightarrow>\\<^sub>M B;\n        set [] \\<subseteq> space C;\n        \\<And>c.\n           c \\<in> set [] \\<Longrightarrow>\n           (\\<lambda>(a, b). g a b c)\n           \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) [])\n                         \\<in> A \\<rightarrow>\\<^sub>M B\n 2. \\<And>a xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>f \\<in> A \\<rightarrow>\\<^sub>M B;\n                    set xs \\<subseteq> space C;\n                    \\<And>c.\n                       c \\<in> set xs \\<Longrightarrow>\n                       (\\<lambda>(a, b). g a b c)\n                       \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M\n                             B\\<rbrakk>\n                   \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) xs)\n                                     \\<in> A \\<rightarrow>\\<^sub>M B;\n        f \\<in> A \\<rightarrow>\\<^sub>M B; set (a # xs) \\<subseteq> space C;\n        \\<And>c.\n           c \\<in> set (a # xs) \\<Longrightarrow>\n           (\\<lambda>(a, b). g a b c)\n           \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) (a # xs))\n                         \\<in> A \\<rightarrow>\\<^sub>M B", "thus ?case"], ["proof (prove)\nusing this:\n  f \\<in> A \\<rightarrow>\\<^sub>M B\n  set [] \\<subseteq> space C\n  ?c \\<in> set [] \\<Longrightarrow>\n  (\\<lambda>a. case a of (a, b) \\<Rightarrow> g a b ?c)\n  \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. foldl (g x) (f x) []) \\<in> A \\<rightarrow>\\<^sub>M B", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>x. foldl (g x) (f x) []) \\<in> A \\<rightarrow>\\<^sub>M B\n\ngoal (1 subgoal):\n 1. \\<And>a xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>f \\<in> A \\<rightarrow>\\<^sub>M B;\n                    set xs \\<subseteq> space C;\n                    \\<And>c.\n                       c \\<in> set xs \\<Longrightarrow>\n                       (\\<lambda>(a, b). g a b c)\n                       \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M\n                             B\\<rbrakk>\n                   \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) xs)\n                                     \\<in> A \\<rightarrow>\\<^sub>M B;\n        f \\<in> A \\<rightarrow>\\<^sub>M B; set (a # xs) \\<subseteq> space C;\n        \\<And>c.\n           c \\<in> set (a # xs) \\<Longrightarrow>\n           (\\<lambda>(a, b). g a b c)\n           \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) (a # xs))\n                         \\<in> A \\<rightarrow>\\<^sub>M B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>f \\<in> A \\<rightarrow>\\<^sub>M B;\n                    set xs \\<subseteq> space C;\n                    \\<And>c.\n                       c \\<in> set xs \\<Longrightarrow>\n                       (\\<lambda>(a, b). g a b c)\n                       \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M\n                             B\\<rbrakk>\n                   \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) xs)\n                                     \\<in> A \\<rightarrow>\\<^sub>M B;\n        f \\<in> A \\<rightarrow>\\<^sub>M B; set (a # xs) \\<subseteq> space C;\n        \\<And>c.\n           c \\<in> set (a # xs) \\<Longrightarrow>\n           (\\<lambda>(a, b). g a b c)\n           \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) (a # xs))\n                         \\<in> A \\<rightarrow>\\<^sub>M B", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>?f \\<in> A \\<rightarrow>\\<^sub>M B; set xs \\<subseteq> space C;\n   \\<And>c.\n      c \\<in> set xs \\<Longrightarrow>\n      (\\<lambda>a. case a of (a, b) \\<Rightarrow> g a b c)\n      \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x. foldl (g x) (?f x) xs)\n                    \\<in> A \\<rightarrow>\\<^sub>M B\n  f \\<in> A \\<rightarrow>\\<^sub>M B\n  set (x # xs) \\<subseteq> space C\n  ?c \\<in> set (x # xs) \\<Longrightarrow>\n  (\\<lambda>a. case a of (a, b) \\<Rightarrow> g a b ?c)\n  \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\n\ngoal (1 subgoal):\n 1. \\<And>a xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>f \\<in> A \\<rightarrow>\\<^sub>M B;\n                    set xs \\<subseteq> space C;\n                    \\<And>c.\n                       c \\<in> set xs \\<Longrightarrow>\n                       (\\<lambda>(a, b). g a b c)\n                       \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M\n                             B\\<rbrakk>\n                   \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) xs)\n                                     \\<in> A \\<rightarrow>\\<^sub>M B;\n        f \\<in> A \\<rightarrow>\\<^sub>M B; set (a # xs) \\<subseteq> space C;\n        \\<And>c.\n           c \\<in> set (a # xs) \\<Longrightarrow>\n           (\\<lambda>(a, b). g a b c)\n           \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) (a # xs))\n                         \\<in> A \\<rightarrow>\\<^sub>M B", "note [measurable] = Cons.prems(1)"], ["proof (state)\nthis:\n  f \\<in> A \\<rightarrow>\\<^sub>M B\n\ngoal (1 subgoal):\n 1. \\<And>a xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>f \\<in> A \\<rightarrow>\\<^sub>M B;\n                    set xs \\<subseteq> space C;\n                    \\<And>c.\n                       c \\<in> set xs \\<Longrightarrow>\n                       (\\<lambda>(a, b). g a b c)\n                       \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M\n                             B\\<rbrakk>\n                   \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) xs)\n                                     \\<in> A \\<rightarrow>\\<^sub>M B;\n        f \\<in> A \\<rightarrow>\\<^sub>M B; set (a # xs) \\<subseteq> space C;\n        \\<And>c.\n           c \\<in> set (a # xs) \\<Longrightarrow>\n           (\\<lambda>(a, b). g a b c)\n           \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) (a # xs))\n                         \\<in> A \\<rightarrow>\\<^sub>M B", "from Cons.prems"], ["proof (chain)\npicking this:\n  f \\<in> A \\<rightarrow>\\<^sub>M B\n  set (x # xs) \\<subseteq> space C\n  ?c \\<in> set (x # xs) \\<Longrightarrow>\n  (\\<lambda>a. case a of (a, b) \\<Rightarrow> g a b ?c)\n  \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B", "have [measurable]: \"x \\<in> space C\""], ["proof (prove)\nusing this:\n  f \\<in> A \\<rightarrow>\\<^sub>M B\n  set (x # xs) \\<subseteq> space C\n  ?c \\<in> set (x # xs) \\<Longrightarrow>\n  (\\<lambda>a. case a of (a, b) \\<Rightarrow> g a b ?c)\n  \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\n\ngoal (1 subgoal):\n 1. x \\<in> space C", "by simp"], ["proof (state)\nthis:\n  x \\<in> space C\n\ngoal (1 subgoal):\n 1. \\<And>a xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>f \\<in> A \\<rightarrow>\\<^sub>M B;\n                    set xs \\<subseteq> space C;\n                    \\<And>c.\n                       c \\<in> set xs \\<Longrightarrow>\n                       (\\<lambda>(a, b). g a b c)\n                       \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M\n                             B\\<rbrakk>\n                   \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) xs)\n                                     \\<in> A \\<rightarrow>\\<^sub>M B;\n        f \\<in> A \\<rightarrow>\\<^sub>M B; set (a # xs) \\<subseteq> space C;\n        \\<And>c.\n           c \\<in> set (a # xs) \\<Longrightarrow>\n           (\\<lambda>(a, b). g a b c)\n           \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) (a # xs))\n                         \\<in> A \\<rightarrow>\\<^sub>M B", "have \"(\\<lambda>a. (a, f a)) \\<in> A \\<rightarrow>\\<^sub>M A \\<Otimes>\\<^sub>M B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a. (a, f a))\n    \\<in> A \\<rightarrow>\\<^sub>M A \\<Otimes>\\<^sub>M B", "by measurable"], ["proof (state)\nthis:\n  (\\<lambda>a. (a, f a)) \\<in> A \\<rightarrow>\\<^sub>M A \\<Otimes>\\<^sub>M B\n\ngoal (1 subgoal):\n 1. \\<And>a xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>f \\<in> A \\<rightarrow>\\<^sub>M B;\n                    set xs \\<subseteq> space C;\n                    \\<And>c.\n                       c \\<in> set xs \\<Longrightarrow>\n                       (\\<lambda>(a, b). g a b c)\n                       \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M\n                             B\\<rbrakk>\n                   \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) xs)\n                                     \\<in> A \\<rightarrow>\\<^sub>M B;\n        f \\<in> A \\<rightarrow>\\<^sub>M B; set (a # xs) \\<subseteq> space C;\n        \\<And>c.\n           c \\<in> set (a # xs) \\<Longrightarrow>\n           (\\<lambda>(a, b). g a b c)\n           \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) (a # xs))\n                         \\<in> A \\<rightarrow>\\<^sub>M B", "hence \"(\\<lambda>(a,b). g a b x) \\<circ> (\\<lambda>a. (a, f a)) \\<in> A \\<rightarrow>\\<^sub>M B\""], ["proof (prove)\nusing this:\n  (\\<lambda>a. (a, f a)) \\<in> A \\<rightarrow>\\<^sub>M A \\<Otimes>\\<^sub>M B\n\ngoal (1 subgoal):\n 1. (\\<lambda>(a, b). g a b x) \\<circ> (\\<lambda>a. (a, f a))\n    \\<in> A \\<rightarrow>\\<^sub>M B", "by (rule measurable_comp) (rule Cons.prems, auto)"], ["proof (state)\nthis:\n  (\\<lambda>(a, b). g a b x) \\<circ> (\\<lambda>a. (a, f a))\n  \\<in> A \\<rightarrow>\\<^sub>M B\n\ngoal (1 subgoal):\n 1. \\<And>a xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>f \\<in> A \\<rightarrow>\\<^sub>M B;\n                    set xs \\<subseteq> space C;\n                    \\<And>c.\n                       c \\<in> set xs \\<Longrightarrow>\n                       (\\<lambda>(a, b). g a b c)\n                       \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M\n                             B\\<rbrakk>\n                   \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) xs)\n                                     \\<in> A \\<rightarrow>\\<^sub>M B;\n        f \\<in> A \\<rightarrow>\\<^sub>M B; set (a # xs) \\<subseteq> space C;\n        \\<And>c.\n           c \\<in> set (a # xs) \\<Longrightarrow>\n           (\\<lambda>(a, b). g a b c)\n           \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) (a # xs))\n                         \\<in> A \\<rightarrow>\\<^sub>M B", "hence \"(\\<lambda>a. g a (f a) x) \\<in> A \\<rightarrow>\\<^sub>M B\""], ["proof (prove)\nusing this:\n  (\\<lambda>(a, b). g a b x) \\<circ> (\\<lambda>a. (a, f a))\n  \\<in> A \\<rightarrow>\\<^sub>M B\n\ngoal (1 subgoal):\n 1. (\\<lambda>a. g a (f a) x) \\<in> A \\<rightarrow>\\<^sub>M B", "by (simp add: o_def)"], ["proof (state)\nthis:\n  (\\<lambda>a. g a (f a) x) \\<in> A \\<rightarrow>\\<^sub>M B\n\ngoal (1 subgoal):\n 1. \\<And>a xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>f \\<in> A \\<rightarrow>\\<^sub>M B;\n                    set xs \\<subseteq> space C;\n                    \\<And>c.\n                       c \\<in> set xs \\<Longrightarrow>\n                       (\\<lambda>(a, b). g a b c)\n                       \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M\n                             B\\<rbrakk>\n                   \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) xs)\n                                     \\<in> A \\<rightarrow>\\<^sub>M B;\n        f \\<in> A \\<rightarrow>\\<^sub>M B; set (a # xs) \\<subseteq> space C;\n        \\<And>c.\n           c \\<in> set (a # xs) \\<Longrightarrow>\n           (\\<lambda>(a, b). g a b c)\n           \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) (a # xs))\n                         \\<in> A \\<rightarrow>\\<^sub>M B", "hence \"(\\<lambda>xa. foldl (g xa) (g xa (f xa) x) xs) \\<in> A \\<rightarrow>\\<^sub>M B\""], ["proof (prove)\nusing this:\n  (\\<lambda>a. g a (f a) x) \\<in> A \\<rightarrow>\\<^sub>M B\n\ngoal (1 subgoal):\n 1. (\\<lambda>xa. foldl (g xa) (g xa (f xa) x) xs)\n    \\<in> A \\<rightarrow>\\<^sub>M B", "by (rule Cons.IH) (use Cons.prems in auto)"], ["proof (state)\nthis:\n  (\\<lambda>xa. foldl (g xa) (g xa (f xa) x) xs)\n  \\<in> A \\<rightarrow>\\<^sub>M B\n\ngoal (1 subgoal):\n 1. \\<And>a xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>f \\<in> A \\<rightarrow>\\<^sub>M B;\n                    set xs \\<subseteq> space C;\n                    \\<And>c.\n                       c \\<in> set xs \\<Longrightarrow>\n                       (\\<lambda>(a, b). g a b c)\n                       \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M\n                             B\\<rbrakk>\n                   \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) xs)\n                                     \\<in> A \\<rightarrow>\\<^sub>M B;\n        f \\<in> A \\<rightarrow>\\<^sub>M B; set (a # xs) \\<subseteq> space C;\n        \\<And>c.\n           c \\<in> set (a # xs) \\<Longrightarrow>\n           (\\<lambda>(a, b). g a b c)\n           \\<in> A \\<Otimes>\\<^sub>M B \\<rightarrow>\\<^sub>M B\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. foldl (g x) (f x) (a # xs))\n                         \\<in> A \\<rightarrow>\\<^sub>M B", "thus ?case"], ["proof (prove)\nusing this:\n  (\\<lambda>xa. foldl (g xa) (g xa (f xa) x) xs)\n  \\<in> A \\<rightarrow>\\<^sub>M B\n\ngoal (1 subgoal):\n 1. (\\<lambda>xa. foldl (g xa) (f xa) (x # xs))\n    \\<in> A \\<rightarrow>\\<^sub>M B", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>xa. foldl (g xa) (f xa) (x # xs))\n  \\<in> A \\<rightarrow>\\<^sub>M B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ins_trees: \"t \\<in> trees A \\<Longrightarrow> (x,y) \\<in> A \\<Longrightarrow> ins x y t \\<in> trees A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> trees A; (x, y) \\<in> A\\<rbrakk>\n    \\<Longrightarrow> ins x y t \\<in> trees A", "by (induction x y t rule: ins.induct)\n     (auto split: tree.splits simp: ins_neq_Leaf)"], ["", "subsection \\<open>Main result\\<close>"], ["", "text \\<open>\n  In our setting, we have some countable set of values that may appear in the input and\n  a concrete list consisting only of those elements with no repeated elements.\n\n  We further define an abbreviation for the uniform distribution of permutations of that lists.\n\\<close>"], ["", "context\n  fixes xs::\"'a::linorder list\" and A::\"'a set\" and random_perm :: \"'a list \\<Rightarrow> 'a list measure\"\n  assumes con_assms: \"countable A\" \"set xs \\<subseteq> A\" \"distinct xs\"\n  defines \"random_perm \\<equiv> (\\<lambda>xs. uniform_measure (count_space (permutations_of_set (set xs)))\n                                 (permutations_of_set (set xs)))\"\nbegin"], ["", "text \\<open>\n  Again, we first need some facts about measurability.\n\\<close>"], ["", "lemma sets_rinss [simp]: \n  assumes \"t \\<in> trees (A \\<times> UNIV)\" \n  shows \"sets (rinss xs t A) = tree_sigma (count_space A \\<Otimes>\\<^sub>M borel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (rinss xs t A) =\n    sets (tree_sigma (count_space A \\<Otimes>\\<^sub>M borel))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sets (rinss xs t A) =\n    sets (tree_sigma (count_space A \\<Otimes>\\<^sub>M borel))", "have \"tree_sigma (count_space A \\<Otimes>\\<^sub>M (lborel::real measure)) = tree_sigma (count_space A \\<Otimes>\\<^sub>M borel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel) =\n    tree_sigma (count_space A \\<Otimes>\\<^sub>M borel)", "by (intro tree_sigma_cong sets_pair_measure_cong) auto"], ["proof (state)\nthis:\n  tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel) =\n  tree_sigma (count_space A \\<Otimes>\\<^sub>M borel)\n\ngoal (1 subgoal):\n 1. sets (rinss xs t A) =\n    sets (tree_sigma (count_space A \\<Otimes>\\<^sub>M borel))", "then"], ["proof (chain)\npicking this:\n  tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel) =\n  tree_sigma (count_space A \\<Otimes>\\<^sub>M borel)", "show ?thesis"], ["proof (prove)\nusing this:\n  tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel) =\n  tree_sigma (count_space A \\<Otimes>\\<^sub>M borel)\n\ngoal (1 subgoal):\n 1. sets (rinss xs t A) =\n    sets (tree_sigma (count_space A \\<Otimes>\\<^sub>M borel))", "using assms con_assms"], ["proof (prove)\nusing this:\n  tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel) =\n  tree_sigma (count_space A \\<Otimes>\\<^sub>M borel)\n  t \\<in> trees (A \\<times> UNIV)\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. sets (rinss xs t A) =\n    sets (tree_sigma (count_space A \\<Otimes>\\<^sub>M borel))", "by (subst sets_rinss') auto"], ["proof (state)\nthis:\n  sets (rinss xs t A) =\n  sets (tree_sigma (count_space A \\<Otimes>\\<^sub>M borel))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bst_of_list_measurable [measurable]:\n  \"bst_of_list \\<in> measurable (count_space (lists A)) (tree_sigma (count_space A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bst_of_list\n    \\<in> count_space (lists A) \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A)", "by (subst measurable_count_space_eq1)\n    (auto simp: space_tree_sigma intro!: bst_of_list_trees)"], ["", "lemma insort_wrt_measurable [measurable]:\n  \"(\\<lambda>x. insort_wrt x xs) \\<in> count_space (Pow (A \\<times> A)) \\<rightarrow>\\<^sub>M count_space (lists A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. insort_wrt x xs)\n    \\<in> count_space (Pow (A \\<times> A)) \\<rightarrow>\\<^sub>M\n          count_space (lists A)", "using con_assms"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. insort_wrt x xs)\n    \\<in> count_space (Pow (A \\<times> A)) \\<rightarrow>\\<^sub>M\n          count_space (lists A)", "by auto"], ["", "lemma bst_of_list_sort_meaurable [measurable]:\n  \"(\\<lambda>x. bst_of_list (sort_key x xs)) \\<in> \n     Pi\\<^sub>M (set xs) (\\<lambda>i. borel::real measure) \\<rightarrow>\\<^sub>M tree_sigma (count_space A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. bst_of_list (sort_key x xs))\n    \\<in> Pi\\<^sub>M (set xs) (\\<lambda>i. borel) \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. bst_of_list (sort_key x xs))\n    \\<in> Pi\\<^sub>M (set xs) (\\<lambda>i. borel) \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A)", "note measurable_linorder_from_keys_restrict'[measurable]"], ["proof (state)\nthis:\n  \\<lbrakk>finite ?A; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> linorder_from_keys ?A\n                    \\<in> Pi\\<^sub>M ?A\n                           (\\<lambda>_. borel) \\<rightarrow>\\<^sub>M\n                          count_space (Pow (?B \\<times> ?B))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. bst_of_list (sort_key x xs))\n    \\<in> Pi\\<^sub>M (set xs) (\\<lambda>i. borel) \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A)", "have \"(0::real) < 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 1", "by auto"], ["proof (state)\nthis:\n  0 < 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. bst_of_list (sort_key x xs))\n    \\<in> Pi\\<^sub>M (set xs) (\\<lambda>i. borel) \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A)", "then"], ["proof (chain)\npicking this:\n  0 < 1", "have [measurable]: \"(\\<lambda>x. bst_of_list (insort_wrt (linorder_from_keys (set xs) x) xs))\n                      \\<in> Pi\\<^sub>M (set xs) (\\<lambda>i. borel :: real measure) \\<rightarrow>\\<^sub>M tree_sigma (count_space A)\""], ["proof (prove)\nusing this:\n  0 < 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        bst_of_list (insort_wrt (linorder_from_keys (set xs) x) xs))\n    \\<in> Pi\\<^sub>M (set xs) (\\<lambda>i. borel) \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A)", "using con_assms"], ["proof (prove)\nusing this:\n  0 < 1\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        bst_of_list (insort_wrt (linorder_from_keys (set xs) x) xs))\n    \\<in> Pi\\<^sub>M (set xs) (\\<lambda>i. borel) \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A)", "by measurable"], ["proof (state)\nthis:\n  (\\<lambda>x. bst_of_list (insort_wrt (linorder_from_keys (set xs) x) xs))\n  \\<in> Pi\\<^sub>M (set xs) (\\<lambda>i. borel) \\<rightarrow>\\<^sub>M\n        tree_sigma (count_space A)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. bst_of_list (sort_key x xs))\n    \\<in> Pi\\<^sub>M (set xs) (\\<lambda>i. borel) \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. bst_of_list (sort_key x xs))\n    \\<in> Pi\\<^sub>M (set xs) (\\<lambda>i. borel) \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A)", "by (subst insort_wrt_sort_key[symmetric]) (measurable, auto)"], ["proof (state)\nthis:\n  (\\<lambda>x. bst_of_list (sort_key x xs))\n  \\<in> Pi\\<^sub>M (set xs) (\\<lambda>i. borel) \\<rightarrow>\\<^sub>M\n        tree_sigma (count_space A)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  In a first step, we convert the bulk insertion operation to first choosing the\n  priorities i.\\,i.\\,d.\\ ahead of time and then inserting all the elements deterministically\n  with their associated priority.\n\\<close>"], ["", "lemma random_treap_fold:\n  assumes \"t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\"\n  shows \"rinss xs t A = distr (\\<Pi>\\<^sub>M x\\<in>set xs. \\<U> 0 1)\n                              (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) t xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rinss xs t A =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) t xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rinss xs t A =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) t xs)", "let ?U = \"uniform_measure lborel {0::real..1}\""], ["proof (state)\ngoal (1 subgoal):\n 1. rinss xs t A =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) t xs)", "have \"set xs \\<subseteq> space (count_space A)\" \"c \\<in> set xs \\<Longrightarrow> c \\<in> space (count_space A)\" for c"], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<subseteq> space (count_space A) &&&\n    (c \\<in> set xs \\<Longrightarrow> c \\<in> space (count_space A))", "using con_assms"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> space (count_space A) &&&\n    (c \\<in> set xs \\<Longrightarrow> c \\<in> space (count_space A))", "by auto"], ["proof (state)\nthis:\n  set xs \\<subseteq> space (count_space A)\n  ?c \\<in> set xs \\<Longrightarrow> ?c \\<in> space (count_space A)\n\ngoal (1 subgoal):\n 1. rinss xs t A =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) t xs)", "then"], ["proof (chain)\npicking this:\n  set xs \\<subseteq> space (count_space A)\n  ?c \\<in> set xs \\<Longrightarrow> ?c \\<in> space (count_space A)", "have *[intro]: \"(\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) t xs) \\<in>\n    Pi\\<^sub>M (set xs) (\\<lambda>x. ?U) \\<rightarrow>\\<^sub>M tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)\"\n    if \"t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\" for t"], ["proof (prove)\nusing this:\n  set xs \\<subseteq> space (count_space A)\n  ?c \\<in> set xs \\<Longrightarrow> ?c \\<in> space (count_space A)\n\ngoal (1 subgoal):\n 1. (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) t xs)\n    \\<in> Pi\\<^sub>M (set xs)\n           (\\<lambda>x. uniform_measure lborel {0..1}) \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)", "using that con_assms"], ["proof (prove)\nusing this:\n  set xs \\<subseteq> space (count_space A)\n  ?c \\<in> set xs \\<Longrightarrow> ?c \\<in> space (count_space A)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) t xs)\n    \\<in> Pi\\<^sub>M (set xs)\n           (\\<lambda>x. uniform_measure lborel {0..1}) \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)", "by measurable"], ["proof (state)\nthis:\n  ?t \\<in> space\n            (tree_sigma\n              (count_space A \\<Otimes>\\<^sub>M lborel)) \\<Longrightarrow>\n  (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) ?t xs)\n  \\<in> Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<rightarrow>\\<^sub>M\n        tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)\n\ngoal (1 subgoal):\n 1. rinss xs t A =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) t xs)", "have insR': \n    \"insR x t A = ?U \\<bind> (\\<lambda>u. return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)) (ins x u t))\"\n    if \"x \\<in> A\" \"t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\" for t x"], ["proof (prove)\ngoal (1 subgoal):\n 1. insR x t A =\n    uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (ins x u t))", "using con_assms assms that"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n  x \\<in> A\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. insR x t A =\n    uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (ins x u t))", "by (auto simp add: bind_return_distr' \\<U>_def)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> A;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> insR ?x ?t A =\n                    uniform_measure lborel {0..1} \\<bind>\n                    (\\<lambda>u.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (ins ?x u ?t))\n\ngoal (1 subgoal):\n 1. rinss xs t A =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) t xs)", "have \"rinss xs t A = (\\<Pi>\\<^sub>M x\\<in>set xs. ?U) \\<bind>\n     (\\<lambda>p. return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)) (foldl (\\<lambda>t x. ins x (p x) t) t xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rinss xs t A =\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>p.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) t xs))", "using con_assms(2,3) assms"], ["proof (prove)\nusing this:\n  set xs \\<subseteq> A\n  distinct xs\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. rinss xs t A =\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>p.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) t xs))", "proof (induction xs arbitrary: t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>set [] \\<subseteq> A; distinct [];\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss [] t A =\n                         Pi\\<^sub>M (set [])\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t []))\n 2. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "case Nil"], ["proof (state)\nthis:\n  set [] \\<subseteq> A\n  distinct []\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>set [] \\<subseteq> A; distinct [];\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss [] t A =\n                         Pi\\<^sub>M (set [])\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t []))\n 2. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "then"], ["proof (chain)\npicking this:\n  set [] \\<subseteq> A\n  distinct []\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "show ?case"], ["proof (prove)\nusing this:\n  set [] \\<subseteq> A\n  distinct []\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. rinss [] t A =\n    Pi\\<^sub>M (set []) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>p.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) t []))", "by (intro measure_eqI) (auto simp add: space_PiM_empty emeasure_distr bind_return_distr')"], ["proof (state)\nthis:\n  rinss [] t A =\n  Pi\\<^sub>M (set []) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n  (\\<lambda>p.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) t []))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> rinss xs ?t A =\n                    Pi\\<^sub>M (set xs)\n                     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                    (\\<lambda>p.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (foldl (\\<lambda>t x. ins x (p x) t) ?t xs))\n  set (x # xs) \\<subseteq> A\n  distinct (x # xs)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "note insR.simps[simp del]"], ["proof (state)\nthis:\n  insR ?x ?t ?A =\n  distr (\\<U> 0 1) (tree_sigma (count_space ?A \\<Otimes>\\<^sub>M lborel))\n   (\\<lambda>p. ins ?x p ?t)\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "let ?treap_sigma  = \"tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have [measurable]: \"set xs \\<subseteq> space (count_space A)\" \"x \\<in> A\"\n                     \"c \\<in> A \\<Longrightarrow> c \\<in> space (count_space A)\" for c"], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<subseteq> space (count_space A) &&&\n    x \\<in> A &&&\n    (c \\<in> A \\<Longrightarrow> c \\<in> space (count_space A))", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> rinss xs ?t A =\n                    Pi\\<^sub>M (set xs)\n                     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                    (\\<lambda>p.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (foldl (\\<lambda>t x. ins x (p x) t) ?t xs))\n  set (x # xs) \\<subseteq> A\n  distinct (x # xs)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> space (count_space A) &&&\n    x \\<in> A &&&\n    (c \\<in> A \\<Longrightarrow> c \\<in> space (count_space A))", "by auto"], ["proof (state)\nthis:\n  set xs \\<subseteq> space (count_space A)\n  x \\<in> A\n  ?c1 \\<in> A \\<Longrightarrow> ?c1 \\<in> space (count_space A)\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have [intro!]: \"ins k p t \\<in> space ?treap_sigma\" if \"t \\<in> space ?treap_sigma\" \"k \\<in> A\"\n    for k t and p::real"], ["proof (prove)\ngoal (1 subgoal):\n 1. ins k p t\n    \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "using that"], ["proof (prove)\nusing this:\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n  k \\<in> A\n\ngoal (1 subgoal):\n 1. ins k p t\n    \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "by (auto intro!: ins_trees simp add: space_tree_sigma space_pair_measure)"], ["proof (state)\nthis:\n  \\<lbrakk>?t1\n           \\<in> space\n                  (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel));\n   ?k1 \\<in> A\\<rbrakk>\n  \\<Longrightarrow> ins ?k1 ?p1 ?t1\n                    \\<in> space\n                           (tree_sigma\n                             (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have [measurable]: \"Pi\\<^sub>M (set xs) (\\<lambda>x. ?U) \\<in> space (prob_algebra (Pi\\<^sub>M (set xs) (\\<lambda>i. ?U)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1})\n    \\<in> space\n           (prob_algebra\n             (Pi\\<^sub>M (set xs)\n               (\\<lambda>i. uniform_measure lborel {0..1})))", "unfolding space_prob_algebra"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1})\n    \\<in> {N. sets N =\n              sets\n               (Pi\\<^sub>M (set xs)\n                 (\\<lambda>i. uniform_measure lborel {0..1})) \\<and>\n              prob_space N}", "by (auto intro!: prob_space_uniform_measure prob_space_PiM)"], ["proof (state)\nthis:\n  Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1})\n  \\<in> space\n         (prob_algebra\n           (Pi\\<^sub>M (set xs)\n             (\\<lambda>i. uniform_measure lborel {0..1})))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have [measurable]: \"Pi\\<^sub>M (set xs) (\\<lambda>x. ?U) \\<in> space (subprob_algebra (Pi\\<^sub>M (set xs) (\\<lambda>i. ?U)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1})\n    \\<in> space\n           (subprob_algebra\n             (Pi\\<^sub>M (set xs)\n               (\\<lambda>i. uniform_measure lborel {0..1})))", "unfolding space_subprob_algebra"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1})\n    \\<in> {M. subprob_space M \\<and>\n              sets M =\n              sets\n               (Pi\\<^sub>M (set xs)\n                 (\\<lambda>i. uniform_measure lborel {0..1}))}", "by (auto intro!: prob_space_imp_subprob_space prob_space_uniform_measure prob_space_PiM)"], ["proof (state)\nthis:\n  Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1})\n  \\<in> space\n         (subprob_algebra\n           (Pi\\<^sub>M (set xs)\n             (\\<lambda>i. uniform_measure lborel {0..1})))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have [measurable]: \"(\\<lambda>x. x) \\<in> (?treap_sigma \\<Otimes>\\<^sub>M Pi\\<^sub>M (set xs) (\\<lambda>i. ?U)) \\<Otimes>\\<^sub>M ?treap_sigma \\<rightarrow>\\<^sub>M\n            (?treap_sigma \\<Otimes>\\<^sub>M Pi\\<^sub>M (set xs) (\\<lambda>i. borel)) \\<Otimes>\\<^sub>M ?treap_sigma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x)\n    \\<in> (tree_sigma\n            (count_space A \\<Otimes>\\<^sub>M lborel) \\<Otimes>\\<^sub>M\n           Pi\\<^sub>M (set xs)\n            (\\<lambda>i. uniform_measure lborel {0..1})) \\<Otimes>\\<^sub>M\n          tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          (tree_sigma\n            (count_space A \\<Otimes>\\<^sub>M lborel) \\<Otimes>\\<^sub>M\n           Pi\\<^sub>M (set xs) (\\<lambda>i. borel)) \\<Otimes>\\<^sub>M\n          tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)", "by (auto intro!: measurable_ident_sets sets_pair_measure_cong sets_PiM_cong simp add: \\<U>_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. x)\n  \\<in> (tree_sigma\n          (count_space A \\<Otimes>\\<^sub>M lborel) \\<Otimes>\\<^sub>M\n         Pi\\<^sub>M (set xs)\n          (\\<lambda>i. uniform_measure lborel {0..1})) \\<Otimes>\\<^sub>M\n        tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n        (tree_sigma\n          (count_space A \\<Otimes>\\<^sub>M lborel) \\<Otimes>\\<^sub>M\n         Pi\\<^sub>M (set xs) (\\<lambda>i. borel)) \\<Otimes>\\<^sub>M\n        tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have [simp]: \"(\\<lambda>w. Pi\\<^sub>M (set xs) (\\<lambda>x. ?U) \\<bind>\n        (\\<lambda>p. return ?treap_sigma (foldl (\\<lambda>t x. ins x (p x) t) w xs)))\n        \\<in> ?treap_sigma \\<rightarrow>\\<^sub>M subprob_algebra ?treap_sigma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n        (\\<lambda>p.\n            return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n             (foldl (\\<lambda>t x. ins x (p x) t) w xs)))\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n        (\\<lambda>p.\n            return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n             (foldl (\\<lambda>t x. ins x (p x) t) w xs)))\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "have [measurable]: \"c \\<in> set xs \\<Longrightarrow> c \\<in> A\" for c"], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<in> set xs \\<Longrightarrow> c \\<in> A", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> rinss xs ?t A =\n                    Pi\\<^sub>M (set xs)\n                     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                    (\\<lambda>p.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (foldl (\\<lambda>t x. ins x (p x) t) ?t xs))\n  set (x # xs) \\<subseteq> A\n  distinct (x # xs)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. c \\<in> set xs \\<Longrightarrow> c \\<in> A", "by auto"], ["proof (state)\nthis:\n  ?c2 \\<in> set xs \\<Longrightarrow> ?c2 \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n        (\\<lambda>p.\n            return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n             (foldl (\\<lambda>t x. ins x (p x) t) w xs)))\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n        (\\<lambda>p.\n            return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n             (foldl (\\<lambda>t x. ins x (p x) t) w xs)))\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "using con_assms"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n        (\\<lambda>p.\n            return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n             (foldl (\\<lambda>t x. ins x (p x) t) w xs)))\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "by measurable"], ["proof (state)\nthis:\n  (\\<lambda>w.\n      Pi\\<^sub>M (set xs)\n       (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n      (\\<lambda>p.\n          return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n           (foldl (\\<lambda>t x. ins x (p x) t) w xs)))\n  \\<in> tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n        subprob_algebra\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>w.\n      Pi\\<^sub>M (set xs)\n       (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n      (\\<lambda>p.\n          return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n           (foldl (\\<lambda>t x. ins x (p x) t) w xs)))\n  \\<in> tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n        subprob_algebra\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have [measurable]: \"?U \\<in> space (prob_algebra (?U))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1}\n    \\<in> space (prob_algebra (uniform_measure lborel {0..1}))", "by (simp add: prob_space_uniform_measure space_prob_algebra)"], ["proof (state)\nthis:\n  uniform_measure lborel {0..1}\n  \\<in> space (prob_algebra (uniform_measure lborel {0..1}))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have [measurable, intro]: \"(\\<lambda>t. rinss xs t A) \\<in> ?treap_sigma \\<rightarrow>\\<^sub>M subprob_algebra ?treap_sigma\"\n    if \"set xs \\<subseteq> A\" for xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t. rinss xs t A)\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "using that"], ["proof (prove)\nusing this:\n  set xs \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<lambda>t. rinss xs t A)\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "proof (induction xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> A \\<Longrightarrow>\n    (\\<lambda>t. rinss [] t A)\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n 2. \\<And>a xs.\n       \\<lbrakk>set xs \\<subseteq> A \\<Longrightarrow>\n                (\\<lambda>t. rinss xs t A)\n                \\<in> tree_sigma\n                       (count_space A \\<Otimes>\\<^sub>M\n                        lborel) \\<rightarrow>\\<^sub>M\n                      subprob_algebra\n                       (tree_sigma\n                         (count_space A \\<Otimes>\\<^sub>M lborel));\n        set (a # xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>t. rinss (a # xs) t A)\n                         \\<in> tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M\n                                 lborel) \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (tree_sigma\n                                  (count_space A \\<Otimes>\\<^sub>M lborel))", "case (Cons x xs)"], ["proof (state)\nthis:\n  set xs \\<subseteq> A \\<Longrightarrow>\n  (\\<lambda>t. rinss xs t A)\n  \\<in> tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n        subprob_algebra\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n  set (x # xs) \\<subseteq> A\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> A \\<Longrightarrow>\n    (\\<lambda>t. rinss [] t A)\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n 2. \\<And>a xs.\n       \\<lbrakk>set xs \\<subseteq> A \\<Longrightarrow>\n                (\\<lambda>t. rinss xs t A)\n                \\<in> tree_sigma\n                       (count_space A \\<Otimes>\\<^sub>M\n                        lborel) \\<rightarrow>\\<^sub>M\n                      subprob_algebra\n                       (tree_sigma\n                         (count_space A \\<Otimes>\\<^sub>M lborel));\n        set (a # xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>t. rinss (a # xs) t A)\n                         \\<in> tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M\n                                 lborel) \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (tree_sigma\n                                  (count_space A \\<Otimes>\\<^sub>M lborel))", "then"], ["proof (chain)\npicking this:\n  set xs \\<subseteq> A \\<Longrightarrow>\n  (\\<lambda>t. rinss xs t A)\n  \\<in> tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n        subprob_algebra\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n  set (x # xs) \\<subseteq> A", "have [measurable]: \"x \\<in> A\" \"set xs \\<subseteq> A\""], ["proof (prove)\nusing this:\n  set xs \\<subseteq> A \\<Longrightarrow>\n  (\\<lambda>t. rinss xs t A)\n  \\<in> tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n        subprob_algebra\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n  set (x # xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. x \\<in> A &&& set xs \\<subseteq> A", "by auto"], ["proof (state)\nthis:\n  x \\<in> A\n  set xs \\<subseteq> A\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> A \\<Longrightarrow>\n    (\\<lambda>t. rinss [] t A)\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n 2. \\<And>a xs.\n       \\<lbrakk>set xs \\<subseteq> A \\<Longrightarrow>\n                (\\<lambda>t. rinss xs t A)\n                \\<in> tree_sigma\n                       (count_space A \\<Otimes>\\<^sub>M\n                        lborel) \\<rightarrow>\\<^sub>M\n                      subprob_algebra\n                       (tree_sigma\n                         (count_space A \\<Otimes>\\<^sub>M lborel));\n        set (a # xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>t. rinss (a # xs) t A)\n                         \\<in> tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M\n                                 lborel) \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (tree_sigma\n                                  (count_space A \\<Otimes>\\<^sub>M lborel))", "have [measurable]: \"(\\<lambda>y. x) \\<in> tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel) \\<Otimes>\\<^sub>M ?U \\<rightarrow>\\<^sub>M count_space A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>y. x)\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<Otimes>\\<^sub>M\n          uniform_measure lborel {0..1} \\<rightarrow>\\<^sub>M\n          count_space A", "using Cons"], ["proof (prove)\nusing this:\n  set xs \\<subseteq> A \\<Longrightarrow>\n  (\\<lambda>t. rinss xs t A)\n  \\<in> tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n        subprob_algebra\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n  set (x # xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. x)\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<Otimes>\\<^sub>M\n          uniform_measure lborel {0..1} \\<rightarrow>\\<^sub>M\n          count_space A", "by measurable"], ["proof (state)\nthis:\n  (\\<lambda>y. x)\n  \\<in> tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<Otimes>\\<^sub>M\n        uniform_measure lborel {0..1} \\<rightarrow>\\<^sub>M\n        count_space A\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> A \\<Longrightarrow>\n    (\\<lambda>t. rinss [] t A)\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n 2. \\<And>a xs.\n       \\<lbrakk>set xs \\<subseteq> A \\<Longrightarrow>\n                (\\<lambda>t. rinss xs t A)\n                \\<in> tree_sigma\n                       (count_space A \\<Otimes>\\<^sub>M\n                        lborel) \\<rightarrow>\\<^sub>M\n                      subprob_algebra\n                       (tree_sigma\n                         (count_space A \\<Otimes>\\<^sub>M lborel));\n        set (a # xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>t. rinss (a # xs) t A)\n                         \\<in> tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M\n                                 lborel) \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (tree_sigma\n                                  (count_space A \\<Otimes>\\<^sub>M lborel))", "have [measurable]: \"(\\<lambda>x. x) \\<in> ?treap_sigma \\<Otimes>\\<^sub>M ?U \\<rightarrow>\\<^sub>M ?treap_sigma \\<Otimes>\\<^sub>M borel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x)\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<Otimes>\\<^sub>M\n          uniform_measure lborel {0..1} \\<rightarrow>\\<^sub>M\n          tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<Otimes>\\<^sub>M\n          borel", "unfolding \\<U>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x)\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<Otimes>\\<^sub>M\n          uniform_measure lborel {0..1} \\<rightarrow>\\<^sub>M\n          tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<Otimes>\\<^sub>M\n          borel", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. x)\n  \\<in> tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<Otimes>\\<^sub>M\n        uniform_measure lborel {0..1} \\<rightarrow>\\<^sub>M\n        tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<Otimes>\\<^sub>M\n        borel\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> A \\<Longrightarrow>\n    (\\<lambda>t. rinss [] t A)\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n 2. \\<And>a xs.\n       \\<lbrakk>set xs \\<subseteq> A \\<Longrightarrow>\n                (\\<lambda>t. rinss xs t A)\n                \\<in> tree_sigma\n                       (count_space A \\<Otimes>\\<^sub>M\n                        lborel) \\<rightarrow>\\<^sub>M\n                      subprob_algebra\n                       (tree_sigma\n                         (count_space A \\<Otimes>\\<^sub>M lborel));\n        set (a # xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>t. rinss (a # xs) t A)\n                         \\<in> tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M\n                                 lborel) \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (tree_sigma\n                                  (count_space A \\<Otimes>\\<^sub>M lborel))", "have [measurable]: \"(\\<lambda>t. distr (?U) (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel)) (\\<lambda>p. ins x p t))\n    \\<in> ?treap_sigma \\<rightarrow>\\<^sub>M subprob_algebra ?treap_sigma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t.\n        distr (uniform_measure lborel {0..1})\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (\\<lambda>p. ins x p t))\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "using con_assms"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. (\\<lambda>t.\n        distr (uniform_measure lborel {0..1})\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (\\<lambda>p. ins x p t))\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "by (intro measurable_prob_algebraD) measurable"], ["proof (state)\nthis:\n  (\\<lambda>t.\n      distr (uniform_measure lborel {0..1})\n       (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (\\<lambda>p. ins x p t))\n  \\<in> tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n        subprob_algebra\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> A \\<Longrightarrow>\n    (\\<lambda>t. rinss [] t A)\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n 2. \\<And>a xs.\n       \\<lbrakk>set xs \\<subseteq> A \\<Longrightarrow>\n                (\\<lambda>t. rinss xs t A)\n                \\<in> tree_sigma\n                       (count_space A \\<Otimes>\\<^sub>M\n                        lborel) \\<rightarrow>\\<^sub>M\n                      subprob_algebra\n                       (tree_sigma\n                         (count_space A \\<Otimes>\\<^sub>M lborel));\n        set (a # xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>t. rinss (a # xs) t A)\n                         \\<in> tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M\n                                 lborel) \\<rightarrow>\\<^sub>M\n                               subprob_algebra\n                                (tree_sigma\n                                  (count_space A \\<Otimes>\\<^sub>M lborel))", "from Cons"], ["proof (chain)\npicking this:\n  set xs \\<subseteq> A \\<Longrightarrow>\n  (\\<lambda>t. rinss xs t A)\n  \\<in> tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n        subprob_algebra\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n  set (x # xs) \\<subseteq> A", "show ?case"], ["proof (prove)\nusing this:\n  set xs \\<subseteq> A \\<Longrightarrow>\n  (\\<lambda>t. rinss xs t A)\n  \\<in> tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n        subprob_algebra\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n  set (x # xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<lambda>t. rinss (x # xs) t A)\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "unfolding rinss.simps insR.simps \\<U>_def"], ["proof (prove)\nusing this:\n  set xs \\<subseteq> A \\<Longrightarrow>\n  (\\<lambda>t. rinss xs t A)\n  \\<in> tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n        subprob_algebra\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n  set (x # xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<lambda>t.\n        distr (uniform_measure lborel {0..1})\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (\\<lambda>p. ins x p t) \\<bind>\n        (\\<lambda>t. rinss xs t A))\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "by measurable"], ["proof (state)\nthis:\n  (\\<lambda>t. rinss (x # xs) t A)\n  \\<in> tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n        subprob_algebra\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. set [] \\<subseteq> A \\<Longrightarrow>\n    (\\<lambda>t. rinss [] t A)\n    \\<in> tree_sigma\n           (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "qed auto"], ["proof (state)\nthis:\n  set ?xs2 \\<subseteq> A \\<Longrightarrow>\n  (\\<lambda>t. rinss ?xs2 t A)\n  \\<in> tree_sigma\n         (count_space A \\<Otimes>\\<^sub>M lborel) \\<rightarrow>\\<^sub>M\n        subprob_algebra\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have [intro]: \"(\\<lambda>u. return ?treap_sigma (ins x u t)) \\<in> ?U \\<rightarrow>\\<^sub>M subprob_algebra ?treap_sigma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>u.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (ins x u t))\n    \\<in> uniform_measure lborel {0..1} \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "using con_assms Cons"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n  \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> rinss xs ?t A =\n                    Pi\\<^sub>M (set xs)\n                     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                    (\\<lambda>p.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (foldl (\\<lambda>t x. ins x (p x) t) ?t xs))\n  set (x # xs) \\<subseteq> A\n  distinct (x # xs)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. (\\<lambda>u.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (ins x u t))\n    \\<in> uniform_measure lborel {0..1} \\<rightarrow>\\<^sub>M\n          subprob_algebra\n           (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "by measurable"], ["proof (state)\nthis:\n  (\\<lambda>u.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (ins x u t))\n  \\<in> uniform_measure lborel {0..1} \\<rightarrow>\\<^sub>M\n        subprob_algebra\n         (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have [simp]: \"space (?U \\<Otimes>\\<^sub>M Pi\\<^sub>M (set xs) (\\<lambda>x. ?U)) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs)\n       (\\<lambda>x. uniform_measure lborel {0..1})) \\<noteq>\n    {}", "by (simp add: prob_space.not_empty prob_space_PiM prob_space_pair prob_space_uniform_measure)"], ["proof (state)\nthis:\n  space\n   (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs)\n     (\\<lambda>x. uniform_measure lborel {0..1})) \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "from Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> rinss xs ?t A =\n                    Pi\\<^sub>M (set xs)\n                     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                    (\\<lambda>p.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (foldl (\\<lambda>t x. ins x (p x) t) ?t xs))\n  set (x # xs) \\<subseteq> A\n  distinct (x # xs)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))", "have \"rinss (x # xs) t A = (?U \\<bind>\n                                       (\\<lambda>u. return ?treap_sigma (ins x u t))) \\<bind>\n                                       (\\<lambda>t. rinss xs t A)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> rinss xs ?t A =\n                    Pi\\<^sub>M (set xs)\n                     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                    (\\<lambda>p.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (foldl (\\<lambda>t x. ins x (p x) t) ?t xs))\n  set (x # xs) \\<subseteq> A\n  distinct (x # xs)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. rinss (x # xs) t A =\n    uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (ins x u t)) \\<bind>\n    (\\<lambda>t. rinss xs t A)", "by (simp add: insR')"], ["proof (state)\nthis:\n  rinss (x # xs) t A =\n  uniform_measure lborel {0..1} \\<bind>\n  (\\<lambda>u.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (ins x u t)) \\<bind>\n  (\\<lambda>t. rinss xs t A)\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "also"], ["proof (state)\nthis:\n  rinss (x # xs) t A =\n  uniform_measure lborel {0..1} \\<bind>\n  (\\<lambda>u.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (ins x u t)) \\<bind>\n  (\\<lambda>t. rinss xs t A)\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have \"\\<dots> = ?U \\<bind> (\\<lambda>u. return ?treap_sigma (ins x u t) \\<bind> (\\<lambda>t. rinss xs t A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (ins x u t)) \\<bind>\n    (\\<lambda>t. rinss xs t A) =\n    uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (ins x u t) \\<bind>\n        (\\<lambda>t. rinss xs t A))", "using con_assms Cons"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n  \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> rinss xs ?t A =\n                    Pi\\<^sub>M (set xs)\n                     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                    (\\<lambda>p.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (foldl (\\<lambda>t x. ins x (p x) t) ?t xs))\n  set (x # xs) \\<subseteq> A\n  distinct (x # xs)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (ins x u t)) \\<bind>\n    (\\<lambda>t. rinss xs t A) =\n    uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (ins x u t) \\<bind>\n        (\\<lambda>t. rinss xs t A))", "by (subst bind_assoc) auto"], ["proof (state)\nthis:\n  uniform_measure lborel {0..1} \\<bind>\n  (\\<lambda>u.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (ins x u t)) \\<bind>\n  (\\<lambda>t. rinss xs t A) =\n  uniform_measure lborel {0..1} \\<bind>\n  (\\<lambda>u.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (ins x u t) \\<bind>\n      (\\<lambda>t. rinss xs t A))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "also"], ["proof (state)\nthis:\n  uniform_measure lborel {0..1} \\<bind>\n  (\\<lambda>u.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (ins x u t)) \\<bind>\n  (\\<lambda>t. rinss xs t A) =\n  uniform_measure lborel {0..1} \\<bind>\n  (\\<lambda>u.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (ins x u t) \\<bind>\n      (\\<lambda>t. rinss xs t A))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have \"\\<dots> = ?U \\<bind> (\\<lambda>u. rinss xs (ins x u t) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (ins x u t) \\<bind>\n        (\\<lambda>t. rinss xs t A)) =\n    uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u. rinss xs (ins x u t) A)", "using con_assms Cons"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n  \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> rinss xs ?t A =\n                    Pi\\<^sub>M (set xs)\n                     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                    (\\<lambda>p.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (foldl (\\<lambda>t x. ins x (p x) t) ?t xs))\n  set (x # xs) \\<subseteq> A\n  distinct (x # xs)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (ins x u t) \\<bind>\n        (\\<lambda>t. rinss xs t A)) =\n    uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u. rinss xs (ins x u t) A)", "by (subst bind_return) auto"], ["proof (state)\nthis:\n  uniform_measure lborel {0..1} \\<bind>\n  (\\<lambda>u.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (ins x u t) \\<bind>\n      (\\<lambda>t. rinss xs t A)) =\n  uniform_measure lborel {0..1} \\<bind> (\\<lambda>u. rinss xs (ins x u t) A)\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "also"], ["proof (state)\nthis:\n  uniform_measure lborel {0..1} \\<bind>\n  (\\<lambda>u.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (ins x u t) \\<bind>\n      (\\<lambda>t. rinss xs t A)) =\n  uniform_measure lborel {0..1} \\<bind> (\\<lambda>u. rinss xs (ins x u t) A)\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have \"\\<dots> = ?U \\<bind>\n                 (\\<lambda>u. Pi\\<^sub>M (set xs) (\\<lambda>x. ?U) \\<bind>\n                 (\\<lambda>p. return ?treap_sigma (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u. rinss xs (ins x u t) A) =\n    uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n        (\\<lambda>p.\n            return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n             (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs)))", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> rinss xs ?t A =\n                    Pi\\<^sub>M (set xs)\n                     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                    (\\<lambda>p.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (foldl (\\<lambda>t x. ins x (p x) t) ?t xs))\n  set (x # xs) \\<subseteq> A\n  distinct (x # xs)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u. rinss xs (ins x u t) A) =\n    uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n        (\\<lambda>p.\n            return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n             (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs)))", "by (subst Cons) (auto simp add: treap_ins keys_ins)"], ["proof (state)\nthis:\n  uniform_measure lborel {0..1} \\<bind>\n  (\\<lambda>u. rinss xs (ins x u t) A) =\n  uniform_measure lborel {0..1} \\<bind>\n  (\\<lambda>u.\n      Pi\\<^sub>M (set xs)\n       (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n      (\\<lambda>p.\n          return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n           (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs)))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "also"], ["proof (state)\nthis:\n  uniform_measure lborel {0..1} \\<bind>\n  (\\<lambda>u. rinss xs (ins x u t) A) =\n  uniform_measure lborel {0..1} \\<bind>\n  (\\<lambda>u.\n      Pi\\<^sub>M (set xs)\n       (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n      (\\<lambda>p.\n          return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n           (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs)))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have \"\\<dots> = ?U \\<Otimes>\\<^sub>M Pi\\<^sub>M (set xs) (\\<lambda>x. ?U) \\<bind>\n                  (\\<lambda>(u,p). return ?treap_sigma (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n        (\\<lambda>p.\n            return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n             (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))) =\n    uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>(u, p).\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n        (\\<lambda>p.\n            return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n             (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))) =\n    uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>(u, p).\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))", "have [measurable]: \"pair_prob_space (?U) (Pi\\<^sub>M (set xs) (\\<lambda>x. ?U))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_prob_space (uniform_measure lborel {0..1})\n     (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))", "by (simp add: \\<U>_def pair_prob_space_def pair_sigma_finite.intro prob_space_PiM \n          prob_space_imp_sigma_finite prob_space_uniform_measure)"], ["proof (state)\nthis:\n  pair_prob_space (uniform_measure lborel {0..1})\n   (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n        (\\<lambda>p.\n            return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n             (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))) =\n    uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>(u, p).\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))", "note this[unfolded \\<U>_def, measurable]"], ["proof (state)\nthis:\n  pair_prob_space (uniform_measure lborel {0..1})\n   (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n        (\\<lambda>p.\n            return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n             (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))) =\n    uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>(u, p).\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))", "have [measurable]: \"c \\<in> set xs \\<Longrightarrow> c \\<in> A\" for c"], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<in> set xs \\<Longrightarrow> c \\<in> A", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> rinss xs ?t A =\n                    Pi\\<^sub>M (set xs)\n                     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                    (\\<lambda>p.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (foldl (\\<lambda>t x. ins x (p x) t) ?t xs))\n  set (x # xs) \\<subseteq> A\n  distinct (x # xs)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. c \\<in> set xs \\<Longrightarrow> c \\<in> A", "by auto"], ["proof (state)\nthis:\n  ?c2 \\<in> set xs \\<Longrightarrow> ?c2 \\<in> A\n\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n        (\\<lambda>p.\n            return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n             (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))) =\n    uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>(u, p).\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n        (\\<lambda>p.\n            return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n             (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))) =\n    uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>(u, p).\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))", "using con_assms Cons"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n  \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> rinss xs ?t A =\n                    Pi\\<^sub>M (set xs)\n                     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                    (\\<lambda>p.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (foldl (\\<lambda>t x. ins x (p x) t) ?t xs))\n  set (x # xs) \\<subseteq> A\n  distinct (x # xs)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<bind>\n    (\\<lambda>u.\n        Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n        (\\<lambda>p.\n            return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n             (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))) =\n    uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>(u, p).\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))", "by (subst pair_prob_space.pair_measure_bind) measurable"], ["proof (state)\nthis:\n  uniform_measure lborel {0..1} \\<bind>\n  (\\<lambda>u.\n      Pi\\<^sub>M (set xs)\n       (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n      (\\<lambda>p.\n          return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n           (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))) =\n  uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n  Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n  (\\<lambda>(u, p).\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  uniform_measure lborel {0..1} \\<bind>\n  (\\<lambda>u.\n      Pi\\<^sub>M (set xs)\n       (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n      (\\<lambda>p.\n          return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n           (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))) =\n  uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n  Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n  (\\<lambda>(u, p).\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "also"], ["proof (state)\nthis:\n  uniform_measure lborel {0..1} \\<bind>\n  (\\<lambda>u.\n      Pi\\<^sub>M (set xs)\n       (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n      (\\<lambda>p.\n          return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n           (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))) =\n  uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n  Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n  (\\<lambda>(u, p).\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have \"\\<dots> = distr (?U \\<Otimes>\\<^sub>M Pi\\<^sub>M (set xs) (\\<lambda>x. ?U)) (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n                  (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>(u, p).\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs)) =\n    distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>(u, p).\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs)) =\n    distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)", "have [simp]: \"c \\<in> set xs \\<Longrightarrow> c \\<in> A\" for c"], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<in> set xs \\<Longrightarrow> c \\<in> A", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> rinss xs ?t A =\n                    Pi\\<^sub>M (set xs)\n                     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                    (\\<lambda>p.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (foldl (\\<lambda>t x. ins x (p x) t) ?t xs))\n  set (x # xs) \\<subseteq> A\n  distinct (x # xs)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. c \\<in> set xs \\<Longrightarrow> c \\<in> A", "by auto"], ["proof (state)\nthis:\n  ?c2 \\<in> set xs \\<Longrightarrow> ?c2 \\<in> A\n\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>(u, p).\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs)) =\n    distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)", "have \"(\\<lambda>xa. foldl (\\<lambda>t x. ins x (snd xa x) t) (ins x (fst xa) t) xs) = \n          (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xa.\n        foldl (\\<lambda>t x. ins x (snd xa x) t) (ins x (fst xa) t) xs) =\n    (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)", "by (auto simp add: case_prod_beta')"], ["proof (state)\nthis:\n  (\\<lambda>xa.\n      foldl (\\<lambda>t x. ins x (snd xa x) t) (ins x (fst xa) t) xs) =\n  (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)\n\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>(u, p).\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs)) =\n    distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>xa.\n      foldl (\\<lambda>t x. ins x (snd xa x) t) (ins x (fst xa) t) xs) =\n  (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>xa.\n      foldl (\\<lambda>t x. ins x (snd xa x) t) (ins x (fst xa) t) xs) =\n  (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)\n\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>(u, p).\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs)) =\n    distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)", "using con_assms Cons"], ["proof (prove)\nusing this:\n  (\\<lambda>xa.\n      foldl (\\<lambda>t x. ins x (snd xa x) t) (ins x (fst xa) t) xs) =\n  (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n  \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> rinss xs ?t A =\n                    Pi\\<^sub>M (set xs)\n                     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                    (\\<lambda>p.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (foldl (\\<lambda>t x. ins x (p x) t) ?t xs))\n  set (x # xs) \\<subseteq> A\n  distinct (x # xs)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>(u, p).\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs)) =\n    distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)", "by (subst case_prod_beta', subst bind_return_distr') measurable"], ["proof (state)\nthis:\n  uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n  Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n  (\\<lambda>(u, p).\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs)) =\n  distr\n   (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n   (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n   (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n  Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n  (\\<lambda>(u, p).\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs)) =\n  distr\n   (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n   (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n   (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "also"], ["proof (state)\nthis:\n  uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n  Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n  (\\<lambda>(u, p).\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) (ins x u t) xs)) =\n  distr\n   (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n   (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n   (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have\n    \"\\<dots> = distr (?U \\<Otimes>\\<^sub>M Pi\\<^sub>M (set xs) (\\<lambda>i. ?U)) ?treap_sigma\n          (\\<lambda>f. foldl (\\<lambda>t y. ins y (if y = x then fst f else snd f y) t) (ins x (fst f) t) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs) =\n    distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>f.\n         foldl (\\<lambda>t y. ins y (if y = x then fst f else snd f y) t)\n          (ins x (fst f) t) xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs) =\n    distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>f.\n         foldl (\\<lambda>t y. ins y (if y = x then fst f else snd f y) t)\n          (ins x (fst f) t) xs)", "have \"foldl (\\<lambda>t y. ins y (snd f y) t) (ins x (fst f) t) xs =\n          foldl (\\<lambda>t y. ins y (if y = x then fst f else snd f y) t) (ins x (fst f) t) xs\" for f"], ["proof (prove)\ngoal (1 subgoal):\n 1. foldl (\\<lambda>t y. ins y (snd f y) t) (ins x (fst f) t) xs =\n    foldl (\\<lambda>t y. ins y (if y = x then fst f else snd f y) t)\n     (ins x (fst f) t) xs", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> rinss xs ?t A =\n                    Pi\\<^sub>M (set xs)\n                     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                    (\\<lambda>p.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (foldl (\\<lambda>t x. ins x (p x) t) ?t xs))\n  set (x # xs) \\<subseteq> A\n  distinct (x # xs)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. foldl (\\<lambda>t y. ins y (snd f y) t) (ins x (fst f) t) xs =\n    foldl (\\<lambda>t y. ins y (if y = x then fst f else snd f y) t)\n     (ins x (fst f) t) xs", "by (intro foldl_cong) auto"], ["proof (state)\nthis:\n  foldl (\\<lambda>t y. ins y (snd ?f2 y) t) (ins x (fst ?f2) t) xs =\n  foldl (\\<lambda>t y. ins y (if y = x then fst ?f2 else snd ?f2 y) t)\n   (ins x (fst ?f2) t) xs\n\ngoal (1 subgoal):\n 1. distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs) =\n    distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>f.\n         foldl (\\<lambda>t y. ins y (if y = x then fst f else snd f y) t)\n          (ins x (fst f) t) xs)", "then"], ["proof (chain)\npicking this:\n  foldl (\\<lambda>t y. ins y (snd ?f2 y) t) (ins x (fst ?f2) t) xs =\n  foldl (\\<lambda>t y. ins y (if y = x then fst ?f2 else snd ?f2 y) t)\n   (ins x (fst ?f2) t) xs", "show ?thesis"], ["proof (prove)\nusing this:\n  foldl (\\<lambda>t y. ins y (snd ?f2 y) t) (ins x (fst ?f2) t) xs =\n  foldl (\\<lambda>t y. ins y (if y = x then fst ?f2 else snd ?f2 y) t)\n   (ins x (fst ?f2) t) xs\n\ngoal (1 subgoal):\n 1. distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs) =\n    distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>f.\n         foldl (\\<lambda>t y. ins y (if y = x then fst f else snd f y) t)\n          (ins x (fst f) t) xs)", "by (auto simp add: case_prod_beta')"], ["proof (state)\nthis:\n  distr\n   (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n   (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n   (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs) =\n  distr\n   (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n   (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n   (\\<lambda>f.\n       foldl (\\<lambda>t y. ins y (if y = x then fst f else snd f y) t)\n        (ins x (fst f) t) xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distr\n   (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n   (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n   (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs) =\n  distr\n   (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n   (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n   (\\<lambda>f.\n       foldl (\\<lambda>t y. ins y (if y = x then fst f else snd f y) t)\n        (ins x (fst f) t) xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "also"], ["proof (state)\nthis:\n  distr\n   (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n   (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n   (\\<lambda>(u, f). foldl (\\<lambda>t x. ins x (f x) t) (ins x u t) xs) =\n  distr\n   (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n   (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n   (\\<lambda>f.\n       foldl (\\<lambda>t y. ins y (if y = x then fst f else snd f y) t)\n        (ins x (fst f) t) xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have \"\\<dots> = distr (?U \\<Otimes>\\<^sub>M Pi\\<^sub>M (set xs) (\\<lambda>i. ?U)) (Pi\\<^sub>M (insert x (set xs)) (\\<lambda>i. ?U)) \n                          (\\<lambda>(r, f). f(x := r)) \\<bind>\n                          (\\<lambda>p. return ?treap_sigma (foldl (\\<lambda>t x. ins x (p x) t) (ins x (p x) t) xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>f.\n         foldl (\\<lambda>t y. ins y (if y = x then fst f else snd f y) t)\n          (ins x (fst f) t) xs) =\n    distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n     (Pi\\<^sub>M (insert x (set xs))\n       (\\<lambda>i. uniform_measure lborel {0..1}))\n     (\\<lambda>(r, f). f(x := r)) \\<bind>\n    (\\<lambda>p.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x (p x) t) xs))", "using con_assms  Cons"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n  \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n   ?t \\<in> space\n             (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n  \\<Longrightarrow> rinss xs ?t A =\n                    Pi\\<^sub>M (set xs)\n                     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                    (\\<lambda>p.\n                        return\n                         (tree_sigma\n                           (count_space A \\<Otimes>\\<^sub>M lborel))\n                         (foldl (\\<lambda>t x. ins x (p x) t) ?t xs))\n  set (x # xs) \\<subseteq> A\n  distinct (x # xs)\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>f.\n         foldl (\\<lambda>t y. ins y (if y = x then fst f else snd f y) t)\n          (ins x (fst f) t) xs) =\n    distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n     (Pi\\<^sub>M (insert x (set xs))\n       (\\<lambda>i. uniform_measure lborel {0..1}))\n     (\\<lambda>(r, f). f(x := r)) \\<bind>\n    (\\<lambda>p.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x (p x) t) xs))", "by (subst bind_distr_return) (measurable, auto simp add: case_prod_beta')"], ["proof (state)\nthis:\n  distr\n   (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n   (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n   (\\<lambda>f.\n       foldl (\\<lambda>t y. ins y (if y = x then fst f else snd f y) t)\n        (ins x (fst f) t) xs) =\n  distr\n   (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n   (Pi\\<^sub>M (insert x (set xs))\n     (\\<lambda>i. uniform_measure lborel {0..1}))\n   (\\<lambda>(r, f). f(x := r)) \\<bind>\n  (\\<lambda>p.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) (ins x (p x) t) xs))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "also"], ["proof (state)\nthis:\n  distr\n   (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n   (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n   (\\<lambda>f.\n       foldl (\\<lambda>t y. ins y (if y = x then fst f else snd f y) t)\n        (ins x (fst f) t) xs) =\n  distr\n   (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n   (Pi\\<^sub>M (insert x (set xs))\n     (\\<lambda>i. uniform_measure lborel {0..1}))\n   (\\<lambda>(r, f). f(x := r)) \\<bind>\n  (\\<lambda>p.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) (ins x (p x) t) xs))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "have \"\\<dots> = Pi\\<^sub>M (insert x (set xs)) (\\<lambda>x. ?U) \\<bind>\n                  (\\<lambda>p. return ?treap_sigma (foldl (\\<lambda>t x. ins x (p x) t) (ins x (p x) t) xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n     (Pi\\<^sub>M (insert x (set xs))\n       (\\<lambda>i. uniform_measure lborel {0..1}))\n     (\\<lambda>(r, f). f(x := r)) \\<bind>\n    (\\<lambda>p.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x (p x) t) xs)) =\n    Pi\\<^sub>M (insert x (set xs))\n     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>p.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) (ins x (p x) t) xs))", "by (subst distr_pair_PiM_eq_PiM) (auto simp add: prob_space_uniform_measure)"], ["proof (state)\nthis:\n  distr\n   (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n    Pi\\<^sub>M (set xs) (\\<lambda>i. uniform_measure lborel {0..1}))\n   (Pi\\<^sub>M (insert x (set xs))\n     (\\<lambda>i. uniform_measure lborel {0..1}))\n   (\\<lambda>(r, f). f(x := r)) \\<bind>\n  (\\<lambda>p.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) (ins x (p x) t) xs)) =\n  Pi\\<^sub>M (insert x (set xs))\n   (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n  (\\<lambda>p.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) (ins x (p x) t) xs))\n\ngoal (1 subgoal):\n 1. \\<And>a xs t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>set xs \\<subseteq> A; distinct xs;\n                    t \\<in> space\n                             (tree_sigma\n                               (count_space A \\<Otimes>\\<^sub>M\n                                lborel))\\<rbrakk>\n                   \\<Longrightarrow> rinss xs t A =\n                                     Pi\\<^sub>M (set xs)\n(\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n                                     (\\<lambda>p.\n   return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n    (foldl (\\<lambda>t x. ins x (p x) t) t xs));\n        set (a # xs) \\<subseteq> A; distinct (a # xs);\n        t \\<in> space\n                 (tree_sigma\n                   (count_space A \\<Otimes>\\<^sub>M lborel))\\<rbrakk>\n       \\<Longrightarrow> rinss (a # xs) t A =\n                         Pi\\<^sub>M (set (a # xs))\n                          (\\<lambda>x.\n                              uniform_measure lborel {0..1}) \\<bind>\n                         (\\<lambda>p.\n                             return\n                              (tree_sigma\n                                (count_space A \\<Otimes>\\<^sub>M lborel))\n                              (foldl (\\<lambda>t x. ins x (p x) t) t\n                                (a # xs)))", "finally"], ["proof (chain)\npicking this:\n  rinss (x # xs) t A =\n  Pi\\<^sub>M (insert x (set xs))\n   (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n  (\\<lambda>p.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) (ins x (p x) t) xs))", "show ?case"], ["proof (prove)\nusing this:\n  rinss (x # xs) t A =\n  Pi\\<^sub>M (insert x (set xs))\n   (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n  (\\<lambda>p.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) (ins x (p x) t) xs))\n\ngoal (1 subgoal):\n 1. rinss (x # xs) t A =\n    Pi\\<^sub>M (set (x # xs))\n     (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n    (\\<lambda>p.\n        return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n         (foldl (\\<lambda>t x. ins x (p x) t) t (x # xs)))", "by (simp)"], ["proof (state)\nthis:\n  rinss (x # xs) t A =\n  Pi\\<^sub>M (set (x # xs))\n   (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n  (\\<lambda>p.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) t (x # xs)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rinss xs t A =\n  Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n  (\\<lambda>p.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) t xs))\n\ngoal (1 subgoal):\n 1. rinss xs t A =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) t xs)", "then"], ["proof (chain)\npicking this:\n  rinss xs t A =\n  Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n  (\\<lambda>p.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) t xs))", "show ?thesis"], ["proof (prove)\nusing this:\n  rinss xs t A =\n  Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n  (\\<lambda>p.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) t xs))\n\ngoal (1 subgoal):\n 1. rinss xs t A =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) t xs)", "using assms"], ["proof (prove)\nusing this:\n  rinss xs t A =\n  Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}) \\<bind>\n  (\\<lambda>p.\n      return (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (foldl (\\<lambda>t x. ins x (p x) t) t xs))\n  t \\<in> space (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n\ngoal (1 subgoal):\n 1. rinss xs t A =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) t xs)", "by (subst bind_return_distr'[symmetric]) (auto simp add: bind_return_distr')"], ["proof (state)\nthis:\n  rinss xs t A =\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n   (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) t xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary random_treap_fold_Leaf:\n  shows \"rinss xs Leaf A =\n         distr (\\<Pi>\\<^sub>M x\\<in>set xs. \\<U> 0 1)\n               (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n               (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) Leaf xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rinss xs \\<langle>\\<rangle> A =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n     (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs)", "by (auto simp add: random_treap_fold)"], ["", "text \\<open>\n  Next, we show that additionally forgetting the priorities in the end will yield\n  the same distribution as inserting the elements into a BST by ascending priority.\n\\<close>"], ["", "lemma rinss_bst_of_list:\n      \"distr (rinss xs Leaf A) (tree_sigma (count_space A)) (map_tree fst) =\n       distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1)) (tree_sigma (count_space A))\n             (\\<lambda>p. bst_of_list (sort_key p xs))\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n     (map_tree fst) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n     (map_tree fst) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))", "have [measurable]: \"set xs \\<subseteq> space (count_space A)\"\n    \"c \\<in> set xs \\<Longrightarrow> c \\<in> space (count_space A)\" for c"], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<subseteq> space (count_space A) &&&\n    (c \\<in> set xs \\<Longrightarrow> c \\<in> space (count_space A))", "using con_assms"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> space (count_space A) &&&\n    (c \\<in> set xs \\<Longrightarrow> c \\<in> space (count_space A))", "by auto"], ["proof (state)\nthis:\n  set xs \\<subseteq> space (count_space A)\n  ?c \\<in> set xs \\<Longrightarrow> ?c \\<in> space (count_space A)\n\ngoal (1 subgoal):\n 1. distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n     (map_tree fst) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))", "have [simp]: \"map_tree fst \\<circ> (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs)\n                \\<in> Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0::real..1}) \\<rightarrow>\\<^sub>M\n                  tree_sigma (count_space A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_tree fst \\<circ>\n    (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs)\n    \\<in> Pi\\<^sub>M (set xs)\n           (\\<lambda>x. uniform_measure lborel {0..1}) \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A)", "unfolding \\<U>_def map_tree_primrec"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_tree \\<langle>\\<rangle> (\\<lambda>l a r l'. Node l' (fst a)) \\<circ>\n    (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs)\n    \\<in> Pi\\<^sub>M (set xs)\n           (\\<lambda>x. uniform_measure lborel {0..1}) \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A)", "using con_assms"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. rec_tree \\<langle>\\<rangle> (\\<lambda>l a r l'. Node l' (fst a)) \\<circ>\n    (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs)\n    \\<in> Pi\\<^sub>M (set xs)\n           (\\<lambda>x. uniform_measure lborel {0..1}) \\<rightarrow>\\<^sub>M\n          tree_sigma (count_space A)", "by measurable"], ["proof (state)\nthis:\n  map_tree fst \\<circ>\n  (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs)\n  \\<in> Pi\\<^sub>M (set xs)\n         (\\<lambda>x. uniform_measure lborel {0..1}) \\<rightarrow>\\<^sub>M\n        tree_sigma (count_space A)\n\ngoal (1 subgoal):\n 1. distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n     (map_tree fst) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))", "have \"AE f in Pi\\<^sub>M (set xs) (\\<lambda>i. \\<U> 0 1). inj_on f (set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE f in Pi\\<^sub>M (set xs) (\\<lambda>i. \\<U> 0 1). inj_on f (set xs)", "unfolding \\<U>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE f in Pi\\<^sub>M (set xs)\n             (\\<lambda>i. uniform_measure lborel {0..1}). inj_on f (set xs)", "by (rule almost_everywhere_avoid_finite) auto"], ["proof (state)\nthis:\n  AE f in Pi\\<^sub>M (set xs) (\\<lambda>i. \\<U> 0 1). inj_on f (set xs)\n\ngoal (1 subgoal):\n 1. distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n     (map_tree fst) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))", "then"], ["proof (chain)\npicking this:\n  AE f in Pi\\<^sub>M (set xs) (\\<lambda>i. \\<U> 0 1). inj_on f (set xs)", "have \"AE f in Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1).\n             map_tree fst (foldl (\\<lambda>t (k,p). ins k p t) \\<langle>\\<rangle> (map (\\<lambda>x. (x, f x)) xs)) =\n             bst_of_list (sort_key f xs)\""], ["proof (prove)\nusing this:\n  AE f in Pi\\<^sub>M (set xs) (\\<lambda>i. \\<U> 0 1). inj_on f (set xs)\n\ngoal (1 subgoal):\n 1. AE f in Pi\\<^sub>M (set xs)\n             (\\<lambda>x.\n                 \\<U> 0\n                  1). map_tree fst\n                       (foldl (\\<lambda>t (k, p). ins k p t)\n                         \\<langle>\\<rangle>\n                         (map (\\<lambda>x. (x, f x)) xs)) =\n                      bst_of_list (sort_key f xs)", "by (eventually_elim) (use con_assms in \\<open>auto simp add: fold_ins_bst_of_list\\<close>)"], ["proof (state)\nthis:\n  AE f in Pi\\<^sub>M (set xs)\n           (\\<lambda>x.\n               \\<U> 0\n                1). map_tree fst\n                     (foldl (\\<lambda>t (k, p). ins k p t)\n                       \\<langle>\\<rangle> (map (\\<lambda>x. (x, f x)) xs)) =\n                    bst_of_list (sort_key f xs)\n\ngoal (1 subgoal):\n 1. distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n     (map_tree fst) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))", "then"], ["proof (chain)\npicking this:\n  AE f in Pi\\<^sub>M (set xs)\n           (\\<lambda>x.\n               \\<U> 0\n                1). map_tree fst\n                     (foldl (\\<lambda>t (k, p). ins k p t)\n                       \\<langle>\\<rangle> (map (\\<lambda>x. (x, f x)) xs)) =\n                    bst_of_list (sort_key f xs)", "have [simp]: \"AE f in Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1).\n             map_tree fst (foldl (\\<lambda>t k. ins k (f k) t) \\<langle>\\<rangle> xs) = bst_of_list (sort_key f xs)\""], ["proof (prove)\nusing this:\n  AE f in Pi\\<^sub>M (set xs)\n           (\\<lambda>x.\n               \\<U> 0\n                1). map_tree fst\n                     (foldl (\\<lambda>t (k, p). ins k p t)\n                       \\<langle>\\<rangle> (map (\\<lambda>x. (x, f x)) xs)) =\n                    bst_of_list (sort_key f xs)\n\ngoal (1 subgoal):\n 1. AE f in Pi\\<^sub>M (set xs)\n             (\\<lambda>x.\n                 \\<U> 0\n                  1). map_tree fst\n                       (foldl (\\<lambda>t k. ins k (f k) t)\n                         \\<langle>\\<rangle> xs) =\n                      bst_of_list (sort_key f xs)", "by (simp add: foldl_map)"], ["proof (state)\nthis:\n  AE f in Pi\\<^sub>M (set xs)\n           (\\<lambda>x.\n               \\<U> 0\n                1). map_tree fst\n                     (foldl (\\<lambda>t k. ins k (f k) t) \\<langle>\\<rangle>\n                       xs) =\n                    bst_of_list (sort_key f xs)\n\ngoal (1 subgoal):\n 1. distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n     (map_tree fst) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))", "have \"?lhs = distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1)) (tree_sigma (count_space A))\n                     (map_tree fst \\<circ> (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n     (map_tree fst) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (map_tree fst \\<circ>\n      (\\<lambda>p.\n          foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs))", "unfolding random_treap_fold_Leaf \\<U>_def map_tree_primrec"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr\n     (distr\n       (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n       (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (\\<lambda>p.\n           foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs))\n     (tree_sigma (count_space A))\n     (rec_tree \\<langle>\\<rangle> (\\<lambda>l a r l'. Node l' (fst a))) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A))\n     (rec_tree \\<langle>\\<rangle>\n       (\\<lambda>l a r l'. Node l' (fst a)) \\<circ>\n      (\\<lambda>p.\n          foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs))", "using con_assms"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. distr\n     (distr\n       (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n       (tree_sigma (count_space A \\<Otimes>\\<^sub>M lborel))\n       (\\<lambda>p.\n           foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs))\n     (tree_sigma (count_space A))\n     (rec_tree \\<langle>\\<rangle> (\\<lambda>l a r l'. Node l' (fst a))) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A))\n     (rec_tree \\<langle>\\<rangle>\n       (\\<lambda>l a r l'. Node l' (fst a)) \\<circ>\n      (\\<lambda>p.\n          foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs))", "by (subst distr_distr) measurable"], ["proof (state)\nthis:\n  distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n   (map_tree fst) =\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A))\n   (map_tree fst \\<circ>\n    (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs))\n\ngoal (1 subgoal):\n 1. distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n     (map_tree fst) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))", "also"], ["proof (state)\nthis:\n  distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n   (map_tree fst) =\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A))\n   (map_tree fst \\<circ>\n    (\\<lambda>p. foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs))\n\ngoal (1 subgoal):\n 1. distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n     (map_tree fst) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))", "have \"\\<dots> = ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (map_tree fst \\<circ>\n      (\\<lambda>p.\n          foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs)) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))", "by (intro distr_cong_AE) (auto simp add: \\<U>_def)"], ["proof (state)\nthis:\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A))\n   (map_tree fst \\<circ>\n    (\\<lambda>p.\n        foldl (\\<lambda>t x. ins x (p x) t) \\<langle>\\<rangle> xs)) =\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))\n\ngoal (1 subgoal):\n 1. distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n     (map_tree fst) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))", "finally"], ["proof (chain)\npicking this:\n  distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n   (map_tree fst) =\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))", "show ?thesis"], ["proof (prove)\nusing this:\n  distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n   (map_tree fst) =\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))\n\ngoal (1 subgoal):\n 1. distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n     (map_tree fst) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))", "."], ["proof (state)\nthis:\n  distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n   (map_tree fst) =\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  This in turn is the same as choosing a random permutation of the input list and\n  inserting the elements into a BST in that order.\n\\<close>"], ["", "lemma lborel_permutations_of_set_bst_of_list:\n  shows \"distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1)) (tree_sigma (count_space A))\n               (\\<lambda>p. bst_of_list (sort_key p xs)) =\n         distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "have [measurable]: \"(0::real) < 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 1", "by auto"], ["proof (state)\nthis:\n  0 < 1\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "have \"insort_wrt R xs = insort_wrt R (remdups xs)\" for R"], ["proof (prove)\ngoal (1 subgoal):\n 1. insort_wrt R xs = insort_wrt R (remdups xs)", "using con_assms distinct_remdups_id"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n  distinct ?xs \\<Longrightarrow> remdups ?xs = ?xs\n\ngoal (1 subgoal):\n 1. insort_wrt R xs = insort_wrt R (remdups xs)", "by metis"], ["proof (state)\nthis:\n  insort_wrt ?R xs = insort_wrt ?R (remdups xs)\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "then"], ["proof (chain)\npicking this:\n  insort_wrt ?R xs = insort_wrt ?R (remdups xs)", "have *: \"insort_wrt R xs = sorted_wrt_list_of_set R (set xs)\"\n    if \"linorder_on (set xs) R\" for R"], ["proof (prove)\nusing this:\n  insort_wrt ?R xs = insort_wrt ?R (remdups xs)\n\ngoal (1 subgoal):\n 1. insort_wrt R xs = sorted_wrt_list_of_set R (set xs)", "using that"], ["proof (prove)\nusing this:\n  insort_wrt ?R xs = insort_wrt ?R (remdups xs)\n  linorder_on (set xs) R\n\ngoal (1 subgoal):\n 1. insort_wrt R xs = sorted_wrt_list_of_set R (set xs)", "by (subst sorted_wrt_list_set) auto"], ["proof (state)\nthis:\n  linorder_on (set xs) ?R \\<Longrightarrow>\n  insort_wrt ?R xs = sorted_wrt_list_of_set ?R (set xs)\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "have [measurable]: \"(\\<lambda>x. x) \\<in> count_space (permutations_of_set (set xs)) \\<rightarrow>\\<^sub>M count_space (lists A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x)\n    \\<in> count_space (permutations_of_set (set xs)) \\<rightarrow>\\<^sub>M\n          count_space (lists A)", "using con_assms permutations_of_setD"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n  ?xs \\<in> permutations_of_set ?A \\<Longrightarrow> set ?xs = ?A\n  ?xs \\<in> permutations_of_set ?A \\<Longrightarrow> distinct ?xs\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x)\n    \\<in> count_space (permutations_of_set (set xs)) \\<rightarrow>\\<^sub>M\n          count_space (lists A)", "by fastforce"], ["proof (state)\nthis:\n  (\\<lambda>x. x)\n  \\<in> count_space (permutations_of_set (set xs)) \\<rightarrow>\\<^sub>M\n        count_space (lists A)\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "have [measurable]: \"(\\<lambda>R. insort_wrt R xs) \\<in>\n                      count_space (Pow (A \\<times> A)) \\<rightarrow>\\<^sub>M count_space (permutations_of_set (set xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>R. insort_wrt R xs)\n    \\<in> count_space (Pow (A \\<times> A)) \\<rightarrow>\\<^sub>M\n          count_space (permutations_of_set (set xs))", "using con_assms"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. (\\<lambda>R. insort_wrt R xs)\n    \\<in> count_space (Pow (A \\<times> A)) \\<rightarrow>\\<^sub>M\n          count_space (permutations_of_set (set xs))", "by (simp add: permutations_of_setI)"], ["proof (state)\nthis:\n  (\\<lambda>R. insort_wrt R xs)\n  \\<in> count_space (Pow (A \\<times> A)) \\<rightarrow>\\<^sub>M\n        count_space (permutations_of_set (set xs))\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "have \"?lhs \n   = distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1)) (tree_sigma (count_space A))\n           (\\<lambda>p. bst_of_list (insort_wrt (linorder_from_keys (set xs) p) xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p.\n         bst_of_list (insort_wrt (linorder_from_keys (set xs) p) xs))", "unfolding Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p.\n         bst_of_list (insort_wrt (linorder_from_keys (set xs) p) xs))", "by (simp add: insort_wrt_sort_key)"], ["proof (state)\nthis:\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs)) =\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A))\n   (\\<lambda>p. bst_of_list (insort_wrt (linorder_from_keys (set xs) p) xs))\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "also"], ["proof (state)\nthis:\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs)) =\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A))\n   (\\<lambda>p. bst_of_list (insort_wrt (linorder_from_keys (set xs) p) xs))\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "have \"\\<dots> = \n  distr (distr (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0::real..1}))\n    (count_space (Pow (A \\<times> A))) (linorder_from_keys (set xs)))\n  (tree_sigma (count_space A)) (\\<lambda>R. bst_of_list (insort_wrt R xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p.\n         bst_of_list (insort_wrt (linorder_from_keys (set xs) p) xs)) =\n    distr\n     (distr\n       (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n       (count_space (Pow (A \\<times> A))) (linorder_from_keys (set xs)))\n     (tree_sigma (count_space A))\n     (\\<lambda>R. bst_of_list (insort_wrt R xs))", "unfolding \\<U>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A))\n     (\\<lambda>p.\n         bst_of_list (insort_wrt (linorder_from_keys (set xs) p) xs)) =\n    distr\n     (distr\n       (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n       (count_space (Pow (A \\<times> A))) (linorder_from_keys (set xs)))\n     (tree_sigma (count_space A))\n     (\\<lambda>R. bst_of_list (insort_wrt R xs))", "using con_assms"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (tree_sigma (count_space A))\n     (\\<lambda>p.\n         bst_of_list (insort_wrt (linorder_from_keys (set xs) p) xs)) =\n    distr\n     (distr\n       (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n       (count_space (Pow (A \\<times> A))) (linorder_from_keys (set xs)))\n     (tree_sigma (count_space A))\n     (\\<lambda>R. bst_of_list (insort_wrt R xs))", "by (subst distr_distr) (measurable, metis comp_apply)"], ["proof (state)\nthis:\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A))\n   (\\<lambda>p.\n       bst_of_list (insort_wrt (linorder_from_keys (set xs) p) xs)) =\n  distr\n   (distr (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (count_space (Pow (A \\<times> A))) (linorder_from_keys (set xs)))\n   (tree_sigma (count_space A)) (\\<lambda>R. bst_of_list (insort_wrt R xs))\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "also"], ["proof (state)\nthis:\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A))\n   (\\<lambda>p.\n       bst_of_list (insort_wrt (linorder_from_keys (set xs) p) xs)) =\n  distr\n   (distr (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (count_space (Pow (A \\<times> A))) (linorder_from_keys (set xs)))\n   (tree_sigma (count_space A)) (\\<lambda>R. bst_of_list (insort_wrt R xs))\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "have \"\\<dots> = \n  distr (uniform_measure (count_space (Pow (A \\<times> A))) (linorders_on (set xs)))\n        (tree_sigma (count_space A)) (\\<lambda>R. bst_of_list (insort_wrt R xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr\n     (distr\n       (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n       (count_space (Pow (A \\<times> A))) (linorder_from_keys (set xs)))\n     (tree_sigma (count_space A))\n     (\\<lambda>R. bst_of_list (insort_wrt R xs)) =\n    distr\n     (uniform_measure (count_space (Pow (A \\<times> A)))\n       (linorders_on (set xs)))\n     (tree_sigma (count_space A))\n     (\\<lambda>R. bst_of_list (insort_wrt R xs))", "using con_assms"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. distr\n     (distr\n       (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n       (count_space (Pow (A \\<times> A))) (linorder_from_keys (set xs)))\n     (tree_sigma (count_space A))\n     (\\<lambda>R. bst_of_list (insort_wrt R xs)) =\n    distr\n     (uniform_measure (count_space (Pow (A \\<times> A)))\n       (linorders_on (set xs)))\n     (tree_sigma (count_space A))\n     (\\<lambda>R. bst_of_list (insort_wrt R xs))", "by (subst random_linorder_by_prios) auto"], ["proof (state)\nthis:\n  distr\n   (distr (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (count_space (Pow (A \\<times> A))) (linorder_from_keys (set xs)))\n   (tree_sigma (count_space A))\n   (\\<lambda>R. bst_of_list (insort_wrt R xs)) =\n  distr\n   (uniform_measure (count_space (Pow (A \\<times> A)))\n     (linorders_on (set xs)))\n   (tree_sigma (count_space A)) (\\<lambda>R. bst_of_list (insort_wrt R xs))\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "also"], ["proof (state)\nthis:\n  distr\n   (distr (Pi\\<^sub>M (set xs) (\\<lambda>x. uniform_measure lborel {0..1}))\n     (count_space (Pow (A \\<times> A))) (linorder_from_keys (set xs)))\n   (tree_sigma (count_space A))\n   (\\<lambda>R. bst_of_list (insort_wrt R xs)) =\n  distr\n   (uniform_measure (count_space (Pow (A \\<times> A)))\n     (linorders_on (set xs)))\n   (tree_sigma (count_space A)) (\\<lambda>R. bst_of_list (insort_wrt R xs))\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "have \"\\<dots> = distr (distr (uniform_measure (count_space (Pow (A \\<times> A))) (linorders_on (set xs)))\n                               (count_space (permutations_of_set (set xs))) (\\<lambda>R. insort_wrt R xs))\n                        (tree_sigma (count_space A)) bst_of_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr\n     (uniform_measure (count_space (Pow (A \\<times> A)))\n       (linorders_on (set xs)))\n     (tree_sigma (count_space A))\n     (\\<lambda>R. bst_of_list (insort_wrt R xs)) =\n    distr\n     (distr\n       (uniform_measure (count_space (Pow (A \\<times> A)))\n         (linorders_on (set xs)))\n       (count_space (permutations_of_set (set xs)))\n       (\\<lambda>R. insort_wrt R xs))\n     (tree_sigma (count_space A)) bst_of_list", "by (subst distr_distr) (measurable, metis comp_apply)"], ["proof (state)\nthis:\n  distr\n   (uniform_measure (count_space (Pow (A \\<times> A)))\n     (linorders_on (set xs)))\n   (tree_sigma (count_space A))\n   (\\<lambda>R. bst_of_list (insort_wrt R xs)) =\n  distr\n   (distr\n     (uniform_measure (count_space (Pow (A \\<times> A)))\n       (linorders_on (set xs)))\n     (count_space (permutations_of_set (set xs)))\n     (\\<lambda>R. insort_wrt R xs))\n   (tree_sigma (count_space A)) bst_of_list\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "also"], ["proof (state)\nthis:\n  distr\n   (uniform_measure (count_space (Pow (A \\<times> A)))\n     (linorders_on (set xs)))\n   (tree_sigma (count_space A))\n   (\\<lambda>R. bst_of_list (insort_wrt R xs)) =\n  distr\n   (distr\n     (uniform_measure (count_space (Pow (A \\<times> A)))\n       (linorders_on (set xs)))\n     (count_space (permutations_of_set (set xs)))\n     (\\<lambda>R. insort_wrt R xs))\n   (tree_sigma (count_space A)) bst_of_list\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "have \"\\<dots> = distr (uniform_measure (count_space (permutations_of_set (set xs)))\n                          ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n                    (tree_sigma (count_space A)) bst_of_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr\n     (distr\n       (uniform_measure (count_space (Pow (A \\<times> A)))\n         (linorders_on (set xs)))\n       (count_space (permutations_of_set (set xs)))\n       (\\<lambda>R. insort_wrt R xs))\n     (tree_sigma (count_space A)) bst_of_list =\n    distr\n     (uniform_measure (count_space (permutations_of_set (set xs)))\n       ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n     (tree_sigma (count_space A)) bst_of_list", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distr\n     (distr\n       (uniform_measure (count_space (Pow (A \\<times> A)))\n         (linorders_on (set xs)))\n       (count_space (permutations_of_set (set xs)))\n       (\\<lambda>R. insort_wrt R xs))\n     (tree_sigma (count_space A)) bst_of_list =\n    distr\n     (uniform_measure (count_space (permutations_of_set (set xs)))\n       ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n     (tree_sigma (count_space A)) bst_of_list", "have \"bij_betw (\\<lambda>R. insort_wrt R xs) (linorders_on (set xs)) (permutations_of_set (set xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>R. insort_wrt R xs) (linorders_on (set xs))\n     (permutations_of_set (set xs))", "by (subst bij_betw_cong, fastforce simp add: * linorders_on_def bij_betw_cong)\n         (use bij_betw_linorders_on' in blast)"], ["proof (state)\nthis:\n  bij_betw (\\<lambda>R. insort_wrt R xs) (linorders_on (set xs))\n   (permutations_of_set (set xs))\n\ngoal (1 subgoal):\n 1. distr\n     (distr\n       (uniform_measure (count_space (Pow (A \\<times> A)))\n         (linorders_on (set xs)))\n       (count_space (permutations_of_set (set xs)))\n       (\\<lambda>R. insort_wrt R xs))\n     (tree_sigma (count_space A)) bst_of_list =\n    distr\n     (uniform_measure (count_space (permutations_of_set (set xs)))\n       ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n     (tree_sigma (count_space A)) bst_of_list", "then"], ["proof (chain)\npicking this:\n  bij_betw (\\<lambda>R. insort_wrt R xs) (linorders_on (set xs))\n   (permutations_of_set (set xs))", "have \"inj_on (\\<lambda>R. insort_wrt R xs) (linorders_on (set xs))\""], ["proof (prove)\nusing this:\n  bij_betw (\\<lambda>R. insort_wrt R xs) (linorders_on (set xs))\n   (permutations_of_set (set xs))\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>R. insort_wrt R xs) (linorders_on (set xs))", "by (rule bij_betw_imp_inj_on)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>R. insort_wrt R xs) (linorders_on (set xs))\n\ngoal (1 subgoal):\n 1. distr\n     (distr\n       (uniform_measure (count_space (Pow (A \\<times> A)))\n         (linorders_on (set xs)))\n       (count_space (permutations_of_set (set xs)))\n       (\\<lambda>R. insort_wrt R xs))\n     (tree_sigma (count_space A)) bst_of_list =\n    distr\n     (uniform_measure (count_space (permutations_of_set (set xs)))\n       ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n     (tree_sigma (count_space A)) bst_of_list", "then"], ["proof (chain)\npicking this:\n  inj_on (\\<lambda>R. insort_wrt R xs) (linorders_on (set xs))", "have \"distr (uniform_measure (count_space (Pow (A \\<times> A))) (linorders_on (set xs)))\n                     (count_space (permutations_of_set (set xs))) (\\<lambda>R. insort_wrt R xs)\n               = uniform_measure (count_space (permutations_of_set (set xs)))\n                                 ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs))\""], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>R. insort_wrt R xs) (linorders_on (set xs))\n\ngoal (1 subgoal):\n 1. distr\n     (uniform_measure (count_space (Pow (A \\<times> A)))\n       (linorders_on (set xs)))\n     (count_space (permutations_of_set (set xs)))\n     (\\<lambda>R. insort_wrt R xs) =\n    uniform_measure (count_space (permutations_of_set (set xs)))\n     ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs))", "using con_assms"], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>R. insort_wrt R xs) (linorders_on (set xs))\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. distr\n     (uniform_measure (count_space (Pow (A \\<times> A)))\n       (linorders_on (set xs)))\n     (count_space (permutations_of_set (set xs)))\n     (\\<lambda>R. insort_wrt R xs) =\n    uniform_measure (count_space (permutations_of_set (set xs)))\n     ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs))", "by (intro distr_uniform_measure_count_space_inj)\n        (auto simp add: linorders_on_def linorder_on_def refl_on_def)"], ["proof (state)\nthis:\n  distr\n   (uniform_measure (count_space (Pow (A \\<times> A)))\n     (linorders_on (set xs)))\n   (count_space (permutations_of_set (set xs)))\n   (\\<lambda>R. insort_wrt R xs) =\n  uniform_measure (count_space (permutations_of_set (set xs)))\n   ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs))\n\ngoal (1 subgoal):\n 1. distr\n     (distr\n       (uniform_measure (count_space (Pow (A \\<times> A)))\n         (linorders_on (set xs)))\n       (count_space (permutations_of_set (set xs)))\n       (\\<lambda>R. insort_wrt R xs))\n     (tree_sigma (count_space A)) bst_of_list =\n    distr\n     (uniform_measure (count_space (permutations_of_set (set xs)))\n       ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n     (tree_sigma (count_space A)) bst_of_list", "then"], ["proof (chain)\npicking this:\n  distr\n   (uniform_measure (count_space (Pow (A \\<times> A)))\n     (linorders_on (set xs)))\n   (count_space (permutations_of_set (set xs)))\n   (\\<lambda>R. insort_wrt R xs) =\n  uniform_measure (count_space (permutations_of_set (set xs)))\n   ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs))", "show ?thesis"], ["proof (prove)\nusing this:\n  distr\n   (uniform_measure (count_space (Pow (A \\<times> A)))\n     (linorders_on (set xs)))\n   (count_space (permutations_of_set (set xs)))\n   (\\<lambda>R. insort_wrt R xs) =\n  uniform_measure (count_space (permutations_of_set (set xs)))\n   ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs))\n\ngoal (1 subgoal):\n 1. distr\n     (distr\n       (uniform_measure (count_space (Pow (A \\<times> A)))\n         (linorders_on (set xs)))\n       (count_space (permutations_of_set (set xs)))\n       (\\<lambda>R. insort_wrt R xs))\n     (tree_sigma (count_space A)) bst_of_list =\n    distr\n     (uniform_measure (count_space (permutations_of_set (set xs)))\n       ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n     (tree_sigma (count_space A)) bst_of_list", "by auto"], ["proof (state)\nthis:\n  distr\n   (distr\n     (uniform_measure (count_space (Pow (A \\<times> A)))\n       (linorders_on (set xs)))\n     (count_space (permutations_of_set (set xs)))\n     (\\<lambda>R. insort_wrt R xs))\n   (tree_sigma (count_space A)) bst_of_list =\n  distr\n   (uniform_measure (count_space (permutations_of_set (set xs)))\n     ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n   (tree_sigma (count_space A)) bst_of_list\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distr\n   (distr\n     (uniform_measure (count_space (Pow (A \\<times> A)))\n       (linorders_on (set xs)))\n     (count_space (permutations_of_set (set xs)))\n     (\\<lambda>R. insort_wrt R xs))\n   (tree_sigma (count_space A)) bst_of_list =\n  distr\n   (uniform_measure (count_space (permutations_of_set (set xs)))\n     ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n   (tree_sigma (count_space A)) bst_of_list\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "also"], ["proof (state)\nthis:\n  distr\n   (distr\n     (uniform_measure (count_space (Pow (A \\<times> A)))\n       (linorders_on (set xs)))\n     (count_space (permutations_of_set (set xs)))\n     (\\<lambda>R. insort_wrt R xs))\n   (tree_sigma (count_space A)) bst_of_list =\n  distr\n   (uniform_measure (count_space (permutations_of_set (set xs)))\n     ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n   (tree_sigma (count_space A)) bst_of_list\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "have \"\\<dots> = distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr\n     (uniform_measure (count_space (permutations_of_set (set xs)))\n       ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n     (tree_sigma (count_space A)) bst_of_list =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distr\n     (uniform_measure (count_space (permutations_of_set (set xs)))\n       ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n     (tree_sigma (count_space A)) bst_of_list =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "have \"((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)) = permutations_of_set (set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs) =\n    permutations_of_set (set xs)", "by (intro bij_betw_imp_surj_on, subst bij_betw_cong, rule *)\n         (fastforce simp add: linorders_on_def,  use bij_betw_linorders_on' in blast)"], ["proof (state)\nthis:\n  (\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs) =\n  permutations_of_set (set xs)\n\ngoal (1 subgoal):\n 1. distr\n     (uniform_measure (count_space (permutations_of_set (set xs)))\n       ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n     (tree_sigma (count_space A)) bst_of_list =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs) =\n  permutations_of_set (set xs)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs) =\n  permutations_of_set (set xs)\n\ngoal (1 subgoal):\n 1. distr\n     (uniform_measure (count_space (permutations_of_set (set xs)))\n       ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n     (tree_sigma (count_space A)) bst_of_list =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "by (simp add: random_perm_def)"], ["proof (state)\nthis:\n  distr\n   (uniform_measure (count_space (permutations_of_set (set xs)))\n     ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n   (tree_sigma (count_space A)) bst_of_list =\n  distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distr\n   (uniform_measure (count_space (permutations_of_set (set xs)))\n     ((\\<lambda>R. insort_wrt R xs) ` linorders_on (set xs)))\n   (tree_sigma (count_space A)) bst_of_list =\n  distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "finally"], ["proof (chain)\npicking this:\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs)) =\n  distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "show ?thesis"], ["proof (prove)\nusing this:\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs)) =\n  distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n     (tree_sigma (count_space A))\n     (\\<lambda>p. bst_of_list (sort_key p xs)) =\n    distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list", "."], ["proof (state)\nthis:\n  distr (Pi\\<^sub>M (set xs) (\\<lambda>x. \\<U> 0 1))\n   (tree_sigma (count_space A)) (\\<lambda>p. bst_of_list (sort_key p xs)) =\n  distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma distr_bst_of_list_tree_sigma_count_space: \"\n   distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list =\n     distr (random_perm xs) (count_space (trees A)) bst_of_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list =\n    distr (random_perm xs) (count_space (trees A)) bst_of_list", "using con_assms"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. distr (random_perm xs) (tree_sigma (count_space A)) bst_of_list =\n    distr (random_perm xs) (count_space (trees A)) bst_of_list", "by (intro distr_cong)  (auto intro!: sets_tree_sigma_count_space)"], ["", "text \\<open>\n  This is the same as a \\emph{random BST}.\n\\<close>"], ["", "lemma distr_bst_of_list_random_bst: \"\n  distr (random_perm xs) (count_space (trees A)) bst_of_list =\n    restrict_space (random_bst (set xs)) (trees A)\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (random_perm xs) (count_space (trees A)) bst_of_list =\n    restrict_space (measure_pmf (random_bst (set xs))) (trees A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distr (random_perm xs) (count_space (trees A)) bst_of_list =\n    restrict_space (measure_pmf (random_bst (set xs))) (trees A)", "have \"?rhs = restrict_space (distr (uniform_measure (count_space UNIV)\n                 (permutations_of_set (set xs))) (count_space UNIV) bst_of_list) (trees A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_space (measure_pmf (random_bst (set xs))) (trees A) =\n    restrict_space\n     (distr\n       (uniform_measure (count_space UNIV) (permutations_of_set (set xs)))\n       (count_space UNIV) bst_of_list)\n     (trees A)", "by (auto simp: random_bst_altdef measure_pmf_of_set map_pmf_rep_eq)"], ["proof (state)\nthis:\n  restrict_space (measure_pmf (random_bst (set xs))) (trees A) =\n  restrict_space\n   (distr\n     (uniform_measure (count_space UNIV) (permutations_of_set (set xs)))\n     (count_space UNIV) bst_of_list)\n   (trees A)\n\ngoal (1 subgoal):\n 1. distr (random_perm xs) (count_space (trees A)) bst_of_list =\n    restrict_space (measure_pmf (random_bst (set xs))) (trees A)", "also"], ["proof (state)\nthis:\n  restrict_space (measure_pmf (random_bst (set xs))) (trees A) =\n  restrict_space\n   (distr\n     (uniform_measure (count_space UNIV) (permutations_of_set (set xs)))\n     (count_space UNIV) bst_of_list)\n   (trees A)\n\ngoal (1 subgoal):\n 1. distr (random_perm xs) (count_space (trees A)) bst_of_list =\n    restrict_space (measure_pmf (random_bst (set xs))) (trees A)", "have \"distr (uniform_measure (count_space UNIV) (permutations_of_set (set xs))) \n                   (count_space UNIV) bst_of_list = \n               distr (random_perm xs) (count_space UNIV) bst_of_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr\n     (uniform_measure (count_space UNIV) (permutations_of_set (set xs)))\n     (count_space UNIV) bst_of_list =\n    distr (random_perm xs) (count_space UNIV) bst_of_list", "by (intro distr_restrict) (auto simp: random_perm_def)"], ["proof (state)\nthis:\n  distr (uniform_measure (count_space UNIV) (permutations_of_set (set xs)))\n   (count_space UNIV) bst_of_list =\n  distr (random_perm xs) (count_space UNIV) bst_of_list\n\ngoal (1 subgoal):\n 1. distr (random_perm xs) (count_space (trees A)) bst_of_list =\n    restrict_space (measure_pmf (random_bst (set xs))) (trees A)", "also"], ["proof (state)\nthis:\n  distr (uniform_measure (count_space UNIV) (permutations_of_set (set xs)))\n   (count_space UNIV) bst_of_list =\n  distr (random_perm xs) (count_space UNIV) bst_of_list\n\ngoal (1 subgoal):\n 1. distr (random_perm xs) (count_space (trees A)) bst_of_list =\n    restrict_space (measure_pmf (random_bst (set xs))) (trees A)", "have \"restrict_space \\<dots> (trees A) =\n               distr (random_perm xs) (count_space (trees A)) bst_of_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_space (distr (random_perm xs) (count_space UNIV) bst_of_list)\n     (trees A) =\n    distr (random_perm xs) (count_space (trees A)) bst_of_list", "using con_assms"], ["proof (prove)\nusing this:\n  countable A\n  set xs \\<subseteq> A\n  distinct xs\n\ngoal (1 subgoal):\n 1. restrict_space (distr (random_perm xs) (count_space UNIV) bst_of_list)\n     (trees A) =\n    distr (random_perm xs) (count_space (trees A)) bst_of_list", "by (subst restrict_distr)\n       (auto simp: random_perm_def bst_of_list_trees restrict_count_space permutations_of_setD)"], ["proof (state)\nthis:\n  restrict_space (distr (random_perm xs) (count_space UNIV) bst_of_list)\n   (trees A) =\n  distr (random_perm xs) (count_space (trees A)) bst_of_list\n\ngoal (1 subgoal):\n 1. distr (random_perm xs) (count_space (trees A)) bst_of_list =\n    restrict_space (measure_pmf (random_bst (set xs))) (trees A)", "finally"], ["proof (chain)\npicking this:\n  restrict_space (measure_pmf (random_bst (set xs))) (trees A) =\n  distr (random_perm xs) (count_space (trees A)) bst_of_list", "show ?thesis"], ["proof (prove)\nusing this:\n  restrict_space (measure_pmf (random_bst (set xs))) (trees A) =\n  distr (random_perm xs) (count_space (trees A)) bst_of_list\n\ngoal (1 subgoal):\n 1. distr (random_perm xs) (count_space (trees A)) bst_of_list =\n    restrict_space (measure_pmf (random_bst (set xs))) (trees A)", ".."], ["proof (state)\nthis:\n  distr (random_perm xs) (count_space (trees A)) bst_of_list =\n  restrict_space (measure_pmf (random_bst (set xs))) (trees A)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  We put everything together and obtain our main result:\n\\<close>"], ["", "theorem rinss_random_bst:\n  \"distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A)) (map_tree fst) =\n     restrict_space (measure_pmf (random_bst (set xs))) (trees A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (rinss xs \\<langle>\\<rangle> A) (tree_sigma (count_space A))\n     (map_tree fst) =\n    restrict_space (measure_pmf (random_bst (set xs))) (trees A)", "by (simp only: rinss_bst_of_list lborel_permutations_of_set_bst_of_list\n                 distr_bst_of_list_tree_sigma_count_space distr_bst_of_list_random_bst)"], ["", "end"], ["", "end"]]}