{"file_name": "/home/qj213/afp-2021-10-22/thys/Treaps/Probability_Misc.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Treaps", "problem_names": ["lemma measure_eqI_countable_AE':\n  assumes [simp]: \"sets M = Pow B\" \"sets N = Pow B\" and subset: \"\\<Omega> \\<subseteq> B\"\n  assumes ae: \"AE x in M. x \\<in> \\<Omega>\" \"AE x in N. x \\<in> \\<Omega>\" and [simp]: \"countable \\<Omega>\"\n  assumes eq: \"\\<And>x. x \\<in> \\<Omega> \\<Longrightarrow> emeasure M {x} = emeasure N {x}\"\n  shows \"M = N\"", "lemma measurable_le[measurable (raw)]:\n  fixes f :: \"'a \\<Rightarrow> 'b::{second_countable_topology, linorder_topology}\"\n  assumes \"f \\<in> borel_measurable M\" \"g \\<in> borel_measurable M\"\n  shows \"Measurable.pred M (\\<lambda>x. f x \\<le> g x)\"", "lemma measurable_eq[measurable (raw)]:\n  fixes f :: \"'a \\<Rightarrow> 'b::{second_countable_topology, linorder_topology}\"\n  assumes \"f \\<in> borel_measurable M\" \"g \\<in> borel_measurable M\"\n  shows \"Measurable.pred M (\\<lambda>x. f x = g x)\"", "lemma countable_null_set:\n  assumes \"countable A\" \"A \\<subseteq> space M\"\n  shows   \"A \\<in> null_sets M\"", "lemma finite_null_set:\n  assumes \"finite A\" \"A \\<subseteq> space M\"\n  shows   \"A \\<in> null_sets M\"", "lemma measurable_inj_on_finite:\n  assumes fin [measurable]: \"finite I\"\n  assumes [measurable]: \"\\<And>i j. Measurable.pred (M i \\<Otimes>\\<^sub>M M j) (\\<lambda>(x,y). x = y)\"\n  shows   \"Measurable.pred (Pi\\<^sub>M I M) (\\<lambda>x. inj_on x I)\"", "lemma almost_everywhere_not_in_countable_set:\n  assumes \"countable A\"\n  assumes [measurable]: \"Measurable.pred (M \\<Otimes>\\<^sub>M M) (\\<lambda>(x,y). x = y)\"\n  assumes null: \"\\<And>x. x \\<in> space M \\<Longrightarrow> {x} \\<in> null_sets M\"\n  shows   \"AE x in M. x \\<notin> A\"", "lemma almost_everywhere_inj_on_PiM:\n  assumes fin: \"finite I\" and prob_space: \"\\<And>i. i \\<in> I \\<Longrightarrow> prob_space (M i)\"\n  assumes [measurable]: \"\\<And>i j. Measurable.pred (M i \\<Otimes>\\<^sub>M M j) (\\<lambda>(x,y). x = y)\"\n  assumes null: \"\\<And>i x. i \\<in> I \\<Longrightarrow> x \\<in> space (M i) \\<Longrightarrow> {x} \\<in> null_sets (M i)\"\n  shows   \"AE f in (\\<Pi>\\<^sub>M i\\<in>I. M i). inj_on f I\"", "lemma null_sets_uniform_measure:\n  assumes \"A \\<in> sets M\" \"emeasure M A \\<noteq> \\<infinity>\"\n  shows   \"null_sets (uniform_measure M A) = (\\<lambda>B. A \\<inter> B) -` null_sets M \\<inter> sets M\"", "lemma almost_everywhere_avoid_finite:\n  assumes fin: \"finite I\"\n  shows   \"AE f in (\\<Pi>\\<^sub>M i\\<in>I. uniform_measure lborel {(0::real)..1}). inj_on f I\"", "lemma almost_everywhere_avoid_countable:\n  assumes \"countable A\"\n  shows   \"AE x in uniform_measure lborel {(0::real)..1}. x \\<notin> A\"", "lemma measure_pmf_of_set:\n  assumes \"A \\<noteq> {}\" and \"finite A\" \n  shows   \"measure_pmf (pmf_of_set A) = uniform_measure (count_space UNIV) A\"", "lemma emeasure_distr_restrict:\n  assumes \"f \\<in> M \\<rightarrow>\\<^sub>M N\" \"f \\<in> M' \\<rightarrow>\\<^sub>M N'\" \"A \\<in> sets N'\" \"sets M' \\<subseteq> sets M\" \"sets N' \\<subseteq> sets N\"\n  assumes \"\\<And>X. X \\<in> sets M' \\<Longrightarrow> emeasure M X = emeasure M' X\"\n  assumes \"\\<And>X. X \\<in> sets M \\<Longrightarrow> X \\<subseteq> space M - space M' \\<Longrightarrow> emeasure M X = 0\"\n  shows   \"emeasure (distr M N f) A= emeasure (distr M' N' f) A\"", "lemma distr_uniform_measure_count_space_inj:\n  assumes \"inj_on f A'\" \"A' \\<subseteq> A\" \"f ` A \\<subseteq> B\" \"finite A'\"\n  shows   \"distr (uniform_measure (count_space A) A') (count_space B) f =\n             uniform_measure (count_space B) (f ` A')\" (is \"?lhs = ?rhs\")", "lemma (in pair_prob_space) pair_measure_bind:\n  assumes [measurable]: \"f \\<in> M1 \\<Otimes>\\<^sub>M M2 \\<rightarrow>\\<^sub>M subprob_algebra N\"\n  shows \"(M1 \\<Otimes>\\<^sub>M M2) \\<bind> f = do {x \\<leftarrow> M1; y \\<leftarrow> M2; f (x, y)}\"", "lemma count_space_singleton_conv_return: \n  \"count_space {x} = return (count_space {x}) x\"", "lemma distr_count_space_singleton [simp]:\n    \"f x \\<in> space M \\<Longrightarrow> distr (count_space {x}) M f = return M (f x)\"", "lemma uniform_measure_count_space_singleton [simp]:\n  assumes \"{x} \\<in> sets M\" \"emeasure M {x} \\<noteq> 0\" \"emeasure M {x} < \\<infinity>\"\n  shows   \"uniform_measure M {x} = return M x\"", "lemma PiM_uniform_measure_permute:\n  fixes a b :: real\n  assumes \"g permutes A\" \"a < b\"\n  shows   \"distr (PiM A (\\<lambda>_. uniform_measure lborel {a..b})) (PiM A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n             PiM A (\\<lambda>_. uniform_measure lborel {a..b})\"", "lemma ennreal_fact [simp]: \"ennreal (fact n) = fact n\"", "lemma inverse_ennreal_unique:\n  assumes \"a * (b :: ennreal) = 1\"\n  shows   \"b = inverse a\""], "translations": [["", "lemma measure_eqI_countable_AE':\n  assumes [simp]: \"sets M = Pow B\" \"sets N = Pow B\" and subset: \"\\<Omega> \\<subseteq> B\"\n  assumes ae: \"AE x in M. x \\<in> \\<Omega>\" \"AE x in N. x \\<in> \\<Omega>\" and [simp]: \"countable \\<Omega>\"\n  assumes eq: \"\\<And>x. x \\<in> \\<Omega> \\<Longrightarrow> emeasure M {x} = emeasure N {x}\"\n  shows \"M = N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M = N", "proof (rule measure_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. sets M = sets N\n 2. \\<And>A. A \\<in> sets M \\<Longrightarrow> emeasure M A = emeasure N A", "fix A"], ["proof (state)\ngoal (2 subgoals):\n 1. sets M = sets N\n 2. \\<And>A. A \\<in> sets M \\<Longrightarrow> emeasure M A = emeasure N A", "assume A: \"A \\<in> sets M\""], ["proof (state)\nthis:\n  A \\<in> sets M\n\ngoal (2 subgoals):\n 1. sets M = sets N\n 2. \\<And>A. A \\<in> sets M \\<Longrightarrow> emeasure M A = emeasure N A", "have \"emeasure N A = emeasure N {x\\<in>\\<Omega>. x \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure N A = emeasure N {x \\<in> \\<Omega>. x \\<in> A}", "using ae subset A"], ["proof (prove)\nusing this:\n  AE x in M. x \\<in> \\<Omega>\n  AE x in N. x \\<in> \\<Omega>\n  \\<Omega> \\<subseteq> B\n  A \\<in> sets M\n\ngoal (1 subgoal):\n 1. emeasure N A = emeasure N {x \\<in> \\<Omega>. x \\<in> A}", "by (intro emeasure_eq_AE) auto"], ["proof (state)\nthis:\n  emeasure N A = emeasure N {x \\<in> \\<Omega>. x \\<in> A}\n\ngoal (2 subgoals):\n 1. sets M = sets N\n 2. \\<And>A. A \\<in> sets M \\<Longrightarrow> emeasure M A = emeasure N A", "also"], ["proof (state)\nthis:\n  emeasure N A = emeasure N {x \\<in> \\<Omega>. x \\<in> A}\n\ngoal (2 subgoals):\n 1. sets M = sets N\n 2. \\<And>A. A \\<in> sets M \\<Longrightarrow> emeasure M A = emeasure N A", "have \"\\<dots> = (\\<integral>\\<^sup>+x. emeasure N {x} \\<partial>count_space {x\\<in>\\<Omega>. x \\<in> A})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure N {x \\<in> \\<Omega>. x \\<in> A} =\n    \\<integral>\\<^sup>+ x. emeasure N {x}\n                       \\<partial>count_space {x \\<in> \\<Omega>. x \\<in> A}", "using A subset"], ["proof (prove)\nusing this:\n  A \\<in> sets M\n  \\<Omega> \\<subseteq> B\n\ngoal (1 subgoal):\n 1. emeasure N {x \\<in> \\<Omega>. x \\<in> A} =\n    \\<integral>\\<^sup>+ x. emeasure N {x}\n                       \\<partial>count_space {x \\<in> \\<Omega>. x \\<in> A}", "by (intro emeasure_countable_singleton) auto"], ["proof (state)\nthis:\n  emeasure N {x \\<in> \\<Omega>. x \\<in> A} =\n  \\<integral>\\<^sup>+ x. emeasure N {x}\n                     \\<partial>count_space {x \\<in> \\<Omega>. x \\<in> A}\n\ngoal (2 subgoals):\n 1. sets M = sets N\n 2. \\<And>A. A \\<in> sets M \\<Longrightarrow> emeasure M A = emeasure N A", "also"], ["proof (state)\nthis:\n  emeasure N {x \\<in> \\<Omega>. x \\<in> A} =\n  \\<integral>\\<^sup>+ x. emeasure N {x}\n                     \\<partial>count_space {x \\<in> \\<Omega>. x \\<in> A}\n\ngoal (2 subgoals):\n 1. sets M = sets N\n 2. \\<And>A. A \\<in> sets M \\<Longrightarrow> emeasure M A = emeasure N A", "have \"\\<dots> = (\\<integral>\\<^sup>+x. emeasure M {x} \\<partial>count_space {x\\<in>\\<Omega>. x \\<in> A})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. emeasure N {x}\n                       \\<partial>count_space {x \\<in> \\<Omega>. x \\<in> A} =\n    \\<integral>\\<^sup>+ x. emeasure M {x}\n                       \\<partial>count_space {x \\<in> \\<Omega>. x \\<in> A}", "by (intro nn_integral_cong eq[symmetric]) auto"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. emeasure N {x}\n                     \\<partial>count_space {x \\<in> \\<Omega>. x \\<in> A} =\n  \\<integral>\\<^sup>+ x. emeasure M {x}\n                     \\<partial>count_space {x \\<in> \\<Omega>. x \\<in> A}\n\ngoal (2 subgoals):\n 1. sets M = sets N\n 2. \\<And>A. A \\<in> sets M \\<Longrightarrow> emeasure M A = emeasure N A", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. emeasure N {x}\n                     \\<partial>count_space {x \\<in> \\<Omega>. x \\<in> A} =\n  \\<integral>\\<^sup>+ x. emeasure M {x}\n                     \\<partial>count_space {x \\<in> \\<Omega>. x \\<in> A}\n\ngoal (2 subgoals):\n 1. sets M = sets N\n 2. \\<And>A. A \\<in> sets M \\<Longrightarrow> emeasure M A = emeasure N A", "have \"\\<dots> = emeasure M {x\\<in>\\<Omega>. x \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. emeasure M {x}\n                       \\<partial>count_space {x \\<in> \\<Omega>. x \\<in> A} =\n    emeasure M {x \\<in> \\<Omega>. x \\<in> A}", "using A subset"], ["proof (prove)\nusing this:\n  A \\<in> sets M\n  \\<Omega> \\<subseteq> B\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. emeasure M {x}\n                       \\<partial>count_space {x \\<in> \\<Omega>. x \\<in> A} =\n    emeasure M {x \\<in> \\<Omega>. x \\<in> A}", "by (intro emeasure_countable_singleton[symmetric]) auto"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. emeasure M {x}\n                     \\<partial>count_space {x \\<in> \\<Omega>. x \\<in> A} =\n  emeasure M {x \\<in> \\<Omega>. x \\<in> A}\n\ngoal (2 subgoals):\n 1. sets M = sets N\n 2. \\<And>A. A \\<in> sets M \\<Longrightarrow> emeasure M A = emeasure N A", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. emeasure M {x}\n                     \\<partial>count_space {x \\<in> \\<Omega>. x \\<in> A} =\n  emeasure M {x \\<in> \\<Omega>. x \\<in> A}\n\ngoal (2 subgoals):\n 1. sets M = sets N\n 2. \\<And>A. A \\<in> sets M \\<Longrightarrow> emeasure M A = emeasure N A", "have \"\\<dots> = emeasure M A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure M {x \\<in> \\<Omega>. x \\<in> A} = emeasure M A", "using ae A subset"], ["proof (prove)\nusing this:\n  AE x in M. x \\<in> \\<Omega>\n  AE x in N. x \\<in> \\<Omega>\n  A \\<in> sets M\n  \\<Omega> \\<subseteq> B\n\ngoal (1 subgoal):\n 1. emeasure M {x \\<in> \\<Omega>. x \\<in> A} = emeasure M A", "by (intro emeasure_eq_AE) auto"], ["proof (state)\nthis:\n  emeasure M {x \\<in> \\<Omega>. x \\<in> A} = emeasure M A\n\ngoal (2 subgoals):\n 1. sets M = sets N\n 2. \\<And>A. A \\<in> sets M \\<Longrightarrow> emeasure M A = emeasure N A", "finally"], ["proof (chain)\npicking this:\n  emeasure N A = emeasure M A", "show \"emeasure M A = emeasure N A\""], ["proof (prove)\nusing this:\n  emeasure N A = emeasure M A\n\ngoal (1 subgoal):\n 1. emeasure M A = emeasure N A", ".."], ["proof (state)\nthis:\n  emeasure M A = emeasure N A\n\ngoal (1 subgoal):\n 1. sets M = sets N", "qed simp"], ["", "lemma measurable_le[measurable (raw)]:\n  fixes f :: \"'a \\<Rightarrow> 'b::{second_countable_topology, linorder_topology}\"\n  assumes \"f \\<in> borel_measurable M\" \"g \\<in> borel_measurable M\"\n  shows \"Measurable.pred M (\\<lambda>x. f x \\<le> g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred M (\\<lambda>x. f x \\<le> g x)", "unfolding pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> space M. f x \\<le> g x} \\<in> sets M", "by (intro borel_measurable_le assms)"], ["", "lemma measurable_eq[measurable (raw)]:\n  fixes f :: \"'a \\<Rightarrow> 'b::{second_countable_topology, linorder_topology}\"\n  assumes \"f \\<in> borel_measurable M\" \"g \\<in> borel_measurable M\"\n  shows \"Measurable.pred M (\\<lambda>x. f x = g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred M (\\<lambda>x. f x = g x)", "unfolding pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> space M. f x = g x} \\<in> sets M", "by (intro borel_measurable_eq assms)"], ["", "context\n  fixes M :: \"'a measure\"\n  assumes singleton_null_set: \"x \\<in> space M \\<Longrightarrow> {x} \\<in> null_sets M\"\nbegin"], ["", "lemma countable_null_set:\n  assumes \"countable A\" \"A \\<subseteq> space M\"\n  shows   \"A \\<in> null_sets M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> null_sets M", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<in> null_sets M", "have \"(\\<Union>x\\<in>A. {x}) \\<in> null_sets M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>A. {x}) \\<in> null_sets M", "using assms"], ["proof (prove)\nusing this:\n  countable A\n  A \\<subseteq> space M\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>A. {x}) \\<in> null_sets M", "by (intro null_sets_UN' assms singleton_null_set) auto"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>A. {x}) \\<in> null_sets M\n\ngoal (1 subgoal):\n 1. A \\<in> null_sets M", "also"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>A. {x}) \\<in> null_sets M\n\ngoal (1 subgoal):\n 1. A \\<in> null_sets M", "have \"(\\<Union>x\\<in>A. {x}) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>A. {x}) = A", "by simp"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>A. {x}) = A\n\ngoal (1 subgoal):\n 1. A \\<in> null_sets M", "finally"], ["proof (chain)\npicking this:\n  A \\<in> null_sets M", "show ?thesis"], ["proof (prove)\nusing this:\n  A \\<in> null_sets M\n\ngoal (1 subgoal):\n 1. A \\<in> null_sets M", "."], ["proof (state)\nthis:\n  A \\<in> null_sets M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_null_set:\n  assumes \"finite A\" \"A \\<subseteq> space M\"\n  shows   \"A \\<in> null_sets M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> null_sets M", "using countable_finite[OF assms(1)] countable_null_set[OF _ assms(2)]"], ["proof (prove)\nusing this:\n  countable A\n  countable A \\<Longrightarrow> A \\<in> null_sets M\n\ngoal (1 subgoal):\n 1. A \\<in> null_sets M", "by simp"], ["", "end"], ["", "lemma measurable_inj_on_finite:\n  assumes fin [measurable]: \"finite I\"\n  assumes [measurable]: \"\\<And>i j. Measurable.pred (M i \\<Otimes>\\<^sub>M M j) (\\<lambda>(x,y). x = y)\"\n  shows   \"Measurable.pred (Pi\\<^sub>M I M) (\\<lambda>x. inj_on x I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred (Pi\\<^sub>M I M) (\\<lambda>x. inj_on x I)", "unfolding inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred (Pi\\<^sub>M I M)\n     (\\<lambda>x.\n         \\<forall>xa\\<in>I.\n            \\<forall>y\\<in>I. x xa = x y \\<longrightarrow> xa = y)", "by measurable"], ["", "lemma almost_everywhere_not_in_countable_set:\n  assumes \"countable A\"\n  assumes [measurable]: \"Measurable.pred (M \\<Otimes>\\<^sub>M M) (\\<lambda>(x,y). x = y)\"\n  assumes null: \"\\<And>x. x \\<in> space M \\<Longrightarrow> {x} \\<in> null_sets M\"\n  shows   \"AE x in M. x \\<notin> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in M. x \\<notin> A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. AE x in M. x \\<notin> A", "have \"A \\<inter> space M \\<in> null_sets M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter> space M \\<in> null_sets M", "by (rule countable_null_set) (insert assms(1), auto intro: null)"], ["proof (state)\nthis:\n  A \\<inter> space M \\<in> null_sets M\n\ngoal (1 subgoal):\n 1. AE x in M. x \\<notin> A", "hence \"AE x in M. \\<forall>y\\<in>A. x \\<noteq> y\""], ["proof (prove)\nusing this:\n  A \\<inter> space M \\<in> null_sets M\n\ngoal (1 subgoal):\n 1. AE x in M. \\<forall>y\\<in>A. x \\<noteq> y", "by (rule AE_I') auto"], ["proof (state)\nthis:\n  AE x in M. \\<forall>y\\<in>A. x \\<noteq> y\n\ngoal (1 subgoal):\n 1. AE x in M. x \\<notin> A", "also"], ["proof (state)\nthis:\n  AE x in M. \\<forall>y\\<in>A. x \\<noteq> y\n\ngoal (1 subgoal):\n 1. AE x in M. x \\<notin> A", "have \"?this \\<longleftrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (AE x in M. \\<forall>y\\<in>A. x \\<noteq> y) = (AE x in M. x \\<notin> A)", "by (intro AE_cong) auto"], ["proof (state)\nthis:\n  (AE x in M. \\<forall>y\\<in>A. x \\<noteq> y) = (AE x in M. x \\<notin> A)\n\ngoal (1 subgoal):\n 1. AE x in M. x \\<notin> A", "finally"], ["proof (chain)\npicking this:\n  AE x in M. x \\<notin> A", "show ?thesis"], ["proof (prove)\nusing this:\n  AE x in M. x \\<notin> A\n\ngoal (1 subgoal):\n 1. AE x in M. x \\<notin> A", "."], ["proof (state)\nthis:\n  AE x in M. x \\<notin> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma almost_everywhere_inj_on_PiM:\n  assumes fin: \"finite I\" and prob_space: \"\\<And>i. i \\<in> I \\<Longrightarrow> prob_space (M i)\"\n  assumes [measurable]: \"\\<And>i j. Measurable.pred (M i \\<Otimes>\\<^sub>M M j) (\\<lambda>(x,y). x = y)\"\n  assumes null: \"\\<And>i x. i \\<in> I \\<Longrightarrow> x \\<in> space (M i) \\<Longrightarrow> {x} \\<in> null_sets (M i)\"\n  shows   \"AE f in (\\<Pi>\\<^sub>M i\\<in>I. M i). inj_on f I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE f in Pi\\<^sub>M I M. inj_on f I", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. AE f in Pi\\<^sub>M I M. inj_on f I", "note [measurable] = measurable_inj_on_finite"], ["proof (state)\nthis:\n  \\<lbrakk>finite ?I;\n   \\<And>i j.\n      Measurable.pred (?M i \\<Otimes>\\<^sub>M ?M j)\n       (\\<lambda>(x, y). x = y)\\<rbrakk>\n  \\<Longrightarrow> Measurable.pred (Pi\\<^sub>M ?I ?M)\n                     (\\<lambda>x. inj_on x ?I)\n\ngoal (1 subgoal):\n 1. AE f in Pi\\<^sub>M I M. inj_on f I", "define I' where \"I' = I\""], ["proof (state)\nthis:\n  I' = I\n\ngoal (1 subgoal):\n 1. AE f in Pi\\<^sub>M I M. inj_on f I", "hence \"I \\<subseteq> I'\""], ["proof (prove)\nusing this:\n  I' = I\n\ngoal (1 subgoal):\n 1. I \\<subseteq> I'", "by simp"], ["proof (state)\nthis:\n  I \\<subseteq> I'\n\ngoal (1 subgoal):\n 1. AE f in Pi\\<^sub>M I M. inj_on f I", "from fin and this"], ["proof (chain)\npicking this:\n  finite I\n  I \\<subseteq> I'", "show ?thesis"], ["proof (prove)\nusing this:\n  finite I\n  I \\<subseteq> I'\n\ngoal (1 subgoal):\n 1. AE f in Pi\\<^sub>M I M. inj_on f I", "proof (induction I rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. {} \\<subseteq> I' \\<Longrightarrow> AE f in Pi\\<^sub>M {} M. inj_on f {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> I' \\<Longrightarrow>\n        AE f in Pi\\<^sub>M F M. inj_on f F;\n        insert x F \\<subseteq> I'\\<rbrakk>\n       \\<Longrightarrow> AE f in Pi\\<^sub>M (insert x F)\n                                  M. inj_on f (insert x F)", "case (insert i I)"], ["proof (state)\nthis:\n  finite I\n  i \\<notin> I\n  I \\<subseteq> I' \\<Longrightarrow> AE f in Pi\\<^sub>M I M. inj_on f I\n  insert i I \\<subseteq> I'\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> I' \\<Longrightarrow> AE f in Pi\\<^sub>M {} M. inj_on f {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> I' \\<Longrightarrow>\n        AE f in Pi\\<^sub>M F M. inj_on f F;\n        insert x F \\<subseteq> I'\\<rbrakk>\n       \\<Longrightarrow> AE f in Pi\\<^sub>M (insert x F)\n                                  M. inj_on f (insert x F)", "interpret pair_sigma_finite \"M i\" \"PiM I M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_sigma_finite (M i) (Pi\\<^sub>M I M)", "unfolding pair_sigma_finite_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma_finite_measure (M i) \\<and> sigma_finite_measure (Pi\\<^sub>M I M)", "using insert.prems"], ["proof (prove)\nusing this:\n  insert i I \\<subseteq> I'\n\ngoal (1 subgoal):\n 1. sigma_finite_measure (M i) \\<and> sigma_finite_measure (Pi\\<^sub>M I M)", "by (auto intro!: prob_space_imp_sigma_finite prob_space prob_space_PiM simp: I'_def)"], ["proof (state)\ngoal (2 subgoals):\n 1. {} \\<subseteq> I' \\<Longrightarrow> AE f in Pi\\<^sub>M {} M. inj_on f {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> I' \\<Longrightarrow>\n        AE f in Pi\\<^sub>M F M. inj_on f F;\n        insert x F \\<subseteq> I'\\<rbrakk>\n       \\<Longrightarrow> AE f in Pi\\<^sub>M (insert x F)\n                                  M. inj_on f (insert x F)", "from insert.hyps"], ["proof (chain)\npicking this:\n  finite I\n  i \\<notin> I", "have [measurable]: \"finite (insert i I)\""], ["proof (prove)\nusing this:\n  finite I\n  i \\<notin> I\n\ngoal (1 subgoal):\n 1. finite (insert i I)", "by simp"], ["proof (state)\nthis:\n  finite (insert i I)\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> I' \\<Longrightarrow> AE f in Pi\\<^sub>M {} M. inj_on f {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> I' \\<Longrightarrow>\n        AE f in Pi\\<^sub>M F M. inj_on f F;\n        insert x F \\<subseteq> I'\\<rbrakk>\n       \\<Longrightarrow> AE f in Pi\\<^sub>M (insert x F)\n                                  M. inj_on f (insert x F)", "have \"PiM (insert i I) M = distr (M i \\<Otimes>\\<^sub>M Pi\\<^sub>M I M) (Pi\\<^sub>M (insert i I) M) (\\<lambda>(x, X). X(i := x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pi\\<^sub>M (insert i I) M =\n    distr (M i \\<Otimes>\\<^sub>M Pi\\<^sub>M I M) (Pi\\<^sub>M (insert i I) M)\n     (\\<lambda>(x, X). X(i := x))", "using insert.prems"], ["proof (prove)\nusing this:\n  insert i I \\<subseteq> I'\n\ngoal (1 subgoal):\n 1. Pi\\<^sub>M (insert i I) M =\n    distr (M i \\<Otimes>\\<^sub>M Pi\\<^sub>M I M) (Pi\\<^sub>M (insert i I) M)\n     (\\<lambda>(x, X). X(i := x))", "by (intro distr_pair_PiM_eq_PiM [symmetric] prob_space) (auto simp: I'_def)"], ["proof (state)\nthis:\n  Pi\\<^sub>M (insert i I) M =\n  distr (M i \\<Otimes>\\<^sub>M Pi\\<^sub>M I M) (Pi\\<^sub>M (insert i I) M)\n   (\\<lambda>(x, X). X(i := x))\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> I' \\<Longrightarrow> AE f in Pi\\<^sub>M {} M. inj_on f {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> I' \\<Longrightarrow>\n        AE f in Pi\\<^sub>M F M. inj_on f F;\n        insert x F \\<subseteq> I'\\<rbrakk>\n       \\<Longrightarrow> AE f in Pi\\<^sub>M (insert x F)\n                                  M. inj_on f (insert x F)", "also"], ["proof (state)\nthis:\n  Pi\\<^sub>M (insert i I) M =\n  distr (M i \\<Otimes>\\<^sub>M Pi\\<^sub>M I M) (Pi\\<^sub>M (insert i I) M)\n   (\\<lambda>(x, X). X(i := x))\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> I' \\<Longrightarrow> AE f in Pi\\<^sub>M {} M. inj_on f {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> I' \\<Longrightarrow>\n        AE f in Pi\\<^sub>M F M. inj_on f F;\n        insert x F \\<subseteq> I'\\<rbrakk>\n       \\<Longrightarrow> AE f in Pi\\<^sub>M (insert x F)\n                                  M. inj_on f (insert x F)", "have \"(AE f in \\<dots>. inj_on f (insert i I)) \\<longleftrightarrow> \n                 (AE x in M i \\<Otimes>\\<^sub>M Pi\\<^sub>M I M. inj_on ((snd x)(i := fst x)) (insert i I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (AE f in distr (M i \\<Otimes>\\<^sub>M Pi\\<^sub>M I M)\n              (Pi\\<^sub>M (insert i I) M)\n              (\\<lambda>(x, X). X(i := x)). inj_on f (insert i I)) =\n    (AE x in M i \\<Otimes>\\<^sub>M\n             Pi\\<^sub>M I M. inj_on ((snd x)(i := fst x)) (insert i I))", "by (subst AE_distr_iff; measurable) (simp add: case_prod_unfold)?"], ["proof (state)\nthis:\n  (AE f in distr (M i \\<Otimes>\\<^sub>M Pi\\<^sub>M I M)\n            (Pi\\<^sub>M (insert i I) M)\n            (\\<lambda>(x, X). X(i := x)). inj_on f (insert i I)) =\n  (AE x in M i \\<Otimes>\\<^sub>M\n           Pi\\<^sub>M I M. inj_on ((snd x)(i := fst x)) (insert i I))\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> I' \\<Longrightarrow> AE f in Pi\\<^sub>M {} M. inj_on f {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> I' \\<Longrightarrow>\n        AE f in Pi\\<^sub>M F M. inj_on f F;\n        insert x F \\<subseteq> I'\\<rbrakk>\n       \\<Longrightarrow> AE f in Pi\\<^sub>M (insert x F)\n                                  M. inj_on f (insert x F)", "also"], ["proof (state)\nthis:\n  (AE f in distr (M i \\<Otimes>\\<^sub>M Pi\\<^sub>M I M)\n            (Pi\\<^sub>M (insert i I) M)\n            (\\<lambda>(x, X). X(i := x)). inj_on f (insert i I)) =\n  (AE x in M i \\<Otimes>\\<^sub>M\n           Pi\\<^sub>M I M. inj_on ((snd x)(i := fst x)) (insert i I))\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> I' \\<Longrightarrow> AE f in Pi\\<^sub>M {} M. inj_on f {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> I' \\<Longrightarrow>\n        AE f in Pi\\<^sub>M F M. inj_on f F;\n        insert x F \\<subseteq> I'\\<rbrakk>\n       \\<Longrightarrow> AE f in Pi\\<^sub>M (insert x F)\n                                  M. inj_on f (insert x F)", "have \"\\<dots> = (AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) (insert i I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (AE x in M i \\<Otimes>\\<^sub>M\n             Pi\\<^sub>M I M. inj_on ((snd x)(i := fst x)) (insert i I)) =\n    (AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) (insert i I))", "by (rule AE_pair_iff [symmetric]) measurable"], ["proof (state)\nthis:\n  (AE x in M i \\<Otimes>\\<^sub>M\n           Pi\\<^sub>M I M. inj_on ((snd x)(i := fst x)) (insert i I)) =\n  (AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) (insert i I))\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> I' \\<Longrightarrow> AE f in Pi\\<^sub>M {} M. inj_on f {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> I' \\<Longrightarrow>\n        AE f in Pi\\<^sub>M F M. inj_on f F;\n        insert x F \\<subseteq> I'\\<rbrakk>\n       \\<Longrightarrow> AE f in Pi\\<^sub>M (insert x F)\n                                  M. inj_on f (insert x F)", "also"], ["proof (state)\nthis:\n  (AE x in M i \\<Otimes>\\<^sub>M\n           Pi\\<^sub>M I M. inj_on ((snd x)(i := fst x)) (insert i I)) =\n  (AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) (insert i I))\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> I' \\<Longrightarrow> AE f in Pi\\<^sub>M {} M. inj_on f {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> I' \\<Longrightarrow>\n        AE f in Pi\\<^sub>M F M. inj_on f F;\n        insert x F \\<subseteq> I'\\<rbrakk>\n       \\<Longrightarrow> AE f in Pi\\<^sub>M (insert x F)\n                                  M. inj_on f (insert x F)", "have \"\\<dots> \\<longleftrightarrow> (AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) I) \\<and>\n                      (AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) (insert i I)) =\n    ((AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) I) \\<and>\n     (AE x in M i. AE y in Pi\\<^sub>M I\n                            M. x \\<notin> y(i := x) ` (I - {i})))", "by simp"], ["proof (state)\nthis:\n  (AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) (insert i I)) =\n  ((AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) I) \\<and>\n   (AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})))\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> I' \\<Longrightarrow> AE f in Pi\\<^sub>M {} M. inj_on f {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> I' \\<Longrightarrow>\n        AE f in Pi\\<^sub>M F M. inj_on f F;\n        insert x F \\<subseteq> I'\\<rbrakk>\n       \\<Longrightarrow> AE f in Pi\\<^sub>M (insert x F)\n                                  M. inj_on f (insert x F)", "also"], ["proof (state)\nthis:\n  (AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) (insert i I)) =\n  ((AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) I) \\<and>\n   (AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})))\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> I' \\<Longrightarrow> AE f in Pi\\<^sub>M {} M. inj_on f {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> I' \\<Longrightarrow>\n        AE f in Pi\\<^sub>M F M. inj_on f F;\n        insert x F \\<subseteq> I'\\<rbrakk>\n       \\<Longrightarrow> AE f in Pi\\<^sub>M (insert x F)\n                                  M. inj_on f (insert x F)", "have \\<dots>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) I) \\<and>\n    (AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i}))", "proof (rule conjI, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) I\n 2. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) I\n 2. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "from insert.prems"], ["proof (chain)\npicking this:\n  insert i I \\<subseteq> I'", "have \"AE f in Pi\\<^sub>M I M. inj_on f I\""], ["proof (prove)\nusing this:\n  insert i I \\<subseteq> I'\n\ngoal (1 subgoal):\n 1. AE f in Pi\\<^sub>M I M. inj_on f I", "by (intro insert.IH) auto"], ["proof (state)\nthis:\n  AE f in Pi\\<^sub>M I M. inj_on f I\n\ngoal (2 subgoals):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) I\n 2. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "hence \"AE f in Pi\\<^sub>M I M. inj_on (f(i := x)) I\" for x"], ["proof (prove)\nusing this:\n  AE f in Pi\\<^sub>M I M. inj_on f I\n\ngoal (1 subgoal):\n 1. AE f in Pi\\<^sub>M I M. inj_on (f(i := x)) I", "by eventually_elim (insert insert.hyps, auto simp: inj_on_def)"], ["proof (state)\nthis:\n  AE f in Pi\\<^sub>M I M. inj_on (f(i := ?x)) I\n\ngoal (2 subgoals):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) I\n 2. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "thus ?case"], ["proof (prove)\nusing this:\n  AE f in Pi\\<^sub>M I M. inj_on (f(i := ?x)) I\n\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) I", "by blast"], ["proof (state)\nthis:\n  AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) I\n\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "note [measurable] = \\<open>finite I\\<close>"], ["proof (state)\nthis:\n  finite I\n\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "{"], ["proof (state)\nthis:\n  finite I\n\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "have \"f ` I \\<inter> space (M i) \\<in> null_sets (M i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` I \\<inter> space (M i) \\<in> null_sets (M i)", "by (rule finite_null_set) \n             (insert insert.hyps insert.prems, auto intro!: null simp: I'_def)"], ["proof (state)\nthis:\n  f ` I \\<inter> space (M i) \\<in> null_sets (M i)\n\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "hence \"AE x in M i. x \\<notin> f(i := x) ` I\""], ["proof (prove)\nusing this:\n  f ` I \\<inter> space (M i) \\<in> null_sets (M i)\n\ngoal (1 subgoal):\n 1. AE x in M i. x \\<notin> f(i := x) ` I", "by (rule AE_I') (insert insert.hyps, auto split: if_splits)"], ["proof (state)\nthis:\n  AE x in M i. x \\<notin> f(i := x) ` I\n\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "also"], ["proof (state)\nthis:\n  AE x in M i. x \\<notin> f(i := x) ` I\n\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "have \"(AE x in M i. x \\<notin> f(i := x) ` I) \\<longleftrightarrow> (AE x in M i. \\<forall>y\\<in>I. f y \\<noteq> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (AE x in M i. x \\<notin> f(i := x) ` I) =\n    (AE x in M i. \\<forall>y\\<in>I. f y \\<noteq> x)", "using insert.hyps"], ["proof (prove)\nusing this:\n  finite I\n  i \\<notin> I\n\ngoal (1 subgoal):\n 1. (AE x in M i. x \\<notin> f(i := x) ` I) =\n    (AE x in M i. \\<forall>y\\<in>I. f y \\<noteq> x)", "by (intro AE_cong) (auto split: if_splits)"], ["proof (state)\nthis:\n  (AE x in M i. x \\<notin> f(i := x) ` I) =\n  (AE x in M i. \\<forall>y\\<in>I. f y \\<noteq> x)\n\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "finally"], ["proof (chain)\npicking this:\n  AE x in M i. \\<forall>y\\<in>I. f y \\<noteq> x", "have \"\\<dots>\""], ["proof (prove)\nusing this:\n  AE x in M i. \\<forall>y\\<in>I. f y \\<noteq> x\n\ngoal (1 subgoal):\n 1. AE x in M i. \\<forall>y\\<in>I. f y \\<noteq> x", "."], ["proof (state)\nthis:\n  AE x in M i. \\<forall>y\\<in>I. f y \\<noteq> x\n\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "}"], ["proof (state)\nthis:\n  AE x in M i. \\<forall>y\\<in>I. ?f2 y \\<noteq> x\n\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "hence \"AE f in Pi\\<^sub>M I M. AE x in M i. \\<forall>y\\<in>I. f y \\<noteq> x\""], ["proof (prove)\nusing this:\n  AE x in M i. \\<forall>y\\<in>I. ?f2 y \\<noteq> x\n\ngoal (1 subgoal):\n 1. AE f in Pi\\<^sub>M I M. AE x in M i. \\<forall>y\\<in>I. f y \\<noteq> x", "by blast"], ["proof (state)\nthis:\n  AE f in Pi\\<^sub>M I M. AE x in M i. \\<forall>y\\<in>I. f y \\<noteq> x\n\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "hence \"AE x in M i. AE f in Pi\\<^sub>M I M. \\<forall>y\\<in>I. f y \\<noteq> x\""], ["proof (prove)\nusing this:\n  AE f in Pi\\<^sub>M I M. AE x in M i. \\<forall>y\\<in>I. f y \\<noteq> x\n\ngoal (1 subgoal):\n 1. AE x in M i. AE f in Pi\\<^sub>M I M. \\<forall>y\\<in>I. f y \\<noteq> x", "by (subst AE_commute) simp_all"], ["proof (state)\nthis:\n  AE x in M i. AE f in Pi\\<^sub>M I M. \\<forall>y\\<in>I. f y \\<noteq> x\n\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "also"], ["proof (state)\nthis:\n  AE x in M i. AE f in Pi\\<^sub>M I M. \\<forall>y\\<in>I. f y \\<noteq> x\n\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "have \"?this \\<longleftrightarrow> (AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (AE x in M i. AE f in Pi\\<^sub>M I\n                           M. \\<forall>y\\<in>I. f y \\<noteq> x) =\n    (AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i}))", "using insert.hyps"], ["proof (prove)\nusing this:\n  finite I\n  i \\<notin> I\n\ngoal (1 subgoal):\n 1. (AE x in M i. AE f in Pi\\<^sub>M I\n                           M. \\<forall>y\\<in>I. f y \\<noteq> x) =\n    (AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i}))", "by (intro AE_cong) (auto split: if_splits)"], ["proof (state)\nthis:\n  (AE x in M i. AE f in Pi\\<^sub>M I M. \\<forall>y\\<in>I. f y \\<noteq> x) =\n  (AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i}))\n\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "finally"], ["proof (chain)\npicking this:\n  AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "show \\<dots>"], ["proof (prove)\nusing this:\n  AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})\n\ngoal (1 subgoal):\n 1. AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})", "."], ["proof (state)\nthis:\n  AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (AE x in M i. AE y in Pi\\<^sub>M I M. inj_on (y(i := x)) I) \\<and>\n  (AE x in M i. AE y in Pi\\<^sub>M I M. x \\<notin> y(i := x) ` (I - {i}))\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> I' \\<Longrightarrow> AE f in Pi\\<^sub>M {} M. inj_on f {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> I' \\<Longrightarrow>\n        AE f in Pi\\<^sub>M F M. inj_on f F;\n        insert x F \\<subseteq> I'\\<rbrakk>\n       \\<Longrightarrow> AE f in Pi\\<^sub>M (insert x F)\n                                  M. inj_on f (insert x F)", "finally"], ["proof (chain)\npicking this:\n  AE f in Pi\\<^sub>M (insert i I) M. inj_on f (insert i I)", "show ?case"], ["proof (prove)\nusing this:\n  AE f in Pi\\<^sub>M (insert i I) M. inj_on f (insert i I)\n\ngoal (1 subgoal):\n 1. AE f in Pi\\<^sub>M (insert i I) M. inj_on f (insert i I)", "."], ["proof (state)\nthis:\n  AE f in Pi\\<^sub>M (insert i I) M. inj_on f (insert i I)\n\ngoal (1 subgoal):\n 1. {} \\<subseteq> I' \\<Longrightarrow> AE f in Pi\\<^sub>M {} M. inj_on f {}", "qed auto"], ["proof (state)\nthis:\n  AE f in Pi\\<^sub>M I M. inj_on f I\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma null_sets_uniform_measure:\n  assumes \"A \\<in> sets M\" \"emeasure M A \\<noteq> \\<infinity>\"\n  shows   \"null_sets (uniform_measure M A) = (\\<lambda>B. A \\<inter> B) -` null_sets M \\<inter> sets M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. null_sets (uniform_measure M A) =\n    (\\<inter>) A -` null_sets M \\<inter> sets M", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> sets M\n  emeasure M A \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. null_sets (uniform_measure M A) =\n    (\\<inter>) A -` null_sets M \\<inter> sets M", "by (auto simp: null_sets_def)"], ["", "lemma almost_everywhere_avoid_finite:\n  assumes fin: \"finite I\"\n  shows   \"AE f in (\\<Pi>\\<^sub>M i\\<in>I. uniform_measure lborel {(0::real)..1}). inj_on f I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE f in Pi\\<^sub>M I\n             (\\<lambda>i. uniform_measure lborel {0..1}). inj_on f I", "proof (intro almost_everywhere_inj_on_PiM fin prob_space_uniform_measure)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i. i \\<in> I \\<Longrightarrow> emeasure lborel {0..1} \\<noteq> 0\n 2. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       emeasure lborel {0..1} \\<noteq> \\<infinity>\n 3. \\<And>i j.\n       Measurable.pred\n        (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n         uniform_measure lborel {0..1})\n        (\\<lambda>(x, y). x = y)\n 4. \\<And>i x.\n       \\<lbrakk>i \\<in> I;\n        x \\<in> space (uniform_measure lborel {0..1})\\<rbrakk>\n       \\<Longrightarrow> {x} \\<in> null_sets (uniform_measure lborel {0..1})", "fix x :: real"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i. i \\<in> I \\<Longrightarrow> emeasure lborel {0..1} \\<noteq> 0\n 2. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       emeasure lborel {0..1} \\<noteq> \\<infinity>\n 3. \\<And>i j.\n       Measurable.pred\n        (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n         uniform_measure lborel {0..1})\n        (\\<lambda>(x, y). x = y)\n 4. \\<And>i x.\n       \\<lbrakk>i \\<in> I;\n        x \\<in> space (uniform_measure lborel {0..1})\\<rbrakk>\n       \\<Longrightarrow> {x} \\<in> null_sets (uniform_measure lborel {0..1})", "show \"{x} \\<in> null_sets (uniform_measure lborel {0..1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x} \\<in> null_sets (uniform_measure lborel {0..1})", "by (cases \"x \\<in> {0..1}\") (auto simp: null_sets_uniform_measure)"], ["proof (state)\nthis:\n  {x} \\<in> null_sets (uniform_measure lborel {0..1})\n\ngoal (3 subgoals):\n 1. \\<And>i. i \\<in> I \\<Longrightarrow> emeasure lborel {0..1} \\<noteq> 0\n 2. \\<And>i.\n       i \\<in> I \\<Longrightarrow>\n       emeasure lborel {0..1} \\<noteq> \\<infinity>\n 3. \\<And>i j.\n       Measurable.pred\n        (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n         uniform_measure lborel {0..1})\n        (\\<lambda>(x, y). x = y)", "qed auto"], ["", "lemma almost_everywhere_avoid_countable:\n  assumes \"countable A\"\n  shows   \"AE x in uniform_measure lborel {(0::real)..1}. x \\<notin> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in uniform_measure lborel {0..1}. x \\<notin> A", "proof (intro almost_everywhere_not_in_countable_set assms prob_space_uniform_measure)"], ["proof (state)\ngoal (2 subgoals):\n 1. Measurable.pred\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      uniform_measure lborel {0..1})\n     (\\<lambda>(x, y). x = y)\n 2. \\<And>x.\n       x \\<in> space (uniform_measure lborel {0..1}) \\<Longrightarrow>\n       {x} \\<in> null_sets (uniform_measure lborel {0..1})", "fix x :: real"], ["proof (state)\ngoal (2 subgoals):\n 1. Measurable.pred\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      uniform_measure lborel {0..1})\n     (\\<lambda>(x, y). x = y)\n 2. \\<And>x.\n       x \\<in> space (uniform_measure lborel {0..1}) \\<Longrightarrow>\n       {x} \\<in> null_sets (uniform_measure lborel {0..1})", "show \"{x} \\<in> null_sets (uniform_measure lborel {0..1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x} \\<in> null_sets (uniform_measure lborel {0..1})", "by (cases \"x \\<in> {0..1}\") (auto simp: null_sets_uniform_measure)"], ["proof (state)\nthis:\n  {x} \\<in> null_sets (uniform_measure lborel {0..1})\n\ngoal (1 subgoal):\n 1. Measurable.pred\n     (uniform_measure lborel {0..1} \\<Otimes>\\<^sub>M\n      uniform_measure lborel {0..1})\n     (\\<lambda>(x, y). x = y)", "qed auto"], ["", "lemma measure_pmf_of_set:\n  assumes \"A \\<noteq> {}\" and \"finite A\" \n  shows   \"measure_pmf (pmf_of_set A) = uniform_measure (count_space UNIV) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf (pmf_of_set A) = uniform_measure (count_space UNIV) A", "using assms"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  finite A\n\ngoal (1 subgoal):\n 1. measure_pmf (pmf_of_set A) = uniform_measure (count_space UNIV) A", "by (intro measure_eqI)\n     (auto simp: emeasure_pmf_of_set divide_ennreal [symmetric] card_gt_0_iff\n                  ennreal_of_nat_eq_real_of_nat)"], ["", "lemma emeasure_distr_restrict:\n  assumes \"f \\<in> M \\<rightarrow>\\<^sub>M N\" \"f \\<in> M' \\<rightarrow>\\<^sub>M N'\" \"A \\<in> sets N'\" \"sets M' \\<subseteq> sets M\" \"sets N' \\<subseteq> sets N\"\n  assumes \"\\<And>X. X \\<in> sets M' \\<Longrightarrow> emeasure M X = emeasure M' X\"\n  assumes \"\\<And>X. X \\<in> sets M \\<Longrightarrow> X \\<subseteq> space M - space M' \\<Longrightarrow> emeasure M X = 0\"\n  shows   \"emeasure (distr M N f) A= emeasure (distr M' N' f) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (distr M N f) A = emeasure (distr M' N' f) A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. emeasure (distr M N f) A = emeasure (distr M' N' f) A", "have space_subset: \"space M' \\<subseteq> space M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space M' \\<subseteq> space M", "using \\<open>sets M' \\<subseteq> sets M\\<close>"], ["proof (prove)\nusing this:\n  sets M' \\<subseteq> sets M\n\ngoal (1 subgoal):\n 1. space M' \\<subseteq> space M", "by (simp add: sets_le_imp_space_le)"], ["proof (state)\nthis:\n  space M' \\<subseteq> space M\n\ngoal (1 subgoal):\n 1. emeasure (distr M N f) A = emeasure (distr M' N' f) A", "have \"emeasure (distr M N f) A = emeasure M (f -` A \\<inter> space M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (distr M N f) A = emeasure M (f -` A \\<inter> space M)", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> M \\<rightarrow>\\<^sub>M N\n  f \\<in> M' \\<rightarrow>\\<^sub>M N'\n  A \\<in> sets N'\n  sets M' \\<subseteq> sets M\n  sets N' \\<subseteq> sets N\n  ?X \\<in> sets M' \\<Longrightarrow> emeasure M ?X = emeasure M' ?X\n  \\<lbrakk>?X \\<in> sets M; ?X \\<subseteq> space M - space M'\\<rbrakk>\n  \\<Longrightarrow> emeasure M ?X = 0\n\ngoal (1 subgoal):\n 1. emeasure (distr M N f) A = emeasure M (f -` A \\<inter> space M)", "by (subst emeasure_distr) auto"], ["proof (state)\nthis:\n  emeasure (distr M N f) A = emeasure M (f -` A \\<inter> space M)\n\ngoal (1 subgoal):\n 1. emeasure (distr M N f) A = emeasure (distr M' N' f) A", "also"], ["proof (state)\nthis:\n  emeasure (distr M N f) A = emeasure M (f -` A \\<inter> space M)\n\ngoal (1 subgoal):\n 1. emeasure (distr M N f) A = emeasure (distr M' N' f) A", "have \"f -` A \\<inter> space M = f -` A \\<inter> space M' \\<union> f -` A \\<inter> (space M - space M')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f -` A \\<inter> space M =\n    f -` A \\<inter> space M' \\<union> f -` A \\<inter> (space M - space M')", "using space_subset"], ["proof (prove)\nusing this:\n  space M' \\<subseteq> space M\n\ngoal (1 subgoal):\n 1. f -` A \\<inter> space M =\n    f -` A \\<inter> space M' \\<union> f -` A \\<inter> (space M - space M')", "by blast"], ["proof (state)\nthis:\n  f -` A \\<inter> space M =\n  f -` A \\<inter> space M' \\<union> f -` A \\<inter> (space M - space M')\n\ngoal (1 subgoal):\n 1. emeasure (distr M N f) A = emeasure (distr M' N' f) A", "also"], ["proof (state)\nthis:\n  f -` A \\<inter> space M =\n  f -` A \\<inter> space M' \\<union> f -` A \\<inter> (space M - space M')\n\ngoal (1 subgoal):\n 1. emeasure (distr M N f) A = emeasure (distr M' N' f) A", "have \"emeasure M \\<dots> = emeasure M (f -` A \\<inter> space M')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure M\n     (f -` A \\<inter> space M' \\<union>\n      f -` A \\<inter> (space M - space M')) =\n    emeasure M (f -` A \\<inter> space M')", "proof (intro emeasure_Un_null_set)"], ["proof (state)\ngoal (2 subgoals):\n 1. f -` A \\<inter> space M' \\<in> sets M\n 2. f -` A \\<inter> (space M - space M') \\<in> null_sets M", "show \"f -` A \\<inter> space M' \\<in> sets M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f -` A \\<inter> space M' \\<in> sets M", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> M \\<rightarrow>\\<^sub>M N\n  f \\<in> M' \\<rightarrow>\\<^sub>M N'\n  A \\<in> sets N'\n  sets M' \\<subseteq> sets M\n  sets N' \\<subseteq> sets N\n  ?X \\<in> sets M' \\<Longrightarrow> emeasure M ?X = emeasure M' ?X\n  \\<lbrakk>?X \\<in> sets M; ?X \\<subseteq> space M - space M'\\<rbrakk>\n  \\<Longrightarrow> emeasure M ?X = 0\n\ngoal (1 subgoal):\n 1. f -` A \\<inter> space M' \\<in> sets M", "by auto"], ["proof (state)\nthis:\n  f -` A \\<inter> space M' \\<in> sets M\n\ngoal (1 subgoal):\n 1. f -` A \\<inter> (space M - space M') \\<in> null_sets M", "have \"f -` A \\<inter> (space M - space M') \\<in> sets M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f -` A \\<inter> (space M - space M') \\<in> sets M", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> M \\<rightarrow>\\<^sub>M N\n  f \\<in> M' \\<rightarrow>\\<^sub>M N'\n  A \\<in> sets N'\n  sets M' \\<subseteq> sets M\n  sets N' \\<subseteq> sets N\n  ?X \\<in> sets M' \\<Longrightarrow> emeasure M ?X = emeasure M' ?X\n  \\<lbrakk>?X \\<in> sets M; ?X \\<subseteq> space M - space M'\\<rbrakk>\n  \\<Longrightarrow> emeasure M ?X = 0\n\ngoal (1 subgoal):\n 1. f -` A \\<inter> (space M - space M') \\<in> sets M", "by (metis Int_Diff measurable_sets sets.Diff sets.top subsetCE)"], ["proof (state)\nthis:\n  f -` A \\<inter> (space M - space M') \\<in> sets M\n\ngoal (1 subgoal):\n 1. f -` A \\<inter> (space M - space M') \\<in> null_sets M", "moreover"], ["proof (state)\nthis:\n  f -` A \\<inter> (space M - space M') \\<in> sets M\n\ngoal (1 subgoal):\n 1. f -` A \\<inter> (space M - space M') \\<in> null_sets M", "from this"], ["proof (chain)\npicking this:\n  f -` A \\<inter> (space M - space M') \\<in> sets M", "have \"emeasure M (f -` A \\<inter> (space M - space M')) = 0\""], ["proof (prove)\nusing this:\n  f -` A \\<inter> (space M - space M') \\<in> sets M\n\ngoal (1 subgoal):\n 1. emeasure M (f -` A \\<inter> (space M - space M')) = 0", "by (intro assms) auto"], ["proof (state)\nthis:\n  emeasure M (f -` A \\<inter> (space M - space M')) = 0\n\ngoal (1 subgoal):\n 1. f -` A \\<inter> (space M - space M') \\<in> null_sets M", "ultimately"], ["proof (chain)\npicking this:\n  f -` A \\<inter> (space M - space M') \\<in> sets M\n  emeasure M (f -` A \\<inter> (space M - space M')) = 0", "show \"f -` A \\<inter> (space M - space M') \\<in> null_sets M\""], ["proof (prove)\nusing this:\n  f -` A \\<inter> (space M - space M') \\<in> sets M\n  emeasure M (f -` A \\<inter> (space M - space M')) = 0\n\ngoal (1 subgoal):\n 1. f -` A \\<inter> (space M - space M') \\<in> null_sets M", "unfolding null_sets_def"], ["proof (prove)\nusing this:\n  f -` A \\<inter> (space M - space M') \\<in> sets M\n  emeasure M (f -` A \\<inter> (space M - space M')) = 0\n\ngoal (1 subgoal):\n 1. f -` A \\<inter> (space M - space M')\n    \\<in> {N \\<in> sets M. emeasure M N = 0}", "by blast"], ["proof (state)\nthis:\n  f -` A \\<inter> (space M - space M') \\<in> null_sets M\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  emeasure M\n   (f -` A \\<inter> space M' \\<union>\n    f -` A \\<inter> (space M - space M')) =\n  emeasure M (f -` A \\<inter> space M')\n\ngoal (1 subgoal):\n 1. emeasure (distr M N f) A = emeasure (distr M' N' f) A", "also"], ["proof (state)\nthis:\n  emeasure M\n   (f -` A \\<inter> space M' \\<union>\n    f -` A \\<inter> (space M - space M')) =\n  emeasure M (f -` A \\<inter> space M')\n\ngoal (1 subgoal):\n 1. emeasure (distr M N f) A = emeasure (distr M' N' f) A", "have \"\\<dots> = emeasure M' (f -` A \\<inter> space M')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure M (f -` A \\<inter> space M') =\n    emeasure M' (f -` A \\<inter> space M')", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> M \\<rightarrow>\\<^sub>M N\n  f \\<in> M' \\<rightarrow>\\<^sub>M N'\n  A \\<in> sets N'\n  sets M' \\<subseteq> sets M\n  sets N' \\<subseteq> sets N\n  ?X \\<in> sets M' \\<Longrightarrow> emeasure M ?X = emeasure M' ?X\n  \\<lbrakk>?X \\<in> sets M; ?X \\<subseteq> space M - space M'\\<rbrakk>\n  \\<Longrightarrow> emeasure M ?X = 0\n\ngoal (1 subgoal):\n 1. emeasure M (f -` A \\<inter> space M') =\n    emeasure M' (f -` A \\<inter> space M')", "by (intro assms) auto"], ["proof (state)\nthis:\n  emeasure M (f -` A \\<inter> space M') =\n  emeasure M' (f -` A \\<inter> space M')\n\ngoal (1 subgoal):\n 1. emeasure (distr M N f) A = emeasure (distr M' N' f) A", "also"], ["proof (state)\nthis:\n  emeasure M (f -` A \\<inter> space M') =\n  emeasure M' (f -` A \\<inter> space M')\n\ngoal (1 subgoal):\n 1. emeasure (distr M N f) A = emeasure (distr M' N' f) A", "have \"\\<dots> = emeasure (distr M' N' f) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure M' (f -` A \\<inter> space M') = emeasure (distr M' N' f) A", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> M \\<rightarrow>\\<^sub>M N\n  f \\<in> M' \\<rightarrow>\\<^sub>M N'\n  A \\<in> sets N'\n  sets M' \\<subseteq> sets M\n  sets N' \\<subseteq> sets N\n  ?X \\<in> sets M' \\<Longrightarrow> emeasure M ?X = emeasure M' ?X\n  \\<lbrakk>?X \\<in> sets M; ?X \\<subseteq> space M - space M'\\<rbrakk>\n  \\<Longrightarrow> emeasure M ?X = 0\n\ngoal (1 subgoal):\n 1. emeasure M' (f -` A \\<inter> space M') = emeasure (distr M' N' f) A", "by (subst emeasure_distr) auto"], ["proof (state)\nthis:\n  emeasure M' (f -` A \\<inter> space M') = emeasure (distr M' N' f) A\n\ngoal (1 subgoal):\n 1. emeasure (distr M N f) A = emeasure (distr M' N' f) A", "finally"], ["proof (chain)\npicking this:\n  emeasure (distr M N f) A = emeasure (distr M' N' f) A", "show ?thesis"], ["proof (prove)\nusing this:\n  emeasure (distr M N f) A = emeasure (distr M' N' f) A\n\ngoal (1 subgoal):\n 1. emeasure (distr M N f) A = emeasure (distr M' N' f) A", "."], ["proof (state)\nthis:\n  emeasure (distr M N f) A = emeasure (distr M' N' f) A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma distr_uniform_measure_count_space_inj:\n  assumes \"inj_on f A'\" \"A' \\<subseteq> A\" \"f ` A \\<subseteq> B\" \"finite A'\"\n  shows   \"distr (uniform_measure (count_space A) A') (count_space B) f =\n             uniform_measure (count_space B) (f ` A')\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (uniform_measure (count_space A) A') (count_space B) f =\n    uniform_measure (count_space B) (f ` A')", "proof (rule measure_eqI, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "case (2 X)"], ["proof (state)\nthis:\n  X \\<in> sets\n           (distr (uniform_measure (count_space A) A') (count_space B) f)\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "hence X_subset: \"X \\<subseteq> B\""], ["proof (prove)\nusing this:\n  X \\<in> sets\n           (distr (uniform_measure (count_space A) A') (count_space B) f)\n\ngoal (1 subgoal):\n 1. X \\<subseteq> B", "by simp"], ["proof (state)\nthis:\n  X \\<subseteq> B\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "from assms"], ["proof (chain)\npicking this:\n  inj_on f A'\n  A' \\<subseteq> A\n  f ` A \\<subseteq> B\n  finite A'", "have eq: \"f ` A' \\<inter> X = f ` (A' \\<inter> (f -` X \\<inter> A))\""], ["proof (prove)\nusing this:\n  inj_on f A'\n  A' \\<subseteq> A\n  f ` A \\<subseteq> B\n  finite A'\n\ngoal (1 subgoal):\n 1. f ` A' \\<inter> X = f ` (A' \\<inter> (f -` X \\<inter> A))", "by auto"], ["proof (state)\nthis:\n  f ` A' \\<inter> X = f ` (A' \\<inter> (f -` X \\<inter> A))\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "from assms"], ["proof (chain)\npicking this:\n  inj_on f A'\n  A' \\<subseteq> A\n  f ` A \\<subseteq> B\n  finite A'", "have [measurable]: \"f \\<in> count_space A \\<rightarrow>\\<^sub>M count_space B\""], ["proof (prove)\nusing this:\n  inj_on f A'\n  A' \\<subseteq> A\n  f ` A \\<subseteq> B\n  finite A'\n\ngoal (1 subgoal):\n 1. f \\<in> count_space A \\<rightarrow>\\<^sub>M count_space B", "by (subst measurable_count_space_eq1) auto"], ["proof (state)\nthis:\n  f \\<in> count_space A \\<rightarrow>\\<^sub>M count_space B\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "from X_subset"], ["proof (chain)\npicking this:\n  X \\<subseteq> B", "have \"emeasure ?lhs X = \n                        emeasure (uniform_measure (count_space A) A') (f -` X \\<inter> A)\""], ["proof (prove)\nusing this:\n  X \\<subseteq> B\n\ngoal (1 subgoal):\n 1. emeasure (distr (uniform_measure (count_space A) A') (count_space B) f)\n     X =\n    emeasure (uniform_measure (count_space A) A') (f -` X \\<inter> A)", "by (subst emeasure_distr) auto"], ["proof (state)\nthis:\n  emeasure (distr (uniform_measure (count_space A) A') (count_space B) f)\n   X =\n  emeasure (uniform_measure (count_space A) A') (f -` X \\<inter> A)\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "also"], ["proof (state)\nthis:\n  emeasure (distr (uniform_measure (count_space A) A') (count_space B) f)\n   X =\n  emeasure (uniform_measure (count_space A) A') (f -` X \\<inter> A)\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "from assms X_subset"], ["proof (chain)\npicking this:\n  inj_on f A'\n  A' \\<subseteq> A\n  f ` A \\<subseteq> B\n  finite A'\n  X \\<subseteq> B", "have \"\\<dots> = emeasure (count_space A) (A' \\<inter> (f -` X \\<inter> A)) / emeasure (count_space A) A'\""], ["proof (prove)\nusing this:\n  inj_on f A'\n  A' \\<subseteq> A\n  f ` A \\<subseteq> B\n  finite A'\n  X \\<subseteq> B\n\ngoal (1 subgoal):\n 1. emeasure (uniform_measure (count_space A) A') (f -` X \\<inter> A) =\n    emeasure (count_space A) (A' \\<inter> (f -` X \\<inter> A)) /\n    emeasure (count_space A) A'", "by (intro emeasure_uniform_measure) auto"], ["proof (state)\nthis:\n  emeasure (uniform_measure (count_space A) A') (f -` X \\<inter> A) =\n  emeasure (count_space A) (A' \\<inter> (f -` X \\<inter> A)) /\n  emeasure (count_space A) A'\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "also"], ["proof (state)\nthis:\n  emeasure (uniform_measure (count_space A) A') (f -` X \\<inter> A) =\n  emeasure (count_space A) (A' \\<inter> (f -` X \\<inter> A)) /\n  emeasure (count_space A) A'\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "from assms"], ["proof (chain)\npicking this:\n  inj_on f A'\n  A' \\<subseteq> A\n  f ` A \\<subseteq> B\n  finite A'", "have \"\\<dots> = of_nat (card (A' \\<inter> (f -` X \\<inter> A))) / of_nat (card A')\""], ["proof (prove)\nusing this:\n  inj_on f A'\n  A' \\<subseteq> A\n  f ` A \\<subseteq> B\n  finite A'\n\ngoal (1 subgoal):\n 1. emeasure (count_space A) (A' \\<inter> (f -` X \\<inter> A)) /\n    emeasure (count_space A) A' =\n    of_nat (card (A' \\<inter> (f -` X \\<inter> A))) / of_nat (card A')", "by (subst (1 2) emeasure_count_space) auto"], ["proof (state)\nthis:\n  emeasure (count_space A) (A' \\<inter> (f -` X \\<inter> A)) /\n  emeasure (count_space A) A' =\n  of_nat (card (A' \\<inter> (f -` X \\<inter> A))) / of_nat (card A')\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "also"], ["proof (state)\nthis:\n  emeasure (count_space A) (A' \\<inter> (f -` X \\<inter> A)) /\n  emeasure (count_space A) A' =\n  of_nat (card (A' \\<inter> (f -` X \\<inter> A))) / of_nat (card A')\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "have \"card (A' \\<inter> (f -` X \\<inter> A)) = card (f ` (A' \\<inter> (f -` X \\<inter> A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (A' \\<inter> (f -` X \\<inter> A)) =\n    card (f ` (A' \\<inter> (f -` X \\<inter> A)))", "using assms"], ["proof (prove)\nusing this:\n  inj_on f A'\n  A' \\<subseteq> A\n  f ` A \\<subseteq> B\n  finite A'\n\ngoal (1 subgoal):\n 1. card (A' \\<inter> (f -` X \\<inter> A)) =\n    card (f ` (A' \\<inter> (f -` X \\<inter> A)))", "by (intro card_image [symmetric]) (auto simp: inj_on_def)"], ["proof (state)\nthis:\n  card (A' \\<inter> (f -` X \\<inter> A)) =\n  card (f ` (A' \\<inter> (f -` X \\<inter> A)))\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "also"], ["proof (state)\nthis:\n  card (A' \\<inter> (f -` X \\<inter> A)) =\n  card (f ` (A' \\<inter> (f -` X \\<inter> A)))\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "have \"f ` (A' \\<inter> (f -` X \\<inter> A)) = f ` A' \\<inter> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` (A' \\<inter> (f -` X \\<inter> A)) = f ` A' \\<inter> X", "using assms"], ["proof (prove)\nusing this:\n  inj_on f A'\n  A' \\<subseteq> A\n  f ` A \\<subseteq> B\n  finite A'\n\ngoal (1 subgoal):\n 1. f ` (A' \\<inter> (f -` X \\<inter> A)) = f ` A' \\<inter> X", "by auto"], ["proof (state)\nthis:\n  f ` (A' \\<inter> (f -` X \\<inter> A)) = f ` A' \\<inter> X\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "also"], ["proof (state)\nthis:\n  f ` (A' \\<inter> (f -` X \\<inter> A)) = f ` A' \\<inter> X\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "have \"of_nat (card A') = of_nat (card (f ` A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat (card A') = of_nat (card (f ` A'))", "using assms"], ["proof (prove)\nusing this:\n  inj_on f A'\n  A' \\<subseteq> A\n  f ` A \\<subseteq> B\n  finite A'\n\ngoal (1 subgoal):\n 1. of_nat (card A') = of_nat (card (f ` A'))", "by (subst card_image) auto"], ["proof (state)\nthis:\n  of_nat (card A') = of_nat (card (f ` A'))\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "also"], ["proof (state)\nthis:\n  of_nat (card A') = of_nat (card (f ` A'))\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "have \"of_nat (card (f ` A' \\<inter> X)) / \\<dots> = \n               emeasure (count_space B) (f ` A' \\<inter> X) / emeasure (count_space B) (f ` A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat (card (f ` A' \\<inter> X)) / of_nat (card (f ` A')) =\n    emeasure (count_space B) (f ` A' \\<inter> X) /\n    emeasure (count_space B) (f ` A')", "using assms"], ["proof (prove)\nusing this:\n  inj_on f A'\n  A' \\<subseteq> A\n  f ` A \\<subseteq> B\n  finite A'\n\ngoal (1 subgoal):\n 1. of_nat (card (f ` A' \\<inter> X)) / of_nat (card (f ` A')) =\n    emeasure (count_space B) (f ` A' \\<inter> X) /\n    emeasure (count_space B) (f ` A')", "by (subst (1 2) emeasure_count_space) auto"], ["proof (state)\nthis:\n  of_nat (card (f ` A' \\<inter> X)) / of_nat (card (f ` A')) =\n  emeasure (count_space B) (f ` A' \\<inter> X) /\n  emeasure (count_space B) (f ` A')\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "also"], ["proof (state)\nthis:\n  of_nat (card (f ` A' \\<inter> X)) / of_nat (card (f ` A')) =\n  emeasure (count_space B) (f ` A' \\<inter> X) /\n  emeasure (count_space B) (f ` A')\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "from assms X_subset"], ["proof (chain)\npicking this:\n  inj_on f A'\n  A' \\<subseteq> A\n  f ` A \\<subseteq> B\n  finite A'\n  X \\<subseteq> B", "have \"\\<dots> = emeasure ?rhs X\""], ["proof (prove)\nusing this:\n  inj_on f A'\n  A' \\<subseteq> A\n  f ` A \\<subseteq> B\n  finite A'\n  X \\<subseteq> B\n\ngoal (1 subgoal):\n 1. emeasure (count_space B) (f ` A' \\<inter> X) /\n    emeasure (count_space B) (f ` A') =\n    emeasure (uniform_measure (count_space B) (f ` A')) X", "by (intro emeasure_uniform_measure [symmetric]) auto"], ["proof (state)\nthis:\n  emeasure (count_space B) (f ` A' \\<inter> X) /\n  emeasure (count_space B) (f ` A') =\n  emeasure (uniform_measure (count_space B) (f ` A')) X\n\ngoal (2 subgoals):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))\n 2. \\<And>Aa.\n       Aa \\<in> sets\n                 (distr (uniform_measure (count_space A) A') (count_space B)\n                   f) \\<Longrightarrow>\n       emeasure\n        (distr (uniform_measure (count_space A) A') (count_space B) f) Aa =\n       emeasure (uniform_measure (count_space B) (f ` A')) Aa", "finally"], ["proof (chain)\npicking this:\n  emeasure (distr (uniform_measure (count_space A) A') (count_space B) f)\n   X =\n  emeasure (uniform_measure (count_space B) (f ` A')) X", "show ?case"], ["proof (prove)\nusing this:\n  emeasure (distr (uniform_measure (count_space A) A') (count_space B) f)\n   X =\n  emeasure (uniform_measure (count_space B) (f ` A')) X\n\ngoal (1 subgoal):\n 1. emeasure (distr (uniform_measure (count_space A) A') (count_space B) f)\n     X =\n    emeasure (uniform_measure (count_space B) (f ` A')) X", "."], ["proof (state)\nthis:\n  emeasure (distr (uniform_measure (count_space A) A') (count_space B) f)\n   X =\n  emeasure (uniform_measure (count_space B) (f ` A')) X\n\ngoal (1 subgoal):\n 1. sets (distr (uniform_measure (count_space A) A') (count_space B) f) =\n    sets (uniform_measure (count_space B) (f ` A'))", "qed simp_all"], ["", "lemma (in pair_prob_space) pair_measure_bind:\n  assumes [measurable]: \"f \\<in> M1 \\<Otimes>\\<^sub>M M2 \\<rightarrow>\\<^sub>M subprob_algebra N\"\n  shows \"(M1 \\<Otimes>\\<^sub>M M2) \\<bind> f = do {x \\<leftarrow> M1; y \\<leftarrow> M2; f (x, y)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n    M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n    M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))", "note M1 = M1.prob_space_axioms and M2 = M2.prob_space_axioms"], ["proof (state)\nthis:\n  prob_space M1\n  prob_space M2\n\ngoal (1 subgoal):\n 1. M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n    M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))", "have [measurable]: \"M1 \\<in> space (subprob_algebra M1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M1 \\<in> space (subprob_algebra M1)", "by (rule M1.M_in_subprob)"], ["proof (state)\nthis:\n  M1 \\<in> space (subprob_algebra M1)\n\ngoal (1 subgoal):\n 1. M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n    M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))", "have [measurable]: \"M2 \\<in> space (subprob_algebra M2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M2 \\<in> space (subprob_algebra M2)", "by (rule M2.M_in_subprob)"], ["proof (state)\nthis:\n  M2 \\<in> space (subprob_algebra M2)\n\ngoal (1 subgoal):\n 1. M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n    M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))", "have \"(M1 \\<Otimes>\\<^sub>M M2) = M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. return (M1 \\<Otimes>\\<^sub>M M2) (x, y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M1 \\<Otimes>\\<^sub>M M2 =\n    M1 \\<bind>\n    (\\<lambda>x.\n        M2 \\<bind> (\\<lambda>y. return (M1 \\<Otimes>\\<^sub>M M2) (x, y)))", "by (subst pair_measure_eq_bind) simp_all"], ["proof (state)\nthis:\n  M1 \\<Otimes>\\<^sub>M M2 =\n  M1 \\<bind>\n  (\\<lambda>x.\n      M2 \\<bind> (\\<lambda>y. return (M1 \\<Otimes>\\<^sub>M M2) (x, y)))\n\ngoal (1 subgoal):\n 1. M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n    M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))", "also"], ["proof (state)\nthis:\n  M1 \\<Otimes>\\<^sub>M M2 =\n  M1 \\<bind>\n  (\\<lambda>x.\n      M2 \\<bind> (\\<lambda>y. return (M1 \\<Otimes>\\<^sub>M M2) (x, y)))\n\ngoal (1 subgoal):\n 1. M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n    M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))", "have \"\\<dots> \\<bind> f = M1 \\<bind> (\\<lambda>x. (M2 \\<bind> (\\<lambda>y. return (M1 \\<Otimes>\\<^sub>M M2) (x, y))) \\<bind> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M1 \\<bind>\n    (\\<lambda>x.\n        M2 \\<bind>\n        (\\<lambda>y. return (M1 \\<Otimes>\\<^sub>M M2) (x, y))) \\<bind>\n    f =\n    M1 \\<bind>\n    (\\<lambda>x.\n        M2 \\<bind>\n        (\\<lambda>y. return (M1 \\<Otimes>\\<^sub>M M2) (x, y)) \\<bind>\n        f)", "by (rule bind_assoc) measurable"], ["proof (state)\nthis:\n  M1 \\<bind>\n  (\\<lambda>x.\n      M2 \\<bind>\n      (\\<lambda>y. return (M1 \\<Otimes>\\<^sub>M M2) (x, y))) \\<bind>\n  f =\n  M1 \\<bind>\n  (\\<lambda>x.\n      M2 \\<bind>\n      (\\<lambda>y. return (M1 \\<Otimes>\\<^sub>M M2) (x, y)) \\<bind>\n      f)\n\ngoal (1 subgoal):\n 1. M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n    M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))", "also"], ["proof (state)\nthis:\n  M1 \\<bind>\n  (\\<lambda>x.\n      M2 \\<bind>\n      (\\<lambda>y. return (M1 \\<Otimes>\\<^sub>M M2) (x, y))) \\<bind>\n  f =\n  M1 \\<bind>\n  (\\<lambda>x.\n      M2 \\<bind>\n      (\\<lambda>y. return (M1 \\<Otimes>\\<^sub>M M2) (x, y)) \\<bind>\n      f)\n\ngoal (1 subgoal):\n 1. M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n    M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))", "have \"\\<dots> = M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>xa. return (M1 \\<Otimes>\\<^sub>M M2) (x, xa) \\<bind> f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M1 \\<bind>\n    (\\<lambda>x.\n        M2 \\<bind>\n        (\\<lambda>y. return (M1 \\<Otimes>\\<^sub>M M2) (x, y)) \\<bind>\n        f) =\n    M1 \\<bind>\n    (\\<lambda>x.\n        M2 \\<bind>\n        (\\<lambda>xa. return (M1 \\<Otimes>\\<^sub>M M2) (x, xa) \\<bind> f))", "by (intro bind_cong refl bind_assoc) measurable"], ["proof (state)\nthis:\n  M1 \\<bind>\n  (\\<lambda>x.\n      M2 \\<bind>\n      (\\<lambda>y. return (M1 \\<Otimes>\\<^sub>M M2) (x, y)) \\<bind>\n      f) =\n  M1 \\<bind>\n  (\\<lambda>x.\n      M2 \\<bind>\n      (\\<lambda>xa. return (M1 \\<Otimes>\\<^sub>M M2) (x, xa) \\<bind> f))\n\ngoal (1 subgoal):\n 1. M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n    M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))", "also"], ["proof (state)\nthis:\n  M1 \\<bind>\n  (\\<lambda>x.\n      M2 \\<bind>\n      (\\<lambda>y. return (M1 \\<Otimes>\\<^sub>M M2) (x, y)) \\<bind>\n      f) =\n  M1 \\<bind>\n  (\\<lambda>x.\n      M2 \\<bind>\n      (\\<lambda>xa. return (M1 \\<Otimes>\\<^sub>M M2) (x, xa) \\<bind> f))\n\ngoal (1 subgoal):\n 1. M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n    M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))", "have \"\\<dots> = do {x \\<leftarrow> M1; y \\<leftarrow> M2; f (x, y)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M1 \\<bind>\n    (\\<lambda>x.\n        M2 \\<bind>\n        (\\<lambda>xa. return (M1 \\<Otimes>\\<^sub>M M2) (x, xa) \\<bind> f)) =\n    M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))", "by (intro bind_cong refl bind_return)\n       (measurable, simp_all add: space_pair_measure)"], ["proof (state)\nthis:\n  M1 \\<bind>\n  (\\<lambda>x.\n      M2 \\<bind>\n      (\\<lambda>xa. return (M1 \\<Otimes>\\<^sub>M M2) (x, xa) \\<bind> f)) =\n  M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))\n\ngoal (1 subgoal):\n 1. M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n    M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))", "finally"], ["proof (chain)\npicking this:\n  M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n  M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))", "show ?thesis"], ["proof (prove)\nusing this:\n  M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n  M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))\n\ngoal (1 subgoal):\n 1. M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n    M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))", "."], ["proof (state)\nthis:\n  M1 \\<Otimes>\\<^sub>M M2 \\<bind> f =\n  M1 \\<bind> (\\<lambda>x. M2 \\<bind> (\\<lambda>y. f (x, y)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma count_space_singleton_conv_return: \n  \"count_space {x} = return (count_space {x}) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count_space {x} = return (count_space {x}) x", "proof (rule measure_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (count_space {x}) = sets (return (count_space {x}) x)\n 2. \\<And>A.\n       A \\<in> sets (count_space {x}) \\<Longrightarrow>\n       emeasure (count_space {x}) A =\n       emeasure (return (count_space {x}) x) A", "fix A"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (count_space {x}) = sets (return (count_space {x}) x)\n 2. \\<And>A.\n       A \\<in> sets (count_space {x}) \\<Longrightarrow>\n       emeasure (count_space {x}) A =\n       emeasure (return (count_space {x}) x) A", "assume \"A \\<in> sets (count_space {x})\""], ["proof (state)\nthis:\n  A \\<in> sets (count_space {x})\n\ngoal (2 subgoals):\n 1. sets (count_space {x}) = sets (return (count_space {x}) x)\n 2. \\<And>A.\n       A \\<in> sets (count_space {x}) \\<Longrightarrow>\n       emeasure (count_space {x}) A =\n       emeasure (return (count_space {x}) x) A", "hence \"A \\<subseteq> {x}\""], ["proof (prove)\nusing this:\n  A \\<in> sets (count_space {x})\n\ngoal (1 subgoal):\n 1. A \\<subseteq> {x}", "by auto"], ["proof (state)\nthis:\n  A \\<subseteq> {x}\n\ngoal (2 subgoals):\n 1. sets (count_space {x}) = sets (return (count_space {x}) x)\n 2. \\<And>A.\n       A \\<in> sets (count_space {x}) \\<Longrightarrow>\n       emeasure (count_space {x}) A =\n       emeasure (return (count_space {x}) x) A", "hence \"A = {} \\<or> A = {x}\""], ["proof (prove)\nusing this:\n  A \\<subseteq> {x}\n\ngoal (1 subgoal):\n 1. A = {} \\<or> A = {x}", "by (cases \"x \\<in> A\") auto"], ["proof (state)\nthis:\n  A = {} \\<or> A = {x}\n\ngoal (2 subgoals):\n 1. sets (count_space {x}) = sets (return (count_space {x}) x)\n 2. \\<And>A.\n       A \\<in> sets (count_space {x}) \\<Longrightarrow>\n       emeasure (count_space {x}) A =\n       emeasure (return (count_space {x}) x) A", "thus \"emeasure (count_space {x}) A = emeasure (return (count_space {x}) x) A\""], ["proof (prove)\nusing this:\n  A = {} \\<or> A = {x}\n\ngoal (1 subgoal):\n 1. emeasure (count_space {x}) A = emeasure (return (count_space {x}) x) A", "by auto"], ["proof (state)\nthis:\n  emeasure (count_space {x}) A = emeasure (return (count_space {x}) x) A\n\ngoal (1 subgoal):\n 1. sets (count_space {x}) = sets (return (count_space {x}) x)", "qed auto"], ["", "lemma distr_count_space_singleton [simp]:\n    \"f x \\<in> space M \\<Longrightarrow> distr (count_space {x}) M f = return M (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<in> space M \\<Longrightarrow>\n    distr (count_space {x}) M f = return M (f x)", "by (subst count_space_singleton_conv_return, subst distr_return) simp_all"], ["", "lemma uniform_measure_count_space_singleton [simp]:\n  assumes \"{x} \\<in> sets M\" \"emeasure M {x} \\<noteq> 0\" \"emeasure M {x} < \\<infinity>\"\n  shows   \"uniform_measure M {x} = return M x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_measure M {x} = return M x", "proof (rule measure_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (uniform_measure M {x}) = sets (return M x)\n 2. \\<And>A.\n       A \\<in> sets (uniform_measure M {x}) \\<Longrightarrow>\n       emeasure (uniform_measure M {x}) A = emeasure (return M x) A", "fix A"], ["proof (state)\ngoal (2 subgoals):\n 1. sets (uniform_measure M {x}) = sets (return M x)\n 2. \\<And>A.\n       A \\<in> sets (uniform_measure M {x}) \\<Longrightarrow>\n       emeasure (uniform_measure M {x}) A = emeasure (return M x) A", "assume A: \"A \\<in> sets (uniform_measure M {x})\""], ["proof (state)\nthis:\n  A \\<in> sets (uniform_measure M {x})\n\ngoal (2 subgoals):\n 1. sets (uniform_measure M {x}) = sets (return M x)\n 2. \\<And>A.\n       A \\<in> sets (uniform_measure M {x}) \\<Longrightarrow>\n       emeasure (uniform_measure M {x}) A = emeasure (return M x) A", "show \"emeasure (uniform_measure M {x}) A = emeasure (return M x) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (uniform_measure M {x}) A = emeasure (return M x) A", "by (cases \"x \\<in> A\") (insert assms A, auto)"], ["proof (state)\nthis:\n  emeasure (uniform_measure M {x}) A = emeasure (return M x) A\n\ngoal (1 subgoal):\n 1. sets (uniform_measure M {x}) = sets (return M x)", "qed simp_all"], ["", "lemma PiM_uniform_measure_permute:\n  fixes a b :: real\n  assumes \"g permutes A\" \"a < b\"\n  shows   \"distr (PiM A (\\<lambda>_. uniform_measure lborel {a..b})) (PiM A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n             PiM A (\\<lambda>_. uniform_measure lborel {a..b})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n     (Pi\\<^sub>M A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n    Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n     (Pi\\<^sub>M A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n    Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b})", "have \"distr (PiM A (\\<lambda>_. uniform_measure lborel {a..b})) (PiM A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n          distr (PiM A (\\<lambda>_. uniform_measure lborel {a..b})) \n            (PiM A (\\<lambda>_. uniform_measure lborel {a..b})) (\\<lambda>f. \\<lambda>x\\<in>A. f (g x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n     (Pi\\<^sub>M A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n    distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n     (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n     (\\<lambda>f. \\<lambda>x\\<in>A. f (g x))", "using assms"], ["proof (prove)\nusing this:\n  g permutes A\n  a < b\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n     (Pi\\<^sub>M A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n    distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n     (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n     (\\<lambda>f. \\<lambda>x\\<in>A. f (g x))", "by (intro distr_cong sets_PiM_cong refl) \n       (auto simp: fun_eq_iff space_PiM PiE_def extensional_def permutes_in_image[of g A])"], ["proof (state)\nthis:\n  distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n   (Pi\\<^sub>M A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n  distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n   (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n   (\\<lambda>f. \\<lambda>x\\<in>A. f (g x))\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n     (Pi\\<^sub>M A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n    Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b})", "also"], ["proof (state)\nthis:\n  distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n   (Pi\\<^sub>M A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n  distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n   (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n   (\\<lambda>f. \\<lambda>x\\<in>A. f (g x))\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n     (Pi\\<^sub>M A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n    Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b})", "from assms"], ["proof (chain)\npicking this:\n  g permutes A\n  a < b", "have \"\\<dots> = Pi\\<^sub>M A (\\<lambda>i. uniform_measure lborel {a..b})\""], ["proof (prove)\nusing this:\n  g permutes A\n  a < b\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n     (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n     (\\<lambda>f. \\<lambda>x\\<in>A. f (g x)) =\n    Pi\\<^sub>M A (\\<lambda>i. uniform_measure lborel {a..b})", "by (intro distr_PiM_reindex)\n       (auto simp: permutes_inj_on permutes_in_image[of g A] intro!: prob_space_uniform_measure)"], ["proof (state)\nthis:\n  distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n   (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n   (\\<lambda>f. \\<lambda>x\\<in>A. f (g x)) =\n  Pi\\<^sub>M A (\\<lambda>i. uniform_measure lborel {a..b})\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n     (Pi\\<^sub>M A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n    Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b})", "finally"], ["proof (chain)\npicking this:\n  distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n   (Pi\\<^sub>M A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n  Pi\\<^sub>M A (\\<lambda>i. uniform_measure lborel {a..b})", "show ?thesis"], ["proof (prove)\nusing this:\n  distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n   (Pi\\<^sub>M A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n  Pi\\<^sub>M A (\\<lambda>i. uniform_measure lborel {a..b})\n\ngoal (1 subgoal):\n 1. distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n     (Pi\\<^sub>M A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n    Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b})", "."], ["proof (state)\nthis:\n  distr (Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b}))\n   (Pi\\<^sub>M A (\\<lambda>_. lborel)) (\\<lambda>f. f \\<circ> g) =\n  Pi\\<^sub>M A (\\<lambda>_. uniform_measure lborel {a..b})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ennreal_fact [simp]: \"ennreal (fact n) = fact n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal (fact n) = fact n", "by (induction n) (auto simp: algebra_simps ennreal_mult' ennreal_of_nat_eq_real_of_nat)"], ["", "lemma inverse_ennreal_unique:\n  assumes \"a * (b :: ennreal) = 1\"\n  shows   \"b = inverse a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = inverse a", "using assms"], ["proof (prove)\nusing this:\n  a * b = 1\n\ngoal (1 subgoal):\n 1. b = inverse a", "by (metis divide_ennreal_def ennreal_inverse_1 ennreal_top_eq_mult_iff mult.comm_neutral \n        mult_divide_eq_ennreal mult_eq_0_iff semiring_normalization_rules(7))"], ["", "end"]]}