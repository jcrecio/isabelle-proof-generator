{"file_name": "/home/qj213/afp-2021-10-22/thys/Schutz_Spacetime/TernaryOrdering.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Schutz_Spacetime", "problem_names": ["lemma ordering_ord_ijk:\n  assumes \"ordering f ord X\"\n      and \"i < j \\<and> j < k \\<and> (finite X \\<longrightarrow> k < card X)\"\n  shows \"ord (f i) (f j) (f k)\"", "lemma empty_ordering [simp]: \"\\<exists>f. ordering f ord {}\"", "lemma singleton_ordering [simp]: \"\\<exists>f. ordering f ord {a}\"", "lemma two_ordering [simp]: \"\\<exists>f. ordering f ord {a, b}\"", "lemma card_le2_ordering:\n  assumes finiteX: \"finite X\"\n      and card_le2: \"card X \\<le> 2\"\n  shows \"\\<exists>f. ordering f ord X\"", "lemma ord_ordered:\n  assumes abc: \"ord a b c\"\n      and abc_neq: \"a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c\"\n  shows \"\\<exists>f. ordering f ord {a,b,c}\"", "lemma overlap_ordering:\n  assumes abc: \"ord a b c\"\n      and bcd: \"ord b c d\"\n      and abd: \"ord a b d\"\n      and acd: \"ord a c d\"\n      and abc_neq: \"a \\<noteq> b \\<and> a \\<noteq> c \\<and> a \\<noteq> d \\<and> b \\<noteq> c \\<and> b \\<noteq> d \\<and> c \\<noteq> d\"\n  shows \"\\<exists>f. ordering f ord {a,b,c,d}\"", "lemma overlap_ordering_alt1:\n  assumes abc: \"ord a b c\"\n      and bcd: \"ord b c d\"\n      and abc_bcd_abd: \"\\<forall> a b c d. ord a b c \\<and> ord b c d \\<longrightarrow> ord a b d\"\n      and abc_bcd_acd: \"\\<forall> a b c d. ord a b c \\<and> ord b c d \\<longrightarrow> ord a c d\"\n      and ord_distinct: \"\\<forall>a b c. (ord a b c \\<longrightarrow> a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c)\"\n  shows \"\\<exists>f. ordering f ord {a,b,c,d}\"", "lemma overlap_ordering_alt2:\n  assumes abc: \"ord a b c\"\n      and bcd: \"ord b c d\"\n      and abd: \"ord a b d\"\n      and acd: \"ord a c d\"\n      and ord_distinct: \"\\<forall>a b c. (ord a b c \\<longrightarrow> a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c)\"\n  shows \"\\<exists>f. ordering f ord {a,b,c,d}\"", "lemma overlap_ordering_alt:\n  assumes abc: \"ord a b c\"\n      and bcd: \"ord b c d\"\n      and abc_bcd_abd: \"\\<forall> a b c d. ord a b c \\<and> ord b c d \\<longrightarrow> ord a b d\"\n      and abc_bcd_acd: \"\\<forall> a b c d. ord a b c \\<and> ord b c d \\<longrightarrow> ord a c d\"\n      and abc_neq: \"a \\<noteq> b \\<and> a \\<noteq> c \\<and> a \\<noteq> d \\<and> b \\<noteq> c \\<and> b \\<noteq> d \\<and> c \\<noteq> d\"\n  shows \"\\<exists>f. ordering f ord {a,b,c,d}\"", "lemma finite_ordering_img: \"\\<lbrakk>X \\<noteq> {}; finite X; ordering f ord X\\<rbrakk> \\<Longrightarrow> f ` {0..card X - 1} = X\"", "lemma inf_ordering_img: \"\\<lbrakk>infinite X; ordering f ord X\\<rbrakk> \\<Longrightarrow> f ` {0..} = X\"", "lemma finite_ordering_inv_img: \"\\<lbrakk>X \\<noteq> {}; finite X; ordering f ord X\\<rbrakk> \\<Longrightarrow> f -` X = {0..card X - 1}\"", "lemma inf_ordering_inv_img: \"\\<lbrakk>infinite X; ordering f ord X\\<rbrakk> \\<Longrightarrow> f -` X = {0..}\"", "lemma inf_ordering_img_inv_img: \"\\<lbrakk>infinite X; ordering f ord X\\<rbrakk> \\<Longrightarrow> f ` f -` X = X\"", "lemma finite_ordering_inj_on: \"\\<lbrakk>finite X; ordering f ord X\\<rbrakk> \\<Longrightarrow> inj_on f {0..card X - 1}\"", "lemma finite_ordering_bij:\n  assumes orderingX: \"ordering f ord X\"\n      and finiteX: \"finite X\"\n      and non_empty: \"X \\<noteq> {}\"\n  shows \"bij_betw f {0..card X - 1} X\"", "lemma inf_ordering_inj':\n  assumes infX: \"infinite X\"\n      and f_ord: \"ordering f ord X\"\n      and ord_distinct: \"\\<forall>a b c. (ord a b c \\<longrightarrow> a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c)\"\n      and f_eq: \"f m = f n\"\n  shows \"m = n\"", "lemma inf_ordering_inj:\n  assumes \"infinite X\"\n      and \"ordering f ord X\"\n      and \"\\<forall>a b c. (ord a b c \\<longrightarrow> a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c)\"\n  shows \"inj f\"", "lemma finite_ordering_inj:\n  assumes finiteX: \"finite X\"\n      and f_ord: \"ordering f ord X\"\n      and ord_distinct: \"\\<forall>a b c. (ord a b c \\<longrightarrow> a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c)\"\n      and m_less_card: \"m < card X\"\n      and n_less_card: \"n < card X\"\n      and f_eq: \"f m = f n\"\n  shows \"m = n\"", "lemma ordering_inj:\n  assumes \"ordering f ord X\"\n      and \"\\<forall>a b c. (ord a b c \\<longrightarrow> a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c)\"\n      and \"finite X \\<longrightarrow> m < card X\"\n      and \"finite X \\<longrightarrow> n < card X\"\n      and \"f m = f n\"\n  shows \"m = n\"", "lemma ordering_sym:\n  assumes ord_sym: \"\\<And>a b c. ord a b c \\<Longrightarrow> ord c b a\"\n      and \"finite X\"\n      and \"ordering f ord X\"\n  shows \"ordering (\\<lambda>n. f (card X - 1 - n)) ord X\"", "lemma  zero_into_ordering:\n  assumes \"ordering f betw X\"\n  and \"X \\<noteq> {}\"\n  shows \"(f 0) \\<in> X\"", "lemma ordering2_ord_ijk:\n  assumes \"ordering2 f ord X\"\n      and \"Suc i = j \\<and> Suc j = k \\<and> (finite X \\<longrightarrow> k < card X)\"\n  shows \"ord (f i) (f j) (f k)\""], "translations": [["", "lemma ordering_ord_ijk:\n  assumes \"ordering f ord X\"\n      and \"i < j \\<and> j < k \\<and> (finite X \\<longrightarrow> k < card X)\"\n  shows \"ord (f i) (f j) (f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord (f i) (f j) (f k)", "by (metis ordering_def assms)"], ["", "lemma empty_ordering [simp]: \"\\<exists>f. ordering f ord {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {}", "by (simp add: ordering_def)"], ["", "lemma singleton_ordering [simp]: \"\\<exists>f. ordering f ord {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a}", "apply (rule_tac x = \"\\<lambda>n. a\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TernaryOrdering.ordering (\\<lambda>n. a) ord {a}", "by (simp add: ordering_def)"], ["", "lemma two_ordering [simp]: \"\\<exists>f. ordering f ord {a, b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b}", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>f. TernaryOrdering.ordering f ord {a, b}\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>f. TernaryOrdering.ordering f ord {a, b}", "assume \"a = b\""], ["proof (state)\nthis:\n  a = b\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>f. TernaryOrdering.ordering f ord {a, b}\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>f. TernaryOrdering.ordering f ord {a, b}", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = b\n\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b}", "using singleton_ordering"], ["proof (prove)\nusing this:\n  a = b\n  \\<exists>f. TernaryOrdering.ordering f ?ord {?a}\n\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b}", "by simp"], ["proof (state)\nthis:\n  \\<exists>f. TernaryOrdering.ordering f ord {a, b}\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow>\n    \\<exists>f. TernaryOrdering.ordering f ord {a, b}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow>\n    \\<exists>f. TernaryOrdering.ordering f ord {a, b}", "assume a_neq_b: \"a \\<noteq> b\""], ["proof (state)\nthis:\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow>\n    \\<exists>f. TernaryOrdering.ordering f ord {a, b}", "let ?f = \"\\<lambda>n. if n = 0 then a else b\""], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow>\n    \\<exists>f. TernaryOrdering.ordering f ord {a, b}", "have ordering1: \"(\\<forall>n. (finite {a,b} \\<longrightarrow> n < card {a,b}) \\<longrightarrow> ?f n \\<in> {a,b})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (finite {a, b} \\<longrightarrow> n < card {a, b}) \\<longrightarrow>\n       (if n = 0 then a else b) \\<in> {a, b}", "by simp"], ["proof (state)\nthis:\n  \\<forall>n.\n     (finite {a, b} \\<longrightarrow> n < card {a, b}) \\<longrightarrow>\n     (if n = 0 then a else b) \\<in> {a, b}\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow>\n    \\<exists>f. TernaryOrdering.ordering f ord {a, b}", "have ordering2: \"(\\<forall>x\\<in>{a,b}. \\<exists>n. (finite {a,b} \\<longrightarrow> n < card {a,b}) \\<and> ?f n = x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{a, b}.\n       \\<exists>n.\n          (finite {a, b} \\<longrightarrow> n < card {a, b}) \\<and>\n          (if n = 0 then a else b) = x", "using a_neq_b all_not_in_conv card_Suc_eq card_0_eq card_gt_0_iff insert_iff lessI"], ["proof (prove)\nusing this:\n  a \\<noteq> b\n  (\\<forall>x. x \\<notin> ?A) = (?A = {})\n  (card ?A = Suc ?k) =\n  (\\<exists>b B.\n      ?A = insert b B \\<and>\n      b \\<notin> B \\<and>\n      card B = ?k \\<and> (?k = 0 \\<longrightarrow> B = {}))\n  finite ?A \\<Longrightarrow> (card ?A = 0) = (?A = {})\n  (0 < card ?A) = (?A \\<noteq> {} \\<and> finite ?A)\n  (?a \\<in> insert ?b ?A) = (?a = ?b \\<or> ?a \\<in> ?A)\n  ?n < Suc ?n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{a, b}.\n       \\<exists>n.\n          (finite {a, b} \\<longrightarrow> n < card {a, b}) \\<and>\n          (if n = 0 then a else b) = x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>{a, b}.\n     \\<exists>n.\n        (finite {a, b} \\<longrightarrow> n < card {a, b}) \\<and>\n        (if n = 0 then a else b) = x\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow>\n    \\<exists>f. TernaryOrdering.ordering f ord {a, b}", "have ordering3: \"(\\<forall>n n' n''. (finite {a,b} \\<longrightarrow> n'' < card {a,b}) \\<and> n < n' \\<and> n' < n''\n                                \\<longrightarrow> ord (?f n) (?f n') (?f n''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n n' n''.\n       (finite {a, b} \\<longrightarrow> n'' < card {a, b}) \\<and>\n       n < n' \\<and> n' < n'' \\<longrightarrow>\n       ord (if n = 0 then a else b) (if n' = 0 then a else b)\n        (if n'' = 0 then a else b)", "using a_neq_b"], ["proof (prove)\nusing this:\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. \\<forall>n n' n''.\n       (finite {a, b} \\<longrightarrow> n'' < card {a, b}) \\<and>\n       n < n' \\<and> n' < n'' \\<longrightarrow>\n       ord (if n = 0 then a else b) (if n' = 0 then a else b)\n        (if n'' = 0 then a else b)", "by auto"], ["proof (state)\nthis:\n  \\<forall>n n' n''.\n     (finite {a, b} \\<longrightarrow> n'' < card {a, b}) \\<and>\n     n < n' \\<and> n' < n'' \\<longrightarrow>\n     ord (if n = 0 then a else b) (if n' = 0 then a else b)\n      (if n'' = 0 then a else b)\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow>\n    \\<exists>f. TernaryOrdering.ordering f ord {a, b}", "have \"ordering ?f ord {a, b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TernaryOrdering.ordering (\\<lambda>n. if n = 0 then a else b) ord {a, b}", "using ordering_def ordering1 ordering2 ordering3"], ["proof (prove)\nusing this:\n  TernaryOrdering.ordering ?f ?ord ?X \\<equiv>\n  (\\<forall>n.\n      (finite ?X \\<longrightarrow> n < card ?X) \\<longrightarrow>\n      ?f n \\<in> ?X) \\<and>\n  (\\<forall>x\\<in>?X.\n      \\<exists>n.\n         (finite ?X \\<longrightarrow> n < card ?X) \\<and> ?f n = x) \\<and>\n  (\\<forall>n n' n''.\n      (finite ?X \\<longrightarrow> n'' < card ?X) \\<and>\n      n < n' \\<and> n' < n'' \\<longrightarrow>\n      ?ord (?f n) (?f n') (?f n''))\n  \\<forall>n.\n     (finite {a, b} \\<longrightarrow> n < card {a, b}) \\<longrightarrow>\n     (if n = 0 then a else b) \\<in> {a, b}\n  \\<forall>x\\<in>{a, b}.\n     \\<exists>n.\n        (finite {a, b} \\<longrightarrow> n < card {a, b}) \\<and>\n        (if n = 0 then a else b) = x\n  \\<forall>n n' n''.\n     (finite {a, b} \\<longrightarrow> n'' < card {a, b}) \\<and>\n     n < n' \\<and> n' < n'' \\<longrightarrow>\n     ord (if n = 0 then a else b) (if n' = 0 then a else b)\n      (if n'' = 0 then a else b)\n\ngoal (1 subgoal):\n 1. TernaryOrdering.ordering (\\<lambda>n. if n = 0 then a else b) ord {a, b}", "by blast"], ["proof (state)\nthis:\n  TernaryOrdering.ordering (\\<lambda>n. if n = 0 then a else b) ord {a, b}\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow>\n    \\<exists>f. TernaryOrdering.ordering f ord {a, b}", "thus ?thesis"], ["proof (prove)\nusing this:\n  TernaryOrdering.ordering (\\<lambda>n. if n = 0 then a else b) ord {a, b}\n\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b}", "by auto"], ["proof (state)\nthis:\n  \\<exists>f. TernaryOrdering.ordering f ord {a, b}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_le2_ordering:\n  assumes finiteX: \"finite X\"\n      and card_le2: \"card X \\<le> 2\"\n  shows \"\\<exists>f. ordering f ord X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord X", "have card012: \"card X = 0 \\<or> card X = 1 \\<or> card X = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card X = 0 \\<or> card X = 1 \\<or> card X = 2", "using card_le2"], ["proof (prove)\nusing this:\n  card X \\<le> 2\n\ngoal (1 subgoal):\n 1. card X = 0 \\<or> card X = 1 \\<or> card X = 2", "by auto"], ["proof (state)\nthis:\n  card X = 0 \\<or> card X = 1 \\<or> card X = 2\n\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord X", "have card0: \"card X = 0 \\<longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card X = 0 \\<longrightarrow>\n    (\\<exists>f. TernaryOrdering.ordering f ord X)", "using finiteX"], ["proof (prove)\nusing this:\n  finite X\n\ngoal (1 subgoal):\n 1. card X = 0 \\<longrightarrow>\n    (\\<exists>f. TernaryOrdering.ordering f ord X)", "by simp"], ["proof (state)\nthis:\n  card X = 0 \\<longrightarrow>\n  (\\<exists>f. TernaryOrdering.ordering f ord X)\n\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord X", "have card1: \"card X = 1 \\<longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card X = 1 \\<longrightarrow>\n    (\\<exists>f. TernaryOrdering.ordering f ord X)", "using card_eq_SucD"], ["proof (prove)\nusing this:\n  card ?A = Suc ?k \\<Longrightarrow>\n  \\<exists>b B.\n     ?A = insert b B \\<and>\n     b \\<notin> B \\<and>\n     card B = ?k \\<and> (?k = 0 \\<longrightarrow> B = {})\n\ngoal (1 subgoal):\n 1. card X = 1 \\<longrightarrow>\n    (\\<exists>f. TernaryOrdering.ordering f ord X)", "by fastforce"], ["proof (state)\nthis:\n  card X = 1 \\<longrightarrow>\n  (\\<exists>f. TernaryOrdering.ordering f ord X)\n\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord X", "have card2: \"card X = 2 \\<longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card X = 2 \\<longrightarrow>\n    (\\<exists>f. TernaryOrdering.ordering f ord X)", "by (metis two_ordering card_eq_SucD numeral_2_eq_2)"], ["proof (state)\nthis:\n  card X = 2 \\<longrightarrow>\n  (\\<exists>f. TernaryOrdering.ordering f ord X)\n\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord X", "thus ?thesis"], ["proof (prove)\nusing this:\n  card X = 2 \\<longrightarrow>\n  (\\<exists>f. TernaryOrdering.ordering f ord X)\n\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord X", "using card012 card0 card1 card2"], ["proof (prove)\nusing this:\n  card X = 2 \\<longrightarrow>\n  (\\<exists>f. TernaryOrdering.ordering f ord X)\n  card X = 0 \\<or> card X = 1 \\<or> card X = 2\n  card X = 0 \\<longrightarrow>\n  (\\<exists>f. TernaryOrdering.ordering f ord X)\n  card X = 1 \\<longrightarrow>\n  (\\<exists>f. TernaryOrdering.ordering f ord X)\n  card X = 2 \\<longrightarrow>\n  (\\<exists>f. TernaryOrdering.ordering f ord X)\n\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord X", "by auto"], ["proof (state)\nthis:\n  \\<exists>f. TernaryOrdering.ordering f ord X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_ordered:\n  assumes abc: \"ord a b c\"\n      and abc_neq: \"a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c\"\n  shows \"\\<exists>f. ordering f ord {a,b,c}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b, c}", "apply (rule_tac x = \"\\<lambda>n. if n = 0 then a else if n = 1 then b else c\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TernaryOrdering.ordering\n     (\\<lambda>n. if n = 0 then a else if n = 1 then b else c) ord {a, b, c}", "apply (unfold ordering_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n.\n        (finite {a, b, c} \\<longrightarrow>\n         n < card {a, b, c}) \\<longrightarrow>\n        (if n = 0 then a else if n = 1 then b else c)\n        \\<in> {a, b, c}) \\<and>\n    (\\<forall>x\\<in>{a, b, c}.\n        \\<exists>n.\n           (finite {a, b, c} \\<longrightarrow> n < card {a, b, c}) \\<and>\n           (if n = 0 then a else if n = 1 then b else c) = x) \\<and>\n    (\\<forall>n n' n''.\n        (finite {a, b, c} \\<longrightarrow> n'' < card {a, b, c}) \\<and>\n        n < n' \\<and> n' < n'' \\<longrightarrow>\n        ord (if n = 0 then a else if n = 1 then b else c)\n         (if n' = 0 then a else if n' = 1 then b else c)\n         (if n'' = 0 then a else if n'' = 1 then b else c))", "using abc abc_neq"], ["proof (prove)\nusing this:\n  ord a b c\n  a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c\n\ngoal (1 subgoal):\n 1. (\\<forall>n.\n        (finite {a, b, c} \\<longrightarrow>\n         n < card {a, b, c}) \\<longrightarrow>\n        (if n = 0 then a else if n = 1 then b else c)\n        \\<in> {a, b, c}) \\<and>\n    (\\<forall>x\\<in>{a, b, c}.\n        \\<exists>n.\n           (finite {a, b, c} \\<longrightarrow> n < card {a, b, c}) \\<and>\n           (if n = 0 then a else if n = 1 then b else c) = x) \\<and>\n    (\\<forall>n n' n''.\n        (finite {a, b, c} \\<longrightarrow> n'' < card {a, b, c}) \\<and>\n        n < n' \\<and> n' < n'' \\<longrightarrow>\n        ord (if n = 0 then a else if n = 1 then b else c)\n         (if n' = 0 then a else if n' = 1 then b else c)\n         (if n'' = 0 then a else if n'' = 1 then b else c))", "by auto"], ["", "lemma overlap_ordering:\n  assumes abc: \"ord a b c\"\n      and bcd: \"ord b c d\"\n      and abd: \"ord a b d\"\n      and acd: \"ord a c d\"\n      and abc_neq: \"a \\<noteq> b \\<and> a \\<noteq> c \\<and> a \\<noteq> d \\<and> b \\<noteq> c \\<and> b \\<noteq> d \\<and> c \\<noteq> d\"\n  shows \"\\<exists>f. ordering f ord {a,b,c,d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b, c, d}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b, c, d}", "let ?X = \"{a,b,c,d}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b, c, d}", "let ?f = \"\\<lambda>n. if n = 0 then a else if n = 1 then b else if n = 2 then c else d\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b, c, d}", "have card4: \"card ?X = 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a, b, c, d} = 4", "using abc bcd abd abc_neq"], ["proof (prove)\nusing this:\n  ord a b c\n  ord b c d\n  ord a b d\n  a \\<noteq> b \\<and>\n  a \\<noteq> c \\<and>\n  a \\<noteq> d \\<and> b \\<noteq> c \\<and> b \\<noteq> d \\<and> c \\<noteq> d\n\ngoal (1 subgoal):\n 1. card {a, b, c, d} = 4", "by simp"], ["proof (state)\nthis:\n  card {a, b, c, d} = 4\n\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b, c, d}", "have ordering1: \"\\<forall>n. (finite ?X \\<longrightarrow> n < card ?X) \\<longrightarrow> ?f n \\<in> ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (finite {a, b, c, d} \\<longrightarrow>\n        n < card {a, b, c, d}) \\<longrightarrow>\n       (if n = 0 then a else if n = 1 then b else if n = 2 then c else d)\n       \\<in> {a, b, c, d}", "by simp"], ["proof (state)\nthis:\n  \\<forall>n.\n     (finite {a, b, c, d} \\<longrightarrow>\n      n < card {a, b, c, d}) \\<longrightarrow>\n     (if n = 0 then a else if n = 1 then b else if n = 2 then c else d)\n     \\<in> {a, b, c, d}\n\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b, c, d}", "have ordering2: \"\\<forall>x\\<in>?X. \\<exists>n. (finite ?X \\<longrightarrow> n < card ?X) \\<and> ?f n = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{a, b, c, d}.\n       \\<exists>n.\n          (finite {a, b, c, d} \\<longrightarrow>\n           n < card {a, b, c, d}) \\<and>\n          (if n = 0 then a\n           else if n = 1 then b else if n = 2 then c else d) =\n          x", "by (metis card4 One_nat_def Suc_1 Suc_lessI empty_iff insertE numeral_3_eq_3 numeral_eq_iff\n              numeral_eq_one_iff rel_simps(51) semiring_norm(85) semiring_norm(86) semiring_norm(87)\n              semiring_norm(89) zero_neq_numeral)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>{a, b, c, d}.\n     \\<exists>n.\n        (finite {a, b, c, d} \\<longrightarrow> n < card {a, b, c, d}) \\<and>\n        (if n = 0 then a else if n = 1 then b else if n = 2 then c else d) =\n        x\n\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b, c, d}", "have ordering3: \"(\\<forall>n n' n''. (finite ?X \\<longrightarrow> n'' < card ?X) \\<and> n < n' \\<and> n' < n''\n                                 \\<longrightarrow> ord (?f n) (?f n') (?f n''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n n' n''.\n       (finite {a, b, c, d} \\<longrightarrow>\n        n'' < card {a, b, c, d}) \\<and>\n       n < n' \\<and> n' < n'' \\<longrightarrow>\n       ord (if n = 0 then a\n            else if n = 1 then b else if n = 2 then c else d)\n        (if n' = 0 then a\n         else if n' = 1 then b else if n' = 2 then c else d)\n        (if n'' = 0 then a\n         else if n'' = 1 then b else if n'' = 2 then c else d)", "using card4 abc bcd abd acd card_0_eq card_insert_if finite.emptyI finite_insert less_antisym\n          less_one less_trans_Suc not_less_eq not_one_less_zero numeral_2_eq_2"], ["proof (prove)\nusing this:\n  card {a, b, c, d} = 4\n  ord a b c\n  ord b c d\n  ord a b d\n  ord a c d\n  finite ?A \\<Longrightarrow> (card ?A = 0) = (?A = {})\n  finite ?A \\<Longrightarrow>\n  card (insert ?x ?A) = (if ?x \\<in> ?A then card ?A else Suc (card ?A))\n  finite {}\n  finite (insert ?a ?A) = finite ?A\n  \\<lbrakk>\\<not> ?n < ?m; ?n < Suc ?m\\<rbrakk> \\<Longrightarrow> ?m = ?n\n  (?n < 1) = (?n = 0)\n  \\<lbrakk>?i < ?j; ?j < ?k\\<rbrakk> \\<Longrightarrow> Suc ?i < ?k\n  (\\<not> ?m < ?n) = (?n < Suc ?m)\n  \\<not> (1::?'a) < (0::?'a)\n  2 = Suc (Suc 0)\n\ngoal (1 subgoal):\n 1. \\<forall>n n' n''.\n       (finite {a, b, c, d} \\<longrightarrow>\n        n'' < card {a, b, c, d}) \\<and>\n       n < n' \\<and> n' < n'' \\<longrightarrow>\n       ord (if n = 0 then a\n            else if n = 1 then b else if n = 2 then c else d)\n        (if n' = 0 then a\n         else if n' = 1 then b else if n' = 2 then c else d)\n        (if n'' = 0 then a\n         else if n'' = 1 then b else if n'' = 2 then c else d)", "by auto"], ["proof (state)\nthis:\n  \\<forall>n n' n''.\n     (finite {a, b, c, d} \\<longrightarrow> n'' < card {a, b, c, d}) \\<and>\n     n < n' \\<and> n' < n'' \\<longrightarrow>\n     ord (if n = 0 then a else if n = 1 then b else if n = 2 then c else d)\n      (if n' = 0 then a else if n' = 1 then b else if n' = 2 then c else d)\n      (if n'' = 0 then a\n       else if n'' = 1 then b else if n'' = 2 then c else d)\n\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b, c, d}", "have \"ordering ?f ord ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TernaryOrdering.ordering\n     (\\<lambda>n.\n         if n = 0 then a else if n = 1 then b else if n = 2 then c else d)\n     ord {a, b, c, d}", "using ordering1 ordering2 ordering3 ordering_def"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     (finite {a, b, c, d} \\<longrightarrow>\n      n < card {a, b, c, d}) \\<longrightarrow>\n     (if n = 0 then a else if n = 1 then b else if n = 2 then c else d)\n     \\<in> {a, b, c, d}\n  \\<forall>x\\<in>{a, b, c, d}.\n     \\<exists>n.\n        (finite {a, b, c, d} \\<longrightarrow> n < card {a, b, c, d}) \\<and>\n        (if n = 0 then a else if n = 1 then b else if n = 2 then c else d) =\n        x\n  \\<forall>n n' n''.\n     (finite {a, b, c, d} \\<longrightarrow> n'' < card {a, b, c, d}) \\<and>\n     n < n' \\<and> n' < n'' \\<longrightarrow>\n     ord (if n = 0 then a else if n = 1 then b else if n = 2 then c else d)\n      (if n' = 0 then a else if n' = 1 then b else if n' = 2 then c else d)\n      (if n'' = 0 then a\n       else if n'' = 1 then b else if n'' = 2 then c else d)\n  TernaryOrdering.ordering ?f ?ord ?X \\<equiv>\n  (\\<forall>n.\n      (finite ?X \\<longrightarrow> n < card ?X) \\<longrightarrow>\n      ?f n \\<in> ?X) \\<and>\n  (\\<forall>x\\<in>?X.\n      \\<exists>n.\n         (finite ?X \\<longrightarrow> n < card ?X) \\<and> ?f n = x) \\<and>\n  (\\<forall>n n' n''.\n      (finite ?X \\<longrightarrow> n'' < card ?X) \\<and>\n      n < n' \\<and> n' < n'' \\<longrightarrow>\n      ?ord (?f n) (?f n') (?f n''))\n\ngoal (1 subgoal):\n 1. TernaryOrdering.ordering\n     (\\<lambda>n.\n         if n = 0 then a else if n = 1 then b else if n = 2 then c else d)\n     ord {a, b, c, d}", "by blast"], ["proof (state)\nthis:\n  TernaryOrdering.ordering\n   (\\<lambda>n.\n       if n = 0 then a else if n = 1 then b else if n = 2 then c else d)\n   ord {a, b, c, d}\n\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b, c, d}", "thus ?thesis"], ["proof (prove)\nusing this:\n  TernaryOrdering.ordering\n   (\\<lambda>n.\n       if n = 0 then a else if n = 1 then b else if n = 2 then c else d)\n   ord {a, b, c, d}\n\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b, c, d}", "by auto"], ["proof (state)\nthis:\n  \\<exists>f. TernaryOrdering.ordering f ord {a, b, c, d}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma overlap_ordering_alt1:\n  assumes abc: \"ord a b c\"\n      and bcd: \"ord b c d\"\n      and abc_bcd_abd: \"\\<forall> a b c d. ord a b c \\<and> ord b c d \\<longrightarrow> ord a b d\"\n      and abc_bcd_acd: \"\\<forall> a b c d. ord a b c \\<and> ord b c d \\<longrightarrow> ord a c d\"\n      and ord_distinct: \"\\<forall>a b c. (ord a b c \\<longrightarrow> a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c)\"\n  shows \"\\<exists>f. ordering f ord {a,b,c,d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b, c, d}", "by (metis (full_types) assms overlap_ordering)"], ["", "lemma overlap_ordering_alt2:\n  assumes abc: \"ord a b c\"\n      and bcd: \"ord b c d\"\n      and abd: \"ord a b d\"\n      and acd: \"ord a c d\"\n      and ord_distinct: \"\\<forall>a b c. (ord a b c \\<longrightarrow> a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c)\"\n  shows \"\\<exists>f. ordering f ord {a,b,c,d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b, c, d}", "by (metis assms overlap_ordering)"], ["", "lemma overlap_ordering_alt:\n  assumes abc: \"ord a b c\"\n      and bcd: \"ord b c d\"\n      and abc_bcd_abd: \"\\<forall> a b c d. ord a b c \\<and> ord b c d \\<longrightarrow> ord a b d\"\n      and abc_bcd_acd: \"\\<forall> a b c d. ord a b c \\<and> ord b c d \\<longrightarrow> ord a c d\"\n      and abc_neq: \"a \\<noteq> b \\<and> a \\<noteq> c \\<and> a \\<noteq> d \\<and> b \\<noteq> c \\<and> b \\<noteq> d \\<and> c \\<noteq> d\"\n  shows \"\\<exists>f. ordering f ord {a,b,c,d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. TernaryOrdering.ordering f ord {a, b, c, d}", "by (meson assms overlap_ordering)"], ["", "text \\<open>\n  The lemmas below are easy to prove for \\<open>X = {}\\<close>, and if I included that case then I would have\n  to write a conditional definition in place of \\<open>{0..|X| - 1}\\<close>.\n\\<close>"], ["", "lemma finite_ordering_img: \"\\<lbrakk>X \\<noteq> {}; finite X; ordering f ord X\\<rbrakk> \\<Longrightarrow> f ` {0..card X - 1} = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<noteq> {}; finite X;\n     TernaryOrdering.ordering f ord X\\<rbrakk>\n    \\<Longrightarrow> f ` {0..card X - 1} = X", "by (force simp add: ordering_def image_def)"], ["", "lemma inf_ordering_img: \"\\<lbrakk>infinite X; ordering f ord X\\<rbrakk> \\<Longrightarrow> f ` {0..} = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite X; TernaryOrdering.ordering f ord X\\<rbrakk>\n    \\<Longrightarrow> f ` {0..} = X", "by (auto simp add: ordering_def image_def)"], ["", "lemma finite_ordering_inv_img: \"\\<lbrakk>X \\<noteq> {}; finite X; ordering f ord X\\<rbrakk> \\<Longrightarrow> f -` X = {0..card X - 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<noteq> {}; finite X;\n     TernaryOrdering.ordering f ord X\\<rbrakk>\n    \\<Longrightarrow> f -` X = {0..card X - 1}", "apply (auto simp add: ordering_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>finite X; \\<forall>n<card X. f n \\<in> X;\n        \\<forall>x\\<in>X. \\<exists>n<card X. f n = x;\n        \\<forall>n n' n''.\n           n'' < card X \\<and> n < n' \\<and> n' < n'' \\<longrightarrow>\n           ord (f n) (f n') (f n'');\n        x \\<in> X; f xa \\<in> X\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> card X - Suc 0", "oops"], ["", "lemma inf_ordering_inv_img: \"\\<lbrakk>infinite X; ordering f ord X\\<rbrakk> \\<Longrightarrow> f -` X = {0..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite X; TernaryOrdering.ordering f ord X\\<rbrakk>\n    \\<Longrightarrow> f -` X = {0..}", "by (auto simp add: ordering_def image_def)"], ["", "lemma inf_ordering_img_inv_img: \"\\<lbrakk>infinite X; ordering f ord X\\<rbrakk> \\<Longrightarrow> f ` f -` X = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite X; TernaryOrdering.ordering f ord X\\<rbrakk>\n    \\<Longrightarrow> f ` f -` X = X", "using inf_ordering_img"], ["proof (prove)\nusing this:\n  \\<lbrakk>infinite ?X; TernaryOrdering.ordering ?f ?ord ?X\\<rbrakk>\n  \\<Longrightarrow> ?f ` {0..} = ?X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite X; TernaryOrdering.ordering f ord X\\<rbrakk>\n    \\<Longrightarrow> f ` f -` X = X", "by auto"], ["", "lemma finite_ordering_inj_on: \"\\<lbrakk>finite X; ordering f ord X\\<rbrakk> \\<Longrightarrow> inj_on f {0..card X - 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite X; TernaryOrdering.ordering f ord X\\<rbrakk>\n    \\<Longrightarrow> inj_on f {0..card X - 1}", "by (metis finite_ordering_img Suc_diff_1 atLeastAtMost_iff card_atLeastAtMost card_eq_0_iff\n          diff_0_eq_0 diff_zero eq_card_imp_inj_on gr0I inj_onI le_0_eq)"], ["", "lemma finite_ordering_bij:\n  assumes orderingX: \"ordering f ord X\"\n      and finiteX: \"finite X\"\n      and non_empty: \"X \\<noteq> {}\"\n  shows \"bij_betw f {0..card X - 1} X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw f {0..card X - 1} X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bij_betw f {0..card X - 1} X", "have f_image: \"f ` {0..card X - 1} = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` {0..card X - 1} = X", "by (metis orderingX finiteX finite_ordering_img non_empty)"], ["proof (state)\nthis:\n  f ` {0..card X - 1} = X\n\ngoal (1 subgoal):\n 1. bij_betw f {0..card X - 1} X", "thus ?thesis"], ["proof (prove)\nusing this:\n  f ` {0..card X - 1} = X\n\ngoal (1 subgoal):\n 1. bij_betw f {0..card X - 1} X", "by (metis inj_on_imp_bij_betw orderingX finiteX finite_ordering_inj_on)"], ["proof (state)\nthis:\n  bij_betw f {0..card X - 1} X\n\ngoal:\nNo subgoals!", "qed"], ["", "(* I think there might be a way of proving this without ord_distinct (?) *)"], ["", "lemma inf_ordering_inj':\n  assumes infX: \"infinite X\"\n      and f_ord: \"ordering f ord X\"\n      and ord_distinct: \"\\<forall>a b c. (ord a b c \\<longrightarrow> a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c)\"\n      and f_eq: \"f m = f n\"\n  shows \"m = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = n", "(* If m \\<noteq> n and f m = f n then it wouldn't be an ordering, and this part:\n   \\<forall>n n' n''. n < n' \\<and> n' < n'' \\<longrightarrow> [[f n f n' f n'']]\n   would fail because two of f n f n' f n'' would be equal, and that violates ord_distinct. *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = n", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<noteq> n \\<Longrightarrow> False", "assume m_not_n: \"m \\<noteq> n\""], ["proof (state)\nthis:\n  m \\<noteq> n\n\ngoal (1 subgoal):\n 1. m \\<noteq> n \\<Longrightarrow> False", "have betw_3n: \"\\<forall>n n' n''. n < n' \\<and> n' < n'' \\<longrightarrow> ord (f n) (f n') (f n'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n n' n''.\n       n < n' \\<and> n' < n'' \\<longrightarrow> ord (f n) (f n') (f n'')", "using f_ord"], ["proof (prove)\nusing this:\n  TernaryOrdering.ordering f ord X\n\ngoal (1 subgoal):\n 1. \\<forall>n n' n''.\n       n < n' \\<and> n' < n'' \\<longrightarrow> ord (f n) (f n') (f n'')", "by (simp add: ordering_def infX)"], ["proof (state)\nthis:\n  \\<forall>n n' n''.\n     n < n' \\<and> n' < n'' \\<longrightarrow> ord (f n) (f n') (f n'')\n\ngoal (1 subgoal):\n 1. m \\<noteq> n \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  \\<forall>n n' n''.\n     n < n' \\<and> n' < n'' \\<longrightarrow> ord (f n) (f n') (f n'')\n\ngoal (1 subgoal):\n 1. False", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> False", "assume m_less_n: \"m < n\""], ["proof (state)\nthis:\n  m < n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  m < n", "obtain k where \"n < k\""], ["proof (prove)\nusing this:\n  m < n\n\ngoal (1 subgoal):\n 1. (\\<And>k. n < k \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  n < k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  n < k", "have \"ord (f m) (f n) (f k)\""], ["proof (prove)\nusing this:\n  n < k\n\ngoal (1 subgoal):\n 1. ord (f m) (f n) (f k)", "using m_less_n betw_3n"], ["proof (prove)\nusing this:\n  n < k\n  m < n\n  \\<forall>n n' n''.\n     n < n' \\<and> n' < n'' \\<longrightarrow> ord (f n) (f n') (f n'')\n\ngoal (1 subgoal):\n 1. ord (f m) (f n) (f k)", "by simp"], ["proof (state)\nthis:\n  ord (f m) (f n) (f k)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ord (f m) (f n) (f k)", "have \"f m \\<noteq> f n\""], ["proof (prove)\nusing this:\n  ord (f m) (f n) (f k)\n\ngoal (1 subgoal):\n 1. f m \\<noteq> f n", "using ord_distinct"], ["proof (prove)\nusing this:\n  ord (f m) (f n) (f k)\n  \\<forall>a b c.\n     ord a b c \\<longrightarrow>\n     a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c\n\ngoal (1 subgoal):\n 1. f m \\<noteq> f n", "by simp"], ["proof (state)\nthis:\n  f m \\<noteq> f n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     ?P1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> False", "thus ?thesis"], ["proof (prove)\nusing this:\n  f m \\<noteq> f n\n\ngoal (1 subgoal):\n 1. False", "using f_eq"], ["proof (prove)\nusing this:\n  f m \\<noteq> f n\n  f m = f n\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     \\<not> m < n\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     \\<not> m < n\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"\\<not> m < n\""], ["proof (state)\nthis:\n  \\<not> m < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     \\<not> m < n\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> m < n", "have n_less_m: \"n < m\""], ["proof (prove)\nusing this:\n  \\<not> m < n\n\ngoal (1 subgoal):\n 1. n < m", "using m_not_n"], ["proof (prove)\nusing this:\n  \\<not> m < n\n  m \\<noteq> n\n\ngoal (1 subgoal):\n 1. n < m", "by simp"], ["proof (state)\nthis:\n  n < m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     \\<not> m < n\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  n < m", "obtain k where \"m < k\""], ["proof (prove)\nusing this:\n  n < m\n\ngoal (1 subgoal):\n 1. (\\<And>k. m < k \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  m < k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     \\<not> m < n\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  m < k", "have \"ord (f n) (f m) (f k)\""], ["proof (prove)\nusing this:\n  m < k\n\ngoal (1 subgoal):\n 1. ord (f n) (f m) (f k)", "using n_less_m betw_3n"], ["proof (prove)\nusing this:\n  m < k\n  n < m\n  \\<forall>n n' n''.\n     n < n' \\<and> n' < n'' \\<longrightarrow> ord (f n) (f n') (f n'')\n\ngoal (1 subgoal):\n 1. ord (f n) (f m) (f k)", "by simp"], ["proof (state)\nthis:\n  ord (f n) (f m) (f k)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     \\<not> m < n\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ord (f n) (f m) (f k)", "have \"f n \\<noteq> f m\""], ["proof (prove)\nusing this:\n  ord (f n) (f m) (f k)\n\ngoal (1 subgoal):\n 1. f n \\<noteq> f m", "using ord_distinct"], ["proof (prove)\nusing this:\n  ord (f n) (f m) (f k)\n  \\<forall>a b c.\n     ord a b c \\<longrightarrow>\n     a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c\n\ngoal (1 subgoal):\n 1. f n \\<noteq> f m", "by simp"], ["proof (state)\nthis:\n  f n \\<noteq> f m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n n' n''.\n                n < n' \\<and> n' < n'' \\<longrightarrow>\n                ord (f n) (f n') (f n'');\n     \\<not> m < n\\<rbrakk>\n    \\<Longrightarrow> False", "thus ?thesis"], ["proof (prove)\nusing this:\n  f n \\<noteq> f m\n\ngoal (1 subgoal):\n 1. False", "using f_eq"], ["proof (prove)\nusing this:\n  f n \\<noteq> f m\n  f m = f n\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "(* f is actually injective when X is infinite. *)"], ["", "lemma inf_ordering_inj:\n  assumes \"infinite X\"\n      and \"ordering f ord X\"\n      and \"\\<forall>a b c. (ord a b c \\<longrightarrow> a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c)\"\n  shows \"inj f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj f", "using inf_ordering_inj' assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>infinite ?X; TernaryOrdering.ordering ?f ?ord ?X;\n   \\<forall>a b c.\n      ?ord a b c \\<longrightarrow>\n      a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c;\n   ?f ?m = ?f ?n\\<rbrakk>\n  \\<Longrightarrow> ?m = ?n\n  infinite X\n  TernaryOrdering.ordering f ord X\n  \\<forall>a b c.\n     ord a b c \\<longrightarrow>\n     a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c\n\ngoal (1 subgoal):\n 1. inj f", "by (metis injI)"], ["", "text \\<open>\n  The finite case is a little more difficult as I can't just choose some other natural number\n  to form the third part of the betweenness relation and the initial simplification isn't as nice.\n  Note that I cannot prove \\<open>inj f\\<close> (over the whole type that \\<open>f\\<close> is defined on, i.e. natural numbers),\n  because I need to capture the \\<open>m\\<close> and \\<open>n\\<close> that obey specific requirements for the finite case.\n  In order to prove \\<open>inj f\\<close>, I would have to extend the definition for ordering to include \\<open>m\\<close> and \\<open>n\\<close>\n  beyond \\<open>card X\\<close>, such that it is still injective. That would probably not be very useful.\n\\<close>"], ["", "lemma finite_ordering_inj:\n  assumes finiteX: \"finite X\"\n      and f_ord: \"ordering f ord X\"\n      and ord_distinct: \"\\<forall>a b c. (ord a b c \\<longrightarrow> a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c)\"\n      and m_less_card: \"m < card X\"\n      and n_less_card: \"n < card X\"\n      and f_eq: \"f m = f n\"\n  shows \"m = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = n", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<noteq> n \\<Longrightarrow> False", "assume m_not_n: \"m \\<noteq> n\""], ["proof (state)\nthis:\n  m \\<noteq> n\n\ngoal (1 subgoal):\n 1. m \\<noteq> n \\<Longrightarrow> False", "have surj_f: \"\\<forall>x\\<in>X. \\<exists>n<card X. f n = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. \\<exists>n<card X. f n = x", "using f_ord"], ["proof (prove)\nusing this:\n  TernaryOrdering.ordering f ord X\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. \\<exists>n<card X. f n = x", "by (simp add: ordering_def finiteX)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X. \\<exists>n<card X. f n = x\n\ngoal (1 subgoal):\n 1. m \\<noteq> n \\<Longrightarrow> False", "have betw_3n: \"\\<forall>n n' n''. n'' < card X \\<and> n < n' \\<and> n' < n'' \\<longrightarrow> ord (f n) (f n') (f n'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n n' n''.\n       n'' < card X \\<and> n < n' \\<and> n' < n'' \\<longrightarrow>\n       ord (f n) (f n') (f n'')", "using f_ord"], ["proof (prove)\nusing this:\n  TernaryOrdering.ordering f ord X\n\ngoal (1 subgoal):\n 1. \\<forall>n n' n''.\n       n'' < card X \\<and> n < n' \\<and> n' < n'' \\<longrightarrow>\n       ord (f n) (f n') (f n'')", "by (simp add: ordering_def)"], ["proof (state)\nthis:\n  \\<forall>n n' n''.\n     n'' < card X \\<and> n < n' \\<and> n' < n'' \\<longrightarrow>\n     ord (f n) (f n') (f n'')\n\ngoal (1 subgoal):\n 1. m \\<noteq> n \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "assume card_le2: \"card X \\<le> 2\""], ["proof (state)\nthis:\n  card X \\<le> 2\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have card0: \"card X = 0 \\<longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card X = 0 \\<longrightarrow> False", "using m_less_card"], ["proof (prove)\nusing this:\n  m < card X\n\ngoal (1 subgoal):\n 1. card X = 0 \\<longrightarrow> False", "by simp"], ["proof (state)\nthis:\n  card X = 0 \\<longrightarrow> False\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have card1: \"card X = 1 \\<longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card X = 1 \\<longrightarrow> False", "using m_less_card n_less_card m_not_n"], ["proof (prove)\nusing this:\n  m < card X\n  n < card X\n  m \\<noteq> n\n\ngoal (1 subgoal):\n 1. card X = 1 \\<longrightarrow> False", "by simp"], ["proof (state)\nthis:\n  card X = 1 \\<longrightarrow> False\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have card2: \"card X = 2 \\<longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card X = 2 \\<longrightarrow> False", "proof (rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. card X = 2 \\<Longrightarrow> False", "assume card_is_2: \"card X = 2\""], ["proof (state)\nthis:\n  card X = 2\n\ngoal (1 subgoal):\n 1. card X = 2 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  card X = 2", "have mn01: \"m = 0 \\<and> n = 1 \\<or> n = 0 \\<and> m = 1\""], ["proof (prove)\nusing this:\n  card X = 2\n\ngoal (1 subgoal):\n 1. m = 0 \\<and> n = 1 \\<or> n = 0 \\<and> m = 1", "using m_less_card n_less_card m_not_n"], ["proof (prove)\nusing this:\n  card X = 2\n  m < card X\n  n < card X\n  m \\<noteq> n\n\ngoal (1 subgoal):\n 1. m = 0 \\<and> n = 1 \\<or> n = 0 \\<and> m = 1", "by auto"], ["proof (state)\nthis:\n  m = 0 \\<and> n = 1 \\<or> n = 0 \\<and> m = 1\n\ngoal (1 subgoal):\n 1. card X = 2 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  m = 0 \\<and> n = 1 \\<or> n = 0 \\<and> m = 1", "have \"f m \\<noteq> f n\""], ["proof (prove)\nusing this:\n  m = 0 \\<and> n = 1 \\<or> n = 0 \\<and> m = 1\n\ngoal (1 subgoal):\n 1. f m \\<noteq> f n", "using card_is_2 surj_f One_nat_def card_eq_SucD insertCI\n                                  less_2_cases numeral_2_eq_2"], ["proof (prove)\nusing this:\n  m = 0 \\<and> n = 1 \\<or> n = 0 \\<and> m = 1\n  card X = 2\n  \\<forall>x\\<in>X. \\<exists>n<card X. f n = x\n  1 = Suc 0\n  card ?A = Suc ?k \\<Longrightarrow>\n  \\<exists>b B.\n     ?A = insert b B \\<and>\n     b \\<notin> B \\<and>\n     card B = ?k \\<and> (?k = 0 \\<longrightarrow> B = {})\n  (?a \\<notin> ?B \\<Longrightarrow> ?a = ?b) \\<Longrightarrow>\n  ?a \\<in> insert ?b ?B\n  ?n < 2 \\<Longrightarrow> ?n = 0 \\<or> ?n = Suc 0\n  2 = Suc (Suc 0)\n\ngoal (1 subgoal):\n 1. f m \\<noteq> f n", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  f m \\<noteq> f n\n\ngoal (1 subgoal):\n 1. card X = 2 \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  f m \\<noteq> f n\n\ngoal (1 subgoal):\n 1. False", "using f_eq"], ["proof (prove)\nusing this:\n  f m \\<noteq> f n\n  f m = f n\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card X = 2 \\<longrightarrow> False\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using card0 card1 card2 card_le2"], ["proof (prove)\nusing this:\n  card X = 0 \\<longrightarrow> False\n  card X = 1 \\<longrightarrow> False\n  card X = 2 \\<longrightarrow> False\n  card X \\<le> 2\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> card X \\<le> 2 \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> card X \\<le> 2 \\<Longrightarrow> False", "assume \"\\<not> card X \\<le> 2\""], ["proof (state)\nthis:\n  \\<not> card X \\<le> 2\n\ngoal (1 subgoal):\n 1. \\<not> card X \\<le> 2 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> card X \\<le> 2", "have card_ge3: \"card X \\<ge> 3\""], ["proof (prove)\nusing this:\n  \\<not> card X \\<le> 2\n\ngoal (1 subgoal):\n 1. 3 \\<le> card X", "by simp"], ["proof (state)\nthis:\n  3 \\<le> card X\n\ngoal (1 subgoal):\n 1. \\<not> card X \\<le> 2 \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  3 \\<le> card X\n\ngoal (1 subgoal):\n 1. False", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>3 \\<le> card X; ?P1\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>3 \\<le> card X; \\<not> ?P1\\<rbrakk> \\<Longrightarrow> False", "assume m_less_n: \"m < n\""], ["proof (state)\nthis:\n  m < n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>3 \\<le> card X; ?P1\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>3 \\<le> card X; \\<not> ?P1\\<rbrakk> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  m < n", "obtain k where k_pos: \"k < m \\<or> (m < k \\<and> k < n) \\<or> (n < k \\<and> k < card X)\""], ["proof (prove)\nusing this:\n  m < n\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        k < m \\<or>\n        m < k \\<and> k < n \\<or> n < k \\<and> k < card X \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using is_free_nat m_less_n n_less_card card_ge3"], ["proof (prove)\nusing this:\n  m < n\n  \\<lbrakk>?m < ?n; ?n < ?c; 3 \\<le> ?c\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k.\n                       k < ?m \\<or>\n                       ?m < k \\<and> k < ?n \\<or> ?n < k \\<and> k < ?c\n  m < n\n  n < card X\n  3 \\<le> card X\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        k < m \\<or>\n        m < k \\<and> k < n \\<or> n < k \\<and> k < card X \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k < m \\<or> m < k \\<and> k < n \\<or> n < k \\<and> k < card X\n\ngoal (2 subgoals):\n 1. \\<lbrakk>3 \\<le> card X; ?P1\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>3 \\<le> card X; \\<not> ?P1\\<rbrakk> \\<Longrightarrow> False", "have k1: \"k < m \\<longrightarrow>ord (f k) (f m) (f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < m \\<longrightarrow> ord (f k) (f m) (f n)", "using m_less_n n_less_card betw_3n"], ["proof (prove)\nusing this:\n  m < n\n  n < card X\n  \\<forall>n n' n''.\n     n'' < card X \\<and> n < n' \\<and> n' < n'' \\<longrightarrow>\n     ord (f n) (f n') (f n'')\n\ngoal (1 subgoal):\n 1. k < m \\<longrightarrow> ord (f k) (f m) (f n)", "by simp"], ["proof (state)\nthis:\n  k < m \\<longrightarrow> ord (f k) (f m) (f n)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>3 \\<le> card X; ?P1\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>3 \\<le> card X; \\<not> ?P1\\<rbrakk> \\<Longrightarrow> False", "have k2: \"m < k \\<and> k < n \\<longrightarrow> ord (f m) (f k) (f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < k \\<and> k < n \\<longrightarrow> ord (f m) (f k) (f n)", "using m_less_n n_less_card betw_3n"], ["proof (prove)\nusing this:\n  m < n\n  n < card X\n  \\<forall>n n' n''.\n     n'' < card X \\<and> n < n' \\<and> n' < n'' \\<longrightarrow>\n     ord (f n) (f n') (f n'')\n\ngoal (1 subgoal):\n 1. m < k \\<and> k < n \\<longrightarrow> ord (f m) (f k) (f n)", "by simp"], ["proof (state)\nthis:\n  m < k \\<and> k < n \\<longrightarrow> ord (f m) (f k) (f n)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>3 \\<le> card X; ?P1\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>3 \\<le> card X; \\<not> ?P1\\<rbrakk> \\<Longrightarrow> False", "have k3: \"n < k \\<and> k < card X \\<longrightarrow> ord (f m) (f n) (f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < k \\<and> k < card X \\<longrightarrow> ord (f m) (f n) (f k)", "using m_less_n betw_3n"], ["proof (prove)\nusing this:\n  m < n\n  \\<forall>n n' n''.\n     n'' < card X \\<and> n < n' \\<and> n' < n'' \\<longrightarrow>\n     ord (f n) (f n') (f n'')\n\ngoal (1 subgoal):\n 1. n < k \\<and> k < card X \\<longrightarrow> ord (f m) (f n) (f k)", "by simp"], ["proof (state)\nthis:\n  n < k \\<and> k < card X \\<longrightarrow> ord (f m) (f n) (f k)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>3 \\<le> card X; ?P1\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>3 \\<le> card X; \\<not> ?P1\\<rbrakk> \\<Longrightarrow> False", "have \"f m \\<noteq> f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f m \\<noteq> f n", "using k1 k2 k3 k_pos ord_distinct"], ["proof (prove)\nusing this:\n  k < m \\<longrightarrow> ord (f k) (f m) (f n)\n  m < k \\<and> k < n \\<longrightarrow> ord (f m) (f k) (f n)\n  n < k \\<and> k < card X \\<longrightarrow> ord (f m) (f n) (f k)\n  k < m \\<or> m < k \\<and> k < n \\<or> n < k \\<and> k < card X\n  \\<forall>a b c.\n     ord a b c \\<longrightarrow>\n     a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c\n\ngoal (1 subgoal):\n 1. f m \\<noteq> f n", "by auto"], ["proof (state)\nthis:\n  f m \\<noteq> f n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>3 \\<le> card X; ?P1\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>3 \\<le> card X; \\<not> ?P1\\<rbrakk> \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  f m \\<noteq> f n\n\ngoal (1 subgoal):\n 1. False", "using f_eq"], ["proof (prove)\nusing this:\n  f m \\<noteq> f n\n  f m = f n\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>3 \\<le> card X; \\<not> m < n\\<rbrakk> \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>3 \\<le> card X; \\<not> m < n\\<rbrakk> \\<Longrightarrow> False", "(* Should work on making these two cases into one; this is quite boilerplatery. *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>3 \\<le> card X; \\<not> m < n\\<rbrakk> \\<Longrightarrow> False", "assume \"\\<not> m < n\""], ["proof (state)\nthis:\n  \\<not> m < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>3 \\<le> card X; \\<not> m < n\\<rbrakk> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> m < n", "have n_less_m: \"n < m\""], ["proof (prove)\nusing this:\n  \\<not> m < n\n\ngoal (1 subgoal):\n 1. n < m", "using m_not_n"], ["proof (prove)\nusing this:\n  \\<not> m < n\n  m \\<noteq> n\n\ngoal (1 subgoal):\n 1. n < m", "by simp"], ["proof (state)\nthis:\n  n < m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>3 \\<le> card X; \\<not> m < n\\<rbrakk> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  n < m", "obtain k where k_pos: \"k < n \\<or> (n < k \\<and> k < m) \\<or> (m < k \\<and> k < card X)\""], ["proof (prove)\nusing this:\n  n < m\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        k < n \\<or>\n        n < k \\<and> k < m \\<or> m < k \\<and> k < card X \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using is_free_nat n_less_m m_less_card card_ge3"], ["proof (prove)\nusing this:\n  n < m\n  \\<lbrakk>?m < ?n; ?n < ?c; 3 \\<le> ?c\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k.\n                       k < ?m \\<or>\n                       ?m < k \\<and> k < ?n \\<or> ?n < k \\<and> k < ?c\n  n < m\n  m < card X\n  3 \\<le> card X\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        k < n \\<or>\n        n < k \\<and> k < m \\<or> m < k \\<and> k < card X \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k < n \\<or> n < k \\<and> k < m \\<or> m < k \\<and> k < card X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>3 \\<le> card X; \\<not> m < n\\<rbrakk> \\<Longrightarrow> False", "have k1: \"k < n \\<longrightarrow>ord (f k) (f n) (f m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < n \\<longrightarrow> ord (f k) (f n) (f m)", "using n_less_m m_less_card betw_3n"], ["proof (prove)\nusing this:\n  n < m\n  m < card X\n  \\<forall>n n' n''.\n     n'' < card X \\<and> n < n' \\<and> n' < n'' \\<longrightarrow>\n     ord (f n) (f n') (f n'')\n\ngoal (1 subgoal):\n 1. k < n \\<longrightarrow> ord (f k) (f n) (f m)", "by simp"], ["proof (state)\nthis:\n  k < n \\<longrightarrow> ord (f k) (f n) (f m)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>3 \\<le> card X; \\<not> m < n\\<rbrakk> \\<Longrightarrow> False", "have k2: \"n < k \\<and> k < m \\<longrightarrow> ord (f n) (f k) (f m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < k \\<and> k < m \\<longrightarrow> ord (f n) (f k) (f m)", "using n_less_m m_less_card betw_3n"], ["proof (prove)\nusing this:\n  n < m\n  m < card X\n  \\<forall>n n' n''.\n     n'' < card X \\<and> n < n' \\<and> n' < n'' \\<longrightarrow>\n     ord (f n) (f n') (f n'')\n\ngoal (1 subgoal):\n 1. n < k \\<and> k < m \\<longrightarrow> ord (f n) (f k) (f m)", "by simp"], ["proof (state)\nthis:\n  n < k \\<and> k < m \\<longrightarrow> ord (f n) (f k) (f m)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>3 \\<le> card X; \\<not> m < n\\<rbrakk> \\<Longrightarrow> False", "have k3: \"m < k \\<and> k < card X \\<longrightarrow> ord (f n) (f m) (f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < k \\<and> k < card X \\<longrightarrow> ord (f n) (f m) (f k)", "using n_less_m betw_3n"], ["proof (prove)\nusing this:\n  n < m\n  \\<forall>n n' n''.\n     n'' < card X \\<and> n < n' \\<and> n' < n'' \\<longrightarrow>\n     ord (f n) (f n') (f n'')\n\ngoal (1 subgoal):\n 1. m < k \\<and> k < card X \\<longrightarrow> ord (f n) (f m) (f k)", "by simp"], ["proof (state)\nthis:\n  m < k \\<and> k < card X \\<longrightarrow> ord (f n) (f m) (f k)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>3 \\<le> card X; \\<not> m < n\\<rbrakk> \\<Longrightarrow> False", "have \"f n \\<noteq> f m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n \\<noteq> f m", "using k1 k2 k3 k_pos ord_distinct"], ["proof (prove)\nusing this:\n  k < n \\<longrightarrow> ord (f k) (f n) (f m)\n  n < k \\<and> k < m \\<longrightarrow> ord (f n) (f k) (f m)\n  m < k \\<and> k < card X \\<longrightarrow> ord (f n) (f m) (f k)\n  k < n \\<or> n < k \\<and> k < m \\<or> m < k \\<and> k < card X\n  \\<forall>a b c.\n     ord a b c \\<longrightarrow>\n     a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c\n\ngoal (1 subgoal):\n 1. f n \\<noteq> f m", "by auto"], ["proof (state)\nthis:\n  f n \\<noteq> f m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>3 \\<le> card X; \\<not> m < n\\<rbrakk> \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  f n \\<noteq> f m\n\ngoal (1 subgoal):\n 1. False", "using f_eq"], ["proof (prove)\nusing this:\n  f n \\<noteq> f m\n  f m = f n\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ordering_inj:\n  assumes \"ordering f ord X\"\n      and \"\\<forall>a b c. (ord a b c \\<longrightarrow> a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c)\"\n      and \"finite X \\<longrightarrow> m < card X\"\n      and \"finite X \\<longrightarrow> n < card X\"\n      and \"f m = f n\"\n  shows \"m = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = n", "using inf_ordering_inj' finite_ordering_inj assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>infinite ?X; TernaryOrdering.ordering ?f ?ord ?X;\n   \\<forall>a b c.\n      ?ord a b c \\<longrightarrow>\n      a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c;\n   ?f ?m = ?f ?n\\<rbrakk>\n  \\<Longrightarrow> ?m = ?n\n  \\<lbrakk>finite ?X; TernaryOrdering.ordering ?f ?ord ?X;\n   \\<forall>a b c.\n      ?ord a b c \\<longrightarrow>\n      a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c;\n   ?m < card ?X; ?n < card ?X; ?f ?m = ?f ?n\\<rbrakk>\n  \\<Longrightarrow> ?m = ?n\n  TernaryOrdering.ordering f ord X\n  \\<forall>a b c.\n     ord a b c \\<longrightarrow>\n     a \\<noteq> b \\<and> a \\<noteq> c \\<and> b \\<noteq> c\n  finite X \\<longrightarrow> m < card X\n  finite X \\<longrightarrow> n < card X\n  f m = f n\n\ngoal (1 subgoal):\n 1. m = n", "by blast"], ["", "lemma ordering_sym:\n  assumes ord_sym: \"\\<And>a b c. ord a b c \\<Longrightarrow> ord c b a\"\n      and \"finite X\"\n      and \"ordering f ord X\"\n  shows \"ordering (\\<lambda>n. f (card X - 1 - n)) ord X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TernaryOrdering.ordering (\\<lambda>n. f (card X - 1 - n)) ord X", "unfolding ordering_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n.\n        (finite X \\<longrightarrow> n < card X) \\<longrightarrow>\n        f (card X - 1 - n) \\<in> X) \\<and>\n    (\\<forall>x\\<in>X.\n        \\<exists>n.\n           (finite X \\<longrightarrow> n < card X) \\<and>\n           f (card X - 1 - n) = x) \\<and>\n    (\\<forall>n n' n''.\n        (finite X \\<longrightarrow> n'' < card X) \\<and>\n        n < n' \\<and> n' < n'' \\<longrightarrow>\n        ord (f (card X - 1 - n)) (f (card X - 1 - n'))\n         (f (card X - 1 - n'')))", "using assms(2)"], ["proof (prove)\nusing this:\n  finite X\n\ngoal (1 subgoal):\n 1. (\\<forall>n.\n        (finite X \\<longrightarrow> n < card X) \\<longrightarrow>\n        f (card X - 1 - n) \\<in> X) \\<and>\n    (\\<forall>x\\<in>X.\n        \\<exists>n.\n           (finite X \\<longrightarrow> n < card X) \\<and>\n           f (card X - 1 - n) = x) \\<and>\n    (\\<forall>n n' n''.\n        (finite X \\<longrightarrow> n'' < card X) \\<and>\n        n < n' \\<and> n' < n'' \\<longrightarrow>\n        ord (f (card X - 1 - n)) (f (card X - 1 - n'))\n         (f (card X - 1 - n'')))", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>finite X; n < card X\\<rbrakk>\n       \\<Longrightarrow> f (card X - Suc n) \\<in> X\n 2. \\<And>x.\n       \\<lbrakk>finite X; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n<card X. f (card X - Suc n) = x\n 3. \\<And>n n' n''.\n       \\<lbrakk>finite X; n'' < card X; n < n'; n' < n''\\<rbrakk>\n       \\<Longrightarrow> ord (f (card X - Suc n)) (f (card X - Suc n'))\n                          (f (card X - Suc n''))", "apply (metis ordering_def assms(3) card_0_eq card_gt_0_iff diff_Suc_less gr_implies_not0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite X; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n<card X. f (card X - Suc n) = x\n 2. \\<And>n n' n''.\n       \\<lbrakk>finite X; n'' < card X; n < n'; n' < n''\\<rbrakk>\n       \\<Longrightarrow> ord (f (card X - Suc n)) (f (card X - Suc n'))\n                          (f (card X - Suc n''))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite X; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n<card X. f (card X - Suc n) = x\n 2. \\<And>n n' n''.\n       \\<lbrakk>finite X; n'' < card X; n < n'; n' < n''\\<rbrakk>\n       \\<Longrightarrow> ord (f (card X - Suc n)) (f (card X - Suc n'))\n                          (f (card X - Suc n''))", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite X; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n<card X. f (card X - Suc n) = x\n 2. \\<And>n n' n''.\n       \\<lbrakk>finite X; n'' < card X; n < n'; n' < n''\\<rbrakk>\n       \\<Longrightarrow> ord (f (card X - Suc n)) (f (card X - Suc n'))\n                          (f (card X - Suc n''))", "assume \"finite X\""], ["proof (state)\nthis:\n  finite X\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite X; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n<card X. f (card X - Suc n) = x\n 2. \\<And>n n' n''.\n       \\<lbrakk>finite X; n'' < card X; n < n'; n' < n''\\<rbrakk>\n       \\<Longrightarrow> ord (f (card X - Suc n)) (f (card X - Suc n'))\n                          (f (card X - Suc n''))", "assume \"x \\<in> X\""], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite X; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n<card X. f (card X - Suc n) = x\n 2. \\<And>n n' n''.\n       \\<lbrakk>finite X; n'' < card X; n < n'; n' < n''\\<rbrakk>\n       \\<Longrightarrow> ord (f (card X - Suc n)) (f (card X - Suc n'))\n                          (f (card X - Suc n''))", "obtain n where \"finite X \\<longrightarrow> n < card X\" and \"f n = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>finite X \\<longrightarrow> n < card X; f n = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis ordering_def \\<open>x \\<in> X\\<close> assms(3))"], ["proof (state)\nthis:\n  finite X \\<longrightarrow> n < card X\n  f n = x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite X; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n<card X. f (card X - Suc n) = x\n 2. \\<And>n n' n''.\n       \\<lbrakk>finite X; n'' < card X; n < n'; n' < n''\\<rbrakk>\n       \\<Longrightarrow> ord (f (card X - Suc n)) (f (card X - Suc n'))\n                          (f (card X - Suc n''))", "have \"f (card X - ((card X - 1 - n) + 1)) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (card X - (card X - 1 - n + 1)) = x", "by (simp add: Suc_leI \\<open>f n = x\\<close> \\<open>finite X \\<longrightarrow> n < card X\\<close> assms(2))"], ["proof (state)\nthis:\n  f (card X - (card X - 1 - n + 1)) = x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite X; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n<card X. f (card X - Suc n) = x\n 2. \\<And>n n' n''.\n       \\<lbrakk>finite X; n'' < card X; n < n'; n' < n''\\<rbrakk>\n       \\<Longrightarrow> ord (f (card X - Suc n)) (f (card X - Suc n'))\n                          (f (card X - Suc n''))", "thus \"\\<exists>n<card X. f (card X - Suc n) = x\""], ["proof (prove)\nusing this:\n  f (card X - (card X - 1 - n + 1)) = x\n\ngoal (1 subgoal):\n 1. \\<exists>n<card X. f (card X - Suc n) = x", "by (metis \\<open>x \\<in> X\\<close> add.commute assms(2) card_Diff_singleton card_Suc_Diff1 diff_less_Suc plus_1_eq_Suc)"], ["proof (state)\nthis:\n  \\<exists>n<card X. f (card X - Suc n) = x\n\ngoal (1 subgoal):\n 1. \\<And>n n' n''.\n       \\<lbrakk>finite X; n'' < card X; n < n'; n' < n''\\<rbrakk>\n       \\<Longrightarrow> ord (f (card X - Suc n)) (f (card X - Suc n'))\n                          (f (card X - Suc n''))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n n' n''.\n       \\<lbrakk>finite X; n'' < card X; n < n'; n' < n''\\<rbrakk>\n       \\<Longrightarrow> ord (f (card X - Suc n)) (f (card X - Suc n'))\n                          (f (card X - Suc n''))", "fix n n' n''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n n' n''.\n       \\<lbrakk>finite X; n'' < card X; n < n'; n' < n''\\<rbrakk>\n       \\<Longrightarrow> ord (f (card X - Suc n)) (f (card X - Suc n'))\n                          (f (card X - Suc n''))", "assume \"finite X\""], ["proof (state)\nthis:\n  finite X\n\ngoal (1 subgoal):\n 1. \\<And>n n' n''.\n       \\<lbrakk>finite X; n'' < card X; n < n'; n' < n''\\<rbrakk>\n       \\<Longrightarrow> ord (f (card X - Suc n)) (f (card X - Suc n'))\n                          (f (card X - Suc n''))", "assume \"n'' < card X\" \"n < n'\" \"n' < n''\""], ["proof (state)\nthis:\n  n'' < card X\n  n < n'\n  n' < n''\n\ngoal (1 subgoal):\n 1. \\<And>n n' n''.\n       \\<lbrakk>finite X; n'' < card X; n < n'; n' < n''\\<rbrakk>\n       \\<Longrightarrow> ord (f (card X - Suc n)) (f (card X - Suc n'))\n                          (f (card X - Suc n''))", "have \"ord (f (card X - Suc n'')) (f (card X - Suc n')) (f (card X - Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord (f (card X - Suc n'')) (f (card X - Suc n')) (f (card X - Suc n))", "using assms(3)"], ["proof (prove)\nusing this:\n  TernaryOrdering.ordering f ord X\n\ngoal (1 subgoal):\n 1. ord (f (card X - Suc n'')) (f (card X - Suc n')) (f (card X - Suc n))", "unfolding ordering_def"], ["proof (prove)\nusing this:\n  (\\<forall>n.\n      (finite X \\<longrightarrow> n < card X) \\<longrightarrow>\n      f n \\<in> X) \\<and>\n  (\\<forall>x\\<in>X.\n      \\<exists>n.\n         (finite X \\<longrightarrow> n < card X) \\<and> f n = x) \\<and>\n  (\\<forall>n n' n''.\n      (finite X \\<longrightarrow> n'' < card X) \\<and>\n      n < n' \\<and> n' < n'' \\<longrightarrow>\n      ord (f n) (f n') (f n''))\n\ngoal (1 subgoal):\n 1. ord (f (card X - Suc n'')) (f (card X - Suc n')) (f (card X - Suc n))", "using \\<open>n < n'\\<close> \\<open>n' < n''\\<close> \\<open>n'' < card X\\<close> diff_less_mono2"], ["proof (prove)\nusing this:\n  (\\<forall>n.\n      (finite X \\<longrightarrow> n < card X) \\<longrightarrow>\n      f n \\<in> X) \\<and>\n  (\\<forall>x\\<in>X.\n      \\<exists>n.\n         (finite X \\<longrightarrow> n < card X) \\<and> f n = x) \\<and>\n  (\\<forall>n n' n''.\n      (finite X \\<longrightarrow> n'' < card X) \\<and>\n      n < n' \\<and> n' < n'' \\<longrightarrow>\n      ord (f n) (f n') (f n''))\n  n < n'\n  n' < n''\n  n'' < card X\n  \\<lbrakk>?m < ?n; ?m < ?l\\<rbrakk> \\<Longrightarrow> ?l - ?n < ?l - ?m\n\ngoal (1 subgoal):\n 1. ord (f (card X - Suc n'')) (f (card X - Suc n')) (f (card X - Suc n))", "by auto"], ["proof (state)\nthis:\n  ord (f (card X - Suc n'')) (f (card X - Suc n')) (f (card X - Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n n' n''.\n       \\<lbrakk>finite X; n'' < card X; n < n'; n' < n''\\<rbrakk>\n       \\<Longrightarrow> ord (f (card X - Suc n)) (f (card X - Suc n'))\n                          (f (card X - Suc n''))", "thus \" ord (f (card X - Suc n)) (f (card X - Suc n')) (f (card X - Suc n''))\""], ["proof (prove)\nusing this:\n  ord (f (card X - Suc n'')) (f (card X - Suc n')) (f (card X - Suc n))\n\ngoal (1 subgoal):\n 1. ord (f (card X - Suc n)) (f (card X - Suc n')) (f (card X - Suc n''))", "using ord_sym"], ["proof (prove)\nusing this:\n  ord (f (card X - Suc n'')) (f (card X - Suc n')) (f (card X - Suc n))\n  ord ?a ?b ?c \\<Longrightarrow> ord ?c ?b ?a\n\ngoal (1 subgoal):\n 1. ord (f (card X - Suc n)) (f (card X - Suc n')) (f (card X - Suc n''))", "by blast"], ["proof (state)\nthis:\n  ord (f (card X - Suc n)) (f (card X - Suc n')) (f (card X - Suc n''))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  zero_into_ordering:\n  assumes \"ordering f betw X\"\n  and \"X \\<noteq> {}\"\n  shows \"(f 0) \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 \\<in> X", "using ordering_def"], ["proof (prove)\nusing this:\n  TernaryOrdering.ordering ?f ?ord ?X \\<equiv>\n  (\\<forall>n.\n      (finite ?X \\<longrightarrow> n < card ?X) \\<longrightarrow>\n      ?f n \\<in> ?X) \\<and>\n  (\\<forall>x\\<in>?X.\n      \\<exists>n.\n         (finite ?X \\<longrightarrow> n < card ?X) \\<and> ?f n = x) \\<and>\n  (\\<forall>n n' n''.\n      (finite ?X \\<longrightarrow> n'' < card ?X) \\<and>\n      n < n' \\<and> n' < n'' \\<longrightarrow>\n      ?ord (?f n) (?f n') (?f n''))\n\ngoal (1 subgoal):\n 1. f 0 \\<in> X", "by (metis assms card_eq_0_iff gr_implies_not0 linorder_neqE_nat)"], ["", "section \"Locally ordered chains\""], ["", "text \\<open>Definitions for Schutz-like chains, with local order only.\\<close>"], ["", "definition ordering2 :: \"(nat \\<Rightarrow> 'a) \\<Rightarrow> ('a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> bool) \\<Rightarrow> 'a set \\<Rightarrow> bool\" where\n  \"ordering2 f ord X \\<equiv> (\\<forall>n. (finite X \\<longrightarrow> n < card X) \\<longrightarrow> f n \\<in> X)\n                     \\<and> (\\<forall>x\\<in>X. (\\<exists>n. (finite X \\<longrightarrow> n < card X) \\<and> f n = x))\n                     \\<and> (\\<forall>n n' n''. (finite X \\<longrightarrow> n'' < card X) \\<and> Suc n = n' \\<and> Suc n' = n''\n                                   \\<longrightarrow> ord (f n) (f n') (f n''))\""], ["", "text \\<open>Analogue to \\<open>ordering_ord_ijk\\<close>, which is quicker to use in sledgehammer than the definition.\\<close>"], ["", "lemma ordering2_ord_ijk:\n  assumes \"ordering2 f ord X\"\n      and \"Suc i = j \\<and> Suc j = k \\<and> (finite X \\<longrightarrow> k < card X)\"\n  shows \"ord (f i) (f j) (f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord (f i) (f j) (f k)", "by (metis ordering2_def assms)"], ["", "end"]]}