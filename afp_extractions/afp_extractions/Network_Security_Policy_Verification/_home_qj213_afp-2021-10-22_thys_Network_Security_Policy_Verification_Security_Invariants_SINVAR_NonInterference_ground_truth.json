{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_NonInterference.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma undirected_reachable_mono:\n  \"E' \\<subseteq> E \\<Longrightarrow> undirected_reachable \\<lparr>nodes = N, edges = E'\\<rparr> n \\<subseteq> undirected_reachable \\<lparr>nodes = N, edges = E\\<rparr> n\"", "lemma \"sinvar G nP \\<longleftrightarrow> \n  (\\<forall> n \\<in> {v' \\<in> (nodes G). (nP v') = Interfering}. {nP v' | v'. v' \\<in> undirected_reachable G n} \\<subseteq> {Unrelated})\"", "lemma tmp1: \"{(b, a). a = vertex_1 \\<and> b = vertex_2} = {(vertex_2, vertex_1)}\"", "lemma tmp6: \"{(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<^sup>+ = \n    {(vertex_1, vertex_1), (vertex_2, vertex_2), (vertex_1, vertex_2), (vertex_2, vertex_1)}\"", "lemma tmp2: \"(insert (vertex_1, vertex_2) {(b, a). a = vertex_1 \\<and> b = vertex_2})\\<^sup>+ = \n    {(vertex_1, vertex_1), (vertex_2, vertex_2), (vertex_1, vertex_2), (vertex_2, vertex_1)}\"", "lemma tmp4: \"{(e1, e2). e1 = vertex_1 \\<and> e2 = vertex_2 \\<and> (e1 = vertex_1 \\<longrightarrow> e2 \\<noteq> vertex_2)} = {}\"", "lemma tmp5: \"{(b, a). a = vertex_1 \\<and> b = vertex_2 \\<or> a = vertex_1 \\<and> b = vertex_2 \\<and> (a = vertex_1 \\<longrightarrow> b \\<noteq> vertex_2)} = \n    {(vertex_2, vertex_1)}\"", "lemma unique_default_example: \"undirected_reachable \\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr> vertex_1 = {vertex_2}\"", "lemma unique_default_example_hlp1: \"delete_edges \\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr> {(vertex_1, vertex_2)} = \n    \\<lparr>nodes = {vertex_1, vertex_2}, edges = {}\\<rparr>\"", "lemma unique_default_example_2: \n    \"undirected_reachable (delete_edges \\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr> {(vertex_1,vertex_2 )}) vertex_1 = {}\"", "lemma unique_default_example_3: \n    \"undirected_reachable (delete_edges \\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr> {(vertex_1,vertex_2 )}) vertex_2 = {}\"", "lemma unique_default_example_4: \n    \"(undirected_reachable (add_edge vertex_1 vertex_2 (delete_edges \\<lparr>nodes = {vertex_1, vertex_2}, \n    edges = {(vertex_1, vertex_2)}\\<rparr> {(vertex_1, vertex_2)})) vertex_1) = {vertex_2}\"", "lemma unique_default_example_5: \n    \"(undirected_reachable (add_edge vertex_1 vertex_2 (delete_edges \\<lparr>nodes = {vertex_1, vertex_2}, \n    edges = {(vertex_1, vertex_2)}\\<rparr> {(vertex_1, vertex_2)})) vertex_2) = {vertex_1}\"", "lemma empty_undirected_reachable_false: \"xb \\<in> undirected_reachable (delete_edges G (edges G)) na \\<longleftrightarrow> False\"", "lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\"", "lemma TopoS_NonInterference: \"SecurityInvariant sinvar default_node_properties receiver_violation\""], "translations": [["", "lemma undirected_reachable_mono:\n  \"E' \\<subseteq> E \\<Longrightarrow> undirected_reachable \\<lparr>nodes = N, edges = E'\\<rparr> n \\<subseteq> undirected_reachable \\<lparr>nodes = N, edges = E\\<rparr> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E' \\<subseteq> E \\<Longrightarrow>\n    undirected_reachable \\<lparr>nodes = N, edges = E'\\<rparr> n\n    \\<subseteq> undirected_reachable \\<lparr>nodes = N, edges = E\\<rparr> n", "unfolding undirected_reachable_def undirected_def succ_tran_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. E' \\<subseteq> E \\<Longrightarrow>\n    {e2.\n     (n, e2)\n     \\<in> (edges\n             \\<lparr>nodes = nodes \\<lparr>nodes = N, edges = E'\\<rparr>,\n                edges =\n                  edges \\<lparr>nodes = N, edges = E'\\<rparr> \\<union>\n                  {(b, a).\n                   (a, b)\n                   \\<in> edges\n                          \\<lparr>nodes = N,\n                             edges = E'\\<rparr>}\\<rparr>)\\<^sup>+} -\n    {n}\n    \\<subseteq> {e2.\n                 (n, e2)\n                 \\<in> (edges\n                         \\<lparr>nodes =\n                                   nodes\n                                    \\<lparr>nodes = N, edges = E\\<rparr>,\n                            edges =\n                              edges\n                               \\<lparr>nodes = N, edges = E\\<rparr> \\<union>\n                              {(b, a).\n                               (a, b)\n                               \\<in> edges\n\\<lparr>nodes = N, edges = E\\<rparr>}\\<rparr>)\\<^sup>+} -\n                {n}", "by (fastforce intro: trancl_mono)"], ["", "fun sinvar :: \"'v graph \\<Rightarrow> ('v \\<Rightarrow> node_config) \\<Rightarrow> bool\" where\n  \"sinvar G nP = (\\<forall> n \\<in> (nodes G). (nP n) = Interfering \\<longrightarrow> (nP ` (undirected_reachable G n)) \\<subseteq> {Unrelated})\""], ["", "lemma \"sinvar G nP \\<longleftrightarrow> \n  (\\<forall> n \\<in> {v' \\<in> (nodes G). (nP v') = Interfering}. {nP v' | v'. v' \\<in> undirected_reachable G n} \\<subseteq> {Unrelated})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar G nP =\n    (\\<forall>n\\<in>{v' \\<in> nodes G. nP v' = Interfering}.\n        {nP v' |v'. v' \\<in> undirected_reachable G n}\n        \\<subseteq> {Unrelated})", "by auto"], ["", "definition receiver_violation :: \"bool\" where \n  \"receiver_violation = True\""], ["", "text\\<open>simplifications for sets we need in the uniqueness proof\\<close>"], ["", "lemma tmp1: \"{(b, a). a = vertex_1 \\<and> b = vertex_2} = {(vertex_2, vertex_1)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(b, a). a = vertex_1 \\<and> b = vertex_2} = {(vertex_2, vertex_1)}", "by auto"], ["", "lemma tmp6: \"{(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<^sup>+ = \n    {(vertex_1, vertex_1), (vertex_2, vertex_2), (vertex_1, vertex_2), (vertex_2, vertex_1)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<^sup>+ =\n    {(vertex_1, vertex_1), (vertex_2, vertex_2), (vertex_1, vertex_2),\n     (vertex_2, vertex_1)}", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<^sup>+\n    \\<subseteq> {(vertex_1, vertex_1), (vertex_2, vertex_2),\n                 (vertex_1, vertex_2), (vertex_2, vertex_1)}\n 2. {(vertex_1, vertex_1), (vertex_2, vertex_2), (vertex_1, vertex_2),\n     (vertex_2, vertex_1)}\n    \\<subseteq> {(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<^sup>+", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {(vertex_1, vertex_2),\n                (vertex_2, vertex_1)}\\<^sup>+ \\<Longrightarrow>\n       x \\<in> {(vertex_1, vertex_1), (vertex_2, vertex_2),\n                (vertex_1, vertex_2), (vertex_2, vertex_1)}\n 2. {(vertex_1, vertex_1), (vertex_2, vertex_2), (vertex_1, vertex_2),\n     (vertex_2, vertex_1)}\n    \\<subseteq> {(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<^sup>+", "apply(case_tac x, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a b.\n       \\<lbrakk>(a, b)\n                \\<in> {(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<^sup>+;\n        x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> a = vertex_1 \\<and> b = vertex_1 \\<or>\n                         a = vertex_2 \\<and> b = vertex_2 \\<or>\n                         a = vertex_1 \\<and> b = vertex_2 \\<or>\n                         a = vertex_2 \\<and> b = vertex_1\n 2. {(vertex_1, vertex_1), (vertex_2, vertex_2), (vertex_1, vertex_2),\n     (vertex_2, vertex_1)}\n    \\<subseteq> {(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<^sup>+", "apply(erule_tac r=\"{(vertex_1, vertex_2), (vertex_2, vertex_1)}\" in trancl_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x a b y.\n       \\<lbrakk>x = (a, b);\n        (a, y) \\<in> {(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<rbrakk>\n       \\<Longrightarrow> a = vertex_1 \\<and> y = vertex_1 \\<or>\n                         a = vertex_2 \\<and> y = vertex_2 \\<or>\n                         a = vertex_1 \\<and> y = vertex_2 \\<or>\n                         a = vertex_2 \\<and> y = vertex_1\n 2. \\<And>x a b y z.\n       \\<lbrakk>x = (a, b);\n        (a, y) \\<in> {(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<^sup>+;\n        (y, z) \\<in> {(vertex_1, vertex_2), (vertex_2, vertex_1)};\n        a = vertex_1 \\<and> y = vertex_1 \\<or>\n        a = vertex_2 \\<and> y = vertex_2 \\<or>\n        a = vertex_1 \\<and> y = vertex_2 \\<or>\n        a = vertex_2 \\<and> y = vertex_1\\<rbrakk>\n       \\<Longrightarrow> a = vertex_1 \\<and> z = vertex_1 \\<or>\n                         a = vertex_2 \\<and> z = vertex_2 \\<or>\n                         a = vertex_1 \\<and> z = vertex_2 \\<or>\n                         a = vertex_2 \\<and> z = vertex_1\n 3. {(vertex_1, vertex_1), (vertex_2, vertex_2), (vertex_1, vertex_2),\n     (vertex_2, vertex_1)}\n    \\<subseteq> {(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<^sup>+", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (vertex_1, vertex_1)\n    \\<in> {(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<^sup>+\n 2. (vertex_2, vertex_2)\n    \\<in> {(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<^sup>+", "apply (metis (mono_tags) insertCI r_r_into_trancl)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma tmp2: \"(insert (vertex_1, vertex_2) {(b, a). a = vertex_1 \\<and> b = vertex_2})\\<^sup>+ = \n    {(vertex_1, vertex_1), (vertex_2, vertex_2), (vertex_1, vertex_2), (vertex_2, vertex_1)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (insert (vertex_1, vertex_2)\n      {(b, a). a = vertex_1 \\<and> b = vertex_2})\\<^sup>+ =\n    {(vertex_1, vertex_1), (vertex_2, vertex_2), (vertex_1, vertex_2),\n     (vertex_2, vertex_1)}", "apply(subst tmp1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<^sup>+ =\n    {(vertex_1, vertex_1), (vertex_2, vertex_2), (vertex_1, vertex_2),\n     (vertex_2, vertex_1)}", "apply(fact tmp6)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma tmp4: \"{(e1, e2). e1 = vertex_1 \\<and> e2 = vertex_2 \\<and> (e1 = vertex_1 \\<longrightarrow> e2 \\<noteq> vertex_2)} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(e1, e2).\n     e1 = vertex_1 \\<and>\n     e2 = vertex_2 \\<and>\n     (e1 = vertex_1 \\<longrightarrow> e2 \\<noteq> vertex_2)} =\n    {}", "by blast"], ["", "lemma tmp5: \"{(b, a). a = vertex_1 \\<and> b = vertex_2 \\<or> a = vertex_1 \\<and> b = vertex_2 \\<and> (a = vertex_1 \\<longrightarrow> b \\<noteq> vertex_2)} = \n    {(vertex_2, vertex_1)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(b, a).\n     a = vertex_1 \\<and> b = vertex_2 \\<or>\n     a = vertex_1 \\<and>\n     b = vertex_2 \\<and>\n     (a = vertex_1 \\<longrightarrow> b \\<noteq> vertex_2)} =\n    {(vertex_2, vertex_1)}", "by fastforce"], ["", "lemma unique_default_example: \"undirected_reachable \\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr> vertex_1 = {vertex_2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. undirected_reachable\n     \\<lparr>nodes = {vertex_1, vertex_2},\n        edges = {(vertex_1, vertex_2)}\\<rparr>\n     vertex_1 =\n    {vertex_2}", "by(auto simp add: undirected_def undirected_reachable_def succ_tran_def tmp2)"], ["", "lemma unique_default_example_hlp1: \"delete_edges \\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr> {(vertex_1, vertex_2)} = \n    \\<lparr>nodes = {vertex_1, vertex_2}, edges = {}\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delete_edges\n     \\<lparr>nodes = {vertex_1, vertex_2},\n        edges = {(vertex_1, vertex_2)}\\<rparr>\n     {(vertex_1, vertex_2)} =\n    \\<lparr>nodes = {vertex_1, vertex_2}, edges = {}\\<rparr>", "by(simp add: delete_edges_def)"], ["", "lemma unique_default_example_2: \n    \"undirected_reachable (delete_edges \\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr> {(vertex_1,vertex_2 )}) vertex_1 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. undirected_reachable\n     (delete_edges\n       \\<lparr>nodes = {vertex_1, vertex_2},\n          edges = {(vertex_1, vertex_2)}\\<rparr>\n       {(vertex_1, vertex_2)})\n     vertex_1 =\n    {}", "by(simp add: undirected_def undirected_reachable_def succ_tran_def unique_default_example_hlp1)"], ["", "lemma unique_default_example_3: \n    \"undirected_reachable (delete_edges \\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr> {(vertex_1,vertex_2 )}) vertex_2 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. undirected_reachable\n     (delete_edges\n       \\<lparr>nodes = {vertex_1, vertex_2},\n          edges = {(vertex_1, vertex_2)}\\<rparr>\n       {(vertex_1, vertex_2)})\n     vertex_2 =\n    {}", "by(simp add: undirected_def undirected_reachable_def succ_tran_def unique_default_example_hlp1)"], ["", "lemma unique_default_example_4: \n    \"(undirected_reachable (add_edge vertex_1 vertex_2 (delete_edges \\<lparr>nodes = {vertex_1, vertex_2}, \n    edges = {(vertex_1, vertex_2)}\\<rparr> {(vertex_1, vertex_2)})) vertex_1) = {vertex_2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. undirected_reachable\n     (add_edge vertex_1 vertex_2\n       (delete_edges\n         \\<lparr>nodes = {vertex_1, vertex_2},\n            edges = {(vertex_1, vertex_2)}\\<rparr>\n         {(vertex_1, vertex_2)}))\n     vertex_1 =\n    {vertex_2}", "apply(simp add: delete_edges_def add_edge_def undirected_def undirected_reachable_def succ_tran_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {e2.\n     (vertex_1, e2)\n     \\<in> (insert (vertex_1, vertex_2)\n             ({(e1, e2).\n               e1 = vertex_1 \\<and>\n               e2 = vertex_2 \\<and>\n               (e1 = vertex_1 \\<longrightarrow>\n                e2 \\<noteq> vertex_2)} \\<union>\n              {(b, a).\n               a = vertex_1 \\<and> b = vertex_2 \\<or>\n               a = vertex_1 \\<and>\n               b = vertex_2 \\<and>\n               (a = vertex_1 \\<longrightarrow>\n                b \\<noteq> vertex_2)}))\\<^sup>+} -\n    {vertex_1} =\n    {vertex_2}", "apply(subst tmp4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {e2.\n     (vertex_1, e2)\n     \\<in> (insert (vertex_1, vertex_2)\n             ({} \\<union>\n              {(b, a).\n               a = vertex_1 \\<and> b = vertex_2 \\<or>\n               a = vertex_1 \\<and>\n               b = vertex_2 \\<and>\n               (a = vertex_1 \\<longrightarrow>\n                b \\<noteq> vertex_2)}))\\<^sup>+} -\n    {vertex_1} =\n    {vertex_2}", "apply(subst tmp5)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {e2.\n     (vertex_1, e2)\n     \\<in> (insert (vertex_1, vertex_2)\n             ({} \\<union> {(vertex_2, vertex_1)}))\\<^sup>+} -\n    {vertex_1} =\n    {vertex_2}", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {e2.\n     (vertex_1, e2)\n     \\<in> {(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<^sup>+} -\n    {vertex_1} =\n    {vertex_2}", "apply(subst tmp6)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {e2.\n     (vertex_1, e2)\n     \\<in> {(vertex_1, vertex_1), (vertex_2, vertex_2),\n            (vertex_1, vertex_2), (vertex_2, vertex_1)}} -\n    {vertex_1} =\n    {vertex_2}", "by force"], ["", "lemma unique_default_example_5: \n    \"(undirected_reachable (add_edge vertex_1 vertex_2 (delete_edges \\<lparr>nodes = {vertex_1, vertex_2}, \n    edges = {(vertex_1, vertex_2)}\\<rparr> {(vertex_1, vertex_2)})) vertex_2) = {vertex_1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. undirected_reachable\n     (add_edge vertex_1 vertex_2\n       (delete_edges\n         \\<lparr>nodes = {vertex_1, vertex_2},\n            edges = {(vertex_1, vertex_2)}\\<rparr>\n         {(vertex_1, vertex_2)}))\n     vertex_2 =\n    {vertex_1}", "apply(simp add: delete_edges_def add_edge_def undirected_def undirected_reachable_def succ_tran_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {e2.\n     (vertex_2, e2)\n     \\<in> (insert (vertex_1, vertex_2)\n             ({(e1, e2).\n               e1 = vertex_1 \\<and>\n               e2 = vertex_2 \\<and>\n               (e1 = vertex_1 \\<longrightarrow>\n                e2 \\<noteq> vertex_2)} \\<union>\n              {(b, a).\n               a = vertex_1 \\<and> b = vertex_2 \\<or>\n               a = vertex_1 \\<and>\n               b = vertex_2 \\<and>\n               (a = vertex_1 \\<longrightarrow>\n                b \\<noteq> vertex_2)}))\\<^sup>+} -\n    {vertex_2} =\n    {vertex_1}", "apply(subst tmp4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {e2.\n     (vertex_2, e2)\n     \\<in> (insert (vertex_1, vertex_2)\n             ({} \\<union>\n              {(b, a).\n               a = vertex_1 \\<and> b = vertex_2 \\<or>\n               a = vertex_1 \\<and>\n               b = vertex_2 \\<and>\n               (a = vertex_1 \\<longrightarrow>\n                b \\<noteq> vertex_2)}))\\<^sup>+} -\n    {vertex_2} =\n    {vertex_1}", "apply(subst tmp5)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {e2.\n     (vertex_2, e2)\n     \\<in> (insert (vertex_1, vertex_2)\n             ({} \\<union> {(vertex_2, vertex_1)}))\\<^sup>+} -\n    {vertex_2} =\n    {vertex_1}", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {e2.\n     (vertex_2, e2)\n     \\<in> {(vertex_1, vertex_2), (vertex_2, vertex_1)}\\<^sup>+} -\n    {vertex_2} =\n    {vertex_1}", "apply(subst tmp6)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {e2.\n     (vertex_2, e2)\n     \\<in> {(vertex_1, vertex_1), (vertex_2, vertex_2),\n            (vertex_1, vertex_2), (vertex_2, vertex_1)}} -\n    {vertex_2} =\n    {vertex_1}", "by force"], ["", "(*lemma empty_undirected_reachable_false: \"xb \\<in> undirected_reachable \\<lparr>nodes = nodes G, edges = {(e1, e2). False}\\<rparr> na \\<longleftrightarrow> False\"\n    apply(simp add: undirected_reachable_def succ_tran_def undirected_def)\n    apply(subst tmp3)\n    by fastforce*)"], ["", "lemma empty_undirected_reachable_false: \"xb \\<in> undirected_reachable (delete_edges G (edges G)) na \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xb \\<in> undirected_reachable (delete_edges G (edges G)) na) = False", "by(simp add: undirected_reachable_def succ_tran_def undirected_def delete_edges_edges_empty)"], ["", "subsubsection\\<open>monotonic and preliminaries\\<close>"], ["", "lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_mono sinvar", "unfolding SecurityInvariant_withOffendingFlows.sinvar_mono_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>nP N E' E.\n       wf_graph \\<lparr>nodes = N, edges = E\\<rparr> \\<and>\n       E' \\<subseteq> E \\<and>\n       sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP \\<longrightarrow>\n       sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nP N E' n E xa.\n       \\<lbrakk>n \\<in> N; wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        \\<forall>n\\<in>N.\n           nP n = Interfering \\<longrightarrow>\n           nP ` undirected_reachable \\<lparr>nodes = N, edges = E\\<rparr> n\n           \\<subseteq> {Unrelated};\n        nP n = Interfering;\n        xa \\<in> undirected_reachable \\<lparr>nodes = N, edges = E'\\<rparr>\n                  n\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated", "apply(rename_tac nP N E' n E xa)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nP N E' n E xa.\n       \\<lbrakk>n \\<in> N; wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        \\<forall>n\\<in>N.\n           nP n = Interfering \\<longrightarrow>\n           nP ` undirected_reachable \\<lparr>nodes = N, edges = E\\<rparr> n\n           \\<subseteq> {Unrelated};\n        nP n = Interfering;\n        xa \\<in> undirected_reachable \\<lparr>nodes = N, edges = E'\\<rparr>\n                  n\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated", "apply(erule_tac x=n in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>nP N E' n E xa.\n       \\<lbrakk>n \\<in> N; wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E; nP n = Interfering;\n        xa \\<in> undirected_reachable \\<lparr>nodes = N, edges = E'\\<rparr>\n                  n;\n        nP n = Interfering \\<longrightarrow>\n        nP ` undirected_reachable \\<lparr>nodes = N, edges = E\\<rparr> n\n        \\<subseteq> {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 2. \\<And>nP N E' n E xa.\n       \\<lbrakk>n \\<in> N; wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E; nP n = Interfering;\n        xa \\<in> undirected_reachable \\<lparr>nodes = N, edges = E'\\<rparr>\n                  n;\n        n \\<notin> N\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>nP N E' n E xa.\n       \\<lbrakk>n \\<in> N; wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E; nP n = Interfering;\n        xa \\<in> undirected_reachable \\<lparr>nodes = N, edges = E'\\<rparr>\n                  n;\n        n \\<notin> N\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 2. \\<And>nP N E' n E xa.\n       \\<lbrakk>n \\<in> N; wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E; nP n = Interfering;\n        xa \\<in> undirected_reachable \\<lparr>nodes = N, edges = E'\\<rparr>\n                  n;\n        nP n = Interfering \\<longrightarrow>\n        nP ` undirected_reachable \\<lparr>nodes = N, edges = E\\<rparr> n\n        \\<subseteq> {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nP N E' n E xa.\n       \\<lbrakk>n \\<in> N; wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E; nP n = Interfering;\n        xa \\<in> undirected_reachable \\<lparr>nodes = N, edges = E'\\<rparr>\n                  n;\n        nP n = Interfering \\<longrightarrow>\n        nP ` undirected_reachable \\<lparr>nodes = N, edges = E\\<rparr> n\n        \\<subseteq> {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nP N E' n E xa.\n       \\<lbrakk>n \\<in> N; wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E; nP n = Interfering;\n        xa \\<in> undirected_reachable \\<lparr>nodes = N, edges = E'\\<rparr>\n                  n;\n        nP ` undirected_reachable \\<lparr>nodes = N, edges = E\\<rparr> n\n        \\<subseteq> {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated", "apply(drule_tac N=N and n=n in undirected_reachable_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nP N E' n E xa.\n       \\<lbrakk>n \\<in> N; wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        nP n = Interfering;\n        xa \\<in> undirected_reachable \\<lparr>nodes = N, edges = E'\\<rparr>\n                  n;\n        nP ` undirected_reachable \\<lparr>nodes = N, edges = E\\<rparr> n\n        \\<subseteq> {Unrelated};\n        undirected_reachable \\<lparr>nodes = N, edges = E'\\<rparr> n\n        \\<subseteq> undirected_reachable\n                     \\<lparr>nodes = N, edges = E\\<rparr> n\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated", "apply(blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "interpretation SecurityInvariant_preliminaries\n  where sinvar = sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_preliminaries sinvar", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(frule_tac finite_distinct_list[OF wf_graph.finiteE])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        \\<exists>xs. set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(erule_tac exE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP xs.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(rename_tac list_edges)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(rule_tac ff=\"list_edges\" in SecurityInvariant_withOffendingFlows.mono_imp_set_offending_flows_not_empty[OF sinvar_mono])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> wf_graph G\n 2. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (set list_edges) G nP\n 3. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> set list_edges \\<subseteq> edges G\n 4. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> distinct list_edges\n 5. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 6. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(auto)[4]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP list_edges n xa.\n       \\<lbrakk>wf_graph G; n \\<in> nodes G; set list_edges = edges G;\n        distinct list_edges; nP n = Interfering;\n        \\<not> SecurityInvariant_withOffendingFlows.is_offending_flows\n                sinvar (edges G) G nP;\n        xa \\<in> undirected_reachable G n\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(auto simp add: SecurityInvariant_withOffendingFlows.is_offending_flows_def empty_undirected_reachable_false)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 2. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(fact SecurityInvariant_withOffendingFlows.sinvar_mono_imp_sinvar_mono[OF sinvar_mono])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(fact SecurityInvariant_withOffendingFlows.sinvar_mono_imp_is_offending_flows_mono[OF sinvar_mono])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "interpretation NonInterference: SecurityInvariant_IFS\nwhere default_node_properties = SINVAR_NonInterference.default_node_properties\nand sinvar = SINVAR_NonInterference.sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_IFS sinvar default_node_properties", "unfolding SINVAR_NonInterference.default_node_properties_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_IFS sinvar Interfering", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>snd ` f.\n                            \\<not> sinvar G (nP(i := Interfering))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply(rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> snd ` f\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar G (nP(i := Interfering))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply(drule SINVAR_NonInterference.offending_notevalD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; i \\<in> snd ` f; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar G (nP(i := Interfering))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; i \\<in> snd ` f;\n        \\<exists>n\\<in>nodes G.\n           nP n = Interfering \\<and>\n           \\<not> nP ` undirected_reachable G n\n                  \\<subseteq> {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<in>nodes G.\n                            (n = i \\<longrightarrow>\n                             (\\<lambda>a. Interfering) `\n                             (undirected_reachable G i \\<inter> {i})\n                             \\<subseteq> {Unrelated} \\<longrightarrow>\n                             \\<not> nP `\n                                    (undirected_reachable G i \\<inter>\n                                     {x. x \\<noteq> i})\n                                    \\<subseteq> {Unrelated}) \\<and>\n                            (n \\<noteq> i \\<longrightarrow>\n                             nP n = Interfering \\<and>\n                             ((\\<lambda>a. Interfering) `\n                              (undirected_reachable G n \\<inter> {i})\n                              \\<subseteq> {Unrelated} \\<longrightarrow>\n                              \\<not> nP `\n                                     (undirected_reachable G n \\<inter>\n{x. x \\<noteq> i})\n                                     \\<subseteq> {Unrelated}))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply(rename_tac xa)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply(case_tac \"nP xa\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Interfering\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 2. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Unrelated\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 3. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "(*case Interfering*)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Interfering\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 2. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Unrelated\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 3. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP a b n xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<forall>n\\<in>nodes G.\n           n = b \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable G b \\<inter> {b})\n           \\<subseteq> {Unrelated} \\<and>\n           nP ` (undirected_reachable G b \\<inter> {x. x \\<noteq> b})\n           \\<subseteq> {Unrelated} \\<or>\n           n \\<noteq> b \\<and>\n           (nP n = Interfering \\<longrightarrow>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable G n \\<inter> {b})\n            \\<subseteq> {Unrelated} \\<and>\n            nP ` (undirected_reachable G n \\<inter> {x. x \\<noteq> b})\n            \\<subseteq> {Unrelated});\n        xa \\<in> undirected_reachable G n; nP xa = Interfering\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Unrelated\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 3. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply(erule_tac x=n and A=\"nodes G\" in ballE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G f nP a b n xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering; xa \\<in> undirected_reachable G n;\n        nP xa = Interfering;\n        n = b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G b \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G b \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated} \\<or>\n        n \\<noteq> b \\<and>\n        (nP n = Interfering \\<longrightarrow>\n         (\\<lambda>a. Interfering) ` (undirected_reachable G n \\<inter> {b})\n         \\<subseteq> {Unrelated} \\<and>\n         nP ` (undirected_reachable G n \\<inter> {x. x \\<noteq> b})\n         \\<subseteq> {Unrelated})\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>G f nP a b n xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering; xa \\<in> undirected_reachable G n;\n        nP xa = Interfering; n \\<notin> nodes G\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Unrelated\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 4. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G f nP a b n xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering; xa \\<in> undirected_reachable G n;\n        nP xa = Interfering; n \\<notin> nodes G\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>G f nP a b n xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering; xa \\<in> undirected_reachable G n;\n        nP xa = Interfering;\n        n = b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G b \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G b \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated} \\<or>\n        n \\<noteq> b \\<and>\n        (nP n = Interfering \\<longrightarrow>\n         (\\<lambda>a. Interfering) ` (undirected_reachable G n \\<inter> {b})\n         \\<subseteq> {Unrelated} \\<and>\n         nP ` (undirected_reachable G n \\<inter> {x. x \\<noteq> b})\n         \\<subseteq> {Unrelated})\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Unrelated\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 4. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP a b n xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering; xa \\<in> undirected_reachable G n;\n        nP xa = Interfering;\n        n = b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G b \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G b \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated} \\<or>\n        n \\<noteq> b \\<and>\n        (nP n = Interfering \\<longrightarrow>\n         (\\<lambda>a. Interfering) ` (undirected_reachable G n \\<inter> {b})\n         \\<subseteq> {Unrelated} \\<and>\n         nP ` (undirected_reachable G n \\<inter> {x. x \\<noteq> b})\n         \\<subseteq> {Unrelated})\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Unrelated\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 3. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP a b n xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering; xa \\<in> undirected_reachable G n;\n        nP xa = Interfering;\n        n = b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G b \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G b \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated} \\<or>\n        n \\<noteq> b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G n \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G n \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Unrelated\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 3. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply(thin_tac \"wf_graph G\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP a b n xa.\n       \\<lbrakk>(a, b) \\<in> f; n \\<in> nodes G; nP n = Interfering;\n        xa \\<in> undirected_reachable G n; nP xa = Interfering;\n        n = b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G b \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G b \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated} \\<or>\n        n \\<noteq> b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G n \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G n \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Unrelated\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 3. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply(thin_tac \"(a,b) \\<in> f\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP a b n xa.\n       \\<lbrakk>n \\<in> nodes G; nP n = Interfering;\n        xa \\<in> undirected_reachable G n; nP xa = Interfering;\n        n = b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G b \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G b \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated} \\<or>\n        n \\<noteq> b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G n \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G n \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Unrelated\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 3. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply(thin_tac \"n \\<in> nodes G\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP a b n xa.\n       \\<lbrakk>nP n = Interfering; xa \\<in> undirected_reachable G n;\n        nP xa = Interfering;\n        n = b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G b \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G b \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated} \\<or>\n        n \\<noteq> b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G n \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G n \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Unrelated\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 3. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply(thin_tac \"nP n = Interfering\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP a b n xa.\n       \\<lbrakk>xa \\<in> undirected_reachable G n; nP xa = Interfering;\n        n = b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G b \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G b \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated} \\<or>\n        n \\<noteq> b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G n \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G n \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Unrelated\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 3. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply(erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>G f nP a b n xa.\n       \\<lbrakk>xa \\<in> undirected_reachable G n; nP xa = Interfering;\n        n = b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G b \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G b \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>G f nP a b n xa.\n       \\<lbrakk>xa \\<in> undirected_reachable G n; nP xa = Interfering;\n        n \\<noteq> b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G n \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G n \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Unrelated\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 4. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP a b n xa.\n       \\<lbrakk>xa \\<in> undirected_reachable G n; nP xa = Interfering;\n        n \\<noteq> b \\<and>\n        (\\<lambda>a. Interfering) ` (undirected_reachable G n \\<inter> {b})\n        \\<subseteq> {Unrelated} \\<and>\n        nP ` (undirected_reachable G n \\<inter> {x. x \\<noteq> b})\n        \\<subseteq> {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Unrelated\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 3. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Unrelated\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "(*case Unrelated*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP i a b n x xa.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> f; n \\<in> nodes G;\n        nP n = Interfering;\n        \\<not> (\\<exists>n\\<in>nodes G.\n                   (n = snd (a, b) \\<longrightarrow>\n                    (\\<lambda>a. Interfering) `\n                    (undirected_reachable G (snd (a, b)) \\<inter>\n                     {snd (a, b)})\n                    \\<subseteq> {Unrelated} \\<longrightarrow>\n                    \\<not> nP `\n                           (undirected_reachable G (snd (a, b)) \\<inter>\n                            {x. x \\<noteq> snd (a, b)})\n                           \\<subseteq> {Unrelated}) \\<and>\n                   (n \\<noteq> snd (a, b) \\<longrightarrow>\n                    nP n = Interfering \\<and>\n                    ((\\<lambda>a. Interfering) `\n                     (undirected_reachable G n \\<inter> {snd (a, b)})\n                     \\<subseteq> {Unrelated} \\<longrightarrow>\n                     \\<not> nP `\n                            (undirected_reachable G n \\<inter>\n                             {x. x \\<noteq> snd (a, b)})\n                            \\<subseteq> {Unrelated})));\n        xa \\<in> undirected_reachable G n; nP xa \\<notin> {};\n        nP xa = Unrelated\\<rbrakk>\n       \\<Longrightarrow> nP xa = Unrelated\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "(*unique: *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = Interfering", "apply(erule default_uniqueness_by_counterexample_IFS)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       \\<exists>G nP i f.\n          wf_graph G \\<and>\n          \\<not> sinvar G nP \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          sinvar (delete_edges G f) nP \\<and>\n          i \\<in> snd ` f \\<and> sinvar G (nP(i := otherbot))", "apply (simp add: SecurityInvariant_withOffendingFlows.set_offending_flows_def\n      SecurityInvariant_withOffendingFlows.is_offending_flows_min_set_def\n      SecurityInvariant_withOffendingFlows.is_offending_flows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>n\\<in>nodes G.\n                  nP n = Interfering \\<and>\n                  \\<not> nP ` undirected_reachable G n\n                         \\<subseteq> {Unrelated}) \\<and>\n              (\\<exists>i f.\n                  f \\<subseteq> edges G \\<and>\n                  (\\<exists>n\\<in>nodes G.\n                      nP n = Interfering \\<and>\n                      \\<not> nP ` undirected_reachable G n\n                             \\<subseteq> {Unrelated}) \\<and>\n                  (\\<forall>n\\<in>nodes (delete_edges G f).\n                      nP n = Interfering \\<longrightarrow>\n                      nP ` undirected_reachable (delete_edges G f) n\n                      \\<subseteq> {Unrelated}) \\<and>\n                  (\\<forall>x\\<in>f.\n                      case x of\n                      (e1, e2) \\<Rightarrow>\n                        \\<exists>n\\<in>nodes\n  (add_edge e1 e2 (delete_edges G f)).\n                           nP n = Interfering \\<and>\n                           \\<not> nP `\n                                  undirected_reachable\n                                   (add_edge e1 e2 (delete_edges G f)) n\n                                  \\<subseteq> {Unrelated}) \\<and>\n                  (\\<forall>n\\<in>nodes (delete_edges G f).\n                      nP n = Interfering \\<longrightarrow>\n                      nP ` undirected_reachable (delete_edges G f) n\n                      \\<subseteq> {Unrelated}) \\<and>\n                  i \\<in> snd ` f \\<and>\n                  (\\<forall>n\\<in>nodes G.\n                      n \\<noteq> i \\<longrightarrow>\n                      nP n = Interfering \\<longrightarrow>\n                      (\\<lambda>a. otherbot) `\n                      (undirected_reachable G n \\<inter> {i})\n                      \\<subseteq> {Unrelated} \\<and>\n                      nP `\n                      (undirected_reachable G n \\<inter> {x. x \\<noteq> i})\n                      \\<subseteq> {Unrelated})))", "apply (simp add:delete_edges_set_nodes)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>n\\<in>nodes G.\n                  nP n = Interfering \\<and>\n                  \\<not> nP ` undirected_reachable G n\n                         \\<subseteq> {Unrelated}) \\<and>\n              (\\<exists>i f.\n                  f \\<subseteq> edges G \\<and>\n                  (\\<exists>n\\<in>nodes G.\n                      nP n = Interfering \\<and>\n                      \\<not> nP ` undirected_reachable G n\n                             \\<subseteq> {Unrelated}) \\<and>\n                  (\\<forall>n\\<in>nodes G.\n                      nP n = Interfering \\<longrightarrow>\n                      nP ` undirected_reachable (delete_edges G f) n\n                      \\<subseteq> {Unrelated}) \\<and>\n                  (\\<forall>x\\<in>f.\n                      case x of\n                      (e1, e2) \\<Rightarrow>\n                        \\<exists>n\\<in>nodes\n  (add_edge e1 e2 (delete_edges G f)).\n                           nP n = Interfering \\<and>\n                           \\<not> nP `\n                                  undirected_reachable\n                                   (add_edge e1 e2 (delete_edges G f)) n\n                                  \\<subseteq> {Unrelated}) \\<and>\n                  (\\<forall>n\\<in>nodes G.\n                      nP n = Interfering \\<longrightarrow>\n                      nP ` undirected_reachable (delete_edges G f) n\n                      \\<subseteq> {Unrelated}) \\<and>\n                  i \\<in> snd ` f \\<and>\n                  (\\<forall>n\\<in>nodes G.\n                      n \\<noteq> i \\<longrightarrow>\n                      nP n = Interfering \\<longrightarrow>\n                      (\\<lambda>a. otherbot) `\n                      (undirected_reachable G n \\<inter> {i})\n                      \\<subseteq> {Unrelated} \\<and>\n                      nP `\n                      (undirected_reachable G n \\<inter> {x. x \\<noteq> i})\n                      \\<subseteq> {Unrelated})))", "apply (simp split: prod.split_asm prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>n\\<in>nodes G.\n                  nP n = Interfering \\<and>\n                  \\<not> nP ` undirected_reachable G n\n                         \\<subseteq> {Unrelated}) \\<and>\n              (\\<exists>i f.\n                  f \\<subseteq> edges G \\<and>\n                  (\\<exists>n\\<in>nodes G.\n                      nP n = Interfering \\<and>\n                      \\<not> nP ` undirected_reachable G n\n                             \\<subseteq> {Unrelated}) \\<and>\n                  (\\<forall>n\\<in>nodes G.\n                      nP n = Interfering \\<longrightarrow>\n                      nP ` undirected_reachable (delete_edges G f) n\n                      \\<subseteq> {Unrelated}) \\<and>\n                  (\\<forall>x\\<in>f.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         (\\<exists>n\\<in>nodes\n    (add_edge x1 x2 (delete_edges G f)).\n                             nP n = Interfering \\<and>\n                             \\<not> nP `\n                                    undirected_reachable\n                                     (add_edge x1 x2 (delete_edges G f)) n\n                                    \\<subseteq> {Unrelated})) \\<and>\n                  (\\<forall>n\\<in>nodes G.\n                      nP n = Interfering \\<longrightarrow>\n                      nP ` undirected_reachable (delete_edges G f) n\n                      \\<subseteq> {Unrelated}) \\<and>\n                  i \\<in> snd ` f \\<and>\n                  (\\<forall>n\\<in>nodes G.\n                      n \\<noteq> i \\<longrightarrow>\n                      nP n = Interfering \\<longrightarrow>\n                      (\\<lambda>a. otherbot) `\n                      (undirected_reachable G n \\<inter> {i})\n                      \\<subseteq> {Unrelated} \\<and>\n                      nP `\n                      (undirected_reachable G n \\<inter> {x. x \\<noteq> i})\n                      \\<subseteq> {Unrelated})))", "apply(rule_tac x=\"\\<lparr> nodes={vertex_1,vertex_2}, edges = {(vertex_1,vertex_2)} \\<rparr>\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       wf_graph\n        \\<lparr>nodes = {vertex_1, vertex_2},\n           edges = {(vertex_1, vertex_2)}\\<rparr> \\<and>\n       (\\<exists>nP.\n           (nP vertex_1 = Interfering \\<and>\n            \\<not> nP `\n                   undirected_reachable\n                    \\<lparr>nodes = {vertex_1, vertex_2},\n                       edges = {(vertex_1, vertex_2)}\\<rparr>\n                    vertex_1\n                   \\<subseteq> {Unrelated} \\<or>\n            nP vertex_2 = Interfering \\<and>\n            \\<not> nP `\n                   undirected_reachable\n                    \\<lparr>nodes = {vertex_1, vertex_2},\n                       edges = {(vertex_1, vertex_2)}\\<rparr>\n                    vertex_2\n                   \\<subseteq> {Unrelated}) \\<and>\n           (\\<exists>i f.\n               f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n               (nP vertex_1 = Interfering \\<and>\n                \\<not> nP `\n                       undirected_reachable\n                        \\<lparr>nodes = {vertex_1, vertex_2},\n                           edges = {(vertex_1, vertex_2)}\\<rparr>\n                        vertex_1\n                       \\<subseteq> {Unrelated} \\<or>\n                nP vertex_2 = Interfering \\<and>\n                \\<not> nP `\n                       undirected_reachable\n                        \\<lparr>nodes = {vertex_1, vertex_2},\n                           edges = {(vertex_1, vertex_2)}\\<rparr>\n                        vertex_2\n                       \\<subseteq> {Unrelated}) \\<and>\n               (nP vertex_1 = Interfering \\<longrightarrow>\n                nP `\n                undirected_reachable\n                 (delete_edges\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   f)\n                 vertex_1\n                \\<subseteq> {Unrelated}) \\<and>\n               (nP vertex_2 = Interfering \\<longrightarrow>\n                nP `\n                undirected_reachable\n                 (delete_edges\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   f)\n                 vertex_2\n                \\<subseteq> {Unrelated}) \\<and>\n               (\\<forall>x\\<in>f.\n                   \\<forall>x1 x2.\n                      x = (x1, x2) \\<longrightarrow>\n                      (\\<exists>n\\<in>nodes\n (add_edge x1 x2\n   (delete_edges\n     \\<lparr>nodes = {vertex_1, vertex_2},\n        edges = {(vertex_1, vertex_2)}\\<rparr>\n     f)).\n                          nP n = Interfering \\<and>\n                          \\<not> nP `\n                                 undirected_reachable\n                                  (add_edge x1 x2\n                                    (delete_edges\n\\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr>\nf))\n                                  n\n                                 \\<subseteq> {Unrelated})) \\<and>\n               (nP vertex_1 = Interfering \\<longrightarrow>\n                nP `\n                undirected_reachable\n                 (delete_edges\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   f)\n                 vertex_1\n                \\<subseteq> {Unrelated}) \\<and>\n               (nP vertex_2 = Interfering \\<longrightarrow>\n                nP `\n                undirected_reachable\n                 (delete_edges\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   f)\n                 vertex_2\n                \\<subseteq> {Unrelated}) \\<and>\n               i \\<in> snd ` f \\<and>\n               (vertex_1 \\<noteq> i \\<longrightarrow>\n                nP vertex_1 = Interfering \\<longrightarrow>\n                (\\<lambda>a. otherbot) `\n                (undirected_reachable\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  vertex_1 \\<inter>\n                 {i})\n                \\<subseteq> {Unrelated} \\<and>\n                nP `\n                (undirected_reachable\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  vertex_1 \\<inter>\n                 {x. x \\<noteq> i})\n                \\<subseteq> {Unrelated}) \\<and>\n               (vertex_2 \\<noteq> i \\<longrightarrow>\n                nP vertex_2 = Interfering \\<longrightarrow>\n                (\\<lambda>a. otherbot) `\n                (undirected_reachable\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  vertex_2 \\<inter>\n                 {i})\n                \\<subseteq> {Unrelated} \\<and>\n                nP `\n                (undirected_reachable\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  vertex_2 \\<inter>\n                 {x. x \\<noteq> i})\n                \\<subseteq> {Unrelated})))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       wf_graph\n        \\<lparr>nodes = {vertex_1, vertex_2},\n           edges = {(vertex_1, vertex_2)}\\<rparr>\n 2. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       \\<exists>nP.\n          (nP vertex_1 = Interfering \\<and>\n           \\<not> nP `\n                  undirected_reachable\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   vertex_1\n                  \\<subseteq> {Unrelated} \\<or>\n           nP vertex_2 = Interfering \\<and>\n           \\<not> nP `\n                  undirected_reachable\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   vertex_2\n                  \\<subseteq> {Unrelated}) \\<and>\n          (\\<exists>i f.\n              f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n              (nP vertex_1 = Interfering \\<and>\n               \\<not> nP `\n                      undirected_reachable\n                       \\<lparr>nodes = {vertex_1, vertex_2},\n                          edges = {(vertex_1, vertex_2)}\\<rparr>\n                       vertex_1\n                      \\<subseteq> {Unrelated} \\<or>\n               nP vertex_2 = Interfering \\<and>\n               \\<not> nP `\n                      undirected_reachable\n                       \\<lparr>nodes = {vertex_1, vertex_2},\n                          edges = {(vertex_1, vertex_2)}\\<rparr>\n                       vertex_2\n                      \\<subseteq> {Unrelated}) \\<and>\n              (nP vertex_1 = Interfering \\<longrightarrow>\n               nP `\n               undirected_reachable\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  f)\n                vertex_1\n               \\<subseteq> {Unrelated}) \\<and>\n              (nP vertex_2 = Interfering \\<longrightarrow>\n               nP `\n               undirected_reachable\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  f)\n                vertex_2\n               \\<subseteq> {Unrelated}) \\<and>\n              (\\<forall>x\\<in>f.\n                  \\<forall>x1 x2.\n                     x = (x1, x2) \\<longrightarrow>\n                     (\\<exists>n\\<in>nodes\n(add_edge x1 x2\n  (delete_edges\n    \\<lparr>nodes = {vertex_1, vertex_2},\n       edges = {(vertex_1, vertex_2)}\\<rparr>\n    f)).\n                         nP n = Interfering \\<and>\n                         \\<not> nP `\n                                undirected_reachable\n                                 (add_edge x1 x2\n                                   (delete_edges\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     f))\n                                 n\n                                \\<subseteq> {Unrelated})) \\<and>\n              (nP vertex_1 = Interfering \\<longrightarrow>\n               nP `\n               undirected_reachable\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  f)\n                vertex_1\n               \\<subseteq> {Unrelated}) \\<and>\n              (nP vertex_2 = Interfering \\<longrightarrow>\n               nP `\n               undirected_reachable\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  f)\n                vertex_2\n               \\<subseteq> {Unrelated}) \\<and>\n              i \\<in> snd ` f \\<and>\n              (vertex_1 \\<noteq> i \\<longrightarrow>\n               nP vertex_1 = Interfering \\<longrightarrow>\n               (\\<lambda>a. otherbot) `\n               (undirected_reachable\n                 \\<lparr>nodes = {vertex_1, vertex_2},\n                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                 vertex_1 \\<inter>\n                {i})\n               \\<subseteq> {Unrelated} \\<and>\n               nP `\n               (undirected_reachable\n                 \\<lparr>nodes = {vertex_1, vertex_2},\n                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                 vertex_1 \\<inter>\n                {x. x \\<noteq> i})\n               \\<subseteq> {Unrelated}) \\<and>\n              (vertex_2 \\<noteq> i \\<longrightarrow>\n               nP vertex_2 = Interfering \\<longrightarrow>\n               (\\<lambda>a. otherbot) `\n               (undirected_reachable\n                 \\<lparr>nodes = {vertex_1, vertex_2},\n                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                 vertex_2 \\<inter>\n                {i})\n               \\<subseteq> {Unrelated} \\<and>\n               nP `\n               (undirected_reachable\n                 \\<lparr>nodes = {vertex_1, vertex_2},\n                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                 vertex_2 \\<inter>\n                {x. x \\<noteq> i})\n               \\<subseteq> {Unrelated}))", "apply(simp add: wf_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       \\<exists>nP.\n          (nP vertex_1 = Interfering \\<and>\n           \\<not> nP `\n                  undirected_reachable\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   vertex_1\n                  \\<subseteq> {Unrelated} \\<or>\n           nP vertex_2 = Interfering \\<and>\n           \\<not> nP `\n                  undirected_reachable\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   vertex_2\n                  \\<subseteq> {Unrelated}) \\<and>\n          (\\<exists>i f.\n              f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n              (nP vertex_1 = Interfering \\<and>\n               \\<not> nP `\n                      undirected_reachable\n                       \\<lparr>nodes = {vertex_1, vertex_2},\n                          edges = {(vertex_1, vertex_2)}\\<rparr>\n                       vertex_1\n                      \\<subseteq> {Unrelated} \\<or>\n               nP vertex_2 = Interfering \\<and>\n               \\<not> nP `\n                      undirected_reachable\n                       \\<lparr>nodes = {vertex_1, vertex_2},\n                          edges = {(vertex_1, vertex_2)}\\<rparr>\n                       vertex_2\n                      \\<subseteq> {Unrelated}) \\<and>\n              (nP vertex_1 = Interfering \\<longrightarrow>\n               nP `\n               undirected_reachable\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  f)\n                vertex_1\n               \\<subseteq> {Unrelated}) \\<and>\n              (nP vertex_2 = Interfering \\<longrightarrow>\n               nP `\n               undirected_reachable\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  f)\n                vertex_2\n               \\<subseteq> {Unrelated}) \\<and>\n              (\\<forall>x\\<in>f.\n                  \\<forall>x1 x2.\n                     x = (x1, x2) \\<longrightarrow>\n                     (\\<exists>n\\<in>nodes\n(add_edge x1 x2\n  (delete_edges\n    \\<lparr>nodes = {vertex_1, vertex_2},\n       edges = {(vertex_1, vertex_2)}\\<rparr>\n    f)).\n                         nP n = Interfering \\<and>\n                         \\<not> nP `\n                                undirected_reachable\n                                 (add_edge x1 x2\n                                   (delete_edges\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     f))\n                                 n\n                                \\<subseteq> {Unrelated})) \\<and>\n              (nP vertex_1 = Interfering \\<longrightarrow>\n               nP `\n               undirected_reachable\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  f)\n                vertex_1\n               \\<subseteq> {Unrelated}) \\<and>\n              (nP vertex_2 = Interfering \\<longrightarrow>\n               nP `\n               undirected_reachable\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  f)\n                vertex_2\n               \\<subseteq> {Unrelated}) \\<and>\n              i \\<in> snd ` f \\<and>\n              (vertex_1 \\<noteq> i \\<longrightarrow>\n               nP vertex_1 = Interfering \\<longrightarrow>\n               (\\<lambda>a. otherbot) `\n               (undirected_reachable\n                 \\<lparr>nodes = {vertex_1, vertex_2},\n                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                 vertex_1 \\<inter>\n                {i})\n               \\<subseteq> {Unrelated} \\<and>\n               nP `\n               (undirected_reachable\n                 \\<lparr>nodes = {vertex_1, vertex_2},\n                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                 vertex_1 \\<inter>\n                {x. x \\<noteq> i})\n               \\<subseteq> {Unrelated}) \\<and>\n              (vertex_2 \\<noteq> i \\<longrightarrow>\n               nP vertex_2 = Interfering \\<longrightarrow>\n               (\\<lambda>a. otherbot) `\n               (undirected_reachable\n                 \\<lparr>nodes = {vertex_1, vertex_2},\n                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                 vertex_2 \\<inter>\n                {i})\n               \\<subseteq> {Unrelated} \\<and>\n               nP `\n               (undirected_reachable\n                 \\<lparr>nodes = {vertex_1, vertex_2},\n                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                 vertex_2 \\<inter>\n                {x. x \\<noteq> i})\n               \\<subseteq> {Unrelated}))", "apply(rule_tac x=\"(\\<lambda> x. default_node_properties)(vertex_1 := Interfering, vertex_2 := Interfering)\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       ((\\<lambda>a. Interfering) `\n        (undirected_reachable\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_1, vertex_2)}\\<rparr>\n          vertex_2 \\<inter>\n         {x. x \\<noteq> vertex_2} \\<inter>\n         {vertex_1})\n        \\<subseteq> {Unrelated} \\<longrightarrow>\n        (\\<lambda>a. Interfering) `\n        (undirected_reachable\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_1, vertex_2)}\\<rparr>\n          vertex_2 \\<inter>\n         {vertex_2})\n        \\<subseteq> {Unrelated} \\<longrightarrow>\n        (\\<lambda>a. Interfering) `\n        (undirected_reachable\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_1, vertex_2)}\\<rparr>\n          vertex_1 \\<inter>\n         {x. x \\<noteq> vertex_2} \\<inter>\n         {vertex_1})\n        \\<subseteq> {Unrelated} \\<longrightarrow>\n        (\\<lambda>a. Interfering) `\n        (undirected_reachable\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_1, vertex_2)}\\<rparr>\n          vertex_1 \\<inter>\n         {vertex_2})\n        \\<subseteq> {Unrelated} \\<longrightarrow>\n        (\\<lambda>x. default_node_properties) `\n        (undirected_reachable\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_1, vertex_2)}\\<rparr>\n          vertex_1 \\<inter>\n         {x. x \\<noteq> vertex_2} \\<inter>\n         {x. x \\<noteq> vertex_1})\n        \\<subseteq> {Unrelated} \\<longrightarrow>\n        \\<not> (\\<lambda>x. default_node_properties) `\n               (undirected_reachable\n                 \\<lparr>nodes = {vertex_1, vertex_2},\n                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                 vertex_2 \\<inter>\n                {x. x \\<noteq> vertex_2} \\<inter>\n                {x. x \\<noteq> vertex_1})\n               \\<subseteq> {Unrelated}) \\<and>\n       (\\<exists>i f.\n           f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n           ((\\<lambda>a. Interfering) `\n            (undirected_reachable\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              vertex_2 \\<inter>\n             {x. x \\<noteq> vertex_2} \\<inter>\n             {vertex_1})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              vertex_2 \\<inter>\n             {vertex_2})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              vertex_1 \\<inter>\n             {x. x \\<noteq> vertex_2} \\<inter>\n             {vertex_1})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              vertex_1 \\<inter>\n             {vertex_2})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            (\\<lambda>x. default_node_properties) `\n            (undirected_reachable\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              vertex_1 \\<inter>\n             {x. x \\<noteq> vertex_2} \\<inter>\n             {x. x \\<noteq> vertex_1})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            \\<not> (\\<lambda>x. default_node_properties) `\n                   (undirected_reachable\n                     \\<lparr>nodes = {vertex_1, vertex_2},\n                        edges = {(vertex_1, vertex_2)}\\<rparr>\n                     vertex_2 \\<inter>\n                    {x. x \\<noteq> vertex_2} \\<inter>\n                    {x. x \\<noteq> vertex_1})\n                   \\<subseteq> {Unrelated}) \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             (delete_edges\n               \\<lparr>nodes = {vertex_1, vertex_2},\n                  edges = {(vertex_1, vertex_2)}\\<rparr>\n               f)\n             vertex_1 \\<inter>\n            {vertex_2})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             (delete_edges\n               \\<lparr>nodes = {vertex_1, vertex_2},\n                  edges = {(vertex_1, vertex_2)}\\<rparr>\n               f)\n             vertex_1 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {vertex_1})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>x. default_node_properties) `\n           (undirected_reachable\n             (delete_edges\n               \\<lparr>nodes = {vertex_1, vertex_2},\n                  edges = {(vertex_1, vertex_2)}\\<rparr>\n               f)\n             vertex_1 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {x. x \\<noteq> vertex_1})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             (delete_edges\n               \\<lparr>nodes = {vertex_1, vertex_2},\n                  edges = {(vertex_1, vertex_2)}\\<rparr>\n               f)\n             vertex_2 \\<inter>\n            {vertex_2})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             (delete_edges\n               \\<lparr>nodes = {vertex_1, vertex_2},\n                  edges = {(vertex_1, vertex_2)}\\<rparr>\n               f)\n             vertex_2 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {vertex_1})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>x. default_node_properties) `\n           (undirected_reachable\n             (delete_edges\n               \\<lparr>nodes = {vertex_1, vertex_2},\n                  edges = {(vertex_1, vertex_2)}\\<rparr>\n               f)\n             vertex_2 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {x. x \\<noteq> vertex_1})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<forall>x\\<in>f.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  (\\<exists>n\\<in>nodes\n                                   (add_edge x1 x2\n                                     (delete_edges\n \\<lparr>nodes = {vertex_1, vertex_2},\n    edges = {(vertex_1, vertex_2)}\\<rparr>\n f)).\n                      (n = vertex_1 \\<longrightarrow>\n                       (\\<lambda>a. Interfering) `\n                       (undirected_reachable\n                         (add_edge x1 x2\n                           (delete_edges\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             f))\n                         vertex_1 \\<inter>\n                        {x. x \\<noteq> vertex_2} \\<inter>\n                        {vertex_1})\n                       \\<subseteq> {Unrelated} \\<longrightarrow>\n                       (\\<lambda>a. Interfering) `\n                       (undirected_reachable\n                         (add_edge x1 x2\n                           (delete_edges\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             f))\n                         vertex_1 \\<inter>\n                        {vertex_2})\n                       \\<subseteq> {Unrelated} \\<longrightarrow>\n                       \\<not> (\\<lambda>x. default_node_properties) `\n                              (undirected_reachable\n                                (add_edge x1 x2\n                                  (delete_edges\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    f))\n                                vertex_1 \\<inter>\n                               {x. x \\<noteq> vertex_2} \\<inter>\n                               {x. x \\<noteq> vertex_1})\n                              \\<subseteq> {Unrelated}) \\<and>\n                      (n \\<noteq> vertex_1 \\<longrightarrow>\n                       (n = vertex_2 \\<longrightarrow>\n                        (\\<lambda>a. Interfering) `\n                        (undirected_reachable\n                          (add_edge x1 x2\n                            (delete_edges\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              f))\n                          vertex_2 \\<inter>\n                         {x. x \\<noteq> vertex_2} \\<inter>\n                         {vertex_1})\n                        \\<subseteq> {Unrelated} \\<longrightarrow>\n                        (\\<lambda>a. Interfering) `\n                        (undirected_reachable\n                          (add_edge x1 x2\n                            (delete_edges\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              f))\n                          vertex_2 \\<inter>\n                         {vertex_2})\n                        \\<subseteq> {Unrelated} \\<longrightarrow>\n                        \\<not> (\\<lambda>x. default_node_properties) `\n                               (undirected_reachable\n                                 (add_edge x1 x2\n                                   (delete_edges\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     f))\n                                 vertex_2 \\<inter>\n                                {x. x \\<noteq> vertex_2} \\<inter>\n                                {x. x \\<noteq> vertex_1})\n                               \\<subseteq> {Unrelated}) \\<and>\n                       (n \\<noteq> vertex_2 \\<longrightarrow>\n                        default_node_properties = Interfering \\<and>\n                        ((\\<lambda>a. Interfering) `\n                         (undirected_reachable\n                           (add_edge x1 x2\n                             (delete_edges\n                               \\<lparr>nodes = {vertex_1, vertex_2},\n                                  edges = {(vertex_1, vertex_2)}\\<rparr>\n                               f))\n                           n \\<inter>\n                          {x. x \\<noteq> vertex_2} \\<inter>\n                          {vertex_1})\n                         \\<subseteq> {Unrelated} \\<longrightarrow>\n                         (\\<lambda>a. Interfering) `\n                         (undirected_reachable\n                           (add_edge x1 x2\n                             (delete_edges\n                               \\<lparr>nodes = {vertex_1, vertex_2},\n                                  edges = {(vertex_1, vertex_2)}\\<rparr>\n                               f))\n                           n \\<inter>\n                          {vertex_2})\n                         \\<subseteq> {Unrelated} \\<longrightarrow>\n                         \\<not> (\\<lambda>x. default_node_properties) `\n                                (undirected_reachable\n                                  (add_edge x1 x2\n                                    (delete_edges\n\\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr>\nf))\n                                  n \\<inter>\n                                 {x. x \\<noteq> vertex_2} \\<inter>\n                                 {x. x \\<noteq> vertex_1})\n                                \\<subseteq> {Unrelated}))))) \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             (delete_edges\n               \\<lparr>nodes = {vertex_1, vertex_2},\n                  edges = {(vertex_1, vertex_2)}\\<rparr>\n               f)\n             vertex_1 \\<inter>\n            {vertex_2})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             (delete_edges\n               \\<lparr>nodes = {vertex_1, vertex_2},\n                  edges = {(vertex_1, vertex_2)}\\<rparr>\n               f)\n             vertex_1 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {vertex_1})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>x. default_node_properties) `\n           (undirected_reachable\n             (delete_edges\n               \\<lparr>nodes = {vertex_1, vertex_2},\n                  edges = {(vertex_1, vertex_2)}\\<rparr>\n               f)\n             vertex_1 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {x. x \\<noteq> vertex_1})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             (delete_edges\n               \\<lparr>nodes = {vertex_1, vertex_2},\n                  edges = {(vertex_1, vertex_2)}\\<rparr>\n               f)\n             vertex_2 \\<inter>\n            {vertex_2})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             (delete_edges\n               \\<lparr>nodes = {vertex_1, vertex_2},\n                  edges = {(vertex_1, vertex_2)}\\<rparr>\n               f)\n             vertex_2 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {vertex_1})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>x. default_node_properties) `\n           (undirected_reachable\n             (delete_edges\n               \\<lparr>nodes = {vertex_1, vertex_2},\n                  edges = {(vertex_1, vertex_2)}\\<rparr>\n               f)\n             vertex_2 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {x. x \\<noteq> vertex_1})\n           \\<subseteq> {Unrelated} \\<and>\n           i \\<in> snd ` f \\<and>\n           (vertex_1 \\<noteq> i \\<longrightarrow>\n            (\\<lambda>a. otherbot) `\n            (undirected_reachable\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              vertex_1 \\<inter>\n             {i})\n            \\<subseteq> {Unrelated} \\<and>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              vertex_1 \\<inter>\n             {x. x \\<noteq> i} \\<inter>\n             {vertex_2})\n            \\<subseteq> {Unrelated} \\<and>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              vertex_1 \\<inter>\n             {x. x \\<noteq> i} \\<inter>\n             {x. x \\<noteq> vertex_2} \\<inter>\n             {vertex_1})\n            \\<subseteq> {Unrelated} \\<and>\n            (\\<lambda>x. default_node_properties) `\n            (undirected_reachable\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              vertex_1 \\<inter>\n             {x. x \\<noteq> i} \\<inter>\n             {x. x \\<noteq> vertex_2} \\<inter>\n             {x. x \\<noteq> vertex_1})\n            \\<subseteq> {Unrelated}) \\<and>\n           (vertex_2 \\<noteq> i \\<longrightarrow>\n            (\\<lambda>a. otherbot) `\n            (undirected_reachable\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              vertex_2 \\<inter>\n             {i})\n            \\<subseteq> {Unrelated} \\<and>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              vertex_2 \\<inter>\n             {x. x \\<noteq> i} \\<inter>\n             {vertex_2})\n            \\<subseteq> {Unrelated} \\<and>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              vertex_2 \\<inter>\n             {x. x \\<noteq> i} \\<inter>\n             {x. x \\<noteq> vertex_2} \\<inter>\n             {vertex_1})\n            \\<subseteq> {Unrelated} \\<and>\n            (\\<lambda>x. default_node_properties) `\n            (undirected_reachable\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              vertex_2 \\<inter>\n             {x. x \\<noteq> i} \\<inter>\n             {x. x \\<noteq> vertex_2} \\<inter>\n             {x. x \\<noteq> vertex_1})\n            \\<subseteq> {Unrelated}))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         \\<lparr>nodes = {vertex_1, vertex_2},\n            edges = {(vertex_1, vertex_2)}\\<rparr>\n         vertex_2 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {vertex_1})\n       \\<subseteq> {Unrelated} \\<longrightarrow>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         \\<lparr>nodes = {vertex_1, vertex_2},\n            edges = {(vertex_1, vertex_2)}\\<rparr>\n         vertex_2 \\<inter>\n        {vertex_2})\n       \\<subseteq> {Unrelated} \\<longrightarrow>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         \\<lparr>nodes = {vertex_1, vertex_2},\n            edges = {(vertex_1, vertex_2)}\\<rparr>\n         vertex_1 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {vertex_1})\n       \\<subseteq> {Unrelated} \\<longrightarrow>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         \\<lparr>nodes = {vertex_1, vertex_2},\n            edges = {(vertex_1, vertex_2)}\\<rparr>\n         vertex_1 \\<inter>\n        {vertex_2})\n       \\<subseteq> {Unrelated} \\<longrightarrow>\n       (\\<lambda>x. default_node_properties) `\n       (undirected_reachable\n         \\<lparr>nodes = {vertex_1, vertex_2},\n            edges = {(vertex_1, vertex_2)}\\<rparr>\n         vertex_1 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {x. x \\<noteq> vertex_1})\n       \\<subseteq> {Unrelated} \\<longrightarrow>\n       \\<not> (\\<lambda>x. default_node_properties) `\n              (undirected_reachable\n                \\<lparr>nodes = {vertex_1, vertex_2},\n                   edges = {(vertex_1, vertex_2)}\\<rparr>\n                vertex_2 \\<inter>\n               {x. x \\<noteq> vertex_2} \\<inter>\n               {x. x \\<noteq> vertex_1})\n              \\<subseteq> {Unrelated}\n 2. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       \\<exists>i f.\n          f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n          ((\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_2 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {vertex_1})\n           \\<subseteq> {Unrelated} \\<longrightarrow>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_2 \\<inter>\n            {vertex_2})\n           \\<subseteq> {Unrelated} \\<longrightarrow>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {vertex_1})\n           \\<subseteq> {Unrelated} \\<longrightarrow>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {vertex_2})\n           \\<subseteq> {Unrelated} \\<longrightarrow>\n           (\\<lambda>x. default_node_properties) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {x. x \\<noteq> vertex_1})\n           \\<subseteq> {Unrelated} \\<longrightarrow>\n           \\<not> (\\<lambda>x. default_node_properties) `\n                  (undirected_reachable\n                    \\<lparr>nodes = {vertex_1, vertex_2},\n                       edges = {(vertex_1, vertex_2)}\\<rparr>\n                    vertex_2 \\<inter>\n                   {x. x \\<noteq> vertex_2} \\<inter>\n                   {x. x \\<noteq> vertex_1})\n                  \\<subseteq> {Unrelated}) \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {vertex_2})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>x. default_node_properties) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {x. x \\<noteq> vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {vertex_2})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>x. default_node_properties) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {x. x \\<noteq> vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<forall>x\\<in>f.\n              \\<forall>x1 x2.\n                 x = (x1, x2) \\<longrightarrow>\n                 (\\<exists>n\\<in>nodes\n                                  (add_edge x1 x2\n                                    (delete_edges\n\\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr>\nf)).\n                     (n = vertex_1 \\<longrightarrow>\n                      (\\<lambda>a. Interfering) `\n                      (undirected_reachable\n                        (add_edge x1 x2\n                          (delete_edges\n                            \\<lparr>nodes = {vertex_1, vertex_2},\n                               edges = {(vertex_1, vertex_2)}\\<rparr>\n                            f))\n                        vertex_1 \\<inter>\n                       {x. x \\<noteq> vertex_2} \\<inter>\n                       {vertex_1})\n                      \\<subseteq> {Unrelated} \\<longrightarrow>\n                      (\\<lambda>a. Interfering) `\n                      (undirected_reachable\n                        (add_edge x1 x2\n                          (delete_edges\n                            \\<lparr>nodes = {vertex_1, vertex_2},\n                               edges = {(vertex_1, vertex_2)}\\<rparr>\n                            f))\n                        vertex_1 \\<inter>\n                       {vertex_2})\n                      \\<subseteq> {Unrelated} \\<longrightarrow>\n                      \\<not> (\\<lambda>x. default_node_properties) `\n                             (undirected_reachable\n                               (add_edge x1 x2\n                                 (delete_edges\n                                   \\<lparr>nodes = {vertex_1, vertex_2},\nedges = {(vertex_1, vertex_2)}\\<rparr>\n                                   f))\n                               vertex_1 \\<inter>\n                              {x. x \\<noteq> vertex_2} \\<inter>\n                              {x. x \\<noteq> vertex_1})\n                             \\<subseteq> {Unrelated}) \\<and>\n                     (n \\<noteq> vertex_1 \\<longrightarrow>\n                      (n = vertex_2 \\<longrightarrow>\n                       (\\<lambda>a. Interfering) `\n                       (undirected_reachable\n                         (add_edge x1 x2\n                           (delete_edges\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             f))\n                         vertex_2 \\<inter>\n                        {x. x \\<noteq> vertex_2} \\<inter>\n                        {vertex_1})\n                       \\<subseteq> {Unrelated} \\<longrightarrow>\n                       (\\<lambda>a. Interfering) `\n                       (undirected_reachable\n                         (add_edge x1 x2\n                           (delete_edges\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             f))\n                         vertex_2 \\<inter>\n                        {vertex_2})\n                       \\<subseteq> {Unrelated} \\<longrightarrow>\n                       \\<not> (\\<lambda>x. default_node_properties) `\n                              (undirected_reachable\n                                (add_edge x1 x2\n                                  (delete_edges\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    f))\n                                vertex_2 \\<inter>\n                               {x. x \\<noteq> vertex_2} \\<inter>\n                               {x. x \\<noteq> vertex_1})\n                              \\<subseteq> {Unrelated}) \\<and>\n                      (n \\<noteq> vertex_2 \\<longrightarrow>\n                       default_node_properties = Interfering \\<and>\n                       ((\\<lambda>a. Interfering) `\n                        (undirected_reachable\n                          (add_edge x1 x2\n                            (delete_edges\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              f))\n                          n \\<inter>\n                         {x. x \\<noteq> vertex_2} \\<inter>\n                         {vertex_1})\n                        \\<subseteq> {Unrelated} \\<longrightarrow>\n                        (\\<lambda>a. Interfering) `\n                        (undirected_reachable\n                          (add_edge x1 x2\n                            (delete_edges\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              f))\n                          n \\<inter>\n                         {vertex_2})\n                        \\<subseteq> {Unrelated} \\<longrightarrow>\n                        \\<not> (\\<lambda>x. default_node_properties) `\n                               (undirected_reachable\n                                 (add_edge x1 x2\n                                   (delete_edges\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     f))\n                                 n \\<inter>\n                                {x. x \\<noteq> vertex_2} \\<inter>\n                                {x. x \\<noteq> vertex_1})\n                               \\<subseteq> {Unrelated}))))) \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {vertex_2})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>x. default_node_properties) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {x. x \\<noteq> vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {vertex_2})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>x. default_node_properties) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {x. x \\<noteq> vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          i \\<in> snd ` f \\<and>\n          (vertex_1 \\<noteq> i \\<longrightarrow>\n           (\\<lambda>a. otherbot) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {i})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {x. x \\<noteq> i} \\<inter>\n            {vertex_2})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {x. x \\<noteq> i} \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {vertex_1})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>x. default_node_properties) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {x. x \\<noteq> i} \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {x. x \\<noteq> vertex_1})\n           \\<subseteq> {Unrelated}) \\<and>\n          (vertex_2 \\<noteq> i \\<longrightarrow>\n           (\\<lambda>a. otherbot) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_2 \\<inter>\n            {i})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_2 \\<inter>\n            {x. x \\<noteq> i} \\<inter>\n            {vertex_2})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_2 \\<inter>\n            {x. x \\<noteq> i} \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {vertex_1})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>x. default_node_properties) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_2 \\<inter>\n            {x. x \\<noteq> i} \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {x. x \\<noteq> vertex_1})\n           \\<subseteq> {Unrelated})", "apply(simp add: unique_default_example)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       \\<exists>i f.\n          f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n          ((\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_2 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {vertex_1})\n           \\<subseteq> {Unrelated} \\<longrightarrow>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_2 \\<inter>\n            {vertex_2})\n           \\<subseteq> {Unrelated} \\<longrightarrow>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {vertex_1})\n           \\<subseteq> {Unrelated} \\<longrightarrow>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {vertex_2})\n           \\<subseteq> {Unrelated} \\<longrightarrow>\n           (\\<lambda>x. default_node_properties) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {x. x \\<noteq> vertex_1})\n           \\<subseteq> {Unrelated} \\<longrightarrow>\n           \\<not> (\\<lambda>x. default_node_properties) `\n                  (undirected_reachable\n                    \\<lparr>nodes = {vertex_1, vertex_2},\n                       edges = {(vertex_1, vertex_2)}\\<rparr>\n                    vertex_2 \\<inter>\n                   {x. x \\<noteq> vertex_2} \\<inter>\n                   {x. x \\<noteq> vertex_1})\n                  \\<subseteq> {Unrelated}) \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {vertex_2})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>x. default_node_properties) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {x. x \\<noteq> vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {vertex_2})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>x. default_node_properties) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {x. x \\<noteq> vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<forall>x\\<in>f.\n              \\<forall>x1 x2.\n                 x = (x1, x2) \\<longrightarrow>\n                 (\\<exists>n\\<in>nodes\n                                  (add_edge x1 x2\n                                    (delete_edges\n\\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr>\nf)).\n                     (n = vertex_1 \\<longrightarrow>\n                      (\\<lambda>a. Interfering) `\n                      (undirected_reachable\n                        (add_edge x1 x2\n                          (delete_edges\n                            \\<lparr>nodes = {vertex_1, vertex_2},\n                               edges = {(vertex_1, vertex_2)}\\<rparr>\n                            f))\n                        vertex_1 \\<inter>\n                       {x. x \\<noteq> vertex_2} \\<inter>\n                       {vertex_1})\n                      \\<subseteq> {Unrelated} \\<longrightarrow>\n                      (\\<lambda>a. Interfering) `\n                      (undirected_reachable\n                        (add_edge x1 x2\n                          (delete_edges\n                            \\<lparr>nodes = {vertex_1, vertex_2},\n                               edges = {(vertex_1, vertex_2)}\\<rparr>\n                            f))\n                        vertex_1 \\<inter>\n                       {vertex_2})\n                      \\<subseteq> {Unrelated} \\<longrightarrow>\n                      \\<not> (\\<lambda>x. default_node_properties) `\n                             (undirected_reachable\n                               (add_edge x1 x2\n                                 (delete_edges\n                                   \\<lparr>nodes = {vertex_1, vertex_2},\nedges = {(vertex_1, vertex_2)}\\<rparr>\n                                   f))\n                               vertex_1 \\<inter>\n                              {x. x \\<noteq> vertex_2} \\<inter>\n                              {x. x \\<noteq> vertex_1})\n                             \\<subseteq> {Unrelated}) \\<and>\n                     (n \\<noteq> vertex_1 \\<longrightarrow>\n                      (n = vertex_2 \\<longrightarrow>\n                       (\\<lambda>a. Interfering) `\n                       (undirected_reachable\n                         (add_edge x1 x2\n                           (delete_edges\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             f))\n                         vertex_2 \\<inter>\n                        {x. x \\<noteq> vertex_2} \\<inter>\n                        {vertex_1})\n                       \\<subseteq> {Unrelated} \\<longrightarrow>\n                       (\\<lambda>a. Interfering) `\n                       (undirected_reachable\n                         (add_edge x1 x2\n                           (delete_edges\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             f))\n                         vertex_2 \\<inter>\n                        {vertex_2})\n                       \\<subseteq> {Unrelated} \\<longrightarrow>\n                       \\<not> (\\<lambda>x. default_node_properties) `\n                              (undirected_reachable\n                                (add_edge x1 x2\n                                  (delete_edges\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    f))\n                                vertex_2 \\<inter>\n                               {x. x \\<noteq> vertex_2} \\<inter>\n                               {x. x \\<noteq> vertex_1})\n                              \\<subseteq> {Unrelated}) \\<and>\n                      (n \\<noteq> vertex_2 \\<longrightarrow>\n                       default_node_properties = Interfering \\<and>\n                       ((\\<lambda>a. Interfering) `\n                        (undirected_reachable\n                          (add_edge x1 x2\n                            (delete_edges\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              f))\n                          n \\<inter>\n                         {x. x \\<noteq> vertex_2} \\<inter>\n                         {vertex_1})\n                        \\<subseteq> {Unrelated} \\<longrightarrow>\n                        (\\<lambda>a. Interfering) `\n                        (undirected_reachable\n                          (add_edge x1 x2\n                            (delete_edges\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              f))\n                          n \\<inter>\n                         {vertex_2})\n                        \\<subseteq> {Unrelated} \\<longrightarrow>\n                        \\<not> (\\<lambda>x. default_node_properties) `\n                               (undirected_reachable\n                                 (add_edge x1 x2\n                                   (delete_edges\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     f))\n                                 n \\<inter>\n                                {x. x \\<noteq> vertex_2} \\<inter>\n                                {x. x \\<noteq> vertex_1})\n                               \\<subseteq> {Unrelated}))))) \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {vertex_2})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>x. default_node_properties) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {x. x \\<noteq> vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {vertex_2})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>x. default_node_properties) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {x. x \\<noteq> vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          i \\<in> snd ` f \\<and>\n          (vertex_1 \\<noteq> i \\<longrightarrow>\n           (\\<lambda>a. otherbot) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {i})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {x. x \\<noteq> i} \\<inter>\n            {vertex_2})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {x. x \\<noteq> i} \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {vertex_1})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>x. default_node_properties) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {x. x \\<noteq> i} \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {x. x \\<noteq> vertex_1})\n           \\<subseteq> {Unrelated}) \\<and>\n          (vertex_2 \\<noteq> i \\<longrightarrow>\n           (\\<lambda>a. otherbot) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_2 \\<inter>\n            {i})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_2 \\<inter>\n            {x. x \\<noteq> i} \\<inter>\n            {vertex_2})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_2 \\<inter>\n            {x. x \\<noteq> i} \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {vertex_1})\n           \\<subseteq> {Unrelated} \\<and>\n           (\\<lambda>x. default_node_properties) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_2 \\<inter>\n            {x. x \\<noteq> i} \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {x. x \\<noteq> vertex_1})\n           \\<subseteq> {Unrelated})", "apply(rule_tac x=\"vertex_2\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       \\<exists>f\\<subseteq>{(vertex_1, vertex_2)}.\n          ((\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_2 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {vertex_1})\n           \\<subseteq> {Unrelated} \\<longrightarrow>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_2 \\<inter>\n            {vertex_2})\n           \\<subseteq> {Unrelated} \\<longrightarrow>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {vertex_1})\n           \\<subseteq> {Unrelated} \\<longrightarrow>\n           (\\<lambda>a. Interfering) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {vertex_2})\n           \\<subseteq> {Unrelated} \\<longrightarrow>\n           (\\<lambda>x. default_node_properties) `\n           (undirected_reachable\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             vertex_1 \\<inter>\n            {x. x \\<noteq> vertex_2} \\<inter>\n            {x. x \\<noteq> vertex_1})\n           \\<subseteq> {Unrelated} \\<longrightarrow>\n           \\<not> (\\<lambda>x. default_node_properties) `\n                  (undirected_reachable\n                    \\<lparr>nodes = {vertex_1, vertex_2},\n                       edges = {(vertex_1, vertex_2)}\\<rparr>\n                    vertex_2 \\<inter>\n                   {x. x \\<noteq> vertex_2} \\<inter>\n                   {x. x \\<noteq> vertex_1})\n                  \\<subseteq> {Unrelated}) \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {vertex_2})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>x. default_node_properties) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {x. x \\<noteq> vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {vertex_2})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>x. default_node_properties) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {x. x \\<noteq> vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<forall>x\\<in>f.\n              \\<forall>x1 x2.\n                 x = (x1, x2) \\<longrightarrow>\n                 (\\<exists>n\\<in>nodes\n                                  (add_edge x1 x2\n                                    (delete_edges\n\\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr>\nf)).\n                     (n = vertex_1 \\<longrightarrow>\n                      (\\<lambda>a. Interfering) `\n                      (undirected_reachable\n                        (add_edge x1 x2\n                          (delete_edges\n                            \\<lparr>nodes = {vertex_1, vertex_2},\n                               edges = {(vertex_1, vertex_2)}\\<rparr>\n                            f))\n                        vertex_1 \\<inter>\n                       {x. x \\<noteq> vertex_2} \\<inter>\n                       {vertex_1})\n                      \\<subseteq> {Unrelated} \\<longrightarrow>\n                      (\\<lambda>a. Interfering) `\n                      (undirected_reachable\n                        (add_edge x1 x2\n                          (delete_edges\n                            \\<lparr>nodes = {vertex_1, vertex_2},\n                               edges = {(vertex_1, vertex_2)}\\<rparr>\n                            f))\n                        vertex_1 \\<inter>\n                       {vertex_2})\n                      \\<subseteq> {Unrelated} \\<longrightarrow>\n                      \\<not> (\\<lambda>x. default_node_properties) `\n                             (undirected_reachable\n                               (add_edge x1 x2\n                                 (delete_edges\n                                   \\<lparr>nodes = {vertex_1, vertex_2},\nedges = {(vertex_1, vertex_2)}\\<rparr>\n                                   f))\n                               vertex_1 \\<inter>\n                              {x. x \\<noteq> vertex_2} \\<inter>\n                              {x. x \\<noteq> vertex_1})\n                             \\<subseteq> {Unrelated}) \\<and>\n                     (n \\<noteq> vertex_1 \\<longrightarrow>\n                      (n = vertex_2 \\<longrightarrow>\n                       (\\<lambda>a. Interfering) `\n                       (undirected_reachable\n                         (add_edge x1 x2\n                           (delete_edges\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             f))\n                         vertex_2 \\<inter>\n                        {x. x \\<noteq> vertex_2} \\<inter>\n                        {vertex_1})\n                       \\<subseteq> {Unrelated} \\<longrightarrow>\n                       (\\<lambda>a. Interfering) `\n                       (undirected_reachable\n                         (add_edge x1 x2\n                           (delete_edges\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             f))\n                         vertex_2 \\<inter>\n                        {vertex_2})\n                       \\<subseteq> {Unrelated} \\<longrightarrow>\n                       \\<not> (\\<lambda>x. default_node_properties) `\n                              (undirected_reachable\n                                (add_edge x1 x2\n                                  (delete_edges\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    f))\n                                vertex_2 \\<inter>\n                               {x. x \\<noteq> vertex_2} \\<inter>\n                               {x. x \\<noteq> vertex_1})\n                              \\<subseteq> {Unrelated}) \\<and>\n                      (n \\<noteq> vertex_2 \\<longrightarrow>\n                       default_node_properties = Interfering \\<and>\n                       ((\\<lambda>a. Interfering) `\n                        (undirected_reachable\n                          (add_edge x1 x2\n                            (delete_edges\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              f))\n                          n \\<inter>\n                         {x. x \\<noteq> vertex_2} \\<inter>\n                         {vertex_1})\n                        \\<subseteq> {Unrelated} \\<longrightarrow>\n                        (\\<lambda>a. Interfering) `\n                        (undirected_reachable\n                          (add_edge x1 x2\n                            (delete_edges\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              f))\n                          n \\<inter>\n                         {vertex_2})\n                        \\<subseteq> {Unrelated} \\<longrightarrow>\n                        \\<not> (\\<lambda>x. default_node_properties) `\n                               (undirected_reachable\n                                 (add_edge x1 x2\n                                   (delete_edges\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     f))\n                                 n \\<inter>\n                                {x. x \\<noteq> vertex_2} \\<inter>\n                                {x. x \\<noteq> vertex_1})\n                               \\<subseteq> {Unrelated}))))) \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {vertex_2})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>x. default_node_properties) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_1 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {x. x \\<noteq> vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {vertex_2})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>x. default_node_properties) `\n          (undirected_reachable\n            (delete_edges\n              \\<lparr>nodes = {vertex_1, vertex_2},\n                 edges = {(vertex_1, vertex_2)}\\<rparr>\n              f)\n            vertex_2 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {x. x \\<noteq> vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          vertex_2 \\<in> snd ` f \\<and>\n          (\\<lambda>a. otherbot) `\n          (undirected_reachable\n            \\<lparr>nodes = {vertex_1, vertex_2},\n               edges = {(vertex_1, vertex_2)}\\<rparr>\n            vertex_1 \\<inter>\n           {vertex_2})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>a. Interfering) `\n          (undirected_reachable\n            \\<lparr>nodes = {vertex_1, vertex_2},\n               edges = {(vertex_1, vertex_2)}\\<rparr>\n            vertex_1 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {vertex_1})\n          \\<subseteq> {Unrelated} \\<and>\n          (\\<lambda>x. default_node_properties) `\n          (undirected_reachable\n            \\<lparr>nodes = {vertex_1, vertex_2},\n               edges = {(vertex_1, vertex_2)}\\<rparr>\n            vertex_1 \\<inter>\n           {x. x \\<noteq> vertex_2} \\<inter>\n           {x. x \\<noteq> vertex_1})\n          \\<subseteq> {Unrelated}", "apply(rule_tac x=\"{(vertex_1,vertex_2)}\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       ((\\<lambda>a. Interfering) `\n        (undirected_reachable\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_1, vertex_2)}\\<rparr>\n          vertex_2 \\<inter>\n         {x. x \\<noteq> vertex_2} \\<inter>\n         {vertex_1})\n        \\<subseteq> {Unrelated} \\<longrightarrow>\n        (\\<lambda>a. Interfering) `\n        (undirected_reachable\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_1, vertex_2)}\\<rparr>\n          vertex_2 \\<inter>\n         {vertex_2})\n        \\<subseteq> {Unrelated} \\<longrightarrow>\n        (\\<lambda>a. Interfering) `\n        (undirected_reachable\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_1, vertex_2)}\\<rparr>\n          vertex_1 \\<inter>\n         {x. x \\<noteq> vertex_2} \\<inter>\n         {vertex_1})\n        \\<subseteq> {Unrelated} \\<longrightarrow>\n        (\\<lambda>a. Interfering) `\n        (undirected_reachable\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_1, vertex_2)}\\<rparr>\n          vertex_1 \\<inter>\n         {vertex_2})\n        \\<subseteq> {Unrelated} \\<longrightarrow>\n        (\\<lambda>x. default_node_properties) `\n        (undirected_reachable\n          \\<lparr>nodes = {vertex_1, vertex_2},\n             edges = {(vertex_1, vertex_2)}\\<rparr>\n          vertex_1 \\<inter>\n         {x. x \\<noteq> vertex_2} \\<inter>\n         {x. x \\<noteq> vertex_1})\n        \\<subseteq> {Unrelated} \\<longrightarrow>\n        \\<not> (\\<lambda>x. default_node_properties) `\n               (undirected_reachable\n                 \\<lparr>nodes = {vertex_1, vertex_2},\n                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                 vertex_2 \\<inter>\n                {x. x \\<noteq> vertex_2} \\<inter>\n                {x. x \\<noteq> vertex_1})\n               \\<subseteq> {Unrelated}) \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_1 \\<inter>\n        {vertex_2})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_1 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>x. default_node_properties) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_1 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {x. x \\<noteq> vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {vertex_2})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>x. default_node_properties) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {x. x \\<noteq> vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<exists>n\\<in>nodes\n                        (add_edge vertex_1 vertex_2\n                          (delete_edges\n                            \\<lparr>nodes = {vertex_1, vertex_2},\n                               edges = {(vertex_1, vertex_2)}\\<rparr>\n                            {(vertex_1, vertex_2)})).\n           (n = vertex_1 \\<longrightarrow>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              (add_edge vertex_1 vertex_2\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  {(vertex_1, vertex_2)}))\n              vertex_1 \\<inter>\n             {x. x \\<noteq> vertex_2} \\<inter>\n             {vertex_1})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              (add_edge vertex_1 vertex_2\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  {(vertex_1, vertex_2)}))\n              vertex_1 \\<inter>\n             {vertex_2})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            \\<not> (\\<lambda>x. default_node_properties) `\n                   (undirected_reachable\n                     (add_edge vertex_1 vertex_2\n                       (delete_edges\n                         \\<lparr>nodes = {vertex_1, vertex_2},\n                            edges = {(vertex_1, vertex_2)}\\<rparr>\n                         {(vertex_1, vertex_2)}))\n                     vertex_1 \\<inter>\n                    {x. x \\<noteq> vertex_2} \\<inter>\n                    {x. x \\<noteq> vertex_1})\n                   \\<subseteq> {Unrelated}) \\<and>\n           (n \\<noteq> vertex_1 \\<longrightarrow>\n            (n = vertex_2 \\<longrightarrow>\n             (\\<lambda>a. Interfering) `\n             (undirected_reachable\n               (add_edge vertex_1 vertex_2\n                 (delete_edges\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   {(vertex_1, vertex_2)}))\n               vertex_2 \\<inter>\n              {x. x \\<noteq> vertex_2} \\<inter>\n              {vertex_1})\n             \\<subseteq> {Unrelated} \\<longrightarrow>\n             (\\<lambda>a. Interfering) `\n             (undirected_reachable\n               (add_edge vertex_1 vertex_2\n                 (delete_edges\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   {(vertex_1, vertex_2)}))\n               vertex_2 \\<inter>\n              {vertex_2})\n             \\<subseteq> {Unrelated} \\<longrightarrow>\n             \\<not> (\\<lambda>x. default_node_properties) `\n                    (undirected_reachable\n                      (add_edge vertex_1 vertex_2\n                        (delete_edges\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {(vertex_1, vertex_2)}\\<rparr>\n                          {(vertex_1, vertex_2)}))\n                      vertex_2 \\<inter>\n                     {x. x \\<noteq> vertex_2} \\<inter>\n                     {x. x \\<noteq> vertex_1})\n                    \\<subseteq> {Unrelated}) \\<and>\n            (n \\<noteq> vertex_2 \\<longrightarrow>\n             default_node_properties = Interfering \\<and>\n             ((\\<lambda>a. Interfering) `\n              (undirected_reachable\n                (add_edge vertex_1 vertex_2\n                  (delete_edges\n                    \\<lparr>nodes = {vertex_1, vertex_2},\n                       edges = {(vertex_1, vertex_2)}\\<rparr>\n                    {(vertex_1, vertex_2)}))\n                n \\<inter>\n               {x. x \\<noteq> vertex_2} \\<inter>\n               {vertex_1})\n              \\<subseteq> {Unrelated} \\<longrightarrow>\n              (\\<lambda>a. Interfering) `\n              (undirected_reachable\n                (add_edge vertex_1 vertex_2\n                  (delete_edges\n                    \\<lparr>nodes = {vertex_1, vertex_2},\n                       edges = {(vertex_1, vertex_2)}\\<rparr>\n                    {(vertex_1, vertex_2)}))\n                n \\<inter>\n               {vertex_2})\n              \\<subseteq> {Unrelated} \\<longrightarrow>\n              \\<not> (\\<lambda>x. default_node_properties) `\n                     (undirected_reachable\n                       (add_edge vertex_1 vertex_2\n                         (delete_edges\n                           \\<lparr>nodes = {vertex_1, vertex_2},\n                              edges = {(vertex_1, vertex_2)}\\<rparr>\n                           {(vertex_1, vertex_2)}))\n                       n \\<inter>\n                      {x. x \\<noteq> vertex_2} \\<inter>\n                      {x. x \\<noteq> vertex_1})\n                     \\<subseteq> {Unrelated})))) \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_1 \\<inter>\n        {vertex_2})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_1 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>x. default_node_properties) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_1 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {x. x \\<noteq> vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {vertex_2})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>x. default_node_properties) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {x. x \\<noteq> vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. otherbot) `\n       (undirected_reachable\n         \\<lparr>nodes = {vertex_1, vertex_2},\n            edges = {(vertex_1, vertex_2)}\\<rparr>\n         vertex_1 \\<inter>\n        {vertex_2})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         \\<lparr>nodes = {vertex_1, vertex_2},\n            edges = {(vertex_1, vertex_2)}\\<rparr>\n         vertex_1 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>x. default_node_properties) `\n       (undirected_reachable\n         \\<lparr>nodes = {vertex_1, vertex_2},\n            edges = {(vertex_1, vertex_2)}\\<rparr>\n         vertex_1 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {x. x \\<noteq> vertex_1})\n       \\<subseteq> {Unrelated}", "apply(simp add: unique_default_example)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_1 \\<inter>\n        {vertex_2})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_1 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>x. default_node_properties) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_1 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {x. x \\<noteq> vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {vertex_2})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>x. default_node_properties) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {x. x \\<noteq> vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<exists>n\\<in>nodes\n                        (add_edge vertex_1 vertex_2\n                          (delete_edges\n                            \\<lparr>nodes = {vertex_1, vertex_2},\n                               edges = {(vertex_1, vertex_2)}\\<rparr>\n                            {(vertex_1, vertex_2)})).\n           (n = vertex_1 \\<longrightarrow>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              (add_edge vertex_1 vertex_2\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  {(vertex_1, vertex_2)}))\n              vertex_1 \\<inter>\n             {x. x \\<noteq> vertex_2} \\<inter>\n             {vertex_1})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              (add_edge vertex_1 vertex_2\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  {(vertex_1, vertex_2)}))\n              vertex_1 \\<inter>\n             {vertex_2})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            \\<not> (\\<lambda>x. default_node_properties) `\n                   (undirected_reachable\n                     (add_edge vertex_1 vertex_2\n                       (delete_edges\n                         \\<lparr>nodes = {vertex_1, vertex_2},\n                            edges = {(vertex_1, vertex_2)}\\<rparr>\n                         {(vertex_1, vertex_2)}))\n                     vertex_1 \\<inter>\n                    {x. x \\<noteq> vertex_2} \\<inter>\n                    {x. x \\<noteq> vertex_1})\n                   \\<subseteq> {Unrelated}) \\<and>\n           (n \\<noteq> vertex_1 \\<longrightarrow>\n            (n = vertex_2 \\<longrightarrow>\n             (\\<lambda>a. Interfering) `\n             (undirected_reachable\n               (add_edge vertex_1 vertex_2\n                 (delete_edges\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   {(vertex_1, vertex_2)}))\n               vertex_2 \\<inter>\n              {x. x \\<noteq> vertex_2} \\<inter>\n              {vertex_1})\n             \\<subseteq> {Unrelated} \\<longrightarrow>\n             (\\<lambda>a. Interfering) `\n             (undirected_reachable\n               (add_edge vertex_1 vertex_2\n                 (delete_edges\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   {(vertex_1, vertex_2)}))\n               vertex_2 \\<inter>\n              {vertex_2})\n             \\<subseteq> {Unrelated} \\<longrightarrow>\n             \\<not> (\\<lambda>x. default_node_properties) `\n                    (undirected_reachable\n                      (add_edge vertex_1 vertex_2\n                        (delete_edges\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {(vertex_1, vertex_2)}\\<rparr>\n                          {(vertex_1, vertex_2)}))\n                      vertex_2 \\<inter>\n                     {x. x \\<noteq> vertex_2} \\<inter>\n                     {x. x \\<noteq> vertex_1})\n                    \\<subseteq> {Unrelated}) \\<and>\n            (n \\<noteq> vertex_2 \\<longrightarrow>\n             default_node_properties = Interfering \\<and>\n             ((\\<lambda>a. Interfering) `\n              (undirected_reachable\n                (add_edge vertex_1 vertex_2\n                  (delete_edges\n                    \\<lparr>nodes = {vertex_1, vertex_2},\n                       edges = {(vertex_1, vertex_2)}\\<rparr>\n                    {(vertex_1, vertex_2)}))\n                n \\<inter>\n               {x. x \\<noteq> vertex_2} \\<inter>\n               {vertex_1})\n              \\<subseteq> {Unrelated} \\<longrightarrow>\n              (\\<lambda>a. Interfering) `\n              (undirected_reachable\n                (add_edge vertex_1 vertex_2\n                  (delete_edges\n                    \\<lparr>nodes = {vertex_1, vertex_2},\n                       edges = {(vertex_1, vertex_2)}\\<rparr>\n                    {(vertex_1, vertex_2)}))\n                n \\<inter>\n               {vertex_2})\n              \\<subseteq> {Unrelated} \\<longrightarrow>\n              \\<not> (\\<lambda>x. default_node_properties) `\n                     (undirected_reachable\n                       (add_edge vertex_1 vertex_2\n                         (delete_edges\n                           \\<lparr>nodes = {vertex_1, vertex_2},\n                              edges = {(vertex_1, vertex_2)}\\<rparr>\n                           {(vertex_1, vertex_2)}))\n                       n \\<inter>\n                      {x. x \\<noteq> vertex_2} \\<inter>\n                      {x. x \\<noteq> vertex_1})\n                     \\<subseteq> {Unrelated})))) \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_1 \\<inter>\n        {vertex_2})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_1 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>x. default_node_properties) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_1 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {x. x \\<noteq> vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {vertex_2})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>x. default_node_properties) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {x. x \\<noteq> vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       otherbot = Unrelated", "apply(simp add: unique_default_example_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {vertex_2})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>x. default_node_properties) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {x. x \\<noteq> vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<exists>n\\<in>nodes\n                        (add_edge vertex_1 vertex_2\n                          (delete_edges\n                            \\<lparr>nodes = {vertex_1, vertex_2},\n                               edges = {(vertex_1, vertex_2)}\\<rparr>\n                            {(vertex_1, vertex_2)})).\n           (n = vertex_1 \\<longrightarrow>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              (add_edge vertex_1 vertex_2\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  {(vertex_1, vertex_2)}))\n              vertex_1 \\<inter>\n             {x. x \\<noteq> vertex_2} \\<inter>\n             {vertex_1})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              (add_edge vertex_1 vertex_2\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  {(vertex_1, vertex_2)}))\n              vertex_1 \\<inter>\n             {vertex_2})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            \\<not> (\\<lambda>x. default_node_properties) `\n                   (undirected_reachable\n                     (add_edge vertex_1 vertex_2\n                       (delete_edges\n                         \\<lparr>nodes = {vertex_1, vertex_2},\n                            edges = {(vertex_1, vertex_2)}\\<rparr>\n                         {(vertex_1, vertex_2)}))\n                     vertex_1 \\<inter>\n                    {x. x \\<noteq> vertex_2} \\<inter>\n                    {x. x \\<noteq> vertex_1})\n                   \\<subseteq> {Unrelated}) \\<and>\n           (n \\<noteq> vertex_1 \\<longrightarrow>\n            (n = vertex_2 \\<longrightarrow>\n             (\\<lambda>a. Interfering) `\n             (undirected_reachable\n               (add_edge vertex_1 vertex_2\n                 (delete_edges\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   {(vertex_1, vertex_2)}))\n               vertex_2 \\<inter>\n              {x. x \\<noteq> vertex_2} \\<inter>\n              {vertex_1})\n             \\<subseteq> {Unrelated} \\<longrightarrow>\n             (\\<lambda>a. Interfering) `\n             (undirected_reachable\n               (add_edge vertex_1 vertex_2\n                 (delete_edges\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   {(vertex_1, vertex_2)}))\n               vertex_2 \\<inter>\n              {vertex_2})\n             \\<subseteq> {Unrelated} \\<longrightarrow>\n             \\<not> (\\<lambda>x. default_node_properties) `\n                    (undirected_reachable\n                      (add_edge vertex_1 vertex_2\n                        (delete_edges\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {(vertex_1, vertex_2)}\\<rparr>\n                          {(vertex_1, vertex_2)}))\n                      vertex_2 \\<inter>\n                     {x. x \\<noteq> vertex_2} \\<inter>\n                     {x. x \\<noteq> vertex_1})\n                    \\<subseteq> {Unrelated}) \\<and>\n            (n \\<noteq> vertex_2 \\<longrightarrow>\n             default_node_properties = Interfering \\<and>\n             ((\\<lambda>a. Interfering) `\n              (undirected_reachable\n                (add_edge vertex_1 vertex_2\n                  (delete_edges\n                    \\<lparr>nodes = {vertex_1, vertex_2},\n                       edges = {(vertex_1, vertex_2)}\\<rparr>\n                    {(vertex_1, vertex_2)}))\n                n \\<inter>\n               {x. x \\<noteq> vertex_2} \\<inter>\n               {vertex_1})\n              \\<subseteq> {Unrelated} \\<longrightarrow>\n              (\\<lambda>a. Interfering) `\n              (undirected_reachable\n                (add_edge vertex_1 vertex_2\n                  (delete_edges\n                    \\<lparr>nodes = {vertex_1, vertex_2},\n                       edges = {(vertex_1, vertex_2)}\\<rparr>\n                    {(vertex_1, vertex_2)}))\n                n \\<inter>\n               {vertex_2})\n              \\<subseteq> {Unrelated} \\<longrightarrow>\n              \\<not> (\\<lambda>x. default_node_properties) `\n                     (undirected_reachable\n                       (add_edge vertex_1 vertex_2\n                         (delete_edges\n                           \\<lparr>nodes = {vertex_1, vertex_2},\n                              edges = {(vertex_1, vertex_2)}\\<rparr>\n                           {(vertex_1, vertex_2)}))\n                       n \\<inter>\n                      {x. x \\<noteq> vertex_2} \\<inter>\n                      {x. x \\<noteq> vertex_1})\n                     \\<subseteq> {Unrelated})))) \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {vertex_2})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>a. Interfering) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       (\\<lambda>x. default_node_properties) `\n       (undirected_reachable\n         (delete_edges\n           \\<lparr>nodes = {vertex_1, vertex_2},\n              edges = {(vertex_1, vertex_2)}\\<rparr>\n           {(vertex_1, vertex_2)})\n         vertex_2 \\<inter>\n        {x. x \\<noteq> vertex_2} \\<inter>\n        {x. x \\<noteq> vertex_1})\n       \\<subseteq> {Unrelated} \\<and>\n       otherbot = Unrelated", "apply(simp add: unique_default_example_3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       (\\<exists>n\\<in>nodes\n                        (add_edge vertex_1 vertex_2\n                          (delete_edges\n                            \\<lparr>nodes = {vertex_1, vertex_2},\n                               edges = {(vertex_1, vertex_2)}\\<rparr>\n                            {(vertex_1, vertex_2)})).\n           (n = vertex_1 \\<longrightarrow>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              (add_edge vertex_1 vertex_2\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  {(vertex_1, vertex_2)}))\n              vertex_1 \\<inter>\n             {x. x \\<noteq> vertex_2} \\<inter>\n             {vertex_1})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              (add_edge vertex_1 vertex_2\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  {(vertex_1, vertex_2)}))\n              vertex_1 \\<inter>\n             {vertex_2})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            \\<not> (\\<lambda>x. default_node_properties) `\n                   (undirected_reachable\n                     (add_edge vertex_1 vertex_2\n                       (delete_edges\n                         \\<lparr>nodes = {vertex_1, vertex_2},\n                            edges = {(vertex_1, vertex_2)}\\<rparr>\n                         {(vertex_1, vertex_2)}))\n                     vertex_1 \\<inter>\n                    {x. x \\<noteq> vertex_2} \\<inter>\n                    {x. x \\<noteq> vertex_1})\n                   \\<subseteq> {Unrelated}) \\<and>\n           (n \\<noteq> vertex_1 \\<longrightarrow>\n            (n = vertex_2 \\<longrightarrow>\n             (\\<lambda>a. Interfering) `\n             (undirected_reachable\n               (add_edge vertex_1 vertex_2\n                 (delete_edges\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   {(vertex_1, vertex_2)}))\n               vertex_2 \\<inter>\n              {x. x \\<noteq> vertex_2} \\<inter>\n              {vertex_1})\n             \\<subseteq> {Unrelated} \\<longrightarrow>\n             (\\<lambda>a. Interfering) `\n             (undirected_reachable\n               (add_edge vertex_1 vertex_2\n                 (delete_edges\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   {(vertex_1, vertex_2)}))\n               vertex_2 \\<inter>\n              {vertex_2})\n             \\<subseteq> {Unrelated} \\<longrightarrow>\n             \\<not> (\\<lambda>x. default_node_properties) `\n                    (undirected_reachable\n                      (add_edge vertex_1 vertex_2\n                        (delete_edges\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {(vertex_1, vertex_2)}\\<rparr>\n                          {(vertex_1, vertex_2)}))\n                      vertex_2 \\<inter>\n                     {x. x \\<noteq> vertex_2} \\<inter>\n                     {x. x \\<noteq> vertex_1})\n                    \\<subseteq> {Unrelated}) \\<and>\n            (n \\<noteq> vertex_2 \\<longrightarrow>\n             default_node_properties = Interfering \\<and>\n             ((\\<lambda>a. Interfering) `\n              (undirected_reachable\n                (add_edge vertex_1 vertex_2\n                  (delete_edges\n                    \\<lparr>nodes = {vertex_1, vertex_2},\n                       edges = {(vertex_1, vertex_2)}\\<rparr>\n                    {(vertex_1, vertex_2)}))\n                n \\<inter>\n               {x. x \\<noteq> vertex_2} \\<inter>\n               {vertex_1})\n              \\<subseteq> {Unrelated} \\<longrightarrow>\n              (\\<lambda>a. Interfering) `\n              (undirected_reachable\n                (add_edge vertex_1 vertex_2\n                  (delete_edges\n                    \\<lparr>nodes = {vertex_1, vertex_2},\n                       edges = {(vertex_1, vertex_2)}\\<rparr>\n                    {(vertex_1, vertex_2)}))\n                n \\<inter>\n               {vertex_2})\n              \\<subseteq> {Unrelated} \\<longrightarrow>\n              \\<not> (\\<lambda>x. default_node_properties) `\n                     (undirected_reachable\n                       (add_edge vertex_1 vertex_2\n                         (delete_edges\n                           \\<lparr>nodes = {vertex_1, vertex_2},\n                              edges = {(vertex_1, vertex_2)}\\<rparr>\n                           {(vertex_1, vertex_2)}))\n                       n \\<inter>\n                      {x. x \\<noteq> vertex_2} \\<inter>\n                      {x. x \\<noteq> vertex_1})\n                     \\<subseteq> {Unrelated})))) \\<and>\n       otherbot = Unrelated", "apply(simp add: unique_default_example_4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       (\\<exists>n\\<in>nodes\n                        (add_edge vertex_1 vertex_2\n                          (delete_edges\n                            \\<lparr>nodes = {vertex_1, vertex_2},\n                               edges = {(vertex_1, vertex_2)}\\<rparr>\n                            {(vertex_1, vertex_2)})).\n           n \\<noteq> vertex_1 \\<longrightarrow>\n           (n = vertex_2 \\<longrightarrow>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              (add_edge vertex_1 vertex_2\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  {(vertex_1, vertex_2)}))\n              vertex_2 \\<inter>\n             {x. x \\<noteq> vertex_2} \\<inter>\n             {vertex_1})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              (add_edge vertex_1 vertex_2\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  {(vertex_1, vertex_2)}))\n              vertex_2 \\<inter>\n             {vertex_2})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            \\<not> (\\<lambda>x. default_node_properties) `\n                   (undirected_reachable\n                     (add_edge vertex_1 vertex_2\n                       (delete_edges\n                         \\<lparr>nodes = {vertex_1, vertex_2},\n                            edges = {(vertex_1, vertex_2)}\\<rparr>\n                         {(vertex_1, vertex_2)}))\n                     vertex_2 \\<inter>\n                    {x. x \\<noteq> vertex_2} \\<inter>\n                    {x. x \\<noteq> vertex_1})\n                   \\<subseteq> {Unrelated}) \\<and>\n           (n \\<noteq> vertex_2 \\<longrightarrow>\n            default_node_properties = Interfering \\<and>\n            ((\\<lambda>a. Interfering) `\n             (undirected_reachable\n               (add_edge vertex_1 vertex_2\n                 (delete_edges\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   {(vertex_1, vertex_2)}))\n               n \\<inter>\n              {x. x \\<noteq> vertex_2} \\<inter>\n              {vertex_1})\n             \\<subseteq> {Unrelated} \\<longrightarrow>\n             (\\<lambda>a. Interfering) `\n             (undirected_reachable\n               (add_edge vertex_1 vertex_2\n                 (delete_edges\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   {(vertex_1, vertex_2)}))\n               n \\<inter>\n              {vertex_2})\n             \\<subseteq> {Unrelated} \\<longrightarrow>\n             \\<not> (\\<lambda>x. default_node_properties) `\n                    (undirected_reachable\n                      (add_edge vertex_1 vertex_2\n                        (delete_edges\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {(vertex_1, vertex_2)}\\<rparr>\n                          {(vertex_1, vertex_2)}))\n                      n \\<inter>\n                     {x. x \\<noteq> vertex_2} \\<inter>\n                     {x. x \\<noteq> vertex_1})\n                    \\<subseteq> {Unrelated}))) \\<and>\n       otherbot = Unrelated", "apply(simp add: unique_default_example_5)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> Interfering \\<Longrightarrow>\n       (\\<exists>n\\<in>nodes\n                        (add_edge vertex_1 vertex_2\n                          (delete_edges\n                            \\<lparr>nodes = {vertex_1, vertex_2},\n                               edges = {(vertex_1, vertex_2)}\\<rparr>\n                            {(vertex_1, vertex_2)})).\n           n \\<noteq> vertex_1 \\<longrightarrow>\n           n \\<noteq> vertex_2 \\<longrightarrow>\n           default_node_properties = Interfering \\<and>\n           ((\\<lambda>a. Interfering) `\n            (undirected_reachable\n              (add_edge vertex_1 vertex_2\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  {(vertex_1, vertex_2)}))\n              n \\<inter>\n             {x. x \\<noteq> vertex_2} \\<inter>\n             {vertex_1})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            (\\<lambda>a. Interfering) `\n            (undirected_reachable\n              (add_edge vertex_1 vertex_2\n                (delete_edges\n                  \\<lparr>nodes = {vertex_1, vertex_2},\n                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                  {(vertex_1, vertex_2)}))\n              n \\<inter>\n             {vertex_2})\n            \\<subseteq> {Unrelated} \\<longrightarrow>\n            \\<not> (\\<lambda>x. default_node_properties) `\n                   (undirected_reachable\n                     (add_edge vertex_1 vertex_2\n                       (delete_edges\n                         \\<lparr>nodes = {vertex_1, vertex_2},\n                            edges = {(vertex_1, vertex_2)}\\<rparr>\n                         {(vertex_1, vertex_2)}))\n                     n \\<inter>\n                    {x. x \\<noteq> vertex_2} \\<inter>\n                    {x. x \\<noteq> vertex_1})\n                   \\<subseteq> {Unrelated})) \\<and>\n       otherbot = Unrelated", "apply(case_tac otherbot)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       \\<lbrakk>otherbot \\<noteq> Interfering;\n        otherbot = Interfering\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>n\\<in>nodes\n    (add_edge vertex_1 vertex_2\n      (delete_edges\n        \\<lparr>nodes = {vertex_1, vertex_2},\n           edges = {(vertex_1, vertex_2)}\\<rparr>\n        {(vertex_1, vertex_2)})).\n                             n \\<noteq> vertex_1 \\<longrightarrow>\n                             n \\<noteq> vertex_2 \\<longrightarrow>\n                             default_node_properties = Interfering \\<and>\n                             ((\\<lambda>a. Interfering) `\n                              (undirected_reachable\n                                (add_edge vertex_1 vertex_2\n                                  (delete_edges\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    {(vertex_1, vertex_2)}))\n                                n \\<inter>\n                               {x. x \\<noteq> vertex_2} \\<inter>\n                               {vertex_1})\n                              \\<subseteq> {Unrelated} \\<longrightarrow>\n                              (\\<lambda>a. Interfering) `\n                              (undirected_reachable\n                                (add_edge vertex_1 vertex_2\n                                  (delete_edges\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    {(vertex_1, vertex_2)}))\n                                n \\<inter>\n                               {vertex_2})\n                              \\<subseteq> {Unrelated} \\<longrightarrow>\n                              \\<not> (\\<lambda>x. default_node_properties) `\n                                     (undirected_reachable\n (add_edge vertex_1 vertex_2\n   (delete_edges\n     \\<lparr>nodes = {vertex_1, vertex_2},\n        edges = {(vertex_1, vertex_2)}\\<rparr>\n     {(vertex_1, vertex_2)}))\n n \\<inter>\n{x. x \\<noteq> vertex_2} \\<inter>\n{x. x \\<noteq> vertex_1})\n                                     \\<subseteq> {Unrelated})) \\<and>\n                         otherbot = Unrelated\n 2. \\<And>otherbot.\n       \\<lbrakk>otherbot \\<noteq> Interfering; otherbot = Unrelated\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>n\\<in>nodes\n    (add_edge vertex_1 vertex_2\n      (delete_edges\n        \\<lparr>nodes = {vertex_1, vertex_2},\n           edges = {(vertex_1, vertex_2)}\\<rparr>\n        {(vertex_1, vertex_2)})).\n                             n \\<noteq> vertex_1 \\<longrightarrow>\n                             n \\<noteq> vertex_2 \\<longrightarrow>\n                             default_node_properties = Interfering \\<and>\n                             ((\\<lambda>a. Interfering) `\n                              (undirected_reachable\n                                (add_edge vertex_1 vertex_2\n                                  (delete_edges\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    {(vertex_1, vertex_2)}))\n                                n \\<inter>\n                               {x. x \\<noteq> vertex_2} \\<inter>\n                               {vertex_1})\n                              \\<subseteq> {Unrelated} \\<longrightarrow>\n                              (\\<lambda>a. Interfering) `\n                              (undirected_reachable\n                                (add_edge vertex_1 vertex_2\n                                  (delete_edges\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    {(vertex_1, vertex_2)}))\n                                n \\<inter>\n                               {vertex_2})\n                              \\<subseteq> {Unrelated} \\<longrightarrow>\n                              \\<not> (\\<lambda>x. default_node_properties) `\n                                     (undirected_reachable\n (add_edge vertex_1 vertex_2\n   (delete_edges\n     \\<lparr>nodes = {vertex_1, vertex_2},\n        edges = {(vertex_1, vertex_2)}\\<rparr>\n     {(vertex_1, vertex_2)}))\n n \\<inter>\n{x. x \\<noteq> vertex_2} \\<inter>\n{x. x \\<noteq> vertex_1})\n                                     \\<subseteq> {Unrelated})) \\<and>\n                         otherbot = Unrelated", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       \\<lbrakk>otherbot \\<noteq> Interfering; otherbot = Unrelated\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>n\\<in>nodes\n    (add_edge vertex_1 vertex_2\n      (delete_edges\n        \\<lparr>nodes = {vertex_1, vertex_2},\n           edges = {(vertex_1, vertex_2)}\\<rparr>\n        {(vertex_1, vertex_2)})).\n                             n \\<noteq> vertex_1 \\<longrightarrow>\n                             n \\<noteq> vertex_2 \\<longrightarrow>\n                             default_node_properties = Interfering \\<and>\n                             ((\\<lambda>a. Interfering) `\n                              (undirected_reachable\n                                (add_edge vertex_1 vertex_2\n                                  (delete_edges\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    {(vertex_1, vertex_2)}))\n                                n \\<inter>\n                               {x. x \\<noteq> vertex_2} \\<inter>\n                               {vertex_1})\n                              \\<subseteq> {Unrelated} \\<longrightarrow>\n                              (\\<lambda>a. Interfering) `\n                              (undirected_reachable\n                                (add_edge vertex_1 vertex_2\n                                  (delete_edges\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    {(vertex_1, vertex_2)}))\n                                n \\<inter>\n                               {vertex_2})\n                              \\<subseteq> {Unrelated} \\<longrightarrow>\n                              \\<not> (\\<lambda>x. default_node_properties) `\n                                     (undirected_reachable\n (add_edge vertex_1 vertex_2\n   (delete_edges\n     \\<lparr>nodes = {vertex_1, vertex_2},\n        edges = {(vertex_1, vertex_2)}\\<rparr>\n     {(vertex_1, vertex_2)}))\n n \\<inter>\n{x. x \\<noteq> vertex_2} \\<inter>\n{x. x \\<noteq> vertex_1})\n                                     \\<subseteq> {Unrelated})) \\<and>\n                         otherbot = Unrelated", "apply(simp add:graph_ops)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma TopoS_NonInterference: \"SecurityInvariant sinvar default_node_properties receiver_violation\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties receiver_violation", "unfolding receiver_violation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties True", "by unfold_locales"], ["", "hide_const (open) sinvar receiver_violation default_node_properties\n\n\\<comment> \\<open>Hide all the helper lemmas.\\<close>"], ["", "hide_fact tmp1 tmp2 tmp4 tmp5 tmp6 unique_default_example \n          unique_default_example_2 unique_default_example_3 unique_default_example_4\n          unique_default_example_5 empty_undirected_reachable_false"], ["", "end"]]}