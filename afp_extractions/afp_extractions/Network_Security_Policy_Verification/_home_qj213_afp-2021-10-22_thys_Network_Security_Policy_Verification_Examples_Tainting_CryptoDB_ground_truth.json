{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Examples/Tainting/CryptoDB.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma \"dom (tainiting_host_attributes) \\<subseteq> set (nodesL policy)\"", "lemma \"wf_list_graph policy\"", "lemma \"dom A_host_attributes \\<subseteq> set (nodesL policy)\"", "lemma \"dom B_host_attributes \\<subseteq> set (nodesL policy)\"", "lemma \"dom (map_of C_host_attributes) \\<subseteq> set (nodesL policy)\"", "lemma \"all_security_requirements_fulfilled invariants policy\""], "translations": [["", "lemma \"dom (tainiting_host_attributes) \\<subseteq> set (nodesL policy)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom tainiting_host_attributes \\<subseteq> set (nodesL policy)", "by(simp add: tainiting_host_attributes_def policy_def)"], ["", "definition \"Tainting_m \\<equiv> new_configured_list_SecurityInvariant SINVAR_LIB_TaintingTrusted \\<lparr>\n        node_properties = tainiting_host_attributes \\<rparr> ''user-data''\""], ["", "end"], ["", "lemma \"wf_list_graph policy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph policy", "by eval"], ["", "ML_val\\<open>\nvisualize_graph @{context} @{term \"[]::string SecurityInvariant list\"} @{term \"policy\"};\n\\<close>"], ["", "context begin"], ["", "private"], ["", "definition \"A_host_attributes \\<equiv>\n                [''A'' \\<mapsto> Member,\n                 ''A_encrypter'' \\<mapsto> Member,\n                 ''A_channel'' \\<mapsto> Member\n                 ]\""], ["", "private"], ["", "lemma \"dom A_host_attributes \\<subseteq> set (nodesL policy)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom A_host_attributes \\<subseteq> set (nodesL policy)", "by(simp add: A_host_attributes_def policy_def)"], ["", "definition \"SystemA_m \\<equiv> new_configured_list_SecurityInvariant\n                                  SINVAR_LIB_SubnetsInGW\n                                    \\<lparr> node_properties = A_host_attributes \\<rparr> ''sys-A''\""], ["", "end"], ["", "context begin"], ["", "private"], ["", "definition \"B_host_attributes \\<equiv>\n                [''B'' \\<mapsto> Member,\n                 ''B_encrypter'' \\<mapsto> Member,\n                 ''B_channel'' \\<mapsto> Member\n                 ]\""], ["", "private"], ["", "lemma \"dom B_host_attributes \\<subseteq> set (nodesL policy)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom B_host_attributes \\<subseteq> set (nodesL policy)", "by(simp add: B_host_attributes_def policy_def)"], ["", "definition \"SystemB_m \\<equiv> new_configured_list_SecurityInvariant\n                                  SINVAR_LIB_SubnetsInGW\n                                    \\<lparr> node_properties = B_host_attributes \\<rparr> ''sys-B''\""], ["", "end"], ["", "context begin"], ["", "private"], ["", "definition \"C_host_attributes \\<equiv>\n                [(''C_channel_in'', SystemBoundaryInput),\n                 (''C_decrypter'', SystemComponent),\n                 (''C'', SystemComponent),\n                 (''C_encrypter'', SystemComponent),\n                 (''C_channel_out'', SystemBoundaryOutput)\n                 ]\""], ["", "private"], ["", "lemma \"dom (map_of C_host_attributes) \\<subseteq> set (nodesL policy)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (map_of C_host_attributes) \\<subseteq> set (nodesL policy)", "by(simp add: C_host_attributes_def policy_def)"], ["", "definition \"SystemC_m \\<equiv> new_meta_system_boundary C_host_attributes ''sys-C''\""], ["", "end"], ["", "definition \"invariants \\<equiv> [Tainting_m, SystemA_m, SystemB_m] @ SystemC_m\""], ["", "lemma \"all_security_requirements_fulfilled invariants policy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n     invariants policy", "by eval"], ["", "ML\\<open>\nvisualize_graph @{context} @{term \"invariants\"} @{term \"policy\"};\n\\<close>"], ["", "value[code] \"implc_get_offending_flows invariants (policy\\<lparr> edgesL := edgesL policy\\<rparr>)\""], ["", "ML\\<open>\nvisualize_graph @{context} @{term \"invariants\"} @{term \"(policy\\<lparr> edgesL := edgesL policy\\<rparr>)\"};\n\\<close>"], ["", "definition make_policy :: \"('a SecurityInvariant) list \\<Rightarrow> 'a list \\<Rightarrow> 'a list_graph\" where\n  \"make_policy sinvars Vs \\<equiv> generate_valid_topology sinvars \\<lparr>nodesL = Vs, edgesL = List.product Vs Vs \\<rparr>\""], ["", "value[code] \"make_policy invariants (nodesL policy)\""], ["", "text\\<open>visualizing all flows which may not end at the adversary. I.e. things which are prohibited.\\<close>"], ["", "ML_val\\<open>\nvisualize_edges @{context} @{term \"edgesL policy\"}\n    [(\"edge [dir=\\\"arrow\\\", style=dashed, color=\\\"#FF8822\\\", constraint=false]\",\n     @{term \"[(e1, e2) \\<leftarrow>  List.product  (nodesL policy) (nodesL policy).\n     ((e1,e2) \\<notin> set (edgesL policy)) \\<and> ((e1,e2) \\<notin> set (edgesL (make_policy invariants (nodesL policy)))) \\<and> (e2 = ''Adversary'') \\<and> (e1 \\<noteq> ''Adversary'')]\"})] \"\";\n\\<close>"], ["", "ML_val\\<open>\nvisualize_edges @{context} @{term \"edgesL policy\"}\n    [(\"edge [dir=\\\"arrow\\\", style=dashed, color=\\\"#FF8822\\\", constraint=false]\",\n     @{term \"[e \\<leftarrow> edgesL (make_policy invariants (nodesL policy)).\n                e \\<notin> set (edgesL policy)]\"})] \"\";\n\\<close>"], ["", "end"]]}