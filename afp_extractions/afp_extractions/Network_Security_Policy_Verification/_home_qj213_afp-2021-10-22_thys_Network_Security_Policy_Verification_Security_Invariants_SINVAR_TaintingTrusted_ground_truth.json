{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_TaintingTrusted.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma taints_eq_iff:\n    \"tsx = tsy \\<longleftrightarrow> raw_of_taints tsx = raw_of_taints tsy\"", "lemma taints_wellformedness: \"untaints ts \\<subseteq> taints ts\"", "lemma raw_of_taints_TaintsUntaints:\n    \"raw_of_taints (TaintsUntaints ts uts) = (TaintsUntaints_Raw (ts \\<union> uts) uts)\"", "lemma taints_TaintsUntaints[code]: \"taints (TaintsUntaints ts uts) = ts \\<union> uts\"", "lemma untaints_TaintsUntaints[code]: \"untaints (TaintsUntaints ts uts) = uts\"", "lemma \"TaintsUntaints {''foo'', ''bar'', ''baz''} {''foo'', ''bar''} = \n         TaintsUntaints {''baz''} {''foo'', ''bar''}\"", "lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\"", "lemma Taints_def_unique: \"otherbot \\<noteq> default_node_properties \\<Longrightarrow>\n      \\<exists>G p i f. wf_graph G \\<and> \\<not> sinvar G p \\<and> f \\<in> (SecurityInvariant_withOffendingFlows.set_offending_flows sinvar G p) \\<and>\n         sinvar (delete_edges G f) p \\<and>\n          i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot)) \"", "lemma Taints_ENF: \"SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form\n        sinvar (\\<lambda>c1 c2. taints c1 - untaints c1 \\<subseteq> taints c2)\"", "lemma Taints_ENF_refl: \"SecurityInvariant_withOffendingFlows.ENF_refl\n        sinvar (\\<lambda>c1 c2. taints c1 - untaints c1 \\<subseteq> taints c2)\"", "lemma Taints_offending_set: \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = Taints_offending_set\"", "lemma TopoS_TaintingTrusted: \"SecurityInvariant sinvar default_node_properties receiver_violation\""], "translations": [["", "lemma taints_eq_iff:\n    \"tsx = tsy \\<longleftrightarrow> raw_of_taints tsx = raw_of_taints tsy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tsx = tsy) = (raw_of_taints tsx = raw_of_taints tsy)", "by (simp add: raw_of_taints_inject)"], ["", "definition taints :: \"taints \\<Rightarrow> string set\" where\n    \"taints ts \\<equiv> taints_raw (raw_of_taints ts)\""], ["", "definition untaints :: \"taints \\<Rightarrow> string set\" where\n    \"untaints ts \\<equiv> untaints_raw (raw_of_taints ts)\""], ["", "lemma taints_wellformedness: \"untaints ts \\<subseteq> taints ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. untaints ts \\<subseteq> taints ts", "using raw_of_taints taints_def untaints_def"], ["proof (prove)\nusing this:\n  raw_of_taints ?x \\<in> {ts. untaints_raw ts \\<subseteq> taints_raw ts}\n  taints ?ts \\<equiv> taints_raw (raw_of_taints ?ts)\n  untaints ?ts \\<equiv> untaints_raw (raw_of_taints ?ts)\n\ngoal (1 subgoal):\n 1. untaints ts \\<subseteq> taints ts", "by auto"], ["", "text \\<open>Constructor for @{typ \"taints\"}:\\<close>"], ["", "definition TaintsUntaints :: \"string set \\<Rightarrow> string set \\<Rightarrow> taints\" where\n    \"TaintsUntaints ts uts = Abs_taints (TaintsUntaints_Raw (ts \\<union> uts) uts)\""], ["", "lemma raw_of_taints_TaintsUntaints:\n    \"raw_of_taints (TaintsUntaints ts uts) = (TaintsUntaints_Raw (ts \\<union> uts) uts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_of_taints (TaintsUntaints ts uts) =\n    TaintsUntaints_Raw (ts \\<union> uts) uts", "by (simp add: TaintsUntaints_def Abs_taints_inverse)"], ["", "lemma taints_TaintsUntaints[code]: \"taints (TaintsUntaints ts uts) = ts \\<union> uts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. taints (TaintsUntaints ts uts) = ts \\<union> uts", "by(simp add: taints_def raw_of_taints_TaintsUntaints)"], ["", "lemma untaints_TaintsUntaints[code]: \"untaints (TaintsUntaints ts uts) = uts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. untaints (TaintsUntaints ts uts) = uts", "by(simp add: untaints_def raw_of_taints_TaintsUntaints)"], ["", "text\\<open>The things in the first set are tainted, those in the second set are untainted.\n    For example, a machine produces @{term \"''foo''\"}:\n      @{term \"TaintsUntaints {''foo''} {}\"}\n\n    For example, a machine consumes @{term \"''foo''\"} and @{term \"''bar''\"}, combines them in a \n    way that they are no longer critical and outputs @{term \"''baz''\"}:\n      @{term \"TaintsUntaints {''foo'', ''bar'', ''baz''} {''foo'', ''bar''}\"}\n      abbreviated: @{term \"TaintsUntaints {''baz''} {''foo'', ''bar''}\"}\n\\<close>"], ["", "lemma \"TaintsUntaints {''foo'', ''bar'', ''baz''} {''foo'', ''bar''} = \n         TaintsUntaints {''baz''} {''foo'', ''bar''}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TaintsUntaints {''foo'', ''bar'', ''baz''} {''foo'', ''bar''} =\n    TaintsUntaints {''baz''} {''foo'', ''bar''}", "apply(simp add: taints_eq_iff raw_of_taints_TaintsUntaints)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {''foo'', ''bar'', ''foo'', ''bar'', ''baz''} =\n    {''foo'', ''bar'', ''baz''}", "by blast"], ["", "qualified"], ["", "definition default_node_properties :: \"taints\"\n    where  \"default_node_properties \\<equiv> TaintsUntaints {} {}\""], ["", "qualified"], ["", "definition sinvar :: \"'v graph \\<Rightarrow> ('v \\<Rightarrow> taints) \\<Rightarrow> bool\" where\n    \"sinvar G nP \\<equiv> \\<forall> (v1,v2) \\<in> edges G.\n        taints (nP v1) - untaints (nP v1) \\<subseteq> taints (nP v2)\""], ["", "text\\<open>Information Flow Security\\<close>"], ["", "qualified"], ["", "definition receiver_violation :: \"bool\" where \"receiver_violation \\<equiv> True\""], ["", "private"], ["", "lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_mono sinvar", "apply(simp add: SecurityInvariant_withOffendingFlows.sinvar_mono_def sinvar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>nP N E'.\n       (\\<exists>E.\n           wf_graph \\<lparr>nodes = N, edges = E\\<rparr> \\<and>\n           E' \\<subseteq> E \\<and>\n           (\\<forall>x\\<in>E.\n               case x of\n               (v1, v2) \\<Rightarrow>\n                 taints (nP v1) - untaints (nP v1)\n                 \\<subseteq> taints (nP v2))) \\<longrightarrow>\n       (\\<forall>x\\<in>E'.\n           case x of\n           (v1, v2) \\<Rightarrow>\n             taints (nP v1) - untaints (nP v1) \\<subseteq> taints (nP v2))", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nP N E' a b x E.\n       \\<lbrakk>(a, b) \\<in> E'; x \\<in> taints (nP a);\n        x \\<notin> untaints (nP a);\n        wf_graph \\<lparr>nodes = N, edges = E\\<rparr>; E' \\<subseteq> E;\n        \\<forall>(v1, v2)\\<in>E.\n           taints (nP v1) - untaints (nP v1)\n           \\<subseteq> taints (nP v2)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> taints (nP b)", "by blast"], ["", "interpretation SecurityInvariant_preliminaries\n  where sinvar = sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_preliminaries sinvar", "proof(unfold_locales, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "case (1 G nP)"], ["proof (state)\nthis:\n  wf_graph G\n  \\<not> sinvar G nP\n\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "from 1"], ["proof (chain)\npicking this:\n  wf_graph G\n  \\<not> sinvar G nP", "show ?case"], ["proof (prove)\nusing this:\n  wf_graph G\n  \\<not> sinvar G nP\n\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.set_offending_flows sinvar G\n     nP \\<noteq>\n    {}", "apply(frule_tac finite_distinct_list[OF wf_graph.finiteE])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n     \\<exists>xs. set xs = edges G \\<and> distinct xs\\<rbrakk>\n    \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                       sinvar G nP \\<noteq>\n                      {}", "apply(erule_tac exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}", "apply(rename_tac list_edges)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}", "apply(rule_tac ff=\"list_edges\" in SecurityInvariant_withOffendingFlows.mono_imp_set_offending_flows_not_empty[OF sinvar_mono])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> wf_graph G\n 2. \\<And>list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (set list_edges) G nP\n 3. \\<And>list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> set list_edges \\<subseteq> edges G\n 4. \\<And>list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> distinct list_edges", "apply(auto simp add: sinvar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list_edges a b x.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> edges G;\n        \\<not> SecurityInvariant_withOffendingFlows.is_offending_flows\n                sinvar (edges G) G nP;\n        x \\<in> taints (nP a); x \\<notin> untaints (nP a);\n        set list_edges = edges G; distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> x \\<in> taints (nP b)", "apply(auto simp add: sinvar_def SecurityInvariant_withOffendingFlows.is_offending_flows_def graph_ops)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  SecurityInvariant_withOffendingFlows.set_offending_flows sinvar G\n   nP \\<noteq>\n  {}\n\ngoal (2 subgoals):\n 1. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 2. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 2. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "case (2 N E E' nP)"], ["proof (state)\nthis:\n  wf_graph \\<lparr>nodes = N, edges = E\\<rparr>\n  E' \\<subseteq> E\n  sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\n\ngoal (2 subgoals):\n 1. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 2. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "thus ?case"], ["proof (prove)\nusing this:\n  wf_graph \\<lparr>nodes = N, edges = E\\<rparr>\n  E' \\<subseteq> E\n  sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\n\ngoal (1 subgoal):\n 1. sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "by(simp add: sinvar_def) blast"], ["proof (state)\nthis:\n  sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n\ngoal (1 subgoal):\n 1. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "case 3"], ["proof (state)\nthis:\n  wf_graph G_\n  SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff_ G_ nP_\n\ngoal (1 subgoal):\n 1. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "thus ?case"], ["proof (prove)\nusing this:\n  wf_graph G_\n  SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff_ G_ nP_\n\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.is_offending_flows sinvar\n     (ff_ \\<union> f'_) G_ nP_", "by(fact SecurityInvariant_withOffendingFlows.sinvar_mono_imp_is_offending_flows_mono[OF sinvar_mono])"], ["proof (state)\nthis:\n  SecurityInvariant_withOffendingFlows.is_offending_flows sinvar\n   (ff_ \\<union> f'_) G_ nP_\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Needs the well-formedness condition that @{term \"untaints otherbot \\<subseteq> taints otherbot\"}\\<close>"], ["", "private"], ["", "lemma Taints_def_unique: \"otherbot \\<noteq> default_node_properties \\<Longrightarrow>\n      \\<exists>G p i f. wf_graph G \\<and> \\<not> sinvar G p \\<and> f \\<in> (SecurityInvariant_withOffendingFlows.set_offending_flows sinvar G p) \\<and>\n         sinvar (delete_edges G f) p \\<and>\n          i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> default_node_properties \\<Longrightarrow>\n    \\<exists>G p i f.\n       wf_graph G \\<and>\n       \\<not> sinvar G p \\<and>\n       f \\<in> set_offending_flows G p \\<and>\n       sinvar (delete_edges G f) p \\<and>\n       i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot))", "apply(subgoal_tac \"untaints otherbot \\<subseteq> taints otherbot\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>otherbot \\<noteq> default_node_properties;\n     untaints otherbot \\<subseteq> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>G p i f.\n                         wf_graph G \\<and>\n                         \\<not> sinvar G p \\<and>\n                         f \\<in> set_offending_flows G p \\<and>\n                         sinvar (delete_edges G f) p \\<and>\n                         i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot))\n 2. otherbot \\<noteq> default_node_properties \\<Longrightarrow>\n    untaints otherbot \\<subseteq> taints otherbot", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. otherbot \\<noteq> default_node_properties \\<Longrightarrow>\n    untaints otherbot \\<subseteq> taints otherbot\n 2. \\<lbrakk>otherbot \\<noteq> default_node_properties;\n     untaints otherbot \\<subseteq> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>G p i f.\n                         wf_graph G \\<and>\n                         \\<not> sinvar G p \\<and>\n                         f \\<in> set_offending_flows G p \\<and>\n                         sinvar (delete_edges G f) p \\<and>\n                         i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> default_node_properties \\<Longrightarrow>\n    untaints otherbot \\<subseteq> taints otherbot", "using taints_wellformedness"], ["proof (prove)\nusing this:\n  untaints ?ts \\<subseteq> taints ?ts\n\ngoal (1 subgoal):\n 1. otherbot \\<noteq> default_node_properties \\<Longrightarrow>\n    untaints otherbot \\<subseteq> taints otherbot", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>otherbot \\<noteq> default_node_properties;\n     untaints otherbot \\<subseteq> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>G p i f.\n                         wf_graph G \\<and>\n                         \\<not> sinvar G p \\<and>\n                         f \\<in> set_offending_flows G p \\<and>\n                         sinvar (delete_edges G f) p \\<and>\n                         i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot))", "apply(simp add: default_node_properties_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n     untaints otherbot \\<subseteq> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>G.\n                         wf_graph G \\<and>\n                         (\\<exists>p.\n                             \\<not> sinvar G p \\<and>\n                             (\\<exists>i f.\n                                 f \\<in> set_offending_flows G p \\<and>\n                                 sinvar (delete_edges G f) p \\<and>\n                                 i \\<in> snd ` f \\<and>\n                                 sinvar G (p(i := otherbot))))", "apply (simp add: SecurityInvariant_withOffendingFlows.set_offending_flows_def\n        SecurityInvariant_withOffendingFlows.is_offending_flows_min_set_def\n        SecurityInvariant_withOffendingFlows.is_offending_flows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n     untaints otherbot \\<subseteq> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>G.\n                         wf_graph G \\<and>\n                         (\\<exists>p.\n                             \\<not> sinvar G p \\<and>\n                             (\\<exists>i f.\n                                 f \\<subseteq> edges G \\<and>\n                                 \\<not> sinvar G p \\<and>\n                                 sinvar (delete_edges G f) p \\<and>\n                                 (\\<forall>(e1, e2)\\<in>f.\n                                     \\<not> sinvar\n       (add_edge e1 e2 (delete_edges G f)) p) \\<and>\n                                 sinvar (delete_edges G f) p \\<and>\n                                 i \\<in> snd ` f \\<and>\n                                 sinvar G (p(i := otherbot))))", "apply (simp add:graph_ops)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n     untaints otherbot \\<subseteq> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>G.\n                         wf_graph G \\<and>\n                         (\\<exists>p.\n                             \\<not> sinvar G p \\<and>\n                             (\\<exists>i f.\n                                 f \\<subseteq> edges G \\<and>\n                                 \\<not> sinvar G p \\<and>\n                                 sinvar\n                                  \\<lparr>nodes = nodes G,\n                                     edges = edges G - f\\<rparr>\n                                  p \\<and>\n                                 (\\<forall>x\\<in>f.\n                                     case x of\n                                     (e1, e2) \\<Rightarrow>\n \\<not> sinvar\n         \\<lparr>nodes = insert e1 (insert e2 (nodes G)),\n            edges = insert (e1, e2) (edges G - f)\\<rparr>\n         p) \\<and>\n                                 sinvar\n                                  \\<lparr>nodes = nodes G,\n                                     edges = edges G - f\\<rparr>\n                                  p \\<and>\n                                 i \\<in> snd ` f \\<and>\n                                 sinvar G (p(i := otherbot))))", "apply (simp split: prod.split_asm prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n     untaints otherbot \\<subseteq> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>G.\n                         wf_graph G \\<and>\n                         (\\<exists>p.\n                             \\<not> sinvar G p \\<and>\n                             (\\<exists>i f.\n                                 f \\<subseteq> edges G \\<and>\n                                 \\<not> sinvar G p \\<and>\n                                 sinvar\n                                  \\<lparr>nodes = nodes G,\n                                     edges = edges G - f\\<rparr>\n                                  p \\<and>\n                                 (\\<forall>x\\<in>f.\n                                     \\<forall>x1 x2.\n  x = (x1, x2) \\<longrightarrow>\n  \\<not> sinvar\n          \\<lparr>nodes = insert x1 (insert x2 (nodes G)),\n             edges = insert (x1, x2) (edges G - f)\\<rparr>\n          p) \\<and>\n                                 sinvar\n                                  \\<lparr>nodes = nodes G,\n                                     edges = edges G - f\\<rparr>\n                                  p \\<and>\n                                 i \\<in> snd ` f \\<and>\n                                 sinvar G (p(i := otherbot))))", "apply(rule_tac x=\"\\<lparr> nodes=set [vertex_1,vertex_2], edges = set [(vertex_1,vertex_2)] \\<rparr>\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n     untaints otherbot \\<subseteq> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> wf_graph\n                       \\<lparr>nodes = {vertex_1, vertex_2},\n                          edges = {(vertex_1, vertex_2)}\\<rparr> \\<and>\n                      (\\<exists>p.\n                          \\<not> sinvar\n                                  \\<lparr>nodes = {vertex_1, vertex_2},\n                                     edges = {(vertex_1, vertex_2)}\\<rparr>\n                                  p \\<and>\n                          (\\<exists>i f.\n                              f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                              \\<not> sinvar\n\\<lparr>nodes = {vertex_1, vertex_2}, edges = {(vertex_1, vertex_2)}\\<rparr>\np \\<and>\n                              sinvar\n                               \\<lparr>nodes = {vertex_1, vertex_2},\n                                  edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                               p \\<and>\n                              (\\<forall>x\\<in>f.\n                                  \\<forall>x1 x2.\n                                     x = (x1, x2) \\<longrightarrow>\n                                     \\<not> sinvar\n       \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n          edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n       p) \\<and>\n                              sinvar\n                               \\<lparr>nodes = {vertex_1, vertex_2},\n                                  edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                               p \\<and>\n                              i \\<in> snd ` f \\<and>\n                              sinvar\n                               \\<lparr>nodes = {vertex_1, vertex_2},\n                                  edges = {(vertex_1, vertex_2)}\\<rparr>\n                               (p(i := otherbot))))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n     untaints otherbot \\<subseteq> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> wf_graph\n                       \\<lparr>nodes = {vertex_1, vertex_2},\n                          edges = {(vertex_1, vertex_2)}\\<rparr>\n 2. \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n     untaints otherbot \\<subseteq> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p.\n                         \\<not> sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 p \\<and>\n                         (\\<exists>i f.\n                             f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                             \\<not> sinvar\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     p \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             (\\<forall>x\\<in>f.\n                                 \\<forall>x1 x2.\n                                    x = (x1, x2) \\<longrightarrow>\n                                    \\<not> sinvar\n      \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n         edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n      p) \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             i \\<in> snd ` f \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              (p(i := otherbot)))", "apply(simp add: wf_graph_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n     untaints otherbot \\<subseteq> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p.\n                         \\<not> sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 p \\<and>\n                         (\\<exists>i f.\n                             f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                             \\<not> sinvar\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     p \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             (\\<forall>x\\<in>f.\n                                 \\<forall>x1 x2.\n                                    x = (x1, x2) \\<longrightarrow>\n                                    \\<not> sinvar\n      \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n         edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n      p) \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             i \\<in> snd ` f \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              (p(i := otherbot)))", "apply(subgoal_tac \"\\<exists>foo. foo \\<in> taints otherbot\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n     untaints otherbot \\<subseteq> taints otherbot;\n     \\<exists>foo. foo \\<in> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p.\n                         \\<not> sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 p \\<and>\n                         (\\<exists>i f.\n                             f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                             \\<not> sinvar\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     p \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             (\\<forall>x\\<in>f.\n                                 \\<forall>x1 x2.\n                                    x = (x1, x2) \\<longrightarrow>\n                                    \\<not> sinvar\n      \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n         edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n      p) \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             i \\<in> snd ` f \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              (p(i := otherbot)))\n 2. \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n     untaints otherbot \\<subseteq> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>foo. foo \\<in> taints otherbot", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n     untaints otherbot \\<subseteq> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>foo. foo \\<in> taints otherbot\n 2. \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n     untaints otherbot \\<subseteq> taints otherbot;\n     \\<exists>foo. foo \\<in> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p.\n                         \\<not> sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 p \\<and>\n                         (\\<exists>i f.\n                             f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                             \\<not> sinvar\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     p \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             (\\<forall>x\\<in>f.\n                                 \\<forall>x1 x2.\n                                    x = (x1, x2) \\<longrightarrow>\n                                    \\<not> sinvar\n      \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n         edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n      p) \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             i \\<in> snd ` f \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              (p(i := otherbot)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n     untaints otherbot \\<subseteq> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>foo. foo \\<in> taints otherbot", "apply(case_tac otherbot, rename_tac tsraw)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>tsraw.\n       \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n        untaints otherbot \\<subseteq> taints otherbot;\n        otherbot = Abs_taints tsraw;\n        tsraw \\<in> {ts. untaints_raw ts \\<subseteq> taints_raw ts}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>foo. foo \\<in> taints otherbot", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>tsraw.\n       \\<lbrakk>Abs_taints tsraw \\<noteq> TaintsUntaints {} {};\n        untaints (Abs_taints tsraw) \\<subseteq> taints (Abs_taints tsraw);\n        otherbot = Abs_taints tsraw;\n        untaints_raw tsraw \\<subseteq> taints_raw tsraw\\<rbrakk>\n       \\<Longrightarrow> \\<exists>foo. foo \\<in> taints (Abs_taints tsraw)", "apply(subgoal_tac \"taints_raw tsraw \\<noteq> {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>tsraw.\n       \\<lbrakk>Abs_taints tsraw \\<noteq> TaintsUntaints {} {};\n        untaints (Abs_taints tsraw) \\<subseteq> taints (Abs_taints tsraw);\n        otherbot = Abs_taints tsraw;\n        untaints_raw tsraw \\<subseteq> taints_raw tsraw;\n        taints_raw tsraw \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>foo. foo \\<in> taints (Abs_taints tsraw)\n 2. \\<And>tsraw.\n       \\<lbrakk>Abs_taints tsraw \\<noteq> TaintsUntaints {} {};\n        untaints (Abs_taints tsraw) \\<subseteq> taints (Abs_taints tsraw);\n        otherbot = Abs_taints tsraw;\n        untaints_raw tsraw \\<subseteq> taints_raw tsraw\\<rbrakk>\n       \\<Longrightarrow> taints_raw tsraw \\<noteq> {}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>tsraw.\n       \\<lbrakk>Abs_taints tsraw \\<noteq> TaintsUntaints {} {};\n        untaints (Abs_taints tsraw) \\<subseteq> taints (Abs_taints tsraw);\n        otherbot = Abs_taints tsraw;\n        untaints_raw tsraw \\<subseteq> taints_raw tsraw\\<rbrakk>\n       \\<Longrightarrow> taints_raw tsraw \\<noteq> {}\n 2. \\<And>tsraw.\n       \\<lbrakk>Abs_taints tsraw \\<noteq> TaintsUntaints {} {};\n        untaints (Abs_taints tsraw) \\<subseteq> taints (Abs_taints tsraw);\n        otherbot = Abs_taints tsraw;\n        untaints_raw tsraw \\<subseteq> taints_raw tsraw;\n        taints_raw tsraw \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>foo. foo \\<in> taints (Abs_taints tsraw)", "subgoal for tsraw"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Abs_taints tsraw \\<noteq> TaintsUntaints {} {};\n     untaints (Abs_taints tsraw) \\<subseteq> taints (Abs_taints tsraw);\n     otherbot = Abs_taints tsraw;\n     untaints_raw tsraw \\<subseteq> taints_raw tsraw\\<rbrakk>\n    \\<Longrightarrow> taints_raw tsraw \\<noteq> {}", "apply(case_tac tsraw)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>Abs_taints tsraw \\<noteq> TaintsUntaints {} {};\n        untaints (Abs_taints tsraw) \\<subseteq> taints (Abs_taints tsraw);\n        otherbot = Abs_taints tsraw;\n        untaints_raw tsraw \\<subseteq> taints_raw tsraw;\n        tsraw = TaintsUntaints_Raw x1 x2\\<rbrakk>\n       \\<Longrightarrow> taints_raw tsraw \\<noteq> {}", "apply(simp add: TaintsUntaints_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>Abs_taints (TaintsUntaints_Raw x1 x2) \\<noteq>\n                Abs_taints (TaintsUntaints_Raw {} {});\n        untaints (Abs_taints (TaintsUntaints_Raw x1 x2))\n        \\<subseteq> taints (Abs_taints (TaintsUntaints_Raw x1 x2));\n        otherbot = Abs_taints (TaintsUntaints_Raw x1 x2); x2 \\<subseteq> x1;\n        tsraw = TaintsUntaints_Raw x1 x2\\<rbrakk>\n       \\<Longrightarrow> x1 \\<noteq> {}", "by fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>tsraw.\n       \\<lbrakk>Abs_taints tsraw \\<noteq> TaintsUntaints {} {};\n        untaints (Abs_taints tsraw) \\<subseteq> taints (Abs_taints tsraw);\n        otherbot = Abs_taints tsraw;\n        untaints_raw tsraw \\<subseteq> taints_raw tsraw;\n        taints_raw tsraw \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>foo. foo \\<in> taints (Abs_taints tsraw)", "by (simp add: Abs_taints_inverse ex_in_conv taints_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n     untaints otherbot \\<subseteq> taints otherbot;\n     \\<exists>foo. foo \\<in> taints otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p.\n                         \\<not> sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 p \\<and>\n                         (\\<exists>i f.\n                             f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                             \\<not> sinvar\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     p \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             (\\<forall>x\\<in>f.\n                                 \\<forall>x1 x2.\n                                    x = (x1, x2) \\<longrightarrow>\n                                    \\<not> sinvar\n      \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n         edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n      p) \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             i \\<in> snd ` f \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              (p(i := otherbot)))", "apply(elim exE, rename_tac foo)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>foo.\n       \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n        untaints otherbot \\<subseteq> taints otherbot;\n        foo \\<in> taints otherbot\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            \\<not> sinvar\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    p \\<and>\n                            (\\<exists>i f.\n                                f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                                \\<not> sinvar\n  \\<lparr>nodes = {vertex_1, vertex_2},\n     edges = {(vertex_1, vertex_2)}\\<rparr>\n  p \\<and>\n                                sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges =\n{(vertex_1, vertex_2)} - f\\<rparr>\n                                 p \\<and>\n                                (\\<forall>x\\<in>f.\n                                    \\<forall>x1 x2.\n x = (x1, x2) \\<longrightarrow>\n \\<not> sinvar\n         \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n            edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n         p) \\<and>\n                                sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges =\n{(vertex_1, vertex_2)} - f\\<rparr>\n                                 p \\<and>\n                                i \\<in> snd ` f \\<and>\n                                sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 (p(i := otherbot)))", "apply(rule_tac x=\"(\\<lambda> x. default_node_properties)\n            (vertex_1 := TaintsUntaints {foo} {}, vertex_2 := default_node_properties)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>foo.\n       \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n        untaints otherbot \\<subseteq> taints otherbot;\n        foo \\<in> taints otherbot\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 ((\\<lambda>x. default_node_properties)\n                                  (vertex_1 := TaintsUntaints {foo} {},\n                                   vertex_2 :=\n                                     default_node_properties)) \\<and>\n                         (\\<exists>i f.\n                             f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                             \\<not> sinvar\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     ((\\<lambda>x. default_node_properties)\n(vertex_1 := TaintsUntaints {foo} {},\n vertex_2 := default_node_properties)) \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              ((\\<lambda>x. default_node_properties)\n                               (vertex_1 := TaintsUntaints {foo} {},\n                                vertex_2 := default_node_properties)) \\<and>\n                             (\\<forall>x\\<in>f.\n                                 \\<forall>x1 x2.\n                                    x = (x1, x2) \\<longrightarrow>\n                                    \\<not> sinvar\n      \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n         edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n      ((\\<lambda>x. default_node_properties)\n       (vertex_1 := TaintsUntaints {foo} {},\n        vertex_2 := default_node_properties))) \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              ((\\<lambda>x. default_node_properties)\n                               (vertex_1 := TaintsUntaints {foo} {},\n                                vertex_2 := default_node_properties)) \\<and>\n                             i \\<in> snd ` f \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              ((\\<lambda>x. default_node_properties)\n                               (vertex_1 := TaintsUntaints {foo} {},\n                                vertex_2 := default_node_properties,\n                                i := otherbot)))", "apply(simp add: default_node_properties_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>foo.\n       \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n        untaints otherbot \\<subseteq> taints otherbot;\n        foo \\<in> taints otherbot\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 ((\\<lambda>x. TaintsUntaints {} {})\n                                  (vertex_1 := TaintsUntaints {foo} {},\n                                   vertex_2 := TaintsUntaints {} {})) \\<and>\n                         (\\<exists>i f.\n                             f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                             \\<not> sinvar\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     ((\\<lambda>x. TaintsUntaints {} {})\n(vertex_1 := TaintsUntaints {foo} {},\n vertex_2 := TaintsUntaints {} {})) \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              ((\\<lambda>x. TaintsUntaints {} {})\n                               (vertex_1 := TaintsUntaints {foo} {},\n                                vertex_2 := TaintsUntaints {} {})) \\<and>\n                             (\\<forall>x\\<in>f.\n                                 \\<forall>x1 x2.\n                                    x = (x1, x2) \\<longrightarrow>\n                                    \\<not> sinvar\n      \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n         edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n      ((\\<lambda>x. TaintsUntaints {} {})\n       (vertex_1 := TaintsUntaints {foo} {},\n        vertex_2 := TaintsUntaints {} {}))) \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              ((\\<lambda>x. TaintsUntaints {} {})\n                               (vertex_1 := TaintsUntaints {foo} {},\n                                vertex_2 := TaintsUntaints {} {})) \\<and>\n                             i \\<in> snd ` f \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              ((\\<lambda>x. TaintsUntaints {} {})\n                               (vertex_1 := TaintsUntaints {foo} {},\n                                vertex_2 := TaintsUntaints {} {},\n                                i := otherbot)))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>foo.\n       \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n        untaints otherbot \\<subseteq> taints otherbot;\n        foo \\<in> taints otherbot\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 ((\\<lambda>x. TaintsUntaints {} {})\n                                  (vertex_1 := TaintsUntaints {foo} {},\n                                   vertex_2 := TaintsUntaints {} {}))\n 2. \\<And>foo.\n       \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n        untaints otherbot \\<subseteq> taints otherbot;\n        foo \\<in> taints otherbot\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i f.\n                            f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                            \\<not> sinvar\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    ((\\<lambda>x. TaintsUntaints {} {})\n                                     (vertex_1 := TaintsUntaints {foo} {},\nvertex_2 := TaintsUntaints {} {})) \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                             ((\\<lambda>x. TaintsUntaints {} {})\n                              (vertex_1 := TaintsUntaints {foo} {},\n                               vertex_2 := TaintsUntaints {} {})) \\<and>\n                            (\\<forall>x\\<in>f.\n                                \\<forall>x1 x2.\n                                   x = (x1, x2) \\<longrightarrow>\n                                   \\<not> sinvar\n     \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n        edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n     ((\\<lambda>x. TaintsUntaints {} {})\n      (vertex_1 := TaintsUntaints {foo} {},\n       vertex_2 := TaintsUntaints {} {}))) \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                             ((\\<lambda>x. TaintsUntaints {} {})\n                              (vertex_1 := TaintsUntaints {foo} {},\n                               vertex_2 := TaintsUntaints {} {})) \\<and>\n                            i \\<in> snd ` f \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             ((\\<lambda>x. TaintsUntaints {} {})\n                              (vertex_1 := TaintsUntaints {foo} {},\n                               vertex_2 := TaintsUntaints {} {},\n                               i := otherbot))", "apply(simp add: sinvar_def taints_TaintsUntaints untaints_TaintsUntaints; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>foo.\n       \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n        untaints otherbot \\<subseteq> taints otherbot;\n        foo \\<in> taints otherbot\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i f.\n                            f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                            \\<not> sinvar\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    ((\\<lambda>x. TaintsUntaints {} {})\n                                     (vertex_1 := TaintsUntaints {foo} {},\nvertex_2 := TaintsUntaints {} {})) \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                             ((\\<lambda>x. TaintsUntaints {} {})\n                              (vertex_1 := TaintsUntaints {foo} {},\n                               vertex_2 := TaintsUntaints {} {})) \\<and>\n                            (\\<forall>x\\<in>f.\n                                \\<forall>x1 x2.\n                                   x = (x1, x2) \\<longrightarrow>\n                                   \\<not> sinvar\n     \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n        edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n     ((\\<lambda>x. TaintsUntaints {} {})\n      (vertex_1 := TaintsUntaints {foo} {},\n       vertex_2 := TaintsUntaints {} {}))) \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                             ((\\<lambda>x. TaintsUntaints {} {})\n                              (vertex_1 := TaintsUntaints {foo} {},\n                               vertex_2 := TaintsUntaints {} {})) \\<and>\n                            i \\<in> snd ` f \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             ((\\<lambda>x. TaintsUntaints {} {})\n                              (vertex_1 := TaintsUntaints {foo} {},\n                               vertex_2 := TaintsUntaints {} {},\n                               i := otherbot))", "apply(rule_tac x=\"vertex_2\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>foo.\n       \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n        untaints otherbot \\<subseteq> taints otherbot;\n        foo \\<in> taints otherbot\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<subseteq>{(vertex_1, vertex_2)}.\n                            \\<not> sinvar\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    ((\\<lambda>x. TaintsUntaints {} {})\n                                     (vertex_1 := TaintsUntaints {foo} {},\nvertex_2 := TaintsUntaints {} {})) \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                             ((\\<lambda>x. TaintsUntaints {} {})\n                              (vertex_1 := TaintsUntaints {foo} {},\n                               vertex_2 := TaintsUntaints {} {})) \\<and>\n                            (\\<forall>x\\<in>f.\n                                \\<forall>x1 x2.\n                                   x = (x1, x2) \\<longrightarrow>\n                                   \\<not> sinvar\n     \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n        edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n     ((\\<lambda>x. TaintsUntaints {} {})\n      (vertex_1 := TaintsUntaints {foo} {},\n       vertex_2 := TaintsUntaints {} {}))) \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                             ((\\<lambda>x. TaintsUntaints {} {})\n                              (vertex_1 := TaintsUntaints {foo} {},\n                               vertex_2 := TaintsUntaints {} {})) \\<and>\n                            vertex_2 \\<in> snd ` f \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             ((\\<lambda>x. TaintsUntaints {} {})\n                              (vertex_1 := TaintsUntaints {foo} {},\n                               vertex_2 := TaintsUntaints {} {},\n                               vertex_2 := otherbot))", "apply(rule_tac x=\"set [(vertex_1,vertex_2)]\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>foo.\n       \\<lbrakk>otherbot \\<noteq> TaintsUntaints {} {};\n        untaints otherbot \\<subseteq> taints otherbot;\n        foo \\<in> taints otherbot\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 ((\\<lambda>x. TaintsUntaints {} {})\n                                  (vertex_1 := TaintsUntaints {foo} {},\n                                   vertex_2 := TaintsUntaints {} {})) \\<and>\n                         sinvar\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {}\\<rparr>\n                          ((\\<lambda>x. TaintsUntaints {} {})\n                           (vertex_1 := TaintsUntaints {foo} {},\n                            vertex_2 := TaintsUntaints {} {})) \\<and>\n                         \\<not> sinvar\n                                 \\<lparr>nodes =\n     {vertex_1, vertex_2, vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 ((\\<lambda>x. TaintsUntaints {} {})\n                                  (vertex_1 := TaintsUntaints {foo} {},\n                                   vertex_2 := TaintsUntaints {} {})) \\<and>\n                         sinvar\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {}\\<rparr>\n                          ((\\<lambda>x. TaintsUntaints {} {})\n                           (vertex_1 := TaintsUntaints {foo} {},\n                            vertex_2 := TaintsUntaints {} {})) \\<and>\n                         sinvar\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {(vertex_1, vertex_2)}\\<rparr>\n                          ((\\<lambda>x. TaintsUntaints {} {})\n                           (vertex_1 := TaintsUntaints {foo} {},\n                            vertex_2 := otherbot))", "apply(simp add: sinvar_def taints_TaintsUntaints untaints_TaintsUntaints; fail)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>ENF\\<close>"], ["", "private"], ["", "lemma Taints_ENF: \"SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form\n        sinvar (\\<lambda>c1 c2. taints c1 - untaints c1 \\<subseteq> taints c2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar\n     (\\<lambda>c1 c2. taints c1 - untaints c1 \\<subseteq> taints c2)", "unfolding SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_def sinvar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G nP.\n       (\\<forall>(v1, v2)\\<in>edges G.\n           taints (nP v1) - untaints (nP v1) \\<subseteq> taints (nP v2)) =\n       (\\<forall>(e1, e2)\\<in>edges G.\n           taints (nP e1) - untaints (nP e1) \\<subseteq> taints (nP e2))", "by blast"], ["", "private"], ["", "lemma Taints_ENF_refl: \"SecurityInvariant_withOffendingFlows.ENF_refl\n        sinvar (\\<lambda>c1 c2. taints c1 - untaints c1 \\<subseteq> taints c2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.ENF_refl sinvar\n     (\\<lambda>c1 c2. taints c1 - untaints c1 \\<subseteq> taints c2)", "unfolding SecurityInvariant_withOffendingFlows.ENF_refl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar\n     (\\<lambda>c1 c2. taints c1 - untaints c1 \\<subseteq> taints c2) \\<and>\n    (\\<forall>p1. taints p1 - untaints p1 \\<subseteq> taints p1)", "apply(intro conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar\n     (\\<lambda>c1 c2. taints c1 - untaints c1 \\<subseteq> taints c2)\n 2. \\<forall>p1. taints p1 - untaints p1 \\<subseteq> taints p1", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar\n     (\\<lambda>c1 c2. taints c1 - untaints c1 \\<subseteq> taints c2)", "using Taints_ENF"], ["proof (prove)\nusing this:\n  SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar\n   (\\<lambda>c1 c2. taints c1 - untaints c1 \\<subseteq> taints c2)\n\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar\n     (\\<lambda>c1 c2. taints c1 - untaints c1 \\<subseteq> taints c2)", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p1. taints p1 - untaints p1 \\<subseteq> taints p1", "by auto"], ["", "qualified"], ["", "definition Taints_offending_set:: \"'v graph \\<Rightarrow> ('v \\<Rightarrow> taints) \\<Rightarrow> ('v \\<times> 'v) set set\" where\n    \"Taints_offending_set G nP = (if sinvar G nP then\n        {}\n       else \n        { {e \\<in> edges G. case e of (e1,e2) \\<Rightarrow> \\<not> taints (nP e1) - untaints (nP e1) \\<subseteq> taints (nP e2)} })\""], ["", "lemma Taints_offending_set: \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = Taints_offending_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_offending_flows = Taints_offending_set", "by(auto simp add: fun_eq_iff\n                        SecurityInvariant_withOffendingFlows.ENF_offending_set[OF Taints_ENF]\n                        Taints_offending_set_def)"], ["", "interpretation Taints: SecurityInvariant_IFS sinvar default_node_properties\n    rewrites \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = Taints_offending_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_IFS sinvar default_node_properties &&&\n    set_offending_flows = Taints_offending_set", "unfolding receiver_violation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_IFS sinvar default_node_properties &&&\n    set_offending_flows = Taints_offending_set", "unfolding default_node_properties_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_IFS sinvar (TaintsUntaints {} {}) &&&\n    set_offending_flows = Taints_offending_set", "proof(unfold_locales, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>G f nP.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>snd ` f.\n                            \\<not> sinvar G (nP(i := TaintsUntaints {} {}))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = TaintsUntaints {} {}\n 3. set_offending_flows = Taints_offending_set", "case (1 G f nP)"], ["proof (state)\nthis:\n  wf_graph G\n  f \\<in> set_offending_flows G nP\n\ngoal (3 subgoals):\n 1. \\<And>G f nP.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>snd ` f.\n                            \\<not> sinvar G (nP(i := TaintsUntaints {} {}))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = TaintsUntaints {} {}\n 3. set_offending_flows = Taints_offending_set", "from 1(2)"], ["proof (chain)\npicking this:\n  f \\<in> set_offending_flows G nP", "show ?case"], ["proof (prove)\nusing this:\n  f \\<in> set_offending_flows G nP\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>snd ` f. \\<not> sinvar G (nP(i := TaintsUntaints {} {}))", "apply(intro ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>f \\<in> set_offending_flows G nP; i \\<in> snd ` f\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar G (nP(i := TaintsUntaints {} {}))", "apply(rule SecurityInvariant_withOffendingFlows.ENF_snds_refl_instance[OF Taints_ENF_refl])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>f \\<in> set_offending_flows G nP; i \\<in> snd ` f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>nP e1 e2.\n                            \\<not> taints (nP e1) - untaints (nP e1)\n                                   \\<subseteq> taints\n          (nP e2) \\<longrightarrow>\n                            \\<not> taints (nP e1) - untaints (nP e1)\n                                   \\<subseteq> taints (TaintsUntaints {} {})\n 2. \\<And>i.\n       \\<lbrakk>f \\<in> set_offending_flows G nP; i \\<in> snd ` f\\<rbrakk>\n       \\<Longrightarrow> ?f2 i \\<in> set_offending_flows G nP\n 3. \\<And>i.\n       \\<lbrakk>f \\<in> set_offending_flows G nP; i \\<in> snd ` f\\<rbrakk>\n       \\<Longrightarrow> i \\<in> snd ` ?f2 i", "apply(simp add: sinvar_def taints_TaintsUntaints untaints_TaintsUntaints, blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>f \\<in> set_offending_flows G nP; i \\<in> snd ` f\\<rbrakk>\n       \\<Longrightarrow> ?f2 i \\<in> set_offending_flows G nP\n 2. \\<And>i.\n       \\<lbrakk>f \\<in> set_offending_flows G nP; i \\<in> snd ` f\\<rbrakk>\n       \\<Longrightarrow> i \\<in> snd ` ?f2 i", "by(simp)+"], ["proof (state)\nthis:\n  \\<forall>i\\<in>snd ` f. \\<not> sinvar G (nP(i := TaintsUntaints {} {}))\n\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = TaintsUntaints {} {}\n 2. set_offending_flows = Taints_offending_set", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = TaintsUntaints {} {}\n 2. set_offending_flows = Taints_offending_set", "case 2"], ["proof (state)\nthis:\n  \\<forall>G f nP i.\n     wf_graph G \\<and>\n     f \\<in> set_offending_flows G nP \\<and>\n     i \\<in> snd ` f \\<longrightarrow>\n     \\<not> sinvar G (nP(i := otherbot_))\n\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = TaintsUntaints {} {}\n 2. set_offending_flows = Taints_offending_set", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>G f nP i.\n     wf_graph G \\<and>\n     f \\<in> set_offending_flows G nP \\<and>\n     i \\<in> snd ` f \\<longrightarrow>\n     \\<not> sinvar G (nP(i := otherbot_))\n\ngoal (1 subgoal):\n 1. otherbot_ = TaintsUntaints {} {}", "apply(elim default_uniqueness_by_counterexample_IFS)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot_ \\<noteq> TaintsUntaints {} {} \\<Longrightarrow>\n    \\<exists>G nP i f.\n       wf_graph G \\<and>\n       \\<not> sinvar G nP \\<and>\n       f \\<in> set_offending_flows G nP \\<and>\n       sinvar (delete_edges G f) nP \\<and>\n       i \\<in> snd ` f \\<and> sinvar G (nP(i := otherbot_))", "apply(rule Taints_def_unique)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot_ \\<noteq> TaintsUntaints {} {} \\<Longrightarrow>\n    otherbot_ \\<noteq> default_node_properties", "apply(simp_all add: default_node_properties_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  otherbot_ = TaintsUntaints {} {}\n\ngoal (1 subgoal):\n 1. set_offending_flows = Taints_offending_set", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. set_offending_flows = Taints_offending_set", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. set_offending_flows = Taints_offending_set", "show \"set_offending_flows = Taints_offending_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_offending_flows = Taints_offending_set", "by(fact Taints_offending_set)"], ["proof (state)\nthis:\n  set_offending_flows = Taints_offending_set\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma TopoS_TaintingTrusted: \"SecurityInvariant sinvar default_node_properties receiver_violation\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties receiver_violation", "unfolding receiver_violation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties True", "by unfold_locales"], ["", "end"], ["", "code_datatype TaintsUntaints"], ["", "value[code] \"TaintsUntaints {''foo''} {''bar''}\""], ["", "value[code] \"taints (TaintsUntaints {''foo''} {''bar''})\""], ["", "end"]]}