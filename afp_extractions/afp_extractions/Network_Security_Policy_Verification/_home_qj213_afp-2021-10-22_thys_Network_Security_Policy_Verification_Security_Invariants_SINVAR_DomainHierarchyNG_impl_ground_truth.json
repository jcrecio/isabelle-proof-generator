{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_DomainHierarchyNG_impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma \"DomainHierarchyNG_sanity_check_config c tree \\<Longrightarrow>\n    {x. \\<exists>v. nP v = x} = set c \\<Longrightarrow>\n    verify_globals G nP tree\"", "lemma \"DomainHierarchyNG.node_props P = \n  (\\<lambda>i. case node_properties P i of None \\<Rightarrow> SINVAR_DomainHierarchyNG.default_node_properties | Some property \\<Rightarrow> property)\"", "lemma[code_unfold]: \"DomainHierarchyNG.node_props P = NetModel_node_props P\""], "translations": [["", "lemma \"DomainHierarchyNG_sanity_check_config c tree \\<Longrightarrow>\n    {x. \\<exists>v. nP v = x} = set c \\<Longrightarrow>\n    verify_globals G nP tree\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>DomainHierarchyNG_sanity_check_config c tree;\n     {x. \\<exists>v. nP v = x} = set c\\<rbrakk>\n    \\<Longrightarrow> SINVAR_DomainHierarchyNG_impl.verify_globals G nP tree", "apply(simp add: DomainHierarchyNG_sanity_check_config_def split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>c\\<in>set c.\n                case c of\n                domainNameTrust.DN (level, trust) \\<Rightarrow>\n                  valid_hierarchy_pos tree level\n                | domainNameTrust.Unassigned \\<Rightarrow> True;\n     {x. \\<exists>v. nP v = x} = set c\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>set (nodesL G).\n                         case nP v of\n                         domainNameTrust.DN (level, trust) \\<Rightarrow>\n                           valid_hierarchy_pos tree level\n                         | domainNameTrust.Unassigned \\<Rightarrow> True", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>\\<forall>c\\<in>set c.\n                   case c of\n                   domainNameTrust.DN (level, trust) \\<Rightarrow>\n                     valid_hierarchy_pos tree level\n                   | domainNameTrust.Unassigned \\<Rightarrow> True;\n        {x. \\<exists>v. nP v = x} = set c; v \\<in> set (nodesL G)\\<rbrakk>\n       \\<Longrightarrow> case nP v of\n                         domainNameTrust.DN (level, trust) \\<Rightarrow>\n                           valid_hierarchy_pos tree level\n                         | domainNameTrust.Unassigned \\<Rightarrow> True", "apply(case_tac \"nP v\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v x1.\n       \\<lbrakk>\\<forall>c\\<in>set c.\n                   case c of\n                   domainNameTrust.DN (level, trust) \\<Rightarrow>\n                     valid_hierarchy_pos tree level\n                   | domainNameTrust.Unassigned \\<Rightarrow> True;\n        {x. \\<exists>v. nP v = x} = set c; v \\<in> set (nodesL G);\n        nP v = domainNameTrust.DN x1\\<rbrakk>\n       \\<Longrightarrow> case nP v of\n                         domainNameTrust.DN (level, trust) \\<Rightarrow>\n                           valid_hierarchy_pos tree level\n                         | domainNameTrust.Unassigned \\<Rightarrow> True\n 2. \\<And>v.\n       \\<lbrakk>\\<forall>c\\<in>set c.\n                   case c of\n                   domainNameTrust.DN (level, trust) \\<Rightarrow>\n                     valid_hierarchy_pos tree level\n                   | domainNameTrust.Unassigned \\<Rightarrow> True;\n        {x. \\<exists>v. nP v = x} = set c; v \\<in> set (nodesL G);\n        nP v = domainNameTrust.Unassigned\\<rbrakk>\n       \\<Longrightarrow> case nP v of\n                         domainNameTrust.DN (level, trust) \\<Rightarrow>\n                           valid_hierarchy_pos tree level\n                         | domainNameTrust.Unassigned \\<Rightarrow> True", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v x1.\n       \\<lbrakk>\\<forall>c\\<in>set c.\n                   case c of\n                   domainNameTrust.DN (level, trust) \\<Rightarrow>\n                     valid_hierarchy_pos tree level\n                   | domainNameTrust.Unassigned \\<Rightarrow> True;\n        {x. \\<exists>v. nP v = x} = set c; v \\<in> set (nodesL G);\n        nP v = domainNameTrust.DN x1\\<rbrakk>\n       \\<Longrightarrow> case x1 of\n                         (level, trust) \\<Rightarrow>\n                           valid_hierarchy_pos tree level", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v a b.\n       \\<lbrakk>Ball (set c)\n                 (case_domainNameTrust\n                   (\\<lambda>(level, trust). valid_hierarchy_pos tree level)\n                   True);\n        {x. \\<exists>v. nP v = x} = set c; v \\<in> set (nodesL G);\n        nP v = domainNameTrust.DN (a, b)\\<rbrakk>\n       \\<Longrightarrow> valid_hierarchy_pos tree a", "by force"], ["", "definition DomainHierarchyNG_offending_list:: \"'v list_graph \\<Rightarrow> ('v \\<Rightarrow> domainNameTrust) \\<Rightarrow> ('v \\<times> 'v) list list\" where\n  \"DomainHierarchyNG_offending_list G nP = (if sinvar G nP then\n    []\n   else \n    [ [e \\<leftarrow> edgesL G. case e of (s,r) \\<Rightarrow> \\<not> (nP r) \\<sqsubseteq>\\<^sub>t\\<^sub>r\\<^sub>u\\<^sub>s\\<^sub>t (nP s) ] ])\""], ["", "lemma \"DomainHierarchyNG.node_props P = \n  (\\<lambda>i. case node_properties P i of None \\<Rightarrow> SINVAR_DomainHierarchyNG.default_node_properties | Some property \\<Rightarrow> property)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DomainHierarchyNG.node_props P =\n    (\\<lambda>i.\n        case node_properties P i of\n        None \\<Rightarrow> default_node_properties\n        | Some property \\<Rightarrow> property)", "by(fact SecurityInvariant.node_props.simps[OF TopoS_DomainHierarchyNG, of \"P\"])"], ["", "definition \"NetModel_node_props P = (\\<lambda> i. (case (node_properties P) i of Some property \\<Rightarrow> property | None \\<Rightarrow> SINVAR_DomainHierarchyNG.default_node_properties))\""], ["", "(*lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_DomainHierarchy.default_node_properties P = NetModel_node_props P\"\napply(simp add: NetModel_node_props_def)\ndone*)\n\n(*TODO does this work?*)"], ["", "lemma[code_unfold]: \"DomainHierarchyNG.node_props P = NetModel_node_props P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DomainHierarchyNG.node_props P = NetModel_node_props P", "by(simp add: NetModel_node_props_def)"], ["", "definition \"DomainHierarchyNG_eval G P = (wf_list_graph G \\<and>\n  sinvar G (SecurityInvariant.node_props SINVAR_DomainHierarchyNG.default_node_properties P))\""], ["", "interpretation DomainHierarchyNG_impl:TopoS_List_Impl \n  where default_node_properties=SINVAR_DomainHierarchyNG.default_node_properties\n  and sinvar_spec=SINVAR_DomainHierarchyNG.sinvar\n  and sinvar_impl=sinvar\n  and receiver_violation=SINVAR_DomainHierarchyNG.receiver_violation\n  and offending_flows_impl=DomainHierarchyNG_offending_list\n  and node_props_impl=NetModel_node_props\n  and eval_impl=DomainHierarchyNG_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl default_node_properties SINVAR_DomainHierarchyNG.sinvar\n     sinvar SINVAR_DomainHierarchyNG.receiver_violation\n     DomainHierarchyNG_offending_list NetModel_node_props\n     DomainHierarchyNG_eval", "apply(unfold TopoS_List_Impl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SecurityInvariant SINVAR_DomainHierarchyNG.sinvar\n      default_node_properties\n      SINVAR_DomainHierarchyNG.receiver_violation \\<and>\n     (\\<forall>G nP.\n         wf_list_graph G \\<longrightarrow>\n         SINVAR_DomainHierarchyNG.sinvar (list_graph_to_graph G) nP =\n         sinvar G nP)) \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (DomainHierarchyNG_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        DomainHierarchyNG.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         DomainHierarchyNG.eval (list_graph_to_graph G) P) =\n        DomainHierarchyNG_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SecurityInvariant SINVAR_DomainHierarchyNG.sinvar\n     default_node_properties\n     SINVAR_DomainHierarchyNG.receiver_violation \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SINVAR_DomainHierarchyNG.sinvar (list_graph_to_graph G) nP =\n        sinvar G nP)\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (DomainHierarchyNG_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        DomainHierarchyNG.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         DomainHierarchyNG.eval (list_graph_to_graph G) P) =\n        DomainHierarchyNG_eval G P)", "apply(simp add: TopoS_DomainHierarchyNG list_graph_to_graph_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (DomainHierarchyNG_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        DomainHierarchyNG.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         DomainHierarchyNG.eval (list_graph_to_graph G) P) =\n        DomainHierarchyNG_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (DomainHierarchyNG_offending_list G nP)\n 2. (\\<forall>P.\n        DomainHierarchyNG.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         DomainHierarchyNG.eval (list_graph_to_graph G) P) =\n        DomainHierarchyNG_eval G P)", "apply(simp add: list_graph_to_graph_def DomainHierarchyNG_offending_set\n        DomainHierarchyNG_offending_set_def DomainHierarchyNG_offending_list_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P.\n        DomainHierarchyNG.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         DomainHierarchyNG.eval (list_graph_to_graph G) P) =\n        DomainHierarchyNG_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       DomainHierarchyNG.node_props_formaldef P = NetModel_node_props P\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        DomainHierarchyNG.eval (list_graph_to_graph G) P) =\n       DomainHierarchyNG_eval G P", "apply(simp only: NetModel_node_props_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       DomainHierarchyNG.node_props_formaldef P =\n       (\\<lambda>i.\n           case node_properties P i of\n           None \\<Rightarrow> default_node_properties\n           | Some property \\<Rightarrow> property)\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        DomainHierarchyNG.eval (list_graph_to_graph G) P) =\n       DomainHierarchyNG_eval G P", "apply(metis DomainHierarchyNG.node_props.simps DomainHierarchyNG.node_props_eq_node_props_formaldef)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        DomainHierarchyNG.eval (list_graph_to_graph G) P) =\n       DomainHierarchyNG_eval G P", "apply(simp only: DomainHierarchyNG_eval_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        DomainHierarchyNG.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and> sinvar G (DomainHierarchyNG.node_props P))", "apply(intro allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        DomainHierarchyNG.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and> sinvar G (DomainHierarchyNG.node_props P))", "apply(rule TopoS_eval_impl_proofrule[OF TopoS_DomainHierarchyNG])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G P nP.\n       wf_list_graph G \\<Longrightarrow>\n       SINVAR_DomainHierarchyNG.sinvar (list_graph_to_graph G) nP =\n       sinvar G nP", "apply(simp add: list_graph_to_graph_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>DomainHierarchyNG packing\\<close>"], ["", "definition SINVAR_LIB_DomainHierarchyNG :: \"('v::vertex, domainNameTrust) TopoS_packed\" where\n    \"SINVAR_LIB_DomainHierarchyNG \\<equiv> \n    \\<lparr> nm_name = ''DomainHierarchyNG'', \n      nm_receiver_violation = SINVAR_DomainHierarchyNG.receiver_violation,\n      nm_default = SINVAR_DomainHierarchyNG.default_node_properties, \n      nm_sinvar = sinvar,\n      nm_offending_flows = DomainHierarchyNG_offending_list, \n      nm_node_props = NetModel_node_props,\n      nm_eval = DomainHierarchyNG_eval\n      \\<rparr>\""], ["", "interpretation SINVAR_LIB_DomainHierarchyNG_interpretation: TopoS_modelLibrary SINVAR_LIB_DomainHierarchyNG \n      SINVAR_DomainHierarchyNG.sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_modelLibrary SINVAR_LIB_DomainHierarchyNG\n     SINVAR_DomainHierarchyNG.sinvar", "apply(unfold TopoS_modelLibrary_def SINVAR_LIB_DomainHierarchyNG_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''DomainHierarchyNG'',\n              nm_receiver_violation =\n                SINVAR_DomainHierarchyNG.receiver_violation,\n              nm_default = default_node_properties, nm_sinvar = sinvar,\n              nm_offending_flows = DomainHierarchyNG_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = DomainHierarchyNG_eval\\<rparr>) \\<and>\n    TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)\n     SINVAR_DomainHierarchyNG.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''DomainHierarchyNG'',\n              nm_receiver_violation =\n                SINVAR_DomainHierarchyNG.receiver_violation,\n              nm_default = default_node_properties, nm_sinvar = sinvar,\n              nm_offending_flows = DomainHierarchyNG_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = DomainHierarchyNG_eval\\<rparr>)\n 2. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)\n     SINVAR_DomainHierarchyNG.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)\n     SINVAR_DomainHierarchyNG.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''DomainHierarchyNG'',\n          nm_receiver_violation =\n            SINVAR_DomainHierarchyNG.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = DomainHierarchyNG_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = DomainHierarchyNG_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl default_node_properties SINVAR_DomainHierarchyNG.sinvar\n     sinvar SINVAR_DomainHierarchyNG.receiver_violation\n     DomainHierarchyNG_offending_list NetModel_node_props\n     DomainHierarchyNG_eval", "by(unfold_locales)"], ["", "text \\<open>Examples:\\<close>"], ["", "definition example_TUM_net :: \"string list_graph\" where\n  \"example_TUM_net \\<equiv> \\<lparr> nodesL=[''Gateway'', ''LowerSVR'', ''UpperSRV''], \n        edgesL=[\n          (''Gateway'',''LowerSVR''), (''Gateway'',''UpperSRV''), \n          (''LowerSVR'', ''Gateway''),\n          (''UpperSRV'', ''Gateway'')\n        ] \\<rparr>\""], ["", "value \"wf_list_graph example_TUM_net\""], ["", "definition example_TUM_config :: \"string \\<Rightarrow> domainNameTrust\" where\n  \"example_TUM_config \\<equiv> ((\\<lambda> e. default_node_properties)\n        (''Gateway'':= DN (''ACD''--''AISD''--Leaf, 1),\n         ''LowerSVR'':= DN (''ACD''--''AISD''--Leaf, 0),\n         ''UpperSRV'':= DN (''ACD''--Leaf, 0)\n       ))\""], ["", "definition example_TUM_hierarchy :: \"domainTree\" where\n\"example_TUM_hierarchy \\<equiv> (Department ''ACD'' [\n           Department ''AISD'' []\n       ])\""], ["", "value \"verify_globals example_TUM_net example_TUM_config example_TUM_hierarchy\""], ["", "value \"sinvar     example_TUM_net example_TUM_config\""], ["", "definition example_TUM_net_invalid where\n\"example_TUM_net_invalid \\<equiv> example_TUM_net\\<lparr>edgesL :=  \n    (''LowerSRV'', ''UpperSRV'')#(edgesL example_TUM_net)\\<rparr>\""], ["", "value \"verify_globals example_TUM_net_invalid example_TUM_config example_TUM_hierarchy\""], ["", "value \"sinvar     example_TUM_net_invalid example_TUM_config\""], ["", "value \"DomainHierarchyNG_offending_list example_TUM_net_invalid example_TUM_config\""], ["", "hide_const (open) NetModel_node_props"], ["", "hide_const (open) sinvar"], ["", "end"]]}