{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_Tainting_impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_Tainting.default_node_properties P = NetModel_node_props P\"", "lemma \"wf_list_graph tainting_example\"", "lemma \"sinvar tainting_example tainting_example_props\""], "translations": [["", "lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_Tainting.default_node_properties P = NetModel_node_props P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant.node_props SINVAR_Tainting.default_node_properties P =\n    NetModel_node_props P", "by(simp add: NetModel_node_props_def SecurityInvariant.node_props.simps[OF TopoS_Tainting])"], ["", "definition \"Tainting_eval G P = (wf_list_graph G \\<and> \n  sinvar G (SecurityInvariant.node_props SINVAR_Tainting.default_node_properties P))\""], ["", "interpretation Tainting_impl:TopoS_List_Impl\n  where default_node_properties=SINVAR_Tainting.default_node_properties\n  and sinvar_spec=SINVAR_Tainting.sinvar\n  and sinvar_impl=sinvar\n  and receiver_violation=SINVAR_Tainting.receiver_violation\n  and offending_flows_impl=Tainting_offending_list\n  and node_props_impl=NetModel_node_props\n  and eval_impl=Tainting_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_Tainting.default_node_properties\n     SINVAR_Tainting.sinvar sinvar SINVAR_Tainting.receiver_violation\n     Tainting_offending_list NetModel_node_props Tainting_eval", "apply(unfold TopoS_List_Impl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SecurityInvariant SINVAR_Tainting.sinvar\n      SINVAR_Tainting.default_node_properties\n      SINVAR_Tainting.receiver_violation \\<and>\n     (\\<forall>G nP.\n         wf_list_graph G \\<longrightarrow>\n         SINVAR_Tainting.sinvar (list_graph_to_graph G) nP =\n         sinvar G nP)) \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SecurityInvariant_withOffendingFlows.set_offending_flows\n         SINVAR_Tainting.sinvar (list_graph_to_graph G) nP =\n        set ` set (Tainting_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        SecurityInvariant.node_props_formaldef\n         SINVAR_Tainting.default_node_properties P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         SecurityInvariant.eval SINVAR_Tainting.sinvar\n          SINVAR_Tainting.default_node_properties (list_graph_to_graph G)\n          P) =\n        Tainting_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SecurityInvariant SINVAR_Tainting.sinvar\n     SINVAR_Tainting.default_node_properties\n     SINVAR_Tainting.receiver_violation \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SINVAR_Tainting.sinvar (list_graph_to_graph G) nP = sinvar G nP)\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SecurityInvariant_withOffendingFlows.set_offending_flows\n         SINVAR_Tainting.sinvar (list_graph_to_graph G) nP =\n        set ` set (Tainting_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        SecurityInvariant.node_props_formaldef\n         SINVAR_Tainting.default_node_properties P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         SecurityInvariant.eval SINVAR_Tainting.sinvar\n          SINVAR_Tainting.default_node_properties (list_graph_to_graph G)\n          P) =\n        Tainting_eval G P)", "apply(simp add: TopoS_Tainting)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G.\n       wf_list_graph G \\<longrightarrow>\n       (\\<forall>nP.\n           SINVAR_Tainting.sinvar (list_graph_to_graph G) nP =\n           (\\<forall>(e1, e2)\\<in>set (edgesL G). nP e1 \\<subseteq> nP e2))\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SecurityInvariant_withOffendingFlows.set_offending_flows\n         SINVAR_Tainting.sinvar (list_graph_to_graph G) nP =\n        set ` set (Tainting_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        SecurityInvariant.node_props_formaldef\n         SINVAR_Tainting.default_node_properties P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         SecurityInvariant.eval SINVAR_Tainting.sinvar\n          SINVAR_Tainting.default_node_properties (list_graph_to_graph G)\n          P) =\n        Tainting_eval G P)", "apply(simp add: list_graph_to_graph_def SINVAR_Tainting.sinvar_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SecurityInvariant_withOffendingFlows.set_offending_flows\n         SINVAR_Tainting.sinvar (list_graph_to_graph G) nP =\n        set ` set (Tainting_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        SecurityInvariant.node_props_formaldef\n         SINVAR_Tainting.default_node_properties P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         SecurityInvariant.eval SINVAR_Tainting.sinvar\n          SINVAR_Tainting.default_node_properties (list_graph_to_graph G)\n          P) =\n        Tainting_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       SecurityInvariant_withOffendingFlows.set_offending_flows\n        SINVAR_Tainting.sinvar (list_graph_to_graph G) nP =\n       set ` set (Tainting_offending_list G nP)\n 2. (\\<forall>P.\n        SecurityInvariant.node_props_formaldef\n         SINVAR_Tainting.default_node_properties P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         SecurityInvariant.eval SINVAR_Tainting.sinvar\n          SINVAR_Tainting.default_node_properties (list_graph_to_graph G)\n          P) =\n        Tainting_eval G P)", "apply(simp add: list_graph_to_graph_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G.\n       wf_list_graph G \\<longrightarrow>\n       (\\<forall>nP.\n           SecurityInvariant_withOffendingFlows.set_offending_flows\n            SINVAR_Tainting.sinvar\n            \\<lparr>nodes = set (nodesL G), edges = set (edgesL G)\\<rparr>\n            nP =\n           set ` set (Tainting_offending_list G nP))\n 2. (\\<forall>P.\n        SecurityInvariant.node_props_formaldef\n         SINVAR_Tainting.default_node_properties P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         SecurityInvariant.eval SINVAR_Tainting.sinvar\n          SINVAR_Tainting.default_node_properties (list_graph_to_graph G)\n          P) =\n        Tainting_eval G P)", "apply(simp add: list_graph_to_graph_def SINVAR_Tainting.sinvar_def Taints_offending_set\n                    SINVAR_Tainting.Taints_offending_set_def Tainting_offending_list_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P.\n        SecurityInvariant.node_props_formaldef\n         SINVAR_Tainting.default_node_properties P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         SecurityInvariant.eval SINVAR_Tainting.sinvar\n          SINVAR_Tainting.default_node_properties (list_graph_to_graph G)\n          P) =\n        Tainting_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       SecurityInvariant.node_props_formaldef\n        SINVAR_Tainting.default_node_properties P =\n       NetModel_node_props P\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        SecurityInvariant.eval SINVAR_Tainting.sinvar\n         SINVAR_Tainting.default_node_properties (list_graph_to_graph G)\n         P) =\n       Tainting_eval G P", "apply(simp only: NetModel_node_props_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       SecurityInvariant.node_props_formaldef\n        SINVAR_Tainting.default_node_properties P =\n       (\\<lambda>i.\n           case node_properties P i of\n           None \\<Rightarrow> SINVAR_Tainting.default_node_properties\n           | Some property \\<Rightarrow> property)\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        SecurityInvariant.eval SINVAR_Tainting.sinvar\n         SINVAR_Tainting.default_node_properties (list_graph_to_graph G)\n         P) =\n       Tainting_eval G P", "(*interpretation is in local context*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       SecurityInvariant.node_props_formaldef\n        SINVAR_Tainting.default_node_properties P =\n       (\\<lambda>i.\n           case node_properties P i of\n           None \\<Rightarrow> SINVAR_Tainting.default_node_properties\n           | Some property \\<Rightarrow> property)\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        SecurityInvariant.eval SINVAR_Tainting.sinvar\n         SINVAR_Tainting.default_node_properties (list_graph_to_graph G)\n         P) =\n       Tainting_eval G P", "apply (metis SecurityInvariant.node_props.simps SecurityInvariant.node_props_eq_node_props_formaldef TopoS_Tainting)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        SecurityInvariant.eval SINVAR_Tainting.sinvar\n         SINVAR_Tainting.default_node_properties (list_graph_to_graph G)\n         P) =\n       Tainting_eval G P", "apply(simp only: Tainting_eval_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        SecurityInvariant.eval SINVAR_Tainting.sinvar\n         SINVAR_Tainting.default_node_properties (list_graph_to_graph G)\n         P) =\n       (wf_list_graph G \\<and>\n        sinvar G\n         (SecurityInvariant.node_props\n           SINVAR_Tainting.default_node_properties P))", "apply(simp add: TopoS_eval_impl_proofrule[OF TopoS_Tainting])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (wf_list_graph G \\<and>\n        SINVAR_Tainting.sinvar (list_graph_to_graph G)\n         (SecurityInvariant.node_props\n           SINVAR_Tainting.default_node_properties P)) =\n       (wf_list_graph G \\<and>\n        (\\<forall>x\\<in>set (edgesL G).\n            case x of\n            (e1, e2) \\<Rightarrow>\n              SecurityInvariant.node_props\n               SINVAR_Tainting.default_node_properties P e1\n              \\<subseteq> SecurityInvariant.node_props\n                           SINVAR_Tainting.default_node_properties P e2))", "apply(simp add: list_graph_to_graph_def SINVAR_Tainting.sinvar_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Tainting packing\\<close>"], ["", "definition SINVAR_LIB_Tainting :: \"('v::vertex, SINVAR_Tainting.taints) TopoS_packed\" where\n    \"SINVAR_LIB_Tainting \\<equiv> \n    \\<lparr> nm_name = ''Tainting'', \n      nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n      nm_default = SINVAR_Tainting.default_node_properties, \n      nm_sinvar = sinvar,\n      nm_offending_flows = Tainting_offending_list, \n      nm_node_props = NetModel_node_props,\n      nm_eval = Tainting_eval\n      \\<rparr>\""], ["", "interpretation SINVAR_LIB_BLPbasic_interpretation: TopoS_modelLibrary SINVAR_LIB_Tainting\n      SINVAR_Tainting.sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_modelLibrary SINVAR_LIB_Tainting SINVAR_Tainting.sinvar", "apply(unfold TopoS_modelLibrary_def SINVAR_LIB_Tainting_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''Tainting'',\n              nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n              nm_default = SINVAR_Tainting.default_node_properties,\n              nm_sinvar = sinvar,\n              nm_offending_flows = Tainting_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = Tainting_eval\\<rparr>) \\<and>\n    TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)\n     SINVAR_Tainting.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''Tainting'',\n              nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n              nm_default = SINVAR_Tainting.default_node_properties,\n              nm_sinvar = sinvar,\n              nm_offending_flows = Tainting_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = Tainting_eval\\<rparr>)\n 2. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)\n     SINVAR_Tainting.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)\n     SINVAR_Tainting.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''Tainting'',\n          nm_receiver_violation = SINVAR_Tainting.receiver_violation,\n          nm_default = SINVAR_Tainting.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Tainting_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Tainting_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_Tainting.default_node_properties\n     SINVAR_Tainting.sinvar sinvar SINVAR_Tainting.receiver_violation\n     Tainting_offending_list NetModel_node_props Tainting_eval", "by(unfold_locales)"], ["", "subsubsection\\<open>Example\\<close>"], ["", "context\nbegin"], ["", "private"], ["", "definition tainting_example :: \"string list_graph\" where\n  \"tainting_example \\<equiv> \\<lparr> nodesL = [''produce 1'',\n                                  ''produce 2'',\n                                  ''produce 3'',\n                                  ''read 1 2'',\n                                  ''read 3'',\n                                  ''consume 1 2 3'',\n                                  ''consume 3''], \n              edgesL =[(''produce 1'', ''read 1 2''),\n                       (''produce 2'', ''read 1 2''),\n                       (''produce 3'', ''read 3''), \n                       (''read 3'', ''read 1 2''),\n                       (''read 1 2'', ''consume 1 2 3''),\n                       (''read 3'', ''consume 3'')] \\<rparr>\""], ["", "lemma \"wf_list_graph tainting_example\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph tainting_example", "by eval"], ["", "private"], ["", "definition tainting_example_props :: \"string \\<Rightarrow> SINVAR_Tainting.taints\" where\n    \"tainting_example_props \\<equiv> (\\<lambda> n. SINVAR_Tainting.default_node_properties)\n                          (''produce 1'' := {''1''},\n                           ''produce 2'' := {''2''},\n                           ''produce 3'' := {''3''},\n                           ''read 1 2'' := {''1'',''2'', ''3''},\n                           ''read 3'' := {''3''},\n                           ''consume 1 2 3'' := {''1'',''2'',''3''},\n                           ''consume 3'' := {''3''})\""], ["", "private"], ["", "lemma \"sinvar tainting_example tainting_example_props\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar tainting_example tainting_example_props", "by eval"], ["", "end"], ["", "export_code SINVAR_LIB_Tainting checking Scala"], ["", "hide_const (open) NetModel_node_props Tainting_offending_list Tainting_eval"], ["", "hide_const (open) sinvar"], ["", "end"]]}