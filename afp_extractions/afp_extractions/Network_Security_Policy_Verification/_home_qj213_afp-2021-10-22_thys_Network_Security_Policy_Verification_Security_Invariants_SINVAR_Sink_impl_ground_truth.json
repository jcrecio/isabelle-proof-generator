{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_Sink_impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_Sink.default_node_properties P = NetModel_node_props P\""], "translations": [["", "lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_Sink.default_node_properties P = NetModel_node_props P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sink.node_props P = NetModel_node_props P", "apply(simp add: NetModel_node_props_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"Sink_eval G P = (wf_list_graph G \\<and>\n  sinvar G (SecurityInvariant.node_props SINVAR_Sink.default_node_properties P))\""], ["", "interpretation Sink_impl:TopoS_List_Impl \n  where default_node_properties=SINVAR_Sink.default_node_properties\n  and sinvar_spec=SINVAR_Sink.sinvar\n  and sinvar_impl=sinvar\n  and receiver_violation=SINVAR_Sink.receiver_violation\n  and offending_flows_impl=Sink_offending_list\n  and node_props_impl=NetModel_node_props\n  and eval_impl=Sink_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_Sink.default_node_properties SINVAR_Sink.sinvar\n     sinvar SINVAR_Sink.receiver_violation Sink_offending_list\n     NetModel_node_props Sink_eval", "apply(unfold TopoS_List_Impl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SecurityInvariant SINVAR_Sink.sinvar\n      SINVAR_Sink.default_node_properties\n      SINVAR_Sink.receiver_violation \\<and>\n     (\\<forall>G nP.\n         wf_list_graph G \\<longrightarrow>\n         SINVAR_Sink.sinvar (list_graph_to_graph G) nP =\n         sinvar G nP)) \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (Sink_offending_list G nP)) \\<and>\n    (\\<forall>P. Sink.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and> Sink.eval (list_graph_to_graph G) P) =\n        Sink_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SecurityInvariant SINVAR_Sink.sinvar SINVAR_Sink.default_node_properties\n     SINVAR_Sink.receiver_violation \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SINVAR_Sink.sinvar (list_graph_to_graph G) nP = sinvar G nP)\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (Sink_offending_list G nP)) \\<and>\n    (\\<forall>P. Sink.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and> Sink.eval (list_graph_to_graph G) P) =\n        Sink_eval G P)", "apply(simp add: TopoS_Sink list_graph_to_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (Sink_offending_list G nP)) \\<and>\n    (\\<forall>P. Sink.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and> Sink.eval (list_graph_to_graph G) P) =\n        Sink_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (Sink_offending_list G nP)\n 2. (\\<forall>P. Sink.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and> Sink.eval (list_graph_to_graph G) P) =\n        Sink_eval G P)", "apply(simp add: list_graph_to_graph_def Sink_offending_set Sink_offending_set_def Sink_offending_list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P. Sink.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and> Sink.eval (list_graph_to_graph G) P) =\n        Sink_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P. Sink.node_props_formaldef P = NetModel_node_props P\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and> Sink.eval (list_graph_to_graph G) P) =\n       Sink_eval G P", "apply(simp only: NetModel_node_props_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       Sink.node_props_formaldef P =\n       (\\<lambda>i.\n           case node_properties P i of\n           None \\<Rightarrow> SINVAR_Sink.default_node_properties\n           | Some property \\<Rightarrow> property)\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and> Sink.eval (list_graph_to_graph G) P) =\n       Sink_eval G P", "apply(metis Sink.node_props.simps Sink.node_props_eq_node_props_formaldef)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and> Sink.eval (list_graph_to_graph G) P) =\n       Sink_eval G P", "apply(simp only: Sink_eval_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and> Sink.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and> sinvar G (Sink.node_props P))", "apply(intro allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and> Sink.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and> sinvar G (Sink.node_props P))", "apply(rule TopoS_eval_impl_proofrule[OF TopoS_Sink])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G P nP.\n       wf_list_graph G \\<Longrightarrow>\n       SINVAR_Sink.sinvar (list_graph_to_graph G) nP = sinvar G nP", "apply(simp_all add: list_graph_to_graph_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Sink packing\\<close>"], ["", "definition SINVAR_LIB_Sink :: \"('v::vertex, node_config) TopoS_packed\" where\n    \"SINVAR_LIB_Sink \\<equiv> \n    \\<lparr> nm_name = ''Sink'', \n      nm_receiver_violation = SINVAR_Sink.receiver_violation,\n      nm_default = SINVAR_Sink.default_node_properties, \n      nm_sinvar = sinvar,\n      nm_offending_flows = Sink_offending_list, \n      nm_node_props = NetModel_node_props,\n      nm_eval = Sink_eval\n      \\<rparr>\""], ["", "interpretation SINVAR_LIB_Sink_interpretation: TopoS_modelLibrary SINVAR_LIB_Sink\n      SINVAR_Sink.sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_modelLibrary SINVAR_LIB_Sink SINVAR_Sink.sinvar", "apply(unfold TopoS_modelLibrary_def SINVAR_LIB_Sink_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''Sink'',\n              nm_receiver_violation = SINVAR_Sink.receiver_violation,\n              nm_default = SINVAR_Sink.default_node_properties,\n              nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = Sink_eval\\<rparr>) \\<and>\n    TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)\n     SINVAR_Sink.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''Sink'',\n              nm_receiver_violation = SINVAR_Sink.receiver_violation,\n              nm_default = SINVAR_Sink.default_node_properties,\n              nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = Sink_eval\\<rparr>)\n 2. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)\n     SINVAR_Sink.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)\n     SINVAR_Sink.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''Sink'',\n          nm_receiver_violation = SINVAR_Sink.receiver_violation,\n          nm_default = SINVAR_Sink.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = Sink_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = Sink_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_Sink.default_node_properties SINVAR_Sink.sinvar\n     sinvar SINVAR_Sink.receiver_violation Sink_offending_list\n     NetModel_node_props Sink_eval", "by(unfold_locales)"], ["", "text \\<open>Examples\\<close>"], ["", "definition example_net_sink :: \"nat list_graph\" where\n  \"example_net_sink \\<equiv> \\<lparr> nodesL = [1::nat,2,3, 8, 11,12], \n    edgesL = [(1,8),(1,2), (2,8),(3,8),(4,8), (2,3),(3,2), (11,8),(12,8), (11,12), (1,12)] \\<rparr>\""], ["", "value \"wf_list_graph example_net_sink\""], ["", "definition example_conf_sink where\n  \"example_conf_sink \\<equiv> (\\<lambda>e. SINVAR_Sink.default_node_properties)(8:= Sink, 2:= SinkPool, 3:= SinkPool, 4:= SinkPool)\""], ["", "value \"sinvar example_net_sink example_conf_sink\""], ["", "value \"Sink_offending_list example_net_sink example_conf_sink\""], ["", "definition example_net_sink_invalid where\n  \"example_net_sink_invalid \\<equiv> example_net_sink\\<lparr>edgesL := (2,1)#(8,11)#(8,2)#(edgesL example_net_sink)\\<rparr>\""], ["", "value \"sinvar example_net_sink_invalid example_conf_sink\""], ["", "value \"Sink_offending_list example_net_sink_invalid example_conf_sink\""], ["", "hide_const (open) NetModel_node_props"], ["", "hide_const (open) sinvar"], ["", "end"]]}