{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_BLPbasic.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\"", "lemma BLP_def_unique: \"otherbot \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>G p i f. wf_graph G \\<and> \\<not> sinvar G p \\<and> f \\<in> (SecurityInvariant_withOffendingFlows.set_offending_flows sinvar G p) \\<and>\n       sinvar (delete_edges G f) p \\<and>\n        i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot)) \"", "lemma zero_default_candidate: \"\\<And> nP e1 e2. \\<not> ((\\<le>)::security_level \\<Rightarrow> security_level \\<Rightarrow> bool) (nP e1) (nP e2) \\<Longrightarrow> \\<not> (\\<le>) (nP e1) 0\"", "lemma zero_default_candidate_rule: \"\\<And> (nP::('v \\<Rightarrow> security_level)) e1 e2. \\<not> (nP e1) \\<le> (nP e2) \\<Longrightarrow> \\<not> (nP e1) \\<le> 0\"", "lemma privacylevel_refl: \"((\\<le>)::security_level \\<Rightarrow> security_level \\<Rightarrow> bool) e e\"", "lemma BLP_ENF: \"SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar (\\<le>)\"", "lemma BLP_ENF_refl: \"SecurityInvariant_withOffendingFlows.ENF_refl sinvar (\\<le>)\"", "lemma BLP_offending_set: \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = BLP_offending_set\"", "lemma TopoS_BLPBasic: \"SecurityInvariant sinvar default_node_properties receiver_violation\"", "lemma sinvar_BLPbasic_tancl:\n  \"wf_graph G \\<Longrightarrow> sinvar G nP = (\\<forall> v \\<in> nodes G. \\<forall>v' \\<in> succ_tran G v. (nP v) \\<le> (nP v'))\""], "translations": [["", "lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_mono sinvar", "apply(simp only: SecurityInvariant_withOffendingFlows.sinvar_mono_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>nP N E' E.\n       wf_graph \\<lparr>nodes = N, edges = E\\<rparr> \\<and>\n       E' \\<subseteq> E \\<and>\n       sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP \\<longrightarrow>\n       sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nP N E' E.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "by auto"], ["", "interpretation SecurityInvariant_preliminaries\nwhere sinvar = sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_preliminaries sinvar", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(frule_tac finite_distinct_list[OF wf_graph.finiteE])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        \\<exists>xs. set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(erule_tac exE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP xs.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(rename_tac list_edges)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(rule_tac ff=\"list_edges\" in SecurityInvariant_withOffendingFlows.mono_imp_set_offending_flows_not_empty[OF sinvar_mono])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> wf_graph G\n 2. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (set list_edges) G nP\n 3. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> set list_edges \\<subseteq> edges G\n 4. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> distinct list_edges\n 5. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 6. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(auto)[6]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP list_edges a b.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> edges G; \\<not> nP a \\<le> nP b;\n        set list_edges = edges G; distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (edges G) G nP\n 2. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(auto simp add: SecurityInvariant_withOffendingFlows.is_offending_flows_def graph_ops)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(fact SecurityInvariant_withOffendingFlows.sinvar_mono_imp_is_offending_flows_mono[OF sinvar_mono])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma BLP_def_unique: \"otherbot \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>G p i f. wf_graph G \\<and> \\<not> sinvar G p \\<and> f \\<in> (SecurityInvariant_withOffendingFlows.set_offending_flows sinvar G p) \\<and>\n       sinvar (delete_edges G f) p \\<and>\n        i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>G p i f.\n       wf_graph G \\<and>\n       \\<not> sinvar G p \\<and>\n       f \\<in> set_offending_flows G p \\<and>\n       sinvar (delete_edges G f) p \\<and>\n       i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < otherbot \\<Longrightarrow>\n    \\<exists>G.\n       wf_graph G \\<and>\n       (\\<exists>p.\n           (\\<exists>x\\<in>edges G.\n               \\<not> (case x of\n                       (e1, e2) \\<Rightarrow> p e1 \\<le> p e2)) \\<and>\n           (\\<exists>i f.\n               f \\<in> set_offending_flows G p \\<and>\n               (\\<forall>x\\<in>edges (delete_edges G f).\n                   case x of (e1, e2) \\<Rightarrow> p e1 \\<le> p e2) \\<and>\n               i \\<in> snd ` f \\<and>\n               (\\<forall>x\\<in>edges G.\n                   case x of\n                   (e1, e2) \\<Rightarrow>\n                     (e2 = i \\<longrightarrow>\n                      (if e1 = i then otherbot else p e1)\n                      \\<le> otherbot) \\<and>\n                     (e2 \\<noteq> i \\<longrightarrow>\n                      (if e1 = i then otherbot else p e1) \\<le> p e2))))", "apply (simp add: SecurityInvariant_withOffendingFlows.set_offending_flows_def\n      SecurityInvariant_withOffendingFlows.is_offending_flows_min_set_def\n      SecurityInvariant_withOffendingFlows.is_offending_flows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < otherbot \\<Longrightarrow>\n    \\<exists>G.\n       wf_graph G \\<and>\n       (\\<exists>p.\n           (\\<exists>x\\<in>edges G.\n               \\<not> (case x of\n                       (e1, e2) \\<Rightarrow> p e1 \\<le> p e2)) \\<and>\n           (\\<exists>i f.\n               f \\<subseteq> edges G \\<and>\n               (\\<exists>x\\<in>edges G.\n                   \\<not> (case x of\n                           (e1, e2) \\<Rightarrow> p e1 \\<le> p e2)) \\<and>\n               (\\<forall>(e1, e2)\\<in>edges (delete_edges G f).\n                   p e1 \\<le> p e2) \\<and>\n               (\\<forall>(e1, e2)\\<in>f.\n                   \\<exists>x\\<in>edges (add_edge e1 e2 (delete_edges G f)).\n                      \\<not> (case x of\n                              (e1, e2) \\<Rightarrow>\n                                p e1 \\<le> p e2)) \\<and>\n               (\\<forall>(e1, e2)\\<in>edges (delete_edges G f).\n                   p e1 \\<le> p e2) \\<and>\n               i \\<in> snd ` f \\<and>\n               (\\<forall>(e1, e2)\\<in>edges G.\n                   (e2 = i \\<longrightarrow>\n                    (if e1 = i then otherbot else p e1)\n                    \\<le> otherbot) \\<and>\n                   (e2 \\<noteq> i \\<longrightarrow>\n                    (if e1 = i then otherbot else p e1) \\<le> p e2))))", "apply (simp add:graph_ops)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < otherbot \\<Longrightarrow>\n    \\<exists>G.\n       wf_graph G \\<and>\n       (\\<exists>p.\n           (\\<exists>x\\<in>edges G.\n               \\<not> (case x of\n                       (e1, e2) \\<Rightarrow> p e1 \\<le> p e2)) \\<and>\n           (\\<exists>i f.\n               f \\<subseteq> edges G \\<and>\n               (\\<exists>x\\<in>edges G.\n                   \\<not> (case x of\n                           (e1, e2) \\<Rightarrow> p e1 \\<le> p e2)) \\<and>\n               (\\<forall>x\\<in>edges G - f.\n                   case x of (e1, e2) \\<Rightarrow> p e1 \\<le> p e2) \\<and>\n               (\\<forall>x\\<in>f.\n                   case x of\n                   (e1, e2) \\<Rightarrow>\n                     p e1 \\<le> p e2 \\<longrightarrow>\n                     (\\<exists>x\\<in>edges G - f.\n                         \\<not> (case x of\n                                 (e1, e2) \\<Rightarrow>\n                                   p e1 \\<le> p e2))) \\<and>\n               (\\<forall>x\\<in>edges G - f.\n                   case x of (e1, e2) \\<Rightarrow> p e1 \\<le> p e2) \\<and>\n               i \\<in> snd ` f \\<and>\n               (\\<forall>x\\<in>edges G.\n                   case x of\n                   (e1, e2) \\<Rightarrow>\n                     (e2 = i \\<longrightarrow>\n                      (if e1 = i then otherbot else p e1)\n                      \\<le> otherbot) \\<and>\n                     (e2 \\<noteq> i \\<longrightarrow>\n                      (if e1 = i then otherbot else p e1) \\<le> p e2))))", "apply (simp split: prod.split_asm prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < otherbot \\<Longrightarrow>\n    \\<exists>G.\n       wf_graph G \\<and>\n       (\\<exists>p.\n           (\\<exists>x\\<in>edges G.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  \\<not> p x1 \\<le> p x2) \\<and>\n           (\\<exists>i f.\n               f \\<subseteq> edges G \\<and>\n               (\\<exists>x\\<in>edges G.\n                   \\<forall>x1 x2.\n                      x = (x1, x2) \\<longrightarrow>\n                      \\<not> p x1 \\<le> p x2) \\<and>\n               (\\<forall>x\\<in>edges G - f.\n                   \\<forall>x1 x2.\n                      x = (x1, x2) \\<longrightarrow> p x1 \\<le> p x2) \\<and>\n               (\\<forall>x\\<in>f.\n                   \\<forall>x1 x2.\n                      x = (x1, x2) \\<longrightarrow>\n                      p x1 \\<le> p x2 \\<longrightarrow>\n                      (\\<exists>x\\<in>edges G - f.\n                          \\<forall>x1 x2.\n                             x = (x1, x2) \\<longrightarrow>\n                             \\<not> p x1 \\<le> p x2)) \\<and>\n               (\\<forall>x\\<in>edges G - f.\n                   \\<forall>x1 x2.\n                      x = (x1, x2) \\<longrightarrow> p x1 \\<le> p x2) \\<and>\n               i \\<in> snd ` f \\<and>\n               (\\<forall>x\\<in>edges G.\n                   \\<forall>x1.\n                      (x1 = i \\<longrightarrow>\n                       (\\<forall>x2.\n                           x = (i, x2) \\<longrightarrow>\n                           x2 \\<noteq> i \\<longrightarrow>\n                           otherbot \\<le> p x2)) \\<and>\n                      (x1 \\<noteq> i \\<longrightarrow>\n                       (\\<forall>x2.\n                           x = (x1, x2) \\<longrightarrow>\n                           (x2 = i \\<longrightarrow>\n                            p x1 \\<le> otherbot) \\<and>\n                           (x2 \\<noteq> i \\<longrightarrow>\n                            p x1 \\<le> p x2))))))", "apply(rule_tac x=\"\\<lparr> nodes=set [vertex_1,vertex_2], edges = set [(vertex_1,vertex_2)] \\<rparr>\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < otherbot \\<Longrightarrow>\n    wf_graph\n     \\<lparr>nodes = {vertex_1, vertex_2},\n        edges = {(vertex_1, vertex_2)}\\<rparr> \\<and>\n    (\\<exists>p.\n        \\<not> p vertex_1 \\<le> p vertex_2 \\<and>\n        (\\<exists>i f.\n            f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n            \\<not> p vertex_1 \\<le> p vertex_2 \\<and>\n            ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n             p vertex_1 \\<le> p vertex_2) \\<and>\n            (\\<forall>x\\<in>f.\n                \\<forall>x1 x2.\n                   x = (x1, x2) \\<longrightarrow>\n                   p x1 \\<le> p x2 \\<longrightarrow>\n                   (vertex_1, vertex_2) \\<notin> f \\<and>\n                   \\<not> p vertex_1 \\<le> p vertex_2) \\<and>\n            ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n             p vertex_1 \\<le> p vertex_2) \\<and>\n            i \\<in> snd ` f \\<and>\n            (\\<forall>x1.\n                (x1 = i \\<longrightarrow>\n                 vertex_1 = i \\<longrightarrow>\n                 otherbot \\<le> p vertex_2) \\<and>\n                (x1 \\<noteq> i \\<longrightarrow>\n                 vertex_1 = x1 \\<longrightarrow>\n                 (vertex_2 = i \\<longrightarrow>\n                  p vertex_1 \\<le> otherbot) \\<and>\n                 (vertex_2 \\<noteq> i \\<longrightarrow>\n                  p vertex_1 \\<le> p vertex_2)))))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < otherbot \\<Longrightarrow>\n    wf_graph\n     \\<lparr>nodes = {vertex_1, vertex_2},\n        edges = {(vertex_1, vertex_2)}\\<rparr>\n 2. 0 < otherbot \\<Longrightarrow>\n    \\<exists>p.\n       \\<not> p vertex_1 \\<le> p vertex_2 \\<and>\n       (\\<exists>i f.\n           f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n           \\<not> p vertex_1 \\<le> p vertex_2 \\<and>\n           ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n            p vertex_1 \\<le> p vertex_2) \\<and>\n           (\\<forall>x\\<in>f.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  p x1 \\<le> p x2 \\<longrightarrow>\n                  (vertex_1, vertex_2) \\<notin> f \\<and>\n                  \\<not> p vertex_1 \\<le> p vertex_2) \\<and>\n           ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n            p vertex_1 \\<le> p vertex_2) \\<and>\n           i \\<in> snd ` f \\<and>\n           (\\<forall>x1.\n               (x1 = i \\<longrightarrow>\n                vertex_1 = i \\<longrightarrow>\n                otherbot \\<le> p vertex_2) \\<and>\n               (x1 \\<noteq> i \\<longrightarrow>\n                vertex_1 = x1 \\<longrightarrow>\n                (vertex_2 = i \\<longrightarrow>\n                 p vertex_1 \\<le> otherbot) \\<and>\n                (vertex_2 \\<noteq> i \\<longrightarrow>\n                 p vertex_1 \\<le> p vertex_2))))", "apply(simp add: wf_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < otherbot \\<Longrightarrow>\n    \\<exists>p.\n       \\<not> p vertex_1 \\<le> p vertex_2 \\<and>\n       (\\<exists>i f.\n           f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n           \\<not> p vertex_1 \\<le> p vertex_2 \\<and>\n           ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n            p vertex_1 \\<le> p vertex_2) \\<and>\n           (\\<forall>x\\<in>f.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  p x1 \\<le> p x2 \\<longrightarrow>\n                  (vertex_1, vertex_2) \\<notin> f \\<and>\n                  \\<not> p vertex_1 \\<le> p vertex_2) \\<and>\n           ((vertex_1, vertex_2) \\<notin> f \\<longrightarrow>\n            p vertex_1 \\<le> p vertex_2) \\<and>\n           i \\<in> snd ` f \\<and>\n           (\\<forall>x1.\n               (x1 = i \\<longrightarrow>\n                vertex_1 = i \\<longrightarrow>\n                otherbot \\<le> p vertex_2) \\<and>\n               (x1 \\<noteq> i \\<longrightarrow>\n                vertex_1 = x1 \\<longrightarrow>\n                (vertex_2 = i \\<longrightarrow>\n                 p vertex_1 \\<le> otherbot) \\<and>\n                (vertex_2 \\<noteq> i \\<longrightarrow>\n                 p vertex_1 \\<le> p vertex_2))))", "apply(rule_tac x=\"(\\<lambda> x. 0)(vertex_1 := 1, vertex_2 := 0)\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < otherbot \\<Longrightarrow>\n    \\<exists>i f.\n       f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n       (vertex_1, vertex_2) \\<in> f \\<and>\n       (\\<forall>x\\<in>f.\n           \\<forall>x1.\n              (x1 = vertex_1 \\<longrightarrow>\n               x = (vertex_1, vertex_1) \\<longrightarrow>\n               (vertex_1, vertex_2) \\<notin> f) \\<and>\n              (x1 \\<noteq> vertex_1 \\<longrightarrow>\n               (x1 = vertex_2 \\<longrightarrow>\n                (\\<exists>x2. x = (vertex_2, x2)) \\<longrightarrow>\n                (vertex_1, vertex_2) \\<notin> f) \\<and>\n               (x1 \\<noteq> vertex_2 \\<longrightarrow>\n                (\\<exists>x2. x = (x1, x2)) \\<longrightarrow>\n                (vertex_1, vertex_2) \\<notin> f))) \\<and>\n       (vertex_1, vertex_2) \\<in> f \\<and>\n       i \\<in> snd ` f \\<and>\n       (\\<forall>x1.\n           (x1 = i \\<longrightarrow> vertex_1 \\<noteq> i) \\<and>\n           (x1 \\<noteq> i \\<longrightarrow>\n            vertex_1 = x1 \\<longrightarrow> vertex_2 = i))", "apply(rule_tac x=\"vertex_2\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < otherbot \\<Longrightarrow>\n    \\<exists>f\\<subseteq>{(vertex_1, vertex_2)}.\n       (vertex_1, vertex_2) \\<in> f \\<and>\n       (\\<forall>x\\<in>f.\n           \\<forall>x1.\n              (x1 = vertex_1 \\<longrightarrow>\n               x = (vertex_1, vertex_1) \\<longrightarrow>\n               (vertex_1, vertex_2) \\<notin> f) \\<and>\n              (x1 \\<noteq> vertex_1 \\<longrightarrow>\n               (x1 = vertex_2 \\<longrightarrow>\n                (\\<exists>x2. x = (vertex_2, x2)) \\<longrightarrow>\n                (vertex_1, vertex_2) \\<notin> f) \\<and>\n               (x1 \\<noteq> vertex_2 \\<longrightarrow>\n                (\\<exists>x2. x = (x1, x2)) \\<longrightarrow>\n                (vertex_1, vertex_2) \\<notin> f))) \\<and>\n       (vertex_1, vertex_2) \\<in> f \\<and> vertex_2 \\<in> snd ` f", "apply(rule_tac x=\"set [(vertex_1,vertex_2)]\" in exI, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*Test instantiation without any fancy lemmata*)\n(*\ninterpretation SecurityInvariant\nwhere default_node_properties = default_node_properties\nand sinvar = sinvar\nand receiver_violation = receiver_violation\n  unfolding default_node_properties_def\n  unfolding receiver_violation_def\n  apply unfold_locales\n  \n  apply(simp)\n  apply (simp add: SecurityInvariant_withOffendingFlows.set_offending_flows_def\n      SecurityInvariant_withOffendingFlows.is_offending_flows_min_set_def\n      SecurityInvariant_withOffendingFlows.is_offending_flows_def)\n  apply (simp add:graph_ops)\n  apply (simp split: prod.split_asm prod.split add:case_prod_beta)\n   apply(auto intro!:bexI)[1]\n   (*apply (smt image_iff offending_in_edges prod.collapse)*)\n  apply(blast intro: BLP_def_unique)\ndone\n*)"], ["", "subsubsection \\<open>ENF\\<close>"], ["", "lemma zero_default_candidate: \"\\<And> nP e1 e2. \\<not> ((\\<le>)::security_level \\<Rightarrow> security_level \\<Rightarrow> bool) (nP e1) (nP e2) \\<Longrightarrow> \\<not> (\\<le>) (nP e1) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nP e1 e2.\n       \\<not> nP e1 \\<le> nP e2 \\<Longrightarrow> \\<not> nP e1 \\<le> 0", "by simp_all"], ["", "lemma zero_default_candidate_rule: \"\\<And> (nP::('v \\<Rightarrow> security_level)) e1 e2. \\<not> (nP e1) \\<le> (nP e2) \\<Longrightarrow> \\<not> (nP e1) \\<le> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nP e1 e2.\n       \\<not> nP e1 \\<le> nP e2 \\<Longrightarrow> \\<not> nP e1 \\<le> 0", "by simp_all"], ["", "lemma privacylevel_refl: \"((\\<le>)::security_level \\<Rightarrow> security_level \\<Rightarrow> bool) e e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<le> e", "by(simp_all)"], ["", "lemma BLP_ENF: \"SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar (\\<le>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar\n     (\\<le>)", "unfolding SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G nP.\n       sinvar G nP = (\\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2)", "by simp"], ["", "lemma BLP_ENF_refl: \"SecurityInvariant_withOffendingFlows.ENF_refl sinvar (\\<le>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.ENF_refl sinvar (\\<le>)", "unfolding SecurityInvariant_withOffendingFlows.ENF_refl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar\n     (\\<le>) \\<and>\n    (\\<forall>p1. p1 \\<le> p1)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar\n     (\\<le>)\n 2. \\<forall>p1. p1 \\<le> p1", "apply(simp add: BLP_ENF)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p1. p1 \\<le> p1", "apply(simp add: privacylevel_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition BLP_offending_set:: \"'v graph \\<Rightarrow> ('v \\<Rightarrow> security_level) \\<Rightarrow> ('v \\<times> 'v) set set\" where\n  \"BLP_offending_set G nP = (if sinvar G nP then\n      {}\n     else \n      { {e \\<in> edges G. case e of (e1,e2) \\<Rightarrow> (nP e1) > (nP e2)} })\""], ["", "lemma BLP_offending_set: \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = BLP_offending_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_offending_flows = BLP_offending_set", "apply(simp only: fun_eq_iff SecurityInvariant_withOffendingFlows.ENF_offending_set[OF BLP_ENF] BLP_offending_set_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xa.\n       (if sinvar x xa then {}\n        else {{(e1, e2).\n               (e1, e2) \\<in> edges x \\<and> \\<not> xa e1 \\<le> xa e2}}) =\n       (if sinvar x xa then {}\n        else {{e \\<in> edges x.\n               case e of (e1, e2) \\<Rightarrow> xa e2 < xa e1}})", "apply(rule allI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       (if sinvar x xa then {}\n        else {{(e1, e2).\n               (e1, e2) \\<in> edges x \\<and> \\<not> xa e1 \\<le> xa e2}}) =\n       (if sinvar x xa then {}\n        else {{e \\<in> edges x.\n               case e of (e1, e2) \\<Rightarrow> xa e2 < xa e1}})", "apply(rename_tac G nP)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       (if sinvar G nP then {}\n        else {{(e1, e2).\n               (e1, e2) \\<in> edges G \\<and> \\<not> nP e1 \\<le> nP e2}}) =\n       (if sinvar G nP then {}\n        else {{e \\<in> edges G.\n               case e of (e1, e2) \\<Rightarrow> nP e2 < nP e1}})", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "interpretation BLPbasic: SecurityInvariant_IFS sinvar default_node_properties\n  rewrites \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = BLP_offending_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_IFS sinvar default_node_properties &&&\n    set_offending_flows = BLP_offending_set", "unfolding receiver_violation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_IFS sinvar default_node_properties &&&\n    set_offending_flows = BLP_offending_set", "unfolding default_node_properties_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_IFS sinvar 0 &&&\n    set_offending_flows = BLP_offending_set", "apply(unfold_locales)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>snd ` f.\n                            \\<not> sinvar G (nP(i := 0))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = 0\n 3. set_offending_flows = BLP_offending_set", "apply(rule ballI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> snd ` f\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar G (nP(i := 0))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = 0\n 3. set_offending_flows = BLP_offending_set", "apply(rule SecurityInvariant_withOffendingFlows.ENF_snds_refl_instance[OF BLP_ENF_refl])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> snd ` f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>nP e1 e2.\n                            \\<not> nP e1 \\<le> nP e2 \\<longrightarrow>\n                            \\<not> nP e1 \\<le> 0\n 2. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> snd ` f\\<rbrakk>\n       \\<Longrightarrow> ?f6 G f nP i \\<in> set_offending_flows G nP\n 3. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> snd ` f\\<rbrakk>\n       \\<Longrightarrow> i \\<in> snd ` ?f6 G f nP i\n 4. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = 0\n 5. set_offending_flows = BLP_offending_set", "apply(simp_all add: BLP_ENF BLP_ENF_refl)[3]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = 0\n 2. set_offending_flows = BLP_offending_set", "apply(erule default_uniqueness_by_counterexample_IFS)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> 0 \\<Longrightarrow>\n       \\<exists>G nP i f.\n          wf_graph G \\<and>\n          \\<not> sinvar G nP \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          sinvar (delete_edges G f) nP \\<and>\n          i \\<in> snd ` f \\<and> sinvar G (nP(i := otherbot))\n 2. set_offending_flows = BLP_offending_set", "apply(fact BLP_def_unique)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_offending_flows = BLP_offending_set", "apply(fact BLP_offending_set)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma TopoS_BLPBasic: \"SecurityInvariant sinvar default_node_properties receiver_violation\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties receiver_violation", "unfolding receiver_violation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties True", "by unfold_locales"], ["", "text\\<open>Alternate definition of the @{const sinvar}:\n      For all reachable nodes, the security level is higher\\<close>"], ["", "lemma sinvar_BLPbasic_tancl:\n  \"wf_graph G \\<Longrightarrow> sinvar G nP = (\\<forall> v \\<in> nodes G. \\<forall>v' \\<in> succ_tran G v. (nP v) \\<le> (nP v'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_graph G \\<Longrightarrow>\n    sinvar G nP =\n    (\\<forall>v\\<in>nodes G.\n        \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v')", "proof(unfold sinvar.simps, rule iffI, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                         \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\n 2. \\<lbrakk>wf_graph G;\n     \\<forall>v\\<in>nodes G.\n        \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2", "case 1"], ["proof (state)\nthis:\n  wf_graph G\n  \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                         \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\n 2. \\<lbrakk>wf_graph G;\n     \\<forall>v\\<in>nodes G.\n        \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2", "have \"(v, v') \\<in> (edges G)\\<^sup>+ \\<Longrightarrow> nP v \\<le> nP v'\" for v v'"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v, v') \\<in> (edges G)\\<^sup>+ \\<Longrightarrow> nP v \\<le> nP v'", "proof(induction rule: trancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y. (v, y) \\<in> edges G \\<Longrightarrow> nP v \\<le> nP y\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (edges G)\\<^sup>+; (y, z) \\<in> edges G;\n        nP v \\<le> nP y\\<rbrakk>\n       \\<Longrightarrow> nP v \\<le> nP z", "case base"], ["proof (state)\nthis:\n  (v, y_) \\<in> edges G\n\ngoal (2 subgoals):\n 1. \\<And>y. (v, y) \\<in> edges G \\<Longrightarrow> nP v \\<le> nP y\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (edges G)\\<^sup>+; (y, z) \\<in> edges G;\n        nP v \\<le> nP y\\<rbrakk>\n       \\<Longrightarrow> nP v \\<le> nP z", "thus ?case"], ["proof (prove)\nusing this:\n  (v, y_) \\<in> edges G\n\ngoal (1 subgoal):\n 1. nP v \\<le> nP y_", "using 1(2)"], ["proof (prove)\nusing this:\n  (v, y_) \\<in> edges G\n  \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2\n\ngoal (1 subgoal):\n 1. nP v \\<le> nP y_", "by fastforce"], ["proof (state)\nthis:\n  nP v \\<le> nP y_\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (edges G)\\<^sup>+; (y, z) \\<in> edges G;\n        nP v \\<le> nP y\\<rbrakk>\n       \\<Longrightarrow> nP v \\<le> nP z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (edges G)\\<^sup>+; (y, z) \\<in> edges G;\n        nP v \\<le> nP y\\<rbrakk>\n       \\<Longrightarrow> nP v \\<le> nP z", "case step"], ["proof (state)\nthis:\n  (v, y_) \\<in> (edges G)\\<^sup>+\n  (y_, z_) \\<in> edges G\n  nP v \\<le> nP y_\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (edges G)\\<^sup>+; (y, z) \\<in> edges G;\n        nP v \\<le> nP y\\<rbrakk>\n       \\<Longrightarrow> nP v \\<le> nP z", "thus ?case"], ["proof (prove)\nusing this:\n  (v, y_) \\<in> (edges G)\\<^sup>+\n  (y_, z_) \\<in> edges G\n  nP v \\<le> nP y_\n\ngoal (1 subgoal):\n 1. nP v \\<le> nP z_", "using 1(2)"], ["proof (prove)\nusing this:\n  (v, y_) \\<in> (edges G)\\<^sup>+\n  (y_, z_) \\<in> edges G\n  nP v \\<le> nP y_\n  \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2\n\ngoal (1 subgoal):\n 1. nP v \\<le> nP z_", "by fastforce"], ["proof (state)\nthis:\n  nP v \\<le> nP z_\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (?v, ?v') \\<in> (edges G)\\<^sup>+ \\<Longrightarrow> nP ?v \\<le> nP ?v'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v\\<in>nodes G.\n                         \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\n 2. \\<lbrakk>wf_graph G;\n     \\<forall>v\\<in>nodes G.\n        \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2", "thus ?case"], ["proof (prove)\nusing this:\n  (?v, ?v') \\<in> (edges G)\\<^sup>+ \\<Longrightarrow> nP ?v \\<le> nP ?v'\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>nodes G. \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'", "by(simp add: succ_tran_def)"], ["proof (state)\nthis:\n  \\<forall>v\\<in>nodes G. \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>v\\<in>nodes G.\n        \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>v\\<in>nodes G.\n        \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2", "case 2"], ["proof (state)\nthis:\n  wf_graph G\n  \\<forall>v\\<in>nodes G. \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>v\\<in>nodes G.\n        \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2", "from 2(1)[simplified wf_graph_def]"], ["proof (chain)\npicking this:\n  (fst ` edges G \\<subseteq> nodes G \\<and>\n   snd ` edges G \\<subseteq> nodes G) \\<and>\n  finite (edges G) \\<and> finite (nodes G)", "have f1: \"fst ` edges G \\<subseteq> nodes G\""], ["proof (prove)\nusing this:\n  (fst ` edges G \\<subseteq> nodes G \\<and>\n   snd ` edges G \\<subseteq> nodes G) \\<and>\n  finite (edges G) \\<and> finite (nodes G)\n\ngoal (1 subgoal):\n 1. fst ` edges G \\<subseteq> nodes G", "by simp"], ["proof (state)\nthis:\n  fst ` edges G \\<subseteq> nodes G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>v\\<in>nodes G.\n        \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2", "from f1 2(2)"], ["proof (chain)\npicking this:\n  fst ` edges G \\<subseteq> nodes G\n  \\<forall>v\\<in>nodes G. \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'", "have \"\\<forall>v \\<in> (fst ` edges G). \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\""], ["proof (prove)\nusing this:\n  fst ` edges G \\<subseteq> nodes G\n  \\<forall>v\\<in>nodes G. \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>fst ` edges G.\n       \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'", "by auto"], ["proof (state)\nthis:\n  \\<forall>v\\<in>fst ` edges G.\n     \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>v\\<in>nodes G.\n        \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>fst ` edges G.\n     \\<forall>v'\\<in>succ_tran G v. nP v \\<le> nP v'\n\ngoal (1 subgoal):\n 1. \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2", "unfolding succ_tran_def"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>fst ` edges G.\n     \\<forall>v'\\<in>{e2. (v, e2) \\<in> (edges G)\\<^sup>+}. nP v \\<le> nP v'\n\ngoal (1 subgoal):\n 1. \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>(e1, e2)\\<in>edges G. nP e1 \\<le> nP e2\n\ngoal:\nNo subgoals!", "qed"], ["", "hide_fact (open) sinvar_mono"], ["", "hide_fact BLP_def_unique zero_default_candidate zero_default_candidate_rule privacylevel_refl BLP_ENF BLP_ENF_refl"], ["", "hide_const (open) sinvar receiver_violation default_node_properties"], ["", "end"]]}