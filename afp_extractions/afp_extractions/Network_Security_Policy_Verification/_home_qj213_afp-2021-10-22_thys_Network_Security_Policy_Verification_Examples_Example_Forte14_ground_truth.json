{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Examples/Example_Forte14.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma \"wf_list_graph policy\"", "lemma \"length (edgesL policy) = 21\"", "lemma \"DomainHierarchyNG_sanity_check_config\n    (map snd [\n            (''CC'', DN (''aircraft''--''crew''--Leaf, 1)),\n            (''C1'', DN (''aircraft''--''crew''--Leaf, 0)),\n            (''C2'', DN (''aircraft''--''crew''--Leaf, 0)),\n            (''IFEsrv'', DN (''aircraft''--''entertain''--Leaf, 0)),\n            (''IFE1'', DN (''aircraft''--''entertain''--Leaf, 0)),\n            (''IFE2'', DN (''aircraft''--''entertain''--Leaf, 0)),\n            (''SAT'', DN (''aircraft''--''entertain''--''INET''--Leaf, 0)),\n            (''Wifi'', DN (''aircraft''--''entertain''--''POD''--Leaf, 1)),\n            (''P1'', DN (''aircraft''--''entertain''--''POD''--Leaf, 0)),\n            (''P2'', DN (''aircraft''--''entertain''--''POD''--Leaf, 0))\n                            ])\n            (\n            Department ''aircraft'' [\n              Department ''entertain'' [\n                Department ''POD'' [], Department ''INET'' []\n              ],\n              Department ''crew'' []\n            ])\"", "lemma \"all_security_requirements_fulfilled security_invariants policy\"", "lemma \"implc_get_offending_flows security_invariants policy = []\"", "lemma \"all_security_requirements_fulfilled security_invariants policy\"", "lemma \"all_security_requirements_fulfilled security_invariants max_policy\""], "translations": [["", "lemma \"wf_list_graph policy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph policy", "by eval"], ["", "(*21 rules*)"], ["", "lemma \"length (edgesL policy) = 21\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (edgesL policy) = 21", "by eval"], ["", "definition DomainHierarchy_m::\"(string SecurityInvariant)\" where\n      \"DomainHierarchy_m \\<equiv> new_configured_list_SecurityInvariant SINVAR_DomainHierarchyNG_impl.SINVAR_LIB_DomainHierarchyNG \\<lparr> \n          node_properties = [\n            ''CC'' \\<mapsto> DN (''aircraft''--''crew''--Leaf, 1),\n            ''C1'' \\<mapsto> DN (''aircraft''--''crew''--Leaf, 0),\n            ''C2'' \\<mapsto> DN (''aircraft''--''crew''--Leaf, 0),\n            ''IFEsrv'' \\<mapsto> DN (''aircraft''--''entertain''--Leaf, 0),\n            ''IFE1'' \\<mapsto> DN (''aircraft''--''entertain''--Leaf, 0),\n            ''IFE2'' \\<mapsto> DN (''aircraft''--''entertain''--Leaf, 0),\n            ''SAT'' \\<mapsto> DN (''aircraft''--''entertain''--''INET''--Leaf, 0),\n            ''Wifi'' \\<mapsto> DN (''aircraft''--''entertain''--''POD''--Leaf, 1),\n            ''P1'' \\<mapsto> DN (''aircraft''--''entertain''--''POD''--Leaf, 0),\n            ''P2'' \\<mapsto> DN (''aircraft''--''entertain''--''POD''--Leaf, 0)\n          ]\n          \\<rparr> ''Device Hierarchy''\""], ["", "text\\<open>sanity check that the host attributes correspond to the desired hierarchy\\<close>"], ["", "lemma \"DomainHierarchyNG_sanity_check_config\n    (map snd [\n            (''CC'', DN (''aircraft''--''crew''--Leaf, 1)),\n            (''C1'', DN (''aircraft''--''crew''--Leaf, 0)),\n            (''C2'', DN (''aircraft''--''crew''--Leaf, 0)),\n            (''IFEsrv'', DN (''aircraft''--''entertain''--Leaf, 0)),\n            (''IFE1'', DN (''aircraft''--''entertain''--Leaf, 0)),\n            (''IFE2'', DN (''aircraft''--''entertain''--Leaf, 0)),\n            (''SAT'', DN (''aircraft''--''entertain''--''INET''--Leaf, 0)),\n            (''Wifi'', DN (''aircraft''--''entertain''--''POD''--Leaf, 1)),\n            (''P1'', DN (''aircraft''--''entertain''--''POD''--Leaf, 0)),\n            (''P2'', DN (''aircraft''--''entertain''--''POD''--Leaf, 0))\n                            ])\n            (\n            Department ''aircraft'' [\n              Department ''entertain'' [\n                Department ''POD'' [], Department ''INET'' []\n              ],\n              Department ''crew'' []\n            ])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DomainHierarchyNG_sanity_check_config\n     (map snd\n       [(''CC'', domainNameTrust.DN (''aircraft'' -- ''crew'' -- Leaf, 1)),\n        (''C1'', domainNameTrust.DN (''aircraft'' -- ''crew'' -- Leaf, 0)),\n        (''C2'', domainNameTrust.DN (''aircraft'' -- ''crew'' -- Leaf, 0)),\n        (''IFEsrv'',\n         domainNameTrust.DN (''aircraft'' -- ''entertain'' -- Leaf, 0)),\n        (''IFE1'',\n         domainNameTrust.DN (''aircraft'' -- ''entertain'' -- Leaf, 0)),\n        (''IFE2'',\n         domainNameTrust.DN (''aircraft'' -- ''entertain'' -- Leaf, 0)),\n        (''SAT'',\n         domainNameTrust.DN\n          (''aircraft'' -- ''entertain'' -- ''INET'' -- Leaf, 0)),\n        (''Wifi'',\n         domainNameTrust.DN\n          (''aircraft'' -- ''entertain'' -- ''POD'' -- Leaf, 1)),\n        (''P1'',\n         domainNameTrust.DN\n          (''aircraft'' -- ''entertain'' -- ''POD'' -- Leaf, 0)),\n        (''P2'',\n         domainNameTrust.DN\n          (''aircraft'' -- ''entertain'' -- ''POD'' -- Leaf, 0))])\n     (Department ''aircraft''\n       [Department ''entertain''\n         [Department ''POD'' [], Department ''INET'' []],\n        Department ''crew'' []])", "by eval"], ["", "definition PolEnforcePoint_m::\"(string SecurityInvariant)\" where\n  \"PolEnforcePoint_m \\<equiv> new_configured_list_SecurityInvariant SINVAR_LIB_PolEnforcePointExtended \\<lparr> \n          node_properties = [''IFEsrv'' \\<mapsto> SINVAR_SecGwExt.PolEnforcePointIN,\n                             ''IFE1'' \\<mapsto> SINVAR_SecGwExt.DomainMember,\n                             ''IFE2'' \\<mapsto> SINVAR_SecGwExt.DomainMember]\n          \\<rparr> ''IFEsrc mediates access of its thin clients''\""], ["", "(*\n0 - unclassified\n1 - confidential\n2 - secret\n3 - topsecret\n*)"], ["", "definition BLP_m::\"(string SecurityInvariant)\" where\n    \"BLP_m \\<equiv> new_configured_list_SecurityInvariant SINVAR_LIB_BLPtrusted \\<lparr> \n          node_properties = [''CC'' \\<mapsto> \\<lparr> security_level = 2, trusted = False \\<rparr>,\n                             ''C1'' \\<mapsto> \\<lparr> security_level = 2, trusted = False \\<rparr>,\n                             ''C2'' \\<mapsto> \\<lparr> security_level = 2, trusted = False \\<rparr>,\n                             ''IFE1'' \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n                             ''IFE2'' \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n                             ''IFEsrv'' \\<mapsto> \\<lparr> security_level = 0, trusted = True \\<rparr>]\n          \\<rparr> ''Confidential data''\""], ["", "definition \"security_invariants = [ DomainHierarchy_m, PolEnforcePoint_m, BLP_m]\""], ["", "lemma \"all_security_requirements_fulfilled security_invariants policy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n     security_invariants policy", "by eval"], ["", "lemma \"implc_get_offending_flows security_invariants policy = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implc_get_offending_flows security_invariants policy = []", "by eval"], ["", "text\\<open>\nVisualization with a violation.\n\\<close>"], ["", "ML\\<open>\nvisualize_graph @{context} @{term \"security_invariants\"} @{term \"policy\\<lparr>edgesL := (''P1'', ''CC'')#edgesL policy\\<rparr>\"};\n\\<close>"], ["", "definition \"max_policy = generate_valid_topology security_invariants \\<lparr>nodesL = nodesL policy, edgesL = List.product (nodesL policy) (nodesL policy) \\<rparr>\""], ["", "text\\<open>calculating the maximum policy\\<close>"], ["", "value \"max_policy\""], ["", "text\\<open>\nThe diff to the maximum policy. It adds reflexive flows and the IFEsrv may send to the PODs.\n\\<close>"], ["", "ML_val\\<open>\nvisualize_edges @{context} @{term \"edgesL policy\"} \n    [(\"edge [dir=\\\"arrow\\\", style=dashed, color=\\\"#FF8822\\\", constraint=false]\", @{term \"[e \\<leftarrow> edgesL max_policy. e \\<notin> set (edgesL policy)]\"})] \"\"; \n\\<close>"], ["", "text\\<open>\nVisualizing the maximum policy.\n\\<close>"], ["", "ML\\<open>\nvisualize_graph @{context} @{term \"security_invariants\"} @{term \"max_policy\"};\n\\<close>"], ["", "lemma \"all_security_requirements_fulfilled security_invariants policy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n     security_invariants policy", "by eval"], ["", "lemma \"all_security_requirements_fulfilled security_invariants max_policy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n     security_invariants max_policy", "by eval"], ["", "subsection\\<open>A stateful implementation\\<close>"], ["", "definition \"stateful_policy = generate_valid_stateful_policy_IFSACS policy security_invariants\""], ["", "value \"stateful_policy\""], ["", "ML_val\\<open>\nvisualize_edges @{context} @{term \"flows_fixL stateful_policy\"} \n    [(\"edge [dir=\\\"arrow\\\", style=dashed, color=\\\"#FF8822\\\", constraint=false]\", @{term \"flows_stateL stateful_policy\"})] \"\"; \n\\<close>"], ["", "end"]]}