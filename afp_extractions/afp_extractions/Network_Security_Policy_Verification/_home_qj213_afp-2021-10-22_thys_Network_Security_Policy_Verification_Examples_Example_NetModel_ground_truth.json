{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Examples/Example_NetModel.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\""], "translations": [["", "lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_mono sinvar", "apply(simp only: SecurityInvariant_withOffendingFlows.sinvar_mono_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>nP N E' E.\n       wf_graph \\<lparr>nodes = N, edges = E\\<rparr> \\<and>\n       E' \\<subseteq> E \\<and>\n       sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP \\<longrightarrow>\n       sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nP N E' E.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "by auto\n\n \n\\<comment> \\<open>The preliminaries: mostly, sinvar is monotonic\\<close>"], ["", "interpretation SecurityInvariant_preliminaries\nwhere sinvar = sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_preliminaries sinvar", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(frule_tac finite_distinct_list[OF wf_graph.finiteE])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        \\<exists>xs. set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(erule_tac exE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP xs.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(rename_tac list_edges)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(rule_tac ff=\"list_edges\" in SecurityInvariant_withOffendingFlows.mono_imp_set_offending_flows_not_empty[OF sinvar_mono])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> wf_graph G\n 2. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (set list_edges) G nP\n 3. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> set list_edges \\<subseteq> edges G\n 4. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> distinct list_edges\n 5. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 6. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(auto)[6]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP list_edges a b.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> edges G; set list_edges = edges G;\n        distinct list_edges;\n        \\<not> SecurityInvariant_withOffendingFlows.is_offending_flows\n                sinvar (edges G) G nP\\<rbrakk>\n       \\<Longrightarrow> nP a\n 2. \\<And>G nP list_edges a b.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> edges G; set list_edges = edges G;\n        distinct list_edges;\n        \\<not> SecurityInvariant_withOffendingFlows.is_offending_flows\n                sinvar (edges G) G nP\\<rbrakk>\n       \\<Longrightarrow> nP b\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(auto simp add: SecurityInvariant_withOffendingFlows.is_offending_flows_def graph_ops)[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(fact SecurityInvariant_withOffendingFlows.sinvar_mono_imp_is_offending_flows_mono[OF sinvar_mono])"], ["proof (prove)\ngoal:\nNo subgoals!", "done\n\n\n\\<comment> \\<open>With generic target focus\\<close>"], ["", "interpretation Example_NetModel: SecurityInvariant\nwhere default_node_properties = default_node_properties\nand sinvar = sinvar\nand receiver_violation = receiver_violation"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties receiver_violation", "(*yep, that's a variable*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties receiver_violation", "unfolding default_node_properties_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar False receiver_violation", "apply unfold_locales\n\n   \\<comment> \\<open>Secure bydefault\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP F i.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        F \\<in> set_offending_flows G nP\\<rbrakk>\n       \\<Longrightarrow> (\\<not> receiver_violation \\<longrightarrow>\n                          i \\<in> fst ` F \\<longrightarrow>\n                          \\<not> sinvar G (nP(i := False))) \\<and>\n                         (receiver_violation \\<longrightarrow>\n                          i \\<in> snd ` F \\<longrightarrow>\n                          \\<not> sinvar G (nP(i := False)))\n 2. \\<And>otherbot.\n       otherbot \\<noteq> False \\<Longrightarrow>\n       \\<exists>G nP i F.\n          wf_graph G \\<and>\n          \\<not> sinvar G nP \\<and>\n          F \\<in> set_offending_flows G nP \\<and>\n          sinvar (delete_edges G F) nP \\<and>\n          (\\<not> receiver_violation \\<longrightarrow>\n           i \\<in> fst ` F \\<and> sinvar G (nP(i := otherbot))) \\<and>\n          (receiver_violation \\<longrightarrow>\n           i \\<in> snd ` F \\<and> sinvar G (nP(i := otherbot)))", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP F i.\n       \\<lbrakk>wf_graph G;\n        \\<exists>x\\<in>edges G.\n           \\<not> (case x of (e1, e2) \\<Rightarrow> nP e1 \\<and> nP e2);\n        F \\<in> set_offending_flows G nP\\<rbrakk>\n       \\<Longrightarrow> (\\<not> receiver_violation \\<longrightarrow>\n                          i \\<in> fst ` F \\<longrightarrow>\n                          (\\<exists>x\\<in>edges G.\n                              \\<not> (case x of\n(e1, e2) \\<Rightarrow>\n  e2 \\<noteq> i \\<and>\n  (e2 \\<noteq> i \\<longrightarrow>\n   (if e1 = i then False else nP e1) \\<and> nP e2)))) \\<and>\n                         (receiver_violation \\<longrightarrow>\n                          i \\<in> snd ` F \\<longrightarrow>\n                          (\\<exists>x\\<in>edges G.\n                              \\<not> (case x of\n(e1, e2) \\<Rightarrow>\n  e2 \\<noteq> i \\<and>\n  (e2 \\<noteq> i \\<longrightarrow>\n   (if e1 = i then False else nP e1) \\<and> nP e2))))\n 2. \\<And>otherbot.\n       otherbot \\<noteq> False \\<Longrightarrow>\n       \\<exists>G nP i F.\n          wf_graph G \\<and>\n          \\<not> sinvar G nP \\<and>\n          F \\<in> set_offending_flows G nP \\<and>\n          sinvar (delete_edges G F) nP \\<and>\n          (\\<not> receiver_violation \\<longrightarrow>\n           i \\<in> fst ` F \\<and> sinvar G (nP(i := otherbot))) \\<and>\n          (receiver_violation \\<longrightarrow>\n           i \\<in> snd ` F \\<and> sinvar G (nP(i := otherbot)))", "apply (simp add: SecurityInvariant_withOffendingFlows.set_offending_flows_def\n       SecurityInvariant_withOffendingFlows.is_offending_flows_min_set_def\n       SecurityInvariant_withOffendingFlows.is_offending_flows_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP F i.\n       \\<lbrakk>wf_graph G;\n        \\<exists>x\\<in>edges G.\n           \\<not> (case x of (e1, e2) \\<Rightarrow> nP e1 \\<and> nP e2);\n        F \\<subseteq> edges G \\<and>\n        (\\<forall>x\\<in>edges (delete_edges G F).\n            case x of (e1, e2) \\<Rightarrow> nP e1 \\<and> nP e2) \\<and>\n        (\\<forall>x\\<in>F.\n            case x of\n            (e1, e2) \\<Rightarrow>\n              \\<exists>x\\<in>edges (add_edge e1 e2 (delete_edges G F)).\n                 \\<not> (case x of\n                         (e1, e2) \\<Rightarrow>\n                           nP e1 \\<and> nP e2))\\<rbrakk>\n       \\<Longrightarrow> (\\<not> receiver_violation \\<longrightarrow>\n                          i \\<in> fst ` F \\<longrightarrow>\n                          (\\<exists>x\\<in>edges G.\n                              \\<not> (case x of\n(e1, e2) \\<Rightarrow>\n  e2 \\<noteq> i \\<and>\n  (e2 \\<noteq> i \\<longrightarrow>\n   (if e1 = i then False else nP e1) \\<and> nP e2)))) \\<and>\n                         (receiver_violation \\<longrightarrow>\n                          i \\<in> snd ` F \\<longrightarrow>\n                          (\\<exists>x\\<in>edges G.\n                              \\<not> (case x of\n(e1, e2) \\<Rightarrow>\n  e2 \\<noteq> i \\<and>\n  (e2 \\<noteq> i \\<longrightarrow>\n   (if e1 = i then False else nP e1) \\<and> nP e2))))\n 2. \\<And>otherbot.\n       otherbot \\<noteq> False \\<Longrightarrow>\n       \\<exists>G nP i F.\n          wf_graph G \\<and>\n          \\<not> sinvar G nP \\<and>\n          F \\<in> set_offending_flows G nP \\<and>\n          sinvar (delete_edges G F) nP \\<and>\n          (\\<not> receiver_violation \\<longrightarrow>\n           i \\<in> fst ` F \\<and> sinvar G (nP(i := otherbot))) \\<and>\n          (receiver_violation \\<longrightarrow>\n           i \\<in> snd ` F \\<and> sinvar G (nP(i := otherbot)))", "apply (simp add: graph_ops)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP F i.\n       \\<lbrakk>wf_graph G;\n        \\<exists>x\\<in>edges G.\n           \\<not> (case x of (e1, e2) \\<Rightarrow> nP e1 \\<and> nP e2);\n        F \\<subseteq> edges G \\<and>\n        (\\<forall>x\\<in>edges G - F.\n            case x of (e1, e2) \\<Rightarrow> nP e1 \\<and> nP e2) \\<and>\n        (\\<forall>x\\<in>F.\n            case x of\n            (e1, e2) \\<Rightarrow>\n              nP e1 \\<longrightarrow>\n              nP e2 \\<longrightarrow>\n              (\\<exists>x\\<in>edges G - F.\n                  \\<not> (case x of\n                          (e1, e2) \\<Rightarrow>\n                            nP e1 \\<and> nP e2)))\\<rbrakk>\n       \\<Longrightarrow> (\\<not> receiver_violation \\<longrightarrow>\n                          i \\<in> fst ` F \\<longrightarrow>\n                          (\\<exists>x\\<in>edges G.\n                              \\<not> (case x of\n(e1, e2) \\<Rightarrow>\n  e2 \\<noteq> i \\<and>\n  (e2 \\<noteq> i \\<longrightarrow>\n   (if e1 = i then False else nP e1) \\<and> nP e2)))) \\<and>\n                         (receiver_violation \\<longrightarrow>\n                          i \\<in> snd ` F \\<longrightarrow>\n                          (\\<exists>x\\<in>edges G.\n                              \\<not> (case x of\n(e1, e2) \\<Rightarrow>\n  e2 \\<noteq> i \\<and>\n  (e2 \\<noteq> i \\<longrightarrow>\n   (if e1 = i then False else nP e1) \\<and> nP e2))))\n 2. \\<And>otherbot.\n       otherbot \\<noteq> False \\<Longrightarrow>\n       \\<exists>G nP i F.\n          wf_graph G \\<and>\n          \\<not> sinvar G nP \\<and>\n          F \\<in> set_offending_flows G nP \\<and>\n          sinvar (delete_edges G F) nP \\<and>\n          (\\<not> receiver_violation \\<longrightarrow>\n           i \\<in> fst ` F \\<and> sinvar G (nP(i := otherbot))) \\<and>\n          (receiver_violation \\<longrightarrow>\n           i \\<in> snd ` F \\<and> sinvar G (nP(i := otherbot)))", "apply (simp split: prod.split_asm prod.split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP F i.\n       \\<lbrakk>\\<forall>x\\<in>F.\n                   \\<forall>x1.\n                      nP x1 \\<longrightarrow>\n                      (\\<forall>x2.\n                          x = (x1, x2) \\<longrightarrow> \\<not> nP x2);\n        \\<exists>x\\<in>edges G.\n           \\<forall>x1.\n              nP x1 \\<longrightarrow>\n              (\\<forall>x2. x = (x1, x2) \\<longrightarrow> \\<not> nP x2);\n        wf_graph G; F \\<subseteq> edges G;\n        \\<forall>x\\<in>edges G - F.\n           \\<forall>x1 x2.\n              x = (x1, x2) \\<longrightarrow> nP x1 \\<and> nP x2\\<rbrakk>\n       \\<Longrightarrow> (\\<not> receiver_violation \\<longrightarrow>\n                          i \\<in> fst ` F \\<longrightarrow>\n                          (\\<exists>x\\<in>edges G.\n                              \\<forall>x1.\n                                 x1 \\<noteq> i \\<longrightarrow>\n                                 (\\<forall>x2.\n                                     x = (x1, x2) \\<longrightarrow>\n                                     x2 = i \\<or>\n                                     x2 \\<noteq> i \\<and>\n                                     (nP x1 \\<longrightarrow>\n\\<not> nP x2)))) \\<and>\n                         (receiver_violation \\<longrightarrow>\n                          i \\<in> snd ` F \\<longrightarrow>\n                          (\\<exists>x\\<in>edges G.\n                              \\<forall>x1.\n                                 x1 \\<noteq> i \\<longrightarrow>\n                                 (\\<forall>x2.\n                                     x = (x1, x2) \\<longrightarrow>\n                                     x2 = i \\<or>\n                                     x2 \\<noteq> i \\<and>\n                                     (nP x1 \\<longrightarrow>\n\\<not> nP x2))))\n 2. \\<And>otherbot.\n       otherbot \\<noteq> False \\<Longrightarrow>\n       \\<exists>G nP i F.\n          wf_graph G \\<and>\n          \\<not> sinvar G nP \\<and>\n          F \\<in> set_offending_flows G nP \\<and>\n          sinvar (delete_edges G F) nP \\<and>\n          (\\<not> receiver_violation \\<longrightarrow>\n           i \\<in> fst ` F \\<and> sinvar G (nP(i := otherbot))) \\<and>\n          (receiver_violation \\<longrightarrow>\n           i \\<in> snd ` F \\<and> sinvar G (nP(i := otherbot)))", "apply blast\n\n \\<comment> \\<open>Uniqueness\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> False \\<Longrightarrow>\n       \\<exists>G nP i F.\n          wf_graph G \\<and>\n          \\<not> sinvar G nP \\<and>\n          F \\<in> set_offending_flows G nP \\<and>\n          sinvar (delete_edges G F) nP \\<and>\n          (\\<not> receiver_violation \\<longrightarrow>\n           i \\<in> fst ` F \\<and> sinvar G (nP(i := otherbot))) \\<and>\n          (receiver_violation \\<longrightarrow>\n           i \\<in> snd ` F \\<and> sinvar G (nP(i := otherbot)))", "apply(simp add:default_node_properties_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>x\\<in>edges G.\n                  \\<not> (case x of\n                          (e1, e2) \\<Rightarrow> nP e1 \\<and> nP e2)) \\<and>\n              (\\<exists>i F.\n                  F \\<in> set_offending_flows G nP \\<and>\n                  (\\<forall>x\\<in>edges (delete_edges G F).\n                      case x of\n                      (e1, e2) \\<Rightarrow> nP e1 \\<and> nP e2) \\<and>\n                  (\\<not> receiver_violation \\<longrightarrow>\n                   i \\<in> fst ` F \\<and>\n                   (\\<forall>x\\<in>edges G.\n                       case x of\n                       (e1, e2) \\<Rightarrow>\n                         (e2 = i \\<longrightarrow>\n                          (if e1 = i then True else nP e1)) \\<and>\n                         (e2 \\<noteq> i \\<longrightarrow>\n                          (if e1 = i then True else nP e1) \\<and>\n                          nP e2))) \\<and>\n                  (receiver_violation \\<longrightarrow>\n                   i \\<in> snd ` F \\<and>\n                   (\\<forall>x\\<in>edges G.\n                       case x of\n                       (e1, e2) \\<Rightarrow>\n                         (e2 = i \\<longrightarrow>\n                          (if e1 = i then True else nP e1)) \\<and>\n                         (e2 \\<noteq> i \\<longrightarrow>\n                          (if e1 = i then True else nP e1) \\<and> nP e2)))))", "apply (simp add: SecurityInvariant_withOffendingFlows.set_offending_flows_def\n     SecurityInvariant_withOffendingFlows.is_offending_flows_min_set_def\n     SecurityInvariant_withOffendingFlows.is_offending_flows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>x\\<in>edges G.\n                  \\<not> (case x of\n                          (e1, e2) \\<Rightarrow> nP e1 \\<and> nP e2)) \\<and>\n              (\\<exists>i F.\n                  F \\<subseteq> edges G \\<and>\n                  (\\<exists>x\\<in>edges G.\n                      \\<not> (case x of\n                              (e1, e2) \\<Rightarrow>\n                                nP e1 \\<and> nP e2)) \\<and>\n                  (\\<forall>(e1, e2)\\<in>edges (delete_edges G F).\n                      nP e1 \\<and> nP e2) \\<and>\n                  (\\<forall>(e1, e2)\\<in>F.\n                      \\<exists>x\\<in>edges\n(add_edge e1 e2 (delete_edges G F)).\n                         \\<not> (case x of\n                                 (e1, e2) \\<Rightarrow>\n                                   nP e1 \\<and> nP e2)) \\<and>\n                  (\\<forall>(e1, e2)\\<in>edges (delete_edges G F).\n                      nP e1 \\<and> nP e2) \\<and>\n                  (\\<not> receiver_violation \\<longrightarrow>\n                   i \\<in> fst ` F \\<and>\n                   (\\<forall>(e1, e2)\\<in>edges G.\n                       (e2 = i \\<longrightarrow>\n                        (if e1 = i then True else nP e1)) \\<and>\n                       (e2 \\<noteq> i \\<longrightarrow>\n                        (if e1 = i then True else nP e1) \\<and>\n                        nP e2))) \\<and>\n                  (receiver_violation \\<longrightarrow>\n                   i \\<in> snd ` F \\<and>\n                   (\\<forall>(e1, e2)\\<in>edges G.\n                       (e2 = i \\<longrightarrow>\n                        (if e1 = i then True else nP e1)) \\<and>\n                       (e2 \\<noteq> i \\<longrightarrow>\n                        (if e1 = i then True else nP e1) \\<and> nP e2)))))", "apply (simp add: graph_ops)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>x\\<in>edges G.\n                  \\<not> (case x of\n                          (e1, e2) \\<Rightarrow> nP e1 \\<and> nP e2)) \\<and>\n              (\\<exists>i F.\n                  F \\<subseteq> edges G \\<and>\n                  (\\<exists>x\\<in>edges G.\n                      \\<not> (case x of\n                              (e1, e2) \\<Rightarrow>\n                                nP e1 \\<and> nP e2)) \\<and>\n                  (\\<forall>x\\<in>edges G - F.\n                      case x of\n                      (e1, e2) \\<Rightarrow> nP e1 \\<and> nP e2) \\<and>\n                  (\\<forall>x\\<in>F.\n                      case x of\n                      (e1, e2) \\<Rightarrow>\n                        nP e1 \\<longrightarrow>\n                        nP e2 \\<longrightarrow>\n                        (\\<exists>x\\<in>edges G - F.\n                            \\<not> (case x of\n                                    (e1, e2) \\<Rightarrow>\nnP e1 \\<and> nP e2))) \\<and>\n                  (\\<forall>x\\<in>edges G - F.\n                      case x of\n                      (e1, e2) \\<Rightarrow> nP e1 \\<and> nP e2) \\<and>\n                  (\\<not> receiver_violation \\<longrightarrow>\n                   i \\<in> fst ` F \\<and>\n                   (\\<forall>x\\<in>edges G.\n                       case x of\n                       (e1, e2) \\<Rightarrow>\n                         (e2 = i \\<longrightarrow>\n                          (if e1 = i then True else nP e1)) \\<and>\n                         (e2 \\<noteq> i \\<longrightarrow>\n                          (if e1 = i then True else nP e1) \\<and>\n                          nP e2))) \\<and>\n                  (receiver_violation \\<longrightarrow>\n                   i \\<in> snd ` F \\<and>\n                   (\\<forall>x\\<in>edges G.\n                       case x of\n                       (e1, e2) \\<Rightarrow>\n                         (e2 = i \\<longrightarrow>\n                          (if e1 = i then True else nP e1)) \\<and>\n                         (e2 \\<noteq> i \\<longrightarrow>\n                          (if e1 = i then True else nP e1) \\<and> nP e2)))))", "apply (simp split: prod.split_asm prod.split)\n \\<comment> \\<open>proof by counter example: assume False is not the unique default parameter\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>x\\<in>edges G.\n                  \\<forall>x1 x2.\n                     x = (x1, x2) \\<longrightarrow>\n                     nP x1 \\<longrightarrow> \\<not> nP x2) \\<and>\n              (\\<exists>i F.\n                  F \\<subseteq> edges G \\<and>\n                  (\\<exists>x\\<in>edges G.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         nP x1 \\<longrightarrow> \\<not> nP x2) \\<and>\n                  (\\<forall>x\\<in>edges G - F.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         nP x1 \\<and> nP x2) \\<and>\n                  (\\<forall>x\\<in>F.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         nP x1 \\<longrightarrow>\n                         nP x2 \\<longrightarrow>\n                         (\\<exists>x\\<in>edges G - F.\n                             \\<forall>x1 x2.\n                                x = (x1, x2) \\<longrightarrow>\n                                nP x1 \\<longrightarrow>\n                                \\<not> nP x2)) \\<and>\n                  (\\<forall>x\\<in>edges G - F.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         nP x1 \\<and> nP x2) \\<and>\n                  (\\<not> receiver_violation \\<longrightarrow>\n                   i \\<in> fst ` F \\<and>\n                   (\\<forall>x\\<in>edges G.\n                       \\<forall>x1.\n                          (x1 = i \\<longrightarrow>\n                           (\\<forall>x2.\n                               x = (i, x2) \\<longrightarrow>\n                               x2 \\<noteq> i \\<longrightarrow>\n                               nP x2)) \\<and>\n                          (x1 \\<noteq> i \\<longrightarrow>\n                           (\\<forall>x2.\n                               x = (x1, x2) \\<longrightarrow>\n                               (x2 = i \\<longrightarrow> nP x1) \\<and>\n                               (x2 \\<noteq> i \\<longrightarrow>\n                                nP x1 \\<and> nP x2))))) \\<and>\n                  (receiver_violation \\<longrightarrow>\n                   i \\<in> snd ` F \\<and>\n                   (\\<forall>x\\<in>edges G.\n                       \\<forall>x1.\n                          (x1 = i \\<longrightarrow>\n                           (\\<forall>x2.\n                               x = (i, x2) \\<longrightarrow>\n                               x2 \\<noteq> i \\<longrightarrow>\n                               nP x2)) \\<and>\n                          (x1 \\<noteq> i \\<longrightarrow>\n                           (\\<forall>x2.\n                               x = (x1, x2) \\<longrightarrow>\n                               (x2 = i \\<longrightarrow> nP x1) \\<and>\n                               (x2 \\<noteq> i \\<longrightarrow>\n                                nP x1 \\<and> nP x2)))))))", "apply(rule_tac x=\"\\<lparr> nodes={vertex_1}, edges = {(vertex_1,vertex_1)} \\<rparr>\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<Longrightarrow>\n       wf_graph\n        \\<lparr>nodes = {vertex_1},\n           edges = {(vertex_1, vertex_1)}\\<rparr> \\<and>\n       (\\<exists>nP.\n           \\<not> nP vertex_1 \\<and>\n           (\\<exists>i F.\n               F \\<subseteq> {(vertex_1, vertex_1)} \\<and>\n               \\<not> nP vertex_1 \\<and>\n               ((vertex_1, vertex_1) \\<notin> F \\<longrightarrow>\n                nP vertex_1) \\<and>\n               (\\<forall>x\\<in>F.\n                   \\<forall>x1 x2.\n                      x = (x1, x2) \\<longrightarrow>\n                      nP x1 \\<longrightarrow>\n                      nP x2 \\<longrightarrow>\n                      (vertex_1, vertex_1) \\<notin> F \\<and>\n                      \\<not> nP vertex_1) \\<and>\n               ((vertex_1, vertex_1) \\<notin> F \\<longrightarrow>\n                nP vertex_1) \\<and>\n               (\\<not> receiver_violation \\<longrightarrow>\n                i \\<in> fst ` F \\<and>\n                (vertex_1 \\<noteq> i \\<longrightarrow> nP vertex_1)) \\<and>\n               (receiver_violation \\<longrightarrow>\n                i \\<in> snd ` F \\<and>\n                (vertex_1 \\<noteq> i \\<longrightarrow> nP vertex_1))))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<Longrightarrow>\n       wf_graph\n        \\<lparr>nodes = {vertex_1}, edges = {(vertex_1, vertex_1)}\\<rparr>\n 2. \\<And>otherbot.\n       otherbot \\<Longrightarrow>\n       \\<exists>nP.\n          \\<not> nP vertex_1 \\<and>\n          (\\<exists>i F.\n              F \\<subseteq> {(vertex_1, vertex_1)} \\<and>\n              \\<not> nP vertex_1 \\<and>\n              ((vertex_1, vertex_1) \\<notin> F \\<longrightarrow>\n               nP vertex_1) \\<and>\n              (\\<forall>x\\<in>F.\n                  \\<forall>x1 x2.\n                     x = (x1, x2) \\<longrightarrow>\n                     nP x1 \\<longrightarrow>\n                     nP x2 \\<longrightarrow>\n                     (vertex_1, vertex_1) \\<notin> F \\<and>\n                     \\<not> nP vertex_1) \\<and>\n              ((vertex_1, vertex_1) \\<notin> F \\<longrightarrow>\n               nP vertex_1) \\<and>\n              (\\<not> receiver_violation \\<longrightarrow>\n               i \\<in> fst ` F \\<and>\n               (vertex_1 \\<noteq> i \\<longrightarrow> nP vertex_1)) \\<and>\n              (receiver_violation \\<longrightarrow>\n               i \\<in> snd ` F \\<and>\n               (vertex_1 \\<noteq> i \\<longrightarrow> nP vertex_1)))", "apply(simp add: wf_graph_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<Longrightarrow>\n       \\<exists>nP.\n          \\<not> nP vertex_1 \\<and>\n          (\\<exists>i F.\n              F \\<subseteq> {(vertex_1, vertex_1)} \\<and>\n              \\<not> nP vertex_1 \\<and>\n              ((vertex_1, vertex_1) \\<notin> F \\<longrightarrow>\n               nP vertex_1) \\<and>\n              (\\<forall>x\\<in>F.\n                  \\<forall>x1 x2.\n                     x = (x1, x2) \\<longrightarrow>\n                     nP x1 \\<longrightarrow>\n                     nP x2 \\<longrightarrow>\n                     (vertex_1, vertex_1) \\<notin> F \\<and>\n                     \\<not> nP vertex_1) \\<and>\n              ((vertex_1, vertex_1) \\<notin> F \\<longrightarrow>\n               nP vertex_1) \\<and>\n              (\\<not> receiver_violation \\<longrightarrow>\n               i \\<in> fst ` F \\<and>\n               (vertex_1 \\<noteq> i \\<longrightarrow> nP vertex_1)) \\<and>\n              (receiver_violation \\<longrightarrow>\n               i \\<in> snd ` F \\<and>\n               (vertex_1 \\<noteq> i \\<longrightarrow> nP vertex_1)))", "apply(rule_tac x=\"(\\<lambda> x. default_node_properties)(vertex_1 := False)\" in exI, simp add:default_node_properties_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<Longrightarrow>\n       \\<exists>i F.\n          F \\<subseteq> {(vertex_1, vertex_1)} \\<and>\n          (vertex_1, vertex_1) \\<in> F \\<and>\n          (\\<not> receiver_violation \\<longrightarrow>\n           i \\<in> fst ` F \\<and> vertex_1 = i) \\<and>\n          (receiver_violation \\<longrightarrow>\n           i \\<in> snd ` F \\<and> vertex_1 = i)", "apply(case_tac receiver_violation)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       \\<lbrakk>otherbot; receiver_violation\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i F.\n                            F \\<subseteq> {(vertex_1, vertex_1)} \\<and>\n                            (vertex_1, vertex_1) \\<in> F \\<and>\n                            (\\<not> receiver_violation \\<longrightarrow>\n                             i \\<in> fst ` F \\<and> vertex_1 = i) \\<and>\n                            (receiver_violation \\<longrightarrow>\n                             i \\<in> snd ` F \\<and> vertex_1 = i)\n 2. \\<And>otherbot.\n       \\<lbrakk>otherbot; \\<not> receiver_violation\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i F.\n                            F \\<subseteq> {(vertex_1, vertex_1)} \\<and>\n                            (vertex_1, vertex_1) \\<in> F \\<and>\n                            (\\<not> receiver_violation \\<longrightarrow>\n                             i \\<in> fst ` F \\<and> vertex_1 = i) \\<and>\n                            (receiver_violation \\<longrightarrow>\n                             i \\<in> snd ` F \\<and> vertex_1 = i)", "apply(simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       \\<lbrakk>otherbot; receiver_violation\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F\\<subseteq>{(vertex_1, vertex_1)}.\n                            (vertex_1, vertex_1) \\<in> F \\<and>\n                            vertex_1 \\<in> snd ` F\n 2. \\<And>otherbot.\n       \\<lbrakk>otherbot; \\<not> receiver_violation\\<rbrakk>\n       \\<Longrightarrow> \\<exists>F\\<subseteq>{(vertex_1, vertex_1)}.\n                            (vertex_1, vertex_1) \\<in> F \\<and>\n                            vertex_1 \\<in> fst ` F", "apply(rule_tac x=\"{(vertex_1,vertex_1)}\" in exI, simp)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>And we end up with a totally useless network security requirement model. I hope this was instructive.\\<close>"], ["", "end"]]}