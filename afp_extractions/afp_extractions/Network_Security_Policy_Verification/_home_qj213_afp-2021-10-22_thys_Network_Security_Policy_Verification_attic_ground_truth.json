{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/attic.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma exists_x1x2_x1notoffending_natLeq: \n  fixes \n    G::\"'v graph\" and\n    f and\n    p::\"'v \\<Rightarrow> nat\"\n  assumes\n    \"wf_graph G\"\n    \"\\<exists>(e1, e2)\\<in>(edges G). \\<not> (p e1 \\<le> p e2)\" and\n    \"f \\<subseteq> edges G \\<and> (\\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2)\" and\n    \"\\<forall>(e1, e2)\\<in>(edges G) - f. p e1 \\<le> p e2\"\n  shows \"\\<exists> x1 x2. (x1,x2)\\<in>(edges G) \\<and> (x1,x2)\\<in> f \\<and> x1 \\<in> fst ` f \\<and> x1 \\<notin> snd ` f \\<and> ((p x1) = Max (p`fst` f))\"", "lemma exCasePairSimp: \"(\\<exists>x. x \\<in> A \\<and> (case x of (e1, e2) \\<Rightarrow> P e1 e2)) = (\\<exists>(e1, e2) \\<in> A. (P e1 e2))\"", "lemma exCasePairNotSimp: \"(\\<exists>x. x \\<in> A \\<and> \\<not> (case x of (e1, e2) \\<Rightarrow> P e1 e2)) = (\\<exists>(e1, e2) \\<in> A. \\<not> (P e1 e2))\"", "lemma is_path_simps[simp, intro!]:\n      \"is_path v [] v \\<longleftrightarrow> v\\<in>V\"\n      \"is_path v [(v,v')] v' \\<longleftrightarrow> (v,v')\\<in>E\"", "lemma is_path_memb[simp]:\n      \"is_path v p v' \\<Longrightarrow> v\\<in>V \\<and> v'\\<in>V\"", "lemma is_path_split:\n      \"is_path v (p1@p2) v' \\<longleftrightarrow> (\\<exists>u. is_path v p1 u \\<and> is_path u p2 v')\"", "lemma is_path_split'[simp]: \n      \"is_path v (p1@(u,u')#p2) v' \n        \\<longleftrightarrow> is_path v p1 u \\<and> (u,u')\\<in>E \\<and> is_path u' p2 v'\"", "lemma int_vertices_simps[simp]:\n    \"int_vertices [] = {}\"\n    \"int_vertices (vv#p) = insert (fst vv) (int_vertices p)\"\n    \"int_vertices (p1@p2) = int_vertices p1 \\<union> int_vertices p2\"", "lemma (in wf_graph) int_vertices_subset: \n    \"is_path v p v' \\<Longrightarrow> int_vertices p \\<subseteq> V\"", "lemma int_vertices_empty[simp]: \"int_vertices p = {} \\<longleftrightarrow> p=[]\"", "lemma (in wf_graph) path_split_set:\n    assumes \"is_path v p v'\" and \"v\\<in>W\" and \"v'\\<notin>W\"\n    obtains p1 p2 u w u' where\n    \"p=p1@(u,u')#p2\" and\n    \"int_vertices p1 \\<subseteq> W\" and \"u\\<in>W\" and \"u'\\<notin>W\"", "lemma (in wf_graph) path_split_set':\n    assumes \"is_path v p v'\" and \"v'\\<in>W\"\n    obtains p1 p2 u where\n    \"p=p1@p2\" and\n    \"is_path v p1 u\" and\n    \"is_path u p2 v'\" and\n    \"int_vertices p1 \\<subseteq> -W\" and \"u\\<in>W\"", "lemma (in wf_graph) path_split_vertex:\n    assumes \"is_path v p v'\" and \"u\\<in>int_vertices p\"\n    obtains p1 p2 where\n    \"p=p1@p2\" and\n    \"is_path v p1 u\" and\n    \"u \\<notin> int_vertices p1\""], "translations": [["", "lemma exists_x1x2_x1notoffending_natLeq: \n  fixes \n    G::\"'v graph\" and\n    f and\n    p::\"'v \\<Rightarrow> nat\"\n  assumes\n    \"wf_graph G\"\n    \"\\<exists>(e1, e2)\\<in>(edges G). \\<not> (p e1 \\<le> p e2)\" and\n    \"f \\<subseteq> edges G \\<and> (\\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2)\" and\n    \"\\<forall>(e1, e2)\\<in>(edges G) - f. p e1 \\<le> p e2\"\n  shows \"\\<exists> x1 x2. (x1,x2)\\<in>(edges G) \\<and> (x1,x2)\\<in> f \\<and> x1 \\<in> fst ` f \\<and> x1 \\<notin> snd ` f \\<and> ((p x1) = Max (p`fst` f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from assms"], ["proof (chain)\npicking this:\n  wf_graph G\n  \\<exists>(e1, e2)\\<in>edges G. \\<not> p e1 \\<le> p e2\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2)\n  \\<forall>(e1, e2)\\<in>edges G - f. p e1 \\<le> p e2", "have a2: \"\\<exists>x\\<in>(edges G). \\<not> (case x of (e1, e2) \\<Rightarrow> p e1 \\<le> p e2)\""], ["proof (prove)\nusing this:\n  wf_graph G\n  \\<exists>(e1, e2)\\<in>edges G. \\<not> p e1 \\<le> p e2\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2)\n  \\<forall>(e1, e2)\\<in>edges G - f. p e1 \\<le> p e2\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>edges G.\n       \\<not> (case x of (e1, e2) \\<Rightarrow> p e1 \\<le> p e2)", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>edges G.\n     \\<not> (case x of (e1, e2) \\<Rightarrow> p e1 \\<le> p e2)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from assms"], ["proof (chain)\npicking this:\n  wf_graph G\n  \\<exists>(e1, e2)\\<in>edges G. \\<not> p e1 \\<le> p e2\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2)\n  \\<forall>(e1, e2)\\<in>edges G - f. p e1 \\<le> p e2", "have a3: \"f \\<subseteq>(edges G) \\<and> (\\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2)\""], ["proof (prove)\nusing this:\n  wf_graph G\n  \\<exists>(e1, e2)\\<in>edges G. \\<not> p e1 \\<le> p e2\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2)\n  \\<forall>(e1, e2)\\<in>edges G - f. p e1 \\<le> p e2\n\ngoal (1 subgoal):\n 1. f \\<subseteq> edges G \\<and>\n    (\\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2)", "by simp"], ["proof (state)\nthis:\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from assms"], ["proof (chain)\npicking this:\n  wf_graph G\n  \\<exists>(e1, e2)\\<in>edges G. \\<not> p e1 \\<le> p e2\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2)\n  \\<forall>(e1, e2)\\<in>edges G - f. p e1 \\<le> p e2", "have a4: \"\\<forall>(e1, e2)\\<in>(edges G) - f. p e1 \\<le> p e2\""], ["proof (prove)\nusing this:\n  wf_graph G\n  \\<exists>(e1, e2)\\<in>edges G. \\<not> p e1 \\<le> p e2\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2)\n  \\<forall>(e1, e2)\\<in>edges G - f. p e1 \\<le> p e2\n\ngoal (1 subgoal):\n 1. \\<forall>(e1, e2)\\<in>edges G - f. p e1 \\<le> p e2", "by simp"], ["proof (state)\nthis:\n  \\<forall>(e1, e2)\\<in>edges G - f. p e1 \\<le> p e2\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from assms(1)"], ["proof (chain)\npicking this:\n  wf_graph G", "have finiteE: \"finite (edges G)\""], ["proof (prove)\nusing this:\n  wf_graph G\n\ngoal (1 subgoal):\n 1. finite (edges G)", "using wf_graph.finiteE"], ["proof (prove)\nusing this:\n  wf_graph G\n  wf_graph ?G \\<Longrightarrow> finite (edges ?G)\n\ngoal (1 subgoal):\n 1. finite (edges G)", "by fast"], ["proof (state)\nthis:\n  finite (edges G)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from finiteE conjunct1[OF a3]"], ["proof (chain)\npicking this:\n  finite (edges G)\n  f \\<subseteq> edges G", "have  finiteF: \"finite f\""], ["proof (prove)\nusing this:\n  finite (edges G)\n  f \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. finite f", "by (metis rev_finite_subset)\n\n   \\<comment> \\<open>Find a suitable x1, it is the Max of the firsts\\<close>"], ["proof (state)\nthis:\n  finite f\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from finiteF"], ["proof (chain)\npicking this:\n  finite f", "have x12: \"\\<forall> x \\<in> f. Max (p`fst` f) \\<ge> p (fst x)\""], ["proof (prove)\nusing this:\n  finite f\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>f. p (fst x) \\<le> Max (p ` fst ` f)", "by (metis Max_ge finite_imageI image_eqI)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>f. p (fst x) \\<le> Max (p ` fst ` f)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from a2 a4"], ["proof (chain)\npicking this:\n  \\<exists>x\\<in>edges G.\n     \\<not> (case x of (e1, e2) \\<Rightarrow> p e1 \\<le> p e2)\n  \\<forall>(e1, e2)\\<in>edges G - f. p e1 \\<le> p e2", "have x14: \"\\<exists> x1. (p x1) \\<in> p`fst` f \\<and> x1 \\<in> fst` f\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>edges G.\n     \\<not> (case x of (e1, e2) \\<Rightarrow> p e1 \\<le> p e2)\n  \\<forall>(e1, e2)\\<in>edges G - f. p e1 \\<le> p e2\n\ngoal (1 subgoal):\n 1. \\<exists>x1. p x1 \\<in> p ` fst ` f \\<and> x1 \\<in> fst ` f", "by fast"], ["proof (state)\nthis:\n  \\<exists>x1. p x1 \\<in> p ` fst ` f \\<and> x1 \\<in> fst ` f\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from finiteF"], ["proof (chain)\npicking this:\n  finite f", "have \"(p`fst` f) \\<noteq> {} \\<Longrightarrow> Max (p`fst` f) \\<in> (p`fst` f)\""], ["proof (prove)\nusing this:\n  finite f\n\ngoal (1 subgoal):\n 1. p ` fst ` f \\<noteq> {} \\<Longrightarrow>\n    Max (p ` fst ` f) \\<in> p ` fst ` f", "by simp"], ["proof (state)\nthis:\n  p ` fst ` f \\<noteq> {} \\<Longrightarrow>\n  Max (p ` fst ` f) \\<in> p ` fst ` f\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "hence x15: \"Max (p`fst` f) \\<in> (p`fst` f)\""], ["proof (prove)\nusing this:\n  p ` fst ` f \\<noteq> {} \\<Longrightarrow>\n  Max (p ` fst ` f) \\<in> p ` fst ` f\n\ngoal (1 subgoal):\n 1. Max (p ` fst ` f) \\<in> p ` fst ` f", "using x14"], ["proof (prove)\nusing this:\n  p ` fst ` f \\<noteq> {} \\<Longrightarrow>\n  Max (p ` fst ` f) \\<in> p ` fst ` f\n  \\<exists>x1. p x1 \\<in> p ` fst ` f \\<and> x1 \\<in> fst ` f\n\ngoal (1 subgoal):\n 1. Max (p ` fst ` f) \\<in> p ` fst ` f", "by fastforce"], ["proof (state)\nthis:\n  Max (p ` fst ` f) \\<in> p ` fst ` f\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "hence \"\\<exists> x1. ((p x1) = Max (p`fst` f)) \\<and> x1 \\<in> fst` f\""], ["proof (prove)\nusing this:\n  Max (p ` fst ` f) \\<in> p ` fst ` f\n\ngoal (1 subgoal):\n 1. \\<exists>x1. p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f", "by force"], ["proof (state)\nthis:\n  \\<exists>x1. p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from this x14"], ["proof (chain)\npicking this:\n  \\<exists>x1. p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f\n  \\<exists>x1. p x1 \\<in> p ` fst ` f \\<and> x1 \\<in> fst ` f", "obtain x1 where x1Cond: \"((p x1) = Max (p`fst` f)) \\<and> x1 \\<in> fst` f\""], ["proof (prove)\nusing this:\n  \\<exists>x1. p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f\n  \\<exists>x1. p x1 \\<in> p ` fst ` f \\<and> x1 \\<in> fst ` f\n\ngoal (1 subgoal):\n 1. (\\<And>x1.\n        p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast\n   \n   \\<comment> \\<open>Thus x1 is not in the seconds, not offending\\<close>"], ["proof (state)\nthis:\n  p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from x1Cond x15"], ["proof (chain)\npicking this:\n  p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f\n  Max (p ` fst ` f) \\<in> p ` fst ` f", "have x1ImportantProp3: \"(p x1) \\<in> p`fst` f\""], ["proof (prove)\nusing this:\n  p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f\n  Max (p ` fst ` f) \\<in> p ` fst ` f\n\ngoal (1 subgoal):\n 1. p x1 \\<in> p ` fst ` f", "by presburger"], ["proof (state)\nthis:\n  p x1 \\<in> p ` fst ` f\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from x1Cond conjunct2[OF a3] x12"], ["proof (chain)\npicking this:\n  p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f\n  \\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2\n  \\<forall>x\\<in>f. p (fst x) \\<le> Max (p ` fst ` f)", "have \"\\<forall>(e1, e2) \\<in> f. p x1 > p e2\""], ["proof (prove)\nusing this:\n  p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f\n  \\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2\n  \\<forall>x\\<in>f. p (fst x) \\<le> Max (p ` fst ` f)\n\ngoal (1 subgoal):\n 1. \\<forall>(e1, e2)\\<in>f. p e2 < p x1", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>(e1, e2)\\<in>f. p e2 < p x1\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from x1Cond this a2 a3 a4"], ["proof (chain)\npicking this:\n  p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f\n  \\<forall>(e1, e2)\\<in>f. p e2 < p x1\n  \\<exists>x\\<in>edges G.\n     \\<not> (case x of (e1, e2) \\<Rightarrow> p e1 \\<le> p e2)\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2)\n  \\<forall>(e1, e2)\\<in>edges G - f. p e1 \\<le> p e2", "have x1ImportantProp1: \"(p x1) \\<notin> p`snd` f\""], ["proof (prove)\nusing this:\n  p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f\n  \\<forall>(e1, e2)\\<in>f. p e2 < p x1\n  \\<exists>x\\<in>edges G.\n     \\<not> (case x of (e1, e2) \\<Rightarrow> p e1 \\<le> p e2)\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2)\n  \\<forall>(e1, e2)\\<in>edges G - f. p e1 \\<le> p e2\n\ngoal (1 subgoal):\n 1. p x1 \\<notin> p ` snd ` f", "by force"], ["proof (state)\nthis:\n  p x1 \\<notin> p ` snd ` f\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "hence x1ImportantProp2: \"x1 \\<notin> snd` f\""], ["proof (prove)\nusing this:\n  p x1 \\<notin> p ` snd ` f\n\ngoal (1 subgoal):\n 1. x1 \\<notin> snd ` f", "by blast\n\n   \\<comment> \\<open>Obtain x2\\<close>"], ["proof (state)\nthis:\n  x1 \\<notin> snd ` f\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from x1ImportantProp3 x1Cond"], ["proof (chain)\npicking this:\n  p x1 \\<in> p ` fst ` f\n  p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f", "have x1ImportantProp4: \"x1 \\<in> fst` f\""], ["proof (prove)\nusing this:\n  p x1 \\<in> p ` fst ` f\n  p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f\n\ngoal (1 subgoal):\n 1. x1 \\<in> fst ` f", "by presburger"], ["proof (state)\nthis:\n  x1 \\<in> fst ` f\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from this x1ImportantProp2"], ["proof (chain)\npicking this:\n  x1 \\<in> fst ` f\n  x1 \\<notin> snd ` f", "have  \"\\<exists> x1 x2. (x1,x2) \\<in> f \\<and> x1 \\<notin> snd` f\""], ["proof (prove)\nusing this:\n  x1 \\<in> fst ` f\n  x1 \\<notin> snd ` f\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2. (x1, x2) \\<in> f \\<and> x1 \\<notin> snd ` f", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>x1 x2. (x1, x2) \\<in> f \\<and> x1 \\<notin> snd ` f\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from this x1Cond x1ImportantProp2"], ["proof (chain)\npicking this:\n  \\<exists>x1 x2. (x1, x2) \\<in> f \\<and> x1 \\<notin> snd ` f\n  p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f\n  x1 \\<notin> snd ` f", "obtain x2 where x2Cond:\"(x1,x2) \\<in> f \\<and> x1 \\<notin> snd` f\""], ["proof (prove)\nusing this:\n  \\<exists>x1 x2. (x1, x2) \\<in> f \\<and> x1 \\<notin> snd ` f\n  p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f\n  x1 \\<notin> snd ` f\n\ngoal (1 subgoal):\n 1. (\\<And>x2.\n        (x1, x2) \\<in> f \\<and> x1 \\<notin> snd ` f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  (x1, x2) \\<in> f \\<and> x1 \\<notin> snd ` f\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from a3"], ["proof (chain)\npicking this:\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2)", "have \"\\<And> x. x \\<in> f \\<Longrightarrow> x \\<in> (edges G)\""], ["proof (prove)\nusing this:\n  f \\<subseteq> edges G \\<and>\n  (\\<forall>(e1, e2)\\<in>f. \\<not> p e1 \\<le> p e2)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> f \\<Longrightarrow> x \\<in> edges G", "by blast"], ["proof (state)\nthis:\n  ?x \\<in> f \\<Longrightarrow> ?x \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from this x2Cond"], ["proof (chain)\npicking this:\n  ?x \\<in> f \\<Longrightarrow> ?x \\<in> edges G\n  (x1, x2) \\<in> f \\<and> x1 \\<notin> snd ` f", "have x1x2Cond: \"(x1,x2) \\<in> (edges G)\""], ["proof (prove)\nusing this:\n  ?x \\<in> f \\<Longrightarrow> ?x \\<in> edges G\n  (x1, x2) \\<in> f \\<and> x1 \\<notin> snd ` f\n\ngoal (1 subgoal):\n 1. (x1, x2) \\<in> edges G", "by blast"], ["proof (state)\nthis:\n  (x1, x2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "from x1x2Cond x2Cond x1Cond"], ["proof (chain)\npicking this:\n  (x1, x2) \\<in> edges G\n  (x1, x2) \\<in> f \\<and> x1 \\<notin> snd ` f\n  p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f", "show ?thesis"], ["proof (prove)\nusing this:\n  (x1, x2) \\<in> edges G\n  (x1, x2) \\<in> f \\<and> x1 \\<notin> snd ` f\n  p x1 = Max (p ` fst ` f) \\<and> x1 \\<in> fst ` f\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       (x1, x2) \\<in> edges G \\<and>\n       (x1, x2) \\<in> f \\<and>\n       x1 \\<in> fst ` f \\<and>\n       x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)", "by auto"], ["proof (state)\nthis:\n  \\<exists>x1 x2.\n     (x1, x2) \\<in> edges G \\<and>\n     (x1, x2) \\<in> f \\<and>\n     x1 \\<in> fst ` f \\<and>\n     x1 \\<notin> snd ` f \\<and> p x1 = Max (p ` fst ` f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exCasePairSimp: \"(\\<exists>x. x \\<in> A \\<and> (case x of (e1, e2) \\<Rightarrow> P e1 e2)) = (\\<exists>(e1, e2) \\<in> A. (P e1 e2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        x \\<in> A \\<and> (case x of (e1, e2) \\<Rightarrow> P e1 e2)) =\n    (\\<exists>(e1, e2)\\<in>A. P e1 e2)", "by auto"], ["", "lemma exCasePairNotSimp: \"(\\<exists>x. x \\<in> A \\<and> \\<not> (case x of (e1, e2) \\<Rightarrow> P e1 e2)) = (\\<exists>(e1, e2) \\<in> A. \\<not> (P e1 e2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        x \\<in> A \\<and>\n        \\<not> (case x of (e1, e2) \\<Rightarrow> P e1 e2)) =\n    (\\<exists>(e1, e2)\\<in>A. \\<not> P e1 e2)", "by auto"], ["", "(* moved here from FiniteGraph.thy. Currently unused *)"], ["", "subsection \\<open>Paths\\<close>"], ["", "text \\<open>A path is represented by a list of adjacent edges.\\<close>"], ["", "type_synonym 'v path = \"('v \\<times> 'v) list\""], ["", "context wf_graph\n  begin"], ["", "text \\<open>The following predicate describes a valid path:\\<close>"], ["", "(* is-path src [src, ...., dst] dst *)"], ["", "fun is_path :: \"'v \\<Rightarrow> 'v path \\<Rightarrow> 'v \\<Rightarrow> bool\" where\n      \"is_path v [] v' \\<longleftrightarrow> v=v' \\<and> v'\\<in>V\" |\n      \"is_path v ((v1,v2)#p) v' \\<longleftrightarrow> v=v1 \\<and> (v1,v2)\\<in>E \\<and> is_path v2 p v'\""], ["", "lemma is_path_simps[simp, intro!]:\n      \"is_path v [] v \\<longleftrightarrow> v\\<in>V\"\n      \"is_path v [(v,v')] v' \\<longleftrightarrow> (v,v')\\<in>E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path v [] v = (v \\<in> V) &&&\n    is_path v [(v, v')] v' = ((v, v') \\<in> E)", "by (auto dest: E_wfD)"], ["", "lemma is_path_memb[simp]:\n      \"is_path v p v' \\<Longrightarrow> v\\<in>V \\<and> v'\\<in>V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path v p v' \\<Longrightarrow> v \\<in> V \\<and> v' \\<in> V", "apply (induction p arbitrary: v)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v. is_path v [] v' \\<Longrightarrow> v \\<in> V \\<and> v' \\<in> V\n 2. \\<And>a p v.\n       \\<lbrakk>\\<And>v.\n                   is_path v p v' \\<Longrightarrow>\n                   v \\<in> V \\<and> v' \\<in> V;\n        is_path v (a # p) v'\\<rbrakk>\n       \\<Longrightarrow> v \\<in> V \\<and> v' \\<in> V", "apply (auto dest: E_wfD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma is_path_split:\n      \"is_path v (p1@p2) v' \\<longleftrightarrow> (\\<exists>u. is_path v p1 u \\<and> is_path u p2 v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path v (p1 @ p2) v' =\n    (\\<exists>u. is_path v p1 u \\<and> is_path u p2 v')", "by (induct p1 arbitrary: v) auto"], ["", "lemma is_path_split'[simp]: \n      \"is_path v (p1@(u,u')#p2) v' \n        \\<longleftrightarrow> is_path v p1 u \\<and> (u,u')\\<in>E \\<and> is_path u' p2 v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path v (p1 @ (u, u') # p2) v' =\n    (is_path v p1 u \\<and> (u, u') \\<in> E \\<and> is_path u' p2 v')", "by (auto simp add: is_path_split)"], ["", "end"], ["", "text \\<open>Set of intermediate vertices of a path. These are all vertices but\n    the last one. Note that, if the last vertex also occurs earlier on the path,\n    it is contained in \\<open>int_vertices\\<close>.\\<close>"], ["", "definition int_vertices :: \"'v path \\<Rightarrow> 'v set\" where\n    \"int_vertices p \\<equiv> set (map fst p)\""], ["", "lemma int_vertices_simps[simp]:\n    \"int_vertices [] = {}\"\n    \"int_vertices (vv#p) = insert (fst vv) (int_vertices p)\"\n    \"int_vertices (p1@p2) = int_vertices p1 \\<union> int_vertices p2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int_vertices [] = {} &&&\n    int_vertices (vv # p) = insert (fst vv) (int_vertices p) &&&\n    int_vertices (p1 @ p2) = int_vertices p1 \\<union> int_vertices p2", "by (auto simp add: int_vertices_def)"], ["", "lemma (in wf_graph) int_vertices_subset: \n    \"is_path v p v' \\<Longrightarrow> int_vertices p \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path v p v' \\<Longrightarrow> int_vertices p \\<subseteq> V", "apply (induct p arbitrary: v)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v. is_path v [] v' \\<Longrightarrow> int_vertices [] \\<subseteq> V\n 2. \\<And>a p v.\n       \\<lbrakk>\\<And>v.\n                   is_path v p v' \\<Longrightarrow>\n                   int_vertices p \\<subseteq> V;\n        is_path v (a # p) v'\\<rbrakk>\n       \\<Longrightarrow> int_vertices (a # p) \\<subseteq> V", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a p v.\n       \\<lbrakk>\\<And>v.\n                   is_path v p v' \\<Longrightarrow>\n                   int_vertices p \\<subseteq> V;\n        is_path v (a # p) v'\\<rbrakk>\n       \\<Longrightarrow> int_vertices (a # p) \\<subseteq> V", "apply (force dest: E_wfD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma int_vertices_empty[simp]: \"int_vertices p = {} \\<longleftrightarrow> p=[]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (int_vertices p = {}) = (p = [])", "by (cases p) auto"], ["", "subsubsection \\<open>Splitting Paths\\<close>"], ["", "text \\<open>Split a path at the point where it first leaves the set \\<open>W\\<close>:\\<close>"], ["", "lemma (in wf_graph) path_split_set:\n    assumes \"is_path v p v'\" and \"v\\<in>W\" and \"v'\\<notin>W\"\n    obtains p1 p2 u w u' where\n    \"p=p1@(u,u')#p2\" and\n    \"int_vertices p1 \\<subseteq> W\" and \"u\\<in>W\" and \"u'\\<notin>W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p1 u u' p2.\n        \\<lbrakk>p = p1 @ (u, u') # p2; int_vertices p1 \\<subseteq> W;\n         u \\<in> W; u' \\<notin> W\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_path v p v'\n  v \\<in> W\n  v' \\<notin> W\n\ngoal (1 subgoal):\n 1. (\\<And>p1 u u' p2.\n        \\<lbrakk>p = p1 @ (u, u') # p2; int_vertices p1 \\<subseteq> W;\n         u \\<in> W; u' \\<notin> W\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induct p arbitrary: v thesis)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v thesis.\n       \\<lbrakk>\\<And>p1 u u' p2.\n                   \\<lbrakk>[] = p1 @ (u, u') # p2;\n                    int_vertices p1 \\<subseteq> W; u \\<in> W;\n                    u' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v [] v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Nil"], ["proof (state)\nthis:\n  \\<lbrakk>[] = ?p1.0 @ (?u, ?u') # ?p2.0; int_vertices ?p1.0 \\<subseteq> W;\n   ?u \\<in> W; ?u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v [] v'\n  v \\<in> W\n  v' \\<notin> W\n\ngoal (2 subgoals):\n 1. \\<And>v thesis.\n       \\<lbrakk>\\<And>p1 u u' p2.\n                   \\<lbrakk>[] = p1 @ (u, u') # p2;\n                    int_vertices p1 \\<subseteq> W; u \\<in> W;\n                    u' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v [] v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>[] = ?p1.0 @ (?u, ?u') # ?p2.0; int_vertices ?p1.0 \\<subseteq> W;\n   ?u \\<in> W; ?u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v [] v'\n  v \\<in> W\n  v' \\<notin> W\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Cons vv p)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>p1 u u' p2.\n              \\<lbrakk>p = p1 @ (u, u') # p2; int_vertices p1 \\<subseteq> W;\n               u \\<in> W; u' \\<notin> W\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   is_path ?v p v'; ?v \\<in> W; v' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>vv # p = ?p1.0 @ (?u, ?u') # ?p2.0;\n   int_vertices ?p1.0 \\<subseteq> W; ?u \\<in> W; ?u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v (vv # p) v'\n  v \\<in> W\n  v' \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "note [simp, intro!] = \\<open>v\\<in>W\\<close> \\<open>v'\\<notin>W\\<close>"], ["proof (state)\nthis:\n  v \\<in> W\n  v' \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons.prems"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = ?p1.0 @ (?u, ?u') # ?p2.0;\n   int_vertices ?p1.0 \\<subseteq> W; ?u \\<in> W; ?u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v (vv # p) v'\n  v \\<in> W\n  v' \\<notin> W", "obtain u' where \n      [simp]: \"vv=(v,u')\" and\n        REST: \"is_path u' p v'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = ?p1.0 @ (?u, ?u') # ?p2.0;\n   int_vertices ?p1.0 \\<subseteq> W; ?u \\<in> W; ?u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesisa__\n  is_path v (vv # p) v'\n  v \\<in> W\n  v' \\<notin> W\n\ngoal (1 subgoal):\n 1. (\\<And>u'.\n        \\<lbrakk>vv = (v, u'); is_path u' p v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases vv) auto"], ["proof (state)\nthis:\n  vv = (v, u')\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "txt \\<open>Distinguish wether the second node \\<open>u'\\<close> of the path is \n      in \\<open>W\\<close>. If yes, the proposition follows by the \n      induction hypothesis, otherwise it is straightforward, as\n      the split takes place at the first edge of the path.\\<close>"], ["proof (state)\nthis:\n  vv = (v, u')\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  vv = (v, u')\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume A [simp, intro!]: \"u'\\<in>W\""], ["proof (state)\nthis:\n  u' \\<in> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons.hyps[OF _ REST]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>p1 u u' p2.\n              \\<lbrakk>p = p1 @ (u, u') # p2; int_vertices p1 \\<subseteq> W;\n               u \\<in> W; u' \\<notin> W\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   u' \\<in> W; v' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "obtain p1 uu uu' p2 where\n        \"p=p1@(uu,uu')#p2\" \"int_vertices p1 \\<subseteq> W\" \"uu \\<in> W\" \"uu' \\<notin> W\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>p1 u u' p2.\n              \\<lbrakk>p = p1 @ (u, u') # p2; int_vertices p1 \\<subseteq> W;\n               u \\<in> W; u' \\<notin> W\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   u' \\<in> W; v' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>p1 uu uu' p2.\n        \\<lbrakk>p = p1 @ (uu, uu') # p2; int_vertices p1 \\<subseteq> W;\n         uu \\<in> W; uu' \\<notin> W\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p = p1 @ (uu, uu') # p2\n  int_vertices p1 \\<subseteq> W\n  uu \\<in> W\n  uu' \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "with Cons.prems(1)[of \"vv#p1\" uu uu' p2]"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = (vv # p1) @ (uu, uu') # p2;\n   int_vertices (vv # p1) \\<subseteq> W; uu \\<in> W; uu' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  p = p1 @ (uu, uu') # p2\n  int_vertices p1 \\<subseteq> W\n  uu \\<in> W\n  uu' \\<notin> W", "have thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = (vv # p1) @ (uu, uu') # p2;\n   int_vertices (vv # p1) \\<subseteq> W; uu \\<in> W; uu' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  p = p1 @ (uu, uu') # p2\n  int_vertices p1 \\<subseteq> W\n  uu \\<in> W\n  uu' \\<notin> W\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  u' \\<in> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  u' \\<in> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  u' \\<in> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume \"u'\\<notin>W\""], ["proof (state)\nthis:\n  u' \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "with Cons.prems(1)[of \"[]\" v u' p]"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = [] @ (v, u') # p; int_vertices [] \\<subseteq> W;\n   v \\<in> W; u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  u' \\<notin> W", "have thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = [] @ (v, u') # p; int_vertices [] \\<subseteq> W;\n   v \\<in> W; u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  u' \\<notin> W\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  u' \\<notin> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u u' p2.\n                               \\<lbrakk>p = p1 @ (u, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u u' p2.\n           \\<lbrakk>a # p = p1 @ (u, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  u' \\<in> W \\<Longrightarrow> thesis\n  u' \\<notin> W \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\nusing this:\n  u' \\<in> W \\<Longrightarrow> thesis\n  u' \\<notin> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Split a path at the point where it first enters the set \\<open>W\\<close>:\\<close>"], ["", "lemma (in wf_graph) path_split_set':\n    assumes \"is_path v p v'\" and \"v'\\<in>W\"\n    obtains p1 p2 u where\n    \"p=p1@p2\" and\n    \"is_path v p1 u\" and\n    \"is_path u p2 v'\" and\n    \"int_vertices p1 \\<subseteq> -W\" and \"u\\<in>W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p1 p2 u.\n        \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n         int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_path v p v'\n  v' \\<in> W\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2 u.\n        \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n         int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (cases \"v\\<in>W\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>p1 p2 u.\n                \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n                 int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     is_path v p v'; v' \\<in> W; v \\<in> W\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>p1 p2 u.\n                \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n                 int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     is_path v p v'; v' \\<in> W; v \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  v \\<in> W\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>p1 p2 u.\n                \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n                 int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     is_path v p v'; v' \\<in> W; v \\<in> W\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>p1 p2 u.\n                \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n                 int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     is_path v p v'; v' \\<in> W; v \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> thesis", "with that[of \"[]\" p] assms"], ["proof (chain)\npicking this:\n  \\<lbrakk>p = [] @ p; is_path v [] ?u; is_path ?u p v';\n   int_vertices [] \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v p v'\n  v' \\<in> W\n  v \\<in> W", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>p = [] @ p; is_path v [] ?u; is_path ?u p v';\n   int_vertices [] \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v p v'\n  v' \\<in> W\n  v \\<in> W\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p1 p2 u.\n                \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n                 int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     is_path v p v'; v' \\<in> W; v \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p1 p2 u.\n                \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n                 int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     is_path v p v'; v' \\<in> W; v \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  v \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p1 p2 u.\n                \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n                 int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     is_path v p v'; v' \\<in> W; v \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> thesis", "with assms that"], ["proof (chain)\npicking this:\n  is_path v p v'\n  v' \\<in> W\n  \\<lbrakk>p = ?p1.0 @ ?p2.0; is_path v ?p1.0 ?u; is_path ?u ?p2.0 v';\n   int_vertices ?p1.0 \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  v \\<notin> W", "show ?thesis"], ["proof (prove)\nusing this:\n  is_path v p v'\n  v' \\<in> W\n  \\<lbrakk>p = ?p1.0 @ ?p2.0; is_path v ?p1.0 ?u; is_path ?u ?p2.0 v';\n   int_vertices ?p1.0 \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  v \\<notin> W\n\ngoal (1 subgoal):\n 1. thesis", "proof (induct p arbitrary: v thesis)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v thesis.\n       \\<lbrakk>is_path v [] v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>[] = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Nil"], ["proof (state)\nthis:\n  is_path v [] v'\n  v' \\<in> W\n  \\<lbrakk>[] = ?p1.0 @ ?p2.0; is_path v ?p1.0 ?u; is_path ?u ?p2.0 v';\n   int_vertices ?p1.0 \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  v \\<notin> W\n\ngoal (2 subgoals):\n 1. \\<And>v thesis.\n       \\<lbrakk>is_path v [] v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>[] = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  is_path v [] v'\n  v' \\<in> W\n  \\<lbrakk>[] = ?p1.0 @ ?p2.0; is_path v ?p1.0 ?u; is_path ?u ?p2.0 v';\n   int_vertices ?p1.0 \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  v \\<notin> W\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Cons vv p)"], ["proof (state)\nthis:\n  \\<lbrakk>is_path ?v p v'; v' \\<in> W;\n   \\<And>p1 p2 u.\n      \\<lbrakk>p = p1 @ p2; is_path ?v p1 u; is_path u p2 v';\n       int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n      \\<Longrightarrow> ?thesis;\n   ?v \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  is_path v (vv # p) v'\n  v' \\<in> W\n  \\<lbrakk>vv # p = ?p1.0 @ ?p2.0; is_path v ?p1.0 ?u; is_path ?u ?p2.0 v';\n   int_vertices ?p1.0 \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  v \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "note [simp, intro!] = \\<open>v'\\<in>W\\<close> \\<open>v\\<notin>W\\<close>"], ["proof (state)\nthis:\n  v' \\<in> W\n  v \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons.prems"], ["proof (chain)\npicking this:\n  is_path v (vv # p) v'\n  v' \\<in> W\n  \\<lbrakk>vv # p = ?p1.0 @ ?p2.0; is_path v ?p1.0 ?u; is_path ?u ?p2.0 v';\n   int_vertices ?p1.0 \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  v \\<notin> W", "obtain u' where \n        [simp]: \"vv=(v,u')\" and [simp]: \"(v,u')\\<in>E\" and\n          REST: \"is_path u' p v'\""], ["proof (prove)\nusing this:\n  is_path v (vv # p) v'\n  v' \\<in> W\n  \\<lbrakk>vv # p = ?p1.0 @ ?p2.0; is_path v ?p1.0 ?u; is_path ?u ?p2.0 v';\n   int_vertices ?p1.0 \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesisa__\n  v \\<notin> W\n\ngoal (1 subgoal):\n 1. (\\<And>u'.\n        \\<lbrakk>vv = (v, u'); (v, u') \\<in> E; is_path u' p v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases vv) auto"], ["proof (state)\nthis:\n  vv = (v, u')\n  (v, u') \\<in> E\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "txt \\<open>Distinguish wether the second node \\<open>u'\\<close> of the path is \n        in \\<open>W\\<close>. If yes, the proposition is straightforward, otherwise,\n        it follows by the induction hypothesis.\n\\<close>"], ["proof (state)\nthis:\n  vv = (v, u')\n  (v, u') \\<in> E\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  vv = (v, u')\n  (v, u') \\<in> E\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume A [simp, intro!]: \"u'\\<in>W\""], ["proof (state)\nthis:\n  u' \\<in> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons.prems(3)[of \"[vv]\" p u'] REST"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = [vv] @ p; is_path v [vv] u'; is_path u' p v';\n   int_vertices [vv] \\<subseteq> - W; u' \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path u' p v'", "have ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = [vv] @ p; is_path v [vv] u'; is_path u' p v';\n   int_vertices [vv] \\<subseteq> - W; u' \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  u' \\<in> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  u' \\<in> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  u' \\<in> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume [simp, intro!]: \"u'\\<notin>W\""], ["proof (state)\nthis:\n  u' \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons.hyps[OF REST]"], ["proof (chain)\npicking this:\n  \\<lbrakk>v' \\<in> W;\n   \\<And>p1 p2 u.\n      \\<lbrakk>p = p1 @ p2; is_path u' p1 u; is_path u p2 v';\n       int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n      \\<Longrightarrow> ?thesis;\n   u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "obtain p1 p2 u'' where\n          [simp]: \"p=p1@p2\" and \n            \"is_path u' p1 u''\" and \n            \"is_path u'' p2 v'\" and\n            \"int_vertices p1 \\<subseteq> -W\" and\n            \"u''\\<in>W\""], ["proof (prove)\nusing this:\n  \\<lbrakk>v' \\<in> W;\n   \\<And>p1 p2 u.\n      \\<lbrakk>p = p1 @ p2; is_path u' p1 u; is_path u p2 v';\n       int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n      \\<Longrightarrow> ?thesis;\n   u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2 u''.\n        \\<lbrakk>p = p1 @ p2; is_path u' p1 u''; is_path u'' p2 v';\n         int_vertices p1 \\<subseteq> - W; u'' \\<in> W\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p = p1 @ p2\n  is_path u' p1 u''\n  is_path u'' p2 v'\n  int_vertices p1 \\<subseteq> - W\n  u'' \\<in> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "with Cons.prems(3)[of \"vv#p1\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = (vv # p1) @ ?p2.0; is_path v (vv # p1) ?u;\n   is_path ?u ?p2.0 v'; int_vertices (vv # p1) \\<subseteq> - W;\n   ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  p = p1 @ p2\n  is_path u' p1 u''\n  is_path u'' p2 v'\n  int_vertices p1 \\<subseteq> - W\n  u'' \\<in> W", "have ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = (vv # p1) @ ?p2.0; is_path v (vv # p1) ?u;\n   is_path ?u ?p2.0 v'; int_vertices (vv # p1) \\<subseteq> - W;\n   ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  p = p1 @ p2\n  is_path u' p1 u''\n  is_path u'' p2 v'\n  int_vertices p1 \\<subseteq> - W\n  u'' \\<in> W\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  u' \\<notin> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  u' \\<in> W \\<Longrightarrow> thesis\n  u' \\<notin> W \\<Longrightarrow> thesis", "show ?case"], ["proof (prove)\nusing this:\n  u' \\<in> W \\<Longrightarrow> thesis\n  u' \\<notin> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Split a path at the point where a given vertex is first visited:\\<close>"], ["", "lemma (in wf_graph) path_split_vertex:\n    assumes \"is_path v p v'\" and \"u\\<in>int_vertices p\"\n    obtains p1 p2 where\n    \"p=p1@p2\" and\n    \"is_path v p1 u\" and\n    \"u \\<notin> int_vertices p1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n         u \\<notin> int_vertices p1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_path v p v'\n  u \\<in> int_vertices p\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n         u \\<notin> int_vertices p1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induct p arbitrary: v thesis)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v thesis.\n       \\<lbrakk>\\<And>p1 p2.\n                   \\<lbrakk>[] = p1 @ p2; is_path v p1 u;\n                    u \\<notin> int_vertices p1\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v [] v'; u \\<in> int_vertices []\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Nil"], ["proof (state)\nthis:\n  \\<lbrakk>[] = ?p1.0 @ ?p2.0; is_path v ?p1.0 u;\n   u \\<notin> int_vertices ?p1.0\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v [] v'\n  u \\<in> int_vertices []\n\ngoal (2 subgoals):\n 1. \\<And>v thesis.\n       \\<lbrakk>\\<And>p1 p2.\n                   \\<lbrakk>[] = p1 @ p2; is_path v p1 u;\n                    u \\<notin> int_vertices p1\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v [] v'; u \\<in> int_vertices []\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>[] = ?p1.0 @ ?p2.0; is_path v ?p1.0 u;\n   u \\<notin> int_vertices ?p1.0\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v [] v'\n  u \\<in> int_vertices []\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Cons vv p)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>p1 p2.\n              \\<lbrakk>p = p1 @ p2; is_path ?v p1 u;\n               u \\<notin> int_vertices p1\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   is_path ?v p v'; u \\<in> int_vertices p\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>vv # p = ?p1.0 @ ?p2.0; is_path v ?p1.0 u;\n   u \\<notin> int_vertices ?p1.0\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v (vv # p) v'\n  u \\<in> int_vertices (vv # p)\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons.prems"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = ?p1.0 @ ?p2.0; is_path v ?p1.0 u;\n   u \\<notin> int_vertices ?p1.0\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v (vv # p) v'\n  u \\<in> int_vertices (vv # p)", "obtain u' where \n      [simp]: \"vv=(v,u')\" \"v\\<in>V\" \"(v,u')\\<in>E\" and\n        REST: \"is_path u' p v'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = ?p1.0 @ ?p2.0; is_path v ?p1.0 u;\n   u \\<notin> int_vertices ?p1.0\\<rbrakk>\n  \\<Longrightarrow> thesisa__\n  is_path v (vv # p) v'\n  u \\<in> int_vertices (vv # p)\n\ngoal (1 subgoal):\n 1. (\\<And>u'.\n        \\<lbrakk>vv = (v, u'); v \\<in> V; (v, u') \\<in> E;\n         is_path u' p v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases vv) auto"], ["proof (state)\nthis:\n  vv = (v, u')\n  v \\<in> V\n  (v, u') \\<in> E\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  vv = (v, u')\n  v \\<in> V\n  (v, u') \\<in> E\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume \"u=v\""], ["proof (state)\nthis:\n  u = v\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "with Cons.prems(1)[of \"[]\" \"vv#p\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = [] @ vv # p; is_path v [] u;\n   u \\<notin> int_vertices []\\<rbrakk>\n  \\<Longrightarrow> thesis\n  u = v", "have thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = [] @ vv # p; is_path v [] u;\n   u \\<notin> int_vertices []\\<rbrakk>\n  \\<Longrightarrow> thesis\n  u = v\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  u = v \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  u = v \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  u = v \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume [simp]: \"u\\<noteq>v\""], ["proof (state)\nthis:\n  u \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "with Cons.hyps(1)[OF _ REST] Cons.prems(3)"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>p1 p2.\n              \\<lbrakk>p = p1 @ p2; is_path u' p1 u;\n               u \\<notin> int_vertices p1\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   u \\<in> int_vertices p\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  u \\<in> int_vertices (vv # p)\n  u \\<noteq> v", "obtain p1 p2 where\n        \"p=p1@p2\" \"is_path u' p1 u\" \"u\\<notin>int_vertices p1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>p1 p2.\n              \\<lbrakk>p = p1 @ p2; is_path u' p1 u;\n               u \\<notin> int_vertices p1\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   u \\<in> int_vertices p\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  u \\<in> int_vertices (vv # p)\n  u \\<noteq> v\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        \\<lbrakk>p = p1 @ p2; is_path u' p1 u;\n         u \\<notin> int_vertices p1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p = p1 @ p2\n  is_path u' p1 u\n  u \\<notin> int_vertices p1\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "with Cons.prems(1)[of \"vv#p1\" p2]"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = (vv # p1) @ p2; is_path v (vv # p1) u;\n   u \\<notin> int_vertices (vv # p1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  p = p1 @ p2\n  is_path u' p1 u\n  u \\<notin> int_vertices p1", "have thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = (vv # p1) @ p2; is_path v (vv # p1) u;\n   u \\<notin> int_vertices (vv # p1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  p = p1 @ p2\n  is_path u' p1 u\n  u \\<notin> int_vertices p1\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  u \\<noteq> v \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  u = v \\<Longrightarrow> thesis\n  u \\<noteq> v \\<Longrightarrow> thesis", "show ?case"], ["proof (prove)\nusing this:\n  u = v \\<Longrightarrow> thesis\n  u \\<noteq> v \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}