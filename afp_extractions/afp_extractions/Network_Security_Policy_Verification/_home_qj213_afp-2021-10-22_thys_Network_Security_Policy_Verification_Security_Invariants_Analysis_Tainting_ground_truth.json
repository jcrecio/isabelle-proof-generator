{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/Analysis_Tainting.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma tainting_imp_blp_cutcard: \"\\<forall>ts v. nP v = ts \\<longrightarrow> finite ts \\<Longrightarrow>\n  SINVAR_Tainting.sinvar G nP \\<Longrightarrow> SINVAR_BLPbasic.sinvar G ((\\<lambda>ts. card (ts \\<inter> X)) \\<circ> nP)\"", "lemma tainting_imp_blp_cutcard2: \"finite X \\<Longrightarrow>\n  SINVAR_Tainting.sinvar G nP \\<Longrightarrow> SINVAR_BLPbasic.sinvar G ((\\<lambda>ts. card (ts \\<inter> X)) \\<circ> nP)\"", "lemma \"\\<forall>ts v. nP v = ts \\<longrightarrow> finite ts \\<Longrightarrow>\n  SINVAR_Tainting.sinvar G nP \\<Longrightarrow> SINVAR_BLPbasic.sinvar G (card \\<circ> nP)\"", "lemma \"\\<forall>b \\<in> snd ` edges G. finite (nP b) \\<Longrightarrow>\n  SINVAR_Tainting.sinvar G nP \\<Longrightarrow> SINVAR_BLPbasic.sinvar G (card \\<circ> nP)\"", "lemma tainting_iff_blp:\n  defines \"extract \\<equiv> \\<lambda>a ts. if a \\<in> ts then 1::security_level else 0::security_level\"\n  shows \"SINVAR_Tainting.sinvar G nP \\<longleftrightarrow> (\\<forall>a. SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP))\"", "lemma tainting_iff_blp_extended:\n  defines \"extract \\<equiv> \\<lambda>A ts. card (A \\<inter> ts)\"\n  assumes finite: \"\\<forall>ts v. nP v = ts \\<longrightarrow> finite ts\"\n  shows \"SINVAR_Tainting.sinvar G nP \\<longleftrightarrow> (\\<forall>A. SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP))\"", "lemma \"\\<forall>ts v. nP v = ts \\<longrightarrow> finite (taints ts) \\<Longrightarrow>\n  SINVAR_TaintingTrusted.sinvar G nP \\<Longrightarrow>\n    SINVAR_BLPtrusted.sinvar G ((\\<lambda> ts. \\<lparr>security_level = card (taints ts - untaints ts), trusted = (untaints ts \\<noteq> {})\\<rparr> ) \\<circ> nP)\"", "lemma tainting_iff_blp_trusted:\n  defines \"project \\<equiv> \\<lambda>a ts. \\<lparr>\n      security_level =\n        if\n          a \\<in> (taints ts - untaints ts)\n        then\n          1::security_level\n        else\n          0::security_level\n      , trusted = a \\<in> untaints ts\\<rparr>\"\n  shows \"SINVAR_TaintingTrusted.sinvar G nP \\<longleftrightarrow> (\\<forall>a. SINVAR_BLPtrusted.sinvar G (project a \\<circ> nP))\"", "lemma tainting_iff_blp_trusted_extended:\n  defines \"project \\<equiv> \\<lambda>A ts.\n      \\<lparr>\n          security_level = card (A \\<inter> (taints ts - untaints ts))\n        , trusted = (A \\<inter> untaints ts) \\<noteq> {}\n      \\<rparr>\"\n  assumes finite: \"\\<forall>ts v. nP v = ts \\<longrightarrow> finite (taints ts)\"\n  shows \"SINVAR_TaintingTrusted.sinvar G nP \\<longleftrightarrow> (\\<forall>A. SINVAR_BLPtrusted.sinvar G (project A \\<circ> nP))\""], "translations": [["", "lemma tainting_imp_blp_cutcard: \"\\<forall>ts v. nP v = ts \\<longrightarrow> finite ts \\<Longrightarrow>\n  SINVAR_Tainting.sinvar G nP \\<Longrightarrow> SINVAR_BLPbasic.sinvar G ((\\<lambda>ts. card (ts \\<inter> X)) \\<circ> nP)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>ts v. nP v = ts \\<longrightarrow> finite ts;\n     SINVAR_Tainting.sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> SINVAR_BLPbasic.sinvar G\n                       ((\\<lambda>ts. card (ts \\<inter> X)) \\<circ> nP)", "apply(simp add: SINVAR_Tainting.sinvar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>ts.\n                (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n     \\<forall>x\\<in>edges G.\n        case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>edges G.\n                         case x of\n                         (e1, e2) \\<Rightarrow>\n                           card (nP e1 \\<inter> X)\n                           \\<le> card (nP e2 \\<inter> X)", "apply(clarify, rename_tac a b)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n        \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "apply(erule_tac x=\"(a,b)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n        (a, b) \\<in> edges G;\n        case (a, b) of\n        (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n        (a, b) \\<in> edges G; (a, b) \\<notin> edges G\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n        (a, b) \\<in> edges G; nP a \\<subseteq> nP b\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "apply(subgoal_tac \"finite (nP a \\<inter> X)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n        (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n        (a, b) \\<in> edges G; nP a \\<subseteq> nP b\\<rbrakk>\n       \\<Longrightarrow> finite (nP a \\<inter> X)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n        (a, b) \\<in> edges G; nP a \\<subseteq> nP b\\<rbrakk>\n       \\<Longrightarrow> finite (nP a \\<inter> X)\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n        (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>ts.\n                (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n     (a_, b_) \\<in> edges G; nP a_ \\<subseteq> nP b_\\<rbrakk>\n    \\<Longrightarrow> finite (nP a_ \\<inter> X)", "using finite_Int"], ["proof (prove)\nusing this:\n  finite ?F \\<or> finite ?G \\<Longrightarrow> finite (?F \\<inter> ?G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>ts.\n                (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n     (a_, b_) \\<in> edges G; nP a_ \\<subseteq> nP b_\\<rbrakk>\n    \\<Longrightarrow> finite (nP a_ \\<inter> X)", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n        (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "apply(subgoal_tac \"finite (nP b \\<inter> X)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n        (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X); finite (nP b \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n        (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> finite (nP b \\<inter> X)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n        (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> finite (nP b \\<inter> X)\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n        (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X); finite (nP b \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>ts.\n                (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n     (a_, b_) \\<in> edges G; nP a_ \\<subseteq> nP b_;\n     finite (nP a_ \\<inter> X)\\<rbrakk>\n    \\<Longrightarrow> finite (nP b_ \\<inter> X)", "using finite_Int"], ["proof (prove)\nusing this:\n  finite ?F \\<or> finite ?G \\<Longrightarrow> finite (?F \\<inter> ?G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>ts.\n                (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n     (a_, b_) \\<in> edges G; nP a_ \\<subseteq> nP b_;\n     finite (nP a_ \\<inter> X)\\<rbrakk>\n    \\<Longrightarrow> finite (nP b_ \\<inter> X)", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n        (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X); finite (nP b \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "using card_mono"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> card ?A \\<le> card ?B\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow> finite ts;\n        (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X); finite (nP b \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "by (metis Int_subset_iff order_refl subset_antisym)"], ["", "lemma tainting_imp_blp_cutcard2: \"finite X \\<Longrightarrow>\n  SINVAR_Tainting.sinvar G nP \\<Longrightarrow> SINVAR_BLPbasic.sinvar G ((\\<lambda>ts. card (ts \\<inter> X)) \\<circ> nP)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite X; SINVAR_Tainting.sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> SINVAR_BLPbasic.sinvar G\n                       ((\\<lambda>ts. card (ts \\<inter> X)) \\<circ> nP)", "apply(simp add: SINVAR_Tainting.sinvar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite X;\n     \\<forall>x\\<in>edges G.\n        case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>edges G.\n                         case x of\n                         (e1, e2) \\<Rightarrow>\n                           card (nP e1 \\<inter> X)\n                           \\<le> card (nP e2 \\<inter> X)", "apply(clarify, rename_tac a b)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>finite X;\n        \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "apply(erule_tac x=\"(a,b)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>finite X; (a, b) \\<in> edges G;\n        case (a, b) of\n        (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)\n 2. \\<And>a b.\n       \\<lbrakk>finite X; (a, b) \\<in> edges G;\n        (a, b) \\<notin> edges G\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>finite X; (a, b) \\<in> edges G;\n        nP a \\<subseteq> nP b\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "apply(subgoal_tac \"finite (nP a \\<inter> X)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>finite X; (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)\n 2. \\<And>a b.\n       \\<lbrakk>finite X; (a, b) \\<in> edges G;\n        nP a \\<subseteq> nP b\\<rbrakk>\n       \\<Longrightarrow> finite (nP a \\<inter> X)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>finite X; (a, b) \\<in> edges G;\n        nP a \\<subseteq> nP b\\<rbrakk>\n       \\<Longrightarrow> finite (nP a \\<inter> X)\n 2. \\<And>a b.\n       \\<lbrakk>finite X; (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite X; (a_, b_) \\<in> edges G;\n     nP a_ \\<subseteq> nP b_\\<rbrakk>\n    \\<Longrightarrow> finite (nP a_ \\<inter> X)", "using finite_Int"], ["proof (prove)\nusing this:\n  finite ?F \\<or> finite ?G \\<Longrightarrow> finite (?F \\<inter> ?G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite X; (a_, b_) \\<in> edges G;\n     nP a_ \\<subseteq> nP b_\\<rbrakk>\n    \\<Longrightarrow> finite (nP a_ \\<inter> X)", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>finite X; (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "apply(subgoal_tac \"finite (nP b \\<inter> X)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>finite X; (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X); finite (nP b \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)\n 2. \\<And>a b.\n       \\<lbrakk>finite X; (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> finite (nP b \\<inter> X)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>finite X; (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> finite (nP b \\<inter> X)\n 2. \\<And>a b.\n       \\<lbrakk>finite X; (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X); finite (nP b \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite X; (a_, b_) \\<in> edges G; nP a_ \\<subseteq> nP b_;\n     finite (nP a_ \\<inter> X)\\<rbrakk>\n    \\<Longrightarrow> finite (nP b_ \\<inter> X)", "using finite_Int"], ["proof (prove)\nusing this:\n  finite ?F \\<or> finite ?G \\<Longrightarrow> finite (?F \\<inter> ?G)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite X; (a_, b_) \\<in> edges G; nP a_ \\<subseteq> nP b_;\n     finite (nP a_ \\<inter> X)\\<rbrakk>\n    \\<Longrightarrow> finite (nP b_ \\<inter> X)", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>finite X; (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X); finite (nP b \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "using card_mono"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> card ?A \\<le> card ?B\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>finite X; (a, b) \\<in> edges G; nP a \\<subseteq> nP b;\n        finite (nP a \\<inter> X); finite (nP b \\<inter> X)\\<rbrakk>\n       \\<Longrightarrow> card (nP a \\<inter> X) \\<le> card (nP b \\<inter> X)", "by (metis Int_subset_iff order_refl subset_antisym)"], ["", "lemma \"\\<forall>ts v. nP v = ts \\<longrightarrow> finite ts \\<Longrightarrow>\n  SINVAR_Tainting.sinvar G nP \\<Longrightarrow> SINVAR_BLPbasic.sinvar G (card \\<circ> nP)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>ts v. nP v = ts \\<longrightarrow> finite ts;\n     SINVAR_Tainting.sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> SINVAR_BLPbasic.sinvar G (card \\<circ> nP)", "apply(drule(1) tainting_imp_blp_cutcard[where X=UNIV])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>SINVAR_Tainting.sinvar G nP;\n     SINVAR_BLPbasic.sinvar G\n      ((\\<lambda>ts. card (ts \\<inter> UNIV)) \\<circ> nP)\\<rbrakk>\n    \\<Longrightarrow> SINVAR_BLPbasic.sinvar G (card \\<circ> nP)", "by(simp)"], ["", "(*Stronger version*)"], ["", "lemma \"\\<forall>b \\<in> snd ` edges G. finite (nP b) \\<Longrightarrow>\n  SINVAR_Tainting.sinvar G nP \\<Longrightarrow> SINVAR_BLPbasic.sinvar G (card \\<circ> nP)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>b\\<in>snd ` edges G. finite (nP b);\n     SINVAR_Tainting.sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> SINVAR_BLPbasic.sinvar G (card \\<circ> nP)", "apply(simp add: SINVAR_Tainting.sinvar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>b\\<in>edges G. finite (nP (snd b));\n     \\<forall>x\\<in>edges G.\n        case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>edges G.\n                         case x of\n                         (e1, e2) \\<Rightarrow>\n                           card (nP e1) \\<le> card (nP e2)", "apply(clarify, rename_tac a b)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>b\\<in>edges G. finite (nP (snd b));\n        \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)", "apply(erule_tac x=\"(a,b)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (nP (snd (a, b)))\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; (a, b) \\<notin> edges G\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (nP b)\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)", "apply(case_tac \"finite (nP a)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (nP b); finite (nP a)\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (nP b); infinite (nP a)\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)", "apply(case_tac [!] \"finite (nP b)\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (nP b); finite (nP a);\n        finite (nP b)\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (nP b); finite (nP a);\n        infinite (nP b)\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)\n 3. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (nP b); infinite (nP a);\n        finite (nP b)\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)\n 4. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (nP b); infinite (nP a);\n        infinite (nP b)\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)", "using card_mono"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> card ?A \\<le> card ?B\n\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (nP b); finite (nP a);\n        finite (nP b)\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (nP b); finite (nP a);\n        infinite (nP b)\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)\n 3. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (nP b); infinite (nP a);\n        finite (nP b)\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)\n 4. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (nP b); infinite (nP a);\n        infinite (nP b)\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (nP b); finite (nP a);\n        infinite (nP b)\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (nP b); infinite (nP a);\n        finite (nP b)\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)\n 3. \\<And>a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (nP b); infinite (nP a);\n        infinite (nP b)\\<rbrakk>\n       \\<Longrightarrow> card (nP a) \\<le> card (nP b)", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>One tainting invariant is equal to many BLP invariants. \n     The BLP invariants are the projection of the tainting mapping for exactly one label\\<close>"], ["", "lemma tainting_iff_blp:\n  defines \"extract \\<equiv> \\<lambda>a ts. if a \\<in> ts then 1::security_level else 0::security_level\"\n  shows \"SINVAR_Tainting.sinvar G nP \\<longleftrightarrow> (\\<forall>a. SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SINVAR_Tainting.sinvar G nP =\n    (\\<forall>a. SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. SINVAR_Tainting.sinvar G nP \\<Longrightarrow>\n    \\<forall>a. SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP)\n 2. \\<forall>a.\n       SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "show\"SINVAR_Tainting.sinvar G nP \\<Longrightarrow> \\<forall>a. SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SINVAR_Tainting.sinvar G nP \\<Longrightarrow>\n    \\<forall>a. SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP)", "apply(simp add: extract_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. SINVAR_Tainting.sinvar G nP \\<Longrightarrow>\n    \\<forall>a.\n       \\<forall>x\\<in>edges G.\n          case x of\n          (e1, e2) \\<Rightarrow>\n            (a \\<in> nP e2 \\<longrightarrow>\n             (if a \\<in> nP e1 then 1 else 0) \\<le> Suc 0) \\<and>\n            (a \\<notin> nP e2 \\<longrightarrow>\n             (if a \\<in> nP e1 then 1 else 0) = 0)", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a aa b.\n       \\<lbrakk>SINVAR_Tainting.sinvar G nP; (aa, b) \\<in> edges G;\n        a \\<in> nP b\\<rbrakk>\n       \\<Longrightarrow> (if a \\<in> nP aa then 1 else 0) \\<le> Suc 0\n 2. \\<And>a aa b.\n       \\<lbrakk>SINVAR_Tainting.sinvar G nP; (aa, b) \\<in> edges G;\n        a \\<notin> nP b\\<rbrakk>\n       \\<Longrightarrow> (if a \\<in> nP aa then 1 else 0) = 0", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>SINVAR_Tainting.sinvar G nP; (aa, b) \\<in> edges G;\n        a \\<notin> nP b\\<rbrakk>\n       \\<Longrightarrow> (if a \\<in> nP aa then 1 else 0) = 0", "apply(simp add: SINVAR_Tainting.sinvar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (aa, b) \\<in> edges G; a \\<notin> nP b\\<rbrakk>\n       \\<Longrightarrow> a \\<notin> nP aa", "by fast"], ["proof (state)\nthis:\n  SINVAR_Tainting.sinvar G nP \\<Longrightarrow>\n  \\<forall>a. SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP)\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "assume blp: \"\\<forall>a. SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP)\""], ["proof (state)\nthis:\n  \\<forall>a. SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP)\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "{"], ["proof (state)\nthis:\n  \\<forall>a. SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP)\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "fix v1 v2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "assume *: \"(v1,v2)\\<in>edges G\""], ["proof (state)\nthis:\n  (v1, v2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "{"], ["proof (state)\nthis:\n  (v1, v2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "from blp *"], ["proof (chain)\npicking this:\n  \\<forall>a. SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP)\n  (v1, v2) \\<in> edges G", "have \"(if a \\<in> nP v1 then 1::security_level else 0) \\<le> (if a \\<in> nP v2 then 1 else 0)\""], ["proof (prove)\nusing this:\n  \\<forall>a. SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP)\n  (v1, v2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. (if a \\<in> nP v1 then 1 else 0) \\<le> (if a \\<in> nP v2 then 1 else 0)", "unfolding extract_def"], ["proof (prove)\nusing this:\n  \\<forall>a.\n     SINVAR_BLPbasic.sinvar G\n      ((\\<lambda>ts. if a \\<in> ts then 1 else 0) \\<circ> nP)\n  (v1, v2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. (if a \\<in> nP v1 then 1 else 0) \\<le> (if a \\<in> nP v2 then 1 else 0)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a.\n                \\<forall>x\\<in>edges G.\n                   case x of\n                   (e1, e2) \\<Rightarrow>\n                     (if a \\<in> nP e1 then 1 else 0)\n                     \\<le> (if a \\<in> nP e2 then 1 else 0);\n     (v1, v2) \\<in> edges G\\<rbrakk>\n    \\<Longrightarrow> a \\<in> nP v1 \\<longrightarrow> a \\<in> nP v2", "apply(erule_tac x=a in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(v1, v2) \\<in> edges G;\n     \\<forall>x\\<in>edges G.\n        case x of\n        (e1, e2) \\<Rightarrow>\n          (if a \\<in> nP e1 then 1 else 0)\n          \\<le> (if a \\<in> nP e2 then 1 else 0)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> nP v1 \\<longrightarrow> a \\<in> nP v2", "apply(erule_tac x=\"(v1, v2)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(v1, v2) \\<in> edges G;\n     case (v1, v2) of\n     (e1, e2) \\<Rightarrow>\n       (if a \\<in> nP e1 then 1 else 0)\n       \\<le> (if a \\<in> nP e2 then 1 else 0)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> nP v1 \\<longrightarrow> a \\<in> nP v2\n 2. \\<lbrakk>(v1, v2) \\<in> edges G; (v1, v2) \\<notin> edges G\\<rbrakk>\n    \\<Longrightarrow> a \\<in> nP v1 \\<longrightarrow> a \\<in> nP v2", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(v1, v2) \\<in> edges G;\n     (if a \\<in> nP v1 then 1 else 0)\n     \\<le> (if a \\<in> nP v2 then 1 else 0)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> nP v1 \\<longrightarrow> a \\<in> nP v2", "apply(simp split: if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (if a \\<in> nP v1 then 1 else 0) \\<le> (if a \\<in> nP v2 then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "hence \"a \\<in> nP v1 \\<Longrightarrow> a \\<in> nP v2\""], ["proof (prove)\nusing this:\n  (if a \\<in> nP v1 then 1 else 0) \\<le> (if a \\<in> nP v2 then 1 else 0)\n\ngoal (1 subgoal):\n 1. a \\<in> nP v1 \\<Longrightarrow> a \\<in> nP v2", "by(simp split: if_split_asm)"], ["proof (state)\nthis:\n  a \\<in> nP v1 \\<Longrightarrow> a \\<in> nP v2\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "}"], ["proof (state)\nthis:\n  ?a2 \\<in> nP v1 \\<Longrightarrow> ?a2 \\<in> nP v2\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "from this"], ["proof (chain)\npicking this:\n  ?a2 \\<in> nP v1 \\<Longrightarrow> ?a2 \\<in> nP v2", "have \"nP v1 \\<subseteq> nP v2\""], ["proof (prove)\nusing this:\n  ?a2 \\<in> nP v1 \\<Longrightarrow> ?a2 \\<in> nP v2\n\ngoal (1 subgoal):\n 1. nP v1 \\<subseteq> nP v2", "by auto"], ["proof (state)\nthis:\n  nP v1 \\<subseteq> nP v2\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "}"], ["proof (state)\nthis:\n  (?v1.2, ?v2.2) \\<in> edges G \\<Longrightarrow>\n  nP ?v1.2 \\<subseteq> nP ?v2.2\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       SINVAR_BLPbasic.sinvar G (extract a \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "thus \"SINVAR_Tainting.sinvar G nP\""], ["proof (prove)\nusing this:\n  (?v1.2, ?v2.2) \\<in> edges G \\<Longrightarrow>\n  nP ?v1.2 \\<subseteq> nP ?v2.2\n\ngoal (1 subgoal):\n 1. SINVAR_Tainting.sinvar G nP", "unfolding SINVAR_Tainting.sinvar_def"], ["proof (prove)\nusing this:\n  (?v1.2, ?v2.2) \\<in> edges G \\<Longrightarrow>\n  nP ?v1.2 \\<subseteq> nP ?v2.2\n\ngoal (1 subgoal):\n 1. \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2", "by blast"], ["proof (state)\nthis:\n  SINVAR_Tainting.sinvar G nP\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>If the labels are finite, the above can be generalized to arbitrary subsets of tainting labels.\\<close>"], ["", "lemma tainting_iff_blp_extended:\n  defines \"extract \\<equiv> \\<lambda>A ts. card (A \\<inter> ts)\"\n  assumes finite: \"\\<forall>ts v. nP v = ts \\<longrightarrow> finite ts\"\n  shows \"SINVAR_Tainting.sinvar G nP \\<longleftrightarrow> (\\<forall>A. SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SINVAR_Tainting.sinvar G nP =\n    (\\<forall>A. SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. SINVAR_Tainting.sinvar G nP \\<Longrightarrow>\n    \\<forall>A. SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP)\n 2. \\<forall>A.\n       SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "show \"SINVAR_Tainting.sinvar G nP \\<Longrightarrow> \\<forall>A. SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SINVAR_Tainting.sinvar G nP \\<Longrightarrow>\n    \\<forall>A. SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP)", "apply(simp add: extract_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. SINVAR_Tainting.sinvar G nP \\<Longrightarrow>\n    \\<forall>A.\n       \\<forall>x\\<in>edges G.\n          case x of\n          (e1, e2) \\<Rightarrow>\n            card (A \\<inter> nP e1) \\<le> card (A \\<inter> nP e2)", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A a b.\n       \\<lbrakk>SINVAR_Tainting.sinvar G nP; (a, b) \\<in> edges G\\<rbrakk>\n       \\<Longrightarrow> card (A \\<inter> nP a) \\<le> card (A \\<inter> nP b)", "apply(simp add: SINVAR_Tainting.sinvar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G\\<rbrakk>\n       \\<Longrightarrow> card (A \\<inter> nP a) \\<le> card (A \\<inter> nP b)", "apply(rename_tac A a b)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G\\<rbrakk>\n       \\<Longrightarrow> card (A \\<inter> nP a) \\<le> card (A \\<inter> nP b)", "apply(subgoal_tac \"finite (A \\<inter> nP a)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (A \\<inter> nP a)\\<rbrakk>\n       \\<Longrightarrow> card (A \\<inter> nP a) \\<le> card (A \\<inter> nP b)\n 2. \\<And>A a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G\\<rbrakk>\n       \\<Longrightarrow> finite (A \\<inter> nP a)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G\\<rbrakk>\n       \\<Longrightarrow> finite (A \\<inter> nP a)\n 2. \\<And>A a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (A \\<inter> nP a)\\<rbrakk>\n       \\<Longrightarrow> card (A \\<inter> nP a) \\<le> card (A \\<inter> nP b)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>edges G.\n                case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n     (a_, b_) \\<in> edges G\\<rbrakk>\n    \\<Longrightarrow> finite (A_ \\<inter> nP a_)", "using finite"], ["proof (prove)\nusing this:\n  \\<forall>ts v. nP v = ts \\<longrightarrow> finite ts\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>edges G.\n                case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n     (a_, b_) \\<in> edges G\\<rbrakk>\n    \\<Longrightarrow> finite (A_ \\<inter> nP a_)", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (A \\<inter> nP a)\\<rbrakk>\n       \\<Longrightarrow> card (A \\<inter> nP a) \\<le> card (A \\<inter> nP b)", "apply(rule card_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (A \\<inter> nP a)\\<rbrakk>\n       \\<Longrightarrow> finite (A \\<inter> nP b)\n 2. \\<And>A a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (A \\<inter> nP a)\\<rbrakk>\n       \\<Longrightarrow> A \\<inter> nP a \\<subseteq> A \\<inter> nP b", "apply(simp add: finite; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A a b.\n       \\<lbrakk>\\<forall>x\\<in>edges G.\n                   case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2;\n        (a, b) \\<in> edges G; finite (A \\<inter> nP a)\\<rbrakk>\n       \\<Longrightarrow> A \\<inter> nP a \\<subseteq> A \\<inter> nP b", "by blast"], ["proof (state)\nthis:\n  SINVAR_Tainting.sinvar G nP \\<Longrightarrow>\n  \\<forall>A. SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP)\n\ngoal (1 subgoal):\n 1. \\<forall>A.\n       SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>A.\n       SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "assume blp: \"\\<forall>A. SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP)\""], ["proof (state)\nthis:\n  \\<forall>A. SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP)\n\ngoal (1 subgoal):\n 1. \\<forall>A.\n       SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "{"], ["proof (state)\nthis:\n  \\<forall>A. SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP)\n\ngoal (1 subgoal):\n 1. \\<forall>A.\n       SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "fix v1 v2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>A.\n       SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "assume *: \"(v1,v2)\\<in>edges G\""], ["proof (state)\nthis:\n  (v1, v2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<forall>A.\n       SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "{"], ["proof (state)\nthis:\n  (v1, v2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. \\<forall>A.\n       SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "fix A"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>A.\n       SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "from blp *"], ["proof (chain)\npicking this:\n  \\<forall>A. SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP)\n  (v1, v2) \\<in> edges G", "have \"card (A \\<inter> nP v1) \\<le> card (A \\<inter> nP v2)\""], ["proof (prove)\nusing this:\n  \\<forall>A. SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP)\n  (v1, v2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. card (A \\<inter> nP v1) \\<le> card (A \\<inter> nP v2)", "unfolding extract_def"], ["proof (prove)\nusing this:\n  \\<forall>A.\n     SINVAR_BLPbasic.sinvar G\n      ((\\<lambda>ts. card (A \\<inter> ts)) \\<circ> nP)\n  (v1, v2) \\<in> edges G\n\ngoal (1 subgoal):\n 1. card (A \\<inter> nP v1) \\<le> card (A \\<inter> nP v2)", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>A.\n                \\<forall>x\\<in>edges G.\n                   case x of\n                   (e1, e2) \\<Rightarrow>\n                     card (A \\<inter> nP e1) \\<le> card (A \\<inter> nP e2);\n     (v1, v2) \\<in> edges G\\<rbrakk>\n    \\<Longrightarrow> card (A \\<inter> nP v1) \\<le> card (A \\<inter> nP v2)", "apply(erule_tac x=A in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(v1, v2) \\<in> edges G;\n     \\<forall>x\\<in>edges G.\n        case x of\n        (e1, e2) \\<Rightarrow>\n          card (A \\<inter> nP e1) \\<le> card (A \\<inter> nP e2)\\<rbrakk>\n    \\<Longrightarrow> card (A \\<inter> nP v1) \\<le> card (A \\<inter> nP v2)", "apply(erule_tac x=\"(v1, v2)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(v1, v2) \\<in> edges G;\n     case (v1, v2) of\n     (e1, e2) \\<Rightarrow>\n       card (A \\<inter> nP e1) \\<le> card (A \\<inter> nP e2)\\<rbrakk>\n    \\<Longrightarrow> card (A \\<inter> nP v1) \\<le> card (A \\<inter> nP v2)\n 2. \\<lbrakk>(v1, v2) \\<in> edges G; (v1, v2) \\<notin> edges G\\<rbrakk>\n    \\<Longrightarrow> card (A \\<inter> nP v1) \\<le> card (A \\<inter> nP v2)", "by(simp_all)"], ["proof (state)\nthis:\n  card (A \\<inter> nP v1) \\<le> card (A \\<inter> nP v2)\n\ngoal (1 subgoal):\n 1. \\<forall>A.\n       SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "}"], ["proof (state)\nthis:\n  card (?A2 \\<inter> nP v1) \\<le> card (?A2 \\<inter> nP v2)\n\ngoal (1 subgoal):\n 1. \\<forall>A.\n       SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "from this finite card_seteq"], ["proof (chain)\npicking this:\n  card (?A2 \\<inter> nP v1) \\<le> card (?A2 \\<inter> nP v2)\n  \\<forall>ts v. nP v = ts \\<longrightarrow> finite ts\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B; card ?B \\<le> card ?A\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B", "have \"nP v1 \\<subseteq> nP v2\""], ["proof (prove)\nusing this:\n  card (?A2 \\<inter> nP v1) \\<le> card (?A2 \\<inter> nP v2)\n  \\<forall>ts v. nP v = ts \\<longrightarrow> finite ts\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B; card ?B \\<le> card ?A\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n\ngoal (1 subgoal):\n 1. nP v1 \\<subseteq> nP v2", "by (metis Int_absorb Int_lower1 inf.orderI)"], ["proof (state)\nthis:\n  nP v1 \\<subseteq> nP v2\n\ngoal (1 subgoal):\n 1. \\<forall>A.\n       SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "}"], ["proof (state)\nthis:\n  (?v1.2, ?v2.2) \\<in> edges G \\<Longrightarrow>\n  nP ?v1.2 \\<subseteq> nP ?v2.2\n\ngoal (1 subgoal):\n 1. \\<forall>A.\n       SINVAR_BLPbasic.sinvar G (extract A \\<circ> nP) \\<Longrightarrow>\n    SINVAR_Tainting.sinvar G nP", "thus \"SINVAR_Tainting.sinvar G nP\""], ["proof (prove)\nusing this:\n  (?v1.2, ?v2.2) \\<in> edges G \\<Longrightarrow>\n  nP ?v1.2 \\<subseteq> nP ?v2.2\n\ngoal (1 subgoal):\n 1. SINVAR_Tainting.sinvar G nP", "unfolding SINVAR_Tainting.sinvar_def"], ["proof (prove)\nusing this:\n  (?v1.2, ?v2.2) \\<in> edges G \\<Longrightarrow>\n  nP ?v1.2 \\<subseteq> nP ?v2.2\n\ngoal (1 subgoal):\n 1. \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2", "by blast"], ["proof (state)\nthis:\n  SINVAR_Tainting.sinvar G nP\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n  Translated to the Bell LaPadula model with trust:\n  security level is the number of tainted minus the untainted things\n  We set the Trusted flag if a machine untaints things.\n\\<close>"], ["", "lemma \"\\<forall>ts v. nP v = ts \\<longrightarrow> finite (taints ts) \\<Longrightarrow>\n  SINVAR_TaintingTrusted.sinvar G nP \\<Longrightarrow>\n    SINVAR_BLPtrusted.sinvar G ((\\<lambda> ts. \\<lparr>security_level = card (taints ts - untaints ts), trusted = (untaints ts \\<noteq> {})\\<rparr> ) \\<circ> nP)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>ts v. nP v = ts \\<longrightarrow> finite (taints ts);\n     SINVAR_TaintingTrusted.sinvar G nP\\<rbrakk>\n    \\<Longrightarrow> SINVAR_BLPtrusted.sinvar G\n                       ((\\<lambda>ts.\n                            \\<lparr>security_level =\ncard (taints ts - untaints ts),\n                               trusted =\n                                 untaints ts \\<noteq> {}\\<rparr>) \\<circ>\n                        nP)", "apply(simp add: SINVAR_TaintingTrusted.sinvar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>ts.\n                (\\<exists>v. nP v = ts) \\<longrightarrow>\n                finite (taints ts);\n     \\<forall>x\\<in>edges G.\n        case x of\n        (v1, v2) \\<Rightarrow>\n          taints (nP v1) - untaints (nP v1)\n          \\<subseteq> taints (nP v2)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>edges G.\n                         case x of\n                         (e1, e2) \\<Rightarrow>\n                           untaints (nP e2) = {} \\<longrightarrow>\n                           card (taints (nP e1) - untaints (nP e1))\n                           \\<le> card (taints (nP e2))", "apply(clarify, rename_tac a b)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow>\n                   finite (taints ts);\n        \\<forall>(v1, v2)\\<in>edges G.\n           taints (nP v1) - untaints (nP v1) \\<subseteq> taints (nP v2);\n        (a, b) \\<in> edges G; untaints (nP b) = {}\\<rbrakk>\n       \\<Longrightarrow> card (taints (nP a) - untaints (nP a))\n                         \\<le> card (taints (nP b))", "apply(erule_tac x=\"(a,b)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow>\n                   finite (taints ts);\n        (a, b) \\<in> edges G; untaints (nP b) = {};\n        case (a, b) of\n        (v1, v2) \\<Rightarrow>\n          taints (nP v1) - untaints (nP v1)\n          \\<subseteq> taints (nP v2)\\<rbrakk>\n       \\<Longrightarrow> card (taints (nP a) - untaints (nP a))\n                         \\<le> card (taints (nP b))\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow>\n                   finite (taints ts);\n        (a, b) \\<in> edges G; untaints (nP b) = {};\n        (a, b) \\<notin> edges G\\<rbrakk>\n       \\<Longrightarrow> card (taints (nP a) - untaints (nP a))\n                         \\<le> card (taints (nP b))", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow>\n                   finite (taints ts);\n        (a, b) \\<in> edges G; untaints (nP b) = {};\n        taints (nP a) - untaints (nP a) \\<subseteq> taints (nP b)\\<rbrakk>\n       \\<Longrightarrow> card (taints (nP a) - untaints (nP a))\n                         \\<le> card (taints (nP b))", "apply(subgoal_tac \"finite (taints (nP a) - untaints (nP a))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow>\n                   finite (taints ts);\n        (a, b) \\<in> edges G; untaints (nP b) = {};\n        taints (nP a) - untaints (nP a) \\<subseteq> taints (nP b);\n        finite (taints (nP a) - untaints (nP a))\\<rbrakk>\n       \\<Longrightarrow> card (taints (nP a) - untaints (nP a))\n                         \\<le> card (taints (nP b))\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow>\n                   finite (taints ts);\n        (a, b) \\<in> edges G; untaints (nP b) = {};\n        taints (nP a) - untaints (nP a) \\<subseteq> taints (nP b)\\<rbrakk>\n       \\<Longrightarrow> finite (taints (nP a) - untaints (nP a))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow>\n                   finite (taints ts);\n        (a, b) \\<in> edges G; untaints (nP b) = {};\n        taints (nP a) - untaints (nP a) \\<subseteq> taints (nP b)\\<rbrakk>\n       \\<Longrightarrow> finite (taints (nP a) - untaints (nP a))\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow>\n                   finite (taints ts);\n        (a, b) \\<in> edges G; untaints (nP b) = {};\n        taints (nP a) - untaints (nP a) \\<subseteq> taints (nP b);\n        finite (taints (nP a) - untaints (nP a))\\<rbrakk>\n       \\<Longrightarrow> card (taints (nP a) - untaints (nP a))\n                         \\<le> card (taints (nP b))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>ts.\n                (\\<exists>v. nP v = ts) \\<longrightarrow>\n                finite (taints ts);\n     (a_, b_) \\<in> edges G; untaints (nP b_) = {};\n     taints (nP a_) - untaints (nP a_) \\<subseteq> taints (nP b_)\\<rbrakk>\n    \\<Longrightarrow> finite (taints (nP a_) - untaints (nP a_))", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow>\n                   finite (taints ts);\n        (a, b) \\<in> edges G; untaints (nP b) = {};\n        taints (nP a) - untaints (nP a) \\<subseteq> taints (nP b);\n        finite (taints (nP a) - untaints (nP a))\\<rbrakk>\n       \\<Longrightarrow> card (taints (nP a) - untaints (nP a))\n                         \\<le> card (taints (nP b))", "apply(rule card_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow>\n                   finite (taints ts);\n        (a, b) \\<in> edges G; untaints (nP b) = {};\n        taints (nP a) - untaints (nP a) \\<subseteq> taints (nP b);\n        finite (taints (nP a) - untaints (nP a))\\<rbrakk>\n       \\<Longrightarrow> finite (taints (nP b))\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>ts.\n                   (\\<exists>v. nP v = ts) \\<longrightarrow>\n                   finite (taints ts);\n        (a, b) \\<in> edges G; untaints (nP b) = {};\n        taints (nP a) - untaints (nP a) \\<subseteq> taints (nP b);\n        finite (taints (nP a) - untaints (nP a))\\<rbrakk>\n       \\<Longrightarrow> taints (nP a) - untaints (nP a)\n                         \\<subseteq> taints (nP b)", "by blast+"], ["", "lemma tainting_iff_blp_trusted:\n  defines \"project \\<equiv> \\<lambda>a ts. \\<lparr>\n      security_level =\n        if\n          a \\<in> (taints ts - untaints ts)\n        then\n          1::security_level\n        else\n          0::security_level\n      , trusted = a \\<in> untaints ts\\<rparr>\"\n  shows \"SINVAR_TaintingTrusted.sinvar G nP \\<longleftrightarrow> (\\<forall>a. SINVAR_BLPtrusted.sinvar G (project a \\<circ> nP))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SINVAR_TaintingTrusted.sinvar G nP =\n    (\\<forall>a. SINVAR_BLPtrusted.sinvar G (project a \\<circ> nP))", "unfolding project_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SINVAR_TaintingTrusted.sinvar G nP =\n    (\\<forall>a.\n        SINVAR_BLPtrusted.sinvar G\n         ((\\<lambda>ts.\n              \\<lparr>security_level =\n                        if a \\<in> taints ts - untaints ts then 1 else 0,\n                 trusted = a \\<in> untaints ts\\<rparr>) \\<circ>\n          nP))", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SINVAR_TaintingTrusted.sinvar G nP \\<Longrightarrow>\n    \\<forall>a.\n       SINVAR_BLPtrusted.sinvar G\n        ((\\<lambda>ts.\n             \\<lparr>security_level =\n                       if a \\<in> taints ts - untaints ts then 1 else 0,\n                trusted = a \\<in> untaints ts\\<rparr>) \\<circ>\n         nP)\n 2. \\<forall>a.\n       SINVAR_BLPtrusted.sinvar G\n        ((\\<lambda>ts.\n             \\<lparr>security_level =\n                       if a \\<in> taints ts - untaints ts then 1 else 0,\n                trusted = a \\<in> untaints ts\\<rparr>) \\<circ>\n         nP) \\<Longrightarrow>\n    SINVAR_TaintingTrusted.sinvar G nP", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. SINVAR_TaintingTrusted.sinvar G nP \\<Longrightarrow>\n    \\<forall>a.\n       SINVAR_BLPtrusted.sinvar G\n        ((\\<lambda>ts.\n             \\<lparr>security_level =\n                       if a \\<in> taints ts - untaints ts then 1 else 0,\n                trusted = a \\<in> untaints ts\\<rparr>) \\<circ>\n         nP)", "apply(simp add: SINVAR_TaintingTrusted.sinvar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>edges G.\n       case x of\n       (v1, v2) \\<Rightarrow>\n         taints (nP v1) - untaints (nP v1)\n         \\<subseteq> taints (nP v2) \\<Longrightarrow>\n    \\<forall>a.\n       \\<forall>x\\<in>edges G.\n          case x of\n          (e1, e2) \\<Rightarrow>\n            (a \\<in> taints (nP e2) \\<longrightarrow>\n             a \\<notin> untaints (nP e2) \\<longrightarrow>\n             (if a \\<in> taints (nP e1) \\<and> a \\<notin> untaints (nP e1)\n              then 1 else 0)\n             \\<le> Suc 0) \\<and>\n            (a \\<notin> taints (nP e2) \\<longrightarrow>\n             a \\<notin> untaints (nP e2) \\<longrightarrow>\n             (if a \\<in> taints (nP e1) \\<and> a \\<notin> untaints (nP e1)\n              then 1 else 0) =\n             0)", "apply(clarify, rename_tac a b)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa a b.\n       \\<lbrakk>\\<forall>(v1, v2)\\<in>edges G.\n                   taints (nP v1) - untaints (nP v1)\n                   \\<subseteq> taints (nP v2);\n        (a, b) \\<in> edges G\\<rbrakk>\n       \\<Longrightarrow> (aa \\<in> taints (nP b) \\<longrightarrow>\n                          aa \\<notin> untaints (nP b) \\<longrightarrow>\n                          (if aa \\<in> taints (nP a) \\<and>\n                              aa \\<notin> untaints (nP a)\n                           then 1 else 0)\n                          \\<le> Suc 0) \\<and>\n                         (aa \\<notin> taints (nP b) \\<longrightarrow>\n                          aa \\<notin> untaints (nP b) \\<longrightarrow>\n                          (if aa \\<in> taints (nP a) \\<and>\n                              aa \\<notin> untaints (nP a)\n                           then 1 else 0) =\n                          0)", "apply(erule_tac x=\"(a,b)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa a b.\n       \\<lbrakk>(a, b) \\<in> edges G;\n        case (a, b) of\n        (v1, v2) \\<Rightarrow>\n          taints (nP v1) - untaints (nP v1)\n          \\<subseteq> taints (nP v2)\\<rbrakk>\n       \\<Longrightarrow> (aa \\<in> taints (nP b) \\<longrightarrow>\n                          aa \\<notin> untaints (nP b) \\<longrightarrow>\n                          (if aa \\<in> taints (nP a) \\<and>\n                              aa \\<notin> untaints (nP a)\n                           then 1 else 0)\n                          \\<le> Suc 0) \\<and>\n                         (aa \\<notin> taints (nP b) \\<longrightarrow>\n                          aa \\<notin> untaints (nP b) \\<longrightarrow>\n                          (if aa \\<in> taints (nP a) \\<and>\n                              aa \\<notin> untaints (nP a)\n                           then 1 else 0) =\n                          0)\n 2. \\<And>aa a b.\n       \\<lbrakk>(a, b) \\<in> edges G; (a, b) \\<notin> edges G\\<rbrakk>\n       \\<Longrightarrow> (aa \\<in> taints (nP b) \\<longrightarrow>\n                          aa \\<notin> untaints (nP b) \\<longrightarrow>\n                          (if aa \\<in> taints (nP a) \\<and>\n                              aa \\<notin> untaints (nP a)\n                           then 1 else 0)\n                          \\<le> Suc 0) \\<and>\n                         (aa \\<notin> taints (nP b) \\<longrightarrow>\n                          aa \\<notin> untaints (nP b) \\<longrightarrow>\n                          (if aa \\<in> taints (nP a) \\<and>\n                              aa \\<notin> untaints (nP a)\n                           then 1 else 0) =\n                          0)", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa a b.\n       \\<lbrakk>(a, b) \\<in> edges G;\n        taints (nP a) - untaints (nP a) \\<subseteq> taints (nP b)\\<rbrakk>\n       \\<Longrightarrow> aa \\<in> taints (nP a) \\<and>\n                         aa \\<notin> untaints (nP a) \\<longrightarrow>\n                         aa \\<notin> taints (nP b) \\<longrightarrow>\n                         aa \\<in> untaints (nP b)", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       SINVAR_BLPtrusted.sinvar G\n        ((\\<lambda>ts.\n             \\<lparr>security_level =\n                       if a \\<in> taints ts - untaints ts then 1 else 0,\n                trusted = a \\<in> untaints ts\\<rparr>) \\<circ>\n         nP) \\<Longrightarrow>\n    SINVAR_TaintingTrusted.sinvar G nP", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       \\<forall>x\\<in>edges G.\n          case x of\n          (e1, e2) \\<Rightarrow>\n            if a \\<in> untaints (nP e2) then True\n            else security_level\n                  (((\\<lambda>ts.\n                        \\<lparr>security_level =\n                                  if a \\<in> taints ts \\<and>\n                                     a \\<notin> untaints ts\n                                  then 1 else 0,\n                           trusted = a \\<in> untaints ts\\<rparr>) \\<circ>\n                    nP)\n                    e1)\n                 \\<le> security_level\n                        (((\\<lambda>ts.\n                              \\<lparr>security_level =\n  if a \\<in> taints ts \\<and> a \\<notin> untaints ts then 1 else 0,\n                                 trusted =\n                                   a \\<in> untaints ts\\<rparr>) \\<circ>\n                          nP)\n                          e2) \\<Longrightarrow>\n    SINVAR_TaintingTrusted.sinvar G nP", "apply(simp add: SINVAR_TaintingTrusted.sinvar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       \\<forall>x\\<in>edges G.\n          case x of\n          (e1, e2) \\<Rightarrow>\n            if a \\<in> untaints (nP e2) then True\n            else security_level\n                  (((\\<lambda>ts.\n                        \\<lparr>security_level =\n                                  if a \\<in> taints ts \\<and>\n                                     a \\<notin> untaints ts\n                                  then 1 else 0,\n                           trusted = a \\<in> untaints ts\\<rparr>) \\<circ>\n                    nP)\n                    e1)\n                 \\<le> security_level\n                        (((\\<lambda>ts.\n                              \\<lparr>security_level =\n  if a \\<in> taints ts \\<and> a \\<notin> untaints ts then 1 else 0,\n                                 trusted =\n                                   a \\<in> untaints ts\\<rparr>) \\<circ>\n                          nP)\n                          e2) \\<Longrightarrow>\n    \\<forall>x\\<in>edges G.\n       case x of\n       (v1, v2) \\<Rightarrow>\n         taints (nP v1) - untaints (nP v1) \\<subseteq> taints (nP v2)", "apply(clarify, rename_tac a b taintlabel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b taintlabel.\n       \\<lbrakk>\\<forall>a.\n                   \\<forall>(e1, e2)\\<in>edges G.\n                      if a \\<in> untaints (nP e2) then True\n                      else security_level\n                            (((\\<lambda>ts.\n                                  \\<lparr>security_level =\n      if a \\<in> taints ts \\<and> a \\<notin> untaints ts then 1 else 0,\n                                     trusted =\n a \\<in> untaints ts\\<rparr>) \\<circ>\n                              nP)\n                              e1)\n                           \\<le> security_level\n                                  (((\\<lambda>ts.\n  \\<lparr>security_level =\n            if a \\<in> taints ts \\<and> a \\<notin> untaints ts then 1\n            else 0,\n     trusted = a \\<in> untaints ts\\<rparr>) \\<circ>\n                                    nP)\n                                    e2);\n        (a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a)\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)", "apply(erule_tac x=taintlabel in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        \\<forall>(e1, e2)\\<in>edges G.\n           if taintlabel \\<in> untaints (nP e2) then True\n           else security_level\n                 (((\\<lambda>ts.\n                       \\<lparr>security_level =\n                                 if taintlabel \\<in> taints ts \\<and>\n                                    taintlabel \\<notin> untaints ts\n                                 then 1 else 0,\n                          trusted =\n                            taintlabel \\<in> untaints ts\\<rparr>) \\<circ>\n                   nP)\n                   e1)\n                \\<le> security_level\n                       (((\\<lambda>ts.\n                             \\<lparr>security_level =\n if taintlabel \\<in> taints ts \\<and> taintlabel \\<notin> untaints ts then 1\n else 0,\n                                trusted =\n                                  taintlabel\n                                  \\<in> untaints ts\\<rparr>) \\<circ>\n                         nP)\n                         e2)\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)", "apply(erule_tac x=\"(a,b)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        case (a, b) of\n        (e1, e2) \\<Rightarrow>\n          if taintlabel \\<in> untaints (nP e2) then True\n          else security_level\n                (((\\<lambda>ts.\n                      \\<lparr>security_level =\n                                if taintlabel \\<in> taints ts \\<and>\n                                   taintlabel \\<notin> untaints ts\n                                then 1 else 0,\n                         trusted =\n                           taintlabel \\<in> untaints ts\\<rparr>) \\<circ>\n                  nP)\n                  e1)\n               \\<le> security_level\n                      (((\\<lambda>ts.\n                            \\<lparr>security_level =\nif taintlabel \\<in> taints ts \\<and> taintlabel \\<notin> untaints ts then 1\nelse 0,\n                               trusted =\n                                 taintlabel\n                                 \\<in> untaints ts\\<rparr>) \\<circ>\n                        nP)\n                        e2)\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)\n 2. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        (a, b) \\<notin> edges G\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        if taintlabel \\<in> untaints (nP b) then True\n        else security_level\n              (((\\<lambda>ts.\n                    \\<lparr>security_level =\n                              if taintlabel \\<in> taints ts \\<and>\n                                 taintlabel \\<notin> untaints ts\n                              then 1 else 0,\n                       trusted =\n                         taintlabel \\<in> untaints ts\\<rparr>) \\<circ>\n                nP)\n                a)\n             \\<le> security_level\n                    (((\\<lambda>ts.\n                          \\<lparr>security_level =\n                                    if taintlabel \\<in> taints ts \\<and>\n taintlabel \\<notin> untaints ts\n                                    then 1 else 0,\n                             trusted =\n                               taintlabel \\<in> untaints ts\\<rparr>) \\<circ>\n                      nP)\n                      b)\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)", "apply(simp split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        taintlabel \\<in> untaints (nP b)\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)", "using taints_wellformedness"], ["proof (prove)\nusing this:\n  untaints ?ts \\<subseteq> taints ?ts\n\ngoal (1 subgoal):\n 1. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        taintlabel \\<in> untaints (nP b)\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)", "by blast"], ["", "text\\<open>If the labels are finite, the above can be generalized to arbitrary subsets of tainting labels.\\<close>"], ["", "lemma tainting_iff_blp_trusted_extended:\n  defines \"project \\<equiv> \\<lambda>A ts.\n      \\<lparr>\n          security_level = card (A \\<inter> (taints ts - untaints ts))\n        , trusted = (A \\<inter> untaints ts) \\<noteq> {}\n      \\<rparr>\"\n  assumes finite: \"\\<forall>ts v. nP v = ts \\<longrightarrow> finite (taints ts)\"\n  shows \"SINVAR_TaintingTrusted.sinvar G nP \\<longleftrightarrow> (\\<forall>A. SINVAR_BLPtrusted.sinvar G (project A \\<circ> nP))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SINVAR_TaintingTrusted.sinvar G nP =\n    (\\<forall>A. SINVAR_BLPtrusted.sinvar G (project A \\<circ> nP))", "unfolding project_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SINVAR_TaintingTrusted.sinvar G nP =\n    (\\<forall>A.\n        SINVAR_BLPtrusted.sinvar G\n         ((\\<lambda>ts.\n              \\<lparr>security_level =\n                        card (A \\<inter> (taints ts - untaints ts)),\n                 trusted =\n                   A \\<inter> untaints ts \\<noteq> {}\\<rparr>) \\<circ>\n          nP))", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SINVAR_TaintingTrusted.sinvar G nP \\<Longrightarrow>\n    \\<forall>A.\n       SINVAR_BLPtrusted.sinvar G\n        ((\\<lambda>ts.\n             \\<lparr>security_level =\n                       card (A \\<inter> (taints ts - untaints ts)),\n                trusted =\n                  A \\<inter> untaints ts \\<noteq> {}\\<rparr>) \\<circ>\n         nP)\n 2. \\<forall>A.\n       SINVAR_BLPtrusted.sinvar G\n        ((\\<lambda>ts.\n             \\<lparr>security_level =\n                       card (A \\<inter> (taints ts - untaints ts)),\n                trusted =\n                  A \\<inter> untaints ts \\<noteq> {}\\<rparr>) \\<circ>\n         nP) \\<Longrightarrow>\n    SINVAR_TaintingTrusted.sinvar G nP", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. SINVAR_TaintingTrusted.sinvar G nP \\<Longrightarrow>\n    \\<forall>A.\n       SINVAR_BLPtrusted.sinvar G\n        ((\\<lambda>ts.\n             \\<lparr>security_level =\n                       card (A \\<inter> (taints ts - untaints ts)),\n                trusted =\n                  A \\<inter> untaints ts \\<noteq> {}\\<rparr>) \\<circ>\n         nP)", "apply(simp add: SINVAR_TaintingTrusted.sinvar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>edges G.\n       case x of\n       (v1, v2) \\<Rightarrow>\n         taints (nP v1) - untaints (nP v1)\n         \\<subseteq> taints (nP v2) \\<Longrightarrow>\n    \\<forall>A.\n       \\<forall>x\\<in>edges G.\n          case x of\n          (e1, e2) \\<Rightarrow>\n            A \\<inter> untaints (nP e2) = {} \\<longrightarrow>\n            card (A \\<inter> (taints (nP e1) - untaints (nP e1)))\n            \\<le> card (A \\<inter> (taints (nP e2) - untaints (nP e2)))", "apply(clarify, rename_tac a b)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A a b.\n       \\<lbrakk>\\<forall>(v1, v2)\\<in>edges G.\n                   taints (nP v1) - untaints (nP v1)\n                   \\<subseteq> taints (nP v2);\n        (a, b) \\<in> edges G; A \\<inter> untaints (nP b) = {}\\<rbrakk>\n       \\<Longrightarrow> card (A \\<inter> (taints (nP a) - untaints (nP a)))\n                         \\<le> card\n                                (A \\<inter>\n                                 (taints (nP b) - untaints (nP b)))", "apply(erule_tac x=\"(a,b)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A a b.\n       \\<lbrakk>(a, b) \\<in> edges G; A \\<inter> untaints (nP b) = {};\n        case (a, b) of\n        (v1, v2) \\<Rightarrow>\n          taints (nP v1) - untaints (nP v1)\n          \\<subseteq> taints (nP v2)\\<rbrakk>\n       \\<Longrightarrow> card (A \\<inter> (taints (nP a) - untaints (nP a)))\n                         \\<le> card\n                                (A \\<inter>\n                                 (taints (nP b) - untaints (nP b)))\n 2. \\<And>A a b.\n       \\<lbrakk>(a, b) \\<in> edges G; A \\<inter> untaints (nP b) = {};\n        (a, b) \\<notin> edges G\\<rbrakk>\n       \\<Longrightarrow> card (A \\<inter> (taints (nP a) - untaints (nP a)))\n                         \\<le> card\n                                (A \\<inter>\n                                 (taints (nP b) - untaints (nP b)))", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A a b.\n       \\<lbrakk>(a, b) \\<in> edges G; A \\<inter> untaints (nP b) = {};\n        taints (nP a) - untaints (nP a) \\<subseteq> taints (nP b)\\<rbrakk>\n       \\<Longrightarrow> card (A \\<inter> (taints (nP a) - untaints (nP a)))\n                         \\<le> card\n                                (A \\<inter>\n                                 (taints (nP b) - untaints (nP b)))", "apply(rule card_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A a b.\n       \\<lbrakk>(a, b) \\<in> edges G; A \\<inter> untaints (nP b) = {};\n        taints (nP a) - untaints (nP a) \\<subseteq> taints (nP b)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          (A \\<inter> (taints (nP b) - untaints (nP b)))\n 2. \\<And>A a b.\n       \\<lbrakk>(a, b) \\<in> edges G; A \\<inter> untaints (nP b) = {};\n        taints (nP a) - untaints (nP a) \\<subseteq> taints (nP b)\\<rbrakk>\n       \\<Longrightarrow> A \\<inter> (taints (nP a) - untaints (nP a))\n                         \\<subseteq> A \\<inter>\n                                     (taints (nP b) - untaints (nP b))", "using finite"], ["proof (prove)\nusing this:\n  \\<forall>ts v. nP v = ts \\<longrightarrow> finite (taints ts)\n\ngoal (2 subgoals):\n 1. \\<And>A a b.\n       \\<lbrakk>(a, b) \\<in> edges G; A \\<inter> untaints (nP b) = {};\n        taints (nP a) - untaints (nP a) \\<subseteq> taints (nP b)\\<rbrakk>\n       \\<Longrightarrow> finite\n                          (A \\<inter> (taints (nP b) - untaints (nP b)))\n 2. \\<And>A a b.\n       \\<lbrakk>(a, b) \\<in> edges G; A \\<inter> untaints (nP b) = {};\n        taints (nP a) - untaints (nP a) \\<subseteq> taints (nP b)\\<rbrakk>\n       \\<Longrightarrow> A \\<inter> (taints (nP a) - untaints (nP a))\n                         \\<subseteq> A \\<inter>\n                                     (taints (nP b) - untaints (nP b))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A a b.\n       \\<lbrakk>(a, b) \\<in> edges G; A \\<inter> untaints (nP b) = {};\n        taints (nP a) - untaints (nP a) \\<subseteq> taints (nP b)\\<rbrakk>\n       \\<Longrightarrow> A \\<inter> (taints (nP a) - untaints (nP a))\n                         \\<subseteq> A \\<inter>\n                                     (taints (nP b) - untaints (nP b))", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A.\n       SINVAR_BLPtrusted.sinvar G\n        ((\\<lambda>ts.\n             \\<lparr>security_level =\n                       card (A \\<inter> (taints ts - untaints ts)),\n                trusted =\n                  A \\<inter> untaints ts \\<noteq> {}\\<rparr>) \\<circ>\n         nP) \\<Longrightarrow>\n    SINVAR_TaintingTrusted.sinvar G nP", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A.\n       \\<forall>x\\<in>edges G.\n          case x of\n          (e1, e2) \\<Rightarrow>\n            if A \\<inter> untaints (nP e2) \\<noteq> {} then True\n            else security_level\n                  (((\\<lambda>ts.\n                        \\<lparr>security_level =\n                                  card\n                                   (A \\<inter> (taints ts - untaints ts)),\n                           trusted =\n                             A \\<inter> untaints ts \\<noteq>\n                             {}\\<rparr>) \\<circ>\n                    nP)\n                    e1)\n                 \\<le> security_level\n                        (((\\<lambda>ts.\n                              \\<lparr>security_level =\n  card (A \\<inter> (taints ts - untaints ts)),\n                                 trusted =\n                                   A \\<inter> untaints ts \\<noteq>\n                                   {}\\<rparr>) \\<circ>\n                          nP)\n                          e2) \\<Longrightarrow>\n    SINVAR_TaintingTrusted.sinvar G nP", "apply(simp add: SINVAR_TaintingTrusted.sinvar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A.\n       \\<forall>x\\<in>edges G.\n          case x of\n          (e1, e2) \\<Rightarrow>\n            if A \\<inter> untaints (nP e2) \\<noteq> {} then True\n            else security_level\n                  (((\\<lambda>ts.\n                        \\<lparr>security_level =\n                                  card\n                                   (A \\<inter> (taints ts - untaints ts)),\n                           trusted =\n                             A \\<inter> untaints ts \\<noteq>\n                             {}\\<rparr>) \\<circ>\n                    nP)\n                    e1)\n                 \\<le> security_level\n                        (((\\<lambda>ts.\n                              \\<lparr>security_level =\n  card (A \\<inter> (taints ts - untaints ts)),\n                                 trusted =\n                                   A \\<inter> untaints ts \\<noteq>\n                                   {}\\<rparr>) \\<circ>\n                          nP)\n                          e2) \\<Longrightarrow>\n    \\<forall>x\\<in>edges G.\n       case x of\n       (v1, v2) \\<Rightarrow>\n         taints (nP v1) - untaints (nP v1) \\<subseteq> taints (nP v2)", "apply(clarify, rename_tac a b taintlabel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b taintlabel.\n       \\<lbrakk>\\<forall>A.\n                   \\<forall>(e1, e2)\\<in>edges G.\n                      if A \\<inter> untaints (nP e2) \\<noteq> {} then True\n                      else security_level\n                            (((\\<lambda>ts.\n                                  \\<lparr>security_level =\n      card (A \\<inter> (taints ts - untaints ts)),\n                                     trusted =\n A \\<inter> untaints ts \\<noteq> {}\\<rparr>) \\<circ>\n                              nP)\n                              e1)\n                           \\<le> security_level\n                                  (((\\<lambda>ts.\n  \\<lparr>security_level = card (A \\<inter> (taints ts - untaints ts)),\n     trusted = A \\<inter> untaints ts \\<noteq> {}\\<rparr>) \\<circ>\n                                    nP)\n                                    e2);\n        (a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a)\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)", "apply(erule_tac x=\"{taintlabel}\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        \\<forall>(e1, e2)\\<in>edges G.\n           if {taintlabel} \\<inter> untaints (nP e2) \\<noteq> {} then True\n           else security_level\n                 (((\\<lambda>ts.\n                       \\<lparr>security_level =\n                                 card\n                                  ({taintlabel} \\<inter>\n                                   (taints ts - untaints ts)),\n                          trusted =\n                            {taintlabel} \\<inter> untaints ts \\<noteq>\n                            {}\\<rparr>) \\<circ>\n                   nP)\n                   e1)\n                \\<le> security_level\n                       (((\\<lambda>ts.\n                             \\<lparr>security_level =\n card ({taintlabel} \\<inter> (taints ts - untaints ts)),\n                                trusted =\n                                  {taintlabel} \\<inter> untaints ts \\<noteq>\n                                  {}\\<rparr>) \\<circ>\n                         nP)\n                         e2)\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)", "apply(erule_tac x=\"(a,b)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        case (a, b) of\n        (e1, e2) \\<Rightarrow>\n          if {taintlabel} \\<inter> untaints (nP e2) \\<noteq> {} then True\n          else security_level\n                (((\\<lambda>ts.\n                      \\<lparr>security_level =\n                                card\n                                 ({taintlabel} \\<inter>\n                                  (taints ts - untaints ts)),\n                         trusted =\n                           {taintlabel} \\<inter> untaints ts \\<noteq>\n                           {}\\<rparr>) \\<circ>\n                  nP)\n                  e1)\n               \\<le> security_level\n                      (((\\<lambda>ts.\n                            \\<lparr>security_level =\ncard ({taintlabel} \\<inter> (taints ts - untaints ts)),\n                               trusted =\n                                 {taintlabel} \\<inter> untaints ts \\<noteq>\n                                 {}\\<rparr>) \\<circ>\n                        nP)\n                        e2)\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)\n 2. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        (a, b) \\<notin> edges G\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        if taintlabel \\<in> untaints (nP b) then True\n        else security_level\n              (((\\<lambda>ts.\n                    \\<lparr>security_level =\n                              card\n                               ({taintlabel} \\<inter>\n                                (taints ts - untaints ts)),\n                       trusted =\n                         {taintlabel} \\<inter> untaints ts \\<noteq>\n                         {}\\<rparr>) \\<circ>\n                nP)\n                a)\n             \\<le> security_level\n                    (((\\<lambda>ts.\n                          \\<lparr>security_level =\n                                    card\n                                     ({taintlabel} \\<inter>\n(taints ts - untaints ts)),\n                             trusted =\n                               {taintlabel} \\<inter> untaints ts \\<noteq>\n                               {}\\<rparr>) \\<circ>\n                      nP)\n                      b)\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)", "apply(simp split: if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        taintlabel \\<in> untaints (nP b)\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)\n 2. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        taintlabel \\<notin> untaints (nP b);\n        Suc 0\n        \\<le> card\n               ({taintlabel} \\<inter>\n                (taints (nP b) - untaints (nP b)))\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)", "using taints_wellformedness"], ["proof (prove)\nusing this:\n  untaints ?ts \\<subseteq> taints ?ts\n\ngoal (2 subgoals):\n 1. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        taintlabel \\<in> untaints (nP b)\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)\n 2. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        taintlabel \\<notin> untaints (nP b);\n        Suc 0\n        \\<le> card\n               ({taintlabel} \\<inter>\n                (taints (nP b) - untaints (nP b)))\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        taintlabel \\<notin> untaints (nP b);\n        Suc 0\n        \\<le> card\n               ({taintlabel} \\<inter>\n                (taints (nP b) - untaints (nP b)))\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)", "using Diff_insert_absorb"], ["proof (prove)\nusing this:\n  ?x \\<notin> ?A \\<Longrightarrow> insert ?x ?A - {?x} = ?A\n\ngoal (1 subgoal):\n 1. \\<And>a b taintlabel.\n       \\<lbrakk>(a, b) \\<in> edges G; taintlabel \\<in> taints (nP a);\n        taintlabel \\<notin> untaints (nP a);\n        taintlabel \\<notin> untaints (nP b);\n        Suc 0\n        \\<le> card\n               ({taintlabel} \\<inter>\n                (taints (nP b) - untaints (nP b)))\\<rbrakk>\n       \\<Longrightarrow> taintlabel \\<in> taints (nP b)", "by fastforce"], ["", "end"]]}