{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/SINVAR_Examples.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma \"implc_offending_flows (new_configured_list_SecurityInvariant SINVAR_LIB_ACLcommunicateWith \\<lparr> \n          node_properties = [\n                  1::nat \\<mapsto> [1,2,3],\n                  2 \\<mapsto> [1,2,3,4],\n                  3 \\<mapsto> [1,2,3,4],\n                  4 \\<mapsto> [1,2,3,4]]\n          \\<rparr> ''usefull description here'') \\<lparr>nodesL = [1::nat,2,3,4], edgesL = [(1,2), (1,3), (2,3), (3, 4)] \\<rparr> =\n        [[(1, 2), (1, 3)], [(1, 3), (2, 3)], [(3, 4)]]\"", "lemma \"wf_list_graph G_dep\"", "lemma \"implc_offending_flows (new_configured_list_SecurityInvariant SINVAR_LIB_Dependability \\<lparr> \n                          node_properties = Some \\<circ> ((dependability_fix_nP G_dep (\\<lambda>_. 0))(3 := 2))\n                          \\<rparr> ''changed deps'')\n             (G_dep\\<lparr>edgesL := (3,4)#edgesL G_dep\\<rparr>) = \n           [[(3, 4)], [(1, 2), (2, 1), (5, 6)], [(1, 2), (4, 5)], [(2, 1), (4, 5)], [(2, 3), (4, 5)], [(2, 3), (5, 6)]]\"", "lemma \"wf_list_graph G_noninter\"", "lemma \"implc_offending_flows NonI_m G_noninter = [[(1, 2), (1, 3)], [(1, 3), (2, 3)], [(3, 4)]]\"", "lemma \"implc_offending_flows NonI_m \\<lparr>nodesL = [1::nat,2,3,4], edgesL = [(1,2), (1,3), (2,3), (4, 3)] \\<rparr> =\n    [[(1, 2), (1, 3)], [(1, 3), (2, 3)], [(4, 3)]]\"", "lemma \"implc_offending_flows (new_configured_list_SecurityInvariant SINVAR_LIB_ACLcommunicateWith \\<lparr> \n          node_properties = [\n                  1::nat \\<mapsto> [1,2,3],\n                  2 \\<mapsto> [1,2,3,4],\n                  3 \\<mapsto> [1,2,3,4],\n                  4 \\<mapsto> [1,2,3,4]]\n          \\<rparr> ''One must not access Four'') \\<lparr>nodesL = [1::nat,2,3,4], edgesL = [(1,2), (1,3), (2,3), (4, 3)] \\<rparr> = []\"", "lemma \"dom (subnets_host_attributes) \\<subseteq> set (subnet_hosts)\"", "lemma \"set (edgesL (make_policy [Subnets_m] subnet_hosts)) \\<subseteq> set (edgesL (make_policy SubnetsInGW_ACL_ms subnet_hosts))\"", "lemma \"[e <- edgesL (make_policy SubnetsInGW_ACL_ms subnet_hosts). e \\<notin> set (edgesL (make_policy [Subnets_m] subnet_hosts))] =\n   [(''v1b'', ''v11''), (''v1b'', ''v12''), (''v1b'', ''v13''), (''v2b'', ''v21''), (''v2b'', ''v22''), (''v2b'', ''v23'')]\"", "lemma \"dom (secgwext_host_attributes) \\<subseteq> set (secgwext_hosts)\""], "translations": [["", "lemma \"implc_offending_flows (new_configured_list_SecurityInvariant SINVAR_LIB_ACLcommunicateWith \\<lparr> \n          node_properties = [\n                  1::nat \\<mapsto> [1,2,3],\n                  2 \\<mapsto> [1,2,3,4],\n                  3 \\<mapsto> [1,2,3,4],\n                  4 \\<mapsto> [1,2,3,4]]\n          \\<rparr> ''usefull description here'') \\<lparr>nodesL = [1::nat,2,3,4], edgesL = [(1,2), (1,3), (2,3), (3, 4)] \\<rparr> =\n        [[(1, 2), (1, 3)], [(1, 3), (2, 3)], [(3, 4)]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implc_offending_flows\n     (new_configured_list_SecurityInvariant SINVAR_LIB_ACLcommunicateWith\n       \\<lparr>node_properties =\n                 [1 \\<mapsto> [1, 2, 3], 2 \\<mapsto> [1, 2, 3, 4], 3 \n                  \\<mapsto> [1, 2, 3, 4], 4 \\<mapsto> [1, 2, 3, 4]]\\<rparr>\n       ''usefull description here'')\n     \\<lparr>nodesL = [1, 2, 3, 4],\n        edgesL = [(1, 2), (1, 3), (2, 3), (3, 4)]\\<rparr> =\n    [[(1, 2), (1, 3)], [(1, 3), (2, 3)], [(3, 4)]]", "by eval"], ["", "context begin"], ["", "private"], ["", "definition G_dep :: \"nat list_graph\" where\n    \"G_dep \\<equiv> \\<lparr>nodesL = [1::nat,2,3,4,5,6,7], edgesL = [(1,2), (2,1), (2,3),\n                                                       (4,5), (5,6), (6,7)] \\<rparr>\""], ["", "private"], ["", "lemma \"wf_list_graph G_dep\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph G_dep", "by eval"], ["", "private"], ["", "definition \"DEP_m \\<equiv> new_configured_list_SecurityInvariant SINVAR_LIB_Dependability \\<lparr> \n          node_properties = Some \\<circ> dependability_fix_nP G_dep (\\<lambda>_. 0)\n          \\<rparr> ''automatically computed dependability invariant''\""], ["", "ML_val\\<open>\n  visualize_graph_header @{context} @{term \"[DEP_m]\"}\n    @{term \"G_dep\"}\n    @{term \"Some \\<circ> dependability_fix_nP G_dep (\\<lambda>_. 0)\"};\n\\<close>"], ["", "text\\<open>Connecting @{term \"(3,4)\"}. This causes only one offedning flow at @{term \"(3,4)\"}.\\<close>"], ["", "ML_val\\<open>\n  visualize_graph_header @{context} @{term \"[DEP_m]\"}\n    @{term \"G_dep\\<lparr>edgesL := (3,4)#edgesL G_dep\\<rparr>\"}\n    @{term \"Some \\<circ> dependability_fix_nP G_dep (\\<lambda>_. 0)\"};\n\\<close>"], ["", "text\\<open>We try to increase the dependability level at @{term 3}. Suddenly, offending flows everywhere.\\<close>"], ["", "ML_val\\<open>\n  visualize_graph_header @{context} @{term \"[new_configured_list_SecurityInvariant SINVAR_LIB_Dependability \\<lparr> \n          node_properties = Some \\<circ> ((dependability_fix_nP G_dep (\\<lambda>_. 0))(3 := 2))\n          \\<rparr> ''changed deps'']\"}\n    @{term \"G_dep\\<lparr>edgesL := (3,4)#edgesL G_dep\\<rparr>\"}\n    @{term \"Some \\<circ> ((dependability_fix_nP G_dep (\\<lambda>_. 0))(3 := 2))\"};\n\\<close>"], ["", "lemma \"implc_offending_flows (new_configured_list_SecurityInvariant SINVAR_LIB_Dependability \\<lparr> \n                          node_properties = Some \\<circ> ((dependability_fix_nP G_dep (\\<lambda>_. 0))(3 := 2))\n                          \\<rparr> ''changed deps'')\n             (G_dep\\<lparr>edgesL := (3,4)#edgesL G_dep\\<rparr>) = \n           [[(3, 4)], [(1, 2), (2, 1), (5, 6)], [(1, 2), (4, 5)], [(2, 1), (4, 5)], [(2, 3), (4, 5)], [(2, 3), (5, 6)]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implc_offending_flows\n     (new_configured_list_SecurityInvariant SINVAR_LIB_Dependability\n       \\<lparr>node_properties =\n                 (Some \\<circ>\\<circ>\\<circ>\n                  fun_upd\n                   (SINVAR_Dependability_impl.dependability_fix_nP G_dep\n                     (\\<lambda>_. 0)))\n                  3 2\\<rparr>\n       ''changed deps'')\n     (G_dep\\<lparr>edgesL := (3, 4) # edgesL G_dep\\<rparr>) =\n    [[(3, 4)], [(1, 2), (2, 1), (5, 6)], [(1, 2), (4, 5)], [(2, 1), (4, 5)],\n     [(2, 3), (4, 5)], [(2, 3), (5, 6)]]", "by eval"], ["", "text\\<open>If we recompute the dependability levels for the changed graph, we see that suddenly, \n        The level at @{term 1} and @{term 2} increased, though we only added the edge @{term \"(3,4)\"}.\n        This hints that we connected the graph. If an attacker can now compromise @{term 1}, she \n        may be able to peek much deeper into the network.\\<close>"], ["", "ML_val\\<open>\n  visualize_graph_header @{context} @{term \"[new_configured_list_SecurityInvariant SINVAR_LIB_Dependability \\<lparr> \n          node_properties = Some \\<circ> dependability_fix_nP (G_dep\\<lparr>edgesL := (3,4)#edgesL G_dep\\<rparr>) (\\<lambda>_. 0)\n          \\<rparr> ''changed deps'']\"}\n    @{term \"G_dep\\<lparr>edgesL := (3,4)#edgesL G_dep\\<rparr>\"}\n    @{term \"Some \\<circ> dependability_fix_nP (G_dep\\<lparr>edgesL := (3,4)#edgesL G_dep\\<rparr>) (\\<lambda>_. 0)\"};\n\\<close>"], ["", "text\\<open>Dependability is reflexive, a host can depend on itself.\\<close>"], ["", "ML_val\\<open>\n  visualize_graph_header @{context} @{term \"[new_configured_list_SecurityInvariant SINVAR_LIB_Dependability \\<lparr> \n          node_properties = Some \\<circ> dependability_fix_nP \\<lparr>nodesL = [1::nat], edgesL = [(1,1)] \\<rparr> (\\<lambda>_. 0)\n          \\<rparr> ''changed deps'']\"}\n    @{term \"\\<lparr>nodesL = [1::nat], edgesL = [(1,1)] \\<rparr>\"}\n    @{term \"Some \\<circ> dependability_fix_nP \\<lparr>nodesL = [1::nat], edgesL = [(1,1)] \\<rparr> (\\<lambda>_. 0)\"};\n\\<close>"], ["", "ML_val\\<open>\n  visualize_graph_header @{context} @{term \"[new_configured_list_SecurityInvariant SINVAR_LIB_Dependability_norefl \\<lparr> \n          node_properties = (\\<lambda>_::nat. Some 0)\n          \\<rparr> ''changed deps'']\"}\n    @{term \"\\<lparr>nodesL = [1::nat], edgesL = [(1,1)] \\<rparr>\"}\n    @{term \"(\\<lambda>_::nat. Some (0::nat))\"};\n\\<close>"], ["", "end"], ["", "context begin"], ["", "private"], ["", "definition G_noninter :: \"nat list_graph\" where\n    \"G_noninter \\<equiv> \\<lparr>nodesL = [1::nat,2,3,4], edgesL = [(1,2), (1,3), (2,3), (3, 4)] \\<rparr>\""], ["", "private"], ["", "lemma \"wf_list_graph G_noninter\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph G_noninter", "by eval"], ["", "private"], ["", "definition \"NonI_m \\<equiv> new_configured_list_SecurityInvariant SINVAR_LIB_NonInterference \\<lparr> \n          node_properties = [\n                  1::nat \\<mapsto> Interfering,\n                  2 \\<mapsto> Unrelated, \n                  3 \\<mapsto> Unrelated, \n                  4 \\<mapsto> Interfering]\n          \\<rparr> ''One and Four interfere''\""], ["", "ML_val\\<open>\n  visualize_graph @{context} @{term \"[ NonI_m ]\"} @{term \"G_noninter\"};\n\\<close>"], ["", "(*The same as the CommWith example*)"], ["", "lemma \"implc_offending_flows NonI_m G_noninter = [[(1, 2), (1, 3)], [(1, 3), (2, 3)], [(3, 4)]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implc_offending_flows NonI_m G_noninter =\n    [[(1, 2), (1, 3)], [(1, 3), (2, 3)], [(3, 4)]]", "by eval"], ["", "ML_val\\<open>\n  visualize_graph @{context} @{term \"[ NonI_m ]\"} @{term \"\\<lparr>nodesL = [1::nat,2,3,4], edgesL = [(1,2), (1,3), (2,3), (4, 3)] \\<rparr>\"};\n\\<close>"], ["", "lemma \"implc_offending_flows NonI_m \\<lparr>nodesL = [1::nat,2,3,4], edgesL = [(1,2), (1,3), (2,3), (4, 3)] \\<rparr> =\n    [[(1, 2), (1, 3)], [(1, 3), (2, 3)], [(4, 3)]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implc_offending_flows NonI_m\n     \\<lparr>nodesL = [1, 2, 3, 4],\n        edgesL = [(1, 2), (1, 3), (2, 3), (4, 3)]\\<rparr> =\n    [[(1, 2), (1, 3)], [(1, 3), (2, 3)], [(4, 3)]]", "by eval"], ["", "text\\<open>In comparison, @{const SINVAR_LIB_ACLcommunicateWith} is less strict. \n        Changing the direction of the edge @{term \"(3,4)\"} removes the access from @{term 1} to @{term 4}\n        and the invariant holds.\\<close>"], ["", "lemma \"implc_offending_flows (new_configured_list_SecurityInvariant SINVAR_LIB_ACLcommunicateWith \\<lparr> \n          node_properties = [\n                  1::nat \\<mapsto> [1,2,3],\n                  2 \\<mapsto> [1,2,3,4],\n                  3 \\<mapsto> [1,2,3,4],\n                  4 \\<mapsto> [1,2,3,4]]\n          \\<rparr> ''One must not access Four'') \\<lparr>nodesL = [1::nat,2,3,4], edgesL = [(1,2), (1,3), (2,3), (4, 3)] \\<rparr> = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implc_offending_flows\n     (new_configured_list_SecurityInvariant SINVAR_LIB_ACLcommunicateWith\n       \\<lparr>node_properties =\n                 [1 \\<mapsto> [1, 2, 3], 2 \\<mapsto> [1, 2, 3, 4], 3 \n                  \\<mapsto> [1, 2, 3, 4], 4 \\<mapsto> [1, 2, 3, 4]]\\<rparr>\n       ''One must not access Four'')\n     \\<lparr>nodesL = [1, 2, 3, 4],\n        edgesL = [(1, 2), (1, 3), (2, 3), (4, 3)]\\<rparr> =\n    []", "by eval"], ["", "end"], ["", "context begin"], ["", "private"], ["", "definition \"subnets_host_attributes \\<equiv> [\n                             ''v11'' \\<mapsto> Subnet 1,\n                             ''v12'' \\<mapsto> Subnet 1,\n                             ''v13'' \\<mapsto> Subnet 1,\n                             ''v1b'' \\<mapsto> BorderRouter 1,\n                             ''v21'' \\<mapsto> Subnet 2,\n                             ''v22'' \\<mapsto> Subnet 2,\n                             ''v23'' \\<mapsto> Subnet 2,\n                             ''v2b'' \\<mapsto> BorderRouter 2,\n                             ''v3b'' \\<mapsto> BorderRouter 3\n                             ]\""], ["", "private"], ["", "definition \"Subnets_m \\<equiv> new_configured_list_SecurityInvariant SINVAR_LIB_Subnets \\<lparr> \n          node_properties = subnets_host_attributes\n          \\<rparr> ''Collaborating hosts''\""], ["", "private"], ["", "definition \"subnet_hosts \\<equiv> [''v11'', ''v12'', ''v13'', ''v1b'',\n                                      ''v21'', ''v22'', ''v23'', ''v2b'',\n                                      ''v3b'', ''vo'']\""], ["", "private"], ["", "lemma \"dom (subnets_host_attributes) \\<subseteq> set (subnet_hosts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom subnets_host_attributes \\<subseteq> set subnet_hosts", "by(simp add: subnet_hosts_def subnets_host_attributes_def)"], ["", "value[code] \"make_policy [Subnets_m] subnet_hosts\""], ["", "ML_val\\<open>\n  visualize_graph_header @{context} @{term \"[Subnets_m]\"}\n    @{term \"make_policy [Subnets_m] subnet_hosts\"}\n    @{term \"subnets_host_attributes\"};\n\\<close>"], ["", "text\\<open>Emulating the same but with accessible members with SubnetsInGW and ACLs\\<close>"], ["", "private"], ["", "definition \"SubnetsInGW_ACL_ms \\<equiv> [new_configured_list_SecurityInvariant SINVAR_LIB_SubnetsInGW \\<lparr> \n          node_properties = [''v11'' \\<mapsto> Member, ''v12'' \\<mapsto> Member, ''v13'' \\<mapsto> Member, ''v1b'' \\<mapsto> InboundGateway]\n          \\<rparr> ''v1 subnet'',\n          new_configured_list_SecurityInvariant SINVAR_LIB_CommunicationPartners \\<lparr> \n          node_properties = [''v1b'' \\<mapsto> Master [''v11'', ''v12'', ''v13'', ''v2b'', ''v3b''],\n                             ''v11'' \\<mapsto> Care,\n                             ''v12'' \\<mapsto> Care,\n                             ''v13'' \\<mapsto> Care,\n                             ''v2b'' \\<mapsto> Care,\n                             ''v3b'' \\<mapsto> Care\n                             ]\n          \\<rparr> ''v1b ACL'',\n          new_configured_list_SecurityInvariant SINVAR_LIB_SubnetsInGW \\<lparr> \n          node_properties = [''v21'' \\<mapsto> Member, ''v22'' \\<mapsto> Member, ''v23'' \\<mapsto> Member, ''v2b'' \\<mapsto> InboundGateway]\n          \\<rparr> ''v2 subnet'',\n          new_configured_list_SecurityInvariant SINVAR_LIB_CommunicationPartners \\<lparr> \n          node_properties = [''v2b'' \\<mapsto> Master [''v21'', ''v22'', ''v23'', ''v1b'', ''v3b''],\n                             ''v21'' \\<mapsto> Care,\n                             ''v22'' \\<mapsto> Care,\n                             ''v23'' \\<mapsto> Care,\n                             ''v1b'' \\<mapsto> Care,\n                             ''v3b'' \\<mapsto> Care\n                             ]\n          \\<rparr> ''v2b ACL'',\n          \\<^cancel>\\<open>new_configured_list_SecurityInvariant SINVAR_LIB_SubnetsInGW \\<lparr> \n          node_properties = [''v3b'' \\<mapsto> InboundGateway]\n          \\<rparr> ''v3b'',\\<close>\n          new_configured_list_SecurityInvariant SINVAR_LIB_CommunicationPartners \\<lparr> \n          node_properties = [''v3b'' \\<mapsto> Master [''v1b'', ''v2b''],\n                             ''v1b'' \\<mapsto> Care,\n                             ''v2b'' \\<mapsto> Care\n                             ]\n          \\<rparr> ''v3b ACL'']\""], ["", "value[code] \"make_policy SubnetsInGW_ACL_ms subnet_hosts\""], ["", "lemma \"set (edgesL (make_policy [Subnets_m] subnet_hosts)) \\<subseteq> set (edgesL (make_policy SubnetsInGW_ACL_ms subnet_hosts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (edgesL (make_policy [Subnets_m] subnet_hosts))\n    \\<subseteq> set (edgesL (make_policy SubnetsInGW_ACL_ms subnet_hosts))", "by eval"], ["", "lemma \"[e <- edgesL (make_policy SubnetsInGW_ACL_ms subnet_hosts). e \\<notin> set (edgesL (make_policy [Subnets_m] subnet_hosts))] =\n   [(''v1b'', ''v11''), (''v1b'', ''v12''), (''v1b'', ''v13''), (''v2b'', ''v21''), (''v2b'', ''v22''), (''v2b'', ''v23'')]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter\n     (\\<lambda>e.\n         e \\<notin> set (edgesL (make_policy [Subnets_m] subnet_hosts)))\n     (edgesL (make_policy SubnetsInGW_ACL_ms subnet_hosts)) =\n    [(''v1b'', ''v11''), (''v1b'', ''v12''), (''v1b'', ''v13''),\n     (''v2b'', ''v21''), (''v2b'', ''v22''), (''v2b'', ''v23'')]", "by eval"], ["", "ML_val\\<open>\n  visualize_graph @{context} @{term \"SubnetsInGW_ACL_ms\"}\n    @{term \"make_policy SubnetsInGW_ACL_ms subnet_hosts\"};\n\\<close>"], ["", "end"], ["", "context begin"], ["", "private"], ["", "definition \"secgwext_host_attributes \\<equiv> [\n                             ''hypervisor'' \\<mapsto> PolEnforcePoint,\n                             ''securevm1'' \\<mapsto> DomainMember,\n                             ''securevm2'' \\<mapsto> DomainMember,\n                             ''publicvm1'' \\<mapsto> AccessibleMember,\n                             ''publicvm2'' \\<mapsto> AccessibleMember\n                             ]\""], ["", "private"], ["", "definition \"SecGwExt_m \\<equiv> new_configured_list_SecurityInvariant SINVAR_LIB_PolEnforcePointExtended \\<lparr> \n          node_properties = secgwext_host_attributes\n          \\<rparr> ''secure hypervisor mediates accesses between secure VMs''\""], ["", "private"], ["", "definition \"secgwext_hosts \\<equiv> [''hypervisor'', ''securevm1'', ''securevm2'',\n                                      ''publicvm1'', ''publicvm2'',\n                                      ''INET'']\""], ["", "private"], ["", "lemma \"dom (secgwext_host_attributes) \\<subseteq> set (secgwext_hosts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom secgwext_host_attributes \\<subseteq> set secgwext_hosts", "by(simp add: secgwext_hosts_def secgwext_host_attributes_def)"], ["", "value[code] \"make_policy [SecGwExt_m] secgwext_hosts\""], ["", "ML_val\\<open>\n  visualize_graph_header @{context} @{term \"[SecGwExt_m]\"}\n    @{term \"make_policy [SecGwExt_m] secgwext_hosts\"}\n    @{term \"secgwext_host_attributes\"};\n\\<close>"], ["", "ML_val\\<open>\n  visualize_graph_header @{context} @{term \"[SecGwExt_m, new_configured_list_SecurityInvariant SINVAR_LIB_BLPtrusted \\<lparr> \n        node_properties = [''hypervisor'' \\<mapsto> \\<lparr> security_level = 0, trusted = True \\<rparr>,\n                           ''securevm1'' \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n                           ''securevm2'' \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>\n                           ] \\<rparr> ''secure vms are confidential'']\"}\n    @{term \"make_policy [SecGwExt_m, new_configured_list_SecurityInvariant SINVAR_LIB_BLPtrusted \\<lparr> \n        node_properties = [''hypervisor'' \\<mapsto> \\<lparr> security_level = 0, trusted = True \\<rparr>,\n                           ''securevm1'' \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n                           ''securevm2'' \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>\n                           ] \\<rparr> ''secure vms are confidential''] secgwext_hosts\"}\n    @{term \"secgwext_host_attributes\"};\n\\<close>"], ["", "end"], ["", "end"]]}