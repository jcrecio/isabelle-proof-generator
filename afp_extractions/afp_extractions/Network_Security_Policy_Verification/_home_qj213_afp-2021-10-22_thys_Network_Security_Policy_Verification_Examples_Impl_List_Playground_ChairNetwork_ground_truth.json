{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Examples/Impl_List_Playground_ChairNetwork.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma \"wf_list_graph ChairNetwork_empty\"", "lemma \"implc_sinvar ConfidentialChairData ChairNetwork_empty\"", "lemma \"implc_sinvar PrintingACL ChairNetwork_empty\"", "lemma \"implc_sinvar PrintingSink ChairNetwork_empty\"", "lemma \"implc_sinvar StudentSubnet ChairNetwork_empty\"", "lemma \"implc_sinvar FilesSrvACL ChairNetwork_empty\"", "lemma \"all_security_requirements_fulfilled ChairSecurityRequirements ChairNetwork\""], "translations": [["", "lemma \"wf_list_graph ChairNetwork_empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph ChairNetwork_empty", "by eval"], ["", "subsection\\<open>Our security requirements\\<close>"], ["", "subsubsection\\<open>We have a server with confidential data\\<close>"], ["", "definition ConfidentialChairData::\"(string SecurityInvariant)\" where\n      \"ConfidentialChairData \\<equiv> new_configured_list_SecurityInvariant SINVAR_BLPtrusted_impl.SINVAR_LIB_BLPtrusted \\<lparr> \n          node_properties = [''FilesSrv'' \\<mapsto> \\<lparr> security_level = 1, trusted = False \\<rparr>,\n                             ''Employees'' \\<mapsto> \\<lparr> security_level = 0, trusted = True \\<rparr>,\n                             ''EReachable'' \\<mapsto> \\<lparr> security_level = 0, trusted = True \\<rparr>]\n          \\<rparr> ''confidential data''\""], ["", "(*\n  subsubsection{*We have a hierarchical printing policy*}\n    definition \"PrintingHierarchy_nodes=[''Employees''\\<mapsto> DN (''ColorPrinting''--Leaf, 0),\n                           ''PrinterColor''\\<mapsto> DN (''ColorPrinting''--''Printer''--Leaf, 0),\n                           ''Students''\\<mapsto> DN (''ColorPrinting''--''BwPrinting''--Leaf, 0),\n                           ''PrinterBW''\\<mapsto> DN (''ColorPrinting''--''BwPrinting''--''Printer''--Leaf, 0)]\"\n    definition \"PrintingHierarchy_tree=Department ''ColorPrinting'' [\n              Department ''Printer'' [], \n              Department ''BwPrinting'' [\n                  Department ''Printer'' []]]\"\n    definition PrintingHierarchy::\"string SecurityInvariant\" where\n      \"PrintingHierarchy \\<equiv> new_configured_list_SecurityInvariant SINVAR_DomainHierarchyNG_impl.SINVAR_LIB_DomainHierarchyNG \\<lparr> \n        node_properties = PrintingHierarchy_nodes\n        \\<rparr>\"  *)"], ["", "subsubsection\\<open>The color printer is only accessibly by employees, The black.white printer by employees and students\\<close>"], ["", "definition \"PrintingACL \\<equiv> new_configured_list_SecurityInvariant SINVAR_LIB_CommunicationPartners \\<lparr> \n          node_properties = [''PrinterColor'' \\<mapsto> Master [''Employees'', ''EReachable''],\n                             ''PrinterBW'' \\<mapsto> Master [''Employees'', ''EReachable'', ''Students''],\n                             ''Employees'' \\<mapsto> Care,\n                             ''EReachable'' \\<mapsto> Care,\n                             ''Students'' \\<mapsto> Care]\n          \\<rparr> ''printing ACL''\""], ["", "subsubsection\\<open>Printers are information sinks\\<close>"], ["", "definition \"PrintingSink \\<equiv> new_configured_list_SecurityInvariant SINVAR_LIB_Sink \\<lparr> \n          node_properties = [''PrinterColor'' \\<mapsto> Sink,\n                             ''PrinterBW'' \\<mapsto> Sink]\n          \\<rparr> ''printing sink''\""], ["", "subsubsection\\<open>Students may access each other but are not accessible from the outside\\<close>"], ["", "definition \"StudentSubnet \\<equiv> new_configured_list_SecurityInvariant SINVAR_LIB_SubnetsInGW \\<lparr> \n          node_properties = [''Students'' \\<mapsto> Member, ''Employees'' \\<mapsto> Member, ''EReachable'' \\<mapsto> InboundGateway]\n          \\<rparr> ''student subnet''\""], ["", "subsubsection\\<open>The files server is only accessibly by employees\\<close>"], ["", "definition \"FilesSrvACL \\<equiv> new_configured_list_SecurityInvariant SINVAR_LIB_CommunicationPartners \\<lparr> \n          node_properties = [''FilesSrv'' \\<mapsto> Master [''Employees'', ''EReachable''],\n                             ''Employees'' \\<mapsto> Care,\n                             ''EReachable'' \\<mapsto> Care]\n          \\<rparr> ''file srv acl''\""], ["", "subsubsection\\<open>emplyees are reachable from the Internet\\<close>"], ["", "(*nothing to do here*)"], ["", "lemma \"implc_sinvar ConfidentialChairData ChairNetwork_empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implc_sinvar ConfidentialChairData ChairNetwork_empty", "by eval"], ["", "lemma \"implc_sinvar PrintingACL ChairNetwork_empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implc_sinvar PrintingACL ChairNetwork_empty", "by eval"], ["", "lemma \"implc_sinvar PrintingSink ChairNetwork_empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implc_sinvar PrintingSink ChairNetwork_empty", "by eval"], ["", "lemma \"implc_sinvar StudentSubnet ChairNetwork_empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implc_sinvar StudentSubnet ChairNetwork_empty", "by eval"], ["", "lemma \"implc_sinvar FilesSrvACL ChairNetwork_empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implc_sinvar FilesSrvACL ChairNetwork_empty", "by eval"], ["", "definition \"ChairSecurityRequirements = [ConfidentialChairData, PrintingACL, PrintingSink, StudentSubnet, FilesSrvACL]\""], ["", "value \"implc_get_offending_flows ChairSecurityRequirements ChairNetwork_empty\""], ["", "value \"generate_valid_topology ChairSecurityRequirements ChairNetwork_empty\""], ["", "value \"List.product (nodesL ChairNetwork_empty) (nodesL ChairNetwork_empty)\""], ["", "definition \"ChairNetwork = generate_valid_topology ChairSecurityRequirements \n      \\<lparr>nodesL = nodesL ChairNetwork_empty, edgesL = List.product (nodesL ChairNetwork_empty) (nodesL ChairNetwork_empty) \\<rparr>\""], ["", "lemma \"all_security_requirements_fulfilled ChairSecurityRequirements ChairNetwork\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n     ChairSecurityRequirements ChairNetwork", "by eval"], ["", "value \"ChairNetwork\""], ["", "ML_val\\<open>\nvisualize_graph @{context} @{term \"ChairSecurityRequirements\"} @{term \"ChairNetwork\"};\n\\<close>"], ["", "end"]]}