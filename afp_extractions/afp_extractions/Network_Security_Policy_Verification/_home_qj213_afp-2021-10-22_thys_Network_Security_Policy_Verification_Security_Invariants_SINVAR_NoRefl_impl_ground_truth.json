{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_NoRefl_impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_NoRefl.default_node_properties P = NetModel_node_props P\"", "lemma \"wf_list_graph example_net\"", "lemma \"sinvar example_net example_conf\"", "lemma \"NoRefl_offending_list example_net (\\<lambda>e. SINVAR_NoRefl.default_node_properties) = [[(2, 2)]]\""], "translations": [["", "lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_NoRefl.default_node_properties P = NetModel_node_props P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NoRefl.node_props P = NetModel_node_props P", "apply(simp add: NetModel_node_props_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"NoRefl_eval G P = (wf_list_graph G \\<and>\n  sinvar G (SecurityInvariant.node_props SINVAR_NoRefl.default_node_properties P))\""], ["", "interpretation NoRefl_impl:TopoS_List_Impl \n  where default_node_properties=SINVAR_NoRefl.default_node_properties\n  and sinvar_spec=SINVAR_NoRefl.sinvar\n  and sinvar_impl=sinvar\n  and receiver_violation=SINVAR_NoRefl.receiver_violation\n  and offending_flows_impl=NoRefl_offending_list\n  and node_props_impl=NetModel_node_props\n  and eval_impl=NoRefl_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_NoRefl.default_node_properties\n     SINVAR_NoRefl.sinvar sinvar SINVAR_NoRefl.receiver_violation\n     NoRefl_offending_list NetModel_node_props NoRefl_eval", "apply(unfold TopoS_List_Impl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SecurityInvariant SINVAR_NoRefl.sinvar\n      SINVAR_NoRefl.default_node_properties\n      SINVAR_NoRefl.receiver_violation \\<and>\n     (\\<forall>G nP.\n         wf_list_graph G \\<longrightarrow>\n         SINVAR_NoRefl.sinvar (list_graph_to_graph G) nP =\n         sinvar G nP)) \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (NoRefl_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        NoRefl.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and> NoRefl.eval (list_graph_to_graph G) P) =\n        NoRefl_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SecurityInvariant SINVAR_NoRefl.sinvar\n     SINVAR_NoRefl.default_node_properties\n     SINVAR_NoRefl.receiver_violation \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SINVAR_NoRefl.sinvar (list_graph_to_graph G) nP = sinvar G nP)\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (NoRefl_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        NoRefl.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and> NoRefl.eval (list_graph_to_graph G) P) =\n        NoRefl_eval G P)", "apply(simp add: TopoS_NoRefl list_graph_to_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (NoRefl_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        NoRefl.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and> NoRefl.eval (list_graph_to_graph G) P) =\n        NoRefl_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (NoRefl_offending_list G nP)\n 2. (\\<forall>P.\n        NoRefl.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and> NoRefl.eval (list_graph_to_graph G) P) =\n        NoRefl_eval G P)", "apply(simp add: list_graph_to_graph_def NoRefl_offending_set NoRefl_offending_set_def NoRefl_offending_list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P.\n        NoRefl.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and> NoRefl.eval (list_graph_to_graph G) P) =\n        NoRefl_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P. NoRefl.node_props_formaldef P = NetModel_node_props P\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and> NoRefl.eval (list_graph_to_graph G) P) =\n       NoRefl_eval G P", "apply(simp only: NetModel_node_props_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       NoRefl.node_props_formaldef P =\n       (\\<lambda>i.\n           case node_properties P i of\n           None \\<Rightarrow> SINVAR_NoRefl.default_node_properties\n           | Some property \\<Rightarrow> property)\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and> NoRefl.eval (list_graph_to_graph G) P) =\n       NoRefl_eval G P", "apply(metis NoRefl.node_props.simps NoRefl.node_props_eq_node_props_formaldef)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and> NoRefl.eval (list_graph_to_graph G) P) =\n       NoRefl_eval G P", "apply(simp only: NoRefl_eval_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and> NoRefl.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and> sinvar G (NoRefl.node_props P))", "apply(simp add: TopoS_eval_impl_proofrule[OF TopoS_NoRefl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (wf_list_graph G \\<and>\n        (\\<forall>x\\<in>edges (list_graph_to_graph G).\n            case x of\n            (s, r) \\<Rightarrow>\n              s = r \\<longrightarrow>\n              (case node_properties P r of\n               None \\<Rightarrow> SINVAR_NoRefl.default_node_properties\n               | Some property \\<Rightarrow> property) =\n              node_config.Refl)) =\n       (wf_list_graph G \\<and>\n        (\\<forall>x\\<in>set (edgesL G).\n            case x of\n            (s, r) \\<Rightarrow>\n              s = r \\<longrightarrow>\n              (case node_properties P r of\n               None \\<Rightarrow> SINVAR_NoRefl.default_node_properties\n               | Some property \\<Rightarrow> property) =\n              node_config.Refl))", "apply(simp add: list_graph_to_graph_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>PolEnforcePoint packing\\<close>"], ["", "definition SINVAR_LIB_NoRefl :: \"('v::vertex, node_config) TopoS_packed\" where\n    \"SINVAR_LIB_NoRefl \\<equiv> \n    \\<lparr> nm_name = ''NoRefl'', \n      nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n      nm_default = SINVAR_NoRefl.default_node_properties, \n      nm_sinvar = sinvar,\n      nm_offending_flows = NoRefl_offending_list, \n      nm_node_props = NetModel_node_props,\n      nm_eval = NoRefl_eval\n      \\<rparr>\""], ["", "interpretation SINVAR_LIB_NoRefl_interpretation: TopoS_modelLibrary SINVAR_LIB_NoRefl\n      SINVAR_NoRefl.sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_modelLibrary SINVAR_LIB_NoRefl SINVAR_NoRefl.sinvar", "apply(unfold TopoS_modelLibrary_def SINVAR_LIB_NoRefl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''NoRefl'',\n              nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n              nm_default = SINVAR_NoRefl.default_node_properties,\n              nm_sinvar = sinvar,\n              nm_offending_flows = NoRefl_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = NoRefl_eval\\<rparr>) \\<and>\n    TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)\n     SINVAR_NoRefl.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''NoRefl'',\n              nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n              nm_default = SINVAR_NoRefl.default_node_properties,\n              nm_sinvar = sinvar,\n              nm_offending_flows = NoRefl_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = NoRefl_eval\\<rparr>)\n 2. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)\n     SINVAR_NoRefl.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)\n     SINVAR_NoRefl.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''NoRefl'',\n          nm_receiver_violation = SINVAR_NoRefl.receiver_violation,\n          nm_default = SINVAR_NoRefl.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = NoRefl_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NoRefl_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_NoRefl.default_node_properties\n     SINVAR_NoRefl.sinvar sinvar SINVAR_NoRefl.receiver_violation\n     NoRefl_offending_list NetModel_node_props NoRefl_eval", "by(unfold_locales)"], ["", "text \\<open>Examples\\<close>"], ["", "definition example_net :: \"nat list_graph\" where\n  \"example_net \\<equiv> \\<lparr> nodesL = [1::nat,2,3], \n    edgesL = [(1,2),(2,2),(2,1),(1,3)] \\<rparr>\""], ["", "lemma \"wf_list_graph example_net\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph example_net", "by eval"], ["", "definition example_conf where\n  \"example_conf \\<equiv> ((\\<lambda>e. SINVAR_NoRefl.default_node_properties)(2:= Refl))\""], ["", "lemma \"sinvar example_net example_conf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar example_net example_conf", "by eval"], ["", "lemma \"NoRefl_offending_list example_net (\\<lambda>e. SINVAR_NoRefl.default_node_properties) = [[(2, 2)]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NoRefl_offending_list example_net\n     (\\<lambda>e. SINVAR_NoRefl.default_node_properties) =\n    [[(2, 2)]]", "by eval"], ["", "hide_const (open) NetModel_node_props"], ["", "hide_const (open) sinvar"], ["", "end"]]}