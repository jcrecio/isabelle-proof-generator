{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/TopoS_Helper.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma (in SecurityInvariant_preliminaries) sinvar_valid_remove_flattened_offending_flows:\n  assumes \"wf_graph \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\" (*TODO: we could get rid of this assumption*)\n  shows \"sinvar \\<lparr>nodes = nodesG, edges = edgesG - \\<Union> (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP) \\<rparr> nP\"", "lemma (in SecurityInvariant_preliminaries) sinvar_valid_remove_SOME_offending_flows:\n  assumes \"set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP \\<noteq> {}\"\n  shows \"sinvar \\<lparr>nodes = nodesG, edges = edgesG - (SOME F. F \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP) \\<rparr> nP\"", "lemma (in SecurityInvariant_preliminaries) sinvar_valid_remove_minimalize_offending_overapprox:\n  assumes \"wf_graph \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\"\n      and \"\\<not> sinvar \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP\" (*\"set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP \\<noteq> {}\"*)\n      and \"set Es = edgesG\" and \"distinct Es\"\n  shows \"sinvar \\<lparr>nodes = nodesG, edges = edgesG -\n              set (minimalize_offending_overapprox Es [] \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP) \\<rparr> nP\""], "translations": [["", "lemma (in SecurityInvariant_preliminaries) sinvar_valid_remove_flattened_offending_flows:\n  assumes \"wf_graph \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\" (*TODO: we could get rid of this assumption*)\n  shows \"sinvar \\<lparr>nodes = nodesG, edges = edgesG - \\<Union> (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP) \\<rparr> nP\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          \\<Union>\n           (set_offending_flows\n             \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          \\<Union>\n           (set_offending_flows\n             \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          \\<Union>\n           (set_offending_flows\n             \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          \\<Union>\n           (set_offending_flows\n             \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "assume *: \"f\\<in>set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP\""], ["proof (state)\nthis:\n  f \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          \\<Union>\n           (set_offending_flows\n             \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "from *"], ["proof (chain)\npicking this:\n  f \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP", "have 1: \"sinvar \\<lparr>nodes = nodesG, edges = edgesG - f \\<rparr> nP\""], ["proof (prove)\nusing this:\n  f \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP\n\ngoal (1 subgoal):\n 1. sinvar \\<lparr>nodes = nodesG, edges = edgesG - f\\<rparr> nP", "by (metis (hide_lams, mono_tags) SecurityInvariant_withOffendingFlows.valid_without_offending_flows delete_edges_simp2 graph.select_convs(1) graph.select_convs(2))"], ["proof (state)\nthis:\n  sinvar \\<lparr>nodes = nodesG, edges = edgesG - f\\<rparr> nP\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          \\<Union>\n           (set_offending_flows\n             \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "from *"], ["proof (chain)\npicking this:\n  f \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP", "have 2: \"edgesG - \\<Union> (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP) \\<subseteq> edgesG - f\""], ["proof (prove)\nusing this:\n  f \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP\n\ngoal (1 subgoal):\n 1. edgesG -\n    \\<Union>\n     (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n    \\<subseteq> edgesG - f", "by blast"], ["proof (state)\nthis:\n  edgesG -\n  \\<Union>\n   (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<subseteq> edgesG - f\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          \\<Union>\n           (set_offending_flows\n             \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "note 1 2"], ["proof (state)\nthis:\n  sinvar \\<lparr>nodes = nodesG, edges = edgesG - f\\<rparr> nP\n  edgesG -\n  \\<Union>\n   (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<subseteq> edgesG - f\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          \\<Union>\n           (set_offending_flows\n             \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "}"], ["proof (state)\nthis:\n  ?f2\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP \\<Longrightarrow>\n  sinvar \\<lparr>nodes = nodesG, edges = edgesG - ?f2\\<rparr> nP\n  ?f2\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP \\<Longrightarrow>\n  edgesG -\n  \\<Union>\n   (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<subseteq> edgesG - ?f2\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          \\<Union>\n           (set_offending_flows\n             \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "with assms"], ["proof (chain)\npicking this:\n  wf_graph \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n  ?f2\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP \\<Longrightarrow>\n  sinvar \\<lparr>nodes = nodesG, edges = edgesG - ?f2\\<rparr> nP\n  ?f2\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP \\<Longrightarrow>\n  edgesG -\n  \\<Union>\n   (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<subseteq> edgesG - ?f2", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_graph \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n  ?f2\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP \\<Longrightarrow>\n  sinvar \\<lparr>nodes = nodesG, edges = edgesG - ?f2\\<rparr> nP\n  ?f2\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP \\<Longrightarrow>\n  edgesG -\n  \\<Union>\n   (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<subseteq> edgesG - ?f2\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          \\<Union>\n           (set_offending_flows\n             \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "by (metis (hide_lams, no_types) Diff_empty Union_empty defined_offending equals0I mono_sinvar wf_graph_remove_edges)"], ["proof (state)\nthis:\n  sinvar\n   \\<lparr>nodes = nodesG,\n      edges =\n        edgesG -\n        \\<Union>\n         (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP)\\<rparr>\n   nP\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in SecurityInvariant_preliminaries) sinvar_valid_remove_SOME_offending_flows:\n  assumes \"set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP \\<noteq> {}\"\n  shows \"sinvar \\<lparr>nodes = nodesG, edges = edgesG - (SOME F. F \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP) \\<rparr> nP\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          (SOME F.\n              F \\<in> set_offending_flows\n                       \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n                       nP)\\<rparr>\n     nP", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          (SOME F.\n              F \\<in> set_offending_flows\n                       \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n                       nP)\\<rparr>\n     nP", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          (SOME F.\n              F \\<in> set_offending_flows\n                       \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n                       nP)\\<rparr>\n     nP", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          (SOME F.\n              F \\<in> set_offending_flows\n                       \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n                       nP)\\<rparr>\n     nP", "assume *: \"f\\<in>set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP\""], ["proof (state)\nthis:\n  f \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          (SOME F.\n              F \\<in> set_offending_flows\n                       \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n                       nP)\\<rparr>\n     nP", "from *"], ["proof (chain)\npicking this:\n  f \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP", "have 1: \"sinvar \\<lparr>nodes = nodesG, edges = edgesG - f \\<rparr> nP\""], ["proof (prove)\nusing this:\n  f \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP\n\ngoal (1 subgoal):\n 1. sinvar \\<lparr>nodes = nodesG, edges = edgesG - f\\<rparr> nP", "by (metis (hide_lams, mono_tags) SecurityInvariant_withOffendingFlows.valid_without_offending_flows delete_edges_simp2 graph.select_convs(1) graph.select_convs(2))"], ["proof (state)\nthis:\n  sinvar \\<lparr>nodes = nodesG, edges = edgesG - f\\<rparr> nP\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          (SOME F.\n              F \\<in> set_offending_flows\n                       \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n                       nP)\\<rparr>\n     nP", "from *"], ["proof (chain)\npicking this:\n  f \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP", "have 2: \"edgesG - \\<Union> (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP) \\<subseteq> edgesG - f\""], ["proof (prove)\nusing this:\n  f \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP\n\ngoal (1 subgoal):\n 1. edgesG -\n    \\<Union>\n     (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n    \\<subseteq> edgesG - f", "by blast"], ["proof (state)\nthis:\n  edgesG -\n  \\<Union>\n   (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<subseteq> edgesG - f\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          (SOME F.\n              F \\<in> set_offending_flows\n                       \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n                       nP)\\<rparr>\n     nP", "note 1 2"], ["proof (state)\nthis:\n  sinvar \\<lparr>nodes = nodesG, edges = edgesG - f\\<rparr> nP\n  edgesG -\n  \\<Union>\n   (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<subseteq> edgesG - f\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          (SOME F.\n              F \\<in> set_offending_flows\n                       \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n                       nP)\\<rparr>\n     nP", "}"], ["proof (state)\nthis:\n  ?f2\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP \\<Longrightarrow>\n  sinvar \\<lparr>nodes = nodesG, edges = edgesG - ?f2\\<rparr> nP\n  ?f2\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP \\<Longrightarrow>\n  edgesG -\n  \\<Union>\n   (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<subseteq> edgesG - ?f2\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          (SOME F.\n              F \\<in> set_offending_flows\n                       \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n                       nP)\\<rparr>\n     nP", "with assms"], ["proof (chain)\npicking this:\n  set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n   nP \\<noteq>\n  {}\n  ?f2\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP \\<Longrightarrow>\n  sinvar \\<lparr>nodes = nodesG, edges = edgesG - ?f2\\<rparr> nP\n  ?f2\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP \\<Longrightarrow>\n  edgesG -\n  \\<Union>\n   (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<subseteq> edgesG - ?f2", "show ?thesis"], ["proof (prove)\nusing this:\n  set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n   nP \\<noteq>\n  {}\n  ?f2\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP \\<Longrightarrow>\n  sinvar \\<lparr>nodes = nodesG, edges = edgesG - ?f2\\<rparr> nP\n  ?f2\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP \\<Longrightarrow>\n  edgesG -\n  \\<Union>\n   (set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<subseteq> edgesG - ?f2\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          (SOME F.\n              F \\<in> set_offending_flows\n                       \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n                       nP)\\<rparr>\n     nP", "by (simp add: some_in_eq)"], ["proof (state)\nthis:\n  sinvar\n   \\<lparr>nodes = nodesG,\n      edges =\n        edgesG -\n        (SOME F.\n            F \\<in> set_offending_flows\n                     \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n                     nP)\\<rparr>\n   nP\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in SecurityInvariant_preliminaries) sinvar_valid_remove_minimalize_offending_overapprox:\n  assumes \"wf_graph \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\"\n      and \"\\<not> sinvar \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP\" (*\"set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP \\<noteq> {}\"*)\n      and \"set Es = edgesG\" and \"distinct Es\"\n  shows \"sinvar \\<lparr>nodes = nodesG, edges = edgesG -\n              set (minimalize_offending_overapprox Es [] \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP) \\<rparr> nP\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          set (local.minimalize_offending_overapprox Es []\n                \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          set (local.minimalize_offending_overapprox Es []\n                \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "from assms"], ["proof (chain)\npicking this:\n  wf_graph \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n  \\<not> sinvar \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP\n  set Es = edgesG\n  distinct Es", "have off_Es: \"is_offending_flows (set Es) \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP\""], ["proof (prove)\nusing this:\n  wf_graph \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n  \\<not> sinvar \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP\n  set Es = edgesG\n  distinct Es\n\ngoal (1 subgoal):\n 1. is_offending_flows (set Es)\n     \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP", "by (metis (no_types, lifting) Diff_cancel\n        SecurityInvariant_withOffendingFlows.valid_empty_edges_iff_exists_offending_flows defined_offending\n        delete_edges_simp2 graph.select_convs(2) is_offending_flows_def sinvar_monoI)"], ["proof (state)\nthis:\n  is_offending_flows (set Es) \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n   nP\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          set (local.minimalize_offending_overapprox Es []\n                \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "from minimalize_offending_overapprox_gives_back_an_offending_flow[OF assms(1) off_Es _ assms(4)]"], ["proof (chain)\npicking this:\n  set Es\n  \\<subseteq> edges\n               \\<lparr>nodes = nodesG,\n                  edges = edgesG\\<rparr> \\<Longrightarrow>\n  set (local.minimalize_offending_overapprox Es []\n        \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP", "have\n    in_offending: \"set (minimalize_offending_overapprox Es [] \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n      \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP\""], ["proof (prove)\nusing this:\n  set Es\n  \\<subseteq> edges\n               \\<lparr>nodes = nodesG,\n                  edges = edgesG\\<rparr> \\<Longrightarrow>\n  set (local.minimalize_offending_overapprox Es []\n        \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP\n\ngoal (1 subgoal):\n 1. set (local.minimalize_offending_overapprox Es []\n          \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n    \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP", "using assms(3)"], ["proof (prove)\nusing this:\n  set Es\n  \\<subseteq> edges\n               \\<lparr>nodes = nodesG,\n                  edges = edgesG\\<rparr> \\<Longrightarrow>\n  set (local.minimalize_offending_overapprox Es []\n        \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP\n  set Es = edgesG\n\ngoal (1 subgoal):\n 1. set (local.minimalize_offending_overapprox Es []\n          \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n    \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP", "by simp"], ["proof (state)\nthis:\n  set (local.minimalize_offending_overapprox Es []\n        \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          set (local.minimalize_offending_overapprox Es []\n                \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "{"], ["proof (state)\nthis:\n  set (local.minimalize_offending_overapprox Es []\n        \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          set (local.minimalize_offending_overapprox Es []\n                \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          set (local.minimalize_offending_overapprox Es []\n                \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "assume *: \"f\\<in>set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP\""], ["proof (state)\nthis:\n  f \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          set (local.minimalize_offending_overapprox Es []\n                \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "from *"], ["proof (chain)\npicking this:\n  f \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP", "have 1: \"sinvar \\<lparr>nodes = nodesG, edges = edgesG - f \\<rparr> nP\""], ["proof (prove)\nusing this:\n  f \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n           nP\n\ngoal (1 subgoal):\n 1. sinvar \\<lparr>nodes = nodesG, edges = edgesG - f\\<rparr> nP", "by (metis (hide_lams, mono_tags) SecurityInvariant_withOffendingFlows.valid_without_offending_flows delete_edges_simp2 graph.select_convs(1) graph.select_convs(2))"], ["proof (state)\nthis:\n  sinvar \\<lparr>nodes = nodesG, edges = edgesG - f\\<rparr> nP\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          set (local.minimalize_offending_overapprox Es []\n                \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "note 1"], ["proof (state)\nthis:\n  sinvar \\<lparr>nodes = nodesG, edges = edgesG - f\\<rparr> nP\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          set (local.minimalize_offending_overapprox Es []\n                \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "}"], ["proof (state)\nthis:\n  ?f2\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP \\<Longrightarrow>\n  sinvar \\<lparr>nodes = nodesG, edges = edgesG - ?f2\\<rparr> nP\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          set (local.minimalize_offending_overapprox Es []\n                \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "with in_offending"], ["proof (chain)\npicking this:\n  set (local.minimalize_offending_overapprox Es []\n        \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP\n  ?f2\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP \\<Longrightarrow>\n  sinvar \\<lparr>nodes = nodesG, edges = edgesG - ?f2\\<rparr> nP", "show ?thesis"], ["proof (prove)\nusing this:\n  set (local.minimalize_offending_overapprox Es []\n        \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP\n  ?f2\n  \\<in> set_offending_flows \\<lparr>nodes = nodesG, edges = edgesG\\<rparr>\n         nP \\<Longrightarrow>\n  sinvar \\<lparr>nodes = nodesG, edges = edgesG - ?f2\\<rparr> nP\n\ngoal (1 subgoal):\n 1. sinvar\n     \\<lparr>nodes = nodesG,\n        edges =\n          edgesG -\n          set (local.minimalize_offending_overapprox Es []\n                \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n     nP", "by (simp add: some_in_eq)"], ["proof (state)\nthis:\n  sinvar\n   \\<lparr>nodes = nodesG,\n      edges =\n        edgesG -\n        set (local.minimalize_offending_overapprox Es []\n              \\<lparr>nodes = nodesG, edges = edgesG\\<rparr> nP)\\<rparr>\n   nP\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}