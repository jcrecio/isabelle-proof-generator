{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_SecGwExt_impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_SecGwExt.default_node_properties P = NetModel_node_props P\""], "translations": [["", "lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_SecGwExt.default_node_properties P = NetModel_node_props P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PolEnforcePointExtended.node_props P = NetModel_node_props P", "apply(simp add: NetModel_node_props_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"PolEnforcePoint_eval G P = (wf_list_graph G \\<and>\n  sinvar G (SecurityInvariant.node_props SINVAR_SecGwExt.default_node_properties P))\""], ["", "interpretation PolEnforcePoint_impl:TopoS_List_Impl \n  where default_node_properties=SINVAR_SecGwExt.default_node_properties\n  and sinvar_spec=SINVAR_SecGwExt.sinvar\n  and sinvar_impl=sinvar\n  and receiver_violation=SINVAR_SecGwExt.receiver_violation\n  and offending_flows_impl=PolEnforcePointExtended_offending_list\n  and node_props_impl=NetModel_node_props\n  and eval_impl=PolEnforcePoint_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl default_node_properties SINVAR_SecGwExt.sinvar sinvar\n     SINVAR_SecGwExt.receiver_violation\n     PolEnforcePointExtended_offending_list NetModel_node_props\n     PolEnforcePoint_eval", "apply(unfold TopoS_List_Impl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SecurityInvariant SINVAR_SecGwExt.sinvar default_node_properties\n      SINVAR_SecGwExt.receiver_violation \\<and>\n     (\\<forall>G nP.\n         wf_list_graph G \\<longrightarrow>\n         SINVAR_SecGwExt.sinvar (list_graph_to_graph G) nP =\n         sinvar G nP)) \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (PolEnforcePointExtended_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        PolEnforcePointExtended.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         PolEnforcePointExtended.eval (list_graph_to_graph G) P) =\n        PolEnforcePoint_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SecurityInvariant SINVAR_SecGwExt.sinvar default_node_properties\n     SINVAR_SecGwExt.receiver_violation \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SINVAR_SecGwExt.sinvar (list_graph_to_graph G) nP = sinvar G nP)\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (PolEnforcePointExtended_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        PolEnforcePointExtended.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         PolEnforcePointExtended.eval (list_graph_to_graph G) P) =\n        PolEnforcePoint_eval G P)", "apply(simp add: TopoS_PolEnforcePointExtended list_graph_to_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (PolEnforcePointExtended_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        PolEnforcePointExtended.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         PolEnforcePointExtended.eval (list_graph_to_graph G) P) =\n        PolEnforcePoint_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (PolEnforcePointExtended_offending_list G nP)\n 2. (\\<forall>P.\n        PolEnforcePointExtended.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         PolEnforcePointExtended.eval (list_graph_to_graph G) P) =\n        PolEnforcePoint_eval G P)", "apply(simp add: list_graph_to_graph_def PolEnforcePointExtended_offending_set PolEnforcePointExtended_offending_set_def PolEnforcePointExtended_offending_list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P.\n        PolEnforcePointExtended.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         PolEnforcePointExtended.eval (list_graph_to_graph G) P) =\n        PolEnforcePoint_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       PolEnforcePointExtended.node_props_formaldef P =\n       NetModel_node_props P\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        PolEnforcePointExtended.eval (list_graph_to_graph G) P) =\n       PolEnforcePoint_eval G P", "apply(simp only: NetModel_node_props_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       PolEnforcePointExtended.node_props_formaldef P =\n       (\\<lambda>i.\n           case node_properties P i of\n           None \\<Rightarrow> default_node_properties\n           | Some property \\<Rightarrow> property)\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        PolEnforcePointExtended.eval (list_graph_to_graph G) P) =\n       PolEnforcePoint_eval G P", "apply(metis PolEnforcePointExtended.node_props.simps PolEnforcePointExtended.node_props_eq_node_props_formaldef)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        PolEnforcePointExtended.eval (list_graph_to_graph G) P) =\n       PolEnforcePoint_eval G P", "apply(simp only: PolEnforcePoint_eval_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        PolEnforcePointExtended.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and>\n        sinvar G (PolEnforcePointExtended.node_props P))", "apply(simp add: TopoS_eval_impl_proofrule[OF TopoS_PolEnforcePointExtended])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (wf_list_graph G \\<and>\n        (\\<forall>x\\<in>edges (list_graph_to_graph G).\n            case x of\n            (e1, e2) \\<Rightarrow>\n              e1 \\<noteq> e2 \\<longrightarrow>\n              allowed_secgw_flow\n               (case node_properties P e1 of\n                None \\<Rightarrow> default_node_properties\n                | Some property \\<Rightarrow> property)\n               (case node_properties P e2 of\n                None \\<Rightarrow> default_node_properties\n                | Some property \\<Rightarrow> property))) =\n       (wf_list_graph G \\<and>\n        (\\<forall>x\\<in>set (edgesL G).\n            case x of\n            (e1, e2) \\<Rightarrow>\n              e1 \\<noteq> e2 \\<longrightarrow>\n              allowed_secgw_flow\n               (case node_properties P e1 of\n                None \\<Rightarrow> default_node_properties\n                | Some property \\<Rightarrow> property)\n               (case node_properties P e2 of\n                None \\<Rightarrow> default_node_properties\n                | Some property \\<Rightarrow> property)))", "apply(simp_all add: list_graph_to_graph_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>PolEnforcePoint packing\\<close>"], ["", "definition SINVAR_LIB_PolEnforcePointExtended :: \"('v::vertex, secgw_member) TopoS_packed\" where\n    \"SINVAR_LIB_PolEnforcePointExtended \\<equiv> \n    \\<lparr> nm_name = ''PolEnforcePointExtended'', \n      nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n      nm_default = SINVAR_SecGwExt.default_node_properties, \n      nm_sinvar = sinvar,\n      nm_offending_flows = PolEnforcePointExtended_offending_list, \n      nm_node_props = NetModel_node_props,\n      nm_eval = PolEnforcePoint_eval\n      \\<rparr>\""], ["", "interpretation SINVAR_LIB_PolEnforcePointExtended_interpretation: TopoS_modelLibrary SINVAR_LIB_PolEnforcePointExtended \n      SINVAR_SecGwExt.sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_modelLibrary SINVAR_LIB_PolEnforcePointExtended\n     SINVAR_SecGwExt.sinvar", "apply(unfold TopoS_modelLibrary_def SINVAR_LIB_PolEnforcePointExtended_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''PolEnforcePointExtended'',\n              nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n              nm_default = default_node_properties, nm_sinvar = sinvar,\n              nm_offending_flows = PolEnforcePointExtended_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = PolEnforcePoint_eval\\<rparr>) \\<and>\n    TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)\n     SINVAR_SecGwExt.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''PolEnforcePointExtended'',\n              nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n              nm_default = default_node_properties, nm_sinvar = sinvar,\n              nm_offending_flows = PolEnforcePointExtended_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = PolEnforcePoint_eval\\<rparr>)\n 2. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)\n     SINVAR_SecGwExt.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)\n     SINVAR_SecGwExt.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''PolEnforcePointExtended'',\n          nm_receiver_violation = SINVAR_SecGwExt.receiver_violation,\n          nm_default = default_node_properties, nm_sinvar = sinvar,\n          nm_offending_flows = PolEnforcePointExtended_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = PolEnforcePoint_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl default_node_properties SINVAR_SecGwExt.sinvar sinvar\n     SINVAR_SecGwExt.receiver_violation\n     PolEnforcePointExtended_offending_list NetModel_node_props\n     PolEnforcePoint_eval", "by(unfold_locales)"], ["", "text \\<open>Examples\\<close>"], ["", "definition example_net_secgw :: \"nat list_graph\" where\n  \"example_net_secgw \\<equiv> \\<lparr> nodesL = [1::nat,2, 3, 8,9, 11,12], \n    edgesL = [(3,8),(8,3),(2,8),(8,1),(1,9),(9,2),(2,9),(9,1), (1,3), (8,11),(8,12), (11,9), (11,3), (11,12)] \\<rparr>\""], ["", "value \"wf_list_graph example_net_secgw\""], ["", "definition example_conf_secgw where\n  \"example_conf_secgw \\<equiv> ((\\<lambda>e. SINVAR_SecGwExt.default_node_properties)\n    (1 := DomainMember, 2:= DomainMember, 3:= AccessibleMember,\n     8:= PolEnforcePoint, 9:= PolEnforcePointIN))\""], ["", "export_code sinvar checking SML"], ["", "definition \"test = sinvar \\<lparr> nodesL=[1::nat], edgesL=[] \\<rparr> (\\<lambda>_. SINVAR_SecGwExt.default_node_properties)\""], ["", "export_code test checking SML"], ["", "value(**) \"sinvar \\<lparr> nodesL=[1::nat], edgesL=[] \\<rparr> (\\<lambda>_. SINVAR_SecGwExt.default_node_properties)\""], ["", "value(**) \"sinvar example_net_secgw example_conf_secgw\""], ["", "value(**) \"PolEnforcePoint_offending_list example_net_secgw example_conf_secgw\""], ["", "definition example_net_secgw_invalid where\n  \"example_net_secgw_invalid \\<equiv> example_net_secgw\\<lparr>edgesL := (3,1)#(11,1)#(11,8)#(1,2)#(edgesL example_net_secgw)\\<rparr>\""], ["", "value(**) \"sinvar example_net_secgw_invalid example_conf_secgw\""], ["", "value(**) \"PolEnforcePoint_offending_list example_net_secgw_invalid example_conf_secgw\""], ["", "hide_const (open) NetModel_node_props"], ["", "hide_const (open) sinvar"], ["", "end"]]}