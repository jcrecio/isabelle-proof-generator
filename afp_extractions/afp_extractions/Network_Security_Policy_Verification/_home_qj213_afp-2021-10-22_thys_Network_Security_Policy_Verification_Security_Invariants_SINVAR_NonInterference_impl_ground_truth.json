{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_NonInterference_impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma undirected_reachable_set: \"set (undirected_reachable G v) = {e2. (v,e2) \\<in> (set (edgesL (undirected G)))\\<^sup>+} - {v}\"", "lemma \"P = Q \\<Longrightarrow> (\\<forall> x. P x) = (\\<forall> x. Q x)\"", "lemma sinvar_eq_help1: \"nP ` set (undirected_reachable G n) = set (map nP (undirected_reachable G n))\"", "lemma sinvar_eq_help2: \"set l = {Unrelated} \\<Longrightarrow> remdups l = [Unrelated]\"", "lemma sinvar_eq_help3: \"(let result = remdups (map nP (undirected_reachable G n)) in result = [] \\<or> result = [Unrelated]) = (set (map nP (undirected_reachable G n)) \\<subseteq> {Unrelated})\"", "lemma sinvar_list_eq_set: \"sinvar = sinvar_set\"", "lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_NonInterference.default_node_properties P = NetModel_node_props P\"", "lemma sinvar_correct: \"wf_list_graph G \\<Longrightarrow> SINVAR_NonInterference.sinvar (list_graph_to_graph G) nP = sinvar G nP\"", "lemma \"\\<not> sinvar example_graph example_conf\"", "lemma \"NonInterference_offending_list example_graph example_conf =\n                     [[(1, 2)], [(2, 3)], [(3, 4)], [(5, 4)]]\""], "translations": [["", "lemma undirected_reachable_set: \"set (undirected_reachable G v) = {e2. (v,e2) \\<in> (set (edgesL (undirected G)))\\<^sup>+} - {v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (SINVAR_NonInterference_impl.undirected_reachable G v) =\n    {e2.\n     (v, e2) \\<in> (set (edgesL (FiniteListGraph.undirected G)))\\<^sup>+} -\n    {v}", "by(simp add: undirected_succ_tran_set undirected_nodes_set undirected_reachable_def)"], ["", "fun sinvar_set :: \"'v list_graph \\<Rightarrow> ('v \\<Rightarrow> node_config) \\<Rightarrow> bool\" where\n  \"sinvar_set G nP = (\\<forall> n \\<in> set (nodesL G). (nP n) = Interfering \\<longrightarrow> set (map nP (undirected_reachable G n)) \\<subseteq> {Unrelated})\""], ["", "(* equal: lemma sinvar_list_eq_set*)"], ["", "fun sinvar :: \"'v list_graph \\<Rightarrow> ('v \\<Rightarrow> node_config) \\<Rightarrow> bool\" where\n  \"sinvar G nP = (\\<forall> n \\<in> set (nodesL G). (nP n) = Interfering \\<longrightarrow> (let result = remdups (map nP (undirected_reachable G n)) in result = [] \\<or> result = [Unrelated]))\""], ["", "lemma \"P = Q \\<Longrightarrow> (\\<forall> x. P x) = (\\<forall> x. Q x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P = Q \\<Longrightarrow> (\\<forall>x. P x) = (\\<forall>x. Q x)", "by(erule arg_cong)"], ["", "lemma sinvar_eq_help1: \"nP ` set (undirected_reachable G n) = set (map nP (undirected_reachable G n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n) =\n    set (map nP (SINVAR_NonInterference_impl.undirected_reachable G n))", "by auto"], ["", "lemma sinvar_eq_help2: \"set l = {Unrelated} \\<Longrightarrow> remdups l = [Unrelated]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set l = {Unrelated} \\<Longrightarrow> remdups l = [Unrelated]", "apply(induction l)"], ["proof (prove)\ngoal (2 subgoals):\n 1. set [] = {Unrelated} \\<Longrightarrow> remdups [] = [Unrelated]\n 2. \\<And>a l.\n       \\<lbrakk>set l = {Unrelated} \\<Longrightarrow>\n                remdups l = [Unrelated];\n        set (a # l) = {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> remdups (a # l) = [Unrelated]", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>set l = {Unrelated} \\<Longrightarrow>\n                remdups l = [Unrelated];\n        set (a # l) = {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> remdups (a # l) = [Unrelated]", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>set l = {Unrelated} \\<Longrightarrow>\n                remdups l = [Unrelated];\n        set l \\<subseteq> {Unrelated}\\<rbrakk>\n       \\<Longrightarrow> (Unrelated \\<in> set l \\<longrightarrow>\n                          remdups l = [Unrelated]) \\<and>\n                         (Unrelated \\<notin> set l \\<longrightarrow> l = [])", "apply (metis empty_iff insertI1 set_empty2 subset_singletonD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sinvar_eq_help3: \"(let result = remdups (map nP (undirected_reachable G n)) in result = [] \\<or> result = [Unrelated]) = (set (map nP (undirected_reachable G n)) \\<subseteq> {Unrelated})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (let result =\n           remdups\n            (map nP (SINVAR_NonInterference_impl.undirected_reachable G n))\n     in result = [] \\<or> result = [Unrelated]) =\n    (set (map nP (SINVAR_NonInterference_impl.undirected_reachable G n))\n     \\<subseteq> {Unrelated})", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SINVAR_NonInterference_impl.undirected_reachable G n = [] \\<or>\n     remdups\n      (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n     [Unrelated]) =\n    (nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n     \\<subseteq> {Unrelated})", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SINVAR_NonInterference_impl.undirected_reachable G n = [] \\<or>\n    remdups\n     (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n    [Unrelated] \\<Longrightarrow>\n    nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n    \\<subseteq> {Unrelated}\n 2. nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n    \\<subseteq> {Unrelated} \\<Longrightarrow>\n    SINVAR_NonInterference_impl.undirected_reachable G n = [] \\<or>\n    remdups\n     (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n    [Unrelated]", "apply(erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. SINVAR_NonInterference_impl.undirected_reachable G n =\n    [] \\<Longrightarrow>\n    nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n    \\<subseteq> {Unrelated}\n 2. remdups\n     (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n    [Unrelated] \\<Longrightarrow>\n    nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n    \\<subseteq> {Unrelated}\n 3. nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n    \\<subseteq> {Unrelated} \\<Longrightarrow>\n    SINVAR_NonInterference_impl.undirected_reachable G n = [] \\<or>\n    remdups\n     (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n    [Unrelated]", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. remdups\n     (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n    [Unrelated] \\<Longrightarrow>\n    nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n    \\<subseteq> {Unrelated}\n 2. nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n    \\<subseteq> {Unrelated} \\<Longrightarrow>\n    SINVAR_NonInterference_impl.undirected_reachable G n = [] \\<or>\n    remdups\n     (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n    [Unrelated]", "apply(simp only: set_map[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. remdups\n     (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n    [Unrelated] \\<Longrightarrow>\n    set (map nP (SINVAR_NonInterference_impl.undirected_reachable G n))\n    \\<subseteq> {Unrelated}\n 2. nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n    \\<subseteq> {Unrelated} \\<Longrightarrow>\n    SINVAR_NonInterference_impl.undirected_reachable G n = [] \\<or>\n    remdups\n     (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n    [Unrelated]", "apply(subst set_remdups[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. remdups\n     (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n    [Unrelated] \\<Longrightarrow>\n    set (remdups\n          (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)))\n    \\<subseteq> {Unrelated}\n 2. nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n    \\<subseteq> {Unrelated} \\<Longrightarrow>\n    SINVAR_NonInterference_impl.undirected_reachable G n = [] \\<or>\n    remdups\n     (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n    [Unrelated]", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n    \\<subseteq> {Unrelated} \\<Longrightarrow>\n    SINVAR_NonInterference_impl.undirected_reachable G n = [] \\<or>\n    remdups\n     (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n    [Unrelated]", "apply(case_tac \" nP ` set (undirected_reachable G n) = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n             \\<subseteq> {Unrelated};\n     nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n) =\n     {}\\<rbrakk>\n    \\<Longrightarrow> SINVAR_NonInterference_impl.undirected_reachable G n =\n                      [] \\<or>\n                      remdups\n                       (map nP\n                         (SINVAR_NonInterference_impl.undirected_reachable G\n                           n)) =\n                      [Unrelated]\n 2. \\<lbrakk>nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n             \\<subseteq> {Unrelated};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {}\\<rbrakk>\n    \\<Longrightarrow> SINVAR_NonInterference_impl.undirected_reachable G n =\n                      [] \\<or>\n                      remdups\n                       (map nP\n                         (SINVAR_NonInterference_impl.undirected_reachable G\n                           n)) =\n                      [Unrelated]", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n             \\<subseteq> {Unrelated};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {}\\<rbrakk>\n    \\<Longrightarrow> SINVAR_NonInterference_impl.undirected_reachable G n =\n                      [] \\<or>\n                      remdups\n                       (map nP\n                         (SINVAR_NonInterference_impl.undirected_reachable G\n                           n)) =\n                      [Unrelated]", "apply(case_tac \" nP ` set (undirected_reachable G n) = {Unrelated}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n             \\<subseteq> {Unrelated};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {};\n     nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n) =\n     {Unrelated}\\<rbrakk>\n    \\<Longrightarrow> SINVAR_NonInterference_impl.undirected_reachable G n =\n                      [] \\<or>\n                      remdups\n                       (map nP\n                         (SINVAR_NonInterference_impl.undirected_reachable G\n                           n)) =\n                      [Unrelated]\n 2. \\<lbrakk>nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n             \\<subseteq> {Unrelated};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {Unrelated}\\<rbrakk>\n    \\<Longrightarrow> SINVAR_NonInterference_impl.undirected_reachable G n =\n                      [] \\<or>\n                      remdups\n                       (map nP\n                         (SINVAR_NonInterference_impl.undirected_reachable G\n                           n)) =\n                      [Unrelated]", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n             \\<subseteq> {Unrelated};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {Unrelated}\\<rbrakk>\n    \\<Longrightarrow> SINVAR_NonInterference_impl.undirected_reachable G n =\n                      [] \\<or>\n                      remdups\n                       (map nP\n                         (SINVAR_NonInterference_impl.undirected_reachable G\n                           n)) =\n                      [Unrelated]\n 2. \\<lbrakk>nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n             \\<subseteq> {Unrelated};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {};\n     nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n) =\n     {Unrelated}\\<rbrakk>\n    \\<Longrightarrow> SINVAR_NonInterference_impl.undirected_reachable G n =\n                      [] \\<or>\n                      remdups\n                       (map nP\n                         (SINVAR_NonInterference_impl.undirected_reachable G\n                           n)) =\n                      [Unrelated]", "apply(subgoal_tac \"nP ` set (undirected_reachable G n) \\<subseteq> {Unrelated} \\<Longrightarrow>\n    nP ` set (undirected_reachable G n) \\<noteq> {} \\<Longrightarrow>\n    nP ` set (undirected_reachable G n) \\<noteq> {Unrelated} \\<Longrightarrow> False\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n             \\<subseteq> {Unrelated};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {Unrelated};\n     \\<lbrakk>nP `\n              set (SINVAR_NonInterference_impl.undirected_reachable G n)\n              \\<subseteq> {Unrelated};\n      nP `\n      set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n      {};\n      nP `\n      set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n      {Unrelated}\\<rbrakk>\n     \\<Longrightarrow> False\\<rbrakk>\n    \\<Longrightarrow> SINVAR_NonInterference_impl.undirected_reachable G n =\n                      [] \\<or>\n                      remdups\n                       (map nP\n                         (SINVAR_NonInterference_impl.undirected_reachable G\n                           n)) =\n                      [Unrelated]\n 2. \\<lbrakk>nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n             \\<subseteq> {Unrelated};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {Unrelated};\n     nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n     \\<subseteq> {Unrelated};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {Unrelated}\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n             \\<subseteq> {Unrelated};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {};\n     nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n) =\n     {Unrelated}\\<rbrakk>\n    \\<Longrightarrow> SINVAR_NonInterference_impl.undirected_reachable G n =\n                      [] \\<or>\n                      remdups\n                       (map nP\n                         (SINVAR_NonInterference_impl.undirected_reachable G\n                           n)) =\n                      [Unrelated]", "apply fast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n             \\<subseteq> {Unrelated};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {Unrelated};\n     nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n     \\<subseteq> {Unrelated};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {Unrelated}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n             \\<subseteq> {Unrelated};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {};\n     nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n) =\n     {Unrelated}\\<rbrakk>\n    \\<Longrightarrow> SINVAR_NonInterference_impl.undirected_reachable G n =\n                      [] \\<or>\n                      remdups\n                       (map nP\n                         (SINVAR_NonInterference_impl.undirected_reachable G\n                           n)) =\n                      [Unrelated]", "apply (metis subset_singletonD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n             \\<subseteq> {Unrelated};\n     nP `\n     set (SINVAR_NonInterference_impl.undirected_reachable G n) \\<noteq>\n     {};\n     nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n) =\n     {Unrelated}\\<rbrakk>\n    \\<Longrightarrow> SINVAR_NonInterference_impl.undirected_reachable G n =\n                      [] \\<or>\n                      remdups\n                       (map nP\n                         (SINVAR_NonInterference_impl.undirected_reachable G\n                           n)) =\n                      [Unrelated]", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n) =\n    {Unrelated} \\<Longrightarrow>\n    SINVAR_NonInterference_impl.undirected_reachable G n = [] \\<or>\n    remdups\n     (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n    [Unrelated]", "apply(rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n) =\n    {Unrelated} \\<Longrightarrow>\n    remdups\n     (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n    [Unrelated]", "apply(simp only: sinvar_eq_help1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n    {Unrelated} \\<Longrightarrow>\n    remdups\n     (map nP (SINVAR_NonInterference_impl.undirected_reachable G n)) =\n    [Unrelated]", "apply(simp add:sinvar_eq_help2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sinvar_list_eq_set: \"sinvar = sinvar_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar = sinvar_set", "apply(insert sinvar_eq_help3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nP G n.\n        (let result =\n               remdups\n                (map nP\n                  (SINVAR_NonInterference_impl.undirected_reachable G n))\n         in result = [] \\<or> result = [Unrelated]) =\n        (set (map nP (SINVAR_NonInterference_impl.undirected_reachable G n))\n         \\<subseteq> {Unrelated})) \\<Longrightarrow>\n    sinvar = sinvar_set", "apply(simp add: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nP G n.\n        (let result =\n               remdups\n                (map nP\n                  (SINVAR_NonInterference_impl.undirected_reachable G n))\n         in result = [] \\<or> result = [Unrelated]) =\n        (nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n         \\<subseteq> {Unrelated})) \\<Longrightarrow>\n    \\<forall>x xa.\n       (\\<forall>n\\<in>set (nodesL x).\n           xa n = Interfering \\<longrightarrow>\n           SINVAR_NonInterference_impl.undirected_reachable x n = [] \\<or>\n           remdups\n            (map xa\n              (SINVAR_NonInterference_impl.undirected_reachable x n)) =\n           [Unrelated]) =\n       (\\<forall>n\\<in>set (nodesL x).\n           xa n = Interfering \\<longrightarrow>\n           xa ` set (SINVAR_NonInterference_impl.undirected_reachable x n)\n           \\<subseteq> {Unrelated})", "apply(rule allI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       (\\<And>nP G n.\n           (let result =\n                  remdups\n                   (map nP\n                     (SINVAR_NonInterference_impl.undirected_reachable G n))\n            in result = [] \\<or> result = [Unrelated]) =\n           (nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n            \\<subseteq> {Unrelated})) \\<Longrightarrow>\n       (\\<forall>n\\<in>set (nodesL x).\n           xa n = Interfering \\<longrightarrow>\n           SINVAR_NonInterference_impl.undirected_reachable x n = [] \\<or>\n           remdups\n            (map xa\n              (SINVAR_NonInterference_impl.undirected_reachable x n)) =\n           [Unrelated]) =\n       (\\<forall>n\\<in>set (nodesL x).\n           xa n = Interfering \\<longrightarrow>\n           xa ` set (SINVAR_NonInterference_impl.undirected_reachable x n)\n           \\<subseteq> {Unrelated})", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "value \"sinvar \n    \\<lparr> nodesL = [1::nat,2,3,4], edgesL = [(1,2), (2,3), (3,4), (8,9),(9,8)] \\<rparr>\n    (\\<lambda>e. SINVAR_NonInterference.default_node_properties)\""], ["", "value \"sinvar \n    \\<lparr> nodesL = [1::nat,2,3,4,8,9,10], edgesL = [(1,2), (2,3), (3,4)] \\<rparr>\n    ((\\<lambda>e. SINVAR_NonInterference.default_node_properties)(1:= Interfering, 2:= Unrelated, 3:= Unrelated, 4:= Unrelated))\""], ["", "value \"sinvar \n    \\<lparr> nodesL = [1::nat,2,3,4,5, 8,9,10], edgesL = [(1,2), (2,3), (3,4), (5,4), (8,9),(9,8)] \\<rparr>\n    ((\\<lambda>e. SINVAR_NonInterference.default_node_properties)(1:= Interfering, 2:= Unrelated, 3:= Unrelated, 4:= Unrelated))\""], ["", "value \"sinvar \n    \\<lparr> nodesL = [1::nat], edgesL = [(1,1)] \\<rparr>\n    ((\\<lambda>e. SINVAR_NonInterference.default_node_properties)(1:= Interfering))\""], ["", "value \"(undirected_reachable \\<lparr> nodesL = [1::nat], edgesL = [(1,1)] \\<rparr> 1) = []\""], ["", "(* apply(simp add: removeAll_def remdups_def undirected_reachable_def succ_tran_def trancl_list_impl_def trancl_impl_def) *)"], ["", "definition NonInterference_offending_list:: \"'v list_graph \\<Rightarrow> ('v \\<Rightarrow> node_config) \\<Rightarrow> ('v \\<times> 'v) list list\" where\n  \"NonInterference_offending_list = Generic_offending_list sinvar\""], ["", "definition \"NetModel_node_props P = (\\<lambda> i. (case (node_properties P) i of Some property \\<Rightarrow> property | None \\<Rightarrow> SINVAR_NonInterference.default_node_properties))\""], ["", "lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_NonInterference.default_node_properties P = NetModel_node_props P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NonInterference.node_props P = NetModel_node_props P", "apply(simp add: NetModel_node_props_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"NonInterference_eval G P = (wf_list_graph G \\<and>\n  sinvar G (SecurityInvariant.node_props SINVAR_NonInterference.default_node_properties P))\""], ["", "lemma sinvar_correct: \"wf_list_graph G \\<Longrightarrow> SINVAR_NonInterference.sinvar (list_graph_to_graph G) nP = sinvar G nP\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph G \\<Longrightarrow>\n    SINVAR_NonInterference.sinvar (list_graph_to_graph G) nP = sinvar G nP", "apply(simp add: sinvar_list_eq_set)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph G \\<Longrightarrow>\n    (\\<forall>n\\<in>nodes (list_graph_to_graph G).\n        nP n = Interfering \\<longrightarrow>\n        nP `\n        SINVAR_NonInterference.undirected_reachable (list_graph_to_graph G)\n         n\n        \\<subseteq> {Unrelated}) =\n    (\\<forall>n\\<in>set (nodesL G).\n        nP n = Interfering \\<longrightarrow>\n        nP ` set (SINVAR_NonInterference_impl.undirected_reachable G n)\n        \\<subseteq> {Unrelated})", "apply(rule all_nodes_list_I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph G \\<Longrightarrow>\n    (\\<lambda>a.\n        nP a = Interfering \\<longrightarrow>\n        nP `\n        SINVAR_NonInterference.undirected_reachable (list_graph_to_graph G)\n         a\n        \\<subseteq> {Unrelated}) =\n    (\\<lambda>a.\n        nP a = Interfering \\<longrightarrow>\n        nP ` set (SINVAR_NonInterference_impl.undirected_reachable G a)\n        \\<subseteq> {Unrelated})", "by (simp add: SINVAR_NonInterference.undirected_reachable_def succ_tran_correct undirected_correct undirected_reachable_def)"], ["", "interpretation NonInterference_impl:TopoS_List_Impl \n  where default_node_properties=SINVAR_NonInterference.default_node_properties\n  and sinvar_spec=SINVAR_NonInterference.sinvar\n  and sinvar_impl=sinvar\n  and receiver_violation=SINVAR_NonInterference.receiver_violation\n  and offending_flows_impl=NonInterference_offending_list\n  and node_props_impl=NetModel_node_props\n  and eval_impl=NonInterference_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_NonInterference.default_node_properties\n     SINVAR_NonInterference.sinvar sinvar\n     SINVAR_NonInterference.receiver_violation\n     NonInterference_offending_list NetModel_node_props NonInterference_eval", "apply(unfold TopoS_List_Impl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SecurityInvariant SINVAR_NonInterference.sinvar\n      SINVAR_NonInterference.default_node_properties\n      SINVAR_NonInterference.receiver_violation \\<and>\n     (\\<forall>G nP.\n         wf_list_graph G \\<longrightarrow>\n         SINVAR_NonInterference.sinvar (list_graph_to_graph G) nP =\n         sinvar G nP)) \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (NonInterference_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        NonInterference.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         NonInterference.eval (list_graph_to_graph G) P) =\n        NonInterference_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SecurityInvariant SINVAR_NonInterference.sinvar\n     SINVAR_NonInterference.default_node_properties\n     SINVAR_NonInterference.receiver_violation \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SINVAR_NonInterference.sinvar (list_graph_to_graph G) nP =\n        sinvar G nP)\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (NonInterference_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        NonInterference.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         NonInterference.eval (list_graph_to_graph G) P) =\n        NonInterference_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. SecurityInvariant SINVAR_NonInterference.sinvar\n     SINVAR_NonInterference.default_node_properties\n     SINVAR_NonInterference.receiver_violation\n 2. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       SINVAR_NonInterference.sinvar (list_graph_to_graph G) nP =\n       sinvar G nP\n 3. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (NonInterference_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        NonInterference.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         NonInterference.eval (list_graph_to_graph G) P) =\n        NonInterference_eval G P)", "apply(simp add: TopoS_NonInterference; fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       SINVAR_NonInterference.sinvar (list_graph_to_graph G) nP =\n       sinvar G nP\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (NonInterference_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        NonInterference.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         NonInterference.eval (list_graph_to_graph G) P) =\n        NonInterference_eval G P)", "apply(intro allI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP.\n       wf_list_graph G \\<Longrightarrow>\n       SINVAR_NonInterference.sinvar (list_graph_to_graph G) nP =\n       sinvar G nP\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (NonInterference_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        NonInterference.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         NonInterference.eval (list_graph_to_graph G) P) =\n        NonInterference_eval G P)", "apply(fact sinvar_correct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (NonInterference_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        NonInterference.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         NonInterference.eval (list_graph_to_graph G) P) =\n        NonInterference_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (NonInterference_offending_list G nP)\n 2. (\\<forall>P.\n        NonInterference.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         NonInterference.eval (list_graph_to_graph G) P) =\n        NonInterference_eval G P)", "apply(unfold NonInterference_offending_list_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (Generic_offending_list sinvar G nP)\n 2. (\\<forall>P.\n        NonInterference.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         NonInterference.eval (list_graph_to_graph G) P) =\n        NonInterference_eval G P)", "apply(intro allI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP.\n       wf_list_graph G \\<Longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (Generic_offending_list sinvar G nP)\n 2. (\\<forall>P.\n        NonInterference.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         NonInterference.eval (list_graph_to_graph G) P) =\n        NonInterference_eval G P)", "apply(rule Generic_offending_list_correct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP. wf_list_graph G \\<Longrightarrow> wf_list_graph G\n 2. \\<And>G nP Ga nPa.\n       \\<lbrakk>wf_list_graph G; wf_list_graph Ga\\<rbrakk>\n       \\<Longrightarrow> SINVAR_NonInterference.sinvar\n                          (list_graph_to_graph Ga) nPa =\n                         sinvar Ga nPa\n 3. (\\<forall>P.\n        NonInterference.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         NonInterference.eval (list_graph_to_graph G) P) =\n        NonInterference_eval G P)", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP Ga nPa.\n       \\<lbrakk>wf_list_graph G; wf_list_graph Ga\\<rbrakk>\n       \\<Longrightarrow> SINVAR_NonInterference.sinvar\n                          (list_graph_to_graph Ga) nPa =\n                         sinvar Ga nPa\n 2. (\\<forall>P.\n        NonInterference.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         NonInterference.eval (list_graph_to_graph G) P) =\n        NonInterference_eval G P)", "apply(simp only: sinvar_correct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P.\n        NonInterference.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         NonInterference.eval (list_graph_to_graph G) P) =\n        NonInterference_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       NonInterference.node_props_formaldef P = NetModel_node_props P\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        NonInterference.eval (list_graph_to_graph G) P) =\n       NonInterference_eval G P", "apply(intro allI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P. NonInterference.node_props_formaldef P = NetModel_node_props P\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        NonInterference.eval (list_graph_to_graph G) P) =\n       NonInterference_eval G P", "apply(simp only: NetModel_node_props_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P.\n       NonInterference.node_props_formaldef P =\n       (\\<lambda>i.\n           case node_properties P i of\n           None \\<Rightarrow> SINVAR_NonInterference.default_node_properties\n           | Some property \\<Rightarrow> property)\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        NonInterference.eval (list_graph_to_graph G) P) =\n       NonInterference_eval G P", "apply(metis NonInterference.node_props.simps NonInterference.node_props_eq_node_props_formaldef)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        NonInterference.eval (list_graph_to_graph G) P) =\n       NonInterference_eval G P", "apply(simp only: NonInterference_eval_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        NonInterference.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and> sinvar G (NonInterference.node_props P))", "apply(intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        NonInterference.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and> sinvar G (NonInterference.node_props P))", "apply(rule TopoS_eval_impl_proofrule[OF TopoS_NonInterference])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G P nP.\n       wf_list_graph G \\<Longrightarrow>\n       SINVAR_NonInterference.sinvar (list_graph_to_graph G) nP =\n       sinvar G nP", "apply(simp only: sinvar_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>NonInterference packing\\<close>"], ["", "definition SINVAR_LIB_NonInterference :: \"('v::vertex, node_config) TopoS_packed\" where\n    \"SINVAR_LIB_NonInterference \\<equiv> \n    \\<lparr> nm_name = ''NonInterference'', \n      nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n      nm_default = SINVAR_NonInterference.default_node_properties, \n      nm_sinvar = sinvar,\n      nm_offending_flows = NonInterference_offending_list, \n      nm_node_props = NetModel_node_props,\n      nm_eval = NonInterference_eval\n      \\<rparr>\""], ["", "interpretation SINVAR_LIB_NonInterference_interpretation: TopoS_modelLibrary SINVAR_LIB_NonInterference\n      SINVAR_NonInterference.sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_modelLibrary SINVAR_LIB_NonInterference\n     SINVAR_NonInterference.sinvar", "apply(unfold TopoS_modelLibrary_def SINVAR_LIB_NonInterference_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''NonInterference'',\n              nm_receiver_violation =\n                SINVAR_NonInterference.receiver_violation,\n              nm_default = SINVAR_NonInterference.default_node_properties,\n              nm_sinvar = sinvar,\n              nm_offending_flows = NonInterference_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = NonInterference_eval\\<rparr>) \\<and>\n    TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)\n     SINVAR_NonInterference.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''NonInterference'',\n              nm_receiver_violation =\n                SINVAR_NonInterference.receiver_violation,\n              nm_default = SINVAR_NonInterference.default_node_properties,\n              nm_sinvar = sinvar,\n              nm_offending_flows = NonInterference_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = NonInterference_eval\\<rparr>)\n 2. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)\n     SINVAR_NonInterference.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)\n     SINVAR_NonInterference.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''NonInterference'',\n          nm_receiver_violation = SINVAR_NonInterference.receiver_violation,\n          nm_default = SINVAR_NonInterference.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = NonInterference_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = NonInterference_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_NonInterference.default_node_properties\n     SINVAR_NonInterference.sinvar sinvar\n     SINVAR_NonInterference.receiver_violation\n     NonInterference_offending_list NetModel_node_props NonInterference_eval", "by(unfold_locales)"], ["", "text \\<open>Example:\\<close>"], ["", "context begin"], ["", "private"], ["", "definition \"example_graph = \\<lparr> nodesL = [1::nat,2,3,4,5, 8,9,10], edgesL = [(1,2), (2,3), (3,4), (5,4), (8,9), (9,8)] \\<rparr>\""], ["", "private"], ["", "definition\"example_conf = ((\\<lambda>e. SINVAR_NonInterference.default_node_properties)\n      (1:= Interfering, 2:= Unrelated, 3:= Unrelated, 4:= Unrelated, 8:= Unrelated, 9:= Unrelated))\""], ["", "private"], ["", "lemma \"\\<not> sinvar example_graph example_conf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> sinvar example_graph example_conf", "by eval"], ["", "private"], ["", "lemma \"NonInterference_offending_list example_graph example_conf =\n                     [[(1, 2)], [(2, 3)], [(3, 4)], [(5, 4)]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NonInterference_offending_list example_graph example_conf =\n    [[(1, 2)], [(2, 3)], [(3, 4)], [(5, 4)]]", "by eval"], ["", "end"], ["", "hide_const (open) NetModel_node_props"], ["", "hide_const (open) sinvar"], ["", "end"]]}