{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/TopoS_Stateful_Policy_impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma stateful_list_policy_to_list_graph_complies:\n  \"list_graph_to_graph (stateful_list_policy_to_list_graph \\<lparr> hostsL = V, flows_fixL = E\\<^sub>f, flows_stateL = E\\<^sub>\\<sigma> \\<rparr>) = \n    stateful_policy_to_network_graph \\<lparr> hosts = set V, flows_fix = set E\\<^sub>f, flows_state = set E\\<^sub>\\<sigma> \\<rparr>\"", "lemma wf_list_graph_stateful_list_policy_to_list_graph: \n    \"wf_list_graph G \\<Longrightarrow> distinct E \\<Longrightarrow> set E \\<subseteq> set (edgesL G) \\<Longrightarrow> wf_list_graph (stateful_list_policy_to_list_graph \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G, flows_stateL = E\\<rparr>)\"", "lemma filter_IFS_no_violations_accu_distinct: \"\\<lbrakk> distinct (Es@accu) \\<rbrakk> \\<Longrightarrow> distinct (filter_IFS_no_violations_accu G M accu Es)\"", "lemma filter_IFS_no_violations_accu_complies:\n    \"\\<lbrakk>\\<forall> (m_impl, m_spec) \\<in> set M. SecurityInvariant_complies_formal_def m_impl m_spec;\n      wf_list_graph G; set Es \\<subseteq> set (edgesL G); set accu \\<subseteq> set (edgesL G); distinct (Es@accu) \\<rbrakk> \\<Longrightarrow>\n      filter_IFS_no_violations_accu G (get_impl M) accu Es = TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu (list_graph_to_graph G) (get_spec M) accu Es\"", "lemma filter_IFS_no_violations_complies:\n    \"\\<lbrakk> \\<forall> (m_impl, m_spec) \\<in> set M. SecurityInvariant_complies_formal_def m_impl m_spec; wf_list_graph G \\<rbrakk> \\<Longrightarrow>\n       filter_IFS_no_violations G (get_impl M) = TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations (list_graph_to_graph G) (get_spec M) (edgesL G)\"", "lemma filter_compliant_stateful_ACS_accu_complies: \n    \"\\<lbrakk>\\<forall> (m_impl, m_spec) \\<in> set M. SecurityInvariant_complies_formal_def m_impl m_spec;\n      wf_list_graph G; set Es \\<subseteq> set (edgesL G); set accu \\<subseteq> set (edgesL G); distinct (Es@accu) \\<rbrakk> \\<Longrightarrow>\n      filter_compliant_stateful_ACS_accu G (get_impl M) accu Es = TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu (list_graph_to_graph G) (get_spec M) accu Es\"", "lemma filter_compliant_stateful_ACS_cont_complies:\n    \"\\<lbrakk> \\<forall> (m_impl, m_spec) \\<in> set M. SecurityInvariant_complies_formal_def m_impl m_spec; wf_list_graph G; set Es \\<subseteq> set (edgesL G); distinct Es \\<rbrakk> \\<Longrightarrow>\n       filter_compliant_stateful_ACS_accu G (get_impl M) [] Es = TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS (list_graph_to_graph G) (get_spec M) Es\"", "lemma filter_compliant_stateful_ACS_complies:\n    \"\\<lbrakk> \\<forall> (m_impl, m_spec) \\<in> set M. SecurityInvariant_complies_formal_def m_impl m_spec; wf_list_graph G \\<rbrakk> \\<Longrightarrow>\n       filter_compliant_stateful_ACS G (get_impl M) = TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS (list_graph_to_graph G) (get_spec M) (edgesL G)\"", "lemma inefficient_list_intersect_correct: \"set (inefficient_list_intersect a b) = (set a) \\<inter> (set b)\"", "lemma generate_valid_stateful_policy_IFSACS_2_complies: \"\\<lbrakk>\\<forall> (m_impl, m_spec) \\<in> set M. SecurityInvariant_complies_formal_def m_impl m_spec;\n          wf_list_graph G;\n          valid_reqs (get_spec M);\n          TopoS_Composition_Theory.all_security_requirements_fulfilled (get_spec M) (list_graph_to_graph G);\n          \\<T> = (generate_valid_stateful_policy_IFSACS_2 G (get_impl M))\\<rbrakk> \\<Longrightarrow> \n   stateful_policy_compliance \\<lparr>hosts = set (hostsL \\<T>), flows_fix = set (flows_fixL \\<T>), flows_state = set (flows_stateL \\<T>) \\<rparr> (list_graph_to_graph G) (get_spec M)\""], "translations": [["", "lemma stateful_list_policy_to_list_graph_complies:\n  \"list_graph_to_graph (stateful_list_policy_to_list_graph \\<lparr> hostsL = V, flows_fixL = E\\<^sub>f, flows_stateL = E\\<^sub>\\<sigma> \\<rparr>) = \n    stateful_policy_to_network_graph \\<lparr> hosts = set V, flows_fix = set E\\<^sub>f, flows_state = set E\\<^sub>\\<sigma> \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_graph_to_graph\n     (stateful_list_policy_to_list_graph\n       \\<lparr>hostsL = V, flows_fixL = E\\<^sub>f,\n          flows_stateL = E\\<^sub>\\<sigma>\\<rparr>) =\n    stateful_policy_to_network_graph\n     \\<lparr>hosts = set V, flows_fix = set E\\<^sub>f,\n        flows_state = set E\\<^sub>\\<sigma>\\<rparr>", "by(simp add: stateful_list_policy_to_list_graph_def stateful_policy_to_network_graph_def all_flows_def list_graph_to_graph_def backlinks_correct, blast)"], ["", "lemma wf_list_graph_stateful_list_policy_to_list_graph: \n    \"wf_list_graph G \\<Longrightarrow> distinct E \\<Longrightarrow> set E \\<subseteq> set (edgesL G) \\<Longrightarrow> wf_list_graph (stateful_list_policy_to_list_graph \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G, flows_stateL = E\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_list_graph G; distinct E;\n     set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> wf_list_graph\n                       (stateful_list_policy_to_list_graph\n                         \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n                            flows_stateL = E\\<rparr>)", "apply(simp add: wf_list_graph_def stateful_list_policy_to_list_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and> wf_list_graph_axioms G;\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                         (backlinks E)) \\<and>\n                      {x \\<in> set E. x \\<notin> set (edgesL G)} \\<inter>\n                      {x \\<in> set (backlinks E).\n                       x \\<notin> set (edgesL G)} =\n                      {} \\<and>\n                      set (edgesL G) \\<inter>\n                      ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                       {x \\<in> set (backlinks E).\n                        x \\<notin> set (edgesL G)}) =\n                      {} \\<and>\n                      wf_list_graph_axioms\n                       \\<lparr>nodesL = nodesL G,\n                          edgesL =\n                            edgesL G @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             E @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             (backlinks E)\\<rparr>", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and> wf_list_graph_axioms G;\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                         (backlinks E))\n 2. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and> wf_list_graph_axioms G;\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> {x \\<in> set E. x \\<notin> set (edgesL G)} \\<inter>\n                      {x \\<in> set (backlinks E).\n                       x \\<notin> set (edgesL G)} =\n                      {} \\<and>\n                      set (edgesL G) \\<inter>\n                      ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                       {x \\<in> set (backlinks E).\n                        x \\<notin> set (edgesL G)}) =\n                      {} \\<and>\n                      wf_list_graph_axioms\n                       \\<lparr>nodesL = nodesL G,\n                          edgesL =\n                            edgesL G @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             E @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             (backlinks E)\\<rparr>", "apply(simp add: backlinks_distinct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and> wf_list_graph_axioms G;\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> {x \\<in> set E. x \\<notin> set (edgesL G)} \\<inter>\n                      {x \\<in> set (backlinks E).\n                       x \\<notin> set (edgesL G)} =\n                      {} \\<and>\n                      set (edgesL G) \\<inter>\n                      ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                       {x \\<in> set (backlinks E).\n                        x \\<notin> set (edgesL G)}) =\n                      {} \\<and>\n                      wf_list_graph_axioms\n                       \\<lparr>nodesL = nodesL G,\n                          edgesL =\n                            edgesL G @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             E @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             (backlinks E)\\<rparr>", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and> wf_list_graph_axioms G;\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> {x \\<in> set E. x \\<notin> set (edgesL G)} \\<inter>\n                      {x \\<in> set (backlinks E).\n                       x \\<notin> set (edgesL G)} =\n                      {}\n 2. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and> wf_list_graph_axioms G;\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> set (edgesL G) \\<inter>\n                      ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                       {x \\<in> set (backlinks E).\n                        x \\<notin> set (edgesL G)}) =\n                      {} \\<and>\n                      wf_list_graph_axioms\n                       \\<lparr>nodesL = nodesL G,\n                          edgesL =\n                            edgesL G @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             E @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             (backlinks E)\\<rparr>", "apply(simp add: backlinks_set)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and> wf_list_graph_axioms G;\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> {x \\<in> set E. x \\<notin> set (edgesL G)} \\<inter>\n                      {x. (case x of\n                           (e2, e1) \\<Rightarrow>\n                             (e1, e2) \\<in> set E) \\<and>\n                          x \\<notin> set (edgesL G)} =\n                      {}\n 2. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and> wf_list_graph_axioms G;\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> set (edgesL G) \\<inter>\n                      ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                       {x \\<in> set (backlinks E).\n                        x \\<notin> set (edgesL G)}) =\n                      {} \\<and>\n                      wf_list_graph_axioms\n                       \\<lparr>nodesL = nodesL G,\n                          edgesL =\n                            edgesL G @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             E @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             (backlinks E)\\<rparr>", "apply(blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and> wf_list_graph_axioms G;\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> set (edgesL G) \\<inter>\n                      ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                       {x \\<in> set (backlinks E).\n                        x \\<notin> set (edgesL G)}) =\n                      {} \\<and>\n                      wf_list_graph_axioms\n                       \\<lparr>nodesL = nodesL G,\n                          edgesL =\n                            edgesL G @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             E @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             (backlinks E)\\<rparr>", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and> wf_list_graph_axioms G;\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> set (edgesL G) \\<inter>\n                      ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                       {x \\<in> set (backlinks E).\n                        x \\<notin> set (edgesL G)}) =\n                      {}\n 2. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and> wf_list_graph_axioms G;\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> wf_list_graph_axioms\n                       \\<lparr>nodesL = nodesL G,\n                          edgesL =\n                            edgesL G @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             E @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             (backlinks E)\\<rparr>", "apply(simp add: backlinks_set)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and> wf_list_graph_axioms G;\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> set (edgesL G) \\<inter>\n                      ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                       {x. (case x of\n                            (e2, e1) \\<Rightarrow>\n                              (e1, e2) \\<in> set E) \\<and>\n                           x \\<notin> set (edgesL G)}) =\n                      {}\n 2. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and> wf_list_graph_axioms G;\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> wf_list_graph_axioms\n                       \\<lparr>nodesL = nodesL G,\n                          edgesL =\n                            edgesL G @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             E @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             (backlinks E)\\<rparr>", "apply(blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and> wf_list_graph_axioms G;\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> wf_list_graph_axioms\n                       \\<lparr>nodesL = nodesL G,\n                          edgesL =\n                            edgesL G @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             E @\n                            filter (\\<lambda>e. e \\<notin> set (edgesL G))\n                             (backlinks E)\\<rparr>", "apply(simp add: wf_list_graph_axioms_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and>\n             fst ` set (edgesL G) \\<subseteq> set (nodesL G) \\<and>\n             snd ` set (edgesL G) \\<subseteq> set (nodesL G);\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> fst `\n                      (set (edgesL G) \\<union>\n                       ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                        {x \\<in> set (backlinks E).\n                         x \\<notin> set (edgesL G)}))\n                      \\<subseteq> set (nodesL G) \\<and>\n                      snd `\n                      (set (edgesL G) \\<union>\n                       ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                        {x \\<in> set (backlinks E).\n                         x \\<notin> set (edgesL G)}))\n                      \\<subseteq> set (nodesL G)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and>\n             fst ` set (edgesL G) \\<subseteq> set (nodesL G) \\<and>\n             snd ` set (edgesL G) \\<subseteq> set (nodesL G);\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> fst `\n                      (set (edgesL G) \\<union>\n                       ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                        {x \\<in> set (backlinks E).\n                         x \\<notin> set (edgesL G)}))\n                      \\<subseteq> set (nodesL G)\n 2. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and>\n             fst ` set (edgesL G) \\<subseteq> set (nodesL G) \\<and>\n             snd ` set (edgesL G) \\<subseteq> set (nodesL G);\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> snd `\n                      (set (edgesL G) \\<union>\n                       ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                        {x \\<in> set (backlinks E).\n                         x \\<notin> set (edgesL G)}))\n                      \\<subseteq> set (nodesL G)", "apply(simp add: backlinks_set)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and>\n             fst ` set (edgesL G) \\<subseteq> set (nodesL G) \\<and>\n             snd ` set (edgesL G) \\<subseteq> set (nodesL G);\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> fst `\n                      (set (edgesL G) \\<union>\n                       ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                        {x. (case x of\n                             (e2, e1) \\<Rightarrow>\n                               (e1, e2) \\<in> set E) \\<and>\n                            x \\<notin> set (edgesL G)}))\n                      \\<subseteq> set (nodesL G)\n 2. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and>\n             fst ` set (edgesL G) \\<subseteq> set (nodesL G) \\<and>\n             snd ` set (edgesL G) \\<subseteq> set (nodesL G);\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> snd `\n                      (set (edgesL G) \\<union>\n                       ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                        {x \\<in> set (backlinks E).\n                         x \\<notin> set (edgesL G)}))\n                      \\<subseteq> set (nodesL G)", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and>\n             fst ` set (edgesL G) \\<subseteq> set (nodesL G) \\<and>\n             snd ` set (edgesL G) \\<subseteq> set (nodesL G);\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> snd `\n                      (set (edgesL G) \\<union>\n                       ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                        {x \\<in> set (backlinks E).\n                         x \\<notin> set (edgesL G)}))\n                      \\<subseteq> set (nodesL G)", "apply(simp add: backlinks_set)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (nodesL G) \\<and>\n             distinct (edgesL G) \\<and>\n             fst ` set (edgesL G) \\<subseteq> set (nodesL G) \\<and>\n             snd ` set (edgesL G) \\<subseteq> set (nodesL G);\n     distinct E; set E \\<subseteq> set (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> snd `\n                      (set (edgesL G) \\<union>\n                       ({x \\<in> set E. x \\<notin> set (edgesL G)} \\<union>\n                        {x. (case x of\n                             (e2, e1) \\<Rightarrow>\n                               (e1, e2) \\<in> set E) \\<and>\n                            x \\<notin> set (edgesL G)}))\n                      \\<subseteq> set (nodesL G)", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>distinct E; set E \\<subseteq> set (edgesL G);\n        (a, b) \\<in> set (edgesL G) \\<or>\n        (a, b) \\<in> set E \\<and> (a, b) \\<notin> set (edgesL G) \\<or>\n        (b, a) \\<in> set E \\<and> (a, b) \\<notin> set (edgesL G);\n        distinct (nodesL G); distinct (edgesL G);\n        fst ` set (edgesL G) \\<subseteq> set (nodesL G);\n        snd ` set (edgesL G) \\<subseteq> set (nodesL G)\\<rbrakk>\n       \\<Longrightarrow> b \\<in> set (nodesL G)", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>distinct E; set E \\<subseteq> set (edgesL G);\n        distinct (nodesL G); distinct (edgesL G);\n        fst ` set (edgesL G) \\<subseteq> set (nodesL G);\n        snd ` set (edgesL G) \\<subseteq> set (nodesL G);\n        (a, b) \\<in> set (edgesL G)\\<rbrakk>\n       \\<Longrightarrow> b \\<in> set (nodesL G)\n 2. \\<And>a b.\n       \\<lbrakk>distinct E; set E \\<subseteq> set (edgesL G);\n        distinct (nodesL G); distinct (edgesL G);\n        fst ` set (edgesL G) \\<subseteq> set (nodesL G);\n        snd ` set (edgesL G) \\<subseteq> set (nodesL G);\n        (a, b) \\<in> set E \\<and> (a, b) \\<notin> set (edgesL G) \\<or>\n        (b, a) \\<in> set E \\<and> (a, b) \\<notin> set (edgesL G)\\<rbrakk>\n       \\<Longrightarrow> b \\<in> set (nodesL G)", "apply(auto)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>distinct E; set E \\<subseteq> set (edgesL G);\n        distinct (nodesL G); distinct (edgesL G);\n        fst ` set (edgesL G) \\<subseteq> set (nodesL G);\n        snd ` set (edgesL G) \\<subseteq> set (nodesL G);\n        (a, b) \\<in> set E \\<and> (a, b) \\<notin> set (edgesL G) \\<or>\n        (b, a) \\<in> set E \\<and> (a, b) \\<notin> set (edgesL G)\\<rbrakk>\n       \\<Longrightarrow> b \\<in> set (nodesL G)", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>distinct E; set E \\<subseteq> set (edgesL G);\n        distinct (nodesL G); distinct (edgesL G);\n        fst ` set (edgesL G) \\<subseteq> set (nodesL G);\n        snd ` set (edgesL G) \\<subseteq> set (nodesL G);\n        (a, b) \\<in> set E \\<and> (a, b) \\<notin> set (edgesL G)\\<rbrakk>\n       \\<Longrightarrow> b \\<in> set (nodesL G)\n 2. \\<And>a b.\n       \\<lbrakk>distinct E; set E \\<subseteq> set (edgesL G);\n        distinct (nodesL G); distinct (edgesL G);\n        fst ` set (edgesL G) \\<subseteq> set (nodesL G);\n        snd ` set (edgesL G) \\<subseteq> set (nodesL G);\n        (b, a) \\<in> set E \\<and> (a, b) \\<notin> set (edgesL G)\\<rbrakk>\n       \\<Longrightarrow> b \\<in> set (nodesL G)", "apply(auto)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>distinct E; set E \\<subseteq> set (edgesL G);\n        distinct (nodesL G); distinct (edgesL G);\n        fst ` set (edgesL G) \\<subseteq> set (nodesL G);\n        snd ` set (edgesL G) \\<subseteq> set (nodesL G);\n        (b, a) \\<in> set E \\<and> (a, b) \\<notin> set (edgesL G)\\<rbrakk>\n       \\<Longrightarrow> b \\<in> set (nodesL G)", "by force"], ["", "subsection\\<open>Algorithms\\<close>"], ["", "fun filter_IFS_no_violations_accu :: \"'v list_graph \\<Rightarrow> 'v SecurityInvariant list \\<Rightarrow> ('v \\<times> 'v) list \\<Rightarrow> ('v \\<times> 'v) list \\<Rightarrow> ('v \\<times> 'v) list\" where\n      \"filter_IFS_no_violations_accu G M accu [] = accu\" |\n      \"filter_IFS_no_violations_accu G M accu (e#Es) = (if\n        all_security_requirements_fulfilled (TopoS_Composition_Theory_impl.get_IFS M) (stateful_list_policy_to_list_graph \\<lparr> hostsL = nodesL G, flows_fixL = edgesL G, flows_stateL = (e#accu) \\<rparr>)\n        then filter_IFS_no_violations_accu G M (e#accu) Es\n        else filter_IFS_no_violations_accu G M accu Es)\""], ["", "definition filter_IFS_no_violations :: \"'v list_graph \\<Rightarrow> 'v SecurityInvariant list \\<Rightarrow> ('v \\<times> 'v) list\" where\n      \"filter_IFS_no_violations G M = filter_IFS_no_violations_accu G M [] (edgesL G)\""], ["", "lemma filter_IFS_no_violations_accu_distinct: \"\\<lbrakk> distinct (Es@accu) \\<rbrakk> \\<Longrightarrow> distinct (filter_IFS_no_violations_accu G M accu Es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (Es @ accu) \\<Longrightarrow>\n    distinct\n     (TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G M accu Es)", "apply(induction Es arbitrary: accu)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>accu.\n       distinct ([] @ accu) \\<Longrightarrow>\n       distinct\n        (TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G M accu\n          [])\n 2. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   distinct (Es @ accu) \\<Longrightarrow>\n                   distinct\n                    (TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                      G M accu Es);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                            G M accu (a # Es))", "by(simp_all)"], ["", "lemma filter_IFS_no_violations_accu_complies:\n    \"\\<lbrakk>\\<forall> (m_impl, m_spec) \\<in> set M. SecurityInvariant_complies_formal_def m_impl m_spec;\n      wf_list_graph G; set Es \\<subseteq> set (edgesL G); set accu \\<subseteq> set (edgesL G); distinct (Es@accu) \\<rbrakk> \\<Longrightarrow>\n      filter_IFS_no_violations_accu G (get_impl M) accu Es = TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu (list_graph_to_graph G) (get_spec M) accu Es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n     set accu \\<subseteq> set (edgesL G); distinct (Es @ accu)\\<rbrakk>\n    \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                       G (get_impl M) accu Es =\n                      TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                       (list_graph_to_graph G) (get_spec M) accu Es", "proof(induction Es arbitrary: accu)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>accu.\n       \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                   SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set [] \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G); distinct ([] @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu [] =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu []\n 2. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "case Nil"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set M.\n     case a of\n     (a, b) \\<Rightarrow> SecurityInvariant_complies_formal_def a b\n  wf_list_graph G\n  set [] \\<subseteq> set (edgesL G)\n  set accu \\<subseteq> set (edgesL G)\n  distinct ([] @ accu)\n\ngoal (2 subgoals):\n 1. \\<And>accu.\n       \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                   SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set [] \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G); distinct ([] @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu [] =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu []\n 2. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set M.\n     case a of\n     (a, b) \\<Rightarrow> SecurityInvariant_complies_formal_def a b\n  wf_list_graph G\n  set [] \\<subseteq> set (edgesL G)\n  set accu \\<subseteq> set (edgesL G)\n  distinct ([] @ accu)\n\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu [] =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu []", "by(simp add: get_impl_def get_spec_def)"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n   accu [] =\n  TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n   (list_graph_to_graph G) (get_spec M) accu []\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "case (Cons e Es)\n        \\<comment> \\<open>@{thm Cons.IH[OF Cons.prems(1) Cons.prems(2)]}\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>a\\<in>set M.\n              case a of\n              (a, b) \\<Rightarrow>\n                SecurityInvariant_complies_formal_def a b;\n   wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n   set ?accu \\<subseteq> set (edgesL G); distinct (Es @ ?accu)\\<rbrakk>\n  \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                     G (get_impl M) ?accu Es =\n                    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                     (list_graph_to_graph G) (get_spec M) ?accu Es\n  \\<forall>a\\<in>set M.\n     case a of\n     (a, b) \\<Rightarrow> SecurityInvariant_complies_formal_def a b\n  wf_list_graph G\n  set (e # Es) \\<subseteq> set (edgesL G)\n  set accu \\<subseteq> set (edgesL G)\n  distinct ((e # Es) @ accu)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "let ?caseDistinction = \"all_security_requirements_fulfilled (TopoS_Composition_Theory_impl.get_IFS (get_impl M)) (stateful_list_policy_to_list_graph \\<lparr> hostsL = nodesL G, flows_fixL = edgesL G, flows_stateL = (e#accu) \\<rparr>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from get_IFS_get_ACS_select_simps(2)[OF Cons.prems(1)]"], ["proof (chain)\npicking this:\n  get_impl\n   (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n     (TopoS_Composition_Theory.get_IFS (get_spec M))) =\n  TopoS_Composition_Theory_impl.get_IFS (get_impl M)", "have get_impl_zip_simp: \"(get_impl (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl M)) (TopoS_Composition_Theory.get_IFS (get_spec M)))) = TopoS_Composition_Theory_impl.get_IFS (get_impl M)\""], ["proof (prove)\nusing this:\n  get_impl\n   (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n     (TopoS_Composition_Theory.get_IFS (get_spec M))) =\n  TopoS_Composition_Theory_impl.get_IFS (get_impl M)\n\ngoal (1 subgoal):\n 1. get_impl\n     (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n       (TopoS_Composition_Theory.get_IFS (get_spec M))) =\n    TopoS_Composition_Theory_impl.get_IFS (get_impl M)", "by simp"], ["proof (state)\nthis:\n  get_impl\n   (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n     (TopoS_Composition_Theory.get_IFS (get_spec M))) =\n  TopoS_Composition_Theory_impl.get_IFS (get_impl M)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from get_IFS_get_ACS_select_simps(3)[OF Cons.prems(1)]"], ["proof (chain)\npicking this:\n  get_spec\n   (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n     (TopoS_Composition_Theory.get_IFS (get_spec M))) =\n  TopoS_Composition_Theory.get_IFS (get_spec M)", "have get_spec_zip_simp: \"(get_spec (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl M)) (TopoS_Composition_Theory.get_IFS (get_spec M)))) = TopoS_Composition_Theory.get_IFS (get_spec M)\""], ["proof (prove)\nusing this:\n  get_spec\n   (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n     (TopoS_Composition_Theory.get_IFS (get_spec M))) =\n  TopoS_Composition_Theory.get_IFS (get_spec M)\n\ngoal (1 subgoal):\n 1. get_spec\n     (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n       (TopoS_Composition_Theory.get_IFS (get_spec M))) =\n    TopoS_Composition_Theory.get_IFS (get_spec M)", "by simp"], ["proof (state)\nthis:\n  get_spec\n   (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n     (TopoS_Composition_Theory.get_IFS (get_spec M))) =\n  TopoS_Composition_Theory.get_IFS (get_spec M)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from Cons.prems(3) Cons.prems(4)"], ["proof (chain)\npicking this:\n  set (e # Es) \\<subseteq> set (edgesL G)\n  set accu \\<subseteq> set (edgesL G)", "have \"set (e # accu) \\<subseteq> set (edgesL G)\""], ["proof (prove)\nusing this:\n  set (e # Es) \\<subseteq> set (edgesL G)\n  set accu \\<subseteq> set (edgesL G)\n\ngoal (1 subgoal):\n 1. set (e # accu) \\<subseteq> set (edgesL G)", "by simp"], ["proof (state)\nthis:\n  set (e # accu) \\<subseteq> set (edgesL G)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from Cons.prems(4)"], ["proof (chain)\npicking this:\n  set accu \\<subseteq> set (edgesL G)", "have \"set (accu) \\<subseteq> set (edgesL G)\""], ["proof (prove)\nusing this:\n  set accu \\<subseteq> set (edgesL G)\n\ngoal (1 subgoal):\n 1. set accu \\<subseteq> set (edgesL G)", "by simp"], ["proof (state)\nthis:\n  set accu \\<subseteq> set (edgesL G)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from Cons.prems(5)"], ["proof (chain)\npicking this:\n  distinct ((e # Es) @ accu)", "have \"distinct (e # accu)\""], ["proof (prove)\nusing this:\n  distinct ((e # Es) @ accu)\n\ngoal (1 subgoal):\n 1. distinct (e # accu)", "by simp"], ["proof (state)\nthis:\n  distinct (e # accu)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from Cons.prems(3)"], ["proof (chain)\npicking this:\n  set (e # Es) \\<subseteq> set (edgesL G)", "have \"set Es \\<subseteq> set (edgesL G)\""], ["proof (prove)\nusing this:\n  set (e # Es) \\<subseteq> set (edgesL G)\n\ngoal (1 subgoal):\n 1. set Es \\<subseteq> set (edgesL G)", "by simp"], ["proof (state)\nthis:\n  set Es \\<subseteq> set (edgesL G)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from Cons.prems(5)"], ["proof (chain)\npicking this:\n  distinct ((e # Es) @ accu)", "have \"distinct (Es @ accu)\""], ["proof (prove)\nusing this:\n  distinct ((e # Es) @ accu)\n\ngoal (1 subgoal):\n 1. distinct (Es @ accu)", "by simp"], ["proof (state)\nthis:\n  distinct (Es @ accu)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from Cons.prems(5)"], ["proof (chain)\npicking this:\n  distinct ((e # Es) @ accu)", "have \"distinct (Es @ (e # accu))\""], ["proof (prove)\nusing this:\n  distinct ((e # Es) @ accu)\n\ngoal (1 subgoal):\n 1. distinct (Es @ e # accu)", "by simp"], ["proof (state)\nthis:\n  distinct (Es @ e # accu)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from Cons.prems(2)"], ["proof (chain)\npicking this:\n  wf_list_graph G", "have validLG: \"wf_list_graph (stateful_list_policy_to_list_graph \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G, flows_stateL = e # accu\\<rparr>)\""], ["proof (prove)\nusing this:\n  wf_list_graph G\n\ngoal (1 subgoal):\n 1. wf_list_graph\n     (stateful_list_policy_to_list_graph\n       \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n          flows_stateL = e # accu\\<rparr>)", "apply(rule wf_list_graph_stateful_list_policy_to_list_graph)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct (e # accu)\n 2. set (e # accu) \\<subseteq> set (edgesL G)", "apply(fact \\<open>distinct (e # accu)\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (e # accu) \\<subseteq> set (edgesL G)", "apply(fact \\<open>set (e # accu) \\<subseteq> set (edgesL G)\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  wf_list_graph\n   (stateful_list_policy_to_list_graph\n     \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n        flows_stateL = e # accu\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from get_IFS_get_ACS_select_simps(1)[OF Cons.prems(1)]"], ["proof (chain)\npicking this:\n  \\<forall>(m_impl, m_spec)\n           \\<in>set (zip (TopoS_Composition_Theory_impl.get_IFS\n                           (get_impl M))\n                      (TopoS_Composition_Theory.get_IFS (get_spec M))).\n     SecurityInvariant_complies_formal_def m_impl m_spec", "have \"\\<forall> (m_impl, m_spec) \\<in> set (zip (get_IFS (get_impl M)) (TopoS_Composition_Theory.get_IFS (get_spec M))). SecurityInvariant_complies_formal_def m_impl m_spec\""], ["proof (prove)\nusing this:\n  \\<forall>(m_impl, m_spec)\n           \\<in>set (zip (TopoS_Composition_Theory_impl.get_IFS\n                           (get_impl M))\n                      (TopoS_Composition_Theory.get_IFS (get_spec M))).\n     SecurityInvariant_complies_formal_def m_impl m_spec\n\ngoal (1 subgoal):\n 1. \\<forall>(m_impl, m_spec)\n             \\<in>set (zip (TopoS_Composition_Theory_impl.get_IFS\n                             (get_impl M))\n                        (TopoS_Composition_Theory.get_IFS (get_spec M))).\n       SecurityInvariant_complies_formal_def m_impl m_spec", "."], ["proof (state)\nthis:\n  \\<forall>(m_impl, m_spec)\n           \\<in>set (zip (TopoS_Composition_Theory_impl.get_IFS\n                           (get_impl M))\n                      (TopoS_Composition_Theory.get_IFS (get_spec M))).\n     SecurityInvariant_complies_formal_def m_impl m_spec\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from all_security_requirements_fulfilled_complies[OF this]"], ["proof (chain)\npicking this:\n  wf_list_graph ?G \\<Longrightarrow>\n  TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n   (get_impl\n     (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n       (TopoS_Composition_Theory.get_IFS (get_spec M))))\n   ?G =\n  TopoS_Composition_Theory.all_security_requirements_fulfilled\n   (get_spec\n     (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n       (TopoS_Composition_Theory.get_IFS (get_spec M))))\n   (list_graph_to_graph ?G)", "have all_security_requirements_fulfilled_eq_rule: \n        \"\\<And>G. wf_list_graph G \\<Longrightarrow>\n            TopoS_Composition_Theory_impl.all_security_requirements_fulfilled (TopoS_Composition_Theory_impl.get_IFS (get_impl M)) G =\n            TopoS_Composition_Theory.all_security_requirements_fulfilled (TopoS_Composition_Theory.get_IFS (get_spec M)) (list_graph_to_graph G)\""], ["proof (prove)\nusing this:\n  wf_list_graph ?G \\<Longrightarrow>\n  TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n   (get_impl\n     (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n       (TopoS_Composition_Theory.get_IFS (get_spec M))))\n   ?G =\n  TopoS_Composition_Theory.all_security_requirements_fulfilled\n   (get_spec\n     (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n       (TopoS_Composition_Theory.get_IFS (get_spec M))))\n   (list_graph_to_graph ?G)\n\ngoal (1 subgoal):\n 1. \\<And>G.\n       wf_list_graph G \\<Longrightarrow>\n       TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n        (TopoS_Composition_Theory_impl.get_IFS (get_impl M)) G =\n       TopoS_Composition_Theory.all_security_requirements_fulfilled\n        (TopoS_Composition_Theory.get_IFS (get_spec M))\n        (list_graph_to_graph G)", "by(simp add: get_impl_zip_simp get_spec_zip_simp)"], ["proof (state)\nthis:\n  wf_list_graph ?G \\<Longrightarrow>\n  TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n   (TopoS_Composition_Theory_impl.get_IFS (get_impl M)) ?G =\n  TopoS_Composition_Theory.all_security_requirements_fulfilled\n   (TopoS_Composition_Theory.get_IFS (get_spec M)) (list_graph_to_graph ?G)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "have case_impl_spec: \"?caseDistinction \\<longleftrightarrow> TopoS_Composition_Theory.all_security_requirements_fulfilled (TopoS_Composition_Theory.get_IFS (get_spec M)) (stateful_policy_to_network_graph \\<lparr> hosts = set (nodesL G), flows_fix = set (edgesL G), flows_state = set (e#accu) \\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n     (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n     (stateful_list_policy_to_list_graph\n       \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n          flows_stateL = e # accu\\<rparr>) =\n    TopoS_Composition_Theory.all_security_requirements_fulfilled\n     (TopoS_Composition_Theory.get_IFS (get_spec M))\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = set (nodesL G), flows_fix = set (edgesL G),\n          flows_state = set (e # accu)\\<rparr>)", "apply(subst all_security_requirements_fulfilled_eq_rule[OF validLG])"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Composition_Theory.all_security_requirements_fulfilled\n     (TopoS_Composition_Theory.get_IFS (get_spec M))\n     (list_graph_to_graph\n       (stateful_list_policy_to_list_graph\n         \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n            flows_stateL = e # accu\\<rparr>)) =\n    TopoS_Composition_Theory.all_security_requirements_fulfilled\n     (TopoS_Composition_Theory.get_IFS (get_spec M))\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = set (nodesL G), flows_fix = set (edgesL G),\n          flows_state = set (e # accu)\\<rparr>)", "by(simp add: stateful_list_policy_to_list_graph_complies)"], ["proof (state)\nthis:\n  TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n   (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n   (stateful_list_policy_to_list_graph\n     \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n        flows_stateL = e # accu\\<rparr>) =\n  TopoS_Composition_Theory.all_security_requirements_fulfilled\n   (TopoS_Composition_Theory.get_IFS (get_spec M))\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = set (nodesL G), flows_fix = set (edgesL G),\n        flows_state = set (e # accu)\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "proof(case_tac ?caseDistinction)"], ["proof (state)\ngoal (2 subgoals):\n 1. TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n     (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n     (stateful_list_policy_to_list_graph\n       \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n          flows_stateL = e # accu\\<rparr>) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)\n 2. \\<not> TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n            (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n            (stateful_list_policy_to_list_graph\n              \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n                 flows_stateL = e # accu\\<rparr>) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "assume cTrue: ?caseDistinction"], ["proof (state)\nthis:\n  TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n   (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n   (stateful_list_policy_to_list_graph\n     \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n        flows_stateL = e # accu\\<rparr>)\n\ngoal (2 subgoals):\n 1. TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n     (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n     (stateful_list_policy_to_list_graph\n       \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n          flows_stateL = e # accu\\<rparr>) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)\n 2. \\<not> TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n            (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n            (stateful_list_policy_to_list_graph\n              \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n                 flows_stateL = e # accu\\<rparr>) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "from cTrue"], ["proof (chain)\npicking this:\n  TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n   (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n   (stateful_list_policy_to_list_graph\n     \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n        flows_stateL = e # accu\\<rparr>)", "have g1: \"TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M) accu (e # Es) = TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M) (e # accu) Es\""], ["proof (prove)\nusing this:\n  TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n   (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n   (stateful_list_policy_to_list_graph\n     \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n        flows_stateL = e # accu\\<rparr>)\n\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     (e # accu) Es", "by simp"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n   accu (e # Es) =\n  TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n   (e # accu) Es\n\ngoal (2 subgoals):\n 1. TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n     (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n     (stateful_list_policy_to_list_graph\n       \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n          flows_stateL = e # accu\\<rparr>) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)\n 2. \\<not> TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n            (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n            (stateful_list_policy_to_list_graph\n              \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n                 flows_stateL = e # accu\\<rparr>) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "from cTrue[simplified case_impl_spec]"], ["proof (chain)\npicking this:\n  TopoS_Composition_Theory.all_security_requirements_fulfilled\n   (TopoS_Composition_Theory.get_IFS (get_spec M))\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = set (nodesL G), flows_fix = set (edgesL G),\n        flows_state = set (e # accu)\\<rparr>)", "have g2: \"TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu (list_graph_to_graph G) (get_spec M) accu (e # Es) =\n            TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu (list_graph_to_graph G) (get_spec M) (e#accu)Es\""], ["proof (prove)\nusing this:\n  TopoS_Composition_Theory.all_security_requirements_fulfilled\n   (TopoS_Composition_Theory.get_IFS (get_spec M))\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = set (nodesL G), flows_fix = set (edgesL G),\n        flows_state = set (e # accu)\\<rparr>)\n\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) (e # accu) Es", "by(simp add: list_graph_to_graph_def)"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n   (list_graph_to_graph G) (get_spec M) accu (e # Es) =\n  TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n   (list_graph_to_graph G) (get_spec M) (e # accu) Es\n\ngoal (2 subgoals):\n 1. TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n     (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n     (stateful_list_policy_to_list_graph\n       \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n          flows_stateL = e # accu\\<rparr>) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)\n 2. \\<not> TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n            (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n            (stateful_list_policy_to_list_graph\n              \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n                 flows_stateL = e # accu\\<rparr>) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "apply(simp only: g1 g2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     (e # accu) Es =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) (e # accu) Es", "using Cons.IH[OF Cons.prems(1) Cons.prems(2) \\<open>set Es \\<subseteq> set (edgesL G)\\<close> \\<open>set (e # accu) \\<subseteq> set (edgesL G)\\<close> \\<open>distinct (Es @ (e # accu))\\<close>]"], ["proof (prove)\nusing this:\n  TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n   (e # accu) Es =\n  TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n   (list_graph_to_graph G) (get_spec M) (e # accu) Es\n\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     (e # accu) Es =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) (e # accu) Es", "by simp"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n   accu (e # Es) =\n  TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n   (list_graph_to_graph G) (get_spec M) accu (e # Es)\n\ngoal (1 subgoal):\n 1. \\<not> TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n            (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n            (stateful_list_policy_to_list_graph\n              \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n                 flows_stateL = e # accu\\<rparr>) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n            (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n            (stateful_list_policy_to_list_graph\n              \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n                 flows_stateL = e # accu\\<rparr>) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "assume cFalse: \"\\<not> ?caseDistinction\""], ["proof (state)\nthis:\n  \\<not> TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n          (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n          (stateful_list_policy_to_list_graph\n            \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n               flows_stateL = e # accu\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<not> TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n            (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n            (stateful_list_policy_to_list_graph\n              \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n                 flows_stateL = e # accu\\<rparr>) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "from cFalse"], ["proof (chain)\npicking this:\n  \\<not> TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n          (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n          (stateful_list_policy_to_list_graph\n            \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n               flows_stateL = e # accu\\<rparr>)", "have g1: \"TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M) accu (e # Es) = TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M) accu Es\""], ["proof (prove)\nusing this:\n  \\<not> TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n          (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n          (stateful_list_policy_to_list_graph\n            \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n               flows_stateL = e # accu\\<rparr>)\n\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu Es", "by simp"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n   accu (e # Es) =\n  TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n   accu Es\n\ngoal (1 subgoal):\n 1. \\<not> TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n            (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n            (stateful_list_policy_to_list_graph\n              \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n                 flows_stateL = e # accu\\<rparr>) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "from cFalse[simplified case_impl_spec]"], ["proof (chain)\npicking this:\n  \\<not> TopoS_Composition_Theory.all_security_requirements_fulfilled\n          (TopoS_Composition_Theory.get_IFS (get_spec M))\n          (stateful_policy_to_network_graph\n            \\<lparr>hosts = set (nodesL G), flows_fix = set (edgesL G),\n               flows_state = set (e # accu)\\<rparr>)", "have g2: \"TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu (list_graph_to_graph G) (get_spec M) accu (e # Es) =\n            TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu (list_graph_to_graph G) (get_spec M) accu Es\""], ["proof (prove)\nusing this:\n  \\<not> TopoS_Composition_Theory.all_security_requirements_fulfilled\n          (TopoS_Composition_Theory.get_IFS (get_spec M))\n          (stateful_policy_to_network_graph\n            \\<lparr>hosts = set (nodesL G), flows_fix = set (edgesL G),\n               flows_state = set (e # accu)\\<rparr>)\n\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu Es", "by(simp add: list_graph_to_graph_def)"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n   (list_graph_to_graph G) (get_spec M) accu (e # Es) =\n  TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n   (list_graph_to_graph G) (get_spec M) accu Es\n\ngoal (1 subgoal):\n 1. \\<not> TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n            (TopoS_Composition_Theory_impl.get_IFS (get_impl M))\n            (stateful_list_policy_to_list_graph\n              \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n                 flows_stateL = e # accu\\<rparr>) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "apply(simp only: g1 g2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu Es =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu Es", "using Cons.IH[OF Cons.prems(1) Cons.prems(2) \\<open>set Es \\<subseteq> set (edgesL G)\\<close> \\<open>set accu \\<subseteq> set (edgesL G)\\<close> \\<open>distinct (Es @ accu)\\<close>]"], ["proof (prove)\nusing this:\n  TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n   accu Es =\n  TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n   (list_graph_to_graph G) (get_spec M) accu Es\n\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n     accu Es =\n    TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n     (list_graph_to_graph G) (get_spec M) accu Es", "by simp"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n   accu (e # Es) =\n  TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n   (list_graph_to_graph G) (get_spec M) accu (e # Es)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu G (get_impl M)\n   accu (e # Es) =\n  TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n   (list_graph_to_graph G) (get_spec M) accu (e # Es)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filter_IFS_no_violations_complies:\n    \"\\<lbrakk> \\<forall> (m_impl, m_spec) \\<in> set M. SecurityInvariant_complies_formal_def m_impl m_spec; wf_list_graph G \\<rbrakk> \\<Longrightarrow>\n       filter_IFS_no_violations G (get_impl M) = TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations (list_graph_to_graph G) (get_spec M) (edgesL G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations G\n                       (get_impl M) =\n                      TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n                       (list_graph_to_graph G) (get_spec M) (edgesL G)", "apply(unfold filter_IFS_no_violations_def TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_IFS_no_violations_accu\n                       G (get_impl M) [] (edgesL G) =\n                      TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu\n                       (list_graph_to_graph G) (get_spec M) [] (edgesL G)", "apply(rule filter_IFS_no_violations_accu_complies)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(m_impl, m_spec)\\<in>set M.\n                         SecurityInvariant_complies_formal_def m_impl m_spec\n 2. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> wf_list_graph G\n 3. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> set (edgesL G) \\<subseteq> set (edgesL G)\n 4. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> set [] \\<subseteq> set (edgesL G)\n 5. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> distinct (edgesL G @ [])", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set M.\n                case x of\n                (m_impl, m_spec) \\<Rightarrow>\n                  SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> distinct (edgesL G)", "apply(simp add: wf_list_graph_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "fun filter_compliant_stateful_ACS_accu :: \"'v list_graph \\<Rightarrow> 'v SecurityInvariant list \\<Rightarrow> ('v \\<times> 'v) list \\<Rightarrow> ('v \\<times> 'v) list \\<Rightarrow> ('v \\<times> 'v) list\" where\n      \"filter_compliant_stateful_ACS_accu G M accu [] = accu\" |\n      \"filter_compliant_stateful_ACS_accu G M accu (e#Es) = (if\n        e \\<notin> set (backlinks (edgesL G)) \\<and> (\\<forall>F \\<in> set (implc_get_offending_flows (get_ACS M) (stateful_list_policy_to_list_graph \\<lparr> hostsL = nodesL G, flows_fixL = edgesL G, flows_stateL = (e#accu) \\<rparr>)). set F \\<subseteq> set (backlinks (e#accu)))\n        then filter_compliant_stateful_ACS_accu G M (e#accu) Es\n        else filter_compliant_stateful_ACS_accu G M accu Es)\""], ["", "definition filter_compliant_stateful_ACS :: \"'v list_graph \\<Rightarrow> 'v SecurityInvariant list \\<Rightarrow> ('v \\<times> 'v) list\" where\n      \"filter_compliant_stateful_ACS G M = filter_compliant_stateful_ACS_accu G M [] (edgesL G)\""], ["", "lemma filter_compliant_stateful_ACS_accu_complies: \n    \"\\<lbrakk>\\<forall> (m_impl, m_spec) \\<in> set M. SecurityInvariant_complies_formal_def m_impl m_spec;\n      wf_list_graph G; set Es \\<subseteq> set (edgesL G); set accu \\<subseteq> set (edgesL G); distinct (Es@accu) \\<rbrakk> \\<Longrightarrow>\n      filter_compliant_stateful_ACS_accu G (get_impl M) accu Es = TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu (list_graph_to_graph G) (get_spec M) accu Es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n     set accu \\<subseteq> set (edgesL G); distinct (Es @ accu)\\<rbrakk>\n    \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                       G (get_impl M) accu Es =\n                      TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                       (list_graph_to_graph G) (get_spec M) accu Es", "proof(induction Es arbitrary: accu)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>accu.\n       \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                   SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set [] \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G); distinct ([] @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu [] =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu []\n 2. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "case Nil"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set M.\n     case a of\n     (a, b) \\<Rightarrow> SecurityInvariant_complies_formal_def a b\n  wf_list_graph G\n  set [] \\<subseteq> set (edgesL G)\n  set accu \\<subseteq> set (edgesL G)\n  distinct ([] @ accu)\n\ngoal (2 subgoals):\n 1. \\<And>accu.\n       \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                   SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set [] \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G); distinct ([] @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu [] =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu []\n 2. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set M.\n     case a of\n     (a, b) \\<Rightarrow> SecurityInvariant_complies_formal_def a b\n  wf_list_graph G\n  set [] \\<subseteq> set (edgesL G)\n  set accu \\<subseteq> set (edgesL G)\n  distinct ([] @ accu)\n\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu [] =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu []", "by(simp add: get_impl_def get_spec_def)"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n   (get_impl M) accu [] =\n  TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n   (list_graph_to_graph G) (get_spec M) accu []\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "case (Cons e Es)\n        \\<comment> \\<open>@{thm Cons.IH[OF Cons.prems(1) Cons.prems(2)]}\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>a\\<in>set M.\n              case a of\n              (a, b) \\<Rightarrow>\n                SecurityInvariant_complies_formal_def a b;\n   wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n   set ?accu \\<subseteq> set (edgesL G); distinct (Es @ ?accu)\\<rbrakk>\n  \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                     G (get_impl M) ?accu Es =\n                    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                     (list_graph_to_graph G) (get_spec M) ?accu Es\n  \\<forall>a\\<in>set M.\n     case a of\n     (a, b) \\<Rightarrow> SecurityInvariant_complies_formal_def a b\n  wf_list_graph G\n  set (e # Es) \\<subseteq> set (edgesL G)\n  set accu \\<subseteq> set (edgesL G)\n  distinct ((e # Es) @ accu)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "let ?caseDistinction = \"e \\<notin> set (backlinks (edgesL G)) \\<and> (\\<forall>F \\<in> set (implc_get_offending_flows (get_ACS (get_impl M)) (stateful_list_policy_to_list_graph \\<lparr> hostsL = nodesL G, flows_fixL = edgesL G, flows_stateL = (e#accu) \\<rparr>)). set F \\<subseteq> set (backlinks (e#accu)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "have backlinks_simp: \"(e \\<notin> set (backlinks (edgesL G))) \\<longleftrightarrow> (e \\<notin> backflows (set (edgesL G)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (e \\<notin> set (backlinks (edgesL G))) =\n    (e \\<notin> backflows (set (edgesL G)))", "by(simp add: backlinks_correct)"], ["proof (state)\nthis:\n  (e \\<notin> set (backlinks (edgesL G))) =\n  (e \\<notin> backflows (set (edgesL G)))\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "have \"\\<And> G X. (\\<forall>F\\<in>set (implc_get_offending_flows (TopoS_Composition_Theory_impl.get_ACS (get_impl M)) G). set F \\<subseteq> X) =\n              (\\<forall>F\\<in>set ` set (implc_get_offending_flows (TopoS_Composition_Theory_impl.get_ACS (get_impl M)) G). F \\<subseteq> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G X.\n       (\\<forall>F\\<in>set (implc_get_offending_flows\n                             (TopoS_Composition_Theory_impl.get_ACS\n                               (get_impl M))\n                             G).\n           set F \\<subseteq> X) =\n       (\\<forall>F\\<in>set `\n                       set (implc_get_offending_flows\n                             (TopoS_Composition_Theory_impl.get_ACS\n                               (get_impl M))\n                             G).\n           F \\<subseteq> X)", "by blast"], ["proof (state)\nthis:\n  (\\<forall>F\\<in>set (implc_get_offending_flows\n                        (TopoS_Composition_Theory_impl.get_ACS (get_impl M))\n                        ?G).\n      set F \\<subseteq> ?X) =\n  (\\<forall>F\\<in>set `\n                  set (implc_get_offending_flows\n                        (TopoS_Composition_Theory_impl.get_ACS (get_impl M))\n                        ?G).\n      F \\<subseteq> ?X)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "also"], ["proof (state)\nthis:\n  (\\<forall>F\\<in>set (implc_get_offending_flows\n                        (TopoS_Composition_Theory_impl.get_ACS (get_impl M))\n                        ?G).\n      set F \\<subseteq> ?X) =\n  (\\<forall>F\\<in>set `\n                  set (implc_get_offending_flows\n                        (TopoS_Composition_Theory_impl.get_ACS (get_impl M))\n                        ?G).\n      F \\<subseteq> ?X)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "have \"\\<And> G X. wf_list_graph G \\<Longrightarrow> (\\<forall>F\\<in>set ` set (implc_get_offending_flows (TopoS_Composition_Theory_impl.get_ACS (get_impl M)) G). F \\<subseteq> X) =\n          (\\<forall>F\\<in>get_offending_flows (TopoS_Composition_Theory.get_ACS (get_spec M)) (list_graph_to_graph G). F \\<subseteq> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G X.\n       wf_list_graph G \\<Longrightarrow>\n       (\\<forall>F\\<in>set `\n                       set (implc_get_offending_flows\n                             (TopoS_Composition_Theory_impl.get_ACS\n                               (get_impl M))\n                             G).\n           F \\<subseteq> X) =\n       (\\<forall>F\\<in>get_offending_flows\n                        (TopoS_Composition_Theory.get_ACS (get_spec M))\n                        (list_graph_to_graph G).\n           F \\<subseteq> X)", "using implc_get_offending_flows_complies[OF get_IFS_get_ACS_select_simps(4)[OF Cons.prems(1)], simplified get_IFS_get_ACS_select_simps[OF Cons.prems(1)]]"], ["proof (prove)\nusing this:\n  wf_list_graph ?G \\<Longrightarrow>\n  set `\n  set (implc_get_offending_flows\n        (TopoS_Composition_Theory_impl.get_ACS (get_impl M)) ?G) =\n  get_offending_flows (TopoS_Composition_Theory.get_ACS (get_spec M))\n   (list_graph_to_graph ?G)\n\ngoal (1 subgoal):\n 1. \\<And>G X.\n       wf_list_graph G \\<Longrightarrow>\n       (\\<forall>F\\<in>set `\n                       set (implc_get_offending_flows\n                             (TopoS_Composition_Theory_impl.get_ACS\n                               (get_impl M))\n                             G).\n           F \\<subseteq> X) =\n       (\\<forall>F\\<in>get_offending_flows\n                        (TopoS_Composition_Theory.get_ACS (get_spec M))\n                        (list_graph_to_graph G).\n           F \\<subseteq> X)", "by simp"], ["proof (state)\nthis:\n  wf_list_graph ?G \\<Longrightarrow>\n  (\\<forall>F\\<in>set `\n                  set (implc_get_offending_flows\n                        (TopoS_Composition_Theory_impl.get_ACS (get_impl M))\n                        ?G).\n      F \\<subseteq> ?X) =\n  (\\<forall>F\\<in>get_offending_flows\n                   (TopoS_Composition_Theory.get_ACS (get_spec M))\n                   (list_graph_to_graph ?G).\n      F \\<subseteq> ?X)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "finally"], ["proof (chain)\npicking this:\n  wf_list_graph ?G1 \\<Longrightarrow>\n  (\\<forall>F\\<in>set (implc_get_offending_flows\n                        (TopoS_Composition_Theory_impl.get_ACS (get_impl M))\n                        ?G1).\n      set F \\<subseteq> ?X1) =\n  (\\<forall>F\\<in>get_offending_flows\n                   (TopoS_Composition_Theory.get_ACS (get_spec M))\n                   (list_graph_to_graph ?G1).\n      F \\<subseteq> ?X1)", "have implc_get_offending_flows_simp_rule: \"\\<And>G X. wf_list_graph G \\<Longrightarrow> \n          (\\<forall>F\\<in>set (implc_get_offending_flows (TopoS_Composition_Theory_impl.get_ACS (get_impl M)) G). set F \\<subseteq> X) = (\\<forall>F\\<in>get_offending_flows (TopoS_Composition_Theory.get_ACS (get_spec M)) (list_graph_to_graph G). F \\<subseteq> X)\""], ["proof (prove)\nusing this:\n  wf_list_graph ?G1 \\<Longrightarrow>\n  (\\<forall>F\\<in>set (implc_get_offending_flows\n                        (TopoS_Composition_Theory_impl.get_ACS (get_impl M))\n                        ?G1).\n      set F \\<subseteq> ?X1) =\n  (\\<forall>F\\<in>get_offending_flows\n                   (TopoS_Composition_Theory.get_ACS (get_spec M))\n                   (list_graph_to_graph ?G1).\n      F \\<subseteq> ?X1)\n\ngoal (1 subgoal):\n 1. \\<And>G X.\n       wf_list_graph G \\<Longrightarrow>\n       (\\<forall>F\\<in>set (implc_get_offending_flows\n                             (TopoS_Composition_Theory_impl.get_ACS\n                               (get_impl M))\n                             G).\n           set F \\<subseteq> X) =\n       (\\<forall>F\\<in>get_offending_flows\n                        (TopoS_Composition_Theory.get_ACS (get_spec M))\n                        (list_graph_to_graph G).\n           F \\<subseteq> X)", "."], ["proof (state)\nthis:\n  wf_list_graph ?G \\<Longrightarrow>\n  (\\<forall>F\\<in>set (implc_get_offending_flows\n                        (TopoS_Composition_Theory_impl.get_ACS (get_impl M))\n                        ?G).\n      set F \\<subseteq> ?X) =\n  (\\<forall>F\\<in>get_offending_flows\n                   (TopoS_Composition_Theory.get_ACS (get_spec M))\n                   (list_graph_to_graph ?G).\n      F \\<subseteq> ?X)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from Cons.prems(3) Cons.prems(4)"], ["proof (chain)\npicking this:\n  set (e # Es) \\<subseteq> set (edgesL G)\n  set accu \\<subseteq> set (edgesL G)", "have \"set (e # accu) \\<subseteq> set (edgesL G)\""], ["proof (prove)\nusing this:\n  set (e # Es) \\<subseteq> set (edgesL G)\n  set accu \\<subseteq> set (edgesL G)\n\ngoal (1 subgoal):\n 1. set (e # accu) \\<subseteq> set (edgesL G)", "by simp"], ["proof (state)\nthis:\n  set (e # accu) \\<subseteq> set (edgesL G)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from Cons.prems(4)"], ["proof (chain)\npicking this:\n  set accu \\<subseteq> set (edgesL G)", "have \"set (accu) \\<subseteq> set (edgesL G)\""], ["proof (prove)\nusing this:\n  set accu \\<subseteq> set (edgesL G)\n\ngoal (1 subgoal):\n 1. set accu \\<subseteq> set (edgesL G)", "by simp"], ["proof (state)\nthis:\n  set accu \\<subseteq> set (edgesL G)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from Cons.prems(5)"], ["proof (chain)\npicking this:\n  distinct ((e # Es) @ accu)", "have \"distinct (e # accu)\""], ["proof (prove)\nusing this:\n  distinct ((e # Es) @ accu)\n\ngoal (1 subgoal):\n 1. distinct (e # accu)", "by simp"], ["proof (state)\nthis:\n  distinct (e # accu)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from Cons.prems(3)"], ["proof (chain)\npicking this:\n  set (e # Es) \\<subseteq> set (edgesL G)", "have \"set Es \\<subseteq> set (edgesL G)\""], ["proof (prove)\nusing this:\n  set (e # Es) \\<subseteq> set (edgesL G)\n\ngoal (1 subgoal):\n 1. set Es \\<subseteq> set (edgesL G)", "by simp"], ["proof (state)\nthis:\n  set Es \\<subseteq> set (edgesL G)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from Cons.prems(5)"], ["proof (chain)\npicking this:\n  distinct ((e # Es) @ accu)", "have \"distinct (Es @ accu)\""], ["proof (prove)\nusing this:\n  distinct ((e # Es) @ accu)\n\ngoal (1 subgoal):\n 1. distinct (Es @ accu)", "by simp"], ["proof (state)\nthis:\n  distinct (Es @ accu)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from Cons.prems(5)"], ["proof (chain)\npicking this:\n  distinct ((e # Es) @ accu)", "have \"distinct (Es @ (e # accu))\""], ["proof (prove)\nusing this:\n  distinct ((e # Es) @ accu)\n\ngoal (1 subgoal):\n 1. distinct (Es @ e # accu)", "by simp"], ["proof (state)\nthis:\n  distinct (Es @ e # accu)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "from Cons.prems(2)"], ["proof (chain)\npicking this:\n  wf_list_graph G", "have validLG: \"wf_list_graph (stateful_list_policy_to_list_graph \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G, flows_stateL = e # accu\\<rparr>)\""], ["proof (prove)\nusing this:\n  wf_list_graph G\n\ngoal (1 subgoal):\n 1. wf_list_graph\n     (stateful_list_policy_to_list_graph\n       \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n          flows_stateL = e # accu\\<rparr>)", "apply(rule wf_list_graph_stateful_list_policy_to_list_graph)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct (e # accu)\n 2. set (e # accu) \\<subseteq> set (edgesL G)", "apply(fact \\<open>distinct (e # accu)\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (e # accu) \\<subseteq> set (edgesL G)", "apply(fact \\<open>set (e # accu) \\<subseteq> set (edgesL G)\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  wf_list_graph\n   (stateful_list_policy_to_list_graph\n     \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n        flows_stateL = e # accu\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "have \"set (backlinks (e # accu)) = backflows (insert e (set accu))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (backlinks (e # accu)) = backflows (insert e (set accu))", "by(simp add: backlinks_set backflows_def)\n        \n        \\<comment> \\<open>@{thm implc_get_offending_flows_simp_rule[OF validLG]}\\<close>"], ["proof (state)\nthis:\n  set (backlinks (e # accu)) = backflows (insert e (set accu))\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "have case_impl_spec: \"?caseDistinction \\<longleftrightarrow> (\n          e \\<notin> backflows (set (edgesL G)) \\<and> (\\<forall>F \\<in> get_offending_flows (TopoS_Composition_Theory.get_ACS (get_spec M)) (stateful_policy_to_network_graph \\<lparr> hosts = set (nodesL G), flows_fix = set (edgesL G), flows_state = set (e#accu) \\<rparr>). F \\<subseteq> (backflows (set (e#accu)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (e \\<notin> set (backlinks (edgesL G)) \\<and>\n     (\\<forall>F\\<in>set (implc_get_offending_flows\n                           (TopoS_Composition_Theory_impl.get_ACS\n                             (get_impl M))\n                           (stateful_list_policy_to_list_graph\n                             \\<lparr>hostsL = nodesL G,\n                                flows_fixL = edgesL G,\n                                flows_stateL = e # accu\\<rparr>)).\n         set F \\<subseteq> set (backlinks (e # accu)))) =\n    (e \\<notin> backflows (set (edgesL G)) \\<and>\n     (\\<forall>F\\<in>get_offending_flows\n                      (TopoS_Composition_Theory.get_ACS (get_spec M))\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = set (nodesL G),\n                           flows_fix = set (edgesL G),\n                           flows_state = set (e # accu)\\<rparr>).\n         F \\<subseteq> backflows (set (e # accu))))", "apply(simp add: backlinks_simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (e \\<notin> backflows (set (edgesL G)) \\<and>\n     (\\<forall>F\\<in>set (implc_get_offending_flows\n                           (TopoS_Composition_Theory_impl.get_ACS\n                             (get_impl M))\n                           (stateful_list_policy_to_list_graph\n                             \\<lparr>hostsL = nodesL G,\n                                flows_fixL = edgesL G,\n                                flows_stateL = e # accu\\<rparr>)).\n         set F \\<subseteq> set (backlinks (e # accu)))) =\n    (e \\<notin> backflows (set (edgesL G)) \\<and>\n     (\\<forall>F\\<in>get_offending_flows\n                      (TopoS_Composition_Theory.get_ACS (get_spec M))\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = set (nodesL G),\n                           flows_fix = set (edgesL G),\n                           flows_state = insert e (set accu)\\<rparr>).\n         F \\<subseteq> backflows (insert e (set accu))))", "apply(simp add: implc_get_offending_flows_simp_rule[OF validLG])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (e \\<notin> backflows (set (edgesL G)) \\<and>\n     (\\<forall>F\\<in>get_offending_flows\n                      (TopoS_Composition_Theory.get_ACS (get_spec M))\n                      (list_graph_to_graph\n                        (stateful_list_policy_to_list_graph\n                          \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n                             flows_stateL = e # accu\\<rparr>)).\n         F \\<subseteq> set (backlinks (e # accu)))) =\n    (e \\<notin> backflows (set (edgesL G)) \\<and>\n     (\\<forall>F\\<in>get_offending_flows\n                      (TopoS_Composition_Theory.get_ACS (get_spec M))\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = set (nodesL G),\n                           flows_fix = set (edgesL G),\n                           flows_state = insert e (set accu)\\<rparr>).\n         F \\<subseteq> backflows (insert e (set accu))))", "apply(simp add: stateful_list_policy_to_list_graph_complies)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (e \\<notin> backflows (set (edgesL G)) \\<and>\n     (\\<forall>F\\<in>get_offending_flows\n                      (TopoS_Composition_Theory.get_ACS (get_spec M))\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = set (nodesL G),\n                           flows_fix = set (edgesL G),\n                           flows_state = insert e (set accu)\\<rparr>).\n         F \\<subseteq> set (backlinks (e # accu)))) =\n    (e \\<notin> backflows (set (edgesL G)) \\<and>\n     (\\<forall>F\\<in>get_offending_flows\n                      (TopoS_Composition_Theory.get_ACS (get_spec M))\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = set (nodesL G),\n                           flows_fix = set (edgesL G),\n                           flows_state = insert e (set accu)\\<rparr>).\n         F \\<subseteq> backflows (insert e (set accu))))", "by(simp add: \\<open>set (backlinks (e # accu)) = backflows (insert e (set accu))\\<close>)"], ["proof (state)\nthis:\n  (e \\<notin> set (backlinks (edgesL G)) \\<and>\n   (\\<forall>F\\<in>set (implc_get_offending_flows\n                         (TopoS_Composition_Theory_impl.get_ACS\n                           (get_impl M))\n                         (stateful_list_policy_to_list_graph\n                           \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n                              flows_stateL = e # accu\\<rparr>)).\n       set F \\<subseteq> set (backlinks (e # accu)))) =\n  (e \\<notin> backflows (set (edgesL G)) \\<and>\n   (\\<forall>F\\<in>get_offending_flows\n                    (TopoS_Composition_Theory.get_ACS (get_spec M))\n                    (stateful_policy_to_network_graph\n                      \\<lparr>hosts = set (nodesL G),\n                         flows_fix = set (edgesL G),\n                         flows_state = set (e # accu)\\<rparr>).\n       F \\<subseteq> backflows (set (e # accu))))\n\ngoal (1 subgoal):\n 1. \\<And>a Es accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>\\<forall>(x, y)\\<in>set M.\n                               SecurityInvariant_complies_formal_def x y;\n                    wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n                    set accu \\<subseteq> set (edgesL G);\n                    distinct (Es @ accu)\\<rbrakk>\n                   \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\nG (get_impl M) accu Es =\n                                     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n(list_graph_to_graph G) (get_spec M) accu Es;\n        \\<forall>(x, y)\\<in>set M.\n           SecurityInvariant_complies_formal_def x y;\n        wf_list_graph G; set (a # Es) \\<subseteq> set (edgesL G);\n        set accu \\<subseteq> set (edgesL G);\n        distinct ((a # Es) @ accu)\\<rbrakk>\n       \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                          G (get_impl M) accu (a # Es) =\n                         TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                          (list_graph_to_graph G) (get_spec M) accu (a # Es)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "proof(case_tac ?caseDistinction)"], ["proof (state)\ngoal (2 subgoals):\n 1. e \\<notin> set (backlinks (edgesL G)) \\<and>\n    (\\<forall>F\\<in>set (implc_get_offending_flows\n                          (TopoS_Composition_Theory_impl.get_ACS\n                            (get_impl M))\n                          (stateful_list_policy_to_list_graph\n                            \\<lparr>hostsL = nodesL G,\n                               flows_fixL = edgesL G,\n                               flows_stateL = e # accu\\<rparr>)).\n        set F \\<subseteq> set (backlinks (e # accu))) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)\n 2. \\<not> (e \\<notin> set (backlinks (edgesL G)) \\<and>\n            (\\<forall>F\\<in>set (implc_get_offending_flows\n                                  (TopoS_Composition_Theory_impl.get_ACS\n                                    (get_impl M))\n                                  (stateful_list_policy_to_list_graph\n                                    \\<lparr>hostsL = nodesL G,\n flows_fixL = edgesL G, flows_stateL = e # accu\\<rparr>)).\n                set F\n                \\<subseteq> set (backlinks (e # accu)))) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "assume cTrue: ?caseDistinction"], ["proof (state)\nthis:\n  e \\<notin> set (backlinks (edgesL G)) \\<and>\n  (\\<forall>F\\<in>set (implc_get_offending_flows\n                        (TopoS_Composition_Theory_impl.get_ACS (get_impl M))\n                        (stateful_list_policy_to_list_graph\n                          \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n                             flows_stateL = e # accu\\<rparr>)).\n      set F \\<subseteq> set (backlinks (e # accu)))\n\ngoal (2 subgoals):\n 1. e \\<notin> set (backlinks (edgesL G)) \\<and>\n    (\\<forall>F\\<in>set (implc_get_offending_flows\n                          (TopoS_Composition_Theory_impl.get_ACS\n                            (get_impl M))\n                          (stateful_list_policy_to_list_graph\n                            \\<lparr>hostsL = nodesL G,\n                               flows_fixL = edgesL G,\n                               flows_stateL = e # accu\\<rparr>)).\n        set F \\<subseteq> set (backlinks (e # accu))) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)\n 2. \\<not> (e \\<notin> set (backlinks (edgesL G)) \\<and>\n            (\\<forall>F\\<in>set (implc_get_offending_flows\n                                  (TopoS_Composition_Theory_impl.get_ACS\n                                    (get_impl M))\n                                  (stateful_list_policy_to_list_graph\n                                    \\<lparr>hostsL = nodesL G,\n flows_fixL = edgesL G, flows_stateL = e # accu\\<rparr>)).\n                set F\n                \\<subseteq> set (backlinks (e # accu)))) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "from cTrue"], ["proof (chain)\npicking this:\n  e \\<notin> set (backlinks (edgesL G)) \\<and>\n  (\\<forall>F\\<in>set (implc_get_offending_flows\n                        (TopoS_Composition_Theory_impl.get_ACS (get_impl M))\n                        (stateful_list_policy_to_list_graph\n                          \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n                             flows_stateL = e # accu\\<rparr>)).\n      set F \\<subseteq> set (backlinks (e # accu)))", "have g1: \"TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G (get_impl M) accu (e # Es) =  TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G (get_impl M) (e#accu) Es\""], ["proof (prove)\nusing this:\n  e \\<notin> set (backlinks (edgesL G)) \\<and>\n  (\\<forall>F\\<in>set (implc_get_offending_flows\n                        (TopoS_Composition_Theory_impl.get_ACS (get_impl M))\n                        (stateful_list_policy_to_list_graph\n                          \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n                             flows_stateL = e # accu\\<rparr>)).\n      set F \\<subseteq> set (backlinks (e # accu)))\n\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) (e # accu) Es", "by simp"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n   (get_impl M) accu (e # Es) =\n  TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n   (get_impl M) (e # accu) Es\n\ngoal (2 subgoals):\n 1. e \\<notin> set (backlinks (edgesL G)) \\<and>\n    (\\<forall>F\\<in>set (implc_get_offending_flows\n                          (TopoS_Composition_Theory_impl.get_ACS\n                            (get_impl M))\n                          (stateful_list_policy_to_list_graph\n                            \\<lparr>hostsL = nodesL G,\n                               flows_fixL = edgesL G,\n                               flows_stateL = e # accu\\<rparr>)).\n        set F \\<subseteq> set (backlinks (e # accu))) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)\n 2. \\<not> (e \\<notin> set (backlinks (edgesL G)) \\<and>\n            (\\<forall>F\\<in>set (implc_get_offending_flows\n                                  (TopoS_Composition_Theory_impl.get_ACS\n                                    (get_impl M))\n                                  (stateful_list_policy_to_list_graph\n                                    \\<lparr>hostsL = nodesL G,\n flows_fixL = edgesL G, flows_stateL = e # accu\\<rparr>)).\n                set F\n                \\<subseteq> set (backlinks (e # accu)))) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "from cTrue[simplified case_impl_spec]"], ["proof (chain)\npicking this:\n  e \\<notin> backflows (set (edgesL G)) \\<and>\n  (\\<forall>F\\<in>get_offending_flows\n                   (TopoS_Composition_Theory.get_ACS (get_spec M))\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = set (nodesL G),\n                        flows_fix = set (edgesL G),\n                        flows_state = set (e # accu)\\<rparr>).\n      F \\<subseteq> backflows (set (e # accu)))", "have g2: \"TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu (list_graph_to_graph G) (get_spec M) accu (e # Es) =\n            TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu (list_graph_to_graph G) (get_spec M) (e#accu) Es\""], ["proof (prove)\nusing this:\n  e \\<notin> backflows (set (edgesL G)) \\<and>\n  (\\<forall>F\\<in>get_offending_flows\n                   (TopoS_Composition_Theory.get_ACS (get_spec M))\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = set (nodesL G),\n                        flows_fix = set (edgesL G),\n                        flows_state = set (e # accu)\\<rparr>).\n      F \\<subseteq> backflows (set (e # accu)))\n\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) (e # accu) Es", "by(simp add: list_graph_to_graph_def)"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n   (list_graph_to_graph G) (get_spec M) accu (e # Es) =\n  TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n   (list_graph_to_graph G) (get_spec M) (e # accu) Es\n\ngoal (2 subgoals):\n 1. e \\<notin> set (backlinks (edgesL G)) \\<and>\n    (\\<forall>F\\<in>set (implc_get_offending_flows\n                          (TopoS_Composition_Theory_impl.get_ACS\n                            (get_impl M))\n                          (stateful_list_policy_to_list_graph\n                            \\<lparr>hostsL = nodesL G,\n                               flows_fixL = edgesL G,\n                               flows_stateL = e # accu\\<rparr>)).\n        set F \\<subseteq> set (backlinks (e # accu))) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)\n 2. \\<not> (e \\<notin> set (backlinks (edgesL G)) \\<and>\n            (\\<forall>F\\<in>set (implc_get_offending_flows\n                                  (TopoS_Composition_Theory_impl.get_ACS\n                                    (get_impl M))\n                                  (stateful_list_policy_to_list_graph\n                                    \\<lparr>hostsL = nodesL G,\n flows_fixL = edgesL G, flows_stateL = e # accu\\<rparr>)).\n                set F\n                \\<subseteq> set (backlinks (e # accu)))) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "apply(simp only: g1 g2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) (e # accu) Es =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) (e # accu) Es", "using Cons.IH[OF Cons.prems(1) Cons.prems(2) \\<open>set Es \\<subseteq> set (edgesL G)\\<close> \\<open>set (e # accu) \\<subseteq> set (edgesL G)\\<close> \\<open>distinct (Es @ (e # accu))\\<close>]"], ["proof (prove)\nusing this:\n  TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n   (get_impl M) (e # accu) Es =\n  TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n   (list_graph_to_graph G) (get_spec M) (e # accu) Es\n\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) (e # accu) Es =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) (e # accu) Es", "by simp"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n   (get_impl M) accu (e # Es) =\n  TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n   (list_graph_to_graph G) (get_spec M) accu (e # Es)\n\ngoal (1 subgoal):\n 1. \\<not> (e \\<notin> set (backlinks (edgesL G)) \\<and>\n            (\\<forall>F\\<in>set (implc_get_offending_flows\n                                  (TopoS_Composition_Theory_impl.get_ACS\n                                    (get_impl M))\n                                  (stateful_list_policy_to_list_graph\n                                    \\<lparr>hostsL = nodesL G,\n flows_fixL = edgesL G, flows_stateL = e # accu\\<rparr>)).\n                set F\n                \\<subseteq> set (backlinks (e # accu)))) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (e \\<notin> set (backlinks (edgesL G)) \\<and>\n            (\\<forall>F\\<in>set (implc_get_offending_flows\n                                  (TopoS_Composition_Theory_impl.get_ACS\n                                    (get_impl M))\n                                  (stateful_list_policy_to_list_graph\n                                    \\<lparr>hostsL = nodesL G,\n flows_fixL = edgesL G, flows_stateL = e # accu\\<rparr>)).\n                set F\n                \\<subseteq> set (backlinks (e # accu)))) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "assume cFalse: \"\\<not> (?caseDistinction)\""], ["proof (state)\nthis:\n  \\<not> (e \\<notin> set (backlinks (edgesL G)) \\<and>\n          (\\<forall>F\\<in>set (implc_get_offending_flows\n                                (TopoS_Composition_Theory_impl.get_ACS\n                                  (get_impl M))\n                                (stateful_list_policy_to_list_graph\n                                  \\<lparr>hostsL = nodesL G,\n                                     flows_fixL = edgesL G,\n                                     flows_stateL = e # accu\\<rparr>)).\n              set F \\<subseteq> set (backlinks (e # accu))))\n\ngoal (1 subgoal):\n 1. \\<not> (e \\<notin> set (backlinks (edgesL G)) \\<and>\n            (\\<forall>F\\<in>set (implc_get_offending_flows\n                                  (TopoS_Composition_Theory_impl.get_ACS\n                                    (get_impl M))\n                                  (stateful_list_policy_to_list_graph\n                                    \\<lparr>hostsL = nodesL G,\n flows_fixL = edgesL G, flows_stateL = e # accu\\<rparr>)).\n                set F\n                \\<subseteq> set (backlinks (e # accu)))) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "from cFalse"], ["proof (chain)\npicking this:\n  \\<not> (e \\<notin> set (backlinks (edgesL G)) \\<and>\n          (\\<forall>F\\<in>set (implc_get_offending_flows\n                                (TopoS_Composition_Theory_impl.get_ACS\n                                  (get_impl M))\n                                (stateful_list_policy_to_list_graph\n                                  \\<lparr>hostsL = nodesL G,\n                                     flows_fixL = edgesL G,\n                                     flows_stateL = e # accu\\<rparr>)).\n              set F \\<subseteq> set (backlinks (e # accu))))", "have g1: \"TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G (get_impl M) accu (e # Es)  = TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G (get_impl M) accu Es\""], ["proof (prove)\nusing this:\n  \\<not> (e \\<notin> set (backlinks (edgesL G)) \\<and>\n          (\\<forall>F\\<in>set (implc_get_offending_flows\n                                (TopoS_Composition_Theory_impl.get_ACS\n                                  (get_impl M))\n                                (stateful_list_policy_to_list_graph\n                                  \\<lparr>hostsL = nodesL G,\n                                     flows_fixL = edgesL G,\n                                     flows_stateL = e # accu\\<rparr>)).\n              set F \\<subseteq> set (backlinks (e # accu))))\n\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu Es", "by force"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n   (get_impl M) accu (e # Es) =\n  TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n   (get_impl M) accu Es\n\ngoal (1 subgoal):\n 1. \\<not> (e \\<notin> set (backlinks (edgesL G)) \\<and>\n            (\\<forall>F\\<in>set (implc_get_offending_flows\n                                  (TopoS_Composition_Theory_impl.get_ACS\n                                    (get_impl M))\n                                  (stateful_list_policy_to_list_graph\n                                    \\<lparr>hostsL = nodesL G,\n flows_fixL = edgesL G, flows_stateL = e # accu\\<rparr>)).\n                set F\n                \\<subseteq> set (backlinks (e # accu)))) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "from cFalse[simplified case_impl_spec]"], ["proof (chain)\npicking this:\n  \\<not> (e \\<notin> backflows (set (edgesL G)) \\<and>\n          (\\<forall>F\\<in>get_offending_flows\n                           (TopoS_Composition_Theory.get_ACS (get_spec M))\n                           (stateful_policy_to_network_graph\n                             \\<lparr>hosts = set (nodesL G),\n                                flows_fix = set (edgesL G),\n                                flows_state = set (e # accu)\\<rparr>).\n              F \\<subseteq> backflows (set (e # accu))))", "have g2: \"TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu (list_graph_to_graph G) (get_spec M) accu (e # Es) =\n            TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu (list_graph_to_graph G) (get_spec M) accu Es\""], ["proof (prove)\nusing this:\n  \\<not> (e \\<notin> backflows (set (edgesL G)) \\<and>\n          (\\<forall>F\\<in>get_offending_flows\n                           (TopoS_Composition_Theory.get_ACS (get_spec M))\n                           (stateful_policy_to_network_graph\n                             \\<lparr>hosts = set (nodesL G),\n                                flows_fix = set (edgesL G),\n                                flows_state = set (e # accu)\\<rparr>).\n              F \\<subseteq> backflows (set (e # accu))))\n\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu Es", "apply(simp add: list_graph_to_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<in> backflows (set (edgesL G)) \\<or>\n    (\\<exists>F\\<in>get_offending_flows\n                     (TopoS_Composition_Theory.get_ACS (get_spec M))\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = set (nodesL G),\n                          flows_fix = set (edgesL G),\n                          flows_state = insert e (set accu)\\<rparr>).\n        \\<not> F \\<subseteq> backflows\n                              (insert e (set accu))) \\<Longrightarrow>\n    e \\<notin> backflows (set (edgesL G)) \\<and>\n    (\\<forall>F\\<in>get_offending_flows\n                     (TopoS_Composition_Theory.get_ACS (get_spec M))\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = set (nodesL G),\n                          flows_fix = set (edgesL G),\n                          flows_state = insert e (set accu)\\<rparr>).\n        F \\<subseteq> backflows (insert e (set accu))) \\<longrightarrow>\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     \\<lparr>nodes = set (nodesL G), edges = set (edgesL G)\\<rparr>\n     (get_spec M) (e # accu) Es =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     \\<lparr>nodes = set (nodesL G), edges = set (edgesL G)\\<rparr>\n     (get_spec M) accu Es", "by fast"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n   (list_graph_to_graph G) (get_spec M) accu (e # Es) =\n  TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n   (list_graph_to_graph G) (get_spec M) accu Es\n\ngoal (1 subgoal):\n 1. \\<not> (e \\<notin> set (backlinks (edgesL G)) \\<and>\n            (\\<forall>F\\<in>set (implc_get_offending_flows\n                                  (TopoS_Composition_Theory_impl.get_ACS\n                                    (get_impl M))\n                                  (stateful_list_policy_to_list_graph\n                                    \\<lparr>hostsL = nodesL G,\n flows_fixL = edgesL G, flows_stateL = e # accu\\<rparr>)).\n                set F\n                \\<subseteq> set (backlinks (e # accu)))) \\<Longrightarrow>\n    TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu (e # Es) =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu (e # Es)", "apply(simp only: g1 g2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu Es =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu Es", "using Cons.IH[OF Cons.prems(1) Cons.prems(2) \\<open>set Es \\<subseteq> set (edgesL G)\\<close> \\<open>set accu \\<subseteq> set (edgesL G)\\<close> \\<open>distinct (Es @ accu)\\<close>]"], ["proof (prove)\nusing this:\n  TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n   (get_impl M) accu Es =\n  TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n   (list_graph_to_graph G) (get_spec M) accu Es\n\ngoal (1 subgoal):\n 1. TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n     (get_impl M) accu Es =\n    TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n     (list_graph_to_graph G) (get_spec M) accu Es", "by simp"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n   (get_impl M) accu (e # Es) =\n  TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n   (list_graph_to_graph G) (get_spec M) accu (e # Es)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu G\n   (get_impl M) accu (e # Es) =\n  TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n   (list_graph_to_graph G) (get_spec M) accu (e # Es)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filter_compliant_stateful_ACS_cont_complies:\n    \"\\<lbrakk> \\<forall> (m_impl, m_spec) \\<in> set M. SecurityInvariant_complies_formal_def m_impl m_spec; wf_list_graph G; set Es \\<subseteq> set (edgesL G); distinct Es \\<rbrakk> \\<Longrightarrow>\n       filter_compliant_stateful_ACS_accu G (get_impl M) [] Es = TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS (list_graph_to_graph G) (get_spec M) Es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n     distinct Es\\<rbrakk>\n    \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                       G (get_impl M) [] Es =\n                      TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n                       (list_graph_to_graph G) (get_spec M) Es", "apply(unfold filter_compliant_stateful_ACS_def TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n     distinct Es\\<rbrakk>\n    \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                       G (get_impl M) [] Es =\n                      TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                       (list_graph_to_graph G) (get_spec M) [] Es", "apply(rule filter_compliant_stateful_ACS_accu_complies)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n     distinct Es\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(m_impl, m_spec)\\<in>set M.\n                         SecurityInvariant_complies_formal_def m_impl m_spec\n 2. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n     distinct Es\\<rbrakk>\n    \\<Longrightarrow> wf_list_graph G\n 3. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n     distinct Es\\<rbrakk>\n    \\<Longrightarrow> set Es \\<subseteq> set (edgesL G)\n 4. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n     distinct Es\\<rbrakk>\n    \\<Longrightarrow> set [] \\<subseteq> set (edgesL G)\n 5. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; set Es \\<subseteq> set (edgesL G);\n     distinct Es\\<rbrakk>\n    \\<Longrightarrow> distinct (Es @ [])", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma filter_compliant_stateful_ACS_complies:\n    \"\\<lbrakk> \\<forall> (m_impl, m_spec) \\<in> set M. SecurityInvariant_complies_formal_def m_impl m_spec; wf_list_graph G \\<rbrakk> \\<Longrightarrow>\n       filter_compliant_stateful_ACS G (get_impl M) = TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS (list_graph_to_graph G) (get_spec M) (edgesL G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS\n                       G (get_impl M) =\n                      TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n                       (list_graph_to_graph G) (get_spec M) (edgesL G)", "apply(unfold filter_compliant_stateful_ACS_def TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS_accu\n                       G (get_impl M) [] (edgesL G) =\n                      TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu\n                       (list_graph_to_graph G) (get_spec M) [] (edgesL G)", "apply(rule filter_compliant_stateful_ACS_accu_complies)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(m_impl, m_spec)\\<in>set M.\n                         SecurityInvariant_complies_formal_def m_impl m_spec\n 2. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> wf_list_graph G\n 3. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> set (edgesL G) \\<subseteq> set (edgesL G)\n 4. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> set [] \\<subseteq> set (edgesL G)\n 5. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> distinct (edgesL G @ [])", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set M.\n                case x of\n                (m_impl, m_spec) \\<Rightarrow>\n                  SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G\\<rbrakk>\n    \\<Longrightarrow> distinct (edgesL G)", "apply(simp add: wf_list_graph_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*TODO: show wf_stateful_policy and distinctness and wf_list_graph, ...*)"], ["", "definition generate_valid_stateful_policy_IFSACS :: \"'v list_graph \\<Rightarrow> 'v SecurityInvariant list \\<Rightarrow> 'v stateful_list_policy\" where\n    \"generate_valid_stateful_policy_IFSACS G M = (let filterIFS = filter_IFS_no_violations G M in\n        (let filterACS = filter_compliant_stateful_ACS_accu G M [] filterIFS in \\<lparr> hostsL = nodesL G, flows_fixL = edgesL G, flows_stateL = filterACS \\<rparr>))\""], ["", "fun inefficient_list_intersect :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list\" where\n    \"inefficient_list_intersect [] bs = []\" |\n    \"inefficient_list_intersect (a#as) bs = (if a \\<in> set bs then a#(inefficient_list_intersect as bs) else inefficient_list_intersect as bs)\""], ["", "lemma inefficient_list_intersect_correct: \"set (inefficient_list_intersect a b) = (set a) \\<inter> (set b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (inefficient_list_intersect a b) = set a \\<inter> set b", "apply(induction a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. set (inefficient_list_intersect [] b) = set [] \\<inter> set b\n 2. \\<And>a1 a2.\n       set (inefficient_list_intersect a2 b) =\n       set a2 \\<inter> set b \\<Longrightarrow>\n       set (inefficient_list_intersect (a1 # a2) b) =\n       set (a1 # a2) \\<inter> set b", "by(simp_all)"], ["", "definition generate_valid_stateful_policy_IFSACS_2 :: \"'v list_graph \\<Rightarrow> 'v SecurityInvariant list \\<Rightarrow>  'v stateful_list_policy\" where\n    \"generate_valid_stateful_policy_IFSACS_2 G M =\n    \\<lparr> hostsL = nodesL G, flows_fixL = edgesL G, flows_stateL = inefficient_list_intersect (filter_IFS_no_violations G M) (filter_compliant_stateful_ACS G M) \\<rparr>\""], ["", "lemma generate_valid_stateful_policy_IFSACS_2_complies: \"\\<lbrakk>\\<forall> (m_impl, m_spec) \\<in> set M. SecurityInvariant_complies_formal_def m_impl m_spec;\n          wf_list_graph G;\n          valid_reqs (get_spec M);\n          TopoS_Composition_Theory.all_security_requirements_fulfilled (get_spec M) (list_graph_to_graph G);\n          \\<T> = (generate_valid_stateful_policy_IFSACS_2 G (get_impl M))\\<rbrakk> \\<Longrightarrow> \n   stateful_policy_compliance \\<lparr>hosts = set (hostsL \\<T>), flows_fix = set (flows_fixL \\<T>), flows_state = set (flows_stateL \\<T>) \\<rparr> (list_graph_to_graph G) (get_spec M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> stateful_policy_compliance\n                       \\<lparr>hosts = set (hostsL \\<T>),\n                          flows_fix = set (flows_fixL \\<T>),\n                          flows_state = set (flows_stateL \\<T>)\\<rparr>\n                       (list_graph_to_graph G) (get_spec M)", "apply(rule_tac edgesList=\"edgesL G\" in generate_valid_stateful_policy_IFSACS_2_stateful_policy_compliance)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> valid_reqs (get_spec M)\n 2. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> wf_graph (list_graph_to_graph G)\n 3. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> TopoS_Composition_Theory.all_security_requirements_fulfilled\n                       (get_spec M) (list_graph_to_graph G)\n 4. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> set (edgesL G) = edges (list_graph_to_graph G)\n 5. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>hosts = set (hostsL \\<T>),\n                         flows_fix = set (flows_fixL \\<T>),\n                         flows_state = set (flows_stateL \\<T>)\\<rparr> =\n                      TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2\n                       (list_graph_to_graph G) (get_spec M) (edgesL G)", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> wf_graph (list_graph_to_graph G)\n 2. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> TopoS_Composition_Theory.all_security_requirements_fulfilled\n                       (get_spec M) (list_graph_to_graph G)\n 3. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> set (edgesL G) = edges (list_graph_to_graph G)\n 4. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>hosts = set (hostsL \\<T>),\n                         flows_fix = set (flows_fixL \\<T>),\n                         flows_state = set (flows_stateL \\<T>)\\<rparr> =\n                      TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2\n                       (list_graph_to_graph G) (get_spec M) (edgesL G)", "apply (metis wf_list_graph_def wf_list_graph_iff_wf_graph)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> TopoS_Composition_Theory.all_security_requirements_fulfilled\n                       (get_spec M) (list_graph_to_graph G)\n 2. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> set (edgesL G) = edges (list_graph_to_graph G)\n 3. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>hosts = set (hostsL \\<T>),\n                         flows_fix = set (flows_fixL \\<T>),\n                         flows_state = set (flows_stateL \\<T>)\\<rparr> =\n                      TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2\n                       (list_graph_to_graph G) (get_spec M) (edgesL G)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> set (edgesL G) = edges (list_graph_to_graph G)\n 2. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>hosts = set (hostsL \\<T>),\n                         flows_fix = set (flows_fixL \\<T>),\n                         flows_state = set (flows_stateL \\<T>)\\<rparr> =\n                      TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2\n                       (list_graph_to_graph G) (get_spec M) (edgesL G)", "apply(simp add: list_graph_to_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>(m_impl, m_spec)\\<in>set M.\n                SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2 G\n      (get_impl M)\\<rbrakk>\n    \\<Longrightarrow> \\<lparr>hosts = set (hostsL \\<T>),\n                         flows_fix = set (flows_fixL \\<T>),\n                         flows_state = set (flows_stateL \\<T>)\\<rparr> =\n                      TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2\n                       (list_graph_to_graph G) (get_spec M) (edgesL G)", "apply(simp add: TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_def TopoS_Stateful_Policy_impl.generate_valid_stateful_policy_IFSACS_2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set M.\n                case x of\n                (m_impl, m_spec) \\<Rightarrow>\n                  SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M) (list_graph_to_graph G);\n     \\<T> =\n     \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n        flows_stateL =\n          inefficient_list_intersect\n           (TopoS_Stateful_Policy_impl.filter_IFS_no_violations G\n             (get_impl M))\n           (TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS G\n             (get_impl M))\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> set (nodesL G) = nodes (list_graph_to_graph G) \\<and>\n                      set (edgesL G) = edges (list_graph_to_graph G) \\<and>\n                      set (inefficient_list_intersect\n                            (TopoS_Stateful_Policy_impl.filter_IFS_no_violations\n                              G (get_impl M))\n                            (TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS\n                              G (get_impl M))) =\n                      set (TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n                            (list_graph_to_graph G) (get_spec M)\n                            (edgesL G)) \\<inter>\n                      set (TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n                            (list_graph_to_graph G) (get_spec M) (edgesL G))", "apply(simp add: list_graph_to_graph_def inefficient_list_intersect_correct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set M.\n                case x of\n                (m_impl, m_spec) \\<Rightarrow>\n                  SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M)\n      \\<lparr>nodes = set (nodesL G), edges = set (edgesL G)\\<rparr>;\n     \\<T> =\n     \\<lparr>hostsL = nodesL G, flows_fixL = edgesL G,\n        flows_stateL =\n          inefficient_list_intersect\n           (TopoS_Stateful_Policy_impl.filter_IFS_no_violations G\n             (get_impl M))\n           (TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS G\n             (get_impl M))\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> set (TopoS_Stateful_Policy_impl.filter_IFS_no_violations\n                            G (get_impl M)) \\<inter>\n                      set (TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS\n                            G (get_impl M)) =\n                      set (TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G)) \\<inter>\n                      set (TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G))", "apply(thin_tac \"\\<T> = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set M.\n                case x of\n                (m_impl, m_spec) \\<Rightarrow>\n                  SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M)\n      \\<lparr>nodes = set (nodesL G),\n         edges = set (edgesL G)\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> set (TopoS_Stateful_Policy_impl.filter_IFS_no_violations\n                            G (get_impl M)) \\<inter>\n                      set (TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS\n                            G (get_impl M)) =\n                      set (TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G)) \\<inter>\n                      set (TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G))", "apply(frule(1) filter_compliant_stateful_ACS_complies)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set M.\n                case x of\n                (m_impl, m_spec) \\<Rightarrow>\n                  SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M)\n      \\<lparr>nodes = set (nodesL G), edges = set (edgesL G)\\<rparr>;\n     TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS G\n      (get_impl M) =\n     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n      (list_graph_to_graph G) (get_spec M) (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> set (TopoS_Stateful_Policy_impl.filter_IFS_no_violations\n                            G (get_impl M)) \\<inter>\n                      set (TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS\n                            G (get_impl M)) =\n                      set (TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G)) \\<inter>\n                      set (TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G))", "apply(frule(1) filter_IFS_no_violations_complies)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set M.\n                case x of\n                (m_impl, m_spec) \\<Rightarrow>\n                  SecurityInvariant_complies_formal_def m_impl m_spec;\n     wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M)\n      \\<lparr>nodes = set (nodesL G), edges = set (edgesL G)\\<rparr>;\n     TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS G\n      (get_impl M) =\n     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n      (list_graph_to_graph G) (get_spec M) (edgesL G);\n     TopoS_Stateful_Policy_impl.filter_IFS_no_violations G (get_impl M) =\n     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n      (list_graph_to_graph G) (get_spec M) (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> set (TopoS_Stateful_Policy_impl.filter_IFS_no_violations\n                            G (get_impl M)) \\<inter>\n                      set (TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS\n                            G (get_impl M)) =\n                      set (TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G)) \\<inter>\n                      set (TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G))", "apply(thin_tac \"_\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_list_graph G; valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M)\n      \\<lparr>nodes = set (nodesL G), edges = set (edgesL G)\\<rparr>;\n     TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS G\n      (get_impl M) =\n     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n      (list_graph_to_graph G) (get_spec M) (edgesL G);\n     TopoS_Stateful_Policy_impl.filter_IFS_no_violations G (get_impl M) =\n     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n      (list_graph_to_graph G) (get_spec M) (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> set (TopoS_Stateful_Policy_impl.filter_IFS_no_violations\n                            G (get_impl M)) \\<inter>\n                      set (TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS\n                            G (get_impl M)) =\n                      set (TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G)) \\<inter>\n                      set (TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G))", "apply(thin_tac \"_\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_reqs (get_spec M);\n     TopoS_Composition_Theory.all_security_requirements_fulfilled\n      (get_spec M)\n      \\<lparr>nodes = set (nodesL G), edges = set (edgesL G)\\<rparr>;\n     TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS G\n      (get_impl M) =\n     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n      (list_graph_to_graph G) (get_spec M) (edgesL G);\n     TopoS_Stateful_Policy_impl.filter_IFS_no_violations G (get_impl M) =\n     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n      (list_graph_to_graph G) (get_spec M) (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> set (TopoS_Stateful_Policy_impl.filter_IFS_no_violations\n                            G (get_impl M)) \\<inter>\n                      set (TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS\n                            G (get_impl M)) =\n                      set (TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G)) \\<inter>\n                      set (TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G))", "apply(thin_tac \"_\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TopoS_Composition_Theory.all_security_requirements_fulfilled\n              (get_spec M)\n              \\<lparr>nodes = set (nodesL G),\n                 edges = set (edgesL G)\\<rparr>;\n     TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS G\n      (get_impl M) =\n     TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n      (list_graph_to_graph G) (get_spec M) (edgesL G);\n     TopoS_Stateful_Policy_impl.filter_IFS_no_violations G (get_impl M) =\n     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n      (list_graph_to_graph G) (get_spec M) (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> set (TopoS_Stateful_Policy_impl.filter_IFS_no_violations\n                            G (get_impl M)) \\<inter>\n                      set (TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS\n                            G (get_impl M)) =\n                      set (TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G)) \\<inter>\n                      set (TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G))", "apply(thin_tac \"_\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS G\n              (get_impl M) =\n             TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n              (list_graph_to_graph G) (get_spec M) (edgesL G);\n     TopoS_Stateful_Policy_impl.filter_IFS_no_violations G (get_impl M) =\n     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n      (list_graph_to_graph G) (get_spec M) (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> set (TopoS_Stateful_Policy_impl.filter_IFS_no_violations\n                            G (get_impl M)) \\<inter>\n                      set (TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS\n                            G (get_impl M)) =\n                      set (TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G)) \\<inter>\n                      set (TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>TopoS_Stateful_Policy_impl.filter_compliant_stateful_ACS G\n              (get_impl M) =\n             TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n              (list_graph_to_graph G) (get_spec M) (edgesL G);\n     TopoS_Stateful_Policy_impl.filter_IFS_no_violations G (get_impl M) =\n     TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n      (list_graph_to_graph G) (get_spec M) (edgesL G)\\<rbrakk>\n    \\<Longrightarrow> set (TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n                            (list_graph_to_graph G) (get_spec M)\n                            (edgesL G)) \\<inter>\n                      set (TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n                            (list_graph_to_graph G) (get_spec M)\n                            (edgesL G)) =\n                      set (TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G)) \\<inter>\n                      set (TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS\n                            \\<lparr>nodes = set (nodesL G),\n                               edges = set (edgesL G)\\<rparr>\n                            (get_spec M) (edgesL G))", "by (metis list_graph_to_graph_def)"], ["", "end"]]}