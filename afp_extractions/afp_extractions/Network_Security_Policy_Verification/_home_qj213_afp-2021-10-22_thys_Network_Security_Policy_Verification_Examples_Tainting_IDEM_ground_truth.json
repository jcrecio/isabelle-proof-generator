{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Examples/Tainting/IDEM.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma \"wf_list_graph policy\"", "lemma \"dom (tainiting_host_attributes) \\<subseteq> set (nodesL policy)\"", "lemma \"dom(map_of system_EMS) \\<subseteq> set (nodesL policy)\"", "lemma \"dom(map_of system_P4S) \\<subseteq> set (nodesL policy)\"", "lemma \"dom(map_of system_P4Sstorage) \\<subseteq> set (nodesL policy)\"", "lemma \"all_security_requirements_fulfilled invariants policy\""], "translations": [["", "lemma \"wf_list_graph policy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph policy", "by eval"], ["", "context begin"], ["", "definition \"tainiting_host_attributes \\<equiv> [\n                           ''Logger'' \\<mapsto> TaintsUntaints {''A'',''B'',''C'',''D''} {},\n                           ''Sensor_Controller'' \\<mapsto> TaintsUntaints {''A'',''B'',''C'',''D''} {},\n                           ''P4S_in'' \\<mapsto> TaintsUntaints {''A'',''B'',''C'',''D''} {},\n                           ''P4S_filter_A'' \\<mapsto> TaintsUntaints {''A''} {''B'',''C'',''D''},\n                           ''P4S_filter_B'' \\<mapsto> TaintsUntaints {''B''} {''A'',''C'',''D''},\n                           ''P4S_filter_C'' \\<mapsto> TaintsUntaints {''C''} {''A'',''B'',''D''},\n                           ''P4S_aggregator_C'' \\<mapsto> TaintsUntaints {''C_low''} {''C''},\n                           ''P4S_encrypt_A'' \\<mapsto> TaintsUntaints {} {''A''},\n                           ''P4S_encrypt_B'' \\<mapsto> TaintsUntaints {} {''B''},\n                           ''P4S_encrypt_C'' \\<mapsto> TaintsUntaints {} {''C''},\n                           ''P4S_encrypt_C_low'' \\<mapsto> TaintsUntaints {}{''C_low''}\n                           ]\""], ["", "private"], ["", "lemma \"dom (tainiting_host_attributes) \\<subseteq> set (nodesL policy)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom tainiting_host_attributes \\<subseteq> set (nodesL policy)", "by(simp add: tainiting_host_attributes_def policy_def)"], ["", "definition \"Tainting_m \\<equiv> new_configured_list_SecurityInvariant SINVAR_LIB_TaintingTrusted \\<lparr>\n        node_properties = tainiting_host_attributes \\<rparr> ''critical energy data'' \""], ["", "end"], ["", "context begin"], ["", "private"], ["", "definition \"system_EMS \\<equiv>\n                [(''Logger'',  SystemComponent),\n                 (''Sensor_Controller'',  SystemBoundaryOutput)\n                 ]\""], ["", "private"], ["", "lemma \"dom(map_of system_EMS) \\<subseteq> set (nodesL policy)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (map_of system_EMS) \\<subseteq> set (nodesL policy)", "by(simp add: system_EMS_def policy_def)"], ["", "definition \"system_EMS_m \\<equiv> new_meta_system_boundary system_EMS ''EMS''\""], ["", "end"], ["", "context begin"], ["", "private"], ["", "definition \"system_P4S \\<equiv>\n                [(''P4S_in'',  SystemBoundaryInput),\n                 (''P4S_filter_A'',  SystemComponent),\n                 (''P4S_filter_B'',  SystemComponent),\n                 (''P4S_filter_C'',  SystemComponent),\n                 (''P4S_aggregator_C'',  SystemComponent),\n                 (''P4S_encrypt_A'',  SystemComponent),\n                 (''P4S_encrypt_B'',  SystemComponent),\n                 (''P4S_encrypt_C'',  SystemComponent),\n                 (''P4S_encrypt_C_low'',  SystemComponent),\n                 (''P4S_out'',  SystemBoundaryOutput)\n                 ]\""], ["", "private"], ["", "lemma \"dom(map_of system_P4S) \\<subseteq> set (nodesL policy)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (map_of system_P4S) \\<subseteq> set (nodesL policy)", "by(simp add: system_P4S_def policy_def)"], ["", "definition \"system_P4S_m \\<equiv> new_meta_system_boundary system_P4S ''P4S''\""], ["", "end"], ["", "context begin"], ["", "private"], ["", "definition \"system_P4Sstorage \\<equiv>\n                [(''P4S_DB'',  SystemBoundaryInput)\n                 ]\""], ["", "private"], ["", "lemma \"dom(map_of system_P4Sstorage) \\<subseteq> set (nodesL policy)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (map_of system_P4Sstorage) \\<subseteq> set (nodesL policy)", "by(simp add: system_P4Sstorage_def policy_def)"], ["", "definition \"system_P4Sstorage_m \\<equiv> new_meta_system_boundary system_P4Sstorage ''P4S storage''\""], ["", "end"], ["", "definition \"invariants \\<equiv> [Tainting_m] @ system_EMS_m @ system_P4S_m @system_P4Sstorage_m\""], ["", "lemma \"all_security_requirements_fulfilled invariants policy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_Composition_Theory_impl.all_security_requirements_fulfilled\n     invariants policy", "by eval"], ["", "ML\\<open>\nvisualize_graph @{context} @{term \"invariants\"} @{term \"policy\"};\n\\<close>"], ["", "value[code] \"implc_get_offending_flows invariants (policy\\<lparr> edgesL := edgesL policy\\<rparr>)\""], ["", "(*ML{*\nvisualize_graph @{context} @{term \"invariants\"} @{term \"(policy\\<lparr> edgesL := edgesL policy\\<rparr>)\"};\n*}*)"], ["", "ML\\<open>\nvisualize_graph_header @{context} @{term \"invariants\"} @{term \"policy\"} @{term tainiting_host_attributes};\n\\<close>"], ["", "definition make_policy :: \"('a SecurityInvariant) list \\<Rightarrow> 'a list \\<Rightarrow> 'a list_graph\" where\n  \"make_policy sinvars Vs \\<equiv> generate_valid_topology sinvars \\<lparr>nodesL = Vs, edgesL = List.product Vs Vs \\<rparr>\""], ["", "value[code] \"make_policy invariants (nodesL policy)\""], ["", "ML_val\\<open>\nvisualize_edges @{context} @{term \"edgesL policy\"}\n    [(\"edge [dir=\\\"arrow\\\", style=dashed, color=\\\"#FF8822\\\", constraint=false]\",\n     @{term \"[(e1, e2) \\<leftarrow>  List.product  (nodesL policy) (nodesL policy).\n     (e1,e2) \\<notin> set (edgesL (make_policy invariants (nodesL policy))) \\<and> (e2 = ''Adversary'') \\<and> (e1 \\<noteq> ''Adversary'')]\"})] \"\";\n\\<close>"], ["", "end"]]}