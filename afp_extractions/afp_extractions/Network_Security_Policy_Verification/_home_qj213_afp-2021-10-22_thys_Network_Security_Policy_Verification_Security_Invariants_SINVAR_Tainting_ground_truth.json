{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_Tainting.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma \"card (UNIV::taints) = 0\"", "lemma sinvar_tainting_edges_def: \"wf_graph G \\<Longrightarrow>\n    sinvar_tainting G nP \\<longleftrightarrow> (\\<forall> (v1,v2) \\<in> edges G. \\<forall>r \\<in> (succ_tran G v1). nP v1 \\<subseteq> nP r)\"", "lemma sinvar_preferred_def:\n    \"wf_graph G \\<Longrightarrow> sinvar_tainting G nP = sinvar G nP\"", "lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\"", "lemma Taints_def_unique: \"otherbot \\<noteq> {} \\<Longrightarrow>\n      \\<exists>G p i f. wf_graph G \\<and> \\<not> sinvar G p \\<and> f \\<in> (SecurityInvariant_withOffendingFlows.set_offending_flows sinvar G p) \\<and>\n         sinvar (delete_edges G f) p \\<and>\n          i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot)) \"", "lemma Taints_ENF: \"SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar (\\<subseteq>)\"", "lemma Taints_ENF_refl: \"SecurityInvariant_withOffendingFlows.ENF_refl sinvar (\\<subseteq>)\"", "lemma Taints_offending_set: \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = Taints_offending_set\"", "lemma TopoS_Tainting: \"SecurityInvariant sinvar default_node_properties receiver_violation\""], "translations": [["", "lemma \"card (UNIV::taints) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card UNIV = 0", "by (simp add: infinite_UNIV_listI)"], ["", "qualified"], ["", "definition default_node_properties :: \"taints\"\n    where  \"default_node_properties \\<equiv> {}\""], ["", "(*The definition we want to present*)"], ["", "text\\<open>For all nodes @{term n} in the graph, for all nodes @{term r} which are reachable from @{term n},\n        node @{term n} needs the appropriate tainting fields which are set by @{term r}\\<close>"], ["", "definition sinvar_tainting :: \"'v graph \\<Rightarrow> ('v \\<Rightarrow> taints) \\<Rightarrow> bool\" where\n    \"sinvar_tainting G nP \\<equiv> \\<forall> n \\<in> (nodes G). \\<forall>r \\<in> (succ_tran G n). nP n \\<subseteq> nP r\""], ["", "private"], ["", "lemma sinvar_tainting_edges_def: \"wf_graph G \\<Longrightarrow>\n    sinvar_tainting G nP \\<longleftrightarrow> (\\<forall> (v1,v2) \\<in> edges G. \\<forall>r \\<in> (succ_tran G v1). nP v1 \\<subseteq> nP r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_graph G \\<Longrightarrow>\n    sinvar_tainting G nP =\n    (\\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r)", "unfolding sinvar_tainting_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_graph G \\<Longrightarrow>\n    (\\<forall>n\\<in>nodes G.\n        \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r) =\n    (\\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>n\\<in>nodes G.\n        \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(v1, v2)\\<in>edges G.\n                         \\<forall>r\\<in>succ_tran G v1.\n                            nP v1 \\<subseteq> nP r\n 2. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n\\<in>nodes G.\n                         \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r", "assume a1: \"wf_graph G\"\n        and  a2: \"\\<forall>n\\<in>nodes G. \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r\""], ["proof (state)\nthis:\n  wf_graph G\n  \\<forall>n\\<in>nodes G.\n     \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r\n\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>n\\<in>nodes G.\n        \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(v1, v2)\\<in>edges G.\n                         \\<forall>r\\<in>succ_tran G v1.\n                            nP v1 \\<subseteq> nP r\n 2. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n\\<in>nodes G.\n                         \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r", "from a1[simplified wf_graph_def]"], ["proof (chain)\npicking this:\n  (fst ` edges G \\<subseteq> nodes G \\<and>\n   snd ` edges G \\<subseteq> nodes G) \\<and>\n  finite (edges G) \\<and> finite (nodes G)", "have f1: \"fst ` edges G \\<subseteq> nodes G\""], ["proof (prove)\nusing this:\n  (fst ` edges G \\<subseteq> nodes G \\<and>\n   snd ` edges G \\<subseteq> nodes G) \\<and>\n  finite (edges G) \\<and> finite (nodes G)\n\ngoal (1 subgoal):\n 1. fst ` edges G \\<subseteq> nodes G", "by simp"], ["proof (state)\nthis:\n  fst ` edges G \\<subseteq> nodes G\n\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>n\\<in>nodes G.\n        \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(v1, v2)\\<in>edges G.\n                         \\<forall>r\\<in>succ_tran G v1.\n                            nP v1 \\<subseteq> nP r\n 2. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n\\<in>nodes G.\n                         \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r", "from f1 a2"], ["proof (chain)\npicking this:\n  fst ` edges G \\<subseteq> nodes G\n  \\<forall>n\\<in>nodes G.\n     \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r", "have \"\\<forall>v \\<in> (fst ` edges G). \\<forall>r\\<in>succ_tran G v. nP v \\<subseteq> nP r\""], ["proof (prove)\nusing this:\n  fst ` edges G \\<subseteq> nodes G\n  \\<forall>n\\<in>nodes G.\n     \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>fst ` edges G.\n       \\<forall>r\\<in>succ_tran G v. nP v \\<subseteq> nP r", "by auto"], ["proof (state)\nthis:\n  \\<forall>v\\<in>fst ` edges G.\n     \\<forall>r\\<in>succ_tran G v. nP v \\<subseteq> nP r\n\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>n\\<in>nodes G.\n        \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(v1, v2)\\<in>edges G.\n                         \\<forall>r\\<in>succ_tran G v1.\n                            nP v1 \\<subseteq> nP r\n 2. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n\\<in>nodes G.\n                         \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r", "thus \"\\<forall>(v1, _)\\<in>edges G. \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>fst ` edges G.\n     \\<forall>r\\<in>succ_tran G v. nP v \\<subseteq> nP r\n\ngoal (1 subgoal):\n 1. \\<forall>(v1, uu_)\\<in>edges G.\n       \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>(v1, uu_)\\<in>edges G.\n     \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n\\<in>nodes G.\n                         \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n\\<in>nodes G.\n                         \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r", "assume a1: \"wf_graph G\"\n        and  a2: \"\\<forall>(v1, v2)\\<in>edges G. \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\""], ["proof (state)\nthis:\n  wf_graph G\n  \\<forall>(v1, v2)\\<in>edges G.\n     \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n\\<in>nodes G.\n                         \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r", "from a2"], ["proof (chain)\npicking this:\n  \\<forall>(v1, v2)\\<in>edges G.\n     \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r", "have g1: \"\\<forall> v \\<in> (fst ` edges G). \\<forall>r\\<in>succ_tran G v. nP v \\<subseteq> nP r\""], ["proof (prove)\nusing this:\n  \\<forall>(v1, v2)\\<in>edges G.\n     \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>fst ` edges G.\n       \\<forall>r\\<in>succ_tran G v. nP v \\<subseteq> nP r", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>v\\<in>fst ` edges G.\n     \\<forall>r\\<in>succ_tran G v. nP v \\<subseteq> nP r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n\\<in>nodes G.\n                         \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r", "from FiniteGraph.succ_tran_empty[OF a1]"], ["proof (chain)\npicking this:\n  ?v \\<notin> fst ` edges G \\<Longrightarrow> succ_tran G ?v = {}", "have g2: \"\\<forall> v. v \\<notin> (fst ` edges G) \\<longrightarrow> (\\<forall>r\\<in>succ_tran G v. nP v \\<subseteq> nP r)\""], ["proof (prove)\nusing this:\n  ?v \\<notin> fst ` edges G \\<Longrightarrow> succ_tran G ?v = {}\n\ngoal (1 subgoal):\n 1. \\<forall>v.\n       v \\<notin> fst ` edges G \\<longrightarrow>\n       (\\<forall>r\\<in>succ_tran G v. nP v \\<subseteq> nP r)", "by blast"], ["proof (state)\nthis:\n  \\<forall>v.\n     v \\<notin> fst ` edges G \\<longrightarrow>\n     (\\<forall>r\\<in>succ_tran G v. nP v \\<subseteq> nP r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n\\<in>nodes G.\n                         \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r", "from g1 g2"], ["proof (chain)\npicking this:\n  \\<forall>v\\<in>fst ` edges G.\n     \\<forall>r\\<in>succ_tran G v. nP v \\<subseteq> nP r\n  \\<forall>v.\n     v \\<notin> fst ` edges G \\<longrightarrow>\n     (\\<forall>r\\<in>succ_tran G v. nP v \\<subseteq> nP r)", "show \"\\<forall>n\\<in>nodes G. \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>fst ` edges G.\n     \\<forall>r\\<in>succ_tran G v. nP v \\<subseteq> nP r\n  \\<forall>v.\n     v \\<notin> fst ` edges G \\<longrightarrow>\n     (\\<forall>r\\<in>succ_tran G v. nP v \\<subseteq> nP r)\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>nodes G.\n       \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r", "by metis"], ["proof (state)\nthis:\n  \\<forall>n\\<in>nodes G.\n     \\<forall>r\\<in>succ_tran G n. nP n \\<subseteq> nP r\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Alternative definition of the @{const sinvar_tainting}\\<close>"], ["", "qualified"], ["", "definition sinvar :: \"'v graph \\<Rightarrow> ('v \\<Rightarrow> taints) \\<Rightarrow> bool\" where\n    \"sinvar G nP \\<equiv> \\<forall> (v1,v2) \\<in> edges G. nP v1 \\<subseteq> nP v2\""], ["", "qualified"], ["", "lemma sinvar_preferred_def:\n    \"wf_graph G \\<Longrightarrow> sinvar_tainting G nP = sinvar G nP\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_graph G \\<Longrightarrow> sinvar_tainting G nP = sinvar G nP", "proof(unfold sinvar_tainting_edges_def sinvar_def, rule iffI, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2\n 2. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(v1, v2)\\<in>edges G.\n                         \\<forall>r\\<in>succ_tran G v1.\n                            nP v1 \\<subseteq> nP r", "case 2"], ["proof (state)\nthis:\n  wf_graph G\n  \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2\n 2. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(v1, v2)\\<in>edges G.\n                         \\<forall>r\\<in>succ_tran G v1.\n                            nP v1 \\<subseteq> nP r", "have \"(v, v') \\<in> (edges G)\\<^sup>+ \\<Longrightarrow> nP v \\<subseteq> nP v'\" for v v'"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v, v') \\<in> (edges G)\\<^sup>+ \\<Longrightarrow> nP v \\<subseteq> nP v'", "proof(induction rule: trancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y. (v, y) \\<in> edges G \\<Longrightarrow> nP v \\<subseteq> nP y\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (edges G)\\<^sup>+; (y, z) \\<in> edges G;\n        nP v \\<subseteq> nP y\\<rbrakk>\n       \\<Longrightarrow> nP v \\<subseteq> nP z", "case base"], ["proof (state)\nthis:\n  (v, y_) \\<in> edges G\n\ngoal (2 subgoals):\n 1. \\<And>y. (v, y) \\<in> edges G \\<Longrightarrow> nP v \\<subseteq> nP y\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (edges G)\\<^sup>+; (y, z) \\<in> edges G;\n        nP v \\<subseteq> nP y\\<rbrakk>\n       \\<Longrightarrow> nP v \\<subseteq> nP z", "thus ?case"], ["proof (prove)\nusing this:\n  (v, y_) \\<in> edges G\n\ngoal (1 subgoal):\n 1. nP v \\<subseteq> nP y_", "using 2(2)"], ["proof (prove)\nusing this:\n  (v, y_) \\<in> edges G\n  \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2\n\ngoal (1 subgoal):\n 1. nP v \\<subseteq> nP y_", "by fastforce"], ["proof (state)\nthis:\n  nP v \\<subseteq> nP y_\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (edges G)\\<^sup>+; (y, z) \\<in> edges G;\n        nP v \\<subseteq> nP y\\<rbrakk>\n       \\<Longrightarrow> nP v \\<subseteq> nP z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (edges G)\\<^sup>+; (y, z) \\<in> edges G;\n        nP v \\<subseteq> nP y\\<rbrakk>\n       \\<Longrightarrow> nP v \\<subseteq> nP z", "case step"], ["proof (state)\nthis:\n  (v, y_) \\<in> (edges G)\\<^sup>+\n  (y_, z_) \\<in> edges G\n  nP v \\<subseteq> nP y_\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (edges G)\\<^sup>+; (y, z) \\<in> edges G;\n        nP v \\<subseteq> nP y\\<rbrakk>\n       \\<Longrightarrow> nP v \\<subseteq> nP z", "thus ?case"], ["proof (prove)\nusing this:\n  (v, y_) \\<in> (edges G)\\<^sup>+\n  (y_, z_) \\<in> edges G\n  nP v \\<subseteq> nP y_\n\ngoal (1 subgoal):\n 1. nP v \\<subseteq> nP z_", "using 2(2)"], ["proof (prove)\nusing this:\n  (v, y_) \\<in> (edges G)\\<^sup>+\n  (y_, z_) \\<in> edges G\n  nP v \\<subseteq> nP y_\n  \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2\n\ngoal (1 subgoal):\n 1. nP v \\<subseteq> nP z_", "by fastforce"], ["proof (state)\nthis:\n  nP v \\<subseteq> nP z_\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (?v, ?v') \\<in> (edges G)\\<^sup>+ \\<Longrightarrow>\n  nP ?v \\<subseteq> nP ?v'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2\n 2. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(v1, v2)\\<in>edges G.\n                         \\<forall>r\\<in>succ_tran G v1.\n                            nP v1 \\<subseteq> nP r", "thus ?case"], ["proof (prove)\nusing this:\n  (?v, ?v') \\<in> (edges G)\\<^sup>+ \\<Longrightarrow>\n  nP ?v \\<subseteq> nP ?v'\n\ngoal (1 subgoal):\n 1. \\<forall>(v1, v2)\\<in>edges G.\n       \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r", "by(simp add: succ_tran_def)"], ["proof (state)\nthis:\n  \\<forall>(v1, v2)\\<in>edges G.\n     \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2", "case 1"], ["proof (state)\nthis:\n  wf_graph G\n  \\<forall>(v1, v2)\\<in>edges G.\n     \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2", "from 1(1)[simplified wf_graph_def]"], ["proof (chain)\npicking this:\n  (fst ` edges G \\<subseteq> nodes G \\<and>\n   snd ` edges G \\<subseteq> nodes G) \\<and>\n  finite (edges G) \\<and> finite (nodes G)", "have f1: \"fst ` edges G \\<subseteq> nodes G\""], ["proof (prove)\nusing this:\n  (fst ` edges G \\<subseteq> nodes G \\<and>\n   snd ` edges G \\<subseteq> nodes G) \\<and>\n  finite (edges G) \\<and> finite (nodes G)\n\ngoal (1 subgoal):\n 1. fst ` edges G \\<subseteq> nodes G", "by simp"], ["proof (state)\nthis:\n  fst ` edges G \\<subseteq> nodes G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2", "from f1 1(2)"], ["proof (chain)\npicking this:\n  fst ` edges G \\<subseteq> nodes G\n  \\<forall>(v1, v2)\\<in>edges G.\n     \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r", "have \"\\<forall>v \\<in> (fst ` edges G). \\<forall>v'\\<in>succ_tran G v. nP v \\<subseteq> nP v'\""], ["proof (prove)\nusing this:\n  fst ` edges G \\<subseteq> nodes G\n  \\<forall>(v1, v2)\\<in>edges G.\n     \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\n\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>fst ` edges G.\n       \\<forall>v'\\<in>succ_tran G v. nP v \\<subseteq> nP v'", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>v\\<in>fst ` edges G.\n     \\<forall>v'\\<in>succ_tran G v. nP v \\<subseteq> nP v'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G;\n     \\<forall>(v1, v2)\\<in>edges G.\n        \\<forall>r\\<in>succ_tran G v1. nP v1 \\<subseteq> nP r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>fst ` edges G.\n     \\<forall>v'\\<in>succ_tran G v. nP v \\<subseteq> nP v'\n\ngoal (1 subgoal):\n 1. \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2", "unfolding succ_tran_def"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>fst ` edges G.\n     \\<forall>v'\\<in>{e2. (v, e2) \\<in> (edges G)\\<^sup>+}.\n        nP v \\<subseteq> nP v'\n\ngoal (1 subgoal):\n 1. \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Information Flow Security\\<close>"], ["", "qualified"], ["", "definition receiver_violation :: \"bool\" where \"receiver_violation \\<equiv> True\""], ["", "private"], ["", "lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_mono sinvar", "apply(simp add: SecurityInvariant_withOffendingFlows.sinvar_mono_def sinvar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>nP N E'.\n       (\\<exists>E.\n           wf_graph \\<lparr>nodes = N, edges = E\\<rparr> \\<and>\n           E' \\<subseteq> E \\<and>\n           (\\<forall>x\\<in>E.\n               case x of\n               (v1, v2) \\<Rightarrow>\n                 nP v1 \\<subseteq> nP v2)) \\<longrightarrow>\n       (\\<forall>x\\<in>E'.\n           case x of (v1, v2) \\<Rightarrow> nP v1 \\<subseteq> nP v2)", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nP N E' a b x E.\n       \\<lbrakk>(a, b) \\<in> E'; x \\<in> nP a;\n        wf_graph \\<lparr>nodes = N, edges = E\\<rparr>; E' \\<subseteq> E;\n        \\<forall>(v1, v2)\\<in>E. nP v1 \\<subseteq> nP v2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> nP b", "by blast"], ["", "interpretation SecurityInvariant_preliminaries\n  where sinvar = sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_preliminaries sinvar", "proof(unfold_locales, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "case (1 G nP)"], ["proof (state)\nthis:\n  wf_graph G\n  \\<not> sinvar G nP\n\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "from 1"], ["proof (chain)\npicking this:\n  wf_graph G\n  \\<not> sinvar G nP", "show ?case"], ["proof (prove)\nusing this:\n  wf_graph G\n  \\<not> sinvar G nP\n\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.set_offending_flows sinvar G\n     nP \\<noteq>\n    {}", "apply(frule_tac finite_distinct_list[OF wf_graph.finiteE])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n     \\<exists>xs. set xs = edges G \\<and> distinct xs\\<rbrakk>\n    \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                       sinvar G nP \\<noteq>\n                      {}", "apply(erule_tac exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}", "apply(rename_tac list_edges)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}", "apply(rule_tac ff=\"list_edges\" in SecurityInvariant_withOffendingFlows.mono_imp_set_offending_flows_not_empty[OF sinvar_mono])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> wf_graph G\n 2. \\<And>list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (set list_edges) G nP\n 3. \\<And>list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> set list_edges \\<subseteq> edges G\n 4. \\<And>list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> distinct list_edges", "apply(auto simp add: sinvar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list_edges a b x.\n       \\<lbrakk>wf_graph G; (a, b) \\<in> edges G;\n        \\<not> SecurityInvariant_withOffendingFlows.is_offending_flows\n                sinvar (edges G) G nP;\n        x \\<in> nP a; set list_edges = edges G; distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> x \\<in> nP b", "apply(auto simp add: sinvar_def SecurityInvariant_withOffendingFlows.is_offending_flows_def graph_ops)[1]"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  SecurityInvariant_withOffendingFlows.set_offending_flows sinvar G\n   nP \\<noteq>\n  {}\n\ngoal (2 subgoals):\n 1. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 2. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 2. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "case (2 N E E' nP)"], ["proof (state)\nthis:\n  wf_graph \\<lparr>nodes = N, edges = E\\<rparr>\n  E' \\<subseteq> E\n  sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\n\ngoal (2 subgoals):\n 1. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 2. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "thus ?case"], ["proof (prove)\nusing this:\n  wf_graph \\<lparr>nodes = N, edges = E\\<rparr>\n  E' \\<subseteq> E\n  sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\n\ngoal (1 subgoal):\n 1. sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "by(simp add: sinvar_def) blast"], ["proof (state)\nthis:\n  sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n\ngoal (1 subgoal):\n 1. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "case 3"], ["proof (state)\nthis:\n  wf_graph G_\n  SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff_ G_ nP_\n\ngoal (1 subgoal):\n 1. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "thus ?case"], ["proof (prove)\nusing this:\n  wf_graph G_\n  SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff_ G_ nP_\n\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.is_offending_flows sinvar\n     (ff_ \\<union> f'_) G_ nP_", "by(fact SecurityInvariant_withOffendingFlows.sinvar_mono_imp_is_offending_flows_mono[OF sinvar_mono])"], ["proof (state)\nthis:\n  SecurityInvariant_withOffendingFlows.is_offending_flows sinvar\n   (ff_ \\<union> f'_) G_ nP_\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma Taints_def_unique: \"otherbot \\<noteq> {} \\<Longrightarrow>\n      \\<exists>G p i f. wf_graph G \\<and> \\<not> sinvar G p \\<and> f \\<in> (SecurityInvariant_withOffendingFlows.set_offending_flows sinvar G p) \\<and>\n         sinvar (delete_edges G f) p \\<and>\n          i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> {} \\<Longrightarrow>\n    \\<exists>G p i f.\n       wf_graph G \\<and>\n       \\<not> sinvar G p \\<and>\n       f \\<in> set_offending_flows G p \\<and>\n       sinvar (delete_edges G f) p \\<and>\n       i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> {} \\<Longrightarrow>\n    \\<exists>G.\n       wf_graph G \\<and>\n       (\\<exists>p.\n           \\<not> sinvar G p \\<and>\n           (\\<exists>i f.\n               f \\<in> set_offending_flows G p \\<and>\n               sinvar (delete_edges G f) p \\<and>\n               i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot))))", "apply (simp add: SecurityInvariant_withOffendingFlows.set_offending_flows_def\n        SecurityInvariant_withOffendingFlows.is_offending_flows_min_set_def\n        SecurityInvariant_withOffendingFlows.is_offending_flows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> {} \\<Longrightarrow>\n    \\<exists>G.\n       wf_graph G \\<and>\n       (\\<exists>p.\n           \\<not> sinvar G p \\<and>\n           (\\<exists>i f.\n               f \\<subseteq> edges G \\<and>\n               \\<not> sinvar G p \\<and>\n               sinvar (delete_edges G f) p \\<and>\n               (\\<forall>(e1, e2)\\<in>f.\n                   \\<not> sinvar (add_edge e1 e2 (delete_edges G f))\n                           p) \\<and>\n               sinvar (delete_edges G f) p \\<and>\n               i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot))))", "apply (simp add:graph_ops)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> {} \\<Longrightarrow>\n    \\<exists>G.\n       wf_graph G \\<and>\n       (\\<exists>p.\n           \\<not> sinvar G p \\<and>\n           (\\<exists>i f.\n               f \\<subseteq> edges G \\<and>\n               \\<not> sinvar G p \\<and>\n               sinvar \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr>\n                p \\<and>\n               (\\<forall>x\\<in>f.\n                   case x of\n                   (e1, e2) \\<Rightarrow>\n                     \\<not> sinvar\n                             \\<lparr>nodes =\n insert e1 (insert e2 (nodes G)),\n                                edges =\n                                  insert (e1, e2) (edges G - f)\\<rparr>\n                             p) \\<and>\n               sinvar \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr>\n                p \\<and>\n               i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot))))", "apply (simp split: prod.split_asm prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> {} \\<Longrightarrow>\n    \\<exists>G.\n       wf_graph G \\<and>\n       (\\<exists>p.\n           \\<not> sinvar G p \\<and>\n           (\\<exists>i f.\n               f \\<subseteq> edges G \\<and>\n               \\<not> sinvar G p \\<and>\n               sinvar \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr>\n                p \\<and>\n               (\\<forall>x\\<in>f.\n                   \\<forall>x1 x2.\n                      x = (x1, x2) \\<longrightarrow>\n                      \\<not> sinvar\n                              \\<lparr>nodes =\n  insert x1 (insert x2 (nodes G)),\n                                 edges =\n                                   insert (x1, x2) (edges G - f)\\<rparr>\n                              p) \\<and>\n               sinvar \\<lparr>nodes = nodes G, edges = edges G - f\\<rparr>\n                p \\<and>\n               i \\<in> snd ` f \\<and> sinvar G (p(i := otherbot))))", "apply(rule_tac x=\"\\<lparr> nodes=set [vertex_1,vertex_2], edges = set [(vertex_1,vertex_2)] \\<rparr>\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> {} \\<Longrightarrow>\n    wf_graph\n     \\<lparr>nodes = {vertex_1, vertex_2},\n        edges = {(vertex_1, vertex_2)}\\<rparr> \\<and>\n    (\\<exists>p.\n        \\<not> sinvar\n                \\<lparr>nodes = {vertex_1, vertex_2},\n                   edges = {(vertex_1, vertex_2)}\\<rparr>\n                p \\<and>\n        (\\<exists>i f.\n            f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n            \\<not> sinvar\n                    \\<lparr>nodes = {vertex_1, vertex_2},\n                       edges = {(vertex_1, vertex_2)}\\<rparr>\n                    p \\<and>\n            sinvar\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)} - f\\<rparr>\n             p \\<and>\n            (\\<forall>x\\<in>f.\n                \\<forall>x1 x2.\n                   x = (x1, x2) \\<longrightarrow>\n                   \\<not> sinvar\n                           \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                              edges =\n                                insert (x1, x2)\n                                 ({(vertex_1, vertex_2)} - f)\\<rparr>\n                           p) \\<and>\n            sinvar\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)} - f\\<rparr>\n             p \\<and>\n            i \\<in> snd ` f \\<and>\n            sinvar\n             \\<lparr>nodes = {vertex_1, vertex_2},\n                edges = {(vertex_1, vertex_2)}\\<rparr>\n             (p(i := otherbot))))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. otherbot \\<noteq> {} \\<Longrightarrow>\n    wf_graph\n     \\<lparr>nodes = {vertex_1, vertex_2},\n        edges = {(vertex_1, vertex_2)}\\<rparr>\n 2. otherbot \\<noteq> {} \\<Longrightarrow>\n    \\<exists>p.\n       \\<not> sinvar\n               \\<lparr>nodes = {vertex_1, vertex_2},\n                  edges = {(vertex_1, vertex_2)}\\<rparr>\n               p \\<and>\n       (\\<exists>i f.\n           f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n           \\<not> sinvar\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   p \\<and>\n           sinvar\n            \\<lparr>nodes = {vertex_1, vertex_2},\n               edges = {(vertex_1, vertex_2)} - f\\<rparr>\n            p \\<and>\n           (\\<forall>x\\<in>f.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  \\<not> sinvar\n                          \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                             edges =\n                               insert (x1, x2)\n                                ({(vertex_1, vertex_2)} - f)\\<rparr>\n                          p) \\<and>\n           sinvar\n            \\<lparr>nodes = {vertex_1, vertex_2},\n               edges = {(vertex_1, vertex_2)} - f\\<rparr>\n            p \\<and>\n           i \\<in> snd ` f \\<and>\n           sinvar\n            \\<lparr>nodes = {vertex_1, vertex_2},\n               edges = {(vertex_1, vertex_2)}\\<rparr>\n            (p(i := otherbot)))", "apply(simp add: wf_graph_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> {} \\<Longrightarrow>\n    \\<exists>p.\n       \\<not> sinvar\n               \\<lparr>nodes = {vertex_1, vertex_2},\n                  edges = {(vertex_1, vertex_2)}\\<rparr>\n               p \\<and>\n       (\\<exists>i f.\n           f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n           \\<not> sinvar\n                   \\<lparr>nodes = {vertex_1, vertex_2},\n                      edges = {(vertex_1, vertex_2)}\\<rparr>\n                   p \\<and>\n           sinvar\n            \\<lparr>nodes = {vertex_1, vertex_2},\n               edges = {(vertex_1, vertex_2)} - f\\<rparr>\n            p \\<and>\n           (\\<forall>x\\<in>f.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  \\<not> sinvar\n                          \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n                             edges =\n                               insert (x1, x2)\n                                ({(vertex_1, vertex_2)} - f)\\<rparr>\n                          p) \\<and>\n           sinvar\n            \\<lparr>nodes = {vertex_1, vertex_2},\n               edges = {(vertex_1, vertex_2)} - f\\<rparr>\n            p \\<and>\n           i \\<in> snd ` f \\<and>\n           sinvar\n            \\<lparr>nodes = {vertex_1, vertex_2},\n               edges = {(vertex_1, vertex_2)}\\<rparr>\n            (p(i := otherbot)))", "apply(subgoal_tac \"\\<exists>foo. foo \\<in> otherbot\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>otherbot \\<noteq> {}; \\<exists>foo. foo \\<in> otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p.\n                         \\<not> sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 p \\<and>\n                         (\\<exists>i f.\n                             f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                             \\<not> sinvar\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     p \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             (\\<forall>x\\<in>f.\n                                 \\<forall>x1 x2.\n                                    x = (x1, x2) \\<longrightarrow>\n                                    \\<not> sinvar\n      \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n         edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n      p) \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             i \\<in> snd ` f \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              (p(i := otherbot)))\n 2. otherbot \\<noteq> {} \\<Longrightarrow> \\<exists>foo. foo \\<in> otherbot", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. otherbot \\<noteq> {} \\<Longrightarrow> \\<exists>foo. foo \\<in> otherbot\n 2. \\<lbrakk>otherbot \\<noteq> {}; \\<exists>foo. foo \\<in> otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p.\n                         \\<not> sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 p \\<and>\n                         (\\<exists>i f.\n                             f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                             \\<not> sinvar\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     p \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             (\\<forall>x\\<in>f.\n                                 \\<forall>x1 x2.\n                                    x = (x1, x2) \\<longrightarrow>\n                                    \\<not> sinvar\n      \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n         edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n      p) \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             i \\<in> snd ` f \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              (p(i := otherbot)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> {} \\<Longrightarrow> \\<exists>foo. foo \\<in> otherbot", "by fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>otherbot \\<noteq> {}; \\<exists>foo. foo \\<in> otherbot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p.\n                         \\<not> sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 p \\<and>\n                         (\\<exists>i f.\n                             f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                             \\<not> sinvar\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     p \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             (\\<forall>x\\<in>f.\n                                 \\<forall>x1 x2.\n                                    x = (x1, x2) \\<longrightarrow>\n                                    \\<not> sinvar\n      \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n         edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n      p) \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              p \\<and>\n                             i \\<in> snd ` f \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              (p(i := otherbot)))", "apply(erule exE, rename_tac foo)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>foo.\n       \\<lbrakk>otherbot \\<noteq> {}; foo \\<in> otherbot\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            \\<not> sinvar\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    p \\<and>\n                            (\\<exists>i f.\n                                f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                                \\<not> sinvar\n  \\<lparr>nodes = {vertex_1, vertex_2},\n     edges = {(vertex_1, vertex_2)}\\<rparr>\n  p \\<and>\n                                sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges =\n{(vertex_1, vertex_2)} - f\\<rparr>\n                                 p \\<and>\n                                (\\<forall>x\\<in>f.\n                                    \\<forall>x1 x2.\n x = (x1, x2) \\<longrightarrow>\n \\<not> sinvar\n         \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n            edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n         p) \\<and>\n                                sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges =\n{(vertex_1, vertex_2)} - f\\<rparr>\n                                 p \\<and>\n                                i \\<in> snd ` f \\<and>\n                                sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 (p(i := otherbot)))", "apply(rule_tac x=\"(\\<lambda> x. {})(vertex_1 := {foo}, vertex_2 := {})\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>foo.\n       \\<lbrakk>otherbot \\<noteq> {}; foo \\<in> otherbot\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 ((\\<lambda>x. {})\n                                  (vertex_1 := {foo},\n                                   vertex_2 := {})) \\<and>\n                         (\\<exists>i f.\n                             f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                             \\<not> sinvar\n                                     \\<lparr>nodes = {vertex_1, vertex_2},\n  edges = {(vertex_1, vertex_2)}\\<rparr>\n                                     ((\\<lambda>x. {})\n(vertex_1 := {foo}, vertex_2 := {})) \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              ((\\<lambda>x. {})\n                               (vertex_1 := {foo}, vertex_2 := {})) \\<and>\n                             (\\<forall>x\\<in>f.\n                                 \\<forall>x1 x2.\n                                    x = (x1, x2) \\<longrightarrow>\n                                    \\<not> sinvar\n      \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n         edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n      ((\\<lambda>x. {})(vertex_1 := {foo}, vertex_2 := {}))) \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                              ((\\<lambda>x. {})\n                               (vertex_1 := {foo}, vertex_2 := {})) \\<and>\n                             i \\<in> snd ` f \\<and>\n                             sinvar\n                              \\<lparr>nodes = {vertex_1, vertex_2},\n                                 edges = {(vertex_1, vertex_2)}\\<rparr>\n                              ((\\<lambda>x. {})\n                               (vertex_1 := {foo}, vertex_2 := {},\n                                i := otherbot)))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>foo.\n       \\<lbrakk>otherbot \\<noteq> {}; foo \\<in> otherbot\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 ((\\<lambda>x. {})\n                                  (vertex_1 := {foo}, vertex_2 := {}))\n 2. \\<And>foo.\n       \\<lbrakk>otherbot \\<noteq> {}; foo \\<in> otherbot\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i f.\n                            f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                            \\<not> sinvar\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    ((\\<lambda>x. {})\n                                     (vertex_1 := {foo},\nvertex_2 := {})) \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                             ((\\<lambda>x. {})\n                              (vertex_1 := {foo}, vertex_2 := {})) \\<and>\n                            (\\<forall>x\\<in>f.\n                                \\<forall>x1 x2.\n                                   x = (x1, x2) \\<longrightarrow>\n                                   \\<not> sinvar\n     \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n        edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n     ((\\<lambda>x. {})(vertex_1 := {foo}, vertex_2 := {}))) \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                             ((\\<lambda>x. {})\n                              (vertex_1 := {foo}, vertex_2 := {})) \\<and>\n                            i \\<in> snd ` f \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             ((\\<lambda>x. {})\n                              (vertex_1 := {foo}, vertex_2 := {},\n                               i := otherbot))", "apply(simp add: sinvar_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>foo.\n       \\<lbrakk>otherbot \\<noteq> {}; foo \\<in> otherbot\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i f.\n                            f \\<subseteq> {(vertex_1, vertex_2)} \\<and>\n                            \\<not> sinvar\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    ((\\<lambda>x. {})\n                                     (vertex_1 := {foo},\nvertex_2 := {})) \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                             ((\\<lambda>x. {})\n                              (vertex_1 := {foo}, vertex_2 := {})) \\<and>\n                            (\\<forall>x\\<in>f.\n                                \\<forall>x1 x2.\n                                   x = (x1, x2) \\<longrightarrow>\n                                   \\<not> sinvar\n     \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n        edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n     ((\\<lambda>x. {})(vertex_1 := {foo}, vertex_2 := {}))) \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                             ((\\<lambda>x. {})\n                              (vertex_1 := {foo}, vertex_2 := {})) \\<and>\n                            i \\<in> snd ` f \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             ((\\<lambda>x. {})\n                              (vertex_1 := {foo}, vertex_2 := {},\n                               i := otherbot))", "apply(rule_tac x=\"vertex_2\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>foo.\n       \\<lbrakk>otherbot \\<noteq> {}; foo \\<in> otherbot\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f\\<subseteq>{(vertex_1, vertex_2)}.\n                            \\<not> sinvar\n                                    \\<lparr>nodes = {vertex_1, vertex_2},\n edges = {(vertex_1, vertex_2)}\\<rparr>\n                                    ((\\<lambda>x. {})\n                                     (vertex_1 := {foo},\nvertex_2 := {})) \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                             ((\\<lambda>x. {})\n                              (vertex_1 := {foo}, vertex_2 := {})) \\<and>\n                            (\\<forall>x\\<in>f.\n                                \\<forall>x1 x2.\n                                   x = (x1, x2) \\<longrightarrow>\n                                   \\<not> sinvar\n     \\<lparr>nodes = {x1, x2, vertex_1, vertex_2},\n        edges = insert (x1, x2) ({(vertex_1, vertex_2)} - f)\\<rparr>\n     ((\\<lambda>x. {})(vertex_1 := {foo}, vertex_2 := {}))) \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)} - f\\<rparr>\n                             ((\\<lambda>x. {})\n                              (vertex_1 := {foo}, vertex_2 := {})) \\<and>\n                            vertex_2 \\<in> snd ` f \\<and>\n                            sinvar\n                             \\<lparr>nodes = {vertex_1, vertex_2},\n                                edges = {(vertex_1, vertex_2)}\\<rparr>\n                             ((\\<lambda>x. {})\n                              (vertex_1 := {foo}, vertex_2 := {},\n                               vertex_2 := otherbot))", "apply(rule_tac x=\"set [(vertex_1,vertex_2)]\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>foo.\n       \\<lbrakk>otherbot \\<noteq> {}; foo \\<in> otherbot\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar\n                                 \\<lparr>nodes = {vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 ((\\<lambda>x. {})\n                                  (vertex_1 := {foo},\n                                   vertex_2 := {})) \\<and>\n                         sinvar\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {}\\<rparr>\n                          ((\\<lambda>x. {})\n                           (vertex_1 := {foo}, vertex_2 := {})) \\<and>\n                         \\<not> sinvar\n                                 \\<lparr>nodes =\n     {vertex_1, vertex_2, vertex_1, vertex_2},\n                                    edges = {(vertex_1, vertex_2)}\\<rparr>\n                                 ((\\<lambda>x. {})\n                                  (vertex_1 := {foo},\n                                   vertex_2 := {})) \\<and>\n                         sinvar\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {}\\<rparr>\n                          ((\\<lambda>x. {})\n                           (vertex_1 := {foo}, vertex_2 := {})) \\<and>\n                         sinvar\n                          \\<lparr>nodes = {vertex_1, vertex_2},\n                             edges = {(vertex_1, vertex_2)}\\<rparr>\n                          ((\\<lambda>x. {})\n                           (vertex_1 := {foo}, vertex_2 := otherbot))", "apply(simp add: sinvar_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>ENF\\<close>"], ["", "private"], ["", "lemma Taints_ENF: \"SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar (\\<subseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar\n     (\\<subseteq>)", "unfolding SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_def sinvar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G nP.\n       (\\<forall>(v1, v2)\\<in>edges G. nP v1 \\<subseteq> nP v2) =\n       (\\<forall>(e1, e2)\\<in>edges G. nP e1 \\<subseteq> nP e2)", "by simp"], ["", "private"], ["", "lemma Taints_ENF_refl: \"SecurityInvariant_withOffendingFlows.ENF_refl sinvar (\\<subseteq>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.ENF_refl sinvar (\\<subseteq>)", "unfolding SecurityInvariant_withOffendingFlows.ENF_refl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form sinvar\n     (\\<subseteq>) \\<and>\n    (\\<forall>p1. p1 \\<subseteq> p1)", "by(auto simp add: Taints_ENF)"], ["", "qualified"], ["", "definition Taints_offending_set:: \"'v graph \\<Rightarrow> ('v \\<Rightarrow> taints) \\<Rightarrow> ('v \\<times> 'v) set set\" where\n    \"Taints_offending_set G nP = (if sinvar G nP then\n        {}\n       else \n        { {e \\<in> edges G. case e of (e1,e2) \\<Rightarrow> \\<not> (nP e1) \\<subseteq> (nP e2)} })\""], ["", "lemma Taints_offending_set: \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = Taints_offending_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_offending_flows = Taints_offending_set", "by(auto simp add: fun_eq_iff\n                        SecurityInvariant_withOffendingFlows.ENF_offending_set[OF Taints_ENF]\n                        Taints_offending_set_def)"], ["", "interpretation Taints: SecurityInvariant_IFS sinvar default_node_properties\n    rewrites \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = Taints_offending_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_IFS sinvar default_node_properties &&&\n    set_offending_flows = Taints_offending_set", "unfolding receiver_violation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_IFS sinvar default_node_properties &&&\n    set_offending_flows = Taints_offending_set", "unfolding default_node_properties_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_IFS sinvar {} &&&\n    set_offending_flows = Taints_offending_set", "proof(unfold_locales, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>G f nP.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>snd ` f.\n                            \\<not> sinvar G (nP(i := {}))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = {}\n 3. set_offending_flows = Taints_offending_set", "case 1"], ["proof (state)\nthis:\n  wf_graph G_\n  f_ \\<in> set_offending_flows G_ nP_\n\ngoal (3 subgoals):\n 1. \\<And>G f nP.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>snd ` f.\n                            \\<not> sinvar G (nP(i := {}))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = {}\n 3. set_offending_flows = Taints_offending_set", "from 1(2)"], ["proof (chain)\npicking this:\n  f_ \\<in> set_offending_flows G_ nP_", "show ?case"], ["proof (prove)\nusing this:\n  f_ \\<in> set_offending_flows G_ nP_\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>snd ` f_. \\<not> sinvar G_ (nP_(i := {}))", "apply(intro ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>f_ \\<in> set_offending_flows G_ nP_;\n        i \\<in> snd ` f_\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar G_ (nP_(i := {}))", "apply(rule SecurityInvariant_withOffendingFlows.ENF_snds_refl_instance[OF Taints_ENF_refl])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>f_ \\<in> set_offending_flows G_ nP_;\n        i \\<in> snd ` f_\\<rbrakk>\n       \\<Longrightarrow> \\<forall>nP e1 e2.\n                            \\<not> nP e1 \\<subseteq> nP e2 \\<longrightarrow>\n                            \\<not> nP e1 \\<subseteq> {}\n 2. \\<And>i.\n       \\<lbrakk>f_ \\<in> set_offending_flows G_ nP_;\n        i \\<in> snd ` f_\\<rbrakk>\n       \\<Longrightarrow> ?f2 i \\<in> set_offending_flows G_ nP_\n 3. \\<And>i.\n       \\<lbrakk>f_ \\<in> set_offending_flows G_ nP_;\n        i \\<in> snd ` f_\\<rbrakk>\n       \\<Longrightarrow> i \\<in> snd ` ?f2 i", "apply(simp_all add: Taints_ENF Taints_ENF_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>f_ \\<in> set_offending_flows G_ nP_;\n        i \\<in> snd ` f_\\<rbrakk>\n       \\<Longrightarrow> \\<forall>nP e1.\n                            (\\<exists>e2.\n                                \\<not> nP e1\n \\<subseteq> nP e2) \\<longrightarrow>\n                            nP e1 \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  \\<forall>i\\<in>snd ` f_. \\<not> sinvar G_ (nP_(i := {}))\n\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = {}\n 2. set_offending_flows = Taints_offending_set", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = {}\n 2. set_offending_flows = Taints_offending_set", "case 2"], ["proof (state)\nthis:\n  \\<forall>G f nP i.\n     wf_graph G \\<and>\n     f \\<in> set_offending_flows G nP \\<and>\n     i \\<in> snd ` f \\<longrightarrow>\n     \\<not> sinvar G (nP(i := otherbot_))\n\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = {}\n 2. set_offending_flows = Taints_offending_set", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>G f nP i.\n     wf_graph G \\<and>\n     f \\<in> set_offending_flows G nP \\<and>\n     i \\<in> snd ` f \\<longrightarrow>\n     \\<not> sinvar G (nP(i := otherbot_))\n\ngoal (1 subgoal):\n 1. otherbot_ = {}", "proof(elim default_uniqueness_by_counterexample_IFS)"], ["proof (state)\ngoal (1 subgoal):\n 1. otherbot_ \\<noteq> {} \\<Longrightarrow>\n    \\<exists>G nP i f.\n       wf_graph G \\<and>\n       \\<not> sinvar G nP \\<and>\n       f \\<in> set_offending_flows G nP \\<and>\n       sinvar (delete_edges G f) nP \\<and>\n       i \\<in> snd ` f \\<and> sinvar G (nP(i := otherbot_))", "qed(fact Taints_def_unique)"], ["proof (state)\nthis:\n  otherbot_ = {}\n\ngoal (1 subgoal):\n 1. set_offending_flows = Taints_offending_set", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. set_offending_flows = Taints_offending_set", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. set_offending_flows = Taints_offending_set", "show \"set_offending_flows = Taints_offending_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_offending_flows = Taints_offending_set", "by(fact Taints_offending_set)"], ["proof (state)\nthis:\n  set_offending_flows = Taints_offending_set\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma TopoS_Tainting: \"SecurityInvariant sinvar default_node_properties receiver_violation\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties receiver_violation", "unfolding receiver_violation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties True", "by unfold_locales"], ["", "end"], ["", "end"]]}