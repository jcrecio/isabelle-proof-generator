{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_ACLcommunicateWith_impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_ACLcommunicateWith.default_node_properties P = NetModel_node_props P\"", "lemma sinvar_correct: \"wf_list_graph G \\<Longrightarrow> SINVAR_ACLcommunicateWith.sinvar (list_graph_to_graph G) nP = sinvar G nP\"", "lemma \"sinvar\n            \\<lparr> nodesL = [1::nat, 2, 3],\n              edgesL = [(1,2), (2,3)]\\<rparr>\n            (((\\<lambda>v. SINVAR_ACLcommunicateWith.default_node_properties)\n                    (1 := [2,3]))\n                    (2 := [3]))\"", "lemma \"ACLcommunicateWith_offending_list \n          \\<lparr> nodesL = [1::nat, 2, 3, 4],\n            edgesL = [(1,2), (2,3), (3, 4)]\\<rparr>\n          (((((\\<lambda>v. SINVAR_ACLcommunicateWith.default_node_properties)\n          (1 := [1,2,3]))\n          (2 := [1,2,3,4]))\n          (3 := [1,2,3,4]))\n          (4 := [1,2,3,4])) =\n       [[(1, 2)], [(2, 3)], [(3, 4)]]\"", "lemma \"ACLcommunicateWith_offending_list \n          \\<lparr> nodesL = [1::nat, 2, 3, 4],\n            edgesL = [(1,2), (1,3), (2,3), (3, 4)]\\<rparr>\n          (((((\\<lambda>v. SINVAR_ACLcommunicateWith.default_node_properties)\n          (1 := [1,2,3]))\n          (2 := [1,2,3,4]))\n          (3 := [1,2,3,4]))\n          (4 := [1,2,3,4])) =\n       [[(1, 2), (1, 3)], [(1, 3), (2, 3)], [(3, 4)]]\""], "translations": [["", "lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_ACLcommunicateWith.default_node_properties P = NetModel_node_props P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ACLcommunicateWith.node_props P = NetModel_node_props P", "by(simp add: NetModel_node_props_def)"], ["", "definition \"ACLcommunicateWith_offending_list = Generic_offending_list sinvar\""], ["", "definition \"ACLcommunicateWith_eval G P = (wf_list_graph G \\<and> \n  sinvar G (SecurityInvariant.node_props SINVAR_ACLcommunicateWith.default_node_properties P))\""], ["", "lemma sinvar_correct: \"wf_list_graph G \\<Longrightarrow> SINVAR_ACLcommunicateWith.sinvar (list_graph_to_graph G) nP = sinvar G nP\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph G \\<Longrightarrow>\n    SINVAR_ACLcommunicateWith.sinvar (list_graph_to_graph G) nP =\n    sinvar G nP", "by (metis SINVAR_ACLcommunicateWith.sinvar.simps SINVAR_ACLcommunicateWith_impl.sinvar.simps graph.select_convs(1) list_graph_to_graph_def succ_tran_correct)"], ["", "interpretation SINVAR_ACLcommunicateWith_impl:TopoS_List_Impl \n  where default_node_properties=SINVAR_ACLcommunicateWith.default_node_properties\n  and sinvar_spec=SINVAR_ACLcommunicateWith.sinvar\n  and sinvar_impl=sinvar\n  and receiver_violation=SINVAR_ACLcommunicateWith.receiver_violation\n  and offending_flows_impl=ACLcommunicateWith_offending_list\n  and node_props_impl=NetModel_node_props\n  and eval_impl=ACLcommunicateWith_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_ACLcommunicateWith.default_node_properties\n     SINVAR_ACLcommunicateWith.sinvar sinvar\n     SINVAR_ACLcommunicateWith.receiver_violation\n     ACLcommunicateWith_offending_list NetModel_node_props\n     ACLcommunicateWith_eval", "apply(unfold TopoS_List_Impl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SecurityInvariant SINVAR_ACLcommunicateWith.sinvar\n      SINVAR_ACLcommunicateWith.default_node_properties\n      SINVAR_ACLcommunicateWith.receiver_violation \\<and>\n     (\\<forall>G nP.\n         wf_list_graph G \\<longrightarrow>\n         SINVAR_ACLcommunicateWith.sinvar (list_graph_to_graph G) nP =\n         sinvar G nP)) \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (ACLcommunicateWith_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        ACLcommunicateWith.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n        ACLcommunicateWith_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SecurityInvariant SINVAR_ACLcommunicateWith.sinvar\n     SINVAR_ACLcommunicateWith.default_node_properties\n     SINVAR_ACLcommunicateWith.receiver_violation \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SINVAR_ACLcommunicateWith.sinvar (list_graph_to_graph G) nP =\n        sinvar G nP)\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (ACLcommunicateWith_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        ACLcommunicateWith.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n        ACLcommunicateWith_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. SecurityInvariant SINVAR_ACLcommunicateWith.sinvar\n     SINVAR_ACLcommunicateWith.default_node_properties\n     SINVAR_ACLcommunicateWith.receiver_violation\n 2. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       SINVAR_ACLcommunicateWith.sinvar (list_graph_to_graph G) nP =\n       sinvar G nP\n 3. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (ACLcommunicateWith_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        ACLcommunicateWith.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n        ACLcommunicateWith_eval G P)", "apply(simp add: TopoS_ACLcommunicateWith; fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       SINVAR_ACLcommunicateWith.sinvar (list_graph_to_graph G) nP =\n       sinvar G nP\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (ACLcommunicateWith_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        ACLcommunicateWith.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n        ACLcommunicateWith_eval G P)", "apply(intro allI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP.\n       wf_list_graph G \\<Longrightarrow>\n       SINVAR_ACLcommunicateWith.sinvar (list_graph_to_graph G) nP =\n       sinvar G nP\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (ACLcommunicateWith_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        ACLcommunicateWith.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n        ACLcommunicateWith_eval G P)", "apply(fact sinvar_correct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (ACLcommunicateWith_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        ACLcommunicateWith.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n        ACLcommunicateWith_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (ACLcommunicateWith_offending_list G nP)\n 2. (\\<forall>P.\n        ACLcommunicateWith.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n        ACLcommunicateWith_eval G P)", "apply(unfold ACLcommunicateWith_offending_list_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (Generic_offending_list sinvar G nP)\n 2. (\\<forall>P.\n        ACLcommunicateWith.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n        ACLcommunicateWith_eval G P)", "apply(intro allI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP.\n       wf_list_graph G \\<Longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (Generic_offending_list sinvar G nP)\n 2. (\\<forall>P.\n        ACLcommunicateWith.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n        ACLcommunicateWith_eval G P)", "apply(rule Generic_offending_list_correct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP. wf_list_graph G \\<Longrightarrow> wf_list_graph G\n 2. \\<And>G nP Ga nPa.\n       \\<lbrakk>wf_list_graph G; wf_list_graph Ga\\<rbrakk>\n       \\<Longrightarrow> SINVAR_ACLcommunicateWith.sinvar\n                          (list_graph_to_graph Ga) nPa =\n                         sinvar Ga nPa\n 3. (\\<forall>P.\n        ACLcommunicateWith.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n        ACLcommunicateWith_eval G P)", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP Ga nPa.\n       \\<lbrakk>wf_list_graph G; wf_list_graph Ga\\<rbrakk>\n       \\<Longrightarrow> SINVAR_ACLcommunicateWith.sinvar\n                          (list_graph_to_graph Ga) nPa =\n                         sinvar Ga nPa\n 2. (\\<forall>P.\n        ACLcommunicateWith.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n        ACLcommunicateWith_eval G P)", "apply(simp only: sinvar_correct; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P.\n        ACLcommunicateWith.node_props_formaldef P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n        ACLcommunicateWith_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       ACLcommunicateWith.node_props_formaldef P = NetModel_node_props P\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n       ACLcommunicateWith_eval G P", "apply(intro allI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P.\n       ACLcommunicateWith.node_props_formaldef P = NetModel_node_props P\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n       ACLcommunicateWith_eval G P", "apply(simp only: NetModel_node_props_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P.\n       ACLcommunicateWith.node_props_formaldef P =\n       (\\<lambda>i.\n           case node_properties P i of\n           None \\<Rightarrow>\n             SINVAR_ACLcommunicateWith.default_node_properties\n           | Some property \\<Rightarrow> property)\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n       ACLcommunicateWith_eval G P", "apply(metis ACLcommunicateWith.node_props.simps ACLcommunicateWith.node_props_eq_node_props_formaldef)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n       ACLcommunicateWith_eval G P", "apply(simp only: ACLcommunicateWith_eval_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and> sinvar G (ACLcommunicateWith.node_props P))", "apply(intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        ACLcommunicateWith.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and> sinvar G (ACLcommunicateWith.node_props P))", "apply(rule TopoS_eval_impl_proofrule[OF TopoS_ACLcommunicateWith])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G P nP.\n       wf_list_graph G \\<Longrightarrow>\n       SINVAR_ACLcommunicateWith.sinvar (list_graph_to_graph G) nP =\n       sinvar G nP", "apply(simp only: sinvar_correct; fail)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>packing\\<close>"], ["", "definition SINVAR_LIB_ACLcommunicateWith:: \"('v::vertex, 'v list) TopoS_packed\" where\n    \"SINVAR_LIB_ACLcommunicateWith \\<equiv> \n    \\<lparr> nm_name = ''ACLcommunicateWith'', \n      nm_receiver_violation = SINVAR_ACLcommunicateWith.receiver_violation,\n      nm_default = SINVAR_ACLcommunicateWith.default_node_properties, \n      nm_sinvar = sinvar,\n      nm_offending_flows = ACLcommunicateWith_offending_list, \n      nm_node_props = NetModel_node_props,\n      nm_eval = ACLcommunicateWith_eval\n      \\<rparr>\""], ["", "interpretation SINVAR_LIB_ACLcommunicateWith_interpretation: TopoS_modelLibrary SINVAR_LIB_ACLcommunicateWith\n      SINVAR_ACLcommunicateWith.sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_modelLibrary SINVAR_LIB_ACLcommunicateWith\n     SINVAR_ACLcommunicateWith.sinvar", "apply(unfold TopoS_modelLibrary_def SINVAR_LIB_ACLcommunicateWith_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''ACLcommunicateWith'',\n              nm_receiver_violation =\n                SINVAR_ACLcommunicateWith.receiver_violation,\n              nm_default =\n                SINVAR_ACLcommunicateWith.default_node_properties,\n              nm_sinvar = sinvar,\n              nm_offending_flows = ACLcommunicateWith_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = ACLcommunicateWith_eval\\<rparr>) \\<and>\n    TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)\n     SINVAR_ACLcommunicateWith.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''ACLcommunicateWith'',\n              nm_receiver_violation =\n                SINVAR_ACLcommunicateWith.receiver_violation,\n              nm_default =\n                SINVAR_ACLcommunicateWith.default_node_properties,\n              nm_sinvar = sinvar,\n              nm_offending_flows = ACLcommunicateWith_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = ACLcommunicateWith_eval\\<rparr>)\n 2. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)\n     SINVAR_ACLcommunicateWith.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)\n     SINVAR_ACLcommunicateWith.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''ACLcommunicateWith'',\n          nm_receiver_violation =\n            SINVAR_ACLcommunicateWith.receiver_violation,\n          nm_default = SINVAR_ACLcommunicateWith.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = ACLcommunicateWith_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = ACLcommunicateWith_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_ACLcommunicateWith.default_node_properties\n     SINVAR_ACLcommunicateWith.sinvar sinvar\n     SINVAR_ACLcommunicateWith.receiver_violation\n     ACLcommunicateWith_offending_list NetModel_node_props\n     ACLcommunicateWith_eval", "by(unfold_locales)"], ["", "text \\<open>Examples\\<close>"], ["", "context begin"], ["", "text\\<open>\n    1 can access 2 and 3\n    2 can access 3\n\\<close>"], ["", "private"], ["", "lemma \"sinvar\n            \\<lparr> nodesL = [1::nat, 2, 3],\n              edgesL = [(1,2), (2,3)]\\<rparr>\n            (((\\<lambda>v. SINVAR_ACLcommunicateWith.default_node_properties)\n                    (1 := [2,3]))\n                    (2 := [3]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar \\<lparr>nodesL = [1, 2, 3], edgesL = [(1, 2), (2, 3)]\\<rparr>\n     ((\\<lambda>v. SINVAR_ACLcommunicateWith.default_node_properties)\n      (1 := [2, 3], 2 := [3]))", "by eval"], ["", "text\\<open>\n    Everyone can access everyone, except for 1: 1 must not access 4.\n    The offending flows may be any edge on the path from 1 to 4\n\\<close>"], ["", "lemma \"ACLcommunicateWith_offending_list \n          \\<lparr> nodesL = [1::nat, 2, 3, 4],\n            edgesL = [(1,2), (2,3), (3, 4)]\\<rparr>\n          (((((\\<lambda>v. SINVAR_ACLcommunicateWith.default_node_properties)\n          (1 := [1,2,3]))\n          (2 := [1,2,3,4]))\n          (3 := [1,2,3,4]))\n          (4 := [1,2,3,4])) =\n       [[(1, 2)], [(2, 3)], [(3, 4)]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ACLcommunicateWith_offending_list\n     \\<lparr>nodesL = [1, 2, 3, 4],\n        edgesL = [(1, 2), (2, 3), (3, 4)]\\<rparr>\n     ((\\<lambda>v. SINVAR_ACLcommunicateWith.default_node_properties)\n      (1 := [1, 2, 3], 2 := [1, 2, 3, 4], 3 := [1, 2, 3, 4],\n       4 := [1, 2, 3, 4])) =\n    [[(1, 2)], [(2, 3)], [(3, 4)]]", "by eval"], ["", "text\\<open>\n    If we add the additional edge from 1 to 3, then the offending flows are either\n    \\<^item> [(3.4)], because this disconnects 4 from the graph completely\n    \\<^item> any pair of edges which disconnects 1 from 3\n\\<close>"], ["", "lemma \"ACLcommunicateWith_offending_list \n          \\<lparr> nodesL = [1::nat, 2, 3, 4],\n            edgesL = [(1,2), (1,3), (2,3), (3, 4)]\\<rparr>\n          (((((\\<lambda>v. SINVAR_ACLcommunicateWith.default_node_properties)\n          (1 := [1,2,3]))\n          (2 := [1,2,3,4]))\n          (3 := [1,2,3,4]))\n          (4 := [1,2,3,4])) =\n       [[(1, 2), (1, 3)], [(1, 3), (2, 3)], [(3, 4)]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ACLcommunicateWith_offending_list\n     \\<lparr>nodesL = [1, 2, 3, 4],\n        edgesL = [(1, 2), (1, 3), (2, 3), (3, 4)]\\<rparr>\n     ((\\<lambda>v. SINVAR_ACLcommunicateWith.default_node_properties)\n      (1 := [1, 2, 3], 2 := [1, 2, 3, 4], 3 := [1, 2, 3, 4],\n       4 := [1, 2, 3, 4])) =\n    [[(1, 2), (1, 3)], [(1, 3), (2, 3)], [(3, 4)]]", "by eval"], ["", "end"], ["", "hide_const (open) NetModel_node_props"], ["", "hide_const (open) sinvar"], ["", "end"]]}