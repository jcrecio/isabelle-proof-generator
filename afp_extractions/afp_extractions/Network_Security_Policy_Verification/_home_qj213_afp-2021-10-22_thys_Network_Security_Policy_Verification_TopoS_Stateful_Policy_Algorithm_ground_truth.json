{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/TopoS_Stateful_Policy_Algorithm.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma False_set: \"{(r, s). False} = {}\"", "lemma valid_reqs_ACS_D: \"valid_reqs M \\<Longrightarrow> valid_reqs (get_ACS M)\"", "lemma valid_reqs_IFS_D: \"valid_reqs M \\<Longrightarrow> valid_reqs (get_IFS M)\"", "lemma all_security_requirements_fulfilled_ACS_D: \"all_security_requirements_fulfilled M G \\<Longrightarrow>\n    all_security_requirements_fulfilled (get_ACS M) G\"", "lemma all_security_requirements_fulfilled_IFS_D: \"all_security_requirements_fulfilled M G \\<Longrightarrow>\n    all_security_requirements_fulfilled (get_IFS M) G\"", "lemma all_security_requirements_fulfilled_mono_stateful_policy_to_network_graph:\n      \"\\<lbrakk> valid_reqs M; E' \\<subseteq> E; wf_graph \\<lparr> nodes = V, edges = Efix \\<union> E \\<rparr> \\<rbrakk> \\<Longrightarrow>  \n        all_security_requirements_fulfilled M \n          (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = Efix, flows_state = E \\<rparr>)\\<Longrightarrow>\n        all_security_requirements_fulfilled M \n          (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = Efix, flows_state = E' \\<rparr>)\"", "lemma trivial_stateful_policy_compliance:\n    \"\\<lbrakk> wf_graph \\<lparr> nodes = V, edges = E \\<rparr>; valid_reqs M; all_security_requirements_fulfilled M \\<lparr> nodes = V, edges = E \\<rparr> \\<rbrakk> \\<Longrightarrow> \n      stateful_policy_compliance \\<lparr> hosts = V, flows_fix = E, flows_state = {} \\<rparr> \\<lparr> nodes = V, edges = E \\<rparr> M\"", "lemma filter_IFS_no_violations_subseteq_input: \"set (filter_IFS_no_violations G M Es) \\<subseteq> set Es\"", "lemma filter_IFS_no_violations_accu_correct_induction: \"valid_reqs (get_IFS M) \\<Longrightarrow> wf_graph \\<lparr> nodes = V, edges = E \\<rparr> \\<Longrightarrow>\n            all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = set (accu) \\<rparr>) \\<Longrightarrow> \n            (set accu) \\<union> (set edgesList) \\<subseteq> E \\<Longrightarrow> \n            all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = set (filter_IFS_no_violations_accu \\<lparr> nodes = V, edges = E \\<rparr> M accu edgesList) \\<rparr>)\"", "lemma filter_IFS_no_violations_correct: \"\\<lbrakk>valid_reqs (get_IFS M); wf_graph G;\n            all_security_requirements_fulfilled (get_IFS M) G; \n            (set edgesList) \\<subseteq> edges G \\<rbrakk> \\<Longrightarrow> \n            all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr> hosts = nodes G, flows_fix = edges G, flows_state = set (filter_IFS_no_violations G M edgesList) \\<rparr>)\"", "lemma filter_IFS_no_violations_accu_no_IFS: \"valid_reqs (get_IFS M) \\<Longrightarrow> wf_graph G \\<Longrightarrow> get_IFS M = [] \\<Longrightarrow>\n            (set accu) \\<union> (set edgesList) \\<subseteq> edges G \\<Longrightarrow> \n            filter_IFS_no_violations_accu G M accu edgesList = rev(edgesList)@accu\"", "lemma filter_IFS_no_violations_accu_maximal_induction: \"valid_reqs (get_IFS M) \\<Longrightarrow> wf_graph \\<lparr> nodes = V, edges = E \\<rparr> \\<Longrightarrow> \n      set accu \\<subseteq> E \\<Longrightarrow> set edgesList \\<subseteq> E \\<Longrightarrow>\n        \\<forall> e \\<in> E - (set accu \\<union> set edgesList).\n            \\<not> all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = {e} \\<union> (set accu) \\<rparr>)\n         \\<Longrightarrow>\n           let stateful = set (filter_IFS_no_violations_accu \\<lparr> nodes = V, edges = E \\<rparr> M accu edgesList) in\n            (\\<forall> e \\<in> E - stateful.\n            \\<not> all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = {e} \\<union> stateful \\<rparr>))\"", "lemma filter_IFS_no_violations_maximal: \"\\<lbrakk>valid_reqs (get_IFS M); wf_graph G;\n            (set edgesList) = edges G \\<rbrakk> \\<Longrightarrow> \n            let stateful = set (filter_IFS_no_violations G M edgesList) in \n            \\<forall> e \\<in> edges G - stateful.\n              \\<not> all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr> hosts = nodes G, flows_fix = edges G, flows_state = {e} \\<union> stateful \\<rparr>)\"", "lemma filter_compliant_stateful_ACS_subseteq_input: \"set (filter_compliant_stateful_ACS G M Es) \\<subseteq> set Es\"", "lemma filter_compliant_stateful_ACS_accu_correct_induction: \"valid_reqs (get_ACS M) \\<Longrightarrow> wf_graph \\<lparr> nodes = V, edges = E \\<rparr> \\<Longrightarrow>\n            (set accu) \\<union> (set edgesList) \\<subseteq> E \\<Longrightarrow> \n            \\<forall>F \\<in> get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = set (accu) \\<rparr>). F \\<subseteq> backflows (set accu) \\<Longrightarrow> \n            (\\<forall>a \\<in> set accu. a \\<notin> (backflows E)) \\<Longrightarrow>\n            \\<T> = \\<lparr> hosts = V, flows_fix = E, flows_state = set (filter_compliant_stateful_ACS_accu \\<lparr> nodes = V, edges = E \\<rparr> M accu edgesList) \\<rparr> \\<Longrightarrow>\n            \\<forall>F \\<in> get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<T>). F \\<subseteq> backflows (filternew_flows_state \\<T>)\"", "lemma filter_compliant_stateful_ACS_accu_no_side_effects: \"valid_reqs (get_ACS M) \\<Longrightarrow> wf_graph G \\<Longrightarrow>\n            \\<forall>F \\<in> get_offending_flows (get_ACS M) \\<lparr>nodes = nodes G, edges = edges G \\<union> backflows (edges G)\\<rparr>. F \\<subseteq> (backflows (edges G)) - (edges G) \\<Longrightarrow>\n            (set accu) \\<union> (set edgesList) \\<subseteq> edges G \\<Longrightarrow> \n            (\\<forall>a \\<in> set accu. a \\<notin> (backflows (edges G))) \\<Longrightarrow>\n            filter_compliant_stateful_ACS_accu G M accu edgesList = rev([ e \\<leftarrow> edgesList. e \\<notin> backflows (edges G)])@accu\"", "lemma filter_compliant_stateful_ACS_correct: \n      assumes a1: \"valid_reqs (get_ACS M)\"\n      and     a2: \"wf_graph G\"\n      and     a3: \"set edgesList \\<subseteq> edges G\"  \n      and     a4: \"all_security_requirements_fulfilled (get_ACS M) G\"\n      and     a5: \"\\<T> = \\<lparr> hosts = nodes G, flows_fix = edges G, flows_state = set (filter_compliant_stateful_ACS G M edgesList) \\<rparr>\"\n      shows   \"\\<forall>F \\<in> get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<T>). F \\<subseteq> backflows (filternew_flows_state \\<T>)\"", "lemma filter_compliant_stateful_ACS_accu_induction_maximal:\"\\<lbrakk> valid_reqs (get_ACS M);  wf_graph \\<lparr> nodes = V, edges = E \\<rparr>;\n            (set edgesList) \\<subseteq> E;\n            (set accu) \\<subseteq> E; \n            stateful = set (filter_compliant_stateful_ACS_accu \\<lparr> nodes = V, edges = E \\<rparr> M accu edgesList);\n            \\<forall>e \\<in> E - (set edgesList \\<union> set accu \\<union> {e \\<in> E. e \\<in> backflows E}).\n            \\<not> \\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = set accu \\<union> {e} \\<rparr>))\n                \\<subseteq> backflows (filternew_flows_state \\<lparr> hosts = V, flows_fix = E, flows_state = set accu \\<union> {e} \\<rparr>)\n            \\<rbrakk> \\<Longrightarrow>\n            \\<forall>e \\<in> E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}). \\<^cancel>\\<open>E - {computed stateful flows plus trivial stateful flows}\\<close>\n            \\<not> \\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = stateful \\<union> {e} \\<rparr>))\n                \\<subseteq> backflows (filternew_flows_state \\<lparr> hosts = V, flows_fix = E, flows_state = stateful \\<union> {e} \\<rparr>)\"", "lemma filter_compliant_stateful_ACS_maximal: \"\\<lbrakk> valid_reqs (get_ACS M); wf_graph \\<lparr> nodes = V, edges = E \\<rparr>;\n            (set edgesList) = E;\n            stateful = set (filter_compliant_stateful_ACS \\<lparr> nodes = V, edges = E \\<rparr> M edgesList)\n            \\<rbrakk> \\<Longrightarrow>\n            \\<forall>e \\<in> E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}). \\<^cancel>\\<open>E - {computed stateful flows plus trivial stateful flows}\\<close>\n            \\<not> \\<Union> (get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = stateful \\<union> {e} \\<rparr>))\n                \\<subseteq> backflows (filternew_flows_state \\<lparr> hosts = V, flows_fix = E, flows_state = stateful \\<union> {e} \\<rparr>)\"", "lemma filter_compliant_stateful_ACS_maximal_allsubsets:\n      assumes a1: \"valid_reqs (get_ACS M)\" and a2: \"wf_graph \\<lparr> nodes = V, edges = E \\<rparr>\"\n      and a3: \"(set edgesList) = E\"\n      and a4: \"stateful = set (filter_compliant_stateful_ACS \\<lparr> nodes = V, edges = E \\<rparr> M edgesList)\"\n      and a5: \"X \\<subseteq> E - (stateful \\<union> backflows E)\" and a6: \"X \\<noteq> {}\"\n      shows \"\n      \\<not> \\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = stateful \\<union> X \\<rparr>))\n                \\<subseteq> backflows (filternew_flows_state \\<lparr> hosts = V, flows_fix = E, flows_state = stateful \\<union> X \\<rparr>)\"", "lemma generate_valid_stateful_policy_IFSACS_wf_stateful_policy: assumes wfG: \"wf_graph G\"\n          and     edgesList: \"(set edgesList) = edges G\"\n          shows \"wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)\"", "lemma generate_valid_stateful_policy_IFSACS_select_simps:\n   shows \"hosts (generate_valid_stateful_policy_IFSACS G M edgesList) = nodes G\"\n   and   \"flows_fix (generate_valid_stateful_policy_IFSACS G M edgesList) = edges G\"\n   and   \"flows_state (generate_valid_stateful_policy_IFSACS G M edgesList) \\<subseteq> set edgesList\"", "lemma generate_valid_stateful_policy_IFSACS_all_security_requirements_fulfilled_IFS: assumes validReqs: \"valid_reqs M\"\n          and     wfG: \"wf_graph G\"\n          and     high_level_policy_valid: \"all_security_requirements_fulfilled M G\"\n          and     edgesList: \"(set edgesList) \\<subseteq> edges G\"\n          shows \"all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph (generate_valid_stateful_policy_IFSACS G M edgesList))\"", "theorem generate_valid_stateful_policy_IFSACS_stateful_policy_compliance:\n  assumes validReqs: \"valid_reqs M\"\n        and     wfG: \"wf_graph G\"\n        and     high_level_policy_valid: \"all_security_requirements_fulfilled M G\"\n        and     edgesList: \"(set edgesList) = edges G\"\n        and     Tau: \"\\<T> = generate_valid_stateful_policy_IFSACS G M edgesList\"\n    shows \"stateful_policy_compliance \\<T> G M\"", "lemma generate_valid_stateful_policy_IFSACS_2_wf_stateful_policy: assumes wfG: \"wf_graph G\"\n          and     edgesList: \"(set edgesList) = edges G\"\n          shows \"wf_stateful_policy (generate_valid_stateful_policy_IFSACS_2 G M edgesList)\"", "lemma generate_valid_stateful_policy_IFSACS_2_select_simps:\n   shows \"hosts (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = nodes G\"\n   and   \"flows_fix (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = edges G\"\n   and   \"flows_state (generate_valid_stateful_policy_IFSACS_2 G M edgesList) \\<subseteq> set edgesList\"", "lemma generate_valid_stateful_policy_IFSACS_2_all_security_requirements_fulfilled_IFS: assumes validReqs: \"valid_reqs M\"\n          and     wfG: \"wf_graph G\"\n          and     high_level_policy_valid: \"all_security_requirements_fulfilled M G\"\n          and     edgesList: \"(set edgesList) \\<subseteq> edges G\"\n          shows \"all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph (generate_valid_stateful_policy_IFSACS_2 G M edgesList))\"", "lemma generate_valid_stateful_policy_IFSACS_2_filter_compliant_stateful_ACS:\n  assumes validReqs: \"valid_reqs M\"\n        and     wfG: \"wf_graph G\"\n        and     high_level_policy_valid: \"all_security_requirements_fulfilled M G\"\n        and     edgesList: \"(set edgesList) \\<subseteq> edges G\"\n        and     Tau: \"\\<T> = generate_valid_stateful_policy_IFSACS_2 G M edgesList\"\n  shows \"\\<forall>F\\<in>get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<T>). F \\<subseteq> backflows (filternew_flows_state \\<T>)\"", "theorem generate_valid_stateful_policy_IFSACS_2_stateful_policy_compliance:\n  assumes validReqs: \"valid_reqs M\"\n        and     wfG: \"wf_graph G\"\n        and     high_level_policy_valid: \"all_security_requirements_fulfilled M G\"\n        and     edgesList: \"(set edgesList) = edges G\"\n        and     Tau: \"\\<T> = generate_valid_stateful_policy_IFSACS_2 G M edgesList\"\n    shows \"stateful_policy_compliance \\<T> G M\"", "lemma generate_valid_stateful_policy_IFSACS_2_noIFS_noACSsideeffects_imp_fullgraph:\n  assumes validReqs: \"valid_reqs M\"\n        and     wfG: \"wf_graph G\"\n        and     high_level_policy_valid: \"all_security_requirements_fulfilled M G\"\n        and     edgesList: \"(set edgesList) = edges G\"\n        and     no_ACS_sideeffects: \"\\<forall>F \\<in> get_offending_flows (get_ACS M) \\<lparr>nodes = nodes G, edges = edges G \\<union> backflows (edges G)\\<rparr>. F \\<subseteq> (backflows (edges G)) - (edges G)\"\n        and     no_IFS: \"get_IFS M = []\"\n  shows \"stateful_policy_to_network_graph (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = undirected G\"", "lemma generate_valid_stateful_policy_IFSACS_noIFS_noACSsideeffects_imp_fullgraph:\n  assumes validReqs: \"valid_reqs M\"\n        and     wfG: \"wf_graph G\"\n        and     high_level_policy_valid: \"all_security_requirements_fulfilled M G\"\n        and     edgesList: \"(set edgesList) = edges G\"\n        and     no_ACS_sideeffects: \"\\<forall>F \\<in> get_offending_flows (get_ACS M) \\<lparr>nodes = nodes G, edges = edges G \\<union> backflows (edges G)\\<rparr>. F \\<subseteq> (backflows (edges G)) - (edges G)\"\n        and     no_IFS: \"get_IFS M = []\"\n  shows \"stateful_policy_to_network_graph (generate_valid_stateful_policy_IFSACS G M edgesList) = undirected G\""], "translations": [["", "lemma False_set: \"{(r, s). False} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(r, s). False} = {}", "by simp"], ["", "lemma valid_reqs_ACS_D: \"valid_reqs M \\<Longrightarrow> valid_reqs (get_ACS M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_reqs M \\<Longrightarrow> valid_reqs (get_ACS M)", "by(simp add: valid_reqs_def get_ACS_def)"], ["", "lemma valid_reqs_IFS_D: \"valid_reqs M \\<Longrightarrow> valid_reqs (get_IFS M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_reqs M \\<Longrightarrow> valid_reqs (get_IFS M)", "by(simp add: valid_reqs_def get_IFS_def)"], ["", "lemma all_security_requirements_fulfilled_ACS_D: \"all_security_requirements_fulfilled M G \\<Longrightarrow>\n    all_security_requirements_fulfilled (get_ACS M) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled M G \\<Longrightarrow>\n    all_security_requirements_fulfilled (get_ACS M) G", "by(simp add: all_security_requirements_fulfilled_def get_ACS_def)"], ["", "lemma all_security_requirements_fulfilled_IFS_D: \"all_security_requirements_fulfilled M G \\<Longrightarrow>\n    all_security_requirements_fulfilled (get_IFS M) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled M G \\<Longrightarrow>\n    all_security_requirements_fulfilled (get_IFS M) G", "by(simp add: all_security_requirements_fulfilled_def get_IFS_def)"], ["", "lemma all_security_requirements_fulfilled_mono_stateful_policy_to_network_graph:\n      \"\\<lbrakk> valid_reqs M; E' \\<subseteq> E; wf_graph \\<lparr> nodes = V, edges = Efix \\<union> E \\<rparr> \\<rbrakk> \\<Longrightarrow>  \n        all_security_requirements_fulfilled M \n          (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = Efix, flows_state = E \\<rparr>)\\<Longrightarrow>\n        all_security_requirements_fulfilled M \n          (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = Efix, flows_state = E' \\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_reqs M; E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      (stateful_policy_to_network_graph\n        \\<lparr>hosts = V, flows_fix = Efix,\n           flows_state = E\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       (stateful_policy_to_network_graph\n                         \\<lparr>hosts = V, flows_fix = Efix,\n                            flows_state = E'\\<rparr>)", "apply(simp add: stateful_policy_to_network_graph_def all_flows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_reqs M; E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E' \\<union> backflows E'\\<rparr>", "apply(drule all_security_requirements_fulfilled_mono[where E=\"Efix \\<union> E \\<union> backflows E\" and E'=\"Efix \\<union> E' \\<union> backflows E'\" and V=\"V\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> Efix \\<union> E' \\<union> backflows E'\n                      \\<subseteq> Efix \\<union> E \\<union> backflows E\n 2. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> wf_graph\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E \\<union> backflows E\\<rparr>\n 3. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E \\<union> backflows E\\<rparr>\n 4. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E' \\<union> backflows E'\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E' \\<union> backflows E'\\<rparr>", "apply(thin_tac \"wf_graph G\" for G)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>E' \\<subseteq> E;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> Efix \\<union> E' \\<union> backflows E'\n                      \\<subseteq> Efix \\<union> E \\<union> backflows E\n 2. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> wf_graph\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E \\<union> backflows E\\<rparr>\n 3. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E \\<union> backflows E\\<rparr>\n 4. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E' \\<union> backflows E'\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E' \\<union> backflows E'\\<rparr>", "apply(thin_tac \"all_security_requirements_fulfilled M G\" for M G)"], ["proof (prove)\ngoal (4 subgoals):\n 1. E' \\<subseteq> E \\<Longrightarrow>\n    Efix \\<union> E' \\<union> backflows E'\n    \\<subseteq> Efix \\<union> E \\<union> backflows E\n 2. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> wf_graph\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E \\<union> backflows E\\<rparr>\n 3. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E \\<union> backflows E\\<rparr>\n 4. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E' \\<union> backflows E'\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E' \\<union> backflows E'\\<rparr>", "apply(simp add: backflows_def, blast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> wf_graph\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E \\<union> backflows E\\<rparr>\n 2. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E \\<union> backflows E\\<rparr>\n 3. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E' \\<union> backflows E'\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E' \\<union> backflows E'\\<rparr>", "apply(thin_tac \"all_security_requirements_fulfilled M G\" for M G)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> wf_graph\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E \\<union> backflows E\\<rparr>\n 2. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E \\<union> backflows E\\<rparr>\n 3. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E' \\<union> backflows E'\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E' \\<union> backflows E'\\<rparr>", "apply(simp add: wf_graph_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>E' \\<subseteq> E;\n     fst ` (Efix \\<union> E) \\<subseteq> V \\<and>\n     snd ` (Efix \\<union> E) \\<subseteq> V \\<and>\n     finite Efix \\<and> finite E \\<and> finite V\\<rbrakk>\n    \\<Longrightarrow> fst ` (Efix \\<union> E \\<union> backflows E)\n                      \\<subseteq> V \\<and>\n                      snd ` (Efix \\<union> E \\<union> backflows E)\n                      \\<subseteq> V \\<and>\n                      finite (backflows E)\n 2. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E \\<union> backflows E\\<rparr>\n 3. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E' \\<union> backflows E'\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E' \\<union> backflows E'\\<rparr>", "apply(simp add: backflows_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>E' \\<subseteq> E;\n     fst ` (Efix \\<union> E) \\<subseteq> V \\<and>\n     snd ` (Efix \\<union> E) \\<subseteq> V \\<and>\n     finite Efix \\<and> finite E \\<and> finite V\\<rbrakk>\n    \\<Longrightarrow> fst `\n                      (Efix \\<union> E \\<union> {(r, s). (s, r) \\<in> E})\n                      \\<subseteq> V \\<and>\n                      snd `\n                      (Efix \\<union> E \\<union> {(r, s). (s, r) \\<in> E})\n                      \\<subseteq> V \\<and>\n                      finite {(r, s). (s, r) \\<in> E}\n 2. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E \\<union> backflows E\\<rparr>\n 3. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E' \\<union> backflows E'\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E' \\<union> backflows E'\\<rparr>", "using [[simproc add: finite_Collect]]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>E' \\<subseteq> E;\n     fst ` (Efix \\<union> E) \\<subseteq> V \\<and>\n     snd ` (Efix \\<union> E) \\<subseteq> V \\<and>\n     finite Efix \\<and> finite E \\<and> finite V\\<rbrakk>\n    \\<Longrightarrow> fst `\n                      (Efix \\<union> E \\<union> {(r, s). (s, r) \\<in> E})\n                      \\<subseteq> V \\<and>\n                      snd `\n                      (Efix \\<union> E \\<union> {(r, s). (s, r) \\<in> E})\n                      \\<subseteq> V \\<and>\n                      finite {(r, s). (s, r) \\<in> E}\n 2. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E \\<union> backflows E\\<rparr>\n 3. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E' \\<union> backflows E'\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E' \\<union> backflows E'\\<rparr>", "apply(auto)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E \\<union> backflows E\\<rparr>\n 2. \\<lbrakk>E' \\<subseteq> E;\n     wf_graph \\<lparr>nodes = V, edges = Efix \\<union> E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E \\<union> backflows E\\<rparr>;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V,\n         edges = Efix \\<union> E' \\<union> backflows E'\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V,\n                          edges =\n                            Efix \\<union> E' \\<union> backflows E'\\<rparr>", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Sketch for generating a stateful policy from a simple directed policy\\<close>"], ["", "text\\<open>Having no stateful flows, we trivially get a valid stateful policy.\\<close>"], ["", "lemma trivial_stateful_policy_compliance:\n    \"\\<lbrakk> wf_graph \\<lparr> nodes = V, edges = E \\<rparr>; valid_reqs M; all_security_requirements_fulfilled M \\<lparr> nodes = V, edges = E \\<rparr> \\<rbrakk> \\<Longrightarrow> \n      stateful_policy_compliance \\<lparr> hosts = V, flows_fix = E, flows_state = {} \\<rparr> \\<lparr> nodes = V, edges = E \\<rparr> M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; valid_reqs M;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> stateful_policy_compliance\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = {}\\<rparr>\n                       \\<lparr>nodes = V, edges = E\\<rparr> M", "apply(unfold_locales)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; valid_reqs M;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> fst ` edges \\<lparr>nodes = V, edges = E\\<rparr>\n                      \\<subseteq> nodes \\<lparr>nodes = V, edges = E\\<rparr>\n 2. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; valid_reqs M;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> snd ` edges \\<lparr>nodes = V, edges = E\\<rparr>\n                      \\<subseteq> nodes \\<lparr>nodes = V, edges = E\\<rparr>\n 3. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; valid_reqs M;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> finite (edges \\<lparr>nodes = V, edges = E\\<rparr>)\n 4. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; valid_reqs M;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> finite (nodes \\<lparr>nodes = V, edges = E\\<rparr>)\n 5. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; valid_reqs M;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> valid_reqs M\n 6. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; valid_reqs M;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled M\n                       \\<lparr>nodes = V, edges = E\\<rparr>\n 7. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; valid_reqs M;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> fst `\n                      flows_fix\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = {}\\<rparr>\n                      \\<subseteq> hosts\n                                   \\<lparr>hosts = V, flows_fix = E,\nflows_state = {}\\<rparr>\n 8. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; valid_reqs M;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> snd `\n                      flows_fix\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = {}\\<rparr>\n                      \\<subseteq> hosts\n                                   \\<lparr>hosts = V, flows_fix = E,\nflows_state = {}\\<rparr>\n 9. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; valid_reqs M;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> flows_state\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = {}\\<rparr>\n                      \\<subseteq> flows_fix\n                                   \\<lparr>hosts = V, flows_fix = E,\nflows_state = {}\\<rparr>\n 10. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; valid_reqs M;\n      all_security_requirements_fulfilled M\n       \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n     \\<Longrightarrow> finite\n                        (hosts\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = {}\\<rparr>)\nA total of 14 subgoals...", "apply(simp_all add: wf_graph_def stateful_policy_to_network_graph_def all_flows_def backflows_def False_set)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>fst ` E \\<subseteq> V \\<and>\n             snd ` E \\<subseteq> V \\<and> finite E \\<and> finite V;\n     valid_reqs M;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled (get_IFS M)\n                       \\<lparr>nodes = V, edges = E\\<rparr>\n 2. \\<lbrakk>fst ` E \\<subseteq> V \\<and>\n             snd ` E \\<subseteq> V \\<and> finite E \\<and> finite V;\n     valid_reqs M;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n\\<lparr>nodes = V, edges = E\\<rparr>.\n                         F \\<subseteq> {(r, s).\n  (s, r)\n  \\<in> filternew_flows_state\n         \\<lparr>hosts = V, flows_fix = E, flows_state = {}\\<rparr>}", "apply(simp add: get_IFS_def get_ACS_def all_security_requirements_fulfilled_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fst ` E \\<subseteq> V \\<and>\n             snd ` E \\<subseteq> V \\<and> finite E \\<and> finite V;\n     valid_reqs M;\n     all_security_requirements_fulfilled M\n      \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n\\<lparr>nodes = V, edges = E\\<rparr>.\n                         F \\<subseteq> {(r, s).\n  (s, r)\n  \\<in> filternew_flows_state\n         \\<lparr>hosts = V, flows_fix = E, flows_state = {}\\<rparr>}", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F a b.\n       \\<lbrakk>valid_reqs M;\n        all_security_requirements_fulfilled M\n         \\<lparr>nodes = V, edges = E\\<rparr>;\n        F \\<in> get_offending_flows (get_ACS M)\n                 \\<lparr>nodes = V, edges = E\\<rparr>;\n        (a, b) \\<in> F; fst ` E \\<subseteq> V; snd ` E \\<subseteq> V;\n        finite E; finite V\\<rbrakk>\n       \\<Longrightarrow> (b, a)\n                         \\<in> filternew_flows_state\n                                \\<lparr>hosts = V, flows_fix = E,\n                                   flows_state = {}\\<rparr>", "apply(drule valid_reqs_ACS_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F a b.\n       \\<lbrakk>all_security_requirements_fulfilled M\n                 \\<lparr>nodes = V, edges = E\\<rparr>;\n        F \\<in> get_offending_flows (get_ACS M)\n                 \\<lparr>nodes = V, edges = E\\<rparr>;\n        (a, b) \\<in> F; fst ` E \\<subseteq> V; snd ` E \\<subseteq> V;\n        finite E; finite V; valid_reqs (get_ACS M)\\<rbrakk>\n       \\<Longrightarrow> (b, a)\n                         \\<in> filternew_flows_state\n                                \\<lparr>hosts = V, flows_fix = E,\n                                   flows_state = {}\\<rparr>", "apply(drule all_security_requirements_fulfilled_ACS_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F a b.\n       \\<lbrakk>F \\<in> get_offending_flows (get_ACS M)\n                         \\<lparr>nodes = V, edges = E\\<rparr>;\n        (a, b) \\<in> F; fst ` E \\<subseteq> V; snd ` E \\<subseteq> V;\n        finite E; finite V; valid_reqs (get_ACS M);\n        all_security_requirements_fulfilled (get_ACS M)\n         \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (b, a)\n                         \\<in> filternew_flows_state\n                                \\<lparr>hosts = V, flows_fix = E,\n                                   flows_state = {}\\<rparr>", "apply(drule(1) all_security_requirements_fulfilled_imp_get_offending_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F a b.\n       \\<lbrakk>F \\<in> get_offending_flows (get_ACS M)\n                         \\<lparr>nodes = V, edges = E\\<rparr>;\n        (a, b) \\<in> F; fst ` E \\<subseteq> V; snd ` E \\<subseteq> V;\n        finite E; finite V;\n        all_security_requirements_fulfilled (get_ACS M)\n         \\<lparr>nodes = V, edges = E\\<rparr>;\n        get_offending_flows (get_ACS M)\n         \\<lparr>nodes = V, edges = E\\<rparr> =\n        {}\\<rbrakk>\n       \\<Longrightarrow> (b, a)\n                         \\<in> filternew_flows_state\n                                \\<lparr>hosts = V, flows_fix = E,\n                                   flows_state = {}\\<rparr>", "by force"], ["", "text\\<open>trying better\\<close>"], ["", "text\\<open>First, filtering flows that cause no IFS violations\\<close>"], ["", "(*the edges front of the list are more likely to be kept*)"], ["", "fun filter_IFS_no_violations_accu :: \"'v::vertex graph \\<Rightarrow> 'v SecurityInvariant_configured list \\<Rightarrow> ('v \\<times> 'v) list \\<Rightarrow> ('v \\<times> 'v) list \\<Rightarrow> ('v \\<times> 'v) list\" where\n      \"filter_IFS_no_violations_accu G M accu [] = accu\" |\n      \"filter_IFS_no_violations_accu G M accu (e#Es) = (if\n        all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr> hosts = nodes G, flows_fix = edges G, flows_state = set (e#accu) \\<rparr>)\n        then filter_IFS_no_violations_accu G M (e#accu) Es\n        else filter_IFS_no_violations_accu G M accu Es)\""], ["", "definition filter_IFS_no_violations :: \"'v::vertex graph \\<Rightarrow> 'v SecurityInvariant_configured list \\<Rightarrow> ('v \\<times> 'v) list \\<Rightarrow> ('v \\<times> 'v) list\" where\n      \"filter_IFS_no_violations G M Es = filter_IFS_no_violations_accu G M [] Es\""], ["", "lemma filter_IFS_no_violations_subseteq_input: \"set (filter_IFS_no_violations G M Es) \\<subseteq> set Es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (filter_IFS_no_violations G M Es) \\<subseteq> set Es", "apply(subgoal_tac \"\\<forall> accu. set (filter_IFS_no_violations_accu G M accu Es) \\<subseteq> set Es \\<union> set accu\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>accu.\n       set (filter_IFS_no_violations_accu G M accu Es)\n       \\<subseteq> set Es \\<union> set accu \\<Longrightarrow>\n    set (filter_IFS_no_violations G M Es) \\<subseteq> set Es\n 2. \\<forall>accu.\n       set (filter_IFS_no_violations_accu G M accu Es)\n       \\<subseteq> set Es \\<union> set accu", "apply(erule_tac x=\"[]\" in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. set (filter_IFS_no_violations_accu G M [] Es)\n    \\<subseteq> set Es \\<union> set [] \\<Longrightarrow>\n    set (filter_IFS_no_violations G M Es) \\<subseteq> set Es\n 2. \\<forall>accu.\n       set (filter_IFS_no_violations_accu G M accu Es)\n       \\<subseteq> set Es \\<union> set accu", "apply(simp add: filter_IFS_no_violations_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>accu.\n       set (filter_IFS_no_violations_accu G M accu Es)\n       \\<subseteq> set Es \\<union> set accu", "unfolding filter_IFS_no_violations_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>accu.\n       set (filter_IFS_no_violations_accu G M accu Es)\n       \\<subseteq> set Es \\<union> set accu", "apply(induct_tac Es)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>accu.\n       set (filter_IFS_no_violations_accu G M accu [])\n       \\<subseteq> set [] \\<union> set accu\n 2. \\<And>a list.\n       \\<forall>accu.\n          set (filter_IFS_no_violations_accu G M accu list)\n          \\<subseteq> set list \\<union> set accu \\<Longrightarrow>\n       \\<forall>accu.\n          set (filter_IFS_no_violations_accu G M accu (a # list))\n          \\<subseteq> set (a # list) \\<union> set accu", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<forall>accu.\n          set (filter_IFS_no_violations_accu G M accu list)\n          \\<subseteq> set list \\<union> set accu \\<Longrightarrow>\n       \\<forall>accu.\n          (all_security_requirements_fulfilled (get_IFS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = nodes G, flows_fix = edges G,\n                 flows_state =\n                   insert a (set accu)\\<rparr>) \\<longrightarrow>\n           set (filter_IFS_no_violations_accu G M (a # accu) list)\n           \\<subseteq> insert a (set list \\<union> set accu)) \\<and>\n          (\\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = nodes G, flows_fix = edges G,\n                        flows_state =\n                          insert a (set accu)\\<rparr>) \\<longrightarrow>\n           set (filter_IFS_no_violations_accu G M accu list)\n           \\<subseteq> insert a (set list \\<union> set accu))", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma filter_IFS_no_violations_accu_correct_induction: \"valid_reqs (get_IFS M) \\<Longrightarrow> wf_graph \\<lparr> nodes = V, edges = E \\<rparr> \\<Longrightarrow>\n            all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = set (accu) \\<rparr>) \\<Longrightarrow> \n            (set accu) \\<union> (set edgesList) \\<subseteq> E \\<Longrightarrow> \n            all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = set (filter_IFS_no_violations_accu \\<lparr> nodes = V, edges = E \\<rparr> M accu edgesList) \\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_reqs (get_IFS M);\n     wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     all_security_requirements_fulfilled (get_IFS M)\n      (stateful_policy_to_network_graph\n        \\<lparr>hosts = V, flows_fix = E, flows_state = set accu\\<rparr>);\n     set accu \\<union> set edgesList \\<subseteq> E\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled (get_IFS M)\n                       (stateful_policy_to_network_graph\n                         \\<lparr>hosts = V, flows_fix = E,\n                            flows_state =\n                              set (filter_IFS_no_violations_accu\n                                    \\<lparr>nodes = V, edges = E\\<rparr> M\n                                    accu edgesList)\\<rparr>)", "apply(induction edgesList arbitrary: accu)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>accu.\n       \\<lbrakk>valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        all_security_requirements_fulfilled (get_IFS M)\n         (stateful_policy_to_network_graph\n           \\<lparr>hosts = V, flows_fix = E,\n              flows_state = set accu\\<rparr>);\n        set accu \\<union> set [] \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> all_security_requirements_fulfilled (get_IFS M)\n                          (stateful_policy_to_network_graph\n                            \\<lparr>hosts = V, flows_fix = E,\n                               flows_state =\n                                 set (filter_IFS_no_violations_accu\n \\<lparr>nodes = V, edges = E\\<rparr> M accu [])\\<rparr>)\n 2. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    all_security_requirements_fulfilled (get_IFS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set accu\\<rparr>);\n                    set accu \\<union> set edgesList \\<subseteq> E\\<rbrakk>\n                   \\<Longrightarrow> all_security_requirements_fulfilled\n(get_IFS M)\n(stateful_policy_to_network_graph\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state =\n       set (filter_IFS_no_violations_accu\n             \\<lparr>nodes = V, edges = E\\<rparr> M accu\n             edgesList)\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        all_security_requirements_fulfilled (get_IFS M)\n         (stateful_policy_to_network_graph\n           \\<lparr>hosts = V, flows_fix = E,\n              flows_state = set accu\\<rparr>);\n        set accu \\<union> set (a # edgesList) \\<subseteq> E\\<rbrakk>\n       \\<Longrightarrow> all_security_requirements_fulfilled (get_IFS M)\n                          (stateful_policy_to_network_graph\n                            \\<lparr>hosts = V, flows_fix = E,\n                               flows_state =\n                                 set (filter_IFS_no_violations_accu\n \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # edgesList))\\<rparr>)", "by(simp_all)"], ["", "lemma filter_IFS_no_violations_correct: \"\\<lbrakk>valid_reqs (get_IFS M); wf_graph G;\n            all_security_requirements_fulfilled (get_IFS M) G; \n            (set edgesList) \\<subseteq> edges G \\<rbrakk> \\<Longrightarrow> \n            all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr> hosts = nodes G, flows_fix = edges G, flows_state = set (filter_IFS_no_violations G M edgesList) \\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_reqs (get_IFS M); wf_graph G;\n     all_security_requirements_fulfilled (get_IFS M) G;\n     set edgesList \\<subseteq> edges G\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled (get_IFS M)\n                       (stateful_policy_to_network_graph\n                         \\<lparr>hosts = nodes G, flows_fix = edges G,\n                            flows_state =\n                              set (filter_IFS_no_violations G M\n                                    edgesList)\\<rparr>)", "unfolding filter_IFS_no_violations_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_reqs (get_IFS M); wf_graph G;\n     all_security_requirements_fulfilled (get_IFS M) G;\n     set edgesList \\<subseteq> edges G\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled (get_IFS M)\n                       (stateful_policy_to_network_graph\n                         \\<lparr>hosts = nodes G, flows_fix = edges G,\n                            flows_state =\n                              set (filter_IFS_no_violations_accu G M []\n                                    edgesList)\\<rparr>)", "apply(case_tac G, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nodes edges.\n       \\<lbrakk>valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        all_security_requirements_fulfilled (get_IFS M)\n         \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        set edgesList \\<subseteq> edges;\n        G = \\<lparr>nodes = nodes, edges = edges\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> all_security_requirements_fulfilled (get_IFS M)\n                          (stateful_policy_to_network_graph\n                            \\<lparr>hosts = nodes, flows_fix = edges,\n                               flows_state =\n                                 set (filter_IFS_no_violations_accu\n \\<lparr>nodes = nodes, edges = edges\\<rparr> M [] edgesList)\\<rparr>)", "apply(drule(1) filter_IFS_no_violations_accu_correct_induction[where accu=\"[]\", simplified])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>nodes edges.\n       \\<lbrakk>wf_graph \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        all_security_requirements_fulfilled (get_IFS M)\n         \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        set edgesList \\<subseteq> edges;\n        G = \\<lparr>nodes = nodes, edges = edges\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> all_security_requirements_fulfilled (get_IFS M)\n                          (stateful_policy_to_network_graph\n                            \\<lparr>hosts = nodes, flows_fix = edges,\n                               flows_state = {}\\<rparr>)\n 2. \\<And>nodes edges.\n       \\<lbrakk>wf_graph \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        all_security_requirements_fulfilled (get_IFS M)\n         \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        set edgesList \\<subseteq> edges;\n        G = \\<lparr>nodes = nodes, edges = edges\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> set (?edgesList1 nodes edges) \\<subseteq> edges\n 3. \\<And>nodes edges.\n       \\<lbrakk>wf_graph \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        all_security_requirements_fulfilled (get_IFS M)\n         \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        set edgesList \\<subseteq> edges;\n        G = \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        all_security_requirements_fulfilled (get_IFS M)\n         (stateful_policy_to_network_graph\n           \\<lparr>hosts = nodes, flows_fix = edges,\n              flows_state =\n                set (filter_IFS_no_violations_accu\n                      \\<lparr>nodes = nodes, edges = edges\\<rparr> M []\n                      (?edgesList1 nodes edges))\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> all_security_requirements_fulfilled (get_IFS M)\n                          (stateful_policy_to_network_graph\n                            \\<lparr>hosts = nodes, flows_fix = edges,\n                               flows_state =\n                                 set (filter_IFS_no_violations_accu\n \\<lparr>nodes = nodes, edges = edges\\<rparr> M [] edgesList)\\<rparr>)", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nodes edges.\n       \\<lbrakk>wf_graph \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        all_security_requirements_fulfilled (get_IFS M)\n         \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        set edgesList \\<subseteq> edges;\n        G = \\<lparr>nodes = nodes, edges = edges\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> all_security_requirements_fulfilled (get_IFS M)\n                          (stateful_policy_to_network_graph\n                            \\<lparr>hosts = nodes, flows_fix = edges,\n                               flows_state = {}\\<rparr>)", "by(simp add: stateful_policy_to_network_graph_def all_flows_def backflows_def False_set)"], ["", "lemma filter_IFS_no_violations_accu_no_IFS: \"valid_reqs (get_IFS M) \\<Longrightarrow> wf_graph G \\<Longrightarrow> get_IFS M = [] \\<Longrightarrow>\n            (set accu) \\<union> (set edgesList) \\<subseteq> edges G \\<Longrightarrow> \n            filter_IFS_no_violations_accu G M accu edgesList = rev(edgesList)@accu\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_reqs (get_IFS M); wf_graph G; get_IFS M = [];\n     set accu \\<union> set edgesList \\<subseteq> edges G\\<rbrakk>\n    \\<Longrightarrow> filter_IFS_no_violations_accu G M accu edgesList =\n                      rev edgesList @ accu", "apply(induction edgesList arbitrary: accu)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>accu.\n       \\<lbrakk>valid_reqs (get_IFS M); wf_graph G; get_IFS M = [];\n        set accu \\<union> set [] \\<subseteq> edges G\\<rbrakk>\n       \\<Longrightarrow> filter_IFS_no_violations_accu G M accu [] =\n                         rev [] @ accu\n 2. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M); wf_graph G;\n                    get_IFS M = [];\n                    set accu \\<union> set edgesList\n                    \\<subseteq> edges G\\<rbrakk>\n                   \\<Longrightarrow> filter_IFS_no_violations_accu G M accu\nedgesList =\n                                     rev edgesList @ accu;\n        valid_reqs (get_IFS M); wf_graph G; get_IFS M = [];\n        set accu \\<union> set (a # edgesList) \\<subseteq> edges G\\<rbrakk>\n       \\<Longrightarrow> filter_IFS_no_violations_accu G M accu\n                          (a # edgesList) =\n                         rev (a # edgesList) @ accu", "by(simp_all add: all_security_requirements_fulfilled_def)"], ["", "lemma filter_IFS_no_violations_accu_maximal_induction: \"valid_reqs (get_IFS M) \\<Longrightarrow> wf_graph \\<lparr> nodes = V, edges = E \\<rparr> \\<Longrightarrow> \n      set accu \\<subseteq> E \\<Longrightarrow> set edgesList \\<subseteq> E \\<Longrightarrow>\n        \\<forall> e \\<in> E - (set accu \\<union> set edgesList).\n            \\<not> all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = {e} \\<union> (set accu) \\<rparr>)\n         \\<Longrightarrow>\n           let stateful = set (filter_IFS_no_violations_accu \\<lparr> nodes = V, edges = E \\<rparr> M accu edgesList) in\n            (\\<forall> e \\<in> E - stateful.\n            \\<not> all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = {e} \\<union> stateful \\<rparr>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_reqs (get_IFS M);\n     wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; set accu \\<subseteq> E;\n     set edgesList \\<subseteq> E;\n     \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = V, flows_fix = E,\n                     flows_state = {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> let stateful =\n                            set (filter_IFS_no_violations_accu\n                                  \\<lparr>nodes = V, edges = E\\<rparr> M\n                                  accu edgesList)\n                      in \\<forall>e\\<in>E - stateful.\n                            \\<not> all_security_requirements_fulfilled\n                                    (get_IFS M)\n                                    (stateful_policy_to_network_graph\n\\<lparr>hosts = V, flows_fix = E,\n   flows_state = {e} \\<union> stateful\\<rparr>)", "proof(induction edgesList arbitrary: accu)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>accu.\n       \\<lbrakk>valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set [] \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set []).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu [])\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)\n 2. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<subseteq> E; set edgesList \\<subseteq> E;\n                    \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union> set accu\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> let stateful =\n     set (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr>\n           M accu edgesList)\n                                     in \\<forall>e\\<in>E - stateful.\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> stateful\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set (a # edgesList) \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set (a # edgesList)).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu (a # edgesList))\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)", "case Nil"], ["proof (state)\nthis:\n  valid_reqs (get_IFS M)\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  set accu \\<subseteq> E\n  set [] \\<subseteq> E\n  \\<forall>e\\<in>E - (set accu \\<union> set []).\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> set accu\\<rparr>)\n\ngoal (2 subgoals):\n 1. \\<And>accu.\n       \\<lbrakk>valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set [] \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set []).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu [])\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)\n 2. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<subseteq> E; set edgesList \\<subseteq> E;\n                    \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union> set accu\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> let stateful =\n     set (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr>\n           M accu edgesList)\n                                     in \\<forall>e\\<in>E - stateful.\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> stateful\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set (a # edgesList) \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set (a # edgesList)).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu (a # edgesList))\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)", "thus ?case"], ["proof (prove)\nusing this:\n  valid_reqs (get_IFS M)\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  set accu \\<subseteq> E\n  set [] \\<subseteq> E\n  \\<forall>e\\<in>E - (set accu \\<union> set []).\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> set accu\\<rparr>)\n\ngoal (1 subgoal):\n 1. let stateful =\n          set (filter_IFS_no_violations_accu\n                \\<lparr>nodes = V, edges = E\\<rparr> M accu [])\n    in \\<forall>e\\<in>E - stateful.\n          \\<not> all_security_requirements_fulfilled (get_IFS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state = {e} \\<union> stateful\\<rparr>)", "by(simp add: Let_def)"], ["proof (state)\nthis:\n  let stateful =\n        set (filter_IFS_no_violations_accu\n              \\<lparr>nodes = V, edges = E\\<rparr> M accu [])\n  in \\<forall>e\\<in>E - stateful.\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = V, flows_fix = E,\n                     flows_state = {e} \\<union> stateful\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<subseteq> E; set edgesList \\<subseteq> E;\n                    \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union> set accu\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> let stateful =\n     set (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr>\n           M accu edgesList)\n                                     in \\<forall>e\\<in>E - stateful.\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> stateful\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set (a # edgesList) \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set (a # edgesList)).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu (a # edgesList))\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<subseteq> E; set edgesList \\<subseteq> E;\n                    \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union> set accu\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> let stateful =\n     set (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr>\n           M accu edgesList)\n                                     in \\<forall>e\\<in>E - stateful.\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> stateful\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set (a # edgesList) \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set (a # edgesList)).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu (a # edgesList))\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)", "case(Cons e Es)"], ["proof (state)\nthis:\n  \\<lbrakk>valid_reqs (get_IFS M);\n   wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; set ?accu \\<subseteq> E;\n   set Es \\<subseteq> E;\n   \\<forall>e\\<in>E - (set ?accu \\<union> set Es).\n      \\<not> all_security_requirements_fulfilled (get_IFS M)\n              (stateful_policy_to_network_graph\n                \\<lparr>hosts = V, flows_fix = E,\n                   flows_state = {e} \\<union> set ?accu\\<rparr>)\\<rbrakk>\n  \\<Longrightarrow> let stateful =\n                          set (filter_IFS_no_violations_accu\n                                \\<lparr>nodes = V, edges = E\\<rparr> M ?accu\n                                Es)\n                    in \\<forall>e\\<in>E - stateful.\n                          \\<not> all_security_requirements_fulfilled\n                                  (get_IFS M)\n                                  (stateful_policy_to_network_graph\n                                    \\<lparr>hosts = V, flows_fix = E,\n flows_state = {e} \\<union> stateful\\<rparr>)\n  valid_reqs (get_IFS M)\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  set accu \\<subseteq> E\n  set (e # Es) \\<subseteq> E\n  \\<forall>e\\<in>E - (set accu \\<union> set (e # Es)).\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> set accu\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<subseteq> E; set edgesList \\<subseteq> E;\n                    \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union> set accu\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> let stateful =\n     set (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr>\n           M accu edgesList)\n                                     in \\<forall>e\\<in>E - stateful.\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> stateful\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set (a # edgesList) \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set (a # edgesList)).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu (a # edgesList))\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)", "from Cons.prems(3) Cons.prems(2)"], ["proof (chain)\npicking this:\n  set accu \\<subseteq> E\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>", "have \"fst ` set accu \\<subseteq> V\" and \"snd ` set accu \\<subseteq> V\""], ["proof (prove)\nusing this:\n  set accu \\<subseteq> E\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. fst ` set accu \\<subseteq> V &&& snd ` set accu \\<subseteq> V", "by(auto simp add: wf_graph_def)\n        \\<comment> \\<open>@{const wf_graph} for some complicated structures\\<close>"], ["proof (state)\nthis:\n  fst ` set accu \\<subseteq> V\n  snd ` set accu \\<subseteq> V\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<subseteq> E; set edgesList \\<subseteq> E;\n                    \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union> set accu\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> let stateful =\n     set (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr>\n           M accu edgesList)\n                                     in \\<forall>e\\<in>E - stateful.\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> stateful\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set (a # edgesList) \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set (a # edgesList)).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu (a # edgesList))\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)", "from Cons.prems(2) this Cons.prems(4)"], ["proof (chain)\npicking this:\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  fst ` set accu \\<subseteq> V\n  snd ` set accu \\<subseteq> V\n  set (e # Es) \\<subseteq> E", "have \"\\<And>ea. ea\\<in>E \\<Longrightarrow> wf_graph \\<lparr> nodes = V, edges = insert e (insert ea (set accu)) \\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  fst ` set accu \\<subseteq> V\n  snd ` set accu \\<subseteq> V\n  set (e # Es) \\<subseteq> E\n\ngoal (1 subgoal):\n 1. \\<And>ea.\n       ea \\<in> E \\<Longrightarrow>\n       wf_graph\n        \\<lparr>nodes = V, edges = insert e (insert ea (set accu))\\<rparr>", "by(auto simp add: wf_graph_def)"], ["proof (state)\nthis:\n  ?ea \\<in> E \\<Longrightarrow>\n  wf_graph\n   \\<lparr>nodes = V, edges = insert e (insert ?ea (set accu))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<subseteq> E; set edgesList \\<subseteq> E;\n                    \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union> set accu\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> let stateful =\n     set (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr>\n           M accu edgesList)\n                                     in \\<forall>e\\<in>E - stateful.\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> stateful\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set (a # edgesList) \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set (a # edgesList)).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu (a # edgesList))\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)", "from backflows_wf[OF this] wf_graph_union_edges[OF Cons.prems(2)]"], ["proof (chain)\npicking this:\n  ?ea1 \\<in> E \\<Longrightarrow>\n  wf_graph\n   \\<lparr>nodes = V,\n      edges = backflows (insert e (insert ?ea1 (set accu)))\\<rparr>\n  wf_graph \\<lparr>nodes = V, edges = ?E'\\<rparr> \\<Longrightarrow>\n  wf_graph \\<lparr>nodes = V, edges = E \\<union> ?E'\\<rparr>", "have \"\\<And>ea. ea\\<in>E  \\<Longrightarrow> wf_graph \\<lparr> nodes = V, edges = E \\<union> backflows (insert e (insert ea (set accu))) \\<rparr>\""], ["proof (prove)\nusing this:\n  ?ea1 \\<in> E \\<Longrightarrow>\n  wf_graph\n   \\<lparr>nodes = V,\n      edges = backflows (insert e (insert ?ea1 (set accu)))\\<rparr>\n  wf_graph \\<lparr>nodes = V, edges = ?E'\\<rparr> \\<Longrightarrow>\n  wf_graph \\<lparr>nodes = V, edges = E \\<union> ?E'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>ea.\n       ea \\<in> E \\<Longrightarrow>\n       wf_graph\n        \\<lparr>nodes = V,\n           edges =\n             E \\<union> backflows (insert e (insert ea (set accu)))\\<rparr>", "by (simp)"], ["proof (state)\nthis:\n  ?ea \\<in> E \\<Longrightarrow>\n  wf_graph\n   \\<lparr>nodes = V,\n      edges =\n        E \\<union> backflows (insert e (insert ?ea (set accu)))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<subseteq> E; set edgesList \\<subseteq> E;\n                    \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union> set accu\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> let stateful =\n     set (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr>\n           M accu edgesList)\n                                     in \\<forall>e\\<in>E - stateful.\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> stateful\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set (a # edgesList) \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set (a # edgesList)).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu (a # edgesList))\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)", "hence \"\\<And>ea. ea\\<in>E \\<Longrightarrow> wf_graph \\<lparr> nodes = V, edges = E \\<union> set accu \\<union> backflows (insert e (insert ea (set accu))) \\<rparr>\""], ["proof (prove)\nusing this:\n  ?ea \\<in> E \\<Longrightarrow>\n  wf_graph\n   \\<lparr>nodes = V,\n      edges =\n        E \\<union> backflows (insert e (insert ?ea (set accu)))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>ea.\n       ea \\<in> E \\<Longrightarrow>\n       wf_graph\n        \\<lparr>nodes = V,\n           edges =\n             E \\<union> set accu \\<union>\n             backflows (insert e (insert ea (set accu)))\\<rparr>", "by (metis Cons.prems(3) sup.order_iff)"], ["proof (state)\nthis:\n  ?ea \\<in> E \\<Longrightarrow>\n  wf_graph\n   \\<lparr>nodes = V,\n      edges =\n        E \\<union> set accu \\<union>\n        backflows (insert e (insert ?ea (set accu)))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<subseteq> E; set edgesList \\<subseteq> E;\n                    \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union> set accu\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> let stateful =\n     set (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr>\n           M accu edgesList)\n                                     in \\<forall>e\\<in>E - stateful.\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> stateful\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set (a # edgesList) \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set (a # edgesList)).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu (a # edgesList))\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)", "from this Cons.prems(4)"], ["proof (chain)\npicking this:\n  ?ea \\<in> E \\<Longrightarrow>\n  wf_graph\n   \\<lparr>nodes = V,\n      edges =\n        E \\<union> set accu \\<union>\n        backflows (insert e (insert ?ea (set accu)))\\<rparr>\n  set (e # Es) \\<subseteq> E", "have \"\\<And>ea. ea\\<in>E \\<Longrightarrow> wf_graph \\<lparr> nodes = V, edges = insert e (insert ea (E \\<union> set accu \\<union> backflows (insert e (insert ea (set accu))))) \\<rparr>\""], ["proof (prove)\nusing this:\n  ?ea \\<in> E \\<Longrightarrow>\n  wf_graph\n   \\<lparr>nodes = V,\n      edges =\n        E \\<union> set accu \\<union>\n        backflows (insert e (insert ?ea (set accu)))\\<rparr>\n  set (e # Es) \\<subseteq> E\n\ngoal (1 subgoal):\n 1. \\<And>ea.\n       ea \\<in> E \\<Longrightarrow>\n       wf_graph\n        \\<lparr>nodes = V,\n           edges =\n             insert e\n              (insert ea\n                (E \\<union> set accu \\<union>\n                 backflows (insert e (insert ea (set accu)))))\\<rparr>", "by(simp add: insert_absorb)"], ["proof (state)\nthis:\n  ?ea \\<in> E \\<Longrightarrow>\n  wf_graph\n   \\<lparr>nodes = V,\n      edges =\n        insert e\n         (insert ?ea\n           (E \\<union> set accu \\<union>\n            backflows (insert e (insert ?ea (set accu)))))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<subseteq> E; set edgesList \\<subseteq> E;\n                    \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union> set accu\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> let stateful =\n     set (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr>\n           M accu edgesList)\n                                     in \\<forall>e\\<in>E - stateful.\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> stateful\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set (a # edgesList) \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set (a # edgesList)).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu (a # edgesList))\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)", "hence validgraph1: \"\\<And>ea. ea\\<in>E - (set (e # accu) \\<union> set Es) \\<Longrightarrow> \n          wf_graph \\<lparr> nodes = V, edges = insert e (insert ea (E \\<union> set accu \\<union> backflows (insert e (insert ea (set accu))))) \\<rparr>\""], ["proof (prove)\nusing this:\n  ?ea \\<in> E \\<Longrightarrow>\n  wf_graph\n   \\<lparr>nodes = V,\n      edges =\n        insert e\n         (insert ?ea\n           (E \\<union> set accu \\<union>\n            backflows (insert e (insert ?ea (set accu)))))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>ea.\n       ea \\<in> E - (set (e # accu) \\<union> set Es) \\<Longrightarrow>\n       wf_graph\n        \\<lparr>nodes = V,\n           edges =\n             insert e\n              (insert ea\n                (E \\<union> set accu \\<union>\n                 backflows (insert e (insert ea (set accu)))))\\<rparr>", "by(simp)"], ["proof (state)\nthis:\n  ?ea \\<in> E - (set (e # accu) \\<union> set Es) \\<Longrightarrow>\n  wf_graph\n   \\<lparr>nodes = V,\n      edges =\n        insert e\n         (insert ?ea\n           (E \\<union> set accu \\<union>\n            backflows (insert e (insert ?ea (set accu)))))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<subseteq> E; set edgesList \\<subseteq> E;\n                    \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union> set accu\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> let stateful =\n     set (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr>\n           M accu edgesList)\n                                     in \\<forall>e\\<in>E - stateful.\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> stateful\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set (a # edgesList) \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set (a # edgesList)).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu (a # edgesList))\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)", "have validgraph2: \"\\<And> ea. \n         insert ea (E \\<union> set accu \\<union> backflows (insert ea (set accu))) \\<subseteq> insert e (insert ea (E \\<union> set accu \\<union> backflows (insert e (insert ea (set accu)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ea.\n       insert ea\n        (E \\<union> set accu \\<union> backflows (insert ea (set accu)))\n       \\<subseteq> insert e\n                    (insert ea\n                      (E \\<union> set accu \\<union>\n                       backflows (insert e (insert ea (set accu)))))", "apply(simp add: backflows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ea.\n       E \\<subseteq> insert e\n                      (insert ea\n                        (E \\<union> set accu \\<union>\n                         {(r, s).\n                          (s, r) = e \\<or>\n                          (s, r) = ea \\<or> (s, r) \\<in> set accu})) \\<and>\n       set accu\n       \\<subseteq> insert e\n                    (insert ea\n                      (E \\<union> set accu \\<union>\n                       {(r, s).\n                        (s, r) = e \\<or>\n                        (s, r) = ea \\<or> (s, r) \\<in> set accu})) \\<and>\n       {(r, s). (s, r) = ea \\<or> (s, r) \\<in> set accu}\n       \\<subseteq> insert e\n                    (insert ea\n                      (E \\<union> set accu \\<union>\n                       {(r, s).\n                        (s, r) = e \\<or>\n                        (s, r) = ea \\<or> (s, r) \\<in> set accu}))", "by blast"], ["proof (state)\nthis:\n  insert ?ea\n   (E \\<union> set accu \\<union> backflows (insert ?ea (set accu)))\n  \\<subseteq> insert e\n               (insert ?ea\n                 (E \\<union> set accu \\<union>\n                  backflows (insert e (insert ?ea (set accu)))))\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<subseteq> E; set edgesList \\<subseteq> E;\n                    \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union> set accu\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> let stateful =\n     set (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr>\n           M accu edgesList)\n                                     in \\<forall>e\\<in>E - stateful.\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> stateful\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set (a # edgesList) \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set (a # edgesList)).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu (a # edgesList))\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)", "from all_security_requirements_fulfilled_mono[OF Cons.prems(1) validgraph2 validgraph1]"], ["proof (chain)\npicking this:\n  \\<lbrakk>?ea1 \\<in> E - (set (e # accu) \\<union> set Es);\n   all_security_requirements_fulfilled (get_IFS M)\n    \\<lparr>nodes = V,\n       edges =\n         insert e\n          (insert ?ea1\n            (E \\<union> set accu \\<union>\n             backflows\n              (insert e (insert ?ea1 (set accu)))))\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> all_security_requirements_fulfilled (get_IFS M)\n                     \\<lparr>nodes = V,\n                        edges =\n                          insert ?ea1\n                           (E \\<union> set accu \\<union>\n                            backflows (insert ?ea1 (set accu)))\\<rparr>", "have neg_mono:\n            \"\\<And>ea. ea \\<in> E - (set (e # accu) \\<union> set Es) \\<Longrightarrow>\n         \\<not> all_security_requirements_fulfilled (get_IFS M) \n            \\<lparr>nodes = V, edges = insert ea (E \\<union> set accu \\<union> backflows (insert ea (set accu)))\\<rparr>\n         \\<Longrightarrow>\n         \\<not> all_security_requirements_fulfilled (get_IFS M) \n            \\<lparr>nodes = V, edges = insert e (insert ea (E \\<union> set accu \\<union> backflows (insert e (insert ea (set accu)))))\\<rparr>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?ea1 \\<in> E - (set (e # accu) \\<union> set Es);\n   all_security_requirements_fulfilled (get_IFS M)\n    \\<lparr>nodes = V,\n       edges =\n         insert e\n          (insert ?ea1\n            (E \\<union> set accu \\<union>\n             backflows\n              (insert e (insert ?ea1 (set accu)))))\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> all_security_requirements_fulfilled (get_IFS M)\n                     \\<lparr>nodes = V,\n                        edges =\n                          insert ?ea1\n                           (E \\<union> set accu \\<union>\n                            backflows (insert ?ea1 (set accu)))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>ea.\n       \\<lbrakk>ea \\<in> E - (set (e # accu) \\<union> set Es);\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                \\<lparr>nodes = V,\n                   edges =\n                     insert ea\n                      (E \\<union> set accu \\<union>\n                       backflows (insert ea (set accu)))\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 \\<lparr>nodes = V,\n                                    edges =\ninsert e\n (insert ea\n   (E \\<union> set accu \\<union>\n    backflows (insert e (insert ea (set accu)))))\\<rparr>", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ea.\n       \\<lbrakk>ea \\<in> E \\<and>\n                ea \\<noteq> e \\<and>\n                ea \\<notin> set accu \\<and> ea \\<notin> set Es;\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                \\<lparr>nodes = V,\n                   edges =\n                     insert ea\n                      (E \\<union> set accu \\<union>\n                       backflows (insert ea (set accu)))\\<rparr>;\n        \\<And>ea.\n           \\<lbrakk>ea \\<in> E \\<and>\n                    ea \\<noteq> e \\<and>\n                    ea \\<notin> set accu \\<and> ea \\<notin> set Es;\n            all_security_requirements_fulfilled (get_IFS M)\n             \\<lparr>nodes = V,\n                edges =\n                  insert e\n                   (insert ea\n                     (E \\<union> set accu \\<union>\n                      backflows\n                       (insert e (insert ea (set accu)))))\\<rparr>\\<rbrakk>\n           \\<Longrightarrow> all_security_requirements_fulfilled (get_IFS M)\n                              \\<lparr>nodes = V,\n                                 edges =\n                                   insert ea\n                                    (E \\<union> set accu \\<union>\n                                     backflows\n(insert ea (set accu)))\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 \\<lparr>nodes = V,\n                                    edges =\ninsert e\n (insert ea\n   (E \\<union> set accu \\<union>\n    backflows (insert e (insert ea (set accu)))))\\<rparr>", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>?ea \\<in> E - (set (e # accu) \\<union> set Es);\n   \\<not> all_security_requirements_fulfilled (get_IFS M)\n           \\<lparr>nodes = V,\n              edges =\n                insert ?ea\n                 (E \\<union> set accu \\<union>\n                  backflows (insert ?ea (set accu)))\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> \\<not> all_security_requirements_fulfilled (get_IFS M)\n                            \\<lparr>nodes = V,\n                               edges =\n                                 insert e\n                                  (insert ?ea\n                                    (E \\<union> set accu \\<union>\n                                     backflows\n(insert e (insert ?ea (set accu)))))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<subseteq> E; set edgesList \\<subseteq> E;\n                    \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union> set accu\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> let stateful =\n     set (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr>\n           M accu edgesList)\n                                     in \\<forall>e\\<in>E - stateful.\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> stateful\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set (a # edgesList) \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set (a # edgesList)).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu (a # edgesList))\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)", "from Cons.prems(5)"], ["proof (chain)\npicking this:\n  \\<forall>e\\<in>E - (set accu \\<union> set (e # Es)).\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> set accu\\<rparr>)", "have \"\\<And>ea. ea\\<in>E - (set (e # accu) \\<union> set Es) \\<Longrightarrow>\n          \\<not> all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \n              \\<lparr>hosts = V, flows_fix = E, flows_state = {ea} \\<union> set (e # accu)\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<forall>e\\<in>E - (set accu \\<union> set (e # Es)).\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> set accu\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>ea.\n       ea \\<in> E - (set (e # accu) \\<union> set Es) \\<Longrightarrow>\n       \\<not> all_security_requirements_fulfilled (get_IFS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = {ea} \\<union> set (e # accu)\\<rparr>)", "apply(erule_tac x=\"ea\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ea.\n       \\<lbrakk>ea \\<in> E - (set (e # accu) \\<union> set Es);\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = V, flows_fix = E,\n                     flows_state = {ea} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = V, flows_fix = E,\nflows_state = {ea} \\<union> set (e # accu)\\<rparr>)\n 2. \\<And>ea.\n       \\<lbrakk>ea \\<in> E - (set (e # accu) \\<union> set Es);\n        ea \\<notin> E - (set accu \\<union> set (e # Es))\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = V, flows_fix = E,\nflows_state = {ea} \\<union> set (e # accu)\\<rparr>)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ea.\n       \\<lbrakk>ea \\<in> E - (set (e # accu) \\<union> set Es);\n        ea \\<notin> E - (set accu \\<union> set (e # Es))\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = V, flows_fix = E,\nflows_state = {ea} \\<union> set (e # accu)\\<rparr>)\n 2. \\<And>ea.\n       \\<lbrakk>ea \\<in> E - (set (e # accu) \\<union> set Es);\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = V, flows_fix = E,\n                     flows_state = {ea} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = V, flows_fix = E,\nflows_state = {ea} \\<union> set (e # accu)\\<rparr>)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ea.\n       \\<lbrakk>ea \\<in> E - (set (e # accu) \\<union> set Es);\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = V, flows_fix = E,\n                     flows_state = {ea} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = V, flows_fix = E,\nflows_state = {ea} \\<union> set (e # accu)\\<rparr>)", "apply(simp only: stateful_policy_to_network_graph_def all_flows_def stateful_policy.select_convs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ea.\n       \\<lbrakk>ea \\<in> E - (set (e # accu) \\<union> set Es);\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                \\<lparr>nodes = V,\n                   edges =\n                     E \\<union> ({ea} \\<union> set accu) \\<union>\n                     backflows ({ea} \\<union> set accu)\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 \\<lparr>nodes = V,\n                                    edges =\nE \\<union> ({ea} \\<union> set (e # accu)) \\<union>\nbackflows ({ea} \\<union> set (e # accu))\\<rparr>", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ea.\n       \\<lbrakk>ea \\<in> E \\<and>\n                ea \\<noteq> e \\<and>\n                ea \\<notin> set accu \\<and> ea \\<notin> set Es;\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                \\<lparr>nodes = V,\n                   edges =\n                     insert ea\n                      (E \\<union> set accu \\<union>\n                       backflows (insert ea (set accu)))\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 \\<lparr>nodes = V,\n                                    edges =\ninsert e\n (insert ea\n   (E \\<union> set accu \\<union>\n    backflows (insert e (insert ea (set accu)))))\\<rparr>", "apply(frule(1) neg_mono[simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ea.\n       \\<lbrakk>ea \\<in> E \\<and>\n                ea \\<noteq> e \\<and>\n                ea \\<notin> set accu \\<and> ea \\<notin> set Es;\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                \\<lparr>nodes = V,\n                   edges =\n                     insert ea\n                      (E \\<union> set accu \\<union>\n                       backflows (insert ea (set accu)))\\<rparr>;\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                \\<lparr>nodes = V,\n                   edges =\n                     insert e\n                      (insert ea\n                        (E \\<union> set accu \\<union>\n                         backflows\n                          (insert e\n                            (insert ea (set accu)))))\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 \\<lparr>nodes = V,\n                                    edges =\ninsert e\n (insert ea\n   (E \\<union> set accu \\<union>\n    backflows (insert e (insert ea (set accu)))))\\<rparr>", "by(simp)"], ["proof (state)\nthis:\n  ?ea \\<in> E - (set (e # accu) \\<union> set Es) \\<Longrightarrow>\n  \\<not> all_security_requirements_fulfilled (get_IFS M)\n          (stateful_policy_to_network_graph\n            \\<lparr>hosts = V, flows_fix = E,\n               flows_state = {?ea} \\<union> set (e # accu)\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<subseteq> E; set edgesList \\<subseteq> E;\n                    \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union> set accu\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> let stateful =\n     set (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr>\n           M accu edgesList)\n                                     in \\<forall>e\\<in>E - stateful.\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> stateful\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set (a # edgesList) \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set (a # edgesList)).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu (a # edgesList))\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)", "hence goalTrue:\n          \"\\<forall> ea\\<in>E - (set (e # accu) \\<union> set Es). \n            \\<not> all_security_requirements_fulfilled (get_IFS M) \n                (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = {ea} \\<union> set (e # accu)\\<rparr>)\""], ["proof (prove)\nusing this:\n  ?ea \\<in> E - (set (e # accu) \\<union> set Es) \\<Longrightarrow>\n  \\<not> all_security_requirements_fulfilled (get_IFS M)\n          (stateful_policy_to_network_graph\n            \\<lparr>hosts = V, flows_fix = E,\n               flows_state = {?ea} \\<union> set (e # accu)\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<forall>ea\\<in>E - (set (e # accu) \\<union> set Es).\n       \\<not> all_security_requirements_fulfilled (get_IFS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = {ea} \\<union> set (e # accu)\\<rparr>)", "by simp"], ["proof (state)\nthis:\n  \\<forall>ea\\<in>E - (set (e # accu) \\<union> set Es).\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {ea} \\<union> set (e # accu)\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_IFS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<subseteq> E; set edgesList \\<subseteq> E;\n                    \\<forall>e\\<in>E - (set accu \\<union> set edgesList).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union> set accu\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> let stateful =\n     set (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr>\n           M accu edgesList)\n                                     in \\<forall>e\\<in>E - stateful.\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> stateful\\<rparr>);\n        valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<subseteq> E; set (a # edgesList) \\<subseteq> E;\n        \\<forall>e\\<in>E - (set accu \\<union> set (a # edgesList)).\n           \\<not> all_security_requirements_fulfilled (get_IFS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = V, edges = E\\<rparr> M\n                                     accu (a # edgesList))\n                         in \\<forall>e\\<in>E - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = {e} \\<union> stateful\\<rparr>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. let stateful =\n          set (filter_IFS_no_violations_accu\n                \\<lparr>nodes = V, edges = E\\<rparr> M accu (e # Es))\n    in \\<forall>e\\<in>E - stateful.\n          \\<not> all_security_requirements_fulfilled (get_IFS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state = {e} \\<union> stateful\\<rparr>)", "apply(simp add: Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (all_security_requirements_fulfilled (get_IFS M)\n      (stateful_policy_to_network_graph\n        \\<lparr>hosts = V, flows_fix = E,\n           flows_state = insert e (set accu)\\<rparr>) \\<longrightarrow>\n     (\\<forall>ea\\<in>E -\n                      set (filter_IFS_no_violations_accu\n                            \\<lparr>nodes = V, edges = E\\<rparr> M\n                            (e # accu) Es).\n         \\<not> all_security_requirements_fulfilled (get_IFS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        insert ea\n                         (set (filter_IFS_no_violations_accu\n                                \\<lparr>nodes = V, edges = E\\<rparr> M\n                                (e # accu) Es))\\<rparr>))) \\<and>\n    (\\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state =\n                    insert e (set accu)\\<rparr>) \\<longrightarrow>\n     (\\<forall>e\\<in>E -\n                     set (filter_IFS_no_violations_accu\n                           \\<lparr>nodes = V, edges = E\\<rparr> M accu Es).\n         \\<not> all_security_requirements_fulfilled (get_IFS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        insert e\n                         (set (filter_IFS_no_violations_accu\n                                \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                                Es))\\<rparr>)))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = insert e (set accu)\\<rparr>) \\<longrightarrow>\n    (\\<forall>ea\\<in>E -\n                     set (filter_IFS_no_violations_accu\n                           \\<lparr>nodes = V, edges = E\\<rparr> M (e # accu)\n                           Es).\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = V, flows_fix = E,\n                     flows_state =\n                       insert ea\n                        (set (filter_IFS_no_violations_accu\n                               \\<lparr>nodes = V, edges = E\\<rparr> M\n                               (e # accu) Es))\\<rparr>))\n 2. \\<not> all_security_requirements_fulfilled (get_IFS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state =\n                   insert e (set accu)\\<rparr>) \\<longrightarrow>\n    (\\<forall>e\\<in>E -\n                    set (filter_IFS_no_violations_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M accu Es).\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = V, flows_fix = E,\n                     flows_state =\n                       insert e\n                        (set (filter_IFS_no_violations_accu\n                               \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                               Es))\\<rparr>))", "apply(rule impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = insert e (set accu)\\<rparr>) \\<Longrightarrow>\n    \\<forall>ea\\<in>E -\n                    set (filter_IFS_no_violations_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M (e # accu)\n                          Es).\n       \\<not> all_security_requirements_fulfilled (get_IFS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state =\n                      insert ea\n                       (set (filter_IFS_no_violations_accu\n                              \\<lparr>nodes = V, edges = E\\<rparr> M\n                              (e # accu) Es))\\<rparr>)\n 2. \\<not> all_security_requirements_fulfilled (get_IFS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state =\n                   insert e (set accu)\\<rparr>) \\<longrightarrow>\n    (\\<forall>e\\<in>E -\n                    set (filter_IFS_no_violations_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M accu Es).\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = V, flows_fix = E,\n                     flows_state =\n                       insert e\n                        (set (filter_IFS_no_violations_accu\n                               \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                               Es))\\<rparr>))", "apply(thin_tac \"_\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>ea\\<in>E -\n                    set (filter_IFS_no_violations_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M (e # accu)\n                          Es).\n       \\<not> all_security_requirements_fulfilled (get_IFS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state =\n                      insert ea\n                       (set (filter_IFS_no_violations_accu\n                              \\<lparr>nodes = V, edges = E\\<rparr> M\n                              (e # accu) Es))\\<rparr>)\n 2. \\<not> all_security_requirements_fulfilled (get_IFS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state =\n                   insert e (set accu)\\<rparr>) \\<longrightarrow>\n    (\\<forall>e\\<in>E -\n                    set (filter_IFS_no_violations_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M accu Es).\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = V, flows_fix = E,\n                     flows_state =\n                       insert e\n                        (set (filter_IFS_no_violations_accu\n                               \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                               Es))\\<rparr>))", "(*dont't need it*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>ea\\<in>E -\n                    set (filter_IFS_no_violations_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M (e # accu)\n                          Es).\n       \\<not> all_security_requirements_fulfilled (get_IFS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state =\n                      insert ea\n                       (set (filter_IFS_no_violations_accu\n                              \\<lparr>nodes = V, edges = E\\<rparr> M\n                              (e # accu) Es))\\<rparr>)\n 2. \\<not> all_security_requirements_fulfilled (get_IFS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state =\n                   insert e (set accu)\\<rparr>) \\<longrightarrow>\n    (\\<forall>e\\<in>E -\n                    set (filter_IFS_no_violations_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M accu Es).\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = V, flows_fix = E,\n                     flows_state =\n                       insert e\n                        (set (filter_IFS_no_violations_accu\n                               \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                               Es))\\<rparr>))", "using Cons.IH[where accu=\"e # accu\", OF Cons.prems(1) Cons.prems(2) _ _ goalTrue, simplified Let_def] Cons.prems(3) Cons.prems(4)"], ["proof (prove)\nusing this:\n  \\<lbrakk>set (e # accu) \\<subseteq> E; set Es \\<subseteq> E\\<rbrakk>\n  \\<Longrightarrow> \\<forall>ea\\<in>E -\n                                    set (filter_IFS_no_violations_accu\n    \\<lparr>nodes = V, edges = E\\<rparr> M (e # accu) Es).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{ea} \\<union>\nset (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr> M\n      (e # accu) Es)\\<rparr>)\n  set accu \\<subseteq> E\n  set (e # Es) \\<subseteq> E\n\ngoal (2 subgoals):\n 1. \\<forall>ea\\<in>E -\n                    set (filter_IFS_no_violations_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M (e # accu)\n                          Es).\n       \\<not> all_security_requirements_fulfilled (get_IFS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state =\n                      insert ea\n                       (set (filter_IFS_no_violations_accu\n                              \\<lparr>nodes = V, edges = E\\<rparr> M\n                              (e # accu) Es))\\<rparr>)\n 2. \\<not> all_security_requirements_fulfilled (get_IFS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state =\n                   insert e (set accu)\\<rparr>) \\<longrightarrow>\n    (\\<forall>e\\<in>E -\n                    set (filter_IFS_no_violations_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M accu Es).\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = V, flows_fix = E,\n                     flows_state =\n                       insert e\n                        (set (filter_IFS_no_violations_accu\n                               \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                               Es))\\<rparr>))", "apply(auto) [1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> all_security_requirements_fulfilled (get_IFS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state =\n                   insert e (set accu)\\<rparr>) \\<longrightarrow>\n    (\\<forall>e\\<in>E -\n                    set (filter_IFS_no_violations_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M accu Es).\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = V, flows_fix = E,\n                     flows_state =\n                       insert e\n                        (set (filter_IFS_no_violations_accu\n                               \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                               Es))\\<rparr>))", "apply(rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> all_security_requirements_fulfilled (get_IFS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state =\n                   insert e (set accu)\\<rparr>) \\<Longrightarrow>\n    \\<forall>e\\<in>E -\n                   set (filter_IFS_no_violations_accu\n                         \\<lparr>nodes = V, edges = E\\<rparr> M accu Es).\n       \\<not> all_security_requirements_fulfilled (get_IFS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state =\n                      insert e\n                       (set (filter_IFS_no_violations_accu\n                              \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                              Es))\\<rparr>)", "using Cons.IH[where accu=\"accu\", OF Cons.prems(1) Cons.prems(2), simplified Let_def] Cons.prems(5) Cons.prems(3) Cons.prems(4)"], ["proof (prove)\nusing this:\n  \\<lbrakk>set accu \\<subseteq> E; set Es \\<subseteq> E;\n   \\<forall>e\\<in>E - (set accu \\<union> set Es).\n      \\<not> all_security_requirements_fulfilled (get_IFS M)\n              (stateful_policy_to_network_graph\n                \\<lparr>hosts = V, flows_fix = E,\n                   flows_state = {e} \\<union> set accu\\<rparr>)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>e\\<in>E -\n                                   set (filter_IFS_no_violations_accu\n   \\<lparr>nodes = V, edges = E\\<rparr> M accu Es).\n                       \\<not> all_security_requirements_fulfilled\n                               (get_IFS M)\n                               (stateful_policy_to_network_graph\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\n{e} \\<union>\nset (filter_IFS_no_violations_accu \\<lparr>nodes = V, edges = E\\<rparr> M\n      accu Es)\\<rparr>)\n  \\<forall>e\\<in>E - (set accu \\<union> set (e # Es)).\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = {e} \\<union> set accu\\<rparr>)\n  set accu \\<subseteq> E\n  set (e # Es) \\<subseteq> E\n\ngoal (1 subgoal):\n 1. \\<not> all_security_requirements_fulfilled (get_IFS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state =\n                   insert e (set accu)\\<rparr>) \\<Longrightarrow>\n    \\<forall>e\\<in>E -\n                   set (filter_IFS_no_violations_accu\n                         \\<lparr>nodes = V, edges = E\\<rparr> M accu Es).\n       \\<not> all_security_requirements_fulfilled (get_IFS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state =\n                      insert e\n                       (set (filter_IFS_no_violations_accu\n                              \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                              Es))\\<rparr>)", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  let stateful =\n        set (filter_IFS_no_violations_accu\n              \\<lparr>nodes = V, edges = E\\<rparr> M accu (e # Es))\n  in \\<forall>e\\<in>E - stateful.\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = V, flows_fix = E,\n                     flows_state = {e} \\<union> stateful\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filter_IFS_no_violations_maximal: \"\\<lbrakk>valid_reqs (get_IFS M); wf_graph G;\n            (set edgesList) = edges G \\<rbrakk> \\<Longrightarrow> \n            let stateful = set (filter_IFS_no_violations G M edgesList) in \n            \\<forall> e \\<in> edges G - stateful.\n              \\<not> all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr> hosts = nodes G, flows_fix = edges G, flows_state = {e} \\<union> stateful \\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_reqs (get_IFS M); wf_graph G;\n     set edgesList = edges G\\<rbrakk>\n    \\<Longrightarrow> let stateful =\n                            set (filter_IFS_no_violations G M edgesList)\n                      in \\<forall>e\\<in>edges G - stateful.\n                            \\<not> all_security_requirements_fulfilled\n                                    (get_IFS M)\n                                    (stateful_policy_to_network_graph\n\\<lparr>hosts = nodes G, flows_fix = edges G,\n   flows_state = {e} \\<union> stateful\\<rparr>)", "unfolding filter_IFS_no_violations_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_reqs (get_IFS M); wf_graph G;\n     set edgesList = edges G\\<rbrakk>\n    \\<Longrightarrow> let stateful =\n                            set (filter_IFS_no_violations_accu G M []\n                                  edgesList)\n                      in \\<forall>e\\<in>edges G - stateful.\n                            \\<not> all_security_requirements_fulfilled\n                                    (get_IFS M)\n                                    (stateful_policy_to_network_graph\n\\<lparr>hosts = nodes G, flows_fix = edges G,\n   flows_state = {e} \\<union> stateful\\<rparr>)", "apply(case_tac G, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nodes edges.\n       \\<lbrakk>valid_reqs (get_IFS M);\n        wf_graph \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        set edgesList = edges;\n        G = \\<lparr>nodes = nodes, edges = edges\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = nodes,\n  edges = edges\\<rparr>\n                                     M [] edgesList)\n                         in \\<forall>e\\<in>edges - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = nodes, flows_fix = edges,\n      flows_state = insert e stateful\\<rparr>)", "apply(drule(1) filter_IFS_no_violations_accu_maximal_induction[where accu=\"[]\" and edgesList=\"edgesList\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>nodes edges.\n       \\<lbrakk>wf_graph \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        set edgesList = edges;\n        G = \\<lparr>nodes = nodes, edges = edges\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> set [] \\<subseteq> edges\n 2. \\<And>nodes edges.\n       \\<lbrakk>wf_graph \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        set edgesList = edges;\n        G = \\<lparr>nodes = nodes, edges = edges\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> set edgesList \\<subseteq> edges\n 3. \\<And>nodes edges.\n       \\<lbrakk>wf_graph \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        set edgesList = edges;\n        G = \\<lparr>nodes = nodes, edges = edges\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e\\<in>edges -\n  (set [] \\<union> set edgesList).\n                            \\<not> all_security_requirements_fulfilled\n                                    (get_IFS M)\n                                    (stateful_policy_to_network_graph\n\\<lparr>hosts = nodes, flows_fix = edges,\n   flows_state = {e} \\<union> set []\\<rparr>)\n 4. \\<And>nodes edges.\n       \\<lbrakk>wf_graph \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        set edgesList = edges;\n        G = \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        let stateful =\n              set (filter_IFS_no_violations_accu\n                    \\<lparr>nodes = nodes, edges = edges\\<rparr> M []\n                    edgesList)\n        in \\<forall>e\\<in>edges - stateful.\n              \\<not> all_security_requirements_fulfilled (get_IFS M)\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = nodes, flows_fix = edges,\n                           flows_state =\n                             {e} \\<union> stateful\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> let stateful =\n                               set (filter_IFS_no_violations_accu\n                                     \\<lparr>nodes = nodes,\n  edges = edges\\<rparr>\n                                     M [] edgesList)\n                         in \\<forall>e\\<in>edges - stateful.\n                               \\<not> all_security_requirements_fulfilled\n (get_IFS M)\n (stateful_policy_to_network_graph\n   \\<lparr>hosts = nodes, flows_fix = edges,\n      flows_state = insert e stateful\\<rparr>)", "by(simp_all)\n\n    \\<comment> \\<open>It is not only maximal for single flows but all non-empty subsets\\<close>"], ["", "corollary filter_IFS_no_violations_maximal_allsubsets: \n    assumes a1: \"valid_reqs (get_IFS M)\"\n    and     a2: \"wf_graph G\"\n    and     a4: \"(set edgesList) = edges G\"\n    shows   \"let stateful = set (filter_IFS_no_violations G M edgesList) in \n            \\<forall> E \\<subseteq> edges G - stateful. E \\<noteq> {} \\<longrightarrow>\n              \\<not> all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr> hosts = nodes G, flows_fix = edges G, flows_state = E \\<union> stateful \\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. let stateful = set (filter_IFS_no_violations G M edgesList)\n    in \\<forall>E\\<subseteq>edges G - stateful.\n          E \\<noteq> {} \\<longrightarrow>\n          \\<not> all_security_requirements_fulfilled (get_IFS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = nodes G, flows_fix = edges G,\n                       flows_state = E \\<union> stateful\\<rparr>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. let stateful = set (filter_IFS_no_violations G M edgesList)\n    in \\<forall>E\\<subseteq>edges G - stateful.\n          E \\<noteq> {} \\<longrightarrow>\n          \\<not> all_security_requirements_fulfilled (get_IFS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = nodes G, flows_fix = edges G,\n                       flows_state = E \\<union> stateful\\<rparr>)", "let ?stateful = \"set (filter_IFS_no_violations G M edgesList)\""], ["proof (state)\ngoal (1 subgoal):\n 1. let stateful = set (filter_IFS_no_violations G M edgesList)\n    in \\<forall>E\\<subseteq>edges G - stateful.\n          E \\<noteq> {} \\<longrightarrow>\n          \\<not> all_security_requirements_fulfilled (get_IFS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = nodes G, flows_fix = edges G,\n                       flows_state = E \\<union> stateful\\<rparr>)", "from filter_IFS_no_violations_maximal[OF a1 a2 a4]"], ["proof (chain)\npicking this:\n  let stateful = set (filter_IFS_no_violations G M edgesList)\n  in \\<forall>e\\<in>edges G - stateful.\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = nodes G, flows_fix = edges G,\n                     flows_state = {e} \\<union> stateful\\<rparr>)", "have not_fulfilled_single: \n        \"\\<forall>e\\<in>edges G - ?stateful. \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph \\<lparr>hosts = nodes G, flows_fix = edges G, flows_state = {e} \\<union> ?stateful\\<rparr>)\""], ["proof (prove)\nusing this:\n  let stateful = set (filter_IFS_no_violations G M edgesList)\n  in \\<forall>e\\<in>edges G - stateful.\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = nodes G, flows_fix = edges G,\n                     flows_state = {e} \\<union> stateful\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>edges G - set (filter_IFS_no_violations G M edgesList).\n       \\<not> all_security_requirements_fulfilled (get_IFS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = nodes G, flows_fix = edges G,\n                    flows_state =\n                      {e} \\<union>\n                      set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "by(simp add: Let_def)"], ["proof (state)\nthis:\n  \\<forall>e\\<in>edges G - set (filter_IFS_no_violations G M edgesList).\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = nodes G, flows_fix = edges G,\n                  flows_state =\n                    {e} \\<union>\n                    set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n\ngoal (1 subgoal):\n 1. let stateful = set (filter_IFS_no_violations G M edgesList)\n    in \\<forall>E\\<subseteq>edges G - stateful.\n          E \\<noteq> {} \\<longrightarrow>\n          \\<not> all_security_requirements_fulfilled (get_IFS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = nodes G, flows_fix = edges G,\n                       flows_state = E \\<union> stateful\\<rparr>)", "have neg_mono:\n        \"\\<And> e E. e \\<in> E \\<Longrightarrow> E \\<subseteq> edges G - ?stateful \\<Longrightarrow> E \\<noteq> {} \\<Longrightarrow>\n          \\<not> all_security_requirements_fulfilled (get_IFS M) \n              (stateful_policy_to_network_graph \\<lparr>hosts = nodes G, flows_fix = edges G, flows_state = {e} \\<union> ?stateful\\<rparr>) \\<Longrightarrow> \n          \\<not> all_security_requirements_fulfilled (get_IFS M) \n              (stateful_policy_to_network_graph \\<lparr>hosts = nodes G, flows_fix = edges G, flows_state = E \\<union> ?stateful\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e E.\n       \\<lbrakk>e \\<in> E;\n        E \\<subseteq> edges G -\n                      set (filter_IFS_no_violations G M edgesList);\n        E \\<noteq> {};\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = nodes G, flows_fix = edges G,\n                     flows_state =\n                       {e} \\<union>\n                       set (filter_IFS_no_violations G M\n                             edgesList)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = nodes G,\nflows_fix = edges G,\nflows_state =\n  E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e E.\n       \\<lbrakk>e \\<in> E;\n        E \\<subseteq> edges G -\n                      set (filter_IFS_no_violations G M edgesList);\n        E \\<noteq> {};\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = nodes G, flows_fix = edges G,\n                     flows_state =\n                       {e} \\<union>\n                       set (filter_IFS_no_violations G M\n                             edgesList)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = nodes G,\nflows_fix = edges G,\nflows_state =\n  E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "fix e E"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e E.\n       \\<lbrakk>e \\<in> E;\n        E \\<subseteq> edges G -\n                      set (filter_IFS_no_violations G M edgesList);\n        E \\<noteq> {};\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = nodes G, flows_fix = edges G,\n                     flows_state =\n                       {e} \\<union>\n                       set (filter_IFS_no_violations G M\n                             edgesList)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = nodes G,\nflows_fix = edges G,\nflows_state =\n  E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "assume h1: \"e \\<in> E\"\n          and    h2: \"E \\<subseteq> edges G - ?stateful\"\n          and    h3: \"E \\<noteq> {}\"\n          and    h4: \"\\<not> all_security_requirements_fulfilled (get_IFS M) \n            (stateful_policy_to_network_graph \\<lparr>hosts = nodes G, flows_fix = edges G, flows_state = {e} \\<union> ?stateful\\<rparr>)\""], ["proof (state)\nthis:\n  e \\<in> E\n  E \\<subseteq> edges G - set (filter_IFS_no_violations G M edgesList)\n  E \\<noteq> {}\n  \\<not> all_security_requirements_fulfilled (get_IFS M)\n          (stateful_policy_to_network_graph\n            \\<lparr>hosts = nodes G, flows_fix = edges G,\n               flows_state =\n                 {e} \\<union>\n                 set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>e E.\n       \\<lbrakk>e \\<in> E;\n        E \\<subseteq> edges G -\n                      set (filter_IFS_no_violations G M edgesList);\n        E \\<noteq> {};\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = nodes G, flows_fix = edges G,\n                     flows_state =\n                       {e} \\<union>\n                       set (filter_IFS_no_violations G M\n                             edgesList)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = nodes G,\nflows_fix = edges G,\nflows_state =\n  E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "from filter_IFS_no_violations_subseteq_input a4"], ["proof (chain)\npicking this:\n  set (filter_IFS_no_violations ?G ?M ?Es) \\<subseteq> set ?Es\n  set edgesList = edges G", "have \"?stateful \\<subseteq> edges G\""], ["proof (prove)\nusing this:\n  set (filter_IFS_no_violations ?G ?M ?Es) \\<subseteq> set ?Es\n  set edgesList = edges G\n\ngoal (1 subgoal):\n 1. set (filter_IFS_no_violations G M edgesList) \\<subseteq> edges G", "by blast"], ["proof (state)\nthis:\n  set (filter_IFS_no_violations G M edgesList) \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. \\<And>e E.\n       \\<lbrakk>e \\<in> E;\n        E \\<subseteq> edges G -\n                      set (filter_IFS_no_violations G M edgesList);\n        E \\<noteq> {};\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = nodes G, flows_fix = edges G,\n                     flows_state =\n                       {e} \\<union>\n                       set (filter_IFS_no_violations G M\n                             edgesList)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = nodes G,\nflows_fix = edges G,\nflows_state =\n  E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "hence \"edges G \\<union> (E \\<union> ?stateful) = edges G\""], ["proof (prove)\nusing this:\n  set (filter_IFS_no_violations G M edgesList) \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. edges G \\<union>\n    (E \\<union> set (filter_IFS_no_violations G M edgesList)) =\n    edges G", "using h2"], ["proof (prove)\nusing this:\n  set (filter_IFS_no_violations G M edgesList) \\<subseteq> edges G\n  E \\<subseteq> edges G - set (filter_IFS_no_violations G M edgesList)\n\ngoal (1 subgoal):\n 1. edges G \\<union>\n    (E \\<union> set (filter_IFS_no_violations G M edgesList)) =\n    edges G", "by blast"], ["proof (state)\nthis:\n  edges G \\<union>\n  (E \\<union> set (filter_IFS_no_violations G M edgesList)) =\n  edges G\n\ngoal (1 subgoal):\n 1. \\<And>e E.\n       \\<lbrakk>e \\<in> E;\n        E \\<subseteq> edges G -\n                      set (filter_IFS_no_violations G M edgesList);\n        E \\<noteq> {};\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = nodes G, flows_fix = edges G,\n                     flows_state =\n                       {e} \\<union>\n                       set (filter_IFS_no_violations G M\n                             edgesList)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = nodes G,\nflows_fix = edges G,\nflows_state =\n  E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "from a2 this"], ["proof (chain)\npicking this:\n  wf_graph G\n  edges G \\<union>\n  (E \\<union> set (filter_IFS_no_violations G M edgesList)) =\n  edges G", "have validgraph1: \"wf_graph \\<lparr>nodes = nodes G, edges = edges G \\<union> (E \\<union> ?stateful)\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph G\n  edges G \\<union>\n  (E \\<union> set (filter_IFS_no_violations G M edgesList)) =\n  edges G\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = nodes G,\n        edges =\n          edges G \\<union>\n          (E \\<union> set (filter_IFS_no_violations G M edgesList))\\<rparr>", "by(case_tac G, simp)"], ["proof (state)\nthis:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges =\n        edges G \\<union>\n        (E \\<union> set (filter_IFS_no_violations G M edgesList))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>e E.\n       \\<lbrakk>e \\<in> E;\n        E \\<subseteq> edges G -\n                      set (filter_IFS_no_violations G M edgesList);\n        E \\<noteq> {};\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = nodes G, flows_fix = edges G,\n                     flows_state =\n                       {e} \\<union>\n                       set (filter_IFS_no_violations G M\n                             edgesList)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = nodes G,\nflows_fix = edges G,\nflows_state =\n  E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "from h1 h2 h3"], ["proof (chain)\npicking this:\n  e \\<in> E\n  E \\<subseteq> edges G - set (filter_IFS_no_violations G M edgesList)\n  E \\<noteq> {}", "have subseteq: \"({e} \\<union> ?stateful) \\<subseteq> (E \\<union> ?stateful)\""], ["proof (prove)\nusing this:\n  e \\<in> E\n  E \\<subseteq> edges G - set (filter_IFS_no_violations G M edgesList)\n  E \\<noteq> {}\n\ngoal (1 subgoal):\n 1. {e} \\<union> set (filter_IFS_no_violations G M edgesList)\n    \\<subseteq> E \\<union> set (filter_IFS_no_violations G M edgesList)", "by blast"], ["proof (state)\nthis:\n  {e} \\<union> set (filter_IFS_no_violations G M edgesList)\n  \\<subseteq> E \\<union> set (filter_IFS_no_violations G M edgesList)\n\ngoal (1 subgoal):\n 1. \\<And>e E.\n       \\<lbrakk>e \\<in> E;\n        E \\<subseteq> edges G -\n                      set (filter_IFS_no_violations G M edgesList);\n        E \\<noteq> {};\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = nodes G, flows_fix = edges G,\n                     flows_state =\n                       {e} \\<union>\n                       set (filter_IFS_no_violations G M\n                             edgesList)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = nodes G,\nflows_fix = edges G,\nflows_state =\n  E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "have revimp: \"\\<And>A B. (A \\<Longrightarrow> B) \\<Longrightarrow> (\\<not> B \\<Longrightarrow> \\<not> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>A \\<Longrightarrow> B; \\<not> B\\<rbrakk>\n       \\<Longrightarrow> \\<not> A", "by fast"], ["proof (state)\nthis:\n  \\<lbrakk>?A \\<Longrightarrow> ?B; \\<not> ?B\\<rbrakk>\n  \\<Longrightarrow> \\<not> ?A\n\ngoal (1 subgoal):\n 1. \\<And>e E.\n       \\<lbrakk>e \\<in> E;\n        E \\<subseteq> edges G -\n                      set (filter_IFS_no_violations G M edgesList);\n        E \\<noteq> {};\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = nodes G, flows_fix = edges G,\n                     flows_state =\n                       {e} \\<union>\n                       set (filter_IFS_no_violations G M\n                             edgesList)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = nodes G,\nflows_fix = edges G,\nflows_state =\n  E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "from all_security_requirements_fulfilled_mono_stateful_policy_to_network_graph[OF a1 subseteq validgraph1] h4"], ["proof (chain)\npicking this:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = nodes G, flows_fix = edges G,\n        flows_state =\n          E \\<union>\n          set (filter_IFS_no_violations G M\n                edgesList)\\<rparr>) \\<Longrightarrow>\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = nodes G, flows_fix = edges G,\n        flows_state =\n          {e} \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n  \\<not> all_security_requirements_fulfilled (get_IFS M)\n          (stateful_policy_to_network_graph\n            \\<lparr>hosts = nodes G, flows_fix = edges G,\n               flows_state =\n                 {e} \\<union>\n                 set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "show \"\\<not> all_security_requirements_fulfilled (get_IFS M) \n            (stateful_policy_to_network_graph \\<lparr>hosts = nodes G, flows_fix = edges G, flows_state = E \\<union> ?stateful\\<rparr>)\""], ["proof (prove)\nusing this:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = nodes G, flows_fix = edges G,\n        flows_state =\n          E \\<union>\n          set (filter_IFS_no_violations G M\n                edgesList)\\<rparr>) \\<Longrightarrow>\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = nodes G, flows_fix = edges G,\n        flows_state =\n          {e} \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n  \\<not> all_security_requirements_fulfilled (get_IFS M)\n          (stateful_policy_to_network_graph\n            \\<lparr>hosts = nodes G, flows_fix = edges G,\n               flows_state =\n                 {e} \\<union>\n                 set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<not> all_security_requirements_fulfilled (get_IFS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = nodes G, flows_fix = edges G,\n                 flows_state =\n                   E \\<union>\n                   set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "apply(rule revimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = nodes G, flows_fix = edges G,\n          flows_state =\n            E \\<union>\n            set (filter_IFS_no_violations G M\n                  edgesList)\\<rparr>) \\<Longrightarrow>\n    all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = nodes G, flows_fix = edges G,\n          flows_state =\n            E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "by assumption"], ["proof (state)\nthis:\n  \\<not> all_security_requirements_fulfilled (get_IFS M)\n          (stateful_policy_to_network_graph\n            \\<lparr>hosts = nodes G, flows_fix = edges G,\n               flows_state =\n                 E \\<union>\n                 set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?e \\<in> ?E;\n   ?E \\<subseteq> edges G - set (filter_IFS_no_violations G M edgesList);\n   ?E \\<noteq> {};\n   \\<not> all_security_requirements_fulfilled (get_IFS M)\n           (stateful_policy_to_network_graph\n             \\<lparr>hosts = nodes G, flows_fix = edges G,\n                flows_state =\n                  {?e} \\<union>\n                  set (filter_IFS_no_violations G M\n                        edgesList)\\<rparr>)\\<rbrakk>\n  \\<Longrightarrow> \\<not> all_security_requirements_fulfilled (get_IFS M)\n                            (stateful_policy_to_network_graph\n                              \\<lparr>hosts = nodes G, flows_fix = edges G,\n                                 flows_state =\n                                   ?E \\<union>\n                                   set (filter_IFS_no_violations G M\n   edgesList)\\<rparr>)\n\ngoal (1 subgoal):\n 1. let stateful = set (filter_IFS_no_violations G M edgesList)\n    in \\<forall>E\\<subseteq>edges G - stateful.\n          E \\<noteq> {} \\<longrightarrow>\n          \\<not> all_security_requirements_fulfilled (get_IFS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = nodes G, flows_fix = edges G,\n                       flows_state = E \\<union> stateful\\<rparr>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. let stateful = set (filter_IFS_no_violations G M edgesList)\n    in \\<forall>E\\<subseteq>edges G - stateful.\n          E \\<noteq> {} \\<longrightarrow>\n          \\<not> all_security_requirements_fulfilled (get_IFS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = nodes G, flows_fix = edges G,\n                       flows_state = E \\<union> stateful\\<rparr>)", "proof(simp add: Let_def,rule allI,rule impI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E.\n       \\<lbrakk>E \\<subseteq> edges G -\n                              set (filter_IFS_no_violations G M edgesList);\n        E \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = nodes G,\nflows_fix = edges G,\nflows_state =\n  E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "fix E"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>E.\n       \\<lbrakk>E \\<subseteq> edges G -\n                              set (filter_IFS_no_violations G M edgesList);\n        E \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = nodes G,\nflows_fix = edges G,\nflows_state =\n  E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "assume h1: \"E \\<subseteq> edges G - ?stateful\"\n        and    h2: \"E \\<noteq> {}\""], ["proof (state)\nthis:\n  E \\<subseteq> edges G - set (filter_IFS_no_violations G M edgesList)\n  E \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>E.\n       \\<lbrakk>E \\<subseteq> edges G -\n                              set (filter_IFS_no_violations G M edgesList);\n        E \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = nodes G,\nflows_fix = edges G,\nflows_state =\n  E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "from  h1 h2"], ["proof (chain)\npicking this:\n  E \\<subseteq> edges G - set (filter_IFS_no_violations G M edgesList)\n  E \\<noteq> {}", "obtain e where e_prop1: \"e \\<in> E\""], ["proof (prove)\nusing this:\n  E \\<subseteq> edges G - set (filter_IFS_no_violations G M edgesList)\n  E \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>e. e \\<in> E \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  e \\<in> E\n\ngoal (1 subgoal):\n 1. \\<And>E.\n       \\<lbrakk>E \\<subseteq> edges G -\n                              set (filter_IFS_no_violations G M edgesList);\n        E \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = nodes G,\nflows_fix = edges G,\nflows_state =\n  E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "from this h1"], ["proof (chain)\npicking this:\n  e \\<in> E\n  E \\<subseteq> edges G - set (filter_IFS_no_violations G M edgesList)", "have \"e \\<in> edges G - ?stateful\""], ["proof (prove)\nusing this:\n  e \\<in> E\n  E \\<subseteq> edges G - set (filter_IFS_no_violations G M edgesList)\n\ngoal (1 subgoal):\n 1. e \\<in> edges G - set (filter_IFS_no_violations G M edgesList)", "by blast"], ["proof (state)\nthis:\n  e \\<in> edges G - set (filter_IFS_no_violations G M edgesList)\n\ngoal (1 subgoal):\n 1. \\<And>E.\n       \\<lbrakk>E \\<subseteq> edges G -\n                              set (filter_IFS_no_violations G M edgesList);\n        E \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = nodes G,\nflows_fix = edges G,\nflows_state =\n  E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "from this not_fulfilled_single"], ["proof (chain)\npicking this:\n  e \\<in> edges G - set (filter_IFS_no_violations G M edgesList)\n  \\<forall>e\\<in>edges G - set (filter_IFS_no_violations G M edgesList).\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = nodes G, flows_fix = edges G,\n                  flows_state =\n                    {e} \\<union>\n                    set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "have e_prop2: \"\\<not> all_security_requirements_fulfilled (get_IFS M)\n          (stateful_policy_to_network_graph \\<lparr>hosts = nodes G, flows_fix = edges G, flows_state = {e} \\<union> ?stateful\\<rparr>)\""], ["proof (prove)\nusing this:\n  e \\<in> edges G - set (filter_IFS_no_violations G M edgesList)\n  \\<forall>e\\<in>edges G - set (filter_IFS_no_violations G M edgesList).\n     \\<not> all_security_requirements_fulfilled (get_IFS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = nodes G, flows_fix = edges G,\n                  flows_state =\n                    {e} \\<union>\n                    set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<not> all_security_requirements_fulfilled (get_IFS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = nodes G, flows_fix = edges G,\n                 flows_state =\n                   {e} \\<union>\n                   set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "by simp"], ["proof (state)\nthis:\n  \\<not> all_security_requirements_fulfilled (get_IFS M)\n          (stateful_policy_to_network_graph\n            \\<lparr>hosts = nodes G, flows_fix = edges G,\n               flows_state =\n                 {e} \\<union>\n                 set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>E.\n       \\<lbrakk>E \\<subseteq> edges G -\n                              set (filter_IFS_no_violations G M edgesList);\n        E \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<not> all_security_requirements_fulfilled\n                                 (get_IFS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = nodes G,\nflows_fix = edges G,\nflows_state =\n  E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "from neg_mono[OF e_prop1 h1 h2 e_prop2]"], ["proof (chain)\npicking this:\n  \\<not> all_security_requirements_fulfilled (get_IFS M)\n          (stateful_policy_to_network_graph\n            \\<lparr>hosts = nodes G, flows_fix = edges G,\n               flows_state =\n                 E \\<union>\n                 set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "show \" \\<not> all_security_requirements_fulfilled (get_IFS M)\n               (stateful_policy_to_network_graph \\<lparr>hosts = nodes G, flows_fix = edges G, flows_state = E \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<not> all_security_requirements_fulfilled (get_IFS M)\n          (stateful_policy_to_network_graph\n            \\<lparr>hosts = nodes G, flows_fix = edges G,\n               flows_state =\n                 E \\<union>\n                 set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<not> all_security_requirements_fulfilled (get_IFS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = nodes G, flows_fix = edges G,\n                 flows_state =\n                   E \\<union>\n                   set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "."], ["proof (state)\nthis:\n  \\<not> all_security_requirements_fulfilled (get_IFS M)\n          (stateful_policy_to_network_graph\n            \\<lparr>hosts = nodes G, flows_fix = edges G,\n               flows_state =\n                 E \\<union>\n                 set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  let stateful = set (filter_IFS_no_violations G M edgesList)\n  in \\<forall>E\\<subseteq>edges G - stateful.\n        E \\<noteq> {} \\<longrightarrow>\n        \\<not> all_security_requirements_fulfilled (get_IFS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = nodes G, flows_fix = edges G,\n                     flows_state = E \\<union> stateful\\<rparr>)\n\ngoal:\nNo subgoals!", "qed\n    \n    \\<comment> \\<open>soundness and completeness\\<close>"], ["", "thm filter_IFS_no_violations_correct filter_IFS_no_violations_maximal"], ["", "text\\<open>Next\\<close>"], ["", "(*\"\\<forall>F \\<in> get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<T> ). F \\<subseteq> backflows (filternew_flows_state \\<T>)\"*)\n    (*first in list are more likely to be kept*)"], ["", "fun filter_compliant_stateful_ACS_accu :: \"'v::vertex graph \\<Rightarrow> 'v SecurityInvariant_configured list \\<Rightarrow> ('v \\<times> 'v) list \\<Rightarrow> ('v \\<times> 'v) list \\<Rightarrow> ('v \\<times> 'v) list\" where\n      \"filter_compliant_stateful_ACS_accu G M accu [] = accu\" |\n      \"filter_compliant_stateful_ACS_accu G M accu (e#Es) = (if\n        e \\<notin> backflows (edges G) \\<and> (\\<forall>F \\<in> get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr> hosts = nodes G, flows_fix = edges G, flows_state = set (e#accu) \\<rparr>). F \\<subseteq> backflows (set (e#accu)))\n        then filter_compliant_stateful_ACS_accu G M (e#accu) Es\n        else filter_compliant_stateful_ACS_accu G M accu Es)\""], ["", "definition filter_compliant_stateful_ACS :: \"'v::vertex graph \\<Rightarrow> 'v SecurityInvariant_configured list \\<Rightarrow> ('v \\<times> 'v) list \\<Rightarrow> ('v \\<times> 'v) list\" where\n      \"filter_compliant_stateful_ACS G M Es = filter_compliant_stateful_ACS_accu G M [] Es\""], ["", "lemma filter_compliant_stateful_ACS_subseteq_input: \"set (filter_compliant_stateful_ACS G M Es) \\<subseteq> set Es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (filter_compliant_stateful_ACS G M Es) \\<subseteq> set Es", "apply(subgoal_tac \"\\<forall> accu. set (filter_compliant_stateful_ACS_accu G M accu Es) \\<subseteq> set Es \\<union> set accu\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>accu.\n       set (filter_compliant_stateful_ACS_accu G M accu Es)\n       \\<subseteq> set Es \\<union> set accu \\<Longrightarrow>\n    set (filter_compliant_stateful_ACS G M Es) \\<subseteq> set Es\n 2. \\<forall>accu.\n       set (filter_compliant_stateful_ACS_accu G M accu Es)\n       \\<subseteq> set Es \\<union> set accu", "apply(erule_tac x=\"[]\" in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. set (filter_compliant_stateful_ACS_accu G M [] Es)\n    \\<subseteq> set Es \\<union> set [] \\<Longrightarrow>\n    set (filter_compliant_stateful_ACS G M Es) \\<subseteq> set Es\n 2. \\<forall>accu.\n       set (filter_compliant_stateful_ACS_accu G M accu Es)\n       \\<subseteq> set Es \\<union> set accu", "apply(simp add: filter_compliant_stateful_ACS_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>accu.\n       set (filter_compliant_stateful_ACS_accu G M accu Es)\n       \\<subseteq> set Es \\<union> set accu", "apply(induct_tac Es)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>accu.\n       set (filter_compliant_stateful_ACS_accu G M accu [])\n       \\<subseteq> set [] \\<union> set accu\n 2. \\<And>a list.\n       \\<forall>accu.\n          set (filter_compliant_stateful_ACS_accu G M accu list)\n          \\<subseteq> set list \\<union> set accu \\<Longrightarrow>\n       \\<forall>accu.\n          set (filter_compliant_stateful_ACS_accu G M accu (a # list))\n          \\<subseteq> set (a # list) \\<union> set accu", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<forall>accu.\n          set (filter_compliant_stateful_ACS_accu G M accu list)\n          \\<subseteq> set list \\<union> set accu \\<Longrightarrow>\n       \\<forall>accu.\n          (a \\<notin> backflows (edges G) \\<and>\n           (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                            (stateful_policy_to_network_graph\n                              \\<lparr>hosts = nodes G, flows_fix = edges G,\n                                 flows_state = insert a (set accu)\\<rparr>).\n               F \\<subseteq> backflows\n                              (insert a (set accu))) \\<longrightarrow>\n           set (filter_compliant_stateful_ACS_accu G M (a # accu) list)\n           \\<subseteq> insert a (set list \\<union> set accu)) \\<and>\n          (a \\<in> backflows (edges G) \\<longrightarrow>\n           set (filter_compliant_stateful_ACS_accu G M accu list)\n           \\<subseteq> insert a (set list \\<union> set accu)) \\<and>\n          ((\\<exists>F\\<in>get_offending_flows (get_ACS M)\n                            (stateful_policy_to_network_graph\n                              \\<lparr>hosts = nodes G, flows_fix = edges G,\n                                 flows_state = insert a (set accu)\\<rparr>).\n               \\<not> F \\<subseteq> backflows\n                                     (insert a\n (set accu))) \\<longrightarrow>\n           set (filter_compliant_stateful_ACS_accu G M accu list)\n           \\<subseteq> insert a (set list \\<union> set accu))", "apply (metis Un_insert_right set_simps(2) set_subset_Cons set_union subset_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma filter_compliant_stateful_ACS_accu_correct_induction: \"valid_reqs (get_ACS M) \\<Longrightarrow> wf_graph \\<lparr> nodes = V, edges = E \\<rparr> \\<Longrightarrow>\n            (set accu) \\<union> (set edgesList) \\<subseteq> E \\<Longrightarrow> \n            \\<forall>F \\<in> get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = set (accu) \\<rparr>). F \\<subseteq> backflows (set accu) \\<Longrightarrow> \n            (\\<forall>a \\<in> set accu. a \\<notin> (backflows E)) \\<Longrightarrow>\n            \\<T> = \\<lparr> hosts = V, flows_fix = E, flows_state = set (filter_compliant_stateful_ACS_accu \\<lparr> nodes = V, edges = E \\<rparr> M accu edgesList) \\<rparr> \\<Longrightarrow>\n            \\<forall>F \\<in> get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<T>). F \\<subseteq> backflows (filternew_flows_state \\<T>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_reqs (get_ACS M);\n     wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     set accu \\<union> set edgesList \\<subseteq> E;\n     \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set accu\\<rparr>).\n        F \\<subseteq> backflows (set accu);\n     \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n     \\<T> =\n     \\<lparr>hosts = V, flows_fix = E,\n        flows_state =\n          set (filter_compliant_stateful_ACS_accu\n                \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                edgesList)\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n(stateful_policy_to_network_graph \\<T>).\n                         F \\<subseteq> backflows\n  (filternew_flows_state \\<T>)", "proof(induction edgesList arbitrary: accu)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>accu.\n       \\<lbrakk>valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<union> set [] \\<subseteq> E;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        (stateful_policy_to_network_graph\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = set accu\\<rparr>).\n           F \\<subseteq> backflows (set accu);\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        \\<T> =\n        \\<lparr>hosts = V, flows_fix = E,\n           flows_state =\n             set (filter_compliant_stateful_ACS_accu\n                   \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                   [])\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   (stateful_policy_to_network_graph \\<T>).\n                            F \\<subseteq> backflows\n     (filternew_flows_state \\<T>)\n 2. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_ACS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<union> set edgesList \\<subseteq> E;\n                    \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                                    (stateful_policy_to_network_graph\n\\<lparr>hosts = V, flows_fix = E, flows_state = set accu\\<rparr>).\n                       F \\<subseteq> backflows (set accu);\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n                    \\<T> =\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state =\n                         set (filter_compliant_stateful_ACS_accu\n                               \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                               edgesList)\\<rparr>\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>F\n        \\<in>get_offending_flows (get_ACS M)\n              (stateful_policy_to_network_graph \\<T>).\n  F \\<subseteq> backflows (filternew_flows_state \\<T>);\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<union> set (a # edgesList) \\<subseteq> E;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        (stateful_policy_to_network_graph\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = set accu\\<rparr>).\n           F \\<subseteq> backflows (set accu);\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        \\<T> =\n        \\<lparr>hosts = V, flows_fix = E,\n           flows_state =\n             set (filter_compliant_stateful_ACS_accu\n                   \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                   (a # edgesList))\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   (stateful_policy_to_network_graph \\<T>).\n                            F \\<subseteq> backflows\n     (filternew_flows_state \\<T>)", "case Nil"], ["proof (state)\nthis:\n  valid_reqs (get_ACS M)\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  set accu \\<union> set [] \\<subseteq> E\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state = set accu\\<rparr>).\n     F \\<subseteq> backflows (set accu)\n  \\<forall>a\\<in>set accu. a \\<notin> backflows E\n  \\<T> =\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state =\n       set (filter_compliant_stateful_ACS_accu\n             \\<lparr>nodes = V, edges = E\\<rparr> M accu [])\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>accu.\n       \\<lbrakk>valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<union> set [] \\<subseteq> E;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        (stateful_policy_to_network_graph\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = set accu\\<rparr>).\n           F \\<subseteq> backflows (set accu);\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        \\<T> =\n        \\<lparr>hosts = V, flows_fix = E,\n           flows_state =\n             set (filter_compliant_stateful_ACS_accu\n                   \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                   [])\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   (stateful_policy_to_network_graph \\<T>).\n                            F \\<subseteq> backflows\n     (filternew_flows_state \\<T>)\n 2. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_ACS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<union> set edgesList \\<subseteq> E;\n                    \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                                    (stateful_policy_to_network_graph\n\\<lparr>hosts = V, flows_fix = E, flows_state = set accu\\<rparr>).\n                       F \\<subseteq> backflows (set accu);\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n                    \\<T> =\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state =\n                         set (filter_compliant_stateful_ACS_accu\n                               \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                               edgesList)\\<rparr>\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>F\n        \\<in>get_offending_flows (get_ACS M)\n              (stateful_policy_to_network_graph \\<T>).\n  F \\<subseteq> backflows (filternew_flows_state \\<T>);\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<union> set (a # edgesList) \\<subseteq> E;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        (stateful_policy_to_network_graph\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = set accu\\<rparr>).\n           F \\<subseteq> backflows (set accu);\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        \\<T> =\n        \\<lparr>hosts = V, flows_fix = E,\n           flows_state =\n             set (filter_compliant_stateful_ACS_accu\n                   \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                   (a # edgesList))\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   (stateful_policy_to_network_graph \\<T>).\n                            F \\<subseteq> backflows\n     (filternew_flows_state \\<T>)", "from Nil(5)"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>set accu. a \\<notin> backflows E", "have \"backflows (set accu) = backflows {e \\<in> set accu. e \\<notin> backflows E}\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set accu. a \\<notin> backflows E\n\ngoal (1 subgoal):\n 1. backflows (set accu) =\n    backflows {e \\<in> set accu. e \\<notin> backflows E}", "by (metis (lifting) Collect_cong Collect_mem_eq)"], ["proof (state)\nthis:\n  backflows (set accu) =\n  backflows {e \\<in> set accu. e \\<notin> backflows E}\n\ngoal (2 subgoals):\n 1. \\<And>accu.\n       \\<lbrakk>valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<union> set [] \\<subseteq> E;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        (stateful_policy_to_network_graph\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = set accu\\<rparr>).\n           F \\<subseteq> backflows (set accu);\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        \\<T> =\n        \\<lparr>hosts = V, flows_fix = E,\n           flows_state =\n             set (filter_compliant_stateful_ACS_accu\n                   \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                   [])\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   (stateful_policy_to_network_graph \\<T>).\n                            F \\<subseteq> backflows\n     (filternew_flows_state \\<T>)\n 2. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_ACS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<union> set edgesList \\<subseteq> E;\n                    \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                                    (stateful_policy_to_network_graph\n\\<lparr>hosts = V, flows_fix = E, flows_state = set accu\\<rparr>).\n                       F \\<subseteq> backflows (set accu);\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n                    \\<T> =\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state =\n                         set (filter_compliant_stateful_ACS_accu\n                               \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                               edgesList)\\<rparr>\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>F\n        \\<in>get_offending_flows (get_ACS M)\n              (stateful_policy_to_network_graph \\<T>).\n  F \\<subseteq> backflows (filternew_flows_state \\<T>);\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<union> set (a # edgesList) \\<subseteq> E;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        (stateful_policy_to_network_graph\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = set accu\\<rparr>).\n           F \\<subseteq> backflows (set accu);\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        \\<T> =\n        \\<lparr>hosts = V, flows_fix = E,\n           flows_state =\n             set (filter_compliant_stateful_ACS_accu\n                   \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                   (a # edgesList))\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   (stateful_policy_to_network_graph \\<T>).\n                            F \\<subseteq> backflows\n     (filternew_flows_state \\<T>)", "from this Nil(4)"], ["proof (chain)\npicking this:\n  backflows (set accu) =\n  backflows {e \\<in> set accu. e \\<notin> backflows E}\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state = set accu\\<rparr>).\n     F \\<subseteq> backflows (set accu)", "have \"\\<forall>F\\<in>get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = set accu\\<rparr>). F \\<subseteq> backflows {e \\<in> set accu. e \\<notin> backflows E}\""], ["proof (prove)\nusing this:\n  backflows (set accu) =\n  backflows {e \\<in> set accu. e \\<notin> backflows E}\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state = set accu\\<rparr>).\n     F \\<subseteq> backflows (set accu)\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph\n                      \\<lparr>hosts = V, flows_fix = E,\n                         flows_state = set accu\\<rparr>).\n       F \\<subseteq> backflows {e \\<in> set accu. e \\<notin> backflows E}", "by simp"], ["proof (state)\nthis:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state = set accu\\<rparr>).\n     F \\<subseteq> backflows {e \\<in> set accu. e \\<notin> backflows E}\n\ngoal (2 subgoals):\n 1. \\<And>accu.\n       \\<lbrakk>valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<union> set [] \\<subseteq> E;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        (stateful_policy_to_network_graph\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = set accu\\<rparr>).\n           F \\<subseteq> backflows (set accu);\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        \\<T> =\n        \\<lparr>hosts = V, flows_fix = E,\n           flows_state =\n             set (filter_compliant_stateful_ACS_accu\n                   \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                   [])\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   (stateful_policy_to_network_graph \\<T>).\n                            F \\<subseteq> backflows\n     (filternew_flows_state \\<T>)\n 2. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_ACS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<union> set edgesList \\<subseteq> E;\n                    \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                                    (stateful_policy_to_network_graph\n\\<lparr>hosts = V, flows_fix = E, flows_state = set accu\\<rparr>).\n                       F \\<subseteq> backflows (set accu);\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n                    \\<T> =\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state =\n                         set (filter_compliant_stateful_ACS_accu\n                               \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                               edgesList)\\<rparr>\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>F\n        \\<in>get_offending_flows (get_ACS M)\n              (stateful_policy_to_network_graph \\<T>).\n  F \\<subseteq> backflows (filternew_flows_state \\<T>);\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<union> set (a # edgesList) \\<subseteq> E;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        (stateful_policy_to_network_graph\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = set accu\\<rparr>).\n           F \\<subseteq> backflows (set accu);\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        \\<T> =\n        \\<lparr>hosts = V, flows_fix = E,\n           flows_state =\n             set (filter_compliant_stateful_ACS_accu\n                   \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                   (a # edgesList))\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   (stateful_policy_to_network_graph \\<T>).\n                            F \\<subseteq> backflows\n     (filternew_flows_state \\<T>)", "from this Nil(6)"], ["proof (chain)\npicking this:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state = set accu\\<rparr>).\n     F \\<subseteq> backflows {e \\<in> set accu. e \\<notin> backflows E}\n  \\<T> =\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state =\n       set (filter_compliant_stateful_ACS_accu\n             \\<lparr>nodes = V, edges = E\\<rparr> M accu [])\\<rparr>", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state = set accu\\<rparr>).\n     F \\<subseteq> backflows {e \\<in> set accu. e \\<notin> backflows E}\n  \\<T> =\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state =\n       set (filter_compliant_stateful_ACS_accu\n             \\<lparr>nodes = V, edges = E\\<rparr> M accu [])\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "by(simp add: filternew_flows_state_alt2)"], ["proof (state)\nthis:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph \\<T>).\n     F \\<subseteq> backflows (filternew_flows_state \\<T>)\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_ACS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<union> set edgesList \\<subseteq> E;\n                    \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                                    (stateful_policy_to_network_graph\n\\<lparr>hosts = V, flows_fix = E, flows_state = set accu\\<rparr>).\n                       F \\<subseteq> backflows (set accu);\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n                    \\<T> =\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state =\n                         set (filter_compliant_stateful_ACS_accu\n                               \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                               edgesList)\\<rparr>\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>F\n        \\<in>get_offending_flows (get_ACS M)\n              (stateful_policy_to_network_graph \\<T>).\n  F \\<subseteq> backflows (filternew_flows_state \\<T>);\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<union> set (a # edgesList) \\<subseteq> E;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        (stateful_policy_to_network_graph\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = set accu\\<rparr>).\n           F \\<subseteq> backflows (set accu);\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        \\<T> =\n        \\<lparr>hosts = V, flows_fix = E,\n           flows_state =\n             set (filter_compliant_stateful_ACS_accu\n                   \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                   (a # edgesList))\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   (stateful_policy_to_network_graph \\<T>).\n                            F \\<subseteq> backflows\n     (filternew_flows_state \\<T>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_ACS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<union> set edgesList \\<subseteq> E;\n                    \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                                    (stateful_policy_to_network_graph\n\\<lparr>hosts = V, flows_fix = E, flows_state = set accu\\<rparr>).\n                       F \\<subseteq> backflows (set accu);\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n                    \\<T> =\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state =\n                         set (filter_compliant_stateful_ACS_accu\n                               \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                               edgesList)\\<rparr>\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>F\n        \\<in>get_offending_flows (get_ACS M)\n              (stateful_policy_to_network_graph \\<T>).\n  F \\<subseteq> backflows (filternew_flows_state \\<T>);\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<union> set (a # edgesList) \\<subseteq> E;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        (stateful_policy_to_network_graph\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = set accu\\<rparr>).\n           F \\<subseteq> backflows (set accu);\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        \\<T> =\n        \\<lparr>hosts = V, flows_fix = E,\n           flows_state =\n             set (filter_compliant_stateful_ACS_accu\n                   \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                   (a # edgesList))\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   (stateful_policy_to_network_graph \\<T>).\n                            F \\<subseteq> backflows\n     (filternew_flows_state \\<T>)", "case (Cons e Es)"], ["proof (state)\nthis:\n  \\<lbrakk>valid_reqs (get_ACS M);\n   wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n   set ?accu \\<union> set Es \\<subseteq> E;\n   \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state = set ?accu\\<rparr>).\n      F \\<subseteq> backflows (set ?accu);\n   \\<forall>a\\<in>set ?accu. a \\<notin> backflows E;\n   \\<T> =\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state =\n        set (filter_compliant_stateful_ACS_accu\n              \\<lparr>nodes = V, edges = E\\<rparr> M ?accu\n              Es)\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                                    (stateful_policy_to_network_graph \\<T>).\n                       F \\<subseteq> backflows (filternew_flows_state \\<T>)\n  valid_reqs (get_ACS M)\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  set accu \\<union> set (e # Es) \\<subseteq> E\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state = set accu\\<rparr>).\n     F \\<subseteq> backflows (set accu)\n  \\<forall>a\\<in>set accu. a \\<notin> backflows E\n  \\<T> =\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state =\n       set (filter_compliant_stateful_ACS_accu\n             \\<lparr>nodes = V, edges = E\\<rparr> M accu (e # Es))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_ACS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set accu \\<union> set edgesList \\<subseteq> E;\n                    \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                                    (stateful_policy_to_network_graph\n\\<lparr>hosts = V, flows_fix = E, flows_state = set accu\\<rparr>).\n                       F \\<subseteq> backflows (set accu);\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n                    \\<T> =\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state =\n                         set (filter_compliant_stateful_ACS_accu\n                               \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                               edgesList)\\<rparr>\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>F\n        \\<in>get_offending_flows (get_ACS M)\n              (stateful_policy_to_network_graph \\<T>).\n  F \\<subseteq> backflows (filternew_flows_state \\<T>);\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set accu \\<union> set (a # edgesList) \\<subseteq> E;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        (stateful_policy_to_network_graph\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = set accu\\<rparr>).\n           F \\<subseteq> backflows (set accu);\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        \\<T> =\n        \\<lparr>hosts = V, flows_fix = E,\n           flows_state =\n             set (filter_compliant_stateful_ACS_accu\n                   \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                   (a # edgesList))\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   (stateful_policy_to_network_graph \\<T>).\n                            F \\<subseteq> backflows\n     (filternew_flows_state \\<T>)", "from Cons.IH[OF Cons.prems(1) Cons.prems(2)] Cons.prems(3) Cons.prems(4) Cons.prems(5) Cons.prems(6)"], ["proof (chain)\npicking this:\n  \\<lbrakk>set ?accu \\<union> set Es \\<subseteq> E;\n   \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state = set ?accu\\<rparr>).\n      F \\<subseteq> backflows (set ?accu);\n   \\<forall>a\\<in>set ?accu. a \\<notin> backflows E;\n   \\<T> =\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state =\n        set (filter_compliant_stateful_ACS_accu\n              \\<lparr>nodes = V, edges = E\\<rparr> M ?accu\n              Es)\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                                    (stateful_policy_to_network_graph \\<T>).\n                       F \\<subseteq> backflows (filternew_flows_state \\<T>)\n  set accu \\<union> set (e # Es) \\<subseteq> E\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state = set accu\\<rparr>).\n     F \\<subseteq> backflows (set accu)\n  \\<forall>a\\<in>set accu. a \\<notin> backflows E\n  \\<T> =\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state =\n       set (filter_compliant_stateful_ACS_accu\n             \\<lparr>nodes = V, edges = E\\<rparr> M accu (e # Es))\\<rparr>", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>set ?accu \\<union> set Es \\<subseteq> E;\n   \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state = set ?accu\\<rparr>).\n      F \\<subseteq> backflows (set ?accu);\n   \\<forall>a\\<in>set ?accu. a \\<notin> backflows E;\n   \\<T> =\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state =\n        set (filter_compliant_stateful_ACS_accu\n              \\<lparr>nodes = V, edges = E\\<rparr> M ?accu\n              Es)\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                                    (stateful_policy_to_network_graph \\<T>).\n                       F \\<subseteq> backflows (filternew_flows_state \\<T>)\n  set accu \\<union> set (e # Es) \\<subseteq> E\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state = set accu\\<rparr>).\n     F \\<subseteq> backflows (set accu)\n  \\<forall>a\\<in>set accu. a \\<notin> backflows E\n  \\<T> =\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state =\n       set (filter_compliant_stateful_ACS_accu\n             \\<lparr>nodes = V, edges = E\\<rparr> M accu (e # Es))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "by(simp add: filternew_flows_state_alt2 split: if_split_asm)"], ["proof (state)\nthis:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph \\<T>).\n     F \\<subseteq> backflows (filternew_flows_state \\<T>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filter_compliant_stateful_ACS_accu_no_side_effects: \"valid_reqs (get_ACS M) \\<Longrightarrow> wf_graph G \\<Longrightarrow>\n            \\<forall>F \\<in> get_offending_flows (get_ACS M) \\<lparr>nodes = nodes G, edges = edges G \\<union> backflows (edges G)\\<rparr>. F \\<subseteq> (backflows (edges G)) - (edges G) \\<Longrightarrow>\n            (set accu) \\<union> (set edgesList) \\<subseteq> edges G \\<Longrightarrow> \n            (\\<forall>a \\<in> set accu. a \\<notin> (backflows (edges G))) \\<Longrightarrow>\n            filter_compliant_stateful_ACS_accu G M accu edgesList = rev([ e \\<leftarrow> edgesList. e \\<notin> backflows (edges G)])@accu\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_reqs (get_ACS M); wf_graph G;\n     \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                     \\<lparr>nodes = nodes G,\n                        edges =\n                          edges G \\<union> backflows (edges G)\\<rparr>.\n        F \\<subseteq> backflows (edges G) - edges G;\n     set accu \\<union> set edgesList \\<subseteq> edges G;\n     \\<forall>a\\<in>set accu. a \\<notin> backflows (edges G)\\<rbrakk>\n    \\<Longrightarrow> filter_compliant_stateful_ACS_accu G M accu\n                       edgesList =\n                      rev (filter\n                            (\\<lambda>e. e \\<notin> backflows (edges G))\n                            edgesList) @\n                      accu", "apply(simp add: backflows_minus_backflows)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_reqs (get_ACS M); wf_graph G;\n     \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                     \\<lparr>nodes = nodes G,\n                        edges =\n                          edges G \\<union> backflows (edges G)\\<rparr>.\n        F \\<subseteq> backflows (edges G) - edges G;\n     set accu \\<subseteq> edges G \\<and> set edgesList \\<subseteq> edges G;\n     \\<forall>a\\<in>set accu. a \\<notin> backflows (edges G)\\<rbrakk>\n    \\<Longrightarrow> filter_compliant_stateful_ACS_accu G M accu\n                       edgesList =\n                      rev (filter\n                            (\\<lambda>e. e \\<notin> backflows (edges G))\n                            edgesList) @\n                      accu", "apply(induction edgesList arbitrary: accu)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>accu.\n       \\<lbrakk>valid_reqs (get_ACS M); wf_graph G;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = nodes G,\n                           edges =\n                             edges G \\<union> backflows (edges G)\\<rparr>.\n           F \\<subseteq> backflows (edges G) - edges G;\n        set accu \\<subseteq> edges G \\<and> set [] \\<subseteq> edges G;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows (edges G)\\<rbrakk>\n       \\<Longrightarrow> filter_compliant_stateful_ACS_accu G M accu [] =\n                         rev (filter\n                               (\\<lambda>e. e \\<notin> backflows (edges G))\n                               []) @\n                         accu\n 2. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_ACS M); wf_graph G;\n                    \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                                    \\<lparr>nodes = nodes G,\n edges = edges G \\<union> backflows (edges G)\\<rparr>.\n                       F \\<subseteq> backflows (edges G) - edges G;\n                    set accu \\<subseteq> edges G \\<and>\n                    set edgesList \\<subseteq> edges G;\n                    \\<forall>a\\<in>set accu.\n                       a \\<notin> backflows (edges G)\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu G M\naccu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows (edges G)) edgesList) @\n                                     accu;\n        valid_reqs (get_ACS M); wf_graph G;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = nodes G,\n                           edges =\n                             edges G \\<union> backflows (edges G)\\<rparr>.\n           F \\<subseteq> backflows (edges G) - edges G;\n        set accu \\<subseteq> edges G \\<and>\n        set (a # edgesList) \\<subseteq> edges G;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows (edges G)\\<rbrakk>\n       \\<Longrightarrow> filter_compliant_stateful_ACS_accu G M accu\n                          (a # edgesList) =\n                         rev (filter\n                               (\\<lambda>e. e \\<notin> backflows (edges G))\n                               (a # edgesList)) @\n                         accu", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>valid_reqs (get_ACS M); wf_graph G;\n                    \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                                    \\<lparr>nodes = nodes G,\n edges = edges G \\<union> backflows (edges G)\\<rparr>.\n                       F \\<subseteq> backflows (edges G) - edges G;\n                    set accu \\<subseteq> edges G \\<and>\n                    set edgesList \\<subseteq> edges G;\n                    \\<forall>a\\<in>set accu.\n                       a \\<notin> backflows (edges G)\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu G M\naccu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows (edges G)) edgesList) @\n                                     accu;\n        valid_reqs (get_ACS M); wf_graph G;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = nodes G,\n                           edges =\n                             edges G \\<union> backflows (edges G)\\<rparr>.\n           F \\<subseteq> backflows (edges G) - edges G;\n        set accu \\<subseteq> edges G \\<and>\n        set (a # edgesList) \\<subseteq> edges G;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows (edges G)\\<rbrakk>\n       \\<Longrightarrow> filter_compliant_stateful_ACS_accu G M accu\n                          (a # edgesList) =\n                         rev (filter\n                               (\\<lambda>e. e \\<notin> backflows (edges G))\n                               (a # edgesList)) @\n                         accu", "apply(simp add: stateful_policy_to_network_graph_def all_flows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> edges G;\n                    \\<forall>a\\<in>set accu.\n                       a \\<notin> backflows (edges G)\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu G M\naccu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows (edges G)) edgesList) @\n                                     accu;\n        valid_reqs (get_ACS M); wf_graph G;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = nodes G,\n                           edges =\n                             edges G \\<union> backflows (edges G)\\<rparr>.\n           F \\<subseteq> backflows (edges G) - edges G;\n        set accu \\<subseteq> edges G \\<and>\n        a \\<in> edges G \\<and> set edgesList \\<subseteq> edges G;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows (edges G)\\<rbrakk>\n       \\<Longrightarrow> a \\<notin> backflows (edges G) \\<longrightarrow>\n                         (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n    \\<lparr>nodes = nodes G,\n       edges =\n         insert a\n          (edges G \\<union> set accu \\<union>\n           backflows (insert a (set accu)))\\<rparr>.\n                             F \\<subseteq> backflows (insert a (set accu)))", "apply(rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> edges G;\n                    \\<forall>a\\<in>set accu.\n                       a \\<notin> backflows (edges G)\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu G M\naccu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows (edges G)) edgesList) @\n                                     accu;\n        valid_reqs (get_ACS M); wf_graph G;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = nodes G,\n                           edges =\n                             edges G \\<union> backflows (edges G)\\<rparr>.\n           F \\<subseteq> backflows (edges G) - edges G;\n        set accu \\<subseteq> edges G \\<and>\n        a \\<in> edges G \\<and> set edgesList \\<subseteq> edges G;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows (edges G);\n        a \\<notin> backflows (edges G)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   \\<lparr>nodes = nodes G,\n      edges =\n        insert a\n         (edges G \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rparr>.\n                            F \\<subseteq> backflows (insert a (set accu))", "apply(case_tac G, simp, rename_tac V E)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   \\<lparr>nodes = V,\n      edges =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rparr>.\n                            F \\<subseteq> backflows (insert a (set accu))", "thm Un_set_offending_flows_bound_minus_subseteq'[where X=\"backflows E - E\" and E=\"E \\<union> backflows E\"]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   \\<lparr>nodes = V,\n      edges =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rparr>.\n                            F \\<subseteq> backflows (insert a (set accu))", "apply(drule_tac X=\"backflows E - E\" and E=\"E \\<union> backflows E\" and E'=\"(E \\<union> backflows E) - (insert a (E \\<union> set accu \\<union> backflows (insert a (set accu))))\" in Un_set_offending_flows_bound_minus_subseteq')"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = ?V19 a edgesList accu V E,\n                             edges = E \\<union> backflows E\\<rparr>\n 2. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> E \\<union> backflows E -\n                         insert a\n                          (E \\<union> set accu \\<union>\n                           backflows (insert a (set accu)))\n                         \\<subseteq> E \\<union> backflows E\n 3. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (get_offending_flows (get_ACS M)\n                            \\<lparr>nodes = ?V19 a edgesList accu V E,\n                               edges = E \\<union> backflows E\\<rparr>)\n                         \\<subseteq> backflows E - E\n 4. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E; G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = ?V19 a edgesList accu V E,\n              edges =\n                E \\<union> backflows E -\n                (E \\<union> backflows E -\n                 insert a\n                  (E \\<union> set accu \\<union>\n                   backflows (insert a (set accu))))\\<rparr>)\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   \\<lparr>nodes = V,\n      edges =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rparr>.\n                            F \\<subseteq> backflows (insert a (set accu))", "defer"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> E \\<union> backflows E -\n                         insert a\n                          (E \\<union> set accu \\<union>\n                           backflows (insert a (set accu)))\n                         \\<subseteq> E \\<union> backflows E\n 2. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (get_offending_flows (get_ACS M)\n                            \\<lparr>nodes = ?V19 a edgesList accu V E,\n                               edges = E \\<union> backflows E\\<rparr>)\n                         \\<subseteq> backflows E - E\n 3. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E; G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = ?V19 a edgesList accu V E,\n              edges =\n                E \\<union> backflows E -\n                (E \\<union> backflows E -\n                 insert a\n                  (E \\<union> set accu \\<union>\n                   backflows (insert a (set accu))))\\<rparr>)\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   \\<lparr>nodes = V,\n      edges =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rparr>.\n                            F \\<subseteq> backflows (insert a (set accu))\n 4. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = ?V19 a edgesList accu V E,\n                             edges = E \\<union> backflows E\\<rparr>", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          (get_offending_flows (get_ACS M)\n                            \\<lparr>nodes = ?V19 a edgesList accu V E,\n                               edges = E \\<union> backflows E\\<rparr>)\n                         \\<subseteq> backflows E - E\n 2. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> E \\<union> backflows E -\n                         insert a\n                          (E \\<union> set accu \\<union>\n                           backflows (insert a (set accu)))\n                         \\<subseteq> E \\<union> backflows E\n 3. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E; G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = ?V19 a edgesList accu V E,\n              edges =\n                E \\<union> backflows E -\n                (E \\<union> backflows E -\n                 insert a\n                  (E \\<union> set accu \\<union>\n                   backflows (insert a (set accu))))\\<rparr>)\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   \\<lparr>nodes = V,\n      edges =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rparr>.\n                            F \\<subseteq> backflows (insert a (set accu))\n 4. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = ?V19 a edgesList accu V E,\n                             edges = E \\<union> backflows E\\<rparr>", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> E \\<union> backflows E -\n                         insert a\n                          (E \\<union> set accu \\<union>\n                           backflows (insert a (set accu)))\n                         \\<subseteq> E \\<union> backflows E\n 2. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E; G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                E \\<union> backflows E -\n                (E \\<union> backflows E -\n                 insert a\n                  (E \\<union> set accu \\<union>\n                   backflows (insert a (set accu))))\\<rparr>)\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   \\<lparr>nodes = V,\n      edges =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rparr>.\n                            F \\<subseteq> backflows (insert a (set accu))\n 3. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = V,\n                             edges = E \\<union> backflows E\\<rparr>", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E; G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                E \\<union> backflows E -\n                (E \\<union> backflows E -\n                 insert a\n                  (E \\<union> set accu \\<union>\n                   backflows (insert a (set accu))))\\<rparr>)\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   \\<lparr>nodes = V,\n      edges =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rparr>.\n                            F \\<subseteq> backflows (insert a (set accu))\n 2. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = V,\n                             edges = E \\<union> backflows E\\<rparr>", "apply(subgoal_tac \"E \\<union> backflows E - (E \\<union> backflows E - insert a (E \\<union> set accu \\<union> backflows (insert a (set accu)))) = insert a (E \\<union> set accu \\<union> backflows (insert a (set accu)))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E; G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                E \\<union> backflows E -\n                (E \\<union> backflows E -\n                 insert a\n                  (E \\<union> set accu \\<union>\n                   backflows (insert a (set accu))))\\<rparr>)\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))));\n        E \\<union> backflows E -\n        (E \\<union> backflows E -\n         insert a\n          (E \\<union> set accu \\<union> backflows (insert a (set accu)))) =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   \\<lparr>nodes = V,\n      edges =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rparr>.\n                            F \\<subseteq> backflows (insert a (set accu))\n 2. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E; G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                E \\<union> backflows E -\n                (E \\<union> backflows E -\n                 insert a\n                  (E \\<union> set accu \\<union>\n                   backflows (insert a (set accu))))\\<rparr>)\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))))\\<rbrakk>\n       \\<Longrightarrow> E \\<union> backflows E -\n                         (E \\<union> backflows E -\n                          insert a\n                           (E \\<union> set accu \\<union>\n                            backflows (insert a (set accu)))) =\n                         insert a\n                          (E \\<union> set accu \\<union>\n                           backflows (insert a (set accu)))\n 3. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = V,\n                             edges = E \\<union> backflows E\\<rparr>", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E; G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                insert a\n                 (E \\<union> set accu \\<union>\n                  backflows (insert a (set accu)))\\<rparr>)\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))));\n        E \\<union> backflows E -\n        (E \\<union> backflows E -\n         insert a\n          (E \\<union> set accu \\<union> backflows (insert a (set accu)))) =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   \\<lparr>nodes = V,\n      edges =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rparr>.\n                            F \\<subseteq> backflows (insert a (set accu))\n 2. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E; G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                E \\<union> backflows E -\n                (E \\<union> backflows E -\n                 insert a\n                  (E \\<union> set accu \\<union>\n                   backflows (insert a (set accu))))\\<rparr>)\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))))\\<rbrakk>\n       \\<Longrightarrow> E \\<union> backflows E -\n                         (E \\<union> backflows E -\n                          insert a\n                           (E \\<union> set accu \\<union>\n                            backflows (insert a (set accu)))) =\n                         insert a\n                          (E \\<union> set accu \\<union>\n                           backflows (insert a (set accu)))\n 3. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = V,\n                             edges = E \\<union> backflows E\\<rparr>", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E; G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                E \\<union> backflows E -\n                (E \\<union> backflows E -\n                 insert a\n                  (E \\<union> set accu \\<union>\n                   backflows (insert a (set accu))))\\<rparr>)\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))))\\<rbrakk>\n       \\<Longrightarrow> E \\<union> backflows E -\n                         (E \\<union> backflows E -\n                          insert a\n                           (E \\<union> set accu \\<union>\n                            backflows (insert a (set accu)))) =\n                         insert a\n                          (E \\<union> set accu \\<union>\n                           backflows (insert a (set accu)))\n 2. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E; G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                insert a\n                 (E \\<union> set accu \\<union>\n                  backflows (insert a (set accu)))\\<rparr>)\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))));\n        E \\<union> backflows E -\n        (E \\<union> backflows E -\n         insert a\n          (E \\<union> set accu \\<union> backflows (insert a (set accu)))) =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   \\<lparr>nodes = V,\n      edges =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rparr>.\n                            F \\<subseteq> backflows (insert a (set accu))\n 3. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = V,\n                             edges = E \\<union> backflows E\\<rparr>", "apply (metis Un_assoc Un_least Un_mono backflows_subseteq double_diff insert_def insert_subset subset_refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E; G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                insert a\n                 (E \\<union> set accu \\<union>\n                  backflows (insert a (set accu)))\\<rparr>)\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))));\n        E \\<union> backflows E -\n        (E \\<union> backflows E -\n         insert a\n          (E \\<union> set accu \\<union> backflows (insert a (set accu)))) =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   \\<lparr>nodes = V,\n      edges =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rparr>.\n                            F \\<subseteq> backflows (insert a (set accu))\n 2. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = V,\n                             edges = E \\<union> backflows E\\<rparr>", "apply(subgoal_tac \"backflows (insert a (set accu)) \\<subseteq> backflows E - E - (E \\<union> backflows E - insert a (E \\<union> set accu \\<union> backflows (insert a (set accu))))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E; G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                insert a\n                 (E \\<union> set accu \\<union>\n                  backflows (insert a (set accu)))\\<rparr>)\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))));\n        E \\<union> backflows E -\n        (E \\<union> backflows E -\n         insert a\n          (E \\<union> set accu \\<union> backflows (insert a (set accu)))) =\n        insert a\n         (E \\<union> set accu \\<union> backflows (insert a (set accu)));\n        backflows (insert a (set accu))\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n   \\<lparr>nodes = V,\n      edges =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rparr>.\n                            F \\<subseteq> backflows (insert a (set accu))\n 2. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E; G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                insert a\n                 (E \\<union> set accu \\<union>\n                  backflows (insert a (set accu)))\\<rparr>)\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))));\n        E \\<union> backflows E -\n        (E \\<union> backflows E -\n         insert a\n          (E \\<union> set accu \\<union> backflows (insert a (set accu)))) =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rbrakk>\n       \\<Longrightarrow> backflows (insert a (set accu))\n                         \\<subseteq> backflows E - E -\n                                     (E \\<union> backflows E -\ninsert a (E \\<union> set accu \\<union> backflows (insert a (set accu))))\n 3. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = V,\n                             edges = E \\<union> backflows E\\<rparr>", "apply(blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E; G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                insert a\n                 (E \\<union> set accu \\<union>\n                  backflows (insert a (set accu)))\\<rparr>)\n        \\<subseteq> backflows E - E -\n                    (E \\<union> backflows E -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       backflows (insert a (set accu))));\n        E \\<union> backflows E -\n        (E \\<union> backflows E -\n         insert a\n          (E \\<union> set accu \\<union> backflows (insert a (set accu)))) =\n        insert a\n         (E \\<union> set accu \\<union>\n          backflows (insert a (set accu)))\\<rbrakk>\n       \\<Longrightarrow> backflows (insert a (set accu))\n                         \\<subseteq> backflows E - E -\n                                     (E \\<union> backflows E -\ninsert a (E \\<union> set accu \\<union> backflows (insert a (set accu))))\n 2. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = V,\n                             edges = E \\<union> backflows E\\<rparr>", "apply(simp add: backflows_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu.\n                       \\<not> (case a of\n                               (r, s) \\<Rightarrow> (s, r) \\<in> E)\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. \\<not> (case e of (r, s) \\<Rightarrow> (s, r) \\<in> E))\n  edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges =\n                             E \\<union> {(r, s). (s, r) \\<in> E}\\<rparr>.\n           F \\<subseteq> {(r, s). (s, r) \\<in> E} - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu.\n           \\<not> (case a of (r, s) \\<Rightarrow> (s, r) \\<in> E);\n        \\<not> (case a of (r, s) \\<Rightarrow> (s, r) \\<in> E);\n        G = \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                insert a\n                 (E \\<union> set accu \\<union>\n                  {(r, s). (s, r) = a \\<or> (s, r) \\<in> set accu})\\<rparr>)\n        \\<subseteq> {(r, s). (s, r) \\<in> E} - E -\n                    (E \\<union> {(r, s). (s, r) \\<in> E} -\n                     insert a\n                      (E \\<union> set accu \\<union>\n                       {(r, s). (s, r) = a \\<or> (s, r) \\<in> set accu}));\n        E \\<union> {(r, s). (s, r) \\<in> E} -\n        (E \\<union> {(r, s). (s, r) \\<in> E} -\n         insert a\n          (E \\<union> set accu \\<union>\n           {(r, s). (s, r) = a \\<or> (s, r) \\<in> set accu})) =\n        insert a\n         (E \\<union> set accu \\<union>\n          {(r, s). (s, r) = a \\<or> (s, r) \\<in> set accu})\\<rbrakk>\n       \\<Longrightarrow> {(r, s). (s, r) = a \\<or> (s, r) \\<in> set accu}\n                         \\<subseteq> {(r, s). (s, r) \\<in> E} - E -\n                                     (E \\<union> {(r, s). (s, r) \\<in> E} -\ninsert a\n (E \\<union> set accu \\<union>\n  {(r, s). (s, r) = a \\<or> (s, r) \\<in> set accu}))\n 2. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = V,\n                             edges = E \\<union> backflows E\\<rparr>", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = V,\n                             edges = E \\<union> backflows E\\<rparr>", "using FiniteGraph.backflows_wf FiniteGraph.wf_graph_union_edges"], ["proof (prove)\nusing this:\n  wf_graph \\<lparr>nodes = ?N, edges = ?E\\<rparr> \\<Longrightarrow>\n  wf_graph \\<lparr>nodes = ?N, edges = backflows ?E\\<rparr>\n  \\<lbrakk>wf_graph \\<lparr>nodes = ?V, edges = ?E\\<rparr>;\n   wf_graph \\<lparr>nodes = ?V, edges = ?E'\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> wf_graph\n                     \\<lparr>nodes = ?V, edges = ?E \\<union> ?E'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu V E.\n       \\<lbrakk>\\<And>accu.\n                   \\<lbrakk>set accu \\<subseteq> E;\n                    \\<forall>a\\<in>set accu. a \\<notin> backflows E\\<rbrakk>\n                   \\<Longrightarrow> filter_compliant_stateful_ACS_accu\n\\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList =\n                                     rev\n(filter (\\<lambda>e. e \\<notin> backflows E) edgesList) @\n                                     accu;\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                        \\<lparr>nodes = V,\n                           edges = E \\<union> backflows E\\<rparr>.\n           F \\<subseteq> backflows E - E;\n        set accu \\<subseteq> E \\<and>\n        a \\<in> E \\<and> set edgesList \\<subseteq> E;\n        \\<forall>a\\<in>set accu. a \\<notin> backflows E;\n        a \\<notin> backflows E;\n        G = \\<lparr>nodes = V, edges = E\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = V,\n                             edges = E \\<union> backflows E\\<rparr>", "by metis"], ["", "lemma filter_compliant_stateful_ACS_correct: \n      assumes a1: \"valid_reqs (get_ACS M)\"\n      and     a2: \"wf_graph G\"\n      and     a3: \"set edgesList \\<subseteq> edges G\"  \n      and     a4: \"all_security_requirements_fulfilled (get_ACS M) G\"\n      and     a5: \"\\<T> = \\<lparr> hosts = nodes G, flows_fix = edges G, flows_state = set (filter_compliant_stateful_ACS G M edgesList) \\<rparr>\"\n      shows   \"\\<forall>F \\<in> get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<T>). F \\<subseteq> backflows (filternew_flows_state \\<T>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "obtain V E where VE: \"G = \\<lparr> nodes = V, edges = E \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>V E.\n        G = \\<lparr>nodes = V, edges = E\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(case_tac G, blast)"], ["proof (state)\nthis:\n  G = \\<lparr>nodes = V, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "from VE a2"], ["proof (chain)\npicking this:\n  G = \\<lparr>nodes = V, edges = E\\<rparr>\n  wf_graph G", "have wfVE: \"wf_graph \\<lparr> nodes = V, edges = E \\<rparr>\""], ["proof (prove)\nusing this:\n  G = \\<lparr>nodes = V, edges = E\\<rparr>\n  wf_graph G\n\ngoal (1 subgoal):\n 1. wf_graph \\<lparr>nodes = V, edges = E\\<rparr>", "by simp"], ["proof (state)\nthis:\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "from VE a3"], ["proof (chain)\npicking this:\n  G = \\<lparr>nodes = V, edges = E\\<rparr>\n  set edgesList \\<subseteq> edges G", "have \"set edgesList \\<subseteq> E\""], ["proof (prove)\nusing this:\n  G = \\<lparr>nodes = V, edges = E\\<rparr>\n  set edgesList \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. set edgesList \\<subseteq> E", "by simp"], ["proof (state)\nthis:\n  set edgesList \\<subseteq> E\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "from a5 VE"], ["proof (chain)\npicking this:\n  \\<T> =\n  \\<lparr>hosts = nodes G, flows_fix = edges G,\n     flows_state = set (filter_compliant_stateful_ACS G M edgesList)\\<rparr>\n  G = \\<lparr>nodes = V, edges = E\\<rparr>", "have a5': \"\\<T> = \\<lparr>hosts = V, flows_fix = E, flows_state = set (filter_compliant_stateful_ACS_accu \\<lparr>nodes = V, edges = E\\<rparr> M [] edgesList)\\<rparr>\""], ["proof (prove)\nusing this:\n  \\<T> =\n  \\<lparr>hosts = nodes G, flows_fix = edges G,\n     flows_state = set (filter_compliant_stateful_ACS G M edgesList)\\<rparr>\n  G = \\<lparr>nodes = V, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<T> =\n    \\<lparr>hosts = V, flows_fix = E,\n       flows_state =\n         set (filter_compliant_stateful_ACS_accu\n               \\<lparr>nodes = V, edges = E\\<rparr> M [] edgesList)\\<rparr>", "unfolding filter_compliant_stateful_ACS_def"], ["proof (prove)\nusing this:\n  \\<T> =\n  \\<lparr>hosts = nodes G, flows_fix = edges G,\n     flows_state =\n       set (filter_compliant_stateful_ACS_accu G M [] edgesList)\\<rparr>\n  G = \\<lparr>nodes = V, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<T> =\n    \\<lparr>hosts = V, flows_fix = E,\n       flows_state =\n         set (filter_compliant_stateful_ACS_accu\n               \\<lparr>nodes = V, edges = E\\<rparr> M [] edgesList)\\<rparr>", "by(simp)"], ["proof (state)\nthis:\n  \\<T> =\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state =\n       set (filter_compliant_stateful_ACS_accu\n             \\<lparr>nodes = V, edges = E\\<rparr> M [] edgesList)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "from all_security_requirements_fulfilled_imp_get_offending_empty[OF a1 a4] VE"], ["proof (chain)\npicking this:\n  get_offending_flows (get_ACS M) G = {}\n  G = \\<lparr>nodes = V, edges = E\\<rparr>", "have \"\\<forall>F\\<in>get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = {}\\<rparr>). F \\<subseteq> backflows {}\""], ["proof (prove)\nusing this:\n  get_offending_flows (get_ACS M) G = {}\n  G = \\<lparr>nodes = V, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph\n                      \\<lparr>hosts = V, flows_fix = E,\n                         flows_state = {}\\<rparr>).\n       F \\<subseteq> backflows {}", "by(simp add: stateful_policy_to_network_graph_def all_flows_def backflows_def False_set)"], ["proof (state)\nthis:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state = {}\\<rparr>).\n     F \\<subseteq> backflows {}\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "from filter_compliant_stateful_ACS_accu_correct_induction[where accu=\"[]\" and edgesList=\"edgesList\", simplified, OF a1 wfVE \\<open>set edgesList \\<subseteq> E\\<close> this a5']"], ["proof (chain)\npicking this:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph \\<T>).\n     F \\<subseteq> backflows (filternew_flows_state \\<T>)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph \\<T>).\n     F \\<subseteq> backflows (filternew_flows_state \\<T>)\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "."], ["proof (state)\nthis:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph \\<T>).\n     F \\<subseteq> backflows (filternew_flows_state \\<T>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filter_compliant_stateful_ACS_accu_induction_maximal:\"\\<lbrakk> valid_reqs (get_ACS M);  wf_graph \\<lparr> nodes = V, edges = E \\<rparr>;\n            (set edgesList) \\<subseteq> E;\n            (set accu) \\<subseteq> E; \n            stateful = set (filter_compliant_stateful_ACS_accu \\<lparr> nodes = V, edges = E \\<rparr> M accu edgesList);\n            \\<forall>e \\<in> E - (set edgesList \\<union> set accu \\<union> {e \\<in> E. e \\<in> backflows E}).\n            \\<not> \\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = set accu \\<union> {e} \\<rparr>))\n                \\<subseteq> backflows (filternew_flows_state \\<lparr> hosts = V, flows_fix = E, flows_state = set accu \\<union> {e} \\<rparr>)\n            \\<rbrakk> \\<Longrightarrow>\n            \\<forall>e \\<in> E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}). \\<^cancel>\\<open>E - {computed stateful flows plus trivial stateful flows}\\<close>\n            \\<not> \\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = stateful \\<union> {e} \\<rparr>))\n                \\<subseteq> backflows (filternew_flows_state \\<lparr> hosts = V, flows_fix = E, flows_state = stateful \\<union> {e} \\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_reqs (get_ACS M);\n     wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     set edgesList \\<subseteq> E; set accu \\<subseteq> E;\n     stateful =\n     set (filter_compliant_stateful_ACS_accu\n           \\<lparr>nodes = V, edges = E\\<rparr> M accu edgesList);\n     \\<forall>e\\<in>E -\n                    (set edgesList \\<union> set accu \\<union>\n                     {e \\<in> E. e \\<in> backflows E}).\n        \\<not> \\<Union>\n                (get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state = set accu \\<union> {e}\\<rparr>))\n               \\<subseteq> backflows\n                            (filternew_flows_state\n                              \\<lparr>hosts = V, flows_fix = E,\n                                 flows_state =\n                                   set accu \\<union> {e}\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>e\\<in>E -\n                                     (stateful \\<union>\n{e \\<in> E. e \\<in> backflows E}).\n                         \\<not> \\<Union>\n                                 (get_offending_flows (get_ACS M)\n                                   (stateful_policy_to_network_graph\n                                     \\<lparr>hosts = V, flows_fix = E,\n  flows_state = stateful \\<union> {e}\\<rparr>))\n                                \\<subseteq> backflows\n       (filternew_flows_state\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> {e}\\<rparr>)", "proof(induction edgesList arbitrary: accu E)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>accu E.\n       \\<lbrakk>valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; set [] \\<subseteq> E;\n        set accu \\<subseteq> E;\n        stateful =\n        set (filter_compliant_stateful_ACS_accu\n              \\<lparr>nodes = V, edges = E\\<rparr> M accu []);\n        \\<forall>e\\<in>E -\n                       (set [] \\<union> set accu \\<union>\n                        {e \\<in> E. e \\<in> backflows E}).\n           \\<not> \\<Union>\n                   (get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set accu \\<union> {e}\\<rparr>))\n                  \\<subseteq> backflows\n                               (filternew_flows_state\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\nset accu \\<union> {e}\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e\\<in>E -\n  (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n                            \\<not> \\<Union>\n                                    (get_offending_flows (get_ACS M)\n(stateful_policy_to_network_graph\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state = stateful \\<union> {e}\\<rparr>))\n                                   \\<subseteq> backflows\n          (filternew_flows_state\n            \\<lparr>hosts = V, flows_fix = E,\n               flows_state = stateful \\<union> {e}\\<rparr>)\n 2. \\<And>a edgesList accu E.\n       \\<lbrakk>\\<And>accu E.\n                   \\<lbrakk>valid_reqs (get_ACS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set edgesList \\<subseteq> E; set accu \\<subseteq> E;\n                    stateful =\n                    set (filter_compliant_stateful_ACS_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                          edgesList);\n                    \\<forall>e\\<in>E -\n                                   (set edgesList \\<union> set accu \\<union>\n                                    {e \\<in> E. e \\<in> backflows E}).\n                       \\<not> \\<Union>\n                               (get_offending_flows (get_ACS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = V, flows_fix = E,\nflows_state = set accu \\<union> {e}\\<rparr>))\n                              \\<subseteq> backflows\n     (filternew_flows_state\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = set accu \\<union> {e}\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>e\n        \\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = stateful \\<union> {e}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = stateful \\<union> {e}\\<rparr>);\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set (a # edgesList) \\<subseteq> E; set accu \\<subseteq> E;\n        stateful =\n        set (filter_compliant_stateful_ACS_accu\n              \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # edgesList));\n        \\<forall>e\\<in>E -\n                       (set (a # edgesList) \\<union> set accu \\<union>\n                        {e \\<in> E. e \\<in> backflows E}).\n           \\<not> \\<Union>\n                   (get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set accu \\<union> {e}\\<rparr>))\n                  \\<subseteq> backflows\n                               (filternew_flows_state\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\nset accu \\<union> {e}\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e\\<in>E -\n  (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n                            \\<not> \\<Union>\n                                    (get_offending_flows (get_ACS M)\n(stateful_policy_to_network_graph\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state = stateful \\<union> {e}\\<rparr>))\n                                   \\<subseteq> backflows\n          (filternew_flows_state\n            \\<lparr>hosts = V, flows_fix = E,\n               flows_state = stateful \\<union> {e}\\<rparr>)", "case Nil"], ["proof (state)\nthis:\n  valid_reqs (get_ACS M)\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  set [] \\<subseteq> E\n  set accu \\<subseteq> E\n  stateful =\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu [])\n  \\<forall>e\\<in>E -\n                 (set [] \\<union> set accu \\<union>\n                  {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = set accu \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = set accu \\<union> {e}\\<rparr>)\n\ngoal (2 subgoals):\n 1. \\<And>accu E.\n       \\<lbrakk>valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; set [] \\<subseteq> E;\n        set accu \\<subseteq> E;\n        stateful =\n        set (filter_compliant_stateful_ACS_accu\n              \\<lparr>nodes = V, edges = E\\<rparr> M accu []);\n        \\<forall>e\\<in>E -\n                       (set [] \\<union> set accu \\<union>\n                        {e \\<in> E. e \\<in> backflows E}).\n           \\<not> \\<Union>\n                   (get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set accu \\<union> {e}\\<rparr>))\n                  \\<subseteq> backflows\n                               (filternew_flows_state\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\nset accu \\<union> {e}\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e\\<in>E -\n  (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n                            \\<not> \\<Union>\n                                    (get_offending_flows (get_ACS M)\n(stateful_policy_to_network_graph\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state = stateful \\<union> {e}\\<rparr>))\n                                   \\<subseteq> backflows\n          (filternew_flows_state\n            \\<lparr>hosts = V, flows_fix = E,\n               flows_state = stateful \\<union> {e}\\<rparr>)\n 2. \\<And>a edgesList accu E.\n       \\<lbrakk>\\<And>accu E.\n                   \\<lbrakk>valid_reqs (get_ACS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set edgesList \\<subseteq> E; set accu \\<subseteq> E;\n                    stateful =\n                    set (filter_compliant_stateful_ACS_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                          edgesList);\n                    \\<forall>e\\<in>E -\n                                   (set edgesList \\<union> set accu \\<union>\n                                    {e \\<in> E. e \\<in> backflows E}).\n                       \\<not> \\<Union>\n                               (get_offending_flows (get_ACS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = V, flows_fix = E,\nflows_state = set accu \\<union> {e}\\<rparr>))\n                              \\<subseteq> backflows\n     (filternew_flows_state\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = set accu \\<union> {e}\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>e\n        \\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = stateful \\<union> {e}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = stateful \\<union> {e}\\<rparr>);\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set (a # edgesList) \\<subseteq> E; set accu \\<subseteq> E;\n        stateful =\n        set (filter_compliant_stateful_ACS_accu\n              \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # edgesList));\n        \\<forall>e\\<in>E -\n                       (set (a # edgesList) \\<union> set accu \\<union>\n                        {e \\<in> E. e \\<in> backflows E}).\n           \\<not> \\<Union>\n                   (get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set accu \\<union> {e}\\<rparr>))\n                  \\<subseteq> backflows\n                               (filternew_flows_state\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\nset accu \\<union> {e}\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e\\<in>E -\n  (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n                            \\<not> \\<Union>\n                                    (get_offending_flows (get_ACS M)\n(stateful_policy_to_network_graph\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state = stateful \\<union> {e}\\<rparr>))\n                                   \\<subseteq> backflows\n          (filternew_flows_state\n            \\<lparr>hosts = V, flows_fix = E,\n               flows_state = stateful \\<union> {e}\\<rparr>)", "from Nil(5)[simplified] Nil(6)"], ["proof (chain)\npicking this:\n  stateful = set accu\n  \\<forall>e\\<in>E -\n                 (set [] \\<union> set accu \\<union>\n                  {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = set accu \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = set accu \\<union> {e}\\<rparr>)", "show ?case"], ["proof (prove)\nusing this:\n  stateful = set accu\n  \\<forall>e\\<in>E -\n                 (set [] \\<union> set accu \\<union>\n                  {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = set accu \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = set accu \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "by(simp)"], ["proof (state)\nthis:\n  \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = stateful \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu E.\n       \\<lbrakk>\\<And>accu E.\n                   \\<lbrakk>valid_reqs (get_ACS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set edgesList \\<subseteq> E; set accu \\<subseteq> E;\n                    stateful =\n                    set (filter_compliant_stateful_ACS_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                          edgesList);\n                    \\<forall>e\\<in>E -\n                                   (set edgesList \\<union> set accu \\<union>\n                                    {e \\<in> E. e \\<in> backflows E}).\n                       \\<not> \\<Union>\n                               (get_offending_flows (get_ACS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = V, flows_fix = E,\nflows_state = set accu \\<union> {e}\\<rparr>))\n                              \\<subseteq> backflows\n     (filternew_flows_state\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = set accu \\<union> {e}\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>e\n        \\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = stateful \\<union> {e}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = stateful \\<union> {e}\\<rparr>);\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set (a # edgesList) \\<subseteq> E; set accu \\<subseteq> E;\n        stateful =\n        set (filter_compliant_stateful_ACS_accu\n              \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # edgesList));\n        \\<forall>e\\<in>E -\n                       (set (a # edgesList) \\<union> set accu \\<union>\n                        {e \\<in> E. e \\<in> backflows E}).\n           \\<not> \\<Union>\n                   (get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set accu \\<union> {e}\\<rparr>))\n                  \\<subseteq> backflows\n                               (filternew_flows_state\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\nset accu \\<union> {e}\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e\\<in>E -\n  (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n                            \\<not> \\<Union>\n                                    (get_offending_flows (get_ACS M)\n(stateful_policy_to_network_graph\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state = stateful \\<union> {e}\\<rparr>))\n                                   \\<subseteq> backflows\n          (filternew_flows_state\n            \\<lparr>hosts = V, flows_fix = E,\n               flows_state = stateful \\<union> {e}\\<rparr>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu E.\n       \\<lbrakk>\\<And>accu E.\n                   \\<lbrakk>valid_reqs (get_ACS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set edgesList \\<subseteq> E; set accu \\<subseteq> E;\n                    stateful =\n                    set (filter_compliant_stateful_ACS_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                          edgesList);\n                    \\<forall>e\\<in>E -\n                                   (set edgesList \\<union> set accu \\<union>\n                                    {e \\<in> E. e \\<in> backflows E}).\n                       \\<not> \\<Union>\n                               (get_offending_flows (get_ACS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = V, flows_fix = E,\nflows_state = set accu \\<union> {e}\\<rparr>))\n                              \\<subseteq> backflows\n     (filternew_flows_state\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = set accu \\<union> {e}\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>e\n        \\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = stateful \\<union> {e}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = stateful \\<union> {e}\\<rparr>);\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set (a # edgesList) \\<subseteq> E; set accu \\<subseteq> E;\n        stateful =\n        set (filter_compliant_stateful_ACS_accu\n              \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # edgesList));\n        \\<forall>e\\<in>E -\n                       (set (a # edgesList) \\<union> set accu \\<union>\n                        {e \\<in> E. e \\<in> backflows E}).\n           \\<not> \\<Union>\n                   (get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set accu \\<union> {e}\\<rparr>))\n                  \\<subseteq> backflows\n                               (filternew_flows_state\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\nset accu \\<union> {e}\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e\\<in>E -\n  (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n                            \\<not> \\<Union>\n                                    (get_offending_flows (get_ACS M)\n(stateful_policy_to_network_graph\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state = stateful \\<union> {e}\\<rparr>))\n                                   \\<subseteq> backflows\n          (filternew_flows_state\n            \\<lparr>hosts = V, flows_fix = E,\n               flows_state = stateful \\<union> {e}\\<rparr>)", "case (Cons a Es)\n     \\<comment> \\<open>case distinction\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>valid_reqs (get_ACS M);\n   wf_graph \\<lparr>nodes = V, edges = ?E\\<rparr>; set Es \\<subseteq> ?E;\n   set ?accu \\<subseteq> ?E;\n   stateful =\n   set (filter_compliant_stateful_ACS_accu\n         \\<lparr>nodes = V, edges = ?E\\<rparr> M ?accu Es);\n   \\<forall>e\\<in>?E -\n                  (set Es \\<union> set ?accu \\<union>\n                   {e \\<in> ?E. e \\<in> backflows ?E}).\n      \\<not> \\<Union>\n              (get_offending_flows (get_ACS M)\n                (stateful_policy_to_network_graph\n                  \\<lparr>hosts = V, flows_fix = ?E,\n                     flows_state = set ?accu \\<union> {e}\\<rparr>))\n             \\<subseteq> backflows\n                          (filternew_flows_state\n                            \\<lparr>hosts = V, flows_fix = ?E,\n                               flows_state =\n                                 set ?accu \\<union> {e}\\<rparr>)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>e\\<in>?E -\n                                   (stateful \\<union>\n                                    {e \\<in> ?E. e \\<in> backflows ?E}).\n                       \\<not> \\<Union>\n                               (get_offending_flows (get_ACS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = V, flows_fix = ?E,\nflows_state = stateful \\<union> {e}\\<rparr>))\n                              \\<subseteq> backflows\n     (filternew_flows_state\n       \\<lparr>hosts = V, flows_fix = ?E,\n          flows_state = stateful \\<union> {e}\\<rparr>)\n  valid_reqs (get_ACS M)\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  set (a # Es) \\<subseteq> E\n  set accu \\<subseteq> E\n  stateful =\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # Es))\n  \\<forall>e\\<in>E -\n                 (set (a # Es) \\<union> set accu \\<union>\n                  {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = set accu \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = set accu \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu E.\n       \\<lbrakk>\\<And>accu E.\n                   \\<lbrakk>valid_reqs (get_ACS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set edgesList \\<subseteq> E; set accu \\<subseteq> E;\n                    stateful =\n                    set (filter_compliant_stateful_ACS_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                          edgesList);\n                    \\<forall>e\\<in>E -\n                                   (set edgesList \\<union> set accu \\<union>\n                                    {e \\<in> E. e \\<in> backflows E}).\n                       \\<not> \\<Union>\n                               (get_offending_flows (get_ACS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = V, flows_fix = E,\nflows_state = set accu \\<union> {e}\\<rparr>))\n                              \\<subseteq> backflows\n     (filternew_flows_state\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = set accu \\<union> {e}\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>e\n        \\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = stateful \\<union> {e}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = stateful \\<union> {e}\\<rparr>);\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set (a # edgesList) \\<subseteq> E; set accu \\<subseteq> E;\n        stateful =\n        set (filter_compliant_stateful_ACS_accu\n              \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # edgesList));\n        \\<forall>e\\<in>E -\n                       (set (a # edgesList) \\<union> set accu \\<union>\n                        {e \\<in> E. e \\<in> backflows E}).\n           \\<not> \\<Union>\n                   (get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set accu \\<union> {e}\\<rparr>))\n                  \\<subseteq> backflows\n                               (filternew_flows_state\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\nset accu \\<union> {e}\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e\\<in>E -\n  (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n                            \\<not> \\<Union>\n                                    (get_offending_flows (get_ACS M)\n(stateful_policy_to_network_graph\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state = stateful \\<union> {e}\\<rparr>))\n                                   \\<subseteq> backflows\n          (filternew_flows_state\n            \\<lparr>hosts = V, flows_fix = E,\n               flows_state = stateful \\<union> {e}\\<rparr>)", "let ?caseDistinction=\"a \\<notin> backflows (E) \\<and>  (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = set (a # accu)\\<rparr>).\n                    F \\<subseteq> backflows (set (a # accu)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu E.\n       \\<lbrakk>\\<And>accu E.\n                   \\<lbrakk>valid_reqs (get_ACS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set edgesList \\<subseteq> E; set accu \\<subseteq> E;\n                    stateful =\n                    set (filter_compliant_stateful_ACS_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                          edgesList);\n                    \\<forall>e\\<in>E -\n                                   (set edgesList \\<union> set accu \\<union>\n                                    {e \\<in> E. e \\<in> backflows E}).\n                       \\<not> \\<Union>\n                               (get_offending_flows (get_ACS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = V, flows_fix = E,\nflows_state = set accu \\<union> {e}\\<rparr>))\n                              \\<subseteq> backflows\n     (filternew_flows_state\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = set accu \\<union> {e}\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>e\n        \\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = stateful \\<union> {e}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = stateful \\<union> {e}\\<rparr>);\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set (a # edgesList) \\<subseteq> E; set accu \\<subseteq> E;\n        stateful =\n        set (filter_compliant_stateful_ACS_accu\n              \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # edgesList));\n        \\<forall>e\\<in>E -\n                       (set (a # edgesList) \\<union> set accu \\<union>\n                        {e \\<in> E. e \\<in> backflows E}).\n           \\<not> \\<Union>\n                   (get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set accu \\<union> {e}\\<rparr>))\n                  \\<subseteq> backflows\n                               (filternew_flows_state\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\nset accu \\<union> {e}\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e\\<in>E -\n  (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n                            \\<not> \\<Union>\n                                    (get_offending_flows (get_ACS M)\n(stateful_policy_to_network_graph\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state = stateful \\<union> {e}\\<rparr>))\n                                   \\<subseteq> backflows\n          (filternew_flows_state\n            \\<lparr>hosts = V, flows_fix = E,\n               flows_state = stateful \\<union> {e}\\<rparr>)", "from Cons.prems(3)"], ["proof (chain)\npicking this:\n  set (a # Es) \\<subseteq> E", "have \"set Es \\<subseteq> E\""], ["proof (prove)\nusing this:\n  set (a # Es) \\<subseteq> E\n\ngoal (1 subgoal):\n 1. set Es \\<subseteq> E", "by simp"], ["proof (state)\nthis:\n  set Es \\<subseteq> E\n\ngoal (1 subgoal):\n 1. \\<And>a edgesList accu E.\n       \\<lbrakk>\\<And>accu E.\n                   \\<lbrakk>valid_reqs (get_ACS M);\n                    wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n                    set edgesList \\<subseteq> E; set accu \\<subseteq> E;\n                    stateful =\n                    set (filter_compliant_stateful_ACS_accu\n                          \\<lparr>nodes = V, edges = E\\<rparr> M accu\n                          edgesList);\n                    \\<forall>e\\<in>E -\n                                   (set edgesList \\<union> set accu \\<union>\n                                    {e \\<in> E. e \\<in> backflows E}).\n                       \\<not> \\<Union>\n                               (get_offending_flows (get_ACS M)\n                                 (stateful_policy_to_network_graph\n                                   \\<lparr>hosts = V, flows_fix = E,\nflows_state = set accu \\<union> {e}\\<rparr>))\n                              \\<subseteq> backflows\n     (filternew_flows_state\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = set accu \\<union> {e}\\<rparr>)\\<rbrakk>\n                   \\<Longrightarrow> \\<forall>e\n        \\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = stateful \\<union> {e}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = stateful \\<union> {e}\\<rparr>);\n        valid_reqs (get_ACS M);\n        wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n        set (a # edgesList) \\<subseteq> E; set accu \\<subseteq> E;\n        stateful =\n        set (filter_compliant_stateful_ACS_accu\n              \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # edgesList));\n        \\<forall>e\\<in>E -\n                       (set (a # edgesList) \\<union> set accu \\<union>\n                        {e \\<in> E. e \\<in> backflows E}).\n           \\<not> \\<Union>\n                   (get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set accu \\<union> {e}\\<rparr>))\n                  \\<subseteq> backflows\n                               (filternew_flows_state\n                                 \\<lparr>hosts = V, flows_fix = E,\n                                    flows_state =\nset accu \\<union> {e}\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>e\\<in>E -\n  (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n                            \\<not> \\<Union>\n                                    (get_offending_flows (get_ACS M)\n(stateful_policy_to_network_graph\n  \\<lparr>hosts = V, flows_fix = E,\n     flows_state = stateful \\<union> {e}\\<rparr>))\n                                   \\<subseteq> backflows\n          (filternew_flows_state\n            \\<lparr>hosts = V, flows_fix = E,\n               flows_state = stateful \\<union> {e}\\<rparr>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "proof(cases ?caseDistinction)"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<notin> backflows E \\<and>\n    (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set (a # accu)\\<rparr>).\n        F \\<subseteq> backflows (set (a # accu))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)\n 2. \\<not> (a \\<notin> backflows E \\<and>\n            (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                             (stateful_policy_to_network_graph\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state = set (a # accu)\\<rparr>).\n                F \\<subseteq> backflows (set (a # accu)))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "assume CaseTrue: ?caseDistinction"], ["proof (state)\nthis:\n  a \\<notin> backflows E \\<and>\n  (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state = set (a # accu)\\<rparr>).\n      F \\<subseteq> backflows (set (a # accu)))\n\ngoal (2 subgoals):\n 1. a \\<notin> backflows E \\<and>\n    (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set (a # accu)\\<rparr>).\n        F \\<subseteq> backflows (set (a # accu))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)\n 2. \\<not> (a \\<notin> backflows E \\<and>\n            (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                             (stateful_policy_to_network_graph\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state = set (a # accu)\\<rparr>).\n                F \\<subseteq> backflows (set (a # accu)))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "from CaseTrue"], ["proof (chain)\npicking this:\n  a \\<notin> backflows E \\<and>\n  (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state = set (a # accu)\\<rparr>).\n      F \\<subseteq> backflows (set (a # accu)))", "have \n          \"set (filter_compliant_stateful_ACS_accu \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # Es)) = \n           set (filter_compliant_stateful_ACS_accu \\<lparr>nodes = V, edges = E\\<rparr> M (a # accu) Es)\""], ["proof (prove)\nusing this:\n  a \\<notin> backflows E \\<and>\n  (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state = set (a # accu)\\<rparr>).\n      F \\<subseteq> backflows (set (a # accu)))\n\ngoal (1 subgoal):\n 1. set (filter_compliant_stateful_ACS_accu\n          \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # Es)) =\n    set (filter_compliant_stateful_ACS_accu\n          \\<lparr>nodes = V, edges = E\\<rparr> M (a # accu) Es)", "by(simp)"], ["proof (state)\nthis:\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # Es)) =\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M (a # accu) Es)\n\ngoal (2 subgoals):\n 1. a \\<notin> backflows E \\<and>\n    (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set (a # accu)\\<rparr>).\n        F \\<subseteq> backflows (set (a # accu))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)\n 2. \\<not> (a \\<notin> backflows E \\<and>\n            (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                             (stateful_policy_to_network_graph\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state = set (a # accu)\\<rparr>).\n                F \\<subseteq> backflows (set (a # accu)))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "from this Cons.prems(5)"], ["proof (chain)\npicking this:\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # Es)) =\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M (a # accu) Es)\n  stateful =\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # Es))", "have statefulsimp:\n          \"stateful = set (filter_compliant_stateful_ACS_accu \\<lparr>nodes = V, edges = E\\<rparr> M (a # accu) Es)\""], ["proof (prove)\nusing this:\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # Es)) =\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M (a # accu) Es)\n  stateful =\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # Es))\n\ngoal (1 subgoal):\n 1. stateful =\n    set (filter_compliant_stateful_ACS_accu\n          \\<lparr>nodes = V, edges = E\\<rparr> M (a # accu) Es)", "by simp"], ["proof (state)\nthis:\n  stateful =\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M (a # accu) Es)\n\ngoal (2 subgoals):\n 1. a \\<notin> backflows E \\<and>\n    (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set (a # accu)\\<rparr>).\n        F \\<subseteq> backflows (set (a # accu))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)\n 2. \\<not> (a \\<notin> backflows E \\<and>\n            (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                             (stateful_policy_to_network_graph\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state = set (a # accu)\\<rparr>).\n                F \\<subseteq> backflows (set (a # accu)))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "from Cons.prems(3) Cons.prems(4)"], ["proof (chain)\npicking this:\n  set (a # Es) \\<subseteq> E\n  set accu \\<subseteq> E", "have \"set (a # accu) \\<subseteq> E\""], ["proof (prove)\nusing this:\n  set (a # Es) \\<subseteq> E\n  set accu \\<subseteq> E\n\ngoal (1 subgoal):\n 1. set (a # accu) \\<subseteq> E", "by simp"], ["proof (state)\nthis:\n  set (a # accu) \\<subseteq> E\n\ngoal (2 subgoals):\n 1. a \\<notin> backflows E \\<and>\n    (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set (a # accu)\\<rparr>).\n        F \\<subseteq> backflows (set (a # accu))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)\n 2. \\<not> (a \\<notin> backflows E \\<and>\n            (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                             (stateful_policy_to_network_graph\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state = set (a # accu)\\<rparr>).\n                F \\<subseteq> backflows (set (a # accu)))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "have \"\\<forall>e\\<in>E - (set Es \\<union> set (a # accu) \\<union> {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n        \\<subseteq> backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = set (a # accu) \\<union> {e}\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>E -\n                   (set Es \\<union> set (a # accu) \\<union>\n                    {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state =\n                                  set (a # accu) \\<union> {e}\\<rparr>)", "proof(rule ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> E -\n               (set Es \\<union> set (a # accu) \\<union>\n                {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state =\n                                  set (a # accu) \\<union> {e}\\<rparr>)", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> E -\n               (set Es \\<union> set (a # accu) \\<union>\n                {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state =\n                                  set (a # accu) \\<union> {e}\\<rparr>)", "assume h1: \"e \\<in> E - (set Es \\<union> set (a # accu) \\<union> {e \\<in> E. e \\<in> backflows E})\""], ["proof (state)\nthis:\n  e \\<in> E -\n          (set Es \\<union> set (a # accu) \\<union>\n           {e \\<in> E. e \\<in> backflows E})\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> E -\n               (set Es \\<union> set (a # accu) \\<union>\n                {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state =\n                                  set (a # accu) \\<union> {e}\\<rparr>)", "from conjunct1[OF CaseTrue]"], ["proof (chain)\npicking this:\n  a \\<notin> backflows E", "have filternew_flows_state_moveout_a:\n              \"filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = set (a # accu) \\<union> {e}\\<rparr> = \n              {a} \\<union> filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {e}\\<rparr>\""], ["proof (prove)\nusing this:\n  a \\<notin> backflows E\n\ngoal (1 subgoal):\n 1. filternew_flows_state\n     \\<lparr>hosts = V, flows_fix = E,\n        flows_state = set (a # accu) \\<union> {e}\\<rparr> =\n    {a} \\<union>\n    filternew_flows_state\n     \\<lparr>hosts = V, flows_fix = E,\n        flows_state = set accu \\<union> {e}\\<rparr>", "apply(simp add: filternew_flows_state_alt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> backflows E \\<Longrightarrow>\n    insert e (insert a (set accu)) - backflows E =\n    insert a (insert e (set accu) - backflows E)", "by blast"], ["proof (state)\nthis:\n  filternew_flows_state\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = set (a # accu) \\<union> {e}\\<rparr> =\n  {a} \\<union>\n  filternew_flows_state\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = set accu \\<union> {e}\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> E -\n               (set Es \\<union> set (a # accu) \\<union>\n                {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state =\n                                  set (a # accu) \\<union> {e}\\<rparr>)", "have backflowssubseta: \"\\<And>X. backflows X \\<subseteq> backflows ({a} \\<union> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X. backflows X \\<subseteq> backflows ({a} \\<union> X)", "by(simp add: backflows_def, blast)"], ["proof (state)\nthis:\n  backflows ?X \\<subseteq> backflows ({a} \\<union> ?X)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> E -\n               (set Es \\<union> set (a # accu) \\<union>\n                {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state =\n                                  set (a # accu) \\<union> {e}\\<rparr>)", "from Cons.prems(6) h1"], ["proof (chain)\npicking this:\n  \\<forall>e\\<in>E -\n                 (set (a # Es) \\<union> set accu \\<union>\n                  {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = set accu \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = set accu \\<union> {e}\\<rparr>)\n  e \\<in> E -\n          (set Es \\<union> set (a # accu) \\<union>\n           {e \\<in> E. e \\<in> backflows E})", "have \n              \"\\<not> \\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {e}\\<rparr>))\n                \\<subseteq> backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {e}\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<forall>e\\<in>E -\n                 (set (a # Es) \\<union> set accu \\<union>\n                  {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = set accu \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = set accu \\<union> {e}\\<rparr>)\n  e \\<in> E -\n          (set Es \\<union> set (a # accu) \\<union>\n           {e \\<in> E. e \\<in> backflows E})\n\ngoal (1 subgoal):\n 1. \\<not> \\<Union>\n            (get_offending_flows (get_ACS M)\n              (stateful_policy_to_network_graph\n                \\<lparr>hosts = V, flows_fix = E,\n                   flows_state = set accu \\<union> {e}\\<rparr>))\n           \\<subseteq> backflows\n                        (filternew_flows_state\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = set accu \\<union> {e}\\<rparr>)", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = set accu \\<union> {e}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> E -\n               (set Es \\<union> set (a # accu) \\<union>\n                {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state =\n                                  set (a # accu) \\<union> {e}\\<rparr>)", "from this"], ["proof (chain)\npicking this:\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = set accu \\<union> {e}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {e}\\<rparr>)", "obtain dat_offender where \n              dat_in: \"dat_offender \\<in> \\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {e}\\<rparr>))\"\n              and dat_offends: \"dat_offender \\<notin> backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {e}\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = set accu \\<union> {e}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. (\\<And>dat_offender.\n        \\<lbrakk>dat_offender\n                 \\<in> \\<Union>\n                        (get_offending_flows (get_ACS M)\n                          (stateful_policy_to_network_graph\n                            \\<lparr>hosts = V, flows_fix = E,\n                               flows_state =\n                                 set accu \\<union> {e}\\<rparr>));\n         dat_offender\n         \\<notin> backflows\n                   (filternew_flows_state\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state =\n                          set accu \\<union> {e}\\<rparr>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  dat_offender\n  \\<in> \\<Union>\n         (get_offending_flows (get_ACS M)\n           (stateful_policy_to_network_graph\n             \\<lparr>hosts = V, flows_fix = E,\n                flows_state = set accu \\<union> {e}\\<rparr>))\n  dat_offender\n  \\<notin> backflows\n            (filternew_flows_state\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = set accu \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> E -\n               (set Es \\<union> set (a # accu) \\<union>\n                {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state =\n                                  set (a # accu) \\<union> {e}\\<rparr>)", "have wfGraphA: \"wf_graph (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = set (a # accu) \\<union> {e}\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_graph\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = set (a # accu) \\<union> {e}\\<rparr>)", "proof(simp add: stateful_policy_to_network_graph_def all_flows_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = V,\n        edges =\n          insert e\n           (insert a\n             (E \\<union> set accu \\<union>\n              backflows (insert e (insert a (set accu)))))\\<rparr>", "from Cons.prems(2) h1 Cons.prems(3) Cons.prems(4)"], ["proof (chain)\npicking this:\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  e \\<in> E -\n          (set Es \\<union> set (a # accu) \\<union>\n           {e \\<in> E. e \\<in> backflows E})\n  set (a # Es) \\<subseteq> E\n  set accu \\<subseteq> E", "have \"wf_graph \\<lparr>nodes=V, edges = insert e (insert a (set accu)) \\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  e \\<in> E -\n          (set Es \\<union> set (a # accu) \\<union>\n           {e \\<in> E. e \\<in> backflows E})\n  set (a # Es) \\<subseteq> E\n  set accu \\<subseteq> E\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = V, edges = insert e (insert a (set accu))\\<rparr>", "apply(auto simp add: wf_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>set accu \\<subseteq> E; fst ` E \\<subseteq> V; e \\<in> E;\n        a \\<in> E; set Es \\<subseteq> E; snd ` E \\<subseteq> V;\n        e \\<noteq> a; finite E; finite V; e \\<notin> set Es;\n        e \\<notin> set accu; e \\<notin> backflows E;\n        (aa, b) \\<in> set accu\\<rbrakk>\n       \\<Longrightarrow> b \\<in> V", "by force"], ["proof (state)\nthis:\n  wf_graph \\<lparr>nodes = V, edges = insert e (insert a (set accu))\\<rparr>\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = V,\n        edges =\n          insert e\n           (insert a\n             (E \\<union> set accu \\<union>\n              backflows (insert e (insert a (set accu)))))\\<rparr>", "from this backflows_wf"], ["proof (chain)\npicking this:\n  wf_graph \\<lparr>nodes = V, edges = insert e (insert a (set accu))\\<rparr>\n  wf_graph \\<lparr>nodes = ?N, edges = ?E\\<rparr> \\<Longrightarrow>\n  wf_graph \\<lparr>nodes = ?N, edges = backflows ?E\\<rparr>", "have vgh1: \"wf_graph \\<lparr>nodes = V, edges = backflows (insert e (insert a (set accu)))\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph \\<lparr>nodes = V, edges = insert e (insert a (set accu))\\<rparr>\n  wf_graph \\<lparr>nodes = ?N, edges = ?E\\<rparr> \\<Longrightarrow>\n  wf_graph \\<lparr>nodes = ?N, edges = backflows ?E\\<rparr>\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = V,\n        edges = backflows (insert e (insert a (set accu)))\\<rparr>", "by auto"], ["proof (state)\nthis:\n  wf_graph\n   \\<lparr>nodes = V,\n      edges = backflows (insert e (insert a (set accu)))\\<rparr>\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = V,\n        edges =\n          insert e\n           (insert a\n             (E \\<union> set accu \\<union>\n              backflows (insert e (insert a (set accu)))))\\<rparr>", "from Cons.prems(2) wf_graph_add_subset_edges h1  Cons.prems(3) Cons.prems(4)"], ["proof (chain)\npicking this:\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  \\<lbrakk>wf_graph \\<lparr>nodes = ?V, edges = ?E\\<rparr>;\n   ?E' \\<subseteq> ?E\\<rbrakk>\n  \\<Longrightarrow> wf_graph\n                     \\<lparr>nodes = ?V, edges = ?E \\<union> ?E'\\<rparr>\n  e \\<in> E -\n          (set Es \\<union> set (a # accu) \\<union>\n           {e \\<in> E. e \\<in> backflows E})\n  set (a # Es) \\<subseteq> E\n  set accu \\<subseteq> E", "have vgh2: \"wf_graph \\<lparr>nodes = V, edges = insert e ((insert a E) \\<union> set accu)\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  \\<lbrakk>wf_graph \\<lparr>nodes = ?V, edges = ?E\\<rparr>;\n   ?E' \\<subseteq> ?E\\<rbrakk>\n  \\<Longrightarrow> wf_graph\n                     \\<lparr>nodes = ?V, edges = ?E \\<union> ?E'\\<rparr>\n  e \\<in> E -\n          (set Es \\<union> set (a # accu) \\<union>\n           {e \\<in> E. e \\<in> backflows E})\n  set (a # Es) \\<subseteq> E\n  set accu \\<subseteq> E\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = V,\n        edges = insert e (insert a E \\<union> set accu)\\<rparr>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     \\<And>V E E'.\n        \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n         E' \\<subseteq> E\\<rbrakk>\n        \\<Longrightarrow> wf_graph\n                           \\<lparr>nodes = V, edges = E \\<union> E'\\<rparr>;\n     e \\<in> E -\n             (set Es \\<union> set (a # accu) \\<union>\n              {e \\<in> E. e \\<in> backflows E});\n     set (a # Es) \\<subseteq> E; set accu \\<subseteq> E\\<rbrakk>\n    \\<Longrightarrow> wf_graph\n                       \\<lparr>nodes = V,\n                          edges =\n                            insert e (insert a E \\<union> set accu)\\<rparr>", "have f1: \"e \\<in> E - (set Es \\<union> insert a (set accu) \\<union> {R \\<in> E. R \\<in> backflows E})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<in> E -\n            (set Es \\<union> insert a (set accu) \\<union>\n             {R \\<in> E. R \\<in> backflows E})", "using h1"], ["proof (prove)\nusing this:\n  e \\<in> E -\n          (set Es \\<union> set (a # accu) \\<union>\n           {e \\<in> E. e \\<in> backflows E})\n\ngoal (1 subgoal):\n 1. e \\<in> E -\n            (set Es \\<union> insert a (set accu) \\<union>\n             {R \\<in> E. R \\<in> backflows E})", "by simp"], ["proof (state)\nthis:\n  e \\<in> E -\n          (set Es \\<union> insert a (set accu) \\<union>\n           {R \\<in> E. R \\<in> backflows E})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     \\<And>V E E'.\n        \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n         E' \\<subseteq> E\\<rbrakk>\n        \\<Longrightarrow> wf_graph\n                           \\<lparr>nodes = V, edges = E \\<union> E'\\<rparr>;\n     e \\<in> E -\n             (set Es \\<union> set (a # accu) \\<union>\n              {e \\<in> E. e \\<in> backflows E});\n     set (a # Es) \\<subseteq> E; set accu \\<subseteq> E\\<rbrakk>\n    \\<Longrightarrow> wf_graph\n                       \\<lparr>nodes = V,\n                          edges =\n                            insert e (insert a E \\<union> set accu)\\<rparr>", "have f2: \"insert a (set accu) \\<subseteq> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert a (set accu) \\<subseteq> E", "using \\<open>set (a # accu) \\<subseteq> E\\<close>"], ["proof (prove)\nusing this:\n  set (a # accu) \\<subseteq> E\n\ngoal (1 subgoal):\n 1. insert a (set accu) \\<subseteq> E", "by simp"], ["proof (state)\nthis:\n  insert a (set accu) \\<subseteq> E\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     \\<And>V E E'.\n        \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n         E' \\<subseteq> E\\<rbrakk>\n        \\<Longrightarrow> wf_graph\n                           \\<lparr>nodes = V, edges = E \\<union> E'\\<rparr>;\n     e \\<in> E -\n             (set Es \\<union> set (a # accu) \\<union>\n              {e \\<in> E. e \\<in> backflows E});\n     set (a # Es) \\<subseteq> E; set accu \\<subseteq> E\\<rbrakk>\n    \\<Longrightarrow> wf_graph\n                       \\<lparr>nodes = V,\n                          edges =\n                            insert e (insert a E \\<union> set accu)\\<rparr>", "have f3: \"e \\<in> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<in> E", "using f1"], ["proof (prove)\nusing this:\n  e \\<in> E -\n          (set Es \\<union> insert a (set accu) \\<union>\n           {R \\<in> E. R \\<in> backflows E})\n\ngoal (1 subgoal):\n 1. e \\<in> E", "by fastforce"], ["proof (state)\nthis:\n  e \\<in> E\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     \\<And>V E E'.\n        \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n         E' \\<subseteq> E\\<rbrakk>\n        \\<Longrightarrow> wf_graph\n                           \\<lparr>nodes = V, edges = E \\<union> E'\\<rparr>;\n     e \\<in> E -\n             (set Es \\<union> set (a # accu) \\<union>\n              {e \\<in> E. e \\<in> backflows E});\n     set (a # Es) \\<subseteq> E; set accu \\<subseteq> E\\<rbrakk>\n    \\<Longrightarrow> wf_graph\n                       \\<lparr>nodes = V,\n                          edges =\n                            insert e (insert a E \\<union> set accu)\\<rparr>", "have \"E \\<union> insert a (set accu) = E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<union> insert a (set accu) = E", "using f2"], ["proof (prove)\nusing this:\n  insert a (set accu) \\<subseteq> E\n\ngoal (1 subgoal):\n 1. E \\<union> insert a (set accu) = E", "by fastforce"], ["proof (state)\nthis:\n  E \\<union> insert a (set accu) = E\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     \\<And>V E E'.\n        \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n         E' \\<subseteq> E\\<rbrakk>\n        \\<Longrightarrow> wf_graph\n                           \\<lparr>nodes = V, edges = E \\<union> E'\\<rparr>;\n     e \\<in> E -\n             (set Es \\<union> set (a # accu) \\<union>\n              {e \\<in> E. e \\<in> backflows E});\n     set (a # Es) \\<subseteq> E; set accu \\<subseteq> E\\<rbrakk>\n    \\<Longrightarrow> wf_graph\n                       \\<lparr>nodes = V,\n                          edges =\n                            insert e (insert a E \\<union> set accu)\\<rparr>", "thus \"wf_graph \\<lparr>nodes = V, edges = insert e (insert a E \\<union> set accu)\\<rparr>\""], ["proof (prove)\nusing this:\n  E \\<union> insert a (set accu) = E\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = V,\n        edges = insert e (insert a E \\<union> set accu)\\<rparr>", "using f3 Cons.prems(2) Un_insert_right insert_absorb sup_commute"], ["proof (prove)\nusing this:\n  E \\<union> insert a (set accu) = E\n  e \\<in> E\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  ?A \\<union> insert ?a ?B = insert ?a (?A \\<union> ?B)\n  ?a \\<in> ?A \\<Longrightarrow> insert ?a ?A = ?A\n  sup ?x ?y = sup ?y ?x\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = V,\n        edges = insert e (insert a E \\<union> set accu)\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  wf_graph\n   \\<lparr>nodes = V,\n      edges = insert e (insert a E \\<union> set accu)\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wf_graph\n   \\<lparr>nodes = V,\n      edges = insert e (insert a E \\<union> set accu)\\<rparr>\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = V,\n        edges =\n          insert e\n           (insert a\n             (E \\<union> set accu \\<union>\n              backflows (insert e (insert a (set accu)))))\\<rparr>", "from vgh1 vgh2 wf_graph_union_edges"], ["proof (chain)\npicking this:\n  wf_graph\n   \\<lparr>nodes = V,\n      edges = backflows (insert e (insert a (set accu)))\\<rparr>\n  wf_graph\n   \\<lparr>nodes = V,\n      edges = insert e (insert a E \\<union> set accu)\\<rparr>\n  \\<lbrakk>wf_graph \\<lparr>nodes = ?V, edges = ?E\\<rparr>;\n   wf_graph \\<lparr>nodes = ?V, edges = ?E'\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> wf_graph\n                     \\<lparr>nodes = ?V, edges = ?E \\<union> ?E'\\<rparr>", "show \"wf_graph \\<lparr>nodes = V, edges = insert e (insert a (E \\<union> set accu \\<union> backflows (insert e (insert a (set accu)))))\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph\n   \\<lparr>nodes = V,\n      edges = backflows (insert e (insert a (set accu)))\\<rparr>\n  wf_graph\n   \\<lparr>nodes = V,\n      edges = insert e (insert a E \\<union> set accu)\\<rparr>\n  \\<lbrakk>wf_graph \\<lparr>nodes = ?V, edges = ?E\\<rparr>;\n   wf_graph \\<lparr>nodes = ?V, edges = ?E'\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> wf_graph\n                     \\<lparr>nodes = ?V, edges = ?E \\<union> ?E'\\<rparr>\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = V,\n        edges =\n          insert e\n           (insert a\n             (E \\<union> set accu \\<union>\n              backflows (insert e (insert a (set accu)))))\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  wf_graph\n   \\<lparr>nodes = V,\n      edges =\n        insert e\n         (insert a\n           (E \\<union> set accu \\<union>\n            backflows (insert e (insert a (set accu)))))\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wf_graph\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = V, flows_fix = E,\n        flows_state = set (a # accu) \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> E -\n               (set Es \\<union> set (a # accu) \\<union>\n                {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state =\n                                  set (a # accu) \\<union> {e}\\<rparr>)", "from dat_in"], ["proof (chain)\npicking this:\n  dat_offender\n  \\<in> \\<Union>\n         (get_offending_flows (get_ACS M)\n           (stateful_policy_to_network_graph\n             \\<lparr>hosts = V, flows_fix = E,\n                flows_state = set accu \\<union> {e}\\<rparr>))", "have dat_in_simplified: \n              \"dat_offender \\<in> \\<Union>(get_offending_flows (get_ACS M) \\<lparr>nodes = V, edges = insert e (E \\<union> set accu \\<union> backflows (insert e (set accu)))\\<rparr>)\""], ["proof (prove)\nusing this:\n  dat_offender\n  \\<in> \\<Union>\n         (get_offending_flows (get_ACS M)\n           (stateful_policy_to_network_graph\n             \\<lparr>hosts = V, flows_fix = E,\n                flows_state = set accu \\<union> {e}\\<rparr>))\n\ngoal (1 subgoal):\n 1. dat_offender\n    \\<in> \\<Union>\n           (get_offending_flows (get_ACS M)\n             \\<lparr>nodes = V,\n                edges =\n                  insert e\n                   (E \\<union> set accu \\<union>\n                    backflows (insert e (set accu)))\\<rparr>)", "by(simp add: stateful_policy_to_network_graph_def all_flows_def)"], ["proof (state)\nthis:\n  dat_offender\n  \\<in> \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                insert e\n                 (E \\<union> set accu \\<union>\n                  backflows (insert e (set accu)))\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> E -\n               (set Es \\<union> set (a # accu) \\<union>\n                {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state =\n                                  set (a # accu) \\<union> {e}\\<rparr>)", "have subsethlp: \"insert e (E \\<union> set accu \\<union> backflows (insert e (set accu))) \\<subseteq> E \\<union> (set (a # accu) \\<union> {e}) \\<union> backflows (set (a # accu) \\<union> {e})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert e (E \\<union> set accu \\<union> backflows (insert e (set accu)))\n    \\<subseteq> E \\<union> (set (a # accu) \\<union> {e}) \\<union>\n                backflows (set (a # accu) \\<union> {e})", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<subseteq> insert e\n                   (insert a\n                     (E \\<union> set accu \\<union>\n                      backflows (insert e (insert a (set accu))))) \\<and>\n    set accu\n    \\<subseteq> insert e\n                 (insert a\n                   (E \\<union> set accu \\<union>\n                    backflows (insert e (insert a (set accu))))) \\<and>\n    backflows (insert e (set accu))\n    \\<subseteq> insert e\n                 (insert a\n                   (E \\<union> set accu \\<union>\n                    backflows (insert e (insert a (set accu)))))", "apply(rule, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set accu\n    \\<subseteq> insert e\n                 (insert a\n                   (E \\<union> set accu \\<union>\n                    backflows (insert e (insert a (set accu))))) \\<and>\n    backflows (insert e (set accu))\n    \\<subseteq> insert e\n                 (insert a\n                   (E \\<union> set accu \\<union>\n                    backflows (insert e (insert a (set accu)))))", "apply(rule, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. backflows (insert e (set accu))\n    \\<subseteq> insert e\n                 (insert a\n                   (E \\<union> set accu \\<union>\n                    backflows (insert e (insert a (set accu)))))", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> backflows (insert e (set accu)) \\<Longrightarrow>\n       x \\<in> insert e\n                (insert a\n                  (E \\<union> set accu \\<union>\n                   backflows (insert e (insert a (set accu)))))", "apply(simp add: backflows_def, fast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  insert e (E \\<union> set accu \\<union> backflows (insert e (set accu)))\n  \\<subseteq> E \\<union> (set (a # accu) \\<union> {e}) \\<union>\n              backflows (set (a # accu) \\<union> {e})\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> E -\n               (set Es \\<union> set (a # accu) \\<union>\n                {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state =\n                                  set (a # accu) \\<union> {e}\\<rparr>)", "from get_offending_flows_union_mono[OF \n                Cons.prems(1) \n                wfGraphA[simplified stateful_policy_to_network_graph_def all_flows_def graph.select_convs stateful_policy.select_convs],\n                OF subsethlp]\n            dat_in_simplified"], ["proof (chain)\npicking this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          insert e\n           (E \\<union> set accu \\<union>\n            backflows (insert e (set accu)))\\<rparr>)\n  \\<subseteq> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 \\<lparr>nodes = V,\n                    edges =\n                      E \\<union> (set (a # accu) \\<union> {e}) \\<union>\n                      backflows (set (a # accu) \\<union> {e})\\<rparr>)\n  dat_offender\n  \\<in> \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                insert e\n                 (E \\<union> set accu \\<union>\n                  backflows (insert e (set accu)))\\<rparr>)", "have dat_in_a: \"dat_offender \\<in> \\<Union>(get_offending_flows (get_ACS M) \n              (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = set (a # accu) \\<union> {e}\\<rparr>))\""], ["proof (prove)\nusing this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          insert e\n           (E \\<union> set accu \\<union>\n            backflows (insert e (set accu)))\\<rparr>)\n  \\<subseteq> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 \\<lparr>nodes = V,\n                    edges =\n                      E \\<union> (set (a # accu) \\<union> {e}) \\<union>\n                      backflows (set (a # accu) \\<union> {e})\\<rparr>)\n  dat_offender\n  \\<in> \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                insert e\n                 (E \\<union> set accu \\<union>\n                  backflows (insert e (set accu)))\\<rparr>)\n\ngoal (1 subgoal):\n 1. dat_offender\n    \\<in> \\<Union>\n           (get_offending_flows (get_ACS M)\n             (stateful_policy_to_network_graph\n               \\<lparr>hosts = V, flows_fix = E,\n                  flows_state = set (a # accu) \\<union> {e}\\<rparr>))", "by(simp add: stateful_policy_to_network_graph_def all_flows_def, fast)"], ["proof (state)\nthis:\n  dat_offender\n  \\<in> \\<Union>\n         (get_offending_flows (get_ACS M)\n           (stateful_policy_to_network_graph\n             \\<lparr>hosts = V, flows_fix = E,\n                flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> E -\n               (set Es \\<union> set (a # accu) \\<union>\n                {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state =\n                                  set (a # accu) \\<union> {e}\\<rparr>)", "have \"dat_offender \\<noteq> (snd a, fst a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dat_offender \\<noteq> (snd a, fst a)", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> dat_offender \\<noteq> (snd a, fst a) \\<Longrightarrow> False", "assume \"\\<not> dat_offender \\<noteq> (snd a, fst a)\""], ["proof (state)\nthis:\n  \\<not> dat_offender \\<noteq> (snd a, fst a)\n\ngoal (1 subgoal):\n 1. \\<not> dat_offender \\<noteq> (snd a, fst a) \\<Longrightarrow> False", "hence hlpassm: \"dat_offender = (snd a, fst a)\""], ["proof (prove)\nusing this:\n  \\<not> dat_offender \\<noteq> (snd a, fst a)\n\ngoal (1 subgoal):\n 1. dat_offender = (snd a, fst a)", "by simp"], ["proof (state)\nthis:\n  dat_offender = (snd a, fst a)\n\ngoal (1 subgoal):\n 1. \\<not> dat_offender \\<noteq> (snd a, fst a) \\<Longrightarrow> False", "from this"], ["proof (chain)\npicking this:\n  dat_offender = (snd a, fst a)", "obtain a1 a2 where \"dat_offender = (a2, a1)\""], ["proof (prove)\nusing this:\n  dat_offender = (snd a, fst a)\n\ngoal (1 subgoal):\n 1. (\\<And>a2 a1.\n        dat_offender = (a2, a1) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  dat_offender = (a2, a1)\n\ngoal (1 subgoal):\n 1. \\<not> dat_offender \\<noteq> (snd a, fst a) \\<Longrightarrow> False", "have \"\\<Union>(get_offending_flows (get_ACS M) \\<lparr>nodes = V, edges = insert e (E \\<union> set accu \\<union> backflows (insert e (set accu)))\\<rparr>) \\<subseteq> \n                  insert e (E \\<union> set accu \\<union> backflows (insert e (set accu)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges =\n            insert e\n             (E \\<union> set accu \\<union>\n              backflows (insert e (set accu)))\\<rparr>)\n    \\<subseteq> insert e\n                 (E \\<union> set accu \\<union>\n                  backflows (insert e (set accu)))", "by (metis Cons.prems(1) Sup_le_iff get_offending_flows_subseteq_edges)"], ["proof (state)\nthis:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          insert e\n           (E \\<union> set accu \\<union>\n            backflows (insert e (set accu)))\\<rparr>)\n  \\<subseteq> insert e\n               (E \\<union> set accu \\<union>\n                backflows (insert e (set accu)))\n\ngoal (1 subgoal):\n 1. \\<not> dat_offender \\<noteq> (snd a, fst a) \\<Longrightarrow> False", "from this h1"], ["proof (chain)\npicking this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          insert e\n           (E \\<union> set accu \\<union>\n            backflows (insert e (set accu)))\\<rparr>)\n  \\<subseteq> insert e\n               (E \\<union> set accu \\<union>\n                backflows (insert e (set accu)))\n  e \\<in> E -\n          (set Es \\<union> set (a # accu) \\<union>\n           {e \\<in> E. e \\<in> backflows E})", "have UN_get_subset: \n                    \"\\<Union>(get_offending_flows (get_ACS M) \\<lparr>nodes = V, edges = insert e (E \\<union> set accu \\<union> backflows (insert e (set accu)))\\<rparr>) \\<subseteq> \n                   (E \\<union> set accu \\<union> backflows (insert e (set accu)))\""], ["proof (prove)\nusing this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          insert e\n           (E \\<union> set accu \\<union>\n            backflows (insert e (set accu)))\\<rparr>)\n  \\<subseteq> insert e\n               (E \\<union> set accu \\<union>\n                backflows (insert e (set accu)))\n  e \\<in> E -\n          (set Es \\<union> set (a # accu) \\<union>\n           {e \\<in> E. e \\<in> backflows E})\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges =\n            insert e\n             (E \\<union> set accu \\<union>\n              backflows (insert e (set accu)))\\<rparr>)\n    \\<subseteq> E \\<union> set accu \\<union> backflows (insert e (set accu))", "by blast"], ["proof (state)\nthis:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          insert e\n           (E \\<union> set accu \\<union>\n            backflows (insert e (set accu)))\\<rparr>)\n  \\<subseteq> E \\<union> set accu \\<union> backflows (insert e (set accu))\n\ngoal (1 subgoal):\n 1. \\<not> dat_offender \\<noteq> (snd a, fst a) \\<Longrightarrow> False", "from dat_offends"], ["proof (chain)\npicking this:\n  dat_offender\n  \\<notin> backflows\n            (filternew_flows_state\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = set accu \\<union> {e}\\<rparr>)", "have dat_offends_simplified: \n              \"dat_offender \\<notin> backflows (insert e (set accu)) - E\""], ["proof (prove)\nusing this:\n  dat_offender\n  \\<notin> backflows\n            (filternew_flows_state\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = set accu \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. dat_offender \\<notin> backflows (insert e (set accu)) - E", "by(simp only: filternew_flows_state_alt stateful_policy.select_convs backflows_minus_backflows, simp)"], ["proof (state)\nthis:\n  dat_offender \\<notin> backflows (insert e (set accu)) - E\n\ngoal (1 subgoal):\n 1. \\<not> dat_offender \\<noteq> (snd a, fst a) \\<Longrightarrow> False", "from conjunct1[OF CaseTrue] hlpassm"], ["proof (chain)\npicking this:\n  a \\<notin> backflows E\n  dat_offender = (snd a, fst a)", "have \"dat_offender \\<notin> E\""], ["proof (prove)\nusing this:\n  a \\<notin> backflows E\n  dat_offender = (snd a, fst a)\n\ngoal (1 subgoal):\n 1. dat_offender \\<notin> E", "by(simp add: backflows_def, fastforce)"], ["proof (state)\nthis:\n  dat_offender \\<notin> E\n\ngoal (1 subgoal):\n 1. \\<not> dat_offender \\<noteq> (snd a, fst a) \\<Longrightarrow> False", "from dat_in_simplified UN_get_subset this"], ["proof (chain)\npicking this:\n  dat_offender\n  \\<in> \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                insert e\n                 (E \\<union> set accu \\<union>\n                  backflows (insert e (set accu)))\\<rparr>)\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          insert e\n           (E \\<union> set accu \\<union>\n            backflows (insert e (set accu)))\\<rparr>)\n  \\<subseteq> E \\<union> set accu \\<union> backflows (insert e (set accu))\n  dat_offender \\<notin> E", "have \"dat_offender \\<in> set accu \\<union> backflows (insert e (set accu))\""], ["proof (prove)\nusing this:\n  dat_offender\n  \\<in> \\<Union>\n         (get_offending_flows (get_ACS M)\n           \\<lparr>nodes = V,\n              edges =\n                insert e\n                 (E \\<union> set accu \\<union>\n                  backflows (insert e (set accu)))\\<rparr>)\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          insert e\n           (E \\<union> set accu \\<union>\n            backflows (insert e (set accu)))\\<rparr>)\n  \\<subseteq> E \\<union> set accu \\<union> backflows (insert e (set accu))\n  dat_offender \\<notin> E\n\ngoal (1 subgoal):\n 1. dat_offender \\<in> set accu \\<union> backflows (insert e (set accu))", "by blast"], ["proof (state)\nthis:\n  dat_offender \\<in> set accu \\<union> backflows (insert e (set accu))\n\ngoal (1 subgoal):\n 1. \\<not> dat_offender \\<noteq> (snd a, fst a) \\<Longrightarrow> False", "from this Cons.prems(4) \\<open>dat_offender \\<notin> E\\<close>"], ["proof (chain)\npicking this:\n  dat_offender \\<in> set accu \\<union> backflows (insert e (set accu))\n  set accu \\<subseteq> E\n  dat_offender \\<notin> E", "have \"dat_offender \\<in> backflows (insert e (set accu))\""], ["proof (prove)\nusing this:\n  dat_offender \\<in> set accu \\<union> backflows (insert e (set accu))\n  set accu \\<subseteq> E\n  dat_offender \\<notin> E\n\ngoal (1 subgoal):\n 1. dat_offender \\<in> backflows (insert e (set accu))", "by blast"], ["proof (state)\nthis:\n  dat_offender \\<in> backflows (insert e (set accu))\n\ngoal (1 subgoal):\n 1. \\<not> dat_offender \\<noteq> (snd a, fst a) \\<Longrightarrow> False", "from dat_offends_simplified[simplified] this"], ["proof (chain)\npicking this:\n  dat_offender \\<in> backflows (insert e (set accu)) \\<longrightarrow>\n  dat_offender \\<in> E\n  dat_offender \\<in> backflows (insert e (set accu))", "have \"dat_offender \\<in> E\""], ["proof (prove)\nusing this:\n  dat_offender \\<in> backflows (insert e (set accu)) \\<longrightarrow>\n  dat_offender \\<in> E\n  dat_offender \\<in> backflows (insert e (set accu))\n\ngoal (1 subgoal):\n 1. dat_offender \\<in> E", "by simp"], ["proof (state)\nthis:\n  dat_offender \\<in> E\n\ngoal (1 subgoal):\n 1. \\<not> dat_offender \\<noteq> (snd a, fst a) \\<Longrightarrow> False", "from \\<open>dat_offender \\<notin> E\\<close> \\<open>dat_offender \\<in> E\\<close>"], ["proof (chain)\npicking this:\n  dat_offender \\<notin> E\n  dat_offender \\<in> E", "show False"], ["proof (prove)\nusing this:\n  dat_offender \\<notin> E\n  dat_offender \\<in> E\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dat_offender \\<noteq> (snd a, fst a)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> E -\n               (set Es \\<union> set (a # accu) \\<union>\n                {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state =\n                                  set (a # accu) \\<union> {e}\\<rparr>)", "from this dat_offends"], ["proof (chain)\npicking this:\n  dat_offender \\<noteq> (snd a, fst a)\n  dat_offender\n  \\<notin> backflows\n            (filternew_flows_state\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = set accu \\<union> {e}\\<rparr>)", "have \n              \"dat_offender \\<notin> backflows ({a} \\<union> filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {e}\\<rparr>)\""], ["proof (prove)\nusing this:\n  dat_offender \\<noteq> (snd a, fst a)\n  dat_offender\n  \\<notin> backflows\n            (filternew_flows_state\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = set accu \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. dat_offender\n    \\<notin> backflows\n              ({a} \\<union>\n               filternew_flows_state\n                \\<lparr>hosts = V, flows_fix = E,\n                   flows_state = set accu \\<union> {e}\\<rparr>)", "apply(simp add: backflows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dat_offender \\<noteq> (snd a, fst a);\n     \\<not> (case dat_offender of\n             (r, s) \\<Rightarrow>\n               (s, r)\n               \\<in> filternew_flows_state\n                      \\<lparr>hosts = V, flows_fix = E,\n                         flows_state = insert e (set accu)\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> \\<not> (case dat_offender of\n                              (r, s) \\<Rightarrow>\n                                (s, r) = a \\<or>\n                                (s, r)\n                                \\<in> filternew_flows_state\n \\<lparr>hosts = V, flows_fix = E,\n    flows_state = insert e (set accu)\\<rparr>)", "by force"], ["proof (state)\nthis:\n  dat_offender\n  \\<notin> backflows\n            ({a} \\<union>\n             filternew_flows_state\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = set accu \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> E -\n               (set Es \\<union> set (a # accu) \\<union>\n                {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state =\n                                  set (a # accu) \\<union> {e}\\<rparr>)", "from dat_in_a this"], ["proof (chain)\npicking this:\n  dat_offender\n  \\<in> \\<Union>\n         (get_offending_flows (get_ACS M)\n           (stateful_policy_to_network_graph\n             \\<lparr>hosts = V, flows_fix = E,\n                flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n  dat_offender\n  \\<notin> backflows\n            ({a} \\<union>\n             filternew_flows_state\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = set accu \\<union> {e}\\<rparr>)", "show \"\\<not> \\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = set (a # accu) \\<union> {e}\\<rparr>)\""], ["proof (prove)\nusing this:\n  dat_offender\n  \\<in> \\<Union>\n         (get_offending_flows (get_ACS M)\n           (stateful_policy_to_network_graph\n             \\<lparr>hosts = V, flows_fix = E,\n                flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n  dat_offender\n  \\<notin> backflows\n            ({a} \\<union>\n             filternew_flows_state\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = set accu \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<not> \\<Union>\n            (get_offending_flows (get_ACS M)\n              (stateful_policy_to_network_graph\n                \\<lparr>hosts = V, flows_fix = E,\n                   flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n           \\<subseteq> backflows\n                        (filternew_flows_state\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state =\n                               set (a # accu) \\<union> {e}\\<rparr>)", "apply(subst filternew_flows_state_moveout_a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dat_offender\n             \\<in> \\<Union>\n                    (get_offending_flows (get_ACS M)\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state =\n                             set (a # accu) \\<union> {e}\\<rparr>));\n     dat_offender\n     \\<notin> backflows\n               ({a} \\<union>\n                filternew_flows_state\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = set accu \\<union> {e}\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> \\<not> \\<Union>\n                              (get_offending_flows (get_ACS M)\n                                (stateful_policy_to_network_graph\n                                  \\<lparr>hosts = V, flows_fix = E,\n                                     flows_state =\n set (a # accu) \\<union> {e}\\<rparr>))\n                             \\<subseteq> backflows\n    ({a} \\<union>\n     filternew_flows_state\n      \\<lparr>hosts = V, flows_fix = E,\n         flows_state = set accu \\<union> {e}\\<rparr>)", "by blast"], ["proof (state)\nthis:\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state =\n                             set (a # accu) \\<union> {e}\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>e\\<in>E -\n                 (set Es \\<union> set (a # accu) \\<union>\n                  {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = set (a # accu) \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state =\n                                set (a # accu) \\<union> {e}\\<rparr>)\n\ngoal (2 subgoals):\n 1. a \\<notin> backflows E \\<and>\n    (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph\n                       \\<lparr>hosts = V, flows_fix = E,\n                          flows_state = set (a # accu)\\<rparr>).\n        F \\<subseteq> backflows (set (a # accu))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)\n 2. \\<not> (a \\<notin> backflows E \\<and>\n            (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                             (stateful_policy_to_network_graph\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state = set (a # accu)\\<rparr>).\n                F \\<subseteq> backflows (set (a # accu)))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "from Cons.IH[OF Cons.prems(1) Cons.prems(2) \\<open>set Es \\<subseteq> E\\<close> \\<open>set (a # accu) \\<subseteq> E\\<close> statefulsimp this ]"], ["proof (chain)\npicking this:\n  \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = stateful \\<union> {e}\\<rparr>)", "show \"?case\""], ["proof (prove)\nusing this:\n  \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = stateful \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "by(simp)"], ["proof (state)\nthis:\n  \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = stateful \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<not> (a \\<notin> backflows E \\<and>\n            (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                             (stateful_policy_to_network_graph\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state = set (a # accu)\\<rparr>).\n                F \\<subseteq> backflows (set (a # accu)))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (a \\<notin> backflows E \\<and>\n            (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                             (stateful_policy_to_network_graph\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state = set (a # accu)\\<rparr>).\n                F \\<subseteq> backflows (set (a # accu)))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "assume CaseFalse: \"\\<not> ?caseDistinction\""], ["proof (state)\nthis:\n  \\<not> (a \\<notin> backflows E \\<and>\n          (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                           (stateful_policy_to_network_graph\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = set (a # accu)\\<rparr>).\n              F \\<subseteq> backflows (set (a # accu))))\n\ngoal (1 subgoal):\n 1. \\<not> (a \\<notin> backflows E \\<and>\n            (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                             (stateful_policy_to_network_graph\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state = set (a # accu)\\<rparr>).\n                F \\<subseteq> backflows (set (a # accu)))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "from CaseFalse"], ["proof (chain)\npicking this:\n  \\<not> (a \\<notin> backflows E \\<and>\n          (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                           (stateful_policy_to_network_graph\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = set (a # accu)\\<rparr>).\n              F \\<subseteq> backflows (set (a # accu))))", "have funapplysimp: \n          \"set (filter_compliant_stateful_ACS_accu \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # Es)) = \n           set (filter_compliant_stateful_ACS_accu \\<lparr>nodes = V, edges = E\\<rparr> M accu Es)\""], ["proof (prove)\nusing this:\n  \\<not> (a \\<notin> backflows E \\<and>\n          (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                           (stateful_policy_to_network_graph\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = set (a # accu)\\<rparr>).\n              F \\<subseteq> backflows (set (a # accu))))\n\ngoal (1 subgoal):\n 1. set (filter_compliant_stateful_ACS_accu\n          \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # Es)) =\n    set (filter_compliant_stateful_ACS_accu\n          \\<lparr>nodes = V, edges = E\\<rparr> M accu Es)", "by auto"], ["proof (state)\nthis:\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # Es)) =\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu Es)\n\ngoal (1 subgoal):\n 1. \\<not> (a \\<notin> backflows E \\<and>\n            (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                             (stateful_policy_to_network_graph\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state = set (a # accu)\\<rparr>).\n                F \\<subseteq> backflows (set (a # accu)))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "from this Cons.prems(5)"], ["proof (chain)\npicking this:\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # Es)) =\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu Es)\n  stateful =\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # Es))", "have statefulsimp:\n          \"stateful = set (filter_compliant_stateful_ACS_accu \\<lparr>nodes = V, edges = E\\<rparr> M accu Es)\""], ["proof (prove)\nusing this:\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # Es)) =\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu Es)\n  stateful =\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu (a # Es))\n\ngoal (1 subgoal):\n 1. stateful =\n    set (filter_compliant_stateful_ACS_accu\n          \\<lparr>nodes = V, edges = E\\<rparr> M accu Es)", "by simp"], ["proof (state)\nthis:\n  stateful =\n  set (filter_compliant_stateful_ACS_accu\n        \\<lparr>nodes = V, edges = E\\<rparr> M accu Es)\n\ngoal (1 subgoal):\n 1. \\<not> (a \\<notin> backflows E \\<and>\n            (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                             (stateful_policy_to_network_graph\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state = set (a # accu)\\<rparr>).\n                F \\<subseteq> backflows (set (a # accu)))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "from Cons.prems(4)"], ["proof (chain)\npicking this:\n  set accu \\<subseteq> E", "have \"set accu \\<subseteq> E\""], ["proof (prove)\nusing this:\n  set accu \\<subseteq> E\n\ngoal (1 subgoal):\n 1. set accu \\<subseteq> E", "."], ["proof (state)\nthis:\n  set accu \\<subseteq> E\n\ngoal (1 subgoal):\n 1. \\<not> (a \\<notin> backflows E \\<and>\n            (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                             (stateful_policy_to_network_graph\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state = set (a # accu)\\<rparr>).\n                F \\<subseteq> backflows (set (a # accu)))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "have \"a \\<in> E - (set Es \\<union> set accu \\<union> {e \\<in> E. e \\<in> backflows E})\\<Longrightarrow> \\<not> \\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {a}\\<rparr>))\n          \\<subseteq> backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {a}\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> E -\n            (set Es \\<union> set accu \\<union>\n             {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n    \\<not> \\<Union>\n            (get_offending_flows (get_ACS M)\n              (stateful_policy_to_network_graph\n                \\<lparr>hosts = V, flows_fix = E,\n                   flows_state = set accu \\<union> {a}\\<rparr>))\n           \\<subseteq> backflows\n                        (filternew_flows_state\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = set accu \\<union> {a}\\<rparr>)", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> E -\n                     (set Es \\<union> set accu \\<union>\n                      {e \\<in> E. e \\<in> backflows E});\n     \\<not> \\<not> \\<Union>\n                    (get_offending_flows (get_ACS M)\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>))\n                   \\<subseteq> backflows\n                                (filternew_flows_state\n                                  \\<lparr>hosts = V, flows_fix = E,\n                                     flows_state =\n set accu \\<union> {a}\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> False", "assume h1: \"a \\<in> E - (set Es \\<union> set accu \\<union> {e \\<in> E. e \\<in> backflows E})\"\n            and    \"\\<not> \\<not>\\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {a}\\<rparr>)) \\<subseteq> backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {a}\\<rparr>)\""], ["proof (state)\nthis:\n  a \\<in> E -\n          (set Es \\<union> set accu \\<union>\n           {e \\<in> E. e \\<in> backflows E})\n  \\<not> \\<not> \\<Union>\n                 (get_offending_flows (get_ACS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state = set accu \\<union> {a}\\<rparr>))\n                \\<subseteq> backflows\n                             (filternew_flows_state\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state =\n                                    set accu \\<union> {a}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> E -\n                     (set Es \\<union> set accu \\<union>\n                      {e \\<in> E. e \\<in> backflows E});\n     \\<not> \\<not> \\<Union>\n                    (get_offending_flows (get_ACS M)\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>))\n                   \\<subseteq> backflows\n                                (filternew_flows_state\n                                  \\<lparr>hosts = V, flows_fix = E,\n                                     flows_state =\n set accu \\<union> {a}\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> False", "hence hccontr: \"\\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {a}\\<rparr>)) \\<subseteq> backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {a}\\<rparr>)\""], ["proof (prove)\nusing this:\n  a \\<in> E -\n          (set Es \\<union> set accu \\<union>\n           {e \\<in> E. e \\<in> backflows E})\n  \\<not> \\<not> \\<Union>\n                 (get_offending_flows (get_ACS M)\n                   (stateful_policy_to_network_graph\n                     \\<lparr>hosts = V, flows_fix = E,\n                        flows_state = set accu \\<union> {a}\\<rparr>))\n                \\<subseteq> backflows\n                             (filternew_flows_state\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state =\n                                    set accu \\<union> {a}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = set accu \\<union> {a}\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set accu \\<union> {a}\\<rparr>)", "by simp"], ["proof (state)\nthis:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = set accu \\<union> {a}\\<rparr>))\n  \\<subseteq> backflows\n               (filternew_flows_state\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = set accu \\<union> {a}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> E -\n                     (set Es \\<union> set accu \\<union>\n                      {e \\<in> E. e \\<in> backflows E});\n     \\<not> \\<not> \\<Union>\n                    (get_offending_flows (get_ACS M)\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>))\n                   \\<subseteq> backflows\n                                (filternew_flows_state\n                                  \\<lparr>hosts = V, flows_fix = E,\n                                     flows_state =\n set accu \\<union> {a}\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = set accu \\<union> {a}\\<rparr>))\n  \\<subseteq> backflows\n               (filternew_flows_state\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = set accu \\<union> {a}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> E -\n                     (set Es \\<union> set accu \\<union>\n                      {e \\<in> E. e \\<in> backflows E});\n     \\<not> \\<not> \\<Union>\n                    (get_offending_flows (get_ACS M)\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>))\n                   \\<subseteq> backflows\n                                (filternew_flows_state\n                                  \\<lparr>hosts = V, flows_fix = E,\n                                     flows_state =\n set accu \\<union> {a}\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> False", "from h1"], ["proof (chain)\npicking this:\n  a \\<in> E -\n          (set Es \\<union> set accu \\<union>\n           {e \\<in> E. e \\<in> backflows E})", "have stateful_to_graph: \"stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {a}\\<rparr> =  \\<lparr>nodes = V, edges = E \\<union> set accu \\<union> backflows (insert a (set accu))\\<rparr>\""], ["proof (prove)\nusing this:\n  a \\<in> E -\n          (set Es \\<union> set accu \\<union>\n           {e \\<in> E. e \\<in> backflows E})\n\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     \\<lparr>hosts = V, flows_fix = E,\n        flows_state = set accu \\<union> {a}\\<rparr> =\n    \\<lparr>nodes = V,\n       edges =\n         E \\<union> set accu \\<union>\n         backflows (insert a (set accu))\\<rparr>", "by(simp add: stateful_policy_to_network_graph_def all_flows_def, blast)"], ["proof (state)\nthis:\n  stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = set accu \\<union> {a}\\<rparr> =\n  \\<lparr>nodes = V,\n     edges =\n       E \\<union> set accu \\<union> backflows (insert a (set accu))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> E -\n                     (set Es \\<union> set accu \\<union>\n                      {e \\<in> E. e \\<in> backflows E});\n     \\<not> \\<not> \\<Union>\n                    (get_offending_flows (get_ACS M)\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>))\n                   \\<subseteq> backflows\n                                (filternew_flows_state\n                                  \\<lparr>hosts = V, flows_fix = E,\n                                     flows_state =\n set accu \\<union> {a}\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = set accu \\<union> {a}\\<rparr> =\n  \\<lparr>nodes = V,\n     edges =\n       E \\<union> set accu \\<union> backflows (insert a (set accu))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> E -\n                     (set Es \\<union> set accu \\<union>\n                      {e \\<in> E. e \\<in> backflows E});\n     \\<not> \\<not> \\<Union>\n                    (get_offending_flows (get_ACS M)\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>))\n                   \\<subseteq> backflows\n                                (filternew_flows_state\n                                  \\<lparr>hosts = V, flows_fix = E,\n                                     flows_state =\n set accu \\<union> {a}\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> False", "have \"backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {a}\\<rparr>) = backflows (insert a (set accu)) - E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. backflows\n     (filternew_flows_state\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = set accu \\<union> {a}\\<rparr>) =\n    backflows (insert a (set accu)) - E", "by(simp add: filternew_flows_state_alt backflows_minus_backflows)"], ["proof (state)\nthis:\n  backflows\n   (filternew_flows_state\n     \\<lparr>hosts = V, flows_fix = E,\n        flows_state = set accu \\<union> {a}\\<rparr>) =\n  backflows (insert a (set accu)) - E\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> E -\n                     (set Es \\<union> set accu \\<union>\n                      {e \\<in> E. e \\<in> backflows E});\n     \\<not> \\<not> \\<Union>\n                    (get_offending_flows (get_ACS M)\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>))\n                   \\<subseteq> backflows\n                                (filternew_flows_state\n                                  \\<lparr>hosts = V, flows_fix = E,\n                                     flows_state =\n set accu \\<union> {a}\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = set accu \\<union> {a}\\<rparr>))\n  \\<subseteq> backflows\n               (filternew_flows_state\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = set accu \\<union> {a}\\<rparr>)\n  stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = set accu \\<union> {a}\\<rparr> =\n  \\<lparr>nodes = V,\n     edges =\n       E \\<union> set accu \\<union> backflows (insert a (set accu))\\<rparr>\n  backflows\n   (filternew_flows_state\n     \\<lparr>hosts = V, flows_fix = E,\n        flows_state = set accu \\<union> {a}\\<rparr>) =\n  backflows (insert a (set accu)) - E", "have hccontr_simp:\n              \"\\<Union>(get_offending_flows (get_ACS M) \\<lparr>nodes = V, edges = E \\<union> set accu \\<union> backflows (insert a (set accu))\\<rparr>) \\<subseteq> backflows (insert a (set accu)) - E\""], ["proof (prove)\nusing this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = set accu \\<union> {a}\\<rparr>))\n  \\<subseteq> backflows\n               (filternew_flows_state\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = set accu \\<union> {a}\\<rparr>)\n  stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = set accu \\<union> {a}\\<rparr> =\n  \\<lparr>nodes = V,\n     edges =\n       E \\<union> set accu \\<union> backflows (insert a (set accu))\\<rparr>\n  backflows\n   (filternew_flows_state\n     \\<lparr>hosts = V, flows_fix = E,\n        flows_state = set accu \\<union> {a}\\<rparr>) =\n  backflows (insert a (set accu)) - E\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges =\n            E \\<union> set accu \\<union>\n            backflows (insert a (set accu))\\<rparr>)\n    \\<subseteq> backflows (insert a (set accu)) - E", "by simp"], ["proof (state)\nthis:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> set accu \\<union>\n          backflows (insert a (set accu))\\<rparr>)\n  \\<subseteq> backflows (insert a (set accu)) - E\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> E -\n                     (set Es \\<union> set accu \\<union>\n                      {e \\<in> E. e \\<in> backflows E});\n     \\<not> \\<not> \\<Union>\n                    (get_offending_flows (get_ACS M)\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>))\n                   \\<subseteq> backflows\n                                (filternew_flows_state\n                                  \\<lparr>hosts = V, flows_fix = E,\n                                     flows_state =\n set accu \\<union> {a}\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> False", "from Cons.prems(3) Cons.prems(4)"], ["proof (chain)\npicking this:\n  set (a # Es) \\<subseteq> E\n  set accu \\<subseteq> E", "have backaaccusubE: \"backflows (set (a # accu)) \\<subseteq> backflows E\""], ["proof (prove)\nusing this:\n  set (a # Es) \\<subseteq> E\n  set accu \\<subseteq> E\n\ngoal (1 subgoal):\n 1. backflows (set (a # accu)) \\<subseteq> backflows E", "by(simp add: backflows_def, fastforce)"], ["proof (state)\nthis:\n  backflows (set (a # accu)) \\<subseteq> backflows E\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> E -\n                     (set Es \\<union> set accu \\<union>\n                      {e \\<in> E. e \\<in> backflows E});\n     \\<not> \\<not> \\<Union>\n                    (get_offending_flows (get_ACS M)\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>))\n                   \\<subseteq> backflows\n                                (filternew_flows_state\n                                  \\<lparr>hosts = V, flows_fix = E,\n                                     flows_state =\n set accu \\<union> {a}\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> False", "from h1"], ["proof (chain)\npicking this:\n  a \\<in> E -\n          (set Es \\<union> set accu \\<union>\n           {e \\<in> E. e \\<in> backflows E})", "have \"a \\<notin> backflows E\""], ["proof (prove)\nusing this:\n  a \\<in> E -\n          (set Es \\<union> set accu \\<union>\n           {e \\<in> E. e \\<in> backflows E})\n\ngoal (1 subgoal):\n 1. a \\<notin> backflows E", "by fastforce"], ["proof (state)\nthis:\n  a \\<notin> backflows E\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> E -\n                     (set Es \\<union> set accu \\<union>\n                      {e \\<in> E. e \\<in> backflows E});\n     \\<not> \\<not> \\<Union>\n                    (get_offending_flows (get_ACS M)\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>))\n                   \\<subseteq> backflows\n                                (filternew_flows_state\n                                  \\<lparr>hosts = V, flows_fix = E,\n                                     flows_state =\n set accu \\<union> {a}\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> False", "from backaaccusubE \\<open>a \\<notin> backflows E\\<close>"], ["proof (chain)\npicking this:\n  backflows (set (a # accu)) \\<subseteq> backflows E\n  a \\<notin> backflows E", "have \"a \\<notin> backflows (insert a (set accu))\""], ["proof (prove)\nusing this:\n  backflows (set (a # accu)) \\<subseteq> backflows E\n  a \\<notin> backflows E\n\ngoal (1 subgoal):\n 1. a \\<notin> backflows (insert a (set accu))", "by auto"], ["proof (state)\nthis:\n  a \\<notin> backflows (insert a (set accu))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> E -\n                     (set Es \\<union> set accu \\<union>\n                      {e \\<in> E. e \\<in> backflows E});\n     \\<not> \\<not> \\<Union>\n                    (get_offending_flows (get_ACS M)\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>))\n                   \\<subseteq> backflows\n                                (filternew_flows_state\n                                  \\<lparr>hosts = V, flows_fix = E,\n                                     flows_state =\n set accu \\<union> {a}\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> False", "from \\<open>a \\<notin> backflows E\\<close> CaseFalse"], ["proof (chain)\npicking this:\n  a \\<notin> backflows E\n  \\<not> (a \\<notin> backflows E \\<and>\n          (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                           (stateful_policy_to_network_graph\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = set (a # accu)\\<rparr>).\n              F \\<subseteq> backflows (set (a # accu))))", "have \"\\<not> (\\<forall>F\\<in>get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = set (a # accu)\\<rparr>). F \\<subseteq> backflows (set (a # accu)))\""], ["proof (prove)\nusing this:\n  a \\<notin> backflows E\n  \\<not> (a \\<notin> backflows E \\<and>\n          (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                           (stateful_policy_to_network_graph\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = set (a # accu)\\<rparr>).\n              F \\<subseteq> backflows (set (a # accu))))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                            (stateful_policy_to_network_graph\n                              \\<lparr>hosts = V, flows_fix = E,\n                                 flows_state = set (a # accu)\\<rparr>).\n               F \\<subseteq> backflows (set (a # accu)))", "by(simp)"], ["proof (state)\nthis:\n  \\<not> (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                          (stateful_policy_to_network_graph\n                            \\<lparr>hosts = V, flows_fix = E,\n                               flows_state = set (a # accu)\\<rparr>).\n             F \\<subseteq> backflows (set (a # accu)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> E -\n                     (set Es \\<union> set accu \\<union>\n                      {e \\<in> E. e \\<in> backflows E});\n     \\<not> \\<not> \\<Union>\n                    (get_offending_flows (get_ACS M)\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>))\n                   \\<subseteq> backflows\n                                (filternew_flows_state\n                                  \\<lparr>hosts = V, flows_fix = E,\n                                     flows_state =\n set accu \\<union> {a}\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> False", "from this stateful_to_graph"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                          (stateful_policy_to_network_graph\n                            \\<lparr>hosts = V, flows_fix = E,\n                               flows_state = set (a # accu)\\<rparr>).\n             F \\<subseteq> backflows (set (a # accu)))\n  stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = set accu \\<union> {a}\\<rparr> =\n  \\<lparr>nodes = V,\n     edges =\n       E \\<union> set accu \\<union> backflows (insert a (set accu))\\<rparr>", "have \"\\<not> (\\<forall>F\\<in>get_offending_flows (get_ACS M) \\<lparr>nodes = V, edges = E \\<union> set accu \\<union> backflows (insert a (set accu))\\<rparr>. F \\<subseteq> backflows (insert a (set accu)))\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                          (stateful_policy_to_network_graph\n                            \\<lparr>hosts = V, flows_fix = E,\n                               flows_state = set (a # accu)\\<rparr>).\n             F \\<subseteq> backflows (set (a # accu)))\n  stateful_policy_to_network_graph\n   \\<lparr>hosts = V, flows_fix = E,\n      flows_state = set accu \\<union> {a}\\<rparr> =\n  \\<lparr>nodes = V,\n     edges =\n       E \\<union> set accu \\<union> backflows (insert a (set accu))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                            \\<lparr>nodes = V,\n                               edges =\n                                 E \\<union> set accu \\<union>\n                                 backflows (insert a (set accu))\\<rparr>.\n               F \\<subseteq> backflows (insert a (set accu)))", "by(simp)"], ["proof (state)\nthis:\n  \\<not> (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                          \\<lparr>nodes = V,\n                             edges =\n                               E \\<union> set accu \\<union>\n                               backflows (insert a (set accu))\\<rparr>.\n             F \\<subseteq> backflows (insert a (set accu)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> E -\n                     (set Es \\<union> set accu \\<union>\n                      {e \\<in> E. e \\<in> backflows E});\n     \\<not> \\<not> \\<Union>\n                    (get_offending_flows (get_ACS M)\n                      (stateful_policy_to_network_graph\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>))\n                   \\<subseteq> backflows\n                                (filternew_flows_state\n                                  \\<lparr>hosts = V, flows_fix = E,\n                                     flows_state =\n set accu \\<union> {a}\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> False", "from this hccontr_simp"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                          \\<lparr>nodes = V,\n                             edges =\n                               E \\<union> set accu \\<union>\n                               backflows (insert a (set accu))\\<rparr>.\n             F \\<subseteq> backflows (insert a (set accu)))\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> set accu \\<union>\n          backflows (insert a (set accu))\\<rparr>)\n  \\<subseteq> backflows (insert a (set accu)) - E", "show False"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                          \\<lparr>nodes = V,\n                             edges =\n                               E \\<union> set accu \\<union>\n                               backflows (insert a (set accu))\\<rparr>.\n             F \\<subseteq> backflows (insert a (set accu)))\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> set accu \\<union>\n          backflows (insert a (set accu))\\<rparr>)\n  \\<subseteq> backflows (insert a (set accu)) - E\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a \\<in> E -\n          (set Es \\<union> set accu \\<union>\n           {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = set accu \\<union> {a}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<not> (a \\<notin> backflows E \\<and>\n            (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                             (stateful_policy_to_network_graph\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state = set (a # accu)\\<rparr>).\n                F \\<subseteq> backflows (set (a # accu)))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "from  Cons.prems(6)[simplified funapplysimp statefulsimp] this"], ["proof (chain)\npicking this:\n  \\<forall>e\\<in>E -\n                 (set (a # Es) \\<union> set accu \\<union>\n                  {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = set accu \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = set accu \\<union> {e}\\<rparr>)\n  a \\<in> E -\n          (set Es \\<union> set accu \\<union>\n           {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = set accu \\<union> {a}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>)", "have \"\\<forall>e\\<in>E - (set Es \\<union> set accu \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {e}\\<rparr>))\n          \\<subseteq> backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = set accu \\<union> {e}\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<forall>e\\<in>E -\n                 (set (a # Es) \\<union> set accu \\<union>\n                  {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = set accu \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = set accu \\<union> {e}\\<rparr>)\n  a \\<in> E -\n          (set Es \\<union> set accu \\<union>\n           {e \\<in> E. e \\<in> backflows E}) \\<Longrightarrow>\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = set accu \\<union> {a}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = set accu \\<union> {a}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>E -\n                   (set Es \\<union> set accu \\<union>\n                    {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = set accu \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = set accu \\<union> {e}\\<rparr>)", "by auto"], ["proof (state)\nthis:\n  \\<forall>e\\<in>E -\n                 (set Es \\<union> set accu \\<union>\n                  {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = set accu \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = set accu \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<not> (a \\<notin> backflows E \\<and>\n            (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                             (stateful_policy_to_network_graph\n                               \\<lparr>hosts = V, flows_fix = E,\n                                  flows_state = set (a # accu)\\<rparr>).\n                F \\<subseteq> backflows (set (a # accu)))) \\<Longrightarrow>\n    \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "from Cons.IH[OF Cons.prems(1) Cons.prems(2) \\<open>set Es \\<subseteq> E\\<close> \\<open>set accu \\<subseteq> E\\<close> statefulsimp this]"], ["proof (chain)\npicking this:\n  \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = stateful \\<union> {e}\\<rparr>)", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = stateful \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "by simp"], ["proof (state)\nthis:\n  \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = stateful \\<union> {e}\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = stateful \\<union> {e}\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filter_compliant_stateful_ACS_maximal: \"\\<lbrakk> valid_reqs (get_ACS M); wf_graph \\<lparr> nodes = V, edges = E \\<rparr>;\n            (set edgesList) = E;\n            stateful = set (filter_compliant_stateful_ACS \\<lparr> nodes = V, edges = E \\<rparr> M edgesList)\n            \\<rbrakk> \\<Longrightarrow>\n            \\<forall>e \\<in> E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}). \\<^cancel>\\<open>E - {computed stateful flows plus trivial stateful flows}\\<close>\n            \\<not> \\<Union> (get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = stateful \\<union> {e} \\<rparr>))\n                \\<subseteq> backflows (filternew_flows_state \\<lparr> hosts = V, flows_fix = E, flows_state = stateful \\<union> {e} \\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_reqs (get_ACS M);\n     wf_graph \\<lparr>nodes = V, edges = E\\<rparr>; set edgesList = E;\n     stateful =\n     set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr>\n           M edgesList)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>e\\<in>E -\n                                     (stateful \\<union>\n{e \\<in> E. e \\<in> backflows E}).\n                         \\<not> \\<Union>\n                                 (get_offending_flows (get_ACS M)\n                                   (stateful_policy_to_network_graph\n                                     \\<lparr>hosts = V, flows_fix = E,\n  flows_state = stateful \\<union> {e}\\<rparr>))\n                                \\<subseteq> backflows\n       (filternew_flows_state\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> {e}\\<rparr>)", "apply(drule(1) filter_compliant_stateful_ACS_accu_induction_maximal[where accu=\"[]\", simplified])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     set edgesList = E;\n     stateful =\n     set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr>\n           M edgesList)\\<rbrakk>\n    \\<Longrightarrow> set ?edgesList \\<subseteq> E\n 2. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     set edgesList = E;\n     stateful =\n     set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr>\n           M edgesList)\\<rbrakk>\n    \\<Longrightarrow> ?stateful =\n                      set (filter_compliant_stateful_ACS_accu\n                            \\<lparr>nodes = V, edges = E\\<rparr> M []\n                            ?edgesList)\n 3. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     set edgesList = E;\n     stateful =\n     set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr>\n           M edgesList)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>e\\<in>E -\n                                     (set ?edgesList \\<union>\n{e \\<in> E. e \\<in> backflows E}).\n                         \\<not> \\<Union>\n                                 (get_offending_flows (get_ACS M)\n                                   (stateful_policy_to_network_graph\n                                     \\<lparr>hosts = V, flows_fix = E,\n  flows_state = {e}\\<rparr>))\n                                \\<subseteq> backflows\n       (filternew_flows_state\n         \\<lparr>hosts = V, flows_fix = E, flows_state = {e}\\<rparr>)\n 4. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     set edgesList = E;\n     stateful =\n     set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr>\n           M edgesList);\n     \\<forall>e\\<in>E -\n                    (?stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n        \\<not> \\<Union>\n                (get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state = insert e ?stateful\\<rparr>))\n               \\<subseteq> backflows\n                            (filternew_flows_state\n                              \\<lparr>hosts = V, flows_fix = E,\n                                 flows_state =\n                                   insert e ?stateful\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>e\\<in>E -\n                                     (stateful \\<union>\n{e \\<in> E. e \\<in> backflows E}).\n                         \\<not> \\<Union>\n                                 (get_offending_flows (get_ACS M)\n                                   (stateful_policy_to_network_graph\n                                     \\<lparr>hosts = V, flows_fix = E,\n  flows_state = stateful \\<union> {e}\\<rparr>))\n                                \\<subseteq> backflows\n       (filternew_flows_state\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> {e}\\<rparr>)", "apply(blast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     set edgesList = E;\n     stateful =\n     set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr>\n           M edgesList)\\<rbrakk>\n    \\<Longrightarrow> ?stateful =\n                      set (filter_compliant_stateful_ACS_accu\n                            \\<lparr>nodes = V, edges = E\\<rparr> M []\n                            edgesList)\n 2. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     set edgesList = E;\n     stateful =\n     set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr>\n           M edgesList)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>e\\<in>E -\n                                     (set edgesList \\<union>\n{e \\<in> E. e \\<in> backflows E}).\n                         \\<not> \\<Union>\n                                 (get_offending_flows (get_ACS M)\n                                   (stateful_policy_to_network_graph\n                                     \\<lparr>hosts = V, flows_fix = E,\n  flows_state = {e}\\<rparr>))\n                                \\<subseteq> backflows\n       (filternew_flows_state\n         \\<lparr>hosts = V, flows_fix = E, flows_state = {e}\\<rparr>)\n 3. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     set edgesList = E;\n     stateful =\n     set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr>\n           M edgesList);\n     \\<forall>e\\<in>E -\n                    (?stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n        \\<not> \\<Union>\n                (get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state = insert e ?stateful\\<rparr>))\n               \\<subseteq> backflows\n                            (filternew_flows_state\n                              \\<lparr>hosts = V, flows_fix = E,\n                                 flows_state =\n                                   insert e ?stateful\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>e\\<in>E -\n                                     (stateful \\<union>\n{e \\<in> E. e \\<in> backflows E}).\n                         \\<not> \\<Union>\n                                 (get_offending_flows (get_ACS M)\n                                   (stateful_policy_to_network_graph\n                                     \\<lparr>hosts = V, flows_fix = E,\n  flows_state = stateful \\<union> {e}\\<rparr>))\n                                \\<subseteq> backflows\n       (filternew_flows_state\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> {e}\\<rparr>)", "apply(simp add: filter_compliant_stateful_ACS_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     set edgesList = E;\n     stateful =\n     set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr>\n           M edgesList)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>e\\<in>E -\n                                     (set edgesList \\<union>\n{e \\<in> E. e \\<in> backflows E}).\n                         \\<not> \\<Union>\n                                 (get_offending_flows (get_ACS M)\n                                   (stateful_policy_to_network_graph\n                                     \\<lparr>hosts = V, flows_fix = E,\n  flows_state = {e}\\<rparr>))\n                                \\<subseteq> backflows\n       (filternew_flows_state\n         \\<lparr>hosts = V, flows_fix = E, flows_state = {e}\\<rparr>)\n 2. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     set edgesList = E;\n     stateful =\n     set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr>\n           M edgesList);\n     \\<forall>e\\<in>E -\n                    (set (filter_compliant_stateful_ACS_accu\n                           \\<lparr>nodes = V, edges = E\\<rparr> M []\n                           edgesList) \\<union>\n                     {e \\<in> E. e \\<in> backflows E}).\n        \\<not> \\<Union>\n                (get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state =\n                         insert e\n                          (set (filter_compliant_stateful_ACS_accu\n                                 \\<lparr>nodes = V, edges = E\\<rparr> M []\n                                 edgesList))\\<rparr>))\n               \\<subseteq> backflows\n                            (filternew_flows_state\n                              \\<lparr>hosts = V, flows_fix = E,\n                                 flows_state =\n                                   insert e\n                                    (set\n(filter_compliant_stateful_ACS_accu \\<lparr>nodes = V, edges = E\\<rparr> M\n  [] edgesList))\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>e\\<in>E -\n                                     (stateful \\<union>\n{e \\<in> E. e \\<in> backflows E}).\n                         \\<not> \\<Union>\n                                 (get_offending_flows (get_ACS M)\n                                   (stateful_policy_to_network_graph\n                                     \\<lparr>hosts = V, flows_fix = E,\n  flows_state = stateful \\<union> {e}\\<rparr>))\n                                \\<subseteq> backflows\n       (filternew_flows_state\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> {e}\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     set edgesList = E;\n     stateful =\n     set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr>\n           M edgesList)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>e\\<in>E -\n                                     (E \\<union>\n{e \\<in> E. e \\<in> backflows E}).\n                         \\<not> \\<Union>\n                                 (get_offending_flows (get_ACS M)\n                                   (stateful_policy_to_network_graph\n                                     \\<lparr>hosts = V, flows_fix = E,\n  flows_state = {e}\\<rparr>))\n                                \\<subseteq> backflows\n       (filternew_flows_state\n         \\<lparr>hosts = V, flows_fix = E, flows_state = {e}\\<rparr>)\n 2. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     set edgesList = E;\n     stateful =\n     set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr>\n           M edgesList);\n     \\<forall>e\\<in>E -\n                    (set (filter_compliant_stateful_ACS_accu\n                           \\<lparr>nodes = V, edges = E\\<rparr> M []\n                           edgesList) \\<union>\n                     {e \\<in> E. e \\<in> backflows E}).\n        \\<not> \\<Union>\n                (get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state =\n                         insert e\n                          (set (filter_compliant_stateful_ACS_accu\n                                 \\<lparr>nodes = V, edges = E\\<rparr> M []\n                                 edgesList))\\<rparr>))\n               \\<subseteq> backflows\n                            (filternew_flows_state\n                              \\<lparr>hosts = V, flows_fix = E,\n                                 flows_state =\n                                   insert e\n                                    (set\n(filter_compliant_stateful_ACS_accu \\<lparr>nodes = V, edges = E\\<rparr> M\n  [] edgesList))\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>e\\<in>E -\n                                     (stateful \\<union>\n{e \\<in> E. e \\<in> backflows E}).\n                         \\<not> \\<Union>\n                                 (get_offending_flows (get_ACS M)\n                                   (stateful_policy_to_network_graph\n                                     \\<lparr>hosts = V, flows_fix = E,\n  flows_state = stateful \\<union> {e}\\<rparr>))\n                                \\<subseteq> backflows\n       (filternew_flows_state\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> {e}\\<rparr>)", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_graph \\<lparr>nodes = V, edges = E\\<rparr>;\n     set edgesList = E;\n     stateful =\n     set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr>\n           M edgesList);\n     \\<forall>e\\<in>E -\n                    (set (filter_compliant_stateful_ACS_accu\n                           \\<lparr>nodes = V, edges = E\\<rparr> M []\n                           edgesList) \\<union>\n                     {e \\<in> E. e \\<in> backflows E}).\n        \\<not> \\<Union>\n                (get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = V, flows_fix = E,\n                       flows_state =\n                         insert e\n                          (set (filter_compliant_stateful_ACS_accu\n                                 \\<lparr>nodes = V, edges = E\\<rparr> M []\n                                 edgesList))\\<rparr>))\n               \\<subseteq> backflows\n                            (filternew_flows_state\n                              \\<lparr>hosts = V, flows_fix = E,\n                                 flows_state =\n                                   insert e\n                                    (set\n(filter_compliant_stateful_ACS_accu \\<lparr>nodes = V, edges = E\\<rparr> M\n  [] edgesList))\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>e\\<in>E -\n                                     (stateful \\<union>\n{e \\<in> E. e \\<in> backflows E}).\n                         \\<not> \\<Union>\n                                 (get_offending_flows (get_ACS M)\n                                   (stateful_policy_to_network_graph\n                                     \\<lparr>hosts = V, flows_fix = E,\n  flows_state = stateful \\<union> {e}\\<rparr>))\n                                \\<subseteq> backflows\n       (filternew_flows_state\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> {e}\\<rparr>)", "apply(simp add: filter_compliant_stateful_ACS_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma filter_compliant_stateful_ACS_maximal_allsubsets:\n      assumes a1: \"valid_reqs (get_ACS M)\" and a2: \"wf_graph \\<lparr> nodes = V, edges = E \\<rparr>\"\n      and a3: \"(set edgesList) = E\"\n      and a4: \"stateful = set (filter_compliant_stateful_ACS \\<lparr> nodes = V, edges = E \\<rparr> M edgesList)\"\n      and a5: \"X \\<subseteq> E - (stateful \\<union> backflows E)\" and a6: \"X \\<noteq> {}\"\n      shows \"\n      \\<not> \\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr> hosts = V, flows_fix = E, flows_state = stateful \\<union> X \\<rparr>))\n                \\<subseteq> backflows (filternew_flows_state \\<lparr> hosts = V, flows_fix = E, flows_state = stateful \\<union> X \\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<Union>\n            (get_offending_flows (get_ACS M)\n              (stateful_policy_to_network_graph\n                \\<lparr>hosts = V, flows_fix = E,\n                   flows_state = stateful \\<union> X\\<rparr>))\n           \\<subseteq> backflows\n                        (filternew_flows_state\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = stateful \\<union> X\\<rparr>)", "proof(rule ccontr, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from a5"], ["proof (chain)\npicking this:\n  X \\<subseteq> E - (stateful \\<union> backflows E)", "have \"X \\<subseteq> E\""], ["proof (prove)\nusing this:\n  X \\<subseteq> E - (stateful \\<union> backflows E)\n\ngoal (1 subgoal):\n 1. X \\<subseteq> E", "by blast"], ["proof (state)\nthis:\n  X \\<subseteq> E\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "assume accontr: \"\\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = stateful \\<union> X\\<rparr>)) \\<subseteq> backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = stateful \\<union> X\\<rparr>)\""], ["proof (state)\nthis:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = stateful \\<union> X\\<rparr>))\n  \\<subseteq> backflows\n               (filternew_flows_state\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> X\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "hence \"\\<Union>(get_offending_flows (get_ACS M) \\<lparr>nodes = V, edges = E \\<union> (stateful \\<union> X) \\<union> backflows (stateful \\<union> X)\\<rparr>) \\<subseteq> backflows (stateful \\<union> X) - E\""], ["proof (prove)\nusing this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = stateful \\<union> X\\<rparr>))\n  \\<subseteq> backflows\n               (filternew_flows_state\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> X\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges =\n            E \\<union> (stateful \\<union> X) \\<union>\n            backflows (stateful \\<union> X)\\<rparr>)\n    \\<subseteq> backflows (stateful \\<union> X) - E", "by(simp add: stateful_policy_to_network_graph_def all_flows_def filternew_flows_state_alt backflows_minus_backflows)"], ["proof (state)\nthis:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> (stateful \\<union> X) \\<union>\n          backflows (stateful \\<union> X)\\<rparr>)\n  \\<subseteq> backflows (stateful \\<union> X) - E\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "hence \"\\<Union>(get_offending_flows (get_ACS M) \\<lparr>nodes = V, edges = E \\<union> X \\<union> backflows (stateful \\<union> X)\\<rparr>) \\<subseteq> backflows (stateful \\<union> X) - E\""], ["proof (prove)\nusing this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> (stateful \\<union> X) \\<union>\n          backflows (stateful \\<union> X)\\<rparr>)\n  \\<subseteq> backflows (stateful \\<union> X) - E\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges =\n            E \\<union> X \\<union> backflows (stateful \\<union> X)\\<rparr>)\n    \\<subseteq> backflows (stateful \\<union> X) - E", "using a4 a3 filter_compliant_stateful_ACS_subseteq_input"], ["proof (prove)\nusing this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> (stateful \\<union> X) \\<union>\n          backflows (stateful \\<union> X)\\<rparr>)\n  \\<subseteq> backflows (stateful \\<union> X) - E\n  stateful =\n  set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr> M\n        edgesList)\n  set edgesList = E\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges =\n            E \\<union> X \\<union> backflows (stateful \\<union> X)\\<rparr>)\n    \\<subseteq> backflows (stateful \\<union> X) - E", "by (metis Diff_subset_conv Un_Diff_cancel Un_assoc a3 bot.extremum_unique sup_bot_right)"], ["proof (state)\nthis:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> X \\<union> backflows (stateful \\<union> X)\\<rparr>)\n  \\<subseteq> backflows (stateful \\<union> X) - E\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "hence accontr_simp: \"\\<Union>(get_offending_flows (get_ACS M) \\<lparr>nodes = V, edges = E \\<union> (backflows stateful) \\<union> (backflows X)\\<rparr>) \\<subseteq> backflows (stateful \\<union> X) - E\""], ["proof (prove)\nusing this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> X \\<union> backflows (stateful \\<union> X)\\<rparr>)\n  \\<subseteq> backflows (stateful \\<union> X) - E\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges =\n            E \\<union> backflows stateful \\<union> backflows X\\<rparr>)\n    \\<subseteq> backflows (stateful \\<union> X) - E", "using Set.Un_absorb2[OF \\<open>X \\<subseteq> E\\<close>] backflows_un[of \"stateful\" \"X\"]"], ["proof (prove)\nusing this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> X \\<union> backflows (stateful \\<union> X)\\<rparr>)\n  \\<subseteq> backflows (stateful \\<union> X) - E\n  E \\<union> X = E\n  backflows (stateful \\<union> X) = backflows stateful \\<union> backflows X\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges =\n            E \\<union> backflows stateful \\<union> backflows X\\<rparr>)\n    \\<subseteq> backflows (stateful \\<union> X) - E", "by (metis Un_assoc)"], ["proof (state)\nthis:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges = E \\<union> backflows stateful \\<union> backflows X\\<rparr>)\n  \\<subseteq> backflows (stateful \\<union> X) - E\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from a2 a5"], ["proof (chain)\npicking this:\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  X \\<subseteq> E - (stateful \\<union> backflows E)", "have \"finite X\""], ["proof (prove)\nusing this:\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  X \\<subseteq> E - (stateful \\<union> backflows E)\n\ngoal (1 subgoal):\n 1. finite X", "apply(simp add: wf_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fst ` E \\<subseteq> V \\<and>\n             snd ` E \\<subseteq> V \\<and> finite E \\<and> finite V;\n     X \\<subseteq> E - (stateful \\<union> backflows E)\\<rbrakk>\n    \\<Longrightarrow> finite X", "by (metis (full_types) finite_Diff finite_subset)"], ["proof (state)\nthis:\n  finite X\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from a6"], ["proof (chain)\npicking this:\n  X \\<noteq> {}", "obtain x where \"x \\<in> X\""], ["proof (prove)\nusing this:\n  X \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> X \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from \\<open>x \\<in> X\\<close> a5"], ["proof (chain)\npicking this:\n  x \\<in> X\n  X \\<subseteq> E - (stateful \\<union> backflows E)", "have xX_simp1: \"(backflows X) - (backflows (X - {x}) - E)  = backflows {x}\""], ["proof (prove)\nusing this:\n  x \\<in> X\n  X \\<subseteq> E - (stateful \\<union> backflows E)\n\ngoal (1 subgoal):\n 1. backflows X - (backflows (X - {x}) - E) = backflows {x}", "apply(simp add: backflows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> X;\n     X \\<subseteq> E - (stateful \\<union> {(r, s). (s, r) \\<in> E})\\<rbrakk>\n    \\<Longrightarrow> {(r, s). (s, r) \\<in> X} -\n                      ({(r, s). (s, r) \\<in> X \\<and> (s, r) \\<noteq> x} -\n                       E) =\n                      {(r, s). (s, r) = x}", "by fast"], ["proof (state)\nthis:\n  backflows X - (backflows (X - {x}) - E) = backflows {x}\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from a5"], ["proof (chain)\npicking this:\n  X \\<subseteq> E - (stateful \\<union> backflows E)", "have \"X \\<inter> stateful = {}\""], ["proof (prove)\nusing this:\n  X \\<subseteq> E - (stateful \\<union> backflows E)\n\ngoal (1 subgoal):\n 1. X \\<inter> stateful = {}", "by auto"], ["proof (state)\nthis:\n  X \\<inter> stateful = {}\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from \\<open>x \\<in> X\\<close> this"], ["proof (chain)\npicking this:\n  x \\<in> X\n  X \\<inter> stateful = {}", "have xX_simp2: \"(backflows stateful) - (backflows (X - {x}) - E) = backflows stateful\""], ["proof (prove)\nusing this:\n  x \\<in> X\n  X \\<inter> stateful = {}\n\ngoal (1 subgoal):\n 1. backflows stateful - (backflows (X - {x}) - E) = backflows stateful", "apply(simp add: backflows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> X; X \\<inter> stateful = {}\\<rbrakk>\n    \\<Longrightarrow> {(r, s). (s, r) \\<in> stateful} -\n                      ({(r, s). (s, r) \\<in> X \\<and> (s, r) \\<noteq> x} -\n                       E) =\n                      {(r, s). (s, r) \\<in> stateful}", "by fast"], ["proof (state)\nthis:\n  backflows stateful - (backflows (X - {x}) - E) = backflows stateful\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "have xX_simp3:\"backflows (stateful \\<union> X) - (backflows (X - {x}) - E) = backflows (stateful \\<union> {x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. backflows (stateful \\<union> X) - (backflows (X - {x}) - E) =\n    backflows (stateful \\<union> {x})", "apply(simp only: backflows_un)"], ["proof (prove)\ngoal (1 subgoal):\n 1. backflows stateful \\<union> backflows X - (backflows (X - {x}) - E) =\n    backflows stateful \\<union> backflows {x}", "using xX_simp1 xX_simp2"], ["proof (prove)\nusing this:\n  backflows X - (backflows (X - {x}) - E) = backflows {x}\n  backflows stateful - (backflows (X - {x}) - E) = backflows stateful\n\ngoal (1 subgoal):\n 1. backflows stateful \\<union> backflows X - (backflows (X - {x}) - E) =\n    backflows stateful \\<union> backflows {x}", "by blast"], ["proof (state)\nthis:\n  backflows (stateful \\<union> X) - (backflows (X - {x}) - E) =\n  backflows (stateful \\<union> {x})\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "have xX_simp4: \"backflows (stateful \\<union> X) - E - (backflows (X - {x}) - E) = backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = stateful \\<union> {x}\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. backflows (stateful \\<union> X) - E - (backflows (X - {x}) - E) =\n    backflows\n     (filternew_flows_state\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = stateful \\<union> {x}\\<rparr>)", "apply(simp add: filternew_flows_state_alt backflows_minus_backflows)"], ["proof (prove)\ngoal (1 subgoal):\n 1. backflows (stateful \\<union> X) - E - (backflows (X - {x}) - E) =\n    backflows (insert x stateful) - E", "using xX_simp3"], ["proof (prove)\nusing this:\n  backflows (stateful \\<union> X) - (backflows (X - {x}) - E) =\n  backflows (stateful \\<union> {x})\n\ngoal (1 subgoal):\n 1. backflows (stateful \\<union> X) - E - (backflows (X - {x}) - E) =\n    backflows (insert x stateful) - E", "by auto"], ["proof (state)\nthis:\n  backflows (stateful \\<union> X) - E - (backflows (X - {x}) - E) =\n  backflows\n   (filternew_flows_state\n     \\<lparr>hosts = V, flows_fix = E,\n        flows_state = stateful \\<union> {x}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "have xX_simp5: \"(E \\<union> backflows stateful \\<union> backflows X) - (backflows (X - {x}) - E) = E \\<union> backflows stateful \\<union> backflows {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<union> backflows stateful \\<union> backflows X -\n    (backflows (X - {x}) - E) =\n    E \\<union> backflows stateful \\<union> backflows {x}", "using xX_simp3[simplified backflows_un]"], ["proof (prove)\nusing this:\n  backflows stateful \\<union> backflows X - (backflows (X - {x}) - E) =\n  backflows stateful \\<union> backflows {x}\n\ngoal (1 subgoal):\n 1. E \\<union> backflows stateful \\<union> backflows X -\n    (backflows (X - {x}) - E) =\n    E \\<union> backflows stateful \\<union> backflows {x}", "by blast"], ["proof (state)\nthis:\n  E \\<union> backflows stateful \\<union> backflows X -\n  (backflows (X - {x}) - E) =\n  E \\<union> backflows stateful \\<union> backflows {x}\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "have Eexpand: \"E \\<union> stateful \\<union> {x} = E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<union> stateful \\<union> {x} = E", "using a4 a3 filter_compliant_stateful_ACS_subseteq_input a5 \\<open>x\\<in>X\\<close>"], ["proof (prove)\nusing this:\n  stateful =\n  set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr> M\n        edgesList)\n  set edgesList = E\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es\n  X \\<subseteq> E - (stateful \\<union> backflows E)\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. E \\<union> stateful \\<union> {x} = E", "by blast"], ["proof (state)\nthis:\n  E \\<union> stateful \\<union> {x} = E\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "have \"backflows (stateful \\<union> X) - E - backflows (X - {x}) = (backflows (stateful \\<union> X) - E) - backflows (X - {x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. backflows (stateful \\<union> X) - E - backflows (X - {x}) =\n    backflows (stateful \\<union> X) - E - backflows (X - {x})", "by simp"], ["proof (state)\nthis:\n  backflows (stateful \\<union> X) - E - backflows (X - {x}) =\n  backflows (stateful \\<union> X) - E - backflows (X - {x})\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from \\<open>finite X\\<close> backflows_finite"], ["proof (chain)\npicking this:\n  finite X\n  finite ?E \\<Longrightarrow> finite (backflows ?E)", "have finite: \"finite (backflows (X - {x}) - E)\""], ["proof (prove)\nusing this:\n  finite X\n  finite ?E \\<Longrightarrow> finite (backflows ?E)\n\ngoal (1 subgoal):\n 1. finite (backflows (X - {x}) - E)", "by auto"], ["proof (state)\nthis:\n  finite (backflows (X - {x}) - E)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from a2 a4 a3 filter_compliant_stateful_ACS_subseteq_input"], ["proof (chain)\npicking this:\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  stateful =\n  set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr> M\n        edgesList)\n  set edgesList = E\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es", "have \"wf_graph \\<lparr>nodes = V, edges = stateful\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  stateful =\n  set (filter_compliant_stateful_ACS \\<lparr>nodes = V, edges = E\\<rparr> M\n        edgesList)\n  set edgesList = E\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es\n\ngoal (1 subgoal):\n 1. wf_graph \\<lparr>nodes = V, edges = stateful\\<rparr>", "by (metis Diff_partition wf_graph_remove_edges_union)"], ["proof (state)\nthis:\n  wf_graph \\<lparr>nodes = V, edges = stateful\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from backflows_wf[OF this]"], ["proof (chain)\npicking this:\n  wf_graph \\<lparr>nodes = V, edges = backflows stateful\\<rparr>", "have \"wf_graph \\<lparr>nodes = V, edges = backflows stateful\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph \\<lparr>nodes = V, edges = backflows stateful\\<rparr>\n\ngoal (1 subgoal):\n 1. wf_graph \\<lparr>nodes = V, edges = backflows stateful\\<rparr>", "."], ["proof (state)\nthis:\n  wf_graph \\<lparr>nodes = V, edges = backflows stateful\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from a2 \\<open>X \\<subseteq> E\\<close>"], ["proof (chain)\npicking this:\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  X \\<subseteq> E", "have \"wf_graph \\<lparr>nodes = V, edges = X\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n  X \\<subseteq> E\n\ngoal (1 subgoal):\n 1. wf_graph \\<lparr>nodes = V, edges = X\\<rparr>", "by (metis double_diff dual_order.refl wf_graph_remove_edges)"], ["proof (state)\nthis:\n  wf_graph \\<lparr>nodes = V, edges = X\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from backflows_wf[OF this]"], ["proof (chain)\npicking this:\n  wf_graph \\<lparr>nodes = V, edges = backflows X\\<rparr>", "have \"wf_graph \\<lparr>nodes = V, edges = backflows X\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph \\<lparr>nodes = V, edges = backflows X\\<rparr>\n\ngoal (1 subgoal):\n 1. wf_graph \\<lparr>nodes = V, edges = backflows X\\<rparr>", "."], ["proof (state)\nthis:\n  wf_graph \\<lparr>nodes = V, edges = backflows X\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from this wf_graph_union_edges \\<open>wf_graph \\<lparr>nodes = V, edges = backflows stateful\\<rparr>\\<close> a2"], ["proof (chain)\npicking this:\n  wf_graph \\<lparr>nodes = V, edges = backflows X\\<rparr>\n  \\<lbrakk>wf_graph \\<lparr>nodes = ?V, edges = ?E\\<rparr>;\n   wf_graph \\<lparr>nodes = ?V, edges = ?E'\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> wf_graph\n                     \\<lparr>nodes = ?V, edges = ?E \\<union> ?E'\\<rparr>\n  wf_graph \\<lparr>nodes = V, edges = backflows stateful\\<rparr>\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>", "have wfG: \n        \"wf_graph \\<lparr>nodes = V, edges = E \\<union> backflows stateful \\<union> backflows X\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph \\<lparr>nodes = V, edges = backflows X\\<rparr>\n  \\<lbrakk>wf_graph \\<lparr>nodes = ?V, edges = ?E\\<rparr>;\n   wf_graph \\<lparr>nodes = ?V, edges = ?E'\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> wf_graph\n                     \\<lparr>nodes = ?V, edges = ?E \\<union> ?E'\\<rparr>\n  wf_graph \\<lparr>nodes = V, edges = backflows stateful\\<rparr>\n  wf_graph \\<lparr>nodes = V, edges = E\\<rparr>\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = V,\n        edges = E \\<union> backflows stateful \\<union> backflows X\\<rparr>", "by metis"], ["proof (state)\nthis:\n  wf_graph\n   \\<lparr>nodes = V,\n      edges = E \\<union> backflows stateful \\<union> backflows X\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from \\<open>x\\<in>X\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> X", "have subset: \"backflows (X - {x}) - E \\<subseteq> E \\<union> backflows stateful \\<union> backflows X\""], ["proof (prove)\nusing this:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. backflows (X - {x}) - E\n    \\<subseteq> E \\<union> backflows stateful \\<union> backflows X", "apply(simp add: backflows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> X \\<Longrightarrow>\n    {(r, s). (s, r) \\<in> X \\<and> (s, r) \\<noteq> x} - E\n    \\<subseteq> E \\<union> {(r, s). (s, r) \\<in> stateful} \\<union>\n                {(r, s). (s, r) \\<in> X}", "by fast"], ["proof (state)\nthis:\n  backflows (X - {x}) - E\n  \\<subseteq> E \\<union> backflows stateful \\<union> backflows X\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from Un_set_offending_flows_bound_minus_subseteq'[OF a1 wfG subset accontr_simp]"], ["proof (chain)\npicking this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> backflows stateful \\<union> backflows X -\n          (backflows (X - {x}) - E)\\<rparr>)\n  \\<subseteq> backflows (stateful \\<union> X) - E -\n              (backflows (X - {x}) - E)", "have\n        \"\\<Union>(get_offending_flows (get_ACS M) \\<lparr>nodes = V, edges = (E \\<union> backflows stateful \\<union> backflows X) - (backflows (X - {x}) - E)\\<rparr>) \\<subseteq> (backflows (stateful \\<union> X) - E) - (backflows (X - {x}) - E)\""], ["proof (prove)\nusing this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> backflows stateful \\<union> backflows X -\n          (backflows (X - {x}) - E)\\<rparr>)\n  \\<subseteq> backflows (stateful \\<union> X) - E -\n              (backflows (X - {x}) - E)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges =\n            E \\<union> backflows stateful \\<union> backflows X -\n            (backflows (X - {x}) - E)\\<rparr>)\n    \\<subseteq> backflows (stateful \\<union> X) - E -\n                (backflows (X - {x}) - E)", "by simp"], ["proof (state)\nthis:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> backflows stateful \\<union> backflows X -\n          (backflows (X - {x}) - E)\\<rparr>)\n  \\<subseteq> backflows (stateful \\<union> X) - E -\n              (backflows (X - {x}) - E)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from this xX_simp4 xX_simp5"], ["proof (chain)\npicking this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> backflows stateful \\<union> backflows X -\n          (backflows (X - {x}) - E)\\<rparr>)\n  \\<subseteq> backflows (stateful \\<union> X) - E -\n              (backflows (X - {x}) - E)\n  backflows (stateful \\<union> X) - E - (backflows (X - {x}) - E) =\n  backflows\n   (filternew_flows_state\n     \\<lparr>hosts = V, flows_fix = E,\n        flows_state = stateful \\<union> {x}\\<rparr>)\n  E \\<union> backflows stateful \\<union> backflows X -\n  (backflows (X - {x}) - E) =\n  E \\<union> backflows stateful \\<union> backflows {x}", "have trans1:\n        \"\\<Union>(get_offending_flows (get_ACS M) \\<lparr>nodes = V, edges = E \\<union> backflows stateful \\<union> backflows {x}\\<rparr>) \\<subseteq> backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = stateful \\<union> {x}\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> backflows stateful \\<union> backflows X -\n          (backflows (X - {x}) - E)\\<rparr>)\n  \\<subseteq> backflows (stateful \\<union> X) - E -\n              (backflows (X - {x}) - E)\n  backflows (stateful \\<union> X) - E - (backflows (X - {x}) - E) =\n  backflows\n   (filternew_flows_state\n     \\<lparr>hosts = V, flows_fix = E,\n        flows_state = stateful \\<union> {x}\\<rparr>)\n  E \\<union> backflows stateful \\<union> backflows X -\n  (backflows (X - {x}) - E) =\n  E \\<union> backflows stateful \\<union> backflows {x}\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges =\n            E \\<union> backflows stateful \\<union> backflows {x}\\<rparr>)\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {x}\\<rparr>)", "by simp"], ["proof (state)\nthis:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> backflows stateful \\<union> backflows {x}\\<rparr>)\n  \\<subseteq> backflows\n               (filternew_flows_state\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {x}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "hence \"\\<Union>(get_offending_flows (get_ACS M) \\<lparr>nodes = V, edges = E \\<union> backflows (stateful \\<union> {x})\\<rparr>) \\<subseteq> backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = stateful \\<union> {x}\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges =\n          E \\<union> backflows stateful \\<union> backflows {x}\\<rparr>)\n  \\<subseteq> backflows\n               (filternew_flows_state\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {x}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges = E \\<union> backflows (stateful \\<union> {x})\\<rparr>)\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {x}\\<rparr>)", "apply(simp only: backflows_un)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges =\n            E \\<union> backflows stateful \\<union> backflows {x}\\<rparr>)\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> {x}\\<rparr>) \\<Longrightarrow>\n    \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges =\n            E \\<union> (backflows stateful \\<union> backflows {x})\\<rparr>)\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {x}\\<rparr>)", "by (metis Un_assoc)"], ["proof (state)\nthis:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges = E \\<union> backflows (stateful \\<union> {x})\\<rparr>)\n  \\<subseteq> backflows\n               (filternew_flows_state\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {x}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "hence contr1: \"\\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = stateful \\<union> {x}\\<rparr>)) \\<subseteq> backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = stateful \\<union> {x}\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     \\<lparr>nodes = V,\n        edges = E \\<union> backflows (stateful \\<union> {x})\\<rparr>)\n  \\<subseteq> backflows\n               (filternew_flows_state\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {x}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> {x}\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {x}\\<rparr>)", "apply(simp only: stateful_policy_to_network_graph_def all_flows_def stateful_policy.select_convs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges = E \\<union> backflows (stateful \\<union> {x})\\<rparr>)\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> {x}\\<rparr>) \\<Longrightarrow>\n    \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges =\n            E \\<union> (stateful \\<union> {x}) \\<union>\n            backflows (stateful \\<union> {x})\\<rparr>)\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {x}\\<rparr>)", "using Eexpand"], ["proof (prove)\nusing this:\n  E \\<union> stateful \\<union> {x} = E\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges = E \\<union> backflows (stateful \\<union> {x})\\<rparr>)\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> {x}\\<rparr>) \\<Longrightarrow>\n    \\<Union>\n     (get_offending_flows (get_ACS M)\n       \\<lparr>nodes = V,\n          edges =\n            E \\<union> (stateful \\<union> {x}) \\<union>\n            backflows (stateful \\<union> {x})\\<rparr>)\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {x}\\<rparr>)", "by (metis Un_assoc)"], ["proof (state)\nthis:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = stateful \\<union> {x}\\<rparr>))\n  \\<subseteq> backflows\n               (filternew_flows_state\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {x}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from filter_compliant_stateful_ACS_maximal[OF a1 a2 a3 a4]"], ["proof (chain)\npicking this:\n  \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = stateful \\<union> {e}\\<rparr>)", "have\n        \"\\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}). \\<not> \\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = stateful \\<union> {e}\\<rparr>)) \\<subseteq> backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = stateful \\<union> {e}\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = stateful \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n       \\<not> \\<Union>\n               (get_offending_flows (get_ACS M)\n                 (stateful_policy_to_network_graph\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state = stateful \\<union> {e}\\<rparr>))\n              \\<subseteq> backflows\n                           (filternew_flows_state\n                             \\<lparr>hosts = V, flows_fix = E,\n                                flows_state = stateful \\<union> {e}\\<rparr>)", "."], ["proof (state)\nthis:\n  \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = stateful \\<union> {e}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from this a5 \\<open>x \\<in> X\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = stateful \\<union> {e}\\<rparr>)\n  X \\<subseteq> E - (stateful \\<union> backflows E)\n  x \\<in> X", "have contr2: \"\\<not> \\<Union>(get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = V, flows_fix = E, flows_state = stateful \\<union> {x}\\<rparr>)) \\<subseteq> backflows (filternew_flows_state \\<lparr>hosts = V, flows_fix = E, flows_state = stateful \\<union> {x}\\<rparr>)\""], ["proof (prove)\nusing this:\n  \\<forall>e\\<in>E - (stateful \\<union> {e \\<in> E. e \\<in> backflows E}).\n     \\<not> \\<Union>\n             (get_offending_flows (get_ACS M)\n               (stateful_policy_to_network_graph\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {e}\\<rparr>))\n            \\<subseteq> backflows\n                         (filternew_flows_state\n                           \\<lparr>hosts = V, flows_fix = E,\n                              flows_state = stateful \\<union> {e}\\<rparr>)\n  X \\<subseteq> E - (stateful \\<union> backflows E)\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<not> \\<Union>\n            (get_offending_flows (get_ACS M)\n              (stateful_policy_to_network_graph\n                \\<lparr>hosts = V, flows_fix = E,\n                   flows_state = stateful \\<union> {x}\\<rparr>))\n           \\<subseteq> backflows\n                        (filternew_flows_state\n                          \\<lparr>hosts = V, flows_fix = E,\n                             flows_state = stateful \\<union> {x}\\<rparr>)", "by blast"], ["proof (state)\nthis:\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = stateful \\<union> {x}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = stateful \\<union> {x}\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (get_offending_flows (get_ACS M)\n       (stateful_policy_to_network_graph\n         \\<lparr>hosts = V, flows_fix = E,\n            flows_state = stateful \\<union> X\\<rparr>))\n    \\<subseteq> backflows\n                 (filternew_flows_state\n                   \\<lparr>hosts = V, flows_fix = E,\n                      flows_state =\n                        stateful \\<union> X\\<rparr>) \\<Longrightarrow>\n    False", "from contr1 contr2"], ["proof (chain)\npicking this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = stateful \\<union> {x}\\<rparr>))\n  \\<subseteq> backflows\n               (filternew_flows_state\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {x}\\<rparr>)\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = stateful \\<union> {x}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = stateful \\<union> {x}\\<rparr>)", "show \"False\""], ["proof (prove)\nusing this:\n  \\<Union>\n   (get_offending_flows (get_ACS M)\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = V, flows_fix = E,\n          flows_state = stateful \\<union> {x}\\<rparr>))\n  \\<subseteq> backflows\n               (filternew_flows_state\n                 \\<lparr>hosts = V, flows_fix = E,\n                    flows_state = stateful \\<union> {x}\\<rparr>)\n  \\<not> \\<Union>\n          (get_offending_flows (get_ACS M)\n            (stateful_policy_to_network_graph\n              \\<lparr>hosts = V, flows_fix = E,\n                 flows_state = stateful \\<union> {x}\\<rparr>))\n         \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = V, flows_fix = E,\n                           flows_state = stateful \\<union> {x}\\<rparr>)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>@{term filter_compliant_stateful_ACS} is correct and maximal\\<close>"], ["", "thm filter_compliant_stateful_ACS_correct filter_compliant_stateful_ACS_maximal"], ["", "text\\<open>Getting those together. We cannot say \\<open>edgesList = E\\<close> here because one filters first. I guess filtering ACS first is easier, ...\\<close>"], ["", "definition generate_valid_stateful_policy_IFSACS :: \"'v::vertex graph \\<Rightarrow> 'v SecurityInvariant_configured list \\<Rightarrow> ('v \\<times> 'v) list \\<Rightarrow> 'v stateful_policy\" where\n    \"generate_valid_stateful_policy_IFSACS G M edgesList \\<equiv> (let filterIFS = filter_IFS_no_violations G M edgesList in\n        (let filterACS = filter_compliant_stateful_ACS G M filterIFS in \\<lparr> hosts = nodes G, flows_fix = edges G, flows_state = set filterACS \\<rparr>))\""], ["", "lemma generate_valid_stateful_policy_IFSACS_wf_stateful_policy: assumes wfG: \"wf_graph G\"\n          and     edgesList: \"(set edgesList) = edges G\"\n          shows \"wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)", "from  wfG"], ["proof (chain)\npicking this:\n  wf_graph G", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_graph G\n\ngoal (1 subgoal):\n 1. wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)", "apply(simp add: generate_valid_stateful_policy_IFSACS_def wf_stateful_policy_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_graph G \\<Longrightarrow>\n    fst ` edges G \\<subseteq> nodes G \\<and>\n    snd ` edges G \\<subseteq> nodes G \\<and>\n    set (filter_compliant_stateful_ACS G M\n          (filter_IFS_no_violations G M edgesList))\n    \\<subseteq> edges G \\<and>\n    finite (nodes G)", "apply(auto simp add: wf_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b)\n                \\<in> set (filter_compliant_stateful_ACS G M\n                            (filter_IFS_no_violations G M edgesList));\n        fst ` edges G \\<subseteq> nodes G;\n        snd ` edges G \\<subseteq> nodes G; finite (edges G);\n        finite (nodes G)\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> edges G", "using edgesList filter_IFS_no_violations_subseteq_input filter_compliant_stateful_ACS_subseteq_input"], ["proof (prove)\nusing this:\n  set edgesList = edges G\n  set (filter_IFS_no_violations ?G ?M ?Es) \\<subseteq> set ?Es\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b)\n                \\<in> set (filter_compliant_stateful_ACS G M\n                            (filter_IFS_no_violations G M edgesList));\n        fst ` edges G \\<subseteq> nodes G;\n        snd ` edges G \\<subseteq> nodes G; finite (edges G);\n        finite (nodes G)\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> edges G", "by (metis rev_subsetD)"], ["proof (state)\nthis:\n  wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma generate_valid_stateful_policy_IFSACS_select_simps:\n   shows \"hosts (generate_valid_stateful_policy_IFSACS G M edgesList) = nodes G\"\n   and   \"flows_fix (generate_valid_stateful_policy_IFSACS G M edgesList) = edges G\"\n   and   \"flows_state (generate_valid_stateful_policy_IFSACS G M edgesList) \\<subseteq> set edgesList\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hosts (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    nodes G &&&\n    flows_fix (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    edges G &&&\n    flows_state (generate_valid_stateful_policy_IFSACS G M edgesList)\n    \\<subseteq> set edgesList", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. hosts (generate_valid_stateful_policy_IFSACS G M edgesList) = nodes G\n 2. flows_fix (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    edges G\n 3. flows_state (generate_valid_stateful_policy_IFSACS G M edgesList)\n    \\<subseteq> set edgesList", "show  \"hosts (generate_valid_stateful_policy_IFSACS G M edgesList) = nodes G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hosts (generate_valid_stateful_policy_IFSACS G M edgesList) = nodes G", "by(simp add: generate_valid_stateful_policy_IFSACS_def)"], ["proof (state)\nthis:\n  hosts (generate_valid_stateful_policy_IFSACS G M edgesList) = nodes G\n\ngoal (2 subgoals):\n 1. flows_fix (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    edges G\n 2. flows_state (generate_valid_stateful_policy_IFSACS G M edgesList)\n    \\<subseteq> set edgesList", "show \"flows_fix (generate_valid_stateful_policy_IFSACS G M edgesList) = edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flows_fix (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    edges G", "by(simp add: generate_valid_stateful_policy_IFSACS_def)"], ["proof (state)\nthis:\n  flows_fix (generate_valid_stateful_policy_IFSACS G M edgesList) = edges G\n\ngoal (1 subgoal):\n 1. flows_state (generate_valid_stateful_policy_IFSACS G M edgesList)\n    \\<subseteq> set edgesList", "show \"flows_state (generate_valid_stateful_policy_IFSACS G M edgesList) \\<subseteq> set edgesList\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flows_state (generate_valid_stateful_policy_IFSACS G M edgesList)\n    \\<subseteq> set edgesList", "apply(simp add: generate_valid_stateful_policy_IFSACS_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (filter_compliant_stateful_ACS G M\n          (filter_IFS_no_violations G M edgesList))\n    \\<subseteq> set edgesList", "using filter_IFS_no_violations_subseteq_input filter_compliant_stateful_ACS_subseteq_input"], ["proof (prove)\nusing this:\n  set (filter_IFS_no_violations ?G ?M ?Es) \\<subseteq> set ?Es\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es\n\ngoal (1 subgoal):\n 1. set (filter_compliant_stateful_ACS G M\n          (filter_IFS_no_violations G M edgesList))\n    \\<subseteq> set edgesList", "by (metis subset_trans)"], ["proof (state)\nthis:\n  flows_state (generate_valid_stateful_policy_IFSACS G M edgesList)\n  \\<subseteq> set edgesList\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma generate_valid_stateful_policy_IFSACS_all_security_requirements_fulfilled_IFS: assumes validReqs: \"valid_reqs M\"\n          and     wfG: \"wf_graph G\"\n          and     high_level_policy_valid: \"all_security_requirements_fulfilled M G\"\n          and     edgesList: \"(set edgesList) \\<subseteq> edges G\"\n          shows \"all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph (generate_valid_stateful_policy_IFSACS G M edgesList))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "have simp3: \"flows_state (generate_valid_stateful_policy_IFSACS G M edgesList) \\<subseteq> edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flows_state (generate_valid_stateful_policy_IFSACS G M edgesList)\n    \\<subseteq> edges G", "using generate_valid_stateful_policy_IFSACS_select_simps(3) edgesList"], ["proof (prove)\nusing this:\n  flows_state (generate_valid_stateful_policy_IFSACS ?G ?M ?edgesList)\n  \\<subseteq> set ?edgesList\n  set edgesList \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. flows_state (generate_valid_stateful_policy_IFSACS G M edgesList)\n    \\<subseteq> edges G", "by fast"], ["proof (state)\nthis:\n  flows_state (generate_valid_stateful_policy_IFSACS G M edgesList)\n  \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "have \"set (filter_compliant_stateful_ACS G M (filter_IFS_no_violations G M edgesList)) \\<subseteq> set (filter_IFS_no_violations G M edgesList)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (filter_compliant_stateful_ACS G M\n          (filter_IFS_no_violations G M edgesList))\n    \\<subseteq> set (filter_IFS_no_violations G M edgesList)", "using filter_compliant_stateful_ACS_subseteq_input edgesList"], ["proof (prove)\nusing this:\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es\n  set edgesList \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. set (filter_compliant_stateful_ACS G M\n          (filter_IFS_no_violations G M edgesList))\n    \\<subseteq> set (filter_IFS_no_violations G M edgesList)", "by (metis)"], ["proof (state)\nthis:\n  set (filter_compliant_stateful_ACS G M\n        (filter_IFS_no_violations G M edgesList))\n  \\<subseteq> set (filter_IFS_no_violations G M edgesList)\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "from backflows_subseteq this"], ["proof (chain)\npicking this:\n  (?X \\<subseteq> ?Y) = (backflows ?X \\<subseteq> backflows ?Y)\n  set (filter_compliant_stateful_ACS G M\n        (filter_IFS_no_violations G M edgesList))\n  \\<subseteq> set (filter_IFS_no_violations G M edgesList)", "have \n      \"backflows (set (filter_compliant_stateful_ACS G M (filter_IFS_no_violations G M edgesList))) \\<subseteq> backflows (set (filter_IFS_no_violations G M edgesList))\""], ["proof (prove)\nusing this:\n  (?X \\<subseteq> ?Y) = (backflows ?X \\<subseteq> backflows ?Y)\n  set (filter_compliant_stateful_ACS G M\n        (filter_IFS_no_violations G M edgesList))\n  \\<subseteq> set (filter_IFS_no_violations G M edgesList)\n\ngoal (1 subgoal):\n 1. backflows\n     (set (filter_compliant_stateful_ACS G M\n            (filter_IFS_no_violations G M edgesList)))\n    \\<subseteq> backflows (set (filter_IFS_no_violations G M edgesList))", "by metis"], ["proof (state)\nthis:\n  backflows\n   (set (filter_compliant_stateful_ACS G M\n          (filter_IFS_no_violations G M edgesList)))\n  \\<subseteq> backflows (set (filter_IFS_no_violations G M edgesList))\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "hence subseteqhlp1:\n      \"edges G \\<union> backflows (set (filter_compliant_stateful_ACS G M (filter_IFS_no_violations G M edgesList))) \\<subseteq> edges G \\<union> backflows (set (filter_IFS_no_violations G M edgesList))\""], ["proof (prove)\nusing this:\n  backflows\n   (set (filter_compliant_stateful_ACS G M\n          (filter_IFS_no_violations G M edgesList)))\n  \\<subseteq> backflows (set (filter_IFS_no_violations G M edgesList))\n\ngoal (1 subgoal):\n 1. edges G \\<union>\n    backflows\n     (set (filter_compliant_stateful_ACS G M\n            (filter_IFS_no_violations G M edgesList)))\n    \\<subseteq> edges G \\<union>\n                backflows (set (filter_IFS_no_violations G M edgesList))", "by blast"], ["proof (state)\nthis:\n  edges G \\<union>\n  backflows\n   (set (filter_compliant_stateful_ACS G M\n          (filter_IFS_no_violations G M edgesList)))\n  \\<subseteq> edges G \\<union>\n              backflows (set (filter_IFS_no_violations G M edgesList))\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "from high_level_policy_valid"], ["proof (chain)\npicking this:\n  all_security_requirements_fulfilled M G", "have \"all_security_requirements_fulfilled (get_IFS M) G\""], ["proof (prove)\nusing this:\n  all_security_requirements_fulfilled M G\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M) G", "by(simp add: all_security_requirements_fulfilled_def get_IFS_def)"], ["proof (state)\nthis:\n  all_security_requirements_fulfilled (get_IFS M) G\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "from filter_IFS_no_violations_correct[OF valid_reqs_IFS_D[OF validReqs] wfG this edgesList]"], ["proof (chain)\npicking this:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = nodes G, flows_fix = edges G,\n        flows_state = set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "have \n      \"all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr>hosts = nodes G, flows_fix = edges G, flows_state = set (filter_IFS_no_violations G M edgesList)\\<rparr>)\""], ["proof (prove)\nusing this:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = nodes G, flows_fix = edges G,\n        flows_state = set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = nodes G, flows_fix = edges G,\n          flows_state =\n            set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "."], ["proof (state)\nthis:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = nodes G, flows_fix = edges G,\n        flows_state = set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "from this edgesList"], ["proof (chain)\npicking this:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = nodes G, flows_fix = edges G,\n        flows_state = set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n  set edgesList \\<subseteq> edges G", "have goalIFS:\n        \"all_security_requirements_fulfilled (get_IFS M) \\<lparr>nodes = nodes G, edges = edges G \\<union> backflows (set (filter_IFS_no_violations G M edgesList))\\<rparr>\""], ["proof (prove)\nusing this:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = nodes G, flows_fix = edges G,\n        flows_state = set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n  set edgesList \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     \\<lparr>nodes = nodes G,\n        edges =\n          edges G \\<union>\n          backflows (set (filter_IFS_no_violations G M edgesList))\\<rparr>", "apply(simp add: stateful_policy_to_network_graph_def all_flows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>all_security_requirements_fulfilled (get_IFS M)\n              \\<lparr>nodes = nodes G,\n                 edges =\n                   edges G \\<union>\n                   set (filter_IFS_no_violations G M edgesList) \\<union>\n                   backflows\n                    (set (filter_IFS_no_violations G M edgesList))\\<rparr>;\n     set edgesList \\<subseteq> edges G\\<rbrakk>\n    \\<Longrightarrow> all_security_requirements_fulfilled (get_IFS M)\n                       \\<lparr>nodes = nodes G,\n                          edges =\n                            edges G \\<union>\n                            backflows\n                             (set (filter_IFS_no_violations G M\n                                    edgesList))\\<rparr>", "by (metis Un_absorb2 filter_IFS_no_violations_subseteq_input order_trans)"], ["proof (state)\nthis:\n  all_security_requirements_fulfilled (get_IFS M)\n   \\<lparr>nodes = nodes G,\n      edges =\n        edges G \\<union>\n        backflows (set (filter_IFS_no_violations G M edgesList))\\<rparr>\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "from  wfG filter_IFS_no_violations_subseteq_input[where Es=\"edgesList\" and G=\"G\" and M=\"M\"] edgesList"], ["proof (chain)\npicking this:\n  wf_graph G\n  set (filter_IFS_no_violations G M edgesList) \\<subseteq> set edgesList\n  set edgesList \\<subseteq> edges G", "have \n        \"wf_graph \\<lparr>nodes = nodes G, edges = set (filter_IFS_no_violations G M edgesList)\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph G\n  set (filter_IFS_no_violations G M edgesList) \\<subseteq> set edgesList\n  set edgesList \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = nodes G,\n        edges = set (filter_IFS_no_violations G M edgesList)\\<rparr>", "apply(case_tac G, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nodes edges.\n       \\<lbrakk>wf_graph \\<lparr>nodes = nodes, edges = edges\\<rparr>;\n        set (filter_IFS_no_violations\n              \\<lparr>nodes = nodes, edges = edges\\<rparr> M edgesList)\n        \\<subseteq> set edgesList;\n        set edgesList \\<subseteq> edges;\n        G = \\<lparr>nodes = nodes, edges = edges\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> wf_graph\n                          \\<lparr>nodes = nodes,\n                             edges =\n                               set (filter_IFS_no_violations\n                                     \\<lparr>nodes = nodes,\n  edges = edges\\<rparr>\n                                     M edgesList)\\<rparr>", "by (metis le_iff_sup wf_graph_remove_edges_union)"], ["proof (state)\nthis:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges = set (filter_IFS_no_violations G M edgesList)\\<rparr>\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "from backflows_wf[OF this]"], ["proof (chain)\npicking this:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges =\n        backflows (set (filter_IFS_no_violations G M edgesList))\\<rparr>", "have\n        \"wf_graph \\<lparr>nodes = nodes G, edges = backflows (set (filter_IFS_no_violations G M edgesList))\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges =\n        backflows (set (filter_IFS_no_violations G M edgesList))\\<rparr>\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = nodes G,\n        edges =\n          backflows (set (filter_IFS_no_violations G M edgesList))\\<rparr>", "by(simp)"], ["proof (state)\nthis:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges =\n        backflows (set (filter_IFS_no_violations G M edgesList))\\<rparr>\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "from this wf_graph_union_edges wfG"], ["proof (chain)\npicking this:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges =\n        backflows (set (filter_IFS_no_violations G M edgesList))\\<rparr>\n  \\<lbrakk>wf_graph \\<lparr>nodes = ?V, edges = ?E\\<rparr>;\n   wf_graph \\<lparr>nodes = ?V, edges = ?E'\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> wf_graph\n                     \\<lparr>nodes = ?V, edges = ?E \\<union> ?E'\\<rparr>\n  wf_graph G", "have \n        \"wf_graph \\<lparr>nodes = nodes G, edges = edges G \\<union> backflows (set (filter_IFS_no_violations G M edgesList))\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges =\n        backflows (set (filter_IFS_no_violations G M edgesList))\\<rparr>\n  \\<lbrakk>wf_graph \\<lparr>nodes = ?V, edges = ?E\\<rparr>;\n   wf_graph \\<lparr>nodes = ?V, edges = ?E'\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> wf_graph\n                     \\<lparr>nodes = ?V, edges = ?E \\<union> ?E'\\<rparr>\n  wf_graph G\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = nodes G,\n        edges =\n          edges G \\<union>\n          backflows (set (filter_IFS_no_violations G M edgesList))\\<rparr>", "by (metis graph.cases graph.select_convs(1) graph.select_convs(2))"], ["proof (state)\nthis:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges =\n        edges G \\<union>\n        backflows (set (filter_IFS_no_violations G M edgesList))\\<rparr>\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "from all_security_requirements_fulfilled_mono[OF valid_reqs_IFS_D[OF validReqs] subseteqhlp1 this goalIFS]"], ["proof (chain)\npicking this:\n  all_security_requirements_fulfilled (get_IFS M)\n   \\<lparr>nodes = nodes G,\n      edges =\n        edges G \\<union>\n        backflows\n         (set (filter_compliant_stateful_ACS G M\n                (filter_IFS_no_violations G M edgesList)))\\<rparr>", "have \"all_security_requirements_fulfilled (get_IFS M) \\<lparr>nodes = nodes G, edges = edges G \\<union> backflows (set (filter_compliant_stateful_ACS G M (filter_IFS_no_violations G M edgesList)))\\<rparr>\""], ["proof (prove)\nusing this:\n  all_security_requirements_fulfilled (get_IFS M)\n   \\<lparr>nodes = nodes G,\n      edges =\n        edges G \\<union>\n        backflows\n         (set (filter_compliant_stateful_ACS G M\n                (filter_IFS_no_violations G M edgesList)))\\<rparr>\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     \\<lparr>nodes = nodes G,\n        edges =\n          edges G \\<union>\n          backflows\n           (set (filter_compliant_stateful_ACS G M\n                  (filter_IFS_no_violations G M edgesList)))\\<rparr>", "."], ["proof (state)\nthis:\n  all_security_requirements_fulfilled (get_IFS M)\n   \\<lparr>nodes = nodes G,\n      edges =\n        edges G \\<union>\n        backflows\n         (set (filter_compliant_stateful_ACS G M\n                (filter_IFS_no_violations G M edgesList)))\\<rparr>\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "thus ?thesis"], ["proof (prove)\nusing this:\n  all_security_requirements_fulfilled (get_IFS M)\n   \\<lparr>nodes = nodes G,\n      edges =\n        edges G \\<union>\n        backflows\n         (set (filter_compliant_stateful_ACS G M\n                (filter_IFS_no_violations G M edgesList)))\\<rparr>\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "apply(simp add: stateful_policy_to_network_graph_def all_flows_def generate_valid_stateful_policy_IFSACS_select_simps simp3 Un_absorb2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     \\<lparr>nodes = nodes G,\n        edges =\n          edges G \\<union>\n          backflows\n           (set (filter_compliant_stateful_ACS G M\n                  (filter_IFS_no_violations G M\n                    edgesList)))\\<rparr> \\<Longrightarrow>\n    all_security_requirements_fulfilled (get_IFS M)\n     \\<lparr>nodes = nodes G,\n        edges =\n          edges G \\<union>\n          backflows\n           (flows_state\n             (generate_valid_stateful_policy_IFSACS G M edgesList))\\<rparr>", "by(simp add: generate_valid_stateful_policy_IFSACS_def)"], ["proof (state)\nthis:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS G M edgesList))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem generate_valid_stateful_policy_IFSACS_stateful_policy_compliance:\n  assumes validReqs: \"valid_reqs M\"\n        and     wfG: \"wf_graph G\"\n        and     high_level_policy_valid: \"all_security_requirements_fulfilled M G\"\n        and     edgesList: \"(set edgesList) = edges G\"\n        and     Tau: \"\\<T> = generate_valid_stateful_policy_IFSACS G M edgesList\"\n    shows \"stateful_policy_compliance \\<T> G M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "have 1: \"wf_stateful_policy \\<T>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_stateful_policy \\<T>", "apply(simp add: Tau)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)", "by(simp add: generate_valid_stateful_policy_IFSACS_wf_stateful_policy[OF wfG edgesList])"], ["proof (state)\nthis:\n  wf_stateful_policy \\<T>\n\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "have 2: \"wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)", "by(simp add: generate_valid_stateful_policy_IFSACS_wf_stateful_policy[OF wfG edgesList])"], ["proof (state)\nthis:\n  wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)\n\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "have 3: \"hosts \\<T> = nodes G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hosts \\<T> = nodes G", "apply(simp add: Tau)"], ["proof (prove)\ngoal (1 subgoal):\n 1. hosts (generate_valid_stateful_policy_IFSACS G M edgesList) = nodes G", "by(simp add: generate_valid_stateful_policy_IFSACS_select_simps(1))"], ["proof (state)\nthis:\n  hosts \\<T> = nodes G\n\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "have 4: \"flows_fix \\<T> \\<subseteq> edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flows_fix \\<T> \\<subseteq> edges G", "apply(simp add: Tau)"], ["proof (prove)\ngoal (1 subgoal):\n 1. flows_fix (generate_valid_stateful_policy_IFSACS G M edgesList)\n    \\<subseteq> edges G", "by(simp add: generate_valid_stateful_policy_IFSACS_select_simps(2))"], ["proof (state)\nthis:\n  flows_fix \\<T> \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "have 5: \" all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<T>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph \\<T>)", "apply(simp add: Tau)"], ["proof (prove)\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "using generate_valid_stateful_policy_IFSACS_all_security_requirements_fulfilled_IFS[OF validReqs wfG high_level_policy_valid] edgesList"], ["proof (prove)\nusing this:\n  set ?edgesList \\<subseteq> edges G \\<Longrightarrow>\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS G M ?edgesList))\n  set edgesList = edges G\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS G M edgesList))", "by blast"], ["proof (state)\nthis:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph \\<T>)\n\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "have 6: \"\\<forall>F\\<in>get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<T>). F \\<subseteq> backflows (filternew_flows_state \\<T>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "using filter_compliant_stateful_ACS_correct[OF valid_reqs_ACS_D[OF validReqs] wfG _ _ Tau[simplified generate_valid_stateful_policy_IFSACS_def Let_def]] all_security_requirements_fulfilled_ACS_D[OF high_level_policy_valid]\n        edgesList filter_IFS_no_violations_subseteq_input"], ["proof (prove)\nusing this:\n  \\<lbrakk>set (filter_IFS_no_violations G M edgesList) \\<subseteq> edges G;\n   all_security_requirements_fulfilled (get_ACS M) G\\<rbrakk>\n  \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                                    (stateful_policy_to_network_graph \\<T>).\n                       F \\<subseteq> backflows (filternew_flows_state \\<T>)\n  all_security_requirements_fulfilled (get_ACS M) G\n  set edgesList = edges G\n  set (filter_IFS_no_violations ?G ?M ?Es) \\<subseteq> set ?Es\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "by metis"], ["proof (state)\nthis:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph \\<T>).\n     F \\<subseteq> backflows (filternew_flows_state \\<T>)\n\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "from 1 2 3 4 5 6 validReqs high_level_policy_valid wfG"], ["proof (chain)\npicking this:\n  wf_stateful_policy \\<T>\n  wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)\n  hosts \\<T> = nodes G\n  flows_fix \\<T> \\<subseteq> edges G\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph \\<T>)\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph \\<T>).\n     F \\<subseteq> backflows (filternew_flows_state \\<T>)\n  valid_reqs M\n  all_security_requirements_fulfilled M G\n  wf_graph G", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_stateful_policy \\<T>\n  wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)\n  hosts \\<T> = nodes G\n  flows_fix \\<T> \\<subseteq> edges G\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph \\<T>)\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph \\<T>).\n     F \\<subseteq> backflows (filternew_flows_state \\<T>)\n  valid_reqs M\n  all_security_requirements_fulfilled M G\n  wf_graph G\n\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "unfolding stateful_policy_compliance_def"], ["proof (prove)\nusing this:\n  wf_stateful_policy \\<T>\n  wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)\n  hosts \\<T> = nodes G\n  flows_fix \\<T> \\<subseteq> edges G\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph \\<T>)\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph \\<T>).\n     F \\<subseteq> backflows (filternew_flows_state \\<T>)\n  valid_reqs M\n  all_security_requirements_fulfilled M G\n  wf_graph G\n\ngoal (1 subgoal):\n 1. ((wf_graph G \\<and> valid_reqs M) \\<and>\n     all_security_requirements_fulfilled M G \\<and>\n     wf_stateful_policy \\<T>) \\<and>\n    (hosts \\<T> = nodes G \\<and> flows_fix \\<T> \\<subseteq> edges G) \\<and>\n    all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph \\<T>) \\<and>\n    (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph \\<T>).\n        F \\<subseteq> backflows (filternew_flows_state \\<T>))", "by simp"], ["proof (state)\nthis:\n  stateful_policy_compliance \\<T> G M\n\ngoal:\nNo subgoals!", "qed"], ["", "definition generate_valid_stateful_policy_IFSACS_2 :: \"'v::vertex graph \\<Rightarrow> 'v SecurityInvariant_configured list \\<Rightarrow> ('v \\<times> 'v) list \\<Rightarrow> 'v stateful_policy\" where\n    \"generate_valid_stateful_policy_IFSACS_2 G M edgesList \\<equiv> \n    \\<lparr> hosts = nodes G, flows_fix = edges G, flows_state = set (filter_IFS_no_violations G M edgesList) \\<inter> set (filter_compliant_stateful_ACS G M edgesList) \\<rparr>\""], ["", "lemma generate_valid_stateful_policy_IFSACS_2_wf_stateful_policy: assumes wfG: \"wf_graph G\"\n          and     edgesList: \"(set edgesList) = edges G\"\n          shows \"wf_stateful_policy (generate_valid_stateful_policy_IFSACS_2 G M edgesList)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_stateful_policy\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_stateful_policy\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList)", "from  wfG"], ["proof (chain)\npicking this:\n  wf_graph G", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_graph G\n\ngoal (1 subgoal):\n 1. wf_stateful_policy\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList)", "apply(simp add: generate_valid_stateful_policy_IFSACS_2_def wf_stateful_policy_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_graph G \\<Longrightarrow>\n    fst ` edges G \\<subseteq> nodes G \\<and>\n    snd ` edges G \\<subseteq> nodes G \\<and>\n    set (filter_IFS_no_violations G M edgesList) \\<inter>\n    set (filter_compliant_stateful_ACS G M edgesList)\n    \\<subseteq> edges G \\<and>\n    finite (nodes G)", "apply(auto simp add: wf_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set (filter_IFS_no_violations G M edgesList);\n        (a, b) \\<in> set (filter_compliant_stateful_ACS G M edgesList);\n        fst ` edges G \\<subseteq> nodes G;\n        snd ` edges G \\<subseteq> nodes G; finite (edges G);\n        finite (nodes G)\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> edges G", "using edgesList filter_IFS_no_violations_subseteq_input"], ["proof (prove)\nusing this:\n  set edgesList = edges G\n  set (filter_IFS_no_violations ?G ?M ?Es) \\<subseteq> set ?Es\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<in> set (filter_IFS_no_violations G M edgesList);\n        (a, b) \\<in> set (filter_compliant_stateful_ACS G M edgesList);\n        fst ` edges G \\<subseteq> nodes G;\n        snd ` edges G \\<subseteq> nodes G; finite (edges G);\n        finite (nodes G)\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> edges G", "by (metis rev_subsetD)"], ["proof (state)\nthis:\n  wf_stateful_policy (generate_valid_stateful_policy_IFSACS_2 G M edgesList)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma generate_valid_stateful_policy_IFSACS_2_select_simps:\n   shows \"hosts (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = nodes G\"\n   and   \"flows_fix (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = edges G\"\n   and   \"flows_state (generate_valid_stateful_policy_IFSACS_2 G M edgesList) \\<subseteq> set edgesList\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hosts (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    nodes G &&&\n    flows_fix (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    edges G &&&\n    flows_state (generate_valid_stateful_policy_IFSACS_2 G M edgesList)\n    \\<subseteq> set edgesList", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. hosts (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = nodes G\n 2. flows_fix (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    edges G\n 3. flows_state (generate_valid_stateful_policy_IFSACS_2 G M edgesList)\n    \\<subseteq> set edgesList", "show  \"hosts (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = nodes G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hosts (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = nodes G", "by(simp add: generate_valid_stateful_policy_IFSACS_2_def)"], ["proof (state)\nthis:\n  hosts (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = nodes G\n\ngoal (2 subgoals):\n 1. flows_fix (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    edges G\n 2. flows_state (generate_valid_stateful_policy_IFSACS_2 G M edgesList)\n    \\<subseteq> set edgesList", "show \"flows_fix (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flows_fix (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    edges G", "by(simp add: generate_valid_stateful_policy_IFSACS_2_def)"], ["proof (state)\nthis:\n  flows_fix (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n  edges G\n\ngoal (1 subgoal):\n 1. flows_state (generate_valid_stateful_policy_IFSACS_2 G M edgesList)\n    \\<subseteq> set edgesList", "show \"flows_state (generate_valid_stateful_policy_IFSACS_2 G M edgesList) \\<subseteq> set edgesList\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flows_state (generate_valid_stateful_policy_IFSACS_2 G M edgesList)\n    \\<subseteq> set edgesList", "apply(simp add: generate_valid_stateful_policy_IFSACS_2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (filter_IFS_no_violations G M edgesList) \\<inter>\n    set (filter_compliant_stateful_ACS G M edgesList)\n    \\<subseteq> set edgesList", "using filter_compliant_stateful_ACS_subseteq_input"], ["proof (prove)\nusing this:\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es\n\ngoal (1 subgoal):\n 1. set (filter_IFS_no_violations G M edgesList) \\<inter>\n    set (filter_compliant_stateful_ACS G M edgesList)\n    \\<subseteq> set edgesList", "by (metis inf.coboundedI2)"], ["proof (state)\nthis:\n  flows_state (generate_valid_stateful_policy_IFSACS_2 G M edgesList)\n  \\<subseteq> set edgesList\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma generate_valid_stateful_policy_IFSACS_2_all_security_requirements_fulfilled_IFS: assumes validReqs: \"valid_reqs M\"\n          and     wfG: \"wf_graph G\"\n          and     high_level_policy_valid: \"all_security_requirements_fulfilled M G\"\n          and     edgesList: \"(set edgesList) \\<subseteq> edges G\"\n          shows \"all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph (generate_valid_stateful_policy_IFSACS_2 G M edgesList))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS_2 G M edgesList))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS_2 G M edgesList))", "have subseteq: \"set (filter_IFS_no_violations G M edgesList) \\<inter> set (filter_compliant_stateful_ACS G M edgesList) \\<subseteq> set (filter_IFS_no_violations G M edgesList)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (filter_IFS_no_violations G M edgesList) \\<inter>\n    set (filter_compliant_stateful_ACS G M edgesList)\n    \\<subseteq> set (filter_IFS_no_violations G M edgesList)", "by blast"], ["proof (state)\nthis:\n  set (filter_IFS_no_violations G M edgesList) \\<inter>\n  set (filter_compliant_stateful_ACS G M edgesList)\n  \\<subseteq> set (filter_IFS_no_violations G M edgesList)\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS_2 G M edgesList))", "from wfG filter_IFS_no_violations_subseteq_input edgesList"], ["proof (chain)\npicking this:\n  wf_graph G\n  set (filter_IFS_no_violations ?G ?M ?Es) \\<subseteq> set ?Es\n  set edgesList \\<subseteq> edges G", "have wfG': \"wf_graph \\<lparr>nodes = nodes G, edges = edges G \\<union> set (filter_IFS_no_violations G M edgesList)\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph G\n  set (filter_IFS_no_violations ?G ?M ?Es) \\<subseteq> set ?Es\n  set edgesList \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = nodes G,\n        edges =\n          edges G \\<union>\n          set (filter_IFS_no_violations G M edgesList)\\<rparr>", "by (metis graph_eq_intro Un_absorb2 graph.select_convs(1) graph.select_convs(2) order.trans)"], ["proof (state)\nthis:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges =\n        edges G \\<union>\n        set (filter_IFS_no_violations G M edgesList)\\<rparr>\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS_2 G M edgesList))", "from high_level_policy_valid"], ["proof (chain)\npicking this:\n  all_security_requirements_fulfilled M G", "have \"all_security_requirements_fulfilled (get_IFS M) G\""], ["proof (prove)\nusing this:\n  all_security_requirements_fulfilled M G\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M) G", "by(simp add: all_security_requirements_fulfilled_def get_IFS_def)"], ["proof (state)\nthis:\n  all_security_requirements_fulfilled (get_IFS M) G\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS_2 G M edgesList))", "from filter_IFS_no_violations_correct[OF valid_reqs_IFS_D[OF validReqs] wfG this edgesList]"], ["proof (chain)\npicking this:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = nodes G, flows_fix = edges G,\n        flows_state = set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "have \n      \"all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<lparr>hosts = nodes G, flows_fix = edges G, flows_state = set (filter_IFS_no_violations G M edgesList)\\<rparr>)\""], ["proof (prove)\nusing this:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = nodes G, flows_fix = edges G,\n        flows_state = set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       \\<lparr>hosts = nodes G, flows_fix = edges G,\n          flows_state =\n            set (filter_IFS_no_violations G M edgesList)\\<rparr>)", "."], ["proof (state)\nthis:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = nodes G, flows_fix = edges G,\n        flows_state = set (filter_IFS_no_violations G M edgesList)\\<rparr>)\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS_2 G M edgesList))", "from all_security_requirements_fulfilled_mono_stateful_policy_to_network_graph[OF valid_reqs_IFS_D[OF validReqs] subseteq wfG' this]"], ["proof (chain)\npicking this:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = nodes G, flows_fix = edges G,\n        flows_state =\n          set (filter_IFS_no_violations G M edgesList) \\<inter>\n          set (filter_compliant_stateful_ACS G M edgesList)\\<rparr>)", "have \"all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph (generate_valid_stateful_policy_IFSACS_2 G M edgesList))\""], ["proof (prove)\nusing this:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     \\<lparr>hosts = nodes G, flows_fix = edges G,\n        flows_state =\n          set (filter_IFS_no_violations G M edgesList) \\<inter>\n          set (filter_compliant_stateful_ACS G M edgesList)\\<rparr>)\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS_2 G M edgesList))", "by(simp add: generate_valid_stateful_policy_IFSACS_2_def)"], ["proof (state)\nthis:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList))\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS_2 G M edgesList))", "thus ?thesis"], ["proof (prove)\nusing this:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList))\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS_2 G M edgesList))", "."], ["proof (state)\nthis:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma generate_valid_stateful_policy_IFSACS_2_filter_compliant_stateful_ACS:\n  assumes validReqs: \"valid_reqs M\"\n        and     wfG: \"wf_graph G\"\n        and     high_level_policy_valid: \"all_security_requirements_fulfilled M G\"\n        and     edgesList: \"(set edgesList) \\<subseteq> edges G\"\n        and     Tau: \"\\<T> = generate_valid_stateful_policy_IFSACS_2 G M edgesList\"\n  shows \"\\<forall>F\\<in>get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<T>). F \\<subseteq> backflows (filternew_flows_state \\<T>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "let ?filterACS = \"set (filter_compliant_stateful_ACS G M edgesList)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "let ?filterIFS = \"set (filter_IFS_no_violations G M edgesList)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "from all_security_requirements_fulfilled_ACS_D[OF high_level_policy_valid]"], ["proof (chain)\npicking this:\n  all_security_requirements_fulfilled (get_ACS M) G", "have \"all_security_requirements_fulfilled (get_ACS M) G\""], ["proof (prove)\nusing this:\n  all_security_requirements_fulfilled (get_ACS M) G\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_ACS M) G", "."], ["proof (state)\nthis:\n  all_security_requirements_fulfilled (get_ACS M) G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "from filter_compliant_stateful_ACS_correct[OF valid_reqs_ACS_D[OF validReqs] wfG edgesList this]"], ["proof (chain)\npicking this:\n  ?\\<T> =\n  \\<lparr>hosts = nodes G, flows_fix = edges G,\n     flows_state =\n       set (filter_compliant_stateful_ACS G M\n             edgesList)\\<rparr> \\<Longrightarrow>\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph ?\\<T>).\n     F \\<subseteq> backflows (filternew_flows_state ?\\<T>)", "have \n        \"\\<forall>F\\<in>get_offending_flows (get_ACS M) (stateful_policy_to_network_graph  \\<lparr>hosts = nodes G, flows_fix = edges G, flows_state = ?filterACS\\<rparr>). \n          F \\<subseteq> backflows (?filterACS) - edges G\""], ["proof (prove)\nusing this:\n  ?\\<T> =\n  \\<lparr>hosts = nodes G, flows_fix = edges G,\n     flows_state =\n       set (filter_compliant_stateful_ACS G M\n             edgesList)\\<rparr> \\<Longrightarrow>\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph ?\\<T>).\n     F \\<subseteq> backflows (filternew_flows_state ?\\<T>)\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph\n                      \\<lparr>hosts = nodes G, flows_fix = edges G,\n                         flows_state =\n                           set (filter_compliant_stateful_ACS G M\n                                 edgesList)\\<rparr>).\n       F \\<subseteq> backflows\n                      (set (filter_compliant_stateful_ACS G M edgesList)) -\n                     edges G", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph\n                      \\<lparr>hosts = nodes G, flows_fix = edges G,\n                         flows_state =\n                           set (filter_compliant_stateful_ACS G M\n                                 edgesList)\\<rparr>).\n       F \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = nodes G, flows_fix = edges G,\n                           flows_state =\n                             set (filter_compliant_stateful_ACS G M\n                                   edgesList)\\<rparr>) \\<Longrightarrow>\n    \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph\n                      \\<lparr>hosts = nodes G, flows_fix = edges G,\n                         flows_state =\n                           set (filter_compliant_stateful_ACS G M\n                                 edgesList)\\<rparr>).\n       F \\<subseteq> backflows\n                      (set (filter_compliant_stateful_ACS G M edgesList)) -\n                     edges G", "apply(simp add: backflows_minus_backflows[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph\n                      \\<lparr>hosts = nodes G, flows_fix = edges G,\n                         flows_state =\n                           set (filter_compliant_stateful_ACS G M\n                                 edgesList)\\<rparr>).\n       F \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = nodes G, flows_fix = edges G,\n                           flows_state =\n                             set (filter_compliant_stateful_ACS G M\n                                   edgesList)\\<rparr>) \\<Longrightarrow>\n    \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph\n                      \\<lparr>hosts = nodes G, flows_fix = edges G,\n                         flows_state =\n                           set (filter_compliant_stateful_ACS G M\n                                 edgesList)\\<rparr>).\n       F \\<subseteq> backflows\n                      (set (filter_compliant_stateful_ACS G M edgesList) -\n                       backflows (edges G))", "by(simp add: filternew_flows_state_alt)"], ["proof (state)\nthis:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = nodes G, flows_fix = edges G,\n                       flows_state =\n                         set (filter_compliant_stateful_ACS G M\n                               edgesList)\\<rparr>).\n     F \\<subseteq> backflows\n                    (set (filter_compliant_stateful_ACS G M edgesList)) -\n                   edges G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "hence \"\\<forall>F\\<in>get_offending_flows (get_ACS M) \\<lparr>nodes = nodes G, edges = edges G \\<union> backflows (?filterACS)\\<rparr>. F \\<subseteq> backflows (?filterACS) - edges G\""], ["proof (prove)\nusing this:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = nodes G, flows_fix = edges G,\n                       flows_state =\n                         set (filter_compliant_stateful_ACS G M\n                               edgesList)\\<rparr>).\n     F \\<subseteq> backflows\n                    (set (filter_compliant_stateful_ACS G M edgesList)) -\n                   edges G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    \\<lparr>nodes = nodes G,\n                       edges =\n                         edges G \\<union>\n                         backflows\n                          (set (filter_compliant_stateful_ACS G M\n                                 edgesList))\\<rparr>.\n       F \\<subseteq> backflows\n                      (set (filter_compliant_stateful_ACS G M edgesList)) -\n                     edges G", "apply(simp add: stateful_policy_to_network_graph_def all_flows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    \\<lparr>nodes = nodes G,\n                       edges =\n                         edges G \\<union>\n                         set (filter_compliant_stateful_ACS G M\n                               edgesList) \\<union>\n                         backflows\n                          (set (filter_compliant_stateful_ACS G M\n                                 edgesList))\\<rparr>.\n       F \\<subseteq> backflows\n                      (set (filter_compliant_stateful_ACS G M edgesList)) -\n                     edges G \\<Longrightarrow>\n    \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    \\<lparr>nodes = nodes G,\n                       edges =\n                         edges G \\<union>\n                         backflows\n                          (set (filter_compliant_stateful_ACS G M\n                                 edgesList))\\<rparr>.\n       F \\<subseteq> backflows\n                      (set (filter_compliant_stateful_ACS G M edgesList)) -\n                     edges G", "using filter_compliant_stateful_ACS_subseteq_input"], ["proof (prove)\nusing this:\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    \\<lparr>nodes = nodes G,\n                       edges =\n                         edges G \\<union>\n                         set (filter_compliant_stateful_ACS G M\n                               edgesList) \\<union>\n                         backflows\n                          (set (filter_compliant_stateful_ACS G M\n                                 edgesList))\\<rparr>.\n       F \\<subseteq> backflows\n                      (set (filter_compliant_stateful_ACS G M edgesList)) -\n                     edges G \\<Longrightarrow>\n    \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    \\<lparr>nodes = nodes G,\n                       edges =\n                         edges G \\<union>\n                         backflows\n                          (set (filter_compliant_stateful_ACS G M\n                                 edgesList))\\<rparr>.\n       F \\<subseteq> backflows\n                      (set (filter_compliant_stateful_ACS G M edgesList)) -\n                     edges G", "by (metis (lifting, no_types) Un_absorb2 edgesList order_trans)"], ["proof (state)\nthis:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  \\<lparr>nodes = nodes G,\n                     edges =\n                       edges G \\<union>\n                       backflows\n                        (set (filter_compliant_stateful_ACS G M\n                               edgesList))\\<rparr>.\n     F \\<subseteq> backflows\n                    (set (filter_compliant_stateful_ACS G M edgesList)) -\n                   edges G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "from this validReqs"], ["proof (chain)\npicking this:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  \\<lparr>nodes = nodes G,\n                     edges =\n                       edges G \\<union>\n                       backflows\n                        (set (filter_compliant_stateful_ACS G M\n                               edgesList))\\<rparr>.\n     F \\<subseteq> backflows\n                    (set (filter_compliant_stateful_ACS G M edgesList)) -\n                   edges G\n  valid_reqs M", "have offending_filterACS_upperbound:\n        \"\\<And>m. m \\<in> set (get_ACS M) \\<Longrightarrow> \n        \\<Union>(c_offending_flows m \\<lparr>nodes = nodes G, edges = edges G \\<union> backflows (?filterACS)\\<rparr>) \\<subseteq> \n          backflows (?filterACS) - edges G\""], ["proof (prove)\nusing this:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  \\<lparr>nodes = nodes G,\n                     edges =\n                       edges G \\<union>\n                       backflows\n                        (set (filter_compliant_stateful_ACS G M\n                               edgesList))\\<rparr>.\n     F \\<subseteq> backflows\n                    (set (filter_compliant_stateful_ACS G M edgesList)) -\n                   edges G\n  valid_reqs M\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       m \\<in> set (get_ACS M) \\<Longrightarrow>\n       \\<Union>\n        (c_offending_flows m\n          \\<lparr>nodes = nodes G,\n             edges =\n               edges G \\<union>\n               backflows\n                (set (filter_compliant_stateful_ACS G M edgesList))\\<rparr>)\n       \\<subseteq> backflows\n                    (set (filter_compliant_stateful_ACS G M edgesList)) -\n                   edges G", "by(simp add: valid_reqs_def get_offending_flows_def, blast)"], ["proof (state)\nthis:\n  ?m \\<in> set (get_ACS M) \\<Longrightarrow>\n  \\<Union>\n   (c_offending_flows ?m\n     \\<lparr>nodes = nodes G,\n        edges =\n          edges G \\<union>\n          backflows\n           (set (filter_compliant_stateful_ACS G M edgesList))\\<rparr>)\n  \\<subseteq> backflows\n               (set (filter_compliant_stateful_ACS G M edgesList)) -\n              edges G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "from wfG filter_compliant_stateful_ACS_subseteq_input edgesList"], ["proof (chain)\npicking this:\n  wf_graph G\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es\n  set edgesList \\<subseteq> edges G", "have \"wf_graph \\<lparr>nodes = nodes G, edges = ?filterACS\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph G\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es\n  set edgesList \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = nodes G,\n        edges = set (filter_compliant_stateful_ACS G M edgesList)\\<rparr>", "by (metis graph.cases graph.select_convs(1) graph.select_convs(2) le_iff_sup wf_graph_remove_edges_union)"], ["proof (state)\nthis:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges = set (filter_compliant_stateful_ACS G M edgesList)\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "from this backflows_wf"], ["proof (chain)\npicking this:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges = set (filter_compliant_stateful_ACS G M edgesList)\\<rparr>\n  wf_graph \\<lparr>nodes = ?N, edges = ?E\\<rparr> \\<Longrightarrow>\n  wf_graph \\<lparr>nodes = ?N, edges = backflows ?E\\<rparr>", "have \"wf_graph \\<lparr>nodes = nodes G, edges = backflows (?filterACS)\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges = set (filter_compliant_stateful_ACS G M edgesList)\\<rparr>\n  wf_graph \\<lparr>nodes = ?N, edges = ?E\\<rparr> \\<Longrightarrow>\n  wf_graph \\<lparr>nodes = ?N, edges = backflows ?E\\<rparr>\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = nodes G,\n        edges =\n          backflows\n           (set (filter_compliant_stateful_ACS G M edgesList))\\<rparr>", "by blast"], ["proof (state)\nthis:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges =\n        backflows\n         (set (filter_compliant_stateful_ACS G M edgesList))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "moreover"], ["proof (state)\nthis:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges =\n        backflows\n         (set (filter_compliant_stateful_ACS G M edgesList))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "have \"wf_graph \\<lparr>nodes = nodes G, edges = edges G\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_graph \\<lparr>nodes = nodes G, edges = edges G\\<rparr>", "using wfG"], ["proof (prove)\nusing this:\n  wf_graph G\n\ngoal (1 subgoal):\n 1. wf_graph \\<lparr>nodes = nodes G, edges = edges G\\<rparr>", "by(case_tac G, simp)"], ["proof (state)\nthis:\n  wf_graph \\<lparr>nodes = nodes G, edges = edges G\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "ultimately"], ["proof (chain)\npicking this:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges =\n        backflows\n         (set (filter_compliant_stateful_ACS G M edgesList))\\<rparr>\n  wf_graph \\<lparr>nodes = nodes G, edges = edges G\\<rparr>", "have wfG1: \"wf_graph \\<lparr>nodes = nodes G, edges = edges G \\<union> backflows (?filterACS)\\<rparr>\""], ["proof (prove)\nusing this:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges =\n        backflows\n         (set (filter_compliant_stateful_ACS G M edgesList))\\<rparr>\n  wf_graph \\<lparr>nodes = nodes G, edges = edges G\\<rparr>\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = nodes G,\n        edges =\n          edges G \\<union>\n          backflows\n           (set (filter_compliant_stateful_ACS G M edgesList))\\<rparr>", "using wf_graph_union_edges"], ["proof (prove)\nusing this:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges =\n        backflows\n         (set (filter_compliant_stateful_ACS G M edgesList))\\<rparr>\n  wf_graph \\<lparr>nodes = nodes G, edges = edges G\\<rparr>\n  \\<lbrakk>wf_graph \\<lparr>nodes = ?V, edges = ?E\\<rparr>;\n   wf_graph \\<lparr>nodes = ?V, edges = ?E'\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> wf_graph\n                     \\<lparr>nodes = ?V, edges = ?E \\<union> ?E'\\<rparr>\n\ngoal (1 subgoal):\n 1. wf_graph\n     \\<lparr>nodes = nodes G,\n        edges =\n          edges G \\<union>\n          backflows\n           (set (filter_compliant_stateful_ACS G M edgesList))\\<rparr>", "by blast"], ["proof (state)\nthis:\n  wf_graph\n   \\<lparr>nodes = nodes G,\n      edges =\n        edges G \\<union>\n        backflows\n         (set (filter_compliant_stateful_ACS G M edgesList))\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "from edgesList"], ["proof (chain)\npicking this:\n  set edgesList \\<subseteq> edges G", "have edgesUnsimp: \"edges G \\<union> (?filterACS \\<inter> ?filterIFS) = edges G\""], ["proof (prove)\nusing this:\n  set edgesList \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. edges G \\<union>\n    set (filter_compliant_stateful_ACS G M edgesList) \\<inter>\n    set (filter_IFS_no_violations G M edgesList) =\n    edges G", "using filter_IFS_no_violations_subseteq_input filter_compliant_stateful_ACS_subseteq_input"], ["proof (prove)\nusing this:\n  set edgesList \\<subseteq> edges G\n  set (filter_IFS_no_violations ?G ?M ?Es) \\<subseteq> set ?Es\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es\n\ngoal (1 subgoal):\n 1. edges G \\<union>\n    set (filter_compliant_stateful_ACS G M edgesList) \\<inter>\n    set (filter_IFS_no_violations G M edgesList) =\n    edges G", "by blast\n\n      \\<comment> \\<open>We set up a ?REM that we use in the @{thm configured_SecurityInvariant.Un_set_offending_flows_bound_minus_subseteq} lemma\\<close>"], ["proof (state)\nthis:\n  edges G \\<union>\n  set (filter_compliant_stateful_ACS G M edgesList) \\<inter>\n  set (filter_IFS_no_violations G M edgesList) =\n  edges G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "let ?REM = \"(backflows (?filterACS) - backflows (?filterIFS)) - edges G\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "have REM_gives_desired_upper_bound: \"(backflows (?filterACS) - edges G) - ?REM = backflows (?filterACS \\<inter> ?filterIFS) - edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. backflows (set (filter_compliant_stateful_ACS G M edgesList)) -\n    edges G -\n    (backflows (set (filter_compliant_stateful_ACS G M edgesList)) -\n     backflows (set (filter_IFS_no_violations G M edgesList)) -\n     edges G) =\n    backflows\n     (set (filter_compliant_stateful_ACS G M edgesList) \\<inter>\n      set (filter_IFS_no_violations G M edgesList)) -\n    edges G", "by(simp add: backflows_def, blast)"], ["proof (state)\nthis:\n  backflows (set (filter_compliant_stateful_ACS G M edgesList)) - edges G -\n  (backflows (set (filter_compliant_stateful_ACS G M edgesList)) -\n   backflows (set (filter_IFS_no_violations G M edgesList)) -\n   edges G) =\n  backflows\n   (set (filter_compliant_stateful_ACS G M edgesList) \\<inter>\n    set (filter_IFS_no_violations G M edgesList)) -\n  edges G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "have REM_gives_desired_edges: \"(edges G \\<union> backflows (?filterACS)) - ?REM = edges G \\<union> (backflows (?filterACS \\<inter> ?filterIFS))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges G \\<union>\n    backflows (set (filter_compliant_stateful_ACS G M edgesList)) -\n    (backflows (set (filter_compliant_stateful_ACS G M edgesList)) -\n     backflows (set (filter_IFS_no_violations G M edgesList)) -\n     edges G) =\n    edges G \\<union>\n    backflows\n     (set (filter_compliant_stateful_ACS G M edgesList) \\<inter>\n      set (filter_IFS_no_violations G M edgesList))", "by(simp add: backflows_def, blast)"], ["proof (state)\nthis:\n  edges G \\<union>\n  backflows (set (filter_compliant_stateful_ACS G M edgesList)) -\n  (backflows (set (filter_compliant_stateful_ACS G M edgesList)) -\n   backflows (set (filter_IFS_no_violations G M edgesList)) -\n   edges G) =\n  edges G \\<union>\n  backflows\n   (set (filter_compliant_stateful_ACS G M edgesList) \\<inter>\n    set (filter_IFS_no_violations G M edgesList))\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "from wfG"], ["proof (chain)\npicking this:\n  wf_graph G", "have \"finite (edges G)\""], ["proof (prove)\nusing this:\n  wf_graph G\n\ngoal (1 subgoal):\n 1. finite (edges G)", "using wf_graph_def"], ["proof (prove)\nusing this:\n  wf_graph G\n  wf_graph ?G \\<equiv>\n  (fst ` edges ?G \\<subseteq> nodes ?G \\<and>\n   snd ` edges ?G \\<subseteq> nodes ?G) \\<and>\n  finite (edges ?G) \\<and> finite (nodes ?G)\n\ngoal (1 subgoal):\n 1. finite (edges G)", "by blast"], ["proof (state)\nthis:\n  finite (edges G)\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "hence \"finite (backflows ?filterACS)\""], ["proof (prove)\nusing this:\n  finite (edges G)\n\ngoal (1 subgoal):\n 1. finite (backflows (set (filter_compliant_stateful_ACS G M edgesList)))", "using backflows_finite"], ["proof (prove)\nusing this:\n  finite (edges G)\n  finite ?E \\<Longrightarrow> finite (backflows ?E)\n\ngoal (1 subgoal):\n 1. finite (backflows (set (filter_compliant_stateful_ACS G M edgesList)))", "by (metis List.finite_set)"], ["proof (state)\nthis:\n  finite (backflows (set (filter_compliant_stateful_ACS G M edgesList)))\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "hence finite1: \"finite (backflows (?filterACS) - backflows (?filterIFS) - edges G)\""], ["proof (prove)\nusing this:\n  finite (backflows (set (filter_compliant_stateful_ACS G M edgesList)))\n\ngoal (1 subgoal):\n 1. finite\n     (backflows (set (filter_compliant_stateful_ACS G M edgesList)) -\n      backflows (set (filter_IFS_no_violations G M edgesList)) -\n      edges G)", "by fast"], ["proof (state)\nthis:\n  finite\n   (backflows (set (filter_compliant_stateful_ACS G M edgesList)) -\n    backflows (set (filter_IFS_no_violations G M edgesList)) -\n    edges G)\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "from configured_SecurityInvariant.Un_set_offending_flows_bound_minus_subseteq[where E'=\"?REM\" and X=\"(backflows (?filterACS) - edges G)\",\n          OF _ wfG1 offending_filterACS_upperbound, simplified REM_gives_desired_upper_bound REM_gives_desired_edges\n          ] valid_reqs_ACS_D[OF validReqs, unfolded valid_reqs_def]"], ["proof (chain)\npicking this:\n  \\<lbrakk>configured_SecurityInvariant ?m;\n   ?m \\<in> set (get_ACS M)\\<rbrakk>\n  \\<Longrightarrow> \\<Union>\n                     (c_offending_flows ?m\n                       \\<lparr>nodes = nodes G,\n                          edges =\n                            edges G \\<union>\n                            backflows\n                             (set (filter_compliant_stateful_ACS G M\n                                    edgesList) \\<inter>\n                              set (filter_IFS_no_violations G M\n                                    edgesList))\\<rparr>)\n                    \\<subseteq> backflows\n                                 (set (filter_compliant_stateful_ACS G M\n  edgesList) \\<inter>\n                                  set (filter_IFS_no_violations G M\n  edgesList)) -\n                                edges G\n  \\<forall>m\\<in>set (get_ACS M). configured_SecurityInvariant m", "have \"\\<And>m. m \\<in> set (get_ACS M) \\<Longrightarrow>\n              \\<forall>F\\<in>c_offending_flows m \\<lparr>nodes = nodes G, edges = edges G \\<union> backflows (?filterACS \\<inter> ?filterIFS)\\<rparr>.\n                  F \\<subseteq> backflows (?filterACS \\<inter> ?filterIFS) - edges G\""], ["proof (prove)\nusing this:\n  \\<lbrakk>configured_SecurityInvariant ?m;\n   ?m \\<in> set (get_ACS M)\\<rbrakk>\n  \\<Longrightarrow> \\<Union>\n                     (c_offending_flows ?m\n                       \\<lparr>nodes = nodes G,\n                          edges =\n                            edges G \\<union>\n                            backflows\n                             (set (filter_compliant_stateful_ACS G M\n                                    edgesList) \\<inter>\n                              set (filter_IFS_no_violations G M\n                                    edgesList))\\<rparr>)\n                    \\<subseteq> backflows\n                                 (set (filter_compliant_stateful_ACS G M\n  edgesList) \\<inter>\n                                  set (filter_IFS_no_violations G M\n  edgesList)) -\n                                edges G\n  \\<forall>m\\<in>set (get_ACS M). configured_SecurityInvariant m\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       m \\<in> set (get_ACS M) \\<Longrightarrow>\n       \\<forall>F\\<in>c_offending_flows m\n                       \\<lparr>nodes = nodes G,\n                          edges =\n                            edges G \\<union>\n                            backflows\n                             (set (filter_compliant_stateful_ACS G M\n                                    edgesList) \\<inter>\n                              set (filter_IFS_no_violations G M\n                                    edgesList))\\<rparr>.\n          F \\<subseteq> backflows\n                         (set (filter_compliant_stateful_ACS G M\n                                edgesList) \\<inter>\n                          set (filter_IFS_no_violations G M edgesList)) -\n                        edges G", "by blast"], ["proof (state)\nthis:\n  ?m \\<in> set (get_ACS M) \\<Longrightarrow>\n  \\<forall>F\\<in>c_offending_flows ?m\n                  \\<lparr>nodes = nodes G,\n                     edges =\n                       edges G \\<union>\n                       backflows\n                        (set (filter_compliant_stateful_ACS G M\n                               edgesList) \\<inter>\n                         set (filter_IFS_no_violations G M\n                               edgesList))\\<rparr>.\n     F \\<subseteq> backflows\n                    (set (filter_compliant_stateful_ACS G M\n                           edgesList) \\<inter>\n                     set (filter_IFS_no_violations G M edgesList)) -\n                   edges G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "hence \"\\<forall>F\\<in>get_offending_flows (get_ACS M)\n         \\<lparr>nodes = nodes G, edges = edges G \\<union> (backflows (?filterACS \\<inter> ?filterIFS))\\<rparr>. F \\<subseteq> backflows (?filterACS \\<inter> ?filterIFS) - edges G\""], ["proof (prove)\nusing this:\n  ?m \\<in> set (get_ACS M) \\<Longrightarrow>\n  \\<forall>F\\<in>c_offending_flows ?m\n                  \\<lparr>nodes = nodes G,\n                     edges =\n                       edges G \\<union>\n                       backflows\n                        (set (filter_compliant_stateful_ACS G M\n                               edgesList) \\<inter>\n                         set (filter_IFS_no_violations G M\n                               edgesList))\\<rparr>.\n     F \\<subseteq> backflows\n                    (set (filter_compliant_stateful_ACS G M\n                           edgesList) \\<inter>\n                     set (filter_IFS_no_violations G M edgesList)) -\n                   edges G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    \\<lparr>nodes = nodes G,\n                       edges =\n                         edges G \\<union>\n                         backflows\n                          (set (filter_compliant_stateful_ACS G M\n                                 edgesList) \\<inter>\n                           set (filter_IFS_no_violations G M\n                                 edgesList))\\<rparr>.\n       F \\<subseteq> backflows\n                      (set (filter_compliant_stateful_ACS G M\n                             edgesList) \\<inter>\n                       set (filter_IFS_no_violations G M edgesList)) -\n                     edges G", "using get_offending_flows_def"], ["proof (prove)\nusing this:\n  ?m \\<in> set (get_ACS M) \\<Longrightarrow>\n  \\<forall>F\\<in>c_offending_flows ?m\n                  \\<lparr>nodes = nodes G,\n                     edges =\n                       edges G \\<union>\n                       backflows\n                        (set (filter_compliant_stateful_ACS G M\n                               edgesList) \\<inter>\n                         set (filter_IFS_no_violations G M\n                               edgesList))\\<rparr>.\n     F \\<subseteq> backflows\n                    (set (filter_compliant_stateful_ACS G M\n                           edgesList) \\<inter>\n                     set (filter_IFS_no_violations G M edgesList)) -\n                   edges G\n  get_offending_flows ?M ?G = (\\<Union>m\\<in>set ?M. c_offending_flows m ?G)\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    \\<lparr>nodes = nodes G,\n                       edges =\n                         edges G \\<union>\n                         backflows\n                          (set (filter_compliant_stateful_ACS G M\n                                 edgesList) \\<inter>\n                           set (filter_IFS_no_violations G M\n                                 edgesList))\\<rparr>.\n       F \\<subseteq> backflows\n                      (set (filter_compliant_stateful_ACS G M\n                             edgesList) \\<inter>\n                       set (filter_IFS_no_violations G M edgesList)) -\n                     edges G", "by fast"], ["proof (state)\nthis:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  \\<lparr>nodes = nodes G,\n                     edges =\n                       edges G \\<union>\n                       backflows\n                        (set (filter_compliant_stateful_ACS G M\n                               edgesList) \\<inter>\n                         set (filter_IFS_no_violations G M\n                               edgesList))\\<rparr>.\n     F \\<subseteq> backflows\n                    (set (filter_compliant_stateful_ACS G M\n                           edgesList) \\<inter>\n                     set (filter_IFS_no_violations G M edgesList)) -\n                   edges G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "hence \"\\<forall>F\\<in>get_offending_flows (get_ACS M)\n         \\<lparr>nodes = nodes G, edges = edges G \\<union> (?filterACS \\<inter> ?filterIFS) \\<union> (backflows (?filterACS \\<inter> ?filterIFS))\\<rparr>.\n       F \\<subseteq> backflows (?filterACS \\<inter> ?filterIFS) - edges G\""], ["proof (prove)\nusing this:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  \\<lparr>nodes = nodes G,\n                     edges =\n                       edges G \\<union>\n                       backflows\n                        (set (filter_compliant_stateful_ACS G M\n                               edgesList) \\<inter>\n                         set (filter_IFS_no_violations G M\n                               edgesList))\\<rparr>.\n     F \\<subseteq> backflows\n                    (set (filter_compliant_stateful_ACS G M\n                           edgesList) \\<inter>\n                     set (filter_IFS_no_violations G M edgesList)) -\n                   edges G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    \\<lparr>nodes = nodes G,\n                       edges =\n                         edges G \\<union>\n                         set (filter_compliant_stateful_ACS G M\n                               edgesList) \\<inter>\n                         set (filter_IFS_no_violations G M\n                               edgesList) \\<union>\n                         backflows\n                          (set (filter_compliant_stateful_ACS G M\n                                 edgesList) \\<inter>\n                           set (filter_IFS_no_violations G M\n                                 edgesList))\\<rparr>.\n       F \\<subseteq> backflows\n                      (set (filter_compliant_stateful_ACS G M\n                             edgesList) \\<inter>\n                       set (filter_IFS_no_violations G M edgesList)) -\n                     edges G", "by(simp add: edgesUnsimp)"], ["proof (state)\nthis:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  \\<lparr>nodes = nodes G,\n                     edges =\n                       edges G \\<union>\n                       set (filter_compliant_stateful_ACS G M\n                             edgesList) \\<inter>\n                       set (filter_IFS_no_violations G M edgesList) \\<union>\n                       backflows\n                        (set (filter_compliant_stateful_ACS G M\n                               edgesList) \\<inter>\n                         set (filter_IFS_no_violations G M\n                               edgesList))\\<rparr>.\n     F \\<subseteq> backflows\n                    (set (filter_compliant_stateful_ACS G M\n                           edgesList) \\<inter>\n                     set (filter_IFS_no_violations G M edgesList)) -\n                   edges G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "hence \"\\<forall>F\\<in>get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<lparr>hosts = nodes G, flows_fix = edges G, flows_state = ?filterACS \\<inter> ?filterIFS\\<rparr>).\n                F \\<subseteq> backflows (?filterACS \\<inter> ?filterIFS) - edges G\""], ["proof (prove)\nusing this:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  \\<lparr>nodes = nodes G,\n                     edges =\n                       edges G \\<union>\n                       set (filter_compliant_stateful_ACS G M\n                             edgesList) \\<inter>\n                       set (filter_IFS_no_violations G M edgesList) \\<union>\n                       backflows\n                        (set (filter_compliant_stateful_ACS G M\n                               edgesList) \\<inter>\n                         set (filter_IFS_no_violations G M\n                               edgesList))\\<rparr>.\n     F \\<subseteq> backflows\n                    (set (filter_compliant_stateful_ACS G M\n                           edgesList) \\<inter>\n                     set (filter_IFS_no_violations G M edgesList)) -\n                   edges G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph\n                      \\<lparr>hosts = nodes G, flows_fix = edges G,\n                         flows_state =\n                           set (filter_compliant_stateful_ACS G M\n                                 edgesList) \\<inter>\n                           set (filter_IFS_no_violations G M\n                                 edgesList)\\<rparr>).\n       F \\<subseteq> backflows\n                      (set (filter_compliant_stateful_ACS G M\n                             edgesList) \\<inter>\n                       set (filter_IFS_no_violations G M edgesList)) -\n                     edges G", "by(simp add: stateful_policy_to_network_graph_def all_flows_def)"], ["proof (state)\nthis:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = nodes G, flows_fix = edges G,\n                       flows_state =\n                         set (filter_compliant_stateful_ACS G M\n                               edgesList) \\<inter>\n                         set (filter_IFS_no_violations G M\n                               edgesList)\\<rparr>).\n     F \\<subseteq> backflows\n                    (set (filter_compliant_stateful_ACS G M\n                           edgesList) \\<inter>\n                     set (filter_IFS_no_violations G M edgesList)) -\n                   edges G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph\n                    \\<lparr>hosts = nodes G, flows_fix = edges G,\n                       flows_state =\n                         set (filter_compliant_stateful_ACS G M\n                               edgesList) \\<inter>\n                         set (filter_IFS_no_violations G M\n                               edgesList)\\<rparr>).\n     F \\<subseteq> backflows\n                    (set (filter_compliant_stateful_ACS G M\n                           edgesList) \\<inter>\n                     set (filter_IFS_no_violations G M edgesList)) -\n                   edges G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "apply(simp add: Tau generate_valid_stateful_policy_IFSACS_2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph\n                      \\<lparr>hosts = nodes G, flows_fix = edges G,\n                         flows_state =\n                           set (filter_compliant_stateful_ACS G M\n                                 edgesList) \\<inter>\n                           set (filter_IFS_no_violations G M\n                                 edgesList)\\<rparr>).\n       F \\<subseteq> backflows\n                      (set (filter_compliant_stateful_ACS G M\n                             edgesList) \\<inter>\n                       set (filter_IFS_no_violations G M edgesList)) -\n                     edges G \\<Longrightarrow>\n    \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph\n                      \\<lparr>hosts = nodes G, flows_fix = edges G,\n                         flows_state =\n                           set (filter_IFS_no_violations G M\n                                 edgesList) \\<inter>\n                           set (filter_compliant_stateful_ACS G M\n                                 edgesList)\\<rparr>).\n       F \\<subseteq> backflows\n                      (filternew_flows_state\n                        \\<lparr>hosts = nodes G, flows_fix = edges G,\n                           flows_state =\n                             set (filter_IFS_no_violations G M\n                                   edgesList) \\<inter>\n                             set (filter_compliant_stateful_ACS G M\n                                   edgesList)\\<rparr>)", "apply(simp add: filternew_flows_state_alt backflows_minus_backflows)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph\n                      \\<lparr>hosts = nodes G, flows_fix = edges G,\n                         flows_state =\n                           set (filter_compliant_stateful_ACS G M\n                                 edgesList) \\<inter>\n                           set (filter_IFS_no_violations G M\n                                 edgesList)\\<rparr>).\n       F \\<subseteq> backflows\n                      (set (filter_compliant_stateful_ACS G M\n                             edgesList) \\<inter>\n                       set (filter_IFS_no_violations G M edgesList)) -\n                     edges G \\<Longrightarrow>\n    \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph\n                      \\<lparr>hosts = nodes G, flows_fix = edges G,\n                         flows_state =\n                           set (filter_IFS_no_violations G M\n                                 edgesList) \\<inter>\n                           set (filter_compliant_stateful_ACS G M\n                                 edgesList)\\<rparr>).\n       F \\<subseteq> backflows\n                      (set (filter_IFS_no_violations G M edgesList) \\<inter>\n                       set (filter_compliant_stateful_ACS G M edgesList)) -\n                     edges G", "by (metis inf_commute)"], ["proof (state)\nthis:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph \\<T>).\n     F \\<subseteq> backflows (filternew_flows_state \\<T>)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem generate_valid_stateful_policy_IFSACS_2_stateful_policy_compliance:\n  assumes validReqs: \"valid_reqs M\"\n        and     wfG: \"wf_graph G\"\n        and     high_level_policy_valid: \"all_security_requirements_fulfilled M G\"\n        and     edgesList: \"(set edgesList) = edges G\"\n        and     Tau: \"\\<T> = generate_valid_stateful_policy_IFSACS_2 G M edgesList\"\n    shows \"stateful_policy_compliance \\<T> G M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "have 1: \"wf_stateful_policy \\<T>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_stateful_policy \\<T>", "apply(simp add: Tau)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_stateful_policy\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList)", "by(simp add: generate_valid_stateful_policy_IFSACS_2_wf_stateful_policy[OF wfG edgesList])"], ["proof (state)\nthis:\n  wf_stateful_policy \\<T>\n\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "have 2: \"wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)", "by(simp add: generate_valid_stateful_policy_IFSACS_wf_stateful_policy[OF wfG edgesList])"], ["proof (state)\nthis:\n  wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)\n\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "have 3: \"hosts \\<T> = nodes G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hosts \\<T> = nodes G", "apply(simp add: Tau)"], ["proof (prove)\ngoal (1 subgoal):\n 1. hosts (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = nodes G", "by(simp add: generate_valid_stateful_policy_IFSACS_2_select_simps(1))"], ["proof (state)\nthis:\n  hosts \\<T> = nodes G\n\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "have 4: \"flows_fix \\<T> \\<subseteq> edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flows_fix \\<T> \\<subseteq> edges G", "apply(simp add: Tau)"], ["proof (prove)\ngoal (1 subgoal):\n 1. flows_fix (generate_valid_stateful_policy_IFSACS_2 G M edgesList)\n    \\<subseteq> edges G", "by(simp add: generate_valid_stateful_policy_IFSACS_2_select_simps(2))"], ["proof (state)\nthis:\n  flows_fix \\<T> \\<subseteq> edges G\n\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "have 5: \"all_security_requirements_fulfilled (get_IFS M) (stateful_policy_to_network_graph \\<T>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph \\<T>)", "apply(simp add: Tau)"], ["proof (prove)\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS_2 G M edgesList))", "using generate_valid_stateful_policy_IFSACS_2_all_security_requirements_fulfilled_IFS[OF validReqs wfG high_level_policy_valid] edgesList"], ["proof (prove)\nusing this:\n  set ?edgesList \\<subseteq> edges G \\<Longrightarrow>\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS_2 G M ?edgesList))\n  set edgesList = edges G\n\ngoal (1 subgoal):\n 1. all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph\n       (generate_valid_stateful_policy_IFSACS_2 G M edgesList))", "by blast"], ["proof (state)\nthis:\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph \\<T>)\n\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "have 6: \"\\<forall>F\\<in>get_offending_flows (get_ACS M) (stateful_policy_to_network_graph \\<T>). F \\<subseteq> backflows (filternew_flows_state \\<T>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "using generate_valid_stateful_policy_IFSACS_2_filter_compliant_stateful_ACS[OF \n            validReqs wfG high_level_policy_valid]\n        Tau edgesList"], ["proof (prove)\nusing this:\n  \\<lbrakk>set ?edgesList \\<subseteq> edges G;\n   ?\\<T> = generate_valid_stateful_policy_IFSACS_2 G M ?edgesList\\<rbrakk>\n  \\<Longrightarrow> \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                                    (stateful_policy_to_network_graph\n?\\<T>).\n                       F \\<subseteq> backflows (filternew_flows_state ?\\<T>)\n  \\<T> = generate_valid_stateful_policy_IFSACS_2 G M edgesList\n  set edgesList = edges G\n\ngoal (1 subgoal):\n 1. \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                    (stateful_policy_to_network_graph \\<T>).\n       F \\<subseteq> backflows (filternew_flows_state \\<T>)", "by auto"], ["proof (state)\nthis:\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph \\<T>).\n     F \\<subseteq> backflows (filternew_flows_state \\<T>)\n\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "from 1 2 3 4 5 6 validReqs high_level_policy_valid wfG"], ["proof (chain)\npicking this:\n  wf_stateful_policy \\<T>\n  wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)\n  hosts \\<T> = nodes G\n  flows_fix \\<T> \\<subseteq> edges G\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph \\<T>)\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph \\<T>).\n     F \\<subseteq> backflows (filternew_flows_state \\<T>)\n  valid_reqs M\n  all_security_requirements_fulfilled M G\n  wf_graph G", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_stateful_policy \\<T>\n  wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)\n  hosts \\<T> = nodes G\n  flows_fix \\<T> \\<subseteq> edges G\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph \\<T>)\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph \\<T>).\n     F \\<subseteq> backflows (filternew_flows_state \\<T>)\n  valid_reqs M\n  all_security_requirements_fulfilled M G\n  wf_graph G\n\ngoal (1 subgoal):\n 1. stateful_policy_compliance \\<T> G M", "unfolding stateful_policy_compliance_def"], ["proof (prove)\nusing this:\n  wf_stateful_policy \\<T>\n  wf_stateful_policy (generate_valid_stateful_policy_IFSACS G M edgesList)\n  hosts \\<T> = nodes G\n  flows_fix \\<T> \\<subseteq> edges G\n  all_security_requirements_fulfilled (get_IFS M)\n   (stateful_policy_to_network_graph \\<T>)\n  \\<forall>F\\<in>get_offending_flows (get_ACS M)\n                  (stateful_policy_to_network_graph \\<T>).\n     F \\<subseteq> backflows (filternew_flows_state \\<T>)\n  valid_reqs M\n  all_security_requirements_fulfilled M G\n  wf_graph G\n\ngoal (1 subgoal):\n 1. ((wf_graph G \\<and> valid_reqs M) \\<and>\n     all_security_requirements_fulfilled M G \\<and>\n     wf_stateful_policy \\<T>) \\<and>\n    (hosts \\<T> = nodes G \\<and> flows_fix \\<T> \\<subseteq> edges G) \\<and>\n    all_security_requirements_fulfilled (get_IFS M)\n     (stateful_policy_to_network_graph \\<T>) \\<and>\n    (\\<forall>F\\<in>get_offending_flows (get_ACS M)\n                     (stateful_policy_to_network_graph \\<T>).\n        F \\<subseteq> backflows (filternew_flows_state \\<T>))", "by simp"], ["proof (state)\nthis:\n  stateful_policy_compliance \\<T> G M\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n    If there are no IFS requirements and the ACS requirements cause no side effects,\n    effectively, the graph can be considered as undirected graph! \n\\<close>"], ["", "lemma generate_valid_stateful_policy_IFSACS_2_noIFS_noACSsideeffects_imp_fullgraph:\n  assumes validReqs: \"valid_reqs M\"\n        and     wfG: \"wf_graph G\"\n        and     high_level_policy_valid: \"all_security_requirements_fulfilled M G\"\n        and     edgesList: \"(set edgesList) = edges G\"\n        and     no_ACS_sideeffects: \"\\<forall>F \\<in> get_offending_flows (get_ACS M) \\<lparr>nodes = nodes G, edges = edges G \\<union> backflows (edges G)\\<rparr>. F \\<subseteq> (backflows (edges G)) - (edges G)\"\n        and     no_IFS: \"get_IFS M = []\"\n  shows \"stateful_policy_to_network_graph (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = undirected G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    undirected G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    undirected G", "from filter_IFS_no_violations_accu_no_IFS[OF valid_reqs_IFS_D[OF validReqs] wfG no_IFS] edgesList"], ["proof (chain)\npicking this:\n  set ?accu \\<union> set ?edgesList \\<subseteq> edges G \\<Longrightarrow>\n  filter_IFS_no_violations_accu G M ?accu ?edgesList =\n  rev ?edgesList @ ?accu\n  set edgesList = edges G", "have \"filter_IFS_no_violations G M edgesList = rev edgesList\""], ["proof (prove)\nusing this:\n  set ?accu \\<union> set ?edgesList \\<subseteq> edges G \\<Longrightarrow>\n  filter_IFS_no_violations_accu G M ?accu ?edgesList =\n  rev ?edgesList @ ?accu\n  set edgesList = edges G\n\ngoal (1 subgoal):\n 1. filter_IFS_no_violations G M edgesList = rev edgesList", "by(simp add: filter_IFS_no_violations_def)"], ["proof (state)\nthis:\n  filter_IFS_no_violations G M edgesList = rev edgesList\n\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    undirected G", "from this filter_compliant_stateful_ACS_subseteq_input"], ["proof (chain)\npicking this:\n  filter_IFS_no_violations G M edgesList = rev edgesList\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es", "have flows_state_IFS: \"flows_state (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = set (filter_compliant_stateful_ACS G M edgesList)\""], ["proof (prove)\nusing this:\n  filter_IFS_no_violations G M edgesList = rev edgesList\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es\n\ngoal (1 subgoal):\n 1. flows_state (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    set (filter_compliant_stateful_ACS G M edgesList)", "by(auto simp add: generate_valid_stateful_policy_IFSACS_2_def)"], ["proof (state)\nthis:\n  flows_state (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n  set (filter_compliant_stateful_ACS G M edgesList)\n\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    undirected G", "have flowsfix: \"flows_fix (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flows_fix (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    edges G", "by(simp add: generate_valid_stateful_policy_IFSACS_2_def)"], ["proof (state)\nthis:\n  flows_fix (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n  edges G\n\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    undirected G", "have hosts: \"hosts (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = nodes G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hosts (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = nodes G", "by(simp add: generate_valid_stateful_policy_IFSACS_2_def)"], ["proof (state)\nthis:\n  hosts (generate_valid_stateful_policy_IFSACS_2 G M edgesList) = nodes G\n\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    undirected G", "from filter_compliant_stateful_ACS_accu_no_side_effects[OF valid_reqs_ACS_D[OF validReqs] wfG no_ACS_sideeffects]"], ["proof (chain)\npicking this:\n  \\<lbrakk>set ?accu \\<union> set ?edgesList \\<subseteq> edges G;\n   \\<forall>a\\<in>set ?accu. a \\<notin> backflows (edges G)\\<rbrakk>\n  \\<Longrightarrow> filter_compliant_stateful_ACS_accu G M ?accu\n                     ?edgesList =\n                    rev (filter (\\<lambda>e. e \\<notin> backflows (edges G))\n                          ?edgesList) @\n                    ?accu", "have \n      \"filter_compliant_stateful_ACS G M edgesList = rev [e\\<leftarrow>edgesList . e \\<notin> backflows (edges G)]\""], ["proof (prove)\nusing this:\n  \\<lbrakk>set ?accu \\<union> set ?edgesList \\<subseteq> edges G;\n   \\<forall>a\\<in>set ?accu. a \\<notin> backflows (edges G)\\<rbrakk>\n  \\<Longrightarrow> filter_compliant_stateful_ACS_accu G M ?accu\n                     ?edgesList =\n                    rev (filter (\\<lambda>e. e \\<notin> backflows (edges G))\n                          ?edgesList) @\n                    ?accu\n\ngoal (1 subgoal):\n 1. filter_compliant_stateful_ACS G M edgesList =\n    rev (filter (\\<lambda>e. e \\<notin> backflows (edges G)) edgesList)", "by(simp add: filter_compliant_stateful_ACS_def edgesList)"], ["proof (state)\nthis:\n  filter_compliant_stateful_ACS G M edgesList =\n  rev (filter (\\<lambda>e. e \\<notin> backflows (edges G)) edgesList)\n\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    undirected G", "hence filterACS: \"set (filter_compliant_stateful_ACS G M edgesList) = edges G - (backflows (edges G))\""], ["proof (prove)\nusing this:\n  filter_compliant_stateful_ACS G M edgesList =\n  rev (filter (\\<lambda>e. e \\<notin> backflows (edges G)) edgesList)\n\ngoal (1 subgoal):\n 1. set (filter_compliant_stateful_ACS G M edgesList) =\n    edges G - backflows (edges G)", "using edgesList"], ["proof (prove)\nusing this:\n  filter_compliant_stateful_ACS G M edgesList =\n  rev (filter (\\<lambda>e. e \\<notin> backflows (edges G)) edgesList)\n  set edgesList = edges G\n\ngoal (1 subgoal):\n 1. set (filter_compliant_stateful_ACS G M edgesList) =\n    edges G - backflows (edges G)", "by force"], ["proof (state)\nthis:\n  set (filter_compliant_stateful_ACS G M edgesList) =\n  edges G - backflows (edges G)\n\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    undirected G", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    undirected G", "apply(simp add: undirected_backflows stateful_policy_to_network_graph_def all_flows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. hosts (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n    nodes G \\<and>\n    flows_fix\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList) \\<union>\n    flows_state\n     (generate_valid_stateful_policy_IFSACS_2 G M edgesList) \\<union>\n    backflows\n     (flows_state (generate_valid_stateful_policy_IFSACS_2 G M edgesList)) =\n    edges G \\<union> backflows (edges G)", "apply(simp add: hosts filterACS flows_state_IFS flowsfix)"], ["proof (prove)\ngoal (1 subgoal):\n 1. edges G \\<union> (edges G - backflows (edges G)) \\<union>\n    backflows (edges G - backflows (edges G)) =\n    edges G \\<union> backflows (edges G)", "apply(simp add: backflows_minus_backflows)"], ["proof (prove)\ngoal (1 subgoal):\n 1. edges G \\<union> (edges G - backflows (edges G)) \\<union>\n    (backflows (edges G) - edges G) =\n    edges G \\<union> backflows (edges G)", "by fast"], ["proof (state)\nthis:\n  stateful_policy_to_network_graph\n   (generate_valid_stateful_policy_IFSACS_2 G M edgesList) =\n  undirected G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma generate_valid_stateful_policy_IFSACS_noIFS_noACSsideeffects_imp_fullgraph:\n  assumes validReqs: \"valid_reqs M\"\n        and     wfG: \"wf_graph G\"\n        and     high_level_policy_valid: \"all_security_requirements_fulfilled M G\"\n        and     edgesList: \"(set edgesList) = edges G\"\n        and     no_ACS_sideeffects: \"\\<forall>F \\<in> get_offending_flows (get_ACS M) \\<lparr>nodes = nodes G, edges = edges G \\<union> backflows (edges G)\\<rparr>. F \\<subseteq> (backflows (edges G)) - (edges G)\"\n        and     no_IFS: \"get_IFS M = []\"\n  shows \"stateful_policy_to_network_graph (generate_valid_stateful_policy_IFSACS G M edgesList) = undirected G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    undirected G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    undirected G", "from filter_IFS_no_violations_accu_no_IFS[OF valid_reqs_IFS_D[OF validReqs] wfG no_IFS] edgesList"], ["proof (chain)\npicking this:\n  set ?accu \\<union> set ?edgesList \\<subseteq> edges G \\<Longrightarrow>\n  filter_IFS_no_violations_accu G M ?accu ?edgesList =\n  rev ?edgesList @ ?accu\n  set edgesList = edges G", "have \"filter_IFS_no_violations G M edgesList = rev edgesList\""], ["proof (prove)\nusing this:\n  set ?accu \\<union> set ?edgesList \\<subseteq> edges G \\<Longrightarrow>\n  filter_IFS_no_violations_accu G M ?accu ?edgesList =\n  rev ?edgesList @ ?accu\n  set edgesList = edges G\n\ngoal (1 subgoal):\n 1. filter_IFS_no_violations G M edgesList = rev edgesList", "by(simp add: filter_IFS_no_violations_def)"], ["proof (state)\nthis:\n  filter_IFS_no_violations G M edgesList = rev edgesList\n\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    undirected G", "from this filter_compliant_stateful_ACS_subseteq_input"], ["proof (chain)\npicking this:\n  filter_IFS_no_violations G M edgesList = rev edgesList\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es", "have flows_state_IFS: \"flows_state (generate_valid_stateful_policy_IFSACS G M edgesList) = set (filter_compliant_stateful_ACS G M (rev edgesList))\""], ["proof (prove)\nusing this:\n  filter_IFS_no_violations G M edgesList = rev edgesList\n  set (filter_compliant_stateful_ACS ?G ?M ?Es) \\<subseteq> set ?Es\n\ngoal (1 subgoal):\n 1. flows_state (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    set (filter_compliant_stateful_ACS G M (rev edgesList))", "by(simp add: generate_valid_stateful_policy_IFSACS_def)"], ["proof (state)\nthis:\n  flows_state (generate_valid_stateful_policy_IFSACS G M edgesList) =\n  set (filter_compliant_stateful_ACS G M (rev edgesList))\n\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    undirected G", "have flowsfix: \"flows_fix (generate_valid_stateful_policy_IFSACS G M edgesList) = edges G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flows_fix (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    edges G", "by(simp add: generate_valid_stateful_policy_IFSACS_def)"], ["proof (state)\nthis:\n  flows_fix (generate_valid_stateful_policy_IFSACS G M edgesList) = edges G\n\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    undirected G", "have hosts: \"hosts (generate_valid_stateful_policy_IFSACS G M edgesList) = nodes G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hosts (generate_valid_stateful_policy_IFSACS G M edgesList) = nodes G", "by(simp add: generate_valid_stateful_policy_IFSACS_def)"], ["proof (state)\nthis:\n  hosts (generate_valid_stateful_policy_IFSACS G M edgesList) = nodes G\n\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    undirected G", "from filter_compliant_stateful_ACS_accu_no_side_effects[OF valid_reqs_ACS_D[OF validReqs] wfG no_ACS_sideeffects]"], ["proof (chain)\npicking this:\n  \\<lbrakk>set ?accu \\<union> set ?edgesList \\<subseteq> edges G;\n   \\<forall>a\\<in>set ?accu. a \\<notin> backflows (edges G)\\<rbrakk>\n  \\<Longrightarrow> filter_compliant_stateful_ACS_accu G M ?accu\n                     ?edgesList =\n                    rev (filter (\\<lambda>e. e \\<notin> backflows (edges G))\n                          ?edgesList) @\n                    ?accu", "have \n      \"filter_compliant_stateful_ACS G M (rev edgesList) = [e\\<leftarrow>edgesList . e \\<notin> backflows (edges G)]\""], ["proof (prove)\nusing this:\n  \\<lbrakk>set ?accu \\<union> set ?edgesList \\<subseteq> edges G;\n   \\<forall>a\\<in>set ?accu. a \\<notin> backflows (edges G)\\<rbrakk>\n  \\<Longrightarrow> filter_compliant_stateful_ACS_accu G M ?accu\n                     ?edgesList =\n                    rev (filter (\\<lambda>e. e \\<notin> backflows (edges G))\n                          ?edgesList) @\n                    ?accu\n\ngoal (1 subgoal):\n 1. filter_compliant_stateful_ACS G M (rev edgesList) =\n    filter (\\<lambda>e. e \\<notin> backflows (edges G)) edgesList", "apply(simp add: filter_compliant_stateful_ACS_def edgesList)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>accu edgesList.\n        \\<lbrakk>set accu \\<subseteq> edges G \\<and>\n                 set edgesList \\<subseteq> edges G;\n         \\<forall>a\\<in>set accu. a \\<notin> backflows (edges G)\\<rbrakk>\n        \\<Longrightarrow> filter_compliant_stateful_ACS_accu G M accu\n                           edgesList =\n                          rev (filter\n                                (\\<lambda>e. e \\<notin> backflows (edges G))\n                                edgesList) @\n                          accu) \\<Longrightarrow>\n    rev (filter (\\<lambda>e. e \\<notin> backflows (edges G))\n          (rev edgesList)) =\n    filter (\\<lambda>e. e \\<notin> backflows (edges G)) edgesList", "by (metis rev_filter rev_swap)"], ["proof (state)\nthis:\n  filter_compliant_stateful_ACS G M (rev edgesList) =\n  filter (\\<lambda>e. e \\<notin> backflows (edges G)) edgesList\n\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    undirected G", "hence filterACS: \"set (filter_compliant_stateful_ACS G M (rev edgesList)) = edges G - (backflows (edges G))\""], ["proof (prove)\nusing this:\n  filter_compliant_stateful_ACS G M (rev edgesList) =\n  filter (\\<lambda>e. e \\<notin> backflows (edges G)) edgesList\n\ngoal (1 subgoal):\n 1. set (filter_compliant_stateful_ACS G M (rev edgesList)) =\n    edges G - backflows (edges G)", "using edgesList"], ["proof (prove)\nusing this:\n  filter_compliant_stateful_ACS G M (rev edgesList) =\n  filter (\\<lambda>e. e \\<notin> backflows (edges G)) edgesList\n  set edgesList = edges G\n\ngoal (1 subgoal):\n 1. set (filter_compliant_stateful_ACS G M (rev edgesList)) =\n    edges G - backflows (edges G)", "by force"], ["proof (state)\nthis:\n  set (filter_compliant_stateful_ACS G M (rev edgesList)) =\n  edges G - backflows (edges G)\n\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    undirected G", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. stateful_policy_to_network_graph\n     (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    undirected G", "apply(simp add: undirected_backflows stateful_policy_to_network_graph_def all_flows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. hosts (generate_valid_stateful_policy_IFSACS G M edgesList) =\n    nodes G \\<and>\n    flows_fix (generate_valid_stateful_policy_IFSACS G M edgesList) \\<union>\n    flows_state\n     (generate_valid_stateful_policy_IFSACS G M edgesList) \\<union>\n    backflows\n     (flows_state (generate_valid_stateful_policy_IFSACS G M edgesList)) =\n    edges G \\<union> backflows (edges G)", "apply(simp add: hosts filterACS flows_state_IFS flowsfix)"], ["proof (prove)\ngoal (1 subgoal):\n 1. edges G \\<union> (edges G - backflows (edges G)) \\<union>\n    backflows (edges G - backflows (edges G)) =\n    edges G \\<union> backflows (edges G)", "apply(simp add: backflows_minus_backflows)"], ["proof (prove)\ngoal (1 subgoal):\n 1. edges G \\<union> (edges G - backflows (edges G)) \\<union>\n    (backflows (edges G) - edges G) =\n    edges G \\<union> backflows (edges G)", "by fast"], ["proof (state)\nthis:\n  stateful_policy_to_network_graph\n   (generate_valid_stateful_policy_IFSACS G M edgesList) =\n  undirected G\n\ngoal:\nNo subgoals!", "qed"], ["", "(*\ntext{* In the repo history, we see failed attempts which try to prove that under composition, the IFS and ACS filtering is also maximal.\n       I guess this does not hold in general. Needs a counter example. *}\n\n*)"], ["", "end"]]}