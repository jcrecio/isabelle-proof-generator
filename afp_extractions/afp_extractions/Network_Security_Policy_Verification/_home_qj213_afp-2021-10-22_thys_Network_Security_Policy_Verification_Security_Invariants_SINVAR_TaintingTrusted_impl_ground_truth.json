{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_TaintingTrusted_impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma \"A - B \\<subseteq> C \\<longleftrightarrow> (\\<forall>a\\<in>A. a \\<in> C \\<or> a \\<in> B)\"", "lemma \"\\<not>(A - B \\<subseteq> C) \\<longleftrightarrow> (\\<exists>a \\<in> A. a \\<notin> C \\<and> a \\<notin> B)\"", "lemma \"sinvar \\<lparr> nodesL = [], edgesL =[] \\<rparr> (\\<lambda>_. SINVAR_TaintingTrusted.default_node_properties)\"", "lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_TaintingTrusted.default_node_properties P = NetModel_node_props P\"", "lemma \"wf_list_graph tainting_example\"", "lemma \"sinvar tainting_example tainting_example_props\""], "translations": [["", "lemma \"A - B \\<subseteq> C \\<longleftrightarrow> (\\<forall>a\\<in>A. a \\<in> C \\<or> a \\<in> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A - B \\<subseteq> C) = (\\<forall>a\\<in>A. a \\<in> C \\<or> a \\<in> B)", "by blast"], ["", "lemma \"\\<not>(A - B \\<subseteq> C) \\<longleftrightarrow> (\\<exists>a \\<in> A. a \\<notin> C \\<and> a \\<notin> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> A - B \\<subseteq> C) =\n    (\\<exists>a\\<in>A. a \\<notin> C \\<and> a \\<notin> B)", "by blast"], ["", "fun sinvar :: \"'v list_graph \\<Rightarrow> ('v \\<Rightarrow> SINVAR_TaintingTrusted.taints) \\<Rightarrow> bool\" where\n  \"sinvar G nP = (\\<forall> (v1,v2) \\<in> set (edgesL G). taints (nP v1) - untaints (nP v1) \\<subseteq> taints (nP v2))\""], ["", "(*Test that we have executable code, despite the abstractions*)"], ["", "export_code sinvar checking SML"], ["", "value[code] \"sinvar \\<lparr> nodesL = [], edgesL =[] \\<rparr> (\\<lambda>_. SINVAR_TaintingTrusted.default_node_properties)\""], ["", "lemma \"sinvar \\<lparr> nodesL = [], edgesL =[] \\<rparr> (\\<lambda>_. SINVAR_TaintingTrusted.default_node_properties)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar \\<lparr>nodesL = [], edgesL = []\\<rparr>\n     (\\<lambda>_. SINVAR_TaintingTrusted.default_node_properties)", "by eval"], ["", "definition TaintingTrusted_offending_list \n  :: \"'v list_graph \\<Rightarrow> ('v \\<Rightarrow> SINVAR_TaintingTrusted.taints) \\<Rightarrow> ('v \\<times> 'v) list list\" where\n  \"TaintingTrusted_offending_list G nP = (if sinvar G nP then\n    []\n   else \n    [ [e \\<leftarrow> edgesL G. case e of (v1,v2) \\<Rightarrow> \\<not>(taints (nP v1) - untaints (nP v1) \\<subseteq> taints (nP v2))] ])\""], ["", "(*TODO: is this code somewhat efficient?*)"], ["", "export_code TaintingTrusted_offending_list checking SML"], ["", "definition \"NetModel_node_props P =\n  (\\<lambda> i. (case (node_properties P) i of\n                  Some property \\<Rightarrow> property\n                | None \\<Rightarrow> SINVAR_TaintingTrusted.default_node_properties))\""], ["", "lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_TaintingTrusted.default_node_properties P = NetModel_node_props P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant.node_props\n     SINVAR_TaintingTrusted.default_node_properties P =\n    NetModel_node_props P", "by(simp add: NetModel_node_props_def SecurityInvariant.node_props.simps[OF TopoS_TaintingTrusted])"], ["", "definition \"TaintingTrusted_eval G P = (wf_list_graph G \\<and> \n  sinvar G (SecurityInvariant.node_props SINVAR_TaintingTrusted.default_node_properties P))\""], ["", "interpretation TaintingTrusted_impl:TopoS_List_Impl\n  where default_node_properties=SINVAR_TaintingTrusted.default_node_properties\n  and sinvar_spec=SINVAR_TaintingTrusted.sinvar\n  and sinvar_impl=sinvar\n  and receiver_violation=SINVAR_TaintingTrusted.receiver_violation\n  and offending_flows_impl=TaintingTrusted_offending_list\n  and node_props_impl=NetModel_node_props\n  and eval_impl=TaintingTrusted_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_TaintingTrusted.default_node_properties\n     SINVAR_TaintingTrusted.sinvar sinvar\n     SINVAR_TaintingTrusted.receiver_violation\n     TaintingTrusted_offending_list NetModel_node_props TaintingTrusted_eval", "apply(unfold TopoS_List_Impl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SecurityInvariant SINVAR_TaintingTrusted.sinvar\n      SINVAR_TaintingTrusted.default_node_properties\n      SINVAR_TaintingTrusted.receiver_violation \\<and>\n     (\\<forall>G nP.\n         wf_list_graph G \\<longrightarrow>\n         SINVAR_TaintingTrusted.sinvar (list_graph_to_graph G) nP =\n         sinvar G nP)) \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SecurityInvariant_withOffendingFlows.set_offending_flows\n         SINVAR_TaintingTrusted.sinvar (list_graph_to_graph G) nP =\n        set ` set (TaintingTrusted_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        SecurityInvariant.node_props_formaldef\n         SINVAR_TaintingTrusted.default_node_properties P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         SecurityInvariant.eval SINVAR_TaintingTrusted.sinvar\n          SINVAR_TaintingTrusted.default_node_properties\n          (list_graph_to_graph G) P) =\n        TaintingTrusted_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SecurityInvariant SINVAR_TaintingTrusted.sinvar\n     SINVAR_TaintingTrusted.default_node_properties\n     SINVAR_TaintingTrusted.receiver_violation \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SINVAR_TaintingTrusted.sinvar (list_graph_to_graph G) nP =\n        sinvar G nP)\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SecurityInvariant_withOffendingFlows.set_offending_flows\n         SINVAR_TaintingTrusted.sinvar (list_graph_to_graph G) nP =\n        set ` set (TaintingTrusted_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        SecurityInvariant.node_props_formaldef\n         SINVAR_TaintingTrusted.default_node_properties P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         SecurityInvariant.eval SINVAR_TaintingTrusted.sinvar\n          SINVAR_TaintingTrusted.default_node_properties\n          (list_graph_to_graph G) P) =\n        TaintingTrusted_eval G P)", "apply(simp add: TopoS_TaintingTrusted)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G.\n       wf_list_graph G \\<longrightarrow>\n       (\\<forall>nP.\n           SINVAR_TaintingTrusted.sinvar (list_graph_to_graph G) nP =\n           (\\<forall>(v1, v2)\\<in>set (edgesL G).\n               taints (nP v1) - untaints (nP v1)\n               \\<subseteq> taints (nP v2)))\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SecurityInvariant_withOffendingFlows.set_offending_flows\n         SINVAR_TaintingTrusted.sinvar (list_graph_to_graph G) nP =\n        set ` set (TaintingTrusted_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        SecurityInvariant.node_props_formaldef\n         SINVAR_TaintingTrusted.default_node_properties P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         SecurityInvariant.eval SINVAR_TaintingTrusted.sinvar\n          SINVAR_TaintingTrusted.default_node_properties\n          (list_graph_to_graph G) P) =\n        TaintingTrusted_eval G P)", "apply(simp add: list_graph_to_graph_def SINVAR_TaintingTrusted.sinvar_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SecurityInvariant_withOffendingFlows.set_offending_flows\n         SINVAR_TaintingTrusted.sinvar (list_graph_to_graph G) nP =\n        set ` set (TaintingTrusted_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        SecurityInvariant.node_props_formaldef\n         SINVAR_TaintingTrusted.default_node_properties P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         SecurityInvariant.eval SINVAR_TaintingTrusted.sinvar\n          SINVAR_TaintingTrusted.default_node_properties\n          (list_graph_to_graph G) P) =\n        TaintingTrusted_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       SecurityInvariant_withOffendingFlows.set_offending_flows\n        SINVAR_TaintingTrusted.sinvar (list_graph_to_graph G) nP =\n       set ` set (TaintingTrusted_offending_list G nP)\n 2. (\\<forall>P.\n        SecurityInvariant.node_props_formaldef\n         SINVAR_TaintingTrusted.default_node_properties P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         SecurityInvariant.eval SINVAR_TaintingTrusted.sinvar\n          SINVAR_TaintingTrusted.default_node_properties\n          (list_graph_to_graph G) P) =\n        TaintingTrusted_eval G P)", "apply(simp add: list_graph_to_graph_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G.\n       wf_list_graph G \\<longrightarrow>\n       (\\<forall>nP.\n           SecurityInvariant_withOffendingFlows.set_offending_flows\n            SINVAR_TaintingTrusted.sinvar\n            \\<lparr>nodes = set (nodesL G), edges = set (edgesL G)\\<rparr>\n            nP =\n           set ` set (TaintingTrusted_offending_list G nP))\n 2. (\\<forall>P.\n        SecurityInvariant.node_props_formaldef\n         SINVAR_TaintingTrusted.default_node_properties P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         SecurityInvariant.eval SINVAR_TaintingTrusted.sinvar\n          SINVAR_TaintingTrusted.default_node_properties\n          (list_graph_to_graph G) P) =\n        TaintingTrusted_eval G P)", "apply(simp add: list_graph_to_graph_def SINVAR_TaintingTrusted.sinvar_def Taints_offending_set\n                    SINVAR_TaintingTrusted.Taints_offending_set_def TaintingTrusted_offending_list_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P.\n        SecurityInvariant.node_props_formaldef\n         SINVAR_TaintingTrusted.default_node_properties P =\n        NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         SecurityInvariant.eval SINVAR_TaintingTrusted.sinvar\n          SINVAR_TaintingTrusted.default_node_properties\n          (list_graph_to_graph G) P) =\n        TaintingTrusted_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       SecurityInvariant.node_props_formaldef\n        SINVAR_TaintingTrusted.default_node_properties P =\n       NetModel_node_props P\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        SecurityInvariant.eval SINVAR_TaintingTrusted.sinvar\n         SINVAR_TaintingTrusted.default_node_properties\n         (list_graph_to_graph G) P) =\n       TaintingTrusted_eval G P", "apply(simp only: NetModel_node_props_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       SecurityInvariant.node_props_formaldef\n        SINVAR_TaintingTrusted.default_node_properties P =\n       (\\<lambda>i.\n           case node_properties P i of\n           None \\<Rightarrow> SINVAR_TaintingTrusted.default_node_properties\n           | Some property \\<Rightarrow> property)\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        SecurityInvariant.eval SINVAR_TaintingTrusted.sinvar\n         SINVAR_TaintingTrusted.default_node_properties\n         (list_graph_to_graph G) P) =\n       TaintingTrusted_eval G P", "(*interpretation is in local context*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       SecurityInvariant.node_props_formaldef\n        SINVAR_TaintingTrusted.default_node_properties P =\n       (\\<lambda>i.\n           case node_properties P i of\n           None \\<Rightarrow> SINVAR_TaintingTrusted.default_node_properties\n           | Some property \\<Rightarrow> property)\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        SecurityInvariant.eval SINVAR_TaintingTrusted.sinvar\n         SINVAR_TaintingTrusted.default_node_properties\n         (list_graph_to_graph G) P) =\n       TaintingTrusted_eval G P", "apply (metis SecurityInvariant.node_props.simps SecurityInvariant.node_props_eq_node_props_formaldef TopoS_TaintingTrusted)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        SecurityInvariant.eval SINVAR_TaintingTrusted.sinvar\n         SINVAR_TaintingTrusted.default_node_properties\n         (list_graph_to_graph G) P) =\n       TaintingTrusted_eval G P", "apply(simp only: TaintingTrusted_eval_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        SecurityInvariant.eval SINVAR_TaintingTrusted.sinvar\n         SINVAR_TaintingTrusted.default_node_properties\n         (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and>\n        sinvar G\n         (SecurityInvariant.node_props\n           SINVAR_TaintingTrusted.default_node_properties P))", "apply(simp add: TopoS_eval_impl_proofrule[OF TopoS_TaintingTrusted])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (wf_list_graph G \\<and>\n        SINVAR_TaintingTrusted.sinvar (list_graph_to_graph G)\n         (SecurityInvariant.node_props\n           SINVAR_TaintingTrusted.default_node_properties P)) =\n       (wf_list_graph G \\<and>\n        (\\<forall>x\\<in>set (edgesL G).\n            case x of\n            (v1, v2) \\<Rightarrow>\n              taints\n               (SecurityInvariant.node_props\n                 SINVAR_TaintingTrusted.default_node_properties P v1) -\n              untaints\n               (SecurityInvariant.node_props\n                 SINVAR_TaintingTrusted.default_node_properties P v1)\n              \\<subseteq> taints\n                           (SecurityInvariant.node_props\n                             SINVAR_TaintingTrusted.default_node_properties\n                             P v2)))", "apply(simp add: list_graph_to_graph_def SINVAR_TaintingTrusted.sinvar_def; fail)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>TaintingTrusted packing\\<close>"], ["", "definition SINVAR_LIB_TaintingTrusted :: \"('v::vertex, SINVAR_TaintingTrusted.taints) TopoS_packed\" where\n    \"SINVAR_LIB_TaintingTrusted \\<equiv> \n    \\<lparr> nm_name = ''TaintingTrusted'', \n      nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n      nm_default = SINVAR_TaintingTrusted.default_node_properties, \n      nm_sinvar = sinvar,\n      nm_offending_flows = TaintingTrusted_offending_list, \n      nm_node_props = NetModel_node_props,\n      nm_eval = TaintingTrusted_eval\n      \\<rparr>\""], ["", "interpretation SINVAR_LIB_BLPbasic_interpretation: TopoS_modelLibrary SINVAR_LIB_TaintingTrusted\n      SINVAR_TaintingTrusted.sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_modelLibrary SINVAR_LIB_TaintingTrusted\n     SINVAR_TaintingTrusted.sinvar", "apply(unfold TopoS_modelLibrary_def SINVAR_LIB_TaintingTrusted_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''TaintingTrusted'',\n              nm_receiver_violation =\n                SINVAR_TaintingTrusted.receiver_violation,\n              nm_default = SINVAR_TaintingTrusted.default_node_properties,\n              nm_sinvar = sinvar,\n              nm_offending_flows = TaintingTrusted_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = TaintingTrusted_eval\\<rparr>) \\<and>\n    TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)\n     SINVAR_TaintingTrusted.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''TaintingTrusted'',\n              nm_receiver_violation =\n                SINVAR_TaintingTrusted.receiver_violation,\n              nm_default = SINVAR_TaintingTrusted.default_node_properties,\n              nm_sinvar = sinvar,\n              nm_offending_flows = TaintingTrusted_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = TaintingTrusted_eval\\<rparr>)\n 2. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)\n     SINVAR_TaintingTrusted.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)\n     SINVAR_TaintingTrusted.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''TaintingTrusted'',\n          nm_receiver_violation = SINVAR_TaintingTrusted.receiver_violation,\n          nm_default = SINVAR_TaintingTrusted.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = TaintingTrusted_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = TaintingTrusted_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_TaintingTrusted.default_node_properties\n     SINVAR_TaintingTrusted.sinvar sinvar\n     SINVAR_TaintingTrusted.receiver_violation\n     TaintingTrusted_offending_list NetModel_node_props TaintingTrusted_eval", "by(unfold_locales)"], ["", "subsubsection\\<open>Example\\<close>"], ["", "context\nbegin"], ["", "private"], ["", "definition tainting_example :: \"string list_graph\" where\n  \"tainting_example \\<equiv> \\<lparr> nodesL = [''produce 1'',\n                                  ''produce 2'',\n                                  ''produce 3'',\n                                  ''read 1 2'',\n                                  ''read 3'',\n                                  ''consume 1 2 3'',\n                                  ''consume 3''], \n              edgesL =[(''produce 1'', ''read 1 2''),\n                       (''produce 2'', ''read 1 2''),\n                       (''produce 3'', ''read 3''), \n                       (''read 3'', ''read 1 2''),\n                       (''read 1 2'', ''consume 1 2 3''),\n                       (''read 3'', ''consume 3'')] \\<rparr>\""], ["", "lemma \"wf_list_graph tainting_example\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph tainting_example", "by eval"], ["", "private"], ["", "definition tainting_example_props :: \"string \\<Rightarrow> SINVAR_TaintingTrusted.taints\" where\n    \"tainting_example_props \\<equiv> (\\<lambda> n. SINVAR_TaintingTrusted.default_node_properties)\n                          (''produce 1'' := TaintsUntaints {''1''} {},\n                           ''produce 2'' := TaintsUntaints {''2''} {},\n                           ''produce 3'' := TaintsUntaints {''3''} {},\n                           ''read 1 2'' := TaintsUntaints {''3'',''foo''} {''1'',''2''},\n                           ''read 3'' := TaintsUntaints {''3''} {},\n                           ''consume 1 2 3'' := TaintsUntaints {''foo'',''3''} {},\n                           ''consume 3'' := TaintsUntaints {''3''} {})\""], ["", "value \"tainting_example_props (''consume 1 2 3'')\""], ["", "value[code] \"TaintingTrusted_offending_list tainting_example tainting_example_props\""], ["", "private"], ["", "lemma \"sinvar tainting_example tainting_example_props\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar tainting_example tainting_example_props", "by eval"], ["", "end"], ["", "(*TODO: fails. why?*)"], ["", "export_code SINVAR_LIB_TaintingTrusted checking Scala"], ["", "export_code SINVAR_LIB_TaintingTrusted checking SML"], ["", "hide_const (open) NetModel_node_props TaintingTrusted_offending_list TaintingTrusted_eval"], ["", "hide_const (open) sinvar"], ["", "end"]]}