{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_NoRefl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\"", "lemma NoRfl_ENRsr: \"SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_sr sinvar (\\<lambda> nP\\<^sub>s s nP\\<^sub>r r. s = r \\<longrightarrow> nP\\<^sub>s = Refl)\"", "lemma NoRefl_offending_set: \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = NoRefl_offending_set\"", "lemma NoRefl_unique_default:\n    \"\\<forall>G f nP i. wf_graph G \\<and> f \\<in> set_offending_flows G nP \\<and> i \\<in> fst ` f \\<longrightarrow> \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n     otherbot = NoRefl\"", "lemma NoRefl_SecurityInvariant_IFS: \"SecurityInvariant_IFS sinvar default_node_properties\"", "lemma TopoS_NoRefl: \"SecurityInvariant sinvar default_node_properties receiver_violation\""], "translations": [["", "lemma sinvar_mono: \"SecurityInvariant_withOffendingFlows.sinvar_mono sinvar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_withOffendingFlows.sinvar_mono sinvar", "apply(simp only: SecurityInvariant_withOffendingFlows.sinvar_mono_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>nP N E' E.\n       wf_graph \\<lparr>nodes = N, edges = E\\<rparr> \\<and>\n       E' \\<subseteq> E \\<and>\n       sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP \\<longrightarrow>\n       sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nP N E' E.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP", "by auto"], ["", "interpretation SecurityInvariant_preliminaries\n  where sinvar = sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_preliminaries sinvar", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(frule_tac finite_distinct_list[OF wf_graph.finiteE])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        \\<exists>xs. set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(erule_tac exE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP xs.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set xs = edges G \\<and> distinct xs\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(rename_tac list_edges)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.set_offending_flows\n                          sinvar G nP \\<noteq>\n                         {}\n 2. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 3. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(rule_tac ff=\"list_edges\" in SecurityInvariant_withOffendingFlows.mono_imp_set_offending_flows_not_empty[OF sinvar_mono])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> wf_graph G\n 2. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (set list_edges) G nP\n 3. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> set list_edges \\<subseteq> edges G\n 4. \\<And>G nP list_edges.\n       \\<lbrakk>wf_graph G; \\<not> sinvar G nP;\n        set list_edges = edges G \\<and> distinct list_edges\\<rbrakk>\n       \\<Longrightarrow> distinct list_edges\n 5. \\<And>N E E' nP.\n       \\<lbrakk>wf_graph \\<lparr>nodes = N, edges = E\\<rparr>;\n        E' \\<subseteq> E;\n        sinvar \\<lparr>nodes = N, edges = E\\<rparr> nP\\<rbrakk>\n       \\<Longrightarrow> sinvar \\<lparr>nodes = N, edges = E'\\<rparr> nP\n 6. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(auto)[6]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP list_edges b.\n       \\<lbrakk>wf_graph G; (b, b) \\<in> edges G; set list_edges = edges G;\n        distinct list_edges;\n        \\<not> SecurityInvariant_withOffendingFlows.is_offending_flows\n                sinvar (edges G) G nP\\<rbrakk>\n       \\<Longrightarrow> nP b = node_config.Refl\n 2. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(auto simp add: SecurityInvariant_withOffendingFlows.is_offending_flows_def graph_ops)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G ff nP f'.\n       \\<lbrakk>wf_graph G;\n        SecurityInvariant_withOffendingFlows.is_offending_flows sinvar ff G\n         nP\\<rbrakk>\n       \\<Longrightarrow> SecurityInvariant_withOffendingFlows.is_offending_flows\n                          sinvar (ff \\<union> f') G nP", "apply(fact SecurityInvariant_withOffendingFlows.sinvar_mono_imp_is_offending_flows_mono[OF sinvar_mono])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma NoRfl_ENRsr: \"SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_sr sinvar (\\<lambda> nP\\<^sub>s s nP\\<^sub>r r. s = r \\<longrightarrow> nP\\<^sub>s = Refl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sinvar_all_edges_normal_form_sr\n     (\\<lambda>nP\\<^sub>s s nP\\<^sub>r r.\n         s = r \\<longrightarrow> nP\\<^sub>s = node_config.Refl)", "by(simp add: SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_sr_def)"], ["", "definition NoRefl_offending_set:: \"'v graph \\<Rightarrow> ('v \\<Rightarrow> node_config) \\<Rightarrow> ('v \\<times> 'v) set set\" where\n  \"NoRefl_offending_set G nP = (if sinvar G nP then\n      {}\n     else \n      { {e \\<in> edges G. case e of (e1,e2) \\<Rightarrow> e1 = e2 \\<and> nP e1 = NoRefl} })\""], ["", "thm SecurityInvariant_withOffendingFlows.ENFsr_offending_set[OF NoRfl_ENRsr]"], ["", "lemma NoRefl_offending_set: \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = NoRefl_offending_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_offending_flows = NoRefl_offending_set", "apply(simp only: fun_eq_iff NoRefl_offending_set_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xa.\n       set_offending_flows x xa =\n       (if sinvar x xa then {}\n        else {{e \\<in> edges x.\n               case e of\n               (e1, e2) \\<Rightarrow> e1 = e2 \\<and> xa e1 = NoRefl}})", "apply(intro allI, rename_tac G nP)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       set_offending_flows G nP =\n       (if sinvar G nP then {}\n        else {{e \\<in> edges G.\n               case e of\n               (e1, e2) \\<Rightarrow> e1 = e2 \\<and> nP e1 = NoRefl}})", "apply(simp only: SecurityInvariant_withOffendingFlows.ENFsr_offending_set[OF NoRfl_ENRsr])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       (if sinvar G nP then {}\n        else {{(s, r).\n               (s, r) \\<in> edges G \\<and>\n               \\<not> (s = r \\<longrightarrow> nP s = node_config.Refl)}}) =\n       (if sinvar G nP then {}\n        else {{e \\<in> edges G.\n               case e of\n               (e1, e2) \\<Rightarrow> e1 = e2 \\<and> nP e1 = NoRefl}})", "apply(case_tac \"sinvar G nP\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP.\n       sinvar G nP \\<Longrightarrow>\n       (if sinvar G nP then {}\n        else {{(s, r).\n               (s, r) \\<in> edges G \\<and>\n               \\<not> (s = r \\<longrightarrow> nP s = node_config.Refl)}}) =\n       (if sinvar G nP then {}\n        else {{e \\<in> edges G.\n               case e of\n               (e1, e2) \\<Rightarrow> e1 = e2 \\<and> nP e1 = NoRefl}})\n 2. \\<And>G nP.\n       \\<not> sinvar G nP \\<Longrightarrow>\n       (if sinvar G nP then {}\n        else {{(s, r).\n               (s, r) \\<in> edges G \\<and>\n               \\<not> (s = r \\<longrightarrow> nP s = node_config.Refl)}}) =\n       (if sinvar G nP then {}\n        else {{e \\<in> edges G.\n               case e of\n               (e1, e2) \\<Rightarrow> e1 = e2 \\<and> nP e1 = NoRefl}})", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       \\<not> sinvar G nP \\<Longrightarrow>\n       (if sinvar G nP then {}\n        else {{(s, r).\n               (s, r) \\<in> edges G \\<and>\n               \\<not> (s = r \\<longrightarrow> nP s = node_config.Refl)}}) =\n       (if sinvar G nP then {}\n        else {{e \\<in> edges G.\n               case e of\n               (e1, e2) \\<Rightarrow> e1 = e2 \\<and> nP e1 = NoRefl}})", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       \\<exists>x\\<in>edges G.\n          \\<not> (case x of\n                  (s, r) \\<Rightarrow>\n                    s = r \\<longrightarrow>\n                    nP r = node_config.Refl) \\<Longrightarrow>\n       {(s, r).\n        (s, r) \\<in> edges G \\<and>\n        s = r \\<and> nP r \\<noteq> node_config.Refl} =\n       {e \\<in> edges G.\n        case e of (e1, e2) \\<Rightarrow> e1 = e2 \\<and> nP e1 = NoRefl}", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP.\n       \\<exists>x\\<in>edges G.\n          \\<not> (case x of\n                  (s, r) \\<Rightarrow>\n                    s = r \\<longrightarrow>\n                    nP r = node_config.Refl) \\<Longrightarrow>\n       {(s, r).\n        (s, r) \\<in> edges G \\<and>\n        s = r \\<and> nP r \\<noteq> node_config.Refl}\n       \\<subseteq> {e \\<in> edges G.\n                    case e of\n                    (e1, e2) \\<Rightarrow> e1 = e2 \\<and> nP e1 = NoRefl}\n 2. \\<And>G nP.\n       \\<exists>x\\<in>edges G.\n          \\<not> (case x of\n                  (s, r) \\<Rightarrow>\n                    s = r \\<longrightarrow>\n                    nP r = node_config.Refl) \\<Longrightarrow>\n       {e \\<in> edges G.\n        case e of (e1, e2) \\<Rightarrow> e1 = e2 \\<and> nP e1 = NoRefl}\n       \\<subseteq> {(s, r).\n                    (s, r) \\<in> edges G \\<and>\n                    s = r \\<and> nP r \\<noteq> node_config.Refl}", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP x.\n       \\<lbrakk>\\<exists>x\\<in>edges G.\n                   \\<not> (case x of\n                           (s, r) \\<Rightarrow>\n                             s = r \\<longrightarrow>\n                             nP r = node_config.Refl);\n        x \\<in> {(s, r).\n                 (s, r) \\<in> edges G \\<and>\n                 s = r \\<and> nP r \\<noteq> node_config.Refl}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {e \\<in> edges G.\n                                  case e of\n                                  (e1, e2) \\<Rightarrow>\n                                    e1 = e2 \\<and> nP e1 = NoRefl}\n 2. \\<And>G nP.\n       \\<exists>x\\<in>edges G.\n          \\<not> (case x of\n                  (s, r) \\<Rightarrow>\n                    s = r \\<longrightarrow>\n                    nP r = node_config.Refl) \\<Longrightarrow>\n       {e \\<in> edges G.\n        case e of (e1, e2) \\<Rightarrow> e1 = e2 \\<and> nP e1 = NoRefl}\n       \\<subseteq> {(s, r).\n                    (s, r) \\<in> edges G \\<and>\n                    s = r \\<and> nP r \\<noteq> node_config.Refl}", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP b ba.\n       \\<lbrakk>(ba, ba) \\<in> edges G; (b, b) \\<in> edges G;\n        nP b \\<noteq> node_config.Refl;\n        nP ba \\<noteq> node_config.Refl\\<rbrakk>\n       \\<Longrightarrow> nP b = NoRefl\n 2. \\<And>G nP.\n       \\<exists>x\\<in>edges G.\n          \\<not> (case x of\n                  (s, r) \\<Rightarrow>\n                    s = r \\<longrightarrow>\n                    nP r = node_config.Refl) \\<Longrightarrow>\n       {e \\<in> edges G.\n        case e of (e1, e2) \\<Rightarrow> e1 = e2 \\<and> nP e1 = NoRefl}\n       \\<subseteq> {(s, r).\n                    (s, r) \\<in> edges G \\<and>\n                    s = r \\<and> nP r \\<noteq> node_config.Refl}", "using node_config.exhaust"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y = NoRefl \\<Longrightarrow> ?P;\n   ?y = node_config.Refl \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (2 subgoals):\n 1. \\<And>G nP b ba.\n       \\<lbrakk>(ba, ba) \\<in> edges G; (b, b) \\<in> edges G;\n        nP b \\<noteq> node_config.Refl;\n        nP ba \\<noteq> node_config.Refl\\<rbrakk>\n       \\<Longrightarrow> nP b = NoRefl\n 2. \\<And>G nP.\n       \\<exists>x\\<in>edges G.\n          \\<not> (case x of\n                  (s, r) \\<Rightarrow>\n                    s = r \\<longrightarrow>\n                    nP r = node_config.Refl) \\<Longrightarrow>\n       {e \\<in> edges G.\n        case e of (e1, e2) \\<Rightarrow> e1 = e2 \\<and> nP e1 = NoRefl}\n       \\<subseteq> {(s, r).\n                    (s, r) \\<in> edges G \\<and>\n                    s = r \\<and> nP r \\<noteq> node_config.Refl}", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G nP.\n       \\<exists>x\\<in>edges G.\n          \\<not> (case x of\n                  (s, r) \\<Rightarrow>\n                    s = r \\<longrightarrow>\n                    nP r = node_config.Refl) \\<Longrightarrow>\n       {e \\<in> edges G.\n        case e of (e1, e2) \\<Rightarrow> e1 = e2 \\<and> nP e1 = NoRefl}\n       \\<subseteq> {(s, r).\n                    (s, r) \\<in> edges G \\<and>\n                    s = r \\<and> nP r \\<noteq> node_config.Refl}", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G nP x.\n       \\<lbrakk>\\<exists>x\\<in>edges G.\n                   \\<not> (case x of\n                           (s, r) \\<Rightarrow>\n                             s = r \\<longrightarrow>\n                             nP r = node_config.Refl);\n        x \\<in> {e \\<in> edges G.\n                 case e of\n                 (e1, e2) \\<Rightarrow>\n                   e1 = e2 \\<and> nP e1 = NoRefl}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {(s, r).\n                                  (s, r) \\<in> edges G \\<and>\n                                  s = r \\<and>\n                                  nP r \\<noteq> node_config.Refl}", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G nP x.\n       \\<lbrakk>\\<exists>x\\<in>edges G.\n                   \\<not> (case x of\n                           (s, r) \\<Rightarrow>\n                             s = r \\<longrightarrow>\n                             nP r = node_config.Refl);\n        x \\<in> {e \\<in> edges G.\n                 case e of\n                 (e1, e2) \\<Rightarrow>\n                   e1 = e2 \\<and> nP e1 = NoRefl}\\<rbrakk>\n       \\<Longrightarrow> case x of\n                         (s, r) \\<Rightarrow>\n                           (s, r) \\<in> edges G \\<and>\n                           s = r \\<and> nP r \\<noteq> node_config.Refl", "apply(clarsimp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma NoRefl_unique_default:\n    \"\\<forall>G f nP i. wf_graph G \\<and> f \\<in> set_offending_flows G nP \\<and> i \\<in> fst ` f \\<longrightarrow> \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n     otherbot = NoRefl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G f nP i.\n       wf_graph G \\<and>\n       f \\<in> set_offending_flows G nP \\<and>\n       i \\<in> fst ` f \\<longrightarrow>\n       \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n    otherbot = NoRefl", "apply(erule default_uniqueness_by_counterexample_ACS)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> NoRefl \\<Longrightarrow>\n    \\<exists>G nP i f.\n       wf_graph G \\<and>\n       \\<not> sinvar G nP \\<and>\n       f \\<in> set_offending_flows G nP \\<and>\n       sinvar (delete_edges G f) nP \\<and>\n       i \\<in> fst ` f \\<and> sinvar G (nP(i := otherbot))", "apply (simp add: SecurityInvariant_withOffendingFlows.set_offending_flows_def\n      SecurityInvariant_withOffendingFlows.is_offending_flows_min_set_def\n      SecurityInvariant_withOffendingFlows.is_offending_flows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> NoRefl \\<Longrightarrow>\n    \\<exists>G.\n       wf_graph G \\<and>\n       (\\<exists>nP.\n           (\\<exists>x\\<in>edges G.\n               \\<not> (case x of\n                       (s, r) \\<Rightarrow>\n                         s = r \\<longrightarrow>\n                         nP r = node_config.Refl)) \\<and>\n           (\\<exists>i f.\n               f \\<subseteq> edges G \\<and>\n               (\\<exists>x\\<in>edges G.\n                   \\<not> (case x of\n                           (s, r) \\<Rightarrow>\n                             s = r \\<longrightarrow>\n                             nP r = node_config.Refl)) \\<and>\n               (\\<forall>x\\<in>edges (delete_edges G f).\n                   case x of\n                   (s, r) \\<Rightarrow>\n                     s = r \\<longrightarrow> nP r = node_config.Refl) \\<and>\n               (\\<forall>x\\<in>f.\n                   case x of\n                   (e1, e2) \\<Rightarrow>\n                     \\<exists>x\\<in>edges\n                                     (add_edge e1 e2 (delete_edges G f)).\n                        \\<not> (case x of\n                                (s, r) \\<Rightarrow>\n                                  s = r \\<longrightarrow>\n                                  nP r = node_config.Refl)) \\<and>\n               (\\<forall>x\\<in>edges (delete_edges G f).\n                   case x of\n                   (s, r) \\<Rightarrow>\n                     s = r \\<longrightarrow> nP r = node_config.Refl) \\<and>\n               i \\<in> fst ` f \\<and>\n               (\\<forall>x\\<in>edges G.\n                   case x of\n                   (s, r) \\<Rightarrow>\n                     (r = i \\<longrightarrow>\n                      s = i \\<longrightarrow>\n                      otherbot = node_config.Refl) \\<and>\n                     (r \\<noteq> i \\<longrightarrow>\n                      s = r \\<longrightarrow> nP r = node_config.Refl))))", "apply (simp add:graph_ops)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> NoRefl \\<Longrightarrow>\n    \\<exists>G.\n       wf_graph G \\<and>\n       (\\<exists>nP.\n           (\\<exists>x\\<in>edges G.\n               \\<not> (case x of\n                       (s, r) \\<Rightarrow>\n                         s = r \\<longrightarrow>\n                         nP r = node_config.Refl)) \\<and>\n           (\\<exists>i f.\n               f \\<subseteq> edges G \\<and>\n               (\\<exists>x\\<in>edges G.\n                   \\<not> (case x of\n                           (s, r) \\<Rightarrow>\n                             s = r \\<longrightarrow>\n                             nP r = node_config.Refl)) \\<and>\n               (\\<forall>x\\<in>edges G - f.\n                   case x of\n                   (s, r) \\<Rightarrow>\n                     s = r \\<longrightarrow> nP r = node_config.Refl) \\<and>\n               (\\<forall>x\\<in>f.\n                   case x of\n                   (e1, e2) \\<Rightarrow>\n                     e1 = e2 \\<and> nP e2 \\<noteq> node_config.Refl \\<or>\n                     (\\<exists>x\\<in>edges G - f.\n                         \\<not> (case x of\n                                 (s, r) \\<Rightarrow>\n                                   s = r \\<longrightarrow>\n                                   nP r = node_config.Refl))) \\<and>\n               (\\<forall>x\\<in>edges G - f.\n                   case x of\n                   (s, r) \\<Rightarrow>\n                     s = r \\<longrightarrow> nP r = node_config.Refl) \\<and>\n               i \\<in> fst ` f \\<and>\n               (\\<forall>x\\<in>edges G.\n                   case x of\n                   (s, r) \\<Rightarrow>\n                     (r = i \\<longrightarrow>\n                      s = i \\<longrightarrow>\n                      otherbot = node_config.Refl) \\<and>\n                     (r \\<noteq> i \\<longrightarrow>\n                      s = r \\<longrightarrow> nP r = node_config.Refl))))", "apply (simp split: prod.split_asm prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> NoRefl \\<Longrightarrow>\n    \\<exists>G.\n       wf_graph G \\<and>\n       (\\<exists>nP.\n           (\\<exists>x\\<in>edges G.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  x1 = x2 \\<and> nP x2 \\<noteq> node_config.Refl) \\<and>\n           (\\<exists>i f.\n               f \\<subseteq> edges G \\<and>\n               (\\<exists>x\\<in>edges G.\n                   \\<forall>x1 x2.\n                      x = (x1, x2) \\<longrightarrow>\n                      x1 = x2 \\<and> nP x2 \\<noteq> node_config.Refl) \\<and>\n               (\\<forall>x\\<in>edges G - f.\n                   \\<forall>x1.\n                      x = (x1, x1) \\<longrightarrow>\n                      nP x1 = node_config.Refl) \\<and>\n               (\\<forall>x\\<in>f.\n                   \\<forall>x1 x2.\n                      x = (x1, x2) \\<longrightarrow>\n                      x1 = x2 \\<and> nP x2 \\<noteq> node_config.Refl \\<or>\n                      (\\<exists>x\\<in>edges G - f.\n                          \\<forall>x1 x2.\n                             x = (x1, x2) \\<longrightarrow>\n                             x1 = x2 \\<and>\n                             nP x2 \\<noteq> node_config.Refl)) \\<and>\n               (\\<forall>x\\<in>edges G - f.\n                   \\<forall>x1.\n                      x = (x1, x1) \\<longrightarrow>\n                      nP x1 = node_config.Refl) \\<and>\n               i \\<in> fst ` f \\<and>\n               (\\<forall>x\\<in>edges G.\n                   \\<forall>x1 x2.\n                      x = (x1, x2) \\<longrightarrow>\n                      (x2 = i \\<longrightarrow>\n                       x1 = i \\<longrightarrow>\n                       otherbot = node_config.Refl) \\<and>\n                      (x2 \\<noteq> i \\<longrightarrow>\n                       x1 = x2 \\<longrightarrow>\n                       nP x2 = node_config.Refl))))", "apply(rule_tac x=\"\\<lparr> nodes={vertex_1}, edges = {(vertex_1,vertex_1)} \\<rparr>\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> NoRefl \\<Longrightarrow>\n    wf_graph\n     \\<lparr>nodes = {vertex_1},\n        edges = {(vertex_1, vertex_1)}\\<rparr> \\<and>\n    (\\<exists>nP.\n        nP vertex_1 \\<noteq> node_config.Refl \\<and>\n        (\\<exists>i f.\n            f \\<subseteq> {(vertex_1, vertex_1)} \\<and>\n            nP vertex_1 \\<noteq> node_config.Refl \\<and>\n            ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n             nP vertex_1 = node_config.Refl) \\<and>\n            (\\<forall>x\\<in>f.\n                \\<forall>x1 x2.\n                   x = (x1, x2) \\<longrightarrow>\n                   x1 = x2 \\<and> nP x2 \\<noteq> node_config.Refl \\<or>\n                   (vertex_1, vertex_1) \\<notin> f \\<and>\n                   nP vertex_1 \\<noteq> node_config.Refl) \\<and>\n            ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n             nP vertex_1 = node_config.Refl) \\<and>\n            i \\<in> fst ` f \\<and>\n            (vertex_1 = i \\<longrightarrow>\n             otherbot = node_config.Refl) \\<and>\n            (vertex_1 \\<noteq> i \\<longrightarrow>\n             nP vertex_1 = node_config.Refl)))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. otherbot \\<noteq> NoRefl \\<Longrightarrow>\n    wf_graph\n     \\<lparr>nodes = {vertex_1}, edges = {(vertex_1, vertex_1)}\\<rparr>\n 2. otherbot \\<noteq> NoRefl \\<Longrightarrow>\n    \\<exists>nP.\n       nP vertex_1 \\<noteq> node_config.Refl \\<and>\n       (\\<exists>i f.\n           f \\<subseteq> {(vertex_1, vertex_1)} \\<and>\n           nP vertex_1 \\<noteq> node_config.Refl \\<and>\n           ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n            nP vertex_1 = node_config.Refl) \\<and>\n           (\\<forall>x\\<in>f.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  x1 = x2 \\<and> nP x2 \\<noteq> node_config.Refl \\<or>\n                  (vertex_1, vertex_1) \\<notin> f \\<and>\n                  nP vertex_1 \\<noteq> node_config.Refl) \\<and>\n           ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n            nP vertex_1 = node_config.Refl) \\<and>\n           i \\<in> fst ` f \\<and>\n           (vertex_1 = i \\<longrightarrow>\n            otherbot = node_config.Refl) \\<and>\n           (vertex_1 \\<noteq> i \\<longrightarrow>\n            nP vertex_1 = node_config.Refl))", "apply(simp add: wf_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot \\<noteq> NoRefl \\<Longrightarrow>\n    \\<exists>nP.\n       nP vertex_1 \\<noteq> node_config.Refl \\<and>\n       (\\<exists>i f.\n           f \\<subseteq> {(vertex_1, vertex_1)} \\<and>\n           nP vertex_1 \\<noteq> node_config.Refl \\<and>\n           ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n            nP vertex_1 = node_config.Refl) \\<and>\n           (\\<forall>x\\<in>f.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  x1 = x2 \\<and> nP x2 \\<noteq> node_config.Refl \\<or>\n                  (vertex_1, vertex_1) \\<notin> f \\<and>\n                  nP vertex_1 \\<noteq> node_config.Refl) \\<and>\n           ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n            nP vertex_1 = node_config.Refl) \\<and>\n           i \\<in> fst ` f \\<and>\n           (vertex_1 = i \\<longrightarrow>\n            otherbot = node_config.Refl) \\<and>\n           (vertex_1 \\<noteq> i \\<longrightarrow>\n            nP vertex_1 = node_config.Refl))", "apply(case_tac otherbot, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot = node_config.Refl \\<Longrightarrow>\n    \\<exists>nP.\n       nP vertex_1 \\<noteq> node_config.Refl \\<and>\n       (\\<exists>i f.\n           f \\<subseteq> {(vertex_1, vertex_1)} \\<and>\n           nP vertex_1 \\<noteq> node_config.Refl \\<and>\n           ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n            nP vertex_1 = node_config.Refl) \\<and>\n           (\\<forall>x\\<in>f.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  x1 = x2 \\<and> nP x2 \\<noteq> node_config.Refl \\<or>\n                  (vertex_1, vertex_1) \\<notin> f \\<and>\n                  nP vertex_1 \\<noteq> node_config.Refl) \\<and>\n           ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n            nP vertex_1 = node_config.Refl) \\<and>\n           i \\<in> fst ` f \\<and>\n           (vertex_1 \\<noteq> i \\<longrightarrow>\n            nP vertex_1 = node_config.Refl))", "apply(rule_tac x=\"(\\<lambda> x. NoRefl)(vertex_1 := NoRefl, vertex_2 := NoRefl)\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. otherbot = node_config.Refl \\<Longrightarrow>\n    \\<exists>f\\<subseteq>{(vertex_1, vertex_1)}.\n       (vertex_1, vertex_1) \\<in> f \\<and>\n       (\\<forall>x\\<in>f.\n           \\<forall>x1 x2.\n              (x2 = vertex_2 \\<longrightarrow>\n               x = (x1, vertex_2) \\<longrightarrow>\n               x1 = vertex_2 \\<or> (vertex_1, vertex_1) \\<notin> f) \\<and>\n              (x2 \\<noteq> vertex_2 \\<longrightarrow>\n               x = (x1, x2) \\<longrightarrow>\n               x1 = x2 \\<or> (vertex_1, vertex_1) \\<notin> f)) \\<and>\n       (vertex_1, vertex_1) \\<in> f \\<and> vertex_1 \\<in> fst ` f", "apply(rule_tac x=\"{(vertex_1,vertex_1)}\" in exI, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "interpretation NoRefl: SecurityInvariant_ACS\nwhere default_node_properties = default_node_properties\nand sinvar = sinvar\nrewrites \"SecurityInvariant_withOffendingFlows.set_offending_flows sinvar = NoRefl_offending_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_ACS sinvar default_node_properties &&&\n    set_offending_flows = NoRefl_offending_set", "unfolding default_node_properties_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_ACS sinvar NoRefl &&&\n    set_offending_flows = NoRefl_offending_set", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>fst ` f.\n                            \\<not> sinvar G (nP(i := NoRefl))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> fst ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = NoRefl\n 3. set_offending_flows = NoRefl_offending_set", "apply(rule ballI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> fst ` f\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar G (nP(i := NoRefl))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> fst ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = NoRefl\n 3. set_offending_flows = NoRefl_offending_set", "apply(frule SINVAR_NoRefl.offending_notevalD)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> fst ` f; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar G (nP(i := NoRefl))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> fst ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = NoRefl\n 3. set_offending_flows = NoRefl_offending_set", "apply(simp only: SecurityInvariant_withOffendingFlows.ENFsr_offending_set[OF NoRfl_ENRsr])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G;\n        f \\<in> (if False then {}\n                 else {{(s, r).\n                        (s, r) \\<in> edges G \\<and>\n                        \\<not> (s = r \\<longrightarrow>\n                                nP s = node_config.Refl)}});\n        i \\<in> fst ` f; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar G (nP(i := NoRefl))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> fst ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = NoRefl\n 3. set_offending_flows = NoRefl_offending_set", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> fst ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = NoRefl\n 2. set_offending_flows = NoRefl_offending_set", "apply(fact NoRefl_unique_default)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_offending_flows = NoRefl_offending_set", "apply(fact NoRefl_offending_set)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>It can also be interpreted as IFS\\<close>"], ["", "lemma NoRefl_SecurityInvariant_IFS: \"SecurityInvariant_IFS sinvar default_node_properties\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_IFS sinvar default_node_properties", "unfolding default_node_properties_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant_IFS sinvar NoRefl", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>snd ` f.\n                            \\<not> sinvar G (nP(i := NoRefl))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = NoRefl", "apply(rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> snd ` f\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar G (nP(i := NoRefl))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = NoRefl", "apply(frule SINVAR_NoRefl.offending_notevalD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G; f \\<in> set_offending_flows G nP;\n        i \\<in> snd ` f; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar G (nP(i := NoRefl))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = NoRefl", "apply(simp only: SecurityInvariant_withOffendingFlows.ENFsr_offending_set[OF NoRfl_ENRsr])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G f nP i.\n       \\<lbrakk>wf_graph G;\n        f \\<in> (if False then {}\n                 else {{(s, r).\n                        (s, r) \\<in> edges G \\<and>\n                        \\<not> (s = r \\<longrightarrow>\n                                nP s = node_config.Refl)}});\n        i \\<in> snd ` f; \\<not> sinvar G nP\\<rbrakk>\n       \\<Longrightarrow> \\<not> sinvar G (nP(i := NoRefl))\n 2. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = NoRefl", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       \\<forall>G f nP i.\n          wf_graph G \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          i \\<in> snd ` f \\<longrightarrow>\n          \\<not> sinvar G (nP(i := otherbot)) \\<Longrightarrow>\n       otherbot = NoRefl", "apply(erule default_uniqueness_by_counterexample_IFS)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> NoRefl \\<Longrightarrow>\n       \\<exists>G nP i f.\n          wf_graph G \\<and>\n          \\<not> sinvar G nP \\<and>\n          f \\<in> set_offending_flows G nP \\<and>\n          sinvar (delete_edges G f) nP \\<and>\n          i \\<in> snd ` f \\<and> sinvar G (nP(i := otherbot))", "apply (simp add: SecurityInvariant_withOffendingFlows.set_offending_flows_def\n      SecurityInvariant_withOffendingFlows.is_offending_flows_min_set_def\n      SecurityInvariant_withOffendingFlows.is_offending_flows_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> NoRefl \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>x\\<in>edges G.\n                  \\<not> (case x of\n                          (s, r) \\<Rightarrow>\n                            s = r \\<longrightarrow>\n                            nP r = node_config.Refl)) \\<and>\n              (\\<exists>i f.\n                  f \\<subseteq> edges G \\<and>\n                  (\\<exists>x\\<in>edges G.\n                      \\<not> (case x of\n                              (s, r) \\<Rightarrow>\n                                s = r \\<longrightarrow>\n                                nP r = node_config.Refl)) \\<and>\n                  (\\<forall>x\\<in>edges (delete_edges G f).\n                      case x of\n                      (s, r) \\<Rightarrow>\n                        s = r \\<longrightarrow>\n                        nP r = node_config.Refl) \\<and>\n                  (\\<forall>x\\<in>f.\n                      case x of\n                      (e1, e2) \\<Rightarrow>\n                        \\<exists>x\\<in>edges\n  (add_edge e1 e2 (delete_edges G f)).\n                           \\<not> (case x of\n                                   (s, r) \\<Rightarrow>\n                                     s = r \\<longrightarrow>\n                                     nP r = node_config.Refl)) \\<and>\n                  (\\<forall>x\\<in>edges (delete_edges G f).\n                      case x of\n                      (s, r) \\<Rightarrow>\n                        s = r \\<longrightarrow>\n                        nP r = node_config.Refl) \\<and>\n                  i \\<in> snd ` f \\<and>\n                  (\\<forall>x\\<in>edges G.\n                      case x of\n                      (s, r) \\<Rightarrow>\n                        (r = i \\<longrightarrow>\n                         s = i \\<longrightarrow>\n                         otherbot = node_config.Refl) \\<and>\n                        (r \\<noteq> i \\<longrightarrow>\n                         s = r \\<longrightarrow> nP r = node_config.Refl))))", "apply (simp add:graph_ops)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> NoRefl \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>x\\<in>edges G.\n                  \\<not> (case x of\n                          (s, r) \\<Rightarrow>\n                            s = r \\<longrightarrow>\n                            nP r = node_config.Refl)) \\<and>\n              (\\<exists>i f.\n                  f \\<subseteq> edges G \\<and>\n                  (\\<exists>x\\<in>edges G.\n                      \\<not> (case x of\n                              (s, r) \\<Rightarrow>\n                                s = r \\<longrightarrow>\n                                nP r = node_config.Refl)) \\<and>\n                  (\\<forall>x\\<in>edges G - f.\n                      case x of\n                      (s, r) \\<Rightarrow>\n                        s = r \\<longrightarrow>\n                        nP r = node_config.Refl) \\<and>\n                  (\\<forall>x\\<in>f.\n                      case x of\n                      (e1, e2) \\<Rightarrow>\n                        e1 = e2 \\<and> nP e2 \\<noteq> node_config.Refl \\<or>\n                        (\\<exists>x\\<in>edges G - f.\n                            \\<not> (case x of\n                                    (s, r) \\<Rightarrow>\ns = r \\<longrightarrow> nP r = node_config.Refl))) \\<and>\n                  (\\<forall>x\\<in>edges G - f.\n                      case x of\n                      (s, r) \\<Rightarrow>\n                        s = r \\<longrightarrow>\n                        nP r = node_config.Refl) \\<and>\n                  i \\<in> snd ` f \\<and>\n                  (\\<forall>x\\<in>edges G.\n                      case x of\n                      (s, r) \\<Rightarrow>\n                        (r = i \\<longrightarrow>\n                         s = i \\<longrightarrow>\n                         otherbot = node_config.Refl) \\<and>\n                        (r \\<noteq> i \\<longrightarrow>\n                         s = r \\<longrightarrow> nP r = node_config.Refl))))", "apply (simp split: prod.split_asm prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> NoRefl \\<Longrightarrow>\n       \\<exists>G.\n          wf_graph G \\<and>\n          (\\<exists>nP.\n              (\\<exists>x\\<in>edges G.\n                  \\<forall>x1 x2.\n                     x = (x1, x2) \\<longrightarrow>\n                     x1 = x2 \\<and> nP x2 \\<noteq> node_config.Refl) \\<and>\n              (\\<exists>i f.\n                  f \\<subseteq> edges G \\<and>\n                  (\\<exists>x\\<in>edges G.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         x1 = x2 \\<and>\n                         nP x2 \\<noteq> node_config.Refl) \\<and>\n                  (\\<forall>x\\<in>edges G - f.\n                      \\<forall>x1.\n                         x = (x1, x1) \\<longrightarrow>\n                         nP x1 = node_config.Refl) \\<and>\n                  (\\<forall>x\\<in>f.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         x1 = x2 \\<and>\n                         nP x2 \\<noteq> node_config.Refl \\<or>\n                         (\\<exists>x\\<in>edges G - f.\n                             \\<forall>x1 x2.\n                                x = (x1, x2) \\<longrightarrow>\n                                x1 = x2 \\<and>\n                                nP x2 \\<noteq> node_config.Refl)) \\<and>\n                  (\\<forall>x\\<in>edges G - f.\n                      \\<forall>x1.\n                         x = (x1, x1) \\<longrightarrow>\n                         nP x1 = node_config.Refl) \\<and>\n                  i \\<in> snd ` f \\<and>\n                  (\\<forall>x\\<in>edges G.\n                      \\<forall>x1 x2.\n                         x = (x1, x2) \\<longrightarrow>\n                         (x2 = i \\<longrightarrow>\n                          x1 = i \\<longrightarrow>\n                          otherbot = node_config.Refl) \\<and>\n                         (x2 \\<noteq> i \\<longrightarrow>\n                          x1 = x2 \\<longrightarrow>\n                          nP x2 = node_config.Refl))))", "apply(rule_tac x=\"\\<lparr> nodes={vertex_1}, edges = {(vertex_1,vertex_1)} \\<rparr>\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> NoRefl \\<Longrightarrow>\n       wf_graph\n        \\<lparr>nodes = {vertex_1},\n           edges = {(vertex_1, vertex_1)}\\<rparr> \\<and>\n       (\\<exists>nP.\n           nP vertex_1 \\<noteq> node_config.Refl \\<and>\n           (\\<exists>i f.\n               f \\<subseteq> {(vertex_1, vertex_1)} \\<and>\n               nP vertex_1 \\<noteq> node_config.Refl \\<and>\n               ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n                nP vertex_1 = node_config.Refl) \\<and>\n               (\\<forall>x\\<in>f.\n                   \\<forall>x1 x2.\n                      x = (x1, x2) \\<longrightarrow>\n                      x1 = x2 \\<and> nP x2 \\<noteq> node_config.Refl \\<or>\n                      (vertex_1, vertex_1) \\<notin> f \\<and>\n                      nP vertex_1 \\<noteq> node_config.Refl) \\<and>\n               ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n                nP vertex_1 = node_config.Refl) \\<and>\n               i \\<in> snd ` f \\<and>\n               (vertex_1 = i \\<longrightarrow>\n                otherbot = node_config.Refl) \\<and>\n               (vertex_1 \\<noteq> i \\<longrightarrow>\n                nP vertex_1 = node_config.Refl)))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> NoRefl \\<Longrightarrow>\n       wf_graph\n        \\<lparr>nodes = {vertex_1}, edges = {(vertex_1, vertex_1)}\\<rparr>\n 2. \\<And>otherbot.\n       otherbot \\<noteq> NoRefl \\<Longrightarrow>\n       \\<exists>nP.\n          nP vertex_1 \\<noteq> node_config.Refl \\<and>\n          (\\<exists>i f.\n              f \\<subseteq> {(vertex_1, vertex_1)} \\<and>\n              nP vertex_1 \\<noteq> node_config.Refl \\<and>\n              ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n               nP vertex_1 = node_config.Refl) \\<and>\n              (\\<forall>x\\<in>f.\n                  \\<forall>x1 x2.\n                     x = (x1, x2) \\<longrightarrow>\n                     x1 = x2 \\<and> nP x2 \\<noteq> node_config.Refl \\<or>\n                     (vertex_1, vertex_1) \\<notin> f \\<and>\n                     nP vertex_1 \\<noteq> node_config.Refl) \\<and>\n              ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n               nP vertex_1 = node_config.Refl) \\<and>\n              i \\<in> snd ` f \\<and>\n              (vertex_1 = i \\<longrightarrow>\n               otherbot = node_config.Refl) \\<and>\n              (vertex_1 \\<noteq> i \\<longrightarrow>\n               nP vertex_1 = node_config.Refl))", "apply(simp add: wf_graph_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>otherbot.\n       otherbot \\<noteq> NoRefl \\<Longrightarrow>\n       \\<exists>nP.\n          nP vertex_1 \\<noteq> node_config.Refl \\<and>\n          (\\<exists>i f.\n              f \\<subseteq> {(vertex_1, vertex_1)} \\<and>\n              nP vertex_1 \\<noteq> node_config.Refl \\<and>\n              ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n               nP vertex_1 = node_config.Refl) \\<and>\n              (\\<forall>x\\<in>f.\n                  \\<forall>x1 x2.\n                     x = (x1, x2) \\<longrightarrow>\n                     x1 = x2 \\<and> nP x2 \\<noteq> node_config.Refl \\<or>\n                     (vertex_1, vertex_1) \\<notin> f \\<and>\n                     nP vertex_1 \\<noteq> node_config.Refl) \\<and>\n              ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n               nP vertex_1 = node_config.Refl) \\<and>\n              i \\<in> snd ` f \\<and>\n              (vertex_1 = i \\<longrightarrow>\n               otherbot = node_config.Refl) \\<and>\n              (vertex_1 \\<noteq> i \\<longrightarrow>\n               nP vertex_1 = node_config.Refl))", "apply(case_tac otherbot, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>nP.\n       nP vertex_1 \\<noteq> node_config.Refl \\<and>\n       (\\<exists>i f.\n           f \\<subseteq> {(vertex_1, vertex_1)} \\<and>\n           nP vertex_1 \\<noteq> node_config.Refl \\<and>\n           ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n            nP vertex_1 = node_config.Refl) \\<and>\n           (\\<forall>x\\<in>f.\n               \\<forall>x1 x2.\n                  x = (x1, x2) \\<longrightarrow>\n                  x1 = x2 \\<and> nP x2 \\<noteq> node_config.Refl \\<or>\n                  (vertex_1, vertex_1) \\<notin> f \\<and>\n                  nP vertex_1 \\<noteq> node_config.Refl) \\<and>\n           ((vertex_1, vertex_1) \\<notin> f \\<longrightarrow>\n            nP vertex_1 = node_config.Refl) \\<and>\n           i \\<in> snd ` f \\<and>\n           (vertex_1 \\<noteq> i \\<longrightarrow>\n            nP vertex_1 = node_config.Refl))", "apply(rule_tac x=\"(\\<lambda> x. NoRefl)(vertex_1 := NoRefl, vertex_2 := NoRefl)\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<subseteq>{(vertex_1, vertex_1)}.\n       (vertex_1, vertex_1) \\<in> f \\<and>\n       (\\<forall>x\\<in>f.\n           \\<forall>x1 x2.\n              (x2 = vertex_2 \\<longrightarrow>\n               x = (x1, vertex_2) \\<longrightarrow>\n               x1 = vertex_2 \\<or> (vertex_1, vertex_1) \\<notin> f) \\<and>\n              (x2 \\<noteq> vertex_2 \\<longrightarrow>\n               x = (x1, x2) \\<longrightarrow>\n               x1 = x2 \\<or> (vertex_1, vertex_1) \\<notin> f)) \\<and>\n       (vertex_1, vertex_1) \\<in> f \\<and> vertex_1 \\<in> snd ` f", "apply(rule_tac x=\"{(vertex_1,vertex_1)}\" in exI, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma TopoS_NoRefl: \"SecurityInvariant sinvar default_node_properties receiver_violation\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties receiver_violation", "unfolding receiver_violation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. SecurityInvariant sinvar default_node_properties False", "by unfold_locales"], ["", "hide_fact (open) sinvar_mono"], ["", "hide_const (open) sinvar receiver_violation default_node_properties"], ["", "end"]]}