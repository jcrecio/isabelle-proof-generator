{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_Dependability_impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["theorem dependability_fix_nP_impl_correct: \"wf_list_graph G \\<Longrightarrow> dependability_fix_nP G nP  = SINVAR_Dependability.dependability_fix_nP (list_graph_to_graph G) nP\"", "lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_Dependability.default_node_properties P = NetModel_node_props P\"", "lemma sinvar_correct: \"wf_list_graph G \\<Longrightarrow> SINVAR_Dependability.sinvar (list_graph_to_graph G) nP = sinvar G nP\""], "translations": [["", "theorem dependability_fix_nP_impl_correct: \"wf_list_graph G \\<Longrightarrow> dependability_fix_nP G nP  = SINVAR_Dependability.dependability_fix_nP (list_graph_to_graph G) nP\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph G \\<Longrightarrow>\n    SINVAR_Dependability_impl.dependability_fix_nP G nP =\n    SINVAR_Dependability.dependability_fix_nP (list_graph_to_graph G) nP", "by(simp add: num_reachable_correct fun_eq_iff)"], ["", "value \"let G = \\<lparr> nodesL = [1::nat,2,3,4], edgesL = [(1,1), (2,1), (3,1), (4,1), (1,2), (1,3)] \\<rparr> in (let nP = dependability_fix_nP G (\\<lambda>e. 0) in map (\\<lambda>v. nP v) (nodesL G))\""], ["", "value \"let G = \\<lparr> nodesL = [1::nat,2,3,4], edgesL = [(1,1)] \\<rparr> in (let nP = dependability_fix_nP G (\\<lambda>e. 0) in map (\\<lambda>v. nP v) (nodesL G))\""], ["", "definition Dependability_offending_list:: \"'v list_graph \\<Rightarrow> ('v \\<Rightarrow> dependability_level) \\<Rightarrow> ('v \\<times> 'v) list list\" where\n  \"Dependability_offending_list = Generic_offending_list sinvar\""], ["", "definition \"NetModel_node_props P = (\\<lambda> i. (case (node_properties P) i of Some property \\<Rightarrow> property | None \\<Rightarrow> SINVAR_Dependability.default_node_properties))\""], ["", "lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_Dependability.default_node_properties P = NetModel_node_props P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dependability.node_props P = NetModel_node_props P", "apply(simp add: NetModel_node_props_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"Dependability_eval G P = (wf_list_graph G \\<and>\n  sinvar G (SecurityInvariant.node_props SINVAR_Dependability.default_node_properties P))\""], ["", "lemma sinvar_correct: \"wf_list_graph G \\<Longrightarrow> SINVAR_Dependability.sinvar (list_graph_to_graph G) nP = sinvar G nP\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph G \\<Longrightarrow>\n    SINVAR_Dependability.sinvar (list_graph_to_graph G) nP = sinvar G nP", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph G \\<Longrightarrow>\n    (\\<forall>x\\<in>edges (list_graph_to_graph G).\n        case x of\n        (e1, e2) \\<Rightarrow>\n          FiniteGraph.num_reachable (list_graph_to_graph G) e1\n          \\<le> nP e1) =\n    (\\<forall>x\\<in>set (edgesL G).\n        case x of\n        (e1, e2) \\<Rightarrow>\n          FiniteListGraph.num_reachable G e1 \\<le> nP e1)", "apply(rule all_edges_list_I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph G \\<Longrightarrow>\n    (\\<lambda>a b.\n        FiniteGraph.num_reachable (list_graph_to_graph G) a \\<le> nP a) =\n    (\\<lambda>a b. FiniteListGraph.num_reachable G a \\<le> nP a)", "apply(simp add: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_list_graph G \\<Longrightarrow>\n    \\<forall>x.\n       (FiniteGraph.num_reachable (list_graph_to_graph G) x \\<le> nP x) =\n       (FiniteListGraph.num_reachable G x \\<le> nP x)", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       wf_list_graph G \\<Longrightarrow>\n       (FiniteGraph.num_reachable (list_graph_to_graph G) x \\<le> nP x) =\n       (FiniteListGraph.num_reachable G x \\<le> nP x)", "apply(rename_tac x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       wf_list_graph G \\<Longrightarrow>\n       (FiniteGraph.num_reachable (list_graph_to_graph G) x \\<le> nP x) =\n       (FiniteListGraph.num_reachable G x \\<le> nP x)", "apply(drule_tac v=\"x\" in  num_reachable_correct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       FiniteGraph.num_reachable (list_graph_to_graph G) x =\n       FiniteListGraph.num_reachable G x \\<Longrightarrow>\n       (FiniteGraph.num_reachable (list_graph_to_graph G) x \\<le> nP x) =\n       (FiniteListGraph.num_reachable G x \\<le> nP x)", "apply presburger"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "interpretation Dependability_impl:TopoS_List_Impl \n  where default_node_properties=SINVAR_Dependability.default_node_properties\n  and sinvar_spec=SINVAR_Dependability.sinvar\n  and sinvar_impl=sinvar\n  and receiver_violation=SINVAR_Dependability.receiver_violation\n  and offending_flows_impl=Dependability_offending_list\n  and node_props_impl=NetModel_node_props\n  and eval_impl=Dependability_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_Dependability.default_node_properties\n     SINVAR_Dependability.sinvar sinvar\n     SINVAR_Dependability.receiver_violation Dependability_offending_list\n     NetModel_node_props Dependability_eval", "apply(unfold TopoS_List_Impl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SecurityInvariant SINVAR_Dependability.sinvar\n      SINVAR_Dependability.default_node_properties\n      SINVAR_Dependability.receiver_violation \\<and>\n     (\\<forall>G nP.\n         wf_list_graph G \\<longrightarrow>\n         SINVAR_Dependability.sinvar (list_graph_to_graph G) nP =\n         sinvar G nP)) \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (Dependability_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        Dependability.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Dependability.eval (list_graph_to_graph G) P) =\n        Dependability_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SecurityInvariant SINVAR_Dependability.sinvar\n     SINVAR_Dependability.default_node_properties\n     SINVAR_Dependability.receiver_violation \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SINVAR_Dependability.sinvar (list_graph_to_graph G) nP =\n        sinvar G nP)\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (Dependability_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        Dependability.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Dependability.eval (list_graph_to_graph G) P) =\n        Dependability_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. SecurityInvariant SINVAR_Dependability.sinvar\n     SINVAR_Dependability.default_node_properties\n     SINVAR_Dependability.receiver_violation\n 2. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       SINVAR_Dependability.sinvar (list_graph_to_graph G) nP = sinvar G nP\n 3. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (Dependability_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        Dependability.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Dependability.eval (list_graph_to_graph G) P) =\n        Dependability_eval G P)", "apply(simp add: TopoS_Dependability; fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       SINVAR_Dependability.sinvar (list_graph_to_graph G) nP = sinvar G nP\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (Dependability_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        Dependability.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Dependability.eval (list_graph_to_graph G) P) =\n        Dependability_eval G P)", "apply(intro allI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP.\n       wf_list_graph G \\<Longrightarrow>\n       SINVAR_Dependability.sinvar (list_graph_to_graph G) nP = sinvar G nP\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (Dependability_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        Dependability.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Dependability.eval (list_graph_to_graph G) P) =\n        Dependability_eval G P)", "apply(fact sinvar_correct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (Dependability_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        Dependability.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Dependability.eval (list_graph_to_graph G) P) =\n        Dependability_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (Dependability_offending_list G nP)\n 2. (\\<forall>P.\n        Dependability.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Dependability.eval (list_graph_to_graph G) P) =\n        Dependability_eval G P)", "apply(unfold Dependability_offending_list_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (Generic_offending_list sinvar G nP)\n 2. (\\<forall>P.\n        Dependability.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Dependability.eval (list_graph_to_graph G) P) =\n        Dependability_eval G P)", "apply(intro allI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP.\n       wf_list_graph G \\<Longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (Generic_offending_list sinvar G nP)\n 2. (\\<forall>P.\n        Dependability.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Dependability.eval (list_graph_to_graph G) P) =\n        Dependability_eval G P)", "apply(rule Generic_offending_list_correct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>G nP. wf_list_graph G \\<Longrightarrow> wf_list_graph G\n 2. \\<And>G nP Ga nPa.\n       \\<lbrakk>wf_list_graph G; wf_list_graph Ga\\<rbrakk>\n       \\<Longrightarrow> SINVAR_Dependability.sinvar\n                          (list_graph_to_graph Ga) nPa =\n                         sinvar Ga nPa\n 3. (\\<forall>P.\n        Dependability.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Dependability.eval (list_graph_to_graph G) P) =\n        Dependability_eval G P)", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G nP Ga nPa.\n       \\<lbrakk>wf_list_graph G; wf_list_graph Ga\\<rbrakk>\n       \\<Longrightarrow> SINVAR_Dependability.sinvar\n                          (list_graph_to_graph Ga) nPa =\n                         sinvar Ga nPa\n 2. (\\<forall>P.\n        Dependability.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Dependability.eval (list_graph_to_graph G) P) =\n        Dependability_eval G P)", "apply(simp only: sinvar_correct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P.\n        Dependability.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         Dependability.eval (list_graph_to_graph G) P) =\n        Dependability_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P. Dependability.node_props_formaldef P = NetModel_node_props P\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        Dependability.eval (list_graph_to_graph G) P) =\n       Dependability_eval G P", "apply(intro allI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P. Dependability.node_props_formaldef P = NetModel_node_props P\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        Dependability.eval (list_graph_to_graph G) P) =\n       Dependability_eval G P", "apply(simp only: NetModel_node_props_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P.\n       Dependability.node_props_formaldef P =\n       (\\<lambda>i.\n           case node_properties P i of\n           None \\<Rightarrow> SINVAR_Dependability.default_node_properties\n           | Some property \\<Rightarrow> property)\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        Dependability.eval (list_graph_to_graph G) P) =\n       Dependability_eval G P", "apply(metis Dependability.node_props.simps Dependability.node_props_eq_node_props_formaldef)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        Dependability.eval (list_graph_to_graph G) P) =\n       Dependability_eval G P", "apply(simp only: Dependability_eval_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        Dependability.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and> sinvar G (Dependability.node_props P))", "apply(intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        Dependability.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and> sinvar G (Dependability.node_props P))", "apply(rule TopoS_eval_impl_proofrule[OF TopoS_Dependability])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G P nP.\n       wf_list_graph G \\<Longrightarrow>\n       SINVAR_Dependability.sinvar (list_graph_to_graph G) nP = sinvar G nP", "apply(simp only: sinvar_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Dependability packing\\<close>"], ["", "definition SINVAR_LIB_Dependability :: \"('v::vertex, SINVAR_Dependability.dependability_level) TopoS_packed\" where\n    \"SINVAR_LIB_Dependability \\<equiv> \n    \\<lparr> nm_name = ''Dependability'', \n      nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n      nm_default = SINVAR_Dependability.default_node_properties, \n      nm_sinvar = sinvar,\n      nm_offending_flows = Dependability_offending_list, \n      nm_node_props = NetModel_node_props,\n      nm_eval = Dependability_eval\n      \\<rparr>\""], ["", "interpretation SINVAR_LIB_Dependability_interpretation: TopoS_modelLibrary SINVAR_LIB_Dependability\n      SINVAR_Dependability.sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_modelLibrary SINVAR_LIB_Dependability SINVAR_Dependability.sinvar", "apply(unfold TopoS_modelLibrary_def SINVAR_LIB_Dependability_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''Dependability'',\n              nm_receiver_violation =\n                SINVAR_Dependability.receiver_violation,\n              nm_default = SINVAR_Dependability.default_node_properties,\n              nm_sinvar = sinvar,\n              nm_offending_flows = Dependability_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = Dependability_eval\\<rparr>) \\<and>\n    TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)\n     SINVAR_Dependability.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''Dependability'',\n              nm_receiver_violation =\n                SINVAR_Dependability.receiver_violation,\n              nm_default = SINVAR_Dependability.default_node_properties,\n              nm_sinvar = sinvar,\n              nm_offending_flows = Dependability_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = Dependability_eval\\<rparr>)\n 2. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)\n     SINVAR_Dependability.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)\n     SINVAR_Dependability.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''Dependability'',\n          nm_receiver_violation = SINVAR_Dependability.receiver_violation,\n          nm_default = SINVAR_Dependability.default_node_properties,\n          nm_sinvar = sinvar,\n          nm_offending_flows = Dependability_offending_list,\n          nm_node_props = NetModel_node_props,\n          nm_eval = Dependability_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_Dependability.default_node_properties\n     SINVAR_Dependability.sinvar sinvar\n     SINVAR_Dependability.receiver_violation Dependability_offending_list\n     NetModel_node_props Dependability_eval", "by(unfold_locales)"], ["", "text \\<open>Example:\\<close>"], ["", "value \"let G = \\<lparr> nodesL = [1::nat,2,3,4,8,9,10], edgesL = [(1,2), (2,3), (3,4), (8,9),(9,8)] \\<rparr>\n      in sinvar G  ((\\<lambda> n. SINVAR_Dependability.default_node_properties)(1:=3, 2:=2, 3:=1, 4:=0, 8:=2, 9:=2, 10:=0))\""], ["", "value \"let G = \\<lparr> nodesL = [1::nat,2,3,4,8,9,10], edgesL = [(1,2), (2,3), (3,4), (8,9),(9,8)] \\<rparr>\n      in sinvar G  ((\\<lambda> n. SINVAR_Dependability.default_node_properties)(1:=10, 2:=10, 3:=10, 4:=10, 8:=10, 9:=10, 10:=10))\""], ["", "value \"let G = \\<lparr> nodesL = [1::nat,2,3,4,8,9,10], edgesL = [(1,2), (2,3), (3,4), (8,9),(9,8)] \\<rparr>\n      in sinvar G  ((\\<lambda> n. 2))\""], ["", "value \"let G = \\<lparr> nodesL = [1::nat,2,3,4,8,9,10], edgesL = [(1,2), (2,3), (3,4), (8,9),(9,8)] \\<rparr>\n      in Dependability_eval G  \\<lparr>node_properties=[1\\<mapsto>3, 2\\<mapsto>2, 3\\<mapsto>1, 4\\<mapsto>0, 8\\<mapsto>2, 9\\<mapsto>2, 10\\<mapsto>0] \\<rparr>\""], ["", "value \"Dependability_offending_list \\<lparr> nodesL = [1::nat,2,3,4,8,9,10], edgesL = [(1,2), (2,3), (3,4), (8,9),(9,8)] \\<rparr> (\\<lambda> n. 2)\""], ["", "hide_fact (open) sinvar_correct"], ["", "hide_const (open) sinvar NetModel_node_props"], ["", "end"]]}