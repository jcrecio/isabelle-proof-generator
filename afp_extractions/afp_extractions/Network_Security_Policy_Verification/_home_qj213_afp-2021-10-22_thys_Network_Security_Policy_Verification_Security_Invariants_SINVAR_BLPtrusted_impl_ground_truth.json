{"file_name": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification/Security_Invariants/SINVAR_BLPtrusted_impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Network_Security_Policy_Verification", "problem_names": ["lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_BLPtrusted.default_node_properties P = NetModel_node_props P\""], "translations": [["", "lemma[code_unfold]: \"SecurityInvariant.node_props SINVAR_BLPtrusted.default_node_properties P = NetModel_node_props P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BLPtrusted.node_props P = NetModel_node_props P", "apply(simp add: NetModel_node_props_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"BLP_eval G P = (wf_list_graph G \\<and>\n  sinvar G (SecurityInvariant.node_props SINVAR_BLPtrusted.default_node_properties P))\""], ["", "interpretation BLPtrusted_impl:TopoS_List_Impl \n  where default_node_properties=SINVAR_BLPtrusted.default_node_properties\n  and sinvar_spec=SINVAR_BLPtrusted.sinvar\n  and sinvar_impl=sinvar\n  and receiver_violation=SINVAR_BLPtrusted.receiver_violation\n  and offending_flows_impl=BLP_offending_list\n  and node_props_impl=NetModel_node_props\n  and eval_impl=BLP_eval"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_BLPtrusted.default_node_properties\n     SINVAR_BLPtrusted.sinvar sinvar SINVAR_BLPtrusted.receiver_violation\n     BLP_offending_list NetModel_node_props BLP_eval", "apply(unfold TopoS_List_Impl_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SecurityInvariant SINVAR_BLPtrusted.sinvar\n      SINVAR_BLPtrusted.default_node_properties\n      SINVAR_BLPtrusted.receiver_violation \\<and>\n     (\\<forall>G nP.\n         wf_list_graph G \\<longrightarrow>\n         SINVAR_BLPtrusted.sinvar (list_graph_to_graph G) nP =\n         sinvar G nP)) \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (BLP_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        BLPtrusted.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         BLPtrusted.eval (list_graph_to_graph G) P) =\n        BLP_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. SecurityInvariant SINVAR_BLPtrusted.sinvar\n     SINVAR_BLPtrusted.default_node_properties\n     SINVAR_BLPtrusted.receiver_violation \\<and>\n    (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        SINVAR_BLPtrusted.sinvar (list_graph_to_graph G) nP = sinvar G nP)\n 2. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (BLP_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        BLPtrusted.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         BLPtrusted.eval (list_graph_to_graph G) P) =\n        BLP_eval G P)", "apply(simp add: TopoS_BLPtrusted list_graph_to_graph_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>G nP.\n        wf_list_graph G \\<longrightarrow>\n        set_offending_flows (list_graph_to_graph G) nP =\n        set ` set (BLP_offending_list G nP)) \\<and>\n    (\\<forall>P.\n        BLPtrusted.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         BLPtrusted.eval (list_graph_to_graph G) P) =\n        BLP_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>G nP.\n       wf_list_graph G \\<longrightarrow>\n       set_offending_flows (list_graph_to_graph G) nP =\n       set ` set (BLP_offending_list G nP)\n 2. (\\<forall>P.\n        BLPtrusted.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         BLPtrusted.eval (list_graph_to_graph G) P) =\n        BLP_eval G P)", "apply(simp add: list_graph_to_graph_def BLP_offending_set BLP_offending_set_def BLP_offending_list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>P.\n        BLPtrusted.node_props_formaldef P = NetModel_node_props P) \\<and>\n    (\\<forall>G P.\n        (distinct (nodesL G) \\<and>\n         distinct (edgesL G) \\<and>\n         BLPtrusted.eval (list_graph_to_graph G) P) =\n        BLP_eval G P)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P. BLPtrusted.node_props_formaldef P = NetModel_node_props P\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        BLPtrusted.eval (list_graph_to_graph G) P) =\n       BLP_eval G P", "apply(simp only: NetModel_node_props_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>P.\n       BLPtrusted.node_props_formaldef P =\n       (\\<lambda>i.\n           case node_properties P i of\n           None \\<Rightarrow> SINVAR_BLPtrusted.default_node_properties\n           | Some property \\<Rightarrow> property)\n 2. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        BLPtrusted.eval (list_graph_to_graph G) P) =\n       BLP_eval G P", "apply(metis BLPtrusted.node_props.simps BLPtrusted.node_props_eq_node_props_formaldef)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        BLPtrusted.eval (list_graph_to_graph G) P) =\n       BLP_eval G P", "apply(simp only: BLP_eval_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        BLPtrusted.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and> sinvar G (BLPtrusted.node_props P))", "apply(intro allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G P.\n       (distinct (nodesL G) \\<and>\n        distinct (edgesL G) \\<and>\n        BLPtrusted.eval (list_graph_to_graph G) P) =\n       (wf_list_graph G \\<and> sinvar G (BLPtrusted.node_props P))", "apply(rule TopoS_eval_impl_proofrule[OF TopoS_BLPtrusted])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G P nP.\n       wf_list_graph G \\<Longrightarrow>\n       SINVAR_BLPtrusted.sinvar (list_graph_to_graph G) nP = sinvar G nP", "apply(simp_all add: list_graph_to_graph_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>BLPtrusted packing\\<close>"], ["", "definition SINVAR_LIB_BLPtrusted :: \"('v::vertex, SINVAR_BLPtrusted.node_config) TopoS_packed\" where\n    \"SINVAR_LIB_BLPtrusted \\<equiv> \n    \\<lparr> nm_name = ''BLPtrusted'', \n      nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n      nm_default = SINVAR_BLPtrusted.default_node_properties, \n      nm_sinvar = sinvar,\n      nm_offending_flows = BLP_offending_list, \n      nm_node_props = NetModel_node_props,\n      nm_eval = BLP_eval\n      \\<rparr>\""], ["", "interpretation SINVAR_LIB_BLPtrusted_interpretation: TopoS_modelLibrary SINVAR_LIB_BLPtrusted \n      SINVAR_BLPtrusted.sinvar"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_modelLibrary SINVAR_LIB_BLPtrusted SINVAR_BLPtrusted.sinvar", "apply(unfold TopoS_modelLibrary_def SINVAR_LIB_BLPtrusted_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''BLPtrusted'',\n              nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n              nm_default = SINVAR_BLPtrusted.default_node_properties,\n              nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = BLP_eval\\<rparr>) \\<and>\n    TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     SINVAR_BLPtrusted.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < length\n         (nm_name\n           \\<lparr>nm_name = ''BLPtrusted'',\n              nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n              nm_default = SINVAR_BLPtrusted.default_node_properties,\n              nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n              nm_node_props = NetModel_node_props,\n              nm_eval = BLP_eval\\<rparr>)\n 2. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     SINVAR_BLPtrusted.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl\n     (nm_default\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     SINVAR_BLPtrusted.sinvar\n     (nm_sinvar\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_receiver_violation\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_offending_flows\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_node_props\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)\n     (nm_eval\n       \\<lparr>nm_name = ''BLPtrusted'',\n          nm_receiver_violation = SINVAR_BLPtrusted.receiver_violation,\n          nm_default = SINVAR_BLPtrusted.default_node_properties,\n          nm_sinvar = sinvar, nm_offending_flows = BLP_offending_list,\n          nm_node_props = NetModel_node_props, nm_eval = BLP_eval\\<rparr>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TopoS_List_Impl SINVAR_BLPtrusted.default_node_properties\n     SINVAR_BLPtrusted.sinvar sinvar SINVAR_BLPtrusted.receiver_violation\n     BLP_offending_list NetModel_node_props BLP_eval", "by(unfold_locales)"], ["", "subsubsection\\<open>Example\\<close>"], ["", "(*TODO*)"], ["", "export_code SINVAR_LIB_BLPtrusted checking Scala"], ["", "hide_const (open) NetModel_node_props BLP_offending_list BLP_eval"], ["", "hide_const (open) sinvar"], ["", "end"]]}